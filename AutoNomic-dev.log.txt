01/03 15:42:42*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #autonomic-dev: NANANANANAND
              *** Topic set by koom_ on Sun Sep 24 10:06:26 2017, 3 months 11 days 6 hours 36 minutes 17 seconds ago
              *** Names: editable-koo stoopkid daemoz @HMCa
              *** End of /NAMES list.
01/03 22:30:20*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/03 22:30:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/04 02:28:25-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/04 06:12:31*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gjgbyyslswtxebcb) left #autonomic-dev: Quit: Connection closed for inactivity
01/04 10:17:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bmdazvbmtizvhdyc, stoopkid: stoopkid)
01/04 12:18:21<stoopkid> "Loading failed for the <script> with source “http://167.88.171.233/wiki/load.php?debug=false&lang=en&modules=startup&only=scripts&skin=vector”."
01/04 12:19:46<stoopkid> anyone else getting this error when accessing the wiki or is it just my browser preventing a script from loading
01/04 12:22:00<stoopkid> dammit, forgot i need to be testing this wiki out on... every browser heh
01/04 12:27:17<stoopkid> editable-koo: i'm thinking we do need to set up a 2nd mediawiki instance so that i can make changes there & test & then switch out the instances and git pull to the other one and continue editing there
01/04 12:27:47<stoopkid> so then all my messing around doesn't show up on the public instance
01/04 12:34:10<stoopkid> in case anybody else is wondering what specifically we're doing here: i tend to drag all kinds of related projects into autonomic and end up with monolithic conceptualizations that i don't know what to do with, so i'm putting in some effort to get a bit more organized and separate things out into different projects so that they can be developed independently of each other rather than holding each other back
01/04 12:35:02<stoopkid> so i'm trying to configure a wiki instance to support multiple separate wikis that can share some resources
01/04 12:36:11<stoopkid> unfortunately apparently the main method provided for configuring mediawiki instances is direct modification of their PHP codebase, so this has been a bit more slow-going than i had originally intended, but.. making progress
01/04 22:05:42<stoopkid> alright looks like we succeeded
01/04 22:07:30<stoopkid> so now we've got separate wikis all in one install and can use that to separate out the projects while keeping it easy to share resources, for example:
01/04 22:07:32<stoopkid> http://167.88.171.233/AutoNomic/Main_Page
01/04 22:07:45<stoopkid> http://167.88.171.233/Orange/Main_Page
01/04 22:10:57<stoopkid> got a couple aesthetic details still to clean up and then to make a somewhat better UI for configuring a multi-wiki setup rather than having to hardcode the configs into the PHP
01/04 22:13:12<stoopkid> all the functionality seems to be in place though, so, one step closer to being back to actual autonomic dev
01/04 22:16:25<stoopkid> editable-koo: now that we've got it about where we want it we need to start looking at backup / restore & automated deployment
01/05 08:54:55*** Join: koom (~sirdancea@109.107.211.244, (unauthenticated): realname)
01/05 18:41:42*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 260 seconds
01/05 21:19:38*** Join: stoopkid_ (uid137696@gateway/web/irccloud.com/x-rdctkfqdypwbgfop, stoopkid: stoopkid)
01/05 21:26:36*** Nick regain: stoopkid_ (uid137696@gateway/web/irccloud.com/x-rdctkfqdypwbgfop) is now known as stoopkid
01/05 23:26:08*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/05 23:26:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/06 07:38:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/06 07:39:15*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/07 04:26:13*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rdctkfqdypwbgfop) left #autonomic-dev: Quit: Connection closed for inactivity
01/07 08:25:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/07 08:25:27*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/07 11:47:51*** Netmerge: *.net *.split, split 15 hours 47 minutes 34 seconds ago (Use /WL to see who's still missing)
01/07 18:04:46-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/08 04:22:27-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/08 05:42:18*** Join: koom (~sirdancea@109.107.211.244, (unauthenticated): realname)
01/08 05:44:15-SaslServ- kook!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
01/08 05:56:57*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Remote host closed the connection
01/08 05:57:41*** Join: kook (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/08 06:00:57<kook> HMCa, maybe you can help sell these tokens?
01/08 06:19:12*** Quit: kook (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 264 seconds
01/08 08:02:21<stoopkid> editable-koo: no, neither HMC nor i could participate in really much capacity at all beyond publicly answering questions about general theory & practice, and by working directly on the autonomic core that your token would hypothetically run on, at least until post-genesis
01/08 08:09:01<stoopkid> oh woops you're talking about the agoras donations, thought you were referring to ICO or something
01/08 14:37:43-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/08 14:37:49*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/08 17:10:52*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 265 seconds
01/08 19:07:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/08 21:33:38*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
01/09 03:50:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/09 06:08:07*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 255 seconds
01/09 08:03:34*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/09 08:14:26*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 252 seconds
01/09 19:31:24*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/09 19:31:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/10 03:07:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 276 seconds
01/10 03:09:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/10 03:19:53*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 248 seconds
01/10 03:24:05*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/10 21:19:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/10 21:19:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/11 18:45:30*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jswrzncfqnccsfze) left #autonomic-dev: Quit: Connection closed for inactivity
01/11 21:14:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-puxdjdcfgaccgfmx, stoopkid: stoopkid)
01/12 01:04:27*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/12 01:04:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/12 08:15:55*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/12 08:16:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/12 20:26:07*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/12 20:27:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 264 seconds
01/12 20:27:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/12 20:30:50*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 276 seconds
01/12 22:00:20*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/12 22:00:40*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/13 06:44:26*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 276 seconds
01/13 06:56:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/13 07:04:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 255 seconds
01/13 07:27:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/13 15:46:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/13 15:47:09*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/13 16:16:07-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/13 16:16:19*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/13 22:22:42*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
01/14 00:03:38*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-puxdjdcfgaccgfmx) left #autonomic-dev: Quit: Connection closed for inactivity
01/14 01:54:50*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-sqjjvshconnyxqnp, stoopkid: stoopkid)
01/14 04:47:50-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/14 04:47:56*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/14 06:12:45*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 255 seconds
01/14 18:36:55-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
              *** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/14 21:48:52*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/14 21:52:17*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/15 09:35:30*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 276 seconds
01/15 13:06:38-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/15 13:06:45*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/15 20:25:30*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
01/16 00:48:51-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/16 00:48:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/16 03:46:36*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
01/16 05:52:50-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/16 05:52:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/16 10:28:58*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
01/16 23:56:58*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 255 seconds
01/17 00:13:48*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/17 21:25:24*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/17 21:25:42*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/18 02:09:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/18 02:09:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/18 14:24:21-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/18 14:24:27*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/18 15:40:22*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
01/18 15:50:13-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/18 15:50:19*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/18 18:15:25*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
01/19 02:04:33-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/19 02:04:39*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/19 06:13:23*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
01/19 10:39:38-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/19 10:39:44*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/19 12:47:09*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 268 seconds
01/19 13:34:29-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/19 13:34:35*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/19 13:54:31*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 260 seconds
01/19 17:38:40*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/19 17:38:59*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/19 19:33:21-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/19 19:33:26*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/19 21:16:01*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 248 seconds
01/20 00:12:12-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/20 00:12:18*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 05:26:40*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 248 seconds
01/20 06:32:31-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/20 06:32:36*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 09:05:54-SaslServ- kook!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/20 09:06:00*** Join: kook (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 09:06:34*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
01/20 09:53:46*** Quit: kook (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 268 seconds
01/20 10:17:39-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/20 10:17:45*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 10:22:59*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 260 seconds
01/20 12:39:15-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/20 12:39:21*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 12:52:32*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 248 seconds
01/20 14:44:51<editable-koo>123
01/20 15:08:35<daemoz> 456
01/21 01:20:26*** Quit: HMCa (~root@37.153.110.58) left #autonomic-dev: Ping timeout: 240 seconds
01/21 07:10:03<editable-koo>stoopkid: does this ping you?
01/21 07:10:22<editable-koo>i was trying to install agda with cabal but it fails
01/21 07:10:33<editable-koo>so i installed the repo version
01/21 07:10:41<editable-koo>its got emacs-mode too
01/21 07:10:58<editable-koo>but doesnt support .lagda.md
01/21 07:11:36<editable-koo>daemoz: wanna play in agda with us tonight?
01/21 08:39:14*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/21 08:39:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/21 09:16:02-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/21 09:16:07*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)




01/21 10:37:59*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Remote host closed the connection
#autonomic-dev> 01/21 18:40:16*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #autonomic-dev: NANANANANAND
              *** Topic set by koom_ on Sun Sep 24 10:06:26 2017, 3 months 29 days 9 hours 33 minutes 50 seconds ago
              *** Names: editable-koo daemoz stoopkid
              *** End of /NAMES list.
01/21 20:20:55<daemoz> editable-koo: that sounds fun. depends on what time.
01/21 20:21:09<daemoz> oh, that was a while ago.
01/22 02:38:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/22 02:39:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/22 13:24:03<editable-koo>daemoz: we will hopefully be at it most days of this week
01/22 13:25:00<editable-koo>as on houres, we dont have a schedule
01/22 13:25:03<editable-koo>hours
01/22 18:02:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/22 18:05:37*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/22 21:28:39<daemoz> Cool. I'd like to be around,  hopefully it'll make some of this stuff make more sense to me. How/where are you guys doing it?
01/23 00:13:30*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-sqjjvshconnyxqnp) left #autonomic-dev: Quit: Connection closed for inactivity
01/23 02:25:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 248 seconds
01/23 02:37:34*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/23 02:58:36*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/23 03:18:29*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/23 06:54:38*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/23 07:01:04*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/23 07:03:33*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
01/23 09:28:55*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wborcpznpdwjlspa, stoopkid: stoopkid)
01/23 10:13:26<stoopkid> daemoz: we ssh into a VPS that koo set up and then use tmux to share a screen
01/23 12:07:17*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
01/23 12:52:19*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/23 13:19:07<daemoz> stoopkid: cool, I do that with friends when teaching them linux.
01/23 13:29:04<stoopkid> nice that's how koo taught me linux heh
01/23 13:30:23<daemoz> :D
01/23 13:30:58<daemoz> I downloaded emacs and agda-mode and was messing around in it a little bit. Is that what is being used?
01/23 13:31:32<stoopkid> yep
01/23 13:31:35<daemoz> rad
01/23 13:40:06<daemoz> I'd love to mess around the next time you guys do that.
01/23 13:43:17<stoopkid> alright got a pubkey?
01/23 13:46:18<editable-koo>cool
01/23 13:47:32<daemoz> yeah how do you want me to get it to you?
01/23 13:50:40<editable-koo>just paste it here
01/23 13:51:29<daemoz> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9X7D2dA6O8cadyT2A28EVswnW2E++lSr3zzNuVPy4AJaHyTTBgFGZVqLrqQ6wDuaGdp64DOrrfuZ6qcQavkM4GpDiDRuCwskBDdLaF4d8jUQ0V1L7sERT1TaDLgMv0C4UdnCGHGSbJeuoU6WHGy7Z3nQh/mZ85u3SGbTL7V99jINiaERv29i1d8I0sBUPfL/EJNE8sp6uhgtGlXdyQJ46bBq4rIKUU+ZXQusHT1NAK/1WeV7ri4rWT2vwLmRsX3mv5qftyyAM6bVier1aIjTIy8+WmnXEQ1cjd6SkDG5wBameGU6eTxQC2n6eNGe0XGwQCCPzBrajhg5tCKFwDP1z daemoz@apollo8
01/23 13:52:41<editable-koo>ssh user@167.88.171.233 -p 44
01/23 14:11:29<stoopkid> daemoz: we're trying to prove stuff about lambda calc, lemme know if you have any questions about it
01/23 14:11:48<daemoz> Gotcha. koo is running me through one of the simpler files right now.
01/23 14:17:07<editable-koo>the lags are silly
01/23 14:32:45<stoopkid> are you guys editing lc-essentials?
01/23 14:32:52<daemoz> yeah
01/23 14:32:59<daemoz> we have another sesh
01/23 14:34:07<stoopkid> can you guys change the definition of if_then_else_ to use "{i : Level} -> {A : Set i} -> ..." instead of just "{A : Set}" and then save it?
01/23 14:34:17<daemoz> yeah. one sec.
01/23 14:36:07<daemoz> {i: Level} cannot appear by itself
01/23 14:36:36<daemoz> nvm.
01/23 14:36:45<daemoz> written.
01/23 14:36:52<editable-koo>here we go
01/23 14:36:54<editable-koo>whitespace
01/23 14:36:57<editable-koo>saved
01/23 14:37:01<daemoz> weird that that mattered.
01/23 14:37:10<stoopkid> cool thanks
01/23 15:14:09<koom> emacs just decided to ignore me for a while there
01/23 15:31:44<stoopkid> bleh, these proofs are tricky and my brain is working even less than it was earlier XD
01/23 15:32:14<koom> we are trying to install agda stdlib, or something
01/23 15:32:28<daemoz> 'or something' is correct. lol
01/23 15:32:55<daemoz> why are haskell/agda build systems package managers so obtuse
01/23 15:33:06<daemoz> *build systems and ..
01/23 15:34:04<koom> they dont care about us mortals
01/23 15:34:34<koom> i spent the whole evening the other day, to finally get it all working with stack
01/23 15:34:48<koom> current agda + emacs mode
              <daemoz> I was glad to have found some /relatively/ simple install instructions for using agda-mode
01/23 15:35:21<daemoz> I think on the agda wiki
01/23 15:35:42<koom> what os are you running locally?
01/23 15:36:04<koom> just curious
              <daemoz> arch
01/23 15:36:48<koom> i think i was able to install agda and emacs-mode from the repo in the vps ubuntu, but it was quite old
01/23 15:36:49<daemoz> That probably simplified things further, I'm sure I just used the arch official package for haskell/etc
01/23 15:37:15<koom> yea must be nice
              <daemoz> main reason I stay on this distro
01/23 15:37:24<koom> maybe ill try it someday
01/23 15:38:32<stoopkid> bleh i have to start my proof over because i tried inducting over subterms instead of over depth and ofc substitution breaks it :(
01/23 15:38:34<daemoz> would recommend, makes it very easy to stay up-to-date and there's an official and well maintained install script for almost all things one would run into.
01/23 15:39:16<daemoz> stoopkid: wish I knew what that meant. I popped over to your sesh for a sec and quickly reached my complexity cap.
01/23 15:39:55<stoopkid> yea you dont wanna dive right into the middle of it, there's some more basic proof stuff at the bottom of lc-essentials
01/23 15:40:14<daemoz> Getting there~
01/23 15:40:34<koom> yea i caused a bit of a detour trying to make something compile and run and print stuff
01/23 15:41:46<stoopkid> haha, agda side-effects are a mess imo
01/23 15:44:26<stoopkid> here's how i describe it: idris has the wrong idea about how effects should work, and agda has no idea lol
01/23 15:46:46<daemoz> hahaha
01/23 15:47:56<editable-koo>lol
01/23 15:55:42<stoopkid> i personally don't even bother with it, MLTT is a proof framework, imo (unless we made ridiculously far advances in the correspondence between proofs and low-level algorithms) you want to have the least amount of algorithms/effects/etc.. happening at that level and push as much as humanly possible into objects that you can do math about. when working locally this would ideally be a model of your machine (at
              <stoopkid> some level of abstraction), but how/when things should cross the boundary between the math-engine and the side-band processes on the rest of your machine is something i'm still trying to figure out, and on autonomic the situation is made more confused by having to run both the math & the algorithms in a decentralized environment
01/23 15:59:54<koom> i suspect the lags are only happening when sharing screen/tmux?
01/23 16:00:29<stoopkid> the situation is basically, a bunch of mathematicians are trying to figure out what to make their system do *outside* of the math they've been able to figure out, and the results are... as you'd maybe expect :)
01/23 16:00:30<koom> *i am suspecting
01/23 16:01:03<stoopkid> possibly, i've been in one or the other pretty much any time i've been logged in
              <daemoz> Yeah.. The translation element from the pure side to the impure side of things will be a difficulty for sure.
01/23 16:01:16<daemoz> I've not had lag to this degree when sharing sessions in/on any other machine.
01/23 16:02:03<stoopkid> i'm still not having particularly bad lag except for couple second spikes every minute or so
01/23 16:04:35<koom> yeah we never had such lags on other vps' as well
01/23 16:08:50<koom> effects can be like a separate milestone 
01/23 16:38:20<koom> stoopkid, we arent gonna print anything, unless we re-define some to-string functions for your types, right?
01/23 16:38:57<koom> ah, its not so hard though
01/23 16:40:17<stoopkid> yea i'd imagine we'd have some stringify functions if we were going to print these objects
01/23 16:44:38<koom> daemoz, still around?
01/23 16:45:03<koom> it works heh
01/23 16:45:14<daemoz> yes! I saw. I added a hurrah or something somewhere in there.
01/23 16:45:27<koom> hehe
01/23 16:45:37<stoopkid> got it printing?
01/23 16:45:44<koom> yea true and false
01/23 16:45:52<stoopkid> cool
01/23 16:48:26<stoopkid> the main function should let you make inflooping programs, i've never tried taking user input with it though
01/23 16:49:38<koom> whats this doing? 
              <koom> data False : Set₀ where
              <koom> omega : ∀ {i} -> {A : Set i} -> False -> A
              <koom> omega ()
01/23 16:49:47<daemoz> also curious.
01/23 16:50:04<koom> maybe stoop is too
01/23 16:50:07<daemoz> upside down a I think is forall
01/23 16:50:18<daemoz> lol
01/23 16:50:54<koom> yea for all indexes of Set
01/23 16:51:08* daemoz remembered a thing
01/23 16:51:22<daemoz> yay
01/23 16:51:42<koom> for all types in that Set level, or something
01/23 16:51:53<stoopkid> this is the principle of explosion, False proves everything
01/23 16:52:45<stoopkid> the omega () is something for how Agda compiles it down to Haskell and i don't remember exactly how that works or why that needs to be there, but, the main thing is the line with the forall
01/23 16:53:48<koom> so, omega () is one constructor, and the first line is another, yeah?
01/23 16:54:53<koom> shiny
01/23 16:55:14<stoopkid> technically it's an eliminator, constructor tells what you can derive False from (which shouldn't be anything but any inconsistency in your logic), eliminator tells what you can derive from False, which is everything
01/23 16:55:28<stoopkid> but an*
01/23 16:55:37<stoopkid> well, "any" works too :)
01/23 16:56:13<koom> whats the curly brackets?
01/23 16:56:40<koom> so, given a type and a False, you get a member of that type?
01/23 16:56:41<stoopkid> implicit arguments, you can leave them out if Agda can infer what they are from the context
01/23 16:56:48<stoopkid> yes
01/23 16:57:29<koom> and the only False you could pass it is the omega?
01/23 16:58:00<stoopkid> other way around, since it's an eliminator: you pass an element of False to omega and get a member of that type
01/23 16:58:50<koom> but the only element of False you can construct is with the "omega ()" constructor?
01/23 16:59:18<koom> err
01/23 16:59:29<stoopkid> no, False has no constructors, so the only way you could get one is with A and (A -> False), i.e. a contradiction
01/23 16:59:44<stoopkid> well, maybe i should say B and (B -> False), for some B, since we're using A in the definition there
01/23 17:00:18<stoopkid> so if you have b : B, and not-B : B -> False, then not-B b : False
01/23 17:00:46<stoopkid> theoretically you should never actually be able to have an object of type False, because you should never be able to actually have a contradiction
01/23 17:01:17<stoopkid> on the other hand, you can prove things under the assumption of other things
01/23 17:02:06<stoopkid> if those assumptions contain contradictions, then you can prove False, under those assumptions
01/23 17:02:50<stoopkid> so, remember what i was saying about "formally skipping the impossible cases"? this is how you do that
01/23 17:03:33<koom> maybe we should start with something easier
01/23 17:03:52<stoopkid> then lambda calc proofs? maybe
01/23 17:03:54<stoopkid> than*
01/23 17:04:44<daemoz> brb for an hour or so.
01/23 17:04:54<koom> than this False thing
01/23 17:05:34<stoopkid> the False thing is really easy
01/23 17:05:58<stoopkid> what kinds of statements are false statements?
01/23 17:06:23<stoopkid> what's the evidence for falseness?
01/23 17:11:04<stoopkid> a statement can't be false without containing a contradiction
01/23 17:11:20<stoopkid> falseness is equivalent to inconsistency
01/23 17:12:31<koom> how could you ever have a function taking B and returning False, if you'd need such a function to even construct False?
01/23 17:16:23<stoopkid> you don't necessarily need such a function, you can also start directly with the assumption of an object of type False
01/23 17:16:33<stoopkid> for example, False-id : False -> False; False-id x = x
01/23 17:17:03<stoopkid> True=/=False : (True == False) -> False
01/23 17:17:39<stoopkid> True=/=False (assumption-that-True-equals-False) = the object in type True because you're assuming that True and False are the same type
01/23 17:19:01<stoopkid> i usually bootstrap other inequalities from this lemma, by finding a function that will map one of the objects to True, and one of the objects to False, and using another lemma that shows that functions applied to equal inputs have equal outputs
01/23 17:19:47<koom> definitely need to start with something more commonsense
01/23 17:20:11<koom> biab too
01/23 17:24:20<stoopkid> hrm, idk this is pretty common sense to me, maybe i'm not explaining it right
01/23 17:30:51<stoopkid> so, A -> (A -> False) -> False, that's just modus ponens / function application
01/23 17:31:25<stoopkid> so, given any inhabited type A, call one of it's inhabitants x, we should have (A -> False) -> False
01/23 17:32:01<stoopkid> apply the function f : A -> False to x : A and we get f x : False
01/23 17:32:37<stoopkid> so if A is true, not not A should be true, right? double negatives (except they don't work in reverse :)
01/23 17:33:17<stoopkid> so, what's some inhabited type, how about True, it's got an object called unit
01/23 17:33:25<stoopkid> (True -> False) -> False
01/23 17:33:54<editable-koo>what do you mean  we should have (
01/23 17:34:00<editable-koo>A -> False) -> False
01/23 17:34:32<stoopkid> it's basically just a restatement of modus ponens
01/23 17:39:57<stoopkid> so if i have an inhabited type, like True, then the type (True -> False) -> False will be inhabited
01/23 17:40:08<stoopkid> proof : (True -> False) -> False
01/23 17:40:12<stoopkid> proof f = f unit
01/23 17:40:56<stoopkid> this is common sense because it's just saying "not (not (something that is true))" is also something that is true
01/23 17:42:04<stoopkid> it's also saying that if you have a function from an inhabited type to an empty type, then you can construct an object in that empty type, because there's an object in the inhabited type to apply the function to, and every function maps every input to *exactly* one output
01/23 17:46:05<stoopkid> now, let's say you have A == B, where A and B are types/sets/propositions. then (A == B) -> (A -> B)
01/23 17:47:47<stoopkid> that's pretty straightforward, if A and B are the same set, well, every set has a function from itself back to itself, the identity function
01/23 17:48:00<stoopkid> and every proposition implies itself
01/23 17:49:25<stoopkid> apply this to A = True, B = False, you get (True == False) -> (True -> False)
01/23 17:50:41<stoopkid> but then we already proved that (True -> False) -> False, so, if we assume (True == False), then we can apply the proof of (A == B) -> (A -> B) to get a proof of (True -> False), and then apply the proof of ((True -> False) -> False) to get False
01/23 17:51:07<stoopkid> and that demonstrates that (True == False) -> False, or, in other words, True =/= False
01/23 17:52:19<stoopkid> now let's say we want to prove (true =/= false), where true and false are the objects in Bool
01/23 17:52:36<stoopkid> then we can make this function BoolToSet, maps true to True, false to False
01/23 17:53:13<stoopkid> functions preserve equality, applying the same function to the same argument yields the same result
01/23 17:55:15<stoopkid> so (true =/= false) is the same as (true == false) -> False
01/23 17:55:39<stoopkid> so i have to prove False, under the assumption that true == false
01/23 17:56:08<stoopkid> well, assuming true == false, then BoolToSet(true) == BoolToSet(False), so True == False, but then, we know that this derives False
01/23 17:57:31<stoopkid> theoretically you could add extra axioms to the logic, like:
01/23 17:57:42<stoopkid>   0 == 1
              <stoopkid> --------------
              <stoopkid>   False
01/23 17:58:29<stoopkid> but, i kinda just demonstrated that we don't need to
01/23 17:59:01<stoopkid> maybe you could think of more sensible ways to do it? this is kinda getting down to philosophy of math/logic though :)
01/23 17:59:08<stoopkid> muahaha finally roped you in :P
01/23 18:00:28<editable-koo>would be nice, but im really just struggling to even read agda
01/23 18:06:25<koom> daemoz, neat trick, C-c C-n lets you type in and eval an expression
01/23 18:13:51<stoopkid> so, every type X in agda that you're going to be able to prove false, you're going to have to be able to derive (A -> False) from X, for some inhabited type A, and then use modus ponens to derive False
01/23 18:14:18<stoopkid> but i'm trying to figure out if there's any other types X that don't just amount to containing something of the form (A -> False) or (A == False) already
01/23 18:16:19<stoopkid> and if not, then why are these two special, and should they be
01/23 18:18:04<stoopkid> idk, after i used this stuff to prove a couple basic things like true =/= false, and 0 =/= suc n, for any n, everything started to just look like normal math
01/23 18:18:38<stoopkid> though, maybe slightly more verbose than it needs to be
01/23 18:21:18<editable-koo>im gonna get some sleep and continue with http://williamdemeo.github.io/2014/02/27/learn-you-an-agda/ tomorrow
01/23 18:26:46*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
01/23 19:04:33<stoopkid> hrm, daemoz got any thoughts on the False thing?
01/23 19:14:16<stoopkid> an example of how you actually use it, say i want to make a proposition that says for every Bool x, such that x == true, then P(x), for some proposition P
01/23 19:14:32<stoopkid> then i'll make a function of the following type (or something equivalent): 
01/23 19:16:06<stoopkid> proof : (x : Bool) -> x == true -> P x
01/23 19:16:47<stoopkid> so, let's say i case split on Bool, my function would be of the following form:
01/23 19:16:49<daemoz> I'd love to say I'm following but if I am, it's very loosely. You've definitely lost me in that there's a comparison in the type signature 'x == true', how can that be?
01/23 19:17:11<stoopkid> ah, propositions are types
01/23 19:17:32<daemoz> I see
01/23 19:17:45<daemoz> And that is dependant-types?
              <daemoz> (an example of)
01/23 19:19:14<stoopkid> yep, whenever you a type that looks more like a math/proposition thing than a type, it's probably a dependent type
01/23 19:19:18<daemoz> Sweet.
01/23 19:20:48<daemoz> so the thinking is that, for instance, (A == B) -> (A -> B). That this means that if A==B a fn could be deduced(inferred?) that's type was (A -> B)?
01/23 19:21:03<daemoz> and there is only one of these.
01/23 19:24:56<stoopkid> right, wrt the first sentence, and also wrt the second sentence *but*, that's possibly just sort of a "coincidence" (though also might not be and might be something deeper there wrt the fact that there's just one function satisfying this, and which function that happens to be)
01/23 19:25:59<daemoz> Okay, that sounds interesting but also I could get lost thinking in that direction :P
01/23 19:26:56<daemoz> And then further on the first part. You can provide proofs without ever using an actual object of type False, by stating things like (true == false) -> False
01/23 19:27:24<stoopkid> well it's sort of a maze so we're all kind of lost by default already :)
01/23 19:28:35<daemoz> Fair
01/23 19:28:37<daemoz> hahah
01/23 19:28:59<stoopkid> right, you can prove things like "X implies False", you just can't prove "False"
01/23 19:29:29<stoopkid> nor should we want to :) kind of makes the definition of an "empty type" meaningless if it's inhabited :)
01/23 19:30:02<daemoz> I like that that's encoded rather than just  having the empty type be a special case :)
01/23 19:30:21<daemoz> see: every other language haha
01/23 19:31:54<stoopkid> heh, well, this interpretation of False / negation is kinda a central point of constructive logic after all :)
01/23 19:32:12<daemoz> I like it
01/23 19:33:07<stoopkid> well if you like this, you'll love model theory heh
01/23 19:35:16<stoopkid> type theory's a lot like model theory. in model theory you have some sentence like "x + y = z", starts off as just meaningless symbols, then it talks about how you translate these meaningless symbols into "possible worlds", like, for example, you might send x y and z to nodes in a graph, + is a binary operation on the nodes and = is some binary relation
01/23 19:36:49<daemoz> like a tree?
01/23 19:37:30<daemoz> (know very little about graph/model stuff)
01/23 19:37:55<stoopkid> sure, or could interpret it into the Nats with x as 2, y as 3, z as 5, + as regular addition, and = as regular equality
01/23 19:39:15<stoopkid> so yea graphs are just a set of objects with a set of edges between them, so like the Nats is an infinite set of objects with the edges (0,1), (1,2), (2,3), (3,4), ..., all labeled "successor"
01/23 19:40:37<daemoz> cool. that's simple enough.
01/23 19:44:31<stoopkid> so, generally the logical connectives, NOT, AND, OR, IMPLIES, EXISTS, FORALL, and sometimes equality are considered separate from operations & relations, so, they have fixed interpretation, like "&" just means "and", whereas "+" you might interpret into any arbitrary operation, "successor" you might interpret as any arbitrary binary relation
01/23 19:45:24<stoopkid> you can tweak that framework but that's like the standard starting point at least
01/23 19:46:31<stoopkid> so, if you have a fixed interpretation of NOT / negation, then you can make statements that could not be satisfied in any possible world no matter how you interpret the other symbols
01/23 19:46:49<stoopkid> like, "P & NOT(P)" for any arbitrary statement P
01/23 19:48:57<stoopkid> so in model theory, these statements are called "theories", and the possible worlds (the graphs or whatever that you interpret the symbols into) that satisfy a statement are called "models of the theory"
01/23 19:50:27<stoopkid> so, this is analogous to in type theory: statements == theories == propositions == types
01/23 19:51:04<daemoz> interesting
01/23 19:51:07<stoopkid> but, it differs a bit on the other side of things; type theory considers the objects of the type to the proofs of the proposition that it corresponds to
01/23 19:52:19<stoopkid> that's a proof-theoretic / syntactic thing; model theory on the other hand is considering objects of types to actually be the sets of possible worlds satisfying the proposition that the type corresponds to; a semantic thing
              <daemoz> and, put simply, there can only be one proof of each proposition?
01/23 19:53:17<stoopkid> if a proposition has a proof it has infinite proofs, but in some cases they might all normalize to the same proof, in other cases they won't
01/23 19:53:27<stoopkid> for example "A OR B"
01/23 19:53:35<stoopkid> A could be a proof, or B could be a proof
01/23 19:53:37<stoopkid> different proofs
01/23 19:54:25<stoopkid> and then if A is a proof, (id A) is also a proof, where id is the identity function
01/23 19:54:35<stoopkid> but ofc, normalizes back to A
01/23 19:54:37<daemoz> right
01/23 19:55:02<daemoz> but there can be cases where there are discrete proofs to the same prop?
01/23 19:57:28<stoopkid> sure
01/23 19:58:21<stoopkid> there's not necessarily just one way to prove something
01/23 19:59:03<daemoz> Alright I guess I'm getting hung up on the above statement about the 'coincidence'
01/23 19:59:18<daemoz> Or is that for propositions, and not proofs
              <stoopkid> you're familiar with parametric polymorphism?
01/23 20:00:28<stoopkid> there's effectively only one function with the type (A : Type) -> A -> A
01/23 20:00:38<stoopkid> this would be the polymorphic identity function
01/23 20:00:53<stoopkid> you start with:
01/23 20:00:58<stoopkid> func : (A : Type) -> A -> A
01/23 20:01:03<stoopkid> func A a = ...
01/23 20:01:40<stoopkid> what can i put for the return value? i need some object of type A, but without any further information on what object A is, i can only grab that value "a" from my assumptions
01/23 20:01:47<stoopkid> func A a = a
01/23 20:03:20<stoopkid> compare this with:
01/23 20:03:43<stoopkid> (A  B : Type) -> (A == B) -> (A -> B)
01/23 20:03:58<stoopkid> well, if A == B, this is a lot just the same as (A : Type) -> (A -> A)
01/23 20:05:16<stoopkid> and that's pretty much what the proof of (A == B) -> (A -> B) amounts to in Agda
01/23 20:06:37<stoopkid> basically since you have that A == B in the assumptions, you just prove:
01/23 20:06:56<stoopkid> (A A : Type) -> (A == A) -> (A -> A) 
01/23 20:08:09<stoopkid> but then, this is pretty much just that polymorphic identity function type again
01/23 20:08:45<stoopkid> so all you can give as the proof is basically a slightly different version of the polymorphic identity function
01/23 20:10:37<stoopkid> ok so what if we try this other polymorphic type:
01/23 20:10:42<stoopkid> (A : Type) -> A -> A -> A
01/23 20:10:57<stoopkid> func A x y = x
01/23 20:11:01<stoopkid> there's one proof
01/23 20:11:04<stoopkid> func A x y = y
01/23 20:11:08<stoopkid> there's a different proof
01/23 20:12:16<stoopkid> and in general once you get into more complex math & logic, it will be the same as in normal experience with doing math on paper, there can be non-trivially different ways to arrive at the same result
01/23 20:15:52<stoopkid> follow so far?
01/23 20:18:28<daemoz> hold on
01/23 20:18:40<stoopkid> sure thing :)
01/23 20:23:01<daemoz> Okay, so there are no duplicate types, but there can be however many possible proofs, but often they normalize to around-the-same.
01/23 20:24:34<stoopkid> "duplicate types"? and, idk, how much more often do proofs of Nat normalize to the same proof than they do not-the-same-proof? :)
01/23 20:24:54<daemoz> Hrm, I'll think on that.
01/23 20:24:57<daemoz> I gotta jet for the night though.
01/23 20:25:18<daemoz> I'll catch up tomorrow morning and try to pick up there again, at least as far as my studies, idk if you'll be around.
01/23 20:25:43<stoopkid> yep, have a good night :)
01/23 21:36:50<stoopkid> bleh, passing around the freshest var complicates the inductions for a similar reason as why substitution complicates it in the first place
01/23 21:38:36<stoopkid> you start with the assumption that a proposition about subst1 holds at some height n, and then try to prove that the proposition will hold for subst1 on App t s where t and s are terms of height n or less
01/23 21:39:52<stoopkid> so to try to prove it, you use the definitions of subst1 (App t s) x y to try to reduce it to an expression in terms of subst1 t x y and subst1 s x y, which you're assuming something about
01/23 21:41:23<stoopkid> i've figured out how to fix the induction to account for the fact that substitution changes your subterms, but subst1 (App t s) x y is passing around the freshest var of (App s t), whereas subst1 s x y and subst1 t x y are passing around the freshest vars of s and t, respectively
01/23 21:43:28<stoopkid> so to finish this induction, i have to prove something about the relationship between the results of subst when using different variable ids for the freshest var
01/23 21:45:05<stoopkid> we'll run into this problem on all three versions of subst we have
01/24 02:03:32<stoopkid> alright, nearly solved it i think
01/24 03:12:13<stoopkid> dammit, i've been trying to prove something that's false XD
01/24 03:13:33<stoopkid> ok should hopefully only take a slight tweaking
01/24 03:25:06<stoopkid> ok cool just had to make a slight tweak in the types and didn't have to change anything about the partial proof i've given so far
01/24 03:28:19<stoopkid> needs another assumption than i had originally, but if you add this assumption into your types & add another parameter to your function definition, all your partial proof you've given in the body of the function definition still works, you just "haven't gotten to the part of the proof that requires that assumption yet"
01/24 03:36:15<stoopkid> so, i start off trying to prove alphaEq, and it requires an induction
01/24 03:36:59<stoopkid> trying to induct directly on the subterms doesn't work, because the substitution changes the subterms
01/24 03:38:05<stoopkid> so i fix this to induct based on height, but that doesn't work for App because you have subterms of two different heights, but then i figured out you could induct based on two different heights just fine
01/24 03:39:42<stoopkid> so, inducting based on height can work in AlphaEq because the only substitutions that are happening are substituting Vars for Vars, so then i'm trying to prove a sublemma that says that if you substitute Vars for Vars in a term T, you get a term of the same height as T
01/24 03:40:00<stoopkid> so then the inductive hypothesis can apply to those substituted terms, and the proof can go through
01/24 03:42:22<stoopkid> so, that sublemma requires an inductive proof of its own, but the inductive hypotheses fail because the freshest var id is different for the subterms than it is for the term
01/24 03:43:07<stoopkid> so you start with the proposition applied to the term and try to show how this would derive from the inductive hypotheses, and then if the inductive hypotheses are satisfied you complete your proof
01/24 03:45:02<stoopkid> except, it doesn't follow directly from the inductive hypotheses because when the inductive hypotheses state the proposition about the subterms, they use a different freshest var id than when you start from the original term
01/24 03:46:28<stoopkid> so then you have to prove that using a different freshest var id in your substitution doesn't change the height
01/24 03:46:47<stoopkid> ok so then this requires its own inductive proof
01/24 03:47:21<stoopkid> everything works out fine for the Var case, the App case, and every subcase of Abs until we get to the one that actually does the capture-avoidance
01/24 03:47:46<stoopkid> this is where the freshest var id actually gets used in order to do the capture-avoidance
01/24 03:49:00<stoopkid> but then, what does it effectively amount to proving in this case? that substituting Vars for Vars in a term T gives a term of the same height as T
01/24 03:50:12<stoopkid> but that's what i was already trying to prove, so, in order to complete this proof it seems i'd need a mutual induction between the proof about substituting Vars for Vars and the proof about using different freshest var ids
01/24 03:51:05<stoopkid> which could be tricky because of Agda's termination check
01/24 04:10:34<stoopkid> dammit and our substs are slightly broken
01/24 04:11:30<stoopkid> they need to initialize with the freshest var in either the term or the replacer
01/24 04:13:34<stoopkid> but, with that fix i think i know how to finish the proof, assuming the mutual induction works
01/24 06:23:30-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/24 06:23:36*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/24 06:49:46*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
01/24 13:09:29* stoopkid got lost in this proof and forgot about that whole "time management" thing
01/24 16:22:02<stoopkid> agda would be better in diagrams
01/24 16:23:23<stoopkid> i imagine having something like a CAD system for the proofs
01/24 16:24:38<stoopkid> Coq and nuprl are closer to this. i've played around in Coq, but, meh. haven't played around in nuprl though
01/24 16:25:44<stoopkid> so, you wanna prove various things to be equal, well, Agda already immediately knows a bunch of different equal terms through beta-equivalence
01/24 16:26:14<stoopkid> so i imagine just seeing those terms in a graph where the edges represent the equalities
01/24 16:27:36<stoopkid> then you could pick out an equality by tracing a path through graph, pull functions in and apply them to terms to generate new terms in the graph which will be linked out through other equalities, etc...
01/25 00:18:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wborcpznpdwjlspa) left #autonomic-dev: Quit: Connection closed for inactivity
01/25 04:44:53-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/25 04:44:59*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/25 04:45:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-candkqtntfukshmk, stoopkid: stoopkid)
01/25 04:45:17<koom> yo
01/25 04:45:41<stoopkid> yo
01/25 04:47:02<stoopkid> im gonna have some breakfast then ill be back
01/25 04:51:04<editable-koo>waking up
01/25 04:51:17<editable-koo>catching up
01/25 06:00:00<daemoz> morning
01/25 06:00:58<editable-koo>morning
01/25 06:01:19<daemoz> editable-koo and koom , you are different people? xD
01/25 06:01:45<editable-koo>no
01/25 06:02:00<daemoz> didn't think so :P
01/25 06:02:14<editable-koo>cant help it, im a certified schizo
01/25 06:03:57<editable-koo>so, i was reading Learn you an agda, and it was all good up until "How does it all relate to Agda?"
01/25 06:05:33<stoopkid> :)
01/25 06:05:45<editable-koo>http://williamdemeo.github.io/2014/02/27/learn-you-an-agda/
01/25 06:06:35<editable-koo>going over from the beginning..
01/25 06:09:29<editable-koo>   ZERO : zero even
01/25 06:11:40<editable-koo>is "zero even" just a fancy two word identifier with spaces, or does it have deeper meaning?
01/25 06:13:07<stoopkid> idk, is "function <arg>" just a fancy two word identifier with spaces or is it a function application
01/25 06:15:23<stoopkid> agda doesn't really have much as far as "fancy identifiers with spaces"
01/25 06:15:34<editable-koo>so, zero is a function that takes an argument? i thought it was maybe a constructor for Nat, taking 0 arguments
01/25 06:15:40<stoopkid> all the unicode symbols you can't render, no spaces though
01/25 06:15:54<stoopkid> ZERO is the constructor
01/25 06:16:11<stoopkid> even is the function
01/25 06:16:35<stoopkid> _even : Nat -> Set
01/25 06:16:40<stoopkid> _even zero : Set
01/25 06:16:42<stoopkid> zero even : Set
01/25 06:17:46<stoopkid> i thought it was maybe a constructor for Nat, taking 0 arguments
01/25 06:17:48<stoopkid> exactly
01/25 06:18:53<stoopkid> even is a function that takes Nats and returns propositions that ask whether that Nat is even
01/25 06:19:01<stoopkid> (roughly)
01/25 06:19:50<stoopkid> "zero even" is an inhabited set
01/25 06:20:04<stoopkid> "two even" is an inhabited set
01/25 06:20:08<stoopkid> "three even" is not
01/25 06:20:20<editable-koo>so, they "use the mix-fix name _even", so that "even" is the same as that "_even", yeah?
01/25 06:20:38<stoopkid> yea
01/25 06:22:54<stoopkid> the return types for the constructors for a type are always gonna be either that type, if it's just a regular type, or that type applied to args, in the case of a type family like _even
01/25 06:23:18<stoopkid> data Nat; 0 : Nat, suc : Nat -> Nat
              <stoopkid> Nat appears in return value of every constructor
01/25 06:23:32<stoopkid> they wouldn't really make sense as constructors of Nat if they returned anything other than Nats right?
01/25 06:23:38<stoopkid> same with _even
01/25 06:35:41*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 252 seconds
01/25 07:07:49-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/25 07:07:55*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/25 07:27:38<stoopkid> making any more sense now?
01/25 07:28:19<editable-koo>yeah just got back to reading...
01/25 07:37:54<stoopkid> so yesterday and the day before my brain wasn't working. today it's working alright (funny how sleep helps with that), but i think i've got food poisoning
01/25 07:38:58<stoopkid> ironically all this week i've put away all the junk & meats & such and have been trying to eat healthy
01/25 07:39:55<stoopkid> so i might not be good for much today, we'll see
01/25 07:40:55<editable-koo>yea? i spent the night on toilet i think tuesday night, then wednesday was good, just feeling a little nauseous after two hours of exercise, and today its diarrhea again
01/25 07:41:23<editable-koo>my nephew as well, and i dont quite see the connection either, had seen them only on sunday
01/25 07:41:49<editable-koo>maybe its something transferring itself over the internet
01/25 07:42:13<stoopkid> that'd be an interesting new feature
01/25 07:42:46<stoopkid> nah i'm a pretty terrible cook and have been trying to prepare all my own meals lately so i think i did this to myself
01/25 07:42:56<editable-koo>hah
01/25 07:43:43<stoopkid> i feel like my food's digesting me rather than the other way around haha
01/25 07:44:12<editable-koo>lol
01/25 07:44:28<editable-koo>what were you trying to cook?
01/25 07:47:41<stoopkid> and the puking begins... thank god, i've been waiting to get that out since i woke up
01/25 07:47:48<stoopkid> just veggies
01/25 07:49:15<editable-koo>thats curious, what did you screw up on veggies?
01/25 07:51:07<stoopkid> idk i thought i overcooked them if anything, all i know is it's been downhill ever since dinner last night
01/25 07:55:03<stoopkid> i might be wrong about the source of it, that's just my best guess since i have like 0 contact with the outside world besides my fiancee and she hasn't been sick
01/25 08:19:31<stoopkid> oy, why do they always try to make me learn category theory
01/25 08:28:47*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/25 08:29:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/25 08:43:56<editable-koo>so ive un-shittified the identifiers, and ive removed the postfix confuser
01/25 08:43:57<editable-koo>  data is-even : ? ? Set where
              <editable-koo>    ZERO-IS-EVEN : is-even zero
              <editable-koo>    SUCCSUCC-OF-EVEN-IS-EVEN : ? x ? (is-even x) ? is-even (suc (suc x))
              <editable-koo>  proof? : is-even (suc (suc (suc (suc zero))))
              <editable-koo>  proof? = SUCCSUCC-OF-EVEN-IS-EVEN (suc (suc zero)) (SUCCSUCC-OF-EVEN-IS-EVEN zero ZERO-IS-EVEN)
01/25 08:44:09<editable-koo>i still cant make sense of the last line
01/25 08:44:19<editable-koo>especially (SUCCSUCC-OF-EVEN-IS-EVEN zero ZERO-IS-EVEN)
01/25 08:45:06<editable-koo>or
01/25 08:45:22<editable-koo>alright i think i got it now
01/25 11:23:10<editable-koo>gotta take a nap from this
01/25 11:39:22<stoopkid> np i just woke up again lol
01/25 11:58:35<editable-koo>a friend called, guess what, he has diarrhea
01/25 11:58:42<editable-koo>its global
01/25 13:25:29<editable-koo>alright finished learn you an agda
01/25 13:25:39<editable-koo>what a shitty tutorial!
01/25 13:26:11<stoopkid> do you feel you know agda now?
01/25 13:26:22<editable-koo>not really
01/25 13:33:40<stoopkid> hrm, if you know learn-you-an-agda then you basically know agda
01/25 13:37:14<stoopkid> if you understand the curry-howard correspondence, and you have a reference for agda syntax, then you know agda
01/25 13:40:24<stoopkid> i'm guessing you want a "hello world" "take some user input" "sort a list" kinda tutorial?
01/25 13:57:19<stoopkid> so, we know that for regular programming tasks like that, agda's gonna be pretty terrible right, like at best it's gonna be "yet another pure functional programming language with a weird side-effects thing you have to figure out before you can do anything normal"
01/25 13:58:18<stoopkid> that's just a fact, and unfortunately i find that the more i dig into it, the less sensible i find the solutions to these standard programming problems by the different varieties of functional languages
01/25 13:59:04<stoopkid> agda is not what simon peyton jones would refer to as the "comp sci nirvana"
01/25 14:00:12<stoopkid> for regular programming tasks, there are regular programming languages
01/25 14:00:21<stoopkid> for math, there's agda
01/25 14:01:30<stoopkid> we didn't jump into agda to start coding up apps and stuff, we jumped into agda to ideally give you a more concrete look at rigorous formal proofs
01/25 14:03:35<stoopkid> and that being said, we've still gone ahead and coded up some algorithms like subst, and you've gotten it to start printing to the terminal
01/25 14:03:47<stoopkid> so i'd say you "don't know agda" like i "don't know SK combinators"
01/25 14:07:19<stoopkid> now, i'm personally not committed to staying in Agda at all, we're gonna be building our own MLTT and when we finish we'll be switching over to that and dropping Agda for good
01/25 14:07:34<stoopkid> i wasn't originally planning on getting into Agda at all until you wanted to check out proof stuff
01/25 14:08:28<stoopkid> so now that you've got a basic idea of some proof stuff, and have checked out some Agda, if Agda's not your thing and you'd rather just do the proofs on paper, well, that's what i was originally planning
01/25 14:13:29<editable-koo>well, id probably stick to agda, should make things easier for me
01/25 14:13:51<editable-koo>and no, im not looking for a "input your name" kind of tutorial
01/25 14:14:30<editable-koo>im just saying that i barely managed to decipher one one-line declaration
01/25 14:15:20<editable-koo>proof? = STEP (suc (suc zero)) (STEP zero ZERO)
01/25 14:15:32<editable-koo>dude keeps calling it a proof, but it seems to be a rule, to me
01/25 14:23:07<stoopkid> it's a proof
01/25 14:23:40<stoopkid> of the proposition "suc (suc (suc (suc zero))) even"
01/25 14:23:58<stoopkid> which says, in other words, "4 is an even number"
01/25 14:24:39<stoopkid> STEP is a rule that says "if you give me a number n, along with a proof that it's even, then i'll give you a proof that n + 2 is also even"
01/25 14:25:24<stoopkid> so, 4 = n + 2, what's n? 2 ofc
01/25 14:25:48<stoopkid> so STEP 2 <proof-that-2-is-even> will be a proof that 4 is even
01/25 14:26:06<stoopkid> we can prove that 2 is even using STEP again
01/25 14:26:15<stoopkid> 2 = n + 2, what's n? 0 ofc
01/25 14:26:42<stoopkid> so, 2-is-even = STEP 0 <proof-that-0-is-even>
01/25 14:26:58<stoopkid> well, they just give us that by definition, with the rule ZERO
01/25 14:27:27<stoopkid> so, STEP zero ZERO proves that suc (suc zero) (= 2) is even
01/25 14:27:49<stoopkid> and now we can substitute this proof into the one for 4:
01/25 14:28:02<stoopkid> STEP (suc (suc zero)) (STEP zero ZERO)
01/25 14:29:18<stoopkid> there's 4 different kinds of rules, and you'll ever work with 2 of them explicitly, and only 1 of them on a regular basis
01/25 14:29:56<stoopkid> you have type formation rules, like, what rules let us deduce that "List A" is a type, if we can deduce that A is a type
01/25 14:30:35<stoopkid> that's mostly built-in, Agda basically has a hardcoded set of rules that define the type-system and define what kinds of types you can build
01/25 14:31:21<stoopkid> technically you get some capacity to explicitly define the type formation rules, but, i usually don't think of it that way
01/25 14:31:32<stoopkid> data Pair (A : Set) (B : Set ) : Set where ...
01/25 14:32:24<stoopkid> this signature for the type Pair is basically Agda's equivalent of the specification of the type-formation rules for Pair
01/25 14:33:04<stoopkid> next you have introduction rules, this is the main one
01/25 14:33:14<stoopkid> constructors == intro rules
01/25 14:34:20<stoopkid> STEP and ZERO are inference rules that have "{something} is even" as their conclusions
01/25 14:34:41<stoopkid> just like zero and suc are inference rules that have "{something} has type Nat" as their conclusions
01/25 14:35:35<stoopkid> for a given logical connective like PAIR, or AND, or OR, or "is even", the intro rules tell you what you can deduce that connective from
01/25 14:36:13<stoopkid> like (a , b) : Pair A B can be deduced from the intro rule for Pair; _,_ : A -> B -> Pair A B
01/25 14:36:37<stoopkid> next you've got elimination rules, the opposite of introduction rules
01/25 14:36:56<stoopkid> instead of "what can we deduce this connective from" it's "what can we deduce from this connective"
01/25 14:37:29<stoopkid> from p : Pair A B we can deduce (first p) : A and (second p) : B
01/25 14:38:11<stoopkid> `first` and `second` actually aren't the elimination rules though, they're just functions that sort of piggyback off the elimination rules
01/25 14:38:49<stoopkid> Agda effectively generates the elimination rules for a type automatically based on the constructors you provide
01/25 14:39:02<stoopkid> same with the 4th type of rule, the computation rules
01/25 14:40:19<stoopkid> what do these amount to? basically the ability to case-match when you define functions out of inductive types, along with the actual semantics for how the functions will execute
01/25 14:41:32<stoopkid> when Agda says that to define a function Nat -> Nat, it suffices to define the function for the case of 0, and the case of (suc n), that's the elimination rule for Nat
01/25 14:42:59<stoopkid> and then the computation rules are exactly what they sound like, given some term in some type, what normalization steps does it follow
01/25 14:43:26<stoopkid> (\x.x)M computes to x[x:=M] == M, this is a computation rule in action
01/25 14:45:10<stoopkid> so, you'll pretty much only ever be thinking about the constructors for inductive types, those are your main "rules"
01/25 14:46:39<stoopkid> technically you think about the formation rules as well, since you have to write those signatures for inductive types, like "data Pair (A : Set) (B : Set) : Set where", but, that's pretty much just "naming the thing you're talking about so that you can start describing it with the constructors/intro-rules"
01/25 14:47:26<stoopkid> and then once you have those constructors, the elim & computation rules are generated automatically, but all the semantics there is just really straightfoward case-matching & pure function evaluation semantics that we're already well-familiar with
01/25 14:49:42<stoopkid> Nat.
01/25 14:49:49<stoopkid> type formation rules:
01/25 14:49:52<stoopkid> ----------------
01/25 14:49:55<stoopkid>  Nat : Set
01/25 14:50:09<stoopkid> intro rules:
01/25 14:50:12<stoopkid> --------------
01/25 14:50:14<stoopkid> zero : Nat
01/25 14:50:16<stoopkid> and
01/25 14:50:24<stoopkid>  n : Nat
01/25 14:50:25<stoopkid> -------------
01/25 14:50:27<stoopkid> suc n : Nat
01/25 14:50:55<stoopkid> Elim rule:
01/25 14:51:37<stoopkid> x : Nat       C : Nat -> Set         p0 : C(0)       p-suc : ((n : Nat) -> C(n) -> C(suc n))
01/25 14:51:42<stoopkid> ----------------------------------------------------------------------------------------
01/25 14:51:53<stoopkid>                                                 p : C(x)
01/25 14:54:25<stoopkid> well, actually:
01/25 14:54:27<stoopkid> http://www.math.unipa.it/~ngambino/Research/Lectures/lecture1.pdf
01/25 14:54:28<stoopkid> page 12
01/25 14:55:50<stoopkid> let's try another one so you get the idea:
01/25 14:56:04<stoopkid> instead of "is even" let's do "is less than or equal to 2"
01/25 14:56:30<stoopkid> data leq2 : Nat -> Set where
01/25 14:56:46<stoopkid>  zero-is-leq2 : leq2 zero
01/25 14:56:54<stoopkid>  one-is-leq2 : leq2 (suc zero)
01/25 14:57:02<stoopkid> two-is-leq2 : leq2 (suc (suc zero))
01/25 14:57:31<stoopkid> and that's it, we won't give any more constructors
01/25 14:58:11<stoopkid> so, you've got 3 rules there, one for each of the Nats less than or equal to 2
01/25 14:58:54<stoopkid> you can't prove leq2 (suc (suc (suc zero))), there's no rule that would allow you to derive that
01/25 14:59:22<stoopkid> let's try another:
01/25 14:59:28<stoopkid> data Man : Set where
01/25 14:59:36<stoopkid>  socrates : Man
01/25 15:00:35<stoopkid> data Mortal : {A : Set} -> A -> Set where
01/25 15:01:02<stoopkid>  men-are-mortal : (x : Man) -> Mortal x
01/25 15:01:26<stoopkid> looking familiar yet?
01/25 15:03:09<stoopkid> if you're starting to wonder, "wait, are collections of inductive/algebraic data types basically the same thing as logic-programming rule-sets", the answer is yes: https://en.wikipedia.org/wiki/Term_algebra
01/25 15:04:03<stoopkid> "A similar notion is that of a Herbrand universe in logic, usually used under this name in logic programming"
01/25 15:04:28<stoopkid> "Term algebras also play a role in the semantics of abstract data types, where an abstract data type declaration provides the signature of a multi-sorted algebraic structure and the term algebra is a concrete model of the abstract declaration."
01/25 15:05:08<stoopkid> and then ofc the category theorists have to point out that they've generalized on this even further...:
01/25 15:05:16<stoopkid> "From a category theory perspective, a term algebra is the initial object for the category of all algebras of the same signature, and this object, unique up to isomorphism is called an initial algebra; it generates by homomorphic projection all algebras in the category."
01/25 15:08:35<stoopkid> (btw, unfortunately for everybody, include/maybe-especially me, the category theorists *are* actually right about everything)
01/25 15:09:06<stoopkid> (including*)
01/25 15:11:43<stoopkid> math started with just arithmetic and concrete data. the same patterns would come up everywhere, like patterns in arithmetic come up in set theory, logic, probability theory, all over the place, so mathematicians seek to generalize the results so that they can be easily reused between settings
01/25 15:12:36<stoopkid> and thus abstract algebra was born, so, given two types of structures with "similar shape", we can just talk about that abstract shape rather than the concrete structure that has it
01/25 15:13:22<stoopkid> for example, race tracks and analog wall clocks are very different concrete objects, but both generally have the abstract shape of a "circle"
01/25 15:13:33<stoopkid> (or, a cycle, anyway)
01/25 15:14:29<stoopkid> so then abstract algebra came up with a bunch of different kinds of shapes, a whole zoo of circles, squares, triangles, and "groups" and "rings" and "modules" and "monoids" and "magmas" and "monads" and...
01/25 15:15:41<stoopkid> category theory, by analogy, is like the wire-mesh that allows you to construct arbitrary shapes & manipulate them in arbitrary ways
01/25 15:17:32<stoopkid> many shapes/concepts that look entirely different & incompatible at first glance end up being exactly the same thing when we get down to this category-theoretic "wire mesh"
01/25 15:17:38<koom> alright
01/25 15:22:08<stoopkid> hopefully you can see at this point that all these things really deserve to be analyzed in much greater detail so that we could see what implications they have on the design of the system, but, unfortunately we won't be able to afford to hold off the project indefinitely to cover all the known results
01/25 15:23:55<stoopkid> though, in some cases the results are actually so striking & profound that it leads me to wonder whether autonomic should actually be the priority, in the grand scheme of things
01/25 15:25:23<stoopkid> as opposed to just furthering the research, popularizing it, and getting more people on the same page about what should be accounted for in the designs of the system
01/25 15:26:23<koom> you mean category theory?
01/25 15:27:35<koom> x : Nat       C : Nat -> Set         p0 : C(0)       p-suc : ((n : Nat) -> C(n) -> C(suc n))
01/25 15:27:36<stoopkid> not just category theory i just mean the body of different results on comp sci, logic & implementation of math on machines, some of which does include results from category theory
01/25 15:27:39<koom> lost me at C
01/25 15:29:32<stoopkid> let's look at a simpler example than Nat: A OR B
01/25 15:29:49<stoopkid> what's the elim rule for A OR B:
01/25 15:30:01<koom> just tell me what "C" stands for
01/25 15:30:14<stoopkid> x : A OR B          C : Set        (A -> C)       (B -> C)
01/25 15:30:17<stoopkid> --------------------------------------------------
01/25 15:30:20<stoopkid>                           C
01/25 15:30:43<stoopkid> "C" stands for an arbitrary proposition that could potentially be derived from A OR B
01/25 15:31:11<stoopkid> remember: elimination rule for a connective X tells you what propositions you can derive from X
01/25 15:31:40<koom> meh, im having a brain shutdown
01/25 15:31:42<stoopkid> this elim rule for A OR B is saying that you can derive C from A OR B, for arbitrary C, assuming you can derive C from A, and can also derive C from B
01/25 15:32:50<koom> alright
01/25 15:33:32<stoopkid> with Nat it's a similar thing, Nat is almost like "True OR True OR True OR ..." an infinite number of times
01/25 15:35:57<stoopkid> basically, for any given type X, you can derive C from X assuming you can derive C from each of the different ways that X could be derived
01/25 15:36:39<stoopkid> in the case of "A OR B", you could either derive A OR B from A, or you could derive it from B
01/25 15:37:05<koom> sure
01/25 15:37:10<stoopkid> and if i just tell you "A OR B", you don't know whether i'm deriving it from A, or deriving it from B
01/25 15:37:48<stoopkid> so if you're going to take that and derive C from A OR B, then you must be able to derive C from A, and also be able to derive C from B, to cover all possible cases for how you might have arrived at A OR B in the first place
01/25 15:38:19<stoopkid> all the rules for every other type follows this same basic formula
01/25 15:38:42<stoopkid> with maybe one or two exceptions that are generally regarded as "probably flawed somehow"
01/25 15:40:22<stoopkid> so with Nat it's a similar kind of thing, given an arbitrary x : Nat, you can derive C(x) if you have C(n) for every possible value of Nat
01/25 15:40:41<stoopkid> and you can get that by having C(0) and ((n : Nat) -> C(n) -> C(suc n))
01/25 15:42:29<stoopkid> cause if i have C(0) and ((n : Nat) -> C(n) -> C(suc n)) then i can apply this function to C(0) and get C(suc 0) and then applying again i get C(suc (suc 0)), etc..
01/25 15:42:57<stoopkid> and then you can see that this elimination rule for Nat is basically formalizing proof-by-induction
01/25 15:43:46<stoopkid> C(0) = i can reach the first rung of the ladder; ((n : Nat) -> C(n) -> C(suc n)) = for any rung of the ladder, n, if i can reach rung n then i can reach rung n+1
01/25 15:44:47<stoopkid> https://pdfs.semanticscholar.org/a59d/92ea56adc57608e6314eafb193dbf4eb1345.pdf
01/25 15:45:19<stoopkid> this describes the general formula
01/25 15:46:19<stoopkid> (well, actually a sort of limited version of what the general formula should be, but, provides the fundamental idea as to what we should generally be "going for" when designing collections of rules)
01/25 15:47:13<stoopkid> it explains where the C thing comes from, and why this is an appropriate way to think about the rules
01/25 15:47:36<stoopkid> all comes down to preservation of information
01/25 15:52:31<koom> hrm
01/25 15:59:22<stoopkid> https://en.wikipedia.org/wiki/Calculus_of_constructions#Defining_logical_operators
01/25 16:02:16<stoopkid> yes, the C in these definitions is the same C that i'm talking about
01/25 16:03:58<stoopkid> and yes the Curry-Howard correspondence would suggest that this must necessarily be the case, and isn't just some coincidence
01/25 16:05:11<stoopkid> check out the definition for A V B there, it's basically just a stringification of the natural deduction rule i provided above
01/25 16:09:58<daemoz> hey all
01/25 16:11:00<stoopkid> hey daemoz 
01/25 16:11:51<daemoz> stoopkid: Apparently my earlier 'morning' was premature. G'morning xD
01/25 16:12:48<stoopkid> hehe, yea so was mine lol
01/25 16:13:10<stoopkid> but, g'morning :)
01/25 16:13:16<daemoz> ^_^
01/25 16:13:26<daemoz> Is this an index of sorts being written up on the vps here?
01/25 16:13:32<daemoz> 'catamoprhism -- fold', et.c
01/25 16:15:08<stoopkid> notes, but this particular subject i only have enough insight into it to just jot down some buzzwords that i can google for further research later, in my other notes i've tried to write down more complete thoughts that could eventually be used as wiki/blog content as i continue to refine it
01/25 16:15:53<daemoz> Cool. I'll be sure to check this dir if I'm in need of some info on something related.
01/25 16:18:50<stoopkid> CL_ for general combinatory logic, LC_ for lambda calc, MT_ for model theory, SKI_ for SKI combinators, fin_ for finance/econ theory stuff
01/25 16:19:04<daemoz> Got it
01/25 16:19:26<stoopkid> there's no MLTT_ in there yet, indicating how early into the research we still are XD
01/25 16:19:29<daemoz> Probably best for me to still stay generally around LC but I think I'm about ready to step out of it.
01/25 16:19:49<daemoz> Why's your term so small?
01/25 16:20:54<stoopkid> so i can fit lots of windows on my screen
01/25 16:21:08<daemoz> fair enough.
01/25 16:21:25<daemoz> Ahh ty
01/25 16:21:31<daemoz> I'm alergic to line-wraps
01/25 16:21:43<stoopkid> hehe np
01/25 16:22:28<daemoz> quick expl. rule 'xi'?
01/25 16:24:23<stoopkid> that lets you reduce the bodies of lambdas even when the outer expression is not reducible, if you look at the other rules you'll see they don't provide any way to reduce lambda bodies
01/25 16:24:54<daemoz> Cool.
01/25 16:25:32<daemoz> like \x.M isn't reducable without an argument but it can still be reduced given it's value doesn't depend on the argument?
01/25 16:26:54<stoopkid> close, according to rule 1, \x.M wouldn't be reducible without an argument, but according to rule 'xi', it will be reducible so long as M is reducible
01/25 16:27:16<stoopkid> and actually i'm abusing the word "reduce" here, expansions are also a possibility
01/25 16:27:22<daemoz> Right on
01/25 16:29:43<stoopkid> there's various "equational theories" of lambda calc like this. i'm curious about it in particular because there are some relationships between eta-reduction/expansion and extensionality of lambda calc terms
01/25 16:30:30<daemoz> Not sure what many of those terms mean.
01/25 16:31:22<stoopkid> check out LC_extensionality for some notes on that
01/25 16:31:59<daemoz> Gonna look up a definition for eta-reduction
01/25 16:32:45<stoopkid> eta's pretty straightforward: f == \x.f x
01/25 16:33:00<daemoz> basically the simplest wrapper.
01/25 16:33:11<daemoz> Apparently scheme uses this to prevent immediate evaluation.
01/25 16:34:20<stoopkid> yep, i think other systems do as well, but, i need to study that in some greater detail
01/25 16:34:48<daemoz> Feel free to take over this session whenever, I don't want to keep you from working.
01/25 16:35:55<stoopkid> nah go for it, i can always pop into another tmux session if i need to do anything
01/25 16:36:02<daemoz> for sure.
01/25 16:36:21<daemoz> what are cong1, cong2, xsi. these are functions that are similar but have slightly different mechanics?
01/25 16:37:42<stoopkid> cong1 lets you reduce the first component of an App without actually applying it to the second component (which is what you'd have to do when using the beta rule)
01/25 16:37:49<stoopkid> cong2 does similar except for the second component
01/25 16:38:29<stoopkid> which is entirely different behavior from beta; beta doesn't say you can do *any* reductions on the argument component of an App
01/25 16:38:50<stoopkid> and then xsi is just xi from before but i didn't know that i was misspelling it at the time XD
01/25 16:39:11<daemoz> haha xD
01/25 16:39:28<daemoz> Okay but I am still confused on them.
01/25 16:39:35<daemoz> --B--> means b-reduction?
01/25 16:39:42<daemoz> and M --B--> M' 
01/25 16:39:47<stoopkid> right
01/25 16:39:50<daemoz> What is the meaning of '
01/25 16:40:16<stoopkid> to make it a different identifier :)
01/25 16:40:57<daemoz> right. so how does that relate to reduction?
01/25 16:41:12<stoopkid> one sec
01/25 16:42:42<stoopkid> so it's just the same as that, ' doesn't mean anything, M' was just some other term that M could have reduced to
01/25 16:45:51<daemoz> Can I write ex for cong2? I think I'm getting it.
01/25 16:47:14<daemoz> So theyr'e just different orders for beta reduction kind of?
01/25 16:48:13<stoopkid> exactly, but if you interpret the rules as only applying to the outer expressions, you need all of them in order to capture all the different reduction strategies
01/25 16:48:53<daemoz> Interpret them as only applying to outer expressions and generally you'd recurse to apply them until in NF?
01/25 16:50:50<stoopkid> pretty much, so, like in the xi rule, you start by applying to some term, and it applies to the outer expression in this term, but its behavior is  basically to pull out the inner expression M so that you can apply the rules directly to M further down in your derivation
01/25 17:33:56*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
01/25 17:34:16*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/25 17:34:54<stoopkid> koom: so, what parts of this stuff are you most interested in right now, i don't want to burn you out by dragging you through a bunch of foundational stuff if it seems ill-motivated
01/25 17:41:31<stoopkid> daemoz: same q to you if you've got any preference
01/25 17:45:00<editable-koo>no particular interest, i plan to go back to subst and try deciphering what you got so far
01/25 17:45:27<editable-koo>anything that you feel we should cover together
01/25 17:46:35<editable-koo>beyond that, ive started digging out old zennet logs, i want to see what hmc said on lambda auth
01/25 17:48:16<daemoz> I'm going to take a short break but I think what I'm interested in right now is looking at how proofs work and what building them in agda looks like.
01/25 17:48:36<editable-koo>second that
01/25 17:50:32<stoopkid> well, the main thing that we should cover together, relative to the goal of autonomic, is the on-paper (or just "off-agda") proofs and code for the implementation, this Agda stuff is mostly tangential to the project except where it has educational value
01/25 17:51:36<editable-koo>ok then
01/25 17:51:52<daemoz> That aspect confuses me because as far as I understood, agda was to be the language AN-lang would be based off of, and we would write an interpretter in some lang like c++
01/25 17:54:21<stoopkid> sort of; agda is a language that's based off the same *logic* that AN will be based on, but yea, if you need more context for what we're building & what you can do with it, agda has plenty of good educational value
01/25 17:55:01<stoopkid> but, technically you don't need agda for this, i didn't learn agda or even how to really do stuff in MLTT until *after* me and koo had already implemented a dependent type theory system following the simpler-easier tutorial
01/25 17:55:44<daemoz> Gotcha.
01/25 17:56:14<daemoz> okay break time, tty--1 hr or so
01/25 17:56:23<stoopkid> sounds good
01/25 18:02:59<stoopkid> so, ok, we want to prove stuff in Agda/MLTT. the place to start is the curry-howard correspondence. if you can memorize the correspondence, then pretty much everything else follows from there
01/25 18:04:54<stoopkid> there's a bunch of familiar logical connectives:
01/25 18:05:26<stoopkid> negation, conjunction, disjunction, implication, existential quantification and universal quantification
01/25 18:05:40<stoopkid> and the logical constants True and False
01/25 18:06:50<stoopkid> you don't have to go off the deep end with it, just read this:
01/25 18:06:51<stoopkid> https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence#General_formulation
01/25 18:07:14<stoopkid> look at those tables that compare the logic side to the programming side
01/25 18:07:35<stoopkid> convince yourself that types given on the programming side actually serve as evidence for the propositions on the logic side
01/25 18:08:34<stoopkid> you can skip the second table that talks about hilbert-style deduction systems and natural deduction
01/25 18:08:49<stoopkid> just look at the 1st and 3rd tables and make sure all those correspondences make sense
01/25 18:08:59<stoopkid> if they don't make sense, ask
01/25 18:10:11<stoopkid> when you've got yourself convinced of the correspondences, then we can start on Agda proofs
01/25 18:13:12<stoopkid> nearly every agda proof that's worth anything will make use of just about every correspondence in the 1st and 3rd tables, so if you don't have these memorized, agda proofs will be difficult to interpret and nearly impossible to write
01/25 18:18:19<stoopkid> don't worry about the interpretation of inductive types like the "_ even" one from learn-you-an-agda, their interpretation is more complicated (catamorphisms, F-algebras, category theory, parametricity, etc..) and we'll get back to that (*maybe*)
01/25 18:20:55<stoopkid> if you have trouble understanding why the types on the programming side are the ones that should correspond to the propositions on the logic side, then remember what a "constructive" proof is:
01/25 18:20:56<stoopkid> https://en.wikipedia.org/wiki/Constructive_proof
01/25 18:21:19<editable-koo>these tables are making me second-guess my decisions wrt dayjob and autonomic
01/25 18:22:05<stoopkid> well, you didn't finalize anything with your dayjob yet did you?
01/25 18:23:03<editable-koo>no
01/25 18:23:05<stoopkid> these tables aren't so bad, like i said, if you find any of it confusing, just ask, they do make sense in the end
01/25 18:23:56<editable-koo>"Some non-constructive proofs show that if a certain proposition is false, a contradiction ensues; consequently the proposition must be true (proof by contradiction). However, the principle of explosion (ex falso quodlibet) has been accepted in some varieties of constructive mathematics, including intuitionism."
01/25 18:24:06<editable-koo>why however?
01/25 18:24:39<editable-koo>what is the relation between these two statements?
01/25 18:25:25<stoopkid> they don't seem to me to have much relation beyond juxtaposition
01/25 18:26:15<stoopkid> ah
01/25 18:26:17<stoopkid> i see
01/25 18:26:38<stoopkid> i think what they're implying is that you could potentially interpret the principle of explosion as being non-constructive
01/25 18:26:48<stoopkid> *however* it's been adopted by ...
01/25 18:28:36<editable-koo>yea i see
01/25 18:44:19<stoopkid> brb 30min - an hour, will be on mobile though if you've got more q's
01/25 18:47:23<editable-koo>alright, done, wasnt so hard after all
01/25 18:48:34<stoopkid> awesome :)
01/25 18:57:03<stoopkid> so next step would be to Get some hands on experience with it by applying these correspondences and to prove some basic propositions
01/25 18:58:24<stoopkid> True -> True
01/25 19:15:26<daemoz> Back. Gonna read that wiki page and try to get caught up.
01/25 20:06:20<daemoz> Okay, pretty sure I understand what's going on minus these two types: Product type, Generalized sum type (sigma).
01/25 20:06:33<daemoz> Additionally I don't understand the isomorphism between MP and Application.
01/25 20:06:54<daemoz> like how that parallel lines up or functions.
01/25 20:12:37<stoopkid> so product type is like a pair type, like pairing an A with a B, or in other words, "A and B"
01/25 20:13:29<stoopkid> generalized sum type is, perhaps confusingly, dependent product type
01/25 20:13:52<daemoz> Yeah I had read that. Why have the same name for pi-type and sigma-type? T_T
01/25 20:13:53<stoopkid> dependent pairs, where the type of the second element can depend on the value of the first element
01/25 20:14:33<stoopkid> they don't, generalized product == dependent function type == pi type
01/25 20:14:45<stoopkid> generalized sum == dependent product type == sigma
01/25 20:15:30<daemoz> I guess maybe pairs don't make sense to me. What is a pair?
01/25 20:15:33<daemoz> like a tuple?
01/25 20:15:43<stoopkid> right
01/25 20:15:52<stoopkid> struct {
01/25 20:16:04<stoopkid>  A first;
01/25 20:16:06<stoopkid>  B second;
01/25 20:16:07<stoopkid> }
01/25 20:16:27<daemoz> but where one of the pair members depends on the other.
              <stoopkid> (where A and B are types; this is (suppposed to be) C syntax)
01/25 20:16:47<daemoz> *}; then ;)
01/25 20:16:59<stoopkid> :)
01/25 20:17:20<stoopkid> so, to make this a dependent pair it would be more like:
01/25 20:17:23<stoopkid> struct {
01/25 20:17:27<stoopkid>  A first;
01/25 20:17:35<stoopkid>  B(this.first) second;
01/25 20:17:37<stoopkid> }
01/25 20:17:57<koom> B<this.first> second;
01/25 20:18:03<daemoz> hehe
01/25 20:18:06<stoopkid> there we go :)
01/25 20:18:19<daemoz> Okay I think I get it then. What seperates a sigma type from a pi type other than it being.. convenient?
01/25 20:18:26<daemoz> surely it adds something core
01/25 20:18:58<stoopkid> sigma type is like existential quantification, pi type is like universal quantification
01/25 20:19:09<daemoz> Hrmrmmm
01/25 20:19:18<daemoz> Existential quantification...
01/25 20:19:54<stoopkid> "there exists x : Nat such that x + y = y"
01/25 20:20:13<daemoz> wait this is when there was a proposition in the type signature earlier?
01/25 20:20:15<daemoz> that is a sigma type?
01/25 20:20:46<daemoz> a : A -> A == B -> ... or something
01/25 20:21:14<stoopkid> that was actually an identity type which isn't even on this chart (we'll get to that later, it'll be easier to see what that's all about after you grasp the more basic logical connectives)
01/25 20:23:38<daemoz> okay. I think I get it now. sigma says x exists, and there is at least one instance of it existing in the set where the supplied conditional is true.
01/25 20:24:44<stoopkid> right, and that's why the terminology gets confused wrt the sums & products
01/25 20:25:21<stoopkid> so, if you have "there exists x : Nat, such that P(x)", for some proposition P about Nats, then this is basically like a giant OR statement
01/25 20:25:41<stoopkid> P(0) OR P(1) OR P(2) OR ...
01/25 20:26:04<stoopkid> OR logically & linguistically relates to sums, hence it's called a generalized sum
01/25 20:26:30<stoopkid> but if you look at the individual elements, what do you actually provide when you provide the Nat that satisfies the proposition?
01/25 20:26:41<stoopkid> you provide a dependent product
01/25 20:27:07<stoopkid> you find some Nat x, and a proof p that P(x) holds
01/25 20:27:34<stoopkid> and provide these together as a (dependent) pair, and that proves the existentially quantified statement
01/25 20:28:44<stoopkid> so, looking at the whole space of Nat, the existential looks like an OR or a sum, but looking at the individual proofs you provide, they are actually products
01/25 20:29:26<stoopkid> likewise, universal quantification is a big AND over the space, and AND is related logically & linguistically to products, but then what you actually provide as a proof is a (dependent) function
01/25 20:32:52<stoopkid> i personally don't use the "generalized sum / generalized product" terminology at all and just say dependent product & dependent function, because, well, confusing, as you've already discovered :)
01/25 20:35:48<stoopkid> ok so, modus ponens & function application:
01/25 20:35:58<stoopkid> modus ponens says A -> (A -> B) -> B
01/25 20:36:37<stoopkid> if "A" is true, and "A implies B" is true, then B is true
01/25 20:36:56<stoopkid> if you have a proof of A, and a proof of A -> B, then you can get a proof of B
01/25 20:37:20<stoopkid> if you have an object of type A, and a function from A to B, then you can get an object of type B
01/25 20:37:27<stoopkid> like so:
01/25 20:37:29<stoopkid> x : A
01/25 20:37:31<stoopkid> f : A -> B
01/25 20:37:33<stoopkid> f x : B
01/25 20:38:56<daemoz> got it. that was simpler than I was making it in my hea.d
01/25 20:39:50<daemoz> Real quick on the dependant types again (I can tell this is where I'll get stuck most often). a dependant product is a pi-type or universal quantifier. and a dependant function is a sigma-type or an existential quantifier.
01/25 20:40:34<stoopkid> dependent product is sigma/existential, dependent function is pi/universal
01/25 20:40:41<daemoz> ah fack hah
01/25 20:41:00<daemoz> okay well I'm gonna let that one stew I'll read some more material and try to make it click.
01/25 20:41:13<daemoz> Gonna eat dinner though I'll catch up when I'm done.
01/25 20:41:33<stoopkid> to remember that dependent function corresponds to universal quantification, look at how regular functions correspond to implication, and implication is like a "trivial" universal quantification
01/25 20:42:21<daemoz> right like any of type x goes in, and any of type y comes out. for fn(x) -> y
01/25 20:42:59<stoopkid> right
01/25 20:44:11<stoopkid> and if you're familiar with the concept of "the graph of a function", i.e. the list of it's input/output pairs, you can see that existential quantification corresponds to just one of these *pairs*, whereas universal quantification is the whole graph
01/25 20:44:59<daemoz> it's uhhh codomain?
01/25 20:45:27<daemoz> And I thought E-Q could be for one or more pairs
01/25 20:45:52<daemoz> But, I understand the logical side of it I guess I'm just not understanding where it interfaces with programming languages.
01/25 20:46:29<stoopkid> correct wrt E-Q, what i meant to say was that only one of those pairs is required for a proof of it
01/25 20:46:41<stoopkid> whereas for U-Q you need all of them, i.e. the entire function
01/25 20:47:18<stoopkid> https://en.wikipedia.org/wiki/Function_(mathematics)#Definition
01/25 20:47:30<stoopkid> those edges / IO-pairs in the pictures there
01/25 20:48:59<stoopkid> but grab your dinner we've got plenty of time to go over this stuff and won't take long, you guys already see most of the picture
01/25 20:49:07<daemoz> OH
01/25 20:49:22<daemoz> the pairs thing makes sense now. that's the correlation to functions
01/25 20:49:43<daemoz> hot damn. well alright I'll talk to you in a bit. lates~
01/25 20:49:53<stoopkid> sounds good :)
01/25 20:52:04<stoopkid> so, it's funny you said this "that was simpler than I was making it in my hea.d" cause i was actually gonna bring up a point not unrelated to that
01/25 20:53:25<stoopkid> in some sense, particularly for conjunction, disjunction, implication, E-Q and U-Q, there's pretty much nothing else (at least nothing "simpler") you could provide as the evidence and still satisfy the definitions of "constructive"
01/25 20:54:27<stoopkid> in order to prove me A & B, you will have to provide a proof of A, along with a proof of B
01/25 20:55:29<stoopkid> you might say "well, obviously, when *wouldn't* that be the case", well... non-constructive logic is also a thing, and has been around longer, and is actually much more widely accepted, in standard math academia
01/25 20:56:32<stoopkid> (well, has been around longer in the context of modern math academia, say, formal developments of math post-1700s)
01/25 20:57:25<stoopkid> but, in constructive logic this "intuition"(?) will work... as "expected"(..?) 
01/25 20:58:00<stoopkid> so, if you prove me A & B, you will have provide me a pair of a proof of A and a proof of B, *somehow*, whatever you've given me as proof must contain this, there's just no other way
01/25 20:59:18<stoopkid> you can give me something more complex, like, instead of a pair of a : A and b : B, you can give me a triple of a : A and b : B and a dog, and i'll say "ok, idk what the dog's doing here but it's got an A and also a B, so it works, and dogs are cool i guess"
01/25 21:00:56<stoopkid> if you generalize all possible things that can be proofs of A and B, you end up with something like a category-theoretic product, or at least, that's the "most generalized" version of it currently understood in a rigorous way
01/25 21:03:03<stoopkid> and i hold that an analogous thing is true for the interpretations of disjunction, implication, E-Q, and U-Q
01/25 21:03:46<stoopkid> to the extent that if you made any changes to those interpretations beyond "keeping them but adding some more complexity", i'd say, you literally must be talking about a different reality than the one we seem to be in
01/25 21:04:22<stoopkid> or, alternatively, are doing that "non-constructive" stuff
01/25 21:04:52<stoopkid> now, if we go beyond these 5 connectives, the situation is not quite so clear
01/25 21:05:23<stoopkid> what's a proof of False? nothing sounds about right but "wtf even is 'False'"
01/25 21:06:13<stoopkid> what's a proof of True? what is this object "True"? why is it a set? what should be inside it? some randomly given meaningless object called "unit" or something? why this? 
01/25 21:07:16<stoopkid> what about proofs of equality? standard MLTT and HoTT have completely different interpretations
01/25 21:07:34<stoopkid> arguably though, HoTT's is "more constructive"
01/25 21:15:32<stoopkid> so, i figure, we get to pick & choose what makes to sense, so long as we can demonstrate that our final product still works
01/25 21:15:40<stoopkid> makes to sense to us* i meant
01/25 21:16:07<stoopkid> why do i keep saying "makes to" wtf
01/25 21:18:03<stoopkid> so, why do i really like the correspondences for these 5 connectives here: nothing will ever have to change about them. they are essentially permanent aspects of our reality
01/25 21:18:46<stoopkid> it's great for design, and "pitching" design:
01/25 21:18:56<stoopkid> "what?" "this." "what else?" "nothing."
01/25 21:22:38<stoopkid> now, that doesn't mean you have to go with "constructive logic", you could go with some entirely different framework, you could even just shun formal logic and do ad hoc implementation of whatever's to your heart's desire, which is pretty much how the vast majority of standard programming goes, and with pretty good success for the most part if you just "roll with it" like i don't
01/25 21:23:39<stoopkid> but it's still nice to have this one thing that we know for sure & can rely on, and lucky enough for us that's exactly what autonomic design is based on
01/25 21:25:20*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
01/25 21:26:33<stoopkid> that's why i don't knock any of ohad's efforts with new-tau like HMC does, he's not wrong to want "more"/"different" and go searching for it, whatever floats everybody's boat idk
01/25 21:28:09<stoopkid> non-constructive proofs aren't "wrong", not at all
01/25 21:28:41<stoopkid> law of excluded middle, nothing inherently wrong with it
01/25 21:28:47<stoopkid> axiom of choice, nothing inherently wrong with it
01/25 21:29:52<stoopkid> here's a nice one:
01/25 21:31:04<stoopkid> there are countably many polynomials with coefficients in the integers or rationals, therefore there are only countably many roots of polynomials. real numbers that are roots of polynomials in the integers/rationals are called algebraic numbers
01/25 21:31:29<stoopkid> there are uncountably many real numbers though, therefore there exist real numbers that aren't algebraic
01/25 21:32:16<stoopkid> (which happen to be called transcendental, and e and pi are examples of these)
01/25 21:33:28<stoopkid> so, i proved there that there exist algebraic numbers, but i didn't provide a demonstration of any specific real number, like pi, along with a proof that it's actually transcendental, i actually don't know how to prove that pi is transcendental
01/25 21:36:24<stoopkid> is my demonstration "wrong" though, just because it's non-constructive? no, it's surely true, and we know this even more so because we've actually demonstrated numbers like e and pi as being transcendental (note though how having the specific numbers to demonstrate, i.e. constructive proof, gives us a lot more comfort in the truth of the statement, along with something that we can actually "work with")
01/25 21:42:04<stoopkid> so, i'm running through all that because, i don't like the situation with the academic barriers-to-entry any more than you guys do, and if possible i want to try to address some of the foundational issues beyond those 5 connectives, put everything onto a somewhat more common-sense basis, and put *that* on the wiki, and design according to logical necessity (wherever it seems fruitful to do so, in some places
              <stoopkid> it might not and then we'll just resort to pragmatics, but, it's a case-by-case thing)
01/25 21:50:40<stoopkid> and for doing that you should a) keep your mind open to other possibilities, but b) still keep an eye out for things that are "necessarily the case", like those 5 correspondences under the constraints of constructivism, and c) measure everything relative to your own interpretations of how things "should be"
01/25 22:01:36<stoopkid> ok, now back to curry-howard, but on more concrete terms:
01/25 22:02:03<stoopkid> what's up with the principle of explosion and False under curry-howard?
01/25 22:03:05<stoopkid> if propositions are the sets of their proofs, well, then false statements really should correspond to empty sets, they shouldn't have any proofs
01/25 22:03:21<stoopkid> https://en.wikipedia.org/wiki/Function_(mathematics)#Empty_function
01/25 22:04:27<stoopkid> given an empty set, call it "False" and any other set, call it A, there's a function False -> A
01/25 22:04:42<stoopkid> universal quantifications are trivially satisfied if there's nothing in your domain
01/25 22:06:03<stoopkid> note the relationship to category theory there: "The existence of a unique empty function from ∅ into each set A means that the empty set is an initial object in the category of sets."
01/25 22:10:27<stoopkid> functions prove implications under curry-howard, so, the existence of a function from an empty set to any other set is principle of explosion
01/25 22:11:44<stoopkid> now, hrm, does it really *have* to be this way? should the behavior of functions dictate the behavior of logic just because curry & howard noted some correspondences?
01/25 22:13:19<stoopkid> not necessarily: take an Agda file. what is it? just a bunch of symbols. scribbles on the screen. meaningless bits really
01/25 22:13:34<stoopkid> we give an interpretation of its syntax into functions & sets
01/25 22:14:50<stoopkid> we say that functions & sets are a "model" of the language of Agda
01/25 22:15:32<stoopkid> this is what "model theory" is about.
01/25 22:16:04<stoopkid> what it means to interpret syntax into "structure"
01/25 22:19:13<stoopkid> you can consider this with no pre-assigned meaning given to any of your syntax, or you can consider it with some pre-assigned meaning assumed for some of your syntax, often times model theorists will take the meaning of logical connectives as assumed and leave the rest open to "interpretation"
01/25 22:19:37<stoopkid> however you're considering it, the idea is that you just interpret into some "structure", imagine like a graph, or just, "the world"
01/25 22:20:57<stoopkid> and rather than detouring through formal proofs, you examine the structure directly, and see if the statement, as interpreted, true or false in that structure
01/25 22:21:51<stoopkid> like consider a tree (data-structure), as a graph. now consider the statement "exists a graph cycle"
01/25 22:22:12<stoopkid> it's not true in this tree structure/interpretation, because trees don't contain cycles
01/25 22:23:07<stoopkid> now consider a graph that contains a cycle, the statement is true there, or you could say, that graph models the statement
01/25 22:25:23<stoopkid> "exists x and y such that x R y and y R x"
01/25 22:27:08<stoopkid> we can interpret {exists,and,such that} as fixed meaning, with standard interpretations, and leave the lowercase variables {x,y} to be interpreted as nodes in a graph, and "x R y" interpreted as "exists a directed edge from x to y"
01/25 22:29:25<stoopkid> so, there graphs where this statement is "true", like "nodes = {0,1}, edges = {[0,1],[1,0]}" with an interpretation of x -> 0 and y -> 1
01/25 22:29:32<stoopkid> there are*
01/25 22:30:04<stoopkid> and there are graphs where this statement is "false", like "nodes = {0,1}, edges = {[0,1]}"
01/25 22:31:35<stoopkid> in the case where it's true, we notice we could actually provide an interpretation, which is pretty much what made it "true", and in the case where it's false, there would be no way to provide such an interpretation
01/25 22:32:16<stoopkid> there is no consistent interpretation from the sentence into the graph  "nodes = {0,1}, edges = {[0,1]}"
01/25 22:33:30<stoopkid> we can provide the first edge, x R y, by assigning x -> 0, y -> 1, and grabbing the edge [0,1], so we have 0 R 1. but then for this statement to be true we also need y R x, which would be 1 R 0 under this interpretation, and there's no corresponding edge [1,0]
01/25 22:33:56<stoopkid> we could change the interpretation in order to satisfy y R x, i.e. change it so now y -> 0 and x -> 1
01/25 22:34:07<stoopkid> and that's what i mean by no *consistent* interpretation
01/25 22:34:23<stoopkid> which, you might take as "no interpretation at all"
01/25 22:37:15<stoopkid> so, of course, the statement could be interpreted into way more other structures than just the one i provided "nodes = {0,1}, edges = {[0,1],[1,0]}"
01/25 22:37:45<stoopkid> any graph that contains this graph would also model the statement, for example
01/25 22:38:58<stoopkid> so, just as there are more models for this statement, there are more models for type theory besides for "sets & functions"
01/25 22:40:28<stoopkid> HoTT basically interprets everything into geometric/topological spaces rather than "the category of sets & functions"
01/25 22:41:45<stoopkid> with different models & different structures comes different ideas, potentially different logic
01/25 22:42:41<stoopkid> topologists had been working with this "univalence" notion for some time, figured out they could model type theory into topological spaces, and then added this "univalence axiom" into the logic
01/25 22:42:51<stoopkid> and changed up the interpretations of identity types
01/25 22:44:25<stoopkid> can you imagine a geometric interpretation of type theory? sure you can
01/25 22:45:17<stoopkid> you can draw pairs, you can draw graphs of functions, etc.. you can keep disjunction as "this drawing OR that drawing"
01/25 22:47:34<stoopkid> different spaces, different things become true, different logic works
01/25 22:53:12<stoopkid> which spaces are we concerned with? whichever ones are relevant for computing :)
01/25 22:54:13<stoopkid> some logic might work great over some abstract space, but, if we can't compute with it then it doesn't do us much good for this project
01/25 22:57:49<stoopkid> so, this is all pretty immediately relevant. you might say "ok that's all well and good but wrt that 'pragmatics' thing i'm fine with sets & functions and the intuitions & truths that follow from there"
01/25 22:58:01<stoopkid> actually we're not fine with sets & functions
01/25 22:58:17<stoopkid> well, not without caveat anyway :)
01/25 22:59:08<stoopkid> there's the whole thing with impredicative type theories with the Type : Type rule, and predicative type theories that have a hierarchy of Set : Set 1 : Set 2 : Set 3 : ...
01/25 22:59:43<stoopkid> why? because models of type theory into sets & functions starts to break down when you include polymorphism
01/25 22:59:55<stoopkid> Type : Type, set in set, russell's paradox...
01/25 23:00:28<stoopkid> one solution, adopted by MLTT, is to keep the set-theoretic logic and stratify into an infinite hierarchy of sets so as to avoid russell's paradox
01/25 23:00:38<stoopkid> another solution is to adopt non-set-theoretic models
01/25 23:00:49<stoopkid> so that you can keep your Type : Type
01/25 23:01:47<stoopkid> instead of sets, partially ordered sets (remember what i said about "you can potentially add more complexity, just can't simplify any further"?), topological spaces, etc..
01/25 23:03:57<stoopkid> you might say "hrm, well if the set-theoretic model breaks down then it's broken, and we don't need to consider it"
01/25 23:04:23<stoopkid> but, your computer runs it, it is a real thing, so why's our math all f'd up about it?
01/25 23:07:12<stoopkid> all things to consider, we are building a proof-assistant after all, so, might as well dig into all the ins & outs about it
01/25 23:12:58<stoopkid> now, if we were all more comfortable with Agda, one thing we could do is split up research & prove the things in Agda, so that everybody else can know its true without having to go over all the same work
01/25 23:13:49<stoopkid> that's part of the point of autonomic after all, hypothetically we should practice what we preach
01/26 00:56:03<daemoz> Okay, I think I surprisingly followed you for most of that, there were a few questions but it was pretty lengthy so I'll ask them in more detail at a time they come up again or as necessary. I understand more the purpose of Agda in all of this now. So we're trying to make a model of logic that supports those five connectives as sort of the base logical characters. And Agda allows us to prove things
01/26 00:56:05<daemoz> while designing it?
01/26 00:59:18<stoopkid> well, the purpose of Agda (relative to the project) has mostly been for a concrete reference for how MLTT should work, but, i kinda go overboard and actually try to use it for proving things about pieces of the system yea :)
01/26 01:04:04<stoopkid> wrt the models of logic & those 5 connectives, sort of. what i meant there was that the correspondences for those 5 connectives are already well-supported by common sense, models, definitions of constructivism, the fact that they are minimal, category theory basically formalizing the notion that they're the "correct" correspondences, etc...
01/26 01:05:28<daemoz> Okay, so mainly just think of them as five 'solid' logical pieces.
01/26 01:06:13<stoopkid> yep, at least while working in the context of constructive logic
01/26 01:06:56<daemoz> And this constructive logic thing, I think I'm starting to understand it. It's the desire to prove things by showing how they could be DONE rather than giving case-by-case examples as proof of existence.
01/26 01:06:58<stoopkid> the correspondences for the other connectives aren't quite so solid and we end up finding that what the correspondences should be kind of varies depending on what kind of underlying spaces we're considering as the models
01/26 01:07:23<daemoz> So they are not 'consistent' in ways.
01/26 01:08:16<stoopkid> right, so, each interpretation might be consistent when taken in isolation but, not all the interpretations are compatible/consistent with each other
01/26 01:09:57<daemoz> And about constructive-logic?
01/26 01:11:02<stoopkid> hrm, not exactly. having the examples is actually the important part, being able to or having to *do* things is merely a means to the end of being able to provide the necessary examples when asked for
01/26 01:11:35<daemoz> Okay I'll go back to the drawing board on that one.
01/26 01:12:28<stoopkid> so, consider E-Q, it's basically directly asking for an "example"
01/26 01:13:08<stoopkid> constructive logic says that you actually have to provide it, you can't try to demonstrate the existence "indirectly" somehow and get away with not providing the example, that's what "non-constructive" would be
01/26 01:13:29<daemoz> huh.. Okay I was interpretting that incorrectly.
01/26 01:13:52<daemoz> What's with the name constructive? Do they mean like this logic is 'useful'?
01/26 01:14:38<daemoz> It seemed to me that whole ballgame here was proving things via structure rather than content, so direct examples kind of doesn't mesh with that?
01/26 01:14:56<daemoz> 'hardcoded'
01/26 01:16:32<stoopkid> no constructive doesn't mean "useful", though constructivists generally like to think that it's useful :) it means pretty much that you have to actually construct the examples
01/26 01:16:44<stoopkid> so, wrt proving things via structure vs. content
01/26 01:16:58<stoopkid> you can be constructive and still be generic
01/26 01:17:08<daemoz> Now you've lost me xD
01/26 01:17:31<stoopkid> are you familiar with polymorphism?
01/26 01:18:39<daemoz> like templates (c++)?
01/26 01:18:46<daemoz> generic programming?
01/26 01:19:08<daemoz> or in terms of an object changing during runtime
01/26 01:19:21<stoopkid> right, that sort of thing. in the context of type theory it will likely be strictly parametric polymorphism
01/26 01:20:00<stoopkid> so, that's perfectly constructive, just because you've made it generic hasn't hindered your ability to construct the objects when called for, in fact it greatly speeds up your process in doing so! :D
01/26 01:20:10<daemoz> That's true!
01/26 01:20:23<daemoz> But indeed you have the full example for each type
01/26 01:20:44<daemoz> or the computer does
01/26 01:21:34<stoopkid> right, so, it's basically just a compression on a space of similar functions
01/26 01:22:10<daemoz> okay, and with more advanced polymorphism you can express in a very compressed way large sets of functions with defined aspects.
01/26 01:22:33<daemoz> or abitrary restrictions. and then so this is going that direction farther.
01/26 01:23:05<daemoz> but at each step you have full examples, ie type safety, ie constructive logic?
01/26 01:23:11<stoopkid> right, so like "(A : Type) -> A -> A", essentially a compression of the entire space of functions Nat -> Nat, Int -> Nat, Pair A B -> Pair A B, etc..
01/26 01:23:22<stoopkid> Int -> Int ** woops
01/26 01:24:11<daemoz> okay
01/26 01:24:59<stoopkid> "but at each step you have full examples, ie type safety, ie constructive logic?" pretty much, exactly
01/26 01:25:16<daemoz> ahh that's rad as hell
01/26 01:25:23<stoopkid> wrt the arbitrary restrictions, that's what the dependent types provide
01/26 01:25:35<daemoz> the 'arbitrary' part? :P
01/26 01:25:47<stoopkid> polymorphism let's you make generic over types, and then dependent types let you enforce specific behaviors back into the picture
01/26 01:26:00<daemoz> code == types == code == types
01/26 01:27:13<stoopkid> something along those lines :)
01/26 01:28:26<stoopkid> simple example, all types with one element:
01/26 01:28:58<stoopkid> Exists A : Type , Exists x : A , Forall y : A , x == y
01/26 01:29:42<daemoz> So the quantifiers are really the way to attach behavioral restrictions to the type.
01/26 01:29:47<stoopkid> exactly
01/26 01:30:05<daemoz> This is starting to get really interesting now that it's making more sense.
01/26 01:30:30<stoopkid> that's what i thought too haha
01/26 01:30:49<daemoz> I'll create a dir on the vps to mess around, okay?
01/26 01:30:58<stoopkid> sure
01/26 01:35:56<daemoz> I'll have to go through that tutorial on agda I think. Do you have time to answer a question about Principle of Explosion?
01/26 01:36:16<stoopkid> sure
01/26 01:36:51<daemoz> So I `think` this principle says that there exists a function False(or empty set) -> A, where A is any possible type.
01/26 01:36:54<daemoz> Is that correct?
01/26 01:37:16<stoopkid> exactly
01/26 01:37:40<daemoz> So, where does the information come from that is necessary to construct a type A?
01/26 01:37:58<daemoz> Would you satisfy the principle of explosion for every type introduced?
              <daemoz> sort of like a constructor?
01/26 01:39:20<stoopkid> good question, just a bit earlier koo brought up a quote from the wikipedia article on constructive proof that implies that the principle of explosion could be considered non-constructive on this basis
01/26 01:39:47<daemoz> Since you need to sort of 'hardcore' this?
01/26 01:39:59<daemoz> is that the opposite of constructive would be 'hardcoding' the logic a particular way?
01/26 01:40:14<daemoz> *'hardcode' hahahah
01/26 01:42:13<stoopkid> well, not exactly, it's sort of a subtle trick, and there's certainly room to question its merit, imo its widespread (near universal) acceptance is as much of a matter of pragmatic "not having a better answer" as it is actual belief that this is the correct way for logic to work
01/26 01:42:28<stoopkid> so, "where does the information come from"
01/26 01:43:09<stoopkid> the subtle trick is that it never does, because there shouldn't be any objects in False/empty to apply these functions to, so, you never actually end up having to prove A
01/26 01:44:20<daemoz> I can see how there would be some differences in opinion about that.
01/26 01:44:50<stoopkid> indeed, paraconsistent logics are an entire branch of logics dedicated to the opposition to that rule :)
01/26 01:44:57<daemoz> whoaa
01/26 01:45:59<stoopkid> i haven't studied that very much, my experience with paraconsistent logic is basically just "awareness that it exists" :)
01/26 01:47:19<stoopkid> the explosion principle seems to "work" in the context of Agda though
01/26 01:48:25<stoopkid> consider you've got a function type with a bunch of complex constraints in its signature (which you now know how to encode since you know dependent types :)  , you can define functions by case-matching over the constructors over the input-type
01/26 01:48:38<stoopkid> given your constraints, you might have impossible cases
01/26 01:49:25<stoopkid> well, you still have to deal with those cases in some kind of way
01/26 01:49:40<stoopkid> well, what's making the cases impossible? some kind of contradiction in the assumptions for that case
01/26 01:49:59<stoopkid> you take this contradiction, prove False from it, and then from there you trivially satisfy the case
01/26 01:50:20<stoopkid> basically just formalizing the notion that "you get to skip the impossible cases"
01/26 01:51:17<stoopkid> here, simple:
01/26 01:51:20<daemoz> Because there are no members of the empty set to even try to prove with?
01/26 01:51:43<stoopkid> pretty much
01/26 01:51:52<stoopkid> so take for example:
01/26 01:52:13<stoopkid> (n : Nat) -> n == 0 -> n == 0
01/26 01:52:29<stoopkid> let's try to make a proof of it:
01/26 01:52:38<stoopkid> myProof : (n : Nat) -> n == 0 -> n == 0
01/26 01:53:20<stoopkid> well, bad example
01/26 01:54:36<stoopkid> (b : Bool) -> b == true -> b & b == true
01/26 01:55:33<daemoz> so there must be a type that maps true -> b and there must be a type that maps b -> true?
01/26 01:55:47<stoopkid> ah sorry
01/26 01:56:05<stoopkid> (b : Bool) -> (b == true) -> ((b & b) == true)
01/26 01:56:58<stoopkid> so, the proof should be a function like so:
01/26 01:57:55<stoopkid> myProof b p = ... proof that (b & b) == true ...
01/26 01:58:50<stoopkid> so, let's case split this on b, we have two cases: true and false
01/26 01:59:09<stoopkid> myProof true p = ... proof that (true & true) == true ... 
01/26 02:00:18<stoopkid> and that's trivial to prove because (true & true) just evaluates (beta-reduces) to true, and then you just have to prove true == true for that case
01/26 02:00:28<stoopkid> but now for the false case:
01/26 02:00:36<stoopkid> myProof false p = ... proof that (false & false) == true ... 
01/26 02:00:55<stoopkid> but (false & false) == false, which does not equal true, so, bit of a problem there
01/26 02:01:49<stoopkid> we shouldn't be able to provide a return value for this case, because the proposition stated by the return-type is not actually true for this case
01/26 02:02:13<stoopkid> but, check the second argument "p", has type (b == true), which in this case is (false == true)
01/26 02:02:40<stoopkid> we have a contradiction in our assumptions, derive False, apply principle of explosion, case finished, proof finished.
01/26 02:04:02<stoopkid> now, check out these truth tables: https://en.wikipedia.org/wiki/Truth_table#Truth_table_for_all_binary_logical_operators
01/26 02:04:14<stoopkid> specifically, the "if/then" column (implication)
01/26 02:04:28<stoopkid> for the cases where P is False (F)
01/26 02:05:10<daemoz> yeah those seem out of place o_O
01/26 02:05:32<daemoz> if false then true. should be... I guess nothing?
01/26 02:07:06<stoopkid> that's a possibility, you'd have to take a 3-valued logic for that though
01/26 02:07:07<daemoz> or undefined or something haha
01/26 02:07:25<daemoz> what is that? true/false/nothing?
01/26 02:07:28<stoopkid> (at least implicitly 3-valued, with undefined values)
01/26 02:08:09<stoopkid> that's usually the first 3-valued logic one would come up with but it could be more abstract/general than that
01/26 02:08:23<daemoz> I see.
01/26 02:08:29<stoopkid> 3 objects, obj1, obj2, obj3, in some "logical relation"
01/26 02:08:41<daemoz> Okay
01/26 02:10:40<stoopkid> consider in the context of constructive solutions to the halting problem for turing machines: you can't consistently assign halting/non-halting to turing-machines from any given formal logic, so, you either have to have implicitly 3-valued by just having no assignment, or explicitly 3-valued with something like halting, non-halting, and maybe-halting
01/26 02:12:46<stoopkid> so, true/false/maybe, true/false/nothing, {0,1/2,1}
01/26 02:14:46<stoopkid> i haven't explored 3-valued logic much really
01/26 02:15:15<daemoz> Sounds interesting that's for sure. I imagine it adds a lot of complexity though
01/26 02:15:17<stoopkid> i should note: basically what you're saying is that these truth tables aren't a *model* for your abstract/intuitive definitions of implication :)
01/26 02:15:29<daemoz> true haha
01/26 02:15:41<daemoz> It doesn't fit what makes sense naturally to me. Who knows why.
01/26 02:17:35<stoopkid> i felt the same way, i've mostly just given in out of that pragmatic lack of a better answer, kinda like how you can interpret the complex numbers as meaningless but still useful for factoring equations, for whatever reason
01/26 02:18:04<daemoz> Right.
01/26 02:18:14<daemoz> Probably still a fun area to poke at :)
01/26 02:19:09<stoopkid> for sure, i've been doing some of that lately, some aspects of the True / False thing still don't sit right with me either
01/26 02:19:35<daemoz> This is also how some networks deal with possibly undelivered results, ya know?
01/26 02:19:57<stoopkid> i kind of suspect the principle of explosion to be the right thing, but, i think what we're lacking to justify it is the proper definition of "False"
01/26 02:20:12<stoopkid> what do you mean?
01/26 02:20:16<daemoz> The empty set 'works' and that's interesting and yeah it could be because that's just how logic works or an accident
01/26 02:21:24<daemoz> like, machines trying to communicate and say one halts and after a time being marked as non-delivered or whatever. That's like a third state for a group of bits.
01/26 02:21:59<stoopkid> ah, true
01/26 02:23:06<stoopkid> yea come to think of it i delve into 3-valued logic quite often in informal real-world reasoning but just never take the time to rigorously formalize it into a logic rather than just a space of things i'm doing 2-valued logic over
01/26 02:23:43<daemoz> Right, I think most people do this intuitively
01/26 02:23:48<daemoz> Operators over logic, like maybe
01/26 02:24:09<daemoz> but for this to work I guess you do need a nil state
01/26 02:24:17<daemoz> or something to that effect.
01/26 02:24:36<daemoz> or it tags all things using the value as probabalistic
01/26 02:27:05<stoopkid> it's worth exploring some, it's relevant even just for exploring 2-valued constructive logic. i was reading something about how you can use a 3-valued logic to demonstrate that peirce's law ( https://en.wikipedia.org/wiki/Peirce%27s_law ) isn't provable in intuitionistic logic because it would have to take on the 3rd truth value in this other logic or something
01/26 02:27:35<stoopkid> i didn't delve into the details of that much, i should check that out again, but yea, probability theory, there you go
01/26 02:27:46<stoopkid> infinite space of truth values between 0 and 1
01/26 02:28:49<daemoz> Man that's a headful
01/26 02:29:54<stoopkid> heh yea, don't worry about that too much, it's there if we want to explore it but not necessary to do so for the project or doing useful math in Agda or on paper or otherwise
01/26 02:30:27<daemoz> For sure :)
01/26 02:31:05<stoopkid> now, the way i'm thinking about principle of explosion is, what should be able to derive everything in the space? a product of everything in the space, so, that's basically what i'm thinking of False as currently
01/26 02:31:39<daemoz> I guess in my head that seems more like True.
01/26 02:31:46<daemoz> You have a unit of stuff
01/26 02:31:52<daemoz> and from this base unit you can derive anything
01/26 02:32:14<daemoz> False being a nothing so how could you drive anything from it?
01/26 02:32:38<stoopkid> well, that's sort of what i think too, especially when looking at it like cartesian product, but, intersection is also a product
01/26 02:34:42<stoopkid> like, True would correspond to an OR of everything in the space
01/26 02:36:10<stoopkid> Exists (A : Type) . A
01/26 02:36:23<daemoz> Hmm I dont' follow.
01/26 02:39:31<stoopkid> well, Exists (A : Type) . A, this is basically the type of all "true statements"
01/26 02:39:46<stoopkid> all the things you can actually construct
01/26 02:40:25<stoopkid> Forall (A : Type) . A, this is saying that every statement is true
01/26 02:41:31<stoopkid> and ofc if you took this as the definition of False, the principle of explosion would follow
01/26 02:42:14<daemoz> I think I'm not understanding the syntax. Additionally I'm trying to get something you typed earlier to type-check in the other tmux session atm.
01/26 02:42:26<daemoz> Do you think you could look at that real quick?
01/26 02:42:55<stoopkid> daemoz or subst?
01/26 02:43:25<daemoz> daemoz :P
01/26 05:50:43-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/26 05:50:48*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/26 08:47:12*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
01/26 12:16:10-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/26 12:16:17*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/26 13:10:28*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
01/26 14:23:53*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/26 17:48:26*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
01/26 18:55:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/26 18:55:48*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/26 20:18:28*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 268 seconds
01/26 20:34:49*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/27 17:45:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 264 seconds
01/27 18:02:09*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/27 18:03:27*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/27 18:06:20*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 240 seconds
01/27 18:09:02*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 256 seconds
01/27 19:44:30*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/27 20:19:03<daemoz_> ah, so I talked to my roomates about hosting from my house (free, will likely be faster than the vps). It'd take me a bit to set up the vm but that's definitely in the clear if that sounds like a good idea to all involved.
01/27 20:23:22<stoopkid> that could work
01/27 20:24:29<stoopkid> we can try it out anyway if you wanna set it up, i was thinking about doing the same kind thing for backups
01/27 20:29:02<daemoz_> For sure. I've been needing a physically seperated backup solution for my local git repositories so if we end up doing work from my machine I'll set up some sort of regular backups to a seperated hdd or something.
01/27 20:29:38*** Nick regain: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) is now known as daemoz
01/27 20:37:49<daemoz> Will have a nice chunk of time tonight to work on Agda. You going to be around?
01/27 20:58:21<stoopkid> can't tonight unfortunately, if you've got time for it tomorrow i'll be working on it
01/27 21:01:45<daemoz> That sounds good. Even better actually because a lot of tonight will be me just getting a better understanding of agda syntax, the type semantics, and an understanding of that file you commented for me. We can pick up after that then.
01/28 00:33:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Read error: Connection reset by peer
01/28 00:34:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/28 01:30:21<stoopkid> yeesh finally  making some headway on subst proofs in agda
01/28 01:33:44<stoopkid> in the sense of, up til now everything i try to prove ends up depending on something else i need to prove, which ends up depending on something else, and i've finally dug down the rabbit-hole far enough that i'm reaching the end and starting to climb back up
01/28 01:47:03<daemoz> unwind the stack!
01/28 01:48:21<stoopkid> hehe
01/28 01:49:05<stoopkid> actually now i'm just jumping right back to the top of the stack cause i've lost track of how i even got to the point of proving these sublemmas in the first place :)
01/28 01:49:29<daemoz> xD I know those feels
01/28 01:50:12<daemoz> I've been noticing I've kind of always naturally looked at things generally. Kind of why this stuff is interesting.
01/28 01:52:04<stoopkid> you mean in the sense of, trying to find generalizations of reoccurring structures?
01/28 01:52:51<daemoz> Yeah exactly
01/28 01:53:45<daemoz> For instance, I've never tried to prove a sublemma, but I have experienced having to solve a problem in order to solve a problem in order to solve a problem and forgetting the details in the stack
01/28 01:54:13<daemoz> Trivial, just a passive observation as to perhaps why these things are interesting to me.
01/28 01:55:17<stoopkid> same for me that's kinda how i got roped into all of this originally, and still a big motivator for my continued interest in it
01/28 01:56:03<daemoz> general stuff is interesting ^_^
01/28 01:58:00<stoopkid> i used to be like a "good" programmer, meaning there wasn't a whole lot of friction between me and writing some code, until i started doing more & more complex work, especially trying to implement my own ideas, and started finding a general inability to capture the abstractions & structures i had in my head
01/28 01:59:13<stoopkid> then my focus became less on "apps" and more on how to solve this general representational issue in software
01/28 01:59:39<stoopkid> and less on writing code pragmatically & more on math / comp sci
01/28 02:00:05<daemoz> Writing imperative programs is fun until it becomes tedious. It's this weird generalized area that isn't hashed out yet so there's a lot of friction.
01/28 02:00:29<daemoz> I understand that. My personal projects kind of have this underlying trend of becoming more and more structurally complex.
01/28 02:01:09<daemoz> Up to the point that my current one involves a tokenizer and nestable callables which are constructed through parsing strings.
01/28 02:01:31<daemoz> mini execution environment
01/28 02:05:24<stoopkid> indeed, i actually reached the point that i decided that i no longer wanted to build any "specific" softwares and rather a system that would allow all code/data to be integrated (well, originally was just all data, and even that was looking to be impossible, until i found tau/HMC and now it's both code & data :)
01/28 02:06:33<daemoz> Honestly that's how I ended up here too. Still the part that is highly motivating for me is this is the underlying technology for a sort of interactive open-source distributed 'consensus' of scientific information or 'facts' or what have you.
01/28 02:07:05<daemoz> I think it's really important for humanity going forward to have a sort of... agreed upon collection of things that we've found to be true.
01/28 02:07:15<daemoz> Organization is the bottleneck atm I think :P
01/28 02:07:59<daemoz> also with this it's possible one could find incorrect assumptions just on the basis of investigating collisions within the model.
01/28 02:08:45<stoopkid> sure, inconsistencies in theories or between theories will be made readily apparent
01/28 02:10:16<stoopkid> several times i've believed some proofs in the literature until i try to formalize them into MLTT and find them to be flawed
01/28 02:10:17<daemoz> and for the management of a democratic model of policies.
01/28 02:10:53<stoopkid> in some cases just the proof is flawed and the result is fine, in other cases the result has actually been completely off the mark
              <daemoz> interesting. like flawed in what wy
01/28 02:10:54<daemoz> *way
01/28 02:11:12<daemoz> Haha, damn. Did you tell the authors?
01/28 02:11:23<daemoz> ask for a rebuttal or whatever
01/28 02:12:40<stoopkid> i did, and in all cases they said something along the lines of "ha, sure enough, can't believe nobody's caught this yet, glad somebody's reading my papers"
01/28 02:12:58<daemoz> Hahah. Rad!
01/28 02:13:52<stoopkid> one of them i got them pretty interested in agda cause i told them about how i used it to find the mistake, and i should probably contact them again about that
01/28 02:14:11<daemoz> Would be good to follow up. Maybe they are in this rabbit hole now too xD
01/28 02:15:43<stoopkid> i had told them i'd send them my formalization of their paper when i finished it, and then give them a walkthrough and see if they'd be interested in playing around with it, they said that would be cool but i never finished formalizing the paper and then i got my day-job (at least, i think the day-job came 2nd? can't remember, everything's a blur)
01/28 02:16:09<stoopkid> and then kinda forgot about it til... just a bit ago XD
01/28 02:16:22<daemoz> > gets day-job, > all is a blur. Sounds about right xP
01/28 02:16:50<stoopkid> hehe
01/28 02:17:30<daemoz> it's nice going through this haskell tutorial right now. I really was making it hard for myself not getting some of these semantics nailed down.
01/28 02:17:38<daemoz> like what backticks meant, etc.
01/28 02:18:14* stoopkid doesn't remember what haskell backticks mean
01/28 02:18:22<daemoz> list comprehensions are dope. It has a similar format for defining dependant types in agda. I guess the only similarity is you append a predicate in both cases
01/28 02:18:35<daemoz> add x y = x + y
01/28 02:18:37<daemoz> add 1 2 == 3
01/28 02:18:45<daemoz> 1 `add` 2 == 3
01/28 02:18:55<stoopkid> ah infix right
01/28 02:19:07<daemoz> just for readability in some cases.
01/28 02:22:20<stoopkid> yea i heavily abuse fixity in languages that allow me to do so :)
01/28 02:22:35<daemoz> You would be so at home in lisp xD
01/28 02:22:46<daemoz> arbitrary semantics really
01/28 02:24:06<stoopkid> sure, it's basically just untyped lambda calc + recursion
01/28 02:24:15<stoopkid> and i'm all about some lambda calc :)
01/28 02:25:07<stoopkid> i'm one of those odd folks who's more at home in lisp than C or python
01/28 02:25:27<daemoz> I'm of the same sort, and I really think it's not odd I think people just like what they already know :)
01/28 02:26:37<stoopkid> i like "that which i can know at all" :)
01/28 02:26:48<daemoz> Hadn't thought of lisp as lc + recursion. I suppose that is true. It doesn't include the fact that it can operate on lisp code itself though, which is the key point for me at least.
01/28 02:26:57<daemoz> What do you mean by that?
01/28 02:27:19<daemoz> macros and all that.
01/28 02:29:08<stoopkid> what draws me to things like lisp and lambda calc, prior to them popping up in math theory like the curry-howard correspondence, is that their semantics are simple & well-defined enough that i can actually wrap my head around the entire thing and am not just working with a partial (and sometimes partially incorrect) view of what's really going on like is often the case (for me at least) in things like C++,
              <stoopkid> java, python, javascript-in-browser, etc..
01/28 02:29:48<stoopkid> ah macros, yea that's not an lc+recursion feature :)
01/28 02:30:18<daemoz> I suppose it could be though if arbitrary execution order was a thing.
01/28 02:30:35<daemoz> And yeah, the semantics/syntax at every different level or area of imperative languages vary so much.
01/28 02:30:43<daemoz> It's not based on a simple idea necessarily.
01/28 02:30:55<daemoz> Unless you look at encapsulation as a basic unit in a lang like c++
01/28 02:31:10<daemoz> as far as oop goes c++ is pretty good at doing it.
01/28 02:31:14<daemoz> If you ask me.
01/28 02:32:11<daemoz> rust is really great at being an expression based drop in for c++ though that has easier access to higher-level functionality and great generic programming features.
01/28 02:32:18<daemoz> but I digress,haha
01/28 02:33:32<stoopkid> well, and, compare the C++ standard to the definition of lambda calc
01/28 02:33:56<stoopkid> a good portion of it is just simply "undefined behavior"
01/28 02:35:12<stoopkid> and the length / complexity of the standards, etc..
01/28 02:35:27<daemoz> It's true. It's certainly a scaffolding language. A lot of cool stuff has been done with it but I still think it's this weird half-way point in language design that's just been held onto for so long because, partially, people 'just like what they already know', and perhaps because of that and it's large usage, it's dependable for the most part.
              <stoopkid> now, obviously C++ gives you more bells & whistles, generally more convenient to work with
01/28 02:35:42<daemoz> not dependable as in, decidable, or safe, but as in you can complete a project with it.
01/28 02:36:22<daemoz> c++ gave us a widely usable way to share semi-modular code.
01/28 02:36:41<daemoz> wrap it up in a bow, label it's ins and outs and types, bam.
01/28 02:37:02<daemoz> safe and somewhat universal (for the time)
01/28 02:37:24<daemoz> *typesafe, theoretically
01/28 02:37:36<daemoz> +'for the most part' xD
01/28 02:40:31<stoopkid> indeed, and the problem is less so much this itself, but rather the associated widespread mentality of just taking the ad-hoc collections of higher-level primitives as... "primiitive", and just saying "screw it, let's just keep building the house of cards higher"
01/28 02:41:16<stoopkid> (well, really just "wider" actually, the house of cards never gets very tall because it's a house of cards :)
01/28 02:41:19<daemoz> Yep
01/28 02:41:32<daemoz> Haha, the analogy holds
01/28 02:43:23<stoopkid> and that's why the dependent types play such an important role in all my plans for things and in autonomic, they provide the behavioral constraints that can hold everything together while we keep building upwards
01/28 02:44:29<daemoz> I agree. I view it as something that would become a staple in modern computing systems, especially those that are networked or need to maintain a sort of consensus.
01/28 02:45:56<daemoz> It'd be real cool if programs could be built up from specifying what the ins and outs need to be like using dependant types. Small matching components would be pulled from a collective datastore that match the type and then if one that is more efficient is invented it could be replaced without harm and next 'compile'(?), each program could reap those benefits.
01/28 02:46:22<stoopkid> exactly! :D
01/28 02:46:35<daemoz> I saw something like that which was like... FaaS?
01/28 02:46:38<daemoz> functions as a service?
01/28 02:47:02<daemoz> c style and obviously restricted expresivity wise but people use it, a lot of people from what I understand.
01/28 02:47:57<stoopkid> haven't heard of that i'll look into it
01/28 02:49:35<daemoz> Been a while since I looked into it (year or so), let me know if you see anything interesting.
01/28 02:52:26<stoopkid> what i'm particularly interested in doing is using this concept to allow crowd-sourcing features (as opposed to just content) into a wiki-like encyclopedia
01/28 02:52:58<daemoz> What's an example of a feature that would be crowd-sourced?
01/28 02:53:43<stoopkid> like interactive UI, map features, the intention is: whatever you could imagine
01/28 02:54:33<daemoz> So a collection of tools that are crowd-sourced tools that one could spool up for demonstration purposes when writing or editing a wiki article?
01/28 02:54:34<stoopkid> different things to happen when you hover-over something, arbitrary interface into the data
01/28 02:55:03<stoopkid> sort of, a bit more generalized than that
01/28 02:55:19<daemoz> It's not quite clicking for me
01/28 02:55:25<daemoz> I don't think I understand what you mena.
01/28 02:56:15<stoopkid> so like say you're looking at an online map that pulls data from a database and renders it, and allows you interact with the map to put data back into the database
01/28 02:57:02<daemoz> oh sweet, 'arbitrary interface into the data'.
01/28 02:57:10<stoopkid> the more different kinds of data you want to be able to render, and the more different ways you want to be able to render it, and the more different kinds of interactions you want to allow with it, this all requires some kind of code to be written
01/28 02:57:15<stoopkid> usually
01/28 02:57:41<daemoz> unless it was already written. and ~generally~ :D
01/28 02:58:55<stoopkid> right that initial code would either have to provide like, the right set of mapping primitives to allow people to do "enough" of the different kinds of things they need, or, some centralized staff would have to continue maintaining and adding more features
01/28 02:59:33<stoopkid> *unless* you could securely & coherently crowd-source feature updates into it
01/28 03:00:33<stoopkid> a centralized staff will always be limited on what they can do compared to what crowd-sourcing could theoretically accomplish
01/28 03:00:48<daemoz> If you do it in several layers it gets composable
01/28 03:01:11<daemoz> this one sorts values
01/28 03:01:15<daemoz> this one displays values
01/28 03:01:27<daemoz> this one pushes to value set
01/28 03:01:35<daemoz> this one is an interface for pushing to value sets
01/28 03:02:24<daemoz> idk how you'd 'prove' that it displayed things, that part would have to be human done unless some kind of camera, image detection testing machine is constructed
01/28 03:02:28<daemoz> but the rest could be proved in code and all
01/28 03:03:23<daemoz> this one stores multiple interfaces, etc.
01/28 03:04:36<stoopkid> well, you don't "prove" real-world things, you prove things about abstract models of those things, and adjust your models according to observation
01/28 03:04:58<daemoz> auto-observation, it would be then I guess xP but thanks for the distinction.
01/28 03:04:59<stoopkid> at least, that's the stage we're at right now heh
01/28 03:05:58<daemoz> The day nuanced interactions with a computer are more or less decidable is coming pretty fast I think.
01/28 03:06:02<daemoz> Including input and output.
01/28 03:06:47<stoopkid> i'd agree with that
01/28 03:08:24<stoopkid> here's a nice thing about MLTT: because it has the capacity to describe languages and prove things about those languages and programs in those languages, all the programming work that's already been done can be pulled into MLTT's representational system without having to rewrite it all
01/28 03:10:28<stoopkid> if you can model some programming language/environment in MLTT, you get models of all the programs in that language/environment for free along with it
01/28 03:11:43<daemoz> Wait so how would that function? You'd have a model of say, how c++ works, for instance. You then could run c++ code using this model?
01/28 03:11:55<daemoz> Like simulate it?
01/28 03:14:47<stoopkid> MLTT-TFPL wouldn't "run" it for you directly because it's not turing-complete but it can a) run it for you out to arbitrarily many execution steps, or b) logically model the full execution and allow you to prove things about turing-complete execution despite not being turing-complete itself, and c) you could then transfer programs that you've proven things about into the rest of your computing environment to
              <stoopkid> run outside the MLTT-engine, to recover full turing-completeness
01/28 03:15:46<daemoz> wait that's interesting. You're saying MLTT is not turing-complete? Why?
01/28 03:16:09<stoopkid> ah, well, for one this would be problematic for the dependent type system
01/28 03:17:22<stoopkid> functions get executed while the system is doing its type-checking, if these functions can infloop then your type-checking can infloop
01/28 03:18:28<stoopkid> for two, some inflooping programs correspond to inconsistencies under curry-howard correspondence, and i can show you how that would work:
01/28 03:18:53<stoopkid> because i can write arbitrary inflooping programs, every proposition B is proven from every proposition A:
01/28 03:19:21<stoopkid> f : A -> B
01/28 03:19:26<stoopkid> f x = f x
01/28 03:20:08<stoopkid> you say, "i'm gonna give a proof f of a A -> B"
01/28 03:20:28<stoopkid> okay so assume you have a proof of A, call it x
01/28 03:20:38<stoopkid> now you have "f x = ..."
01/28 03:20:45<stoopkid> and you have to fill in the ... with a proof of B
01/28 03:21:17<stoopkid> well, where can you get a proof of B from? take this function f, of type A -> B, and apply it to x, of type A, and you get f x of type B
01/28 03:21:44<stoopkid> simple example of circular reasoning, interpreted into curry-howard
01/28 03:21:56<daemoz> it infinitely recurses
01/28 03:21:57<stoopkid> yep
01/28 03:22:11<daemoz> and that means a system cannot be turing complete? if it can infloop?
01/28 03:22:20<daemoz> surely a turing machine can infloop
01/28 03:22:27<daemoz> obviously it can
01/28 03:23:13<stoopkid> turing-machines can indeed infloop and so therefore turing-complete systems can infloop, but agda cannot
01/28 03:23:30<stoopkid> at least, unless you use some "non-MLTT" features of it
01/28 03:23:51<daemoz> so... mltt is not TC because it CANT infloop?
01/28 03:23:53<stoopkid> right
01/28 03:23:57<daemoz> that's such a weird idea
01/28 03:24:13<daemoz> is that the only thing that prevents it being classified TC?
01/28 03:26:00<stoopkid> well, specifically what prevents it from being classified as TC is that it won't simulate every turing-machine
01/28 03:26:22<daemoz> but it only cannot simulate turing-machines that infloop
01/28 03:26:34<stoopkid> ah, now we're getting into the deep comp sci :D
01/28 03:27:17<stoopkid> it cannot simulate any turing-machines that infloop, but there are also infinitely many halting turing-machines that it can't simulate either
01/28 03:27:26<daemoz> why is that/
01/28 03:28:00<stoopkid> this will be the case for any language that only simulates halting programs, basically in order to be able to simulate every halting program, but *only* the halting programs, would require solving the halting problem
01/28 03:28:12<stoopkid> at first it almost looks like you can get around it, but then no, you can't XD
01/28 03:28:42<daemoz> we just need time traveling computers xP
01/28 03:29:02<daemoz> I suppose even that wouldn't completely solve it.
01/28 03:29:21<daemoz> unless your computer can not only travel through time but can travel to all positions of time.
01/28 03:29:23<stoopkid> but i'll surely be down to try to and get around it again with you in order for either you to see why exactly it's impossible, or alternatively actually find the magical workaround :)
01/28 03:29:46<stoopkid> to try and*
01/28 03:29:47<daemoz> Hahaha, how's a wall to fall unless people bash at it? xD
01/28 03:30:43<stoopkid> also even if the wall doesn't fall, the reasons why it didn't are sometimes hard to keep track of if you don't do some of the bashing yourself
01/28 03:30:55<daemoz> Observation!
01/28 03:32:56<stoopkid> so, essentially there's an infinite hierarchy of ever-more-powerful "total" languages (ones that have only halting programs)
01/28 03:33:34<stoopkid> this is essentially the same thing as the hierarchy of complexity classes
01/28 03:34:39<daemoz> Okay yes, this thing, this hierarchy
01/28 03:34:43<daemoz> I don't understand it at all.
01/28 03:35:09<daemoz> Set 0 -> Set 1, etc.
01/28 03:35:19<stoopkid> ah, not that hierarchy
01/28 03:35:27<daemoz> ohhh hrmm
01/28 03:35:29<daemoz> okay
01/28 03:36:17<stoopkid> possibly related, but, not specifically directly related, one sec
01/28 03:37:06<stoopkid> this hierarchy: https://en.wikipedia.org/wiki/Computational_complexity_theory#Important_complexity_classes
01/28 03:38:41<stoopkid> so, Set 1 should be a more complex "set" than Set 0, and the complexities of these sets could potentially be related to the rest of what's in this hierarchy
01/28 03:38:50<stoopkid> (the computational complexity hierarchy)
01/28 03:39:51<stoopkid> so like, a machine with n bits of memory vs. the same machine but with (n+1) bits of memory, the latter is higher on the computational complexity hierarchy
01/28 03:40:38<stoopkid> problems are stratified into a complexity hierarchy, logics are stratified into a complexity hierarchy in multiple different ways, and programming frameworks are stratified into a complexity hierarchy
01/28 03:41:47<stoopkid> https://en.wikipedia.org/wiki/Chomsky_hierarchy
01/28 03:43:12<stoopkid> grammars & languages are stratified into a complexity hierarchy, and this is directly related to the complexity associated to machines that can parse these languages, and also directly related to the complexity associated to logics that can "model" the languages
01/28 03:45:19<stoopkid> so, agda's complexity as a halting framework for computation is somewhere above "primitive recursion", but below "general recursion"
01/28 03:45:49<daemoz> I gotta say that very little of this is making sense to me.
01/28 03:46:12<stoopkid> i see then i should probably back way up :)
01/28 03:46:39<daemoz> I understand the basics of notating algorithm complexity.
01/28 03:46:51<daemoz> Like if an algorithm is 'linear' or not
01/28 03:46:59<daemoz> if it takes log n time, etc.
01/28 03:47:27<daemoz> I don't understand how this correlates because I'm looking at the first link you sent me and I'm seeing those familar things
01/28 03:47:42<daemoz> but beyond that I'm at a loss.
01/28 03:48:42<stoopkid> alright, so, we can also associate almost this exact same measure of complexity to *problems*, by asking what are the optimal algorithms that can solve them
01/28 03:50:56<stoopkid> we can give a complexity measure on programming languages by comparing them to see what other programming languages they can simulate
01/28 03:51:25<daemoz> oh so if a language can simulate another language it is higher on the scale?
01/28 03:51:50<daemoz> that is can simulate all possible programs the guest language could run?
01/28 03:51:51<stoopkid> at least as high on the scale
01/28 03:52:00<daemoz> oh, but not necessarily higher.
01/28 03:52:12<daemoz> like two languages could have equal ability to simulate each other.
              <stoopkid> right because the other lang might also be able to simulate it as well
01/28 03:52:20<daemoz> word
01/28 03:52:22<stoopkid> turing-complete langs, for example
01/28 03:52:28<daemoz> are all inter-simulable
01/28 03:52:35<daemoz> [sic]
01/28 03:52:40<daemoz> *?
01/28 03:53:49<stoopkid> all turing-complete langs? at least in terms of their runtime yes, maybe not in terms of compile-time stuff like macros & type-system, but, that's sort of matter of interpretation because you could also use the turing-complete langs implement each others compilers & type-systems & macro evaluators
01/28 03:53:59<stoopkid> to implement*
01/28 03:54:04<daemoz> indeed
01/28 03:54:22<daemoz> hum okay, I'm following to here.
              <daemoz> or, so-far.
01/28 03:55:34<stoopkid> interestingly, programming languages that only contain halting programs can't simulate themselves, so, the simulation relation is always a "strictly greater than"
01/28 03:55:53<stoopkid> i'm not sure what's the case with languages that are not turing-complete but contain a mix of halting & non-halting programs
01/28 03:56:27<daemoz> but couldn't say c++ simulate c++?
01/28 03:56:42<daemoz> oh wait, so is c++ 'higher' on the scale?
              <stoopkid> sure it's turing-complete
01/28 03:56:55<stoopkid> it's "highest" on the scale
              <daemoz> than say something that always terminates like agda
01/28 03:57:38<stoopkid> it occupies the highest position on the scale that can be occupied if we accept the church-turing thesis that there's nothing beyond turing-completeness for computability
01/28 03:58:04<daemoz> I see..
01/28 03:58:08<daemoz> That's interesting.
01/28 03:58:18<daemoz> I wonder if someday we'll have problems that turing machines can't compute.
01/28 03:58:46<daemoz> humans need better problems smh
01/28 03:59:45<stoopkid> we've had them literally since turing-machines were invented (prior to real computers being invented) XD like, the halting problem for turing-machines for example? :)
01/28 03:59:57<daemoz> oh man, duh hahaha
01/28 04:00:31<daemoz> I'm looking at NP complexity wiki atm, can you explain what a non-deterministic turing machine is?
01/28 04:01:34<stoopkid> so let's say you have a problem like, boolean satisfiability, are you familiar with that one?
01/28 04:01:47<daemoz> I'm not, I can look it up real quick
01/28 04:02:35<stoopkid> non-deterministic turing machine is basically a machine that can spin up arbitrarily many deterministic turing-machines on demand
01/28 04:03:20<stoopkid> like, instantly and literally arbitrarily many of them
01/28 04:03:34<daemoz> That sounds impossible?
01/28 04:04:10<stoopkid> it is for the most part though the boundaries are somewhat blurred in QM, but for every day computing purposes we can say yes that is indeed impossible
01/28 04:04:14<stoopkid> it's useful as a theoretical tool
01/28 04:06:53<daemoz> Okay. The mechanics of that aren't quite clear to me. The benefit of these arbitrarily many simultaneous TMs is..? Can they communicate information or something?
01/28 04:07:19<stoopkid> basically a non-deterministic turing machine is like is a machine that can take all possible operation sequences simultaneously
01/28 04:07:38<stoopkid> rather than just one of those sequences
01/28 04:07:49<daemoz> So really it's a speed thing?
01/28 04:07:59<daemoz> Rather than the machine doing each possibility in sequence
01/28 04:08:21<stoopkid> they're a valid mathematical object, and we can relate their complexity, right, speed of problem-solving or whatever, to complexities of our models of deterministic real machines
01/28 04:08:53<daemoz> I don't quite see how that's useful, what am I missing about this?
01/28 04:10:58<stoopkid> it's only useful for proving other results in complexity theory that eventually relate back to real-world implications, like the P vs NP problem. the non-deterministic machines wouldn't be useful in and of itself, per se, since we don't generally have access to anything that behaves non-deterministically like that 
01/28 04:11:40<daemoz> So it's a different way to look at algorithmic complexity
01/28 04:11:50<stoopkid> but then like, look at QM, in some parts of reality it almost seems like some computer *is* taking all possible paths simultaneously, and then somehow deciding which one it took after the fact
01/28 04:12:09<daemoz> dude what even is being alive lmao
01/28 04:12:23<stoopkid> haha
01/28 04:12:29<daemoz> but alright, I think I get the jist of that.
01/28 04:12:38<daemoz> Definitely something I'll peer into later, at greater detail.
01/28 04:13:11<stoopkid> and yea, you can look at it sorta like the complex/imaginary numbers. they might be "imaginary", but they do help our theory of algebra, regardless of their status as "real-world" objects or not
01/28 04:13:49<daemoz> gotcha
01/28 04:14:51<stoopkid> so, yea, agda is somewhere in the middle of these various different hierarchies
01/28 04:15:37<stoopkid> not all the way at the top, but also nowhere near the bottom
01/28 04:15:50<daemoz> would you say agda is a type-1 language? (in the chomksy hierarchy)
01/28 04:16:09<daemoz> could be executed by a "linear-bounded non-deterministic turing machine"?
01/28 04:17:00<stoopkid> idk exactly where agda sits in the hierarchy, and it's language can be recognized by a much less complex "machine" than it
01/28 04:17:37<stoopkid> just like C++ can be recognized by a machine that always halts and tells you whether it's well-formed C++ code or not
01/28 04:19:36<stoopkid> agda's got various different complexities: 1) how complex of things can it express in its type-system, like, how complex of logical models can it make; 2) how complex of things can it *prove*; just because it can express something doesn't mean it has the axioms & inference rules to actually prove or refute the thing
01/28 04:20:10<stoopkid> 3) how complex of things can it run, like, how "powerful" of a recursion can it perform
01/28 04:21:45<daemoz> 'complicated' xD
01/28 04:22:24<stoopkid> and ofc also 4) how complex of a language is needed in order to faithfully represent the semantic objects that agda is supposed to be representing
01/28 04:22:35<stoopkid> yea complexity is not simple
01/28 04:22:58<daemoz> what do you mean by 'faithfully represent the semantic objects'?
01/28 04:24:56<stoopkid> well, take the set of all possible strings, your language will be some subset of this
01/28 04:26:31<stoopkid> not all subsets necessarily have a meaningful interpretation of their members into Agda programs (like, the semantic objects, the algorithms that we're intending the strings of the language to represent)
01/28 04:26:42<stoopkid> finite sets won't even having any mapping at all
01/28 04:27:56<stoopkid> and for some infinite sets your mapping/interpretation might not be computable
01/28 04:29:14<stoopkid> for some infinite sets there wouldn't even be a meaningful way to compute
              <daemoz> Alright ya lost me again. That's alright though.
01/28 04:29:35<stoopkid> well, consider that we intended for there to be infinitely many different agda functions
01/28 04:30:28<stoopkid> there's infinitely many different Nats, there should be a string in the language corresponding to a representation of that Nat
01/28 04:30:41<stoopkid> (or an Agda file that contains it)
01/28 04:31:25<stoopkid> if your language contained only finitely many strings, for example, then there's not enough strings to write every Agda program that we intend for there to be
01/28 04:31:42<daemoz> that's true
01/28 04:34:03<stoopkid> if you had infinitely many strings available, regardless of what they are, then, hypothetically there's a mapping from those strings to Agda programs, but actually computing that function might be another story
01/28 04:34:22<stoopkid> the strings could be like {"0", "00", "000", ....}
01/28 04:34:42<daemoz> okay
01/28 04:36:12<stoopkid> so yea, basically just pointing out here this other (collection of) complexity measure(s) that would measure how syntatically complicated your language has to be in order to represent the semantic objects that you're intending it to represent
01/28 04:37:22<daemoz> Wouldn't this be the case for any language though?
01/28 04:37:28<daemoz> If you had infinite strings?
01/28 04:38:12<daemoz> also thought you weren't going to be on tonight xD
01/28 04:38:13<stoopkid> well yea that's not special about agda
01/28 04:39:42<stoopkid> oh that was earlier
01/28 04:39:48<daemoz> gotcha
01/28 04:41:01<stoopkid> i was off all night earlier but then my gf went to sleep and i couldn't cause my cycle's all screwed up so i came back to code a bit, didn't know i'd find you here :)
01/28 04:41:29<daemoz> Ah! I know those feels too! hahaha
01/28 04:41:45<daemoz> Yeah glad you happened to be on this turned into a pretty enlightening discussion for me.
01/28 04:42:28<daemoz> I think I'm going to move to focusing on agda syntax/semantics, I've gotten past all the basic syntax in haskell now.
01/28 04:42:31<stoopkid> glad i could make some of it more understandable
01/28 04:42:51<stoopkid> nice :)
01/28 04:44:14<stoopkid> it's not too much different from haskell
01/28 04:44:46<daemoz> I'm noticing that. I started here because learn-you-an-agda recommended reading the first part of learn-you-a-haskell first, haha
01/28 04:46:07<stoopkid> ah, yea, that's an annoying feature of the general functional programming community, "go learn haskell first" is typically the first step they give you
01/28 04:46:24<daemoz> just as a stepping stone into functional in general I'm sure.
01/28 04:46:52<daemoz> Not sure if that's  harmful or helpful though as I've always found ML-styled languages to have really... quirky syntax?
01/28 04:47:10<daemoz> but yeah, nothing new in the haskell tutorial just how it all looks and works in haskell
01/28 04:47:16<daemoz> now onto the goodies!
01/28 04:50:08<stoopkid> i tend to find the haskell focus more harmful than helpful for beginners to agda because the basic purpose/intentions/philosophy of what you do with the functional programming are pretty radically different, and then they're asking haskell people about things while they learn haskell and then they get steered in a sort of opposite direction of things
01/28 04:50:56<daemoz> like, away from functional land
01/28 04:51:02<daemoz> hah
01/28 04:51:40<daemoz> I'm happy to have found lisp first because I think haskell would have turned me off about it except in some ways that I probably wouldn't have gotten to if it hadn't been the interest in this project.
01/28 04:53:03* stoopkid doesn't like haskell, and would not be too greatly interested in functional programming if not for its use as a proof-framework in dependently typed languages
01/28 04:53:57<daemoz> It's definitely not my favorite language at all. I like the things conceptually that can be done in it but it's not fun for me to code in.
01/28 04:54:07<daemoz> And agda, well I'm basically just getting there :P
01/28 04:56:21<stoopkid> with agda you gotta take a completely different approach, this is part of where people get steered wrong when they go with haskell, they start thinking that the point is to program in the purely functional language, or that we should be building apps that way
01/28 04:56:38<stoopkid> is to actually* program, or actually* building apps
01/28 04:56:52<daemoz> Right, but it's real power is in proving things.
01/28 04:57:42<stoopkid> you get way more power out of that than you do just from "programming with pure functions"
01/28 04:58:53<daemoz> Yeah I've personally never bought onto the pure function hypetrain. What I'm actually telling the computer to do instruction-wise is too abstracted for me to feel like I'm making the right decisions.
01/28 04:59:07<daemoz> Perhaps that's just my novice though
01/28 04:59:09* daemoz shrugs
01/28 04:59:29<stoopkid> hell no, you're exactly right
01/28 04:59:53<daemoz> It's a study language, and that's okay and it's cool and useful for that.
01/28 05:00:00<stoopkid> when my processor directly executes purely functional haskell, then we'll talk XD
01/28 05:00:12<daemoz> Hahaha, yeah right xP
01/28 05:00:24<daemoz> or if it's even optimized in that direction
01/28 05:00:29<daemoz> It's  not like cpus are designed without bias
01/28 05:00:32<daemoz> they totally are
01/28 05:00:47<daemoz> to make sequential programming faster
01/28 05:01:45<stoopkid> sure, and i mean, why wouldn't they do that since their fundamental method of operation is generally sequential and only becomes "functional" if we arrange the instruction sequences appropriately
01/28 05:02:30<daemoz> There's also the 'functional languages are optimal for concurrency' but that just eliminates data races and that's the end of the benefit as far as I understand.
01/28 05:02:53<daemoz> Rust has done that and it's definitely sequential-style
01/28 05:03:28<stoopkid> pretty much. referential transparency is nice for caching, there's plenty of benefits to it, but, it should be a strategy not a rule
01/28 05:03:44<stoopkid> the rule is the machine
01/28 05:03:49<stoopkid> and logic
01/28 05:04:38<daemoz> Not sure if I fully understand what referential transparency means.
01/28 05:05:17<stoopkid> means the same expression always computes the same value no matter when you call it
01/28 05:05:39<stoopkid> functions that use external state like a global counter, for example, are not referentially transparent
01/28 05:05:59<daemoz> gotcha
01/28 05:06:33<stoopkid> but.... all functions become referentially transparent if you consider all external state they use to be input instead of external state!
01/28 05:06:51<daemoz> Huh, that's definitely a way to look at it!
01/28 05:07:00<daemoz> Interesting
01/28 05:08:12<stoopkid> that's more or less how functional languages start trying to model stateful programming: take the "current state" as input, give the "next state" as output
01/28 05:08:36<daemoz> Whoa okay, cool that answers a question I've had for a while about that whole thing.
01/28 05:08:45<daemoz> the whole world in -> world out
01/28 05:08:55<daemoz> okay cool that makes sense
01/28 05:10:19<daemoz> having trouble getting the nat symbol to show up in emacs. Does \bn work for you?
01/28 05:10:27<daemoz> It registers for me but shows no symbol.
01/28 05:11:12<stoopkid> works for me
01/28 05:12:02<daemoz> weird. I'll just use Nat for now
01/28 05:13:26<stoopkid> so yea that all kinda goes right back into modeling other languages from within MLTT
01/28 05:14:15<daemoz> What do you mean?
01/28 05:16:33<stoopkid> my ideal would be: you model your entire execution environment in MLTT, then everything that goes onto your machine is already in scope of applying MLTT to it. then you use the mathematical results, translations, etc.. to fine-tune compilation control and build up composable higher-level abstractions above the machine layer, not in a house-of-cards fashion
01/28 05:19:02<daemoz> Okay so you have this model of the execution environment written in Agda. This is the model of the actual hardware that a program would run on? And the program that is being run on the actual hardware is written in an arbitrary language but because of the mltt execution model we can prove things about the program?
01/28 05:19:07<daemoz> Is this correct?
01/28 05:21:41<stoopkid> right, and build up reusable libraries of proofs about various little machine code snippets to supplement & facilitate that, proofs of results that allow for different kinds of transformations on code, compilation, linking, specializing it to a specific task (optimizing and such)
01/28 05:23:15<daemoz> Okay, but for the libraries of proofs they would only be relevant for machine code snippets written in a particular assembly language
01/28 05:23:23<stoopkid> and then your proofs go all the way down, cause, it's one thing to prove things about c++ code but what really matters is the machine code that your compiler compiles it to, and also potentially on the surrounding execution environment that it eventually gets executed in
01/28 05:23:44<stoopkid> right
01/28 05:24:08<stoopkid> well
01/28 05:24:11<stoopkid> sort of right
01/28 05:25:56<stoopkid> results that relate different architectures ( cross-compilation and that sort of thing), these can often be chained together transitively, and, having more proofs about things just builds on itself cumulatively cause everything's related some way or another
01/28 05:26:17<daemoz> Oh yeah I can see how that could be built up.
01/28 05:26:20<daemoz> Oh wow
01/28 05:29:37<stoopkid> note the relationship to the lambda calc stuff we're doing in agda :)
01/28 05:30:13<daemoz> Don't quite understand that yet, unless I'm misunderstanding what you mean.
01/28 05:31:31<stoopkid> well, we're working on modeling a turing-complete framework of computation in agda and then proving things about it ( a framework that also just happens to have a whole lot of research done on it relating it to other frameworks of computation)
01/28 05:32:07<stoopkid> so, imo this isn't theoretical or "far off" stuff, this is right now stuff
01/28 05:33:00<daemoz> That's cool. That's what's going on in those agda files?
01/28 05:33:07<daemoz> on this machine
01/28 05:34:08<stoopkid> yea we've only made a bit of progress into so far (i underestimated how difficult some of these proofs would be and it took me a while to find the appropriate strategies but now i'm getting the hang of it) it but yea that's what we're doing
01/28 05:34:49<daemoz> I guess I missed the part where it was actually being coded.
01/28 05:35:00<daemoz> That's awesome
01/28 05:35:39<daemoz> Wait so tell me, the goal right now is to build a model execution environment. This is related to making the AN client hardware agnostic?
01/28 05:35:47<daemoz> I am perhaps lost at the relation.
01/28 05:35:49<stoopkid> well, i should say what we're doing in agda there is an educational prototype of the idea
01/28 05:35:58<stoopkid> actually no
01/28 05:36:30<stoopkid> this is all my own personal MLTT goals, which kinda derail the autonomic project slightly because i can only focus on one thing at once
01/28 05:37:40<daemoz> Okay I hear you. Yet this is also a grounds for people to get experience proving things about execution models in agda.
01/28 05:37:55<daemoz> Which is obviously important for AN.
01/28 05:38:19<stoopkid> it's a possibility to construct AN that way, and indeed that's what i tried to do at one point but i reached the conclusion that it was beyond my capabilities, but, i was not quite as skilled at the time as i am now
01/28 05:38:44<daemoz> It's certainly a large goal though, perhaps an additional, later goal.
01/28 05:39:02<stoopkid> right
01/28 05:39:06<daemoz> Will be easier if there's a community that will contribute proofs.
01/28 05:41:29<stoopkid> i look at it like, we can build up proofs and stuff because we all need experience with the framework to know what we're doing, and these proofs can be centered around pieces of the system, since we have to learn the system anyway (and also verify it! though on paper proofs are fine), and if this happens to lead us to a machine-verified and extremely-arch-agnostic AN system, great, and if it just leads us to a
              <stoopkid> normally-verified and normally-arch-agnostic AN system, that's all fine too, that's all we were aiming for in the first place before i derailed the project by finding out that these other things were even possibilities
01/28 05:42:29<stoopkid> there's kind of a fundamental flaw in the premise, due to computer science, godel's incompleteness
01/28 05:42:56<daemoz> Right, no system of axioms can prove it's own consistency
01/28 05:43:24<daemoz> You need another one to do that, but then that can't prove itself, and so on
01/28 05:44:37<stoopkid> right so in order to verify the logic we'd need a stronger consistent logic, and then we have two options a) just use that logic, because it's the stronger consistent logic, or b) use the weaker logic that we verified in the stronger logic because maybe it's more trustable
01/28 05:45:09<daemoz> There's no real great answer
01/28 05:45:21<stoopkid> no great answer, but there is a right answer: (a)
01/28 05:45:50<daemoz> Wait, but then you always  have to have a stronger logic?
01/28 05:46:00<daemoz> or is it reasonably enough to make a logic, make one that can verify it and then use the later?
01/28 05:47:53<stoopkid> well, it's not about "have to", it's about, if you have a stronger logic that can verify your weaker logic, then if you trust the stronger logic to have verified the weaker logic then why not use the stronger logic, and if you don't trust the stronger logic for actually "using it" but want to stick with the weaker logic because it's "more verified", why do you trust the verification if you don't trust the
01/28 05:47:54<stoopkid> stronger logic?
01/28 05:48:25<daemoz> That's a strange problem.
01/28 05:48:35<daemoz> But you can keep going up right, you could make a third that verified the second and so on
01/28 05:48:38<daemoz> when do you stop?
01/28 05:50:47<stoopkid> there's four scenarios there afaict: a) when you get tired and have to stop, b) when you run out of stronger logics, c) when you completely reinvent computer science & logic in a magical way that sidesteps these problems d) when you realize that the chain of verification ultimately ends inside your head
01/28 05:51:18<daemoz> xD Not used to this  kind of undecidability.
01/28 05:51:29<daemoz> But I guess I have been and just never thought of it.
01/28 05:52:49<stoopkid> well, right, the new concept here is that something *other* than your own mind will be doing the verifications
01/28 05:54:27<stoopkid> human minds used to be the only things that did verifications, and it would be hard to imagine what else there would even be ("formal" logics and all that)
01/28 05:54:39<daemoz> That's true.
01/28 05:55:16<stoopkid> and there wasn't nearly so much a question of whether to trust the conclusions of the human minds (as opposed to what?)
01/28 05:55:20<daemoz> Hey if lang2 verifies lang1, and lang3 verifies lang2, is it inferable that lang3 verifies lang1?
01/28 05:55:26<daemoz> or is 'strong enough to'
01/28 05:55:47<daemoz> As opposed to math, baby!
01/28 05:55:48<stoopkid> yes
01/28 05:55:55<daemoz> in all cases that's true?
01/28 05:56:42<daemoz> is this related to the church-rosser theorem?
01/28 05:56:44<stoopkid> yes, if we assume lang3 is correct, and lang3 verifies lang2, then lang2 is correct, therefore its verification of lang1 is correct, and therefore lang1 is correct
01/28 05:56:53<stoopkid> i don't think it's really related to church-rosser no
01/28 05:57:07<daemoz> I mean if lang3 skips lang2 and verifies lang1
01/28 05:57:32<stoopkid> hrm
01/28 05:59:36<stoopkid> idk that it would always be the case that you could find a verification that didn't somehow "go through" lang2
01/28 06:00:12<daemoz> Hrmm
01/28 06:00:19<stoopkid> idk that it wouldn't be either haha
01/28 06:01:04<daemoz> Okay I was just curious. If that were true then there truly would be a hierarchy of logics. As it stands, and as far as I understand it seems that the position on the hierarchy is arbitrary except for in the specific chain order that's being referred to.
01/28 06:04:03<stoopkid> hrm, i kinda see what you mean, but i would say this is less a matter of the positions in the hierarchy being "arbitrary" and more a matter of some logics only be related to other logics by this "verifies" relation by somehow "going through" an internal model of some "logic2"
01/28 06:04:23<stoopkid> also, the hierarchy is not necessarily a strict linear order, might be more like a DAG
01/28 06:06:05<daemoz> Gotcha.
01/28 06:06:49<stoopkid> i guess i see what you mean though, it's possibly not strictly "hierarchical", especially if we look at just verifying models of logics directly rather than models of models of logics
01/28 06:07:28<daemoz> Right
01/28 06:08:06<daemoz> What a strange problem.
01/28 06:08:46<stoopkid> i only have rather little knowledge of very small pieces of the actual "shape" of this hierarchy
01/28 06:09:55<daemoz> I wonder what could be discovered by studying it's shape
01/28 06:10:16<stoopkid> (well, more like very shallow birds eye view) and yea same :)
01/28 06:11:25<daemoz> I was reading something recently about topographical algebra or something?
01/28 06:11:28<daemoz> Whaaaaat
01/28 06:12:25<stoopkid> so far from what i know mostly what has been discovered is just relations on the things the shape contains, which is all good stuff, but idk how much has been learned from/about the large-scale structure/shape itself
01/28 06:12:51<stoopkid> (relations on the things the shape contains, as in, relations between particular complexity classes)
01/28 06:13:42<daemoz> It's all definitively beyond me but definitely interesting.
01/28 06:13:55<daemoz> Ahh! This agda thing is starting to make more sense.
01/28 06:14:15<daemoz> It's quite helpful in constructing proofs.
01/28 06:14:45<stoopkid> i'm not familiar with topographical algebra, i'm familiar with lots of topology/homotopy stuff though (it's actually not unrelated to MLTT, i'm about to start covering some of the relations in my notes)
01/28 06:14:58<stoopkid> indeed
01/28 06:15:18<daemoz> Hmm I'd like to read that at some point
01/28 06:16:43<daemoz> Alright. It's about time for me to wrap up and head to bed.
01/28 06:16:44<stoopkid> it's real easy to see, like the functions & pairs stuff, actually pretty much the same idea, but a bit more generalized, i have to sort it out a bit more though so i can show you the "picture"
01/28 06:17:37<stoopkid> sure thing, good talking, hope it cleared some things up
01/28 06:17:45<daemoz> Definitely did.
01/28 06:18:19<daemoz> Going to need some help tomorrow with more of getting my head around dep types but that's for then, if you'll be around.
01/28 06:19:08<stoopkid> yea i should be
01/28 06:19:36<daemoz> Rad.
01/28 06:19:40<daemoz> Alright, talk to you later!
01/28 06:19:46<stoopkid> cya :)
01/28 06:19:49<daemoz> Thanks for all the help :)
01/28 06:20:06<stoopkid> yea whenever
01/28 17:01:17-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/28 17:01:23*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/28 17:02:08<koom> just a note, on the vps, if you want emacs 2.5.3 and emacs mode, use "stack exec emacs"
01/28 18:40:31*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
01/29 00:35:29*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/29 00:35:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/29 05:01:09*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/29 05:01:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/29 07:40:39-SaslServ- koom!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
01/29 07:40:45*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/29 07:56:56*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 248 seconds
01/29 08:09:11-SaslServ- koom!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
01/29 08:09:17*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/29 09:02:44*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 264 seconds
01/29 09:07:36-SaslServ- koom!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
01/29 09:07:42*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/29 09:29:43-SaslServ- kook!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
01/29 09:29:49*** Join: kook (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/29 09:33:07*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 276 seconds
01/29 11:43:31*** Quit: kook (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 240 seconds
01/29 12:58:08-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/29 12:58:14*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/29 15:54:55-SaslServ- kook!~sirdancea@85.70.152.236 has just authenticated as you (sirdancealot)
01/29 15:55:01*** Join: kook (~sirdancea@85.70.152.236, sirdancealot: koo5)
01/29 15:56:45*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 268 seconds
01/29 16:19:42*** Quit: kook (~sirdancea@85.70.152.236) left #autonomic-dev: Ping timeout: 256 seconds
01/29 18:29:24-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/29 18:29:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/29 18:38:00*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
01/29 18:42:36*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/29 21:06:54*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
01/30 03:44:32*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/30 04:21:32*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
01/30 05:58:08*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/30 08:05:29*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 248 seconds
01/30 08:06:24*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/30 09:54:34<koom> <jo0nas> jmv: ping
              <koom> <jmv> Recommended RDF rules engine : Euler at https://www.agfa.com/w3c/euler/
              <koom> <jo0nas> thanks!
01/30 10:14:38*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 240 seconds
01/30 10:42:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/30 10:43:24*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)








01/30 19:54:15<daemoz> stoopkid: can you give me an easy practice problem? I'm reading through and believe I'm understanding the singleton example you showed me, but I'd like to test my interpretation by trying to represent something else in Agda.
01/30 19:58:56<stoopkid> first, have you represented the rest of the logical connectives?
01/30 20:01:06<stoopkid> False (empty set with principle of explosion), True (set with just one element), AND, OR, IMPLIES (you get that for free with "A -> B"), EXISTS (you've already got that one), and FORALL (you get that for free with "(x : A) -> B x"), and identity types, this is what you need in order to really get started with much
01/30 20:02:09<daemoz> Perfect. Okay I'll mess around with those.
01/30 20:17:58<daemoz> should 'and' be a type, declared with data?
01/30 20:18:54<stoopkid> yea, there's some other ways it could maybe be done but i'll show you that later
01/30 20:19:35<daemoz> I should also create a bool type that is a set of true and false?
01/30 20:19:40<daemoz> wait that wouldn't work
01/30 20:19:52<stoopkid> why wouldn't it work?
01/30 20:20:26<daemoz> I thought that the false type was unable to be.. used? i'm not sure
01/30 20:21:27<stoopkid> ah, well, this object "false" of type Bool is just like a "0" of type "Bit" (though Agda's fussy about syntax and won't actually let you use that, but you could do "on"/"off" of type Bit)
01/30 20:21:57<stoopkid> capital F "False" on the other hand encodes the notion of logical contradictions / false statements, by being an empty set of proofs
01/30 20:22:56<daemoz> Yes, False, I mean.
01/30 20:23:01<daemoz> data Bool : Set where false : False; true : True
01/30 20:23:21<daemoz> this complains to me about the target of a constructor must be the datatype applied to it's parameters
01/30 20:23:27<stoopkid> ah, no, false : Bool , true : Bool
01/30 20:23:48<stoopkid> yes, that means the return type of the constructors must be the data-type
01/30 20:24:01<daemoz> Ah hrmm, okay
01/30 20:24:22<stoopkid> so, this might be slightly less confusing while you're starting off:
01/30 20:24:26<stoopkid> data Bit : Set where
              <stoopkid>  on : Bit
01/30 20:24:27<stoopkid>  off : Bit
01/30 20:24:42<stoopkid> to break the natural association to the capital T/F "True" and "False"
01/30 20:26:12<daemoz> That's okay. I understand the bool type now. Is this the correct approach for and?
01/30 20:26:31<daemoz> data _and_ : Bool -> Bool -> Bool
01/30 20:27:40<stoopkid> so, there's gonna be two different versions of "and", one for Bools and one for Sets (you'll find this is standard in MLTT)
01/30 20:28:01<stoopkid> you can make a function _and_ that operates on Bools and returns a Bool, just your standard "_&_" operator
01/30 20:28:27<stoopkid> but you can also make like a cartesian product / "struct" type
01/30 20:30:11<stoopkid> same with or, you can make your run of the mill "_||_" operator on Bools and you can also make a disjoint union type
01/30 20:30:28<daemoz> I'm having trouble still with writing the Bool one correctly :P
01/30 20:30:29<stoopkid> you in tmux?
01/30 20:30:53<daemoz> On my machine. I'll hop over and write up what I have so far on the vps though.
01/30 20:32:44<stoopkid> sure, yea the stuff is kinda abstract to explain, easier to just show you and have you infer the pattern
01/30 20:33:18<daemoz> I agree, it's there now. You can C-b ) from your session to get to me.
01/31 01:22:56<daemoz> stoopkid: What is that that you're working on? Are you trying to prove that various things hold up in MLTT or something?
01/31 01:23:24<stoopkid> ah this "real numbers as cauchy sequences, dedekind cuts, etc.."?
01/31 01:23:35<daemoz> yes
01/31 01:25:31<stoopkid> yea a) trying to demonstrate that various things hold up (or sometimes demonstrate the opposite!), and b) just trying to uncover structure present in the logical foundations in order to understand it better
01/31 01:26:00<daemoz> Cool :)
01/31 01:26:39<daemoz> Got an idea of what I should try to figure out next? I'll try to figure out the next stuff on my own.
01/31 01:26:47<stoopkid> i read over this list and i'm like "oh god what have i gotten myself into" heh
01/31 01:27:30<stoopkid> try to prove commutativity of _and_ and _or_ and symmetry of _^_ and _v_
01/31 01:27:36<daemoz> Hahaha! I thought that when I looked at it too!
01/31 01:27:59<daemoz> And alright. I'll take it for a spin!
01/31 01:29:26<stoopkid> maybe as an extra source of funding i should host type theory tutoring sessions on the vps, i'm better at that than i am at actually building autonomic anyway XD
01/31 01:31:48<daemoz> You're a good teacher! I bet you're probably best in the world at building autonomic so I'm not sure it's a valid judgement xD
01/31 01:33:54<stoopkid> heh thanks, and well, there's always HMC, but yea i was telling koo before we started with the agda that i've been kinda trying to avoid it because it's like a black hole for me, and, well... 
01/31 01:33:58<stoopkid> you glanced at that list XD
01/31 01:34:26<daemoz> Hahaha, it's that elephant in the mind xD
01/31 01:34:45<daemoz> I'm like oh god what is this shit I see in the distance
01/31 01:38:28<stoopkid> it won't be so bad :) if there's anything i've done over all this time i've worked on the project i hope it's pave some of the road to make it easier on others to figure out the same stuff
01/31 01:39:37<daemoz> It's an extremely helpful thing to be doing as it is certainly a non-linear path. btw I started reading the universal quantification page that's up there and I'm liking the way it's laid out so far
01/31 01:39:38<stoopkid> (and to actually apply the theory to the construction rather than just know the theory and then still just build it on an ad-hoc basis due to not knowing how to *apply* that theory)
01/31 01:39:58<stoopkid> nice! thanks for reading over that
01/31 01:40:59<daemoz> Yee, I haven't finished it yet but it definitely helped me understand sets of propositions indexed by a type
01/31 01:41:00<stoopkid> i plan to write up similar intro-level tutorials for the whole curry-howard correspondence, and nilli's an artist i was hoping to try to rope her into making some cartoon explanations and get the foundations of the logic down to where it's accessible to small children
01/31 01:41:14<daemoz> oh that's a good idea.
01/31 01:41:24<daemoz> A lot of this stuff actually lends itself really well to visual explanation.
01/31 01:41:49<stoopkid> but idk sounds like something turned her off about the way the project's going, not sure, since i thought i've only been saying positive things about the progress recently
01/31 01:42:03<daemoz> Yeah I think I was around during that convo.
01/31 01:43:12<daemoz> I don't really know her, and I haven't ever really communicated with her but it seemed to me that she was really just wanting like something concrete as far as the goals and sort of a roadmap or whatever, even if big buffers of time needed to be allocated for research/etc.
01/31 01:47:47<stoopkid> tbh i don't know her all that well either, she's a friend of ohad & HMC. at the end of the convo i kinda sensed that she just didn't feel her contributions besides for money were valued or something? i think it was maybe spurred by HMC coming in and interjecting about how "PR's not necessary" when i was talking to her about making explanations for the logic
01/31 01:48:30<daemoz> Yeah, I could see that being a thing, I hope not but lots of things are possible right?
01/31 01:48:45<daemoz> I hope she communicates if anything is wrong.
01/31 01:49:20<daemoz> What structure should my proofs of the commutativity of the boolean operators be in? Should I be making a type called proof or something?
01/31 01:49:41<stoopkid> i'll hope over there real quick
01/31 01:49:43<stoopkid> hop*
01/31 01:50:05<daemoz> well you could if I wasn't on my machine! Honestly the lag for me has me just working locally
01/31 01:50:12<daemoz> I'll hop over though
01/31 01:50:14<stoopkid> ah hehe
01/31 01:54:33<stoopkid> more precisely: the "data" stuff technically introduces new rules to the logic, those type formation, introduction, elimination, and computation rules
01/31 01:54:45<daemoz> gotcha
01/31 01:55:02<stoopkid> whereas you're (probably) just trying to prove that it holds from the existing rules
01/31 01:58:22<stoopkid> ah ok, so i need to walk you through identity types before that one, forgot
01/31 02:50:15<stoopkid> yea proof names are like the worst thing lol
01/31 02:50:22<daemoz> hahaha
01/31 02:51:07<stoopkid> you'll see soon enough that this should really be more like a CADD system
01/31 02:51:15<daemoz> CADD?
01/31 02:51:30<stoopkid> computer-aided drafting and design
01/31 02:51:44<stoopkid> like an engineering tool for building up structures from building blocks
01/31 02:51:46<daemoz> I remember you talking about that a little bit ago. Definitely interesting.
01/31 02:53:37<stoopkid> we might spend some time messing around with the idea when we go over the geometric/visual interpretations of the proofs in more detail
01/31 03:07:22<stoopkid> haha i was just typing out "you'll see in a lot of my other agda stuff that for the proof names i basically just write out the proposition with no spaces" and i look over and that's what you're doing XD
01/31 03:07:39<daemoz> haha, it just seemed sensible xD
01/31 03:10:30<stoopkid> at first it's very sensible, quickly starts breaking down though once your propositions start getting more complex heh
01/31 03:10:44<daemoz> hahaha, yeah I can imagine
01/31 03:12:45<stoopkid> i imagine in the CADD system you wouldn't use names of proofs so much, you'd often just have unlabeled nodes and edges
01/31 03:13:00<daemoz> Yeah they could just be generated at that point
01/31 03:13:30<stoopkid> remember, (True -> False) is all one argument there :)
01/31 03:14:13<stoopkid> you can't case-match on functions unfortunately (well, actually some say fortunately... it's complicated XD)
01/31 03:21:57<stoopkid> ha nice sorry i should've written out the \ code for it
01/31 03:22:06<daemoz> I just typed 'circle' hahaha
01/31 03:22:22<stoopkid>  \o :)
01/31 06:57:51<stoopkid> so here's what i'm thinking as far as visualization
01/31 06:58:06<stoopkid> we know how to visualize syntax trees, that's pretty standard
01/31 06:58:49<stoopkid> terms are syntax trees (possibly with variables as their subtrees)
01/31 06:59:31<stoopkid> we've got two levels to things when we're proving something: the types, and the objects
01/31 07:00:39<stoopkid> lambda calc presents an equational theory of beta/eta/cong1/cong2/xi, this also happens to be a computational theory
01/31 07:00:43<stoopkid> a rewriting system
01/31 07:01:26<stoopkid> which is a graph where nodes are terms and edges between them are rewrites
01/31 07:05:22<stoopkid> well, hrm, a good tool for this would probably require you to be able to assign arbitrary graph primitives to different things
01/31 07:06:18<stoopkid> function applications can be represented as edges, relations can be represented by edges (or "hyper"-edges)
01/31 15:54:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01/31 15:55:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/31 16:57:49<daemoz> I bet a few keybinds and perhaps a pane with a visualization could solve this in tmux pretty easily (although I've never coded an emacs plugin).
01/31 16:58:47<daemoz> Or this plugin could generate a file that stores the state necessary to display and use the tree visualization and a seperate graphical interpretter can be written that communicates via pipe back to the editor.
01/31 16:59:14<daemoz> Actually I feel like emacs already has some kind of inter-process communication abilities so all this seems within ballpark
01/31 18:05:05*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/31 19:51:43*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
01/31 20:19:39<stoopkid> daemoz idk much about how emacs works really but yea it seems like it should be doable some way or another
01/31 21:32:23<stoopkid> https://regexper.com/#%5Ea%2B(b%7Cc)%24
01/31 22:40:50<daemoz> This is nifty.
01/31 22:52:29<stoopkid> the other thing that kinda sucks with it is trying to organize your proofs relative to hierarchical module system
01/31 22:53:30<stoopkid> it's more suited to either a flat system (like a hashtable) or graph database
01/31 22:55:59<stoopkid> editable-koo: theoretically we should be able to figure out how to do natural deduction properly over triples and get something out of the univar code, the main thing that really prevents us is that we get stuck trying to conform to euler standards
01/31 23:01:33<stoopkid> i need to figure out how to budget our time here, this agda work seems "necessary", and lots of more advanced logic research seems "necessary", but, it eats up a lot of time away from looking directly at proving & implementing autonomic
01/31 23:09:02<stoopkid> ultimately i think we've been doing it generally all wrong, it's been "autonomic dev, with math research as a by-product" when it really should be something closer to  "math research with autonomic as a by-product"
01/31 23:11:16<stoopkid> there's weird stuff in math. i always wonder stuff like, why is it that lengths of diagonal lines are measured by the pythagorean theorem?
01/31 23:12:06<stoopkid> like we can start with counting sets of things, like, i've got a set of 5 things, and a set of 4 things, and then the set of pairs of these contains 20 things
01/31 23:13:45<daemoz> The development of the logic and the refinement of it is one thing and the engine that this will all work on top of is a different thing and I think they should both be kept in mind at once.
01/31 23:14:19<daemoz> They sort of depend on each other for value.
01/31 23:14:27<daemoz> Symbiotic or whatever
01/31 23:17:18<stoopkid> yea i guess we're mostly on the right track then, maybe i'm just expecting that i should be moving it along faster than i'm actually capable of
01/31 23:18:47<daemoz> Well I think you've taking a lot of time to help people get up to speed :P
01/31 23:20:21<daemoz> I think before you can make the progress at the speed you want to make it at, you should get a big high-level design written and revise that and verify that as best you can.
01/31 23:20:46<daemoz> like label each piece and start to think about design issues that will be encountered
01/31 23:21:26<daemoz> Obviously you've been doing that, but formalizing those designs into a spec to go off of will be very helpful especially to organizing people that want to help.
01/31 23:27:12<stoopkid> you're definitely not wrong
01/31 23:31:54<daemoz> Hahhaa are we in two-element logic though? xD
01/31 23:32:06<stoopkid> :)
01/31 23:32:51<stoopkid> where the notion fails is that i fail to execute it XD but maybe i can try harder lol
01/31 23:33:59<daemoz> Or try differently!
01/31 23:36:16<daemoz> You have listed the main components already. Here, I wrote them down: MLTT type checker, DHT client(dht + verifier + prover), nomic block-chain, state-change restriction (expressed in mltt). And then something called I/O Ring that I don't understand.
01/31 23:41:40<stoopkid> so.. wrt state-change restriction expressed in mltt
01/31 23:44:31<stoopkid> the boundaries for me are starting to blur between mltt and more arbitrary logics, especially if we'd be including a postulates system (system for adding more axioms / inference rules, outside of the standard mltt formulas for doing so) 
01/31 23:45:30<stoopkid> doing such can potentially render the system inconsistent btw, like, hypothetically you could postulate False
01/31 23:46:20<stoopkid> so i was always firmly against the inclusion of a postulates system, but HMC always insisted on it
01/31 23:46:37<daemoz> Scope-restricted postulates seems essential don't you think?
01/31 23:47:06<stoopkid> not essential no, just simply "why not"
01/31 23:47:26<daemoz> And isn't it reasonable to say that the form of mltt that users will use to interact with AN with will be an interface into a proven and static or base or root logical system that will be written.
01/31 23:47:51<stoopkid> not quite sure what you mean there, can you elaborate?
01/31 23:48:57<daemoz> The core logical axioms of AN will be hardcoded, right?
01/31 23:49:23<daemoz> Couldn't a system be built around that that ensures no inconsistencies form?
01/31 23:50:51<stoopkid> indeed, i've devised one that would "work", let's say you can't prove A but you can prove not(not(A)), then, assuming the system is already consistent, then you can't prove not(A), and therefore should be safe to postulate A
01/31 23:51:42<stoopkid> but, along with postulating that A is true, you really "should" also be postulating its computation rules
01/31 23:52:30<stoopkid> like, say A is of the form B -> C, how does this function evaluate when you call it on an argument of type B? what C does that B get sent to?
01/31 23:54:05<daemoz> Not sure I follow
01/31 23:54:37<stoopkid> if you can't specify this you get "stuck terms", things don't compute, you get proofs that don't actually have content, maybe money that's "proven to be there, but you can't access it because it's on the other side of a stuck term", you start breaking the utility of propositional equality as not all objects in a type normalize to a "canonical" object
01/31 23:54:45<stoopkid> like lets say i have f : A -> B
01/31 23:54:55<stoopkid> and that's all i tell you
01/31 23:55:15<stoopkid> then i take x : A, and give you f x : B
01/31 23:56:02<stoopkid> let's say B was Bool
01/31 23:56:26<stoopkid> f x doesn't normalize to "true", and f x doesn't normalize to "false", it's just "stuck" at f x
01/31 23:56:37<daemoz> Yeah I suppose that's true.
01/31 23:56:56<daemoz> Couldn't you just say things need to be in NF to be added to the chain though?
01/31 23:57:10<daemoz> hrmm
01/31 23:57:43<stoopkid> well, they do reach a "NF", it's not one of the canonical objects
01/31 23:58:51<stoopkid> it's just* not
01/31 23:59:16<stoopkid> the normal form of "f x" is just "f x" rather than "true" or "false", but then what do we do with this?
01/31 23:59:24<stoopkid> and then this breaks everything down the line
01/31 23:59:31<stoopkid> if (f x) then X else Y
01/31 23:59:34<stoopkid> is stuck as well
02/01 00:00:54<daemoz> so require that computation rules are supplied?
              <daemoz> so that if anyone needs f x they can just compute it?
02/01 00:01:59<stoopkid> sure, i'm not entirely sure how to enforce that the supplied rules ensure "canonicity" (normalization to canonical values), but, it's a possibility
02/01 00:02:19<daemoz> canonicity...
02/01 00:02:33<stoopkid> (i hate that word btw, reminds me of church, which i hated XD)
02/01 00:02:34<daemoz> Wouldn't that just be ensuring that their computation rules actually return a result of the specified return type?
02/01 00:02:38<daemoz> hahaha
02/01 00:03:47<stoopkid> possibly
02/01 00:05:02<stoopkid> maybe caveat with "return an object that actually type-checks to the specified type without the additional postulate available"
02/01 00:06:43<daemoz> Yeah that could help keep things untangled too.
02/01 00:07:12<daemoz> I think a few minimal rules like that on-top of the predefined 'mltt-playground' is fine.
02/01 00:07:19<stoopkid> (with the additional caveat that you could actually sort of make use of the additional postulate using proofs by induction)
02/01 00:07:50<daemoz> not sure what that means exactly but sounds sensible xD
02/01 00:09:11<stoopkid> well, as sort of a pretend example, let's imagine i'm postulating f : Nat -> Nat
02/01 00:09:17<stoopkid> i define some computation rules:
02/01 00:09:25<stoopkid> f 0 = {something}
02/01 00:09:36<stoopkid> f (1+ x) = {something else}
02/01 00:11:17<stoopkid> {something else} might be "1+ (f x)", so, it can't exactly prove that it's gonna compute to a canonical object of type Nat without keeping f around
02/01 00:11:50<stoopkid> but eventually it gets down to the base case, f 0 = {something}
02/01 00:11:54<daemoz> I see what you're saying.
02/01 00:12:48<stoopkid> for {something}, we'd say it needs to prove it's a canonical object independently of f, but, really with all the restrictions on recursion that are already in place, it already would have to be
02/01 00:16:15<stoopkid> so it seems that if canonicity is assumed to be already ensured without postulates, then as long as you check the computation rules of your postulates with the same mechanics that you check everything else with, then you can't break canonicity with the postulates except by just not specifying the computation rules (or leaving them only partially filled out, or something)
02/01 00:17:00<daemoz> which would then be another thing that wouldn't leave the client or not accepted by the network or something
02/01 00:18:28<stoopkid> so, all these rules happen in the framework of "natural deduction"
02/01 00:18:53<daemoz> Yes I suppose so
02/01 00:19:00<daemoz> (I'm assuming, haha)
02/01 00:19:52<stoopkid> kinda like academic logic's version of prolog
02/01 00:20:38<daemoz> Okay
02/01 00:23:02<stoopkid> so, i'm starting to look at it less like the constraints of the block-chain are specified "in MLTT" as much as... "in semi-arbitrary natural deduction"
02/01 00:23:42<daemoz> with a dependent type system.
02/01 00:24:17<stoopkid> well, the type-system is just some rules in the natural deduction
02/01 00:25:16<stoopkid> so are the beta/eta/cong1/cong2/xi rules, which provide both the underlying notion of equality as well as the underlying rewriting/computational system
02/01 00:26:07<stoopkid> data Nat : Set where
02/01 00:26:20<stoopkid> is an ND rule
02/01 00:26:47<stoopkid>  0 : Nat
02/01 00:26:50<stoopkid>  suc : Nat -> Nat
02/01 00:26:57<stoopkid> are two more ND rules
02/01 00:27:36<stoopkid> data _^_ (A : Set) (B : Set) where
02/01 00:27:46<stoopkid>  _,_ : A -> B -> A ^ B
02/01 00:28:25<stoopkid> some more ND rules from which we can automatically derive these corresponding rules:
02/01 00:28:37<stoopkid>  A ^ B  ==> A
02/01 00:28:44<stoopkid> A ^ B ==> B
02/01 00:28:54<stoopkid> or better:
02/01 00:29:31<daemoz> Oh interesting. I didn't know it was built up like that.
02/01 00:29:33<stoopkid> A ^ B ,  (A -> B -> C) ===> C 
02/01 00:30:41<stoopkid> basically says: if A ^ B is true, and it's true that you can derive C under the assumptions A and B, then you can derive C
02/01 00:32:48<stoopkid> that rule right there is essentially the pattern-matching rule for _^_
02/01 00:33:21<stoopkid> compare with _v_ :
02/01 00:33:33<stoopkid> A v B , (A -> C) , (B -> C) ===> C
02/01 00:35:47<stoopkid> there's a pattern for this, in case you didn't catch it already
02/01 00:36:02<daemoz> What is that
02/01 00:36:11<stoopkid> (A -> B -> C) is just the type of the constructor _,_ for A ^ B, but with A ^ B switched with C
02/01 00:37:44<stoopkid> so the general pattern is, if you have some connective Q, then C is derivable from Q iff. C is derivable from whatever Q is derivable from, i.e. it's constructors/intro rules
02/01 00:38:19<daemoz> Okay I think that makes sense
02/01 00:40:07<stoopkid> interestingly you can simulate these in a type-system with just dependent function types available: https://en.wikipedia.org/wiki/Calculus_of_constructions#Defining_logical_operators
02/01 00:42:41<stoopkid> i think it needs "impredicativity" to work properly though, (impredicativity means Set is an object in Set, rather than having it stratified into Set : Set1 : Set2 ...,  so you can apply these functions to themselves)
02/01 00:43:42<daemoz> but that paradox?
02/01 00:45:02<stoopkid> yea... :) i actually don't know the status of that in CoC itself, i assume it contains the paradox though
02/01 00:47:53<stoopkid> so, my intuition wrt the set-hierarchy thing is that it corresponds to meta-levels
02/01 00:48:16<stoopkid> are you familiar with how russell's paradox works?
02/01 00:48:59<daemoz> Not very well.
02/01 00:49:24<stoopkid> so, consider X is the set of all sets that don't contain themselves
02/01 00:49:36<stoopkid> does X contain itself?
02/01 00:52:15<stoopkid> here let's consider a different thing, the word "autological"
02/01 00:52:26<stoopkid> something is autological if it describes itself
02/01 00:53:08<stoopkid> like the phrase "string of characters in an IRC chat convo with daemoz"
02/01 00:53:34<daemoz> Okay
02/01 00:54:55<stoopkid> now, let's consider the word, "heterological", something is heterological if it doesn't describe itself
02/01 00:55:20<stoopkid> is the word "heterological" heterological?
02/01 00:55:54<daemoz> without context it is.
02/01 00:56:09<daemoz> knowledge of the glyphs, the word, etc.
02/01 00:57:55<stoopkid> well, let's assume it's not, i.e. assume that it does describe itself, but, then, it's describing itself as heterological
02/01 00:58:44<daemoz> it's a paradox
02/01 00:59:00<stoopkid> and assume it is, i.e. assume that it does not describe itself, but then, it satisfies the definition of heterological, so it does describe itself
02/01 00:59:16<stoopkid> the problem is that we allow self-reference + negation
02/01 01:00:00<stoopkid> if you look at the cases for autological, you don't get a paradox, because it doesn't negate itself when applied to itself, you just don't get an answer out of it
02/01 01:00:13<daemoz> Seems more and more to me that three term logic is just the way to make a system practical but that's probably naive
02/01 01:00:28<daemoz> just slap a maybe in there that'll do 'er xD
02/01 01:01:11<stoopkid> well, the appropriate solution to me seems to be proper treatment of meta-levels
02/01 01:01:22<stoopkid> self-reference == breaking meta-levels
02/01 01:03:01<stoopkid> so instead of saying, the set of all sets that don't contain themselves, you say, the set1 of all set0s that don't contain themselves
02/01 01:04:47<daemoz> that's the way agda does it, correct?
02/01 01:05:07<stoopkid> yep
02/01 01:05:36<stoopkid> it's not necessarily the ultimate solution to meta-levels but, having something that captures the idea of meta-levels at all is a decent start
02/01 01:06:55<daemoz> True
02/01 01:07:50<stoopkid> and it avoids the self-referential paradoxes, you can't ask for the set1 of all set1s that don't contain themselves, you would have to ask for the set2 of all set1s that don't contain themselves, etc...
02/01 01:08:08<stoopkid> so it avoids the self-referential paradoxes by avoiding the self-reference entirely
02/01 01:12:21<stoopkid> so, at any given set-level, you don't have any functions capable of self-application
02/01 01:13:51<stoopkid> but, you can sort of start to recover the things you could do with the impredicativity by recursing over the meta-levels
02/01 01:14:42<stoopkid> like:
02/01 01:14:56<stoopkid> id : (A : Set) -> A -> A
02/01 01:15:03<stoopkid> id A x = x
02/01 01:15:32<stoopkid> you can't apply id to itself
02/01 01:15:37<stoopkid> but now take
02/01 01:15:47<stoopkid> id2 : (A : Set1) -> A -> A
02/01 01:15:51<stoopkid> id2 A x = x
02/01 01:16:02<stoopkid> you can apply that to id
02/01 01:16:11<stoopkid> and id3, id4 and so on
02/01 01:16:19<stoopkid> now take
02/01 01:16:50<stoopkid> id-inf: {i : Level} (A : Set i) -> A -> A
02/01 01:17:52<stoopkid> for any id-inf {i}, you can apply it to any id-inf {j} where j < i
02/01 01:22:49<daemoz> I think that makes sense.
02/01 01:25:41<stoopkid> here's sort of what i'm thinking there: https://xivilization.net/~marek/binaries/Y.pdf
02/01 01:31:21<daemoz> haha this is a neat little paper
02/01 01:31:53<stoopkid> indeed i'm rereading it to refresh my memory on the specific details of the transformation
02/01 01:33:42* stoopkid probably needs to memorize the transformation :)
02/01 01:40:17<stoopkid> so, that's sort of my idea wrt the set-level hierarchy, it would follow this same kind of idea of self-application, but recursing down the set hierarchy
02/01 01:40:48<stoopkid> length1 can apply to length0 if length1 is at set-level 1 and length0 is at set-level 0
02/01 01:42:46<daemoz> but isn't that set-level hierarchy already a thing?
              <stoopkid> just a thought though, i haven't worked it out that well, but, there seems to be some deep theory here behind the Y combinator and the set-level hierarchy (independently of each other), but interestingly both concern the treatment of recursion/meta-levels
02/01 01:43:23<stoopkid> recursion/self-application/meta-levels
02/01 01:43:49<daemoz> y-comb is how recursion is represented in LC right?
02/01 01:44:09<stoopkid> untyped LC yea
02/01 01:47:43<stoopkid> now, not all recursion is really the same kinda recursion
02/01 01:47:54<stoopkid> consider f x = 1 + (f x) vs:
02/01 01:48:15<stoopkid> f 0 = 0
02/01 01:48:22<stoopkid> f (suc n) = f n
02/01 01:48:51<stoopkid> this second one isn't really recursion in the same sense as the first one, because the LHS is not fully repeated on the RHS, even though f is repeated
02/01 01:49:10<stoopkid> f (suc n) is not defined in terms of itself, it's defined in terms of this other, different thing, f n
02/01 01:49:29<stoopkid> where as in the first one, f x is irreducibly defined in terms of itself
02/01 01:50:28<stoopkid> Agda only allows this second kind of recursion
02/01 01:51:56<stoopkid> you can't define the y-combinator in a typed LC generally
02/01 01:52:26<daemoz> is the first an example of the y-comb?
02/01 01:52:32<daemoz> and that is not allowed in agda.
02/01 01:53:29<stoopkid> nah this first isn't the y-combinator, y-combinator is: \f.((\x.f (x x)(\x.f (x x))
02/01 01:54:16<stoopkid> you can't assign a type to a self-applicative term generally
02/01 01:54:45<stoopkid> consider you have the term "x x", x applied to x
02/01 01:55:32<daemoz> ah god, this one makes my head hurt, I understand at a higher-level but trying to crunch that definition into a concept in my head is hard
02/01 01:56:14<stoopkid> so, the first x there must have a type of the form A -> B, since, obviously it's a function since we're applying it to something
02/01 01:56:43<stoopkid> but then it's input type is A, so the second x must have type A, but we know that x has type A -> B
02/01 01:56:52<stoopkid> so the first x actually has type (A -> B) -> B, and so on...
02/01 01:58:15<stoopkid> don't try to crunch it into a concept, apply the combinator to some function f and see what the result of beta-reduction is
02/01 01:58:27<stoopkid> and then your crunching will be done
02/01 01:58:48<daemoz> that would actually totally be helpful
02/01 01:58:53<daemoz> i'll do that on some paper
02/01 02:00:08<stoopkid> and then on that paper take a term "x x" and try to assign it a type such that the first x has the form A -> B, in order to be a function, and the second x has type A, in order to be an argument to that function
02/01 02:00:41<stoopkid> (both x's must come out to have the same type, in the end)
02/01 02:01:02<stoopkid> (well, actually, they *can't* but the point is to see that)
02/01 02:27:32<stoopkid> here's something interesting, MLTT-TFPL can be type-safe without being "always halting"
02/01 02:27:51<stoopkid> type-safe, and always halting! :D
02/01 02:27:57<stoopkid> how contradictory right?
02/01 02:29:08<stoopkid> so, let's say we have (a :: b :: []) : List A
02/01 02:29:44<stoopkid> length (a :: b :: []) = suc (length (b :: [])) = suc (suc (length [])) = suc (suc (zero))
02/01 02:29:55<stoopkid> what about:
02/01 02:30:29<stoopkid> (a :: b :: {wait for more List A}) : List A
02/01 02:30:53<stoopkid> length (a :: b :: {wait for more List A}) = suc (suc (length ({wait for more list A}))
02/01 02:31:28<stoopkid> if you can just keep providing more List A, then this "halting" recursion will keep going
02/01 02:32:32<stoopkid> basically changes the definition from "will eventually halt" to "always maintains the ability to halt"
02/01 02:32:54<stoopkid> which is really more like what we really want
02/01 02:33:07<stoopkid> for practical programming, that is
02/01 02:33:51<stoopkid> for proofs we don't really care one way or another, math doesn't care when you provide a value
02/01 02:35:43<stoopkid> so, that's pretty cool, and could have some utility in the problem of bounding complexity on-chain
02/01 02:35:47<daemoz> Gotta run for a bit, I'll catch back up with you later, still reading about combinators and trying to work out how it would look on paper.
02/01 02:36:03<stoopkid> sounds good
02/01 02:39:02<stoopkid> so, hrm...
02/01 02:39:14<stoopkid> this might be a generalized solution for bounding *all* the complexity
02/01 02:40:29<stoopkid> "just" defer all complexity into the input data
02/01 02:41:19<stoopkid> i'll have to think about that...
02/01 02:45:33<stoopkid> it's not the right answer, but it seems very close to the right answer
02/01 02:47:17<stoopkid> hrm.. so exactly which complexities need to be bounded, when, & how...
02/01 02:48:07<stoopkid> open-phase has arbitrary turing-complete complexity, but bounded by closed-phase deciding when/how it gets to run
02/01 04:27:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/01 12:56:06*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
02/01 15:07:42*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/01 17:50:03*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
02/01 18:46:45*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
02/01 18:48:29*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/01 20:15:47*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 276 seconds
02/02 05:37:46*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/02 06:19:54*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 246 seconds
02/02 07:43:26*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/02 07:44:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/02 08:54:42*** Join: koom (~sirdancea@91.219.246.42, sirdancealot: koo5)
02/02 10:09:42*** Quit: koom (~sirdancea@91.219.246.42) left #autonomic-dev: Ping timeout: 248 seconds
02/02 10:28:04*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/02 11:05:05*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
02/02 11:29:38*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/02 20:48:38*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 248 seconds
02/03 03:03:44*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/03 03:04:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/03 03:10:57*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/03 03:20:25*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
02/03 17:27:22<stoopkid> http://167.88.171.233/workspace/notes/ND_rules_v1
02/03 17:28:02<stoopkid> getting closer, still some bits to work out
02/04 00:20:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/04 00:21:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/04 02:45:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/04 02:45:57*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/04 14:32:17*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/04 19:07:47*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
02/05 06:18:36*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
02/05 07:34:50*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 240 seconds
02/05 08:55:42*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
02/05 09:16:56*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 240 seconds
02/05 09:23:53*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
02/05 13:23:28<stoopkid> slightly concerning when the first examples of code in the lambda-auth paper contains errors just in the definition of the function itself
02/05 13:23:55<stoopkid> several missing cases
02/05 15:05:07*** Quit: koom (~sirdancea@109.107.211.244) left #autonomic-dev: Ping timeout: 256 seconds
02/05 18:40:52*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/05 18:45:39*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Read error: No route to host
02/05 18:45:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/05 19:02:20*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
02/05 21:55:43*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/05 21:56:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/06 05:28:59<daemoz> hey all. been busy for a few days. what's new?
02/06 06:12:39<daemoz> stoopkid: I made an illustration for your universal_quantification page on the wiki (or what will become)
02/06 06:13:33<daemoz> https://i.imgur.com/dpRcGZ9.png
02/06 08:46:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-candkqtntfukshmk) left #autonomic-dev: Quit: Connection closed for inactivity
02/06 09:11:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kydhztsficmycdof, stoopkid: stoopkid)
02/06 11:11:01<stoopkid> daemoz: nice i'd say that adequately represents a type-family :D
02/06 11:16:19<stoopkid> only thing i'd say that could maybe be done differently would be to drop the quotes on the terms, cause the self-referential paradoxes are all about terms operating on basically "quoted versions of themselves"
02/06 11:23:29<stoopkid> i like how you actually have it going "through" the function though, like a machine on an assembly line
02/06 15:45:31*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/06 18:08:35*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
02/06 18:48:49<daemoz> yeah just a way to represent it I stole from the youtube channel 'computerphile'
02/06 18:53:19<stoopkid> hehe
02/06 19:16:36<daemoz> any other simple graphics you think could be good let me know. How are things with development going? Where are  you guys at?
02/06 19:18:39<stoopkid> will do :) well, we've basically got the logic design down, including the auth, at least well enough to work with for now, now i'm looking at implementation detail
02/06 19:19:15<daemoz> so the ruleset seems solid enough and now to graft it to lambda-auth?
02/06 19:19:54<stoopkid> pretty much, at least for prototyping the idea of it, will still probably need some tweaks/extensions here and there
02/06 19:26:56<stoopkid> i've got the auth theory down to the point where it's pretty much a non-issue besides for a couple tweaks HMC's providing to strengthen the cryptographic security of it, and so we'll be able to give more focus to the appropriateness of the logic itself as we continue, which is definitely a good thing, the more we can focus on that the better
02/06 19:28:25<stoopkid> the lambda-auth folks basically forced a very limited version of it to work with the ocaml compiler, and it was only really limited *because* they implemented it as hacks to the ocaml compiler and didn't want to make that any more complex
02/06 19:29:22<daemoz> Will you be using their compiler?
02/06 19:29:25<daemoz> for the time being.
02/06 19:29:36<daemoz> Or from-scratch rebuild?
02/06 19:29:46<daemoz> or..?
02/06 19:30:11<stoopkid> but their design in their paper is presented essentially in terms of natural deduction, and had they implemented it in a generic natural deduction engine, their auth'ing rules they came up with can basically "just work" with nearly arbitrary logic (essentially any rules that don't mess with the auth'ing themselves)
02/06 19:30:37<stoopkid> from-scratch natural deduction engine, then we can  basically just concat the MLTT ruleset with the auth rules and unless i'm missing something fundamental it should "just work"
02/06 19:31:00<daemoz> That's awesome.
02/06 19:31:28<stoopkid> yea it's pretty amazing, i am way more impressed by lambda-auth after yesterday's studies XD
02/06 19:33:30<stoopkid> not only doesn't it seem like it really is gonna be this easy to just stick the auth into pretty much any logic we come up with, the auth itself is actually incredibly simple, it's only like 4 rules, while the rest of MLTT-TFPL will have literally arbitrarily many rules (as they define user-provided data-types & concepts)
02/06 19:35:39<stoopkid> it's also incredibly flexible in its operation, within the given logic, those 4 rules pack a lot of power!
02/06 19:36:20<stoopkid> do you know merkle trees?
02/06 19:37:12<daemoz> What are the four rules?
02/06 19:37:34<daemoz> yes
02/06 19:37:41<daemoz> (about, merkle-trees)
02/06 19:40:51<stoopkid> hrm, maybe a couple more than 4 actually, but: two rules that take unauth'd types to their auth'd versions or auth'd versions back to their unauth'd versions respectively, two rules that take unauth'd values to their auth'd versions and back, and then the associated computation rules
02/06 19:41:49<stoopkid> essentially, if you look at "Auth" as a logical connective, it's the type-formation, introduction, elimination, and computation rules for "Auth T" where T is some type
02/06 19:42:11<daemoz> That's nice and neat
02/06 19:43:33<stoopkid> indeed, i was not expecting the theory to be so.... "clean"
02/06 19:43:55<stoopkid> it just seems to fit itself in wherever without causing a bother heh
02/06 19:48:21<stoopkid> so, merkle trees give you: you can securely do a lookup against a balanced binary tree, when all you have is this merkle-root-hash available and the actual data is stored on some untrusted server
02/06 19:49:05<stoopkid> lambda/MLTT-auth gives you: you can securely run an arbitrary function on an arbitrary data-structure when all you have is its merkle-root-hash and the actual data is stored on some untrusted server
02/06 19:49:56<daemoz> it's a sweet concept
02/06 19:50:22<stoopkid> do you have the link to the lambda-auth paper?
02/06 19:50:42<daemoz> http://soc1024.ece.illinois.edu/gpads/gpads-full.pdf
02/06 19:50:45<daemoz> this one?
02/06 19:50:54<stoopkid> that's the one
02/06 19:51:10<daemoz> Cool.
02/06 19:51:38<daemoz> I'll poke over this in a few, gonna try to mash the skeleton for a feature out.
02/06 19:53:31<stoopkid> alright, you'll wanna run through the "fetch" example (figures 2 and 3) and that'll show how it all fits together to "merklize anything"
02/06 19:54:21<daemoz> thank you
02/06 21:01:39*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/06 21:01:57*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/07 05:38:19*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/07 06:23:30*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
02/07 08:57:10*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 264 seconds
02/07 09:49:54*** Join: Deadhand (~deadhand@99.246.2.68, (unauthenticated): deadhand)
02/07 09:57:53*** Quit: Deadhand (~deadhand@99.246.2.68) left #autonomic-dev: Ping timeout: 248 seconds
02/07 10:00:55*** Join: Deadhand (~deadhand@99.246.2.68, (unauthenticated): deadhand)
02/07 10:12:09*** Join: koom (~sirdancea@80.188.30.113, sirdancealot: koo5)
02/07 10:14:35*** Join: kook (~sirdancea@80.188.30.113, sirdancealot: koo5)
02/07 10:17:08*** Quit: koom (~sirdancea@80.188.30.113) left #autonomic-dev: Ping timeout: 256 seconds
02/07 10:20:37*** Quit: kook (~sirdancea@80.188.30.113) left #autonomic-dev: Ping timeout: 256 seconds
02/07 11:09:09*** Quit: Deadhand (~deadhand@99.246.2.68) left #autonomic-dev: Ping timeout: 265 seconds
02/07 11:53:01*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
02/07 17:35:49*** Unknown command: mode
02/07 17:37:49*** Names: Deadhand daemoz stoopkid editable-koo
02/07 17:37:50*** End of /NAMES list.
02/07 17:40:34-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/07 17:40:40*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/07 17:56:19*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-kafhkvghlzwbnsgd, (unauthenticated): @koo5:matrix.org)
02/07 17:57:44<koo5[m]> whoa that was easy
02/07 17:58:41<koo5[m]> i mean, after 15 minutes of figuring out how to do it
02/07 18:15:16* koo5[m] sent a long message: koo5[m]_2018-02-07_23:16:02.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/AblEuXjHdCVNPlOResReqZyo>
02/07 18:17:08* koo5[m] sent a long message: koo5[m]_2018-02-07_23:17:55.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/gGMoBPImwGeNFLHDwiwnvVel>
02/07 18:17:34<koom> ugh
02/07 18:18:17<stoopkid> having fun yet?
02/07 20:40:10*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
02/08 02:28:24*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 256 seconds
02/08 02:40:38*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
02/08 06:56:33<editable-koo>https://matrix.org/_matrix/
02/08 06:56:44<editable-koo>nope
02/08 06:56:59<editable-koo>https://matrix.org/_matrix/
02/08 06:57:07<editable-koo>nope
02/08 06:59:03<editable-koo>22:47http://167.88.171.233/workspace/notes/disjunction_explained
02/08 06:59:13<editable-koo>alright this will work, pasting
02/08 06:59:44<editable-koo>koo5
              <editable-koo>19:52agrs is one of the few alts holding up now
              <editable-koo>19:53i wonder if its basically a game that whales are playing
              <editable-koo>Saturday
              <editable-koo>koo5
              <editable-koo>14:17alright so this is theoretically my first day to feel free to focus on autonomic
              <editable-koo>14:17in practice im feeling somewhat overwhelmed with all the different things to read and paths to take, so im looking for some quick fix
              <editable-koo>14:18namely what keeps staying in the back of my head is wether to try to finish newshit
              <editable-koo>14:18another thing is pyin & kbdbg
              <editable-koo>14:21wrt newshit, the alternative to finishing it is starting a new version where the data would be in rdf. But i would keep the logic, and the focus on cfg-with-hacks and libmarpa
              <editable-koo>14:22maybe it could become a nice little loosely coupled collection of algos
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>16:12that works it'll probably still be a bit before i've got all the details figured out with the ND system
              <editable-koo>Sunday
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>04:11i told my fiancee about how if you have a proof of A and a proof of B then you can make a proof of A & B
              <editable-koo>04:11she was super-impressed
              <editable-koo>10:21* koo5 scratches head
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>18:22was a joke :)
              <editable-koo>18:23you been keeping up with bitcointalk?
              <editable-koo>koo5
              <editable-koo>18:42no
              <editable-koo>18:59hahah i havent been following tezos, seems its got quite a story
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:00lol, apparently, no idea what that's really about
              <editable-koo>19:02agda-mode is killing me
              <editable-koo>19:03i still don't really have lag troubles with vps but agda-mode is constantly locked up
              <editable-koo>19:04i always trouble with it locally too
              <editable-koo>koo5
              <editable-koo>19:04autocompleting or something?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:07not sure what the issue is
02/08 06:59:45<editable-koo>19:36so any luck understanding that pdf?
              <editable-koo>koo5
              <editable-koo>19:37not much luck making myself read it
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:39no rush
              <editable-koo>koo5
              <editable-koo>19:56finally found a pdf viewer that lets me disable antialiasing
              <editable-koo>19:56somehow the usual font used in pdfs is so difficult to read with antialiasing with inverted colors
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>20:15hrm, didn't know about that, never tried inverting colors
              <editable-koo>koo5
              <editable-koo>20:33re dmiles, hes been active in ##idni on thursday
              <editable-koo>22:11i wish my vm's would stop freezing on me
              <editable-koo>22:58coworking spaces are quite affordable
              <editable-koo>23:03But that means we shouldn?t be able to prove ? from scratch, so we can eliminate it
              <editable-koo>if we do ever have it in the proof. Doing so lets us prove any proposition
              <editable-koo>23:03But that means we shouldn?t be able to prove ? from scratch, so we can eliminate it
              <editable-koo>if we do ever have it in the proof.
              <editable-koo>23:04i dont understand how the two sentences are connected
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>23:35eliminator tells what you can derive from false, you can always eliminate false means you can derive anything from false, i.e. the eliminator applies no matter what proposition you put as its conclusion
              <editable-koo>koo5
              <editable-koo>23:39still seems like a completely vain desire for symmetry in the system
              <editable-koo>Monday
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>00:32how so?
              <editable-koo>00:38can we come up with a better ruleset?
              <editable-koo>00:42you?re not exactly alone there, paraconsistent logics are centered around the rejection of that principle
              <editable-koo>02:11i'm analyzing the thing with ? again, and while there is a certain symmetry being aimed for, it seems to me to be fairly well-motivated
              <editable-koo>02:12well, there's several symmetries, and actually they're less "aimed for" and more "discovered"
              <editable-koo>02:13first is the symmetry between the intro & elim rules for any given connective, i.e. the "logical harmony"
              <editable-koo>02:14second is the symmetry between all (well, most of) the connectives, in terms of how they are constructed
              <editable-koo>02:15ok, so, A OR B
              <editable-koo>02:15what C's should satisfy (A OR B) -> C ?
              <editable-koo>02:15in other words, what should the elimination rule for (A OR B) be?
              <editable-koo>02:16well, let's look at how an A OR B gets constructed
              <editable-koo>02:16if we have an A, then we should be able to construct an A OR B (and we don't need a B available)
              <editable-koo>02:16and if we have a B, then we should be able to construct an A OR B (and we don't need an A available)
              <editable-koo>02:17ok so, two different ways to construct an A OR B, two different constructors/introduction rules
              <editable-koo>02:17A ===> A OR B
              <editable-koo>02:17B ===> A OR B
              <editable-koo>02:17so, what should A OR B imply? whatever is implied by whatever implies A OR B!
              <editable-koo>02:17so, let's say:
              <editable-koo>02:18A ===> C
02/08 06:59:46<editable-koo>02:18B ===> C
              <editable-koo>02:18sorry, i should say:
              <editable-koo>02:18A -> C
              <editable-koo>02:18B -> C
              <editable-koo>02:18(===> to describe an inference rule, -> to describe an implication)
              <editable-koo>02:19in other words, if you can derive C under the assumption that you have an A, and you can derive C under the assumption that you have a B, then (A OR B) -> C
              <editable-koo>02:20so we get the following rule:
              <editable-koo>02:20A OR B (A -> C) (B -> C)
              <editable-koo>02:20--------------------------------------------
              <editable-koo>02:20                      C
              <editable-koo>02:22so if we follow this pattern in general we get:
              <editable-koo>02:22<connective> (<premise of cons1> -> C) (<premise of cons2> -> C) .... (<premise of consN> -> C)
              <editable-koo>02:22------------------------------------------------------------------------------------------------------------------------------------------------------------
              <editable-koo>02:22                                                                                                                  C
              <editable-koo>02:23now apply this pattern to False
              <editable-koo>02:23it has no constructors
              <editable-koo>02:23so we just end up with:
              <editable-koo>02:23False
              <editable-koo>02:23----------
              <editable-koo>02:23   C
              <editable-koo>02:28i personally still like my interpretation of False as "the conjunction of all the statements in the space", hence why all statements are derivable from it
              <editable-koo>02:30trust me, i don't tolerate formal logic that doesn't correspond to intuition, nor do i expect you to
              <editable-koo>02:35also, remember how i said just pretend it's "natural deduction for a random set of axioms & inference rules"?
              <editable-koo>02:36don't get hung up on whether these axioms / inference rules are any "good", just understand how natural deduction gets built up and then relates to lambdas
              <editable-koo>02:37and then you'll be in a position where we can actually constructively discuss the pros/cons/possible-alternatives
              <editable-koo>koo5
              <editable-koo>13:03not getting hung up, just trying to understand
              <editable-koo>13:05i dont see any big picture, no intention for this whole conglomerate of historical perspecitives and systems, nothing that could guide me so i could gloss over the details
              <editable-koo>13:05so im trying bottom up
              <editable-koo>13:09btw
              <editable-koo>13:10keeping things virtualized with virt-manager and qemu is quite a hassle
              <editable-koo>13:11basically admining 10+ os installations
              <editable-koo>13:11hassle with constant switching of monitor resolutions
              <editable-koo>13:11hassle with moving files
              <editable-koo>13:12
              <editable-koo>    now my vm's started freezing on me
              <editable-koo>13:12hassle with updating everything
              <editable-koo>13:12i find its taking serious part of my time
              <editable-koo>13:13theres this conceptually much better thing called qubes, a friend runs it, but its not that popular and not that polished, he does have quite a bit of work with it as well, and he's 10x better than me in system administration/hacking
              <editable-koo>13:14i tried a new version of it that was supposed to be noob friendlier in some aspects and it was unfinished at the time...
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>15:19"i dont see any big picture, no intention for this whole conglomerate of historical perspecitives and systems, nothing that could guide me so i could gloss over the details"
              <editable-koo>15:22start with: we want to have a way to express logical statements and check their proofs
              <editable-koo>koo5
02/08 06:59:47<editable-koo>19:47fair one
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:54so, maybe the academia's not to your taste, that pdf is about the simplest explanation i could find about this variety of logic but it's still not quite as accessible as what i'm really looking for in educational material on this stuff
              <editable-koo>19:58based on your own intuitions about logic, could you devise a system where we can express logical statements, have a machine check their well-formedness, and then express their proofs, and have a machine check their correctness?
              <editable-koo>koo5
              <editable-koo>19:59probably couldnt:)
              <editable-koo>20:00ive mostly been reading wikipedia to assimilate the dictionary and history ..
              <editable-koo>20:00and this is gonna take some more time
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>20:03i mean, you "could", it's just an exercise (unless you came up with a really good logic framework? :), it doesn't need to be massively useful or even consistent but it might help to hands-on experiment with some things that you already find intuitive and just see where that leads, idk just a thought
              <editable-koo>20:03what dictionary / history?
              <editable-koo>koo5
              <editable-koo>20:03as on ATCHC, the elimination rules for disjunction are weird, i dont understand the situation with their imaginary new proposition C, vs our agda definition, where elimination means getting back either a or b
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>20:04that's our agda definition of elimination of *con*junction :)
              <editable-koo>koo5
              <editable-koo>20:05yea i understand, but doubtful we have time for this play. what dictionary/history: started with "intuitionistic logic" and clicking my way through
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>20:05(also agda technically doesn't have explicit definitions of elimination, you basically access that through the pattern matching)
              <editable-koo>koo5
              <editable-koo>20:05? is conjunction?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>20:06can you point me to the specific code you're referring to?
              <editable-koo>koo5
              <editable-koo>20:06data ? {i} {j} (A : Set i) (B : Set j) : Set (i ? j) where
              <editable-koo>inl : A ? A ? B
              <editable-koo>inr : B ? A ? B
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>20:06ah those are introduction rules not elimination rules
              <editable-koo>20:07compare with the intro rules for disjunction in ATCHC
              <editable-koo>koo5
              <editable-koo>20:07where are our elimination rules for disjunction?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>20:08they're not really first-class in Agda, look at the pattern-matching for a function A v B -> C
              <editable-koo>20:08or, better, (p : A v B) -> C p
              <editable-koo>20:10if you can derive C (inl a) from a : A, and you can derive C (inr b) from b : B, then you can derive C p from p : A v B
              <editable-koo>koo5
              <editable-koo>20:11process-of-elimination?
02/08 06:59:48<editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>20:11the imaginary new proposition C pops in because the elimination rule is telling you what you can derive from A v B
              <editable-koo>20:12sort, it's like half of process-of-elimination
              <editable-koo>20:12process-of-elimination is "it's the one or its the other, and its not the one therefore its the other"
              <editable-koo>20:12elimination rule for OR is basically just the "its the one or its the other" part
              <editable-koo>20:13but this isn't really specific to OR, or the semantics of OR, you can generalize this concept to all the other types
              <editable-koo>20:14G |- A ^ B,   G, A, B |- C
              <editable-koo>20:14---------------------------
              <editable-koo>20:14                C
              <editable-koo>20:14basically, whatever is derivable from the constructors of a type is derivable from that type
              <editable-koo>20:16note how this is a different definition of conjunction than the one with A ^ B ==> A and A ^ B ==> B, we'll get back to that later but first just understand the basic mechanics of the natural deduction and this specific style of coming up with elimination rules based on intro rules / constructors
              <editable-koo>20:17ATCHC mostly just goes over the first part, the basic mechanics of natural deduction and how we get from that to lambda expressions, but, for each of the connectives that's not presented in this style you can try to rewrite it into this style
              <editable-koo>20:18(that should've been G |- C, but w/e)
              <editable-koo>20:20G |- p : Bool              G, x : Bool |- C prop           G |- C[x\true]               G |- C[x\false]
              <editable-koo>20:20--------------------------------------------------------------------------------------------------
              <editable-koo>20:20woops, that should be G |- c : C[x\true]          G |- d : C[x\false]
              <editable-koo>20:20------------------------------------------------------------------------
              <editable-koo>20:21G |- if p then c else d : C[x\p]
              <editable-koo>20:24in other words, if you have an object p of type Bool, a proposition C about Bools, a proof of C(true), and a proof of C(false), then you can make a proof of C(p)
              <editable-koo>20:24this particular style of elims has the following general pattern:
              <editable-koo>20:26G |- p : MyType             G, x : MyType |- C prop               G, {premises of MyType-cons1} |- C[x\{MyType-cons1 applied to premises]}     ... similarly for the rest of the constructors ....
              <editable-koo>20:26--------------------------------------------------------------
              <editable-koo>20:27woops that should be G, {premises of MyType-cons1} |- c1 : C[x\{MyType-cons1 applied to premises}]
              <editable-koo>20:27--------------------------------------------------------
              <editable-koo>20:28G |- MyType-rec p {premises of MyType-cons1}.c1 {premises of MyType-cons2}.c2 ... {premises of MyType-consN}.cN : C[x\p]
              <editable-koo>20:29"rec" is short for recursor because for recursive types, the computation rule associated with this term will actually recurse over their structure, like "Nat-rec"
              <editable-koo>20:30ok so, any questions on this? does this seem like a valid pattern of inferencing to you?
              <editable-koo>koo5
              <editable-koo>23:17Well, uhh, it gets a bit heavy on page 9
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>23:18divide & conquer
              <editable-koo>koo5
              <editable-koo>23:19Whats it mean G |- A ^ B,   G, A, B |- C?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>23:20if A ^ B has a proof under context G, and C has a proof under context G, A, B
              <editable-koo>koo5
              <editable-koo>23:21Ah
02/08 06:59:49<editable-koo>Tuesday
              <editable-koo>koo5
              <editable-koo>01:08Unfortunately, this notation is a bit unwieldy for normal use. If this were
              <editable-koo>a functional programming language like Haskell, for instance, we?d have a
              <editable-koo>semi-readable representation because we?d probably stick to using ASCII
              <editable-koo>but we're in a pdf so lets just go full retard line-noise
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>01:09yes
              <editable-koo>koo5
              <editable-koo>01:12it just doesnt make any sense whatsoever after page 8
              <editable-koo>01:13just pages full of equations
              <editable-koo>01:13something something meta rules lambda calculus
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>01:15the first part of page 9 is just a list of  (semi-)random natural deduction rules
              <editable-koo>01:16then they show a proof that uses those rules
              <editable-koo>01:17and then page 10 rewrites the same rules, but in something closer to a lambda calc notation
              <editable-koo>01:18then the rest of page 10 just explains some things about it
              <editable-koo>01:18page 11 and the top of page 12 are just examples of proofs
              <editable-koo>01:19then section 3 explains how all this relates to lambda calc reduction/normalization/evaluation rules
              <editable-koo>01:26actually the two proofs at the bottom of page 11 are the same proof written in two different notations, and same with the two proofs at the top of page 12
              <editable-koo>01:33the problem with just doing it in haskell is that it would be difficult to get 99% of the point across
              <editable-koo>01:34everything derives from the proof-tree structures, it's all about understanding how typed lambda calc is just a syntax for proof trees and the reduction/normalization/evaluation rules are just proof normalizations (read: simplifications)
              <editable-koo>01:38all the computation rules for a given connective are derivable from its intro/elim pairs in the standard way presented in section 3
              <editable-koo>04:12ok so, now i'm nearly 100% sure i'm on the same page as HMC regarding the MLTT-auth, modulo: 1) he's got one trick that's supposedly gonna help prevent the hashes from weakening under the presence of users being able to choose arbitrary identifiers; 2) he'd prefer it in N3; 3) i've still got details to work out with him regarding open-phase
              <editable-koo>04:13and then we'll be ready for DHT & block-chain, this is getting exciting :)
              <editable-koo>04:14(for one of us, at least, lol)
              <editable-koo>05:55ok so now i'm 100% of 100% sure that i'm on the same page as HMC regarding MLTT-auth, modulo those same things
              <editable-koo>05:56hopefully that alleviates some of the concerns you were having wrt that aspect of it
              <editable-koo>koo5
              <editable-koo>09:02Yea sounds good
              <editable-koo>09:02p : A ? B ` p : A ? B
              <editable-koo>09:03p : A ? B |- p : A ? B
              <editable-koo>10:25Whats the matter with this?
              <editable-koo>10:25On top of page 11
              <editable-koo>10:26In the middle set of equations, ? |- f : B ? A should be => C?
              <editable-koo>10:27Towards left top
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>16:03koo5[m]: yes, good catch
              <editable-koo>koo5
              <editable-koo>16:32Why G, x : A |- x : A?
              <editable-koo>S
02/08 06:59:50<editable-koo>stoopkid (IRC)
              <editable-koo>16:32if you assume A you can conclude A
              <editable-koo>koo5
              <editable-koo>16:34Ah, so this is like, an allowed  form that your rules can take, as opposed to a basic set of rules to follow?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>16:37not sure what you mean; this rule is what lets you use assumptions/hypotheses
              <editable-koo>koo5
              <editable-koo>16:40how do you do that?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>16:41so like, "|- A -> A"
              <editable-koo>16:41"|- \x.x : A -> A"
              <editable-koo>16:42so what's the premises for -> Intro
              <editable-koo>16:42x : A |- ...
              <editable-koo>16:42------------------
              <editable-koo>16:42|- \x.x : A -> A
              <editable-koo>16:42x : A |- x : A
              <editable-koo>16:42----------------
              <editable-koo>16:42|- \x.x : A -> A
              <editable-koo>koo5
              <editable-koo>16:43implication is somehow a first class thing here?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>16:44yes
              <editable-koo>16:45so, -> Intro rule:
              <editable-koo>16:45G, x : A |- b : B
              <editable-koo>16:45-------------------
              <editable-koo>16:45G |- \x.b : A -> B
              <editable-koo>16:46if b is an object of type B under the assumption that x is an object of type A, then \x.b is an object of type A -> B
              <editable-koo>koo5
              <editable-koo>16:47Well...yea it is
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>16:48so in proving an implication, you get to introduce these assumptions "G, x : A |- ..."
              <editable-koo>16:49but to actually use the assumption you need to move it from the LHS of |- to the RHS
              <editable-koo>16:49using the hyp rule, G, x : A |- x : A
              <editable-koo>17:01hrm, does that make sense? after reading over it it only explains ~half the story on the assumption that you already understand the other half
              <editable-koo>17:05"Well...yea it is" yes this is where curry-howard correspondence starts
              <editable-koo>17:05i really should've said
              <editable-koo>17:05"if b is a proof of B under the assumption that x is a proof of A, then \x.b is a proof A -> B"
              <editable-koo>17:06don't think of this \x.b in terms of lambda calc (yet), it's not a function (yet), it's a syntax term encapsulating the proof tree & assumptions below it
              <editable-koo>17:06in section 3 all of this will *become* lambda calc
              <editable-koo>17:07so far in section 2 it's just representations of proof trees
              <editable-koo>17:08so, you already know "where this is going", in terms of it leading to the curry-howard correspondence, but, the point of this PDF is to show how you get there from proof trees
              <editable-koo>koo5
02/08 06:59:51<editable-koo>19:16G, x : A |- x : A
              <editable-koo>19:16is the G important here?
              <editable-koo>19:18this seems to either be stating that if somthing is true in some context, then its true globally
              <editable-koo>19:18or its saying that if something is true, then its true?
              <editable-koo>19:22err, so its a premise for creating identity functions?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:23G just catches other assumptions that might be present
              <editable-koo>19:24so given the context y : B, x : A, you can still apply this rule, so
              <editable-koo>19:24y : B, x : A |- x : A
              <editable-koo>19:25so the G's let the rules work under different contexts
              <editable-koo>19:26"this seems to either be stating that if somthing is true in some context, then its true globally" not quite
              <editable-koo>19:26though if something is true in an *arbitrary* context, then a consequence of this is that it's also true in the empty context
              <editable-koo>koo5
              <editable-koo>19:27ah, so this G,a:A->a:A substantiates the a:A as a result of this ----- thingy
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:28yea basically, essentially saying that if you assume a : A, then you can use a : A in your proof tree as though you had an actual derivation of it, which is how it captures the notion of proof-under-assumption
              <editable-koo>koo5
              <editable-koo>19:29so no, its not about the context?
              <editable-koo>19:32does this rule cause recursion into itself?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:34well, it is about the context (of assumptions), it allows you to pull an assumption out of the context to use in your proof tree
              <editable-koo>19:35and no that rule doesn't recurse it has no premises
              <editable-koo>19:36or do you mean can it pull an assumption out of arbitrary position in the list of assumptions that make up the context?
              <editable-koo>koo5
              <editable-koo>19:36ok
              <editable-koo>19:36where do contexts come from?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:39they represent assumptions, so if you think of building up proof-trees bottom-up, top-down, doing whatever you want, then you can think of them as being "just there" and the stuff on the LHS of the |- is just helping to keep track of scoping the assumptions as you move between different parts of the proof tree, but i'm assuming you're really asking: how do they enter the picture if you start from some proposition and
              <editable-koo>19:39try to prove it by building the proof-tree downward towards its leaves?
              <editable-koo>19:40(upward? i guess this PDF actually represents trees in their proper orientation heh)
              <editable-koo>19:41they get introduced by the intro for ->
              <editable-koo>19:41G, x : A |- B
              <editable-koo>19:41-------------
              <editable-koo>19:41G |- \x.b : A -> B
              <editable-koo>19:42(sorry should've been |- b : B up top)
02/08 06:59:52<editable-koo>19:43the proposition "A -> B" internalizes the judgement that B is provable under assumption of A, and that's what's going on in the intro rule there; x, b and \x.b are just serialized representations of the proof-trees in question
              <editable-koo>koo5
              <editable-koo>19:45maybe start with, whats "form"?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>19:47"form"? as in the formation rules?
              <editable-koo>19:48like these:
              <editable-koo>19:48G |- A prop          G |- B prop
              <editable-koo>19:48------------------------------
              <editable-koo>19:48G |- A OR B prop
              <editable-koo>19:48?
              <editable-koo>19:48with something like "OR-form" written next to the ----?
              <editable-koo>19:51(these rules actually might be redundant in many cases, i haven't verified; it's more important when we start taking set-levels into account and need rules that actually place a type at some particular set-level)
              <editable-koo>19:52well, those rules basically tell you when you casition/type in question
              <editable-koo>19:53like, A OR B is a type assuming A is a type and B is a type
              <editable-koo>19:55the reason this might be redundant is because the only reason these really need to be there when we're not considering set-levels is because we'd maybe want to make 100% sure that we never make the judgement x : A, where A does not actually represent a type
              <editable-koo>19:56if the rules for _:_ were hypothetically constructed such that we could never derive x : A where A is not a type, then these would indeed be redundant, but then there's set-levels, so... apparently it's a thing, but you don't need to worry about that yet, i don't think ATCHC talks about any of this at all?
              <editable-koo>19:57i don't think it even has "prop" judgements or "form"/formation rules?
              <editable-koo>19:58and i think even further is definitely restricted to a collection of rules where you could never derive x : A where A does not actually represent a proposition?
              <editable-koo>19:58so, let's walk through an example, i'm gonna do it upside-down because it's easier to type it out that way here
              <editable-koo>19:59we wanna prove "A -> A"
              <editable-koo>20:00looking at the intro rule for ->, we see this means we have to find some term "\x.a" such that "a" has type A under assumption that we have some x : A
              <editable-koo>20:01so our upside-down proof-tree starts off like this:
              <editable-koo>20:01|- \x.a : A -> A
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:10so let's stick with section 2, you understand now how a typed lambda expression is a serialization of the proof-tree that corresponds to a proof of the proposition that corresponds to the type of that expression?
              <editable-koo>koo5
              <editable-koo>22:11sure
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:11ok so let's move over to lambda auth paper
              <editable-koo>22:11figure 6, shouldn't look unfamiliar
              <editable-koo>22:12except for two rules at the bottom
              <editable-koo>22:13sections 3 and 4 of ATCHC explain where figures 7-9 might come from, but you don't need to worry so much about that yet, it's all kind of intuitive after you start walking through some examples
              <editable-koo>koo5
              <editable-koo>22:14not really familiar, is this a proof tree or random equations?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:15these are inference rules (really just some selected intro rules)
              <editable-koo>koo5
02/08 06:59:53<editable-koo>22:15whats inj?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:16page 10 of ATCHC
              <editable-koo>22:17can you tell me what inj is?
              <editable-koo>22:18(also page 9 of ATCHC)
              <editable-koo>22:19change of identifiers is kind of meaningless, and only the structure of the rules and their relations to each other matters right?
              <editable-koo>koo5
              <editable-koo>22:21introduction of OR?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:21yep
              <editable-koo>koo5
              <editable-koo>22:21kinda, identifiers kinda help to give meaning to things
              <editable-koo>22:22or they could
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:24true, inj is possibly even more standard for OR-intro than left/right are though, inl is even an abbreviation for "inj left", but all those things are kind of like the user-provided identifiers in the language, whereas you can see all basic language constructs like the Gamma, _|-_, _:_, ------- is all the same
              <editable-koo>22:26imo while identifiers *could* help give meaning to things, they really don't, because people can & will use the same name for different things, and different names for the same thing
              <editable-koo>22:26check out in Agda all these identifiers besides for lambda and "->" literally would be user-provided
              <editable-koo>22:29so anyway, besides for the two auth/unauth rules, you should be able to match each of the rules in figure 6 with one of the rules on either page 9 or 10 in ATCHC
              <editable-koo>22:29the rest you've maybe already done because they actually do use the same identifiers
              <editable-koo>22:31ok so why is this important, big picture here is we can straightforwardly extend lambda-auth to MLTT-auth by focusing on what's going on the natural deduction
              <editable-koo>22:32besides for maybe the auth/unauth stuff, you understand now the basic mechanics of lambda-auth as a logic of simply typed calculus / intuitionistic propositional logic
              <editable-koo>22:32in terms of proof-trees / natural deduction
              <editable-koo>22:32or i should say, you understand how its terms represent these things
              <editable-koo>22:33though until section 3 and 4 of ATCHC you maybe don't still don't have a great idea of what *computation* on the lambda terms corresponds to in terms of the proof-trees / natural-deduction
              <editable-koo>22:34but you still understand typed lambda calc computation in its own right, right? the execution of functional pIRC)
              <editable-koo>22:38so, you'll probably be able to see how all the auth/unauth mechanics are working just by running through the fetch & update examples step by step, you don't have to try to interpret it in terms of the natural deduction rulesets but keep it in the back of your head that that's what's running the whole picture and then when you get to the end of that i can walk you through how we can basically extend from lambda-auth
              <editable-koo>22:38to MLTT-auth by just taking the standard MLTT rulesets expressed in this natural deduction format, and just taking the exact same auth/unauth rules from lambda-auth, put them together (pretty much just concat the rulesets (literally???)) and you get MLTT-auth
              <editable-koo>22:40i've got a full step-by-step break down of the fetch example at the bottom of ~/notes/ND_auth
              <editable-koo>22:42big picture here: verifier can take some arbitrary tree data structure (aka an arbitrary data structure), store it on the untrusted server, keeping only the root merkle hash of it
              <editable-koo>22:43but from the verifier's perspective, it's as if all the data is actually still there, so they can call functions on it
              <editable-koo>22:43arbitrary functions, from that type to any other type
              <editable-koo>22:44verifier doesn't *have* to send their data off to a remote server and keep just the hash, they can keep the data around if they want, they can keep part of it around, mix and match which parts of it they keep around, etc..
              <editable-koo>22:46but they *can* send their data off to an untrusted remote server and just keep the merkle root, and still compute on that data securely, that's the big picture here
02/08 06:59:54<editable-koo>22:47so, *how* do they perform operations on this data, if all they choose to keep around is the merkle root?
              <editable-koo>22:47that's the implementation detail of the big picture
              <editable-koo>22:49(actually lambda-auth itself looks like it might be kinda more restricted than it needs to be and values in the auth'd version of a type are necessarily *just* the merkle root of the corresponding value in the unauth'd version of that type)
              <editable-koo>22:49(we'll get back to that, for the examples just assume the verifier always only keeps around the merkle root, since in those examples that is indeed what's happening)
              <editable-koo>22:51so, fetch has type (idx : List Bit) -> (t : * Tree) -> String
              <editable-koo>22:51so normally, we wouldn't have these auth'd types like "* Tree", we'd just have regular types like "Tree"
              <editable-koo>22:51this function would just be of type (idx : List Bit) -> (t : Tree) -> String
              <editable-koo>22:52when we call "fetch some-bit-list some-tree", some-tree would actually be a tree, not just some merkle root of a merkle tree
              <editable-koo>22:53and our function would just compute, it's got all the data there, some-tree is *actually* a tree, and it fits one of those 3 cases in the pattern-matching
              <editable-koo>22:54what case does a hash fit?
              <editable-koo>22:55it doesn't, the function can't compute if all it's got around is just this hash, it can't case-match on it, doesn't know how to evaluate
              <editable-koo>22:55so somehow we need to extract the actual value back out of that hash
              <editable-koo>22:55enter Prover
              <editable-koo>22:56originally in this story Verifier sent all the data off to Prover, so, Prover's supposedly got it
              <editable-koo>22:58so, when Verifier calls this function with just this hash of a tree instead of the actual tree, they stop immediately and query the prover to run the same function (same fetch function exactly, as written in lambda-auth)
              <editable-koo>22:59Prover's actually got all the data there, it can actually execute the function, and as it does so it generates this proof-stream, appending data every time it calls "unauth"
              <editable-koo>23:00besides for appending this data to the proof-stream, Prover is really just evaluating the function as normal
              <editable-koo>23:01the proof-stream the Prover generates is sent back to the Verifier. the proof-stream contains exactly enough info for them to compute function themselves and know they're getting the right output.
              <editable-koo>23:03ok so that's the big picture backdrop of it, lambda-auth paper unfortunately leaves a lot of that implicit, particularly how the message-passing is actually initiated between verifier & prover
              <editable-koo>23:04but from there you should be able to reference my notes and the paper on what will happen step-by-step as Verifer evaluate this function
              <editable-koo>23:09the goal: convince yourself (or find refutation) that the only way Prover can trick Verifier into computing the wrong thing is by finding a hash-collision
              <editable-koo>23:20the basic idea: the Prover builds up an execution trace as it runs through the recursive calls to fetch, each call to unauth is a step in this execution trace
              <editable-koo>23:22so imagine you're the Verifier running through this function, you want to actually compute the function, you want to run through all the same steps that the Prover ran through, and know you computed the right thing, you call unauth because you have to compute the function but all you have around is this hash and not the actual value
              <editable-koo>23:23so the Verifier and Prover are gonna run exactly the same function, they're gonna run exactly the same sequence of unauths
              <editable-koo>23:24so every time the Prover runs unauth on a value <h,v>, it sticks v onto the end of the proof-stream
              <editable-koo>23:25so every time Verifier runs unauth on some hash, it pops the first value off the proof stream and compares the hash of the value to the hash it's already got
              <editable-koo>23:25Prover actually sticks this "shallow projection" of v onto the proof stream
              <editable-koo>23:26so shallow projection of Bin(left-tree, right-tree) is just Bin(left-merkle-root , right-merkle-root)
              <editable-koo>23:27left-merkle-root and right-merkle-root being hashes
              <editable-koo>23:27so Verifier calls fetch [R,L] h1
              <editable-koo>23:27it's gonna unauth h1
02/08 06:59:55<editable-koo>23:28Prover should've stuck something in the proof-stream when *it* called unauth on the value corresponding to h1, so, pop that off the front of the stream
              <editable-koo>23:29it's of the form Bin(left-merkle-root, right-merkle-root), serialize this and take the hash and it should be equal to h1 right?
              <editable-koo>23:30cause where Verifier is calling unauth h1, Prover should've been calling unauth <h1, value-that-h1-is-the-hash-of>
              <editable-koo>23:30which in this case is the top of the tree so it's Bin(left-merkle-root, right-merkle-root)
              <editable-koo>23:30ok well this is still only part of a tree, but, it's just enough for Verifier to actually evaluate this step of the function
              <editable-koo>23:31[R,L] Bin(left-merkle-root, right-merkle-root) matches the 3rd case, so we recurse with fetch [L] right-merkle-root
              <editable-koo>23:32and end up calling unauth right-merkle-root, so Prover should've called <right-merkle-root, right-merkle-tree> and stuck the shallow projection of right-merkle-tree onto the proof stream
              <editable-koo>23:32and etc...
              <editable-koo>23:35we pop that value of the stream, it should be the shallow projection of right-merkle-tree, whose hash should be right-merkle-root
              <editable-koo>23:37shallow projection of an auth'd value is more or less the object that you actually take the hash of to get the merkle-root of that auth'd value
              <editable-koo>23:38so like the shallow projection of a merkle tree is the root node of the tree with its children replaced with their merkle-root-hashes
              <editable-koo>23:39because that's what you take the hash of to get the merkle-root-hash of that merkle-tree
              <editable-koo>23:42so, you can understand the behavior of both Verifier & Prover by looking at Figure 3
              <editable-koo>23:46Tip(str2), that's the shallow projection of Tip(str2), which is the thing which hashes to h6
              <editable-koo>23:47Bin(h6,h7), that's the shallow projection of Bin(<h6,Tip(str2)>, <h7,Tip(str3)>), and is the thing which hashes to h3
              <editable-koo>23:49and Bin(h2,h3) is the shallow projection of Bin(<h2,left-subtree>, <h3, right-subtree>), and is the thing which hashes to h1
              <editable-koo>23:49which is the thing that Verifier also has
              <editable-koo>23:50so, merkle trees & lambda auth are all about the fact that for the Verifier to take another step of computation, all it needs is the shallow projection of the input
              <editable-koo>23:57and because of the way that merkle trees are recursively hashed up like that, the shallow projection projection is all it needs in order to verify that it's operating on the correct input. if the Verifier computes the function themselves, and you can't fool them about it's input, then you can't fool them about its output
              <editable-koo>Yesterday
              <editable-koo>koo5
              <editable-koo>16:06Friend called, asking if id want to use his mostly-unused office in return for helping sometimes, nice
              <editable-koo>16:06Alright thanks for the rehash on lambda auth, its mostly clear
              <editable-koo>16:52make editable-log mod on -dev so i ca1Re lambda auth, im convinced, maybe i can reevaluate when we're implementing it
              <editable-koo>17:48So, hypotheses within contexts are equivalent to bound vars im locals in univar?
              <editable-koo>17:49in
              <editable-koo>21:36Whats the difference between G, x : True and G |- x : True?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>21:38the first is the assumptions in G paired with the assumption x : True, the second says x : True is provable under the assumptions in G
              <editable-koo>koo5
              <editable-koo>22:12G |- p : A OR B
              <editable-koo>G, q : A OR B |- C prop
              <editable-koo>G, x : A |- c : C[q(inl x)]
              <editable-koo>G, y : B |- d : C[q(inr y)] ---------------------------------------- OR-elim G |- case p {x}.c {y}.d : C[q\p]
              <editable-koo>22:13The precedents, each line is one possible to choose from?
              <editable-koo>S
02/08 06:59:56<editable-koo>stoopkid (IRC)
              <editable-koo>22:14nah all the lines together, it was just getting unwieldy to write it out horizontally
              <editable-koo>22:14so that one's just like the regular OR-elim except now the C can be dependent
              <editable-koo>koo5
              <editable-koo>22:15So how do you read the second line?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:16the second premise or the conclusion?
              <editable-koo>22:16"G, q : A OR B |- C prop"?
              <editable-koo>koo5
              <editable-koo>22:17Premise
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:18"C" is a proposition/set/type under the assumptions " G , q : A OR B "
              <editable-koo>22:19C is a type-family, basically like (q : A OR B) -> Set, but really more like the precursor to that
              <editable-koo>22:21in the sense of, if you apply ->intro to "G, q : A OR B |- C : Set", you'd get "G |- \q.C : (A OR B) -> Set" as the conclusion
              <editable-koo>22:21make sense?
              <editable-koo>koo5
              <editable-koo>22:21Is there some standard operator precedence for this shit/
              <editable-koo>22:21?
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:23hrm, there's left/right associativity of applications/abstractions, everything else is intended to be fairly unambiguous already, is there something in particular you're having trouble interpreting?
              <editable-koo>koo5
              <editable-koo>22:23Each line of this
              <editable-koo>S
              <editable-koo>stoopkid (IRC)
              <editable-koo>22:25aside from the dependent stuff and {x}. stuff for binding directly into subterms, it's essentially the same syntax as from ATCHC?
              <editable-koo>22:41are you in tmux
              <editable-koo>S
              <editable-koo>22:47http://167.88.171.233/workspace/notes/disjunction_explained
02/08 07:00:33-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
              *** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/08 09:47:21<koo5[m]> lets try to keep this dev chat here if where possible
02/08 09:56:34<stoopkid> sure
02/08 10:35:40<stoopkid> hrm, this complexity thing is still stumping me
02/08 12:45:17<stoopkid> alright yea i guess i'm not even gonna be able to test my ideas for that until i build something
02/08 14:24:22*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kydhztsficmycdof) left #autonomic-dev: Ping timeout: 240 seconds
02/08 14:27:58*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-anmlbxksnjbwheqw, stoopkid: stoopkid)
02/08 15:50:19<stoopkid> for some reason i'm struggling to finish abstracting out the patterns to run the generic ND inferencer, so i'm thinking about just coding up the specific ruleset i've already got ad hoc and then try to abstract the general patterns from there
02/08 15:55:14*** Topic change by uid137696@gateway/web/irccloud.com/x-anmlbxksnjbwheqw: NANANANANANDThis is classical logic: Theorem: For any object X, either I can give you that object, or if you give me that object I'll do something magical with it. Proof: If you give me the object, I'll do something magical.
02/08 16:01:44-christel- [Global Notice] Hi all, We appear to have some unexpected issues with one of our servers, and are temporarily without services. Please message a staffer if you require channel moderator assistance while we work to bring them back. Apologies for the inconvenience and thank you for using freenode.
02/08 16:02:30<editable-koo>yw
02/08 16:12:48<koom> This is the elimination rule for OR, and so is all about 
              <koom> **what you can prove given a proof p : A OR B **
02/08 16:13:08-christel- [Global Notice] Hi again, it would appear that the issue is an electrical failure in the rack the server lives in. We are bringing up replacement services, but may lose up to 15 minutes of data between the latest backup and the outage. Services should be up momentarily. Thank you for your patience, and again apologies for the inconvenience.
02/08 16:13:26<koom> in intuitionistic logic, having a proof of A OR B only means either having an a or a b, yea?
02/08 16:13:56<stoopkid> right
02/08 16:15:36<koom> <dash> novel considerations about turing machines https://twitter.com/VesselOfSpirit/status/961671762927693824
              <koom> <jjuran> If a program is known not to complete within the limits of the operator’s patience, does that mean it’s guaranteed not to terminate?
02/08 16:16:18<stoopkid> lol nice
02/08 16:33:34<stoopkid> alright, i need to stop procrastinating and sell these coins
02/08 16:34:48<stoopkid> calculated my rent money right, other expenses i kinda underestimated
02/08 16:35:35* stoopkid still doesn't actually know how to sell them lol
02/08 16:41:58<koom> International Earth Rotation Service
02/08 16:42:18<koom> Sub-bureau for Atmospheric Angular Momentum
02/08 16:42:40<stoopkid> they must be doing a good job, the earth's still rotating
02/08 16:43:54<koom> yea, its just that their leap seconds crept up into our rpc code
02/08 16:44:21<koom> was supposed to be a fairly quick update, now ive been at it for most of the day
02/08 16:44:31<koom> hate unpaid work
02/08 16:45:08<stoopkid> what's this? something for the day-job?
02/08 16:45:22<editable-koo>yeah just one little thing to finish
02/08 16:46:30<stoopkid> yea ouch, well, at least then you'll be finished
02/08 16:47:54<editable-koo>local time should die
02/08 16:48:52<stoopkid> according to relativity theory, all time is local
02/08 16:50:11<editable-koo>its just a theory
02/08 16:59:09<stoopkid> oy, i need something that delivers me an electric shock every time i go another hour without selling these coins
02/08 17:00:31<stoopkid> https://coincodex.com/crypto/agoras-tokens/exchanges/
02/08 17:00:34<stoopkid> well now i've got option anxiety
02/08 17:23:28<stoopkid> https://www.youtube.com/watch?v=izb2qzmp7ak
02/08 17:24:34<editable-koo>dont send the bitcoin or the agrs is gone
02/08 17:25:08<stoopkid> right
02/08 17:25:51* stoopkid goes and applies for a job
02/08 17:25:55<stoopkid> haha
02/08 17:26:09<koom> alright, thats it, im installing ubuntu
02/08 17:26:21<koom> lets see if the vm freezing stops
02/08 17:26:37<stoopkid> what are you on now
02/08 17:27:44<koom> fedora
02/08 17:28:19<stoopkid> ah, never tried it
02/08 17:28:25<stoopkid> i guess i'll keep that up then :)
02/08 17:31:49<stoopkid> alright w/e i guess even if i screw everything up i've still got my bills paid for another month or so and we should hit that first milestone pretty quick here
02/08 17:33:12<koom> i wanna see nillis face when we tell her we've lost all our money
02/08 17:36:10<stoopkid> idk maybe something like ">:/"
02/08 17:42:21<stoopkid> have you even lost your money? i thought you managed to get yours out
02/08 17:44:52<koo5[m]> sure but at the all time low in about 3 months
02/08 17:46:07<stoopkid> yea that's unfortunate, i guess my procrastination wasn't such a bad thing in the end (yet, anyway? heh)
02/08 17:53:01<stoopkid> been weeks since i checked to make sure my coins were even still there, glad to see that they are
02/08 17:54:03<stoopkid> idk why i get so defeated by money :/
02/08 17:58:08<koo5[m]> idk why i got so defeated by cryptos
02/08 18:08:35<stoopkid> "Bittrex currently does not have a way to withdrawal funds in USD or any other FIAT currencies.  In order to withdrawal your coins you will need to generate an address using the wallet you intend to receive the coins."
02/08 18:09:18<stoopkid> hrm, so what i trade for USD and then have to leave it in bittrex and spend directly from there?
02/08 18:13:14<stoopkid> seems i have to trade it for USDT and then go through Tether to get USD ?
02/08 18:29:32<stoopkid> or i guess i can trade it for another coin that has more exchange options
02/08 18:42:52<stoopkid> koo5[m]: i guess you could've done worse: http://bitcoinist.com/fbi-silk-road-bitcoin-loses-2-4-billion/
02/08 19:09:37<stoopkid> apparently there's 2 ATMs in baltimore that dispense cash for bitcoin
02/08 19:10:31<stoopkid> seems weird i'll have to check that out
02/08 19:13:04<stoopkid> i wonder how much of my bills i can pay in btc these days
02/08 19:19:42<stoopkid> i can get all kinds of goods shipped to me, not sure about my bills though
02/08 19:25:34<stoopkid> is there any mechanism on btc to trustlessly exchange between omni layer and regular btc layer?
02/08 19:26:21<koo5[m]> shrug
02/08 19:26:59<koo5[m]> trustless exchanging is pretty much the thing in development right now in the crypto land
02/08 19:27:22<koo5[m]> atomic swaps
02/08 19:28:05<koo5[m]> dont leave anything on bittrex, its a scam
02/08 19:29:15<stoopkid> would be straightforward with omni<->btc had satoshi implemented a mechanism for two transactions to only be able to go through if they're on the same block. i wonder if it's possible to make that work
02/08 19:29:57<stoopkid> multi-factor authentication gets you halfway there
02/08 19:31:52<stoopkid> possibly
02/08 19:34:02* koom runs into obligatory programming language bug
02/08 19:36:11<stoopkid> so let's say i wanna trade my omni asset for your btc. we can get a trustless exchange after some initial risk of one party or both sending their funds into a possibly-irrecoverable black-hole.
02/08 19:36:46<koom> lol
02/08 19:36:57<stoopkid> so we each set up a wallet with two-factor authentication, so that we're both one of the factors on each wallet
02/08 19:37:49<stoopkid> maybe just needs one wallet, that we're both one of the authentication factors of
02/08 19:38:21<stoopkid> i send my omni asset there, you send your btc there, now we wanna exchange
02/08 19:39:19<stoopkid> so i make a transaction for the omni asset in this wallet, to send to your wallet that you have full control over
02/08 19:39:47<stoopkid> i don't authenticate it, i send it off to you to authenticate and then send back to me
02/08 19:40:39<stoopkid> ah hrm maybe this doesn't work
02/08 19:44:46<koom> maybe
02/08 19:46:45<stoopkid> yea it doesn't work, almost works but then one party's still gotta act first and take the risk in doing so, but i guess there would be slightly less risk since w/e coins they put up into the multi-factor wallet are still trapped there, they won't be able to get them back
02/08 19:48:34<stoopkid> the problem is that the users making the transactions are only able to authenticate *that* transaction, they can't authenticate at the block level
02/08 19:48:50<stoopkid> if they could, problem solved
02/08 19:49:37<koom> i think this is being solved by some sort of timeout
02/08 19:51:41<koom> also, something about one side signing the one transaction causes the other side see the secret needed to sign theirs, or something
02/08 19:52:21<stoopkid> now that would be interesting
02/08 19:54:10<stoopkid> that could potentially even work for omni<->btc
02/08 19:54:26<stoopkid> do you know what that kind of digital signature scheme is called?
02/08 19:57:20*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
02/08 23:41:20<stoopkid> alright, i think it actually would work, the trick is to not make two separate tx's from the 2FA account but a single tx with multiple outputs
02/09 00:10:53<stoopkid> yep, that would work, then it's a matter of how to solve the black-hole/extortion problem
02/09 00:11:49<stoopkid> there's a similar thing, two-party double deposit trustless escrow: https://bravenewcoin.com/assets/Whitepapers/BlackHalo-whitepaper-twosided.pdf
02/09 00:40:17<stoopkid> "She  then  writes  tx3  that  spends  the inputs  of  tx1  and  tx2  into  the  escrow"
02/09 01:05:12<stoopkid> i still don't see exactly how this is working but apparently it uses a "feature" that you can make tx's without revealing them except for their IDs and then make other tx's based on those IDs, in order to basically lock a series of a future tx's in place
02/09 01:06:45<stoopkid> this apparently solves the problem when transacting between BTC and USD so it's possibly overkill for trustless exchange between omni & btc
02/09 01:45:13<stoopkid> well, i can solve the black-hole problem for one of the parties
02/09 01:50:59<stoopkid> https://klmoney.wordpress.com/bitcoin-dissecting-transactions-part-2-building-a-transaction-by-hand/
02/09 02:41:13<stoopkid> ok i think i've solved it
02/09 02:42:36<stoopkid> so both parties set up a 2-of-2 2FA address together, and create their tx's to go to this address but don't yet broadcast them
02/09 02:43:13<stoopkid> now they make refund tx's that would send party A's assets back to party A and party B's assets back to party B
02/09 02:44:16<stoopkid> they both sign these transactions, then they can safety transfer their assets to the multisig escrow address and be able to recover their funds without being able to steal the other one's
02/09 02:44:37<stoopkid> then they can proceed with an exchange tx
02/09 02:44:50<stoopkid> which would be invalidated if either party tries to take a refund
02/09 02:47:46<stoopkid> koo5[m]: wanna test the theory?
02/09 02:52:25<stoopkid> i think this solution is immune to transaction malleability too
02/09 02:56:56<stoopkid> and i don't think it would take any low-level tx structure hacking either, but, that might be a good exercise anyway honestly
02/09 02:59:19<stoopkid> well, i guess i gotta look at omni layer tx details now and see what's really up with that
02/09 03:00:44<stoopkid> it's just some extra metadata stuck into tx's yea?
02/09 03:16:57<stoopkid> https://www.ccn.com/omnidex-bitcoin-blockchain-crypto-exchange/
02/09 03:17:59<stoopkid> heh idk i feel like i'd rather just use the solution i came up with
02/09 03:18:06<stoopkid> agoras is on there tho
02/09 03:44:31<stoopkid> looks like omni tx's are indeed just some extra metadata stuck into btc txs, still just gotta look into it some more though
02/09 03:52:57<stoopkid> ok so one issue, on first glance, is that the parties wouldn't want to exchange the bodies of the tx's between their main accounts & the escrow accounts prior to having their refund tx signed by both parties, this is because once a party has filled out a tx and signed it in order to generate its ID so that a refund tx can be generated for it, the other party could potentially broadcast it without signing the
              <stoopkid> refund tx
02/09 03:54:07<stoopkid> so the parties really only want to exchange the tx IDs, the only issue with this, on first glance, is that one of the parties could waste the other's time by not sending the appropriate amount to the escrow address
02/09 03:54:51<stoopkid> so ideally both parties would want to know that the right amount is actually gonna get sent there
02/09 03:55:37<stoopkid> it wouldn't be the end of the world, both parties will have had their refund tx's signed so they'd be able to pull out of the tx with only some time and maybe a small fee wasted, but in the grand scheme of things no big deal
02/09 03:55:53<stoopkid> but ideally they'd still be able to know beforehand, so, i've got two solutions to this
02/09 03:56:05<stoopkid> 1. it's already not really a problem
02/09 03:56:54<stoopkid> in crafting the refund tx's, both parties will be made aware of how much they're "supposed" to be exchanging
02/09 03:58:43<stoopkid> so let's say i wanna give you 1 agrs in exchange for .00025 btc
02/09 04:02:02<stoopkid> you'll have made tx1 that will send .00025 btc to the escrow address, and sent me its ID, txid1, along with a refund tx, rtx1, from the escrow address back to you, which you'll have signed, using the output of tx1 as its input, with .00025 btc as its output value
02/09 04:02:50<stoopkid> so i get this info from you, txid1 (just the ID), and rtx1 (the whole thing), well, rtx1 contains the refund amount that you're expecting, so i can expect that this is how much you're actually gonna send
02/09 04:07:23<stoopkid> why can i expect this? because i'm only planning to sign *this* refund tx for you, if you send more than .00025, you'll lose the extra as a mining fee when you withdraw the refund and if you don't want that to happen then i can extort you for a share of the extra, so you surely won't be sending more than .00025, if you send less than .00025, you'll lose whatever you've sent because your refund tx will no
02/09 04:07:33<stoopkid> longer be able to go through, so you surely won't be sending less than .00025, at worst you'll send nothing at all, but, is that really so bad? the point of all this was to make sure both parties had the ability to safely back out of the transaction
02/09 04:10:30<stoopkid> but anyway:
02/09 04:10:56<stoopkid> 2. we can get a slightly more transparent solution like so:
02/09 04:13:56<stoopkid> instead of making a tx to send your .00025 btc directly to the escrow address, you make a temporary address under your sole control, and make your tx to send your btc to that temp address, call this ttx1 with ttxid1, and then make a tx to send these btc from the temp address to the escrow address, call this tx1 with txid1, and then your refund tx from the escrow address back to you, call this rtx1 with rtxid1
02/09 04:14:02<stoopkid> you send me tx1 and rtx1
02/09 04:15:27<stoopkid> tx1 is signed by you and ready to go, i can examine and see what the output amount is and make sure it's what i'm expecting to transact for, and then i can sign rtx1 for you
02/09 04:16:28<stoopkid> then i do the same with my 1 agoras to a temp account, and from there to the escrow account, and then from the escrow account to the refund, and send you everything but the body of the transaction that sends from my main account to the temp account
02/09 04:17:42<stoopkid> once that's all ready to go, then we'll be once again safe to exchange to our temp addresses and then from there to escrow address
02/09 04:21:03<stoopkid> well, maybe i'm just overcomplicating it now, first solution seemed fine
02/09 04:23:45<stoopkid> i mean, starting with "hrm seems impossible" and moving to "ok its possible but not free of the risk of black holes and extortion" and reaching "it's practical and with only low risk of relatively minor inconvenience", pretty decent success for just a few hours thinking about, i'd say
02/09 04:25:07<stoopkid> beats an exchange, anyway?
02/09 04:25:52*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/09 04:26:37*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/09 04:42:44<stoopkid> on second analysis, solution 2 just makes it more inconvenient by default and opens up the potential for more inconveniences, solution 1 seems straight-forward and effective
02/09 04:58:59<koo5[m]> So, installed kubuntu, all over my vms and backups and stuff
02/09 04:59:22<koo5[m]> I should have bought spare drive for backups but i kept delaying it
02/09 04:59:50<stoopkid> ouch
02/09 04:59:56<koo5[m]> So now im gonna have to resurrect what i can from pretty old backups
02/09 05:00:35<koo5[m]> Im thinking theres something wrong with how i try to use my computer, i waste so much time just trying to make it work
02/09 05:01:38<koo5[m]> Im seriously pissed now
02/09 05:02:16<stoopkid> yea that doesn't sound like a fun thing to be dealing with
02/09 05:09:01<koo5[m]> Everything was neatly prepared for copying over to the backup drive today
02/09 05:10:25<koo5[m]> I just want to work on this computer, and instead i need to babysit it
02/09 05:11:05<stoopkid> i feel like that's how it always is if you try to be anything more than a casual user
02/09 05:15:33<stoopkid> well, if you manage to get that solved, i've summarized the omni<->btc exchange idea here if you wanna read over it and see if we can test that out: http://167.88.171.233/workspace/notes/mfa3_notes
02/09 13:39:40*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 240 seconds
02/09 13:39:53*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/09 15:03:30<koo5[m]> Thats gonna take some time, i just broke it again
02/09 15:03:52<stoopkid> ouch, what'd you do this time
02/09 16:36:43<koo5[m]> Formatted the disk where the new os wasnt installed
02/09 16:37:02<koo5[m]> It isnt making.much sense to me
02/09 16:40:08<koo5[m]> ah i think i know, i let the bios overwrite both disks mbrs with backup
02/09 16:40:48<koo5[m]> At any case im locked out of my computer till tomorrow, cant make a bootable flash here
02/09 16:55:12*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/09 16:55:43*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/09 16:56:21<koo5[m]> One thing i know i can try to ease these endless problems is to make backuping easy for myself, which ive already done by buying another drive
02/09 16:56:41<koo5[m]> Will see if i have the discipline
02/09 16:57:56<koo5[m]> If not, then only an online computer-to-computer syncing system like resillio can save me
02/09 17:02:16<koo5[m]> But ive already tried tahoe, duplicati and resillio and, while resillio had the potential at least for hassle free backuping at low gigabytes ranges, it just doesnt sit right with me to let all your wallets and passwords and stuff go through this kind of program, even (obviously) encrypted
02/09 17:02:34<koo5[m]> Maybe syncthing i think is at least open source
02/09 17:03:37<koo5[m]> But you still better keep some.kind of version control above it, and i think you simply cant realistically do that with vm images
02/09 17:04:25<koo5[m]> Maybe fiddle with user permissions until you break everything
02/09 17:07:26<koo5[m]> even such basic thing needed to keep conventional computing running smoothly as backuping is actually a can of computer babysitting worms
02/09 17:10:38<koo5[m]> Ive lost a painful amount of work/data or at least had to rebuild everything for at least a third time in maybe 6 months
02/09 17:33:03<koo5[m]> 4 incidents
02/09 17:33:46<koo5[m]> First was liquid in notebook, rescued the hdd
02/09 17:33:59*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-anmlbxksnjbwheqw) left #autonomic-dev: 
02/09 17:34:11<koo5[m]> Then the hdd failed, luckily i had fresh backup
02/09 17:34:26*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tjwuwcnjjnutrfey, stoopkid: stoopkid)
02/09 17:34:45<koo5[m]> Then the zfs incident
02/09 17:35:37<koo5[m]> I only lost a bit of work but iirc it took me several days to get a new linux installed and working to my liking
02/09 17:35:46<koo5[m]> Then this
02/10 10:23:46<stoopkid> koo5[m] so wait, you didn't overwrite your wallets did you?
02/10 10:28:19<koo5[m]> no, i try to keep those backupped thoroughly
02/10 10:28:28<koo5[m]> Youd be able to tell by the swearing lol
02/10 10:30:28<stoopkid> hehe
02/10 10:33:23<koo5[m]> This was mostly contenplating if i could do something differently, theres the thing with trying to do backups bettter, but i otherwise couldnt come up with anything except trying buying a mac. Maybe i should try using more LTSish releases
02/10 10:38:43<koo5[m]> One thing i had figured out before was that i could pay a friend whos into sysadmining from time to time
02/10 10:38:44<koo5[m]> But we dont get to see each other that much
02/10 10:47:37<stoopkid> yea, i know what you mean wrt the sysadmin nightmare, wish i had some kinda reasonable solution to it, the fact that i don't was one of the bigger motivators for me to quit my job, cause i reached the conclusion that i'd never solve it without years of dedicated effort
02/10 11:28:35<stoopkid> when i think about it, what i probably need more than project-level milestones & timelines is just a generic daily/weekly schedule
02/10 11:29:45<stoopkid> i'm not a very organized person at all but i notice that things tend to fall into place whenever i force myself to be, but forcing myself to be organized is still not a habit for me yet
02/10 11:43:22<stoopkid> so, different topic: i guess we can't trust NSA/NIST crypto standards not to be back-doored?
02/10 11:44:54<stoopkid> (not a rhetorical question; how do we go about choosing appropriate cryptographic algorithms?)
02/10 13:01:34<stoopkid> hrm, i know how we can test, hypothetically
02/10 13:02:08<stoopkid> take some coin and put them in a btc address secured by some mechanism, which we publish, and see if it ever gets taken
02/10 13:52:31<stoopkid> https://bitcointalk.org/index.php?topic=293382.0
02/10 13:52:43<stoopkid> https://www.reddit.com/r/Bitcoin/comments/5vqd6k/sha1_collision_bounty_has_been_claimed/
02/10 13:54:24<stoopkid> well alright then, not so hypothetical
02/10 16:44:31*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-kafhkvghlzwbnsgd) left #autonomic-dev: Ping timeout: 240 seconds
02/10 18:06:29*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-svczgsevsusndmeh, (unauthenticated): @koo5:matrix.org)
02/11 08:25:26<koo5[m]> Youre doing great, afaict
02/11 13:00:46<stoopkid> oy, idk.. maybe, hopefully
02/11 13:01:42<stoopkid> nah i know objectively speaking the project is moving along just fine, i'm just becoming increasingly tired and depressed despite that
02/11 13:04:29<stoopkid> luckily we have been making a whole lot of progress on the theory or i'd be thoroughly burnt out right about now
02/11 13:07:04<stoopkid> this whole thing with nilli and bittrex though is just strengthening my convictions that figuring out the trustless exchange is the right way to go, if possible
02/11 13:09:31<stoopkid> i mean, i was already really concerned about it based on everything you've been telling me, but, the thing with nilli just really hammers in the point
02/11 13:10:41<stoopkid> from what i understand the issue was actually with her email account rather than bittrex itself? but, either way, it's just yet-another-strike against central points of failure
02/11 13:12:22<stoopkid> coincidentally, my fiancee got some cash from an ATM a couple days ago and then somebody who'd hacked the ATM drained everything else from her account
02/11 16:17:14<koo5[m]> Funny, i havent actually heard of anyone this has happened to, although i do hear in the.news of discovered skimming devices
02/11 16:20:21<koo5[m]> Alright take time for yourself
02/11 16:20:38<koo5[m]> I cant help you if im just flailing behind
02/11 16:21:26<koo5[m]> And tbh since fucking up my puter, ive been trying to just relax more than trying to fix it
02/11 16:22:30<koo5[m]> Ive wired up the antenna to my tv on friday when it happened and we've watched a couple of films
02/11 16:23:31<koo5[m]> And im thinking i wanna try suse enterprise linux or rhel
02/11 19:56:48<daemoz_> try arch!
02/11 20:00:10*** Nick change: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) is now known as daemoz
02/11 21:44:35* stoopkid might at some point
02/11 21:44:58<stoopkid> you aren't the first i've heard give arch a good review
02/11 21:45:20<stoopkid> still haven't tried it out yet tho
02/11 21:47:18<stoopkid> other thing i've been seriously contemplating is trying to go through linux-from-scratch with the intent of eventually actually using it
02/11 21:49:33<stoopkid> koo5[m]: relaxing is the right move sometimes
02/11 21:52:08<stoopkid> so, i've got another idea wrt bounding the complexity, but... its kinda theoretical, it would require a fundamental "upgrade" from MLTT
02/11 21:53:27<stoopkid> most of the details of which still need to be worked out
02/11 21:55:36<stoopkid> and nobody else seems to be trying to do it this way, which means either i'm wrong somewhere or all the other type theorists are wrong somewhere
02/11 21:55:54<stoopkid> (the odds are not really in my favor there :)
02/11 21:56:44<stoopkid> that being said, i just can't see anything else making sense
02/11 21:57:53<stoopkid> so, here's my go-to example: a mechanical wall-clock with an hour-hand and a "tick" operation, vs. the set of natural numbers mod 12, with the "successor mod 12" operation
02/11 21:58:32<stoopkid> at this level of abstraction of the wall-clock, it's structurally equivalent to the natural numbers mod 12
02/11 21:59:05<stoopkid> any proposition that's true about the natural numbers mod 12 with the successor mod 12 operation should also be true about this wall-clock and its tick operation, *at this level of abstraction*
02/11 22:00:16<stoopkid> from a syntactic/proof-theoretic perspective, what this basically corresponds to is that structurally equivalent things should be treated as "equal" in the sense that substituting structurally equivalent things for each in statements should be a truth-preserving operation
02/11 22:00:27<stoopkid> for each other*
02/11 22:00:37<stoopkid> and informally, it is
02/11 22:01:07<stoopkid> now, where this starts to break down is when you start mixing different & not-fully-compatible levels of abstraction
02/11 22:02:13<stoopkid> if you can ask questions about the physical mechanics of the wall-clock or its chemical composition, what brand it is, how long you've had it hanging there, etc... all of a sudden none of these questions really "apply" to the natural numbers mod 12 anymore, we've broken our levels of abstraction
02/11 22:02:45<stoopkid> by taking into account more internal details of the wall-clock we lose the strict structural equivalence to the Nats mod 12
02/11 22:05:01<stoopkid> it stops making sense to be able to substitute "Nats mod 12" in place of "wall-clock" in these propositions, substitution of equals for equals only makes sense *in those contexts where they can actually be considered structurally equivalent*
02/11 22:07:48<stoopkid> so, what exactly is it about some "context"/"situation" which determines whether two syntactically/computationally distinct things can be considered structurally equivalent or not?
02/11 22:08:49<stoopkid> my take on this: it is how those things are able to be *used* in that context
02/11 22:10:10<stoopkid> in some sense it's more about what propositions you can form about those things in that context, but this itself is mainly determined by how you're able to *use* the things, what operations & relations on the things are available in that context to use in your proposition or its proof
02/11 22:11:35<stoopkid> when we start asking questions about the physical mechanics of the wall-clock or its chemical composition, we introduce more ways to use it besides just "abstractly tick the hour-hand"
02/11 22:15:50<stoopkid> if all we can do is just abstractly tick this hour-hand, and it takes us in a closed cycle of length 12, then, how can we structurally differentiate from Nats mod 12? at that level we literally can't we get this "isomorphism" that actually demonstrates the structural equivalence by mapping the hours on the wall-clock into Nats mod 12 in a way that can be demonstrated to preserve all the operations/relations
              <stoopkid> (that are in consideration in this context) on the underlying sets
02/11 22:17:13<stoopkid> and that's how we go about our day using modular arithmetic to predict the behavior of wall-clocks
02/11 22:19:50<stoopkid> but when we start getting concerned about the finer structural details of the clock, we're capable of breaking our layers of abstraction and looking at these finer details, and while this breaks the structural equivalence to modular arithmetic, it can only be said to do so in this "other context", and these other contexts are important because they may allow us to choose a cheaper clock
02/11 22:21:59<stoopkid> alright so that makes for a good segue back to type theory & bounding complexity
02/11 23:18:40<stoopkid> so, in type theory, we've got this same notion of substitution of equals for equals
02/11 23:20:18<stoopkid> if i have a type A, a proposition P about objects in A, i.e. P : A -> Set, then (x y : A) -> (x == y) -> (P x) -> (P y)
02/11 23:23:07<stoopkid> so, there's this notion of "function extensionality", which means the following:
02/11 23:23:35<stoopkid> (f g : A -> B) -> ((x : A) -> f x == g x) -> f == g
02/11 23:24:18<stoopkid> standard MLTT doesn't have this rule, HoTT does though, and, it's somewhat controversial, and not for bad reason
02/11 23:29:12<stoopkid> let's imagine you add propositions which allow you to examine the "intensional" properties of the functions f and g (intensional meaning anything about the functions besides their input/output pairs; note that any such intensional properties are not actually "part of the function"; functions are *defined* to be these input/output mappings, and have no other properties)
02/11 23:29:50<stoopkid> let's call the proposition "Runtime"
02/11 23:30:38<stoopkid> Runtime : Nat -> A -> Set
02/11 23:31:42<stoopkid> well, maybe Runtime : Nat -> (A -> B) -> Set
02/11 23:32:32<stoopkid> so "Runtime n f" where n : Nat and f : (A -> B) gives a proposition that asks whether f terminates within n steps of evaluation on any given argument
02/11 23:33:24<stoopkid> obviously we can give two different "functions" f and g that compute the same input/output pairs, but take different runtimes in order to do so
02/11 23:33:48<stoopkid> well, if we include funext, then f == g
02/11 23:33:54<stoopkid> (function extensionality, sorry)
02/11 23:34:41<stoopkid> and let's say "Runtime n f" is true
02/11 23:34:46<stoopkid> for some n : Nat
02/11 23:35:05<stoopkid> well, then by path transport, and f == g, "Runtime n g" is also true
02/11 23:37:29<stoopkid> now, we assumed that f and g actually *do* take different runtimes to compute, so there's only two possibilities here: either our logic will quickly be demonstrated to be inconsistent when we demonstrate one of these functions to have two distinct least upper bounds on runtime, or this "Runtime" proposition cannot actually be accurately reporting the runtimes of the functions
02/11 23:40:50<stoopkid> either one is total fail, and hence we get kind of a variety of logics surrounding MLTT: those that incorporate more of the tools for talking about intensional properties of "functions", while shunning function extensionality, and those that embrace function extensionality, univalence and other things for talking strictly about *structural equivalence* while shunning the addition of tools that allow for
              <stoopkid> examining those intensional properties, because of the fact that doing so breaks assumed structural equivalences
02/11 23:41:49<stoopkid> and then we get kind of the "standard" variety, like Agda, which basically say "i'm staying out of it"
02/11 23:43:04<stoopkid> Agda doesn't have function extensionality or univalence, and neither does it have the ability to talk about intensional properties of functions
02/11 23:45:42<stoopkid> ok so, back to my wall-clock and Nats mod 12 analogies
02/11 23:46:16<stoopkid> what's the problem with function extensionality & univalence?
02/11 23:47:07<stoopkid> well, first, *why* function extensionality in the first place, in the context of the fact that the "functions" we're talking about are actually proofs of implications?
02/11 23:48:12<stoopkid> the notion of structural equivalence in a context is determined by the available usages of the structures, in that context
02/11 23:49:09<stoopkid> what are the things we can "do" with a proof of implication, in the standard contexts of natural deduction & type theory?
02/11 23:49:22<stoopkid> one thing: apply it to a proof of its premise in order to get a proof of its conclusion
02/11 23:49:51<stoopkid> modus ponens
02/11 23:49:57<stoopkid> elimination rule for implication
02/11 23:51:42<stoopkid> calling the premises its "inputs" and the conclusions its "outputs", this says that what we can do with a proof of an implication is apply it to an input to get an output
02/11 23:52:10<stoopkid> what are these proofs of implications then? functions, necessarily
02/11 23:52:50<stoopkid> note: we've gone over this from a more intuitive angle just from thinking about what a proof of implication "should" be in the context of constructive logic
02/11 23:55:37<stoopkid> now it's coming back up purely by examining what's going on in our standard rulesets that go back literally thousands of years (modus ponens goes back literally thousands of years, and its presentation in natural deduction really doesn't change anything about its proof-theoretic 'flavor')
02/11 23:57:01<stoopkid> just good to note that when the same intuitions keep getting re-justified over and over from every angle, they probably have some utility
02/11 23:58:12<stoopkid> in mathematics, what is equality for functions? being the same set of input/output pairs, i.e. mapping the same inputs to the same outputs, because there's literally nothing else you can ask about mathematical functions, there's nothing else they do, nothing else they "are"
02/11 23:59:57<stoopkid> in the context of only being able to use a proof of implication by applying it to a premise in order to get a conclusion, this means that the extensional equality, i.e. the mathematical equality for functions, is indeed the right thing
02/12 00:00:59<stoopkid> ok so then back to, what then is the *problem* with function extensionality?
02/12 00:01:59<stoopkid> afaict, only this: it asserts that this context in which the only thing you can consider doing with functions is to apply them, is the *only* context, globally
02/12 00:05:42<stoopkid> the globalness of the assertion is specifically the problem
02/12 00:06:25<stoopkid> now, on the other hand, global rejection of function extensionality is also problematic
02/12 00:07:26<stoopkid> what then is the solution, imo? equality and the corresponding ability to substitute equals for equals must be context-dependent
02/12 00:09:31<stoopkid> what is the "context", ofc its just the same story as from the beginning: context is use
02/12 01:56:01<koo5[m]> daemoz: tried arch once long time ago, it was just as promised - had to configure everything myself. Im looking for the opposite - a maintenance free hypervisor os
02/12 02:16:59<daemoz> debian?
02/12 03:03:58<koo5[m]> Probably worth a try
02/12 03:05:14<koo5[m]> then (x y : A) -> (x == y) -> (P x) -> (P y)
02/12 03:05:28<koo5[m]> Then what exactly?
02/12 03:05:54<stoopkid> you can substitute equals for equals in propositions
02/12 03:07:50<stoopkid> if x == y and P holds true for x then P holds true for y
02/12 03:08:25<koo5[m]> How do i read (x == y)?
02/12 03:08:30<stoopkid> "x equals y"?
02/12 03:09:08<koo5[m]> (x y : A) -> (x == y) -> (P x) -> (P y) is a function type?
02/12 03:09:58<stoopkid> technically yea
02/12 03:11:03<koo5[m]> So it takes an x, y, a proof of x == y, and any proposition about x?
02/12 03:11:43<stoopkid> a proof of that proposition about x *
              <stoopkid> and returns a proof of that proposition about y
02/12 03:12:03<koo5[m]> Ah, alright
02/12 03:13:56<stoopkid> in standard MLTT like Agda this is trivial, it sees x == y, then looks at the sole constructor refl : x == x, says that x and y are exactly the same thing, and then just returns the proof for the proposition about x
02/12 03:14:06<stoopkid> about y**
02/12 03:14:14<stoopkid> wait
02/12 03:14:45<stoopkid> confused myself, just returns the proof of the proposition about x, because that's what it already has as an input, and since x and y are exactly the same thing, the proof of the proposition about x *is* a proof of the proposition about y
02/12 03:16:16<stoopkid> in HoTT this is more complicated because x == y isn't just refl : x == x, it's these structure-preserving mappings (isomorphisms) like between the wall clock and Nats mod 12
02/12 03:18:50<stoopkid> complicated enough that how to do it properly was (is still maybe?) the big open question regarding the "computational interpretation of univalence"
02/12 03:20:57<stoopkid> you don't need to worry about the formal definitions of isomorphism/univalence if you think you've got a reasonable intuition about what structural equivalence means from the wall-clock / Nats-mod-12 example
02/12 03:21:49<stoopkid> univalence is basically just a fancy word for saying that this structural equivalence should be enough to do this kind of substitution
02/12 03:24:15<stoopkid> some real Agda to go along with this: http://167.88.171.233/workspace/notes/funext/Iso.agda
02/12 03:29:27<stoopkid> ah sorry, above: "well, then by path transport, and f == g, "Runtime n g" is also true", path transport is that substitution of equals for equals thing that we just dissected
02/12 03:29:43<stoopkid> the equality is the path, and you transport a proof across it
02/12 03:35:22<stoopkid> that Iso.agda gives some idea of how you would actually start to do this in the more general situation where equality can be structural equivalence
02/12 03:37:41<stoopkid> i've always been kinda confused about how a computational interpretation for this could be missing, as it seems that isomorphisms are exactly the functions that tell you how to perform the required substitutions in order to return that proof of the proposition for y
02/12 03:39:48<stoopkid> look at the comments where i describe what the isomorphisms are in Iso.agda, and then look at how we can trivially "transport" any proof that only uses the things covered by the isomorphism
02/12 04:23:59<stoopkid> so, the critical piece of the puzzle with this approach would be defining precise substitution rules for this that handle the fully general case and allow for the right notions of context-restricted equivalence
02/12 05:26:04<koo5[m]> data == {A : Set} (x : A) : A → Set where refl : x == x
02/12 05:26:28<koo5[m]> whats the last ": A"?
02/12 05:27:39<stoopkid> another argument to _==_, but is allowed to vary, whereas the things before like "(x : A) : " are fixed
02/12 05:28:10<stoopkid> so constructors can have type x == _
02/12 05:30:04<koo5[m]> But i see the refl function only called with two x'es
02/12 05:31:06<stoopkid> refl's actually not a function, note that it's type is just x == x, not "... -> x == x"
02/12 05:32:52<stoopkid> so you can prove propositions of the form x == x using refl
02/12 05:33:18<stoopkid> the intuition there is supposed to be, what else can be equal to x besides x?
02/12 05:46:19<koo5[m]> so what is refl?
02/12 05:47:08<stoopkid> an intro rule for _==_
02/12 05:47:18<stoopkid> or i guess x == _
02/12 05:47:31<koo5[m]> Ok
02/12 05:47:45<stoopkid> that data type basically says "we define there to be an object refl of type x == x"
02/12 05:48:58<koo5[m]> So does agda know that the second x is to be passed later and not the x in the type signature?
02/12 05:49:55<stoopkid> do you mean can you make a type x == y?
02/12 05:53:08<stoopkid> if you have to return a proof of x == x, you can use refl, and if you have to pattern match on x == y, you use refl and this will actually attempt to unify x and y because the only constructor is x == x
02/12 05:55:05<stoopkid> ==-sym : {A : Set} {x y : A} -> x == y -> y == x
02/12 05:55:23<stoopkid> so to prove this you'd start with something like:
02/12 05:55:29<stoopkid> ==-sym p = ...
02/12 05:55:47<stoopkid> p the x == y input (the previous ones are implicit)
02/12 05:56:30<stoopkid> we can try to return p, but this will fail, p is a proof of x == y, not y == x, Agda doesn't necessarily know
02/12 05:56:43<stoopkid> so let's pattern-match on that input instead
02/12 05:56:49<stoopkid> the only constructor is refl, so we get one case:
02/12 05:56:55<stoopkid> ==-sym refl = ...
02/12 05:57:50<stoopkid> in doing this, x and y will be unified (Agda will throw an error if they can't unify and tell you that you have bad pattern-matching)
02/12 05:58:07<stoopkid> x and y are just variables here though so they trivially unify and refl works out just fine
02/12 05:58:19<stoopkid> but then after unification, our proposition actually reads:
02/12 05:58:34<stoopkid> {A : Set} {x x : A} -> x == x -> x == x
02/12 05:58:44<stoopkid> and we already have a proof of x == x, it's just refl again
02/12 05:59:15<stoopkid> so then transitivity of equality goes similariy:
02/12 05:59:24<stoopkid> ==-trans : {A : Set} {x y z : A} -> x == y -> y == z -> x == z
02/12 05:59:27<stoopkid> ==-trans refl refl = refl
02/12 06:00:07<stoopkid> first refl unifies x and y, then our proposition is basically x == x -> x == z -> x == z
02/12 06:00:37<stoopkid> second refl unifies y and z (or i guess now x and z), so it's just x == x -> x == x -> x == x
02/12 06:01:31<stoopkid> you could also do:
02/12 06:01:35<stoopkid> ==-trans refl p = p
02/12 06:03:19<stoopkid> equal-inputs-equal-outputs : {A B : Set} -> (f : A -> B) -> {x y : A} -> x == y -> f x == f y
02/12 06:03:33<stoopkid> equal-inputs-equal-outputs f refl = refl
02/12 06:04:23<stoopkid> path-transport : {A : Set} (P : A -> Set) -> {x y : A} -> x == y -> P x -> P y
02/12 06:04:29<stoopkid> path-transport P refl p = p
02/12 06:25:03<koo5[m]> Alright, but still no clue whats the last : A there
02/12 06:27:23<stoopkid> "data _==_ {A : Set} (x : A) : A -> Set where" is like:
02/12 06:27:35<stoopkid> _==_ : {A : Set} (x : A) -> A -> Set
02/12 06:28:58<stoopkid> except the args before the "_:_", i.e. {A : Set} and (x : A) are fixed, and the args after the "_:_" are allowed to vary
02/12 06:31:40<stoopkid> == takes a Set, an object in that set, and another object in that set, and returns a proposition/type that asks whether the two objects are equal (or at least, that's the proposition that the type is attempting to encode anyway)
02/12 06:32:26<stoopkid> data Vec (A : Set) : Nat -> Set where
02/12 06:32:41<stoopkid>  [] : Vec A 0
02/12 06:33:12<stoopkid> _::_ : {n : Nat} -> A -> Vec A n -> Vec A (suc n)
02/12 06:34:13<stoopkid> (A : Set) comes before the "_:_" and is fixed, the return type of every constructor appears as Vec A _
02/12 06:35:47<stoopkid> Nat comes after the "_:_", is allowed to vary, so we can see [] : Vec A *0*, and _::_ : ... -> Vec A *(suc n)*
02/12 06:39:18<stoopkid> same thing in _==_, it just  so happens that our only constructor happens to use x again as it's choice of what to use for the argument that's allowed to vary, in an attempt to encode the notion of equality as a statement that we should only be able to form a proof of an equality when we use the same object as both args to the equality
02/12 06:41:03<stoopkid> so what objects do we have in Vec A 0? just []
02/12 06:41:20<stoopkid> and in Vec A 1 we've got (a :: []) where a : A
02/12 06:41:38<stoopkid> in 0 == 0 we've got refl
02/12 06:41:45<stoopkid> in 0 == 1 we've got nothing
02/12 06:42:24<stoopkid> we can express the type, "_==_ {Nat} 0 1", but it has no proofs
02/12 06:43:01<stoopkid> we can try refl, but refl has type x == x, so it would have to unify 0 and 1, which fails
02/12 06:45:29<stoopkid> is this the "right" way to define equality? not necessarily, HoTT paints a way more compelling picture..
02/12 14:32:53*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/12 14:33:18*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/12 14:54:15<koo5[m]> I dont understand how the : A maps onto the constructor arguments
02/12 14:55:31<stoopkid> it's the 3rd argument
02/12 14:55:41<stoopkid> x == y
02/12 14:55:45<stoopkid> _==_ x y
02/12 14:55:48<stoopkid> _==_ {A} x y
02/12 14:55:56<stoopkid> it's the y
02/12 14:57:15<koo5[m]> data == {A : Set} (z : A) : A → Set where refl : x == x
02/12 14:57:24<koo5[m]> This would compile?
02/12 15:06:50<stoopkid> no
02/12 15:07:08<stoopkid> where's x coming from
02/12 15:07:20<stoopkid> also the 2nd argument has to be z
02/12 15:07:27<stoopkid> because you put (z : A) before the "_:_"
02/12 15:07:39<stoopkid> you could do:
02/12 15:08:04<stoopkid> data _==_ {A : Set} (z : A) : A -> Set where refl : (x : A) -> z == x
02/12 15:09:47<stoopkid> does that really describe equality? no, but it can compile to something at least
02/12 15:26:48<stoopkid> you could also do:
02/12 15:27:12<stoopkid> data _==_ {A : Set} : A -> A -> Set where refl : (x y : A) -> x == y
02/12 15:27:20<stoopkid> also doesn't describe equality
02/12 15:27:29<stoopkid> you could do:
02/12 15:27:58<stoopkid> data _==_ {A : Set} : A -> A -> Set where refl : (x : A) -> x == x
02/12 15:29:14<stoopkid> that does describe equality
02/12 15:30:15<stoopkid> this would be the same as :
02/12 15:30:34<stoopkid> data _==_ {A : Set} : A -> A -> Set where refl : (z : A) -> z == z
02/12 15:31:02<stoopkid> but this on the other hand wouldn't even compile:
02/12 15:31:15<stoopkid> data _==_ {A : Set} (x : A) : A -> Set where refl : (z : A) -> z == z
02/12 15:31:52<stoopkid> because putting the (x : A) before the "_:_" means you have to use x in that argument position
02/12 15:48:46-tomaw- [Global Notice] There'll be a brief NickServ and ChanServ downtime in around 20 minutes while we move them back to their native location.
02/12 15:59:41<koo5[m]> why's the : A there if the constructor only takes one argument?
02/12 16:00:04<stoopkid> the constructor takes 3 arguments
02/12 16:00:16<stoopkid> well, type-formation rule takes 3 arguments, i mean
02/12 16:01:04<stoopkid> let's say i have a function like add : Nat -> Nat -> Nat
02/12 16:01:35<stoopkid> i can "add 5 5" right?
02/12 16:02:34<stoopkid> (these are all reasonable questions btw so keep them coming if you're still confused on it)
02/12 16:04:13<stoopkid> so, _==_ is like a function A -> A -> Set
02/12 16:04:28<stoopkid> i can do "5 == 5", but i can also do "5 == 6"
02/12 16:05:16<stoopkid> the output of applying the _==_ to the args returns a proposition/type, that's (ostensibly) supposed to encode the notion of equality between the two args
02/12 16:06:30<stoopkid> the top line of a data directive, i.e. "data MyType ... : ... -> Set where" gives you a (possibly nullary) function like MyType : ...... -> Set
02/12 16:07:33<stoopkid> but unlike when you define such functions-that-return-types outside of a data directive, the data directive allows you to define what the proofs of each type are gonna be
02/12 16:07:55<stoopkid> so, let's do one restricted to Nat
02/12 16:08:13<stoopkid> data NatEq : Nat -> Nat -> Set where
02/12 16:08:16<stoopkid>  0-refl : 0 == 0
02/12 16:08:17<stoopkid>  1-refl : 1 == 1
02/12 16:08:21<stoopkid> 2-refl : 2 == 2
02/12 16:08:23<stoopkid>  ....
02/12 16:08:47<stoopkid> we could do something like:
02/12 16:09:03<stoopkid> data BadNatEq : Nat -> Nat -> Set where
02/12 16:09:04<stoopkid>  not-refl : 0 == 1
02/12 16:09:31<stoopkid> (woops everywhere i wrote x == y there replace with NatEq x y)
02/12 16:09:39<stoopkid> (or BadNatEq x y, respectively)
02/12 16:10:36<stoopkid> so if you ask me for an object in NatEq 0 0, i can give you 0-refl
02/12 16:10:38<stoopkid> if you ask me for an object in NatEq 1 1, i can give you 1-refl
02/12 16:10:50<stoopkid> if you ask me for an object in NatEq 0 1, i don't have any available
02/12 16:11:35<stoopkid> there's no constructor for NatEq that yields NatEq 0 1, they're all of the form NatEq x x, for some x
02/12 16:11:45<stoopkid> so we can finitize our NatEq, like...
02/12 16:12:02<stoopkid> data NatEq' : Nat -> Nat -> Set where
02/12 16:12:10<stoopkid>  refl : (x : Nat) -> NatEq' x x
02/12 16:14:42-tomaw- [Global Notice] All's back up and running now! Thanks for flying freenode :)
02/12 16:16:31<stoopkid> well, this doesn't really have anything to do with Nats, we're just saying we have proofs of NatEq x x, and no proofs of NatEq x y if x and y aren't literally the same object (i.e. syntactically-equivalent/beta-equivalent)
02/12 16:16:56<stoopkid> so we could abstract the Nat into an arbitrary type A:
02/12 16:17:26<stoopkid> data NatEq' : (A : Set) -> A -> A -> Set where
02/12 16:17:45<stoopkid> woops,
02/12 16:17:55<stoopkid> data Eq : (A : Set) -> A -> A -> Set where
02/12 16:18:12<stoopkid>  refl : (A : Set) -> (x : A) -> Eq x x
02/12 16:18:55<stoopkid> woops,
02/12 16:19:06<stoopkid>  refl : (A : Set) -> (x : A) -> Eq A x x
02/12 16:19:32<stoopkid> note that the A in the top line and the A in refl don't have anything to do with each other, this would be the same thing as:
02/12 16:19:42<stoopkid> data Eq : (A : Set) -> A -> A -> Set where
02/12 16:19:54<stoopkid>  refl : (B : Set) -> (x : B) -> Eq B x x
02/12 16:22:40<stoopkid> so...
02/12 16:22:49<stoopkid> data Vec (A : Set) : Nat -> Set where
02/12 16:22:53<stoopkid>  [] : Vec A 0
02/12 16:23:11<stoopkid>  _::_ : {n : Nat} -> A -> Vec A n -> Vec A (suc n)
02/12 16:23:32<stoopkid> at first glance you can read this like:
02/12 16:23:43<stoopkid> data Vec : (A : Set) -> Nat -> Set where
02/12 16:24:09<stoopkid>  [] : {A : Set} -> Vec A 0
02/12 16:24:34<stoopkid>  _::_ : {A : Set} -> {n : Nat} -> A -> Vec A n -> Vec A (suc n)
02/12 16:24:58<stoopkid> but, this is kinda.... "loose"
02/12 16:25:18<stoopkid> cause i could also make the following:
02/12 16:25:23<stoopkid> data Vec : (A : Set) -> Nat -> Set where
02/12 16:25:32<stoopkid>  []  : {A : Set} -> Vec A 0
02/12 16:25:55<stoopkid>  _::_ : {A B : Set} -> {n : Nat} -> A -> Vec A n -> Vec B (suc n)
02/12 16:26:55<stoopkid> there's nothing that says that the constructors have to be producing Vec A _
02/12 16:27:22<stoopkid> but that doesn't make sense right, these are supposed to be vectors *of* some type
02/12 16:28:15<stoopkid> how do we enforce that the constructors are always gonna be returning Vec A _, rather than possibly Vec B _  for some random B? we put the (A : Set) before the "_:_"
02/12 16:28:37<stoopkid> data Vec (A : Set) : Nat -> Set where
02/12 16:28:42<stoopkid>  [] : Vec A 0
02/12 16:29:00<stoopkid>  _::_ : {B : Set} -> {n : Nat} -> A -> Vec A n -> Vec B (suc n)
02/12 16:29:03<stoopkid> fails
02/12 16:29:44<stoopkid> because you have (A : Set)before the "_:_" but the _::_ constructor returns Vec B _ instead of Vec A _
02/12 16:31:39<stoopkid> more or less: you put args before the "_:_" whenever you wouldn't consider yourself to be able to start talking about what the objects in the type(s) are until you already know those two args
02/12 16:32:44<stoopkid> until you already know those args** (not sure why i said two, in this example there's only one XD)
02/12 16:33:12<stoopkid> (only one that gets put before the "_:_")
02/12 16:34:14<stoopkid> in HoTT equalities are interpreted as paths in some space
02/12 16:34:57<stoopkid> you can interpret "data Eq {A : Set} : A -> A -> Set where ..." as defining arbitrary paths where you're free to choose either end-point
02/12 16:35:22<stoopkid> and you can interpret "data Eq {A : Set} (x : A) : A -> Set where ..." as defining paths where one end-point, x, is fixed
02/12 16:46:33*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Quit: WeeChat 1.9.1
02/12 16:47:22<stoopkid> http://wiki.portal.chalmers.se/agda/pmwiki.php?n=ReferenceManual.Data
02/12 16:52:14<stoopkid> am i using (x : A) as a parameter (on the LHS of the "_:_") to _==_ because of some special interpretation of equality when you do this as opposed to using it as an index (on the RHS of the "_:_") to _==_? no
02/12 16:52:44<stoopkid> i'm using it because then in proofs i can just write refl instead of "refl x"
02/12 16:53:46<stoopkid> i mean, try to do some proofs
02/12 16:56:49<stoopkid> try to make some data-types that depend on other types or values, and see how things differ depending on whether you put these arguments in parameter position or in index position
02/12 16:57:32<stoopkid> take data _v_ (A B : Set) : Set where and try to recast it as data _v_ : Set -> Set -> Set where
02/12 16:58:51<stoopkid> try to make a data-type that models equality, try to do proofs with it
02/12 16:59:00<stoopkid> judge its merit
02/12 16:59:48<stoopkid> re-evaluate, mess around, 10 hours of me explaining is probably worth 1 hour of you actually running Agda
02/12 17:00:38<stoopkid> "data == {A : Set} (z : A) : A → Set where refl : x == x"
02/12 17:01:00<stoopkid> "This would compile?"
02/12 17:01:36<stoopkid> Agda can tell you that literally a bazillion times faster than i can, and with greater accuracy
02/12 17:17:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/13 00:58:07<stoopkid> koo5[m]: i'm gonna try to divide up tasks a bit to make this more efficient, it'll be easier for me to walk you through this part of the theory after you've had more experience with the regular stuff and after i've got this part better worked out, is that cool?
02/13 06:08:15*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/13 06:08:40*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/13 06:32:46<editable-koo>sorry, i didnt have a computer to try on yesterday
02/13 06:33:02<editable-koo>centos is working alright, so far...
02/13 06:51:46<editable-koo>yea whatever works for you, dont mean to bog you down
02/13 09:16:32<editable-koo>im gonna create a repo out of ~/notes, is thatt ok?
02/13 09:50:17<editable-koo>now, do you wanna have the repo on your github  account? im thinking that would be the best, since its all your work
02/13 09:50:50<editable-koo>not too keen on putting it into a separate organization, because these dont get much eyes until theyre bit enough, i think
02/13 09:51:28<editable-koo>id just prefer if you gave me the push rights on the repo so i can commit and push regularly for you
02/13 09:55:40<editable-koo>i wanna put "subst" and "daemoz" up there as well, after a little cleanup, so let me know if we make one big repo or what form do you prefer
02/13 11:18:20<editable-koo>also, i promised nilli id put up some more resources on the wiki, and http://autonomic.now.im/workspace/koo/what_we_got_so_far is one such thing
02/13 11:19:31<editable-koo>i understand you want to have the autonomic wiki work as a sort of polished PR thing, but i have this problem of where to put all the other stuff and how to keep them connected
02/13 12:12:45-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
              *** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/13 12:13:26<koom> "AlienCoin": Proof of work consists of processing SETI@Home blocks, and mining rewards are paid out to whoever finds an alien civilization.
02/13 14:15:06<daemoz> koom: hahahah
02/13 14:15:08<daemoz> amazing
02/13 14:30:14<stoopkid> koom: ah woops i figured since you were trying to follow along with the code that meant you were operational again; and nah not bogging me down, more like i'm bogging the project down by not making sure there's things that can be worked on in parallel while i'm sorting out the solution to the complexity stuff
02/13 14:32:28<stoopkid> yea we can put the notes on my github that's fine i thought i actually gave you the login details to it at one point XD i'll give you push rights in a sec
02/13 14:34:25<stoopkid> we can probably just do one big repo for now
02/13 14:37:44<stoopkid> not sure what to put on the wiki yet, i could talk about MLTT-TFPL, natural deduction and lambda-auth; and possibly about cubical tt and the notions of signature/context-restricted univalence that i'm trying to formalize now
02/13 14:38:49<stoopkid> and our agda work and such, though, currently i'm mostly messing with mortberg's cubical tt
02/13 14:40:28<stoopkid> agda has a --cubical mode though, but we'd need the beta version; at some point i'm gonna test that out
02/13 14:42:34<koom> cool
02/13 14:43:14<koom> well i feel i have more than enough things i can work on, even if its just studying
02/13 14:44:29<koom> take your time with the complexity stuff
02/13 14:46:42<koom> and im probably gonna continue taking things slowly
02/13 14:47:14<koom> technically im even still on dayjob vacation until the end of month
02/13 14:47:22<koom> and i like the change of pace
02/13 14:47:50<stoopkid> hehe
02/13 14:49:24<stoopkid> so what are you studying currently?
02/13 14:56:26<stoopkid> btw howdy daemoz 
02/13 14:57:12<daemoz> howdy, how goes everything? Sorry I've been not very involved lately, adulting has been taking all my time.
02/13 14:58:28<stoopkid> hey np :) going alright, in certain ways we're actually rather ahead of schedule, how's everything with you
02/13 15:00:28<daemoz> That's really rad to hear. Things are good, just got chaotic for a bit there. Getting to some fun parts of an application I'm writing for fun/profit.
02/13 15:01:07<koom> not studying anything atm:)
02/13 15:01:13<koom> whats the app daemoz?
02/13 15:01:29<koom> stoopkid, you mean give me push rights to what, your whole account?
02/13 15:02:21<daemoz> a "virtual programmable midi controller". It's an interface that sits on top of a midi controller and using a scripting language (writing parsers is hell) you can encode the desired functionality.
02/13 15:02:22<stoopkid> well, i meant to the (or another) autonomic repo, not that i would have a problem with you having push rights to the whole thing :P
02/13 15:02:27<koom> so, should i just move the three dirs there into "notes"? 
02/13 15:02:52<koom> nice
02/13 15:03:25<koom> autonomic repo == univar, no?
02/13 15:03:58<stoopkid> daemoz: very cool :)
02/13 15:04:17<stoopkid> koom: yea
02/13 15:05:21<daemoz> You guys still working off that server? The lag still bad? I got all the stuff to run the cat6 line so I should have a machine you guys can work off of soon if you'd still like that.
02/13 15:06:36<stoopkid> oh nice, yea if anything the lag's just been getting worse, for me anyway, so i'm increasingly just working locally and scp'ing over to it heh
02/13 15:07:05<daemoz> Word, okay I'll get a host set up as soon as I get the line ran.
02/13 15:07:22<daemoz> ~thisweek-ish~
02/13 15:07:50<koom> alright!
02/13 15:07:56<daemoz> While I'm learning to manage my time better feel free to shoot me notes for the wiki and I can organize/proofread/add illustrations.
02/13 15:08:45<koom> the thing is we dont even have much content there yet
02/13 15:09:23<stoopkid> cool :) much appreciated
02/13 15:09:36<daemoz> For sure
02/13 15:09:54<stoopkid> yea... the content kills me lol
02/13 15:10:02<koom> i feel it doesnt really make sense to write about what we got so far, instead of just focus on figuring out what we're gonna build
02/13 15:10:11<daemoz> xD Is it boring to write or something?
02/13 15:10:34<daemoz> That makes the most sense to me.
02/13 15:10:45<daemoz> "sketch" out all the pieces of AN and provide extra pages for explanation as time permits.
02/13 15:11:02<daemoz> but it should be a living tool for outlining and keeping the work organized.
02/13 15:11:08<stoopkid> nah writing's cool i just kinda suck at it & tend to overanalyze :)
02/13 15:14:02<stoopkid> koom: idk, i'm always on the fence about that
02/13 15:15:25<stoopkid> if we write about what we've got so far then others can potentially help us build on it further, but then writing about it takes time away from us building it further right away
02/13 15:16:06<daemoz> I feel it's almost always better to do foundational work first, that's just me.
02/13 15:24:23* koom doesnt know anything
02/13 15:25:40<stoopkid> daemoz well, i'd tend to agree with that. i guess i can say for sure that either writing up what we've got now or building what we've got now is a bigger priority than addressing the complexity issue, i guess i just got excited since that's pretty much the one major theoretical detail left to address :)
02/13 15:26:38<editable-koo>just go for it
02/13 15:27:25<editable-koo>ah that reminds me, you mentioned "just building" something, if you wanna go for that im ready to assist if i can ofc
02/13 15:27:42<editable-koo>but id say just work out the comlexity stuff
02/13 15:29:17* editable-koo should do something about those -tail files
02/13 15:31:40<stoopkid> the complexity stuff is a can of worms, i've at least got both the HoTT theorists and the intensional type theorists agreeing there's probably some merit to my notions, which for a while i was starting to doubt was even possible, but this is like trying to take an unfinished thing the HoTT theorists are working on, and an unfinished thing the intensional type theorists are working on, and presuming that i'm
              <stoopkid> somehow gonna fix all their problems :)
02/13 15:33:09<stoopkid> i'm 80% sure it's the right direction, but, even the type theorists are basically like "dude you're on your own now", but then none of my other potential solutions really seem all that viable, and if they could even be made to work they would be extremely hackish
02/13 15:37:48<stoopkid> and the viability of any of my other solutions couldn't be tested without building them! :D
02/13 15:42:22<daemoz> https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el I use this locally, had no problems so far and takes a lot of the weird quirks out of emacs behavior.
02/13 15:44:27<stoopkid> http://167.88.171.233/workspace/notes/complexity/complexity2
02/13 15:44:51<stoopkid> the various possibilities i've been looking at
02/13 15:45:33<daemoz> Describe what you're trying to do? Find a way to measure complexity?
02/13 15:48:12<stoopkid> pretty much; trying to find an appropriate way to allow the users of the network to bound the complexity of the code they are directed to execute by the chain, ideally in a flexible way under consensus by the network participants, in a way that doesn't break the good features of the logic
02/13 15:50:43*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/13 15:51:09*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/13 16:55:11<koom> stoopkid, so what about the repo?
02/13 16:55:56<koom> daemoz, the problem is ~/.emacs, my editable-log code
02/13 16:56:23<koom> im not sure if i broke it somehow or it broke itself or its always been this way
02/13 16:57:00<stoopkid> woops got sidetracked
02/13 16:58:36<stoopkid> ok i sent an invite
02/13 16:58:52<editable-koo>          (let ((fn
              <editable-koo>                (if (string= circe-chat-target "#tukutuku") "~/logs/tukutuku.log"
              <editable-koo>                (if (string= circe-chat-target "#atlas-project") "~/logs/atlas-project.log"
              <editable-koo>                (if (string= circe-chat-target "#swig") "~/logs/swig.log"
              <editable-koo>                (if (string= circe-chat-target "#tau") "~/logs/tau.log"
              <editable-koo>                (if (string= circe-chat-target "#zennet") "~/secret/zennet.log"
              <editable-koo>                (if (string= circe-chat-target "#netention") "~/logs/netention.log"
              <editable-koo>                (if (string= circe-chat-target "#lemonparty") "~/logs/lemonparty.log"
              <editable-koo>                (if (string= circe-chat-target "#eulergui") "~/logs/eulergui.log"
              <editable-koo>                (if (string= circe-chat-target "#proglangdesign") "~/logs/proglangdesign.log"
              <editable-koo>                (if (string= circe-chat-target "#autonomic") "~/logs/AutoNomic.log"
              <editable-koo>                (if (string= circe-chat-target "#autonomic-dev") "~/logs/AutoNomic-dev.log"
              <editable-koo>                (if (string= circe-chat-target "##collaborate") "~/logs/collaborate.log"
              <editable-koo>                'f))))))))))))))
              <editable-koo>;;            (prin1 circe-chat-target)
              <editable-koo>            (if (not (eq fn 'f)) (progn
              <editable-koo>;;             (prin1 "yay")
              <editable-koo>             (let ((fn (expand-file-name fn)))
              <editable-koo>              (goto-char (point-min))
              <editable-koo>              (insert-file-contents fn)
              <editable-koo>              (set-visited-file-name fn)
              <editable-koo>              (auto-save-buffers-enhanced-saver-buffer)
02/13 17:03:08<editable-koo>ah its not broken here
02/13 17:09:27<editable-koo>shrug
02/13 17:10:48<koom> it would be best if we only used this config file for editable-log, somehow
02/13 17:16:05<koom> well using the AutoNomic repo makes sense, but shouldnt we move all the old code into some dir?
02/13 17:16:24<stoopkid> sure
02/13 17:21:58<editable-koo>screw it, lol
02/13 17:22:43<editable-koo>ok, can you close all open files in notes?
02/13 17:24:08<stoopkid> well, we don't have to `git add` any of those tail-log files, so, they don't need to show up to the public looking from github
02/13 17:26:53<koom> yea i wont
02/13 17:28:01<stoopkid> ok everything should be closed
02/13 17:30:11<koom> ok
02/13 17:39:03<koom> so the new path is /var/www/html/workspace/AutoNomic/notes
02/13 17:54:09<koom> ok pushed to github
02/13 18:28:00<stoopkid> for a first prototype i'm thinking about maybe just modifying the cubicaltt implementation
02/13 18:28:38<stoopkid> since i still need to figure out how to do a generic natural deduction engine
02/13 18:41:36*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
02/13 18:44:19-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/13 18:44:26*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/13 18:57:58*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 265 seconds
02/13 19:21:56<stoopkid> koo5[m]: i'm thinking your studying might go better if we just examine the code for implementations directly and then you can ask why it's doing what it's doing, rather than trying to figure out what it's even doing in the first place based on my attempts at explanation of the intended semantics
02/13 20:16:17* stoopkid thinking about the trustless omni<->btc exchange mechanism
02/13 20:17:30<stoopkid> it seems that regardless of the actual security of the multisignature mechanism, it should be trustable with relatively risk if you can assume anonymity
02/13 20:18:41<stoopkid> assume only one person knows that it's insecure, and knows that they are only person who knows that it's insecure
02/13 20:20:16<stoopkid> this person could attack anybody who used the algorithm, sure, but, such an attacker could hypothetically exist for any algorithm not known to be secure, therefore, since under assumption nobody but this hypothetical attacker knows about the insecurity, the algorithm is not really known to be insecure in the sense that it would stop anybody from using it (apparently!)
02/13 20:21:16<stoopkid> if one person knows its insecure, and knows that somebody else knows its insecure, then, they don't know how many people know its insecure
02/13 20:35:05<stoopkid> if trading with a known counterparty, they might be able to determine that this counterparty does not have the capability to exploit the vulnerability, and therefore they might not feel much of a risk putting their funds into the multisig address into order to attempt to exploit the vulnerability themselves
02/13 20:37:24<stoopkid> but then again, i guess they can play the numbers game like a casino and bet on the idea that if trading randomly they'll be able to win more often than lose since relatively few will know how to exploit the vulnerability
02/14 00:40:51* stoopkid is dissecting the tx that nilli sent me the funds on in order to figure out how both btc & omni transactions are structured
02/14 03:39:02<stoopkid> well besides for cryptographic algorithm details (sha256, sha256d, ripemd-160, secp256k1 ECDSA) and checking out the full-client implementations to see what they actually do to verify, i pretty much know the structure of a standard bitcoin tx by heart now lol 
02/14 03:40:01<stoopkid> apparently just 20 bytes of data in the tx turns it into an omni tx
02/14 03:40:21<stoopkid> i got concerned for a second that omni details would screw up my trustless exchange approach, but i got lucky
02/14 03:40:53<stoopkid> apparently you can't make tx's with multiple omni outputs, so i was worried that this would screw that up
02/14 03:41:27<stoopkid> but for an exchange between omni & btc, you only need one output to be an omni output
02/14 03:42:49<stoopkid> so, so far so good, now i just gotta dissect what this 20 bytes actually does
02/14 03:55:43<koo5[m]> Yea yesterday i was just thinking reading agda source seems to be the only hope to understand, but im not kidding myself i could read it
02/14 03:55:58<koo5[m]> I got some pdf i wanna try to read first
02/14 03:59:00<stoopkid> haskell's easier than agda at least, plus cubicaltt source is probably way easier than agda's
02/14 03:59:14<stoopkid> plus we can pair-program it
02/14 03:59:53<stoopkid> but, i'm now wondering if i actually maybe want to build an omni/btc wallet prior to doing that
02/14 04:00:17<koo5[m]> Which one will explain the : A though?
02/14 04:01:15<koo5[m]> Cubicaltt is a whole interpreter?
02/14 04:01:29<stoopkid> yea
02/14 04:03:04<stoopkid> hrm, still unsure what you're missing about the ": A" thing, did you read the Agda wiki page on parameters vs. indices?
02/14 04:03:36<stoopkid> or try any examples in Agda?
              <stoopkid> cubicaltt has a different syntax anyway
02/14 04:03:39<stoopkid> slightly
02/14 04:03:55<koo5[m]> Probably not
02/14 04:04:16<stoopkid> http://wiki.portal.chalmers.se/agda/pmwiki.php?n=ReferenceManual.Data
02/14 04:06:09<koo5[m]> Not yet
02/14 04:07:09<stoopkid> agoras asset ID is 58, which is 0x3a, which appears within these 20 bytes, prefixed by a bunch of 0's which from when i was looking at an example class B tx look like they're probably part of the asset ID (seems excessive)
02/14 04:07:23<stoopkid> i'm having trouble finding concrete info on what these class C tx's consist of
02/14 04:07:36<stoopkid> not yet @ what
02/14 04:12:56<stoopkid> looks like these omni tx's possibly share a common prefix of:
02/14 04:13:44<stoopkid> 6f6d6e69000000000000003a
02/14 04:13:50<stoopkid> well, agoras tx's anyway
02/14 04:30:40<stoopkid> https://en.wikipedia.org/wiki/ASCII#Printable_characters
02/14 04:30:43<stoopkid> 6f6d6e69 = omni
02/14 04:31:04<stoopkid> why am i not in a hex editor lol
02/14 05:13:25<stoopkid> koo5[m]: so have you tried dissecting btc & omni tx's yet?
02/14 05:54:46<stoopkid> hrm, i wonder if there's also a way to use btc op_codes to ensure that you can't accidentally spend an omni asset without  having the necessary omni metadata attached
02/14 05:57:19<stoopkid> or... hrm... how does that even work lol
02/14 05:57:54<stoopkid> bitcoin data structures are all laid out nice & neat, omni's like a black-box
02/14 06:07:57<stoopkid> https://github.com/OmniLayer/omnicore/blob/master/src/omnicore/tx.h
02/14 06:08:16<stoopkid> https://github.com/OmniLayer/omnicore/blob/master/src/omnicore/tx.cpp
02/14 06:12:57<stoopkid> apparently they pay for bounties and this is the asset we're getting paid in so might as well check over the code i guess
02/14 08:09:27<koo5[m]> koo5[m]: so have you tried dissecting btc & omni tx's yet?
02/14 08:09:31<koo5[m]> Absolutely not
02/14 09:27:45<stoopkid> alright i've got the omni tx structure decoded but i'm not sure if i'm just seeing an instance of a variable-length encoding 
02/14 10:11:12<stoopkid> koo5[m]: have you reviewed the trustless exchange mechanism? i wanna test it out soon
02/14 10:45:13* stoopkid setting up an omnicore client
02/14 10:49:05<koo5[m]> Not sure, but i dont wanna focus on a new unrelated topic now
02/14 10:49:37<stoopkid> i can hardly call it "unrelated" :)
02/14 10:51:06<stoopkid> also there's not a whole lot to focus on there, it's extremely simple and i've already got it almost all the way worked out
02/14 10:51:08<koo5[m]> Sure
02/14 10:52:04<koo5[m]> Ok, well, how can i help?
02/14 10:54:23<stoopkid> well, once i get these last couple pieces in place i want to actually test an exchange to demonstrate that it works, and it would help if you could review the mechanism for potential flaws
02/14 10:56:32<koo5[m]> Ok
02/14 10:57:06<koo5[m]> Whats the link again?
02/14 10:59:29<stoopkid> http://167.88.171.233/workspace/AutoNomic/notes/crypto/trustless_exchange/mfa3_notes
02/14 11:01:57<stoopkid> woops i left out a critical detail there, refresh it :)
02/14 12:21:42<stoopkid> alright got partial tx's being generated from omnicore-cli now
02/14 13:23:32<koo5[m]> Alright seems intriguing
02/14 13:25:16<stoopkid> does the mechanism make sense to you?
02/14 13:50:08<koo5[m]> Yea
02/14 14:02:18<stoopkid> alright wanna make some transactions to test it out?
02/14 14:36:48-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/14 14:36:54*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/14 14:43:50<stoopkid> alright looks like i've just about got full tx's being generated from omnicore-cli
02/14 14:47:47<stoopkid> you installing omnicore?
02/14 14:51:07<stoopkid> lemme know when you've got omnicore installed and i'll run you through how to generate tx's & how they're structured and what we have to do in particular to make the exchange work
02/14 14:52:27<koom> do i have to sync the blockchain?
02/14 14:54:42<stoopkid> idk, i couldn't figure out how to make it work without syncing and then before i found an answer i decided i actually wanted to sync the blockchain anyway just out of interest
02/14 14:54:44<stoopkid> but
02/14 14:55:16<stoopkid> you actually don't need omnicore you can put the tx's together manually
02/14 14:56:36<koo5[m]> i already have synced (at least partially) omnicore in a vm, if it makes things easier
02/14 14:59:08<stoopkid> yea that's fine, i'm mostly only even messing around with actually running omnicore to make sure i know exactly what it does, other than providing a reference as to what the network will accept omnicore itself isnt' needed at all
02/14 15:02:40<stoopkid> after i make sure we're on exactly the same page with omnicore i wanna switch to doing it manually anyway, cause for example i wanna compare the implementations of the different hashing algorithms & such in omnicore to other implementations (like basic command line tools like sha256sum) to make sure they match up at least on unit tests (not that i would expect they wouldn't, since people are able to use omni,
              <stoopkid> but, due diligence i guess)
02/14 15:06:21<stoopkid> as we're going along we'll basically have all the innards laid out in front of us, i figure we should build a wallet
02/14 15:08:24<stoopkid> at first i was thinking this was just getting sidetracked but, this is how we're getting paid, and then also we should know how to do this stuff and what's already standard practice for when we go to do the same thing f or autonomic
02/14 15:10:52<koom> alright so whats the plan?
02/14 15:11:58<stoopkid> well, i guess first you need a crash course in btc/omni tx structures, one sec
02/14 15:13:19<stoopkid> http://167.88.171.233/workspace/AutoNomic/notes/crypto/tx_hex_breakdown
02/14 15:13:35<stoopkid> sorry, still kinda messy i'm still putting it together
02/14 15:16:15<stoopkid> so, the overall plan is mfa3_notes
02/14 15:17:43<stoopkid> we just perform one of those exchanges, i guess you've got some btc, i've got some agrs, so we can exchange a few tokens worth, make sure it didn't feel insecure, and then we can say hey it works and figure out where to go from there
02/14 15:19:13<stoopkid> (a few tokens of agrs** worth XD)
02/14 15:23:17*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
02/14 15:23:39<stoopkid> so there's 5 tx's involved in the exchange, with at most 4 ever actually going through, and only 3 going through if the exchange goes through
02/14 15:24:35<stoopkid> each party to the exchange only cares about 3 tx's really, the tx that sends their assets to the multisig exchange address, the tx that would refund these assets back to them if they want, and the actual exchange tx
02/14 15:27:17<stoopkid> and until both parties have their assets in the exchange address, you only care about your tx that sends your asset there and your refund tx, so, you don't have to care much whether the other party is doing these things, could only affect them, not you
02/14 15:28:52<stoopkid> so, you're gonna be sending some asset to this 2-of-2 acct that i'm a factor on, and you don't want your funds to get stuck there, so you want to have a refund tx already signed by me before you send your assets there
02/14 15:29:42<stoopkid> if you look at the break-down of the tx data structure, tx's spend the outputs of previous tx's
02/14 15:30:18<stoopkid> they reference the previous tx output based on the hash of the tx combined with the output # in that tx
02/14 15:30:32<stoopkid> s/output #/output_index/
02/14 15:32:18<stoopkid> so all you need in order to make a tx is another tx data-structure to use as input, and that input tx doesn't have to be on the chain yet, the tx's don't reference blocks at all just other transactions & output_id's
02/14 15:33:16<stoopkid> so we would start by setting up the 2FA address
02/14 15:34:24<stoopkid> you would craft your tx data structure that's gonna send your funds there, don't broadcast it
02/14 15:35:26<stoopkid> just take it's hash, which is it's ID, then you can use that to make your refund tx data structure
02/14 15:37:03<stoopkid> you can broadcast that, toss it, send it to me to sign it, do w/e you like with it, it's there for your security and can't hurt you if anybody gets a hold of it, anybody who got ahold of it wouldn't be able to spend it because it's taking inputs that aren't actually on the chain yet, and even if they got ahold of it, it would just be sending the assets back to you
02/14 15:38:17<stoopkid> what you'll wanna do with it though is just hold onto it and send it to me to sign it, and wait for me to send you back a signed refund tx so that you can be assured you'll always be able to withdraw your assets exactly up until we actually make the exchange
02/14 15:41:10<stoopkid> some relevant omnicore commands:
02/14 15:41:32<stoopkid>  > ./omnicore-cli createrawtransaction
02/14 15:42:23<stoopkid>  > ./omnicore-cli omni_createrawtx_opreturn
02/14 15:48:38<stoopkid> we can actually make pretty much the whole thing with just > ./omnicore-cli createrawtransaction
02/14 15:49:45<stoopkid> the omni metadata is just like 20 bytes of data contained in a special tx output, the rest of the tx structure is just standard btc stuff that's well-documented
02/14 15:58:36<stoopkid> there's also > ./omnicore-cli signrawtransaction but i'm only just getting to that now
02/14 16:01:04<stoopkid> probably wanna test out the digital signature stuff separately from omnicore
02/14 16:04:32<koo5[m]> Sorry our internets got broken somehow
02/14 16:11:32<stoopkid> np
02/14 16:32:36<koo5[m]> Youre gonna have some more time.to work it out
02/14 16:41:55<stoopkid> https://bitcointalk.to/index.php?topic=2500531.0
02/14 16:42:31<stoopkid> https://pastebin.com/wVFfgjxM
02/14 16:51:47<stoopkid> appears to be correct
02/14 16:54:49<stoopkid> so, that's kinda why i decided to go ahead and sync with the chain, i figured it would be good to compare to many other omni tx's just for good measure
02/14 23:55:56<koo5[m]> can we use the testnet first?
02/15 07:02:12<stoopkid> sure
02/15 07:05:25<stoopkid> although doing it on the main net shouldn't really be a risk either
02/15 07:07:18<stoopkid> if you transfer like 5 tokens to another address and then you're experimenting with that address instead of your main one then at worst you're out 5 tokens
02/15 07:14:33<stoopkid> i didn't even know til just the other day that there was even a testnet available to use heh, so, i am curious to check that out just for the sake of knowing what all's going on in the omni space
02/15 07:29:22* stoopkid is apparently not awake yet
02/15 07:30:19<stoopkid> i'm sitting here getting frustrated because following the hashing algorithms from btc keeps leading me to different values than what's in these tx's i'm looking at
02/15 07:30:57<stoopkid> then i realize i'm hashing ascii not hex XD
02/15 07:32:26<stoopkid> all of a sudden it starts working, go figure
02/15 07:36:56<stoopkid> one of the reasons i'm interested in syncing with the main net: i was getting concerned that i don't necessarily know what the actual consensus of the btc miners and omni clients is regarding what they accept/reject, and i was thinking the best fix to this would be to actually participate in that accept/reject process
02/15 07:40:18<stoopkid> alright, only piece of a bitcoin tx left for me to understand is the actual signing
02/15 07:46:14<stoopkid> alright, wallet time
02/15 07:47:40<stoopkid> so, what i wanna figure out now is, what's the "minimal" way to have a bitcoin/omni "wallet"
02/15 07:50:25<stoopkid> it's just keeping track of some private keys and keeping them private
02/15 07:54:44<stoopkid> as long as i have the private keys, i can manually construct transactions to spend from the public keys, and i can manually verify a transaction sent to me to make sure there's no funny business
02/15 08:17:24<stoopkid> this is a good use-case for type-systems, especially as smart-contracts get more advanced
02/15 08:17:52<stoopkid> you don't want to accept a tx that doesn't satisfy your constraints, and you don't want to accidentally release a tx that doesn't satisfy your constraints
02/15 08:20:36<stoopkid> you want to put up a wall between you and action. if you need to take square-shaped actions, you put square-shaped holes in the wall, then squares can get through but circles and triangles can't
02/15 08:26:31<stoopkid> this is probably the right interpretation for type-systems, as walls between parts of your computer (possibly abstract/virtual parts), as opposed to the sorta "how do we make every program well-typed" kind of interpretation
02/15 08:27:06<stoopkid> or, how do we cram everything on the machine "into" the same type-system
02/15 08:31:16<stoopkid> when we actually use a typed programming language, that's not really how we use it though, especially because the notion starts to break down when you take it to its extremes, and people don't seem to have the answers yet about how to resolve the problems that come up at those extremes
02/15 08:31:52<stoopkid> you start with the notion that you've got some machine
02/15 08:32:26<stoopkid> and the notion that everything on that machine fits into the same sound & consistent formal description framework
02/15 08:32:54<stoopkid> then you take the notion that this sound & consistent formal description framework is itself one of the things on the machine
02/15 08:33:03<stoopkid> now you've got problems
02/15 08:35:58<stoopkid> unless you bring along with this an explanation of what kinds of tradeoffs you're making due to tarski's undefinability theorem, something will surely be unaccounted for, and, if you have to make these tradeoffs in the first place, it seems there is always something necessarily unaccounted for by your logic, at least when you try to make it examine itself
02/15 09:03:16<stoopkid> anyway, what we do instead is, on one side of the type-system, while we're writing the program, we're free to do whatever we want, make use of the computational resources available in that part of the machine however we want; on the other side of the type-system, we're again free to run the programs that made it through however we want
02/15 09:08:44<stoopkid> so, in figuring out how this will actually fit into something that looks like an application rather than just a description of a mathematical framework or weird "global FPGA", we can start with the notion that we've just got a user on a machine, interacting with that machine & the network more or less however they want
02/15 09:13:27<stoopkid> from the design perspective of what an individual client is doing, our application can basically be seen as a collection of partially modifiable walls
02/15 09:15:58<stoopkid> RPC comes in, it hits a wall that checks whether it's even worthy of consideration
02/15 09:16:46<stoopkid> hits another wall that checks whether it satisfies your own personal constraints
02/15 09:19:12<stoopkid> hits another wall that checks whether it satisfies the constraints of the contexts you're trying to participate in
02/15 09:49:13-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/15 09:49:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/15 11:27:18<stoopkid> koo5[m]: did you take a look at those tx structures?
02/15 11:29:02<stoopkid> some references:
02/15 11:29:04<stoopkid> https://www.siliconian.com/blog/16-bitcoin-blockchain/22-deconstructing-bitcoin-transactions
02/15 11:29:36<stoopkid> https://bitcointalk.to/index.php?topic=2500531.msg25746327#msg25746327
02/15 11:30:11<stoopkid> https://bitcoin.org/en/developer-reference#opcodes
02/15 11:33:10<stoopkid> https://en.bitcoin.it/wiki/Protocol_documentation#tx
02/15 11:33:24<stoopkid> those + my notes
02/15 11:44:40*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
02/15 11:44:52-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/15 11:45:05*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/15 11:52:05*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
02/15 13:26:05* stoopkid trying to learn how elliptic curve signatures work
02/15 16:32:16<stoopkid> well, definitely make sure the random seeds in your elliptic curve signatures are actually random :D
02/15 22:55:42<stoopkid> hrm, there might be a problem with the omni part of it
02/15 22:58:25<stoopkid> the way multisig addresses work, and the way omni tx's work, i'm not sure it constrains the other party not to be able to spend the omni from the multisig addr
02/15 22:59:51<stoopkid> ah nvm it should because signatures are per tx not per tx output
02/15 23:00:08<stoopkid> phew, ok still in business heh
02/15 23:33:01<stoopkid> http://www.soroushjp.com/2014/12/20/bitcoin-multisig-the-hard-way-understanding-raw-multisignature-bitcoin-transactions/
02/15 23:43:20<stoopkid> ok hrm, this still seems to pose a slight problem
02/15 23:44:21<stoopkid> or does it; hrm.. kinda depends on how omni works
02/15 23:50:03<stoopkid> we'll have to look through omnicore code some more and test; anyway, i think i'm pretty much there, i've gone through all of how secp256k1 and multisigs work, so, that covers the whole thing, in theory
02/15 23:53:20<stoopkid> kinda wanna check out sha256 and ripemd160 and make sure we can do everything algorithmically though, not sure yet since it's hard to estimate how long that will take and it's not a high priority
02/15 23:59:00<stoopkid> well, i guess we gotta write a crypto lib for autonomic at some point anyway, and we'd wanna include these in the omni wallet, so, might as well, but i can save that for when we get down into the details of writing the wallet
02/16 00:00:38<stoopkid> the question of whether there's a problem basically comes down to the following:
02/16 00:02:05<stoopkid> if you can only spend omni in a tx by using a tx input that sent omni, then there's no problem
02/16 00:04:47<stoopkid> ah nvm, there are no problems because with a P2SH you can't possibly make a regular btc tx without both signatures, so if no regular btc tx, no omni tx
02/16 00:04:49<stoopkid> so, we're good
02/16 00:05:48<stoopkid> so, at this point, it's all figured out really
02/16 00:06:27<stoopkid> we still have to test but i'm pretty confident at this point that it would be cryptographically impossible for the tests to fail
02/16 00:07:07<stoopkid> theoretically, we don't need to be messing around with the bits & bytes and low-level protocols anymore
02/16 00:10:11<stoopkid> i.e., assuming, for example, a wallet like armory can handle both omni & P2SH multisig, then you should be able to just use that
02/16 00:10:31<stoopkid> purely normally
02/16 00:15:07<stoopkid> that's why i'm not just messing around on omnidex yet, this has the merit of using only completely standard features of btc along with only the completely standard features of omni, no scripting really, no fancy features, probably don't even need to manually craft transactions can probably use available omni-capable wallet tools
02/16 00:16:49<stoopkid> might be more palatable to some bitcoiners as well as some of the more conservative omni-ers, i'm personally certainly in this crowd, this was already enough for me to sift through and omnidex is just tossing even more complexity onto that and i've got my own complex apps to be worrying about
02/16 01:16:39*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/16 01:17:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/16 04:16:40<koo5[m]> http://167.88.171.233/AutoNomic/Blog
02/16 04:17:30<koo5[m]> we could write it in third person and you may wanna add stuff
02/16 04:17:40<koo5[m]> what do you think?
02/16 04:18:29<stoopkid> "But now he is taking a break from it and is trying to distract me from my studies as well" nice phrasing XD
02/16 04:18:39<stoopkid> sure, 3rd person probably makes sense if we're both writing it
02/16 05:13:25<koo5[m]> do you remember what was the p2p filesharing program that rszeno pointed us to for books, amulle?
02/16 05:13:58<stoopkid> i do not, but if you find it point me to it
02/16 05:14:01<koo5[m]> amule i guess
02/16 07:34:22<stoopkid> still not sure what to write on the blog; i'll be building the system pretty soon and will have more to write about but not sure if i should write up about the random cubical/omni/btc/signature-algorithm/number-theory/basic-programming stuff i'm working on at the present moment
02/16 07:59:02<koo5[m]> i think you should, and anything from the beginning of time you think is interesting
02/16 15:51:42-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/16 15:51:48*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/16 15:52:15<koom> amule
02/16 16:00:28* stoopkid just got a whole new perspective on 1/0 = infinity
02/16 16:01:12<stoopkid> the naive algorithm for division doesn't really terminate if you don't reject a denominator of 0 :)
02/16 16:05:21<stoopkid> got a neat little algorithm for it now though, approximately log_2(x) + log_2(x-y) (of just shifts and additions), where x is the bigger number and y is the smaller number
02/16 16:06:41<stoopkid> or, actually, where x is the numerator and y is the denominator (though in this case since it doesn't deal with rationals or negatives it amounts to the same, the case where numerator is smaller than denominator is trivial and gets returned immediately)
02/16 16:13:02*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
02/16 16:15:07-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/16 16:15:17*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/16 16:49:40*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 276 seconds
02/16 17:19:21-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/16 17:19:27*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/16 22:54:19<stoopkid> https://github.com/sto0pkid/EuclideanAlgorithm
02/16 22:56:00<stoopkid> nothing too special but im hoping that in just a day or two ill have a working secp256k1 implementation
02/17 00:17:32<stoopkid> modular inverse via extended euclidean algorithm is screwing with me. I see how to compute it on a human level but only by taking the formulas given at each step of the euclidean algorithm and rearranging them to solve for the inverse, but im confused on how that corresponds to the simple mod inverse algorithm
02/17 00:17:43<stoopkid> but then again i should probably sleep or something
02/17 01:55:04*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
02/17 02:00:14<koo5[m]> Gonna be busy this weekend, first aid training
02/17 02:23:58*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tjwuwcnjjnutrfey) left #autonomic-dev: Quit: Connection closed for inactivity
02/17 10:12:35*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/17 10:13:03*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/17 11:22:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dvbjamgcimlgxfry, stoopkid: stoopkid)
02/17 15:00:58-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/17 15:01:04*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/17 15:06:54<stoopkid> damn you c++ numeric types
02/17 15:09:50<stoopkid> i should probably scrap what i've got so far and write a sane numerics lib based on bit/byte manipulations and then use that
02/17 16:25:44<stoopkid> https://steemit.com/bittrex/@leprechaun/bittrex-is-it-time-for-a-class-action-suit
02/17 16:26:58<stoopkid> https://bravenewcoin.com/news/bitfinex-hacked-users-urged-to-change-deposit-addresses/
02/17 22:46:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dvbjamgcimlgxfry) left #autonomic-dev: Quit: Connection closed for inactivity
02/18 01:57:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ubgzvnyiibcxolur, stoopkid: stoopkid)
02/18 02:24:25*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
02/18 11:11:31<stoopkid> ok well a bignum lib doesn't look like it would really be such a hassle, at least relative to what i'm already doing in this elliptic curves code
02/18 11:11:42<stoopkid> i have to figure out how to do c++ memory management properly though
02/18 12:11:51<stoopkid> so i need to... avoid recursion so as to avoid stack overflow issues (possibly eventually avoid the default stack entirely because it doesn't have arch-independent specification), keep track of memory allocation, and avoid arch-specific data primitives (like, nearly all of them apparently)
02/18 12:12:19<stoopkid> well, maybe
02/18 12:13:24<stoopkid> that's if i'm planning to write one C++ program that can already work entirely arch-independently with common existing compilers
02/18 12:15:08<stoopkid> another possibility is to embrace arch-dependence at the C++ and simply compile down to it from an arch-independent lang, but then, that kinda defeats the point of using C++ as the high-level lang for interfacing with the machine
02/18 12:15:49<stoopkid> s/at the C++/in C++/at the C++ level*/
02/18 12:19:49<stoopkid> well, there's actually lots of possibilities for how to achieve the kind of arch-independent functionality we'd be looking for, which is probably what's slowing me down on that: option anxiety, heh
02/18 12:25:29<stoopkid> well, there's two main types of ways to attempt to be arch-independent i figure: 1) try to make a single program that is arch-independent by virtue of compilers, interpreters or virtual machines taking care of all the arch-dependent details; 2) design an abstract machine and leave it up to implementers to implement that machine however they want (whether as an arch-independent program in the sense of (1) or
              <stoopkid> just as an arch-dependent program that just happens to be an instance of the abstract machine simulated on that particular arch)
02/18 12:26:38<stoopkid> either approach is reasonable in theory, both approaches are kind of problematic in practice, especially for our kind of work
02/18 12:31:50<stoopkid> in taking the first approach we have to embrace all the technical difficulty involved with actually making it happen. in taking the second approach, we run the risk of a mismatch between theory & reality, in two ways: 1) is the theory itself even sensible & correct, 2) do the implementations of it actually match the intended semantics
02/18 12:35:34<stoopkid> i guess arch-independent program is the right approach as opposed to arch-independent spec
02/18 12:37:24<stoopkid> that way the theory is bound to reality in a concrete & non-trivial way, leaves less room for assumptions, is directly testable, is directly shareable, and actually moves us definitively closer to the goal
02/18 12:39:53<stoopkid> ultimately even if we had the arch-independent abstract specification laid out, we'd then immediately move to wanting to have an actual generic implementation of it, and dealing with the concrete issues in making it generic across common existing hardware might force us to change aspects of the abstract specification, thereby negating its original value of having a fixed abstract reference
02/18 12:42:31<stoopkid> and also, given a concrete implementation, going the other direction should be easier, i.e. extracting an abstract specification out of the code in a deterministic fashion
02/18 12:43:57<stoopkid> could potentially just be a matter of taking the concrete implementation, and just "hiding" certain details of the code
02/18 12:44:40<stoopkid> leaving those details open to implementation, as long as these implementations fulfill the rest of the criteria in the spec
02/18 12:49:08<stoopkid> koo5[m]: idk, you've got more experience with this than i do; any thoughts?
02/18 13:11:32-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/18 13:11:34*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/18 13:25:26<koo5[m]> im hazy on what problems youre looking to solve
02/18 13:25:46<koo5[m]> so it wasnt making much sense tbh
02/18 13:36:16<stoopkid> https://www.irccloud.com/pastebin/FdzJCzyK/
02/18 13:38:25<stoopkid> yea it was kinda scattered/incoherent, hopefully that paste puts it together somewhat
02/18 13:43:59<koo5[m]> as on the exchange, maybe putting an offer on omnidex is worth a shot
02/18 13:44:07<stoopkid> i still don't know exactly the proper way to implement the natural deduction in order to implement MLTT-auth, but i know that if i don't know how to handle these low-level details it won't matter whether i see the proper method abstractly
02/18 13:44:41<koo5[m]> you may want to go a bit higher than $100 because of the btc transfer fee
02/18 13:45:24<stoopkid> oh yea i'm still definitely gonna try omnidex, wrt bittrex that's more about getting some out like immediately since i've unfortunately put it off long enough at this point to make it a reasonably pressing concern
02/18 13:46:14<stoopkid> what is the current average btc transfer fee btw, i don't even have btc's so i have to figure out how i'm even gonna get the agoras over to the exchange, *especially* if i'm chopping it up into many small exchanges
02/18 13:47:39<koo5[m]> i think about
02/18 13:47:46<koo5[m]> $3
02/18 13:51:19<stoopkid> lol so i gotta buy some btc before i can start buying btc XD
02/18 13:51:53<koo5[m]> yeah i think you need some btc there, alright i guess i can change some dash and send you
02/18 13:53:12<stoopkid> ah, cool thanks, that would help out a lot, i can send it back over after i exchange
02/18 13:53:13<koo5[m]> just tell me the address, it will take me a bit but i can do it
02/18 13:55:41<stoopkid> 121uuZtq1wki13MHXWPigNWxYRjKHqUEyX
02/18 13:55:57<koo5[m]> i wonder if omnidex deals with this somehow?
02/18 13:57:08<koo5[m]> GMP just aborts if it runs out of memory, in what way? Any program running on linux can get aborted by the system if the system runs out of memory. And any program on windows can get aborted by an impatient user if the system starts swapping itself to death
02/18 13:57:41<koo5[m]> nah, i dont care about change:)
02/18 13:58:34<stoopkid> not sure; if there's any way to communicate with the counterparty then it makes sense to have the btc-holder cover the tx fee and have the omni-holder pay half the tx fee back to the btc-holder as part of the tx, but not sure if omnidex provides a mechanism to negotiate that, still need to look into it
02/18 13:58:54<koo5[m]> but a bigger question, you do you think you can implement all these layers better, in c++? if you went at it with agda, sure, makes sense
02/18 14:00:26<stoopkid> it's less about "better" and more about eliminating unknowns
02/18 14:03:45<stoopkid> and mastering the language. i hope at least i can make correct implementations of the things. they won't necessarily be "better" than another correct implementation that's had way more work & optimization put into it, but i'll know everything that's going on with it, and it will be better than an incorrect implementation (assuming i don't just have an incorrect implementation too)
02/18 14:06:04<stoopkid> i'm also thinking strongly about the prospect of doing this stuff in agda instead, but, it's kinda far-separated from what's actually happening on machines, whereas c++ is pretty much right there
02/18 14:06:37<stoopkid> as close as it can be to the machine without being assembly, pretty much
02/18 14:11:03<stoopkid> remember: i'm purposefully trying to avoid getting sucked into agda when possible, cause it hinders me from thinking about the practical programming that needs to get done in order to get us to our own MLTT implementation
02/18 14:37:18<stoopkid> what i was thinking would be potentially more sensible than either c++ or agda would be some framework like llvm, but i've never used it and know almost nothing about how it actually works
02/18 14:43:53<stoopkid> wrt gmp aborting when running out of memory, i don't really know, but that's exactly the problem
02/18 14:59:03*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02/18 14:59:17<koom_> https://blockchain.info/tx/7d747c1338694ed083d99ed59d1ea9e2a34dec993ac36cc8ecaed5766de376c1
02/18 15:01:48<koo5[m]> well, ok, then i guess ill stick to reading Logic - An Introduction
02/18 15:03:27<stoopkid> nice thanks
02/18 15:05:51<stoopkid> alright, well, i guess i'll let you know when i've got everything set up
02/18 17:26:15*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
02/18 17:26:24*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
02/19 00:51:57<stoopkid> hrm, so c++ memory management isn't so bad, i guess i'm getting the hang of it
02/19 00:55:11<stoopkid> koo5[m]: idk, me and c++ is like you and agda lol. there's enough idiomatic stuff in there that i can basically get by as long as the application is super-simple and doesn't need large numerics but ultimately the actual concrete semantics are somewhat of an opaque mystery to me still
02/19 01:06:32<daemoz> I've been growing to enjoy c++ more and more. it's good for what it is.
02/19 01:07:43<stoopkid> daemoz: heya
02/19 01:08:22<stoopkid> yea i'm personally all about c++ in theory, and maybe ~75% so in practice
02/19 01:08:50<stoopkid> not that i have too much app-dev experience to speak of there yet
02/19 01:10:53<stoopkid> but, c++ isn't what's preventing that :)
02/19 01:13:32<stoopkid> my ideal (as i can conceive of so far anyway) would be using something similar to c++ for writing low-level algorithm snippets, and using a high-level framework like agda (or even some abstraction layer further above that) for combining these into applications. though at this stage i'm just trying to embrace c++ all the way and just, like you said before, get a handle on foundations first
02/19 01:18:17<stoopkid> https://isocpp.org/wiki/faq/freestore-mgmt
02/19 01:18:46<stoopkid> this is clearing up 90% of the things i was confused about and even some things i didn't even know i needed to be confused about yet :D
02/19 01:35:25<daemoz> Oooh this looks like a handy list
02/19 02:59:02<stoopkid> so the idea with smart-pointers is that it allows headache-free free-store memory management by putting the call to `delete` inside the destructor for the smart-pointer, such that it only calls `delete` after the last copy of the pointer has disappeared, and the copies disappear automatically & expectedly when we return from the functions that they're locally scoped to?
02/19 03:20:19<stoopkid> well, this answers nearly all my questions as far as what to do regarding "local"(?) memory management, as opposed to "global" stuff like getting stack size, free store size, making sure we never go out of bounds etc..
02/19 03:22:13<stoopkid> i know i can just wrap everything in `try` `throw` `catch` but that just seems horrible, especially because if i don't `try` `throw` `catch` the right things in the right ways, i'm already putting the code into a position where it will do bad things
02/19 03:25:15<stoopkid> seems better to just pre-emptively delimit the memory region boundaries and build code that sanely operates within them by construction so that exceptions are left for the truly exceptional situations and under normal circumstances the code is never even `try`ing anything weird
02/19 05:24:58<daemoz> stoopkid: yeah that's pretty much the ticket
02/19 05:25:09<daemoz> They're RAII-style managed pointers
02/19 05:25:47<stoopkid> nice, sounds just fine to me
02/19 05:27:17<stoopkid> i'm finding the apparent difficulty in measuring available memory resources to be slightly concerning though, but also apparently that's not c++'s fault and i guess that's what the try/catch are for
02/19 05:30:42<daemoz> Yeah, exceptions in general are a bit of a headache.
02/19 05:31:05<daemoz> I like rusts style of deferring all exception handling back up the call stack
02/19 05:31:20<daemoz> makes it easier to manage in a central place I think
02/19 06:10:55<koo5[m]> stoopkid: whats the everything youre setting up?
02/19 06:22:06<stoopkid> koo5[m]: mmm, idk yet exactly. whatever stuff needs to be put in place to get autonomic to the point that i know how to integrate you / other people into the dev process
02/19 06:47:13*** Join: koom_ (~koom@236.152.broadband3.iol.cz, (unauthenticated): realname)
02/19 06:49:02-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/19 06:49:08*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/19 07:22:22*** Quit: koom_ (~koom@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
02/19 07:22:26*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 265 seconds
02/19 07:39:28* koo5[m] uploaded an image: VectorImage_2018-02-19_013508.jpg (8431KB) <https://matrix.org/_matrix/media/v1/download/matrix.org/fRNLhWSXZcRPOVNTDSISUrAT>
02/19 07:39:29<koo5[m]> Percents of people in "debt trap"
02/19 07:41:03<koo5[m]> maybe you can already answer some open questions from the perspective of univar?
02/19 08:57:52*** Join: koom_ (~koom@236.152.broadband3.iol.cz, (unauthenticated): realname)
02/19 08:59:00-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/19 08:59:03*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/19 09:46:38*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
02/19 09:46:56*** Quit: koom_ (~koom@236.152.broadband3.iol.cz) left #autonomic-dev: Ping timeout: 265 seconds
02/19 13:49:16-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/19 13:49:26*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
              *** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02/19 13:51:25<koo5[m]> i buy her a purse
02/19 13:51:48<koo5[m]> she offers to carry my kindle in it
02/19 13:52:13<koo5[m]> forgets the purse with the kindle in the subway along with the new pdfs ive taken the hassle to copy into it
02/19 13:53:36<koo5[m]> i notice as we're walking from the station, we run back, the train is already closed
02/19 13:53:52<koo5[m]> dude in the train holds the purse and just shrugs
02/19 14:12:48<stoopkid> damn that sucks
02/19 14:22:48*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Remote host closed the connection
02/19 14:23:04*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02/19 14:34:02<stoopkid> "maybe you can already answer some open questions from the perspective of univar?" well, unfortunately that's specifically the part i'm still trying to work out
02/19 16:33:16<stoopkid> HMC wanted some kind of inferencing system. i understand how to express the rules for an inferencing system for dependent type theory, but, i don't know what the actual resolution algorithm should be, or what HMC had in mind in particular
02/19 16:33:54<stoopkid> i have some understanding of some different kinds of resolution algorithms and some understanding of general theory there, but, still trying to put some of the pieces together
02/19 19:49:34*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 252 seconds
02/19 19:49:37*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
02/20 04:25:24*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02/20 04:27:19-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/20 04:27:25*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/20 04:42:07*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
02/20 04:42:27*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
02/20 07:44:54*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/20 07:45:19*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/20 09:06:33*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02/20 09:08:24-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/20 09:08:30*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/20 17:42:28*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
02/20 19:12:42*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02/20 19:13:24*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Remote host closed the connection
02/20 19:13:52*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02/20 19:57:30*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
02/20 19:57:36*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
02/20 23:50:01<daemoz> Hey stoopkid, got any suggested study material? We left off proving things in Agda, what should I look at now?
02/21 00:00:04<stoopkid> we can still keep proving things in Agda if you want. anything you'd be interested in looking at in particular?
02/21 00:15:47<daemoz> I guess I've been having some problems conceptually understanding the system. Like how these abstract proofs in Agda are connected to complex nomic games.
02/21 00:22:39<stoopkid> well, it connects via the propositions & rules
02/21 00:23:40<stoopkid> a nomic consists of essentially a "generic gameplay engine" and the rules of the nomic are essentially specifications that constrain gameplay
02/21 00:24:15<stoopkid> proofs are then what you have to do to demonstrate a move as valid according to the rules
02/21 00:24:38<daemoz> these are essentially rules on top of the genesis ruleset?
02/21 00:24:49<daemoz> that restrict the logic?
02/21 00:26:42<stoopkid> rules on top of core MLTT / block-chain rules, genesis being the first such ruleset restricting gameplay into some "genesis configuration"
02/21 00:29:58<daemoz> Users of the AN system will interact with it mainly through subcontexts, these subcontexts are just groups of rules that only affect whatever is within them? (including nested subcontexts)
02/21 00:31:38<stoopkid> sorta
02/21 00:33:10<stoopkid> analogously on the IP-routed internet, users interact with the internet mainly through subdomains, even though they're actually also interacting with the internet backbone as well
02/21 00:33:59<daemoz> true
02/21 00:34:44<stoopkid> so, when you're interacting with a subcontext you're also interacting with all of its parent contexts in some way
02/21 00:35:24<stoopkid> so subcontexts are actually their own side-chains
02/21 00:36:51<stoopkid> so it's not only that the subcontexts are restricted by rules to only affect whatever's in them, they're literally on different chains and already could only affect whatever's in them
02/21 00:38:10<daemoz> gotcha
02/21 00:38:31<stoopkid> at most they can influence the parent chains above them with work (just like anyone else can ofc)
02/21 00:38:39<stoopkid> (as in PoW)
02/21 00:39:00<daemoz> How will PoW be expressed in this system?
02/21 00:39:44<stoopkid> idk yet cause i'm trying to figure out whether it's possible for the work function to be able to change once a chain begins
02/21 00:40:09<stoopkid> or whether this just kills contexts
02/21 00:41:57<stoopkid> well, it will have to be through rules, because subcontexts definitely *can* choose their own work function, at least when they're first created, without causing any problems
02/21 00:42:03<daemoz> Okay, and so a subcontext will be created by defining rules in MLTT and then doing whatever operations are necessary to register it.
02/21 00:43:09<stoopkid> basically; they'll have to define at least a certain collection of rules that provide the specific block-chain/DHT interface for that subcontext
02/21 00:44:14<daemoz> And users of that subcontext will interact with it via mltt as well?
02/21 00:44:40<daemoz> or will there be some sort of interface library or something of the sort.
02/21 00:48:41<stoopkid> not sure yet, i tend to think the latter would be more appropriate in theory because i don't know that we really need any restrictions on what side-chains do, and root context will already be safe and sound as MLTT
02/21 00:49:25<stoopkid> they will certainly be able to use MLTT
02/21 00:52:07<stoopkid> the important thing is that there's an understood hierarchy of what contexts are sub- to what other contexts
02/21 00:52:23<stoopkid> and that root context is secure
02/21 00:52:38<daemoz> Gotcha, just trying to get a picture.
02/21 00:53:50<stoopkid> so, at any time (block-time), a context is in some particular state
02/21 00:54:03<stoopkid> we can imagine the state like a "world", the world for that context
02/21 00:55:07<stoopkid> for the subcontexts that continue using MLTT, we can present them as essentially "extending" the world of their parent contexts
02/21 00:56:52<stoopkid> so all the stuff that's true in the parent contexts is true in the subcontexts, and then those subcontexts contain more specific truths
02/21 00:57:59<stoopkid> so when reasoning in a subcontext you're reasoning over all the parent contexts simultaneously, at least, for this kind of subcontext
02/21 00:59:00<daemoz> Cool
02/21 01:02:26<stoopkid> not sure if we need to explicitly account for any other kind of subcontexts besides for this or if they'll be able to just take care of themselves on top of what framework we provide
02/21 01:02:55<stoopkid> i figure the latter is the case
02/21 01:03:00<daemoz> Likewise
02/21 01:03:28<daemoz> Although, what kind of limitations are there in the things that mltt can express?
02/21 01:05:08<stoopkid> it gets into trouble in two particular places that i notice: 1) when you have two distinct, legitimate, but incompatible ways to talk about the same thing, and 2) when you want the MLTT to talk about itself
02/21 01:05:20<stoopkid> (with a decent amount of overlap between the two)
02/21 01:09:24<stoopkid> the elimination rule for implication is modus ponens, essentially, given a proof of A, and a proof of A -> B, you can "apply" the proof of A -> B to the proof of A, and you get a proof of B
02/21 01:09:55<stoopkid> so people are like "oh hey, proofs of implications are functions, see, they're just like functions, all you can do is apply them to an input to get an output"
02/21 01:11:06<stoopkid> so, this is fully compatible with an interpretation that they actually are functions in the mathematical sense, i.e. don't have any internal algorithmic structure, and less compatible with the interpretation that they actually do have some internal algorithmic structure
02/21 01:11:35<stoopkid> if they do have some internal algorithmic structure, our modus ponens elimination rule here doesn't really reveal any of that
02/21 01:13:18<stoopkid> so, this is great for the homotopy type theorists who want to be able to talk about things based on structural equivalence, and not great for the programmers who want to be able to talk about run-time of programs, and be able to actually restrict what programs they'll accept based on this
02/21 01:14:07<stoopkid> with cubicaltt the homotopy type theorists have nearly achieved their agenda
02/21 01:15:08<stoopkid> so we can do things like transport proofs about the unary natural numbers to proofs about the binary natural numbers, because there's a structural equivalence between them
02/21 01:17:31<stoopkid> which is fantastic, but then, it starts to get weird
02/21 01:19:08<stoopkid> so, unary natural numbers and binary natural numbers are extensionally equivalent when all you can do is add/subtract/multiply/etc.. with them, i.e. they're equivalent under arithmetic
02/21 01:19:40<stoopkid> they're not equivalent when you start asking things like "how many digits are in these numbers"
02/21 01:21:34<stoopkid> but homotopy type theory says, they're structurally equivalent, so you can substitute them for each other in any context, so if every binary natural number n has length ceil(log_2(n)) then so does every unary natural number
02/21 01:22:52<stoopkid> so you can think, hrm, well what if we differentiate them by putting all the differences into the topological structure?
02/21 01:25:01<stoopkid> you can do that, and that'll work great for differentiating properties of the binary & unary natural numbers and stuff like that, but, you still have no way to differentiate which particular choice of representative you use for this alternate more complex structure
02/21 01:25:36<stoopkid> just as you couldn't choose whether to use binary or unary Nats as the representative for the topological structure of the natural numbers
02/21 01:27:00<stoopkid> so, the issue here is that when people are designing these logics, they look at some objects represented in the logic, imagine to themselves "hrm, *these* seem like the right properties for these objects, and *these* seem like the legitimate ways to use these objects"
02/21 01:27:17<stoopkid> inevitably this breaks down as we consider the same objects through different lenses, at different levels of abstraction etc..
02/21 01:30:02<stoopkid> homotopy type theory works, you want to be able to substitute structurally equivalent things for each other *in any context where they're structurally equivalent*
02/21 01:31:21<stoopkid> the problem with homotopy type theory is asserting a single global notion of structural equivalence
02/21 01:31:56<stoopkid> this makes it fundamentally incompatible with anything that even thinks about another kind of structural equivalence than the one its chosen
02/21 01:32:55<stoopkid> so, the intensional type theorists and the homotopy type theorists basically... how should i put this...
02/21 01:32:57<stoopkid> hate each other
02/21 01:33:04<stoopkid> and don't work together
02/21 01:33:23<stoopkid> and rarely even pretend like they have intentions of trying to eventually be compatible with one another
02/21 01:34:41<stoopkid> imo the solution to this is to do it the homotopy type theory way, but not assert a single global notion of structural equivalence
02/21 01:35:16<stoopkid> then the substitutions allowed by homotopy type theory are only allowed in the contexts that use the notions of structural equivalence that those substitutions make sense for in the first place
02/21 01:35:21<stoopkid> so
02/21 01:35:23<stoopkid> that's (1)
02/21 01:35:34<stoopkid> (2) is a whole other can of worms
02/21 01:37:09<stoopkid> you've got godel's incompleteness theorem, tarski's undefinability theorem, the undecidability of the halting problem for turing machines, chaitin's incompleteness theorem, the inability for total languages to self-interpret, etc... etc.. etc...
02/21 01:39:19<daemoz> Gotcha, so it's still unclear about how to handle structural equivilence, and there are of course lists of paradoxes that are just unavoidable
02/21 01:43:54<stoopkid> i'm getting a better idea of what needs to be done to handle structural equivalence. technically speaking it's not necessary for autonomic we really only need the intensional run-time/complexity stuff, but, i still tend to approach it from the homotopy type theory angle because of a) how it fits into my particular way of understanding the whole thing in terms of traditional abstract algebra and b) because
              <stoopkid> really the ideal system should have both
02/21 01:44:46<stoopkid> wrt paradoxes, none of those are actually paradoxes, but, same idea of "unavoidable obstructions to having the system talk about itself in the ways we might imagine we'd like it to"
02/21 01:46:21<stoopkid> so, because i think i'm on the right track for a reasonable solution to the problems posed by (1), i tend to think of the situation as pretty close to being "there's hardly anything it can't usefully reason about besides itself"
02/21 01:47:40<stoopkid> i'm struggling to find an example of paradox or godelian incompleteness that doesn't come down to trouble with self-reference
02/21 01:48:06<daemoz> It seems that'd be the central impossibility
02/21 01:51:48<stoopkid> so, we know that the logic can describe itself, including all its intensional properties, it can describe itself down to the very last bit of an implementation of it, and every last step of execution of its proof-checking/proof-searching
02/21 01:51:58<stoopkid> because it can describe a universal turing machine
02/21 01:52:05<stoopkid> along with its execution semantics
02/21 01:53:42<stoopkid> what can we "do" with such a description of the logic from within itself? well
02/21 01:53:54<stoopkid> we can find godel sentences
02/21 01:54:10<stoopkid> metatheoretically we can demonstrate their unprovability
02/21 01:54:26<stoopkid> from within MLTT obviously we couldn't
02/21 01:54:35*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02/21 01:54:40<stoopkid> (unless it's inconsistent)
02/21 01:55:18<stoopkid> can we do anything else useful with it? i'd imagine so but i'd kinda need to build one and play around with it
02/21 01:56:31-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/21 01:56:37*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/21 01:59:30* stoopkid needs to stop waiting until he's sleepy from conversations about logic to start trying to deal with his agoras
02/21 02:02:15<stoopkid> approaching the solution to the complexity issue by trying to bound it internally with the logic requires diving into the problem posed by (2), since this is a matter of the logic reasoning about the complexity of its own proofs
02/21 02:03:57<stoopkid> there could potentially be other ways to approach the solution though
02/21 02:05:47<stoopkid> maybe
02/21 02:05:49<stoopkid> i'm skeptical but it's possible
02/21 07:39:49*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
02/21 08:19:19<koo5[m]> http://logitext.mit.edu/tutorial interesting, but not making too much sense
02/21 08:23:32<koo5[m]> im struggling with ttfp introduction as well, some strange unexplained notions of hypotheses and some weird notation
02/21 10:51:48*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
02/21 11:06:33<stoopkid> you should probably just read ATCHC again and forget about "types" and "functional programming"
02/21 11:09:02<stoopkid> notions of hypotheses might often go unexplained because they probably assume (no pun) that it's self-explanatory
02/21 12:05:45<koo5[m]> They try to explain it but i dont get it
02/21 12:06:05<koo5[m]> Whats atchc?
02/21 12:07:18<stoopkid> http://purelytheoretical.com/papers/ATCHC.pdf
02/21 13:04:39<stoopkid> so, no types, no functions, no functional programming, no typed functional programming
02/21 13:04:48<stoopkid> for now, that stuff "doesn't exist"
02/21 13:05:23<stoopkid> propositions are no longer types. if you read that, pretend they didn't say it
02/21 13:05:24<stoopkid> proofs are no longer programs. if you read that, pretend they didn't say it
02/21 13:06:00<stoopkid> propositions are propositions
              <stoopkid> better: they're just syntactic objects that mean absolutely nothing
02/21 13:06:37<stoopkid> proofs are just proofs of these propositions. sequences of inference rules that take some premises to some conclusions
02/21 13:07:08<stoopkid> or better: they're just the syntax trees you can form when using the inference rules as nodes
02/21 13:12:01<stoopkid> lambdas are not programs, and also not functions
02/21 13:12:29<stoopkid> they're a syntax term that happens to have been chosen to represent proof trees that have an implication "A -> B" as their conclusion
02/21 13:16:10<stoopkid> ATCHC will show a concrete syntax for these inference rules and proof trees
02/21 13:16:44<stoopkid> some inference rules and proof trees, anyway
02/21 16:02:47<koo5[m]> Good call with atchc
02/21 16:05:15<koo5[m]> Yea ive been pretty much only trying to understand the logic side of things so far
02/21 16:12:57<stoopkid> so are you understanding ATCHC better?
02/21 16:46:16<koo5[m]> A bit
02/21 18:18:06-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/21 18:18:07*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/21 18:18:20*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
02/21 18:18:37-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
              *** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/21 20:10:32<koo5[m]> http://cryptopump.pro/index.html
02/21 20:14:13<stoopkid> nice
02/21 20:14:51* stoopkid is trying to learn how ecryptfs works
02/21 20:20:19*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
02/21 20:23:09<stoopkid> hrm, so i can "ecryptfs-recover-private --rw" and that decrypts & mounts my home directory, but i can't seem to get ecryptfs-umount-private to do anything
02/21 21:12:17<stoopkid> well, `umount` works but apparently `ecryptfs-recover-private` sticks keys into the keyring that `umount` doesn't clear
02/21 23:12:37<stoopkid> oy, maybe one of these days i'll learn how to use a computer
02/22 00:02:16*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 248 seconds
02/22 00:14:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/22 04:11:38-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/22 04:11:49*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/22 04:28:59<koo5[m]> ecryptfs is just a silly hack from ubuntu, go with luks if possible
02/22 04:34:27<koo5[m]> luks even has aes with hmac in the testing release
02/22 04:34:34<koo5[m]> its the shit
02/22 05:33:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 260 seconds
02/22 05:43:10*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
02/22 05:50:29*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/22 07:53:24*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ubgzvnyiibcxolur) left #autonomic-dev: Ping timeout: 240 seconds
02/22 07:55:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wdtddadzwvuzpuil, stoopkid: stoopkid)
02/22 09:41:20<stoopkid> i see, thanks for the tip, checking that out
02/22 09:44:45<stoopkid> wasn't even really "trying" to go with ecryptfs though. when i set up my old cold-storage machine i had selected some "encrypt home directory" option during the OS install. didn't really think anything about it until i had to go into recovery mode for something and was like "hey where's my home directory"
02/22 10:10:49* stoopkid trying to figure out how to install packages with lots of dependencies onto an offline computer without having to go back & forth back & forth with a flash drive
02/22 10:35:46-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/22 10:35:52*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/22 10:39:05<koo5[m]> yea theres something for that
02/22 10:39:19<koo5[m]> like, at least, synaptic has some "export" option
02/22 10:39:26<koo5[m]> but theres more i think
02/22 10:39:54<koo5[m]> i guess it helps if you have the same os on both
02/22 10:41:42<koo5[m]> yea encryptfs, ive run into it a few times, and never really figured out how to decrypt those home dirs, it was always easier to solve it some other way
02/22 10:43:10<stoopkid> `ecryptfs-mount-private --rw ~/.Private` decrypts and mounts to a new directory in tmp (read-write-able)
02/22 10:44:13<stoopkid> then you can write into that tmp/ecryptfs... directory and then when you're done umount and clear the keyring
02/22 10:45:03<koo5[m]> if youre lucky and it works, i guess, hehe
02/22 10:45:23<stoopkid> ah
02/22 10:46:04<stoopkid> well, apparently i'm lucky and it worked, this time at least XD
02/22 10:52:51<stoopkid> yeesh, at this point i just want to build my own wallet software with no dependencies
02/22 10:53:48<stoopkid> `cd MyWalletApp; make; done`, offline with no packages installed
02/22 10:59:06<koo5[m]> whats your threat model though? like, you trust the iso, you trust the packages that go through your online computer..
02/22 11:00:20<stoopkid> oh this isn't cause i'm worried about security it's just cause i'm annoyed by constant inconveniences that i never take the time to properly deal with
02/22 11:01:10<koo5[m]> i think id only disconnect the computer right before generating the wallet, and maybe then you dont even need to trust the computer
02/22 11:01:57<koo5[m]> soon
02/22 11:01:58<koo5[m]> heh
02/22 11:02:27<stoopkid> soon what?
02/22 11:03:06<stoopkid> as in, "you should do this soon" ?
02/22 11:03:51<stoopkid> or "maybe soon we'll deal with those inconveniences"
02/22 11:04:04<koo5[m]> as in, we'll deal with it soon -ish
02/22 11:05:56<stoopkid> yep, that will be nice, i'm starting to get mentally prepared for diving into that
02/22 11:08:25<stoopkid> not sure whether disconnecting the computer right before generating the wallet implies not needing to trust the computer
02/22 11:08:48<stoopkid> i assume that in general this is not the case, though, i could imagine it's possibly on-average the case
02/22 11:10:25<stoopkid> keyloggers or all kinds of other malicious software could already be on that computer, so, in that case you're likely screwed as soon as you reconnect, though, this risk could potentially be mitigated by properly filtering your network traffic (both in and out)
02/22 11:13:09<stoopkid> apparently even my flash drive could be compromised (like actually not just hypothetically)
02/22 11:13:41<stoopkid> just watched a whole defcon talk about it
02/22 11:13:45* stoopkid should stop watching those XD
02/22 11:14:44<stoopkid> defcon's like my fox news
02/22 11:28:31<stoopkid> anyway, my personal threat model is probably as "unthreatened" as i can possibly be while still using a computer connected to the internet and not manually ensuring security
02/22 11:28:47<stoopkid> i'm certainly unlikely to be anybody's specific target
02/22 11:29:24<stoopkid> but not necessarily safe against random catch-all malware
02/22 11:31:51<stoopkid> that being said, i think about this less in terms of my own personal security and more in terms of general autonomic client security
02/22 11:32:58<stoopkid> like, "who would have the most critical threat model, and what would *they* need"
02/22 11:45:13<stoopkid> oy, just a never-ending stream of problems...
02/22 11:47:18<stoopkid> that i'm supposed to write off as out of scope but yet are constantly causing problems...
02/22 11:49:24<stoopkid> and then we already know where this ultimately leads: back down to the hw that's black-boxed and probably fucked
02/22 11:52:22<stoopkid> and then we know where that ultimately leads: i'm not the one who should be doing this (any of it)
02/22 11:54:23<stoopkid> we've got a great design, nearly complete. we can build it. but we can't call it secure. that ultimately doesn't mean anything.
02/22 11:55:23<stoopkid> we can maybe say "it should be secure relative to hardware security". *maybe*. huge maybe
02/22 11:56:23<stoopkid> we can more likely say that for an abstract design
02/22 11:56:34<stoopkid> for an implementation? prove it
02/22 11:57:38<stoopkid> relative to the compiler for it and at least one (real) machine-lang that it's being compiled to
02/22 11:58:46<stoopkid> same thing with the compiler. we might be able to demonstrate the correctness of its abstract design. how about it's implementation?
02/22 12:02:25<stoopkid> i can't see any other solution besides to scrap nearly literally everything that computes, and rebuild from square 1, in view of the public, with mathematicians & logicians & computer scientists & electrical engineers proving & publishing the proofs of security/correctness, relative to some well-defined security model
02/22 12:02:38<koo5[m]> wrt not trusting the computer, that was actually a different idea, but doesnt matter
02/22 12:02:57<stoopkid> now, that's not something i'm dragging into autonomic dev, it is indeed out of scope "of the project"
02/22 12:03:12<stoopkid> is it out of scope for... "life" though? i don't think so, and it makes me super depressed and exhausted
02/22 12:06:24<stoopkid> i've been born into a world where computation is increasingly forced on me by society, such that my livelihood is increasingly dependent on unseen algorithms that hardly anybody understands and that most refuse to care about
02/22 12:07:27<stoopkid> these circumstances aren't special to me of course, practically everybody's in the same situation
02/22 12:09:17<stoopkid> if participation in this system was entirely voluntary, hey, you take the risks you take, but it can hardly be called voluntary these days, and if there's ever some fiat crash that forces everybody into cryptos, well, then it will become entirely involuntary unless you've got lots of gold, land and guns
02/22 12:09:50<stoopkid> this keeps me up at night, every night
02/22 12:10:22<koo5[m]> it seems highly unlikely that hw security will be the limiting factor of tau's .... usefulness....
02/22 12:11:43<stoopkid> hw security shouldn't limit tau/autonomic's usefulness at all, except for whatever individual(s) has(have) the particular vulnerability(ies), unless this happens to be > 50% of the network simultaneously
02/22 12:13:38<stoopkid> and even then, theoretically people just need to switch out their hardware for secure hardware and then can ideally set everything back to normal
02/22 12:13:52<stoopkid> that's not what i'm super-depressed & exhausted about
02/22 12:15:12<stoopkid> i'm depressed & exhausted for me and all the rest of the plebians who are left out of the good security and basically just told by authorities and each other not to worry about it
02/22 12:16:12<stoopkid> building a useful autonomic doesn't make *my* computer secure
02/22 12:17:19<stoopkid> separate problem from autonomic, definitely, no doubt, it is entirely out of scope of "autonomic development"
02/22 12:18:24<stoopkid> but honestly if i thought it were feasible i'd be putting autonomic plans on hold to work on this problem that i consider more immediate & more critical
02/22 12:27:23<stoopkid> it's not though, so, whatever
02/22 12:28:16<stoopkid> but, makes me just want to give up on autonomic & life in general
02/22 12:28:36<stoopkid> but, that's how i've felt since 3 years ago, so, no worries, i'm not going anywhere
02/22 12:36:07<stoopkid> hrm, so FOL can be reduced to propositional logic, but, at least this particular conversion mechanism i'm looking at only works classically
02/22 12:36:31<stoopkid> this reduction of FOL to propositional CNF (conjunctive normal form) is the basis of Robinson's resolution inferencing algorithm
02/22 12:36:34<stoopkid> (for FOL)
02/22 12:36:54<stoopkid> i'm not sure whether it actually works for constructive logic
02/22 12:37:23<stoopkid> and i'm not sure that FOL is able to reduce to *equivalent* CNF formulas even classically, only equisatisfiable formulas
02/22 12:38:15<stoopkid> so, if we reduce FOL to CNF, and then inference over it, via robinson resolution, technically we're doing classical inferencing?
02/22 12:38:26<stoopkid> idk, let's assume it's the case
02/22 12:39:12<stoopkid> robinson resolution is refutation complete, meaning, if there is a contradiction in your FOL axioms/rules, then False will be provable
02/22 12:39:16<stoopkid> by robinson resolution
02/22 12:40:17<koo5[m]> dont we always find something to worry about to our hearts content?
02/22 12:44:57<stoopkid> hrm, no, until we get into medical advancements my worries are fairly finite & reasonable imo
02/22 12:45:27<stoopkid> i definitely don't seek out things to worry about, they just present themselves to me on a regular basis
02/22 12:47:03<stoopkid> and even then, i only worry about the problems that are technically solvable
02/22 12:47:07<stoopkid> which this one is
02/22 12:47:16<stoopkid> it's caused by people, it can be solved by people, in theory
02/22 12:54:53<stoopkid> idk, problems exist, and are problematic, theoretically the solution to the problems is solving them, but apparently these days suggesting that == being a negative nancy
02/22 12:55:58<stoopkid> that's probably not special to "these" days though, but, i never lived in any other time-period to have a point of comparison
02/22 12:59:30* koo5[m] goes back to FSMs
02/22 12:59:58<stoopkid> finite state machines?
02/22 13:01:59<stoopkid> anyway, interestingly, afaict, False is provable classically iff. it's provable constructively
02/22 13:02:34<stoopkid> ah hrm maybe not
02/22 13:03:21<stoopkid> oh wait, maybe. if A is true constructively, then (A -> False) -> False is true constructively
02/22 13:03:43<stoopkid> in the case of A = False, if False is true constructively, then (False -> False) -> False is true constructively
02/22 13:04:04<stoopkid> (False -> False) -> False is the double-negation translation of False
02/22 13:04:19<stoopkid> so False is provable classically iff (False -> False) -> False is provable constructively
02/22 13:04:20<koo5[m]> yea
02/22 13:04:52<stoopkid> so if we prove False by classical robinson resolution, then constructively we should have (False -> False) -> False
02/22 13:05:36<stoopkid> but `id : False -> False` is constructively provable, therefore, False is constructively derivable from (False -> False) -> False
02/22 13:06:09<stoopkid> so, if we can prove False by classical robinson resolution, that should imply that False has a constructive proof
02/22 13:06:38<stoopkid> so, remember the consistency check in the early inferencer code?
02/22 13:06:45<stoopkid> it queried for False?
02/22 13:08:25<stoopkid> i always wondered what that was all about. i mean, sure, "consistency check", but, i didn't see how that was actually supposed to work, considering that the logic was incomplete
02/22 13:09:09<stoopkid> but, i didn't know about this "refutation completeness" property
02/22 13:11:48<stoopkid> now i can see, "oh! *that's* how the consistency check could work, *that's* what HMC meant by decidable consistency, and why this was brought up in relation to Ohad's MSOL plans"
02/22 13:12:52<stoopkid> do we not have refutation-completeness for MSOL? no idea, i'm still trying to work through the proof that we even have it for FOL
02/22 13:13:51<stoopkid> but i think i'm getting closer to understanding all the theory behind the construction of our intended inferencer
02/22 16:23:41<koo5[m]> If you want a game to terrify your friends with, you can't go wrong with The Brookhaven Experiment. The zombie shooter offers a campaign and survival mode, the latter of which sees you blasting away the increasingly-tough undead - perfect for when you're hankering for a quick horror fix. Remember, when you wet your pants in virtual reality, you wet them in reality too.
02/22 16:33:58<koo5[m]> https://youtu.be/jF6RzK50fDs?t=474
02/22 16:38:18* stoopkid shrugs
02/22 17:24:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 240 seconds
02/22 18:56:08*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wdtddadzwvuzpuil) left #autonomic-dev: Quit: Connection closed for inactivity
02/22 20:31:02*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/22 22:30:27*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Quit: WeeChat 2.0.1
02/22 22:30:44*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/22 23:29:23*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
02/23 02:59:03*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-svczgsevsusndmeh) left #autonomic-dev: Ping timeout: 248 seconds
02/23 03:33:57-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/23 03:34:02*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/23 04:01:20*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vzkzuzwrznrnxkaf, (unauthenticated): @koo5:matrix.org)
02/23 06:20:27*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
02/23 07:04:10<koo5[m]> In atchc page 9, disjunction elimination isnt making sense, why would it require that both a and b imply c? Thats just what the rule is there for
02/23 07:04:38<koo5[m]> Also, i cant see whats meta about the whole thing
02/23 07:42:57*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dfnmlzzspuofrhhb, stoopkid: stoopkid)
02/23 07:44:28<stoopkid> "why would it require that both a and b imply c? Thats just what the rule is there for"
02/23 07:44:38<stoopkid> "Also, i cant see whats meta about the whole thing"
02/23 07:44:43<stoopkid> not sure what you're asking
02/23 08:07:25<stoopkid> "why would it require that both a and b imply c?"  because you could've proved a OR b from either a, or b, so to prove c from a OR b, then c should follow from each of the things that a OR b follows from, which are a, and b
02/23 08:10:10<stoopkid> with elimination rules, think like you're pattern-matching on the type
02/23 08:10:26<stoopkid> like consider:
02/23 08:10:39<stoopkid> elim : A OR B -> C
02/23 08:10:54<stoopkid> elim (inl a) = proof-of-C-in-the-case-that-A-OR-B-was-proven-by-A
02/23 08:11:07<stoopkid> elim (inl b) = proof-of-C-in-the-case-that-A-OR-B-was-proven-by-B
02/23 08:12:19<stoopkid> similarly, with Bool:
02/23 08:12:38<stoopkid> Bool-elim : (b : Bool) -> C b
02/23 08:13:17<stoopkid> Bool-elim true = proof-of-C-b-in-the-case-that-b-is-true
02/23 08:13:27<stoopkid> Bool-elim false = proof-of-C-b-in-the-case-that-b-is-false
02/23 08:14:21<stoopkid> G |- b : Bool           G, x : Bool |- C prop              G |- c : C true                G |- d : C false           
02/23 08:14:28<stoopkid> -------------------------------------------------------------------------------------------------- Bool-elim
02/23 08:15:28<stoopkid> G |- if b then c else d : C[x\b]
02/23 08:15:57<stoopkid> and remember, that's *not* an if-statement
02/23 08:16:09<stoopkid> it's not a function
              <stoopkid> it's not a program
02/23 08:16:29<stoopkid> it's a syntactic object to represent a proof of C[x\b] concluded from the above premises
02/23 08:17:25<stoopkid> it's just a piece of mixfix syntax if_then_else_, that means absolutely nothing
02/23 08:17:49<stoopkid> to emphasize that fact let me rewrite the rule
02/23 08:17:57<stoopkid> G |- b : Bool           G, x : Bool |- C prop              G |- c : C true                G |- d : C false 
02/23 08:18:05<stoopkid> -------------------------------------------------------------------------------------------------- Bool-elim
02/23 08:18:23<stoopkid> G |- random-Bool-elim-syntax-object b c d : C[x\b]
02/23 08:20:50<stoopkid> bbl
02/23 09:58:47<stoopkid> hrm
02/23 09:58:58<stoopkid> i want like a toy operating system
02/23 09:59:44<stoopkid> something that's just like the bare minimum to make a computer functional
02/23 10:00:59<stoopkid> guess there's LFS
02/23 15:12:20<stoopkid> well
02/23 15:12:39<stoopkid> twitter's become quite an interesting place since the last time i looked at it
02/23 15:13:59<stoopkid> over the last week apparently memes spreading around twitter (and maybe facebook, it's harder to view facebook content if you're not a member so i haven't even been trying) have caused several major corporations to cut business partnerships with the NRA
02/23 16:45:39<stoopkid> 1 hour ago from Hertz auto: "We have notified the NRA that we are ending the NRA’s rental car discount program with Hertz."
02/23 18:23:25<koo5[m]> to me it reads as: if d is of type (A v B) and a already implies c and b already implies c, then d implies c
02/23 18:31:21<koo5[m]> so where will the facts that a implies c and b implies c come from?
02/23 18:34:56<koo5[m]> and why would you invoke this rule if your context already implies c?
              <koo5[m]> all this rule can tell you is that if you have c you have c
02/23 19:20:05<stoopkid> aha ok i see what you're asking
02/23 19:20:52<stoopkid> well, to start with, that's kind of the point
02/23 19:21:28<stoopkid> you don't get any new information from A v B than you already had
02/23 19:22:04<stoopkid> but
02/23 19:22:12<stoopkid> imagine d is a variable
02/23 19:23:30<stoopkid> so, A v B lets you package things up into a kind of structure, a union type basically
02/23 19:23:38<stoopkid> your question is basically like "why use union types"
02/23 19:23:51<stoopkid> "we can do everything without union types that we can do with union types"
02/23 19:24:17<stoopkid> similarly if we were looking at A ^ B, you also can't get anything new from A ^ B that you didn't already have before
02/23 19:24:19<stoopkid> you can get an A, or you can get a B
02/23 19:24:50<stoopkid> but wait, an A and a B was exactly what you already needed to get an A ^ B in the first place
02/23 19:25:15<stoopkid> you put information into your system with rules that have no premises.
02/23 19:26:18<stoopkid> so, why use struct types, if we can put all that stuff into the struct in the first place, then we must have already had it *outside* of the struct
02/23 19:27:15<stoopkid> but we want to abstract & generalize over our results
              <stoopkid> think like, process-of-elimination
              <stoopkid> it applies to an arbitrary A v B
02/23 19:27:19<stoopkid> not some specific A v B, an arbitrary A v B
02/23 19:43:58<stoopkid> "We should change the names of AR-15s to “Marco Rubio” because they are so easy to buy." wrecked
02/23 20:09:02<stoopkid> i'm not even anti-gun per se but i hate lobbyists like the NRA and crooked politicians like marco rubio, and love seeing them get their shit handed to them by a bunch of teenagers
02/23 23:25:04<daemoz> hahaha, yeah some good saying-it-how-it-is has been going on lately.
02/24 01:40:20<stoopkid> "President Trump says that John Kelly would have been able to stop a mass shooter if he was armed with a handgun at a school. Come on! How do you expect us to believe that? John Kelly couldn't even stop a wife beater from maintaining his job in the White House!" wrecked, so hard
02/24 01:40:54<stoopkid> and just when i thought today couldn't get anymore interesting, i find out that Trump is sensitive about having small hands
02/24 02:34:48*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/24 02:35:08*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/24 03:54:37<koo5[m]> https://news.ycombinator.com/item?id=16451797
02/24 03:59:27<koo5[m]> process-of-elimination is obvious, if pvq and not p then q
02/24 03:59:46<koo5[m]> but this is: if pvq and pvq implies z then z
02/24 04:00:22<koo5[m]> except p and q already has to imply z
02/24 04:05:49<koo5[m]> iow, i cant make any sense of what youre saying
02/24 04:06:40<stoopkid> "but this is: if pvq and pvq implies z then z", but actually it's "if pvq, and p implies z, and q implies z, then z"
02/24 04:06:56<stoopkid> and yes, p and q already has to imply z, that's the point
02/24 04:07:38<stoopkid> you cannot gain any new information from a logical connective that satisfies logical harmony rules
              <koo5[m]> "imagine d is a variable
              <koo5[m]> 01:24so, A v B lets you package things up into a kind of structure, a union type basically"...checks
02/24 04:08:20<koo5[m]> "why use union types"
02/24 04:09:49<stoopkid> the only thing that puts information into your logic is the rules that have no premises
02/24 04:10:10<stoopkid> everything else just packages up some existing information in a potentially more convenient way for you
02/24 04:10:29<stoopkid> to understand what i mean by that: sections 3 and 4 of ATCHC
02/24 04:11:19<stoopkid> local soundness / local reductions; local completeness / local expansion ; logical harmony ; preservation-of-information
02/24 04:12:10<stoopkid> to me, this is all very much just like how natural language already works
02/24 04:23:56<stoopkid> http://167.88.171.233/AutoNomic/Blog
02/24 04:24:36<stoopkid> unfortunately from talking to darryl mcadams, it looks like IOHK is way ahead of us, and is getting 6 paid professional type theorists on their team
02/24 04:32:50<stoopkid> yep, they've already known lambda-auth, cubical, etc.. in full, since 2016, and have been able to work on it full-time since then while i've been fucking around with security installs in trump country...
02/24 04:46:49<koo5[m]> If theyre making precisely or better than autonomic, then we can go help them out in anywhich way
02/24 04:47:44<stoopkid> works for me
02/24 04:49:46<koo5[m]> are they?
02/24 04:57:21<stoopkid> hrm, not officially on their site at least
02/24 05:07:09<stoopkid> cardano and qeditas look like they might eventually surpass our designs, on the technical side, give enough time, but it looks like every IOHK project is actually contradictory with at least one of the principles we've been working under the assumption of
02/24 05:11:05<stoopkid> well, except for scorex: https://iohk.io/projects/scorex/
02/24 05:11:12<stoopkid> which also might eventually surpass our technical designs
02/24 05:16:02<stoopkid> no idea, w/e
02/24 05:17:26<stoopkid> i suspect they've got some things in the works that aren't displayed on their site yet, but, i'll wait for something more concrete to evaluate
02/24 05:18:50<stoopkid> i'm gonna check out scorex though to see if it might make it easier for us to experiment with the block-chain side of things
02/24 07:01:06<daemoz> cardano seems interesting, the attitude on their site is funny. It's written in haskell?
02/24 09:17:22<koo5[m]> apparently
02/24 11:02:15<stoopkid> i'd probably try to hop on board with cardano and see if it can be tweaked into basically being autonomic, but they seem to be committed to a proof-of-stake system which is rather incompatible with.... let's just start with democracy...
02/24 11:02:57<stoopkid> the entire  country of the united states already basically runs on proof-of-stake, and look how well that works out for us
02/24 11:17:37<koo5[m]> lol
02/24 11:21:52<koo5[m]> well, usd might be the best currency out there
02/24 11:22:38<stoopkid> for... whom?
02/24 11:22:47<stoopkid> best... how?
02/24 11:24:14<koo5[m]> in terms of value stability, kinda in terms of being the biggest i guess
02/24 11:25:29<stoopkid> possibly, i haven't really compared to other currencies besides cryptos
02/24 11:27:19<koo5[m]> who cares really
02/24 11:27:37<stoopkid> about... democracy?
02/24 11:28:06<stoopkid> about... murderous empires?
02/24 11:28:29<koo5[m]> about the definition of "best currency"
02/24 11:29:05<stoopkid> idk, i thought you were the one who cared about it since you brought it up :P
02/24 11:32:28<koo5[m]> its just that i read some smart-looking post against POS today, and i didnt really understand that much, but i remained convinced that POS is a good thing. But ofc the requirements for autonomic are clear here
02/24 11:34:54<stoopkid> right, i'm not saying that POS is invalid and can't make a successful *currency*, but yea from the technical angle we're incompatible as long as we're planning on not having any built-in currency (or any currency on root at all, in theory), and from a philosophical angle, voting rights determined by POS doesn't seem like a great way to start a democracy...
02/24 11:35:08<stoopkid> or at least, that's my conjecture
02/24 11:36:09<stoopkid> cardano's not really trying to do that, so, this doesn't invalidate the cardano project, it's just not quite what the autonomic project is (or... has been trying to be... i think?)
02/24 11:37:45<koo5[m]> but then, it sounds like we should be able to reuse the rest of their code?
02/24 11:38:55<stoopkid> no idea wrt reusing cardano's code in particular, but check out scorex it's supposed to be a generic tool for putting together & experimenting with bock-chain tech, i am planning to look into that to see if we can make use of it
02/24 11:39:54<koo5[m]> looked it it, its kinda besides my current focus
02/24 11:42:05<stoopkid> hrm, but reusing cardano's code wouldn't be? i feel like scorex would be easier since they're explicitly designing it for the purpose and i can probably get help from darryl mcadams with it since i'm sure they want people testing it out for real projects
02/24 11:42:47<stoopkid> with cardano i feel like we'd be rather on our own when it comes to molding it into something other than cardano
02/24 11:44:02<stoopkid> not sure, if you'd rather try hacking cardano than scorex since it's already a pre-built system, i'm open to it
02/24 11:44:47<stoopkid> bbiab, food
02/24 12:25:01<koo5[m]> great docs
02/24 12:26:21<koo5[m]> ok i can see how we might reuse pieces of scorex
02/24 12:27:03<koo5[m]> but i still dont have much clue about our core/language
02/24 13:08:12<stoopkid> well, that's reasonable because we haven't 100% settled down on core/language yet
02/24 13:09:12<stoopkid> we've just 90% settled down on background theory
              <stoopkid> or, i've 90% settled down on background theory at least
02/24 13:09:32<stoopkid> like, do you understand a high-level architectural overview of the thing?
02/24 13:10:15<stoopkid> cause i'm personally not too far beyond that point myself yet
02/24 13:24:20<koo5[m]> well, i have some idea of the io interface if you mean that
02/24 13:40:42<stoopkid> i mean more like, how we get from logic -> nomic
02/24 13:42:22<stoopkid> we've got a logic, and we use the logic to express the rules of the nomic, as well as check that "moves" of the game satisfy the rules
02/24 13:43:10<stoopkid> that's the entire thing, in a very small nutshell. does that "check" for you?
02/24 13:57:52<koo5[m]> yea
02/24 14:01:40<stoopkid> the rest ofc is not quite so simple. for example, some of the first questions one encounters are, what properties must the logic have in order to allow for a "reasonable" nomic
02/24 14:03:07<stoopkid> consistency: does not prove a contradiction
02/24 14:03:24<stoopkid> or at the very least, paraconsistency: if we do have a contradiction, explosion should not follow
02/24 14:03:46<stoopkid> otherwise everything's provable and bad things proceed from there
02/24 14:03:59<stoopkid> check?
02/24 17:44:45<stoopkid> side-note: here's an example of implicitly broken code "bash --version | head -1 | cut -d" " -f2-4"
02/24 17:45:15<stoopkid> at best i can say it works "coincidentally"
02/24 17:45:36<stoopkid> there's nothing strictly binding this code-snippet to the way `bash --version` actually formats its output
02/24 17:47:01<stoopkid> not that we expect `bash` to change much, but, if it did, we have no indication that our code snippet here is borken
02/24 17:47:05<stoopkid> broken*
02/24 18:51:57<koo5[m]> Re consistency, it sounds probable but I can't really see the possible consequences
02/24 18:52:42<stoopkid> you mean the consequences of "otherwise everything's provable and bad things proceed from there" ?
02/24 18:55:43<koo5[m]> Yea
02/24 18:57:16<stoopkid> so, you wouldn't consider me being able to take your money to be a negative consequence?
02/24 18:58:51<stoopkid> is the game still meaningful if we're not actually constrained by its rules?
02/24 18:59:22<stoopkid> if all possible moves become valid, what's the point of the rules, right?
02/24 19:01:00<koo5[m]> I mean what's the mechanism?
02/24 19:05:06<stoopkid> ?
02/24 19:05:23<stoopkid> "we've got a logic, and we use the logic to express the rules of the nomic, as well as check that "moves" of the game satisfy the rules"
02/24 19:06:38<stoopkid> if you have principle of explosion + a contradiction, then you can prove anything
02/24 19:07:06<stoopkid> we've gone over that mechanism several times by now...
02/24 19:07:34<stoopkid> in this particular situation it amounts to proving that an arbitrary move satisfies the rules, even when, ostensibly, it shouldn't
02/24 19:08:03<stoopkid> an arbitrary move on something replicating bitcoin might be "transfer X coins from addr Y to addr Z"
02/24 19:08:40<stoopkid> just omega your proof-of-contradiction and you've got a proof of the validity of your move
02/24 19:09:37<stoopkid> can this potentially be adjusted so that inconsistency doesn't immediately lead to people being able to steal your money? quite possibly, for example by hard-coding certain aspects of the game
02/24 19:10:06<stoopkid> playing with paraconsistency
02/24 19:10:18<stoopkid> etc...
02/24 19:10:26<stoopkid> but assuming we're just in a standard logic with principle of explosion, this is what the consequences of inconsistency would be
02/24 19:12:39<koo5[m]> "proof of validity of your move", I can't quite imagine that
02/24 19:14:44<stoopkid> have you been playing with Agda?
02/24 19:15:07<koo5[m]> No
02/24 19:15:47<koo5[m]> In Bitcoin, Its the peers that validate your move
02/24 19:16:00<stoopkid> yes
02/24 19:16:06<stoopkid> same in AutoNomic
02/24 19:17:17<stoopkid> "validate your move..." relative to what?
02/24 19:18:48<stoopkid> are you thinking "the miners will see the foul play and reject the move" ?
02/24 19:19:49<koo5[m]> Well, that's how it works in bitcoin
02/24 19:20:03<stoopkid> hrm
02/24 19:20:06<koo5[m]> Dunno what's the idea in autonomic
02/24 19:20:07<stoopkid> sort of
02/24 19:20:49<stoopkid> Bitcoin is like an AutoNomic that got stuck into a fixed set of rules that can't change
02/24 19:21:18<stoopkid> the peers aren't validating based on "hrmm... do i morally agree with this move?"
02/24 19:21:57<stoopkid> they're validating based on, does this conform to the rules of the Bitcoin network
02/24 19:22:16<stoopkid> a better comparison would be Ethereum
02/24 19:22:17<koo5[m]> Yea
02/24 19:22:44<stoopkid> where there's way more that can happen, and it's not so cut and dry whether some move "should" be allowed to go through
02/24 19:22:52<stoopkid> look what happened to TheDAO
02/24 19:23:07<stoopkid> they thought they were just fine and dandy
02/24 19:23:09<stoopkid> nope
02/24 19:23:19<stoopkid> some malicious agent slipped something through the cracks and nobody noticed
02/24 19:23:52<stoopkid> drained something like $80 million from their fund
02/24 19:23:57<stoopkid> nearly took down the entire Ethereum network
02/24 19:24:12<stoopkid> and we're even more generalized than Ethereum
02/24 19:25:48<stoopkid> hypothetically we've got the safety mechanism of powerful type-checking (rule-checking) capabilities in order to actually properly specify what moves should be allowed to go through
02/24 19:26:27<stoopkid> but an inconsistency, combined with principle of explosion, essentially nullifies any hypothetical safety we get from that
02/24 19:35:53<stoopkid> there's not necessarily just one valid way to build this construction, but, assuming we use a rules-framework (logic) that has the principle of explosion, then the consequence of inconsistency is that arbitrary moves might be able to slip through the cracks no matter what the rules specify, even if the peers are scouring the code for signs of foul play
02/24 19:58:12<stoopkid> btw: https://www.reddit.com/r/tauchain/comments/7zsfeo/bittrex_delists_agoras_on_march_9th_2018_selling/
02/24 19:58:17<stoopkid> https://www.coingecko.com/en/coins/agoras
02/24 20:00:20<stoopkid> well, i've fucked up
02/24 20:00:53<stoopkid> ok, project on hiatus until further notice
02/24 20:00:57<stoopkid> catch you guys later
02/24 22:12:21<stoopkid> why would you do this https://www.bitcoinarmory.com/tutorials/armory-advanced-features/offline-wallets/watching-wallet/  if you can do this https://www.bitcoinarmory.com/tutorials/armory-advanced-features/offline-wallets/offline-wallet/
02/24 23:25:57<stoopkid> https://www.bitcoinarmory.com/downloads/glacier-protocol.pdf
02/24 23:26:23<stoopkid> "2-of-4 means there are four keys, and any two of those keys can be combined to access your money, ensuring access even if two keys are lost or stolen." ermm
02/24 23:26:39<stoopkid> except if two keys are stolen then the thief has the necessary 2-of-4
02/24 23:27:53<stoopkid> not that 2-of-4 is bad, but, "ensuring access even if *two* keys are... stolen" is not really something it does
02/24 23:29:13<stoopkid> (page 13)
02/24 23:31:40<stoopkid> further: they make a big point about "Intentional seizure: They have the ability (whether of their own volition, or under pressure from governments) to seize your funds." wrt exchanges, and then again wrt safety deposit boxes "For example, you might store a private key on paper in a safe deposit box at a bank, and feel fairly safe.  But even this is not the most robust solution.  The box could be destroyed in
              <stoopkid> a disaster, or be robbed (perhaps via identity theft), or *intentionally seized*."
02/24 23:32:06<stoopkid> but then:
02/24 23:33:03<stoopkid> "The keys will be distributed as follows: One in a safe at home, the remaining three in safe deposit boxes or private vaults at different locations"
02/24 23:34:17<stoopkid> so safety-deposit boxes supposedly aren't secure (in the Glacier Protocol security model) because they can be intentionally seized by authorities, alright, checks out
02/24 23:34:58<stoopkid> but having *three* safety deposit boxes, and only *one* key in your sole control is somehow sufficient for 2-of-4
02/24 23:35:58<stoopkid> even though, if your safety deposit boxes were being intentionally seized, then there's a decent chance that all of them are getting seized (especially if it's authorities doing the seizing)
02/24 23:37:23<stoopkid> now, this isn't really a concern for me, i'm not fearing for the security like *that*, but, c'mon, we're only on page 13, haven't even gotten into the details yet, and already we're sloppy on our *own* presented security model
02/24 23:37:46<stoopkid> (speaking from the Glacier Project's 1st-person perspective)
02/24 23:38:35<stoopkid> multiple times, in multiple different ways, offending the same security assumption, on the same damn page
02/24 23:40:34<stoopkid> k whatever i'll pretend it didn't say "stolen" and didn't say "safety deposit boxes" and then it fits within the presented security model again
02/25 00:06:13<stoopkid> i need to start making checklists again, i forgot that that's how i really started making more rapid pace back when we were working on univar
02/25 01:13:34<daemoz> Ohad just posted in tauchain reddit "Hello, I am the creator of the project, I have abandoned it and I am going to eliminate it since it has no future. I recommend selling all your tokens before they have no value. Sorry for the inconvenience."
02/25 01:13:37<daemoz> What?
02/25 01:15:10<daemoz> wrt Agoras tokens.
02/25 01:16:25<stoopkid> pretty sure that's a troll, account is a day old and i think ohad is troy_mcclure
02/25 01:16:34<daemoz> Gotcha.
02/25 01:21:36<stoopkid> https://www.reddit.com/r/tauchain/comments/7zu972/development_is_unaffected_by_delisting_progress/
02/25 01:21:56<stoopkid> from one of the channel mods, who i'm guessing is liaomiao
02/25 01:23:01<daemoz> Alright, sorry to sound the alarm I just didn't want you guys potentially caught off-guard.
02/25 01:24:17<stoopkid> no apologies, i appreciate it, that would've been a huge mess to deal with
02/25 04:47:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/25 04:47:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/25 08:06:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/25 08:07:12*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/25 08:44:42<koo5[m]> So, there is no right way to detect that a program can cause a contradiction, correct?
02/25 10:16:58<koo5[m]> https://cointelegraph.com/news/coinbase-informs-13k-affected-customers-of-imminent-data-handover-to-irs/amp
02/25 10:49:02<koo5[m]> Re safety boxes, sounds like they might have been pressured into that wording by some law?
02/25 11:30:07<stoopkid> seems like a weird law
02/25 11:30:54<stoopkid> wrt checking for contradictions, thats what the “refutation completeness of first order logic” thing is about
02/25 11:31:19<stoopkid> magically, there does turn out to be a mechanism for first order logic
02/25 11:32:40<stoopkid> wrt coinbase, yea thats kinda expected
02/25 11:33:09<stoopkid> US has been pushing for that for a while now
02/25 12:01:14-christel- :[Global Notice] Hey, did you know that the CFP for this year's freenode #live is now open? Head over to https://freenode.live and submit a talk, submit ten! We'd love to have you on stage. Fancy supporting this year's event? Drop us a line to sponsor@freenode.live and we'll figure something out! See you in Bristol in November!
02/25 13:05:01<koo5[m]> You mean try to refute A & not A? Wouldnt existentials mess it up?
02/25 14:31:21<stoopkid> Remember the consistency check from our euler/univar code? Queries for False?
02/25 14:33:14<stoopkid> Thats basically the idea, False is only provable from a contradiction A & not A, so if you fail to prove False, you fail to prove a contradiction
02/25 14:34:12<stoopkid> Refutation completeness is a property that means that False will be provable iff. a contradiction is provable
02/25 14:35:57<stoopkid> Or more precisely, its a property of certain inferencing algorithms for certain logics that means that if the ruleset contains a contradiction then the inference algorithm will find it (or equivalently will find a proof of False)
02/25 16:40:33<stoopkid> "Wouldnt existentials mess it up?"
02/25 16:41:02<stoopkid> depends what you mean
02/25 16:42:04<stoopkid> if you just mean the existentials of classical or constructive first-order logic, then no, robison resolution algorithm works with existentials just fine
02/25 16:43:01<stoopkid> if you mean existentials as implemented in N3, sure, still trying to figure out how exactly that's supposed to work and so that ofc throws a wrench in the gears of trying to do this over N3
02/25 16:48:42<koo5[m]> yeah i meant n
02/25 16:48:43<koo5[m]> 3
02/25 16:49:16<koo5[m]> sounds like a good question for hmc?
02/25 16:50:10<stoopkid> already been asked in #AutoNomic
02/25 16:52:01<stoopkid> actually didn't even get to the point of asking that particular q cause i'm still waiting on answers to more basic q's to establish that we're actually on the same page regarding robinson resolution over constructive FOL
02/25 16:52:22<stoopkid> along with a whole backlog of other q's
02/25 18:33:22<koo5[m]> ttfp is making sense now
02/25 18:33:34<koo5[m]> even explaining the disjunction elimination rule that i got hung up on in atchc
02/25 23:53:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 245 seconds
02/26 00:33:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/26 13:54:26<stoopkid> been following along with the glacier protocol; it's almost as paranoid as i am
02/26 13:55:24<stoopkid> it's helping me out though, even though i already basically know the stuff, the fact that it just lays it out linearly step-by-step is helping keep me from bouncing around unproductively
02/26 15:46:03<stoopkid> koo5[m]: i guess this doesn't really affect you to quite the same extent since you already traded yours out; i need to get my shit together in multiple ways though, so, i'm probably gonna spend the next 2 weeks or so doing nothing but that. i'll still be around though if you've got questions while you're studying
02/26 15:46:50<stoopkid> i haven't read ttfp lemme check out how they explain disjunction elimination
02/26 15:52:25<stoopkid> seems reasonable
02/26 17:17:00<stoopkid> oy, i'm still just stuck on the basic act of installing software onto offline computers
02/26 17:24:34* stoopkid hates everything
02/26 17:24:37<stoopkid> catch you guys later
02/26 19:25:39<stoopkid> so after discussing in #ubuntu ... 
02/26 19:26:21<stoopkid> the most reasonable solution for me is to write my own scripts that handle the entire download/installation process ???!?!?!?!
02/26 19:26:30<stoopkid> daemoz: so... what's up with arch? :D
02/26 19:28:14<stoopkid> situation any better over there? (i'm in an unfortunate situation that the offline comp i'm trying to install onto doesn't have a GUI desktop, because it keeps crashing every time i try to boot up with the desktop... or apparently synaptic would be able to take care of this for me)
02/26 20:30:34<daemoz> stoopkid: the nice thing about arch is the arch repositories.
02/26 20:30:49<daemoz> which are collections of install scripts verified and maintained by the community.
02/26 20:31:14<daemoz> Downloading binaries/sources and running arch-linux specific installation scripts is as easy as `pacman -S ...package-name...`
02/26 20:31:48<daemoz> not to mention there is a less verified but more community maintained (the main arch repos have a semi-democratic governing and maintaining) called the arch-user-repositires
02/26 20:31:58<daemoz> you can find pretty much every thing there.
02/26 20:32:20<daemoz> also arch has the best online documentation I've ever seen for a linux distribution. I go there for even problems with other linux things.
02/26 20:33:25<daemoz> The potential downside (like koo mentioned) is that it's a high barrier of entry because the base install is cli you have to build the system up from basically the core os upward.
02/26 20:33:32<daemoz> by installing packages/configuring.
02/26 20:34:08<daemoz> My roomate said that antegros (which is an arch fork(?)) has an incredibly easy to use installer and many people consider it just a friendly installer front-end for arch. Might check that out.
02/26 20:34:54<daemoz> Oh and as far as the vm I'm going to host for us I have to install some weather resistant hardware outside in order to get the right cabling to the room so it's going to be maybe another two weeks out but that's still in the works.
02/26 20:36:52<daemoz> also after reading what you typed closer, there's an easy way to install packages offline. `pacman -U ..filename..`
02/26 20:37:11<daemoz> You can download the packages from an arch machine using pacman as well.
02/26 20:38:07<stoopkid> nice, sounds like that might be exactly what i'm looking for
02/26 20:39:42<daemoz> #archlinux is helpful btw
02/27 00:08:59<stoopkid> i think something's maybe just screwed on my offline comp, all kinds of weird shit happening
02/27 00:09:04<stoopkid> fml..
02/27 00:11:40<stoopkid> i'm getting ready to just say screw it and take the risk on the online comp, since i seem to just be failing every step of the way in trying to do this securely..
02/27 00:13:32<stoopkid> didn't realize this comp was gonna cause me so much headache or would've just bought a new comp while i still had enough savings left for that..
02/27 00:16:13<stoopkid> well, i guess i gotta take back my blaming ubuntu in this particular case, but on the other hand it prompted me to do a bunch of research that's brought me to the conclusion that i should abandon ubuntu anyway
02/27 00:17:25<stoopkid> my attitudes about these things make richard stallman and suckless look like... well.. ubuntu lol
02/27 00:24:06<daemoz> like there's a hardware issue?
02/27 00:25:46<daemoz> And this computer is being air gapped why? I don't think I have context.
02/27 00:29:22<stoopkid> not sure if it's hardware or what, it's doing weird things like when i type sometimes it goes out of order and then won't allow me to go back to the end of the line, text is getting garbled on the screen, desktop GUI just crashes if i start it.. never had a problem on this machine before, and it's been air-gapped for the whole time since i was using it previously so for lack of better explanation or ability to
              <stoopkid> actually troubleshoot it i'm just assuming it's the machine
02/27 00:30:57<daemoz> Damn what os was that?
              <stoopkid> it's kind of an old computer, old enough that it didn't wanna let me install ubuntu 16.04 (can't remember exactly why), and then was sitting in a damp basement for several months since i last used it, so.. quite possible
02/27 00:31:08<stoopkid> ubuntu 14.04
02/27 00:31:18<stoopkid> air-gap is so i can use it as an offline wallet
02/27 00:31:23<daemoz> gotcha.
02/27 00:31:37<daemoz> well arch runs pretty well on old hardware, lemme know if you give it a shot.
02/27 00:35:13<stoopkid> yea still gonna try to give arch a shot on it but for lack of knowing what caused these issues in particular i'm a bit worried about still trying to use it as an offline wallet. if there's something going on causing data corruption then i might even be facing a bigger risk of having the funds lost by trying to use this machine than just going through a reasonably well-trusted web wallet... greenaddress,
              <stoopkid> something like that. idk
02/27 00:35:43<daemoz> I see what you're saying. What about a raspi or something
02/27 00:35:54<daemoz> usb boot is now a thing!
02/27 00:38:35<stoopkid> hrm, hadn't thought about getting something like a raspi for it; within my budget.. that's a good idea
02/27 00:40:56<daemoz> ^_^
02/27 00:42:41<daemoz> just be sure you look up the usb boot stuff there have been issues in the past with the sd cards r/w speeds and having the os run off there.
02/27 00:56:44<stoopkid> lol i wonder if i could script an offline wallet on a TI-83
02/27 01:00:11<daemoz> Hahah, uhhh, would you want to?
02/27 01:00:48<stoopkid> lol no but i do happen to have one available
02/27 01:01:49<daemoz> Haha fair
02/27 01:14:01<daemoz> offtopic but props to robert mueuller(sic)'s special counsel. Trump's campaign advisor for the election just flipped.
02/27 01:17:24<stoopkid> idk whether to celebrate or just smh at this point lol; originally i was excited that they were finally putting the hammer down on these guys, but the longer this goes on the more i'm like "wow, i really kinda wish Trump's actually innocent at this point cause this is just way too fucked up"
02/27 01:17:34<stoopkid> anyway, didn't catch that, got a link?
02/27 01:19:31<daemoz> I caught it from here
02/27 01:19:33<daemoz> https://www.youtube.com/watch?v=Ku-GtdalD1I
02/27 01:21:44<stoopkid> ah, gates, yea, i did catch that
02/27 01:51:46<stoopkid> lol, bitcoin for ti-89 at least: https://vimeo.com/123798651
02/27 02:07:51<daemoz> Hahaha, yeah well I guess you could always go that route
02/27 02:10:41<stoopkid> good to know it's possible if i ever actually do need it at least heh
02/27 02:11:27<daemoz> You could probably make one in minecraft lmao
02/27 02:40:20<stoopkid> koo5[m]: any thoughts on how to deal with this in the meantime while i'm figuring out what to do about the offline wallet?
02/27 02:41:30<stoopkid> i've wasted so much time at this point just bouncing around between things that don't work, for whatever reasons
02/27 02:46:45<stoopkid> days and days and days looking into some wallet software, just to find out that idk how to get it to install onto an offline computer; days and days and days on another one, and another one; days and days just looking into how to even install packages onto an offline computer in the first place, just to find out that ubuntu... can hardly be said to even support that functionality... !?!??!! now it seems like
              <stoopkid> the actual machine is screwing up in mysterious ways, now i'm looking at raspberry pi's, TI-83s.... the raspberry pi is actually a really good idea but it's ridiculous that i'm even at that point...
02/27 02:47:01<stoopkid> just bouncing around and making progress with nothing because nothing works
02/27 03:02:13<koo5[m]> hmmm
02/27 03:02:23<koo5[m]> id say take a break
02/27 03:02:28<koo5[m]> deal with which problem?
02/27 03:03:10<stoopkid> of using agoras/bitcoin without undue risk of accidentally losing it
02/27 03:03:50<koo5[m]> do you actually intend to go selling them now?
02/27 03:04:40<stoopkid> some; i have to unfortunately, even if it's at 2/3's loss from the original value
02/27 03:05:23<stoopkid> like, i've got about another week + maybe a raspberry pi and then i'm completely out of money and relying on my fiancee to hold us over til i can get some out
02/27 03:08:43<stoopkid> fuckin SEC...
02/27 03:09:13<koo5[m]> idk, for the 10k i had, i just had a clean ubuntu install on a computer with disabled wifi, i set up firewall, and i pretty much only used it for going to omniwallet
02/27 03:09:38<koo5[m]> so, your actual problem now is selling them, as opposed to storing them?
02/27 03:12:14<stoopkid> well, both are actual problems for me but it looks like i'm gonna have to solve the selling problem without having solved the storage problem, which just makes the whole thing trickier
02/27 03:13:14<koo5[m]> trickier how?
02/27 03:15:53<stoopkid> trickier to minimize risk i guess but idk maybe that's irrelevant at this point
02/27 03:16:34<stoopkid> i mean like, nilli was literally just dealing with this
02/27 03:17:40<koo5[m]> dealing with the consequences of storing money in an exchange?
02/27 03:18:15<stoopkid> i would say dealing with the consequences of having transferred money to an exchange in the first place, but yes
02/27 03:18:54<koo5[m]> can you still sell over bittrex?
02/27 03:19:01<stoopkid> til the 9th
02/27 03:21:32<koo5[m]> how did we get into such a mess lol
02/27 03:22:01<stoopkid> cause i focus more on math than money :(
02/27 03:23:06<stoopkid> if i had dealt with all this weeks ago instead of doing autonomic research we'd be doing trustless exchange and be laughing about the bittrex situation heh
02/27 03:23:33<koo5[m]> what about omnidex tho?
02/27 03:25:04<koo5[m]> i mean..it was me who probably talked it down because the orderbook for agrs was empty, but later i realized that that doesnt necesarily have to reflect wether you can use it to exchange at reasonable price
02/27 03:25:05<stoopkid> omnidex might be a better option; i don't think it supports omni <-> btc, which is what i was really planning on doing, but, agoras -> tether -> usd is a possibility
02/27 03:28:16<koo5[m]> at any case, at least statistically speaking, its probably unwise to sell agrs at this low point, so, the alternatives i can come up with are: i send you some dash, i send you some cash, you try waiting for nillis btc, we dig up the btc donation we got a while back
02/27 03:30:12<koo5[m]> you said you paid your utilities for a few months, does that mean you only need a bit for the other expenses?
02/27 03:33:19<stoopkid> i've got rent/utilities for march paid, so yea mostly just grocery kinda expenses (and some medicine for my cat's eye infection)
02/27 03:36:52<stoopkid> i guess i can't hold off, we can get by but we have absolutely no buffer against unexpected expenses anymore
02/27 03:38:38<stoopkid> alright, new plan: stoopkid goes and begs to borrow money from parents per usual... i guess at least this time i already have the asset to pay them back with 
02/27 03:56:32<stoopkid> alright well, i guess i'll figure something out there and then i'm gonna keep taking a break from autonomic in order to finish the trustless exchange thing and go through LFS and then master c++ and build my own wallet tool. i'm gonna make sure i'm never in any of these situations again
02/27 04:32:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/27 04:32:45*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 04:43:11*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02/27 04:43:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 06:12:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dfnmlzzspuofrhhb) left #autonomic-dev: Quit: Connection closed for inactivity
02/27 06:43:15*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 260 seconds
02/27 06:56:02*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 07:03:33*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 268 seconds
02/27 07:20:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 08:33:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 240 seconds
02/27 08:49:34*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 09:01:40-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/27 09:02:00*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/27 12:04:34*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bdvyedxninobbpeq, stoopkid: stoopkid)
02/27 12:43:03<stoopkid> i think i might've solved it; drivers issues + possibly issues with the actual monitor
02/27 12:43:20<stoopkid> but i think i just destroyed my encrypted home directory
02/27 12:44:58<koo5[m]> i'd say i wont laugh but...thats just how it goes
02/27 12:46:50<stoopkid> ah woops, wrong command, still there
02/27 12:47:42<stoopkid> laughter is... deserved :)
02/27 12:48:14<koo5[m]> nah
02/27 12:50:28<koo5[m]> https://codewords.recurse.com/issues/four/the-language-of-choice
02/27 12:51:03<koo5[m]> going thru this today, doing a bit of a detour from mltt but ive wanted to read this for a long time
02/27 12:53:43<koo5[m]> also, plotting with matplotlob, https://github.com/koo5/notemarks/blob/master/tests/linear_algebra2.py
02/27 12:57:02<koo5[m]> let me blog about this
02/27 12:57:06<koo5[m]> i was thinking we should be tweeting, but then we wouldnt be able to edit/amend our posts
02/27 12:57:32<koo5[m]> so we should try medium, its all the rage these days, in the crypto circles as well
02/27 12:58:09<koo5[m]> c'mon you fucking vps you cant just timeout like that
02/27 13:01:38<stoopkid> you can detweet and retweet though, similar effect to editing, but clobbers any comments/likes/retweets/etc..
02/27 13:01:44<stoopkid> should probably keep me away from twitter though :)
02/27 13:02:20<stoopkid> lemme check out medium
02/27 13:02:38<stoopkid> there's also decentralized open-source things like mastodon now that i've been checking out
02/27 13:13:52<koo5[m]> we already hve a decentralized opensource wikimedia, now we need to give people a way to follow us
02/27 13:19:38<koo5[m]> hmm i wonder if it was fish all along, lemme reboot


8:43i think i might've solved it; drivers issues + possibly issues with the actual monitor
18:44but i think i just destroyed my encrypted home directory
koo5
18:45i'd say i wont laugh but...thats just how it goes
S
stoopkid (IRC)
18:47ah woops, wrong command, still there
18:48laughter is... deserved :)
koo5
18:49nah
18:51https://codewords.recurse.com/issues/four/the-language-of-choice
The language of choice
18:51going thru this today, doing a bit of a detour from mltt but ive wanted to read this for a long time
18:54also, plotting with matplotlob, https://github.com/koo5/notemarks/blob/master/tests/linear_algebra2.py
koo5/notemarks
 - GitHub
notemarks
18:57let me blog about this
18:57i was thinking we should be tweeting, but then we wouldnt be able to edit/amend our posts
18:58so we should try medium, its all the rage these days, in the crypto circles as well
18:58c'mon you fucking vps you cant just timeout like that
S
stoopkid (IRC)
19:02you can detweet and retweet though, similar effect to editing, but clobbers any comments/likes/retweets/etc..
19:02should probably keep me away from twitter though :)
19:02lemme check out medium
19:03there's also decentralized open-source things like mastodon now that i've been checking out
koo5
19:14we already hve a decentralized opensource wikimedia, now we need to give people a way to follow us
19:20hmm i wonder if it was fish all along, lemme reboot
S
stoopkid (IRC)
19:29technically its just a centralized opensource wikimedia, but, on top of a semi-decentralized WWW, it can serve the purpose yes
19:30mediawiki*
S
19:32i feel like cerf, kahn, and berners-lee look at social media and the new push for "decentralized social media" like "uh.. but... what... what do you think we already built?"

#autonomic-dev> 03/02 17:12:26*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
              *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 14 hours 28 minutes 51 seconds ago
              *** Names: editable-koo koom stoopkid daemoz Deadhand koo5[m]
              *** End of /NAMES list.
03/02 18:21:31*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 276 seconds
03/03 01:34:15-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/03 01:34:21*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/03 06:49:49*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
03/03 09:42:58-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/03 09:43:04*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/03 14:27:09<stoopkid> daemoz: heh, it's funny, in switching to arch it's sort of the opposite situation, in debian i generally need to be hooked up to the network to install packages onto the OS; in arch i need to be hooked up to the internet in order to do the arch installation itself
03/03 14:27:51<stoopkid> either way, it needs to be hooked up to the network while doing some installation of something
03/03 14:29:24<stoopkid> but that's alright, cause it's made me realize that i'm looking at everything all wrong due to inexperience in security (particularly: what degrees/dimensions of security are realistic to expect)
03/03 14:29:51<stoopkid> and from trying to adhere as close as possible to what's described by the glacier protocol
03/03 14:30:36<stoopkid> cold storage, glacier protocol, etc etc.. it's all saying "you need a non-networked machine; *eternally quarantined*; factory sealed; yada yada yada"
03/03 14:32:08<stoopkid> all well and good, but it's like unrealistic levels of paranoia when compared to the fact that it is still based on some root of *trust*, that either comes from the network, or is all in-house
03/03 14:32:47<stoopkid> unless you build all your software (or, even hardware, i guess?) there's no such thing as an "eternally non-networked machine"
03/03 14:34:54<stoopkid> the problem that *i* encounter with that root of trust is that i'm looking for solid answers, in a place where perhaps none exist
03/03 14:35:07<stoopkid> "can you trust it? idk, i trust it.. maybe"
03/03 14:36:09<stoopkid> "you maybe shouldn't, but, hey, what are you gonna do :)"
03/03 14:37:56<stoopkid> "and on the other hand, until a specific vulnerability is demonstrated, it's still likely way more trustable than whatever you'll come up with"
03/03 14:38:33<stoopkid> etc..
03/03 14:38:55<stoopkid> funny how "closed world assumption" comes back up here
03/03 14:39:34<stoopkid> whatever is not known to be insecure, is secure
03/03 14:42:41<stoopkid> also how funny how dmilez's point comes up here too, about how it's "hard" to maintain consistency under closed-world assumption, as rules continue to be added
03/03 14:43:40<stoopkid> in using closed-world assumption to model reality, truth must change over time
03/03 14:46:39<stoopkid> also funny how we first look at it like "closed world assumption is an appropriate choice for a nomic game on a block-chain", but for a pure logician starting with just looking at CWA logics for their own sake, a "nomic game on a block-chain" is actually a decent representation
03/03 14:48:57<stoopkid> a better name for autonomic might really be "cwn", for "closed-world network" (a tip of the hat to "cwm", the closed-world machine)
03/03 14:50:16<stoopkid> (also "n" conveniently comes after "m", suggesting that one is the logical successor/evolution of the other)
03/03 15:27:05<stoopkid> now, the glacier protocol does point to a couple specific roots of trust, it uses ubuntu, it uses bitcoin core, it uses its own glacier protocol scripts, and for agoras i'd need some more things in order to support omni-layer transactions (possibly; it's simple enough that it could perhaps be done manually with all the rest)
03/03 15:30:53<stoopkid> ultimately i'm not aiming for "100% security", as there is not known to be any such thing, and any such knowledge would be questionable at best
03/03 15:37:22<stoopkid> what i am aiming for though is a realistically useful (while still realistically paranoid) root of trust
03/03 15:56:19<stoopkid> i guess ultimately at this point i should be thinking of what i'm doing as a) auditing the security of the glacier protocol and its dependencies & root of trust, b) creating a supplementary set of documentation that covers the results of this audit and covers the security model of those dependencies and that root of trust itself
03/03 15:59:22<koo5[m]> Order Summary
              <koo5[m]>     Items: CZK 104,52   Shipping & handling: CZK 613,36
03/03 15:59:27<koo5[m]> amazon is just broken outside of the US
03/03 16:00:43<stoopkid> lol wow
03/03 16:01:17<koo5[m]> and youre very lucky if the shipping is available at all
03/03 16:03:13<koo5[m]> and then there are the customs trolls
03/03 16:03:49<stoopkid> i guess it all depends on where the thing you're buying is gonna be getting shipped from (and maybe a bit more if somebody somewhere else has to arrange all that)
03/03 16:04:21<koo5[m]> also, most books prices are just insane, but i guess its okish because you could pass it on later
03/03 16:04:56<stoopkid> yea
03/03 16:05:07<stoopkid> i don't buy books except for fiction
03/03 16:06:17<stoopkid> and i don't buy physical books at all
03/03 16:07:09<stoopkid> (cause then i'd actually have to buy something; and as a bonus i get to save some trees or something i guess)
03/03 17:42:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/03 17:43:08*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/03 19:00:29<stoopkid> stoopkid's other dumbass problems of the day: bios on offline machine won't let me change hdd group boot priority to have usb as first, even though it appears as an option, so i find this other hard-drive and i'm like ok i could just mount the usb and the other hard-drive on that offline comp and dd from the usb to the 2nd hard-drive, and then just switch that hard-drive out physically with the first one
03/03 19:00:44<stoopkid> and that appeared to be working even to the point of archlinux install definitely at least starting to run
03/03 19:01:10<stoopkid> and then quitting due to some error loading ldlinux.c32
03/03 19:01:55<stoopkid> and i had a weird thing that when i did lsblk, i noticed that sdx1 on the usb and the hard-drive were reporting different sizes, 123M on the usb, 551M on the hard-drive
03/03 19:02:18<stoopkid> so i'm like, "that's weird, i have no idea how computers work"
03/03 19:03:40<stoopkid> but then i'm going back to trying to do ubuntu as specified in the glacier protocol, and my networked setup computer is ubuntu, so it's telling me to use Startup Disk Creator
03/03 19:04:05<stoopkid> so i'm like ok, select ubuntu iso, select USB drive... not large enough? wtf
03/03 19:04:23<stoopkid> for 1.4 gig
03/03 19:05:38<stoopkid> `lsblk`, usb shows 123M capacity, `ls -sh` arch linux iso: 552M
03/03 19:05:56<stoopkid> *facepalm*
03/03 19:07:51<stoopkid> i had two flash drives, and had already used them for backups of my private key and so had gone scrounging around my house for another flash drive and found one in the back of a drawer in my kitchen
03/03 19:08:22<stoopkid> idk if this thing is like 100 years old or if it's just been corrupted somehow and is somehow reporting the wrong size
03/03 19:09:46<stoopkid> size of the flash drive was the last thing i was expecting to be causing the issue; i guess dd is silent about that error
03/03 19:11:03<stoopkid> so it didn't occur to me, even when it was staring me right in the face when i was doing the original `lsblk`s that showed me the difference in sdx1 between the usb and the 2nd hard-drive
03/03 19:15:37<stoopkid> lsblk's like "hey, see this extra 438M that magically appeared in partition 1 when you `dd`'d over to the 2nd hard-drive? funny how that wouldn't fit into the storage capacity i'm reporting to you for your flash drive :P"
03/03 19:16:42<stoopkid> i guess there's a partition table on there claiming to use 551M, and lsblk sees that as greater than the 123M available capacity of the drive and just reports that available capacity
03/03 19:19:32<stoopkid> and i'm even more of a dumbass cause i'm sitting there looking at the output of lsblk, seeing it report the storage capacity of the drive as 123M, seeing it report the size of the first partition as 123M, and the size of the 2nd partition as 64M, wondering whether they must be overlapping, and why lsblk was showing such a low figure for the drive capacity, whether it was just fitting that value to the size of
              <stoopkid> the contents (which an `ls -sh` on the .iso file would've shown me, it wasn't..), and if so, why it wasn't doing that for the 2nd hard-drive
03/03 19:20:04<stoopkid> *facedesk*
03/03 19:25:55<stoopkid> and i'm supposed to be the lead dev on autonomic XD this is why i always keep my eye on what tezos, cardano, redfish, etc.. are doing :)
03/03 19:38:39<stoopkid> also funny how, similar to how there's not really such thing as an eternally quarantined / non-networked machine (unless you build it and write all the software yourself), we also don't reject the "security through obscurity" as much as a first impression of modern cryptography academia/literature/meme/etc.. would perhaps make it out to be
03/03 19:41:14<stoopkid> everything that uses passwords, private keys, secret cryptographically random data, etc.. relies, in some sense, on security through obscurity, at the very least of those passwords, keys, secrets, etc..
03/03 19:44:19<stoopkid> so, while it's true that for the vast majority of modern cryptography, security through obscurity is really the opposite of what you want, for at least one part of cryptography, in particular "having memorizable cryptographically random personal secrets", security through obscurity is the name of the game
03/03 20:48:13*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Quit: Leaving
03/03 21:48:50<stoopkid> once we have our MLTT (or cubical) in place, i'd like to formulate some of this basic security theory, in similar manner to my dreadbury mansion stuff: https://github.com/sto0pkid/CategoryTheory/blob/master/Agatha2.agda#L198
03/03 21:50:36<stoopkid> woops: https://github.com/sto0pkid/CategoryTheory/blob/master/Agatha2.agda#L96
03/04 03:30:39-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/04 03:30:45*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/04 17:55:38*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 276 seconds
03/05 01:00:31-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/05 01:00:38*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/05 06:28:49*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Quit: Leaving
03/05 21:51:38*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/05 21:52:05*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/06 09:27:25<koo5[m]> The number of apps which can be loaded onto the Nano S at the same time  has been raised up to 18 (depending of the kind of apps).
03/06 10:44:56<koo5[m]> nice
03/06 14:42:19<koo5[m]> so, agrs on upbit and doing well, nice also
03/06 15:14:59-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/06 15:15:03*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/06 19:21:49*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
03/06 23:03:57*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/06 23:04:21*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/07 03:52:22-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/07 03:52:28*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/07 11:43:34*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
03/08 10:32:32-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/08 10:32:50*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/08 12:55:49*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/08 12:56:14*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/08 22:23:14*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
03/09 04:15:27-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/09 04:15:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/09 05:08:35*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 256 seconds
03/09 05:21:32*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/09 05:39:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 256 seconds
03/09 05:56:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/09 08:25:40*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
03/09 19:26:12-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
03/09 19:26:18*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
03/09 19:35:08*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 260 seconds
03/09 20:09:50-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
03/09 20:09:54*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
03/09 20:46:55<koom> syncing omnicore is gonna take a few days
03/09 20:47:40<koom> although, maybe i have it somewhere already
03/09 20:48:41<koom> i guess that was the armory client
03/09 20:52:27<stoopkid> hrm, im not sure whether you’ll need to sync, might make some things more convenient though
03/09 20:59:15<koom> yeah
03/09 20:59:36<koom> alright im "only" 2 years behind, ill let it sync
03/09 21:01:16<stoopkid> i'm not in too big of a rush anyway; i'm more concerned with being thorough than i am with getting any funds out immediately
03/09 21:04:33<stoopkid> a couple days should be enough time to tie up the rest of these loose ends (i hope? yeesh lol)
03/09 21:12:39<stoopkid> currently i'm stuck on creating a raw tx with bitcoin-cli
03/09 21:13:00<stoopkid> ah i know what the problem is
03/09 21:13:18<stoopkid> or, a problem
03/09 21:14:54<stoopkid> bash does not seem to like multi-line commands with no line separators, and doesn't seem to like this triple single-quotes thing, nor does it seem to like single-quotes at all
03/09 21:16:11<stoopkid> and bitcoin-cli doesn't seem to like spaces
03/09 21:17:05<stoopkid> oy nothing seems to like anything i'm doing
03/09 23:00:07<stoopkid> finally, found the magic combination
03/09 23:01:35<stoopkid> for ubuntu 16.04 on bash, the following works for inputting json to bitcoin-cli on command line: no whitespace, no single/double quotes outside of arguments to bitcoin-cli, double quotes on keys and strings inside the argument arrays/objects, no backslashes anywhere
03/09 23:02:11<stoopkid> that's basically the format bitcoin-cli is wanting to receive, so, bash is actually doing the totally convenient thing here
03/09 23:02:28<stoopkid> what's not doing the convenient thing is bitcoin's documentation
03/09 23:03:21<stoopkid> really bitcoin-cli should probably be reading these json arrays/objects from files so that it can avoid all the differences / clobbering between various shells
03/09 23:03:55<stoopkid> i'll get to that, for now i just need to finish making it work on *this* shell
03/09 23:05:01<stoopkid> so if you try the createrawtransaction example, and you get it to work, don't be surprised like i was that the tx version # (apparently called "nVersion") is 2 instead of 1
03/09 23:05:22<stoopkid> https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki
03/09 23:05:56<stoopkid> "This specification defines the meaning of sequence numbers for transactions with an nVersion greater than or equal to 2 for which the rest of this specification relies on. "
03/09 23:06:26<stoopkid> so, here's another example of what i mean about bitcoin's documentation: https://en.bitcoin.it/wiki/Transaction
03/09 23:07:01<stoopkid> "Version no:   Currently 1"
03/10 00:24:44<stoopkid> getting somewhere now, slowly but surely
03/10 00:35:16<stoopkid> alright just a couple things left to look over with signing transactions and p2sh multisig, i guess i'm gonna go ahead and try to get some testnet coins and make sure i can run a full p2pkh transaction and then we'll have some testnet coins available to test the multisig
03/10 00:35:34<stoopkid> and then while we're doing that we can finally test my omni<->btc exchange thing
03/10 00:50:00<stoopkid> http://tpfaucet.appspot.com/
03/10 01:04:56<stoopkid> getting a timeout error there
03/10 01:05:23<stoopkid> https://testnet.manu.backend.hamburg/faucet
03/10 01:05:24<stoopkid> e3f0161b0a309fa6e0f93c54893cec888b3fac9cd1834d38ced2dae896fa5b3e
03/10 01:08:01<stoopkid> https://live.blockcypher.com/btc-testnet/tx/e3f0161b0a309fa6e0f93c54893cec888b3fac9cd1834d38ced2dae896fa5b3e/
03/10 01:08:48<stoopkid> alright, 2 test bitcoins (unconfirmed still ofc)
03/10 01:32:24<stoopkid> hrm so this is already a p2sh tx
03/10 01:35:46<stoopkid> https://www.blocktrail.com/tBTC/tx/e3f0161b0a309fa6e0f93c54893cec888b3fac9cd1834d38ced2dae896fa5b3e
03/10 01:36:41<stoopkid> so in order to spend that i need to be able to satisfy this pubkeyscript: "OP_HASH160 643d1bcb5ab4ef7e7084091e93657733ec64cde7 OP_EQUAL"
03/10 01:37:27<stoopkid> so i guess in theory, bitcoin-cli should be able to do that
03/10 01:58:04<stoopkid> hrm, it's being tricky..
03/10 02:00:33<stoopkid> so, this address is actually a hash160 of a redeemscript, so that redeemscript should be here somewhere, or at least, i should be able to generate it
03/10 02:10:30<stoopkid> https://bitcoin.stackexchange.com/a/63252
03/10 02:30:25<stoopkid> alright so i can use dumpprivkey to get the private key associated with that redeemscript hash, and then i can take that privkey and reimport it with an account name like "testnet_key1" using importprivkey <privkey> "testnet_key1", and then i can get the actual "address" (base58 encoding of the pubkey) using getaddressesbyaccount  "testnet_key1", and then i should be able to base58decode and then hash160 that,
03/10 02:30:26<stoopkid> and then prefix it with 0014 and that should be redeemscript, i think
03/10 02:49:11<stoopkid> hrm, for some reason i'm getting 21 bytes instead of the 20 (160 bits) that i'm supposed to be getting, when using glacier's bc_address_to_hash_160 function in base58.py
03/10 02:50:07<stoopkid> hrm..
03/10 03:15:37<stoopkid> aha
03/10 03:15:59<stoopkid> bitcoin-cli -testnet validateaddress <p2sh_addr>
03/10 03:16:16<stoopkid> dumps all the necessary info including redeemscript
03/10 03:17:43<stoopkid> "script" : "witness_v0_keyhash", hrm
03/10 03:18:42<stoopkid> so this is apparently a 'segwit' output
03/10 03:21:28<stoopkid> if you wanna get just the redeemscript directly you can do:
03/10 03:21:54<stoopkid> grep addr=<addr> <wallet_dump_file> | head --bytes=44
03/10 03:23:15<stoopkid> so now i should be able to verify that this hashes to the redeemscript hash in my tx
03/10 03:41:40<stoopkid> lol wtf: https://bitcoin.stackexchange.com/questions/38037/what-is-the-1-return-bug
03/10 03:43:21<stoopkid> "prove to me you can spend <insert arbitrary tx>", "ok: OP_1 OP_RETURN"
03/10 04:08:08<stoopkid> d'oh
03/10 04:08:48<stoopkid> ok so, when taking hashes of data...
03/10 04:09:02<stoopkid> it helps when you use the actual data rather than the ascii of its hex representation
03/10 04:32:27*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
03/10 04:42:10<stoopkid> if you need to do hash160s, i'm having trouble with glacier's base58.py's hash_160 function
03/10 04:42:31<stoopkid> but the following works for me:
03/10 04:42:53<stoopkid> `sha256sum <redeemscript_*data*> | head --bytes=64 | xxd -r -p | openssl rmd160 | tr -d "\n" | tail
03/10 04:43:08<stoopkid>  --bytes=40`
              <stoopkid> (all one line, sorry)
03/10 04:44:33<stoopkid> well, any "data" not just "redeemscript_data"
03/10 05:07:32<stoopkid> alright, bitcoin-cli's telling me i've successfully signed this tx, let's see what the testnet thinks about that lol
03/10 05:16:55<stoopkid> `bitcoin-cli -testnet sendrawtransaction <raw_signed_tx_data>`
03/10 05:17:11<stoopkid> error code: -26
              <stoopkid> error message: 64: no-witness-yet
03/10 05:49:09<stoopkid> ok so that's because i'm still syncing; segwit tx's haven't been introduced/accepted at the stage in the block-chain that i'm synced up with so far
03/10 05:49:26<stoopkid> you can get around this by restarting bitcoind with the -prematurewitness option
03/10 05:49:40<stoopkid> but it doesn't help a whole lot cause then you just get:
03/10 05:49:44<stoopkid> error code: -25
03/10 05:50:03<stoopkid> error message: Missing inputs
03/10 05:51:32<stoopkid> this means: bitcoind isn't synced up to the point of seeing the tx where i received these tbtc
03/10 05:52:02<stoopkid> not sure if there's a special option to bypass that
03/10 05:52:31<stoopkid> or maybe some online service that'll push tx's out for you, but, not sure why that should be necessary (even if it might convenient)
03/10 05:56:09<stoopkid> https://blockchain.info/pushtx
03/10 05:56:16<stoopkid> ^ only for mainnet though
03/10 05:56:39<stoopkid> i think? h/o lemme try it :)
03/10 05:57:40<stoopkid> "missing parents for etc.."
03/10 05:57:48<stoopkid> so yea only mainnet
03/10 06:15:41<stoopkid> https://live.blockcypher.com/btc/pushtx/
03/10 06:15:47<stoopkid> Network: Bitcoin Testnet
03/10 06:16:01<stoopkid> "Error validating transaction: Error running script for input 0 referencing e3f0161b0a309fa6e0f93c54893cec888b3fac9cd1834d38ced2dae896fa5b3e at 0: Script was NOT verified successfully.. "
03/10 06:17:51<stoopkid> man, always something else
03/10 06:26:38<stoopkid> luckily helpful folks in #bitcoin are being helpful: "how are you signing the transaction?  basically if you're using core and using signrawtransaction, you'll also need to pass it the amount in the input.  this is a requirement for segwit"
03/10 06:47:20<stoopkid> and finally: success
03/10 06:47:22<stoopkid> https://www.blocktrail.com/tBTC/tx/ffef9f53dff51180d6f267f85c1d8d4239dbd57044b0a6d24c4916246bcc916b
03/10 06:49:08<stoopkid> bitcoin-cli signrawtransaction makes you put the amount of the tx_input that you're spending as a field in the JSON object describing that input, this is apparently another of those poorly-documented features
03/10 06:49:52<stoopkid> alright so now i gotta do the same thing, but multisig
03/10 06:50:03<stoopkid> and then the same thing again, but omni
03/10 06:51:10<stoopkid> and then i guess we'll be ready to move over to the mainnet and set this multisig up with nilli
03/10 08:21:57-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
03/10 08:22:03*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
03/10 09:50:40*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/10 09:51:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/10 11:14:40*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
03/10 13:15:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kgtjqazfogekvckc) left #autonomic-dev: Ping timeout: 240 seconds
03/10 13:16:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tvpmgbohkoqkwfvc, stoopkid: stoopkid)
03/10 13:23:23<stoopkid> alright, generating a multisig addr is easy enough; let
03/10 13:23:37<stoopkid> s see if i can spend to it (and then more importantly, out of it)
03/10 16:51:18-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/10 16:51:24*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/11 03:55:34*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 248 seconds
03/11 04:16:46*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/11 10:17:02*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
03/11 12:02:56<stoopkid> http://www.quantabytes.com/articles/tx_survey.html
03/11 12:03:12<stoopkid> interesting little survey of different transaction types on bitcoin
03/11 12:04:13<stoopkid> ofc, we can run our survey of this against the ledger
03/11 12:04:20<stoopkid> our own*
03/11 13:06:28*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Read error: Connection reset by peer
03/11 13:11:16*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/11 18:31:45*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/11 18:38:50*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
03/12 04:31:40*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/12 10:30:40*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Quit: Leaving
03/12 11:40:04*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/12 11:40:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/12 15:34:18<stoopkid> oy finally finished understanding multisig enough to get the transactions to go through on the testnet
03/12 15:39:12<stoopkid> https://www.blocktrail.com/tBTC/tx/59fc5131b347f2f84ed2a6932d893d377e30b507aa339c436332710c06b7d6e5
03/12 15:39:29<stoopkid> spends from a p2sh-p2wsh address
03/12 15:52:43<stoopkid> alright now just omni stuff and exchange stuff and then some tests on the main-net with small amounts and then i think we're ready
03/12 15:55:06<stoopkid> so, step 1, get some test omni to this multisig i just spent to
03/12 17:59:07<stoopkid> https://www.blocktrail.com/tBTC/tx/ffbd4b46fd0c7488a23910454bf84b05ff31a3e83705ec35dbca8ddad0499f09
03/12 17:59:16<stoopkid> alright, theoretically i'm supposed to get some tomni in exchange for those tbtc
03/12 20:56:42<stoopkid> well, the transaction has gone through but they haven't sent any tomni back yet, hopefully they will
03/13 09:48:38*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/13 09:49:14*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/13 17:34:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 268 seconds
03/13 17:42:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/14 20:22:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/14 20:23:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 01:32:03*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 264 seconds
03/15 01:44:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 02:00:55*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 264 seconds
03/15 02:13:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 07:21:15*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 264 seconds
03/15 07:23:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 07:24:02*** Join: Deadhandd (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/15 11:13:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/15 11:13:46*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 11:27:38*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/15 11:28:00*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 22:31:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 260 seconds
03/15 22:48:14*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/16 00:45:38<daemoz> Got that cat6 ran so just a few days for me to get the vm ready and networking stuff sorted
03/16 00:45:48<daemoz> any preferences?
03/16 03:00:23<koo5[m]> Xenial, i guess
03/16 04:15:00<daemoz> Okay, sure.
03/16 04:16:12<daemoz> Looks like a pretty neat minimal distro
03/16 04:22:01*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Quit: WeeChat 2.0.1
03/16 04:22:25*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/16 04:51:37*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tvpmgbohkoqkwfvc) left #autonomic-dev: Quit: Connection closed for inactivity
03/16 08:46:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lrmoacazsbmqxxdw, stoopkid: stoopkid)
03/16 11:25:28*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lrmoacazsbmqxxdw) left #autonomic-dev: Quit: Connection closed for inactivity
03/17 03:38:01*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 265 seconds
03/17 03:41:48*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 07:08:02*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 256 seconds
03/17 07:20:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 13:38:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/17 13:39:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 17:04:33*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 260 seconds
03/17 17:21:03*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 17:56:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 240 seconds
03/17 18:13:23*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 21:10:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-thmeuvykiwlfrpax, stoopkid: stoopkid)
#autonomic-dev> 03/22 14:47:54*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
              *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 20 days 11 hours 4 minutes 20 seconds ago
              *** Names: editable-koo stoopkid koo5[m] Deadhand
              *** End of /NAMES list.
03/22 14:48:08-ChanServ- [#mycroft] "Artificial intelligence for everyone"
03/22 14:48:16<koo5[m]> emacs will be emacs
03/22 14:50:49<stoopkid> how much overhead would it be to put chatlog into a git repo with a commit per line of chat?
03/22 14:58:10<editable-koo>for our two channels? i think this vps would handle it fine
03/22 14:58:24<editable-koo>besides, overhead over what
03/22 14:58:32<editable-koo>what for though?
03/22 15:01:09<stoopkid> overhead relative to just a text dump
03/22 15:02:31<stoopkid> just wondering about it
03/22 15:04:18<stoopkid> been thinking about how to decentralize social media with git
03/22 15:05:54<stoopkid> tweets/posts/chat-lines --> commits; user-logins --> digital signatures; central databases/indexes --> personal cloud, web-of-trust, DHT, whatever
03/22 15:10:36<stoopkid> basic pseudocode for getting the omni tx's: https://pastebin.com/8jErLRfH
03/22 15:11:24<editable-koo>ill just keep telling you that until we have a programming/shell/everything cnl, nobody can glue all the pieces together practically
03/22 15:12:07<stoopkid> that's part of it
03/22 15:14:12<editable-koo>alright, what api do we have for this?
03/22 15:16:24<stoopkid> omnicore i guess
03/22 15:27:43<stoopkid> > omnicore-cli -testnet "omni_listblocktransactions" 1288052
03/22 15:27:52<stoopkid> lists omni transactions on block 1288052
03/22 15:28:27<stoopkid> that particular block actually has an omni tx: https://www.blocktrail.com/tBTC/tx/418800ac937c83389a19d9731046d4619794f611bcd25e401676bf3a33f63b24
03/22 15:28:47<stoopkid> you can see down in the output scripts: OP_RETURN 6f6d6e69000000000000000200000000000003e8 
03/22 15:29:05<stoopkid> "6f6d6e69" ASCII hex for "omni"
03/22 15:33:07<stoopkid> omni_listblocktransactions gives you a list of tx ids but then we need to find the one that outputs to my address
03/22 15:34:01<stoopkid> well, the generalized version of that, i mean
03/22 15:38:32<stoopkid> alright and then:
03/22 15:38:38<stoopkid> > omnicore-cli -testnet "omni_gettransaction" "418800ac937c83389a19d9731046d4619794f611bcd25e401676bf3a33f63b24"
03/22 15:38:55<stoopkid> outputs JSON details about that tx
03/22 15:39:25<stoopkid> and then the element you're looking for in there is "referenceaddress"
03/22 15:45:43<stoopkid> there's only one omni output per omni tx so it's basically just: iterate over blocks and run `omnicore-cli -testnet "omni_listblocktransactions"  <block #>`, loop through the JSON array of txids you get, and run `omnicore-cli -testnet "omni_gettransaction" <txid>` and then grep for `^  \"referenceaddress\": \"<addr>\"` and if there's any results then this is one of the txs associated to the address so output that
03/22 15:46:35<stoopkid> grep, or, w/e; if i wrote it i'd use bash + grep
03/22 16:10:44<editable-koo>alright,..
03/22 16:44:31<editable-koo>what a hassle everything is
03/22 16:44:40<stoopkid> yep
03/22 16:53:44<stoopkid> https://pastebin.com/cSiwXXAR
03/22 16:54:23<stoopkid> seems to work for this address: 2NDGciY4XU6nA62jHVdZnqfUjXxUY6cGkg2
03/22 16:54:38<stoopkid> doesn't seem to work for my address 2NEyLPf1BXaZkJoVyy9WqSpWetufK2idYre though
03/22 16:54:54<editable-koo>well, my python definitely looks better
03/22 16:55:02<editable-koo>but its not finished
03/22 16:58:34<stoopkid> for address 2NDGciY4XU6nA62jHVdZnqfUjXxUY6cGkg2 see if you get:
03/22 16:58:41<stoopkid> 418800ac937c83389a19d9731046d4619794f611bcd25e401676bf3a33f63b24
03/22 16:58:49<stoopkid> 37dbe68258a1439041d528d8bd3d63082d1610a383d9aa300132d940ecd02ed8
03/22 17:01:25<editable-koo>at what block should i start scanning?
03/22 17:14:14<editable-koo>ok ill start from the top
03/22 17:15:32<editable-koo>re-cli -testnet "omni_listblocktransactions"  <block #>`, loo
              <editable-koo>p through the JSON array of txids you get, and run `omnicore-c
              <editable-koo>li -testnet "omni_gettransaction" <txid>` and then grep for `^
              <editable-koo>  \"referenceaddress\": \"<addr>\"` and if there's any results
              <editable-koo> then this is one of the txs associated to the address so outp
              <editable-koo>ut that
03/22 17:15:47<editable-koo>oops
03/22 17:16:08* koo5[m] sent a long message: koo5[m]_2018-03-22_21:17:31.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/YulTbJWudUnuxqdQxHOvunLv>
03/22 17:18:33<stoopkid> alright cool so its possibly just a bug in my code somewhere, try this addr: 2NEyLPf1BXaZkJoVyy9WqSpWetufK2idYre
03/22 17:21:17<koo5[m]> block 1262700 and still nothing
03/22 17:21:55<stoopkid> i think it'd be after block 1288040
03/22 17:22:22<stoopkid> https://www.blocktrail.com/tBTC/tx/ffbd4b46fd0c7488a23910454bf84b05ff31a3e83705ec35dbca8ddad0499f09
03/22 17:22:31<stoopkid> that's the block where i sent the tx to get the TOMNI
03/22 17:27:00<editable-koo>but is that an omni transaction?
03/22 17:27:41<editable-koo>i think my client doesnt think
03/22 17:37:11<stoopkid> that's not an omni tx that's where i sent some TBTC to moneyqman... in order to receive TOMNI in return, which should have come on some later tx
03/22 17:38:49<stoopkid> `omnicore-cli -testnet "omni_getbalance" "2NEyLPf1BXaZkJoVyy9WqSpWetufK2idYre" 1`
03/22 17:38:58<stoopkid> "balance": "100.00000000"
03/22 17:39:09<stoopkid> so, it's in there somewhere
03/22 17:47:18<editable-koo>ok, thats curious
03/22 17:48:44<stoopkid> can you paste your code? i wanna see where we're diverging
03/22 17:50:03* koo5[m] sent a long message: koo5[m]_2018-03-22_21:51:27.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/wqYBSgxFycktCGGYdTcvZTPI>
03/22 18:00:49<stoopkid> ah, we're only diverging on the starting block, i was starting at 1288040 and the first tx for 2NDGciY4XU6nA62jHVdZnqfUjXxUY6cGkg2 is on block 1288010
03/22 18:11:20<stoopkid> ok even more curious, when i just grep for the address in the output from "omni_gettransaction", i still don't find any tx's for it
03/22 18:13:02<koo5[m]> yea
03/22 18:14:12<koo5[m]> im also trying the getsto command, whatever that is, but it seems to be returning the save results like gettransaction
03/22 18:24:17<editable-koo>so, they dont have an explorer for the testnet?
03/22 18:29:31<stoopkid> not for omni
03/22 18:32:15<editable-koo>mkay, so, you have 100 tomni on 2NEyLPf1BXaZkJoVyy9WqSpWetufK2idYre, but
03/22 18:32:47<koo5[m]> but https://www.blocktrail.com/tBTC/address/2NEyLPf1BXaZkJoVyy9WqSpWetufK2idYre/transactions doesnt show any transaction after the three
03/22 18:33:14<stoopkid> right
03/22 18:33:54<stoopkid> that's what made me think originally that i hadn't even received the tomni yet
03/22 18:34:15<stoopkid> was waiting to see a 4th tx show up on blocktrail
03/22 18:54:24<editable-koo>maybe its some sort of asset distribution type of transaction?
03/22 18:54:27<stoopkid> https://www.blocktrail.com/tBTC/address/2NDGciY4XU6nA62jHVdZnqfUjXxUY6cGkg2/transactions
03/22 18:54:31<stoopkid> yea that's what i'm wondering
03/22 18:54:41<stoopkid> this one shows the same 8 tx's we're both getting
03/22 18:55:53<stoopkid> btw note the output of "omni_gettransaction" for the most recent tx there: 37dbe68258a1439041d528d8bd3d63082d1610a383d9aa300132d940ecd02ed8
03/22 18:56:04<stoopkid> "invalid transaction"
03/22 18:56:33<stoopkid> cause there's nothing in bitcoin stopping invalid omni txs from going onto the chain
03/22 18:57:04<stoopkid> it just doesn't get recognized as valid by omni nodes
03/22 18:57:44<stoopkid> in theory
03/22 18:58:10<editable-koo>what is this address, anothe address where you got some tomni?
03/22 18:58:37<stoopkid> no just the first address i found that was making omni txs
03/22 18:58:47<stoopkid> tomni*
03/22 19:04:54<stoopkid> ok so doesn't *exactly* match up with blocktrail, ofc, cause doesn't show regular tbtc tx's
03/22 19:12:53<stoopkid> alright well i sent dexx a summary of our results hopefully they'll look into it
03/22 19:13:56<editable-koo>cool
03/22 20:28:56<stoopkid> wrt cnl, i think it's less about natural language and more about making things intuitively composable
03/22 20:31:42<stoopkid> example: you wanna do "something" with every object in a list
03/22 20:31:50<stoopkid> for x in list {
03/22 20:31:53<stoopkid>  something(x);
03/22 20:31:54<stoopkid> }
03/22 20:33:04<stoopkid> like a fold
03/22 20:33:47<stoopkid> functional composability directed by the structure of the data
03/22 20:33:51<editable-koo>shrug
03/22 20:33:56<editable-koo>looks like python
03/22 20:34:25<stoopkid> yea, and lots of people like python
03/22 20:35:28<stoopkid> it makes things super easy like that
03/22 20:37:13<stoopkid> you could do the same thing with a GUI, especially since it's directed by the structure of the data and data-structures can be visually rendered
03/22 20:52:08<stoopkid> anyway, what i'm thinking with the social media is that using git would make a very straightforward way to store, verify, publish and keep track of social media feeds
03/22 20:53:35<stoopkid> basically trying to abstract out basic common features of social media and its looking like content published on any social media could be represented by a commit
03/22 21:06:24<stoopkid> content types work fine for end-users to filter and render differently, like a tweet content type vs. a fb post content type
03/22 21:06:32<stoopkid> vs something else entirely
03/22 21:07:20<stoopkid> obviously this requires everybody being able to access the code needed to filter and render different kinds of content
03/22 21:07:46<stoopkid> solution: everybody hosting content hosts it along with the code needed for processing that content
03/22 21:08:26<stoopkid> this is also what people used to call "having a website"
03/22 21:10:12<stoopkid> but with some more conveniences to make it act more like what current mainstream social media websites do
03/22 21:14:56<stoopkid> so, the idea is that the user's social media profile would basically be this git repo that stores a sort of "abstract web-site". it's got all the HTML/CSS/JS needed for rendering content, it's got all that user's content, it's got more code for actually replicating the client itself  (essentially when other users visit this user's "social media profile" there's an equivalent of "create an account" that allows them to
              <stoopkid> set up their own profile)
03/22 21:20:54<stoopkid> security becomes somewhat of an issue in that scenario but this can be solved by some straightforward measures even before we start talking about type-checking and stuff
03/22 21:23:18<stoopkid> basically: when i start looking closer at the applications i've traditionally been thinking to use autonomic for, autonomic seems like either overkill or the wrong set of tradeoffs for 99% of it
03/24 01:41:55*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/24 01:46:37<daemoz> koo5[m]: why puppex? I'm confused about how to maintain state.
03/24 02:27:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vrgtnpsxtcjxkeju) left #autonomic-dev: Quit: Connection closed for inactivity
03/24 02:53:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/24 02:54:12*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/24 05:54:08<koo5[m]> now im confused as well
03/24 06:06:06<daemoz> What do you mean
03/24 07:08:53<koo5[m]> ah you asked me why
03/24 07:09:00<koo5[m]> the thing is, i never said i wanted puppex
03/24 07:09:21<koo5[m]> i said xenial, by which i meant ubuntu
03/24 07:09:46<koo5[m]> i should have said it
03/24 07:10:28<koo5[m]> ubuntu server, i guess
03/24 11:27:11*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-meiqmnqfrkrelqbv, stoopkid: stoopkid)
03/24 14:16:20*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-meiqmnqfrkrelqbv) left #autonomic-dev: Quit: Connection closed for inactivity
03/24 19:10:40<daemoz> huh
03/24 19:10:41<daemoz> hahaha
03/24 19:11:10<daemoz> https://sourceforge.net/projects/puppex/
              <daemoz> This was first result and I just assumed.
03/24 19:11:27<daemoz> 'xenial puppex' or something
03/24 19:11:36<daemoz> You guess?
03/24 19:11:54<daemoz> Well whatever you guys want, it really doesn't matter to me.
03/24 19:12:18<daemoz> the ddns is up you're autonomic.mynetgear.com
03/24 19:12:54<daemoz> If you could let me know what you'd like today I can have that up.
03/24 19:13:22<daemoz> Any any backup policies you'd like.
03/24 20:06:54<koo5[m]> idk, either server, or xubuntu (desktop). 
03/24 20:07:34<koo5[m]> being able to vnc in may be useful sometimes
03/24 20:07:36<koo5[m]> can you flip a coin for us?
03/24 20:10:31<koo5[m]> http://releases.ubuntu.com/16.04.4/ubuntu-16.04.4-server-amd64.iso
03/24 20:11:11<koo5[m]> thanks
03/24 21:05:15<daemoz> I can't promise good results for vncing in but anything non-rich should be fine. we have fiber and cat6 all the way to the machine.
03/24 21:05:34<daemoz> (computer has no dedicated gpu)
03/24 21:06:20<daemoz> Okay, I'll pick one of those and get it set up.
03/25 00:31:39<daemoz> koo5[m]: you around?
03/25 00:38:17<daemoz> editable-koo:
03/25 03:54:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/25 03:54:31*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/25 09:52:27<koo5[m]> hey
03/25 09:52:32<koo5[m]> daemoz
03/26 17:41:55<editable-koo>sstrsrstrs
03/26 17:41:57*** [read:errno=104 from nil] 
03/26 17:42:04*** Disconnected
              *** Connecting...
03/26 17:42:05-Server Notice- *** Looking up your hostname...
              -Server Notice- *** Checking Ident
              -Server Notice- *** Couldn't look up your hostname
03/26 17:42:12-Server Notice- *** No Ident response
              *** [sasl.login from editable-koo (user@167.88.171.233)] sirdancealot
              *** SASL: You are now logged in as sirdancealot.
              *** SASL authentication successful
03/26 17:42:14*** Mode change: +Zi on editable-koo by editable-koo (server)
03/26 17:42:19*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
              *** Topic set by stoopkid on Fri Mar  2 02:43:39 2018, 24 days 13 hours 58 minutes 41 seconds ago
              *** Names: editable-koo stoopkid daemoz Deadhand koo5[m]
              *** End of /NAMES list.
03/26 17:43:13-ChanServ- [#mycroft] "Artificial intelligence for everyone"
03/26 18:22:28<koo5[m]> ohad is being charged with fraud?
03/26 18:24:16*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/26 18:24:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/26 18:29:35<stoopkid> woops, “exactly” was probably the wrong word there, i just meant that ohad or his project are being targeted by the SEC trying to label ICOs as securities fraud hence the delistings and other drama, even though ostensibly hes actively working on delivering the product thats people have invested in. Idk the details unfortunately but i want to steer way clear of anything that might give regulators a reason to want to
              <stoopkid> talk to me
03/26 18:30:45<koo5[m]> alright
03/26 19:33:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/26 19:33:27*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/26 23:11:53*** Nick change: stoopkid (uid137696@gateway/web/irccloud.com/x-dkaqyfhcfgpumjgx) is now known as stoopbob
03/27 09:15:37<stoopbob> dexx7--"Actually, the Omni Layer is balance based. The sender of a transaction is determined based on the script of first transaction input. I.e.: sending tokens to destination X results in X having a balance, which can be spend with any UTXO associated with X."
03/27 09:16:41<stoopbob> so apparently we don't even really need to worry about omni tx ids
03/27 09:17:05<stoopbob> alright, lemme test it out
03/27 13:05:36*** Nick change: stoopbob (uid137696@gateway/web/irccloud.com/x-dkaqyfhcfgpumjgx) is now known as stoopkid
03/27 17:19:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dkaqyfhcfgpumjgx) left #autonomic-dev: Quit: Connection closed for inactivity
03/27 17:39:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mmcoarnqfkzyqgzc, stoopkid: stoopkid)
03/27 18:54:40*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 264 seconds
03/27 18:59:50*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/27 19:49:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mmcoarnqfkzyqgzc) left #autonomic-dev: Quit: Connection closed for inactivity
03/28 08:05:31<daemoz> looks like you should be able to use that password and do something like this: https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2
03/28 08:44:34*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nqnyzhayjsycbytt, stoopkid: stoopkid)
03/28 11:08:26<stoopkid> daemoz: alright got the ssh certificate login set up, so u could maybe just disable the pw login
03/28 11:27:58* stoopkid trying to figure out how entropy is generated in bitcoin-cli getnewaddress
03/28 14:50:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nqnyzhayjsycbytt) left #autonomic-dev: Quit: Connection closed for inactivity
03/28 18:13:05*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03/28 18:14:01*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/28 19:37:13<daemoz> okay text passwords should be disabled.
03/28 19:37:26<daemoz> anyone want to let me know what all tools are needed?
03/29 00:25:54*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 265 seconds
03/29 01:05:07*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/29 01:26:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Quit: WeeChat 2.0.1
03/29 01:31:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/29 08:11:06<koo5[m]> well, im sure we're only gonna find out when we get down to doing something there, but some starters are mc htop tmux screen git wget jnettop iotop 
03/29 08:12:42<koo5[m]> emacs
03/29 11:32:32*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rutmxiepfpaxdkqc, stoopkid: stoopkid)
03/29 12:08:17*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
03/29 12:13:41<stoopkid> "Current page: 0 from 1157920892373161954235709850086879078528375642790749043826051631415181614943 pages."
03/29 12:14:29<stoopkid> http://www.allprivatekeys.com/allprivatekeys.php
03/29 12:47:56*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Remote host closed the connection
03/29 17:52:09*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rutmxiepfpaxdkqc) left #autonomic-dev: Quit: Connection closed for inactivity
04/07 06:16:39*** Disconnected
04/07 06:16:40*** Connecting...
04/07 06:17:28*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
              *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 1 month 6 days 2 hours 33 minutes 53 seconds ago
              *** Names: editable-koo koom daemoz stoopkid koo5[m] Deadhand
              *** End of /NAMES list.
#autonomic-dev> 07.04.18 07:21:20*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
                 *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 1 month 6 days 3 hours 37 minutes 45 seconds ago
                 *** Names: editable-koo koom daemoz stoopkid koo5[m] Deadhand
                 *** End of /NAMES list.
07.04.18 11:54:56*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
07.04.18 12:24:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
07.04.18 19:09:47*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
07.04.18 19:10:10*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.04.18 20:13:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
07.04.18 20:13:42*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.04.18 21:30:47*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 265 seconds
08.04.18 03:25:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
08.04.18 05:42:07*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
08.04.18 10:37:54*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
08.04.18 10:38:24*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
08.04.18 11:47:04*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
08.04.18 13:40:55*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
08.04.18 14:40:14*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
08.04.18 14:53:17*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
09.04.18 09:20:43*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.04.18 19:31:05*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
09.04.18 22:07:25*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Excess Flood
09.04.18 22:07:39*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
10.04.18 03:33:11*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 256 seconds
10.04.18 03:38:21*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
10.04.18 06:24:14*** Join: koom (~sirdancea@nat-simple11.techlib.cz, sirdancealot: koo5)
10.04.18 09:48:30*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 265 seconds
10.04.18 09:49:28*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
10.04.18 10:10:40*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 260 seconds
10.04.18 10:12:22*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
10.04.18 10:31:24*** Quit: koom (~sirdancea@nat-simple11.techlib.cz) left #autonomic-dev: Ping timeout: 240 seconds
10.04.18 14:13:25*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
10.04.18 17:10:12*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 265 seconds
11.04.18 06:04:08*** Join: koom (~sirdancea@95.46.32.147, sirdancealot: koo5)
11.04.18 06:45:09*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
11.04.18 06:45:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
11.04.18 06:45:34*** Quit: koom (~sirdancea@95.46.32.147) left #autonomic-dev: Ping timeout: 245 seconds
11.04.18 06:56:02*** Join: koom (~sirdancea@95.46.32.147, sirdancealot: koo5)
11.04.18 07:46:21*** Quit: koom (~sirdancea@95.46.32.147) left #autonomic-dev: Ping timeout: 260 seconds
11.04.18 17:51:54*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
11.04.18 18:42:50*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 265 seconds
12.04.18 05:35:28*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
12.04.18 06:11:03*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
12.04.18 13:41:23*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
12.04.18 15:41:07*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
12.04.18 15:57:02*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
12.04.18 16:08:50*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
12.04.18 23:56:10*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
13.04.18 03:20:50*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
13.04.18 04:48:36*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
13.04.18 04:50:07*** Quit: koom (~sirdancea@193.86.78.254) left #autonomic-dev: Remote host closed the connection
13.04.18 04:50:35*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
13.04.18 05:17:35*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
13.04.18 05:17:58*** Nick change: kook (~sirdancea@193.86.78.254) is now known as Guest26157
13.04.18 05:20:22*** Quit: koom (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 256 seconds
13.04.18 07:05:51*** Quit: Guest26157 (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 240 seconds
13.04.18 07:39:36*** Join: Guest26157 (~sirdancea@193.86.78.254, sirdancealot: koo5)
13.04.18 08:48:06<editable-koo>somebody was doing something on the vps in tmux and filled up the hdd?
13.04.18 08:48:54<editable-koo>logger stopped saving, but it seems it will resume now alright
13.04.18 08:49:46<editable-koo>here we go
13.04.18 08:51:52<editable-koo>btw, i have one month prepaid of yet another vps, for the haskell stuff, in case anyone wants it for anything
13.04.18 08:52:35<editable-koo>its not another "we-didnt-tell-you-the-IO-throughput-is-zero-HAHA" one
13.04.18 09:36:37<editable-koo>im reading on epigram now
13.04.18 09:40:38<editable-koo>im now at more or less the end of the agda tutorial, there was easy stuff towards the end, like records and modules, but im still stumped by the basics and when i attempt any exercise i either have no idea what's required, no idea how to go about it, or i get it wrong
13.04.18 09:40:47<editable-koo>not always but usually
13.04.18 09:41:45<editable-koo>second time in a coworking space now, it definitely helps with getting things done
13.04.18 10:54:42*** Quit: Guest26157 (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 265 seconds
13.04.18 13:28:05<stoopkid> editable-koo: i was on there the other day trying to mess with irssi i might've done something accidentally
13.04.18 13:30:42<stoopkid> so, you might skip the exercises if you don't know what they're asking for and just start trying to model/build stuff
13.04.18 14:05:47-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
13.04.18 14:05:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
13.04.18 14:57:55<editable-koo>maybe ill try some grammar modelling eventually, but for now im still stunned by everything
13.04.18 14:58:14<stoopkid> heh
14.04.18 04:18:38*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 265 seconds
14.04.18 06:02:56*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vqsgvetjyoffbnre) left #autonomic-dev: Quit: Connection closed for inactivity
14.04.18 09:37:35*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lwjyehlvdyzvexjd, stoopkid: stoopkid)
14.04.18 12:53:52*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
14.04.18 12:54:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
14.04.18 13:13:43-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
14.04.18 13:13:49*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
14.04.18 17:17:20*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
15.04.18 00:52:34<stoopkid> koo5[m]: i need to resync my omni node and then let's test out the trustless exchange
15.04.18 19:57:00*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Read error: Connection reset by peer
15.04.18 19:59:18*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
16.04.18 07:17:50-SaslServ- koom!~sirdancea@94.230.153.108 has just authenticated as you (sirdancealot)
16.04.18 07:17:56*** Join: koom (~sirdancea@94.230.153.108, sirdancealot: koo5)
16.04.18 07:18:15*** Quit: koom (~sirdancea@94.230.153.108) left #autonomic-dev: Remote host closed the connection
16.04.18 07:18:36-SaslServ- koom!~sirdancea@94.230.153.108 has just authenticated as you (sirdancealot)
16.04.18 07:18:41*** Join: koom (~sirdancea@94.230.153.108, sirdancealot: koo5)
16.04.18 07:28:04-SaslServ- kook!~sirdancea@94.230.153.108 has just authenticated as you (sirdancealot)
16.04.18 07:28:10*** Join: kook (~sirdancea@94.230.153.108, sirdancealot: koo5)
16.04.18 07:28:34*** Nick change: kook (~sirdancea@94.230.153.108) is now known as Guest82185
16.04.18 07:30:18*** Quit: koom (~sirdancea@94.230.153.108) left #autonomic-dev: Ping timeout: 240 seconds
16.04.18 07:37:10<koo5[m]> alright
16.04.18 08:38:11*** Quit: Guest82185 (~sirdancea@94.230.153.108) left #autonomic-dev: Ping timeout: 264 seconds
16.04.18 09:56:21-SaslServ- koom!~sirdancea@94.230.153.108 has just authenticated as you (sirdancealot)
16.04.18 09:56:26*** Join: koom (~sirdancea@94.230.153.108, sirdancealot: koo5)
16.04.18 10:55:10*** Quit: koom (~sirdancea@94.230.153.108) left #autonomic-dev: Ping timeout: 240 seconds
16.04.18 11:15:48<stoopkid> are you still synced on test-net? i'm at block 722855/1289704
16.04.18 11:23:22<stoopkid> (that's using bitcoin-cli to check though so isn't accounting for omni-layer stuff)
16.04.18 11:25:22*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
16.04.18 11:25:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
16.04.18 11:56:47*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 264 seconds
16.04.18 12:06:00*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
16.04.18 17:12:53<koo5[m]> 1293201
16.04.18 17:12:54<koo5[m]> seems i am
16.04.18 17:14:41<stoopkid> can you do `omnicore-cli "omni_getbalance" "2MxKgMx5ZfbohYpbcPogF3kPcpEi252hr9e" 1`
16.04.18 17:16:04<stoopkid> woos: `omnicore-cli -testnet "omni_getbalance" "2MxKgMx5ZfbohYpbcPogF3kPcpEi252hr9e" 1`
16.04.18 17:16:44* koo5[m] sent a long message: koo5[m]_2018-04-16_21:18:31.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/MMKcNcvlTeyNFgVMcsHdGEYh>
16.04.18 17:17:36<stoopkid> alright thanks, does this one have a balance of 0? 2NEyLPf1BXaZkJoVyy9WqSpWetufK2idYre
16.04.18 17:18:11<koo5[m]> yea
16.04.18 17:20:34<stoopkid> alright cool so that all works
16.04.18 17:23:01<stoopkid> alright so for the exchange, set up two addresses, use a TBTC faucet to get TBTC to one of the addresses and send me the other for making a multisig, and then i'll send you back my addr and the multisig addr so you can verify / make a watching wallet / w/e
16.04.18 17:27:02<koo5[m]> should i generate two adressess in one wallet?
16.04.18 17:28:21<stoopkid> you don't need multiple wallets but also there's nothing prohibiting it, it's all address-based and wallets are just for managing addresses so whatever's gonna be convenient for you
16.04.18 17:29:58<stoopkid> wallet could just be a piece of paper with your priv-keys and p2sh/p2wsh scripts written on it
16.04.18 17:40:39<koo5[m]> ok
16.04.18 17:43:17<koo5[m]> ok so heres the other:  
16.04.18 17:43:18<koo5[m]> myqGuyZfEDCmxh1iKfTSJY4rb7DV5vmrja
16.04.18 17:56:57<stoopkid> hrm, hadn't thought about whether you could use a multisig addr as one of the factors in another multisig addr
16.04.18 17:57:10<stoopkid> bitcoin-cli doesn't seem to like it when using the default addmultisigaddress command
16.04.18 17:57:31<stoopkid> oh well i'll keep it simple for now and check that out later
16.04.18 18:00:06<stoopkid> error message "no full public key for address myqGuyZfEDCmxh1iKfTSJY4rb7DV5vmrja"
16.04.18 18:08:05<stoopkid> ok so, run `bitcoin-cli -testnet validateaddress "myqGuyZfEDCmxh1iKfTSJY4rb7DV5vmrja"` and then send me the value of the "pubkey" field, i need to run `bitcoin-cli -testnet importpubkey "<that value>"` in order to build the multisig addr from it
16.04.18 18:09:26<koo5[m]> 02bfa6f648441d1aad8b73367b6a33592a2583c80de1fb41207b21703036bf0c97
16.04.18 18:15:14<koo5[m]> im probably gonna fall asleep
16.04.18 18:17:03<stoopkid> that's fine we can run it tomorrow, i'll have everything ready to go
16.04.18 19:19:58<stoopkid> alright i've got everything pretty much ready to go so whenever you're ready tomorrow
16.04.18 20:07:59*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-nvmtsvpcgbfocxpk) left #autonomic-dev: Ping timeout: 256 seconds
17.04.18 01:40:19*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hlyhauvzatfjname, (unauthenticated): @koo5:matrix.org)
17.04.18 02:07:35<koo5[m]> here
17.04.18 02:20:28<stoopkid> my address: 2MyjvuFQQy3GU9SiUMwbavykdttvFH9y3nk
                 <stoopkid> my pubkey: 02456f22071f467bf3907090fe0b18e0af23211f4280e48dcde31da460e21cc032
                 <stoopkid> multisig escrow addr: 2NCU72KRds6b9RqCUA76WbbJE5GLj32eunz
17.04.18 02:21:05<stoopkid> run the following: `bitcoin-cli -testnet importpubkey "02456f22071f467bf3907090fe0b18e0af23211f4280e48dcde31da460e21cc032"`
17.04.18 02:22:14<stoopkid> then run: `bitcoin-cli -testnet addmultisigaddress 2 ["2MyjvuFQQy3GU9SiUMwbavykdttvFH9y3nk","myqGuyZfEDCmxh1iKfTSJY4rb7DV5vmrja"]`
17.04.18 02:23:29<stoopkid> verify that you get the same multisig address; you can hold on to that redeemScript value if you want, for convenience, it's not necessary though (it can be regenerated entirely from public data that we've already revealed in this chat)
17.04.18 02:24:07<stoopkid> 5221<my_pubkey>21<your_pubkey>52ae
17.04.18 02:25:42<stoopkid> if you get JSON errors let me know, different shells will clobber it differently
17.04.18 03:02:51<stoopkid> once you get that done, sign this and send it back to me: https://pastebin.com/B4zmycB4
17.04.18 03:04:41<stoopkid> this is my refund tx (unsigned); the tx input it references is the one that i've created for sending my TOMNI to the escrow addr (that tx has been signed but hasn't been broadcast to the network yet)
17.04.18 03:05:48<stoopkid> once you sign it and send it back to me, i'm safe to send my TOMNI to the escrow addr, with the knowledge that i can recover my funds by adding the second signature to the refund tx and broadcasting it
17.04.18 03:11:39<stoopkid> you'll need to gather a couple pieces of data in order to sign with the command line: my unsigned tx hex data from the pastebin <tx_hex>, the scriptPubKey <scriptPubKey>, the P2SH redeemScript <redeemA>, the P2WSH redeemScript <redeemB>, the txid <prv_txid> of the UTXO you're referencing and the index & amount of that UTXO <vout> & <amount>, and the private key for your factor of the multisig <privkey>
17.04.18 03:13:16<stoopkid> you can get <scriptPubKey>, <redeemA> and <redeemB> from the output of `bitcoin-cli -testnet validateaddress "<escrow_addr>"`
17.04.18 03:13:41<stoopkid> <scriptPubKey> = "scriptPubKey" field
17.04.18 03:13:51<stoopkid> <redeemA> = "hex" field
17.04.18 03:14:11<stoopkid> <redeemB> = "embedded.hex" field
17.04.18 03:14:45<stoopkid> the command-line for signing is kinda horrendous but here's what it is:
17.04.18 03:18:24<stoopkid> `bitcoin-cli -testnet signrawtransaction <tx_hex> [{"txid":"<prv_txid>","vout":<vout>,"scriptPubKey":"<scriptPubKey>","redeemScript":"<redeemA>","amount":<amount>},{"txid":"<prv_txid>","vout":<vout>,"scriptPubKey":"<scriptPubKey>","redeemScript":"<redeemB>","amount":<amount>}] ["<privkey>"]`
17.04.18 03:19:40<stoopkid> oh wait i'm supposed to provide you with a couple of these fields
17.04.18 03:21:59<stoopkid> <prv_txid> = 1176859be272b5761b84454cc62fad0aa07b07e3e89c21d18bd006a15522aefc
17.04.18 03:22:09<stoopkid> <vout> = 0
17.04.18 03:23:50<stoopkid> <amount> = 0.993
17.04.18 03:27:50<stoopkid> so then you'll do the same thing, craft a raw bitcoin transaction to send your TBTC to the escrow address, sign it, but don't broadcast it
17.04.18 03:28:56<stoopkid> use `bitcoin-cli -testnet decoderawtransaction` on the hexdata you get from the output of signrawtransaction to get the txid
17.04.18 03:30:07<stoopkid> txid is supposed to just be a byte-reversed sha256(sha256(<hex_data>)) but i haven't gotten that to work yet so just use decoderawtransaction unless you know something i don't about how to calculate the txid from that double-sha
17.04.18 03:31:10<stoopkid> you need to know that txid to use it as an input for your refund tx
17.04.18 03:32:17<stoopkid> create a raw refund tx from the escrow address back to your personal addr (or some other addr under your full control, it doesn't have to be the same one that you originally received the TBTC to, it's just wherever you want to receive your refund)
17.04.18 03:33:19<stoopkid> don't sign it, just send me the unsigned <tx_hex>, <prv_txid>, <vout>, and <amount> and i'll sign it and send it back to you
17.04.18 03:33:59<stoopkid> then you can sign & send it at your own discretion (if you signed it before sending it to me then i could potentially annoyingly waste your time by sending off your refund tx after you send your funds to the escrow)
17.04.18 03:35:13<stoopkid> and then after that's all done, we're just one multisig tx away from a trustless exchange
17.04.18 03:35:37<stoopkid> alright so, give that a shot, let me know if you've got any q's
17.04.18 03:48:38<stoopkid> the main risk in this method (especially at this stage of its "development") is human error in crafting the refund tx's, i.e. you don't want to find out that you screwed something up in your refund tx after you've already sent your funds to the escrow addr
17.04.18 03:49:20<stoopkid> but we're on testnet so don't worry about that for now if we screw something up we'll just get some more coin from the faucet and try it again
17.04.18 03:50:08<stoopkid> we can work on making it fool-proof after the basic concept is demonstrated
17.04.18 04:47:00<stoopkid> oy i really hope this is just a display error: https://www.omniwallet.org/explorer/inspector?view=87334787a7af66b1b86bbe07b7c17e907860fa213407f54bfe10b734cc4018ce
17.04.18 04:47:17<stoopkid> specifically the "to_address: (null)"
17.04.18 04:48:03<stoopkid> https://www.blocktrail.com/BTC/tx/87334787a7af66b1b86bbe07b7c17e907860fa213407f54bfe10b734cc4018ce#tx_messages
17.04.18 04:48:35<stoopkid> but, compare with what i did on testnet: https://www.blocktrail.com/tBTC/tx/cb3cc827a392779f6b71c667326e262ac72cc0cdf4cb37565b9e0f19d7b042cf
17.04.18 04:48:42<stoopkid> same thing
17.04.18 04:49:00<stoopkid> unfortunately omniwallet explorer doesn't show testnet stuff so i can't compare on that end
17.04.18 04:53:37<stoopkid> so hopefully this is just a matter of me using a P2SH-P2WSH address and it getting a display error, i.e. trying some address-based command and getting some error "this is not a bitcoin address" (because it's a script hash, not an address)
17.04.18 04:59:10<stoopkid> anyway i'm still resyncing to main net as well, so, if you're still synced could you run "omni_getbalance" on 3FAGPGr3Tb58vtovkgBQNAS4StrHThJRtu (might have to wait a bit for confirmations, not sure)
17.04.18 05:01:17<stoopkid> oh nvm since i'm on main net now there's web explorers i can reference, and alright sure enough, it went through: https://omniexplorer.info/search/3FAGPGr3Tb58vtovkgBQNAS4StrHThJRtu
17.04.18 05:01:54<stoopkid> and the old addr is now at 0: https://omniexplorer.info/search/121uuZtq1wki13MHXWPigNWxYRjKHqUEyX; ok everything seems to be working as expected
17.04.18 05:04:25<stoopkid> ok that was final test i was running to make sure we can do P2SH-P2WSH multisig agoras txs without problems on main net; success; so, we can go ahead and set up that main net multisig for nilli
17.04.18 05:18:45<stoopkid> i gotta say, the whole thing got pretty overwhelming for a while, once you start hitting problems and trying to debug them you start missing the forest for trees and getting burnt out
17.04.18 05:19:59<stoopkid> but now, with the privilege of hindsight, i do think it's all pretty straight-forward & manageable, even working down at the level of byte-manipulations like i've been doing
17.04.18 05:31:16<stoopkid> on the other hand, kind of amazing i haven't screwed up and sent my funds off into a black-hole or something
17.04.18 05:31:56<stoopkid> (amazing of bitcoin, not of me, lol)
17.04.18 05:33:41<stoopkid> iow, amazing that every step of the way, the bitcoin network has largely just prevented me from shooting myself in the foot rather than actively facilitating my doing so (which is the opposite of what i was expecting / what people usually say about it)
17.04.18 05:40:15<stoopkid> only way i've really screwed up so far (aside from taking too long to do things) is accidentally sending like ~$10 as a tx fee when the avg tx fee was more on the order of 10 cents
17.04.18 05:42:02<stoopkid> was doing .001 tx fees on every testnet tx, then on main-net i did the same out of habit, forgetting to check the average tx costs and calculate an appropriate fee
17.04.18 05:43:59<stoopkid> oh well, very small price to pay relative to the reward of ensuring that my funds are relatively secured for further spending
17.04.18 05:46:35<stoopkid> interesting thing here: composing your txs at the level of byte-strings, it's pretty much all the same set of tasks that go into writing a machine-code program at the level of byte-strings
17.04.18 05:49:07<stoopkid> iow, you could use a basic assembler for both activities, or make an assembler with the intention that it could be used for either
17.04.18 10:05:44<koo5[m]> can i use omnicore-cli everywhere?
17.04.18 10:07:49<stoopkid> not sure, you can try it though, i think omnicore-cli might just pass the basic non-omni commands onto the bitcoind instance it spins up in the background
17.04.18 10:09:40<koo5[m]> airight ill try
17.04.18 10:12:53<stoopkid> at this stage of the exchange process all you're doing is making/signing bitcoin tx's though so idk that there's anything to be gained from using omnicore
17.04.18 10:14:51<koo5[m]> i just dont have pure bitcoin client
17.04.18 10:16:39<stoopkid> `bitcoin-cli -testnet getblockchaininfo` doesn't return anything (or returns some kind of rpc authentication failure error)?
17.04.18 10:17:44<stoopkid> afaict omni client comes packaged with bitcoin client and spins up an instance of bitcoind that it uses as reference, and you can talk directly to bitcoind through bitcoin-cli even if you're just running the omni node
17.04.18 10:17:55<stoopkid> at least, that's what i've been doing
17.04.18 10:19:55<stoopkid> and afaict this hasn't caused any problems for the omni side of things
17.04.18 10:20:19* koo5[m] sent a long message: koo5[m]_2018-04-17_14:22:06.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/kwFEEsDftPIDepkkEoeHvSyV>
17.04.18 10:21:37<koo5[m]> ill get bitcoin-cli
17.04.18 10:22:23<stoopkid> oh woops, one sec, i made a new addr because addmultisigaddress didn't like using a multisig as one of the factors, forgot to send that over
17.04.18 10:31:04<stoopkid> wait, no, i didn't do that, because i didn't get that error
17.04.18 10:33:37<koo5[m]> same result with bitcoin-cli
17.04.18 10:35:13<stoopkid> hrm..
17.04.18 10:36:05<stoopkid> try quotes outside the JSON array as well?
17.04.18 10:41:16<stoopkid> ah, hrm, i see what it did, it gave me a P2WPKH addr instead of the regular P2PKH that i was expecting.. not sure how to control that
17.04.18 10:52:16<stoopkid> oy, well, alright, i guess i'm gonna start over with a new address
17.04.18 10:54:27<stoopkid> you can find the actual address from the output of validateaddress (or, i can anyway, cause i have the required info), but, all the tx stuff i've crafted is based on this script-hash instead of the key-hash, so, unless we know what's happening on your end to prevent it from going through..
17.04.18 11:23:16<stoopkid> hrm, this is annoying
17.04.18 11:23:59<stoopkid> i've never had a problem using these addresses to make multisigs
17.04.18 11:26:07<stoopkid> i try to extract the regular address from one of these witness_v0_keyhash addresses, no luck
17.04.18 11:27:42<stoopkid> ok so, `bitcoin-cli -testnet importpubkey "02456f22071f467bf3907090fe0b18e0af23211f4280e48dcde31da460e21cc032"` worked?
17.04.18 11:29:25<stoopkid> if so, do `bitcoin-cli -testnet validateaddress "2MyjvuFQQy3GU9SiUMwbavykdttvFH9y3nk"` and paste me the results
17.04.18 11:31:03<stoopkid> might need you to run a slightly different command with some extra pieces of data that bitcoin might need to properly process the address: https://bitcoin.org/en/developer-reference#importmulti
17.04.18 11:57:56<stoopkid> hrmmm....
17.04.18 11:57:57<stoopkid> https://bitcointalk.org/index.php?topic=3225732.msg33558703#msg33558703
17.04.18 11:58:42<stoopkid> that can't be right though, i've used these "nested segwit" addresses as the factors for all my multisigs
17.04.18 12:00:57<stoopkid> apparently a solution though: https://bitcointalk.org/index.php?topic=3225732.msg33577047#msg33577047
17.04.18 12:02:27<stoopkid> funny how arbitrary updates to the nature of financial instruments is part of what led us easily into the big recession and yet we're not learning anything as a species...
17.04.18 12:13:40<stoopkid> so, it's definitely partially supported, but, idk what to make of that; maybe some updates have come out in between that thread and now, i know they just recently added a lot more support for the segwit stuff, but, let's avoid that for now since i've got a method for generating the "legacy" addresses now
17.04.18 12:28:46<stoopkid> ok starting over:
17.04.18 12:28:58<stoopkid> my addr: mq7fmjpbt4mLh8HQMhCR8sdQd4MdXu3fiP
17.04.18 12:29:13<stoopkid> my pubkey: 02d91b0703d2bf64f9dc08cc45732e33cef05c7df222fb9f9ccb61013e14c5b93e
17.04.18 12:29:38<stoopkid> multisig escrow addr: 2NBBSexjUfwby3oqvfeSNPWeYmqDagNNPUe
17.04.18 12:32:08<stoopkid> ok so do the `importpubkey`, `addmultisigaddress` (switching my 2Myj.. addr for the new one; don't switch the order), and then verify that you get the same multisig addr
17.04.18 12:44:44<stoopkid> i gotta go for a bit so this might have to extend to tomorrow, but see if you can get all that working and then see if you can go through the steps up through creating a refund tx for me to sign
17.04.18 16:38:42<koo5[m]> addmultisigaddress returns 2NAaAV9tuYegcaxpgJ1ADVjTnE7sFrNaPvW
17.04.18 16:43:08-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
17.04.18 17:25:41*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
17.04.18 17:26:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.04.18 18:44:06-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
17.04.18 18:44:13*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
17.04.18 21:24:44<editable-koo>logger going no space left on device again, i suspect this wasnt your fault, its the shitty vps
17.04.18 21:32:16<koo5[m]> so, err, im stuck on "verify that you get the same multisig address", same as what?
17.04.18 21:50:33<koo5[m]> as 2NBBSexjUfwby3oqvfeSNPWeYmqDagNNPUe? that didnt work out then
17.04.18 21:50:42<koo5[m]> no sex for me
17.04.18 22:14:45*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
18.04.18 03:56:07-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
18.04.18 03:56:12*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
18.04.18 04:14:15<koo5[m]> koom@koom-KVM ~/Downloads> ~/Downloads/omnicore-0.3.0/bin/omnicore-cli -testnet importpubkey "02d91b0703d2bf64f9dc08cc45732e33cef05c7df222fb9f9ccb61013e14c5b93e"
18.04.18 04:14:16<koo5[m]> koom@koom-KVM ~/Downloads> ~/Downloads/bitcoin-0.16.0/bin/bitcoin-cli -testnet addmultisigaddress 2 [\"mq7fmjpbt4mLh8HQMhCR8sdQd4MdXu3fiP\",\"myqGuyZfEDCmxh1iKfTSJY4rb7DV5vmrja\"]
18.04.18 04:14:17<koo5[m]> 2NAaAV9tuYegcaxpgJ1ADVjTnE7sFrNaPvW
18.04.18 04:21:55<koo5[m]> same result with bitcoin-cli in the first command
18.04.18 06:37:39*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 265 seconds
18.04.18 08:26:58<stoopkid> what's the result of `bitcoin-cli -version` ?
18.04.18 08:40:55<stoopkid> i get the 2NAaAV9tuYegcaxpgJ1ADVjTnE7sFrNaPvW addr when i run `bitcoin-cli -testnet addmultisigaddress 2 "[\"mq7fmjpbt4mLh8HQMhCR8sdQd4MdXu3fiP\",\"myqGuyZfEDCmxh1iKfTSJY4rb7DV5vmrja\"]" "" legacy`
18.04.18 08:43:46<stoopkid> https://bitcoin.org/en/release/v0.16.0
18.04.18 08:44:26<stoopkid> "Bitcoin Core 0.16.0 introduces full support for segwit in the wallet and user interfaces. A new -addresstype argument has been added, which supports legacy, p2sh-segwit (default), and bech32 addresses. It controls what kind of addresses are produced by getnewaddress, getaccountaddress, and createmultisigaddress. A -changetype argument has also been added, with the same options, and by default equal to -addresstype, to
                 <stoopkid> control which kind of change is used."
18.04.18 08:44:35<stoopkid> "A new address_type parameter has been added to the getnewaddress and addmultisigaddress RPCs to specify which type of address to generate. A change_type argument has been added to the fundrawtransaction RPC to override the -changetype argument for specific transactions."
18.04.18 08:45:09<stoopkid> "p2sh-segwit (default)"
18.04.18 08:45:28<stoopkid> exactly what i'm running into
18.04.18 08:45:43<stoopkid> but not causing problems for me because "Bitcoin Core 0.16.0 introduces full support for segwit in the wallet and user interfaces. "
18.04.18 08:46:30<stoopkid> and i'm running "Bitcoin Core RPC client version v0.16.0.0-g4b4d7eb255"
18.04.18 08:57:24<koo5[m]> Cool
18.04.18 08:57:43<koo5[m]> Ill be back at the computer in the evening
18.04.18 08:59:33<stoopkid> sounds good
18.04.18 15:27:09*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lwjyehlvdyzvexjd) left #autonomic-dev: Quit: Connection closed for inactivity
18.04.18 17:18:42*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-itlpnyuittfkekau, stoopkid: stoopkid)
18.04.18 19:47:09*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-itlpnyuittfkekau) left #autonomic-dev: Quit: Connection closed for inactivity
18.04.18 21:56:11*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
18.04.18 21:56:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
19.04.18 03:12:30-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
19.04.18 03:12:40*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
19.04.18 03:16:40<koo5[m]> sorry i was too tired yesterday
19.04.18 03:23:53<koo5[m]> hmm
19.04.18 03:52:40*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
19.04.18 03:55:27-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
19.04.18 03:55:37*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
19.04.18 03:57:17*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
19.04.18 03:57:35-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
19.04.18 03:57:41*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
19.04.18 04:01:49<koo5[m]>  Warning: unknown new rules activated (versionbit 1)
                 <koo5[m]> bitcoin-qt
19.04.18 04:03:44<koo5[m]> ok, got sex
19.04.18 04:04:12<koo5[m]> and redeemScript now
19.04.18 04:05:23<koo5[m]> i already had 0.16's, but had to let bitcoin-qt run and process the rule changes i guess
19.04.18 04:23:16*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
19.04.18 09:39:59-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
19.04.18 09:40:05*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
19.04.18 09:51:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hzzbkecqdlpivhvm, stoopkid: stoopkid)
19.04.18 09:51:26<editable-koo>hrrm whats my pubkey?
19.04.18 09:52:11<stoopkid> it's the "pubkey" field from the output of `bitcoin-cli -testnet validateaddress "myqGuyZfEDCmxh1iKfTSJY4rb7DV5vmrja"`
19.04.18 11:18:06<editable-koo>oh, thanks
19.04.18 12:17:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
19.04.18 12:17:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
19.04.18 13:04:21<editable-koo>re sha's, i heard bitcoin uses some weird endianness
19.04.18 13:20:06* koo5[m] sent a long message: koo5[m]_2018-04-19_17:21:56.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/lAqtDcGIHXVUVDAFznqYCjTU>
19.04.18 13:20:48<editable-koo>lets write a script for this
19.04.18 13:30:09<stoopkid> alright i'll be home in a bit and then i'll see if i can add the second sig and then we'll script this up
19.04.18 13:37:19<koo5[m]> https://i.imgur.com/KKKnlcm.jpg
19.04.18 13:52:46<stoopkid> more like things deeply wrong with machines
19.04.18 17:56:36<editable-koo>sketching the script
19.04.18 17:57:39<stoopkid> cool, just got home and tried to add my sig but didn't work, i'll see if i can figure out why
19.04.18 18:27:21<koo5[m]> https://github.com/koo5/hackery2/blob/master/src/hackery2/btc/trustless_exchange.py
19.04.18 19:38:18* stoopkid still trying to figure it out
19.04.18 19:41:53<stoopkid> when i try to add the second signature i'm getting a "Signature must be zero for failed CHECK(MULTI)SIG operation"
20.04.18 03:25:59<koo5[m]> Which step is that, trying to sign my refund tx?
20.04.18 07:14:06<stoopkid> trying to add the second signature to my refund tx yea
20.04.18 18:38:51*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
20.04.18 18:39:42*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.04.18 18:51:25*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 246 seconds
20.04.18 20:00:29*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hzzbkecqdlpivhvm) left #autonomic-dev: Quit: Connection closed for inactivity
21.04.18 06:41:58-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
21.04.18 06:42:14*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
21.04.18 08:49:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nikduzljgdppdewf, stoopkid: stoopkid)
21.04.18 09:25:06*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 248 seconds
21.04.18 12:18:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nikduzljgdppdewf) left #autonomic-dev: Quit: Connection closed for inactivity
21.04.18 12:34:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-drtqvysxdnnxxdwh, stoopkid: stoopkid)
21.04.18 17:56:05*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
22.04.18 03:06:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
22.04.18 04:19:21*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
22.04.18 06:28:15*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
22.04.18 09:42:08*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
22.04.18 10:05:37*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 248 seconds
22.04.18 12:20:49*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
22.04.18 12:27:19*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hlyhauvzatfjname) left #autonomic-dev: Ping timeout: 258 seconds
22.04.18 13:34:42*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
22.04.18 14:31:53*** Join: koom (~sirdancea@37-48-48-55.tmcz.cz, sirdancealot: koo5)
22.04.18 14:32:26*** Quit: koom (~sirdancea@37-48-48-55.tmcz.cz) left #autonomic-dev: Client Quit
22.04.18 15:32:30*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-bmarglbdserlvsrl, (unauthenticated): @koo5:matrix.org)
22.04.18 22:41:08*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
22.04.18 22:41:54*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
23.04.18 01:46:58*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
23.04.18 01:47:17*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.04.18 04:18:32*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-drtqvysxdnnxxdwh) left #autonomic-dev: Quit: Connection closed for inactivity
24.04.18 07:07:26*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 256 seconds
24.04.18 07:09:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.04.18 10:52:30*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wdcomuaenfulkmjy, stoopkid: stoopkid)
24.04.18 11:05:09*** Join: koom (~sirdancea@nat-simple11.techlib.cz, sirdancealot: koo5)
24.04.18 12:17:45*** Quit: koom (~sirdancea@nat-simple11.techlib.cz) left #autonomic-dev: Ping timeout: 264 seconds
24.04.18 19:28:43*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.04.18 19:28:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 256 seconds
25.04.18 05:03:47<koo5[m]> https://i.redd.it/5izlc7qpovt01.jpg
25.04.18 05:15:54<daemoz_> hahaha
25.04.18 06:41:02*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
25.04.18 06:41:27*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
25.04.18 11:05:20*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-bmarglbdserlvsrl) left #autonomic-dev: Ping timeout: 256 seconds
25.04.18 12:15:53*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-ogepxrlrwzwotazg, (unauthenticated): @koo5:matrix.org)
25.04.18 22:13:43*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-ogepxrlrwzwotazg) left #autonomic-dev: Ping timeout: 256 seconds
26.04.18 04:48:37*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hyqawgwvgpjsfxyw, (unauthenticated): @koo5:matrix.org)
26.04.18 05:40:22*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hyqawgwvgpjsfxyw) left #autonomic-dev: Ping timeout: 240 seconds
26.04.18 06:18:46*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-edvfudthftrqfoky, (unauthenticated): @koo5:matrix.org)
26.04.18 11:27:11*** Nick change: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) is now known as daemoz
26.04.18 17:44:52*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
26.04.18 17:45:05*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
26.04.18 19:19:21*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
26.04.18 19:20:17*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
27.04.18 03:15:58*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
27.04.18 03:16:38*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
27.04.18 05:34:19*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 265 seconds
27.04.18 05:34:33*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
27.04.18 14:00:54*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
27.04.18 14:01:18*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
27.04.18 14:37:34<stoopkid> hey daemoz do i have this right? "ssh -p 2222 stoopkid@autonomic.mynetgear.com", i should still have all the same ssh keys in place i think cause i haven't changed anything there but it's just hanging when i try to connect
27.04.18 15:39:13*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
27.04.18 15:56:03*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
27.04.18 15:59:09*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 264 seconds
27.04.18 16:09:47*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
27.04.18 18:22:04<daemoz> stoopkid: let me look into that
27.04.18 18:22:10<daemoz> we had some trouble with the isp recently.
27.04.18 18:28:15<stoopkid> np, just checking up on everything and making sure ive got all my notes right
27.04.18 18:29:10<daemoz> Looks like it's an issue with the ddns
27.04.18 18:30:16<daemoz> try connecting to this address, same port
27.04.18 18:30:17<daemoz> 71.212.39.99
27.04.18 18:33:01<stoopkid> i probably should've tried that initially heh, still hanging though
27.04.18 18:34:14<daemoz> hmm
27.04.18 18:34:50<stoopkid> i'm not getting any response when i ping that IP
27.04.18 18:34:56<daemoz> who
27.04.18 18:35:00<daemoz> lol oops
27.04.18 18:36:35<daemoz> 71.212.132.78 < try this address
27.04.18 18:37:53<stoopkid> nice that worked, thanks
27.04.18 18:39:18<daemoz> sweet.
27.04.18 18:52:06<stoopkid> koo5[m]: i'm gonna fix up /var/www/html some on 167.88.171.233
27.04.18 18:56:49<stoopkid> well, nvm scratch that
27.04.18 18:58:14<stoopkid> so, i'm putting all of our project resources as submodules of a single master repo so that it's easy to replicate the entire thing to an arbitrary node
27.04.18 18:59:33<stoopkid> right now though a lot of what's in this repo is already being stored on 167.88.171.233, in the git repos that this master repo is indirectly referencing
27.04.18 19:02:03<stoopkid> ah that's right, these are just more remotes, just on the same machine
27.04.18 19:03:31<stoopkid> alright bbiab
28.04.18 03:31:33<koo5[m]> So, err, how do you prove something by going into an infinite loop?
28.04.18 04:17:11*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
28.04.18 06:26:21<stoopkid> circular reasoning
28.04.18 06:47:50<koo5[m]> idk guys, im really trying to understand all this
28.04.18 06:56:11<stoopkid> i mean, that's what it's called when a proof contains a repeating loop and/or fails to terminate
28.04.18 06:57:02<koo5[m]> ok, but how does following f a = f a prove f a?
28.04.18 06:57:59<stoopkid> assume f : A -> B, then f a = f a is an inflooping "proof" of B
28.04.18 06:58:28<stoopkid> generally we would reject this as not a "real" proof though
28.04.18 07:00:08<stoopkid> or i guess it's an inflooping proof of A -> B, since this f a = f a would be defining f : A -> B
28.04.18 07:08:44<koo5[m]> " to ensure that we cannot prove a theorem like A → B by just writing a function that takes "
28.04.18 07:08:50<koo5[m]> yea not what makes sense, i think
28.04.18 07:08:55<koo5[m]> *now
28.04.18 07:08:59<koo5[m]> *now that
28.04.18 07:10:22<koo5[m]> this book is really for dummies, its what i needed all along, but its still not easy
28.04.18 07:11:49<koo5[m]> speaking of which, im planning to add this and more stuff to your new repo, just waiting for the right mood
28.04.18 07:16:21<stoopkid> cool
28.04.18 07:17:59<daemoz> koo5[m]: what book is that?
28.04.18 07:18:32<stoopkid> koo5[m]: you could either put it in the MasterRepo repo or in the Library repo; doesn't really matter which, i'm gonna be cleaning everything up soon anyway, let me know if you need push access to any of the repos
28.04.18 07:22:37*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
28.04.18 08:32:44*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
28.04.18 08:39:33<koo5[m]> its copyrighted
28.04.18 08:40:01<koo5[m]> https://dl.acm.org/citation.cfm?id=2841316
28.04.18 09:04:29<stoopkid> well if you wanna save it to shared repo we can make a private Library repo and just include the public Library repo as a submodule there
28.04.18 09:07:53<koo5[m]> ok lets do that
28.04.18 09:08:08<koo5[m]> trying to fit a graph into a tree, are we? but nvm for now
28.04.18 09:10:53<stoopkid> pretty much
28.04.18 09:14:09*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
28.04.18 09:16:40<stoopkid> if i were to describe this organizational structure as “makeshift”, that would probably be being generous heh
28.04.18 09:25:45<stoopkid> im starting with things that are "obviously hierarchical", cause that fits nice and neat into git's submodule framework
28.04.18 09:26:40<stoopkid> generally whatever context/situation you're working in, you have some focal point / point-of-access to everything, so you basically get a directory root
28.04.18 09:29:50<stoopkid> then we get a sort of hierarchical structure based on file-sharing
28.04.18 09:31:55<stoopkid> it's less like a standard tree though and more like a generalized topological space https://en.wikipedia.org/wiki/Topological_space#Definition_via_open_sets
28.04.18 09:32:12<stoopkid> s/generalized/general/
28.04.18 09:37:32<stoopkid> basically each user has a rooted DAG where the root represents their own "top level", representing everything they're personally concerned with keeping track of, so like i've got my own stoopkidsPrivateLibrary which pulls in the autonomicPrivateLibrary as a submodule which might then pull in the autonomicPublicLibrary as a submodule
28.04.18 09:41:01<koo5[m]> Yea well, users or perspectives
28.04.18 09:43:56<stoopkid> right, perspectives is probably better
28.04.18 09:44:11<stoopkid> applies anywhere
28.04.18 09:45:29<stoopkid> and kinda brings it more to the point, wrt point-of-access & topological spaces
28.04.18 12:27:02*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
28.04.18 12:28:02*** Join: kook (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
28.04.18 12:58:24*** Join: koom__ (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
28.04.18 13:00:57*** Quit: kook (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 264 seconds
28.04.18 16:21:53*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 248 seconds
28.04.18 16:22:27*** Quit: koom__ (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
29.04.18 00:24:07*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 00:24:17*** Join: kook (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
29.04.18 01:13:14*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Remote host closed the connection
29.04.18 01:13:39*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 01:37:19*** Quit: kook (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Remote host closed the connection
29.04.18 01:37:20*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Remote host closed the connection
29.04.18 01:37:37*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 01:37:39*** Join: kook (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
29.04.18 03:38:13*** Join: koom__ (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
29.04.18 03:38:18*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 03:39:21*** Quit: kook (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
29.04.18 03:39:55*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 268 seconds
29.04.18 03:47:05*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
29.04.18 03:47:42*** Quit: koom__ (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
29.04.18 08:37:49*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 08:48:21*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 264 seconds
29.04.18 10:07:57*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
29.04.18 10:19:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
29.04.18 10:19:55*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
29.04.18 11:21:05*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
29.04.18 11:26:43* koo5[m] sent a long message: koo5[m]_2018-04-29_15:26:43.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/eHsYmpGPxhmPTMXsALFVFtvd>
29.04.18 11:27:03<koo5[m]> hrm
29.04.18 11:27:52* koo5[m] sent a long message: koo5[m]_2018-04-29_15:27:52.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/GUtdReUNOvjVpVadUmpugxXf>
29.04.18 11:28:02<koo5[m]> why mess up the newlines, matrix?
29.04.18 11:29:12<koom> ok, well, not messed up in the link
29.04.18 11:51:44*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wdcomuaenfulkmjy) left #autonomic-dev: Quit: Connection closed for inactivity
29.04.18 13:06:06*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cpjijgfedeuajgbp, stoopkid: stoopkid)
29.04.18 14:05:11<editable-koo>stoopkid: ok wheres the private repo?
29.04.18 14:07:38*** Quit: kook (~sirdancea@193.86.78.254) left #autonomic-dev: Remote host closed the connection
29.04.18 14:08:19-SaslServ- kook!~sirdancea@193.86.78.254 has just authenticated as you (sirdancealot)
                 *** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
29.04.18 14:10:32<stoopkid> havent made it yet, if you want you could set it up, just a fresh repo on one of the VPSs and then add the public repo as a submodule
29.04.18 14:13:47<editable-koo>great ill do it
29.04.18 14:21:23<stoopkid> cool send me the link/location after; im out on mobile rn so i cant do much til i get home
29.04.18 14:32:08*** Quit: kook (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 256 seconds
                 *** Quit: koom (~koom@193.86.78.254) left #autonomic-dev: Ping timeout: 256 seconds
29.04.18 19:02:45*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cpjijgfedeuajgbp) left #autonomic-dev: Quit: Connection closed for inactivity
29.04.18 19:08:20*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-zefdmeaxlltddtll, stoopkid: stoopkid)
29.04.18 23:52:45*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zefdmeaxlltddtll) left #autonomic-dev: Quit: Connection closed for inactivity
30.04.18 03:20:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 264 seconds
30.04.18 03:32:53*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
30.04.18 04:27:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 268 seconds
30.04.18 04:44:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
30.04.18 07:31:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bmjnncpnvcqtxabe, stoopkid: stoopkid)
30.04.18 10:37:31*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
30.04.18 10:42:48*** Quit: koom (~koom@193.86.78.254) left #autonomic-dev: Ping timeout: 255 seconds
30.04.18 11:01:17*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bmjnncpnvcqtxabe) left #autonomic-dev: Quit: Connection closed for inactivity
30.04.18 11:07:57*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
30.04.18 11:36:52*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-miemwdpbefuljopy, stoopkid: stoopkid)
30.04.18 11:40:50-SaslServ- kook!~sirdancea@193.86.78.254 has just authenticated as you (sirdancealot)
30.04.18 11:40:58*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
30.04.18 11:41:20*** Quit: kook (~sirdancea@193.86.78.254) left #autonomic-dev: Remote host closed the connection
30.04.18 11:41:40-SaslServ- kook!~sirdancea@193.86.78.254 has just authenticated as you (sirdancealot)
30.04.18 11:41:48*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
30.04.18 11:43:11<editable-koo>so, i dont think we want to use git submodules at all, because they only work as pointers to specific commits
30.04.18 11:43:18<editable-koo>so i think a link in the README must do
30.04.18 11:47:58<stoopkid> isn't that what fetch/pull is for?
30.04.18 11:53:39<stoopkid> fetch/pull/update/something, apparently i've still got some reading to do
30.04.18 11:54:15<editable-koo>dunno about update
30.04.18 11:54:31<editable-koo>yea, its just that its a bit of a wrong tool for the job
30.04.18 11:57:02<stoopkid> seems to be working alright when i `git submodule update` and then `git pull`; what are you finding wrong with it in particular?
30.04.18 11:57:31<stoopkid> s/alright/as i originally intended/ (my intentions might be totally off-base :)
30.04.18 11:59:11<editable-koo>i dont think git submodule update gets you to master on all the submodules, it only gets you to where the root repo points to
30.04.18 12:00:10<editable-koo>so, its not my intention that the private repo has to be updated and a new commit created every time any child repo updates, or people are gonno pull outdated versions and there will be confusion
30.04.18 12:06:40-SaslServ- koom__!~sirdancea@193.86.78.254 has just authenticated as you (sirdancealot)
30.04.18 12:06:46*** Join: koom__ (~sirdancea@193.86.78.254, sirdancealot: koo5)
30.04.18 12:09:45*** Quit: kook (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 256 seconds
30.04.18 12:11:05<stoopkid> hrm, i'm not too worried about the risk of confusion / different versions, it seems that's still dealt with by the same version-control concepts as always, i.e. they're not gonna pull an up-to-date top-level repo and see old submodules, nor are they gonna pull an out-of-date top-level repo while seeing updated submodules, but yea, we still maybe don't want to have to do explicit commits in the top-level repo every time
                 <stoopkid> a child repo updates
30.04.18 12:13:36<stoopkid> but on the other hand, being able to do that is also typically part of the point of the submodules feature, i.e. these repos are supposed to be able to be updated independently of each other
30.04.18 12:14:34<stoopkid> and if we're sharing the same top-level repo, then the main responsibility really gets pushed onto the one actually making the change
30.04.18 12:14:55<stoopkid> i.e. you make a change in a submodule, commit in the main module, i pull the main module, reinitialize the submodule and i'm up-to-date
30.04.18 12:16:29<editable-koo>yes
30.04.18 12:16:45<editable-koo>it makes sense in a sw project with libraries, for example
30.04.18 12:16:57<editable-koo>here, not so much
30.04.18 12:18:48<stoopkid> hrm, what's the difference here? what i originally had in mind was that it's just the same sort of concept of managing shared libraries in a sw project, but, perhaps that's not the appropriate conceptualization
30.04.18 12:19:57<editable-koo>well, here, private repo doesnt rely on public repo being at a certain commit
30.04.18 12:24:13<editable-koo>here we go http://167.88.171.233/private/do_not_open/autonomic_private/README.txt
30.04.18 12:25:58<stoopkid> the only problem i have with this approach is that there's no guarantee of permanence because we're not storing the publications, and even if these 3rd parties continue to store the publications they can change the URLs on a whim, whereas we can more easily manage our own remotes
30.04.18 12:27:32<koom> also, https://github.com/sto0pkid/Library/pull/1
30.04.18 12:28:25<koom> you mean wrt the private repo? the pdfs are in there
30.04.18 12:36:06<stoopkid> ok i see, now i'm just confusing myself, this makes sense so far
30.04.18 12:37:13<stoopkid> so, you don't want to add the public repo as a submodule to this private repo because that poses the risk of people pulling outdated versions of the repo from different remotes?
30.04.18 12:38:57<editable-koo>the risk, and because the workflow is quite time consuming, to me it seems to outweight the benefit of the magical first full-tree clone
30.04.18 12:45:21<koom__> mmmm
30.04.18 12:45:23<koom__> This is no longer true as of Git 1.8.2 (Mar 2013). github.com/git/git/blob/master/Documentation/RelNotes/1.8.2.txt . Git added the feature for submodules to point to tip of a remote branch. 
30.04.18 12:54:33<stoopkid> https://github.com/git/git/blob/master/Documentation/RelNotes/1.8.2.txt#L186
30.04.18 12:54:46<stoopkid> https://stackoverflow.com/a/9189815
30.04.18 12:54:58<stoopkid> http://www.vogella.com/tutorials/GitSubmodules/article.html#submodules_trackbranch
30.04.18 12:55:23<stoopkid> lemme test it out and see if it's actually working like i'd expect
30.04.18 13:01:22<stoopkid> seems to have the desired effect?
30.04.18 13:01:51<editable-koo>cool
30.04.18 13:02:25<editable-koo>i've added the submodule, ill update the readme at some point
30.04.18 13:03:18<stoopkid> i make a new repo, include Library as a submodule (using the -b <branch> flag), i go update the Library repo separately, then step back into the new testing repo and pull, and it gets the most up-to-date version of the Library repo, without having to do extra updates & commits etc.. this is the desired workflow right?
30.04.18 13:04:07<editable-koo>yes
30.04.18 13:04:43<stoopkid> sweet, good thing we exist post-1.8.2 i guess
30.04.18 13:07:10* editable-koo drinks some water to it
30.04.18 13:13:05*** Quit: koom__ (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 248 seconds
30.04.18 13:13:31*** Quit: koom (~koom@193.86.78.254) left #autonomic-dev: Ping timeout: 265 seconds
01.05.18 01:10:23*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01.05.18 01:10:49*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01.05.18 02:33:43-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01.05.18 02:33:49*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01.05.18 08:20:35*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
01.05.18 09:38:30*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
01.05.18 10:06:48*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Remote host closed the connection
01.05.18 10:07:01*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
01.05.18 14:08:39<stoopkid> koo5[m]: at some point let's rearrange the .emacs file to put the password under encryption or something so that we can publish the rest of the editable-koo code
01.05.18 14:09:42<stoopkid>  either under encryption or just manually enter it whenever we're starting the logger up
01.05.18 14:10:57<stoopkid> (or both? maybe this would be a good excuse for me to review some password management best-practices)
01.05.18 14:29:57<editable-koo>i think ill just (require) it from another file
#autonomic-dev> 01.05.18 15:09:29*** Join: editable-koo (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
                 *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 2 months 11 hours 25 minutes 55 seconds ago
                 *** Names: editable-koo kook koom daemoz stoopkid koo5[m] Deadhand
                 *** End of /NAMES list.
01.05.18 15:09:35<kook> idk, elisp doesnt know how to variable
01.05.18 15:10:10<kook> but i think we can keep it like that because there is no need to register if it uses this nick
01.05.18 15:12:19<kook> so, you can make the version thats in ~ in the vps public now
01.05.18 15:28:53*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Remote host closed the connection
01.05.18 16:31:00<stoopkid> koo5[m]: i think the problem is that you're referencing the variable from a quoted list so circe is just receiving the variable name
01.05.18 17:13:02<stoopkid> i put what should be a fix for it in comments underneath the "(setq circe-network-options..." line, idk how to fully start/restart the logger though
01.05.18 17:29:29* koo5[m] yawns at the general direction of stuff that doesnt work
01.05.18 17:29:57<koo5[m]> let me see
01.05.18 17:30:16<koo5[m]> ive ran over that answer but didnt see i was building a list
#autonomic-dev> 01.05.18 17:32:38*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
                 *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 2 months 13 hours 49 minutes 4 seconds ago
                 *** Names: editable-koo kook daemoz stoopkid koo5[m] Deadhand
                 *** End of /NAMES list.
01.05.18 17:33:12<daemoz> morning all~
01.05.18 17:33:24<daemoz> what are you guys up to today?
01.05.18 17:33:48<stoopkid> heya daemoz
01.05.18 17:34:58<stoopkid> been going through our different resources trying to organize & document everything; currently doing that for the editable-koo logger stuff now
01.05.18 17:35:22<editable-koo>solved, indeed
01.05.18 17:35:28<stoopkid> nice
01.05.18 17:35:39<daemoz> Nice
01.05.18 17:36:05<daemoz> I heard you guys talking about compiling resources into a git submodule? Is that up? If so where can I pull it from?
01.05.18 17:36:16<stoopkid> we've had to shift some of the code for that around because it had some hard-coded passwords that we didn't want to publish in a public repo
01.05.18 17:36:36<daemoz> Gotcha, yeahhh, I accidentally did that once xP
01.05.18 17:37:10<stoopkid> currently i'm working with this: https://github.com/sto0pkid/MasterRepo
01.05.18 17:38:02<stoopkid> there's gonna be a private repo as well, not on github just shared directly between the VPSs or w/e
01.05.18 17:38:35<stoopkid> (to avoid potential copyright infringement issues with PDFs and stuff)
01.05.18 17:40:17<stoopkid> i need to do some more work on both the public & private repo though, currently that MasterRepo is only set up to track the submodules on a per-commit basis; me and koo worked out yesterday that we can track branches instead of commits but i have to update the repo to account for that; i also need to move around some things that are just things i've been messing with on the side that don't have anything directly to do
                 <stoopkid> w/ autonomic
01.05.18 17:40:43<stoopkid> but most of the resources are currently accessible there
01.05.18 17:45:06<stoopkid> i'll let you know when that's all more stabilized though, i'm trying to get it to the point that we'll be able to easily just clone the repo onto a fresh linux box and just run a couple scripts to be up-and-running with a complete dev environment
01.05.18 17:45:07<daemoz> oh word, so you could have the submodules track like 'master' of other repos?
01.05.18 17:45:41<daemoz> That'd be awesome especially because setting up Agda in particular is a bit of a pain.
01.05.18 17:47:59<stoopkid> exactly, and then keeping track of all the notes on how to set every different thing up, it's a nightmare, for me at least; even just getting it all into one repo that can be easily backed-up, replicated & published will help me out quite a bit with that, even before trying to automate the configuration
01.05.18 17:48:48<stoopkid> and yea it's the -b option for `git submodule add`
01.05.18 17:49:20<daemoz> good to know
01.05.18 17:49:52<daemoz> I use this utility for my person configs, it has some rollout functionality as well.
01.05.18 17:49:53<stoopkid> currently i'm trying to figure out how to change submodules to that mode after the fact, since i already set everything up in that MasterRepo before koo found that option
01.05.18 17:49:54<daemoz> https://github.com/anishathalye/dotbot
01.05.18 17:50:17<daemoz> Essentially it clones a config repo, symlinks stuff everywhere and then clones submodules it needs I believe. (as in installs programs)
01.05.18 17:50:36<daemoz> Why don't you just make a new submodule with the same contents/
01.05.18 17:52:56<stoopkid> heh, i could i'm just masochistically trying to figure out whether there's a way to update them in-place, since it seems like one "should" be able to do that
01.05.18 17:53:24<stoopkid> but maybe i'll save that exercise for another day
01.05.18 17:54:36<daemoz> There almost always is a way with git, but if you know a way already it can sometimes be much faster xD
01.05.18 17:55:15<editable-koo>just figure out what should be in .gitmodules
01.05.18 17:55:29<daemoz> is that where it stores the metadata?
01.05.18 17:55:36<editable-koo>and then clone afresh with it
01.05.18 17:55:56<editable-koo>yea submodules paths and urls
01.05.18 17:56:30<editable-koo>i wouldnt try to redo the existing instance of the master repo
01.05.18 17:57:05<stoopkid> afaict it's just a  "branch = <branch>" field in the [submodule ...] object in .gitmodules
01.05.18 17:57:21<stoopkid> that's the only difference i notice in the test repo i tried yesterday
01.05.18 17:57:23<editable-koo>btw, if anyone wonders what ive been up to, ive been trying to make my ubuntu virtual machine work with my monitors resolution... i gave up
01.05.18 17:57:31<editable-koo>sounds about right
01.05.18 17:57:55<editable-koo>just rewrite this file and clone afresh
01.05.18 17:58:06<daemoz> editable-koo: does ubuntu use x11?
01.05.18 17:58:35<editable-koo>at least 17.10 seems to primarily do, i installed some wayland things but i didnt get it to run
01.05.18 17:58:42<daemoz> Gotcha
01.05.18 17:59:07<editable-koo>at least i learned a couple of things along the way
01.05.18 17:59:17<daemoz> I've been spending the last few days in a win10 vm researching effects of win32 calls T_T
01.05.18 17:59:26<editable-koo>like, what to run so i can copy&paste between host and guests
01.05.18 17:59:34<editable-koo>lol
01.05.18 17:59:40<daemoz> what hypervisor are you using?
01.05.18 17:59:48<editable-koo>qemu/kvm
01.05.18 17:59:53<daemoz> neat!
01.05.18 18:00:43<editable-koo>i pretty much stayed away from/didnt have the hw for virtualization back when the other options were cool:)
01.05.18 18:01:24<daemoz> I feel like it's not very expensive nowadays
01.05.18 18:01:26<daemoz> like virtualization has gotten really good
01.05.18 18:02:27<editable-koo>idk about really good hehe
01.05.18 18:02:56<daemoz> well, speaking comparatively xP
01.05.18 18:03:23<daemoz> Yeah 'good' is pretty subjective I guess haha
01.05.18 18:03:56<daemoz> vms are way more powerful than they were
01.05.18 18:08:58<editable-koo>and then spectre comes along
01.05.18 18:10:37<daemoz> Did that hit vm performance pretty hard?
01.05.18 18:11:56<editable-koo>idk, i didnt notice anything:)
01.05.18 18:12:13<daemoz> Haha, me neither xD
01.05.18 18:12:24<editable-koo>no idea if my pc even got any patches
01.05.18 18:13:37<daemoz> should have been in any automatic updates
01.05.18 18:13:42<daemoz> er, updates*
01.05.18 18:17:57<editable-koo>should..
01.05.18 18:18:51<daemoz> hahaha
01.05.18 18:19:06<daemoz> It's  highly likely?
01.05.18 18:19:59<editable-koo>its almost certainly probable
01.05.18 18:22:48<daemoz> Could you be, perhaps trying to convey to me, that there is a good chance of that?
01.05.18 18:24:19<editable-koo>idk, just playing with words
01.05.18 18:24:37<daemoz> same
                 <stoopkid> hrm, actually i don't think our submodules solution is working
01.05.18 18:24:52<daemoz> why
01.05.18 18:26:08<editable-koo>your computer caught fire?
01.05.18 18:26:34<stoopkid> if you make a top-level repo, add a submodule (at commit X, but supposedly tracking the branch with -b option), then go into the submodule, make an update/commit/push, then make a clone of the top-level repo and initialize the submodule, it's at commit X
01.05.18 18:27:32<daemoz> there's a clone submodules option, are you using that?
01.05.18 18:27:41<stoopkid> otoh, you can get your submodules up-to-date by just doing a git fetch/pull in the submodule
01.05.18 18:27:54<daemoz> git --recursive or something like that?
01.05.18 18:28:13<stoopkid> ill try that
01.05.18 18:29:01<stoopkid> git clone --recurse-submodules?
01.05.18 18:30:55<daemoz> something like that, not sure exactly
01.05.18 18:39:18<stoopkid> still just gets you back to commit X rather than fully up-to-date
01.05.18 18:39:38<stoopkid> otoh i don't necessarily see this as undesired behavior
01.05.18 18:40:52<editable-koo>i do
01.05.18 18:40:59<stoopkid> what --recurse-submodules does is save you the steps of doing "git submodule init" and "git submodule update" for your submodules
01.05.18 18:41:04<editable-koo>and yea i just tried it and its as you say
01.05.18 18:49:31<daemoz> git submodule update --recursive --remote
01.05.18 18:49:35<daemoz> apparently that's what you want^
01.05.18 18:52:38<editable-koo>yea
01.05.18 18:57:07<stoopkid> daemoz: yep, that's it
01.05.18 18:57:42<daemoz> nice
01.05.18 18:59:03<editable-koo>oh well, life sucks
01.05.18 18:59:22<daemoz> editable-koo: ?
01.05.18 19:00:05<editable-koo>i'd be happier if it made cloning get the branch tips already
01.05.18 19:00:23<editable-koo>in other words, if it did what it did even without having to add --remote
01.05.18 19:00:47<daemoz> yeah.. some of the semantics of git commands seem really counter intuitive
01.05.18 19:00:58<editable-koo>but...i guess its good enough
01.05.18 19:01:07<daemoz> I should just try out some of those git wrapping utilities
01.05.18 19:01:29<daemoz> I think zsh has a good one
01.05.18 19:03:52<editable-koo>mm
01.05.18 19:05:18*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
01.05.18 19:06:37<koo5[m]> i fish
01.05.18 19:07:59<daemoz> same, actually
01.05.18 19:08:08<daemoz> haha, there are dozens of us
01.05.18 19:08:26<daemoz> can't beat that out-of-the-box rice since I don't have time to do anything else xD
01.05.18 19:08:52<daemoz> Although I hate and love how it's autocomplete is context sensitive
01.05.18 19:09:14<daemoz> sometimes it resets (like for some reason when ld fails) and it loses it's context information
01.05.18 19:09:16<daemoz> idk why
01.05.18 19:14:57<editable-koo>ah, dunno about that
01.05.18 19:15:15<editable-koo>there was the bug with history getting owend by root and then getting deleted or something
01.05.18 19:16:00<editable-koo>and sometimes it would hang on me when trying to autocomplete
01.05.18 19:22:23<daemoz> huh, strange
01.05.18 20:10:33<koom> manjaro doesnt boot
01.05.18 20:10:38<koom> time to crash
01.05.18 20:17:02* stoopkid doesn't fish yet, just bashes things
01.05.18 20:33:04* daemoz got distracted and looked at sea shells
01.05.18 23:28:55<daemoz> set up a user-account on the 71 212 132 78 server named 'common' the passwd is 'classroom' I figure it could be used for shared tmux sessions
02.05.18 02:20:55<stoopkid> nice thanks, just confirmed that i could access it
02.05.18 02:22:41<daemoz> stoopkid: sweet, ty
02.05.18 05:28:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02.05.18 05:28:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.05.18 05:46:48*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
02.05.18 05:47:04-SaslServ- kook!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02.05.18 05:47:15*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
02.05.18 06:34:07*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
02.05.18 07:09:26-SaslServ- kook!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02.05.18 07:09:32*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
02.05.18 07:24:49*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
                 *** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
02.05.18 09:50:05*** Join: koom (~koom@37-48-5-160.tmcz.cz, (unauthenticated): realname)
02.05.18 10:04:59*** Quit: koom (~koom@37-48-5-160.tmcz.cz) left #autonomic-dev: Read error: Connection reset by peer
02.05.18 10:05:18*** Join: koom (~koom@37-48-5-160.tmcz.cz, (unauthenticated): realname)
02.05.18 10:19:33*** Quit: koom (~koom@37-48-5-160.tmcz.cz) left #autonomic-dev: Ping timeout: 264 seconds
02.05.18 10:45:37*** Join: koom (~koom@37-48-5-160.tmcz.cz, (unauthenticated): realname)
02.05.18 10:59:49<koom> im browsing around in agda code, trying to find where i could make it print out what it has parsed
02.05.18 11:01:04<koom> its not making much sense so far
02.05.18 11:15:48*** Quit: koom (~koom@37-48-5-160.tmcz.cz) left #autonomic-dev: Ping timeout: 256 seconds
02.05.18 11:19:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02.05.18 11:19:54*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.05.18 11:24:55*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02.05.18 11:25:27*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.05.18 15:20:20-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02.05.18 15:20:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02.05.18 15:30:33*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02.05.18 15:30:4::4<koo5[m]> https://www.youtube.com/watch?v=b0EF0VTs9Dc&feature=youtu.be&t=900
02.05.18 18:44:19*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
                 *** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
02.05.18 20:47:27*** Connecting...

<stoopkid> testing?
6:51 AM ↔ editable-koo nipped out  
7:02 AM 
<stoopkid> testing?
7:03 AM 
<koo5[m]> @koo5:matrix.org Passed passed
7:04 AM 
<stoopkid> seems to have failed failed
7:05 AM ⇐ editable-koo quit (~user@167.88.171.233) Remote host closed the connection
7:09 AM 
<koo5[m]> @koo5:matrix.org Oh well oh well
7:15 AM → koom joined (~koom@37-48-16-104.tmcz.cz)
7:15 AM 
<koom> what are you doing?
7:16 AM 
<stoopkid> trying to figure out how editable-koo logs stuff
7:17 AM 
<koom> mmm
7:18 AM and hows it going?
7:19 AM 
<stoopkid> im still looking for circe's documentation on logging
7:20 AM 
<koom> the thing is, it doesnt go through any kind of logging
7:20 AM we just repeatedly save the files/buffers
7:22 AM we just chat in the buffers
7:24 AM 
<stoopkid> ah
7:40 AM ⇐ koom quit (~koom@37-48-16-104.tmcz.cz) Ping timeout: 268 seconds
8:34 AM 
<stoopkid> it'd be interesting to have a spin-off of emacs that used a typed functional lang instead of just plain untyped lisp
8:37 AM my biggest concern lately is user-interface
8:37 AM i realized i don't think quite comprehensively enough when it comes to software dev
8:39 AM like when i'm messing with number theory & crypto algos or hacking around with btc transaction hex stuff, i think "oh i know how all that works, piece of cake!" and then when i get down to it i realize how much "scaffolding" needs to surround all that in order to make it actually usable
8:40 AM like, "where am i gonna store it, how am i gonna read it, how am i gonna display it, how am i gonna take input, and how am i gonna make the whole thing sensible to the user"
8:46 AM i don't have any specific solution for that except to just practice & build stuff, i'm just rambling a bit :)
8:48 AM oh nice, so "," unquotes a var inside a quoted list?
8:50 AM yep, not sure why i didn't just go into ielm to test it in the first place
8:53 AM lots of layers to this logger; emacs, org-mode, lui, circe, ergoemacs, auto-save-buffers-enhanced, and then your mods
8:53 AM am i missing anything there?
10:22 AM → koom joined (~koom@79.98.72.195)
10:26 AM 
<koom> so, can i start the logger?
10:27 AM ded it break again or you killed it?
10:27 AM 
<stoopkid> it broke
10:28 AM 
<koom> aww
10:28 AM 
<stoopkid> so what's the commands to start it?
#autonomic-dev> 03.05.18 10:29:24*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
                 *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 2 months 2 days 6 hours 45 minutes 49 seconds ago
    *** Names: editable-koo koom daemoz stoopkid koo5[m] Deadhand
                 *** End of /NAMES list.
03.05.18 10:31:33<koom> first you run circ, then circ2 when all the channels are joined
03.05.18 10:32:47<stoopkid> this time it wasn't the logger itself, 167.88.171.233 lost network connection at some point last night
03.05.18 10:32:57<stoopkid> logger just didn't reconnect
03.05.18 10:33:38<koom> well, thats the only issue the logger ever had
03.05.18 10:33:56<stoopkid> ah
03.05.18 10:34:18<koom> how did you find that the network lost connection?
03.05.18 10:34:39<stoopkid> i was ssh'd in and it dropped me
03.05.18 10:37:51<stoopkid> so how do you install an editable-koo from scratch, you just need emacs, circ and this .emacs file?
03.05.18 10:38:01<koom> yea
03.05.18 10:46:08<koom> ielm?
03.05.18 10:47:07<koom> ergoemacs is just some kind of settings for emacs that i dont think im using or are really loaded
03.05.18 10:47:37<koom> org-mode, well, i played with that, it worked, but not really with 10M+ big files
03.05.18 10:48:13<koom> lui you really dont need to know exists
03.05.18 10:48:33<stoopkid> ielm's just an elisp repl mode
03.05.18 11:02:14<koom> test1
03.05.18 11:03:30<koom> test2
03.05.18 11:07:51<koom> test3
03.05.18 11:08:46<koom> test4
03.05.18 11:16:33*** Connecting...
03.05.18 11:16:34-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** Couldn't look up your hostname
03.05.18 11:16:42-Server Notice- *** No Ident response
                 *** [906 from orwell.freenode.net] editable-koo SASL authentication aborted
03.05.18 11:16:43*** Mode change: +Zi on editable-koo by editable-koo (server)
                 *** [sasl.login from editable-koo (~user@167.88.171.233)] sirdancealot
                 *** SASL: You are now logged in as sirdancealot.
03.05.18 11:16:59*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
                 *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 2 months 2 days 7 hours 33 minutes 25 seconds ago
                 *** Names: editable-koo koom daemoz stoopkid koo5[m] Deadhand
                 *** End of /NAMES list.
03.05.18 11:17:11-ChanServ- [#mycroft] "Artificial intelligence for everyone"
03.05.18 11:18:06<koom> makes sense?
03.05.18 11:18:28<stoopkid> yea
03.05.18 11:26:33<editable-koo>so, hrm, next time it disconnects, dont restart it or anything, and ill try to dig deeper into whats going on with the lagmon
03.05.18 11:27:15<stoopkid> gotcha
03.05.18 11:38:00<stoopkid> ok i set up hooks so that you don't have to run update-server-info after a commit
03.05.18 11:39:40<editable-koo>nice
03.05.18 11:55:26<stoopkid> rather than move the IRC pass out to its own file it might make more sense to move the entire circe-network-options list out to its own file since that'll be different for every user
03.05.18 11:58:12*** Join: editable-stoopki (~stoopkid@unaffiliated/stoopkid, stoopkid: stoopkid)
03.05.18 11:59:02*** Quit: editable-stoopki (~stoopkid@unaffiliated/stoopkid) left #autonomic-dev: Client Quit
03.05.18 12:00:09<koom> yea but i didnt want to do that without also abstracting away the filename ifs
03.05.18 12:02:55<koom>  and even then you want to provide the freenode config as an example
03.05.18 12:03:01<koom> /default
03.05.18 13:38:48*** Join: editable-stoopki (~stoopkid@unaffiliated/stoopkid, stoopkid: stoopkid)
03.05.18 13:49:43<editable-stoopki> testing
03.05.18 13:51:05<editable-stoopki> test2
03.05.18 13:52:18<stoopkid> test4
03.05.18 13:53:00<stoopkid> weird, it writes all the -tail files correctly but not the main .log file
03.05.18 14:03:58<stoopkid> should we set this repo up for push access?
03.05.18 14:11:14<editable-stoopki> test5
03.05.18 14:12:21<koo5[m]> Theres a system of delays
03.05.18 14:12:42<koo5[m]> The private repo? Access for who?
03.05.18 14:13:07<stoopkid> for our local machines etc..
03.05.18 14:13:37<koo5[m]> You can push to it over ssh
03.05.18 14:16:25<koo5[m]> It only writes the main file after like 2 minutes of inactivity
03.05.18 14:24:12<stoopkid> `git push --repo=ssh://user@167.88.171.233:44/private/do_not_open/autonomic_private/.git` ?
03.05.18 14:25:15<koo5[m]> Yea
03.05.18 14:25:23<stoopkid> hrm, getting an error
03.05.18 14:25:32<stoopkid> https://www.irccloud.com/pastebin/kw3pWAKa/
03.05.18 14:25:34<koo5[m]> Something like that
03.05.18 14:25:49<koo5[m]> //var/www/html
03.05.18 14:26:32<stoopkid> aha
03.05.18 14:27:26<stoopkid> that makes sense
03.05.18 14:40:04<koo5[m]> Yea
                 <stoopkid> ok yep the main .log files updated after a bit
03.05.18 14:44:05*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
03.05.18 14:52:57<stoopkid> later we can look at syncing logs from different sources, like in the event of outages or netsplits
03.05.18 14:54:39<stoopkid> im a bit bored of log stuff for today tho :) at least now i know how to turn it back on and set up a fresh one if necessary
03.05.18 14:54:51*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
03.05.18 15:19:50<editable-koo>cool
03.05.18 15:33:31* editable-koo is trying to figure out agda-mode
03.05.18 15:33:59<stoopkid> anything in particular about it?
03.05.18 15:35:21<editable-koo>whats the contents of the agda2 buffer, if i can talk to agda from it, i figured id try creating a new command that would print out what agda parses
03.05.18 15:36:07<stoopkid> what do you mean, like the syntax trees?
03.05.18 15:36:15<editable-koo>yeah
03.05.18 15:48:19<editable-koo>Cmd_compute_toplevel
03.05.18 15:52:03<stoopkid> what just `M-x Cmd_compute_toplevel` when you've got a .agda file open?
03.05.18 15:52:51<editable-koo>you what?
03.05.18 15:53:45<editable-koo>its just a command type that agda understands, not a lisp function or something
03.05.18 15:58:40<editable-koo>how the heck does haskell turn the identifier into a string?
03.05.18 18:49:37*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
04.05.18 02:39:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
04.05.18 02:40:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.05.18 11:59:15*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
04.05.18 12:12:53*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
05.05.18 05:43:59*** Quit: editable-stoopki (~stoopkid@unaffiliated/stoopkid) left #autonomic-dev: Ping timeout: 268 seconds
05.05.18 09:36:04*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
05.05.18 10:12:44*** Join: editable-stoopki (~stoopkid@unaffiliated/stoopkid, stoopkid: stoopkid)
05.05.18 10:43:45*** Quit: koom (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 248 seconds
05.05.18 11:46:10*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
05.05.18 12:51:18*** Quit: koom (~sirdancea@193.86.78.254) left #autonomic-dev: Quit: Leaving
05.05.18 14:57:37*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
05.05.18 14:58:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.05.18 07:28:47*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-miemwdpbefuljopy) left #autonomic-dev: 
                 *** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
06.05.18 07:29:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kjsnubxnptgxtiej, stoopkid: stoopkid)
06.05.18 09:59:59*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
06.05.18 11:26:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
06.05.18 11:26:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.05.18 13:03:05*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
06.05.18 15:05:09*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
06.05.18 17:48:08*** Connecting...
06.05.18 17:48:25*** Join: ditable-kooe (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #autonomic-dev: Classical logic is the same as constructive logic, but where lying is a valid method of proof, so long as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".
                 *** Topic set by stoopkid on Fri Mar  2 02:43:35 2018, 2 months 5 days 14 hours 4 minutes 51 seconds ago
                 *** Names: ditable-kooe daemoz stoopkid editable-stoopki editable-koo koo5[m] Deadhand
                 *** End of /NAMES list.
06.05.18 21:08:42*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 260 seconds
06.05.18 21:35:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.05.18 00:11:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 256 seconds
07.05.18 00:23:45*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.05.18 01:00:27*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
07.05.18 01:36:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 260 seconds
07.05.18 01:53:15*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.05.18 03:31:20*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
07.05.18 04:10:27*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
07.05.18 04:10:49*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
07.05.18 13:47:51*** Join: koom (~koom@37-48-50-154.tmcz.cz, (unauthenticated): realname)
                 *** Quit: koom (~koom@37-48-50-154.tmcz.cz) left #autonomic-dev: Read error: Connection reset by peer
07.05.18 13:50:51*** Join: koom (~koom@37-48-50-154.tmcz.cz, (unauthenticated): realname)
07.05.18 14:03:49*** Quit: koom (~koom@37-48-50-154.tmcz.cz) left #autonomic-dev: Ping timeout: 260 seconds
07.05.18 15:03:51*** Join: koom (~koom@37-48-50-154.tmcz.cz, (unauthenticated): realname)
07.05.18 15:13:38*** Quit: koom (~koom@37-48-50-154.tmcz.cz) left #autonomic-dev: Remote host closed the connection
07.05.18 15:13:56*** Join: koom (~koom@37-48-50-154.tmcz.cz, (unauthenticated): realname)
07.05.18 15:32:17*** Quit: koom (~koom@37-48-50-154.tmcz.cz) left #autonomic-dev: Ping timeout: 248 seconds
07.05.18 16:51:04*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
07.05.18 17:25:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
07.05.18 17:26:10*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.05.18 18:36:21*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
07.05.18 22:12:01*** Quit: editable-stoopki (~stoopkid@unaffiliated/stoopkid) left #autonomic-dev: Ping timeout: 256 seconds
07.05.18 23:13:38*** Join: editable-stoopki (~stoopkid@unaffiliated/stoopkid, stoopkid: stoopkid)
08.05.18 03:34:41*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
08.05.18 04:12:34*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
08.05.18 12:42:34*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
08.05.18 13:06:50*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
08.05.18 13:26:19*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Remote host closed the connection
08.05.18 13:26:46*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
08.05.18 21:07:40*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 250 seconds
08.05.18 21:08:09*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
09.05.18 00:14:28*** Quit: editable-stoopki (~stoopkid@unaffiliated/stoopkid) left #autonomic-dev: Read error: Connection reset by peer
09.05.18 02:19:28*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 02:19:29*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 02:48:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kjsnubxnptgxtiej) left #autonomic-dev: Quit: Connection closed for inactivity
09.05.18 03:45:53*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 246 seconds
09.05.18 03:46:33*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
09.05.18 03:59:55*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 03:59:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 04:32:04*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
09.05.18 04:32:29*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
09.05.18 05:44:53*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 246 seconds
09.05.18 05:44:54*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 255 seconds
09.05.18 05:56:53*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 05:56:55*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 08:44:54*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 250 seconds
09.05.18 08:45:13*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
09.05.18 09:10:33*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nadtopgdxwlzfldx, stoopkid: stoopkid)
09.05.18 10:36:16*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 10:36:53*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 12:03:13*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
09.05.18 12:03:34*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
09.05.18 17:20:41*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 17:20:51*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 17:57:57*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 255 seconds
09.05.18 19:00:04*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
10.05.18 03:35:15-SaslServ- koom!~sirdancea@193.86.78.254 has just authenticated as you (sirdancealot)
10.05.18 03:35:21*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
10.05.18 04:41:40*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-edvfudthftrqfoky) left #autonomic-dev: Ping timeout: 276 seconds
10.05.18 05:33:35*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-zkjdabesazcmnwgn, (unauthenticated): @koo5:matrix.org)
10.05.18 06:50:36*** Quit: koom (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 255 seconds
10.05.18 12:33:17*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nadtopgdxwlzfldx) left #autonomic-dev: Quit: Connection closed for inactivity
10.05.18 12:40:38*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lxqakzanbscclgzg, stoopkid: stoopkid)
10.05.18 12:57:26-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
10.05.18 12:57:34*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
10.05.18 13:22:38*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 250 seconds
10.05.18 14:10:20-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
10.05.18 14:10:26*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
10.05.18 14:16:46-SaslServ- kook!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
10.05.18 14:16:51*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
10.05.18 14:19:44*** Quit: koom (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
10.05.18 17:07:20*** Quit: kook (~sirdancea@79.98.72.195) left #autonomic-dev: Ping timeout: 255 seconds
10.05.18 17:33:17*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lxqakzanbscclgzg) left #autonomic-dev: Quit: Connection closed for inactivity
11.05.18 04:18:14-SaslServ- koom!~sirdancea@193.86.78.254 has just authenticated as you (sirdancealot)
11.05.18 04:18:20*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
11.05.18 06:59:34*** Quit: koom (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 260 seconds
11.05.18 07:56:27-SaslServ- koom!~sirdancea@193.86.78.254 has just authenticated as you (sirdancealot)
11.05.18 07:56:35*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
11.05.18 09:16:43*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yxleyfwxvfmtdjcr, stoopkid: stoopkid)
11.05.18 09:24:40*** Quit: koom (~sirdancea@193.86.78.254) left #autonomic-dev: Ping timeout: 256 seconds
11.05.18 13:10:32-SaslServ- koom!~sirdancea@89.24.57.234 has just authenticated as you (sirdancealot)
11.05.18 13:10:41*** Join: koom (~sirdancea@89.24.57.234, sirdancealot: koo5)
11.05.18 13:19:31*** Quit: koom (~sirdancea@89.24.57.234) left #autonomic-dev: Ping timeout: 256 seconds
11.05.18 13:23:47-SaslServ- koom!~sirdancea@89.24.57.234 has just authenticated as you (sirdancealot)
11.05.18 13:24:04*** Join: koom (~sirdancea@89.24.57.234, sirdancealot: koo5)
11.05.18 13:41:21*** Quit: koom (~sirdancea@89.24.57.234) left #autonomic-dev: Ping timeout: 248 seconds
11.05.18 14:44:32-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
11.05.18 14:44:39*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
11.05.18 19:26:10*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 264 seconds
11.05.18 22:45:33*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
11.05.18 22:45:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
11.05.18 23:02:46<stoopkid> mmm, trouble focusing lately
11.05.18 23:03:08<stoopkid> and not from being side-tracked with other stuff i mean when i actually sit down to focus heh
12.05.18 02:13:01<koo5[m]> When i actually sit down to focus, my mind tends to wander across the many things i should/could be getting done
12.05.18 09:25:40*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-zkjdabesazcmnwgn) left #autonomic-dev: Ping timeout: 250 seconds
12.05.18 09:43:47*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-auouqypntwacmfki, (unauthenticated): @koo5:matrix.org)
12.05.18 12:39:59<stoopkid> hrm, that's definitely part of it
12.05.18 12:40:53<stoopkid> even when the wandering is just restricted to things relevant to the work that still covers a huge area
12.05.18 12:43:20<stoopkid> then if i just arbitrarily single out a specific thing to work on, digging down into its details turns up increased complexity and then i start doing cost-benefit analysis of working on that specific thing right now
12.05.18 12:45:19<stoopkid> then i'm wandering across all the things again in an attempt to reprioritize, and then it's like the pushing-a-boulder-up-a-hill thing
12.05.18 12:50:24*** Topic change by uid137696@gateway/web/irccloud.com/x-yxleyfwxvfmtdjcr: Classical logic is Sisyphus was the same as constructive logic, but where lying is a valid method king of proof, so long Ephyra. He was punished for his self-aggrandizing craftiness and deceitfulness by being forced to roll an immense boulder up a hill only for it to roll down when it nears the top, repeating this action for eternity. Through the classical influence on modern culture, tasks that are both laborious and futile are therefore described as you can turn any refutation of that lie into a constructive proof. Theorem: "You can do X, or you can't do X". Proof: "You can't do X".Sisyphean
12.05.18 15:48:42-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
12.05.18 15:48:50*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
12.05.18 16:01:53*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Remote host closed the connection
12.05.18 16:02:12-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
12.05.18 16:02:19*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
12.05.18 18:04:39<ditable-kooe>yea
12.05.18 18:05:22<ditable-kooe>i wonder how self-aggrandizing craftiness works
12.05.18 18:12:17<ditable-kooe>did you see nillis email?
12.05.18 20:08:59<stoopkid> just now
12.05.18 21:19:29*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 248 seconds
13.05.18 01:19:12-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
13.05.18 01:19:18*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
13.05.18 02:05:55*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
13.05.18 02:08:10<ditable-kooe>you remember me pasting this?: 
13.05.18 02:08:21<koom_> https://github.com/koo5/hackery2/blob/master/src/data/cwn.n3
13.05.18 02:10:31<koom_> does it seem like it could be on the right track?
13.05.18 02:11:44<koom_> at this point, it would be easier for me to try to build something like this, rather than just continuing with the agda book
13.05.18 02:42:23*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
13.05.18 03:55:01-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
13.05.18 03:55:07*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
13.05.18 04:53:27*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 240 seconds
13.05.18 04:54:26*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 276 seconds
13.05.18 10:42:30<stoopkid> koo5[m]: right track yea, a couple things seem off though
13.05.18 10:43:18<stoopkid> can you paste with Agda / lambda-calc versions of the definitions next to them?
13.05.18 10:46:24<stoopkid> last couple days on tauchain bitcointalk: "Ok, I admit I'm lost with Agoras. I have been looking to buy but cannot find anywhere that sells it? What am I missing? Thanks."
13.05.18 10:46:31<stoopkid> "I want to ask about the price and where to buy it>"
13.05.18 12:47:30*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
13.05.18 12:49:45<koom> going over functor, applicative, monad, this time thoroughly
13.05.18 13:16:52<stoopkid> functor i understand; the rest i've understood at various times but i always have to look it up again
13.05.18 13:51:48*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 255 seconds
13.05.18 16:09:36*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
13.05.18 16:10:02*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
13.05.18 19:11:33*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Read error: Connection reset by peer
13.05.18 19:11:37*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
14.05.18 00:45:55*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yxleyfwxvfmtdjcr) left #autonomic-dev: Quit: Connection closed for inactivity
14.05.18 03:23:49*** Join: herodust (4d7e50e3@gateway/web/freenode/ip.77.126.80.227, (unauthenticated): 77.126.80.227 - http://webchat.freenode.net)
14.05.18 03:28:29*** Quit: herodust (4d7e50e3@gateway/web/freenode/ip.77.126.80.227) left #autonomic-dev: Quit: Page closed
14.05.18 03:36:26-christel- : [Global Notice] Hi all, freenode seems to have fallen foul of the IRC-version of a graffiti artist -- as such, those of you whose communities operate with -t channels, you may wish to check your channel topics, and if appropriate, revert them back to their previous state! 
14.05.18 05:30:33*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
14.05.18 06:28:06*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 255 seconds
14.05.18 06:28:20*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
14.05.18 06:44:33*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nsnmxlpnowastada, stoopkid: stoopkid)
14.05.18 07:19:08*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
14.05.18 07:44:43<stoopkid> koo5[m]: i'm working up a response to nili
14.05.18 07:46:41<stoopkid>  * agoras markets are somewhere between difficult & non-existent (at this point im holding to see what happens), but bitcoins certainly help
14.05.18 07:48:37<stoopkid>  * we did run into a couple issues when we were testing multi-sig stuff but we got those solved but then stoopkid got distracted with trying to get various things organized (master repo stuff), among other things
14.05.18 07:49:51<stoopkid>  * idk about any problems with ohad but herodust's involvement certainly wouldn't be any problem for us
14.05.18 07:52:28<stoopkid>  * we've got a couple specific tasks that fit herodust's criteria, <insert tasks>, but potentially bigger issues for us are things that *dont* fit those criteria, and which aren't beyond our abilities but just take a while... like cleaning a really messy room
14.05.18 07:53:38<stoopkid> koo5[m]: anything else i should add?
14.05.18 07:56:20<stoopkid> or change/remove?
14.05.18 07:58:22<stoopkid> "messy room" i think is the perfect analogy for the issues that *i'm* having with development, at least, not sure if anyone else here has similar experience
14.05.18 08:03:50<stoopkid> the boulder is keeping the room clean, and its constantly sliding back downwards towards messiness without a constant applied force in the upwards direction
14.05.18 08:06:08<stoopkid> all the things with the project are basically just in a big pile on the floor of the room, and i haven't put in closets & shelves and desks and tool-chests and etc.. to give logical places for things to go
14.05.18 08:06:48<stoopkid> nor solidified the habits of actually putting the things in those places when i bring them into the room, they just end up in the pile
14.05.18 08:07:44<stoopkid> then when i'm trying to navigate the room, i'm basically climbing over the pile and tripping over stuff and losing track of stuff cause it's just buried in the pile
14.05.18 08:16:26<stoopkid> and then a couple weeks ago i looked at my actual IRL room, it was basically all the contents of a storage unit just piled haphazardly throughout the room such that the only part of the room that was even accessible was a small corner near the door where i set up a place to study/hack and then never developed good habits of cleaning it because i was just tunnel-visioned into PDFs and command-lines
14.05.18 08:18:00<stoopkid> and then i was like "oh, well duh there's your problem you don't even clean your room how are you gonna maintain something of any actual complexity"
14.05.18 08:18:06<stoopkid> so... now my room's clean at least :)
14.05.18 08:22:48<stoopkid> this was never a problem for me at all my programming jobs because i was working for somebody else who already had a "clean room" (both in the literal and metaphorical sense) and knew exactly what they wanted to see from me and how they wanted me to fit it into their room, and the fact that my own home was always just a complete wreck never mattered because the way i was supporting myself was by *leaving* it anyway
14.05.18 08:31:45<stoopkid> if i had a specific task for herodust, it would be: tell me what you would want to see if you came here to *manage* the project rather than just do specific coding tasks on it
14.05.18 08:35:22<stoopkid> ^ i'll probably include a highly abbreviated version of all this in the email btw
14.05.18 08:41:56*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
14.05.18 08:42:20*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
14.05.18 08:53:42*** Topic change by uid137696@gateway/web/irccloud.com/x-nsnmxlpnowastada: Sisyphus was the king of Ephyra. He was punished for his Paradox == contradictory self-aggrandizing craftiness and deceitfulness by being forced to roll an immense boulder up a hill only for it to roll down when it nears the top, repeating this action for eternity. Through the classical influence on modern culture, tasks that are both laborious and futile are therefore described as Sisypheanreference == state-change over time == general computation.
14.05.18 15:15:53*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
14.05.18 16:46:22-SaslServ- kook!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
14.05.18 16:47:19<koom> problems with ohad? maybe she sent more emails to you than to me
14.05.18 16:48:02<stoopkid> chat logs
14.05.18 16:49:21<koom> damn, im quite behind
14.05.18 17:04:51<ditable-kooe><stoopkid> so... now my room's clean
14.05.18 17:04:54<ditable-kooe>nice
14.05.18 17:06:43<ditable-kooe>idk, my mental room is like full of randomly placed and oriented f
14.05.18 17:06:55<ditable-kooe>big furniture, representing things i should do
14.05.18 17:07:28<ditable-kooe>but tbh, one of those is newshit, and one is collaborative_action_ontology
14.05.18 17:08:18<ditable-kooe>then, for autonomic itself, i think my idea is fairly clear, but, not really
14.05.18 17:08:27<ditable-kooe>theres haskell
14.05.18 17:08:33<ditable-kooe>theres messing with agda sources
14.05.18 17:08:48<ditable-kooe>theres trying to describe how i think it should work in n3
14.05.18 17:09:36<ditable-kooe>theres watching lactures and reading i could do, on tt and logic
14.05.18 17:09:48<ditable-kooe>theres the agda book
14.05.18 17:10:29<ditable-kooe>trying to follow the book closely led me to the idea of making agda print out syntax trees
14.05.18 17:10:45<ditable-kooe>and attempting that led me to wanting to really learn monads
14.05.18 17:13:19<ditable-kooe>oh theres also the new python implementation of univar, somewhere in a corner
14.05.18 17:14:08<ditable-kooe>depending on building some visualization stuff for debugging it
14.05.18 17:34:12<ditable-kooe>i think we should get you into actually building this thing
14.05.18 17:38:50<stoopkid> i'd agree with that
14.05.18 18:19:16<ditable-kooe>i think we are gonna need to answer the question of to what extent we want to model our language in n3, vs just use n3 directly
14.05.18 18:56:01*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 248 seconds
15.05.18 04:34:32*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 04:57:37*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
15.05.18 06:44:55*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 06:56:14<ditable-kooe>so i think i will first try to model agda in n3, to see if i understand it
15.05.18 07:25:29*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 255 seconds
15.05.18 09:01:18<stoopkid> ditable-kooe: where i fail when i try to do that is i don't understand n3 lol
15.05.18 09:18:05<stoopkid> https://openledger.io/market/AGRS_BTS
15.05.18 09:30:57<ditable-kooe>yea thats part of it
15.05.18 09:32:58*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
15.05.18 09:38:05<ditable-kooe>thats 1.4$ per agoras? not bad
15.05.18 09:41:52<ditable-kooe>anyway, this seems to be the task at hand, so lets try
15.05.18 09:43:27<stoopkid> not bad at all, a lot better than reddit and omni-exchange make it look
15.05.18 09:48:05<stoopkid> ok so... we have a bunch of logical connectives and types
15.05.18 09:48:45<stoopkid> each one's got 4 different kinds of rules associated with it: type-formation, intros, elims and computation/equality rules
15.05.18 09:49:38<stoopkid> we already know what the rules are supposed to be, when we write them in natural deduction
15.05.18 09:50:34<stoopkid> {..premises...} => {..conclusions..} is the same as
15.05.18 09:50:37<stoopkid> ...premises..
15.05.18 09:50:39<stoopkid> ----------------
15.05.18 09:50:43<stoopkid> ..conclusions..
15.05.18 09:52:13<stoopkid> you might have multiple ..premises.. but you general only have one ..conclusion..
15.05.18 09:59:51*** Join: stoopkid_ (47b3ee3c@gateway/web/freenode/ip.71.179.238.60, (unauthenticated): 71.179.238.60 - http://webchat.freenode.net)
15.05.18 10:00:55<stoopkid_> my irc bouncer is failing so i'm not sure if you sent any messages or what's the last message you saw but:
15.05.18 10:01:19<stoopkid_> so if you have multiple premises, the premises are basically in conjunction with each other, and if you have multiple conclusions, the conclusions are basically in disjunction with each other
15.05.18 10:03:05<stoopkid_> that's essentially what we get from the join and seq coros in univar
15.05.18 10:03:26<ditable-kooe>15.05.18 09:52:13<stoopkid> you might have multiple ..premises.. but you general only have one ..conclusion..
15.05.18 10:03:44<stoopkid_> ok cool
15.05.18 10:04:58<stoopkid_> so we join the premises into a conjunction, because they all must be satisfied simultaneously in order to demonstrate the conclusion, and we sequence the conclusions into a disjunction because we can use them independently of each other
15.05.18 10:05:35<stoopkid_> so:
15.05.18 10:05:38<stoopkid_> A      B
15.05.18 10:05:40<stoopkid_> ----------------------
15.05.18 10:05:44<stoopkid_> C      D
15.05.18 10:06:31<stoopkid_> becomes: {A. B.} => {C. D.} becomes {A. B.} => {C}, {A. B.} => {D}
15.05.18 10:07:14<stoopkid_> in natural deduction you would never even see multiple conclusions in the same rule anyway, that's just our n3 syntax sugar
15.05.18 10:08:07<stoopkid_> so then just like natural deduction, same in n3, or vice versa, however you're looking at it. to construct proof-trees we match premises to conclusions of other rules
15.05.18 10:09:19<stoopkid_> so, let's take an example with intro rules for Nat
15.05.18 10:09:30<stoopkid_> data Nat : Set where
15.05.18 10:09:33<stoopkid_>  0 : Nat
15.05.18 10:09:38<stoopkid_>  suc : Nat -> Nat
15.05.18 10:09:54<stoopkid_> in natural deduction:
15.05.18 10:09:59<stoopkid_> ----------------
15.05.18 10:10:10<stoopkid_>  0 : Nat
15.05.18 10:10:12<stoopkid_>  
15.05.18 10:10:27<stoopkid_>  x : Nat
15.05.18 10:10:33<stoopkid_> --------------------
                 <stoopkid_>  suc x : Nat
15.05.18 10:10:50<stoopkid_> in n3:
15.05.18 10:10:53<stoopkid_> (maybe)
15.05.18 10:11:05<stoopkid_> {} => {0 a Nat}
15.05.18 10:11:23<stoopkid_> {?x a Nat} => {?y suc ?x. ?y a Nat}
15.05.18 10:12:09<stoopkid_> or, ?x suc ?y, input on the left, output on the right
15.05.18 10:14:31<stoopkid_> the semantics there when a var appears only in the head/conclusions and not in the body/premises is that it's an existential variable
15.05.18 10:15:57<stoopkid_> so then ?y is supposed to be like a blank node that represents whatever object is the successor of x
15.05.18 10:16:38<ditable-kooe>and this doesnt really seem to do what we want, right?
15.05.18 10:17:09<stoopkid_> i'm unsure what the correct semantics are supposed to be from n3's point of view
15.05.18 10:17:18<ditable-kooe>i think we should model the data structures, like this: 
15.05.18 10:17:22<stoopkid_> wrt existentials
15.05.18 10:22:14<stoopkid_> interpreting it as existentials does work for this, it basically just asserts that there's a distinct object for every distinct syntax tree of members of the inductive type, and does an extra step of assigning a blank-node to that (giving us access to the object when all we have available are triples)
15.05.18 10:23:19<stoopkid_> how that relates to n3's proof-search is a different matter though
15.05.18 10:25:05<stoopkid_> haskell/agda list data-type is basically just n3/rdf rdf:first rdf:rest and rdf:nil
15.05.18 10:25:59<stoopkid_> data List (A : Set) : Set where
15.05.18 10:26:10<stoopkid_>  [] : List A
15.05.18 10:26:28<stoopkid_>  _::_ : A -> List A -> List A
15.05.18 10:27:46<stoopkid_> [] is just the rdf:nil, rdf:first is the "A" argument of _::_ and rdf:rest is the "List A" argument
15.05.18 10:28:20<stoopkid_> but same thing, i don't know exactly how to relate that to proof-search
15.05.18 10:33:43<stoopkid_> this basically describes what the correspondence between inductive types and logic programming is: https://en.wikipedia.org/wiki/Term_algebra
15.05.18 10:39:46<stoopkid_> this is also relevant:
15.05.18 10:39:51<stoopkid_> https://en.wikipedia.org/wiki/Conjunctive_normal_form#First-order_logic
15.05.18 10:40:18<stoopkid_> https://en.wikipedia.org/wiki/Conjunctive_normal_form#Converting_from_first-order_logic
15.05.18 10:41:34<stoopkid_> https://en.wikipedia.org/wiki/Resolution_(logic)#Resolution_in_first_order_logic
15.05.18 10:53:07<stoopkid_> that's about all i know on the n3 side, the last thing i was working on there was studying the conversion from FOL -> CNF
15.05.18 10:54:42<stoopkid_> we should probably review this again: https://www.w3.org/DesignIssues/N3Logic
15.05.18 11:06:09*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
15.05.18 11:07:45*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 248 seconds
15.05.18 11:09:30<ditable-kooe>{?y a Nat. ?y is_a_call_of suc. ?y has_arg ?x} <= {?x a Nat}
15.05.18 11:09:46<ditable-kooe>mind the back-direction of the <=
15.05.18 11:10:23<ditable-kooe>i like this style better, resembles prolog and makes it obvious that this is backward reasoning
15.05.18 11:11:26<ditable-kooe>anyway my point is that i think things get messy if you try to use predicates like ?y suc ?x, i think we need this abstraction from the mechanics of n3
15.05.18 11:12:44<ditable-kooe>as on the links, im ok with diving into them, but i will have to click like every single link on each page for things to make any sense
15.05.18 11:13:20<ditable-kooe>i have a very fuzzy idea what herbrandt universe could be, is about it
15.05.18 11:20:43<stoopkid> i have to click most of the links every time i read any of those pages. the herbrand universe stuff is fuzzy for me too, i have more intuition for the inductive types, but i don't think that's cause they're simpler it's just cause i've spent most of my time thinking about it from the algebraic data type side of things
15.05.18 11:20:53<stoopkid> all the mathy stuff aside the rough approximation of the idea is the rules are like the production rules of a grammar and the proof trees are basically the syntax trees of the strings in the language described by that grammar
15.05.18 11:22:00<stoopkid> (wrt term algebras, i mean)
15.05.18 11:23:38<stoopkid> it's just like the abstract algebraic way of describing that
15.05.18 11:24:44<stoopkid> back-direction <= for back-chaining?
15.05.18 11:25:07<ditable-kooe>yeah
15.05.18 11:28:01<stoopkid> i've been assuming back-chaining for all the natural-deduction proof-checking stuff, i'll start using <= to be explicit though
15.05.18 11:29:14<stoopkid> i guess the prolog style is better for everybody
15.05.18 11:29:43<ditable-kooe>sure, i just like this style better and i didnt mean to confuse you with the swapped head and body
15.05.18 11:30:18<ditable-kooe>until someone comes along and proves me wrong, at least
15.05.18 11:30:42<stoopkid> heh no i just confused myself
15.05.18 11:31:22<stoopkid> i figure more logic programmers know prolog than n3, but..
15.05.18 11:31:34<stoopkid> maybe we should bring dmiles into this discussion heh
15.05.18 11:31:45<ditable-kooe>maybe
15.05.18 11:31:47<stoopkid> or jmv
15.05.18 11:31:55<ditable-kooe>i got some thinking to do, thats for sure
15.05.18 11:32:06<ditable-kooe>slow thinking
15.05.18 11:33:04<stoopkid> so, what's the reason for the is_a_call_of and has_arg abstractions?
15.05.18 11:36:09<stoopkid> the way i look at suc when i'm not thinking about type theory, is it's a graph edge
15.05.18 11:36:34<stoopkid> a binary relation
15.05.18 11:37:00<stoopkid> the graph nodes that it relates are generated by the existential assertions
15.05.18 11:40:39<ditable-kooe>not so sure anymore, ill have to think about it
15.05.18 11:45:19*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 260 seconds
15.05.18 11:47:35<stoopkid> more to think about: https://www.coursehero.com/file/p2eevmr/Refutation-Completeness-of-the-Resolution-Proof-Procedure-Given-a-set-of/
15.05.18 11:48:31<stoopkid> english version: refutation completeness says that if our rule-set is inconsistent / unsatisfiable, then we can find out, using first-order-logic resolution
15.05.18 11:48:51<stoopkid> iow we can do that consistency check thing
15.05.18 12:07:14*** Quit: stoopkid_ (47b3ee3c@gateway/web/freenode/ip.71.179.238.60) left #autonomic-dev: Ping timeout: 260 seconds
15.05.18 12:29:48<koo5[m]> Whats supposed to be the capital C in all these equations?
15.05.18 12:31:54<koo5[m]> These mathematical pseudonotations are such a joke
15.05.18 12:32:31<koo5[m]> Failing at any relevant rigour, devolving into absurd details
15.05.18 12:36:32<stoopkid> which?
15.05.18 12:39:58<koo5[m]> ND_nat line 28
15.05.18 12:40:28<koo5[m]> Suddenly, a wild capital C appears!
15.05.18 12:48:11<stoopkid> http://167.88.171.233/workspace/AutoNomic/notes/natural_deduction/ND_rules_v1
15.05.18 12:48:14<stoopkid> line 418
15.05.18 12:52:46*** Join: koom (~koom@89.24.51.221, (unauthenticated): realname)
15.05.18 12:53:41<ditable-kooe>G, x : Nat |- C : Set i      
15.05.18 12:53:43<ditable-kooe>?
15.05.18 12:54:09<ditable-kooe>or "NAT:
15.05.18 12:54:11<ditable-kooe>"
15.05.18 12:54:12<ditable-kooe>?
15.05.18 12:57:18<stoopkid> “G, x : Nat |- C : Set i” is saying what the type for C is yea
15.05.18 13:00:33<stoopkid> C is a formula that’s present in the conclusion
15.05.18 13:00:40<stoopkid> so
15.05.18 13:01:39<stoopkid> it could be “anything”, but, constrained by that typechecking rule
15.05.18 13:01:53*** Quit: koom (~koom@89.24.51.221) left #autonomic-dev: Ping timeout: 248 seconds
15.05.18 13:07:57<koo5[m]> I dont understand anything
15.05.18 13:08:16<koo5[m]> Is there some concise explanation for this natrec thing anywhere?
15.05.18 13:10:27*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 13:12:57<stoopkid> its just a syntax term to label proofs you get from the application of that rule
15.05.18 13:15:15<stoopkid> it happens to be related to recursive function definitions because this is the elim rule for nat
15.05.18 13:20:00<ditable-kooe>yea, im sure its related
15.05.18 13:20:59<ditable-kooe>G, x : Nat
15.05.18 13:21:06<ditable-kooe>suddenly, a wild x appears?
15.05.18 13:25:10<stoopkid> C is a Set i under assumption that x is a Nat
15.05.18 13:25:37<stoopkid> iow C is some formula containing x
15.05.18 13:26:09<stoopkid> well, possibly containing x
15.05.18 15:33:21*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
15.05.18 16:10:23*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 18:08:41*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
15.05.18 18:26:56*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 19:40:42*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
16.05.18 04:01:43*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
16.05.18 04:02:08*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
16.05.18 04:23:57*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
16.05.18 04:48:26*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 255 seconds
16.05.18 07:03:55*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
16.05.18 08:25:33*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
16.05.18 15:12:50*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #autonomic-dev: Ping timeout: 256 seconds
16.05.18 20:37:13*** Join: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-98-138.dsl.bell.ca, (unauthenticated): deadhand)
16.05.18 20:41:46*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-98-138.dsl.bell.ca) left #autonomic-dev: Ping timeout: 264 seconds
16.05.18 22:58:17*** Join: Deadhand (~deadhand@kntaon1614w-lp130-04-174-92-68-231.dsl.bell.ca, (unauthenticated): deadhand)
16.05.18 23:02:14*** Join: HMCa_ (~root2@37.153.110.58, (unauthenticated): root2)
16.05.18 23:02:31<HMCa_> what did i miss? :-)
16.05.18 23:02:37<HMCa_> any logs?
16.05.18 23:04:32*** Topic change by uid137696@gateway/web/irccloud.com/x-nsnmxlpnowastada: Paradox == contradictory self-reference == state-change over time == general computation.chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
16.05.18 23:09:35<stoopkid> there was some discussion yesterday about n3 inferencing, FOL -> CNF, robinson resolution, and a representation for natural deduction rules, that's probably the most relevant part of the logs
16.05.18 23:39:27*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-04-174-92-68-231.dsl.bell.ca) left #autonomic-dev: Ping timeout: 265 seconds
16.05.18 23:45:00*** Join: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-98-67.dsl.bell.ca, (unauthenticated): deadhand)
17.05.18 00:31:27*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-98-67.dsl.bell.ca) left #autonomic-dev: Ping timeout: 240 seconds
17.05.18 00:37:04*** Join: Deadhand (~deadhand@kntaon1614w-lp130-01-70-50-133-132.dsl.bell.ca, (unauthenticated): deadhand)
17.05.18 00:41:18*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 00:43:55<HMCa_> ok, I skimmed
17.05.18 00:44:01<HMCa_> I skipped a lot of it
17.05.18 00:44:05<HMCa_> most, even
17.05.18 00:46:29<stoopkid> the whole log or just yesterday's?
17.05.18 01:00:57*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-01-70-50-133-132.dsl.bell.ca) left #autonomic-dev: Ping timeout: 240 seconds
17.05.18 01:06:36*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca, (unauthenticated): deadhand)
17.05.18 01:09:55<HMCa_> whole thing
17.05.18 01:13:38<HMCa_> stoopkid: so do we have this herodust or not? :-)
17.05.18 01:13:59<ditable-kooe>o/
17.05.18 01:14:09*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca) left #autonomic-dev: Ping timeout: 248 seconds
17.05.18 01:14:26<stoopkid> we'll see after i write up some specific tasks and send them to nili to pass along
17.05.18 01:16:43<HMCa_> cool.  what tasks are you thinking?
17.05.18 01:18:13*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca, (unauthenticated): deadhand)
17.05.18 01:24:53<stoopkid> generally the translation of MLTT into n3, but.. i need to refine that into more specific tasu
17.05.18 01:26:48<stoopkid> tasks*
17.05.18 01:36:43<HMCa_> hrmm
17.05.18 01:37:22<HMCa_> what about "implement nuprl appendix rules as n3logic" to start? :-)
17.05.18 01:38:05<HMCa_> and/or "finish our n3logic to be able to interpret an implementation of..." 
17.05.18 01:38:15<HMCa_> could go in parallel, heh
17.05.18 01:38:57<HMCa_> I get the impression that the idea is we are to throw him into a deep end, of some sort?
17.05.18 01:39:00<HMCa_> heh
17.05.18 01:39:12<ditable-kooe>lol
17.05.18 01:40:20<stoopkid> well, i think it'll be difficult to avoid that while still fulfilling this criteria: "but only things that you haven't succeeded yourself and have no idea how to"
17.05.18 01:47:57<ditable-kooe>i. for one, have no idea
17.05.18 02:04:58<HMCa_> heh
17.05.18 02:05:07<HMCa_> right
17.05.18 02:07:18<HMCa_> I still say the most important thing for him to do would be to actually "be around"... heh.
17.05.18 02:12:20<stoopkid> probably
17.05.18 02:12:28<stoopkid> it's more about the 'nomic' than the 'auto'
17.05.18 02:14:28<HMCa_> I prefer to think it is about a good balance between them both... ;-)
17.05.18 02:19:42<stoopkid> maybe
17.05.18 02:22:05<stoopkid> still needs to be understood in the context of it being nomic though, that's the main point.. it's hard to relate the concept when it's cast as if it was any other sw dev project
17.05.18 02:30:28<HMCa_> yes
17.05.18 02:42:18*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
17.05.18 03:10:21*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 03:34:34*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
17.05.18 06:13:51*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
17.05.18 06:14:15*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.05.18 08:47:41*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 09:58:54*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
17.05.18 10:09:45*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 10:10:49*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Remote host closed the connection
17.05.18 10:11:03*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 10:47:16<ditable-kooe>ok, i guess i can see how bnodes are like existentials, at least on some example here
17.05.18 11:57:46*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Remote host closed the connection
17.05.18 11:58:03*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 12:34:02*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
17.05.18 12:41:51* koo5[m] sent a long message: koo5[m]_2018-05-17_16:41:50.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/jbALLZunjhyZpwszvbbwQuse>
17.05.18 15:46:16*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 18:33:29*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 260 seconds
18.05.18 01:14:13*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nsnmxlpnowastada) left #autonomic-dev: Quit: Connection closed for inactivity
18.05.18 02:15:53*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 03:51:22*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 264 seconds
18.05.18 03:52:53*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 05:00:26*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 05:03:33*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
18.05.18 05:21:08<koo5[m]> As the engine is an open world, constructive
                 <koo5[m]> engine, universal variables do not exist (all elements of a set are never known).
18.05.18 05:21:09<koo5[m]> Thus a transformation has to be done from four kinds of variables to one kind.
18.05.18 05:21:42<koo5[m]> If the consequent contains more variables than the antecedent then
                 <koo5[m]> these must be instantiated with a unique identifier.
18.05.18 05:21:50<koo5[m]> In a query existential variables are not instantiated. Universal variables are
18.05.18 05:21:51<koo5[m]> transformed to existential variables.
18.05.18 05:30:12* koo5[m] sent a long message: koo5[m]_2018-05-18_09:30:11.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/GqJxsjxkPcxSgXyxPbCLGbhi>
18.05.18 05:30:14<koo5[m]> huhum?
18.05.18 05:52:05*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 240 seconds
18.05.18 06:04:32*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 06:35:56*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 268 seconds
18.05.18 07:07:05*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 08:33:44*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gcsrsaakwphypxpd, stoopkid: stoopkid)
18.05.18 08:52:19<koo5[m]> stoopkid:  is this relevant? https://www.google.cz/search?q=Realizing+Dependently+Typed+Logic+Programming&oq=Realizing+Dependently+Typed+Logic+Programming
18.05.18 09:14:23<stoopkid> looks potentially relevant
18.05.18 09:34:52*** Quit: koom_ (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 256 seconds
18.05.18 16:34:49*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
18.05.18 17:15:12*** Quit: koom (~koom@193.86.78.254) left #autonomic-dev: Ping timeout: 255 seconds
18.05.18 17:19:24*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
18.05.18 18:56:33*** Quit: koom (~koom@193.86.78.254) left #autonomic-dev: Ping timeout: 248 seconds
18.05.18 19:04:46*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
18.05.18 19:44:01*** Quit: koom (~koom@193.86.78.254) left #autonomic-dev: Ping timeout: 248 seconds
18.05.18 21:32:14*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 276 seconds
18.05.18 21:45:52*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
18.05.18 22:03:57*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 240 seconds
18.05.18 22:21:06*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
19.05.18 09:57:18*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gcsrsaakwphypxpd) left #autonomic-dev: Ping timeout: 256 seconds
19.05.18 09:58:58*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rkyufcoypygeccxj, stoopkid: stoopkid)
19.05.18 10:04:01*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rkyufcoypygeccxj) left #autonomic-dev: Max SendQ exceeded
19.05.18 10:04:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jjxnwjuvjjwablre, stoopkid: stoopkid)
19.05.18 10:52:01*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
19.05.18 11:12:00*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
19.05.18 11:12:33*** Quit: koom (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 256 seconds
19.05.18 11:33:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jjxnwjuvjjwablre) left #autonomic-dev: Remote host closed the connection
19.05.18 11:39:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ffrivdoeagyfqpnf, stoopkid: stoopkid)
19.05.18 11:53:26*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #autonomic-dev: Ping timeout: 268 seconds
20.05.18 00:55:19<stoopkid> koo5[m]: https://openledger.io/deposit-withdraw/
20.05.18 00:55:51<stoopkid> looks like you can't deposit/withdraw AGRS right now
20.05.18 00:56:07<stoopkid> hopefully that's just a temporary maintenance thing..
20.05.18 01:06:46<HMCa_> i thought it was supposed to be a dex?
20.05.18 01:07:34<stoopkid> sorta, kinda, not really
20.05.18 01:07:52<HMCa_> heh
20.05.18 01:09:45<HMCa_> it is or it isn't... you can't kinda-sorta be a CA, it is all or nothing, no?
20.05.18 01:09:51<HMCa_> ;-)
20.05.18 01:11:06<stoopkid> it isn't, afaict
20.05.18 01:18:29<HMCa_> look like agrs disabled since april 10?
20.05.18 01:19:17<stoopkid> no idea
20.05.18 01:20:18<HMCa_> hrmm
20.05.18 01:37:34*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
20.05.18 01:38:25*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 04:19:00<koo5[m]> Hmm
20.05.18 04:19:10<koo5[m]> Hrmm
20.05.18 08:52:34*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
20.05.18 09:19:56*** Quit: koom (~koom@193.86.78.254) left #autonomic-dev: Remote host closed the connection
20.05.18 09:20:26*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
20.05.18 12:56:54*** Quit: koom (~koom@193.86.78.254) left #autonomic-dev: Ping timeout: 255 seconds
20.05.18 13:34:05*** Join: koom (~koom@89.24.54.189, (unauthenticated): realname)
20.05.18 13:42:55*** Quit: koom (~koom@89.24.54.189) left #autonomic-dev: Read error: Connection reset by peer
20.05.18 13:44:32*** Join: koom (~koom@89.24.54.189, (unauthenticated): realname)
20.05.18 13:56:34*** Join: koom_ (~koom@37-48-49-5.tmcz.cz, (unauthenticated): realname)
20.05.18 13:58:57*** Quit: koom (~koom@89.24.54.189) left #autonomic-dev: Ping timeout: 240 seconds
20.05.18 14:01:58*** Quit: koom_ (~koom@37-48-49-5.tmcz.cz) left #autonomic-dev: Ping timeout: 276 seconds
20.05.18 14:39:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ffrivdoeagyfqpnf) left #autonomic-dev: Quit: Connection closed for inactivity
20.05.18 15:01:43*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
20.05.18 16:02:48*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
20.05.18 16:03:12*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 16:40:07*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Quit: WeeChat 2.1
20.05.18 16:47:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 18:35:01<ditable-kooe>hrm, whats the point of resolution by refutation again?
20.05.18 19:23:54<ditable-kooe>rules:
                 <ditable-kooe>local means: within the rule.
                 <ditable-kooe>as in 1). If the consequent contains more variables than the antecedent then
                 <ditable-kooe>these must be instantiated with a unique identifier.
20.05.18 19:26:14<ditable-kooe>when you say head-only vars must be existentials, 
20.05.18 19:26:21<ditable-kooe>nvm, still dont see whats the matter here
20.05.18 19:26:34<ditable-kooe>our vars should already be uris
20.05.18 19:26:41<ditable-kooe>all vars
20.05.18 19:27:17<ditable-kooe>now, a rule with a head-only var is free to assert that something exists
20.05.18 19:28:15<ditable-kooe>it essentially uses a fresh var name that cannot be used anywhere else
20.05.18 19:28:28<ditable-kooe>perhaps except in the calling rules
20.05.18 19:29:20<ditable-kooe>at any case i agree with guido that what we dont have are actually universals
20.05.18 19:30:27<ditable-kooe>hoped this pdf would say more about this
20.05.18 19:30:35<ditable-kooe>at least he has some good optimization tips
20.05.18 19:39:05<ditable-kooe>and other stuff
20.05.18 21:04:21*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
20.05.18 21:04:45*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 21:48:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
20.05.18 21:49:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 22:02:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xfiujrtrjhnyolgm, stoopkid: stoopkid)
20.05.18 22:36:54<stoopkid> koo5[m]: i'm still trying to understand that better
20.05.18 22:36:57<stoopkid> https://cs.stackexchange.com/a/9096
20.05.18 22:39:54<stoopkid> looks like the point is reducing search-space without losing theorems
21.05.18 05:11:23* koo5[m] sighs at the sight of the size of the backlog in #autonomic
21.05.18 05:34:22*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 245 seconds
21.05.18 07:14:02<stoopkid> koo5[m]: you dont really have to read it all, most of it was written specifically for dmiles and isnt directly related to autonomic dev
21.05.18 07:15:47<stoopkid> its all just about approaches to modeling stuff in type theory and how that relates to the process of modeling stuff in other frameworks like prolog etc..
21.05.18 07:18:32<stoopkid> and at least half of it is only relevant in the context of dmiles’ specific conceptions of all that
21.05.18 07:27:06<stoopkid> relevant stuff to read would be the first half up to "i'm increasingly suspecting that there aren't any and instead there's just subsets of logic that logicians (including myself) break down on when trying to wrap their minds around the Curry-Howard interpretation of it"
21.05.18 07:28:18<stoopkid> and the the tl;dr version of the rest of it is just about addressing the question of whether curry-howard interpretations are "sufficient" for the kinds of tasks that dmiles likes to use prolog for
21.05.18 07:29:12<stoopkid> with me and HMC obv taking the stance of "yea totally"
21.05.18 07:29:22<stoopkid> (no pun)
21.05.18 07:32:57<koo5[m]> Heh ok, thanks
21.05.18 10:05:02<koo5[m]> Hrm
21.05.18 10:05:07<koo5[m]> Its all greek
21.05.18 10:06:17<koo5[m]> Ive finished about half of the agda book, all the fundamental stuff
21.05.18 10:06:32<koo5[m]> The rest is various explorations and playing
21.05.18 10:07:36<stoopkid> have you started trying to work with mathematical modeling & proving of stuff?
21.05.18 10:14:02<koo5[m]> I thought id instead dive into the loup valliant in agda paper, but it turns out it's far from being a practical implementation, so its not that interesting for me
21.05.18 10:19:38<koo5[m]> And frankly i may be a bit tired of agda now
21.05.18 10:20:14<koo5[m]> maybe ill check out idris
21.05.18 10:21:09<koo5[m]> Or i can focus on univar and pyin
21.05.18 10:22:16<stoopkid> idris is pretty much the same as far the math goes; maybe a bit better for traditional programming stuff but imo that always kinda missed "the point" anyway so i never had much motivation to switch
21.05.18 10:23:38<stoopkid> either one's fine for me though
21.05.18 10:24:30<stoopkid> univar & pyin stuff might be more in scope though
21.05.18 10:57:08*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
21.05.18 13:31:30*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 245 seconds
21.05.18 13:43:22*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
21.05.18 14:01:27*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Remote host closed the connection
21.05.18 14:01:44*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
21.05.18 15:06:01*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
21.05.18 15:06:32*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
21.05.18 15:51:19* ditable-kooe ends up playing with haskell
21.05.18 17:34:38<stoopkid> oy somehow forgot my user/password/email combo for the wiki, need to check into that and then figure out how to make sure that doesn't happen again; stuck taking care of some other stuff for a bit
21.05.18 18:08:02<ditable-kooe>A bottom value is usually written as the symbol ⊥, ( i.e. the compiler flipping you off ). 
22.05.18 04:52:17*** Quit: koom (~koom@79.98.72.195) left #autonomic-dev: Ping timeout: 245 seconds
22.05.18 14:02:27*** Quit: HMCa_ (~root2@37.153.110.58) left #autonomic-dev: Remote host closed the connection
22.05.18 14:30:18*** Join: Basilisk_of_roko (~root@37.153.110.58, (unauthenticated): root)
22.05.18 14:30:41*** Nick change: Basilisk_of_roko (~root@37.153.110.58) is now known as HunterMinerCraft
23.05.18 03:06:37*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xfiujrtrjhnyolgm) left #autonomic-dev: Quit: Connection closed for inactivity
23.05.18 06:35:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-chafcrajplhikhst, stoopkid: stoopkid)
23.05.18 08:17:52*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
23.05.18 08:18:17*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
23.05.18 08:29:40* koo5[m] sent a long message: koo5[m]_2018-05-23_12:29:39.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/brtIcoQfthTeKvifqlaaUnfi>
23.05.18 08:30:11<koo5[m]> [BP]
23.05.18 08:30:12<koo5[m]>     Bijan Parsia, private communication
24.05.18 15:42:14<ditable-kooe>trying to get pyin in shape...
24.05.18 15:43:10<ditable-kooe>tried using ipythin notebooks from within pycharm..
24.05.18 15:43:25<ditable-kooe>ipython
24.05.18 15:43:37-mquin- [Global Notice] Note that if you are having difficulty changing nickname you can identify to NickServ using the format '/msg NickServ identify accountname password'
24.05.18 15:43:50<ditable-kooe>theyre not so practical for developing a larger program like this
24.05.18 16:09:07<ditable-kooe>i should probably teach univar to correctly expand shortened uris in n3
24.05.18 16:09:17<ditable-kooe>after i teach it to myself
24.05.18 16:28:50<ditable-kooe>nvm
25.05.18 07:41:22* stoopkid messing around with bitshares trying to figure it out
25.05.18 21:01:02* ditable-kooe on a hackathon learning symfony
25.05.18 21:01:16<ditable-kooe>and docker
26.05.18 04:28:02<HunterMinerCraft> docker is a little silly, imo
26.05.18 04:28:18<HunterMinerCraft> all of the real magic is in lxc/namespaces
26.05.18 05:05:28*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-chafcrajplhikhst) left #autonomic-dev: Quit: Connection closed for inactivity
26.05.18 05:59:55<ditable-kooe>docker pull php5; docker exec
26.05.18 06:00:09<ditable-kooe>whats silly?
26.05.18 06:00:17<ditable-kooe>about that
26.05.18 06:01:09<ditable-kooe>except you end up with a layer above that to orchestrate your docks called docker-compose, and you could really use yet another layer or a good gui above that
26.05.18 06:01:23<ditable-kooe>otherwise there is still a lot of hidden state
26.05.18 06:05:09<ditable-kooe>as on symfony, well, thats another story...:)
26.05.18 06:05:38<ditable-kooe>it seems nicer now that on my first encounter, sure
26.05.18 06:05:52<ditable-kooe>than
26.05.18 06:06:51<ditable-kooe>php has probably matured somewhat as well...
26.05.18 08:37:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
26.05.18 08:37:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
26.05.18 11:48:42*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-genwsrhaxrkrhwix, stoopkid: stoopkid)
26.05.18 14:42:44-christel- [Global Notice] Hi all, you may have noticed that the network is being hit by oh so hilarious (not) spam -- fear not, your passwords are all safe, there's not been any data breach we just happen to have a very bored visitor! Thank you.
27.05.18 05:10:58<ditable-kooe>https://github.com/fish-shell/fish-shell/issues/4664
27.05.18 09:05:47<stoopkid> namespace clashing strikes again
27.05.18 09:06:29<stoopkid> faho's debugging of it there is rather impressive tbh
27.05.18 10:43:41<koo5[m]> Having trouble getting rdflib to give me the parsed graph with ordering intact
27.05.18 10:44:13<koo5[m]> Even in python 3.7 where dicts should be ordered, gonna have to dig into it
27.05.18 17:18:49<ditable-kooe>its not the parser, so it could be the store, continuing tomorrow
28.05.18 22:33:38-emerson- [Global Notice] Several servers are going to split and reconnect soon for routing changes, apologies in advance for the noise, and as always, thanks for flying freenode :)
28.05.18 22:37:39*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-auouqypntwacmfki, (unauthenticated): @koo5:matrix.org)
28.05.18 22:41:40*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-auouqypntwacmfki) left #autonomic-dev: Ping timeout: 240 seconds
28.05.18 22:47:27*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca, (unauthenticated): deadhand)
28.05.18 22:50:38*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-genwsrhaxrkrhwix, stoopkid: stoopkid)
28.05.18 22:51:45*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
                 *** Join: HunterMinerCraft (~root@37.153.110.58, (unauthenticated): root)
28.05.18 22:55:28*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
28.05.18 22:55:59*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
28.05.18 23:14:07*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-exzfkgorirwzqght, (unauthenticated): @koo5:matrix.org)
29.05.18 14:48:34*** Join: Basilisk_of_roko (~root@37.153.110.58, (unauthenticated): root)
29.05.18 20:37:57*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-exzfkgorirwzqght) left #autonomic-dev: Ping timeout: 255 seconds
29.05.18 21:01:32*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-kxrhoddldcgtmabk, (unauthenticated): @koo5:matrix.org)
30.05.18 00:01:35*** Nick change: Basilisk_of_roko (~root@37.153.110.58) is now known as HMCa
30.05.18 05:47:56*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-genwsrhaxrkrhwix) left #autonomic-dev: Quit: Connection closed for inactivity
30.05.18 09:11:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jrfdtyvcbsallypg, stoopkid: stoopkid)
30.05.18 10:31:38<stoopkid> koo5[m]: https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#
30.05.18 10:36:58<ditable-kooe>cute
30.05.18 10:43:06<ditable-kooe>i guess i should be able to write a few points on univar, if you like
30.05.18 10:43:57<stoopkid> a few points on univar?
30.05.18 10:44:08<ditable-kooe>i mean a few todo items for univar
30.05.18 10:44:50<stoopkid> ah
30.05.18 10:45:02<stoopkid> well, not in that doc, that's all dmiles's stuff
30.05.18 10:45:22<ditable-kooe>ofc
30.05.18 10:46:00<stoopkid> having a public to-do list of our own would definitely be good
30.05.18 10:47:46<ditable-kooe>how are you doing?
30.05.18 10:54:07<stoopkid> eh, getting there
30.05.18 10:54:19<stoopkid> how bout you
30.05.18 11:01:34<ditable-kooe>maybe we should do it in github issues, we can organize them with the "projects" thing, + we could export to bountysource automatically i think, and most of all it seems the least work to just create an issue when i think of it...
30.05.18 11:01:56<ditable-kooe>well, not doing bad
30.05.18 11:02:43<ditable-kooe>it was a hassle to get rdflib to at least seem to do what i want, but im happy i could finally dive into it a bit
30.05.18 11:04:03<ditable-kooe> and i have the dependently typed logic programming paper for reading, have you looked at it? should i read it?
30.05.18 11:05:13<ditable-kooe>im glad im taking a break from trying to learn agda, it has been pretty exhausting
30.05.18 11:05:19<stoopkid> i've still only glanced at it; i'm gonna be checking out this LogicT paper today
30.05.18 11:06:06<ditable-kooe>btw we are moving, but it should take up more than a few days
30.05.18 11:06:14<ditable-kooe>shouldnt
30.05.18 11:06:34<ditable-kooe>got keys just today
30.05.18 11:06:43<ditable-kooe>ok
30.05.18 11:09:07<stoopkid> cool
30.05.18 11:10:04<stoopkid> i'll be busy with other stuff for a few days to a week as well actually
30.05.18 11:16:44<ditable-kooe>working on some other income means?
30.05.18 11:17:48<stoopkid> yep :( and also this income means; i'm still trying to figure out bitshares/openledger
30.05.18 11:21:56<ditable-kooe>interesting https://tutellus.cryptonomos.com/
30.05.18 11:22:21<ditable-kooe>what needs figuring out?
30.05.18 11:23:29<stoopkid> i'm stuck on the first step of depositing AGRS with openledger in exchange for OPEN.AGRS
30.05.18 11:24:02<ditable-kooe>any point in me trying as well?
30.05.18 11:24:51<stoopkid> maybe; do you still have AGRS that you need to exchange? 
30.05.18 11:25:09<stoopkid> if not then i'd say don't worry about it
30.05.18 11:25:26<ditable-kooe>i think i kept just a few tokens
30.05.18 11:25:50<ditable-kooe>or none at all, but i probably did keep a few
30.05.18 11:26:11<ditable-kooe>o k
30.05.18 11:27:25<stoopkid> yea i'd only suggest diving into it if you still had AGRS to exchange and didn't wanna wait on my slow ass to figure it out heh
30.05.18 11:27:42<ditable-kooe>yea nope then
30.05.18 12:09:21<koo5[m]> nice, pyin seems to pass quite a few tests in tests/simple/
30.05.18 14:23:16<HMCa> stoopkid: can you pastebin whatever that goog link was for me plz?
30.05.18 14:25:17<stoopkid> https://pastebin.com/QCDqJhZ4
30.05.18 14:26:10<stoopkid> koo5[m]: nice i'll check that out in a bit
30.05.18 14:27:10<HMCa> thx
30.05.18 16:36:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
30.05.18 16:36:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
31.05.18 05:51:28*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jrfdtyvcbsallypg) left #autonomic-dev: Quit: Connection closed for inactivity
31.05.18 08:47:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gyyjvkhwyrzreqqg, stoopkid: stoopkid)
31.05.18 22:16:11*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
31.05.18 22:16:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01.06.18 11:53:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jljddrgzkjaqcnxi, stoopkid: stoopkid)
01.06.18 14:21:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01.06.18 14:22:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.06.18 04:06:21*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca) left #autonomic-dev: Ping timeout: 264 seconds
02.06.18 04:11:40*** Join: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-96-180.dsl.bell.ca, (unauthenticated): deadhand)
02.06.18 05:43:56*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jljddrgzkjaqcnxi) left #autonomic-dev: Quit: Connection closed for inactivity
02.06.18 10:30:54*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ibgkixyxoksuddpf, stoopkid: stoopkid)
03.06.18 11:36:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03.06.18 11:36:24*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.06.18 01:35:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
04.06.18 01:35:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.06.18 06:19:39*** Join: Deadhandd (~deadhand@kntaon1614w-lp130-06-76-66-96-180.dsl.bell.ca, (unauthenticated): deadhand)
06.06.18 10:10:51*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
06.06.18 10:11:19*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.06.18 11:55:09*** Connecting...
06.06.18 11:55:36*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 20 days 12 hours 51 minutes 5 seconds ago
06.06.18 11:55:37*** Names: editable-koo daemoz Deadhandd stoopkid koo5[m] HMCa
                 *** End of /NAMES list.
08.06.18 12:36:52<editable-koo>still working on a visualizer
08.06.18 12:37:18<editable-koo>trying to pull myself together after a week of moving
08.06.18 12:37:27<stoopkid> cool; i'm going over pyin code now
08.06.18 12:37:36<editable-koo>and monday im leaving for five days for a sort of vacation
08.06.18 12:37:46<editable-koo>cool
08.06.18 12:38:10<stoopkid> nice, traveling or just a stay-cation?
08.06.18 12:38:16<editable-koo>i still got some things wrong in it, but i think i'd rather build the visualizer and then hopefully just see them, rather than mull over the logs
08.06.18 12:38:20<editable-koo>stay
08.06.18 12:39:15<stoopkid> i'll see if i can match it up with the fixed-euler code
08.06.18 12:39:53<editable-koo>also, the code is quite complicated by all the debug bookkeeping
08.06.18 12:40:16<editable-koo>if you want i can answer questions in screen
08.06.18 12:40:57<stoopkid> a bit complicated yea, we can probably factor a lot of that out though
08.06.18 13:10:43*** Nick change: stoopkid (uid137696@gateway/web/irccloud.com/x-ibgkixyxoksuddpf) is now known as HMCb
08.06.18 13:11:25*** Nick change: HMCb (uid137696@gateway/web/irccloud.com/x-ibgkixyxoksuddpf) is now known as stoopkid
08.06.18 13:15:05*** Join: koom (~koom@37-48-52-201.tmcz.cz, (unauthenticated): realname)
08.06.18 13:16:19*** Quit: koom (~koom@37-48-52-201.tmcz.cz) left #autonomic-dev: Remote host closed the connection
08.06.18 13:16:41*** Join: koom (~koom@37-48-52-201.tmcz.cz, (unauthenticated): realname)
08.06.18 13:21:28*** Quit: koom (~koom@37-48-52-201.tmcz.cz) left #autonomic-dev: Remote host closed the connection
08.06.18 13:21:48*** Join: koom (~koom@37-48-52-201.tmcz.cz, (unauthenticated): realname)
08.06.18 13:29:49*** Join: koom_ (~koom@89.24.57.175, (unauthenticated): realname)
08.06.18 13:32:45*** Quit: koom (~koom@37-48-52-201.tmcz.cz) left #autonomic-dev: Ping timeout: 260 seconds
08.06.18 14:06:20*** Quit: koom_ (~koom@89.24.57.175) left #autonomic-dev: Ping timeout: 256 seconds
08.06.18 14:13:10*** Join: koom_ (~koom@89.24.57.175, (unauthenticated): realname)
08.06.18 14:47:14*** Quit: koom_ (~koom@89.24.57.175) left #autonomic-dev: Ping timeout: 260 seconds
08.06.18 15:06:20<stoopkid> editable-koo: alright i get the general idea, i'll look at it again tomorrow, gotta work on some other stuff
09.06.18 00:30:37*** Quit: Deadhandd (~deadhand@kntaon1614w-lp130-06-76-66-96-180.dsl.bell.ca) left #autonomic-dev: Ping timeout: 265 seconds
09.06.18 00:33:49*** Join: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca, (unauthenticated): deadhand)
09.06.18 01:13:35*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 01:57:49*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
09.06.18 01:58:13*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
09.06.18 03:05:09*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Ping timeout: 264 seconds
09.06.18 05:44:48*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 06:03:32*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Ping timeout: 245 seconds
09.06.18 06:50:55*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 07:32:01*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Read error: Connection reset by peer
09.06.18 07:35:49*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 07:52:34*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Ping timeout: 264 seconds
09.06.18 07:55:57*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 08:50:32*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Remote host closed the connection
09.06.18 08:50:56*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 09:36:18*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Ping timeout: 265 seconds
09.06.18 09:40:06*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 11:00:35*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Ping timeout: 240 seconds
09.06.18 14:06:52*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-kxrhoddldcgtmabk) left #autonomic-dev: Ping timeout: 240 seconds
09.06.18 16:31:16*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-dkipgjwhuhjvzodj, (unauthenticated): @koo5:matrix.org)
11.06.18 03:21:46*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
11.06.18 03:22:54*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Remote host closed the connection
11.06.18 03:23:18*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
11.06.18 03:26:40*** Quit: koom (~koom@89.24.57.175) left #autonomic-dev: Remote host closed the connection
11.06.18 05:36:56<editable-koo>got any nuprl for dummies material?
11.06.18 05:37:18<editable-koo>since i figure theres not much material at all for redprl
11.06.18 10:53:09<stoopkid> all i know is the reference manual here: http://nuprl.org/html/NuprlSystem.html
12.06.18 00:14:01*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
12.06.18 00:14:26*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.06.18 02:38:36*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
12.06.18 02:39:05*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.06.18 05:03:22*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 264 seconds
12.06.18 05:15:48*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.06.18 12:08:50*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-dkipgjwhuhjvzodj) left #autonomic-dev: Remote host closed the connection
12.06.18 12:18:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ibgkixyxoksuddpf) left #autonomic-dev: Quit: Connection closed for inactivity
12.06.18 12:34:45*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vwsjqtowdrstrxun, (unauthenticated): @koo5:matrix.org)
12.06.18 12:50:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hnehzpoxjxpckwmx, stoopkid: stoopkid)
12.06.18 16:49:26*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vwsjqtowdrstrxun) left #autonomic-dev: Read error: Connection reset by peer
12.06.18 17:08:45*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hsozynxelmhilfzt, (unauthenticated): @koo5:matrix.org)
12.06.18 17:48:57*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 245 seconds
12.06.18 18:05:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.06.18 19:15:56*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hsozynxelmhilfzt) left #autonomic-dev: Remote host closed the connection
12.06.18 19:35:11*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-ajesiijdozmiafxj, (unauthenticated): @koo5:matrix.org)
13.06.18 05:58:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hnehzpoxjxpckwmx) left #autonomic-dev: Quit: Connection closed for inactivity
13.06.18 08:27:08*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xoietmrfxupqgyrw, stoopkid: stoopkid)
14.06.18 01:23:26<koo5[m]> Okay, im now somewhat comfortable with rdflib, now will see how goes stretching the limits of graphviz
14.06.18 02:05:58<HMCa> graphviz can stretch pretty far, but never as far as I want it to
15.06.18 20:10:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
15.06.18 20:10:26*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
16.06.18 22:00:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
16.06.18 22:00:54*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.06.18 05:37:28*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
17.06.18 05:37:52*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.06.18 09:12:02-SaslServ- koom!~sirdancea@89.24.34.56 has just authenticated as you (sirdancealot)
17.06.18 09:12:08*** Join: koom (~sirdancea@89.24.34.56, sirdancealot: koo5)
17.06.18 15:22:41*** Quit: koom (~sirdancea@89.24.34.56) left #autonomic-dev: Quit: Leaving
17.06.18 17:22:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
17.06.18 17:23:22*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
18.06.18 19:02:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xoietmrfxupqgyrw) left #autonomic-dev: Quit: Connection closed for inactivity
18.06.18 20:11:05*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fmozhepvkczrcevg, stoopkid: stoopkid)
18.06.18 21:55:33<daemoz> Hey all, how goes? What's new?
18.06.18 21:56:46<stoopkid> hey daemoz
18.06.18 21:57:46<stoopkid> well, making minor amounts of progress with the N3/sem-web stuff
18.06.18 21:58:35<stoopkid> how bout you?
18.06.18 21:59:51<daemoz> Cool what's that look? Expressing mltt in n3?
18.06.18 22:00:37<daemoz> I've been busy it's festival season and I got a gig making high-kid traps with lights and sounds haha. Starting to have some time open so I've been trying to absorb some logic foundations.
18.06.18 22:00:56<daemoz> My heads still here even if I dont' have much time these days.
18.06.18 22:01:19<stoopkid> nice :)
18.06.18 22:01:44<stoopkid> yea trying to express mltt in n3, or even just figure out how n3 actually works heh
18.06.18 22:04:24<daemoz> That's the triplet stuff? Got a good intro document you'd recommend?
18.06.18 22:07:44<stoopkid> this might be a good place to start: http://www.agfa.com/w3c/2002/02/thesis/thesis.pdf
18.06.18 22:07:52<stoopkid> and yea the triplet/quad stuff
18.06.18 22:09:40<daemoz> Sweet, I'll look at this.
19.06.18 03:12:45<editable-koo>hey
19.06.18 03:12:58<editable-koo>so, i got some graphs...
19.06.18 03:13:35<editable-koo>still got to tweak them a bit
19.06.18 03:13:58<stoopkid> nice got a link?
19.06.18 03:14:12<editable-koo>i guless ill upload a sample
19.06.18 03:14:43<HMCa> someone just pointed me at kframework.org
19.06.18 03:16:35<stoopkid> looks interesting, i'll try  to dig into it at some point
19.06.18 03:23:43<editable-koo>http://orange.now.im/workspace/graphs/
19.06.18 03:32:18<stoopkid> cool, yea we'll definitely want something like this for debugging the proofs
19.06.18 22:03:07-SaslServ- koom!~sirdancea@89.24.52.165 has just authenticated as you (sirdancealot)
19.06.18 22:03:14*** Join: koom (~sirdancea@89.24.52.165, sirdancealot: koo5)
19.06.18 23:51:26*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fmozhepvkczrcevg) left #autonomic-dev: Ping timeout: 260 seconds
20.06.18 00:11:27*** Join: kook (~sirdancea@37-48-17-181.tmcz.cz, sirdancealot: koo5)
20.06.18 00:13:57*** Quit: koom (~sirdancea@89.24.52.165) left #autonomic-dev: Ping timeout: 240 seconds
20.06.18 02:21:53*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-debtkpxqtcjakwpk, stoopkid: stoopkid)
20.06.18 08:57:00*** Quit: kook (~sirdancea@37-48-17-181.tmcz.cz) left #autonomic-dev: Ping timeout: 256 seconds
20.06.18 20:41:48*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
20.06.18 20:42:15*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
21.06.18 03:02:32*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-debtkpxqtcjakwpk) left #autonomic-dev: Quit: Connection closed for inactivity
21.06.18 07:56:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kaqranarspepwnhu, stoopkid: stoopkid)
21.06.18 10:17:31*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
21.06.18 10:17:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
21.06.18 16:47:17*** Join: koom (~sirdancea@89.24.37.163, sirdancealot: koo5)
21.06.18 16:48:19<editable-koo>ok, so its worthwhile continuing with it? im having a bit of a crisis of motivation here
21.06.18 17:06:08<stoopkid> editable-koo: i think so, although i'm not sure what all the reasons for your crisis of motivation are, have you run into any problems using the graphing framework?
22.06.18 01:14:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kaqranarspepwnhu) left #autonomic-dev: Quit: Connection closed for inactivity
22.06.18 03:01:59<koo5[m]> after the long discussion about bnodes in #autonomic, im skeptical that all that can be sorted out at all, or is a reasonable base for autonomic
22.06.18 03:02:58<koo5[m]> my framework is working fine
22.06.18 03:20:28<HMCa> koo5[m]: don't fear the anon nodes, it is really not as wild as it might seem
22.06.18 03:21:22<koo5[m]> ok heh
22.06.18 06:52:53*** Join: kook (~sirdancea@37-48-5-180.tmcz.cz, sirdancealot: koo5)
22.06.18 06:55:32*** Quit: koom (~sirdancea@89.24.37.163) left #autonomic-dev: Ping timeout: 256 seconds
22.06.18 07:15:34*** Quit: kook (~sirdancea@37-48-5-180.tmcz.cz) left #autonomic-dev: Ping timeout: 268 seconds
22.06.18 07:40:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yvhchsxybcfqpejv, stoopkid: stoopkid)
22.06.18 08:19:12*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
22.06.18 08:19:42*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
22.06.18 23:08:22<stoopkid> editable-koo: whatever we use is gonna have proof-trees that we'll want to graph
22.06.18 23:10:29<stoopkid> even in the scenario that N3 doesn't work out (which hopefully isn't the case but i'm still waiting for full demonstration of how it does work out), that wouldn't invalidate the plan that would just mean we move to a plan B for creating a natural deduction system
22.06.18 23:12:05<stoopkid> and a natural deduction system is just a few tweaks away from the univar stuff we have, so whatever we use could still be "N3-ish"
24.06.18 02:37:43<editable-koo>hmm i see
24.06.18 02:38:44<editable-koo>well, pyin passess all tests in tests/simple now, and draws these basic graphs along the way1
24.06.18 02:43:39<editable-koo>i was thinking i could now use it to experiment with some of the disputed stuff like list internalization, but im not sure with what exactly
24.06.18 02:44:29<editable-koo>what list internalization does, we've already shown in univar, although im a bit hazy on the details
24.06.18 03:02:50<HMCa> well, at least mostly. :-)
24.06.18 03:03:01<HMCa> (shown)
24.06.18 03:03:58<HMCa> univar was still always single graph, for example (not that this would make very much difference for lists that are kept internalized)
24.06.18 03:04:29* HMCa needs to find time to look at your visualization
24.06.18 03:04:45<HMCa> has been a busy and drama-filled week, heh
24.06.18 03:11:14<editable-koo>single-graph in what sense?
24.06.18 03:25:26<HMCa> it operates with everything in one "document"... the kb is just one set of statements, not a collection of several sets of statements
24.06.18 03:27:05<HMCa> we "do" everything in the top level reasoning context, because it is the only context at all (besides the "built-in" background)
24.06.18 03:28:42<HMCa> in cwm/eye/etc there are distinct reasoning contexts beyond the background and top level (which is why they can implement something like log:includes, or scope in e:findall, etc)
24.06.18 17:51:57*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
24.06.18 17:52:21*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
25.06.18 05:25:51*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
25.06.18 17:33:22*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Ping timeout: 264 seconds
26.06.18 00:44:31*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
26.06.18 07:00:36*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Remote host closed the connection
26.06.18 07:01:23*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
26.06.18 07:09:35*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Ping timeout: 256 seconds
26.06.18 11:40:25*** Join: koom (~sirdancea@89.24.48.59, sirdancealot: koo5)
26.06.18 12:04:50*** Quit: koom (~sirdancea@89.24.48.59) left #autonomic-dev: Ping timeout: 245 seconds
26.06.18 13:47:15*** Join: koom (~sirdancea@89.24.48.59, sirdancealot: koo5)
26.06.18 14:30:56*** Quit: koom (~sirdancea@89.24.48.59) left #autonomic-dev: Read error: Connection reset by peer
26.06.18 14:32:26*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
26.06.18 16:27:45*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Ping timeout: 248 seconds
27.06.18 01:37:24*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 03:00:11*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Ping timeout: 256 seconds
27.06.18 03:06:31*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 03:20:23*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Ping timeout: 256 seconds
27.06.18 07:51:41*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 10:17:14*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Remote host closed the connection
27.06.18 10:17:37*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 12:14:11*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Ping timeout: 256 seconds
27.06.18 16:14:01*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 19:14:14*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #autonomic-dev: Ping timeout: 255 seconds
27.06.18 19:41:15*** Join: koom (~sirdancea@89.24.51.48, sirdancealot: koo5)
27.06.18 20:45:57*** Quit: koom (~sirdancea@89.24.51.48) left #autonomic-dev: Ping timeout: 240 seconds
28.06.18 03:14:52*** Join: koom (~sirdancea@89.24.51.48, sirdancealot: koo5)
28.06.18 07:31:06*** Quit: koom (~sirdancea@89.24.51.48) left #autonomic-dev: Ping timeout: 268 seconds
28.06.18 07:54:49*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
28.06.18 07:55:13*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
29.06.18 04:36:03*** Join: kook (~sirdancea@89.24.51.48, sirdancealot: koo5)
29.06.18 04:59:19*** Quit: kook (~sirdancea@89.24.51.48) left #autonomic-dev: Ping timeout: 268 seconds
29.06.18 12:17:48*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-ajesiijdozmiafxj) left #autonomic-dev: Ping timeout: 245 seconds
29.06.18 13:02:37*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pkwqrncygrlnstvd, (unauthenticated): @koo5:matrix.org)
29.06.18 19:44:52*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yvhchsxybcfqpejv) left #autonomic-dev: 
30.06.18 00:25:36*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hrjpfjyaeziaqxav, stoopkid: stoopkid)
30.06.18 02:05:30*** Join: kook (~sirdancea@89.24.50.180, sirdancealot: koo5)
30.06.18 02:23:17*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pkwqrncygrlnstvd) left #autonomic-dev: Ping timeout: 240 seconds
30.06.18 03:34:18*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-szciqgkjeilmpoul, (unauthenticated): @koo5:matrix.org)
30.06.18 03:40:20*** Quit: kook (~sirdancea@89.24.50.180) left #autonomic-dev: Remote host closed the connection
30.06.18 15:39:08*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
30.06.18 15:39:31*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01.07.18 03:38:29*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
01.07.18 03:38:55*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01.07.18 06:04:05*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
01.07.18 14:33:11*** Quit: koom (~sirdancea@89.24.51.29) left #autonomic-dev: Remote host closed the connection
01.07.18 15:24:51*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
01.07.18 15:46:10*** Quit: koom (~koom@89.24.51.29) left #autonomic-dev: Ping timeout: 245 seconds
01.07.18 16:21:32*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
01.07.18 17:30:44*** Quit: koom (~koom@89.24.51.29) left #autonomic-dev: Ping timeout: 255 seconds
02.07.18 08:57:59*** Join: koom (~koom@89.24.32.177, (unauthenticated): realname)
02.07.18 09:01:35*** Quit: koom (~koom@89.24.32.177) left #autonomic-dev: Read error: Connection reset by peer
02.07.18 09:08:43*** Join: koom (~koom@89.24.32.177, (unauthenticated): realname)
02.07.18 09:18:43*** Quit: koom (~koom@89.24.32.177) left #autonomic-dev: Ping timeout: 240 seconds
02.07.18 10:48:40*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
02.07.18 11:09:22*** Quit: koom (~koom@89.24.51.29) left #autonomic-dev: Ping timeout: 245 seconds
02.07.18 15:55:31*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
02.07.18 15:57:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02.07.18 15:57:31*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.07.18 16:47:27*** Quit: koom (~sirdancea@89.24.51.29) left #autonomic-dev: Ping timeout: 240 seconds
02.07.18 18:05:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02.07.18 18:05:37*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03.07.18 01:04:17*** Join: koom (~sirdancea@37-48-19-61.tmcz.cz, sirdancealot: koo5)
03.07.18 02:42:10*** Join: koom_ (~koom@37-48-19-61.tmcz.cz, (unauthenticated): realname)
03.07.18 02:54:25*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca) left #autonomic-dev: Ping timeout: 268 seconds
03.07.18 02:55:00*** Join: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca, (unauthenticated): deadhand)
03.07.18 05:16:49*** Quit: koom_ (~koom@37-48-19-61.tmcz.cz) left #autonomic-dev: Ping timeout: 255 seconds
03.07.18 05:18:05*** Quit: koom (~sirdancea@37-48-19-61.tmcz.cz) left #autonomic-dev: Ping timeout: 276 seconds
03.07.18 10:00:24*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hrjpfjyaeziaqxav) left #autonomic-dev: Quit: Connection closed for inactivity
03.07.18 11:29:47*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vzafmzinwafeqstu, stoopkid: stoopkid)
03.07.18 15:20:20*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vzafmzinwafeqstu) left #autonomic-dev: Quit: Connection closed for inactivity
03.07.18 17:32:40*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
03.07.18 17:33:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03.07.18 18:05:37*** Join: koom (~sirdancea@37-48-19-61.tmcz.cz, sirdancealot: koo5)
03.07.18 18:05:59*** Join: koom_ (~koom@37-48-19-61.tmcz.cz, (unauthenticated): realname)
03.07.18 19:57:08*** Quit: koom_ (~koom@37-48-19-61.tmcz.cz) left #autonomic-dev: Ping timeout: 256 seconds
03.07.18 22:07:29*** Quit: koom (~sirdancea@37-48-19-61.tmcz.cz) left #autonomic-dev: Ping timeout: 248 seconds
03.07.18 22:24:07*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bdsfhqlauwpymemx, stoopkid: stoopkid)
04.07.18 01:39:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
04.07.18 01:39:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.07.18 02:06:59*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bdsfhqlauwpymemx) left #autonomic-dev: Quit: Connection closed for inactivity
04.07.18 02:23:21*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
04.07.18 02:23:32*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
04.07.18 02:49:37*** Quit: koom_ (~koom@89.24.51.29) left #autonomic-dev: Remote host closed the connection
04.07.18 02:50:01*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
04.07.18 07:16:54*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-juwtdquvazwnmajl, stoopkid: stoopkid)
04.07.18 10:22:27*** Quit: koom (~sirdancea@89.24.51.29) left #autonomic-dev: Ping timeout: 240 seconds
04.07.18 10:22:34*** Quit: koom_ (~koom@89.24.51.29) left #autonomic-dev: Ping timeout: 264 seconds
04.07.18 13:16:27*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-juwtdquvazwnmajl) left #autonomic-dev: Quit: Connection closed for inactivity
04.07.18 14:06:05*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 240 seconds
04.07.18 14:11:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.07.18 14:12:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
04.07.18 14:12:40*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.07.18 15:30:26*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
04.07.18 15:32:50*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
04.07.18 16:13:32*** Quit: koom (~sirdancea@89.24.51.29) left #autonomic-dev: Ping timeout: 245 seconds
04.07.18 17:27:09*** Quit: koom_ (~koom@89.24.51.29) left #autonomic-dev: Ping timeout: 255 seconds
04.07.18 22:10:31*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lnvvflwisbpprteb, stoopkid: stoopkid)
04.07.18 23:41:17*** Connecting...
#autonomic-dev> 05.07.18 11:50:37*** Join: editable-koo (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 1 month 19 days 12 hours 46 minutes 5 seconds ago
                 *** Names: editable-koo daemoz_ kook koom Deadhand koo5[m] HMCa
                 *** End of /NAMES list.
05.07.18 11:52:36*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nflikgaroarelsxj, stoopkid: stoopkid)
05.07.18 14:00:59*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nflikgaroarelsxj) left #autonomic-dev: Quit: Connection closed for inactivity
06.07.18 00:32:21*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-agyyartnfdcffzly, stoopkid: stoopkid)
06.07.18 03:16:42*** Connecting...
06.07.18 06:43:32*** Connecting...
06.07.18 06:43:49*** Join: editable-koo (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 1 month 20 days 7 hours 39 minutes 17 seconds ago
                 *** Names: editable-koo daemoz_ kook koom Deadhand koo5[m] HMCa
                 *** End of /NAMES list.
06.07.18 14:47:20*** Quit: koom (~koom@89.24.51.29) left #autonomic-dev: Ping timeout: 245 seconds
06.07.18 14:55:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-zjpgomztgcvcaerl, stoopkid: stoopkid)
06.07.18 14:59:11*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
06.07.18 15:23:54*** Quit: koom (~koom@89.24.51.29) left #autonomic-dev: Remote host closed the connection
06.07.18 15:24:22*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
06.07.18 17:20:14*** Quit: koom (~koom@89.24.51.29) left #autonomic-dev: Ping timeout: 276 seconds
06.07.18 17:58:28<kook> daemoz_, stoopkid , i set up another vps, this time the io seems ok. its in newyork, so a little laggy from europe. i plan to use it to scale up editable-log operations. i have copied over your ssh keys. root@loworbit.now.im -p 44
06.07.18 17:59:50<daemoz_> neat
06.07.18 18:00:51<kook> please create a user if you plan to fool around
06.07.18 18:01:10<daemoz_> will do
06.07.18 18:01:19<daemoz_> I think I forgot my passphrase for my key lol
06.07.18 18:02:00<kook> np, paste me another one
06.07.18 18:13:53*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zjpgomztgcvcaerl) left #autonomic-dev: Quit: Connection closed for inactivity
06.07.18 18:34:11<daemoz_> Still working through idris?
06.07.18 18:47:41<editable-koo>yes, you?
06.07.18 18:48:03<daemoz_> Yep, making my way through the book still and trying to come up with things to attempt to model.
06.07.18 18:48:28<daemoz_> I want to make a type that ensures a list is sorted, by providing the type with a predicate.
06.07.18 18:48:42<daemoz_> At least that's my current practice example. I'm not doing very well so far on it xD
06.07.18 18:49:49<editable-koo>im not that far yet, only almost halfway through the book
06.07.18 18:55:38<editable-koo>which chapter are you on?
06.07.18 18:59:00<daemoz_> You're probably ahead of me then I think I'm still on chapter 2
06.07.18 18:59:14* daemoz_ daemoz is a turtle
06.07.18 18:59:20<daemoz_> erm, well you get the gist
06.07.18 19:02:47<editable-koo>chapter 2 would be "Getting started with Idris"?
06.07.18 19:04:03<daemoz_> I'm at the beginning of chapter 3
06.07.18 19:04:34*** Nick change: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) is now known as daemoz
06.07.18 19:04:52<daemoz> I pm'd 'kook' with my pubkey btw
06.07.18 19:09:11<editable-koo>ok
06.07.18 19:09:24<editable-koo>i dont know how i'd go about adding a predicate to an existing type
06.07.18 19:10:22<editable-koo>try sshing in?
06.07.18 19:10:45<daemoz> Well a perhaps naive way to do it seems to be a type accepting a list and a predicate, and applying the predicate to the list
06.07.18 19:13:33<editable-koo>what i can come up with is defining your own type that mimics a list, implements a Nil and a ::
06.07.18 19:17:30<editable-koo>ok i guess i see what you mean, except the applying part
06.07.18 19:19:15<daemoz> data : Sorted : List -> (pred: (Nat -> Bool)) -> Type where
06.07.18 19:19:26<daemoz> is what I have been thinking
06.07.18 19:19:39<daemoz> *data Sorted :
06.07.18 19:22:00<editable-koo>Nat -> Nat -> Bool, maybe, for comparison?
06.07.18 19:23:24<daemoz> True
06.07.18 19:33:22<editable-koo>hmm
06.07.18 19:40:48<editable-koo>so, ignoring that this is a convoluted example..
06.07.18 19:48:00<daemoz> okay
06.07.18 19:55:03<editable-koo>im thinking something like this:
06.07.18 19:55:04<editable-koo>data Sorted : List -> (pred: (e -> e -> Bool)) -> (Holds pred list) -> Type where
                 <editable-koo>        SortedList : Sorted
                 <editable-koo>data isTrue : Bool -> Type where
                 <editable-koo>        isTrue true -> isTrue
                 <editable-koo>data Holds : (e -> e -> Bool) -> List e -> Type where
                 <editable-koo>        HHH : fun -> (x :: y :: xs) -> (isTrue (fun x y)) -> (Holds fun (y :: xs)) -> Holds
                 <editable-koo>        HH  : fun -> (x :: []) -> Holds
                 <editable-koo>        H   : fun -> [] -> Holds
06.07.18 20:08:42*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lybhcyrlxdkcdbon, stoopkid: stoopkid)
06.07.18 21:06:17<editable-koo>data IsTrue : Type where
06.07.18 21:06:18<editable-koo>        IsTrue1 : true -> IsTrue
                 <editable-koo>codata Holds : (e -> e -> Bool) -> List e -> Type where
                 <editable-koo>        HHH : (fun : (e -> e -> Bool)) -> (xyxs : List e) -> (IsTrue (fun x y)) -> (Holds fun (y :: xs)) -> Holds fun x::y::xs
                 <editable-koo>--      HH  : fun -> (x :: []) -> Holds
                 <editable-koo>        H   : (fun : e -> e -> Bool) -> [] -> Holds fun n
                 <editable-koo>data Sorted : Type where
                 <editable-koo>        SortedList : (l : List e) -> (pred: (e -> e -> Bool)) -> (Holds pred list) -> Sorted
06.07.18 21:06:39<editable-koo>idk, it doesnt seem like you can actually do stuff in functional programming
06.07.18 21:06:44<editable-koo>err i mean in constructors
06.07.18 21:07:04<editable-koo>freudian slip
06.07.18 21:12:47<daemoz> That makes sense, I'll play around with trying to get that to work.
06.07.18 21:20:24<editable-koo>nah
06.07.18 21:24:58*** Quit: kook (~sirdancea@89.24.51.29) left #autonomic-dev: Ping timeout: 264 seconds
06.07.18 21:59:07<daemoz> Will there be functions in autonomic? People will be able to define types with rdf but also functions on types and data?
06.07.18 22:00:01<daemoz> Also 
06.07.18 22:00:17<daemoz> editable-koo: This is where I'm at on the sorted Type--
06.07.18 22:00:39<daemoz> data Sorted : (list : List Nat) -> (pred: (List Nat -> Bool)) -> Type where
06.07.18 22:00:56<daemoz>   MkSorted : {pred : List Nat -> Bool} -> pred list -> Sorted list pred
06.07.18 22:01:33<daemoz> Although in MkSorted, It will not compile 'pred list' because that returns a value of Bool and not a type. So I am confused how to use the result from 'pred list' in the type.
06.07.18 22:47:31*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lybhcyrlxdkcdbon) left #autonomic-dev: Quit: Connection closed for inactivity
06.07.18 23:03:02*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dekbgsicxvfylesl, stoopkid: stoopkid)
06.07.18 23:11:52<stoopkid> daemoz: sure people will be able to make functions
06.07.18 23:13:32<stoopkid> can’t have constructive proofs of implications without having functions
06.07.18 23:13:58<stoopkid> the question for me is: under eha
06.07.18 23:14:29<stoopkid> under what* circumstances will users be able to “safely” execute them
06.07.18 23:23:37<stoopkid> editable-koo: not really a convoluted example, there’s all kinds of applications for that
06.07.18 23:24:21<stoopkid> every algorithm on lists that only works under the assumption that the list is sorted, for example
06.07.18 23:28:10<stoopkid> daemoz: instead of “pred list” do “pred list == true”
06.07.18 23:42:46<daemoz> stoopkid: I tried that but it seemed to then just complain that _==_ was of type Bool also
06.07.18 23:44:31<daemoz> Okay, I replaced '==' with '=' and it likes it.
06.07.18 23:57:58<stoopkid> daemoz: ah woops was thinking of agda syntax
07.07.18 00:02:27<stoopkid> yea i guess the _==_ is gonna be returning a Bool true if they’re equal; the _=_ gives you a type which has a proof iff they’re equal
07.07.18 05:38:22*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
07.07.18 06:37:27<daemoz> I think I figured it out for the most part but stuck on something maybe simple.
07.07.18 06:37:29<daemoz> given:
07.07.18 06:37:35<daemoz> data Thing : Nat -> Type where
07.07.18 06:37:47<daemoz>   MkThing : (x: Nat) -> x = Z -> Thing x
07.07.18 06:38:02<daemoz> why can I construct a 'Thing (S Z)'?
07.07.18 06:38:34<daemoz> I feel like 'Thing (S Z)' would require an '(S Z) = Z' which shouldn't be possible right?
07.07.18 07:48:22*** Quit: koom (~sirdancea@89.24.51.29) left #autonomic-dev: Ping timeout: 264 seconds
07.07.18 12:20:24<stoopkid> daemoz: i’d agree with that, but i may be missing something; were you able to actually construct a ‘Thing (S Z)’?
07.07.18 14:25:13*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
07.07.18 15:14:51<editable-koo>alright ive just reached the relevant chapter today
07.07.18 15:40:46<daemoz> stoopkid: yes i was able to construct one with any Nat
07.07.18 15:41:02<daemoz> editable-koo: what chapter?
07.07.18 15:42:13<stoopkid> alright well let's see if you can prove False then
07.07.18 15:42:22*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
07.07.18 15:44:36<stoopkid> you should be able to first prove: (x : Nat) -> Thing x -> x = Z
07.07.18 15:45:39<stoopkid> actually
07.07.18 15:47:16<editable-koo>chapter 8
07.07.18 15:50:45<stoopkid> so, first, the argument to Thing should probably be a parameter instead of an index
07.07.18 15:51:43<stoopkid> i.e. like "data Thing (x : Nat) : Type where; mkThing : x = Z -> Thing x"
07.07.18 15:54:35<daemoz> stoopkid: if I do it like that it has no change in behavior
07.07.18 15:55:21<stoopkid> alright so we should be able to prove (x : Nat) -> Thing x -> x = Z with "proof x (MkThing p) = p"
07.07.18 15:57:17<daemoz> I'm not sure what you mean by that.
07.07.18 15:57:28<daemoz> 'proof' appears to be a keyword but I do not know how to use it.
07.07.18 15:57:48<stoopkid> myProof : (x : Nat) -> Thing x -> x = Z
07.07.18 15:57:54<stoopkid> myProof x (MkThing p) = p
07.07.18 15:59:03<daemoz> Yeah that appears to typecheck
07.07.18 16:00:17<stoopkid> alright now construct a proof of (S Z) = Z by applying myProof to your Thing (S Z)
07.07.18 16:01:30<daemoz> Ahahaha, well
                 <daemoz> it returns this type:
                 <daemoz> proof1 1 : Thing 1 -> 1 = 0
                 <daemoz> ummm, hahah
07.07.18 16:01:42<daemoz> how can it construct that proof
07.07.18 16:02:07<stoopkid> don't you have a "myThing1 : Thing 1" ?
07.07.18 16:02:23<stoopkid> proof1 1 myThing1 : 1 = 0
07.07.18 16:03:39<daemoz> well I do it's just called 'proof1'
07.07.18 16:04:09<stoopkid> so "proof1 : Thing 1" ?
07.07.18 16:04:54<daemoz> proof 1 : Thing 1 -> 1 = 0
07.07.18 16:04:58*** Quit: koom_ (~koom@89.24.51.29) left #autonomic-dev: Remote host closed the connection
07.07.18 16:05:19*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
07.07.18 16:05:28<daemoz> exactly as you wrote 'myProof' above, the name is just different.
07.07.18 16:05:58<daemoz> oh wait mayb eI misread
07.07.18 16:09:04<stoopkid> you should have something like: https://pastebin.com/hJ7vZc6q
07.07.18 16:11:01<daemoz> typechecks fine
07.07.18 16:19:03<stoopkid> https://pastebin.com/9jDXLSzR
07.07.18 16:22:21<stoopkid> https://pastebin.com/6Rwnt5Qc
07.07.18 16:22:54<stoopkid> i'm trying to install idris but it's clashing with agda i have to figure out how to do that cabal sandboxes thing or something
07.07.18 16:23:49<daemoz> can you get into koos new vpn?
07.07.18 16:24:28<stoopkid> yea
07.07.18 16:25:42<daemoz> ahh hmmm, it's not letting me install idris says the kernel is oudated
07.07.18 16:25:55<daemoz> oh I suppose it's going anyways
07.07.18 16:36:23<editable-koo>does it work?
07.07.18 16:37:04<editable-koo>stoopkid: or just make a new user
07.07.18 16:45:22<daemoz> Getting the deps installed
07.07.18 16:45:33<daemoz> take 2 at installing idris on your vps editable-koo 
07.07.18 16:45:37<daemoz> should work this time
07.07.18 16:46:10<editable-koo>i c
07.07.18 16:46:13<daemoz> ew, it's getting the same error that my ubuntu vm had, I think it may just be specific to ubuntu
07.07.18 16:47:35<daemoz> stoop the user common on my machine is open again, you could go there.
07.07.18 16:47:48<editable-koo>are you in screen?
07.07.18 16:51:51<daemoz> nah
07.07.18 16:51:58<daemoz> but you can 'cabal install idris' to see the issue
07.07.18 16:53:01<editable-koo>ok
07.07.18 16:59:09<editable-koo>ive replaced apt-installed haskell with ...a website installed
07.07.18 16:59:36<editable-koo>lets see if it helps
07.07.18 17:00:21<daemoz> mkay
07.07.18 17:15:20<editable-koo>still building..
07.07.18 17:16:28<editable-koo>Installed idris-1.3.0
                 <editable-koo>Warning: could not create symlinks in /home/user/.cabal/bin for cheapskate,
                 <editable-koo>idris, idris-codegen-c, idris-codegen-javascript, idris-codegen-node because
                 <editable-koo>the files exist there already and are not managed by cabal. You can create
                 <editable-koo>symlinks for these executables manually if you wish. The executable files have
                 <editable-koo>been installed at /home/user/.cabal/bin/cheapskate,
                 *** Unknown command: home/user/.cabal/bin/idris,
                 *** Unknown command: home/user/.cabal/bin/idris-codegen-javascript,
07.07.18 17:16:59<editable-koo>...
07.07.18 17:25:05<daemoz> well that's good
07.07.18 17:25:48<daemoz> yeah the executable in that .cabal/bin seems to work fine
07.07.18 20:29:53<stoopkid> daemoz: connection timed out when trying to connect to your VPN
07.07.18 20:30:07*** Join: kook (~sirdancea@89.24.49.212, sirdancealot: koo5)
07.07.18 20:30:28*** Join: koom__ (~koom@89.24.49.212, (unauthenticated): realname)
07.07.18 20:32:17*** Quit: koom (~sirdancea@89.24.51.29) left #autonomic-dev: Ping timeout: 245 seconds
07.07.18 20:33:03*** Quit: koom_ (~koom@89.24.51.29) left #autonomic-dev: Ping timeout: 240 seconds
07.07.18 21:22:51<stoopkid> yea i'm having trouble installing idris as well
07.07.18 21:22:59<stoopkid> exit failure -11
07.07.18 21:24:41<stoopkid> this issue: https://github.com/idris-lang/Idris-dev/issues/4484
07.07.18 21:31:26<daemoz> Yep, one of those confirmation comments is actually me haha
07.07.18 21:31:53<daemoz> stoopkid: were you able to get in with those instructions?
07.07.18 21:32:20<stoopkid> yep and heh didn't notice that
07.07.18 21:33:20<daemoz> neato, neato
08.07.18 03:43:08<editable-koo>so, you guys using the 'user' user on my new vps?
08.07.18 03:43:26<editable-koo>im gonna try to set up emacs for idris there
08.07.18 04:25:51<daemoz> That's the one I'm using yeah. I can't connect with that user though I have to su in
08.07.18 05:07:12<editable-koo>ive copied the authorized_keys from the root account so that works now
08.07.18 05:07:33<editable-koo>im in screen playing with idris-mode
08.07.18 06:52:25<daemoz> haha couldn't figure out how to detach
08.07.18 06:52:32<daemoz> gonna crash for now but i'll be on later
08.07.18 06:53:29<koom__> :)
08.07.18 06:53:42<koom__> Cc Cd
08.07.18 06:59:47<koom__> errr Ca Cd
08.07.18 08:43:41<kook>  https://news.ycombinator.com/item?id=17479143
08.07.18 09:11:09*** Quit: kook (~sirdancea@89.24.49.212) left #autonomic-dev: Ping timeout: 264 seconds
08.07.18 09:11:11*** Quit: koom__ (~koom@89.24.49.212) left #autonomic-dev: Ping timeout: 256 seconds
08.07.18 12:43:48*** Join: koom (~sirdancea@89.24.49.212, sirdancealot: koo5)
08.07.18 12:43:49*** Join: koom_ (~koom@89.24.49.212, (unauthenticated): realname)
08.07.18 13:12:08*** Quit: koom_ (~koom@89.24.49.212) left #autonomic-dev: Remote host closed the connection
08.07.18 13:12:33*** Join: koom_ (~koom@89.24.49.212, (unauthenticated): realname)
08.07.18 13:26:27*** Quit: koom_ (~koom@89.24.49.212) left #autonomic-dev: Ping timeout: 240 seconds
08.07.18 14:30:38*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
08.07.18 14:31:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
08.07.18 15:01:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
08.07.18 15:02:00*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
08.07.18 15:05:21*** Quit: koom (~sirdancea@89.24.49.212) left #autonomic-dev: Ping timeout: 256 seconds
08.07.18 15:44:37*** Join: koom (~sirdancea@89.24.49.212, sirdancealot: koo5)
08.07.18 16:45:11*** Quit: koom (~sirdancea@89.24.49.212) left #autonomic-dev: Ping timeout: 276 seconds
08.07.18 17:09:19*** Join: koom (~sirdancea@89.24.49.212, sirdancealot: koo5)
08.07.18 17:13:17*** Quit: koom (~sirdancea@89.24.49.212) left #autonomic-dev: Remote host closed the connection
09.07.18 11:44:05*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
09.07.18 11:44:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
09.07.18 16:19:29*** Join: koom (~koom@37-48-35-202.tmcz.cz, (unauthenticated): realname)
09.07.18 18:14:05*** Quit: koom (~koom@37-48-35-202.tmcz.cz) left #autonomic-dev: Ping timeout: 260 seconds
09.07.18 22:19:43*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 260 seconds
09.07.18 22:31:44*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
10.07.18 12:31:29*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca) left #autonomic-dev: Ping timeout: 248 seconds
10.07.18 12:32:59*** Join: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca, (unauthenticated): deadhand)
10.07.18 16:14:03<stoopkid> koo5[m]: i guess i'm fine with python for prototyping
10.07.18 16:14:29<stoopkid> i had some reservations about it because it's interpreted and dynamically typed but i think it should be fine
10.07.18 16:15:02<stoopkid> theoretically somebody could make a python compiler, so..
10.07.18 16:15:17<stoopkid> it's just a matter of affording ourselves the linguistic convenience
10.07.18 16:20:58<daemoz> an alternative is common-lisp. might be the easiest of the ones proposed so far since we can build our own syntax.
10.07.18 16:21:31<daemoz> as far as 'linguistic convenience'
10.07.18 16:22:10<daemoz> but really I'm just stirring the pot, you know me.
10.07.18 16:25:30<stoopkid> some variant of lisp sounds great to me tbh
10.07.18 16:27:08<stoopkid> then again, i'd have to see how well the variant does with interfacing with the impure computations
10.07.18 16:28:41<daemoz> common lisp is a production language
10.07.18 16:28:53<daemoz> so should be quite usable in that regard
10.07.18 16:29:39* stoopkid checking it out
10.07.18 16:40:50<stoopkid> installed via this method: https://askubuntu.com/a/670362
10.07.18 16:42:21<editable-koo>well its nice in theory, but we'll be fine using some sexpr parsing lib in python
10.07.18 16:42:33<editable-koo>and its a whole new language to learn
10.07.18 16:43:27<editable-koo>personally, i was turned off by common lisp by this "building your own syntax", the issue is that everybody does it, so nobody understands anything
10.07.18 16:44:10<editable-koo>i played with picolisp more, its got built-in prolog and database and its neat
10.07.18 16:45:10<editable-koo>as on python, compiling python isnt theoretic, there is RPython, CPython. for jitting python there is pypy, for typing python there is mypy...
10.07.18 16:46:12<editable-koo>lets just start with some pseudo code, the real hurdle is the semantics
10.07.18 16:46:34<editable-koo>each of us here can run in circles around it making implementations in their favorite languages
10.07.18 16:48:50<daemoz> stoopkid: that looks appropriate.
10.07.18 16:49:11<daemoz> editable-koo: there's benefits to everyone using their own language but we should all decide on one for the first prototype right?
10.07.18 16:49:25<daemoz> I'm okay with whatever just throwing opinions out there.
10.07.18 16:52:34<stoopkid> editable-koo: works for me, though you'll probably have to me help somewhat to curb my analysis paralysis; main reason i wanted to use an existing language is to narrow down the space of possibilities
10.07.18 16:53:28<stoopkid> daemoz: i interpreted that he was saying we should probably have pseudocode before trying to build a prototype, whatever the language
10.07.18 16:53:40<stoopkid> editable-koo: correct me if i misinterpreted
10.07.18 16:53:55<daemoz> I see, I guess I misunderstood that then if that's what  he meant.
10.07.18 16:54:01<daemoz> I do agree with that.
10.07.18 16:54:30<daemoz> Starting high-level and descending towards an implementation
10.07.18 17:11:29<editable-koo>im just speaking from experience with univar, that the real work was specifying what it should be doing
10.07.18 17:11:50<editable-koo>so much more work that making an implementation or two of what we already know how should work
10.07.18 17:12:02<editable-koo>but idk
10.07.18 17:13:19<daemoz> what's the best way we can specify 'what it should be doing'?
10.07.18 17:13:37<editable-koo>pseudocode is fine
10.07.18 17:18:07<HMCa> well, by definition pseudocode is always incomplete specification...
10.07.18 17:18:24<editable-koo>so, to bite into it, essentially we want to do yieldprolog over a FOL-syntax?
10.07.18 17:18:25<editable-koo>yes
10.07.18 17:27:56<daemoz> editable-koo: what does 'yieldprolog' over FOL give us?
10.07.18 17:32:01<editable-koo>well, in the unlikely event that i understood this right, yieldprolog is the algo that is whats called natural deduction in logic, its a bruteforce depth-first search of all possible ways a query unifies with a ruleset
10.07.18 17:32:52<daemoz> No that answered my question perfectly :D
10.07.18 17:33:26<editable-koo>but not sure if correctly:)
10.07.18 17:34:42<daemoz> alright lets construct a proof of it xP
10.07.18 17:37:24<editable-koo>id rather go to bed, catch you tomorrow:)
10.07.18 17:40:37<daemoz> fair xD lata
10.07.18 20:06:37*** Connecting...
10.07.18 20:06:43-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
                 *** Nick name in use: editable-koo
10.07.18 20:06:52*** [904 from verne.freenode.net] ditable-kooe SASL authentication failed
10.07.18 20:06:55*** [906 from verne.freenode.net] ditable-kooe SASL authentication aborted
                 *** Mode change: +Zi on ditable-kooe by ditable-kooe (server)
10.07.18 20:07:00*** Join: ditable-kooe (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:36 2018, 1 month 24 days 21 hours 2 minutes 25 seconds ago
                 *** Names: ditable-kooe Deadhand daemoz stoopkid editable-koo koo5[m] HMCa
                 *** End of /NAMES list.
                 *** Quit: editable-koo (~user@167.88.171.233) left #autonomic-dev: Read error: Connection reset by peer
10.07.18 20:07:13-ChanServ- [#mycroft] "Artificial intelligence for everyone"
10.07.18 20:17:39*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
10.07.18 20:18:03*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
10.07.18 20:19:12<daemoz> ditable-kooe: ow-goes-ith?
11.07.18 01:37:26<ditable-kooe>morning
11.07.18 01:44:09<daemoz> ditable-kooe: o/
11.07.18 02:01:00<ditable-kooe>o/
11.07.18 02:03:37<daemoz> good sleep?
11.07.18 02:52:36<koo5[m]> I think i woke up quite a few times, but it was alright:)
11.07.18 03:04:26<daemoz> feel that. why do you have so many different nicks?
11.07.18 03:27:13<HMCa> heh
11.07.18 04:23:43<koo5[m]> Lol
11.07.18 04:26:31<koo5[m]> Well, im editable-log, obviously, then i use riot, mainly on the go, but most comfortable on the pc is hexchat
11.07.18 04:27:05<koo5[m]> But then i have a few vms that i may randomly want to copy&paste from into hexchat, and it usually doesnt work across vms
11.07.18 04:27:18<daemoz> ahh yeah that makes sense
11.07.18 06:24:46<koo5[m]> so, what langs do you prefer?
11.07.18 06:26:09<koo5[m]> If you expect to be involved
11.07.18 08:07:44<daemoz> koo5[m]: Right now I'm most familiar with c++. Whatever you guys choose works for me though.
11.07.18 08:13:09<daemoz> sleeping brb
11.07.18 10:44:42<koo5[m]> Hehe
11.07.18 12:18:35<stoopkid> HMCa: do we really need to run effects as part of inferencing, or would it make sense to have effects be run as a separate stage as the result of queries? 
11.07.18 12:23:55<stoopkid> the treatment of effects in logic-programming and trying-to-be-pure functional programming always seemed somewhat messy to me
11.07.18 12:26:23<stoopkid> it seems its less messy in a standard imperative language because of the close correspondence between imperative computation and the actual universe we live in where effects end up occurring
11.07.18 12:28:51<stoopkid> if we lived in a universe that seemed to operate by some form of backtracking search against a kb (at human scales) then effects might look less messy in logic-programming, but instead we live in a universe that seems to have some space/storage dimensions evolving over a single dimension of time
11.07.18 12:32:03<stoopkid> and then we see that logic-programmers reconcile this in two main common ways: 1) adjust the effects they use so that the order in which the steps are called doesn't affect the total computation; 2) adjust the rules to essentially force imperative execution (i.e. restrict the rules to only be able to follow a single search-path)
11.07.18 12:36:15<stoopkid> then, this is actually distinct from what functional programmers do with effects
11.07.18 12:36:42<stoopkid> logic-programmers attach effects to steps of proof-search, functional programmers attach effects to steps of proof-normalization
11.07.18 12:37:20<stoopkid> while imperative programmers basically just "already live in the world of effects"
11.07.18 12:44:15<stoopkid> so the reason i'm asking about this is to get a better sense of what the total client architecture needs to be
11.07.18 12:46:41<stoopkid> with a sufficiently expressive and effectful mechanism for inference against a kb, we could basically have the architecture just be a simple loop of "read query, execute query" (maybe with some async stuff, treating them as callbacks or w/e)
11.07.18 12:48:29<stoopkid> doesn't even need to a "print results step" if that can be determined by the execution of the query itself
11.07.18 12:49:40<stoopkid> but that's what leads me to: "having all that be done by proof-search seems very messy, and come to think of it even having effects at all during proof-search seems kind of messy"
11.07.18 12:57:12<stoopkid> so for example, we get a new block from the network, and then what, "just execute the RPC query against the current kb" ?
11.07.18 12:58:15<stoopkid> "just like with any other RPC or any other interaction with the client, everything's just queries"
11.07.18 12:59:10<stoopkid> seems great, up until we get into the question of the effects that are supposed to occur
11.07.18 13:11:03<stoopkid> a more reasonable model to me would be to invert the picture, so that instead of having functional programs or queries direct the effects, interact directly with an effects-handler that can make queries or run functional programs
11.07.18 13:12:54<stoopkid> this is exactly what we do when we use an REPL in a shell on an operating system
11.07.18 13:17:52<stoopkid> the REPL in the shell on the operating system is a giant effects-handler already built for us, and we need this because essentially the functional programs and logic queries are actually *built out of effects*, because us poor humans are essentially trapped in the world of effects with the imperative programmers, purity for practical purposes is just the referential transparency of these effects, and total purity would
                 <stoopkid> essentially correspond to non-interaction between the programs and the outside world
11.07.18 13:31:35<stoopkid> so, we already have two places where effects logically go; a functional program takes input communications in, and returns the output of the function on the input as its communications out, and is isolated in between these; a logic program takes query communications in, and returns the results of the execution of the query against the kb, and is isolated between these
11.07.18 14:19:21<HMCa> hrmm
11.07.18 14:20:07<HMCa> well, first, I've always left some of the i/o interface details as something of an open question, particularly wrt typesystem...
11.07.18 14:21:05<HMCa> second, you seem to be crossing a few different concerns, though i'm not sure that matters much
11.07.18 14:22:17<HMCa> but it is probably important to keep in mind that these three paradigms are not mutually exclusive...
11.07.18 14:25:17<HMCa> and the contemporary dtlc "cool thing to do" (a la agda/idris/etc) is to give all three... direct ("imperative") monadic i/o, logical i/o (a la type providers), and effect composition
11.07.18 14:31:26<HMCa> ideally we would do similarly, but it is also important to recognize that we have a seperate/distinct form of i/o which is somewhat uniqe to our design - what I have always called the "guard" mechanism of the "i/o ring"... which is sort of like a specialized monadic i/o loop (really a set of monadic interfaces in a single loop, not something you'd normally see w/ monadic i/o in tradiional functional la
11.07.18 14:31:32<HMCa> nguages)
11.07.18 14:32:25<HMCa> otoh, in open phase logical i/o would really be "most intuitive" despite not corresponding to "imperative expectations"...
11.07.18 14:33:33<HMCa> so i argue that we at least want both of these two paradigms, with effect types as a "nice to have"
11.07.18 14:35:02<stoopkid> by "logical i/o" you mean allowing rules like {?x a man. ?x print_to terminal} => {?x a mortal} ?
11.07.18 14:35:07<HMCa> right
11.07.18 14:35:43<stoopkid> why do you consider this to be most intuitive?
11.07.18 14:37:37<HMCa> because it does not depend on knowing anything about type theory, monads, dependencies, etc... it is just "predicate with side effects" so if you know how to trace socrates you already know how to trace the i/o as well.
11.07.18 14:39:09<HMCa> where monadic i/o and effect composition are indirect, despite more "appearing" imperative - the logical i/o is *actually* imperative, direct
11.07.18 14:40:19<stoopkid> hrm, and i guess if you want a specific sequence of effects you can always do: "{ effect1. effect2. effect3... } => { query_output }" and it mimicks imperative programming
11.07.18 14:50:19<stoopkid> ok that's reasonable, at least as a starting point
11.07.18 14:50:58<stoopkid> can you elaborate on your "specialized monadic i/o guard loop" ?
11.07.18 14:52:09<HMCa> yes, but i'm semi-afk for a few first
11.07.18 14:52:16<HMCa> ~20-30 min
11.07.18 16:20:56* stoopkid did a short refresher on monadic IO
11.07.18 16:22:21<stoopkid> interesting that when it comes down to it the only problem it solves is how to make sure the IO effects get sequenced in the intended order when you have a compiler that assumes that everything has referential transparency
11.07.18 16:23:36<stoopkid> probably also important for us to note that the only reason we get deterministic effects-sequencing in our "logic i/o" is because we enforce a strict order for inferencing
11.07.18 16:24:45<stoopkid> if we didn't, then it ends up being a similar problem to what functional programmers are dealing with when they aren't using something like IO monads
11.07.18 16:44:52<HMCa> sorry, got diverted a bit, heh...
11.07.18 16:50:08<stoopkid> np
11.07.18 17:30:30<HMCa> sorry, got diverted a bit again... XD
11.07.18 17:31:56<stoopkid> np :)
11.07.18 17:34:21<HMCa> ok, so you'll probably recall that in the past I've described the construction as consistent of three parts...
11.07.18 17:35:28<HMCa> a partial theory of DHT, a partial theory of blockchains, and a "bidirectional" fixed signature interface with on-chain logic
11.07.18 17:36:07<HMCa> this third part is the "specialized monadic loop"...
11.07.18 17:37:59<HMCa> it glues all of the components (both core and on-chain portions) together by functioning similarly to the "outer main loop" of something like a traditional monadic i/o system (i.e. haskell)... but with several different "entrypoints" for different purposes
11.07.18 17:39:34<HMCa> so as network rpc is handled by core, it makes calls to these different entrypoints in turn, in order to take direction from on-chain logic
11.07.18 17:41:39<HMCa> this process of "guarding" i/o handling operation by mixing on and off chain logic is what is referred to as the "i/o ring" - the layer of (fixed in core) logic between on-chain logic and the actual environment
11.07.18 17:58:10<stoopkid> alright, so what would our different entrypoints be
11.07.18 18:02:16<HMCa> basically each control flow branch point in the blockchain/dht handling would have a distinct guard
11.07.18 18:04:44<HMCa> so anywhere that you would see bitcoin doing some hard-coded conditional, we would supplement with a kb interaction
11.07.18 18:20:41<stoopkid> guards == queries to the kb to determine the branch followed by the conditional?
11.07.18 18:29:57<HMCa> right
11.07.18 18:31:56<daemoz> oh so control flow is handled sorta extra-logically?
11.07.18 18:32:03<daemoz> or outside the mltt system
11.07.18 18:33:20<HMCa> daemoz: well, it is both
11.07.18 18:33:51<HMCa> there is a sort of "top level control flow" which is extralogical (hardcoded in core)
11.07.18 18:38:40<HMCa> there may or may not be control flow "under any given entrypoint" in the on-chain logic
11.07.18 18:44:39* HMCa gtg again for a few
11.07.18 18:44:42<HMCa> :-\
11.07.18 19:00:12<daemoz> HMCa: when you get back, what do you mean by 'under any given entrypoint'?
11.07.18 20:08:58<stoopkid> HMCa: yea i'm also not sure what you mean by that
11.07.18 22:20:18<HMCa> well the haskell outer i/o loop only calls one entrypoint, 'main'... our i/o ring will call into different entrypoints for different guards
11.07.18 22:21:19<HMCa> we often talk about the 'blockverify' entrypoint, but there would be many others... ones for validating peer ids, rate limiting, tx validation, "getwork", etc etc etc
11.07.18 22:57:03<stoopkid> HMCa: what do you mean by "control flow 'under'" such an entrypoint though?
11.07.18 23:05:27<stoopkid> based on what else you've said about it, my interpretation is: entry-points == guards on hard-coded conditionals == queries to the kb to determine the branch followed by the conditionals; and "control flow 'under'" these entry-points would be any control flow that happens to result from running the query against the kb, possibly involving "logic i/o"
11.07.18 23:12:16<HMCa> right, just normal control flow in the on-chain logic
11.07.18 23:16:23<daemoz> cool okay that makes sense
11.07.18 23:17:10<stoopkid> so, why this multi-entrypoint set-up instead of just one big "handle this RPC" query ?
11.07.18 23:18:18<stoopkid> seems you could defer this entry-points thing to a dispatch table modeled by facts/rules in the kb that gets run on every kb interaction?
11.07.18 23:20:16<daemoz> is it okay to think of it like the 'extralogical' control flow is done on the i/o ring?
11.07.18 23:23:27<stoopkid> it does seem that the control flow he refers to as 'extralogical' is the same thing as the control flow that happens in the thing he calls the 'i/o ring'
11.07.18 23:30:49<HMCa> sec brb
11.07.18 23:36:55*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
11.07.18 23:37:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
11.07.18 23:44:16<daemoz> just trying to make sure i'm seeing it correctly
11.07.18 23:44:27<daemoz> it does seem so though
11.07.18 23:57:18<stoopkid> idk if i'm seeing it correctly at all but my interpretation so far is that i/o ring == the place where the i/o interface actually occurs and where entry-points get decided, and the entrypoints are where we query into the kb, and those queries are the "logical" part leaving the i/o ring as the "extralogical" part
11.07.18 23:59:21<daemoz> that's how i'm seeing it too
11.07.18 23:59:57<daemoz> i'm wondering if the entry-point deciding logic is in the 'i/o ring' for security reasons?
12.07.18 00:00:03<daemoz> or perhaps purely an engineering decision
12.07.18 00:01:07<daemoz> stoopkid: a query into the kb could change rules, correct?
12.07.18 00:03:45<stoopkid> some kind of rpc to the node could instruct it to change rules for sure; when the change is actually executed and what part of the system actually decides that is more of an open question for me though
12.07.18 00:04:55<daemoz> Would it (a hypothetical rule) get changed as the result of a side-effect in the processing of mltt?
12.07.18 00:05:18<HMCa> back sorry
12.07.18 00:05:21<daemoz> or is the core responsible for changing rules and there's an api
12.07.18 00:05:23<daemoz> HMCa: hiya
12.07.18 00:05:31<HMCa>  < stoopkid> so, why this multi-entrypoint set-up instead of just one big "handle this RPC"             query ?
12.07.18 00:05:33<stoopkid> right that's kind of my main question about it, kind of weird it seems if the rules are changing in the middle of a query
12.07.18 00:05:58<HMCa> iirc you asked thatsame thing the last time we talked about this stuff, some weeks/months back
12.07.18 00:06:01<HMCa> heh
12.07.18 00:06:55<HMCa> while hypothetically it *could* be single entrypoint, there are a lot of reasons to split it up...
12.07.18 00:07:45<HMCa> keeps the signatures smaller and more straightforward, simplifies modular reuse, etc
12.07.18 00:08:17<HMCa> 0 < daemoz> is it okay to think of it like the 'extralogical' control flow is done on the i/o ring?
12.07.18 00:08:41<HMCa> yes, in a sense the extralogical control flow "is" the i/o ring
12.07.18 00:09:19<HMCa> it is like the "main runtime loop" of core
12.07.18 00:09:52<HMCa> 59 < daemoz> i'm wondering if the entry-point deciding logic is in the 'i/o ring' for security reasons?
12.07.18 00:09:55<HMCa> 00 < daemoz> or perhaps purely an engineering decision
12.07.18 00:10:25<HMCa> not really much wrt security, iirc, mostly just for simplicity
12.07.18 00:11:24<HMCa> even if it were one entrypoint with a big case switch the case discriminators would still be hardcoded in all the "call sites" in core
12.07.18 00:11:46<HMCa> 01 < daemoz> stoopkid: a query into the kb could change rules, correct?
                 <HMCa> 03 < stoopkid> some kind of rpc to the node could instruct it to change rules for sure; when the change is actually executed and what part of the system actually decides that is more of an open question for me though
12.07.18 00:12:39<HMCa> any potential rules mutation always occurs in only one place, at the end of closed phase
12.07.18 00:13:01<HMCa> 4 < daemoz> Would it (a hypothetical rule) get changed as the result of a side-effect in the processing of mltt?
12.07.18 00:14:14<HMCa> not exactly... this is another of those "yes and no" answers... rule mutation never happens while on-chain logic is executing, but only happens just after on-chain logic has "called for" it to happen
12.07.18 00:14:21<HMCa> more specifically:
12.07.18 00:14:34<HMCa> rules changes go along with reorg
12.07.18 00:15:18<HMCa> so when a chain is extended, after a valid blockverify, at the end of the close phase evaluation
12.07.18 00:15:30<HMCa> *closed
12.07.18 00:17:43<HMCa> so during open phase we see a block announcement, and submit it to core, the core verifies the block in closed phase evaluation and if it is found valid then the block is applied, reorg occurs if necessary, open phase is ended, kb rules are mutated, and then a new open phase can begin at the new block
12.07.18 00:21:46<stoopkid> so let's say you've just installed the autonomic client and you're starting it up for the first time, where does it start; closed phase? open phase? somewhere in the i/o ring figuring out what to do with the genesis block?
12.07.18 00:24:43<daemoz> reorg = reorganizatin? what is this
12.07.18 00:27:18<stoopkid> https://en.bitcoin.it/wiki/Chain_Reorganization
12.07.18 00:27:40* stoopkid had to look it up again :)
12.07.18 00:28:17<daemoz> thanks :)
12.07.18 00:29:06<HMCa> stoopkid: it starts with executing genesys block in closed phase, and performing a bootstrap sync (one of those "same as btc" answers)
12.07.18 00:29:17<HMCa> *genesis
12.07.18 00:31:16<HMCa> it needs to get the chain synced to a consistent state with the network before it can start participating in open  phase operations (similarly, btc will not try to transact until chain sync is done)
12.07.18 00:33:39<stoopkid> "executing" a block meaning, performing whatever actions are indicated by the block, such as asserts, retracts and whatever else?
12.07.18 00:43:56<HMCa> well, performing the normal operational loop (but in a sync mode, so open phase is restricted) with that initial kb
12.07.18 00:49:22<stoopkid> alright so what does this normal operational loop, in sync mode, consist of for a fresh client?
12.07.18 00:50:43<HMCa> sec
12.07.18 00:56:04<HMCa> ok, so let's play a quick mental tau
12.07.18 00:56:28<stoopkid> alright
12.07.18 00:57:17<HMCa> we start at block 0, with a reference core in hand... we start executing this core, and it loads up genesis into the kb state for initial rules
12.07.18 00:59:52<HMCa> now our core always starts in this sync mode (same as btc) but since it sees we are at block 0 it doesn't know yet if it is really to be *at* block 0 or not
12.07.18 01:02:30<HMCa> so it queries the kb, in closed phase, on root, about requesting blocks, which probably in turn asks the core to do some dht messaging which in turn would turn around and ask the kb, at root, in closed phase, about dht semantics...
12.07.18 01:04:12<HMCa> which would tell core how to do whatever dht messaging the kb had asked it to do, and then core would again turn around some result of the block requesting instructions back to kb, which may or may not then tell core about some seen block(s)
12.07.18 01:06:05<HMCa> long story short, core asks the kb to "go find blocks", kb (through core) initiates some root block finding "inband", and then core loops, staying in closed phase, until it believes it is synced (again, similarly to btc sync/resync mode) 
12.07.18 01:07:14<HMCa> at block 0 and eith none of us mining anything yet, this just results in chatter in root about how none of us have any block1 or greater
12.07.18 01:07:21<HMCa> *with
12.07.18 01:07:28<HMCa> follow so far?
12.07.18 01:08:36<stoopkid> mostly
12.07.18 01:09:03<HMCa> ok, want to dive into anything there, or go on?
12.07.18 01:09:20<stoopkid> hrm, let's go on for now
12.07.18 01:10:54<HMCa> ok, now, we'rr kinda logically "stuck" here, but our nodes are running... we can connect to it and send it a "getwork" for example
12.07.18 01:14:10<HMCa> now core will do the same thing at first whenever it sees an inbound rpc... first it will ask root about it generally, as a message, and then surviving that it will ask about it as a more specific sort of rpc
12.07.18 01:14:57<HMCa> so let's say my node asks yours if it has any block past 0
12.07.18 01:19:24<HMCa> first your core is going to query root about "Should I even try to listen to this peer?  Should I care right now, or defer, about the message?" etc... and finally the core *may* (if your node likes me and is happy to, per rules, or w/e)... finally get to asking core "ok now how do I deliver him blocks?" (as the message is "inband," and closed phase core has knowledge of these messages semantics, is wha
12.07.18 01:19:30<HMCa> t makes the fixed "partial theory of blockchains/dht"
12.07.18 01:20:00<HMCa> *get to asking kb
12.07.18 01:20:44<HMCa> ) and your kb will go about telling core how to tell me that there is no blocks, or just ignore me, or w/e...
12.07.18 01:21:36<HMCa> similarly, a getwork would be asked about, firt as a general message, then as a specific inband rpc
12.07.18 01:21:55<HMCa> "ok, what does a work function look like right now?"
12.07.18 01:22:21<HMCa> ^magic.  here be dragons. ;-)
12.07.18 01:22:55<HMCa> ok, now i fire up some memristors or something and churn whatever solution to the work puzzle
12.07.18 01:22:58<HMCa> or you do
12.07.18 01:23:01<HMCa> or someone does
12.07.18 01:23:05<HMCa> or something
12.07.18 01:23:12<HMCa> "mining happens"
12.07.18 01:23:33* HMCa flips a coin
12.07.18 01:23:40<HMCa> ok, so you find block 1
12.07.18 01:23:54<HMCa> with some rock and water magic, or something
12.07.18 01:24:48<HMCa> you tell your node, or someones node, or as many nodes as you can as fast as you can, or whatever, a "blockannounce
12.07.18 01:24:51<HMCa> "
12.07.18 01:25:20<HMCa> rpc... which again makes our cores ask our kbs first the general questions about thr message
12.07.18 01:27:10<HMCa> and then finally maybe asks it the more specific question about the message
12.07.18 01:28:40<HMCa> the kb, here, decides that this block should be tried, and tells core the generic "here's new block" (assigning it a "total work progress" value, etc)
12.07.18 01:29:39<HMCa> core, at the end of its' next roll through its' (still stuck in closed sync mode, because we've still not got a chain to work with)...
12.07.18 01:30:10<HMCa> main loop does the second magic thing
12.07.18 01:30:14<HMCa> it reorgs
12.07.18 01:31:35<HMCa> it sees that there is a new longest chain (by work, not by block depth!)
12.07.18 01:33:16<HMCa> and applies the transactions (still per kb's instruction, at block 0 state) within it
12.07.18 01:34:10<HMCa> and loops, now in block 1 state, still in a sync mode
12.07.18 01:38:01<HMCa> somewhere along the line, while applying blocks (so maybe in this block 1, maybe not, up to rules) a message will come through which kb will interpret as representing "synced"... again I'd expect this to probably be along lines of btc rules but not necessarily, the kb will indicate to the core that the parameters for consistency is met, and the node can consider itself "ready for the network"...
12.07.18 01:38:47<HMCa> for simplicity let's say the root genesis rule for this is just "work > 0"
12.07.18 01:40:17<HMCa> at the end of this roll through the outer main loop in core, sync mode would be turned off, and the first open phase would begin
12.07.18 01:40:25<HMCa> follow so far?
12.07.18 01:41:39<stoopkid> so they can't be considered sync until at least block 1?
12.07.18 01:42:51<stoopkid> sync'd
12.07.18 01:43:01<HMCa> can't consider any sync to have happened when there's nothing to have synced yet
12.07.18 01:43:31<HMCa> at block 0 we're just each individually declaring an initial consistency by fiat!
12.07.18 01:43:47<stoopkid> but they can still make blocks etc.. during sync mode?
12.07.18 01:43:55<HMCa> sure
12.07.18 01:44:13<HMCa> getwork should always work ;-)
12.07.18 01:44:47<HMCa> otherwise you have cold mining rigs wasting time and other resources
12.07.18 01:45:50<HMCa> also, definitionally, it has to be the "first moving part" heh
12.07.18 01:49:31<HMCa> brb
12.07.18 01:52:40<stoopkid> alright let's move on to the first open phase, unless there's anything you wanna dig into further at this point daemoz ?
12.07.18 01:52:54<daemoz> what is responsible for sending a client a 'synced' message? Is this up to the logic on-chain?
12.07.18 01:53:28<daemoz> stoopkid: besides that I'm cool to keep going
12.07.18 01:53:47<daemoz> are we logging this?
12.07.18 01:54:30<daemoz> yes haha good
12.07.18 01:54:41<stoopkid> hehe
12.07.18 01:54:56<stoopkid> i'm wondering the same wrt sync'ing
12.07.18 01:55:33<daemoz> and do subchains have to issue their own synced messages? Assuming it's happening on-chain in the first place :P
12.07.18 01:56:29<HMCa> yes, the contexts (incl root) define their own chain consistency semantics (or, more exactly, the constrain upon whatever constraints are already established by ancestor contexts)
12.07.18 01:56:40<HMCa> *they
12.07.18 01:56:56<daemoz> last q: what does inband mean here?
12.07.18 01:57:49<stoopkid> ah right, like genesis in this example had the sync'ing conditions be "work > 0"
12.07.18 01:58:15<HMCa> inband means messaging that is directly part of the fixed interface signature, the messages that appear referenced in core side, hardcoded, partial theories
12.07.18 01:58:29<HMCa> (of blockchain/dht)
12.07.18 01:59:03<daemoz> these are tools for bootstrap?
12.07.18 01:59:11<HMCa> contrast to side-band messaging, which is only understood by the kb, and only generated in open-phase
12.07.18 01:59:28<HMCa> well, not exactly just tools for bootstrap
12.07.18 01:59:30<HMCa> heh
12.07.18 01:59:57<daemoz> mkay
12.07.18 02:00:39<HMCa> all of these rpc messages that i've mentioned already are used not just for bootstrap, but for general operation as well
12.07.18 02:01:17<HMCa> (though re-using block requests after sync might be rare, for example)
12.07.18 02:05:36<stoopkid> so the "inband messaging" / "fixed signature interface" / "hardcoded partial theories" (of blockchain/dht) is like "getwork", "block request", "block announce", "find peers", "DHT query" i.e. all the stuff that we need in order to be operating with a DHT/block-chain prior to having a KB with rules that tell us how to do other kinds of user-defined messaging which would be the "side-band" stuff?
12.07.18 02:06:38<HMCa> right, though what is in that fixed signature goes a little beyond what we've discussed so far, covering bootstrap...
12.07.18 02:07:45<HMCa> for example we haven't talked about subcontexts/pegging, dht expirations, generalized auth, etc
12.07.18 02:09:12<HMCa> but you can probably start to see the picture as to how much of that would work similarly, with "interleavings" of core/kb calling each-other
12.07.18 02:09:34<stoopkid> kinda
12.07.18 02:09:45<stoopkid> core == i/o ring ?
12.07.18 02:10:07<stoopkid> and is in reference to eg. "bitcoincore" ?
                 <HMCa> i/o ring is a part of core...
12.07.18 02:10:45<stoopkid> so core is i/o ring + the fixed partial theories
12.07.18 02:11:30<HMCa> core is also the "rest" of dht/blockchain theory, like local block storage, peer routing tables, wallet identity keys, etc
12.07.18 02:11:34<HMCa> right
12.07.18 02:11:38<HMCa> what you said ;-)
12.07.18 02:12:44<HMCa> well "core" refers more generally to the same thing it refers to in the "bitcoin core" moniker
12.07.18 02:13:12<HMCa> "core reference implementation"
12.07.18 02:13:45<HMCa> "here is an implementation of the protocol itself, and nothing really more"
12.07.18 02:17:01<stoopkid> so "core" in the context of an arbitrary client implementation is essentially the part of that implementation which represents "just the protocol itself"
12.07.18 02:17:44<HMCa> right
12.07.18 02:18:55<stoopkid> so when we talk about core calling the kb, i interpret this to mean that the i/o ring takes a query and runs it against some entrypoint
12.07.18 02:19:07<HMCa> yup
12.07.18 02:20:00<stoopkid> when we talk about kb calling core, this means that the kb either calls back up into the i/o ring or executes some built-in operation available from the fixed portion of the dht/blockchain theories? 
12.07.18 02:21:01<HMCa> yes (the former might be an instance of the latter)
12.07.18 02:25:02<daemoz> brb
                 <stoopkid> e.g. block announce i/o ring entrypoint being an instance of an operation available from the fixed portion of the block-chain theory?
12.07.18 02:26:09<HMCa> right
                 <daemoz> q to leave before I brb: what does 'theory' mean in this context? 
12.07.18 02:26:23<HMCa> heh
12.07.18 02:26:54<HMCa> parameterized partial proof aka parameterized partial program
12.07.18 02:27:47<HMCa> core+kb = "a whole program" = a proof of the construct. ;-)
12.07.18 02:29:13<stoopkid> can you elaborate on that? i would've given a different answer
12.07.18 02:31:35<stoopkid> i guess my interpretation of that would be "a partial program", i.e. the hard-coded DHT/block-chain operations, "parameterized" by the user-defined part of their definitions
12.07.18 02:32:37<HMCa> more or less, yes.
12.07.18 02:33:09<stoopkid> for example, "is_sync'd" being parameterized by some kb-defined conditions ?
12.07.18 02:34:05<HMCa> strictly speaking even the composition of core+kb is still parameterized and partial, until you supply some parameters and run it with inputs, heh
12.07.18 02:34:47<stoopkid> alright i guess that's more or less equivalent to the answer i would've given
12.07.18 02:36:36<HMCa> I'll probably have to run before long
12.07.18 02:37:21<stoopkid> alright well let's see how far we can get into block 1 open phase operation
12.07.18 02:38:26<stoopkid> so here we switch from total, typed, closed-world operation to possibly non-total possibly untyped open-world operation ?
12.07.18 02:39:17<HMCa> right, which is where our equivalent of "main" lives...
12.07.18 02:40:13<HMCa> and which is allowed to introduce arbitrary messages/transactions to core
12.07.18 02:40:54<HMCa> and which is allowed to do things asynchronously, for as long as the phase remains open
12.07.18 02:42:57<stoopkid> you mean a user-defined "main" rather than "core's top-level main loop" ?
12.07.18 02:44:44<HMCa> well, a kb-defined main... :-)
12.07.18 02:44:57<stoopkid> right
12.07.18 02:46:09<HMCa> the entrypoint that parallels haskell's (etc) "main"
12.07.18 02:47:49<stoopkid> so this would also parallel the js main loop of a web-page, as opposed to the "top-level main loop" that runs the browser itself?
12.07.18 02:48:45<HMCa> well, that is a bit of a faulty parallel, but yah close enough ;-)
12.07.18 02:49:10<daemoz> this is starting to make a crazy sort of sense =_=
12.07.18 02:50:04<HMCa> daemoz: welcome to the madhouse :-)
12.07.18 02:50:24<stoopkid> yea i'm getting a bit of a clearer picture of some things from this discussion
12.07.18 02:50:55<HMCa> hehe, it is really all just review ofc ;-)
12.07.18 02:51:21<daemoz> i'm finding it easier to see how the pieces fit together now
12.07.18 02:51:33<daemoz> rather than just each of them individually
12.07.18 02:53:30<HMCa> cool
12.07.18 02:54:33<stoopkid> so when the kb calls back up to core.. each of the hard-coded core operations basically has a predicate (or several) associated with it that we can use in rules?
12.07.18 02:55:34<stoopkid> like "{?x a freshlyMinedBlock} => {?x core:block_announce now}" ?
12.07.18 02:56:55<HMCa> in most cases, for example most of the blockchain related calls will end up calling back down for dht or peer routing details
12.07.18 02:56:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
12.07.18 02:57:18*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.07.18 02:58:24<HMCa> gtr soon
12.07.18 03:08:03<stoopkid> daemoz: still plenty of questions i imagine?
12.07.18 03:08:24<daemoz> can you give me a quick refresher on how open-phase will work? activity on it is constrained by on-chain rules right?
12.07.18 03:08:30<daemoz> stoopkid: ahahaha.. yes.
12.07.18 03:08:43<daemoz> ofc xD
12.07.18 03:23:16<daemoz> found my answer in logs
12.07.18 03:23:37<stoopkid> can you link? i'm digging through my notes heh
12.07.18 03:24:04<daemoz> hahaha, it's a quote from you:
                 <stoopkid> or, pastebin* i mean
                 <daemoz> 02/01 02:48:07<stoopkid> open-phase has arbitrary turing-complete complexity, but bounded by closed-phase deciding when/how it gets to run
12.07.18 03:24:35<stoopkid> i would take anything i ever said with a grain of salt XD
12.07.18 03:24:58<daemoz> Hahaha, well it's all I got! xD
12.07.18 03:25:08<stoopkid> but yea that's still my basic impression of it
12.07.18 03:25:17<daemoz> Rest of that logfile is pretty bare for mentions of open phase I think
12.07.18 03:25:22<stoopkid> although still many questions about it myself
12.07.18 03:25:45<daemoz> As I understand: That's where programs written into the chain run?
12.07.18 03:26:05<daemoz> The seperation is a bit unclear. I think it's purposed for user code to run though right?
12.07.18 03:29:39<stoopkid> kinda, but also so is closed-phase
12.07.18 03:30:15<stoopkid> but closed-phase is: always pure, always total, always typed, always authenticated..
12.07.18 03:30:49<daemoz> What's the difference for then?
12.07.18 03:30:56<stoopkid> and closed-world assumption in queries (where the "closed" derives from)
12.07.18 03:31:38<stoopkid> open-phase otoh is: maybe impure, maybe non-total, maybe untyped, maybe unauthenticated
12.07.18 03:32:16<stoopkid> it's kind of like the server-side vs. browser-side distinction... but i guess that analogy doesn't really work here..
12.07.18 03:32:28<stoopkid> it sort of does if you treat the server as the chain
12.07.18 03:32:53<stoopkid> maybe a better analogy would be legislative/judicial vs. executive branches of govt
12.07.18 03:32:58<daemoz> oh wait so open-phase runs client side?
12.07.18 03:33:13<daemoz> well, I guess it's all client-side
12.07.18 03:33:22<daemoz> hmm
12.07.18 03:34:38<stoopkid> right, everything's client-side here so the analogy breaks down.. but yea closed phase is essentially the "on-chain" code, the open-phase is like the web-app that gets delivered to you
12.07.18 03:35:22<daemoz> okay
12.07.18 03:38:23<daemoz> Yeah so those would be 'apps' that could interface with the chain and were also presumably (citation needed ;P) constrained in some way by the closed-phase rules
12.07.18 03:39:46<daemoz> and there's a shift here to performance, but it can still only alter the rules through closed-phase operations perhaps
12.07.18 03:42:31<stoopkid> right, might think of it like, closed-phase is intended for interpretation of the rules, should be consistent, logical, mathematical, etc..., but those rules can provide the players a general protocol to follow (what i was trying to get at with the legislative vs. executive branch thing), like "ping me once an hour for 24 hours" , so the open-phase is more for general purpose programming 
12.07.18 03:46:05<stoopkid> we know that making the logical framework lenient in any way when it comes to breaking consistency/soundness in favor general purpose programming conveniences will render the rules of the game meaningless, so, we know a priori that the thing we call closed-phased will have to exist in the system for the interpretation of the rules
12.07.18 03:52:07<daemoz> I think I get it
12.07.18 03:53:32<daemoz> I wonder what working in open-phase will be like
12.07.18 03:57:45<stoopkid> i guess like general prolog with effects
12.07.18 03:59:15<daemoz> getting sleepy. catch ya later stoopkid !
12.07.18 03:59:22<stoopkid> basically no constraints on the rules at all, whereas in closed-phase i guess the rules will be checked to fit some logical harmony pattern in conformance with some description of type theory
12.07.18 03:59:41<stoopkid> alright catch ya later
12.07.18 04:03:52<stoopkid> HMCa: so yea i guess the next thing before you jump into block 1 open-phase operation is to elaborate on the purposes of differences between closed-phase and open-phase
12.07.18 04:04:27<stoopkid> purposes of and** differences
12.07.18 04:15:59*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca) left #autonomic-dev: Ping timeout: 260 seconds
12.07.18 04:21:52*** Join: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-182.dsl.bell.ca, (unauthenticated): deadhand)
12.07.18 22:35:27<stoopkid> http://creately.com/diagram/example/jji802dx1
12.07.18 22:39:42<stoopkid> HMCa: any adjustments you'd make to this diagram?
13.07.18 02:13:34<HMCa> there's probably a lot that could be expanded upon in that
13.07.18 02:14:09<HMCa> probably a good place to start is looking at how btc does bootstrap sync/resync
13.07.18 02:14:40<HMCa> remember how I used to rant about not breaking new client nodes' bootstraps?
13.07.18 02:15:03<stoopkid> yes
13.07.18 02:15:15<HMCa> understanding that is pretty important
13.07.18 02:15:45<HMCa> is new clients can bootstrap you can assert more things about the eventually consistent state
13.07.18 02:15:50<HMCa> *if
13.07.18 02:15:57<stoopkid> hrm, do you see anywhere in my diagram that it would break bootstrap?
13.07.18 02:16:34<HMCa> if nothing else at least asserts "it is bootstrappable and non-mao" ;-)
13.07.18 02:16:55<HMCa> well, non-mao as of last block anyway, heh
13.07.18 02:26:26<HMCa> hrmm, the "normal mode" should be inside the loop too... in each iteration the core is still doing what it does during sync mode, it asks the kb a few questions about if/how new state is available, runs open phase if it can, runs closed phase and kills open phase if reorg, updates kb, and loops
13.07.18 02:27:40<stoopkid> ah, normal mode isn't attached to anything there because we didn't cover that yet in our "quick game of mental tau"
13.07.18 02:28:13<HMCa> well, there is not a lot to it, heh...
13.07.18 02:28:50<HMCa> as you pointed out, it (kinda-sorta) parallels your browser event loop from there ;-)
13.07.18 02:30:47<HMCa> the open phase is a sort of generalization of a dom script sandbox
13.07.18 02:32:06<HMCa> core end up being an odd sort of ioc container with an odd sort of an event scheduler
13.07.18 02:32:10<HMCa> *ends
13.07.18 02:33:37<stoopkid> "runs open phase if it can, runs closed phase and kills open phase if reorg"
13.07.18 02:34:11<stoopkid> so open phase starts, then a series of closed phases runs in parallel to this until a reorg event?
13.07.18 02:34:35<HMCa> not in parallel, exactly
13.07.18 02:35:26<HMCa> open phase can do some things asynchronously, but open and closed phase still share the main event loop...
13.07.18 02:38:22<HMCa> in the same way that your browser's xmlhttprequest in javascript must share an outer event loop with your browser app that is actually handling the socket events or whatever
13.07.18 02:39:22<stoopkid> hrm
13.07.18 02:43:24<stoopkid> so event loop basically corresponds to what descends from "rpc listener" in my diagram?
13.07.18 02:44:05<HMCa> hrmm, part of the eventloop does, yes
13.07.18 02:47:31<HMCa> imagine adding a websever into your browser, and having it also share the eventloop... the open phase "client dom" and the closed phase "web server" and the core "browser itself" sharing the loop
13.07.18 02:51:35<HMCa> (possibly with some async background worker tasks running here and there, like your browser's network fetches)
13.07.18 02:54:17<stoopkid> so there's some "EventListener" that generalizes the "rpc listener" and puts all the events on the queue to eventually be directed to some event handler, like in a browser (or browser/server combo) ?
13.07.18 02:56:32<HMCa> hrmm, the schedulers are distinct, there's a set of queues for each context
13.07.18 02:57:38<stoopkid> hrm, so is the entire set of RPCs basically "per context" ?
13.07.18 02:58:33<HMCa> not exactly... core does that ask-a-series-of-queries thing to walk the rpc's from root to their contexts...
13.07.18 02:58:42<HMCa> *rpcs
13.07.18 03:01:06<stoopkid> ah, so when you send an RPC to somebody "in some subcontext S", root decides first how the message should be handled, and then based on the contents decides that it's an RPC intended for some immediate child subcontext for which it's allowed (ancestor of S) , and then passes it on to that subcontext?
13.07.18 03:05:03<HMCa> more or less... there's some more detail to that, but we can come back to it
13.07.18 03:11:20<stoopkid> so when you say a set of queues for each context, you mean a queue per context or a set of queues per context?
13.07.18 03:13:08<HMCa> set per context, open phase and closed phase have distinct schedules..
13.07.18 03:14:14<HMCa> think of it like "what pending events might get killed together" heh
13.07.18 03:14:41<stoopkid> so each context has specifically this pair of queues/schedules, or they might have more?
13.07.18 03:17:16<stoopkid> and do we have any particular scheduling algorithm or just FIFO? or just user-defined?
13.07.18 03:18:24<HMCa> these are all that would be strictly necessary, I think... but you might do more for other things in core
13.07.18 03:18:39<HMCa> and the scheduling is not exactly just fifo
13.07.18 03:19:17<HMCa> you can think of it like a fifo with a defer operation (or two)
13.07.18 03:23:24<stoopkid> so we basically have a pair of closed-phase/open-phase processes/loops for each context, being multitasked over a shared eventloop in core?
13.07.18 03:24:49<HMCa> yes, cooperatively multitasked, basically
13.07.18 03:29:14<stoopkid> so a process is called up from the queue, runs for a bit, and decides "hey i'm done for now", possibly because it's waiting for an i/o operation to finish, and it sticks itself back on the queue, and if it gets called back up and its i/o operation isn't finished it gets deferred back into the queue?
13.07.18 03:33:12<stoopkid> also, if we have multiple queues, we have to schedule *between* queues right?
13.07.18 03:33:41<HMCa> well, also events can be deferred by ancestor contexts
13.07.18 03:34:38<HMCa> and yes, there is a scheduling between queues, heh
13.07.18 03:36:33<stoopkid> ok so event E1 comes in intended for Root; E2 comes in intended for subcontext Root.SubCtx
13.07.18 03:37:00<stoopkid> let's say they're RPCs from the network
13.07.18 03:37:55<stoopkid> E1 gets stuck on the (closed phase?) queue for Root, and E2 gets stuck on the (closed phase?) queue for Root.SubCtx ?
13.07.18 03:42:03<HMCa> brb
13.07.18 04:06:20<HMCa> well, everything goes through root, first
13.07.18 04:06:46<HMCa> and may or may not then get scheduled into deeper contexts
13.07.18 04:07:01<HMCa> I'm going to have to run in a sec
13.07.18 16:34:49<stoopkid> ok so what determines which queue gets selected? is this logical or extralogical?
13.07.18 22:50:58*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
13.07.18 22:51:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
14.07.18 03:11:53<HMCa> stoopkid: extralogical, controlled by core, but contexts have some control over subcontexts
14.07.18 03:16:46<HMCa> for example a parent context may make some semantics change which causes subcontext queues to be killed, like changes to pegging etc
14.07.18 04:30:58<stoopkid> is my diagram at the bottom of the EventLoop approximately correct? http://creately.com/diagram/example/jji802dx1
14.07.18 05:12:39<koo5[m]> I dont umderstand a lot of it but hey thats nice
14.07.18 06:54:18<daemoz> These rpcs floating around and getting digested, are these instructions from the network to update the kb? what causes one to be generated and sent?
14.07.18 07:30:44*** Join: koom (~koom@pool-96-246-0-204.nycmny.east.verizon.net, (unauthenticated): realname)
14.07.18 07:52:20*** Quit: koom (~koom@pool-96-246-0-204.nycmny.east.verizon.net) left #autonomic-dev: Remote host closed the connection
14.07.18 08:10:49*** Join: koom (~koom@pool-96-246-0-204.nycmny.east.verizon.net, (unauthenticated): realname)
14.07.18 09:50:57*** Quit: koom (~koom@pool-96-246-0-204.nycmny.east.verizon.net) left #autonomic-dev: Ping timeout: 240 seconds
14.07.18 17:22:00<stoopkid> daemoz: they could be initiated directly by the user, like "sendrawtransaction" in bitcoin, but i'm guessing they can potentially also be generated/sent automatically in closed-phase/open-phase based on the protocol expressed by the current state of the rules
14.07.18 20:14:06<koo5[m]> Lol
14.07.18 20:56:51<stoopkid> ex. like in a browser you can initiate an RPC by surfing to a URL, and then if the server at that URL delivers you AJAX code then your browser might be automatically generating and sending requests back to the server for updates etc..
14.07.18 20:58:31<koo5[m]> take notes, nilli
14.07.18 21:05:29<stoopkid> i'm pretty terrible about taking notes
14.07.18 21:32:36<koo5[m]> its just that we were going over your diagram earlier today and i tried to explain this rpc part
14.07.18 21:50:27<stoopkid> did you have an explanation for it? i'm kinda still looking for one :)
14.07.18 22:10:11<koo5[m]> Ill just reiterate that RPC stands for remote procedure call
14.07.18 22:10:58<koo5[m]> Would you be able to compile.a.list.of a few different command we know.we're gonna.need?
14.07.18 23:07:28<stoopkid> koo5[m]: i was gonna have HMC do that when we get further along in the explanation
14.07.18 23:08:13<stoopkid> but we can imagine stuff like "announce block", "validate transaction", "sign transaction", kademlia RPCs, etc..
14.07.18 23:09:51<stoopkid> PING, STORE, FIND NODE, FIND VALUE; section 2.2 here: http://www.scs.stanford.edu/%7Edm/home/papers/kpos.pdf
15.07.18 01:37:34*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dekbgsicxvfylesl) left #autonomic-dev: Quit: Connection closed for inactivity
15.07.18 02:37:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tvwgtcvmabrtqavq, stoopkid: stoopkid)
15.07.18 07:53:54<koo5[m]> Awesome
15.07.18 13:17:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
15.07.18 13:17:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
16.07.18 00:59:45<HMCa> sorry I was not around much this weekend
16.07.18 01:00:15<HMCa> but I'm around for now
16.07.18 01:00:55<HMCa> so to clarify one thing, what we call rpcs bitcoin calls network messages, and ehat bitcoin calls rpc is what we call user i/o
16.07.18 03:01:41<koo5[m]> Yo
16.07.18 03:21:25<HMCa> sup?
16.07.18 03:30:01<koo5[m]> Jetlag
16.07.18 03:33:36<koo5[m]> I understood that you agree that we need a new kind of in memory structure 4 representing blank nodes
16.07.18 03:37:30<HMCa> you mean in univar?
16.07.18 03:37:52<koo5[m]> Yeah
16.07.18 03:40:40<HMCa> i'm not sure that I remembwr correctly how things got left there
16.07.18 03:40:56<HMCa> *remember
16.07.18 03:41:54<koo5[m]> Well we have variables and constants and internalized lists
16.07.18 03:42:07<HMCa> existential bnodes should be variables local to their rule's coroutines, but iirc there was some confusion left about that
16.07.18 03:43:18<koo5[m]> Are there also universal bnodes?
16.07.18 03:48:14<koo5[m]> What are we came up with stoop is that yeah day would be variables, but the.new thing should be that just before yielding out of rule, we build up a graph out of the relevant triples, and we unify it with the variable
16.07.18 03:49:28<koo5[m]> So now I realize we already have graphs so we don't need any new kind of data type
16.07.18 03:50:40<koo5[m]> How does the blank node refer to itself though, with @default?
16.07.18 03:57:06<HMCa> well, technically all vars are bnodes
16.07.18 03:57:35<HMCa> not sure what you mean wrt building up a graph to unify
16.07.18 03:58:03<HMCa> (or wrt bnode referring to itself/@default)
16.07.18 04:17:03*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tvwgtcvmabrtqavq) left #autonomic-dev: Quit: Connection closed for inactivity
16.07.18 13:17:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tcrsuakihoqhhekz, stoopkid: stoopkid)
16.07.18 13:19:33<stoopkid> {?x a Nat} => {?x suc ?y. ?y a Nat}.
                 <stoopkid> {?x a Nat} => {?y a Nat. ?x suc ?y}.
16.07.18 13:19:57<stoopkid> in Agda/Idris/Coq or w/e this would probably fail with something like "error multiple definitions of constructor suc"
16.07.18 13:20:31<stoopkid> what should our behavior be in N3?
16.07.18 13:22:06<stoopkid> we've got ideas for how to handle the existentials but something like stringification of the graphs causes the generated IDs to be dependent on the order of the head triples
16.07.18 13:23:02<stoopkid> while these two rules at first glance seem like they should be generating the same bnode id for ?y (parameterized by values of ?x), as from a type theory perspective they define the same constructor
16.07.18 15:12:59<stoopkid> so, you talk about body existentials as well..
16.07.18 15:13:19<stoopkid> and you say that univar already uses "body existentials"
16.07.18 15:13:42<stoopkid> body existentials essentially are the same as "non-distinguished universals"
16.07.18 15:13:55<stoopkid> which is essentially the same as an existential scoped only to the antecedents of the implication
16.07.18 15:14:36<stoopkid> non-distinguished i'm interpreting to mean "doesn't factor in the skolemization of the existentials in the head"
16.07.18 15:14:48<stoopkid> example:
16.07.18 15:14:56<stoopkid> {?x p ?y. ?y p ?z} => {?x p ?z}
16.07.18 15:15:12<stoopkid> ?y is a so-called "body existential"?
16.07.18 15:16:22<stoopkid> "forall ?x ?z, ((exists ?y, ?x p ?y & ?y p ?z) -> (?x p ?z))" ?
16.07.18 15:17:17<stoopkid> although i'm not sure why ?y wouldn't also be an argument to the skolem function
16.07.18 15:18:22<stoopkid> my interpretation when we generate bnodes for existentials when we return from a rule that has existentials in the head, is that the bnodes/ids should satisfy the following criteria:
16.07.18 15:18:35<stoopkid> they should be unique to and determined by the combination of:
16.07.18 15:18:38<stoopkid> 1. the rule
16.07.18 15:18:54<stoopkid> 2. the particular substitution of ground terms for body variables
16.07.18 15:19:06<stoopkid> 3. the particular existential variable under consideration
16.07.18 15:19:19<stoopkid> at the very least
16.07.18 15:19:49<stoopkid> and they might possibly also need to be decomposable into their subterms, like we can do with terms in agda, like (suc x) is decomposable such that you can retrieve x out of it
16.07.18 15:38:32<stoopkid> here's what i mean by decomposability being an issue:
16.07.18 15:38:33<stoopkid> https://pastebin.com/ENFV1Jhe
16.07.18 15:39:20<stoopkid> decomposing (S (S (S zero))) in "?what has_suc (S (S (S zero)))" to get the result "(S (S zero)) has_suc (S (S (S zero)))"
16.07.18 18:19:03*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
16.07.18 18:19:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
16.07.18 21:10:00*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
16.07.18 21:11:08<koom> daemoz, yo
16.07.18 21:59:06*** Quit: koom (~sirdancea@98.233.253.142) left #autonomic-dev: Ping timeout: 268 seconds
17.07.18 00:20:21<HMCa> stoopkid: I can't help but feel like you're probably overcomplicating some things here
17.07.18 00:30:14*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
17.07.18 00:30:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.07.18 02:26:08<stoopkid> HMCa: if you wanna simplify it i'd totally be cool with that :P
17.07.18 02:30:59<HMCa> I've tried, but I somehow seem to always oversimplify when I do, heh
17.07.18 02:33:19<stoopkid> well, is my interpretation incorrect?
17.07.18 02:33:37<stoopkid> or just overcomplicated
17.07.18 02:35:10<stoopkid> i.e. should the query fail there as indicated in pastebin, or should it succeed essentially with ?what = (S (S zero))
17.07.18 02:35:27<stoopkid> (also these aren't internalized lists, i'm abusing the syntax
17.07.18 02:36:25<stoopkid> i.e. (S (S zero)) is just supposed to represent whatever structure we're actually going to use to represent that
17.07.18 02:36:50<stoopkid> like [is suc of [is suc of zero]], or internalized lists, or w/e
17.07.18 02:37:48<HMCa> well it sounds like what you're asking is again just if we actually need to skolemize or not?
17.07.18 02:37:51<HMCa> heh
17.07.18 02:39:04<stoopkid> well, i can't see how we don't, it seems we're skolemizing whether we use [is suc of ?x] or some other representation
17.07.18 02:40:09<HMCa> I still don't think we need full skolem functions...
17.07.18 02:40:57<stoopkid> possibly? but where specifically do you think we can be lax in the "fullness" of our skolem functions?
17.07.18 02:42:08<HMCa> basically I don't think we really need them to be functions at all
17.07.18 02:43:25<stoopkid> hrm
17.07.18 02:43:52<stoopkid> forall x, exists y, P(x,y)
17.07.18 02:44:10<stoopkid> skolemizes to:
17.07.18 02:44:17<stoopkid> forall x, P(x,f(x))
17.07.18 02:44:29<stoopkid> (not-skolem)-izes to:
17.07.18 02:44:35<stoopkid> forall x, P(x,?)
17.07.18 02:46:06<HMCa> "(not-skolem)-izes"? :-)
17.07.18 02:46:26<HMCa> You're implying that I'm implying a sort of transform that I am not implying...
17.07.18 02:47:40<HMCa> why the desire to rewrite away the existential?
17.07.18 02:48:44<stoopkid> in order to be able to translate the KB of FOL statements into a conjunctive normal form that robinson resolution can be applied to
17.07.18 02:49:11<HMCa> ok, but... why? :-)
17.07.18 02:49:14<HMCa> I mean...
17.07.18 02:49:17<HMCa> that's fine...
17.07.18 02:50:09<HMCa> and if exactly that is ehat you want to do, then what you probably want is indeed something like what you describe...
17.07.18 02:51:59<stoopkid> well, what i want to do is natural deduction which doesn't seem to require that translation
17.07.18 02:53:23<HMCa> right, nothing strictly says we have to "rewrite away" here... we never really claimed to be robinson, we ecen all know that we're joking when we say we are sld...
17.07.18 02:54:23<stoopkid> otoh i'm not sure about properties like refutation completeness beyond robinson resolution
17.07.18 02:55:06<stoopkid> and afaict without refutation completeness we can't have a consistency check for arbitrary kbs
17.07.18 02:57:05<HMCa> heh, there's not much worry there... what i propose still holds up, and trivially
17.07.18 02:58:13<stoopkid> hrm..
17.07.18 02:58:45<HMCa> it should be equivalent, in fact... it is really just a different way of tracing the map that would be the skolem function
17.07.18 02:59:51<stoopkid> i guess this is what i don't understand still, what is the alternative method of tracing that map
17.07.18 03:00:36<HMCa> it just leverages that we know some of the inherited constraints on that map to *not* have to build the map, and inatead just keep back-reference bindings
17.07.18 03:01:50<stoopkid> i'm not sure what you mean by that exactly
17.07.18 03:02:35<stoopkid> can you give me an example of the inherited constraints, where we get them from, and what "back-reference bindings" we are keeping?
17.07.18 03:02:42<HMCa> well think of the possible structures of your skolem functions' maps...
17.07.18 03:04:31<stoopkid> what comes to mind is the 3 criteria i listed above
17.07.18 03:04:50<HMCa> nah, they are much more constrained then that!
17.07.18 03:04:52<HMCa> because we are limited to binary rels, against one constant and either a second constant or a binding
17.07.18 03:05:40<stoopkid> not sure what you mean wrt "against one constant and either a second constant or a binding"
17.07.18 03:06:41<HMCa> we'll never ask it "[] :foo ?x" where ?x is not ultimately bound to some universal, right?
17.07.18 03:07:02<HMCa> where "[]" is any given "existential in question"
17.07.18 03:07:33<stoopkid> ok so by "binding" you mean "a bound universal variable"
17.07.18 03:08:52<HMCa> or a another existential variable that eventually is bound to one!
17.07.18 03:10:15<stoopkid> alright "[] :foo ?x" is interpreted as "forall ?x, exists ?y, ?y :foo ?x" ?
17.07.18 03:11:23<HMCa> well, no, here:
17.07.18 03:11:32<HMCa>  HMCa> where "[]" is any given "existential in question"
17.07.18 03:12:11<stoopkid> idrk what you mean by tht
17.07.18 03:12:30<HMCa> you "already have ?y" here... and ?x might be any quantified
17.07.18 03:13:34<HMCa> from some other rule we're trying to see if our ?y "in hand" unifies as subject of something in body of some other rule, which ?x comes from
17.07.18 03:14:02<HMCa> err, mentally edit out the redundant "from some other rule" plz
17.07.18 03:14:03<HMCa> heh
17.07.18 03:16:05<stoopkid> i'm not following
17.07.18 03:16:25<HMCa> ok, let me try another way
17.07.18 03:16:57<HMCa> iow, imagine instead of generating the skolem function when we encounter the existential... we just annotate the reasoner state where we saw it... and then later when we need to know properties of that existential we refer back to that annotation, and when we find new properties of that existential we make an annotation at *those* states ehich includes reference to earlier annotations
17.07.18 03:18:41<stoopkid> mm
17.07.18 03:18:52<stoopkid> what do these annotations consist of?
17.07.18 03:20:15<HMCa> literally just "some mark"
17.07.18 03:21:22<HMCa> "here be that existential you have"... "here be another property of that existential you got from back there"... "here be a third rel on that existential that you got from that last point"...
17.07.18 03:22:08<stoopkid> alright, well, how do we use these annotations then?
17.07.18 03:22:21<HMCa> it's just a decision tree
17.07.18 03:22:38<stoopkid> what is it even deciding
17.07.18 03:23:07<HMCa> when you need to unify something with the existential, you walk that something back through the annotations and see if it fits the relevant state, to be that thing
17.07.18 03:24:12<stoopkid> alright so...
17.07.18 03:24:23<stoopkid> zero a Nat.
17.07.18 03:24:34<stoopkid> {?x a Nat} => {?x suc ?y. ?y a Nat}
17.07.18 03:25:55<stoopkid> the number 3 in this representation would be the existential given by 3 successive calls of this rule starting with zero a Nat. right?
17.07.18 03:27:42<HMCa> sure
17.07.18 03:28:44<stoopkid> so the way 3 would be represented is by a bnode linked to a set of annotations associated with it
17.07.18 03:31:20<HMCa> well, a bnode linked to one annotation which includes a referance to another bnode which...
17.07.18 03:32:26<stoopkid> ok so let's take the number 1, it's linked to an annotation marking where we found it
17.07.18 03:32:44<stoopkid> so we found it using the 'suc' rule with ?x = zero
17.07.18 03:32:52<HMCa> well
17.07.18 03:33:20<HMCa> sure, "[ is suc of zero ]"
17.07.18 03:33:58<stoopkid> alright, what about the "a Nat" part?
17.07.18 03:34:07<HMCa> what about it?
17.07.18 03:34:32<stoopkid> why isn't this "[is suc of zero; a Nat]" ?
17.07.18 03:34:33<HMCa> what is our query here?
17.07.18 03:34:42<HMCa> do we need to know it is a nat or not?
17.07.18 03:34:50<HMCa> if we don't, then we're done, right?
17.07.18 03:35:00<stoopkid> alright how about this query:
17.07.18 03:35:13<HMCa> why would we have made any skolem function to "remember" what we didn't nees
17.07.18 03:35:16<HMCa> *need
17.07.18 03:35:39<stoopkid> zero suc ?x. ?x suc ?y. ?y suc ?z. ?what suc ?z. ?what a Nat.
17.07.18 03:37:06<HMCa> let's finish 1 before moving on to 4? :-)
17.07.18 03:37:28<stoopkid> alright how about:
17.07.18 03:37:38<stoopkid> zero suc ?x. ?what suc ?x. ?what a Nat
17.07.18 03:38:31<stoopkid> or even just:
17.07.18 03:38:33<HMCa> let's finish 1 before moving on to 2? :-)
17.07.18 03:38:43<stoopkid> zero suc ?x. ?x a Nat
17.07.18 03:38:47<stoopkid> that was just 1
17.07.18 03:38:54<stoopkid> ?what suc ?x, not ?x suc ?what
17.07.18 03:39:12<HMCa> ah, k
17.07.18 03:39:45<HMCa> let's take the second one first
17.07.18 03:41:05<HMCa> but let's rename the vars to keep the explanation less confusing
17.07.18 03:41:24<HMCa> "zero suc ?a. ?a a Nat"
17.07.18 03:42:11<stoopkid> alright
17.07.18 03:44:10<HMCa> we get ?a="?y annotated with a copy of the frame"... in that frame ?x=zero
17.07.18 03:45:15<HMCa> we then ask if our ?a unifies in "?a a Nat" by going back to that frame and asking "?y a Nat"
17.07.18 03:45:23<HMCa> which it is because zero a Nat
17.07.18 03:45:37<HMCa> follow?
17.07.18 03:47:04<stoopkid> hrm, partially i think
17.07.18 03:47:21<HMCa> ok, similarly:
17.07.18 03:47:41<HMCa> "zero suc ?a. ?what suc ?a. ?what a Nat"
17.07.18 03:48:15<HMCa> we get ?what by querying "?what suc ?y" in that frame
17.07.18 03:48:28<HMCa> ?what=?x=0 unifies
17.07.18 03:48:51<HMCa> the ?what=0, and ?what a Nat is then true by the fact
17.07.18 03:49:12<HMCa> *then
17.07.18 03:49:24<HMCa> follow, at least as partially?
17.07.18 03:49:47<stoopkid> so basically if we get an object given by an existential in some rule, like with:
17.07.18 03:49:50<stoopkid> zero suc ?a
17.07.18 03:49:56<stoopkid> gives us back an existential into ?a
17.07.18 03:50:17<stoopkid> or... gives us back "?a annotated with a copy of the frame where it succeeded"
17.07.18 03:50:33<HMCa> copy/reference-to
17.07.18 03:51:13<HMCa> if the frames are static then it can just be a pointer, see?
17.07.18 03:51:55<stoopkid> so basically anytime we call that rule using ?a in the ?y position, then we're going to replace ?x with whatever it was when the rule succeeded for ?a originally, and make sure our query unifies with this modified rule?
17.07.18 03:51:56<HMCa> it isn't "?a" but "some node"
17.07.18 03:53:05<HMCa> iow the reference is "to ?a at that particular time in earlier state when it came from"
17.07.18 03:53:51<HMCa> we don't really "replace ?x"... it is *already* bound in that old frame
17.07.18 03:54:34<stoopkid> sure, "replace ?x" or "use an already replaced ?x", either one
17.07.18 03:54:52<HMCa> we're just "re-querying" against that old frame, with a different consequent term
17.07.18 03:55:50<HMCa> now for the other cases, like 2, we'll just do the same, only recursively
17.07.18 03:57:05<HMCa> so when we "see" the second existential for the first time, its' state will include a reference to that state "about" the first existential
17.07.18 03:57:43<HMCa> and when we delve into that second existential's state and go to unify, we'll delve further in that unification back to the first state
17.07.18 03:57:50<HMCa> see the zero
17.07.18 03:58:01<HMCa> and "come back with 1"
17.07.18 03:58:16<HMCa> and then "come back with 2" similarly from the second state
17.07.18 03:58:26<HMCa> and so on, for 3+
17.07.18 03:59:15<HMCa> so maybe you can start to see why we could assert by induction that this produces the same results as creating a map up-front?
17.07.18 04:00:23<stoopkid> hrm..
17.07.18 04:00:56<stoopkid> so it doesn't fail ep-check because there's a different bnode associated with 1, 2, 3, etc.. ?
17.07.18 04:00:59<HMCa> right
17.07.18 04:02:08<stoopkid> hrm..
17.07.18 04:02:21<stoopkid> ok i think i can agree with that so far
17.07.18 04:03:34<stoopkid> just a sanity check real quick, this rule is supposed to desugar into:
17.07.18 04:03:45<stoopkid> {?x a Nat} => {?x suc ?y}
17.07.18 04:03:52<stoopkid> {?x a Nat} => {?y a Nat}
17.07.18 04:03:59<stoopkid> ?
17.07.18 04:04:36<stoopkid> except for that these two rules basically have to share the same environment, i.e. you use the same "frame" to substitute in both of them when you query with an "annotated existential in hand"
17.07.18 04:07:25<HMCa> right, iow it desugars with ?y "remaining the same bnode" in both rules
17.07.18 04:08:03<stoopkid> ok
17.07.18 04:08:07<stoopkid> i can agree with that
17.07.18 04:08:12<stoopkid> how about the converse
17.07.18 04:08:22<stoopkid> say i start with the desugared version
17.07.18 04:08:29<stoopkid> i.e. that's what i actually type into the kb
17.07.18 04:09:03<stoopkid> are they the same bnode?
17.07.18 04:10:21<HMCa> well, I might have to check on that... iirc n3 has a peculiar detail there
17.07.18 04:14:18<stoopkid> ok so you're basically saying that the rule itself is the skolem function, and what we store instead is the arguments that the skolem function was applied to
17.07.18 04:14:56<stoopkid> well, hrm..
17.07.18 04:15:42<stoopkid> i guess the arguments (i.e. universals that were bound in the rule when it succeeded) and other existentials generated in the head that the existential might be related to
17.07.18 04:26:34<stoopkid> ok so what if we added the following to the kb:
17.07.18 04:26:49<stoopkid> {?x suc ?y. ?y recurse ?z} => {?x recurse ?z}
17.07.18 04:28:50<stoopkid> then we can query: "zero recurse forever"
17.07.18 04:32:34<HMCa> this is not a head existential, so it just works as normal, an "untracked" local variable, just a plain ol bnode
17.07.18 04:33:12<HMCa> so because we can't get to any other property of it, the loop is cut as normal
17.07.18 04:34:08<stoopkid> not sure what you mean here
17.07.18 04:34:32<stoopkid> ?y is our (non-head) "existential in hand", right?
17.07.18 04:35:03<HMCa> maybe I was not clear earlier, but this tracking annotation would only apply for head existentials
17.07.18 04:35:16<stoopkid> right but
17.07.18 04:35:59<stoopkid> we're returning that annotated bnode back into this rule from the {?x a Nat} => {?x suc ?y. ?y a Nat} rule
17.07.18 04:36:16<HMCa> sure
17.07.18 04:37:30<stoopkid> ok so we get this fresh annotated bnode in ?y
17.07.18 04:37:48<stoopkid> then we're going into ?y recurse ?z with that fresh bnode
17.07.18 04:38:08<HMCa> I wish you'd use more than 2 variable names btw, this will get confusing fast :-P
17.07.18 04:38:43<stoopkid> fair, lemme change the new rule: {?a suc ?b. ?b recurse ?c} => {?a recurse ?c}
17.07.18 04:41:27<HMCa> so we get ?b=[?y] and go [?y] recurse ?c, then look for [?y] suc ?b and get ?b=[[?y]]... when we recur and get into ep check we see if these can unify, and they can, so we ep cut!
17.07.18 04:42:02<HMCa> we can't associate either to zero, so thy both might as well be N... so we're looping... so we cut.
17.07.18 04:43:51<stoopkid> what is [?y] and [[?y]] ?
17.07.18 04:45:00<HMCa> just "the bnode that was ?y at annotation frame 1" and "the bnode that was ?y at annotation frame 2"
17.07.18 04:46:40<HMCa> iow, because no "new related information" comes in, as far as the unifier is concerned it can satisfy the constraints of the one bnode with the other (because there weren't any that came in between the frames)
17.07.18 04:47:41<HMCa> the decision tree is satisfied, because there's nothing additional to disceren, so they're unifiable, so we cut...
17.07.18 04:48:46<HMCa> nevermind that this seems to imply different numbers as being the same... it only *seems* that way, it isn't actually doing that here... heh ;-)
17.07.18 04:48:59* HMCa gtr in a sec
17.07.18 04:50:06<stoopkid> alright i think i've got a vague idea of what's going on here, still need to work through some of the details though
17.07.18 04:50:42<stoopkid> particularly this checking of decision trees during ep-check..
17.07.18 04:51:35<HMCa> well, that's the best we've done wrt alias tracking so far, I think? :-)
17.07.18 04:53:11<stoopkid> ok so, basically when we recurse with the existential we got from suc... that frame we stored for the existential only has bindings for the suc rule, which only get applied if we're actually calling the suc rule, either `?x suc ?y` or `?y a Nat`
17.07.18 04:54:48<stoopkid> but there's nothing to apply when we call `?y recurse ?z` because "recurse" isn't the rule where we generated the existential from, and so not the rule that we had a frame stored for
17.07.18 04:54:57<HMCa> right, and to check ?a in the ep check we don't have either going to a frame which "then gets us to zero"
17.07.18 04:55:42<HMCa> so we'd need something to make them "discernable relative to zero" to have them not unify in ep check
17.07.18 04:55:55<stoopkid> hrm..
17.07.18 04:56:14<stoopkid> ok i think i'd agree with that
17.07.18 04:57:34<HMCa> and then if they're discernable relative to zero... well that means "we're counting down" anyway, so we don't need or want the ep cut! ;-)
17.07.18 04:59:06<HMCa> we may end up "just building the whole skolem function anyway" if that countdown is exhaustively asserting Nat-hood on each, too... :-)
17.07.18 05:00:14<HMCa> so you can look at this almost like "JITing the skolem function" by (ab)using rdf's peculiar bnode notions, heh
17.07.18 05:00:45<stoopkid> right
17.07.18 05:01:47<HMCa> and note that interestingly you could not do this sort of alias tracking in general... like, this wouldn't work out in prolog land...
17.07.18 05:02:05<stoopkid> well
17.07.18 05:02:29* stoopkid looks at the differences between prolog and datalog again..
17.07.18 05:02:43<HMCa> right, its a quantifier alternation thing. ;-)
17.07.18 05:03:04<HMCa> and I'll leave you to mull that over, for now? :-D
17.07.18 05:04:03* HMCa bbl
17.07.18 08:42:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
17.07.18 08:42:34*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.07.18 08:56:45*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tcrsuakihoqhhekz) left #autonomic-dev: Quit: Connection closed for inactivity
17.07.18 11:46:38*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yiuxswauzwdukexq, stoopkid: stoopkid)
17.07.18 15:30:43*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
17.07.18 16:08:23<stoopkid> so...
17.07.18 16:08:36<stoopkid> zero suc ?a. ?a suc ?a.
17.07.18 16:09:45<stoopkid> this seems ofc like it should fail, but i'm not sure exactly what the mechanism would be
17.07.18 17:05:04<daemoz> hey all, been away, just caught up. A lot of this is beyond me I think I must still be missing a lot of n3(?) stuff? bnode, ep-check, this is all n3?
17.07.18 17:08:08<stoopkid> daemoz: heya
17.07.18 17:08:14<stoopkid> yep this is the n3 mess lol
17.07.18 17:11:02<daemoz> stoopkid: cool, cool, guess it's time to keep going through that n3 pdf
17.07.18 17:11:41<daemoz> love the flowchart
17.07.18 19:21:14*** Quit: koom (~sirdancea@98.233.253.142) left #autonomic-dev: Ping timeout: 265 seconds
17.07.18 20:43:14<koo5[m]> Hey
17.07.18 20:44:56<koo5[m]> We were wondering if you want to get in a video call with us sometime, because we are hanging out together and stoop is explaining stuff
17.07.18 21:40:55<daemoz> hey yeah that'd be great
17.07.18 21:40:56<daemoz> sorry if this is late
17.07.18 21:41:55<daemoz> koo5[m]: stoopkid 
17.07.18 22:08:56*** Join: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net, sirdancealot: koo5)
17.07.18 22:16:06<koo5[m]> we're done today, what time are you available tomorrow? daemoz 
17.07.18 22:18:55<koom> stoopkid, so, no stringification for the bnode identifier, right?
17.07.18 22:26:31<daemoz> tomorrow im free between 11am-7pm pacific time
17.07.18 22:33:28<koom> alright, that should be 14-22 of ours, should give us plenty of time to get together
17.07.18 22:35:17*** Join: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net, (unauthenticated): realname)
17.07.18 22:35:40<daemoz> cool cool
17.07.18 22:35:47<daemoz> skype or what?
17.07.18 22:36:04*** Quit: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net) left #autonomic-dev: Remote host closed the connection
17.07.18 22:36:26*** Join: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net, (unauthenticated): realname)
17.07.18 22:42:26<koo5[m]> or hangouts, i suppose
17.07.18 22:47:21<daemoz> sure
17.07.18 22:54:16<stoopkid> koom: right, i guess let's start with it not returning anything and essentially keep it as a variable that's got this "hidden connection" back to the frame where it was generated from
17.07.18 22:56:01*** Join: koom__ (~koom@c-73-86-120-19.hsd1.md.comcast.net, (unauthenticated): realname)
17.07.18 22:56:24<koom> im thinking though, what we really want is to remember that it was generated in this "original, multi-triple-head" rule object, right? then whichever split-rule matches, it will have the bindings available
17.07.18 22:56:48* koom wonders who koom__ is
17.07.18 22:57:43<stoopkid> right
17.07.18 22:57:53<koom> alright
17.07.18 22:58:24*** Quit: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net) left #autonomic-dev: Ping timeout: 244 seconds
17.07.18 23:00:26<koom> im probably gonna crash now and maybe try in the morning
17.07.18 23:01:07<koom> what would you say to going to ny on about the 25th? you'd prefer to stay here?
17.07.18 23:06:06<stoopkid> yea i think that'll work, maybe the 26th
17.07.18 23:07:12<koom> think youll be able to persuade megane to come too?
17.07.18 23:08:00<stoopkid> probably not, especially if we're planning to be working most of the time
17.07.18 23:08:12<koom> makes sense
17.07.18 23:13:24<stoopkid> i'm gonna try to figure out how we can enumerate each of the distinct situations we can encounter in the n3 inferencing
17.07.18 23:13:36<stoopkid> i'm getting lost in all the different combinations of possibilities
17.07.18 23:15:07<stoopkid> daemoz: btw when reading guido's paper on n3, don't focus too hard on his proofs because not all of them are 100% accurate
17.07.18 23:18:34<stoopkid> like when you get to chapter 5 stuff, like subgraph lemma, instance lemma, merging lemma, etc..
17.07.18 23:21:09<stoopkid> also i think it's actually incomplete (doesn't introduce any inferencing mechanism for existentials for example)
17.07.18 23:23:15<koom> like the "i have no idea how's this supposed to work" situation?
17.07.18 23:23:31<koom> alright, gn
17.07.18 23:23:57<stoopkid> cya
17.07.18 23:31:42<stoopkid> koom: ok i see what to do with the "zero suc ?a. ?a suc ?a" situation
17.07.18 23:32:58<stoopkid> i was overthinking, we don't leave ?a like a variable attached to this frame, we leave it like a bnode attached to the frame
17.07.18 23:33:30<stoopkid> err, like a fresh constant attached to the frame
17.07.18 23:37:43<koom> alllright
17.07.18 23:38:34<stoopkid> ah crap but then that screws u
17.07.18 23:38:41<stoopkid> p the interpretation with the ep-check..
17.07.18 23:42:37<koom> im supposing we only want to do the re-unification step if the var we get for an argument is a bnode that originated in this original-rule, and it is in an existential position, right? like, not if we're matching it against some universal
17.07.18 23:43:13<koom> err why not like a var then?
17.07.18 23:46:28<stoopkid> so when we call ?a suc ?a, the ?a in object position is in existential position and was previously generated when we succeed from zero suc ?a, so in the `suc` rule we'll make the substitutions from that frame where it was generated, and we'll get ?x=zero, so the ?a in subject position would have to be not unifiable with zero in order to make sure "?a suc ?a" doesn't succeed
17.07.18 23:46:30<koom> btw, when you come upon some of that thin wire...
17.07.18 23:47:49<stoopkid> do you think graphite for a mechanical pencil would be thin enough?
17.07.18 23:48:13<koom> yeah but maybe not something i want to stick in there and break, idk
17.07.18 23:48:24<stoopkid> i'll keep looking :)
17.07.18 23:49:34<stoopkid> ah perfect found a little thing exactly for that from my old phone-cabling job
17.07.18 23:50:22<koom> oh really, nice
17.07.18 23:50:43<koom> thx
17.07.18 23:52:18<koom> could you copy&paste the rules for me?
17.07.18 23:55:52<stoopkid> https://pastebin.com/MTQF62Zg
18.07.18 00:08:09<stoopkid> so if we leave ?a as a variable in the query (in the sense of being able to unify with anything) but still do the frame-substitution when we call the rule from the "?a suc ?a", then ?a will bind with whatever is ?x is after our frame-substitution
18.07.18 00:09:00<stoopkid> so the frame that gets stored from the first query item, "zero suc ?a" is gonna be like [?x=zero]
18.07.18 00:09:57<stoopkid> so after that substitution gets applied, the second query item will succeed with ?a = zero
18.07.18 00:10:57<stoopkid> on the other hand:
18.07.18 00:11:57<stoopkid> https://pastebin.com/yyT7HEqx
18.07.18 00:13:27<stoopkid> the suc rule returns these existentials into ?b in the recurse rule
18.07.18 00:14:09<stoopkid> by treating ?b like a variable, then the ep-check can stop the infinite looping
18.07.18 00:14:41<stoopkid> we do:
18.07.18 00:14:44<stoopkid> zero recurse forever.
18.07.18 00:14:48<stoopkid> ?b recurse forever.
18.07.18 00:14:59<stoopkid> ?b recurse forever. <-- and now we fail ep-check and we're out of the infloop
18.07.18 00:18:54<stoopkid> so the scheme of just leaving it as a variable attached to a frame works out for cutting infloops with the ep-check, but it fails for making sure that the term can't get bound to some other term that's supposed to be different from it
18.07.18 00:20:33<stoopkid> now let's say we took the opposite approach and returned constant bnodes that won't unify with anything but themselves or a variable
18.07.18 00:20:39<stoopkid> then we get the opposite problems
18.07.18 00:21:22<stoopkid> "zero suc ?a. ?a suc ?a." would succeed in the first item with ?a = _:b0
18.07.18 00:21:32<stoopkid> then we query _:b0 suc _:b0
18.07.18 00:22:34*** Quit: koom__ (~koom@c-73-86-120-19.hsd1.md.comcast.net) left #autonomic-dev: Ping timeout: 264 seconds
18.07.18 00:22:42*** Quit: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net) left #autonomic-dev: Ping timeout: 268 seconds
18.07.18 00:22:54<stoopkid> _:b0 in the object position where it was originally created when we queried "zero suc ?a", so it does the associated frame-substitution, so it sets [?x = zero], and now we have to make sure the subjects unify, so checking _:b0=zero, which fails
18.07.18 00:23:15<stoopkid> but for the "zero recurse forever" situtation, we get:
18.07.18 00:23:18<stoopkid> zero recurse forever
18.07.18 00:23:22<stoopkid> _:b0 recurse forever
18.07.18 00:23:26<stoopkid> _:b1 recurse forever
                 <stoopkid> ...
18.07.18 00:23:48<stoopkid> but, there does seem to be a middle-ground between these approaches
18.07.18 00:24:05<stoopkid> that would make both these test-cases pass
18.07.18 00:25:25<stoopkid> this would be to leave the term as a variable, but include the constant bnode in the frame-substitution, rather than carrying it around
18.07.18 00:27:43<stoopkid> so the frame-substitution would basically be [?x=zero;?y=_:b0]
18.07.18 00:28:40<stoopkid> so in the first test-case, the first item is "zero suc ?a", succeeds and leaves ?a as a variable
18.07.18 00:28:44<stoopkid> attached to the frame [?x=zero;?y=_:b0] in the `suc` rule
18.07.18 00:29:58<stoopkid> queries "?a suc ?a", with ?a as a variable attached to that frame, does the frame-substitution so we're matching "?a suc ?a" against "zero suc _:b0"
18.07.18 00:30:19<stoopkid> we get ?a = zero = _:b0, which fails when we check zero = _:b0
18.07.18 00:32:38<stoopkid> and then for the `zero recurse forever` case, our frame-substitution doesn't apply to this rule so ?b always stays a variable
18.07.18 00:32:51<stoopkid> so we still cut the infinite loop
18.07.18 00:33:12<stoopkid> *but*
18.07.18 00:33:22<stoopkid> this still doesn't solve everything
18.07.18 00:34:06<stoopkid> query: "zero suc ?a. ?a a Nat"
18.07.18 00:35:02<stoopkid> if we leave it as a variable attached to a frame-substitution that only gets applied when match it against that same rule, then "?a a Nat" will be able to succeed against the fact "zero a Nat" because the frame-substitution doesn't get applied
18.07.18 00:44:07<stoopkid> ok i think i've got it
18.07.18 00:44:34<stoopkid> we match the query item against a rule-head or fact, leaving everything in the query item as variables
18.07.18 00:44:57<stoopkid> if it matches, we do ep-check
18.07.18 00:46:39<stoopkid> if we pass ep-check, we check if we have any existentials we already generated and if we're calling into the same rule they were generated from
18.07.18 00:47:17<stoopkid> if not we continue consider it matched and continue into the rule-body as normal
18.07.18 00:47:26<stoopkid> if we did have those existentials, then we do the frame substitution
18.07.18 00:49:59<stoopkid> then we match again using the version with the frame-substitution, and if it matches we succeed (and don't need to proceed into the rule-body), and if not we fail
18.07.18 00:50:49<stoopkid> hrm..
18.07.18 00:51:01<stoopkid> this makes all these test-cases pass but i'm not quite sure it's enough..
18.07.18 00:55:26<daemoz> ahh when I was trying to ask something a bit ago about equality- I was trying to ask about unification
18.07.18 00:55:40<daemoz> thought i'd share that
18.07.18 00:56:06<stoopkid> what was your q? can't remember
18.07.18 00:56:42<daemoz> I was trying to figure out how 'equality' of expressions worked but I was thinking of the thing called 'unification'
18.07.18 00:57:30<stoopkid> ah
18.07.18 00:58:50<stoopkid> yea the core of the inferencing system is almost entirely just unification (and the procedure for selecting the next expressions to try to unify)
18.07.18 00:59:49<daemoz> yeah the 'resolution strategy'?
18.07.18 00:59:59<stoopkid> right
18.07.18 01:00:29<stoopkid> which in our case is basically just "loop through all the possibilities like a glorified odometer"
18.07.18 01:01:08<daemoz> haha, for now at least
18.07.18 01:02:33<daemoz> what is a 'unit clause'?
18.07.18 01:02:46<daemoz> sorry, 'parent clause'
18.07.18 01:03:56<stoopkid> parent-side is like query-side (as opposed to kb-side)
18.07.18 01:04:13<daemoz> I see
18.07.18 01:04:59<stoopkid> i guess it's like parent-nodes in a tree data-structure, looking at the proof-search as a tree with the query as the root etc..
18.07.18 01:05:24<daemoz> kinda 'does this fit?' 'does this fit?'
18.07.18 01:06:46<stoopkid> for the proof-search/resolution-strategy? yea basically
18.07.18 01:24:31<stoopkid> daemoz: https://pastebin.com/BbVzQsGd
18.07.18 01:24:56<stoopkid> that's basically what we've got implemented so far
18.07.18 01:26:17<stoopkid> we've spent quite a bit of time optimizing the algorithm that actually does this simple unify-select-loop, but ultimately this is all the algorithm's doing so far
18.07.18 01:26:58<stoopkid> it's not the most useful thing in the world, when it comes to deductive inference or even knowledge-representation
18.07.18 01:27:05<daemoz> neat! Can I look at it?
18.07.18 01:27:21<stoopkid> you can look at several of them heh
18.07.18 01:27:51<stoopkid> https://github.com/koo5/univar
18.07.18 01:29:33<stoopkid> not sure what's the state of it, koo's hacking on the 'pyin' version right now and i'm not sure what's the state of our 'univar' version
18.07.18 01:30:12<stoopkid> been a while since i've been working with these implementations i need to refresh my memory
18.07.18 01:30:26<stoopkid> we've been stuck at a dead-end with the theory for... year? heh
18.07.18 01:30:30<stoopkid> years*
18.07.18 01:30:50<stoopkid> the existential variables / bnodes issues..
18.07.18 01:31:32<daemoz> what issues are those?
18.07.18 01:31:37<stoopkid> the tool will be incredibly more useful once that's actually implemented
18.07.18 01:32:22<stoopkid> main issue is we're still trying to nail down exactly what even is N3's interpretation of how existential variables should be handled
18.07.18 01:32:47<daemoz> at least the rdf pdf i'm reading says there are no existentials used (in their inference engine)
18.07.18 01:32:55<daemoz> only universal
                 <stoopkid> right
18.07.18 01:33:16<stoopkid> so we go somewhat beyond that PDF
18.07.18 01:33:37<stoopkid> that PDF essentially describes what we've already implemented
18.07.18 01:34:08<daemoz> how does cwm do it?
18.07.18 01:50:47<stoopkid> daemoz: tried to see if i could find out but not at the moment :)
18.07.18 01:53:11<HMCa> daemoz: why cwm, in particular?
18.07.18 01:53:17<HMCa> heh
18.07.18 01:54:51<HMCa> cwm has it all easier by being forward chaining... but otoh it is forward chaining.
18.07.18 01:55:05<stoopkid> HMCa: any thoughts on what i was saying above?
18.07.18 01:55:18<stoopkid> also, heya
18.07.18 01:55:22<HMCa> hi
18.07.18 01:55:26<HMCa> I kinda only skimmed so far


18.07.18 01:56:47<HMCa> some notes as i re-skim:
18.07.18 02:00:30<HMCa> 1) query vars are basically always universals.. when we say "?who a ?what" as query we really mean the rule "{?who a ?what}=>{?who a ?what}." iirc?
18.07.18 02:03:03<stoopkid> then why is the results list basically the inhabitants of "exists ?who ?what, ?who a ?what" ?
18.07.18 02:05:43<HMCa> well, because it is just in a proof of the universal, heh... to prove you couldn't refute you need to enumerate the list
18.07.18 02:07:24<stoopkid> i'm not sure what this has to do with what i was saying
18.07.18 02:07:47<stoopkid> unless every rule {body} => {head} is actually {{body} => {body}} => head
18.07.18 02:09:25<stoopkid> and even if that is the case, i don't still don't see how it affects what i was saying
18.07.18 02:09:46<stoopkid> because it seems we have equivalent structures in mind under either interpretation
18.07.18 02:10:59<HMCa> well, maybe let's come back to that
18.07.18 02:12:06<HMCa> the short answer is that it is equivalent, but remember the early days of my ranting about "everything is just rules!"?
18.07.18 02:12:54<HMCa> it really is kinda like {{}=>{}}=>{}...
18.07.18 02:13:41<stoopkid> i don't see why we should do it that way, but since it's equivalent let's come back to that
18.07.18 02:14:17<stoopkid> so, i've got 3 interpretations so far right


18.07.18 02:16:37<HMCa> 46 < stoopkid> if we pass ep-check, we check if we have any existentials we already generated and if we're calling into the same rule they were generated from
18.07.18 02:16:40<HMCa> 47 < stoopkid> if not we continue consider it matched and continue into the rule-body as normal
18.07.18 02:16:43<HMCa> 47 < stoopkid> if we did have those existentials, then we do the frame substitution
18.07.18 02:17:05<HMCa> why the same rule?
18.07.18 02:17:39<HMCa> and i'm not sure what you really mean by "do the frame substitution" here
18.07.18 02:19:32<stoopkid> do the frame substitution / use that existing frame / whatever
18.07.18 02:21:05<stoopkid> and the same rule because ?x in one rule isn't the same as ?x in another rule
18.07.18 02:22:58<stoopkid> unless you want us to carry around different annotations for every frame where the existential was ever used over the course of the proof-search and somehow know how to call back into these at the right time as we continue to use the existential?
18.07.18 02:23:02<HMCa> well, heh... remember that thing I said i'd have to look up again? :-)
18.07.18 02:23:28<stoopkid> well
18.07.18 02:23:50<HMCa> wrt scoping between rules
18.07.18 02:23:58<stoopkid> that's a fairly special and checkable case
18.07.18 02:24:27<HMCa> 'checkable' as in?
18.07.18 02:25:04<stoopkid> checking whether a collection of rules is the desugaring of some multi-headed rule
18.07.18 02:26:15<stoopkid> my interpretation is that sugaring/desugaring should be inverse operations
18.07.18 02:27:22<stoopkid> but also my interpretation is that we actually shouldn't have this sugaring relation, i.e. make multi-headed rules distinct from their "desugared" counterparts
18.07.18 02:28:17<stoopkid> i.e. treat the multiple rules as distinct scopes
18.07.18 02:28:37<HMCa> well, the idea is that we're desugaring *into* some multi-headed rule... but that also seems like a tangent here
18.07.18 02:29:51<stoopkid> not necessarily, i don't necessarily see the equivalence of these different interpretations for the inferencing
18.07.18 02:30:52<HMCa> well, you're not wrong, and cwm/eye (other reasoners) do have different handling here
18.07.18 02:33:20<HMCa> but a lot of that difference in handling is because of how they interpret higher order structure, which we explicitly don't do here (short of e:findall magics)
18.07.18 02:34:35<HMCa> let me try putting this another way...
18.07.18 02:35:10<stoopkid> slight differences can make or break reasoners as far as i've seen
18.07.18 02:36:36<HMCa> yes, but what does "break" mean in this case...
18.07.18 02:37:05<stoopkid> go into infloops, prove 0 == 1, etc..
18.07.18 02:37:48<stoopkid> take my 3 different interpretations so far for example
18.07.18 02:38:10<stoopkid> the first one doesn't infloop, but proves 0 suc 0
18.07.18 02:38:24<stoopkid> the second doesn't prove 0 suc 0, but infloops
18.07.18 02:38:51<stoopkid> the third one doesn't do either of these, but the same mechanism preventing it from inflooping prevents it from doing substructural recursion as well
18.07.18 02:38:56<stoopkid> (and probably has other problems)
18.07.18 02:39:53<stoopkid> and there might still be some way to make it infloop that i'm not thinking of
18.07.18 02:41:45<HMCa> hrmm, proving 0==1 is kinda sorta allowed, though... heh.  we don't actually have an equality theory here, right?
18.07.18 02:41:49<HMCa> but anyway
18.07.18 02:41:55<HMCa> yah infloops are bad
18.07.18 02:42:25<stoopkid> proving 0 suc 0 from our Nat rules should probably not be allowed i'd think?
18.07.18 02:43:15<stoopkid> this would certainly be contradictory to the idea of being able to use our Nat rules to specify the Nat data-type i'd think?
18.07.18 02:44:48<HMCa> well, remember we can't *actually* express nat here at all...
18.07.18 02:45:20<stoopkid> well
18.07.18 02:45:26<stoopkid> that *is* tangential
18.07.18 02:45:35<HMCa> again short of e:findall magics
18.07.18 02:45:58<stoopkid> for general elimination/induction rule for Nats
18.07.18 02:46:13<stoopkid> but that's not what we're looking at here we're looking at just the constructors/intros
18.07.18 02:48:23<stoopkid> i'm pretty sure ~(0 suc 0) in every interpretation of pretty much any first-order theory of the natural numbers :)
18.07.18 02:51:47<HMCa> well, that gets complicated... we allow such theories ofc, but whether or not this one should be one is a complex question, heh
18.07.18 02:54:40<HMCa> so, wrt the scoping question, do you see a difference in expressivity?  And if so, do you still see a difference if you include e:findall etc? heh...
18.07.18 02:54:42<stoopkid> also we do have a basic theory of equality
18.07.18 02:54:50<stoopkid> unification of constants
18.07.18 02:55:21<stoopkid> which is actually the equality i'm concerned with atm
18.07.18 02:56:17<stoopkid> query: "zero suc ?a"
18.07.18 02:56:34<stoopkid> when this succeeds, is "?a" such that it cannot be unified with "zero" ?
18.07.18 02:57:44<stoopkid> and it's not just the scoping question
18.07.18 02:58:15<stoopkid> because the choice of scoping may have different results depending on what else we're tweaking
18.07.18 02:59:27<HMCa> all it suceeds with is "some singular bnode"
18.07.18 02:59:48<stoopkid> can this be unified with zero?
18.07.18 03:00:05<stoopkid> or is it like a fresh constant that can be unified with anything but itself?
18.07.18 03:00:24<stoopkid> (or a variable)
18.07.18 03:03:41<HMCa> well, it can be unified with anything which it "could be" right?
18.07.18 03:04:06<stoopkid> so, only other bnodes/variables
18.07.18 03:05:25<HMCa> it can be a constant, too, but only if that constant does fit that "decision tree" for it
18.07.18 03:06:05<stoopkid> so wait..
18.07.18 03:06:46<stoopkid> so these bnodes are annotated with these... "decision trees"...
18.07.18 03:07:58<HMCa> (a linked list between frames)
18.07.18 03:08:04<HMCa> yes
18.07.18 03:08:05<stoopkid> yes, that
18.07.18 03:08:56<stoopkid> so when we're unifying two bnodes, we're walking through the whole list to see if their frames match
18.07.18 03:10:02<HMCa> "if their frames match"?
18.07.18 03:12:56<stoopkid> yes we're seeing if they result from the same proof-tree
18.07.18 03:13:13<HMCa> well
18.07.18 03:15:49<HMCa> they're kinda just either the same bnode or they're not
18.07.18 03:16:22<stoopkid> well
18.07.18 03:17:04<HMCa> they either come from the same decision tree or they don't... you don't care though, because later if something non-existential has to be bound, it either gets through both trees or it doesn't...
18.07.18 03:18:46<stoopkid> hrm, i don't think i'm really following
18.07.18 03:19:27<HMCa> i gtr soon :-\
18.07.18 03:22:12<HMCa> when you bind an existential to another existential, you're really just "appending their lists" right?
18.07.18 03:23:14<stoopkid> their substitution lists? or their linked-lists-of-frames?
18.07.18 03:23:28<HMCa> their linked-lists-of-frames
18.07.18 03:23:59<stoopkid> are you?
18.07.18 03:24:04<HMCa> you're taking some intersect of their substitutions by doing so, yes>
18.07.18 03:25:39<stoopkid> intersect as in like, if you bound the existential representing 2 to the existential representing 1, then we're in the intersection of the situation of being the existential representing 2 and the existential representing 1?
18.07.18 03:26:05<HMCa> yes
18.07.18 03:26:58<stoopkid> and so by append link lists, you essentially mean join(conditions-for-being-2,conditions-for-being-1)
18.07.18 03:27:09<HMCa> yes
18.07.18 03:27:30<stoopkid> i.e. while(conditions-for-being-2){while(conditions-for-being-1){intersection}}
18.07.18 03:27:41<HMCa> sure
18.07.18 03:28:57<HMCa> if those bnodes can't be eachother then nothing else can match them either, right?
18.07.18 03:31:20<stoopkid> not quite sure i'm understanding
18.07.18 03:31:52<stoopkid> so this is essentially the new conditions associated with the term that is the existential representing 2 bound to the existential representing 1 ?
18.07.18 03:33:33<HMCa> yes, you don't "check these reqs against eachother" you just bind and move on
18.07.18 03:35:27<stoopkid> ok, and when do you actually check the requirements against something?
18.07.18 03:35:46<HMCa> you make the "existential in hand" (temporarily) into both existentials (as if assuming thr bnodes are the same)
18.07.18 03:36:29<HMCa> when you actually have a non-existential "something" to try to unify
18.07.18 03:37:07<stoopkid> ok so let's see if we can walk through my example before you have to run
18.07.18 03:37:14<stoopkid> zero suc ?a
18.07.18 03:37:36<stoopkid> succeeds with ?a as some bnode with some conditions associated to it
18.07.18 03:37:53<stoopkid> what are the conditions associated with it here, i'm confused about that part
18.07.18 03:41:47<stoopkid> daemoz: so yea you can see how the existentials introduce a bit more complexity into the picture...
18.07.18 03:44:21<HMCa> it's not an association of conditions, it's an association of state.... whatever the "something" we come to later is, we'll be asking a question about "some rel of that something" too... we don't want to see if the something could be that bnode, we want to see if that bnode could be that something and serce as justification for an answer to the question about the something....
18.07.18 03:44:38<HMCa> *serve
18.07.18 03:45:53<HMCa> anyway i gtg
18.07.18 03:46:34<stoopkid> alright catch ya later
18.07.18 04:16:47<stoopkid> hrm
18.07.18 04:18:37<stoopkid> so is this like "while(t = unify(query-triple,state-for-2)){while(unify(t,state-for-1)){...}}}" ?
18.07.18 04:42:07<daemoz> stoopkid: yeah I'm seeing that :P
18.07.18 05:36:52*** Join: koom (~sirdancea@c-73-86-120-19.hsd1.md.comcast.net, sirdancealot: koo5)
18.07.18 05:37:20*** Join: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net, (unauthenticated): realname)
18.07.18 06:11:55<ditable-kooe>stoopkid: do we have any conclusions?
18.07.18 06:20:45*** Quit: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net) left #autonomic-dev: Ping timeout: 256 seconds
18.07.18 08:19:44<stoopkid> ditable-kooe: lol no
18.07.18 08:35:53<ditable-kooe>with all this kbdbg output, im wanting to go back to the idea of trying to store most of a programs' state in a trilestore directly
18.07.18 08:36:15<ditable-kooe>i wonder if redland has any functionality for rdf lists, like rdflib does
18.07.18 08:36:33<ditable-kooe>we could use it directly from python
18.07.18 09:27:07<ditable-kooe>you up so early?:)
18.07.18 09:29:27<stoopkid> yep
18.07.18 09:40:33<ditable-kooe>cool
18.07.18 09:40:38<ditable-kooe>nilis still sleeping
18.07.18 09:40:52<ditable-kooe>sleeping off the agda
18.07.18 09:41:05<stoopkid> lol
18.07.18 09:41:36<ditable-kooe>im starting to seriously consider the raptor plan, 90% of pyin is translating between the native and rdf representations
18.07.18 09:50:18<ditable-kooe>think ill stick to python and rdflib though
18.07.18 09:50:41<ditable-kooe>its just gonna be superslow, and if we want a bit more speed, we'll try pypy
18.07.18 10:10:51<ditable-kooe>ok how do i call this
18.07.18 10:25:49<ditable-kooe>alright this should do
18.07.18 10:41:11<ditable-kooe>ok, we're setting out for your place when she's ready
18.07.18 11:00:21*** Quit: koom (~sirdancea@c-73-86-120-19.hsd1.md.comcast.net) left #autonomic-dev: Ping timeout: 264 seconds
18.07.18 14:23:11<koo5[m]> daemoz: daemoz_ , whats your hangouts?
18.07.18 15:05:26<daemoz> koo5[m]: jeremydezmond@gmail.com
18.07.18 15:06:00<daemoz> Just woke up, have some coffee and stuff to drink I'll be available shortly
18.07.18 15:33:03<daemoz> koo5[m]: stoopkid ready whenever over here.
18.07.18 15:51:58*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
18.07.18 15:52:23*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
18.07.18 16:47:05<HMCa> how goes?
18.07.18 17:07:05<daemoz> HMCa: heya
18.07.18 17:13:06<koo5[m]> Heya
18.07.18 17:13:27<koo5[m]> Tried ringing you up on hangouts daemoz
18.07.18 17:13:39<daemoz> koo5[m]: hmm didn't get anything
18.07.18 17:18:37<koo5[m]> It hangs up after a few rings
18.07.18 17:18:52<daemoz> weird. I have the page open but I dont' see anything popping up
18.07.18 17:20:33<koo5[m]> Do you know if any video calling app supports recording the video at the same time?
18.07.18 17:20:56<daemoz> I'm not sure. I suppose one could screen-record the session
18.07.18 17:21:01<daemoz> as well as audio record..
18.07.18 17:23:53<daemoz> https://kimgarst.com/step-by-step-how-to-record-google-hangouts
18.07.18 17:23:58<daemoz> Will this work?
18.07.18 17:27:27<koo5[m]> Can you ring me up on running.sun@gmail.com
18.07.18 17:29:37<daemoz> can you not hear me?
18.07.18 17:30:33<koo5[m]> No
18.07.18 17:34:22<daemoz> it keeps freezing for me. trying a different browser
18.07.18 18:05:15<HMCa> hangouts is terrible
18.07.18 21:15:46<koo5[m]> Was alright in the end
19.07.18 11:28:04<stoopkid> daemoz: was the video chat useful for you?
19.07.18 17:03:51<daemoz> stoopkid: it was useful for showing me how much I still need to learn xD
19.07.18 17:04:01<daemoz> It was actually useful though, glad to have been able to participate.
19.07.18 20:11:04*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-szciqgkjeilmpoul) left #autonomic-dev: Ping timeout: 256 seconds
19.07.18 20:49:58*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-tfmzbctitiyuwvzw, (unauthenticated): @koo5:matrix.org)
20.07.18 03:00:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yiuxswauzwdukexq) left #autonomic-dev: Quit: Connection closed for inactivity
20.07.18 05:42:59*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-tfmzbctitiyuwvzw) left #autonomic-dev: Remote host closed the connection
20.07.18 05:51:14*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-feeztmutzmuyzuje, (unauthenticated): @koo5:matrix.org)
20.07.18 06:08:54<koo5[m]> Ugh, i gotta be going to bed earlier
20.07.18 08:16:37*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cwmxkpwlbcwbdfac, stoopkid: stoopkid)
20.07.18 08:16:59<ditable-kooe>yo
20.07.18 09:10:40<ditable-kooe>how would gf be for teaching type theory?
20.07.18 09:11:02<ditable-kooe>because that should interest me
20.07.18 10:46:20*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cwmxkpwlbcwbdfac) left #autonomic-dev: Quit: Connection closed for inactivity
20.07.18 13:08:32*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jyswezbgugpoceqe, stoopkid: stoopkid)
20.07.18 17:16:35*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-feeztmutzmuyzuje) left #autonomic-dev: Ping timeout: 260 seconds
20.07.18 18:07:28*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-zrrfilejzmsgdmwj, (unauthenticated): @koo5:matrix.org)
20.07.18 23:28:27<stoopkid> HMCa: so the current plan is to just do the full skolemization, tolerate the fact that this breaks ep-checking, and then do a separate termination check like Agda/Idris/etc.. do
20.07.18 23:30:01<stoopkid> by full-skolemization, i mean to generate a constant node which is unique to the combination of "rule + bindings + variable"
20.07.18 23:30:51<stoopkid> it will work pretty much exactly the way Agda/Idris/etc.. do
20.07.18 23:35:16<stoopkid> we can't really interpret what you mean by "decision trees attached to the blank nodes", i truly have no idea how you intend that to work
20.07.18 23:46:25<stoopkid> on another topic, i'm thinking not all infinite loops are necessarily bad (in the sense of causing inconsistency)
20.07.18 23:46:46<stoopkid> codata kinda proves this sorta but not all the way
20.07.18 23:47:20<stoopkid> consider:
20.07.18 23:47:31<stoopkid> infinity : Nat
20.07.18 23:47:36<stoopkid> infinity = suc infinity
20.07.18 23:47:52<stoopkid> this leads to inconsistency
20.07.18 23:48:04<stoopkid> why?
20.07.18 23:48:39<stoopkid> not because of the infinite loop, but because this definition directly contradicts something else we can prove
20.07.18 23:49:15<stoopkid> probably easier to see it in the case of Lists
20.07.18 23:49:36<stoopkid> assume 'a : A'
20.07.18 23:49:43<stoopkid> bad : List  A
20.07.18 23:49:52<stoopkid> bad = (a :: bad)
20.07.18 23:50:37<stoopkid> we can prove "forall l : (List A), exists n : Nat, length(l) == n"
20.07.18 23:50:48<stoopkid> but for this particular list, "bad", we can prove that no such Nat exists
20.07.18 23:50:51<stoopkid> contradiction
20.07.18 23:51:12<stoopkid> so what we can see from this is that it's not the infinite-looping itself that causes inconsistency
20.07.18 23:51:58<stoopkid> it's rather that the infinite-looping allows for the construction of things that don't exist within any set whose rules enforce its objects to be finite
20.07.18 23:52:19<stoopkid> hence, codata
20.07.18 23:53:22<stoopkid> now we can talk about infinite structures constructed from infinite loops without breaking our consistency, because the rules for codata-types don't preclude the non-finiteness of their objects
20.07.18 23:54:57<stoopkid> otoh, such infinite-loops are still bad if we're in a dependently-typed language and want proof-checking to be a finite process
20.07.18 23:55:24<stoopkid> but that's really a totally separate matter from consistency
20.07.18 23:57:40<stoopkid> on yet another topic, nili's doing great with the material so far
20.07.18 23:58:34<stoopkid> she wrote several lambda calculus programs for me today, without much help
21.07.18 00:00:54<stoopkid> me and koo are sort of warming up to implementing existentials in the way i described, and then we'll have basically first-order Agda
21.07.18 00:03:02<stoopkid> on yet another topic, i finally see why we need SOL to implement dependently-typed natural deduction
21.07.18 00:03:45<stoopkid> elimination rule for Nat literally is the second-order induction principle in full Peano arithmetic
21.07.18 00:04:08<stoopkid> requires SOL to implement the induction principle for natural numbers
21.07.18 00:04:32<stoopkid> or at least, > FOL
21.07.18 00:07:46<stoopkid> but ultimately none of that is what i'm concerned with, atm
21.07.18 00:08:20<stoopkid> query: "zero suc ?a. ?a suc ?b. ?b suc ?b" should fail, but i don't see what is the mechanism for this
21.07.18 00:08:43<stoopkid> unless you claim it should succeed
21.07.18 00:58:50*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-182.dsl.bell.ca) left #autonomic-dev: Ping timeout: 268 seconds
21.07.18 01:03:42*** Join: Deadhand (~deadhand@kntaon1614w-lp130-02-70-50-212-119.dsl.bell.ca, (unauthenticated): deadhand)
21.07.18 01:14:46*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-02-70-50-212-119.dsl.bell.ca) left #autonomic-dev: Ping timeout: 264 seconds
21.07.18 01:19:43*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-56.dsl.bell.ca, (unauthenticated): deadhand)
21.07.18 01:48:49<HMCa> hrmmm
21.07.18 01:52:55<HMCa> we really should not do (and do not need to do) anything to unbound models.... you said yourself "broken" means inflooping, do we really want to choose to be broken by design?? heh
21.07.18 01:53:12<HMCa> and its not like these are the only two options anyway
21.07.18 01:56:05<HMCa> we could do, fo e.x., parsimony chase like dlv, or explicit proof term carry like dmiles' (etc's) stuff, or finite vector expansion like some smt solvers, or... there are a lot of approaches to this that don't throw the baby out with the bathwater. :-|
21.07.18 01:58:16<HMCa> you seem to be fixated on introducing function terms, and it is imo a sure recipe for disaster...
21.07.18 01:59:21<HMCa> k.i.s.s.
21.07.18 02:01:17<HMCa> all we need is just enough to establish homomorphism over bnodes, not more
21.07.18 02:03:33<HMCa> skolem functions are conceptually fine and make a good explanatory tool, but implementing them without breaking our reasoner's assertable constraints will certainly be a nightmare of complications - and your proposal of implementing them by dropping those constraints is... simply terrifying to me. ;-)
21.07.18 10:17:18<stoopkid> HMCa: ok?
21.07.18 10:18:06<stoopkid> plan stays the same unless you can present an alternative plan that anybody on this project besides yourself understands
21.07.18 16:32:14*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
21.07.18 16:32:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
22.07.18 10:11:23<koo5[m]> ¯_(ツ)_/¯
22.07.18 16:18:10*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jyswezbgugpoceqe) left #autonomic-dev: Quit: Connection closed for inactivity
22.07.18 17:38:10<HMCa> I'm sure that everyone is capable to understand datalog...
22.07.18 17:47:30<koo5[m]> Ill look into it
22.07.18 18:22:33<HMCa> so lets compromise... do skolemization but do it exactly like rdflog/sparqlog :-)
22.07.18 18:22:57<HMCa> (the decidable fragment, I mean)
22.07.18 19:10:50*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uwhsbomqkdbqnpek, stoopkid: stoopkid)
23.07.18 00:09:23*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uwhsbomqkdbqnpek) left #autonomic-dev: Quit: Connection closed for inactivity
23.07.18 09:53:30*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-56.dsl.bell.ca) left #autonomic-dev: Read error: Connection reset by peer
23.07.18 09:53:53*** Join: Deadhandd (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
23.07.18 11:33:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jhfkohgluidgkuux, stoopkid: stoopkid)
23.07.18 11:56:26<stoopkid> “It is not generally agreed upon what a the semantics of a rule based RDF query language should be if existential variables are allowed in the head.”
23.07.18 13:01:52<HMCa> hopefully you did not stop reading at that? XD
23.07.18 14:04:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jhfkohgluidgkuux) left #autonomic-dev: Quit: Connection closed for inactivity
23.07.18 14:56:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tlesoxeeelwcxqxi, stoopkid: stoopkid)
23.07.18 14:57:45<stoopkid> lol no, but that is about where i stopped understanding heh
23.07.18 17:52:55<HMCa> but that's also where the good stuff all starts!
23.07.18 17:52:57<HMCa> heh
23.07.18 20:29:20<koo5[m]> Lol
23.07.18 21:29:12*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
23.07.18 21:29:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.07.18 00:38:17<HMCa> maybe the sparqlog paper will be easier?  (only half joking, heh)
24.07.18 11:59:06<stoopkid> HMCa: RDFLog paper seems like it's implying that there can only be one existential variable in a rule-head?
24.07.18 11:59:46<stoopkid> "In addition we require that RDFLog rules are range restricted: if x ∈ Var (head )
                 <stoopkid> is universal or there is an existential y ∈ Var (head ) such that y is in the scope
                 <stoopkid> of x, then x ∈ Var (body)."
24.07.18 12:00:18<stoopkid> unless we allow branching quantifiers
24.07.18 12:01:02<stoopkid> this statement on range restriction asserts that if ?x is in the body and not in the head, then it is indeed an existential variable
24.07.18 12:01:29<stoopkid> however if there was any other existential in the head that was scoped under ?x then ?x would have to be in the body
24.07.18 14:53:25<HMCa> hrmmm, I think you're misinterpreting... it is not implying that at all
24.07.18 14:54:12<stoopkid> then i must be misinterpreting
24.07.18 15:01:11<stoopkid> anyway i'm almost done with the RDFLog paper and i'm not sure what i'm supposed to be making of it
24.07.18 15:01:32<stoopkid> nor what the "decidable fragment" of it is
24.07.18 15:13:59* stoopkid just working through the operational semantics section now
24.07.18 16:04:44<stoopkid> HMCa: yea idk, i guess i'll try the sparqlog paper
24.07.18 17:43:34<HMCa> what do you get stuck on?
24.07.18 17:43:48<HMCa> iow what of it do/don't you understand?
24.07.18 17:49:53<HMCa> stoopkid: btw have you looked at the chase algorithm yet?  (or, bonus points, the "datalog restricted" chase?)
24.07.18 17:50:23<HMCa> understanding that might help too, this is a similar process
24.07.18 18:00:45<stoopkid> HMCa: I haven’t looked at it yet
24.07.18 18:01:46<stoopkid> i dont feel im getting stuck on the paper itself i think im rather getting stuck on relating it back to what you’re talking about
24.07.18 18:03:47<stoopkid> got a link to a paper on this parsimony chase that describes the mechanism you’re after here?
24.07.18 18:04:33<HMCa> ok let's take a step back then
24.07.18 18:04:35<HMCa> forget rdf for a moment
24.07.18 18:04:37<HMCa> ok?
24.07.18 18:04:53<HMCa> let's talk prolog/datalog
24.07.18 18:05:17<HMCa> for a bit
24.07.18 18:05:21<HMCa> how far are you on understanding the prolog/datalog distinction?
24.07.18 18:09:24<stoopkid> datalog doesn't let you use complex terms as arguments to predicates
24.07.18 18:11:05<HMCa> well, that is an aspect... "one of the reasons for the distinction"...  but more generally?
24.07.18 18:11:31<stoopkid> that's all i really understand of the distinction so far
24.07.18 18:12:53<HMCa> ok, let's take another step back then, just for a sec
24.07.18 18:13:09<HMCa> and talk about prolog
24.07.18 18:13:18<HMCa> "programming logic"
24.07.18 18:13:33* HMCa puts his dmiles-esque hat on for a sec
24.07.18 18:13:35<HMCa> heh
24.07.18 18:14:45<HMCa> so prolog is a mix of declaative, imperative, and functional, yes?
24.07.18 18:15:14<HMCa> *declarative
24.07.18 18:15:53<HMCa> we have a declarative rules language with an imperqtive cut and complex (usually also reflective) terms
24.07.18 18:16:03<HMCa> *imperative
24.07.18 18:17:36<HMCa> (usually also imperative side effecting primitives thrown in too, for fun)
24.07.18 18:17:41<HMCa> with me so far?
24.07.18 18:18:20<stoopkid> yes, what is the functional part in what you're saying though? the complex terms?
24.07.18 18:18:38<HMCa> yes
24.07.18 18:20:49<HMCa> (complex terms imply functor compositions, hence "data structure" construction... heh)
24.07.18 18:20:56<HMCa> (we might come back to that)
24.07.18 18:20:57<stoopkid> and datalog just has the declarative part, no cut and no complex
24.07.18 18:21:10<HMCa> right
24.07.18 18:22:13<HMCa> ok, so we understand prolog, and at least part of datalog
24.07.18 18:22:50<HMCa> so let's talk about that other thing to know about datalog
24.07.18 18:24:00<HMCa> it happens to have query resolution that is strictly productive, and total, right? ;-)
24.07.18 18:24:35* stoopkid shrug
                 <stoopkid> maybe?
24.07.18 18:25:01<HMCa> ok, let's look at that
24.07.18 18:25:39<HMCa> which first, totality or productivity?
24.07.18 18:25:52<stoopkid> productivity
24.07.18 18:26:00<HMCa> totality seems easy... :-)
24.07.18 18:26:24<HMCa> ok, so let's try establish productivity
24.07.18 18:26:39<HMCa> let's start by considerig datalog without negationa
24.07.18 18:26:45<HMCa> *negations
24.07.18 18:27:45<HMCa> if we have only universals and no negation... we always have stable finite models, right?
24.07.18 18:28:16<HMCa> because we can just, like, start with the empty set as valid and then, like, add whatever to it still as valid
24.07.18 18:28:42<HMCa> follow so far?
24.07.18 18:28:51<stoopkid> "stable finite models" ?
24.07.18 18:29:30<stoopkid> and empty set of... formulas, i'm assuming?
24.07.18 18:30:00<HMCa> yes, solution models
24.07.18 18:30:46<stoopkid> "solution" models?
                 <HMCa> think of the naive forward chaining... it *always* finishes, yes?
24.07.18 18:31:05<HMCa> it can only ever be productive (add new facts) or be done.
24.07.18 18:31:14<stoopkid> idk, can it generate existentials?
24.07.18 18:31:34<HMCa> we're datalog without negation here, so... not at all
24.07.18 18:31:42<stoopkid> idk how negation relates to this
24.07.18 18:31:46<HMCa> 27 < HMCa> if we have only universals and no negation... we always have stable finite models, right?
24.07.18 18:32:12<HMCa> we'll get to negation in a sec
24.07.18 18:32:40<HMCa> first let's get to agreement that "pure datalog without negation" is terminating ;-)
24.07.18 18:33:17<stoopkid> idk, i still can't seem to place specific bounds on what datalog is
24.07.18 18:33:38<stoopkid> it's got no cut and no complex terms, but idk what are the bounds on what else it does and doesn't have
24.07.18 18:33:51<stoopkid> "pure datalog without negation" presumably also lacks negation, but then similar situation
24.07.18 18:34:11<stoopkid> all FOL statements with no complex terms?
24.07.18 18:34:47<HMCa> no
24.07.18 18:35:03<HMCa> is prolog "all fol"? ;-)
24.07.18 18:35:23<stoopkid> idk, i figured it probably was
24.07.18 18:35:55<stoopkid> but then i guess it has the findall/setof stuff which you say makes it second-order
24.07.18 18:36:11<stoopkid> but ok, all SOL statements with no complex terms? :)
24.07.18 18:36:18<HMCa> datalog is *only* conjunctive clauses
24.07.18 18:36:52<stoopkid> so it's just CNF?
24.07.18 18:37:02<HMCa> prolog is more general horn clause
24.07.18 18:37:24<HMCa> (with shenanigans, usually, but we'll get back to that)
24.07.18 18:37:58<HMCa> not quite "just cnf", it is also still horn
24.07.18 18:40:23<stoopkid> ok so datalog == "pure horn clauses"? 
24.07.18 18:41:58<stoopkid> so this is why it can't do existentials without negation? https://pastebin.com/kCUEnygG
24.07.18 18:43:05<HMCa> is related, yes
24.07.18 18:44:09<HMCa> in our datalog-without-negation we're pure horn clause, yes
24.07.18 18:44:59<HMCa> some datalogs-with-negation go outside of horn by allowing a negative in head, but that gets problematic as we'll hopefully see in a moment
24.07.18 18:45:58<HMCa> but for now, you see that datalog without negation is strictly positive?  productive and total?
24.07.18 18:46:39<stoopkid> positive as in "not negated"?
24.07.18 18:47:10<HMCa> strictly positive wrt recursion
24.07.18 18:47:40<HMCa> foeward-chain will only add new facts or terminate, every step
24.07.18 18:47:47<HMCa> *forward
24.07.18 18:48:12<HMCa> and will eventually run out of new facts to add
24.07.18 18:48:13<HMCa> and terminate
24.07.18 18:48:23<HMCa> (with never a contradiction found)
24.07.18 18:48:41<HMCa> follow?
24.07.18 18:49:12<stoopkid> well
24.07.18 18:49:46<stoopkid> let's say we have our N3 rules and don't allow variables to appear only in the head, and don't have the ability to generate existentials
24.07.18 18:50:13<stoopkid> (err... the bnodes that satisfy the existentials)
24.07.18 18:50:16<HMCa> we're ignoring rdf right now, but ok
24.07.18 18:50:55<HMCa> (might have to afk for a bit in about 45 min from now, btw)
24.07.18 18:52:36<stoopkid> well, i'm not sure i follow precisely but if it can't generate new symbols at all (let alone indefinitely) then it will eventually run out of new facts no matter what algorithm is used
24.07.18 18:52:59<stoopkid> well
24.07.18 18:53:11<stoopkid> unless it could keep adding facts of increasing arity
24.07.18 18:54:00<stoopkid> but it seems like it couldn't, because there are only the arities of the relation-symbols used in clause-heads available for generating the new facts
24.07.18 18:54:01<stoopkid> so
24.07.18 18:54:59<stoopkid> yes, no matter what algorithm is used to come up with new facts of a fixed number of different arities with a fixed and finite set of symbols it will eventually run out of new facts to come up with
24.07.18 18:56:13<HMCa> ok, so by asserting strict positivity we've limited recursion to productivity, yah?
24.07.18 18:57:12<stoopkid> not sure i understand the productivity conditions fully (part of why i wanted to address this one first)
24.07.18 18:58:08<HMCa> productivity just means "can be shown as producing some progress toward some finite goal"
24.07.18 18:58:14<HMCa> which... we just did?
24.07.18 18:58:58<stoopkid> ok, terminating and productive, and if we interpret this as a function taking an input & kb and producing a results-list then it's total (& computable)
24.07.18 18:59:14<HMCa> (well, really we know that the goal need not really be finite, only that progress be measurable, but that is beside the point for now, heh)
24.07.18 19:00:30<stoopkid> and in this case the goal just happens to be finite
24.07.18 19:00:58<HMCa> ok, so ready to move on to datalog w/ negation?
24.07.18 19:01:00<stoopkid> alright
24.07.18 19:01:44<HMCa> ok, so to start here we will keep to strictly positive horn clauses at first
24.07.18 19:02:19<HMCa> so we can have negations in body elements only
24.07.18 19:03:16<HMCa> this also is now trivially productive also, yes?
24.07.18 19:03:47<stoopkid> so every variable in the head of the clause must appear (non-negated) in the body of the clause?
24.07.18 19:04:23<stoopkid> wait hrm..
24.07.18 19:04:48<stoopkid> i'm looking at a description that's using variable propositions instead of variable objects..
24.07.18 19:05:00<stoopkid> ok nvm i read it wrong
24.07.18 19:05:30<stoopkid> so every variable in the head of the clause must appear in a non-negated atom in the body of the clause
24.07.18 19:06:28<HMCa> yes
24.07.18 19:06:39<stoopkid> i guess non-negated atom is redundant
24.07.18 19:06:50<HMCa> yes
24.07.18 19:07:17<HMCa> every var must be in a positive in the body
24.07.18 19:09:09<stoopkid> alright
24.07.18 19:09:18<stoopkid> https://en.wikipedia.org/wiki/Datalog#Features,_limitations_and_extensions
24.07.18 19:09:38<stoopkid> so that covers constraints 3 and 4 here, and we already covered constraint 1 about the cut operator and that stuff
24.07.18 19:09:44<HMCa> yup
24.07.18 19:10:10<stoopkid> err, constraint 1 about the complex terms, and also the constraint in the description about the cut operator and stuff
24.07.18 19:10:38<HMCa> right
24.07.18 19:10:42<stoopkid> and currently we're adding a further constraint that we have no negation in the head, only in the body
24.07.18 19:11:07<HMCa> so #2... doesn't apply to us yet, right?
24.07.18 19:11:42<stoopkid> because we've been total/productive at least up to this point?
24.07.18 19:12:18<HMCa> meaning until we can produce a negative fact, we remain strictly positive in the evaluation
24.07.18 19:13:03<HMCa> (and we can't have negative facts directly yet)
24.07.18 19:13:38<HMCa> (right now we're negations *only* in bodies, and facts are rules like "{}=>{a b c}.")
24.07.18 19:13:52<HMCa> follow so far?
24.07.18 19:14:21<HMCa> so we're still terminating up to now, yah?
24.07.18 19:15:11<stoopkid> hrm...
24.07.18 19:16:02<stoopkid> so if we can't have negative literals in a rule-head, and can't have negative facts, we can't ever satisfy a negative literal in a rule-body?
24.07.18 19:16:26<HMCa> no, we can
24.07.18 19:16:40<HMCa> remember this is all cwa, heh
24.07.18 19:17:09<stoopkid> oh hrm..
24.07.18 19:17:50<HMCa> to satisfy the negative we never have to look at any rule
24.07.18 19:17:59<HMCa> we just see if the fact is therr or not
24.07.18 19:18:11<HMCa> *there
24.07.18 19:18:27<stoopkid> hrm...
24.07.18 19:18:39<stoopkid> that's not negation that's log:not_includes
24.07.18 19:19:05<HMCa> with what we have so far they are the same thing ;-)
24.07.18 19:19:17<stoopkid> hrm..
24.07.18 19:19:43<HMCa> the negation of the fact can't be produced by any rule yet, or stated explicitly, so the questions become the same
24.07.18 19:20:44<HMCa> and if we introduce negated facts or negations in heads... or both... then we may have a problem
24.07.18 19:21:11<stoopkid> but what if the fact would be generated by the forward-chaining ?
24.07.18 19:23:13<HMCa> ah, maybe we do need stratification already? :-)
24.07.18 19:25:09<stoopkid> idk, maybe? :)
24.07.18 19:25:32<stoopkid> i'm not even sure what's being stratified, let alone how :)
24.07.18 19:25:57<HMCa> ok, then let's look at the worse case
24.07.18 19:26:17<HMCa> let's say we allow negations in facts/heads...
24.07.18 19:26:22<HMCa> just arbitrarily
24.07.18 19:27:01<HMCa> now we lose termination for sure, yes?
24.07.18 19:27:56<stoopkid> not sure, why?
24.07.18 19:29:19<stoopkid> can you give me an example of an inflooping case like that?
24.07.18 19:29:34<HMCa> well, let me rephrase...
24.07.18 19:30:17<HMCa> we lose "assumable productivity"... meaning it now *does* depend what our query resolution is...
24.07.18 19:31:01<HMCa> follow?
                 <stoopkid> can you give an example of a non-productive case?
24.07.18 19:31:38<HMCa> a naive backward chain over a pair of mutually contradictory rules, for example
24.07.18 19:32:12<stoopkid> like...
24.07.18 19:32:25<stoopkid> {~p} => {p}. {p} => {~p} ?
24.07.18 19:33:20<HMCa> well, I had in mind a pair that weren't also trivially self-contradictory, but sure
24.07.18 19:33:33* HMCa (gtr soon)
24.07.18 19:35:07<stoopkid> the ability to infloop when using backwards chaining here seems to be more about the use of recursion than about the use of negation
24.07.18 19:35:48<stoopkid> like we could have inflooped when backward chaining even in the case where all literals were positive whether as fact or rule-head or rule-body, assuming we could have recursive rules
24.07.18 19:38:24<HMCa> ok assume simplified rules, where any "self evident" rule ({... foo.}=>{foo.}) is removed
24.07.18 19:39:21<stoopkid> but this wouldn't be "self-evident" rules necessarily, cause it's not just "foo." it's {... ?x foo ?y} => {?y foo ?x}" or something, right?
24.07.18 19:40:40<HMCa> ^still finite in both directions though?
24.07.18 19:41:24<stoopkid> depends what backward chaining algorithm you use, if you use one that's really naive, like "doesn't even check for eps" naive, then it would infloop
24.07.18 19:42:40<HMCa> ok, so we *do* need stratification even earlier? :-)
24.07.18 19:42:58<stoopkid> we can only assume it doesn't infloop when using "some forward-chaining" algorithm because we can assume that it has some check to see whether the KB it generated from yet-another application of the rules is the same as the one it already had, and it must necessarily run out of new facts eventually
24.07.18 19:43:19<HMCa> let me ask that another way:
24.07.18 19:43:59<HMCa> how does stratification recover the productivity assertion in either case?
                 <HMCa> heh
24.07.18 19:44:26<HMCa> I gtr for a bit, I'll leave you to think on that...
24.07.18 19:45:03<HMCa> seems you're getting close to the a-ha moment :-)
24.07.18 19:45:28<stoopkid> idk i'm still unsure what the stratification even "is"
24.07.18 19:48:48<HMCa> the stratification is conparable to a restricted form of what you saw in the mso stuff with tree ranking
24.07.18 19:49:04<HMCa> establishing a poset of definitional order
24.07.18 19:49:07<HMCa> *comparable
24.07.18 21:11:08<stoopkid> HMCa: we're just gonna try a couple different versions and put them on IRC and let you break them :)
24.07.18 21:20:39<stoopkid> HMCa: so does the restriction that rule-heads only contain one triple come from the restriction to horn clauses?
24.07.18 23:39:36<stoopkid> alright i understand what the stratification "is", now i just need to understand *why* it is that..
24.07.18 23:43:06<stoopkid> the stratification they talk about is only for when you're using negation within a recursion, so, it ostensibly shouldn't have anything to do with our situation where we're not using negation at all ?
24.07.18 23:46:51<stoopkid> and afaict the stratification isn't even for preventing infloops during inferencing it's for constraining the semantic interpretation to be unique
25.07.18 06:56:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tlesoxeeelwcxqxi) left #autonomic-dev: Quit: Connection closed for inactivity
25.07.18 10:06:44*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mwnfmariracxlqmu, stoopkid: stoopkid)
25.07.18 12:16:22*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mwnfmariracxlqmu) left #autonomic-dev: Quit: Connection closed for inactivity
25.07.18 14:24:28*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-soviytyplrznxjsx, stoopkid: stoopkid)
25.07.18 14:47:12<HMCa> I'm not a fan of "just try a couple different"... we really should be using one of the established methods here, imo
25.07.18 14:48:42<HMCa> there is lots of prior art here, we shouldn't need to go inventing things
25.07.18 14:49:32<HMCa> wrt the stratification, it is both things (and they are related)
25.07.18 14:50:26<HMCa> it should not be too hard to see that the decidability can break down if the stratification is removed
25.07.18 16:16:57*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
25.07.18 16:17:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
25.07.18 19:23:30<stoopkid> HMCa: all the versions i would try are prior art
25.07.18 20:52:26*** Join: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net, sirdancealot: koo5)
25.07.18 23:19:27*** Quit: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net) left #autonomic-dev: Ping timeout: 240 seconds
25.07.18 23:30:27<HMCa> so aside from full skolemization (universality and all) what would "other versions" be?
26.07.18 01:30:15<stoopkid> HMCa: well for example each of your incremental datalogs
26.07.18 01:32:52<stoopkid> so that we can demonstrate where all of our requirements are coming from
26.07.18 01:53:38<HMCa> I thought you meant different ways of cutting on existentials
26.07.18 01:53:44<HMCa> heh
26.07.18 01:57:23<HMCa>  < stoopkid> and afaict the stratification isn't even for preventing infloops during
26.07.18 01:57:26<HMCa>              inferencing it's for constraining the semantic interpretation to be unique
26.07.18 01:57:35<HMCa> this made me chuckle :-)
26.07.18 02:02:45<HMCa> stoopkid: have you looked at chase algorithms much yet?
26.07.18 02:03:27<HMCa> you should check out "hex-programs with existential quantification" and the slide deck for it
26.07.18 02:03:56<HMCa> pay particular attention to how stratification comes up there
26.07.18 06:15:26<daemoz> I'll be out at a festival this weekend and then I'm moving so I'll be off for a week or so~
26.07.18 08:06:45*** Join: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net, sirdancealot: koo5)
26.07.18 09:21:57*** Quit: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net) left #autonomic-dev: Ping timeout: 240 seconds
26.07.18 10:00:46*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-soviytyplrznxjsx) left #autonomic-dev: Quit: Connection closed for inactivity
26.07.18 12:05:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-odvbhmrnntygwpma, stoopkid: stoopkid)
26.07.18 12:35:02*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
26.07.18 14:37:16*** Quit: koom (~sirdancea@98.233.253.142) left #autonomic-dev: Ping timeout: 244 seconds
26.07.18 15:12:59*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
26.07.18 15:49:15*** Quit: koom (~sirdancea@98.233.253.142) left #autonomic-dev: Ping timeout: 265 seconds
26.07.18 17:39:36<koo5[m]> o/
26.07.18 17:40:46<stoopkid> \o
26.07.18 17:54:51*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
26.07.18 22:10:39*** Join: nilli (812c356c@gateway/web/freenode/ip.129.44.53.108, (unauthenticated): 129.44.53.108 - http://webchat.freenode.net)
26.07.18 22:11:14<koom> there you go
26.07.18 22:23:19<nilli> yha but that was by clicking on the link
26.07.18 22:37:42*** Quit: nilli (812c356c@gateway/web/freenode/ip.129.44.53.108) left #autonomic-dev: Ping timeout: 252 seconds
27.07.18 05:43:28*** Quit: koom (~sirdancea@98.233.253.142) left #autonomic-dev: Ping timeout: 256 seconds
27.07.18 10:17:56*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
27.07.18 11:01:06*** Quit: koom (~sirdancea@98.233.253.142) left #autonomic-dev: Ping timeout: 240 seconds
27.07.18 11:08:38*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
27.07.18 11:41:56*** Connecting...

K
K
koom (IRC)
00:25
https://grakn.ai/
GRAKN.AI - The Knowledge Graph
 - GRAKN.AI
Grakn is a knowledge graph - a database to organise complex networks of data and make it queryable.
E
E
17:48
editable-koo (IRC) joined the room.

#autonomic-dev> 28.07.18 11:49:44*** Join: editable-koo (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 2 months 12 days 12 hours 45 minutes 12 seconds ago
                 *** Names: editable-koo stoopkid Deadhandd koo5[m] HMCa
                 *** End of /NAMES list.
29.07.18 06:50:45*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-odvbhmrnntygwpma) left #autonomic-dev: Quit: Connection closed for inactivity
#autonomic-dev> 29.07.18 11:07:39*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 2 months 13 days 12 hours 3 minutes 7 seconds ago
                 *** Names: editable-koo Deadhandd koo5[m] HMCa
                 *** End of /NAMES list.
29.07.18 11:11:44*** Join: ditable-kooe (~user@167.88.171.233, (unauthenticated): user)
29.07.18 11:11:54*** Quit: ditable-kooe (~user@167.88.171.233) left #autonomic-dev: Remote host closed the connection
#autonomic-dev> 29.07.18 11:17:44*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 2 months 13 days 12 hours 13 minutes 13 seconds ago
                 *** Names: editable-koo Deadhandd koo5[m] HMCa
                 *** End of /NAMES list.
#autonomic-dev> 29.07.18 11:18:39*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 2 months 13 days 12 hours 14 minutes 8 seconds ago
                 *** Names: editable-koo Deadhandd koo5[m] HMCa
                 *** End of /NAMES list.
#autonomic-dev> 29.07.18 11:29:14*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:36 2018, 2 months 13 days 12 hours 24 minutes 39 seconds ago
                 *** Names: editable-koo Deadhandd koo5[m] HMCa
                 *** End of /NAMES list.
#autonomic-dev> ba29.07.18 11:48:41*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
29.07.18 11:48:42*** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 2 months 13 days 12 hours 44 minutes 10 seconds ago
                 *** Names: editable-koo ditable-kooe Deadhandd koo5[m] HMCa
                 *** End of /NAMES list.
#autonomic-dev> 29.07.18 11:50:47*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 2 months 13 days 12 hours 46 minutes 15 seconds ago
                 *** Names: editable-koo ditable-kooe Deadhandd koo5[m] HMCa
                 *** End of /NAMES list.
29.07.18 11:55:20*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mjpwswiqqwrhhgpv, stoopkid: stoopkid)
29.07.18 12:43:00*** Quit: ditable-kooe (~user@167.88.171.233) left #autonomic-dev: Remote host closed the connection
29.07.18 12:43:22*** Join: ditable-kooe (~user@167.88.171.233, (unauthenticated): user)
29.07.18 12:43:30*** Quit: ditable-kooe (~user@167.88.171.233) left #autonomic-dev: Remote host closed the connection
29.07.18 12:44:12*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
29.07.18 12:44:26*** Join: ditable-koo-olde (~user@167.88.171.233, (unauthenticated): user)
29.07.18 12:45:07*** Quit: editable-koo-old (~user@167.88.171.233) left #autonomic-dev: Remote host closed the connection
                 *** Quit: ditable-koo-olde (~user@167.88.171.233) left #autonomic-dev: Remote host closed the connection
29.07.18 12:45:42*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
30.07.18 21:31:54<editable-koo>ttttt
31.07.18 13:57:05<stoopkid> editable-koo: i think i wanna focus on your LDL stuff for a bit and give our brains a chance to absorb / recover from the datalog & type theory stuff
31.07.18 17:32:21<HMCa> ldl?  just the mention of it gives me nightmare flashbacks... XD
31.07.18 17:33:02<HMCa> stoopkid: so you'll have to tell me what wizardyry I need to make your datalog2.agda typecheck
31.07.18 17:33:33<HMCa> it seems to somehow want the stdlib but also not want the stdlib? XD
31.07.18 17:35:39<stoopkid> the imports can be found in that same directory: http://167.88.171.233/workspace/AutoNomic/Agda/
31.07.18 17:36:53<stoopkid> sorry about the -tail stuff, emacs on that VPS was set to print out tails for the logger, i need to clean that up
31.07.18 17:38:21<stoopkid> alright no tails anymore
31.07.18 18:20:49<HMCa> cool, thanks
31.07.18 18:21:08<HMCa> I'll start to dig in
31.07.18 18:27:09<HMCa> yay, can typecheck now
31.07.18 18:48:50<HMCa> stoopkid: would be nice if you added a resolution loop to this, so we could easily play with some more complex examples (without chaining by hand...)
31.07.18 18:48:53<HMCa> heh
31.07.18 19:15:17*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
31.07.18 19:23:23<stoopkid> HMCa: i'll try to get around to it
31.07.18 19:23:52<stoopkid> what do you think is wrong with the idea of a language-definition-language?
31.07.18 21:37:17<koo5[m]> Yea
31.07.18 21:37:34<koo5[m]> Hey my brain's actually fine
31.07.18 21:37:50<koo5[m]> Still would love to focus on that with you
31.07.18 21:39:09<koo5[m]> But next few days ill probably be able to mostly just phone-chat
31.07.18 21:44:49<stoopkid> heh my brain is not
31.07.18 21:45:36<stoopkid> going alright, almost back on schedule with schoolwork
31.07.18 21:54:34<koo5[m]> Cool
31.07.18 22:18:13<koo5[m]> So..err..ldl...

31.07.18 22:27:25<koo5[m]> Ok so heres an idea for a manageable task/approach: lets figure out what it will take to build a new ldl+parser in prolog or univar. Lets figure out if we can do it with the constraint that ot will be just a simple declarative ldl and not a whole functional lang like gf
31.07.18 22:28:31<koo5[m]> While still being context sensitive enough to allow for the kind of recursive function call, etc, parsing that i described
31.07.18 22:36:28<stoopkid> do we actually need the context-sensitivity for that?
31.07.18 22:37:50<stoopkid> i'm not sure we do but i think we would have it available anyway from the way inferencing works
31.07.18 22:39:57<stoopkid> so, ofc, there's multiple distinct activities here: 1) defining one concrete syntax, like a BNF for a grammar; 2) relating a concrete syntax to other syntaxes, perhaps some common abstract syntax; 3) relating a grammar (abstract or concrete) to execution semantics; 4) modifying the LDL language itself from within itself
31.07.18 23:12:46<stoopkid> not sure if you missed it: is the recursive-call / usage of the for-loop-defined variable what's not expressible or is it the restrictions on where that variable can be used?
31.07.18 23:13:33<stoopkid> i.e. not being able to use an identifier prior to its declaration
31.07.18 23:21:30<stoopkid> e ::= x | λx.e | e0 e1
31.07.18 23:26:05<stoopkid> this expresses untyped lambda calculus, the lambda serves to introduce/declare identifiers, which can then be used in the function bodies, and ofc via the y-combinator (which is expressible in this syntax) we can represent things that are recursions
31.07.18 23:34:57<editable-koo-old> even the usage is not expressible
31.07.18 23:35:42*** Quit: editable-koo-old (~user@167.88.171.233) left #autonomic-dev: Remote host closed the connection
31.07.18 23:37:28*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
31.07.18 23:38:45<stoopkid> not sure what you mean, just make a generic non-terminal for identifiers and then you can use them anywhere, independent of context
31.07.18 23:39:00<koo5[m]> i mean, this is what i want for the cnl-ish (scripting) language, that there would be no catch-all "identifier" grammar
31.07.18 23:40:37<koo5[m]> so, err, actually, i dont care about being able to specify such functionality declaratively in ldl, it will be fine if the system lets me do this magically
31.07.18 23:41:32<koo5[m]> we might want to restrict the ldl to a cfg
31.07.18 23:41:38<stoopkid> i'm not sure what particular magic you have in mind
31.07.18 23:43:10<koo5[m]> if you dont have a catch-all identifier "terminal", then how do you parse a recursive call? the grammar has to change during the parsing
31.07.18 23:44:34<stoopkid> what is the constraint that's disallowing us from using one?
31.07.18 23:48:35<koo5[m]> in agda, whats the bnf for the catch-all identifier that will match with "if c then a else b = bla bla..."? There isnt any, its magically, context-sensitively enabled by a previous if_then_else : bla bla.." declaration
31.07.18 23:52:37<stoopkid> i would predict that agda would handle this in two stages, the first using a context-free grammar with a generic identifier non-terminal that would match with the "if c then a else b = bla bla.." and then does a second pass to link identifiers to their declarations & definitions
01.08.18 00:00:09<stoopkid> all it really needs to look for is space-separated terms
01.08.18 00:00:41<stoopkid> and then it can figure context-sensitive stuff out later
01.08.18 00:01:39<koo5[m]> makes sense
01.08.18 00:02:01<koo5[m]> i was going about it in a more general manner, just parse a piece and ignore the rest, update grammar, parse a piece,..
01.08.18 00:02:52<koo5[m]> at any case, theres no catch-all identifier grammar to parse the "if a then b else c" up front, and there is magic behind the scenes
01.08.18 00:04:05<HMCa> ah i thought you meant ldl as in the "logic-based data language"
01.08.18 00:04:27<koo5[m]> whats that?
01.08.18 00:05:23<HMCa> well, depending on how you look at it, either a broken prolog or a broken datalog... heh
01.08.18 00:06:36<HMCa> its prolog with efficient compilation but without explicit cut, or its datalog with sets but without termination
01.08.18 00:07:35<koo5[m]> nilli: https://riot.im/app/#/room/#freenode_#autonomic-dev:matrix.org
01.08.18 00:07:39<koo5[m]> https://riot.im/app/#/room/#autonomic:matrix.org
01.08.18 00:16:03<stoopkid> alright so, behind the scenes magic
01.08.18 00:18:10<stoopkid> seems basically what you want is to start with a "blank-slate" CFG and then have function identifier declarations be interpreted to add more production rules to the grammar and then continue parsing with the modified grammar (possibly at some point back-tracking to remove the rules, like when we exit the scope that the identifier is intended to exist in), like what you're doing currently in new_shit?
01.08.18 00:20:27<HMCa> did you guys ever look at that alan kay stuff?
01.08.18 00:20:41<HMCa> steps and frank, etc?
01.08.18 00:20:51<stoopkid> i did a bit yea, not much though
01.08.18 00:21:38<stoopkid> not enough to learn how to implement everything in the conceptual framework of parsers in practice anyway
01.08.18 00:27:22<stoopkid> koo5[m] once the user is doing this though, why not just have them give the production rules associated with their mixfix function declarations directly, rather than having them go through a special "def" thing or w/e that would just generate these same rules?
01.08.18 00:30:34<koo5[m]> so, i think we should add a link to the second logger to topics : http://loworbit.now.im/logs/
01.08.18 00:30:41<koo5[m]> i will try to keep them running in parallel for now
01.08.18 00:31:49<koo5[m]> HMCa: hmm, sounds fairly useful maybe
01.08.18 00:33:49<koo5[m]> stoopkid: yeah, i actually didnt make it this far in newshit, i had some scheme for it but it was pretty complex. but thats the idea. 
01.08.18 00:35:19*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
01.08.18 00:37:15<stoopkid> hey nilli
01.08.18 00:38:39<nilli> hey stoop we missed you today. but we will get you to Europe soon
                 <editable-koo-old> except in newshit it wasnt backtracking, rather its just that the grammar gets generated afresh for every point in the parsed text
01.08.18 00:39:28<stoopkid> hehe
01.08.18 00:39:51<stoopkid> so i guess if you do lambda calculus now in relation to autonomic and hang out in the dev channel then that makes you part of the dev team
01.08.18 00:41:30<HMCa> conscripted!
01.08.18 00:42:12<HMCa> koo5[m]: mostly it is just hard to reason about...
01.08.18 00:42:30<nilli> wow yes ... welll I will need to learn much more before I take a dev title
01.08.18 00:42:37<HMCa> which reminds me, I should get back to stoop's unifiers :-)
01.08.18 00:43:08<editable-koo-old> alan kay and steps? some projectional editing stuff?
01.08.18 00:43:21<editable-koo-old> ive definitely seen it once
01.08.18 00:43:28<HMCa> well, yes, but there is more
01.08.18 00:43:32<nilli> hey everyone is here
01.08.18 00:43:53<HMCa> i was referring specifically to their language bootstrap stuff
01.08.18 00:44:02<stoopkid> editable-koo-old: so you imagine this also working directly with an REPL where you can add more definitions/declarations like this?
01.08.18 00:44:21<HMCa> where they build tcpip stack as a grammar, etc
01.08.18 00:45:52<stoopkid> editable-koo-old: and then in case of ambiguity it will just ask the user to choose an interpretation?
01.08.18 00:47:09<editable-koo-old> stoopkid: why not just let them give the production rules...well, if we're talking let them give the production rules in the form of some high-level "define-syntax" command, then sure, we should try limiting it to this and see how it goes
01.08.18 00:47:26<editable-koo-old> stoopkid: with a repl definitely yeah
01.08.18 00:47:50<editable-koo-old> yeah just ask
01.08.18 00:47:59<stoopkid> i meant like providing the lines of BNF directly
01.08.18 00:48:33<stoopkid> and moving "def" out to a REPL command
01.08.18 00:48:43<editable-koo-old> i dont think i will get very far with that, but wwe should try it just to understand things better
01.08.18 00:49:25<editable-koo-old> well, i didnt think of the repl as being "out" somewhere
01.08.18 00:49:45<editable-koo-old> HMCa: will do
01.08.18 00:50:02<stoopkid> where do you think of it being?
01.08.18 00:50:14<editable-koo-old> i think the repl should just let you talk the language command by command
01.08.18 00:50:38<editable-koo-old> you dont want to have modes..
01.08.18 00:53:09<nilli> I learned today "pammayim nekudotaym "
01.08.18 00:54:04<editable-koo-old> dont worry, i wasnt really teaching her php...
01.08.18 00:55:18<stoopkid> makes sense, so what if we have a fixed part of the language like "def my-non-terminal: ... BNF production rules.... "
01.08.18 00:55:19<editable-koo-old> <? echo("honestly")?>
01.08.18 00:57:07<editable-koo-old> yeah, it would be a good start
01.08.18 00:58:11<stoopkid> alright so then before we really get into that, what about the semantics for how these programs evaluate
01.08.18 00:58:37<stoopkid> "i think the repl should just let you talk the language command by command"
01.08.18 00:58:40<stoopkid> let's elaborate on this
01.08.18 01:00:02<stoopkid> is the language necessarily written in terms of things that can just be considered as individual commands?
01.08.18 01:02:35<stoopkid> when i write some C++ or HTML or Agda or w/e, especially with an application of any significant size/complexity, the process doesn't seem like that at all, i'm composing a large structure of code as one simultaneous thing, like in a text editor rather than an REPL
01.08.18 01:03:34<HMCa> nilli: php is terrible. :-|
01.08.18 01:05:57<stoopkid> well, i guess there doesn't need to be two modes, i guess i was rather just imaging that sometimes the complexity of the commands you're intending to run get more complex than what you would want to write on a single command-line rather than with the luxury of a full text-editor
01.08.18 01:07:03<HMCa> i'm with koo on this one, somewhat randomly... heh
01.08.18 01:07:20<stoopkid> but i guess what you write in the text-editor can just be interpreted as commands that you could've hypothetically written out on the REPL line, and we could even blur the distinction by providing the REPL directly in the text-editor like what Agda's done
01.08.18 01:07:43<HMCa> I like smalltalk and redprl and such, in part specifically because of this paradigm
01.08.18 01:07:55<HMCa> heh
01.08.18 01:09:02<HMCa> kind of lays bare and "stays true" to the notion that programs are always all just an i/o relation
01.08.18 01:11:41* HMCa wonders if we can teach a neural-turing-machine to interpret such a self re-defining language....
01.08.18 01:11:45<nilli> Hmca just loved the name . its Hebrew and relay a funny excretion. don worry i will not learn that 
01.08.18 01:12:23<HMCa> nilli: also when we use "::" most of the time it will not mean what they use it as
01.08.18 01:12:53<HMCa> (unless we're talking about some c++ code)
01.08.18 01:15:16<stoopkid> so, if we're asking the user to just choose an interpretation when there's ambiguity, presumably these choices must be stored somewhere so that they can be communicated to direct others how to parse?
01.08.18 01:17:32<editable-koo>im gonna have to think on the whole repl thing more thoroughly...maybe when im on the plane
01.08.18 01:18:22<editable-koo>my idea wrt storing choices is that we might only need to parse once, and from then on, the plaintext only gets passed around accompanied by an ast
01.08.18 01:19:07<editable-koo>well, i guess not always, but still thats where this choice would be manifested
01.08.18 01:19:54<editable-koo>but i guess thats not gonna work without a projectional editor, which i would like to not drag into this at this point
01.08.18 01:20:30<editable-koo>at any case, it should be possible to disambiguate directly in the code
01.08.18 01:21:07<editable-koo>for example by writing out a full name instead of a shorthand, writing out full qualification, or adding an annotation
01.08.18 01:21:18<HMCa> https://www.coindesk.com/bitcoins-second-developer-returning-crypto/
01.08.18 01:22:05<HMCa> "a big vision for crypto"... yah right... ours must be mega-huge then... XD
01.08.18 01:23:13<HMCa> distributed and decentralized indexing, what a novel concept :-\
01.08.18 01:23:30<HMCa> wait, no, i've heard of that somewhere before.... ;-)
01.08.18 01:24:43<stoopkid> so basically we're piggybacking off an unambiguous language and only using an ambiguous language in the editor, and only up until we've specified our program/command unambiguously enough
01.08.18 01:24:50<stoopkid> editor/repl
01.08.18 01:25:25<editable-koo>not sure what you mean with only using in the editor
01.08.18 01:27:26<stoopkid> i mean the ambiguity in the grammar is only really available while you're writing the content, but it's unambiguous by the time you communicate it
01.08.18 01:28:16<editable-koo>mm yeah
01.08.18 01:28:33<editable-koo>it doesnt get beyond the parser
01.08.18 01:30:16<stoopkid> so basically we have some built-in syntax in the grammar that allows you to somehow annotate your script/command with the info that makes it parse unambiguously, but you aren't required to use this, you're free to use a more flexible but potentially ambiguous grammar, just as long as you don't actually have an ambiguity in your specific script?
01.08.18 01:30:36<editable-koo>yeah
01.08.18 01:31:02<stoopkid> sounds reasonable to me
01.08.18 01:31:57<editable-koo>this makes it sound like im somehow after ambiguity, but this just seemd as the right solution to be able to allow spaces in identifiers, shorthands, cnlish function names etc
01.08.18 01:32:24<editable-koo>ok
01.08.18 01:34:12<stoopkid> doesn't sound like you're after ambiguity really, actually quite the opposite apparently?
01.08.18 01:35:22<editable-koo>neutral, maybe
01.08.18 01:35:28<editable-koo>dunno
01.08.18 01:36:13<stoopkid> well, you might not be philosophically opposed to the ambiguity but for practical purposes it seems "it doesnt get beyond the parser" ?
01.08.18 01:36:30<editable-koo>yeah
01.08.18 01:41:05<stoopkid> i would actually rather characterize this as expanding the space of conveniently accessible unambiguous language in the system
01.08.18 01:41:36<koo5[m]> So, yeah, if youre with me in this, im gonna attempt an implementation either with our inferencer, or in prolog or something..
01.08.18 01:42:37<HMCa> freenode is not letting us /msg without auth again? XD
01.08.18 01:42:50<koo5[m]> Well, definitely in our inferencer, so that im not split between two things
01.08.18 01:42:52<HMCa> I can't msg nilli or stoop :-\
01.08.18 01:43:01<koo5[m]> Mmm
01.08.18 01:43:25<stoopkid> like if the grammar is ambiguous about the usage of dogs, it shouldn't necessarily have any effect on my unambiguous scripts about cats within the same grammar
01.08.18 01:44:15<koo5[m]> Yeah, ideally
01.08.18 01:44:32<stoopkid> it seems reasonable so far, still some other things to work out on the basic idea of it though
01.08.18 01:44:54<koo5[m]> Sure
01.08.18 01:45:08<HMCa> yah, cant msg koo either
01.08.18 01:45:36<HMCa> i'll have to look into that later
01.08.18 01:45:43<stoopkid> this is all fine so far for defining a syntax in a convenient/cnl-ish way, but how are you intending to attach semantics to the syntax?
01.08.18 01:47:08<koo5[m]> Stoop you arent on riot, right?
01.08.18 01:47:25<stoopkid> at the moment? no
01.08.18 01:48:01* koo5[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/yTaEZpdzTUXxPCBNVeTrwYOA >
01.08.18 01:48:48<koo5[m]> Maybe its just also irccloud
01.08.18 01:49:07<koo5[m]> Send something to editable log, ill check later
01.08.18 01:50:35<koo5[m]> stoopkid: with magic
01.08.18 01:50:45<koo5[m]> Built in
01.08.18 01:51:42<koo5[m]> This part of new shit works well i think
01.08.18 01:52:14<stoopkid> what's the magic though
01.08.18 01:52:19<koo5[m]> Later, when you have one usable language to do stuff in, you can use it to process other stuff
01.08.18 01:53:37<koo5[m]> Well, there is some parse-time magic, and the you have an ast, and you give it to an interpreter...i guess calling an interpreter "magic" isnt right
01.08.18 01:53:50<koo5[m]> Then*
01.08.18 01:53:54<HMCa> !- Irssi: Starting query in freenode with editable-koo
                 <HMCa> HMCa> test
01.08.18 01:53:55<HMCa> !- [orwell.freenode.net] editable-koo You must log in with services to message this user
01.08.18 01:54:02<HMCa> same
01.08.18 01:54:24<koo5[m]> Ok, its not irccloud or riot then
01.08.18 01:54:37<HMCa> nope, is the network itself
01.08.18 01:54:54<stoopkid> koo5[m]: i'm not sure what you mean, the parser automatically figures out the semantics of your language from the grammar?
01.08.18 01:55:35<koo5[m]> No, parser just produces an ast
01.08.18 01:55:49<koo5[m]> And an iterpreter just interprets
01.08.18 01:56:58<stoopkid> but where is it getting the interpretation of some new syntax i've just defined in it?
01.08.18 01:57:43<koo5[m]> When you want to "attach semantics", i suppose you are talking from the point of view of a program in that interpreted language looking at some other ast..
01.08.18 01:58:55<stoopkid> well, i mean like when you strings like "(5 + 2) * 3" and you attach to them meanings like "three multiplied by the result of five added to two"
01.08.18 01:59:45<koo5[m]> Either its built in, or it must be defined within the lang somehow, for example by writing another interpreter in it
01.08.18 02:03:34<stoopkid> hrm... so why only these options
01.08.18 02:03:50<koo5[m]> Lets continue tomorrow?
01.08.18 02:04:15<stoopkid> sounds good
01.08.18 02:07:03<stoopkid> so, ofc we would need built-in language & functionality to piggyback semantics off of, but, requiring the programmer to actually use this language directly in their scripts or actually build a whole other interpreter within a language they already wrote in the LDL seems a bit limiting, especially for something called an LDL
01.08.18 02:10:04<koo5[m]> Yeah, we're gonna want some way to specify semantics of sub-languages in the builtin language, but i think i dont have a clear picture of that

01.08.18 02:15:25<stoopkid> in the context of Agda for example the picture is "straight-forward" on this side of it, the AST structure is given by some "data" declaration, and then your semantic interpretation is a mapping from the AST into some arbitrary other structure
01.08.18 02:17:43<stoopkid> (in Agda those other structures can include things like functions and dependent functions and complex constraints, and etc.. so.. it's really quite all-encompassing when it comes to *describing* the semantic interpretation, even if it won't natively run your inflooping stuff without going outside the logic with `run`builtins and stuff)
01.08.18 02:20:12<stoopkid> this is also basically the definition of an "interpretation of some syntax" as used by the academic people, just any function that maps strings in that language to things (often with a constraint that there's some kind of homomorphism in structure, but... not really required either, although Agda will basically force this to be the case by the way it makes you define your functions in terms of the structural
                 <stoopkid> recursions)
01.08.18 02:21:58<stoopkid> which also afaict just seems to be the definition of "interpretations of syntax" in general, i.e. the common meaning of it
01.08.18 02:22:52<stoopkid> so, one way to handle this would be to just do exactly what Agda would do here
01.08.18 02:25:02<stoopkid> make the ASTs into data declarations, and define semantics by functions AST -> MyWorld by pattern-matching over the structure of the AST
01.08.18 02:25:28<stoopkid> (err.. make them into the types that we get from data declarations**)
01.08.18 02:27:42<stoopkid> "MyWorld" is just some other structure definable in the built-in language, whatever it is that you want to interpret your ASTs into
01.08.18 02:28:51<stoopkid> for my "(5 + 2) * 3" example, i'd maybe interpret these strings directly into some built-in uint64_t data-type
01.08.18 02:30:52<stoopkid> if i defined HTTP headers i might interpret them into some structs, and if i define Python i'd be interpreting them into execution in some execution environment
01.08.18 02:40:11<editable-koo>yeah, this sounds good
01.08.18 02:43:09<stoopkid> this could potentially be fairly clean if our semantic interpretation is firstly just mapping AST structures into other AST structures (basically like what Agda does) and then trees that use some fixed built-in grammar could be executed as a separate stage
01.08.18 02:50:14<stoopkid> also independently of being able to map their user-defined syntaxes into built-in semantics, there are also gonna be times when they want to map their user-defined syntaxes into something else's built-in semantics
01.08.18 02:51:34<stoopkid> like, a DSL for programming some embedded device, in a user-defined syntax other than the language of the embedded device itself
01.08.18 02:55:58<stoopkid> so in the context of Agda, this would be: you have some data declarations that give the ASTs of your DSL, you have some other data declarations that give the ASTs of the machine code or assembly code of your embedded device, and you have some mapping between them, all living inside Agda, and then the assembly code gets executed as a separate stage of actually sending it to the machine and linking and loading it
01.08.18 02:56:14<stoopkid> i.e. outside of Agda
01.08.18 02:58:53<stoopkid> in our context, it would be basically just the same thing except we'd make a special modified version of the data declarations that are restricted to a particular form of inductive type that we could automatically generate parsers from
01.08.18 03:02:32<stoopkid> so, we can use that as a rough template of what we're going for and then see how we can tweak it for better usability
01.08.18 03:05:49<editable-koo>ok yeah
01.08.18 05:29:12*** Quit: editable-koo-old (~user@167.88.171.233) left #autonomic-dev: Read error: Connection reset by peer
01.08.18 05:29:21*** Join: ditable-koo-olde (~user@167.88.171.233, (unauthenticated): user)
01.08.18 09:09:15*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #autonomic-dev: Ping timeout: 252 seconds
01.08.18 13:51:25<stoopkid> hrm, memcpy'ing from a byte array into a struct is a convenient way to parse
01.08.18 13:52:35<stoopkid> actually just typecasting, not even memcpy
01.08.18 13:54:49<stoopkid> so apparently we can finitize our infinite collection of natural deduction rules by introducing two new type-constructors, mu and nu, which correspond to data's and codata's
01.08.18 13:55:18<stoopkid> https://perso.ens-lyon.fr/henning.basold/thesis/Thesis.pdf page  40
01.08.18 13:57:50<stoopkid> so Nat is "mu X . 1 + X", binary-trees are like "mu X . 1 + X*X", List A's are like "mu X. 1 + A*X"
01.08.18 14:07:42<stoopkid> i think there's a typo there on page 40
01.08.18 14:08:25<stoopkid> it should be "t : A[B/X]" not "t : [B/X]" in the nu-I rule
01.08.18 14:28:43<stoopkid> hrm.. i think this is the first time i've really seen the motivation for the connection to category theory, everything up to now mostly just seemed like basically random coincidence but this kind of solidifies a non-trivial connection between the things
01.08.18 14:30:49<koo5[m]> Hmm link doesnt work for me
01.08.18 14:37:08<stoopkid> http://167.88.171.233/private/do_not_open/autonomic_private/Thesis.pdf
01.08.18 14:47:20<koo5[m]> Thanks
01.08.18 15:10:52<HMCa> "non-trivial" is sort of a hilarious understatement...
01.08.18 16:32:54<koo5[m]> Its a whole fucking book
01.08.18 16:37:31<stoopkid> i meant trivial connection in the sense of being artificially constructed to be the same thing
01.08.18 16:40:58<stoopkid> here the non-trivial connection is that once we've "artificially" constructed the connection between sums, products and exponentials (implications), then all the stuff with the mu & nu fixed-point-types comes as a consequence
02.08.18 06:21:13<koo5[m]> well, it sounds interesting...
02.08.18 14:44:33<editable-koo>server.update("""
                 <editable-koo>PREFIX dc: <http://purl.org/dc/elements/1.1/>
                 <editable-koo>PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
                 <editable-koo>PREFIX kbdbg: <http://kbd.bg/#> 
                 <editable-koo>PREFIX : <file:///#> 
                 <editable-koo>INSERT 
                 <editable-koo>{
                 <editable-koo>Graph :step1
                 <editable-koo>{ 
                 <editable-koo>:Tolkien :wrote :LordOfTheRings. 
                 <editable-koo>}.
                 <editable-koo>Graph :step2
                 <editable-koo>{ 
                 <editable-koo>:LordOfTheRings :is :boring. 
                 <editable-koo>}.
                 <editable-koo>Graph :step3
                 <editable-koo>{ 
                 <editable-koo>:LordOfTheRings :is :exciting. 
                 <editable-koo>}.
                 <editable-koo>} WHERE {}
                 <editable-koo>""")
                 <editable-koo>result = server.query("""
                 <editable-koo>PREFIX dc: <http://purl.org/dc/elements/1.1/>
                 <editable-koo>PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                 <editable-koo>PREFIX kbdbg: <http://kbd.bg/#>
                 <editable-koo>PREFIX : <file:///#>
                 <editable-koo>SELECT * 
                 <editable-koo>FROM :step1
                 <editable-koo>FROM :step2
                 <editable-koo>WHERE
                 <editable-koo>{
                 <editable-koo>:Tolkien :wrote ?what. ?what :is ?rating.
                 <editable-koo>}
02.08.18 15:02:45<editable-koo>""")
02.08.18 15:03:16<editable-koo>so, maybe we can use graphs for talking about edges, after all
02.08.18 15:17:56<editable-koo>but you cant do SELECT * 
                 <editable-koo>FROM ?result
                 <editable-koo>WHERE
                 <editable-koo>{
                 <editable-koo>?result rdf:a :result. :Tolkien :wrote ?what. ?what :is ?rating.
                 <editable-koo>}
02.08.18 15:18:53<editable-koo>maybe some other form will work
03.08.18 00:28:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Quit: WeeChat 2.1
03.08.18 12:44:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mjpwswiqqwrhhgpv) left #autonomic-dev: Quit: Connection closed for inactivity
03.08.18 14:16:48*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-afthiulopeuhitxk, stoopkid: stoopkid)
04.08.18 00:59:23<stoopkid> koo5[m]: so after you went back to ny it was the first time in a while that i felt like id really accomplished anything so i took some time to myself for a bit
04.08.18 01:01:31<stoopkid> what i learned is that im extremely depressed and am using weed to distract myself from it and using this project as an excuse for why im not working on myself
04.08.18 01:03:25<stoopkid> i found out that not everybody’s internal monologue is just a constant stream of self-hate
04.08.18 01:04:08<stoopkid> so i think im gonna take some time to deal with that, catch ya later
04.08.18 01:05:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-afthiulopeuhitxk) left #autonomic-dev: 
04.08.18 03:31:20<HMCa> we are warriors if we survive this
04.08.18 06:37:38*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
04.08.18 07:26:10*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #autonomic-dev: Ping timeout: 252 seconds
04.08.18 13:43:56*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
04.08.18 13:44:22*** Quit: ditable-koo-olde (~user@167.88.171.233) left #autonomic-dev: Read error: Connection reset by peer
05.08.18 21:45:58*** Join: issablues (4dafb412@gateway/web/freenode/ip.77.175.180.18, (unauthenticated): 4dafb412.ftth.telfortglasvezel.nl/77.175.180.18)
05.08.18 21:46:35<issablues> hello
05.08.18 21:47:46<issablues> is this project on going?
05.08.18 22:05:14*** Quit: issablues (4dafb412@gateway/web/freenode/ip.77.175.180.18) left #autonomic-dev: Quit: Page closed
05.08.18 23:18:08<HMCa> yes
06.08.18 12:20:45*** Nick change: Deadhandd (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) is now known as Deadhand
06.08.18 14:25:32<editable-koo>hey stoop, hmm
06.08.18 14:26:33<editable-koo>we've made great progress indeed, appreciate all your agda stuff
06.08.18 14:29:39<editable-koo>it feels like i might be able to go on without you for a few months, after we've worked out so many things
06.08.18 14:31:24<editable-koo>on autonomic or the other stuff
06.08.18 14:31:30<editable-koo>i hope youll be back in a few months
06.08.18 14:33:07<editable-koo>you didnt seem depressed, so this is surprising
06.08.18 14:35:51<editable-koo>maybe a part of this is that i managed to persuade you that you really can have a nice job 
06.08.18 14:38:53<editable-koo>hope you have a good time for yourself
06.08.18 14:39:02<editable-koo>say hi to your gf and to babi
06.08.18 16:20:45*** Join: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9, (unauthenticated): 77.127.34.9 - http://webchat.freenode.net)
06.08.18 16:24:45<editable-koo>thumbs up
06.08.18 16:36:42<nilli> so koo can you help me start the agda exercise? 
06.08.18 16:41:39<nilli> first of all : "If you open bool.agda in EMACS, you should see text that starts out like this:.... " I dont get anything when I open a new file bool.agda   
06.08.18 16:46:17<nilli> so I typed, module bool where ,  which seems all right but then tried the second line  ,open import level,  and was told by agda "what the fuck is levle" 
06.08.18 16:47:17<nilli> well in what agda think is more polite way : C:\Users\Nili\Desktop\bool.agda:3,13-18 Failed to find source of module level in any of the following locations:   C:\Users\Nili\Desktop\level.agda   C:\Users\Nili\Desktop\level.lagda   C:\Program Files\Haskell\x86_64-windows-ghc-8.0.2\Agda-2.5.2\lib\prim\level.agda   C:\Program Files\Haskell\x86_64-windows-ghc-8.0.2\Agda-2.5.2\lib\prim\level.lagda when scope checking the declaration   
06.08.18 16:49:10<nilli> anyway I have no clue what I need to do in order to even start
06.08.18 16:51:22<nilli> talking about getting depressed... if anything its talking to a machine... or try to follow instructions by people who only know to talk with a machines. 
06.08.18 16:52:35<editable-koo>youre probably right
06.08.18 16:53:08<editable-koo>i keep having my shares of rage-fits about this
06.08.18 16:53:19<editable-koo>as mh
06.08.18 16:53:28<editable-koo>as hmc says, this too is why we build tau
06.08.18 16:53:34<editable-koo>and why i build 
06.08.18 16:53:40<editable-koo>why i build my stuff
06.08.18 16:54:03<editable-koo>alright, you need to download the iowa standard library, theres the bool.agda file
06.08.18 16:55:26<nilli> but in the book he is talking about the emac as if all is there 
06.08.18 16:55:50<editable-koo>no, emacs is like Word
06.08.18 16:55:53<nilli> like we dont need to iowa standard library'
06.08.18 17:04:30<nilli> .... in word you just start working you dont download files with words you are going to use...any way im looking at the instruction closely again
06.08.18 17:05:13<editable-koo-old> maybe you donwload some pictures to insert
06.08.18 17:05:32<editable-koo-old> or fonts
06.08.18 17:06:12<nilli> I dont I just start working
06.08.18 17:07:04<nilli> much much later I would maybe use a font I dont have there as a choice allready
06.08.18 17:07:49<editable-koo-old> oh well, we broke the analogy i guess:)
06.08.18 17:07:52<nilli> only if I am working for someone who tell me to go somewhere to dounload it 
06.08.18 17:09:19<nilli> I mean as a reasonable person I start by trying to do the first exercise and read : If you open bool.agda in EMACS, you should see text that starts out like this:
06.08.18 17:10:17<nilli> instad of saying.. you will need to open.. and for that you need first to... here and there... 
06.08.18 17:13:13<nilli> ok so I see above that it tells me ; The Agda code displayed below can be found in bool.agda in the Iowa Agda Library (IAL; see the preface for the URL for this) 
06.08.18 17:13:38<nilli> so now im going to search for that url 
06.08.18 17:14:50<nilli> You can obtain version 1.2 of the IAL, on which this book is based, via subversion (or browse it with a Web browser) here: http://svn.divms.uiowa.edu/repos/clc/projects/agda/ial-releases/1.2
06.08.18 17:18:49<nilli> ok I see the list and open it great.... now its on my computer but how can i download it?
06.08.18 17:19:55<nilli> let me see the instructions on the book. I bet you that I will not be able to do it.
06.08.18 17:20:54<nilli> If you access this via subversion, use username “guest” and password “guest”. This library currently has a completely flat structure, so all files mentioned in the chapters to come can be found in that directory.
06.08.18 17:21:33<nilli> ok I have no clue what to do here
06.08.18 17:23:27<nilli> I just got as far as clicking on bool.agda  and get the right page but not on emac
06.08.18 17:27:28<nilli> anyway im not a computer student and this book is made for these.... but you see why i need someone to walk me through that basic shit
06.08.18 17:31:56<nilli> if anything that sort of things can make me feel that at least i need work on myself, which makes me really depressed right away
06.08.18 17:33:04<nilli> since I worked on it so much already.  
06.08.18 17:34:07<nilli> and by now I should have someone else work on that for me 
06.08.18 17:36:25<nilli> bottom line explain me how to download bool.agda on to whatever so I can work with it on emac
06.08.18 17:40:30<editable-koo-old> when youre on the file in your browser, go to file menu and select download
                 <editable-koo-old> or just press ctrl+s
                 <editable-koo-old> make a new folder for it somewhere, save it there
                 <editable-koo-old> then open it in emacs
06.08.18 18:07:53<nilli> after I open the bool.agda? or from the list itself ?
06.08.18 18:09:19<editable-koo-old> not from the list
06.08.18 18:11:41<nilli> where is file menu in my browser?  
06.08.18 18:14:56<editable-koo-old> at the top
06.08.18 18:17:53<editable-koo-old> well, good night
06.08.18 18:18:10<editable-koo-old> maybe we can also do a voice call tomorrow
06.08.18 18:21:32<editable-koo-old> but it has to be earlier than this hour, everybody's sleeping here now
                 <editable-koo-old> gn
06.08.18 18:21:38<nilli> yes lets do it live this way with video so you can see what I see :) 
06.08.18 18:22:10<nilli> can I call you now for a moment? this drive me crazy
06.08.18 18:27:45<nilli> ok it say save page .... on the menu 
06.08.18 19:05:01<nilli> i download it but how I get it to open on emacs ....just so you realize how nontrivial all that is and I tried now for an hour....what a waste of time
06.08.18 19:06:37<nilli> that is why I get allergy when I need to make anything work by following some instructions !!!!
06.08.18 23:30:18<HMCa> section 4.8 of the agda user's manual covers using libraries
06.08.18 23:30:33<HMCa> I had to look it up to see how it was on windows
06.08.18 23:31:14<HMCa> i always just install agda and its' stdlib with system package managers, and it "just works" but...
06.08.18 23:31:37<HMCa> I do seem to be the only person I know who never runs into install troubles
06.08.18 23:35:08*** Quit: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9) left #autonomic-dev: Ping timeout: 252 seconds
07.08.18 02:04:09<koo5[m]> https://www.reddit.com/r/ProgrammerHumor/comments/9578gj/github_pull_request_denied/?utm_source=reddit-android
07.08.18 02:09:41<HMCa> cute
07.08.18 02:10:31<HMCa> I've been on either side of that, many times ;-)
07.08.18 02:14:49<HMCa> koo5[m]: so with stoopkid afk for a bit I guess you get a turn with my rants again?
07.08.18 02:14:55<HMCa> heh
07.08.18 02:15:20<editable-koo>i guess
07.08.18 02:15:32<HMCa> did you get a chance to look at that alan kay stuff?
07.08.18 02:15:54<HMCa> 'frank' and the ascii art tcp/ip stack and such?
07.08.18 02:15:58<editable-koo>not yet
07.08.18 02:16:12<HMCa> you really should, imo
07.08.18 02:16:37<editable-koo>its the "whole os in 1000 lines" or something like that, right?
07.08.18 02:16:46<HMCa> yah
07.08.18 02:17:09<editable-koo>yeah i will try
07.08.18 02:18:09<HMCa> I think a lot of their work is interesting, but esp the tcp stack example, wrt some of what I see you seek for
07.08.18 02:22:45<HMCa> also probably their typesetting thing
07.08.18 02:23:51<HMCa> there was some interesting ancillary stuff done around their work too, like. do you know the mccarthy "planner" concept?
07.08.18 02:24:55<HMCa> someone implemented a planner reasoner as an instance of a language in their self-modifying language thing
07.08.18 02:25:35<HMCa> kinda proving the point wrt that whole "all computing is parse problems" thing
07.08.18 02:25:38<HMCa> heh
07.08.18 02:26:50<editable-koo>nope
07.08.18 02:38:52<HMCa> http://www.vpri.org/pdf/rn2008003_john.pdf
07.08.18 03:19:40*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
07.08.18 03:32:26<nilli> koo I think that the log go to sleep with you
07.08.18 03:33:17<nilli> HMCa [06:29] <HMCa> section 4.8 of the agda user's manual covers using libraries
07.08.18 03:34:22<nilli> not relevant for someone who just want to do the first ever exercise from the book
07.08.18 03:36:14<nilli> its like being in kindergarten trying to learn the alphabet on your own and given a book of instructions on how to learn to read.
07.08.18 03:39:28<nilli> I need the guide on tv without heaving to search it on the tv guide.  (well I guess youtube too be relevant but the word game work better in the old fashion tv concept)  
07.08.18 03:40:36<HMCa> the book assumes that you don't have only half of an install of the language
07.08.18 03:41:52<editable-koo>nilli, you can call me in 3 minutes
07.08.18 03:42:13<nilli> ok koo i will. 
07.08.18 03:44:18<HMCa> https://github.com/williamdemeo.ial click "clone or download" and "download zip"
07.08.18 03:44:29<HMCa> err
07.08.18 03:44:37<HMCa> https://github.com/williamdemeo/ial click "clone or download" and "download zip"
07.08.18 03:47:46<editable-koo>good find
07.08.18 03:47:49<HMCa> open that zip and putthe contents of the 1.2 directory in the path it wants from the docs
07.08.18 03:48:35<editable-koo>i think it will be happy with anywhere, as long as she's just playing with the existing files in that directory or saving her files there
07.08.18 03:49:12<editable-koo>installing a library in agda is a hassle
07.08.18 03:55:37<nilli> ok I have it on my computer and open 1.2 directory. "what do you mean by put the 1,2 directory in the path it wants.. who want what? 
07.08.18 03:56:05<editable-koo>nilli, ignore that part
07.08.18 03:57:12<editable-koo>also, what do you mean that the log go to sleep with me? both loggers seem to be working
07.08.18 03:58:55<editable-koo>sorry
07.08.18 04:08:29<HMCa> nilli: in the path specified in the user guide
07.08.18 04:08:43<HMCa> is where I wuld put it
07.08.18 04:13:34<nilli> hmc got it on emacs (with koo on video call )
07.08.18 04:13:53<nilli> now I get that massage : C:\1.2\bool.agda:21,1-40 Multiple Haskell bindings for bool.𝔹. Note that builtin numbers, booleans, chars and strings don't need COMPILED pragmas. when checking the pragma COMPILED_DATA 𝔹 Bool True False
07.08.18 04:19:01<editable-koo>nilli can you go to emacs, click on Agda menu, click on Version, and tell us what it says?
07.08.18 04:24:45<nilli> Agda version 2.5.2
07.08.18 04:27:21<HMCa> maybe that older stdlib doesn't work with newer agda or something?
07.08.18 04:27:50<HMCa> so maybe an older agda or newer stdlib is needed
07.08.18 04:28:04<editable-koo>it happens, nilli you can try to find what they have to say about agda version in the book
07.08.18 04:28:55<nilli> ok I do that then.
07.08.18 04:30:29<nilli> You can obtain version 1.2 of the IAL, on which this book is based, via subversion (or browse it with a Web browser) here: http://svn.divms.uiowa.edu/repos/clc/projects/agda/ial-releases/1.2
07.08.18 04:32:09<nilli> but the emec that I got on my computer is what stoopkid put there and have nothing to do with the book
07.08.18 04:32:39<nilli> the version is not working on it
07.08.18 04:32:59<nilli> I did not try any of the book exercise yet
07.08.18 04:33:09<nilli> I did not try any of the book exercise yet
07.08.18 04:35:02<editable-koo>emacs is a distinct thing from agda, each have their own versions, and you dont need to care about emacs version
07.08.18 04:35:06<editable-koo>generally
07.08.18 04:35:27<editable-koo>you need to work out the agda version
07.08.18 04:36:34<nilli> just clicked on the file that open the emacs window with the bool file and one i did control c,l 
07.08.18 04:38:49<nilli> by the way now I have "compile" instad of "agda" on the menu 
07.08.18 04:39:20<editable-koo>hmm
07.08.18 04:39:35<HMCa> try just removing the "COMPILED_DATA" from bool.agda?
07.08.18 04:40:21* HMCa gtr
07.08.18 04:40:26<editable-koo>you should probably take a break now and try again later and reread our conversation
07.08.18 04:40:36<editable-koo>im gonna have to go afk 
07.08.18 04:40:37<nilli> {-# COMPILED_DATA 𝔹 Bool True False #-}
07.08.18 04:40:41<editable-koo>dont give up
07.08.18 04:40:46<editable-koo>:)
07.08.18 04:40:57<nilli> that HMC a its just a comment
07.08.18 04:41:30<nilli> ok koo not giving up as long as I get you guys on my side :)
07.08.18 04:41:54<nilli> against the world :)
07.08.18 04:42:39<HMCa> it is a special comment
07.08.18 04:42:43<HMCa> try delete it
07.08.18 04:42:56<HMCa> see if it makes a difference
07.08.18 04:43:32<nilli> omg it did it
07.08.18 04:44:15<nilli> ok ready for my first exercise  
07.08.18 04:49:15<nilli> ok I did that which might be wrong tt && (ff xor ~ ff) : 𝔹 → 𝔹 → 𝔹 but the eror  massage is confusing for me it say that: C:\1.2\bool.agda:84,1-1 C:\1.2\bool.agda:84,1: Illegal name in type signature: (ff xor ~ ff)
07.08.18 04:50:30<nilli> is that a version thing or just me not  doing it right
07.08.18 04:55:05<nilli> i guess i would need to read the chapter again anyway to see but I want to know how to write it for the exercise is that the right way ? tt && (ff xor ~ ff) :
07.08.18 04:56:30<HMCa> it wants you to evaluate it as an expression - sec 1.2
07.08.18 04:56:48<HMCa> repl style
07.08.18 04:56:53<HMCa> but anyway
07.08.18 04:57:03<HMCa> now i really gtr
07.08.18 04:57:06* HMCa afk
07.08.18 05:03:28<nilli> ok will try again later today, koo I hope you can translate HMCa last comment to me once you come back too. :) make sure that the log work or wait for me to get on. 
07.08.18 05:05:04<nilli> right now its ends here : 06.08.18 18:21:23<nilli> can I call you now for a moment? this drive me crazy #autonomic-dev>
07.08.18 05:09:32*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #autonomic-dev: Ping timeout: 252 seconds
07.08.18 05:32:27<HMCa> section 1.2 tells how to evaluate an expression in emacs, just do what it says there 
07.08.18 05:32:57<HMCa> you shouldn't type the expression into the file
07.08.18 06:28:01<koo5[m]> I see whats the issue with the logs now, use the address without the -tail part nilli
07.08.18 06:28:16<koo5[m]> Or go here http://loworbit.now.im/logs/
07.08.18 10:21:30*** Join: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9, (unauthenticated): 77.127.34.9 - http://webchat.freenode.net)
07.08.18 10:25:53<nilli> j
07.08.18 12:38:46<editable-koo>o/
07.08.18 14:18:50<nilli> ok I go it. followed HMCa comments and were able to start the dam thing working
07.08.18 14:20:00<nilli> so now I can go down the book in the order it is presented. 
07.08.18 14:29:08<HMCa> cool, now go prove some awesome things!
07.08.18 14:38:15<editable-koo>go prove HMC wrong
07.08.18 14:51:16<HMCa> about?
07.08.18 15:05:51<nilli> lol, there is only one thing I would need to prove HMCa wrong on.  all the rest he is most likely right (as stoop tested..and I asked :) )
07.08.18 15:07:36<nilli> but before I do that I will need to understand his proving methods. ( I guess that trip was all about start moving on that direction) 
07.08.18 15:17:21<editable-koo> HMCa: doesnt matter:)
07.08.18 15:19:12<nilli> ok actualy I have a question, still from my little experiments with stoop examples
07.08.18 15:19:29<nilli> how come this work id20 : (A : Set) → (B : Set) → A → A → A → Nat  id20 Q R x f y = 8
07.08.18 15:20:57<nilli> and this not id19 : (A : Set) → (B : Set) → A → A → A → B  id19 Q R x f y = 
07.08.18 15:22:09<nilli> meaning that I can just put my choice for type B but cant for type Nat
07.08.18 15:25:13<nilli> * can for Nat but can't for B
07.08.18 15:25:45<nilli> koo I understood from you that its some null, but still I dont get why 
07.08.18 15:36:58<editable-koo>Nat is a concrete type, we know how to construct an element of it
07.08.18 15:37:51<editable-koo>B stands for any type, it could be for example a type that cant have any elemets/proofs/values
07.08.18 15:38:18<editable-koo>you cant write a function that constructs a proof of an arbitrary proposition that you pass to it
07.08.18 23:36:55<HMCa> nilli: you could put your choice only if you knew what your choices were
07.08.18 23:37:49<HMCa> if you had some prameter of type B coming in, then that could be an option
07.08.18 23:38:28<HMCa> or if you had some other function which could produce a B given your As, then you could use that
08.08.18 03:13:19<nilli> hey will be back in on 15 minutes. i need to understand that better hope you will be still around for a bit
08.08.18 03:17:49*** Quit: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9) left #autonomic-dev: Ping timeout: 252 seconds
08.08.18 03:32:33*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
08.08.18 03:36:16<nilli> hey . I guess I need to get the basics a little more clear regarding the basic definition for type
08.08.18 03:37:36<HMCa> "types are calling conventions"
08.08.18 03:37:37<HMCa> heh
08.08.18 03:38:00<nilli> ok its more about how come 
08.08.18 03:38:35<HMCa> because we need to be able to call out to one another consistently, right?
08.08.18 03:38:37<nilli> B and  Nat are the same  type of type :)
08.08.18 03:39:16<HMCa> sure, B:Set and Nat:Set
08.08.18 03:39:25<nilli> B A Ext  are totally abstarcts 
08.08.18 03:39:35<HMCa> ?
08.08.18 03:39:43<nilli> while Net is defined for numbers
08.08.18 03:40:19<HMCa> well, they're not totally abstract, we do know "B:Set" which is important and concrete
08.08.18 03:41:01<HMCa> this is part of the meaning of "dependency" when we say we have a "dependent type theory"...
08.08.18 03:41:51<nilli> Net is a type of a type like Hum (as humans) can be a type of a type
08.08.18 03:41:59<HMCa> the value of x:A.... "depends"... on the value for A:Set
08.08.18 03:42:09<HMCa> (Q)
08.08.18 03:42:14<HMCa> [Q]
08.08.18 03:42:18<HMCa> (luls)
08.08.18 03:42:44<HMCa> I'm making that a thing: [Q]
08.08.18 03:43:06<HMCa> sory, that is a tangent
08.08.18 03:45:27<nilli> So if I have  (A : Set) → (B : Set) → A → A → A → C   that should be just like Nat instead of C and I can choose anything for C?
08.08.18 03:46:35<HMCa> well, you can try it, but probably agda will gripe at you about C being undefined and untypable
08.08.18 03:46:54<HMCa> because what type is C there? :-)
08.08.18 03:47:27<HMCa> I can tell you A is of type Set, for sure
08.08.18 03:47:35<HMCa> but C?  What is that? :-)
08.08.18 03:50:15<nilli> So Nat is a type that you pre defined for agda
08.08.18 03:52:03<nilli> I try it  ofc it give an error
08.08.18 03:52:17<HMCa> well, predefined? yes and no...
08.08.18 03:52:35<HMCa> you can define it yourself if you prefer
08.08.18 03:53:04<nilli> What the other types like Net?
08.08.18 03:53:18<nilli> nat
08.08.18 03:53:33<HMCa> it is in the stdlib, not a part of thr language semantics, and given some special treatment by the compiler, but that is all neither here nor there
08.08.18 03:53:41<HMCa> *the
08.08.18 03:53:52<HMCa> "like" Nat in what way(s)?
08.08.18 03:54:42<nilli> that is  type I dont need to define 
08.08.18 03:56:08<HMCa> well.. in your weird install or in the expected case? Heh...
08.08.18 03:58:28<HMCa> http://agda.readthedocs.io/en/v2.5.4.1/language/built-ins.html 
08.08.18 03:58:49<nilli> if I would do it without the definitions for Nat it should have been (A : Set of anything) → (B : Set of anything) → (Nat : Set of numbers ) → A → A → A → Nat
08.08.18 03:59:05<HMCa> "of"?
08.08.18 03:59:39<HMCa> also why are Nat and B of different types?  That makes for a different signature entirely...
08.08.18 03:59:48<HMCa> let's go back
08.08.18 04:00:09<HMCa>  nilli> and this not id19 : (A : Set) → (B : Set) → A → A → A → B  id19 Q R x f y =
08.08.18 04:01:01<nilli> ok here I cant define B any argument for B I get that 
08.08.18 04:01:09<HMCa> understand that te value of Q (B) rrally could be any Set... even Nat
08.08.18 04:01:24<nilli> yes
08.08.18 04:02:24<HMCa> with your "of" B could *not* be Nat
08.08.18 04:03:00<HMCa> because "set of numbers" is not "set of anything"
08.08.18 04:04:54<nilli>  so why I cant do that ?: id38: (A : Set) → (B : Set) → A → A → A → r 
08.08.18 04:04:56<HMCa> but anyway that is somewhat beside the point... here your problem is really quite simply that you can't construct the B, right? :-)
08.08.18 04:05:47<HMCa> well now you just can't construct the r, instead of the B?  The letter you pick doesn't matter...
08.08.18 04:06:25<HMCa> well, in this case is the same problem as saying "-> C"
08.08.18 04:07:40<HMCa> what is C?  what is r?  why should thy be morr constructible and not less, given that we don't even know "C:Set" or "r:Set"?  They are *less* constructible than the unconstructible "B:Set" value!
08.08.18 04:08:08<nilli> id38: (A : Set) → (B : Set) → A → A → A → 8 id38 : Q R x f y = 8  
08.08.18 04:08:15<nilli> this dont work as well 
08.08.18 04:10:10<HMCa> right because it is not the case that "8:8"...
08.08.18 04:10:27<HMCa> it is the case that "8:Nat"
08.08.18 04:10:42<nilli> So what I get form that is that Nat is a special case for agda that it have been defined prior to be of some defined objects
08.08.18 04:11:08<HMCa> nothing has itself as its type, that would be girard's paradox
08.08.18 04:11:32<HMCa> did you look at that docs page?
08.08.18 04:11:42<HMCa> it explains how it is not very special
08.08.18 04:11:52<HMCa> and need not be "sefined prior"
08.08.18 04:11:55<HMCa> *defined
08.08.18 04:12:13<nilli> oh not yet let me see it
08.08.18 04:12:14<HMCa> they even give us the definition if we want to put it in
08.08.18 04:12:26<HMCa> data Nat : Set where
08.08.18 04:12:35<HMCa>  zero : Nat
08.08.18 04:12:47<HMCa>   suc: Nat -> Nat
08.08.18 04:13:17<HMCa> "8" is just short hand for "suc suc suc suc suc suc suc suc zero"
08.08.18 04:14:13<nilli> ok so it is a built in then Nat
08.08.18 04:14:33<HMCa> only if you include the comment
08.08.18 04:15:22<HMCa> otherwise it is treated just like any other sigma type you define, heh
08.08.18 04:15:56<HMCa> the comment tells tge compiler to optimize it by treating it as a pre-defined primitive
08.08.18 04:15:59<HMCa> but
08.08.18 04:16:02<HMCa> that is optional
08.08.18 04:16:28<HMCa> and (should be) semantically equivalent to just giving the definition yourself
08.08.18 04:17:21<HMCa> the only ones there that are "undefinable in the language itself" are the ones that say "postulate" at the start of tgeir definitions
08.08.18 04:17:30<nilli> ok so I can also undo Nat as a built in ?
08.08.18 04:17:38<HMCa> sure
08.08.18 04:18:01<nilli> ok so now im fine with it :)
08.08.18 04:18:50<HMCa> the only "forced" builtins are the universe hierarchy and "bottom" type
08.08.18 04:19:13<HMCa> those are explicit in the semantics of the language itself
08.08.18 04:19:47<nilli> (my sensitive sense of justice could not tolerate that spacial status for Nat)
08.08.18 04:21:12<nilli> [11:18] <HMCa> the only "forced" builtins are the universe hierarchy and "bottom" type  <-- can you say that in more words?
08.08.18 04:22:11<nilli> "universal hierarcy"  and" bottom"  the definitions for these
08.08.18 04:24:56<nilli> these are like the fundamental axioms if would to define the
08.08.18 04:25:45<nilli> in fact its one axiom
08.08.18 04:25:56<HMCa> nah, it is 0
08.08.18 04:25:57<HMCa> heh
08.08.18 04:26:41<nilli> "bottom" defines hierarchy 
08.08.18 04:27:05<HMCa> nah, bottom is a special set outaide of the hierarchy
                 <nilli> not 0 , "time"
08.08.18 04:27:57<HMCa> some people like to imagine bottom as somehow "below Set 0" but that is kinda silly
08.08.18 04:27:58<nilli> i talking about the concept of bottom first of all
08.08.18 04:28:33<HMCa> bottom is just the uninhabited set
08.08.18 04:28:46<HMCa> the "set of nothing" if you like
08.08.18 04:29:57<nilli> so what is "universal hierarchy" everything?
08.08.18 04:32:19<nilli> * you keep talking to me as if I know type and set theory (I dont , remember? I'm just learning that ... i in kindergarten )
08.08.18 04:32:35<HMCa> no, just all of the types of types... remember that whole thing with "Set" being shorthand for "Set 0"...
08.08.18 04:32:52<nilli> yes that I remeber
08.08.18 04:32:53<HMCa> and "Set 0 : Set 1" and "Set 1 : Set 2" and.. so on?
08.08.18 04:33:02<HMCa> that is the universe hierarchy
08.08.18 04:33:09<HMCa> well, the one agda uses, anyway
08.08.18 04:33:12<HMCa> :-)
08.08.18 04:33:56<HMCa> I'll have to go before long
08.08.18 04:34:36<nilli> bottom is 0 sets, and set is all sets hierarchy 
08.08.18 04:38:31<nilli> on that  issue of going to go, it seems like you have a defined scheduled now .  I usually get you at the end of it. when it the beginning of it  ? I can to adjust to it
08.08.18 04:39:21<HMCa> no, bottom is a distinguished set with no inhabitants, there is nothing that is of type bottom
08.08.18 04:40:45<HMCa> my schedule is set only temporarily, I'm not sure for how much longer
08.08.18 04:42:25<nilli> "tomorrow" is the longest I would expect of anyone to try to define. and its a lot to go by :)
08.08.18 04:43:52<HMCa> probably similar to today, but maybe not. :-)
08.08.18 04:44:22<nilli> ("ll will meet you tomorrow at 3" is the most one can ask for)
08.08.18 04:44:58<HMCa> it'll be 3ish, somewhere. ;-)
08.08.18 04:46:59<nilli>  "3" , that of the little prince, yours is more like 6 am I think (tough hours for me)   
08.08.18 04:48:41<nilli> I guess in the little prince there where  no time zone issues though its talking about different planet  :)
08.08.18 04:50:17<HMCa> i just use unix epoch time everywhere, easier that way
08.08.18 04:52:45<nilli> so back to the type theory story : set is the basic terms of existence 
08.08.18 04:55:38<nilli> and the only object that is itself is bottom. (as being a set of no inhabitants )
08.08.18 04:57:30<nilli> by the way that definition of set is how we are avoiding a contradiction 
08.08.18 04:59:13<nilli> that is a proof worth proving. can you show me the proof for it?
08.08.18 05:00:20<HMCa> yes, there are a few, but I'm not sure you're ready for that just yet
08.08.18 05:01:19<nilli> probably not, just ready to ask for such proof
08.08.18 05:02:26<nilli> since all  our consistency claim sit on that proof 
08.08.18 05:03:53<nilli> I can think of a realy funny proof for it
08.08.18 05:04:05<HMCa> well, start with martin-lof's "An intuitionistic theory of types: predicative part" and then 
08.08.18 05:04:33<HMCa> "locally cartesian closed categories and type theory"
08.08.18 05:04:51<HMCa> anyway i gtg for now
08.08.18 05:05:38<nilli> let me first write my funny proof since all I need for that is semantics 
08.08.18 05:06:14<nilli> yea you go  run away. ill see you later or tommorow
08.08.18 05:07:20<nilli> ill paste it here later 
08.08.18 05:13:52*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #autonomic-dev: Ping timeout: 252 seconds
08.08.18 08:12:24*** Join: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9, (unauthenticated): 77.127.34.9 - http://webchat.freenode.net)
08.08.18 08:13:48<nilli> ok HMCa how about that for an a proof? (keep in mind that I dont know to form it to type theory as of yet... preK levle)
08.08.18 08:22:39<nilli>  [11:38] <HMCa> no, bottom is a distinguished set with no inhabitants, there is nothing that is of type bottom 
08.08.18 08:25:13<nilli> first of all I have a bit of a problem with this definition assuming that a set is a type and a type is a set... but lets say was resolved under the Russel contradiction resolution (I dont remeber the name you gave) 
08.08.18 08:28:05<nilli> The part that for me is crucial regarding the bottom is that its need to be proved under no assumptions:  0G |- Bottem
08.08.18 08:30:55<nilli> so for that I will start with  the .... right spelling :)  : 0G |- Bottom
08.08.18 08:37:56<nilli> 0G |- A -> B when A is a set consist of an assumption and B is bottom 
08.08.18 09:02:16<nilli> now we assume that this assumption is what we try to proof we will have a problem
08.08.18 09:06:26<nilli> but we are not trying to prove that Bottom have no assumption , we only try to prove that under no assumption Bottom is a set of no inhabitants  
08.08.18 09:08:03<nilli> *now if we assume that this assumption is what we try to proof we will have a problem (the if was miissing)
08.08.18 09:13:58<nilli> but the set of assumptions A can have 0 assumptions
08.08.18 09:22:15<nilli> ok I probably should stop here since that will allow me to prove any negation as simply 0 objects at set 1
08.08.18 09:24:02<nilli> something like that anyway... back to the book to learn to ask concrete questions 
#autonomic-dev> 08.08.18 18:09:45*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 2 months 23 days 19 hours 5 minutes 14 seconds ago
                 *** Names: editable-koo nilli editable-koo-old Deadhand koo5[m] HMCa
                 *** End of /NAMES list.
08.08.18 18:18:51<editable-koo>testing testing 1 2 3 
08.08.18 18:20:42<editable-koo>yeah i think its doing what i wanted, it initialized the buffers automatically, so yay
08.08.18 18:39:38*** Quit: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9) left #autonomic-dev: Ping timeout: 252 seconds
08.08.18 22:58:12*** Join: nilli (4d7e4b2e@gateway/web/freenode/ip.77.126.75.46, (unauthenticated): 77.126.75.46 - http://webchat.freenode.net)
09.08.18 02:52:01<HMCa> hi
09.08.18 02:52:16<HMCa> i've been around
09.08.18 02:53:45<HMCa> you should've said something I usually don't switch over to these windows unles there are new msgs waiting, I won't see people arriving/departing
09.08.18 03:03:45<nilli> I dont have any concrete questions yet. was going over the notes I took with stoop and koo and and organizing it . 
09.08.18 03:05:49<HMCa> ok
09.08.18 03:06:18<nilli> basically I wanted to to get the things ready to start  learning on my own and not being able to work on agda according the book was making me insane . so that is fine now and I can start learning  
09.08.18 03:47:59*** Quit: nilli (4d7e4b2e@gateway/web/freenode/ip.77.126.75.46) left #autonomic-dev: Ping timeout: 252 seconds
09.08.18 04:21:17*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
09.08.18 05:33:02*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #autonomic-dev: Ping timeout: 252 seconds
09.08.18 15:51:29*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-adnphjvmjqnrqopx, (unauthenticated): @nilli:matrix.org)
09.08.18 18:56:28*** Nick change: You are now known as editable-whateve
10.08.18 20:44:52*** Nick change: You are now known as editable-discard
11.08.18 03:38:25*** Nick change: You are now known as editable-koo
11.08.18 14:43:49*** Nick change: You are now known as editable-discard
12.08.18 04:04:33*** Nick change: You are now known as editable-koo
12.08.18 13:25:02*** [412 from rajaniemi.freenode.net] editable-koo No text to send
12.08.18 13:25:07*** [412 from rajaniemi.freenode.net] editable-koo No text to send
12.08.18 13:25:11*** No such nick: x
12.08.18 13:41:02<editable-koo>File Edit Options Buffers Tools Agda Help       
                 <editable-koo>packet_write_wait: Connection to 104.168.57.22 port 44: Broken pipeding ( _xor_ )
13.08.18 08:06:28*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-iqtpemjgoqadvvkw, stoopkid: stoopkid)
13.08.18 10:15:42*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
13.08.18 13:01:13*** Quit: koom (~sirdancea@89.24.56.217) left #autonomic-dev: Ping timeout: 248 seconds
13.08.18 14:16:05*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-iqtpemjgoqadvvkw) left #autonomic-dev: Quit: Connection closed for inactivity
13.08.18 15:27:17*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
13.08.18 16:42:21*** Quit: koom (~sirdancea@89.24.56.217) left #autonomic-dev: Ping timeout: 272 seconds
13.08.18 17:32:48-SaslServ- koom!~sirdancea@89.24.56.217 has just authenticated as you (sirdancealot)
13.08.18 17:32:54*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
13.08.18 18:43:24*** Quit: koom (~sirdancea@89.24.56.217) left #autonomic-dev: Ping timeout: 240 seconds
13.08.18 22:00:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-drbcfxkvnkpgdtqh, stoopkid: stoopkid)
14.08.18 01:37:48*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
14.08.18 04:16:26*** Quit: koom (~sirdancea@89.24.56.217) left #autonomic-dev: Ping timeout: 248 seconds
14.08.18 06:59:45*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
14.08.18 07:11:56*** Quit: koom (~sirdancea@89.24.56.217) left #autonomic-dev: Ping timeout: 272 seconds
14.08.18 15:39:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-drbcfxkvnkpgdtqh) left #autonomic-dev: Quit: Connection closed for inactivity
#autonomic-dev> 15.08.18 02:40:09*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 3 months 3 hours 35 minutes 37 seconds ago
                 *** Names: editable-koo nilli[m] editable-koo-old Deadhand koo5[m] HMCa
                 *** End of /NAMES list.
15.08.18 02:40:22*** #swig Cannot join channel (+r) - you need to be identified with services
15.08.18 02:40:37*** #marpa Cannot join channel (+r) - you need to be identified with services
15.08.18 02:40:40*** #proglangdesign Cannot join channel (+r) - you need to be identified with services
15.08.18 02:40:43-Server Notice- *** Notice -- TS for #idni changed from 1534315184 to 1471376372
15.08.18 02:40:46-Server Notice- *** Notice -- TS for #webofneeds changed from 1534315187 to 1365151743
#autonomic-dev> 15.08.18 03:01:24*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 3 months 3 hours 56 minutes 53 seconds ago
                 *** Names: editable-koo nilli[m] editable-koo-old Deadhand koo5[m] HMCa
                 *** End of /NAMES list.
#autonomic-dev> 15.08.18 06:48:14*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 3 months 7 hours 43 minutes 42 seconds ago
                 *** Names: editable-koo HMCa koo5[m] Deadhand editable-koo-old nilli[m]
                 *** End of /NAMES list.
15.08.18 06:48:43*** #marpa Cannot join channel (+r) - you need to be identified with services
15.08.18 06:48:46*** #proglangdesign Cannot join channel (+r) - you need to be identified with services
15.08.18 06:48:50-NickServ- You are now identified for editable-koo.
15.08.18 09:57:52*** Nick change: You are now known as editable-log
15.08.18 10:15:18*** Nick change: You are now known as editable-dog
#autonomic-dev> 15.08.18 10:22:09*** Join: editable-dog (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:36 2018, 3 months 11 hours 17 minutes 33 seconds ago
                 *** Names: editable-dog nilli[m] editable-koo-old Deadhand koo5[m] HMCa
                 *** End of /NAMES list.
#autonomic-dev> 15.08.18 10:25:01*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 3 months 11 hours 20 minutes 30 seconds ago
                 *** Names: editable-dog nilli[m] editable-koo-old Deadhand koo5[m] HMCa
                 *** End of /NAMES list.
15.08.18 17:33:42*** Nick change: You are now known as editable-whateve
15.08.18 19:00:52*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fyqrjrolkiervtle, stoopkid: stoopkid)
16.08.18 04:12:36*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-zrrfilejzmsgdmwj) left #autonomic-dev: Remote host closed the connection
16.08.18 04:12:39*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-adnphjvmjqnrqopx) left #autonomic-dev: Read error: Connection reset by peer
16.08.18 04:20:41*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-sbjkwpohkxpetssi, (unauthenticated): @nilli:matrix.org)
16.08.18 04:37:09*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-fywhudxvyvlemqpw, (unauthenticated): @koo5:matrix.org)
17.08.18 13:01:57<koo5[m]> So i managed to parallelize the visualization script...took me three days and a couple of dead ends
17.08.18 22:40:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fyqrjrolkiervtle) left #autonomic-dev: Quit: Connection closed for inactivity
18.08.18 14:01:26*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qfqkynergrqrmpft, stoopkid: stoopkid)
18.08.18 21:16:03*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #autonomic-dev: Ping timeout: 244 seconds
18.08.18 21:34:28*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
18.08.18 23:54:52*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #autonomic-dev: Ping timeout: 256 seconds
19.08.18 00:00:40*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
19.08.18 00:32:23*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #autonomic-dev: Ping timeout: 244 seconds
19.08.18 00:39:44*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
19.08.18 01:00:00*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #autonomic-dev: Ping timeout: 272 seconds
19.08.18 01:04:46*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
20.08.18 13:42:16*** [412 from hobana.freenode.net] editable-whateve No text to send
20.08.18 15:12:36<HMCa> stoopkid: I still can't pm without auth because freenode is crazy, so I'll reply here... or we can jump in a priv chan or something
20.08.18 15:13:34<HMCa> short version: I personally don't believe any burnout is ever permanent. :-|
20.08.18 23:18:42<stoopkid> HMCa i  dont really have much to say about it so I guess here is fine
20.08.18 23:20:36<HMCa> i'm mostly-afk for the moment
20.08.18 23:20:43<HMCa> 30-40 min probably
20.08.18 23:22:29<stoopkid> no problem
20.08.18 23:26:44<stoopkid> there’s two kinds of burnout, the kind where you’ll be disappointed in yourself if you dont keep going and the kind where you’ll be disappointed in yourself if you do
21.08.18 00:18:52<HMCa> this one is probably both, heh
21.08.18 00:36:53<stoopkid> HMCa: it's really just the latter, unfortunately
21.08.18 00:39:29<stoopkid> don't get me wrong, i still basically believe in the project on a technical level
21.08.18 00:41:44<stoopkid> but i don't really feel any need to be directly involved in its r&d
21.08.18 00:42:26<stoopkid> or, more accurately, i don't see myself being able to continue being directly involved and still be anything even resembling a mentally/emotionally/physically healthy individual
21.08.18 00:45:55<HMCa> hrmm, howso?
21.08.18 00:46:24<stoopkid> howso which?
21.08.18 00:47:46<HMCa> what about the project precludes health?
21.08.18 00:48:05<stoopkid> me
21.08.18 00:51:00<stoopkid> i've worked ~10 software projects in my life, and i've never been able to maintain any separation between life and work, i've never been able to take the time to focus on my own health, etc...
21.08.18 00:51:34<stoopkid> i've reached this same conclusion many times as we've worked on this project, but always in the context of "ok well this is how i can fix that so i can keep working on the project"
21.08.18 00:51:59<stoopkid> which is a fundamentally flawed mentally because it's still me putting the project before myself
21.08.18 00:52:26<stoopkid> and i never end up fixing anything, and i never end up finishing the project either
21.08.18 00:55:45<stoopkid> i believe that i can fix these problems with myself, over the course of years, but i don't think i ever will as long as i have some major project like this that i feel personally invested in finishing
21.08.18 00:59:05<stoopkid> instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs
21.08.18 01:00:10<stoopkid> and i rely on drugs to keep myself going when my mind & body would've otherwise forced me to stop and take care of myself
21.08.18 01:03:05<stoopkid> and i realized why the more advanced classes at university get really exclusive; i always felt "i could understand this stuff, and so could other people, so why so exclusive?" but it's not about whether i can understand its about whether i can understand it well enough to pass the classes in the given timeframe and then go on to make a career out of it without killing myself
21.08.18 01:05:58<stoopkid> the only reason i've been able to keep going for this long was because i felt a moral imperative to do so
21.08.18 01:06:54<stoopkid> like we're in a war, and these are my trenches, and i've just gotta suck it up and keep pushing the front line forward
21.08.18 01:07:42<stoopkid> but i no longer feel that moral imperative, because i no longer feel that this is my war to fight
21.08.18 01:09:15<stoopkid> it "should" be, but i'm not even personally invested in my own existence in this world, so how can it be
21.08.18 01:10:00<HMCa> the hierarchy of needs is a complex subject, but in any case irl concerns should always be dealth with first, that much is "easy"
21.08.18 01:10:45<HMCa> as for the war... it is all of ours, but you know this :-P
21.08.18 01:14:37<stoopkid> it is and it isn't... or more specifically, i don't feel personal responsibility for the outcome
21.08.18 01:15:23<HMCa> ironically that only matters if we win, anyway?
21.08.18 01:15:25<HMCa> heh
21.08.18 01:16:04<HMCa> if we lose, we're just all collectively responsible...
21.08.18 01:18:11<stoopkid> sure
21.08.18 01:19:00<HMCa> in any case, get your stuff in order.  The war machines will keep turning, I'm sure... its what they do. :-)
21.08.18 01:22:01<stoopkid> yep, and i've made my "peace" with that fact
21.08.18 01:26:36<HMCa> if/when you decide to come back to the trenches, I'd hope you will not find them empty
21.08.18 01:27:42<stoopkid> i'll be happy to continue getting koo5[m] up to speed with everything i know about type theory and/or help find somebody else who's in a position to continue carrying the project forward
21.08.18 01:29:48* HMCa shrugs
21.08.18 01:29:50<HMCa> it can't hurt, but...
21.08.18 01:31:05<HMCa> the project will go forward as it will, regardless... inevitability on its' own terms and all that jazz
21.08.18 01:31:26<HMCa> so don't worry
21.08.18 01:31:38<HMCa> and get happy ;-)
21.08.18 01:32:52<stoopkid> don't worry, i'm not worried
21.08.18 01:33:30<HMCa> well, you're clearly worried about a few things, heh
21.08.18 01:33:47<HMCa> but i'm confident not "that" at least
21.08.18 01:34:32<stoopkid> koo5[m] nilli[m] also don't worry, i'm not disappearing or anything so i'll still be around-ish if you guys have questions about things that i'm currently capable of answering, and you've both got my # if i'm off IRC for some extended period of time
21.08.18 01:35:27<stoopkid> koo5[m]: after i get some of my crap together i'll probably still be down to work on some of our simpler side-projects; "simpler" being the keyword
21.08.18 01:36:22<stoopkid> nilli[m]: after i get my crap together financially i'll start working on refunding what you've given me up to this point
21.08.18 01:39:13<HMCa> are 3sats simpler or less simple?  There are some interesting new theories...
21.08.18 01:40:45<HMCa> jk
21.08.18 01:43:01<stoopkid> 3sats are a perfect example of exactly what i won't be working on anymore
21.08.18 01:47:25<HMCa> yah, if the tau is too much then seth is right out for sure heh
21.08.18 02:14:54<HMCa> what about the homebrew cpu stuff, is that simpler?
21.08.18 02:15:33<HMCa> we have all these fun new SuperH cores now
21.08.18 02:15:57<HMCa> and there were those via godmode cpus found
21.08.18 03:03:02<editable-whateve>ack stoopkid 
21.08.18 03:03:24<editable-whateve>having a push to work on some of our "side" things would be a good thing
21.08.18 03:04:15<editable-whateve>whats this talk about refunding:)
21.08.18 03:05:16<editable-whateve>anyway
21.08.18 03:06:38<editable-whateve>is it that i succeeded in persuading you that you can get your financial side much better?
21.08.18 03:12:06<stoopkid> nah; you did convince me of that, and it is something i'm planning to work on, but it's 99% unrelated to this
21.08.18 03:17:27<editable-whateve>ok. . .
21.08.18 03:19:05<stoopkid> wrt refunding... if i don't think i'm going to be finishing the project then i don't think i'll be living up to the obligations i took on when i accepted nilli's funding
21.08.18 03:34:31<editable-whateve>mh
21.08.18 04:11:44<stoopkid> editable-whateve: it's not anything that you and nilli persuaded me of, it's mainly just that i realized just how unhealthy i am and just how easy it is for me to just avoid dealing with it by working on something that i've convinced myself is more important than my own well-being
21.08.18 04:15:26<nilli[m]> hey there , im reading the conversation. stoop I probably will have much to say to you. ( only good things) . I was waiting  for us to hear from you . will finish reading and will comment.
21.08.18 04:15:53<stoopkid> hey nilli
21.08.18 04:16:54<nilli[m]> hey stoopkid  are you around for a bit more?
21.08.18 04:17:59<stoopkid> yep, maybe for another hour or so
21.08.18 04:24:03<nilli[m]> ok stoopkid . first of all I think that you are reaching a really good place now. trying to balance  your life .
21.08.18 04:28:12<nilli[m]> I am really glad that we got to meet face to face and that I had the chance to learn from you directly. It also gives me a good insight into the conflict that you have with yourself..
21.08.18 04:34:17<stoopkid> i'm glad as well, it was a very positive experience for me
21.08.18 04:35:38<nilli[m]> I think having a loving family and that sweet girlfriend of yours is helping you get the right perspective on things , but there is something else im sure that you will see for yourself soon.
21.08.18 04:38:57<nilli[m]> most people are perfectly fine with "he said...", "she said..." and will take it from that point. (he, she , can b a God or some other authority.
21.08.18 04:40:31<nilli[m]> it is very practical and allow for people to cooperate and reach great goals...however for some that is not enough
21.08.18 04:40:39<nilli[m]> and will never be
21.08.18 04:41:19<nilli[m]> you are by all means one of these  "some"
21.08.18 04:44:50<stoopkid> heh, yea i have a very difficult time operating on the basis of anything that i can't verify for myself directly, especially when i have to make decisions about which assumptions can be used and which can't
21.08.18 04:47:44<stoopkid> and yea idk what i'd do without megan, or how she's managed to put up with me for so long lol
21.08.18 04:47:47<nilli[m]> you have great abilities regarding that and there is no way in the world that you will be fine participating in any research that will not go to the most fundamental building blocks of it
21.08.18 04:52:44<nilli[m]> she know that she can trust you  trust in the big way. of being true to yourself  thus true to her.
21.08.18 04:54:34<nilli[m]> and that is in fact the one of your stronger qualities which are expressed in a very useful way  that you dont yet understand  or appreciate as such
21.08.18 05:03:17<nilli[m]> there are very few people that you can trust  regarding existing knowledge . much of what you learn is based on the assumption that if it comes from someone who study it , its true
21.08.18 05:08:04<nilli[m]> when you go check for yourself you see many distortions , if you go really deep you can find the source of any assumption  and also the story behind  the distortion
21.08.18 05:10:00<nilli[m]> but that is as deep as one can go. there is nothing true  other then that assumption at  the base  (top) of our truth tree.
21.08.18 05:15:19<stoopkid> sure, we can only verify anything down to some assumptions we're willing to accept as given
21.08.18 05:16:38<nilli[m]> our proof tree is the truth tree, there is not other truth one can share .its always |- G ,  since even when we start with G as 0  we can end up with a very long  phrase tracing to that basic assumption
21.08.18 05:18:38<nilli[m]> in other words, most humans are perfectly fine with demils logic , but not us :)
21.08.18 05:23:21<nilli[m]> anyway what you know and the way you process information is very valuable in a world that learns to distrust authority  .
21.08.18 05:24:34<nilli[m]> bottom line , it is not about figuring out the truth its about building a solid one that we can share and trust.
21.08.18 05:24:48<nilli[m]> and that is what we try to do in autonomic
21.08.18 05:25:41<nilli[m]> I dont think that you will be able to find anything that will come close to satisfy your standards
21.08.18 05:31:49<nilli[m]> So... it good you learning to get your degree and follow some stupid shit that all do. its part of getting to the a point you can be a part of something , but then make it go your way :)
21.08.18 05:34:34<stoopkid> i don't think i'll be able to find anything like that either, so part of what i'm trying to do is to stop even looking for it
21.08.18 05:37:31<nilli[m]> you found it :)  you will realize it soon . assumption are to be made by ones who can construct the path . and only by following such path one can know how to construct it
21.08.18 05:39:56<nilli[m]> and stoopkid in regards of the funds.... you were working on getting the tau-autonomic for over three years. you deserve the coins for that. there is never promise  for success only to do the work
21.08.18 05:40:18<nilli[m]> and every day one is free to decide to walk away
21.08.18 05:41:09<nilli[m]> the part that you got is far less than what you deserve
21.08.18 05:44:40<nilli[m]> also I like that you feel like you owe me. :)  I will make sure you pay it back in teaching me. since  you are one of very few I trust to lean from. (unless you will ask to not do that )
21.08.18 05:48:49<stoopkid> you're too kind, by walking away i don't feel at all that i'm living up to the obligations i took on when i accepted your funds. i'll be happy to continue teaching you whatever material i currently understand in my free-time though, and when i actually have the funds to pay you back with then we can discuss that again or i could just pay it forward back to the project
21.08.18 05:53:11<nilli[m]> pleas dont worry about paying back anything. you gave much more than you got , trust me. :) . and just do what is right for you now. (which is walking away from the commitment to the autonomic project right now)
21.08.18 05:57:14<stoopkid> well, we can discuss it again later. anyway yea i should probably head off and get some sleep now
21.08.18 06:00:01<stoopkid> i'll be around-ish so just ping me if you need me to look at something
21.08.18 06:00:46<stoopkid> anyway, good talking with you, catch ya later
21.08.18 06:01:09<koo5[m]> o/
21.08.18 06:01:14<nilli[m]> yes. was nice talking with you .say hi to Meagan and her amazing grandma  and thanks
21.08.18 06:03:58<nilli[m]> hey koo :)   i need to go now but will talk to you later.
21.08.18 06:04:57<koo5[m]> Heya
21.08.18 12:27:03<HMCa> koo5[m]: I guess you've inherited the dev lead role now.  (May the gods have mercy on your digital soul!)
21.08.18 12:30:58<editable-whateve>i guess some situations are better left without labels
21.08.18 12:33:24<editable-whateve>if gods have mercy on us, ill be able to keep going with only occasional input from stoop now 
21.08.18 12:34:02<editable-whateve>for some time
21.08.18 12:36:30<HMCa> yah, we've never made any such roles anything like official, for reasons. :-|
21.08.18 12:36:33<HMCa> heh
21.08.18 12:36:55<HMCa> (quite intentional)
21.08.18 12:38:45<HMCa> I'll probably be playing with pyin some over the next ~48hr
21.08.18 12:39:11<HMCa> so expect some questions and gripes will be coming :-P
21.08.18 12:41:27<HMCa> there's an interesting new(ish) paper about formalizing joins in relational algebras using ringoids which I'm reading now, loosely related to existentials stuff
21.08.18 12:42:34<HMCa> well, perhaps not that loosely... joins are existentials and existentials are joins, heh
21.08.18 12:43:46<editable-whateve>whatever floats your boat., lol
21.08.18 12:47:18<HMCa> well it is a little *dense*...
21.08.18 12:51:56<editable-whateve>im wondering if i should set up a throwaway vps with everything and some simple irc-to-tau passthro bot
21.08.18 12:52:11<editable-whateve>it would just be extremely hackable:)
21.08.18 12:52:55<editable-whateve>in the longer term, id like to outphase the c++ frontend
21.08.18 12:54:50<HMCa> taubot the third?
21.08.18 12:55:06<HMCa> can I scream FIN at it?
21.08.18 12:55:10<editable-whateve>idk, you counted them?
21.08.18 12:56:04<HMCa> sure, it wasn't hard, there were only two... barely "counting" more like just... noticing plurality.
06:09
editable-whateve left the room.
E
nilli
08:44
hey  HMCa who  did the other 2? one Ohad I think right?
N
08:44
what exactly a taubot whould do ?
nilli
09:00
Also  koo5 I have a vps set up on contabo (remember I told you about it) for the project i worked . I kepet it and just was thinking to stop the subscription.
N
HMCa [Freenode IRC Network (+freenode:matrix.org)]
09:07
i wrote one, but it was based on cwm so it was short lived
H
09:08
well, not really a full tau bot, just a reasoner wired up to irc
HN
09:08
as was ohad's finbot
E
09:12
editable-dog (IRC) joined the room.
22.08.18 00:09:25*** Connecting...
#autonomic-dev> 22.08.18 03:13:10*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 3 months 7 days 4 hours 8 minutes 38 seconds ago
                 *** Names: editable-dog nilli[m] Deadhand stoopkid koo5[m] HMCa
                 *** End of /NAMES list.
22.08.18 03:32:09<editable-dog>alright
22.08.18 03:32:15<editable-dog>finbot hehe
22.08.18 03:32:40<editable-dog>so, make a virtualenv from the requirements.txt file
22.08.18 03:33:16<HMCa> i've got the deps and such sorted, I think.  maybe.
22.08.18 03:33:26<editable-dog>ok cool
22.08.18 03:33:35<HMCa> i can make the visualizer go
22.08.18 03:33:43<editable-dog>well,  like to run it through the old tau frontend (the pyin reasoner, that is)
                 <HMCa> which is neat
22.08.18 03:33:52<editable-dog>ok nice
22.08.18 03:34:57<editable-dog>so you got everything going?
22.08.18 03:36:02<HMCa> well, dunno
22.08.18 03:36:14<HMCa> some tests pass and stuff
22.08.18 03:36:32<HMCa> but the agda lists example doesn't?
22.08.18 03:37:26<editable-dog>ok thats curious
22.08.18 03:37:33<editable-dog>probably a glitch in the matrix
22.08.18 03:37:47<editable-dog>luckily i know unix, so let me fix this
22.08.18 03:38:01<editable-dog>err hack this
22.08.18 03:40:54<HMCa> does it also not work there?
22.08.18 03:41:10<HMCa> it is not just me?
22.08.18 03:42:03<editable-dog>tests/agda/listform.tau:test:PASS
22.08.18 03:42:47<HMCa> ah hrm, sec
22.08.18 03:42:56<HMCa> maybe i just had wrong file
22.08.18 03:46:35<HMCa> no, i had the right file... how long should it take to run?
22.08.18 03:47:01<editable-dog>90megs worth of kbdbg output
22.08.18 03:47:31<editable-dog>about 30 seconds maybe
22.08.18 03:47:51<HMCa> ok, it did finish
22.08.18 03:48:05<HMCa> not sure what i did wrong earlier
                 <editable-dog>hmm
22.08.18 03:48:16<HMCa> why so slow?
22.08.18 03:48:47<editable-dog>its not built for speed
22.08.18 03:49:30<HMCa> still, seems kinda *crazy* slow
22.08.18 03:49:52<editable-dog>90 megs worth of debug output in 30 seconds seems crazy slow?
22.08.18 03:50:22<HMCa> is there a not-debug mode? :-)
22.08.18 03:50:38<editable-dog>there was, but i gave up on it
22.08.18 03:50:55<HMCa> lol
22.08.18 03:51:02<HMCa> ok
22.08.18 03:51:49<editable-dog>but you can put "nokbdbg or " before every kbdbg call, and see. But then, it will still be passing around a ton of debug info, and doing everything in its unoptimized ways
22.08.18 03:55:03<editable-dog>dont bother with trying pypy3 btw, its slower 
22.08.18 04:01:01*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
22.08.18 06:35:39<nilli[m]> hey koo are you going to be around a bit later I wanted to  whatapp talk with you.
22.08.18 06:52:55<editable-koo-old> yeah
22.08.18 06:53:30<nilli[m]> stoopkid this  little story is for you :) and why I think that you will come back soon, but different.
22.08.18 06:56:09<nilli[m]> it actualy have two parts one that happened about when you where born and one very recent.
22.08.18 07:02:27<nilli[m]> there is a sentance in the biblical story about Abraham which say that Sarah was is half sister.  however the story is told by teachers as if they where not brother and sister
22.08.18 07:07:23<nilli[m]> One of the main books all rebai learns form is the Talmud  and there they intemperate it as if she was his niece.
22.08.18 07:10:28<nilli[m]> being an atheist I just read the story directly form the bible since as literature in terms of the use of language is amazing, so I stumbled  on that fact that it is stated that she was his sister   and started asking around.
22.08.18 07:13:58<nilli[m]> I asked a few that study the old testament on a very very high level. about that sentance where it is stated that Sarah is Abraham half sister . none but one  (much later) know it
22.08.18 07:17:36<nilli[m]> that was  way before the age of google ( now if you google you can  read that ) . having these professionals telling me that its not so made me  wonder if I actualy read it right.
22.08.18 07:20:26<nilli[m]> it turns out that I was right  and they never actualy where made to read the text and confront the question directly. they assume the Talmud to be the trusted source of their knowledge.
22.08.18 07:28:56<nilli[m]> the second part is up to date. the two slit experiment.  and have to do with my set of questioning earlier today
22.08.18 07:39:18<nilli[m]> one major detail was totally over looked by an assumption which was never acknowledge as such  and thus the  result is distorted
22.08.18 07:46:58<nilli[m]> bottom line... im sure you will come back to play with us since out there even very smart people are so fucken stupid and confuse knowledge with trust.
22.08.18 08:32:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qfqkynergrqrmpft) left #autonomic-dev: Quit: Connection closed for inactivity
22.08.18 13:26:29*** Disconnected
                 *** Connecting...
22.08.18 13:26:59*** Join: editable-dog (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 3 months 7 days 14 hours 22 minutes 28 seconds ago
                 *** Names: editable-dog editable-koo-old nilli[m] HMCa koo5[m] Deadhand
                 *** End of /NAMES list.
22.08.18 16:51:10*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fmgxmwzfmvhpszlq, stoopkid: stoopkid)
22.08.18 22:38:53*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-nibhfjwtkiotyxlv, (unauthenticated): @koo5:matrix.org)
23.08.18 22:31:13*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-dlgtoavdpiotvezo, (unauthenticated): @nilli:matrix.org)
23.08.18 23:08:13*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-dlgtoavdpiotvezo, (unauthenticated): @nilli:matrix.org)
                 *** Join: HMCa (~root@37.153.110.58, (unauthenticated): root)
                 *** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
                 *** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
                 *** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-nibhfjwtkiotyxlv, (unauthenticated): @koo5:matrix.org)
24.08.18 04:12:37*** Quit: HMCa (~root@37.153.110.58) left #autonomic-dev: Ping timeout: 260 seconds
24.08.18 04:43:09*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
24.08.18 11:42:36<editable-dog>hmm, how could this have worked before..:)
24.08.18 12:23:04*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fmgxmwzfmvhpszlq) left #autonomic-dev: Quit: Connection closed for inactivity
24.08.18 16:15:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-usdaptmjekjukhpr, stoopkid: stoopkid)
25.08.18 07:01:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-usdaptmjekjukhpr) left #autonomic-dev: Quit: Connection closed for inactivity
25.08.18 09:00:30<editable-dog>so, i have to work out what should happen with rules that have multiple existentials in head
25.08.18 09:00:54<editable-dog>also spread out across multiple triples
26.08.18 16:00:22<editable-dog>Hungry backspace
26.08.18 18:16:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
27.08.18 01:35:22*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-nibhfjwtkiotyxlv) left #autonomic-dev: Ping timeout: 260 seconds
27.08.18 01:35:24*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-dlgtoavdpiotvezo) left #autonomic-dev: Ping timeout: 276 seconds
27.08.18 01:48:47*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-ljyekdvmznktlhql, (unauthenticated): @nilli:matrix.org)
27.08.18 02:00:05*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-mgvjynbqsvfoxmnj, (unauthenticated): @koo5:matrix.org)
27.08.18 13:24:24*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
27.08.18 13:24:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
28.08.18 00:00:41*** Quit: HMCf (~root@37.153.110.58) left #autonomic-dev: Ping timeout: 272 seconds
28.08.18 00:01:04*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
28.08.18 22:44:33*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
29.08.18 13:05:49*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #autonomic-dev: Ping timeout: 246 seconds
29.08.18 17:41:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bugskgualovforba, stoopkid: stoopkid)
29.08.18 22:08:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
29.08.18 22:08:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
30.08.18 04:30:58*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bugskgualovforba) left #autonomic-dev: Quit: Connection closed for inactivity
30.08.18 09:04:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cvjnlrpucwaqbtfv, stoopkid: stoopkid)
30.08.18 12:30:22*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
30.08.18 17:35:14*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
30.08.18 17:35:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
31.08.18 06:41:28*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
31.08.18 06:41:46*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
31.08.18 06:53:33*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-ljyekdvmznktlhql) left #autonomic-dev: Remote host closed the connection
31.08.18 06:53:35*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-mgvjynbqsvfoxmnj) left #autonomic-dev: Read error: Connection reset by peer
31.08.18 07:02:08*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-ddhcgivfizmmyhmm, (unauthenticated): @nilli:matrix.org)
31.08.18 07:18:52*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-klywbsebkdzeynex, (unauthenticated): @koo5:matrix.org)
31.08.18 08:51:03*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-ddhcgivfizmmyhmm) left #autonomic-dev: Remote host closed the connection
31.08.18 08:51:13*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-klywbsebkdzeynex) left #autonomic-dev: Remote host closed the connection
31.08.18 09:00:30*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-wnfowuwjzyjfbrvx, (unauthenticated): @nilli:matrix.org)
31.08.18 09:16:25*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-suleaoswfognmpiy, (unauthenticated): @koo5:matrix.org)
31.08.18 17:23:46*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cvjnlrpucwaqbtfv) left #autonomic-dev: Quit: Connection closed for inactivity
31.08.18 20:49:44*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jxibatpybsypyxql, stoopkid: stoopkid)
31.08.18 22:57:39*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jxibatpybsypyxql) left #autonomic-dev: Quit: Connection closed for inactivity
01.09.18 00:34:45*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ypxmwzotffhygcir, stoopkid: stoopkid)
01.09.18 06:05:33*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-wnfowuwjzyjfbrvx) left #autonomic-dev: Remote host closed the connection
01.09.18 06:05:47*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-suleaoswfognmpiy) left #autonomic-dev: Remote host closed the connection
01.09.18 06:12:32*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-lwthtwueybtddjlp, (unauthenticated): @nilli:matrix.org)
01.09.18 06:27:17*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hytgqxleqxvabblv, (unauthenticated): @koo5:matrix.org)
01.09.18 09:38:06*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ypxmwzotffhygcir) left #autonomic-dev: Quit: Connection closed for inactivity
01.09.18 15:19:32*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-lwthtwueybtddjlp) left #autonomic-dev: Remote host closed the connection
                 *** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hytgqxleqxvabblv) left #autonomic-dev: Read error: Connection reset by peer
01.09.18 15:36:26*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-zhpenxgkeizxiezo, (unauthenticated): @nilli:matrix.org)
01.09.18 15:48:46*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pynlhrfrioavrnyy, (unauthenticated): @koo5:matrix.org)
02.09.18 15:03:19*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yznbogdfmxkyskmk, stoopkid: stoopkid)
02.09.18 15:09:44*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
02.09.18 15:10:03*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.09.18 21:30:50*** Join: ditable-koo-olde (~user@167.88.171.233, (unauthenticated): user)
                 *** Quit: editable-koo-old (~user@167.88.171.233) left #autonomic-dev: Read error: Connection reset by peer
03.09.18 16:12:43<editable-dog>https://www.reddit.com/r/ProgrammerHumor/comments/9clbkh/do_you_have_a_passion_for_java_neither_do_we/
03.09.18 16:29:00<editable-dog>nilli, i think youll appreciate some of these https://boyter.org/2016/04/collection-orly-book-covers/
03.09.18 16:44:14<nilli[m]>  editable-dog most of them I still have to experiences on some level to really appreciate  the humor. but it looks promising  :)
04.09.18 05:43:03<nilli[m]> So I have changed "x" with j on iz file since "x" is used across the agda files for var and is creating a problem once I import any file.
04.09.18 05:50:27<nilli[m]> it is interesting to note that for the eq file that did not mattered since the j is behaving like a var while ff and tt are not. for  j as is for x  ~~x==x
04.09.18 05:51:26<nilli[m]> I think that is why instinctively i insisted (with my self lol) to use the x as the third truth value.
04.09.18 05:52:17<nilli[m]> now that I understand it (understand myself) I can change it since is less work once dealing with other agda files import
04.09.18 05:53:13<nilli[m]> did I say all ready that I have real fun playing with that?
04.09.18 08:17:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
04.09.18 08:17:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.09.18 09:04:20<nilli[m]> so for now I left the nat-iz  file as nat is, only  changing "Bool" with "iz"  and was loading alright. 
04.09.18 09:13:56<nilli[m]> So HMCf for your question how is iz different from bool . there is no difference when we have any set implies  iz , other then "iz" implies "iz"  (for now of, I will have to check with all the other datatype sets on agda )
04.09.18 13:08:24<editable-dog>stoopkid: voice, about this time tomorrow?
04.09.18 16:04:56<stoopkid> editable-dog: sure
05.09.18 05:24:59<koo5[m]> https://www.sciencedirect.com/science/article/pii/S0004370211000397
06.09.18 07:44:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yznbogdfmxkyskmk) left #autonomic-dev: Ping timeout: 252 seconds
06.09.18 07:47:12*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kktqutckiapovmac, stoopkid: stoopkid)
06.09.18 17:46:47*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Remote host closed the connection
06.09.18 17:47:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.09.18 19:53:03*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kktqutckiapovmac) left #autonomic-dev: Quit: Connection closed for inactivity
06.09.18 20:35:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 252 seconds
06.09.18 20:42:42*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fhvhfmicfskfihlk, stoopkid: stoopkid)
06.09.18 20:42:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fhvhfmicfskfihlk) left #autonomic-dev: Excess Flood
06.09.18 20:43:11*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lzlzloppqxxgqbes, stoopkid: stoopkid)
06.09.18 20:48:10*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.09.18 22:47:16*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #autonomic-dev: Ping timeout: 246 seconds
07.09.18 05:47:24*** Quit: ditable-koo-olde (~user@167.88.171.233) left #autonomic-dev: Remote host closed the connection
07.09.18 23:43:05*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lzlzloppqxxgqbes) left #autonomic-dev: Quit: Connection closed for inactivity
07.09.18 23:49:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ouruuikdluihrwui, stoopkid: stoopkid)
08.09.18 02:23:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ouruuikdluihrwui) left #autonomic-dev: Quit: Connection closed for inactivity
08.09.18 10:15:20*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rjyobvxelagdmivj, stoopkid: stoopkid)
09.09.18 03:14:58*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rjyobvxelagdmivj) left #autonomic-dev: Quit: Connection closed for inactivity
09.09.18 12:53:56*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vubploacqsyjltju, stoopkid: stoopkid)
09.09.18 19:34:13*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #autonomic-dev: Ping timeout: 252 seconds
09.09.18 19:36:04*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
09.09.18 19:41:38*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #autonomic-dev: Ping timeout: 240 seconds
09.09.18 20:46:37*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
09.09.18 20:51:08*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #autonomic-dev: Ping timeout: 240 seconds
09.09.18 21:39:58*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
09.09.18 21:49:38*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #autonomic-dev: Ping timeout: 240 seconds
11.09.18 14:34:20*** Quit: HMCf (~root@37.153.110.58) left #autonomic-dev: Remote host closed the connection
11.09.18 14:54:22*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
13.09.18 10:53:38*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vubploacqsyjltju) left #autonomic-dev: Quit: Connection closed for inactivity
13.09.18 16:46:16*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lqgrecblngwxmfxv, stoopkid: stoopkid)
14.09.18 12:46:52<koo5[m]> I think at least my idea of skolemization wouldnt change anything
14.09.18 12:47:47<koo5[m]> ?L rdf:first ?X. ?L rdf:rest rdf:nil.
14.09.18 12:48:11<koo5[m]> Aka alll lists exist, aka (?X).
14.09.18 12:49:54<stoopkid> i cant tell yet, i'll think about it
14.09.18 12:50:30<koo5[m]> Either you allow both ?L and ?X to bind to random shit including nil, or you allow neither, or we have to come up with some new semantic like "first existential doesnt bind to random shit, second does"
14.09.18 12:50:42<koo5[m]> Cool
15.09.18 14:42:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lqgrecblngwxmfxv) left #autonomic-dev: Quit: Connection closed for inactivity
15.09.18 15:35:19*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gzdcpibnoluyccxw, stoopkid: stoopkid)
16.09.18 19:58:18*** Quit: HMCf (~root@37.153.110.58) left #autonomic-dev: Ping timeout: 240 seconds
16.09.18 19:58:25*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
17.09.18 08:14:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gzdcpibnoluyccxw) left #autonomic-dev: Quit: Connection closed for inactivity
17.09.18 10:55:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ggbecfzdpvjhetjb, stoopkid: stoopkid)
17.09.18 11:52:48*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
17.09.18 13:17:49*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #autonomic-dev: Ping timeout: 240 seconds
18.09.18 20:24:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ggbecfzdpvjhetjb) left #autonomic-dev: Quit: Connection closed for inactivity
18.09.18 21:56:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-sohitqglgtorcqko, stoopkid: stoopkid)
19.09.18 05:53:23*** Part: nilli[m] (nillimatri@gateway/shell/matrix.org/x-zhpenxgkeizxiezo) left #autonomic-dev: "User left"
20.09.18 16:26:13<editable-dog>stoopkid: still not feeling like getting involved?
20.09.18 16:34:50<stoopkid> in general no, but i'll still review what you've been working on and will think about the IRC bot
21.09.18 00:23:09*** Connecting...
21.09.18 00:23:16-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
21.09.18 00:23:24*** [906 from rajaniemi.freenode.net] editable-dog SASL authentication aborted
21.09.18 00:23:27*** Mode change: +RZi on editable-dog by editable-dog (server)
                 *** [sasl.login from editable-dog (~editable-@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 -NickServ- This nickname is registered. Please choose a different nickname, or identify via /msg NickServ identify <password>.
                 -NickServ- This nickname is registered. Please choose a different nickname, or identify via /msg NickServ identify <password>.
21.09.18 00:23:36*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 7 days 1 hour 19 minutes 5 seconds ago
21.09.18 00:23:37*** Names: editable-dog stoopkid HMCf koo5[m]
                 *** End of /NAMES list.
21.09.18 00:23:45-Server Notice- *** Notice -- TS for #webofneeds changed from 1537503716 to 1365151743
21.09.18 00:24:15-NickServ- You are now identified for editable-dog.
21.09.18 00:24:18-NickServ- You are already logged in as editable-dog.
21.09.18 01:43:51<editable-dog>still in search of a suitable triplestore...
21.09.18 01:44:23<editable-dog>with suitable api...
21.09.18 13:05:48*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-sohitqglgtorcqko) left #autonomic-dev: Quit: Connection closed for inactivity
21.09.18 14:01:48*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xtefnkqpahgddytj, stoopkid: stoopkid)
22.09.18 00:08:53*** Connecting...
#autonomic-dev> 22.09.18 05:41:20*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 8 days 6 hours 36 minutes 49 seconds ago
                 *** Names: editable-dog stoopkid koo5[m] HMCf
                 *** End of /NAMES list.
22.09.18 05:41:24-Server Notice- *** Notice -- TS for #webofneeds changed from 1537609172 to 1365151743
22.09.18 07:21:50*** Connecting...
#autonomic-dev> 22.09.18 16:59:01*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 8 days 17 hours 54 minutes 30 seconds ago
                 *** Names: editable-dog koom stoopkid HMCf koo5[m]
                 *** End of /NAMES list.
22.09.18 17:15:42*** Quit: koom (~sirdancea@89.24.57.233) left #autonomic-dev: Ping timeout: 252 seconds
22.09.18 17:30:45*** Join: koom (~sirdancea@89.24.57.233, sirdancealot: koo5)
22.09.18 17:31:17*** Quit: koom (~sirdancea@89.24.57.233) left #autonomic-dev: Read error: Connection reset by peer
23.09.18 12:35:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xtefnkqpahgddytj) left #autonomic-dev: Quit: Connection closed for inactivity
23.09.18 14:09:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yfqrskqlwekckojy, stoopkid: stoopkid)
23.09.18 14:10:57<stoopkid> koo5[m]: i'm gonna try to rekindle some of my motivation by playing around with some ontologies for atlas-project in agda
23.09.18 15:23:11<editable-dog>sounds like a plan
23.09.18 15:24:22<editable-dog>im gonna keep messing with triplestores, im still nowhere near finished
25.09.18 19:49:04*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yfqrskqlwekckojy) left #autonomic-dev: Quit: Connection closed for inactivity
27.09.18 12:09:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gfcyqkzvnwytwgfl, stoopkid: stoopkid)
27.09.18 12:54:12<editable-dog>stoopkid: sup
27.09.18 13:01:24<editable-dog>ive just ran into another funny issue with sparql
27.09.18 13:02:14<editable-dog>you cant make a query that returns rdf list elements in oredr
27.09.18 13:02:15<editable-dog>order
27.09.18 13:02:28<editable-dog>oredr works
27.09.18 17:48:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gfcyqkzvnwytwgfl) left #autonomic-dev: Quit: Connection closed for inactivity
27.09.18 18:01:12*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cevefydvarkarubo, stoopkid: stoopkid)
28.09.18 01:58:37<stoopkid> editable-dog: ouch
28.09.18 04:27:22<koo5[m]> Hopefully i found an extension that works
28.09.18 04:27:35<koo5[m]> Theres just 0 docs
28.09.18 04:27:56<koo5[m]> I can only hope or try to find the source
28.09.18 04:28:44<koo5[m]> Now the server randomly crashes with out of memory exception
28.09.18 04:31:33<koo5[m]> Meanwhile, theres still something wrong with my queries or the results or my logic, so im still not getting right visualizations
29.09.18 06:52:22*** Connecting...
                 -Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
                 *** Nick name in use: editable-dog
29.09.18 06:52:31*** [sasl.login from ditable-doge (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
29.09.18 06:52:35*** Mode change: +RZi on ditable-doge by ditable-doge (server)
29.09.18 06:52:39-NickServ- editable-dog has been ghosted.
                 *** [nickserv.ghosted from nil] 
29.09.18 06:52:49*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 15 days 7 hours 48 minutes 17 seconds ago
                 *** Names: ditable-doge stoopkid HMCf koo5[m]
                 *** End of /NAMES list.
29.09.18 06:53:28*** [nickserv.regained from nil] 
                 *** Nick change: You are now known as editable-dog
29.09.18 21:05:03*** Join: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca, (unauthenticated): deadhand)
01.10.18 23:48:48*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cevefydvarkarubo) left #autonomic-dev: Quit: Connection closed for inactivity
02.10.18 06:50:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hesdsxupthszrjue, stoopkid: stoopkid)
02.10.18 15:40:06*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hesdsxupthszrjue) left #autonomic-dev: Quit: Connection closed for inactivity
02.10.18 17:54:21*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni, stoopkid: stoopkid)
02.10.18 22:53:12*** Connecting...
02.10.18 22:53:45*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 18 days 23 hours 49 minutes 13 seconds ago
                 *** Names: editable-dog stoopkid Deadhand HMCf koo5[m]
                 *** End of /NAMES list.
02.10.18 22:58:24*** Connecting...
02.10.18 22:58:51*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 18 days 23 hours 54 minutes 20 seconds ago
                 *** Names: editable-dog stoopkid Deadhand HMCf koo5[m]
                 *** End of /NAMES list.
03.10.18 03:34:45*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni, stoopkid: stoopkid)
03.10.18 04:29:17*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni, stoopkid: stoopkid)
03.10.18 05:07:48*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni, stoopkid: stoopkid)
03.10.18 09:16:18*** Connecting...
03.10.18 09:17:07*** Disconnected
03.10.18 09:17:08*** Connecting...
03.10.18 09:18:01*** Disconnected
                 *** Connecting...
03.10.18 09:18:33*** Disconnected
                 *** Connecting...
03.10.18 09:19:07*** Disconnected
                 *** Connecting...
03.10.18 09:19:40*** Disconnected
                 *** Connecting...
03.10.18 09:20:31*** Disconnected
#autonomic-dev> 03.10.18 09:52:59*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 19 days 10 hours 48 minutes 27 seconds ago
                 *** Names: editable-dog stoopkid Deadhand koo5[m] HMCf
                 *** End of /NAMES list.
04.10.18 01:26:30*** Connecting...
04.10.18 01:26:49*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 20 days 2 hours 22 minutes 17 seconds ago
                 *** Names: editable-dog stoopkid Deadhand HMCf koo5[m]
                 *** End of /NAMES list.
04.10.18 08:41:58*** Connecting...
04.10.18 08:42:22*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
04.10.18 08:42:23*** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 20 days 9 hours 37 minutes 51 seconds ago
                 *** Names: editable-dog stoopkid Deadhand koo5[m] HMCf
                 *** End of /NAMES list.
04.10.18 08:56:59*** Connecting...
04.10.18 08:57:21*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 20 days 9 hours 52 minutes 50 seconds ago
04.10.18 08:57:22*** Names: editable-dog stoopkid Deadhand HMCf koo5[m]
                 *** End of /NAMES list.
04.10.18 09:50:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni) left #autonomic-dev: Quit: Connection closed for inactivity
04.10.18 10:55:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-stbadznbnojtqwce, stoopkid: stoopkid)
04.10.18 20:28:02*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca) left #autonomic-dev: Ping timeout: 245 seconds
04.10.18 22:37:36*** Join: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca, (unauthenticated): deadhand)
04.10.18 22:49:29*** Connecting...
04.10.18 22:49:49*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 20 days 23 hours 45 minutes 18 seconds ago
                 *** Names: editable-dog Deadhand stoopkid koo5[m] HMCf
                 *** End of /NAMES list.
04.10.18 23:00:45*** Connecting...
04.10.18 23:01:13*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 20 days 23 hours 56 minutes 42 seconds ago
04.10.18 23:01:14*** Names: editable-dog Deadhand stoopkid koo5[m] HMCf
                 *** End of /NAMES list.
#autonomic-dev> 05.10.18 05:52:43*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 21 days 6 hours 48 minutes 12 seconds ago
                 *** Names: editable-dog stoopkid Deadhand HMCf koo5[m]
                 *** End of /NAMES list.
07.10.18 00:29:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-pnygysffnkopzwiu) left #autonomic-dev: Quit: Connection closed for inactivity
07.10.18 00:58:47*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lkdkwbucsyxfntci, stoopkid: stoopkid)
08.10.18 07:49:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lkdkwbucsyxfntci) left #autonomic-dev: Quit: Connection closed for inactivity
08.10.18 12:27:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gtpoirhwrosvzjcj, stoopkid: stoopkid)
09.10.18 21:43:46*** Join: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca, (unauthenticated): deadhand)
09.10.18 21:45:38*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gtpoirhwrosvzjcj, stoopkid: stoopkid)
09.10.18 21:46:55*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pynlhrfrioavrnyy, (unauthenticated): @koo5:matrix.org)
10.10.18 07:36:49*** Topic for #autonomic-dev: chat logs: http://167.88.171.233/logs/AutoNomic-dev.log
                 *** Topic set by stoopkid on Wed May 16 23:04:32 2018, 4 months 26 days 8 hours 32 minutes 18 seconds ago
10.10.18 07:37:06*** No such channel: test
10.10.18 07:37:18*** Topic change by ~editable-@104.168.57.22: chat logs: http://167.88.171.233/logs/AutoNomic-dev.logtest
10.10.18 07:37:31*** Recognized commands are: /AWAY /BACK /CHTOPIC /CLEAR /CTCP /FOOL /GAWAY /GQUIT /HELP /IGNORE /INVITE /JOIN /ME /MSG /NAMES /NICK /PART /PING /QUERY /QUIT /QUOTE /SAY /STATS /SV /TOPIC /UNFOOL /UNIGNORE /WHOAMI /WHOIS /WHOWAS /WL 
10.10.18 07:38:08*** Topic for #autonomic-dev: test
                 *** Topic set by editable-dog on Wed Oct 10 07:37:18 2018, 51 seconds ago
10.10.18 07:39:57*** No such channel: instead
10.10.18 07:40:28*** Topic change by ~editable-@104.168.57.22: testinstead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
10.10.18 12:19:17*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gtpoirhwrosvzjcj) left #autonomic-dev: Quit: Connection closed for inactivity
10.10.18 14:25:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uqrtacgbltrspeda, stoopkid: stoopkid)
10.10.18 21:37:57*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pynlhrfrioavrnyy) left #autonomic-dev: Ping timeout: 252 seconds
10.10.18 21:45:59*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-qrttcdpuyzxqqsfm, (unauthenticated): @koo5:matrix.org)
12.10.18 00:06:16*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca) left #autonomic-dev: Ping timeout: 244 seconds
12.10.18 00:08:43*** Join: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca, (unauthenticated): deadhand)
12.10.18 02:33:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uqrtacgbltrspeda) left #autonomic-dev: Quit: Connection closed for inactivity
13.10.18 22:04:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bwicpobbuyvbmtzf, stoopkid: stoopkid)
15.10.18 06:08:39*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bwicpobbuyvbmtzf) left #autonomic-dev: Quit: Connection closed for inactivity
15.10.18 19:58:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nntdigwhvnrcogoy, stoopkid: stoopkid)
16.10.18 03:45:35*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nntdigwhvnrcogoy) left #autonomic-dev: Quit: Connection closed for inactivity
16.10.18 08:15:45*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vxczfbsgbtxkhpzs, stoopkid: stoopkid)
16.10.18 10:25:14*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vxczfbsgbtxkhpzs) left #autonomic-dev: Quit: Connection closed for inactivity
16.10.18 13:16:20*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-zpqmasiddyzfcjmt, stoopkid: stoopkid)
17.10.18 02:05:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zpqmasiddyzfcjmt) left #autonomic-dev: Quit: Connection closed for inactivity
17.10.18 09:23:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tbhxtaciexccjdme, stoopkid: stoopkid)
17.10.18 23:17:46*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tbhxtaciexccjdme) left #autonomic-dev: Quit: Connection closed for inactivity
18.10.18 12:15:50*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-amoelgqbwsqrzrec, stoopkid: stoopkid)
19.10.18 14:44:40*** Join: koom (~koom@89-24-57-254.nat.epc.tmcz.cz, (unauthenticated): realname)
19.10.18 14:44:50<koom> what kind of calculus?
19.10.18 14:46:35<stoopkid> calculations about smoothly-curved surfaces
19.10.18 14:47:35<koom> heh, thats probably gonna be beyond me
19.10.18 14:49:06<koom> re the pdf, i have no idea what goes on in there. As on pyin, i'm ready whenever, just not sure how to begin
19.10.18 14:50:43<stoopkid> could you potentially work it down to a short pseudocode of the main part of the inferencing and then point me to which pieces of code implement which part of the pseudocode?
19.10.18 14:52:17<koom> do you want to understand how pyin works or how existentials there work?
19.10.18 14:52:34<koom> because pyin semantically hopefully copies univar
19.10.18 14:55:29<stoopkid> mainly just the existentials and then hopefully i'll see the rest while i'm going over the code
19.10.18 15:34:28<koom> so, ive interspersed the comments in pyin, but the order of the code doesnt follow the logic much, so you'll need to jump around
19.10.18 15:34:40<koom> look for "doc:"
19.10.18 17:52:03<koom> what exactly constitues the surfaces calculus?
19.10.18 18:38:36<stoopkid> it's basically about infinite limits
19.10.18 18:40:09<stoopkid> like you can think of a smoothly-curved surface as being the result you get after following a process of better-and-better approximations using non-curved surfaces with higher and higher precision, out to the infinite limit of this process
19.10.18 18:41:33<stoopkid> so you can compute areas of smoothly-curved shapes, compute the slope of a curve at a point, and do your math over these limits
19.10.18 18:43:49<stoopkid> so calculus is essentially a set of tools for letting you work with expressions & equations that involve limits
19.10.18 18:58:41<koom> mm
19.10.18 19:09:03*** Quit: koom (~koom@89-24-57-254.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
19.10.18 19:18:18<stoopkid> https://en.wikipedia.org/wiki/Integral#Interpretations_of_the_integral
19.10.18 19:18:44<stoopkid> https://en.wikipedia.org/wiki/Derivative
19.10.18 23:18:26*** Join: koom (~koom@89-24-61-16.nat.epc.tmcz.cz, (unauthenticated): realname)
19.10.18 23:25:09*** Quit: koom (~koom@89-24-61-16.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
19.10.18 23:44:48<koo5[m]> I never learned that
20.10.18 14:24:09<stoopkid> koo5[m]: well, i'm starting all the way back from the basics anyway, definitions of limits, proof of pythagorean theorem & basic geometric concepts etc...
20.10.18 14:51:19<koo5[m]> Well, id check it out
20.10.18 15:09:18<editable-dog>i could use some help with making the new cppout cleaner than the old
20.10.18 15:09:45<editable-dog>like...i wrote it in a very proof-of-concept-ish style
20.10.18 15:10:26<editable-dog>so weighting how scary it looks and how i already have a nice system of input preprocessing in pyin, i rather decided for a rewrite than digging into it
20.10.18 15:11:07<editable-dog>im trying to write it better but i still could use ideas 
21.10.18 23:06:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-amoelgqbwsqrzrec) left #autonomic-dev: Quit: Connection closed for inactivity
22.10.18 07:04:07*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ijvczppkgnbtojyg, stoopkid: stoopkid)
22.10.18 08:30:42<stoopkid> editable-dog: after today ill have some more time to check it out
22.10.18 18:39:48<HMCf> ^ the story of my life
23.10.18 01:47:51<HMCf> redtt's new rot serialization format is interesting
23.10.18 01:48:01<HMCf> and it is fast now!
23.10.18 01:48:35<HMCf> (since it isn't constantly re-typechecking stdlibs)
23.10.18 01:51:08<stoopkid> i'll check it out at some point, how's their documentation these days
23.10.18 01:54:02<HMCf> still mostly in their github issues and whitepapers, heh...
23.10.18 01:54:05<HMCf> but
23.10.18 01:55:10<HMCf> since it is meant to be a small core language, it is pretty easy to follow what is going on
23.10.18 01:57:02<HMCf> there are some fun proofs landing in the stdlib :-)
23.10.18 02:10:00<HMCf> redtt is also getting a "run shell command" module loader... for stuff like bounded/unbounded reasoner from the outside to provide proofing
23.10.18 02:11:44<HMCf> (and everything is hashed to ensure things are either side-effect free or result in distinct module loads)
23.10.18 02:11:52<HMCf> *or else
23.10.18 02:12:07<HMCf> which is going to be good fun, heh
23.10.18 14:43:17<editable-dog>stoopkid: do you remember the command for dumping the wiki db?
23.10.18 14:43:21<editable-dog>im taking down the old vps
23.10.18 14:43:31<editable-dog>cant find it 
23.10.18 14:43:40*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ijvczppkgnbtojyg) left #autonomic-dev: Quit: Connection closed for inactivity
23.10.18 14:48:26<editable-dog>nvm, i copied the db dir
23.10.18 15:38:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-inkfzkudqhbfkvij, stoopkid: stoopkid)
25.10.18 11:33:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-inkfzkudqhbfkvij) left #autonomic-dev: Quit: Connection closed for inactivity
25.10.18 11:59:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tuoizevwgdlplnli, stoopkid: stoopkid)
25.10.18 15:14:06*** Join: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
25.10.18 16:22:07*** Quit: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 240 seconds
26.10.18 08:35:13*** Join: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
26.10.18 08:53:44*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
26.10.18 08:56:11*** Quit: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 246 seconds
26.10.18 12:52:07*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 240 seconds
26.10.18 20:23:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tuoizevwgdlplnli) left #autonomic-dev: Quit: Connection closed for inactivity
26.10.18 20:43:47*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cropggbfdbruuxbq, stoopkid: stoopkid)
27.10.18 12:57:43*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
27.10.18 13:05:42*** Join: koom__ (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
27.10.18 13:08:21*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
27.10.18 17:30:14*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
27.10.18 17:32:40*** Quit: koom__ (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 246 seconds
27.10.18 21:30:54*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 246 seconds
28.10.18 03:51:58*** Join: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
28.10.18 04:13:08*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
28.10.18 04:14:47*** Quit: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 240 seconds
28.10.18 04:28:39*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Remote host closed the connection
28.10.18 04:28:58*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
28.10.18 19:11:51*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 246 seconds
29.10.18 02:03:37*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
29.10.18 11:57:12*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
29.10.18 12:41:33*** Join: koom (~sirdancea@37-48-16-232.nat.epc.tmcz.cz, sirdancealot: koo5)
29.10.18 12:51:06*** Quit: koom (~sirdancea@37-48-16-232.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
29.10.18 16:55:08*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
29.10.18 23:27:27*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
30.10.18 14:24:24*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
30.10.18 21:25:07*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 240 seconds
31.10.18 04:48:43*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
31.10.18 05:13:28*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-qrttcdpuyzxqqsfm) left #autonomic-dev: Remote host closed the connection
31.10.18 05:23:22*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-wlmajuhgpivwbdux, (unauthenticated): @koo5:matrix.org)
31.10.18 07:16:38*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 250 seconds
31.10.18 13:24:30*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
31.10.18 18:01:32*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 244 seconds
01.11.18 06:44:41*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
01.11.18 08:52:06*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
01.11.18 15:00:35*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
01.11.18 15:24:32*** Join: kook (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
01.11.18 15:27:00*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 244 seconds
01.11.18 18:20:17*** Connecting...
#autonomic-dev> 01.11.18 18:35:14*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 22 days 10 hours 54 minutes 46 seconds ago
                 *** Names: editable-dog kook koo5[m] stoopkid Deadhand HMCf
                 *** End of /NAMES list.
01.11.18 20:55:21*** Quit: kook (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
02.11.18 06:51:31*** Join: koom (~sirdancea@130.200.broadband13.iol.cz, sirdancealot: koo5)
02.11.18 07:36:17*** Quit: koom (~sirdancea@130.200.broadband13.iol.cz) left #autonomic-dev: Remote host closed the connection
03.11.18 06:33:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cropggbfdbruuxbq) left #autonomic-dev: Quit: Connection closed for inactivity
03.11.18 09:38:40*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qikntxesxmzrsxut, stoopkid: stoopkid)
04.11.18 10:18:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qikntxesxmzrsxut) left #autonomic-dev: Quit: Connection closed for inactivity
04.11.18 14:26:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tguxmedaovmsnpwk, stoopkid: stoopkid)
04.11.18 16:28:12*** Join: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
04.11.18 19:09:07*** Quit: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 240 seconds
05.11.18 03:03:55*** Join: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz, sirdancealot: koo5)
05.11.18 06:42:19*** Quit: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 244 seconds
05.11.18 09:30:52*** Join: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz, sirdancealot: koo5)
05.11.18 12:09:06*** Quit: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
05.11.18 13:47:46*** Join: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz, sirdancealot: koo5)
05.11.18 16:20:28*** Quit: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 245 seconds
05.11.18 21:18:18*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-wlmajuhgpivwbdux) left #autonomic-dev: Ping timeout: 276 seconds
05.11.18 21:45:28*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vgkdeajoxxpziaxq, (unauthenticated): @koo5:matrix.org)
05.11.18 22:39:04*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vgkdeajoxxpziaxq) left #autonomic-dev: Ping timeout: 252 seconds
05.11.18 23:34:58*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-xefyhvqxbxsjkrwl, (unauthenticated): @koo5:matrix.org)
06.11.18 17:21:28*** Join: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz, sirdancealot: koo5)
06.11.18 17:28:22*** Quit: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 246 seconds
08.11.18 09:38:08*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tguxmedaovmsnpwk) left #autonomic-dev: Quit: Connection closed for inactivity
08.11.18 13:29:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lpxjelkduwtmnniz, stoopkid: stoopkid)
12.11.18 10:59:25*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lpxjelkduwtmnniz) left #autonomic-dev: Quit: Connection closed for inactivity
12.11.18 13:33:21*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-snegoqfcjnviyxye, stoopkid: stoopkid)
13.11.18 02:30:40*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca) left #autonomic-dev: Ping timeout: 252 seconds
13.11.18 02:37:13*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-104-223.dsl.bell.ca, (unauthenticated): deadhand)
14.11.18 08:00:35*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-snegoqfcjnviyxye) left #autonomic-dev: Quit: Connection closed for inactivity
14.11.18 10:56:33*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bjwlppfewkjluqde, stoopkid: stoopkid)
17.11.18 07:36:29*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bjwlppfewkjluqde) left #autonomic-dev: Quit: Connection closed for inactivity
17.11.18 11:50:59*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qhdcxuhayphyypyx, stoopkid: stoopkid)
#autonomic-dev> 23.11.18 01:24:24*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 1 month 13 days 18 hours 43 minutes 56 seconds ago
                 *** Names: editable-dog stoopkid Deadhand koo5[m] HMCf
                 *** End of /NAMES list.
24.11.18 00:43:37*** Join: koom (~koom@37-48-16-99.nat.epc.tmcz.cz, (unauthenticated): realname)
24.11.18 03:30:39*** Quit: koom (~koom@37-48-16-99.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 252 seconds
24.11.18 11:18:07*** Join: koom (~koom@37-48-16-99.nat.epc.tmcz.cz, (unauthenticated): realname)
24.11.18 15:18:37*** Quit: koom (~koom@37-48-16-99.nat.epc.tmcz.cz) left #autonomic-dev: Remote host closed the connection
24.11.18 15:19:02*** Join: koom (~koom@37-48-16-99.nat.epc.tmcz.cz, (unauthenticated): realname)
25.11.18 07:07:46*** Quit: koom (~koom@37-48-16-99.nat.epc.tmcz.cz) left #autonomic-dev: Ping timeout: 272 seconds
25.11.18 08:49:34*** Join: koom (~koom@80.188.154.132, (unauthenticated): realname)
25.11.18 09:13:54*** Quit: koom (~koom@80.188.154.132) left #autonomic-dev: Quit: Leaving
25.11.18 19:00:27*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-xefyhvqxbxsjkrwl) left #autonomic-dev: Read error: Connection reset by peer
25.11.18 19:08:57*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pdwbetlpkksycrkp, (unauthenticated): @koo5:matrix.org)
25.11.18 20:08:00*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-104-223.dsl.bell.ca) left #autonomic-dev: Ping timeout: 252 seconds
25.11.18 20:15:11*** Join: Deadhandd (~deadhand@kntaon1614w-lp140-05-64-231-104-223.dsl.bell.ca, (unauthenticated): deadhand)
26.11.18 04:18:11*** Join: stoopkid_ (uid137696@gateway/web/irccloud.com/x-wxulffcmmsmabbqs, (unauthenticated): stoopkid)
26.11.18 16:41:21*** Quit: stoopkid_ (uid137696@gateway/web/irccloud.com/x-wxulffcmmsmabbqs) left #autonomic-dev: 
26.11.18 16:41:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mnezppmvdqpimszb, stoopkid: stoopkid)
27.11.18 04:05:07*** Join: imode (~imode@unaffiliated/imode, imode: imode)
27.11.18 08:08:28*** Quit: imode (~imode@unaffiliated/imode) left #autonomic-dev: Ping timeout: 268 seconds
27.11.18 13:54:06*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pdwbetlpkksycrkp) left #autonomic-dev: Read error: Connection reset by peer
27.11.18 14:12:40*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-smmpzlgcoabamruv, (unauthenticated): @koo5:matrix.org)
27.11.18 14:47:48*** Join: imode (~imode@unaffiliated/imode, imode: imode)
27.11.18 14:56:51*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-smmpzlgcoabamruv) left #autonomic-dev: Remote host closed the connection
27.11.18 15:04:06*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-todtkobmalwpifey, (unauthenticated): @koo5:matrix.org)
27.11.18 15:30:45*** Quit: imode (~imode@unaffiliated/imode) left #autonomic-dev: Quit: WeeChat 2.3
28.11.18 10:50:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mnezppmvdqpimszb) left #autonomic-dev: Quit: Connection closed for inactivity
28.11.18 12:58:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wzrmshgspsavwnmw, stoopkid: stoopkid)
29.11.18 04:57:26*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wzrmshgspsavwnmw) left #autonomic-dev: Quit: Connection closed for inactivity
29.11.18 07:58:33*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rqonmmqbsdtaqbuz, stoopkid: stoopkid)
29.11.18 10:38:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rqonmmqbsdtaqbuz) left #autonomic-dev: Quit: Connection closed for inactivity
29.11.18 12:19:38*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bjqcynvlbumpgbdk, stoopkid: stoopkid)
05.12.18 05:39:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bjqcynvlbumpgbdk) left #autonomic-dev: Quit: Connection closed for inactivity
05.12.18 13:01:43*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-zmjchcttxifawtxf, stoopkid: stoopkid)
07.12.18 09:04:16*** Quit: Deadhandd (~deadhand@kntaon1614w-lp140-05-64-231-104-223.dsl.bell.ca) left #autonomic-dev: Ping timeout: 264 seconds
07.12.18 16:36:22*** Join: Deadhandd (~deadhand@kntaon1614w-grc-08-64-231-104-223.dsl.bell.ca, (unauthenticated): deadhand)
08.12.18 06:21:10*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zmjchcttxifawtxf) left #autonomic-dev: Quit: Connection closed for inactivity
08.12.18 16:39:31*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kidkntjtcosufmmn, stoopkid: stoopkid)
09.12.18 18:18:03*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kidkntjtcosufmmn) left #autonomic-dev: Quit: Connection closed for inactivity
09.12.18 19:01:55*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lmdzmxvwsvurgywh, stoopkid: stoopkid)
10.12.18 06:13:34*** Join: Guest82280 (9d31d30a@gateway/web/freenode/ip.157.49.211.10, (unauthenticated): 157.49.211.10 - http://webchat.freenode.net)
10.12.18 06:24:49*** Quit: Guest82280 (9d31d30a@gateway/web/freenode/ip.157.49.211.10) left #autonomic-dev: Ping timeout: 256 seconds
#autonomic-dev> 13.12.18 01:33:34*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 2 months 3 days 18 hours 53 minutes 7 seconds ago
                 *** Names: editable-dog Deadhandd koo5[m] HMCf
                 *** End of /NAMES list.
#autonomic-dev> 13.12.18 01:34:57*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 2 months 3 days 18 hours 54 minutes 30 seconds ago
                 *** Names: editable-dog Deadhandd koo5[m] HMCf
                 *** End of /NAMES list.
13.12.18 04:04:16*** Quit: Deadhandd (~deadhand@kntaon1614w-grc-08-64-231-104-223.dsl.bell.ca) left #autonomic-dev: Ping timeout: 264 seconds
13.12.18 04:06:57*** Join: Deadhand (~deadhand@kntaon1614w-grc-03-70-51-85-88.dsl.bell.ca, (unauthenticated): deadhand)
#autonomic-dev> 13.12.18 06:15:02*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 2 months 3 days 23 hours 34 minutes 35 seconds ago
13.12.18 06:15:03*** Names: editable-dog Deadhand koo5[m] HMCf
                 *** End of /NAMES list.
13.12.18 08:08:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bwgtanxlgtspocdt, stoopkid: stoopkid)
14.12.18 03:27:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bwgtanxlgtspocdt) left #autonomic-dev: Quit: Connection closed for inactivity
14.12.18 13:25:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes, stoopkid: stoopkid)
15.12.18 02:40:09*** Nick change: stoopkid (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes) is now known as Panzerwagener
15.12.18 06:15:18*** Nick regain: Panzerwagener (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes) is now known as stoopkid
15.12.18 21:26:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes) left #autonomic-dev: Quit: Connection closed for inactivity
15.12.18 22:44:38*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ietgoypnouvlthcu, stoopkid: stoopkid)
16.12.18 00:56:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ietgoypnouvlthcu) left #autonomic-dev: Quit: Connection closed for inactivity
16.12.18 07:34:50*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-maeebayinxexkulp, stoopkid: stoopkid)
18.12.18 14:44:14*** Connecting...
18.12.18 14:44:35*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 2 months 9 days 8 hours 4 minutes 8 seconds ago
                 *** Names: editable-dog stoopkid Deadhand koo5[m] HMCf
                 *** End of /NAMES list.
20.12.18 16:03:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-maeebayinxexkulp) left #autonomic-dev: Quit: Connection closed for inactivity
20.12.18 17:19:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fodefpojcwzpmfog, stoopkid: stoopkid)
21.12.18 01:53:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fodefpojcwzpmfog) left #autonomic-dev: Quit: Connection closed for inactivity
21.12.18 07:34:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qakppefbmujnfvlz, stoopkid: stoopkid)
22.12.18 02:53:31*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qakppefbmujnfvlz) left #autonomic-dev: Quit: Connection closed for inactivity
22.12.18 08:02:57*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xqlaavgxnlhdturu, stoopkid: stoopkid)
23.12.18 04:02:32*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xqlaavgxnlhdturu) left #autonomic-dev: Quit: Connection closed for inactivity
23.12.18 09:19:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bwehpxlcweksmqnb, stoopkid: stoopkid)
24.12.18 07:38:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bwehpxlcweksmqnb) left #autonomic-dev: Quit: Connection closed for inactivity
24.12.18 07:56:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ibnvnyoqmrsylmxz, stoopkid: stoopkid)
25.12.18 04:38:18*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ibnvnyoqmrsylmxz) left #autonomic-dev: Quit: Connection closed for inactivity
25.12.18 09:30:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mucssfrhnxwnjwqf, stoopkid: stoopkid)
26.12.18 01:59:30*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mucssfrhnxwnjwqf) left #autonomic-dev: Quit: Connection closed for inactivity
26.12.18 08:07:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nqknfejzwgzexhsg, stoopkid: stoopkid)
27.12.18 07:26:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nqknfejzwgzexhsg) left #autonomic-dev: Quit: Connection closed for inactivity
27.12.18 16:53:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-pspeedlutibdwlxd, stoopkid: stoopkid)
27.12.18 20:27:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-pspeedlutibdwlxd) left #autonomic-dev: Quit: Connection closed for inactivity
27.12.18 21:16:58*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-noilmfgugexqaoiw, stoopkid: stoopkid)
29.12.18 09:27:53*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-noilmfgugexqaoiw) left #autonomic-dev: Quit: Connection closed for inactivity
29.12.18 14:40:48*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lddixjnuupdhosio, stoopkid: stoopkid)
31.12.18 08:28:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lddixjnuupdhosio) left #autonomic-dev: Quit: Connection closed for inactivity
31.12.18 10:12:34*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xvxykhtxxkcwnunc, stoopkid: stoopkid)
03.01.19 00:35:29*** Disconnected
03.01.19 00:35:30*** Connecting...
03.01.19 00:35:53*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
03.01.19 00:35:54*** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 2 months 24 days 17 hours 55 minutes 27 seconds ago
                 *** Names: editable-dog stoopkid Deadhand koo5[m] HMCf
                 *** End of /NAMES list.
05.01.19 02:38:55*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xvxykhtxxkcwnunc) left #autonomic-dev: Quit: Connection closed for inactivity
05.01.19 05:56:51*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-todtkobmalwpifey) left #autonomic-dev: Remote host closed the connection
05.01.19 06:07:50*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-endbodbrrurkxdej, (unauthenticated): @koo5:matrix.org)
05.01.19 11:00:19*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jgabdpcadfkgdgjd, stoopkid: stoopkid)
06.01.19 02:29:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jgabdpcadfkgdgjd) left #autonomic-dev: Quit: Connection closed for inactivity
06.01.19 21:20:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-znhwhzhgrxvqiuok, stoopkid: stoopkid)
07.01.19 23:14:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-znhwhzhgrxvqiuok) left #autonomic-dev: Quit: Connection closed for inactivity
08.01.19 10:30:19*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dvggvlfsesubonno, stoopkid: stoopkid)
09.01.19 03:42:53*** Quit: Deadhand (~deadhand@kntaon1614w-grc-03-70-51-85-88.dsl.bell.ca) left #autonomic-dev: Ping timeout: 244 seconds
09.01.19 03:49:29*** Join: Deadhand (~deadhand@kntaon1614w-grc-11-76-66-96-100.dsl.bell.ca, (unauthenticated): deadhand)
#autonomic-dev> 09.01.19 04:09:31*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
09.01.19 04:09:32*** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 3 months 21 hours 29 minutes 4 seconds ago
                 *** Names: editable-dog Deadhand stoopkid koo5[m] HMCf
                 *** End of /NAMES list.
11.01.19 15:45:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dvggvlfsesubonno) left #autonomic-dev: Quit: Connection closed for inactivity
11.01.19 16:10:56*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xlmwxpymrzifvrjs, stoopkid: stoopkid)
#autonomic-dev> 12.01.19 00:13:41*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 3 months 3 days 17 hours 33 minutes 13 seconds ago
                 *** Names: editable-dog stoopkid Deadhand koo5[m] HMCf
                 *** End of /NAMES list.
16.01.19 04:05:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xlmwxpymrzifvrjs) left #autonomic-dev: Quit: Connection closed for inactivity
16.01.19 10:12:12*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jccstxogekcxhdxq, stoopkid: stoopkid)
16.01.19 21:44:46*** Join: Deadhandd (~deadhand@kntaon1614w-grc-11-76-66-96-100.dsl.bell.ca, (unauthenticated): deadhand)
17.01.19 04:31:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jccstxogekcxhdxq) left #autonomic-dev: Quit: Connection closed for inactivity
17.01.19 07:46:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vtomzjfbvzgekfib, stoopkid: stoopkid)
17.01.19 10:32:56*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-endbodbrrurkxdej) left #autonomic-dev: Ping timeout: 264 seconds
17.01.19 10:34:40*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-cizvickqfeapuchf, (unauthenticated): @koo5:matrix.org)
#autonomic-dev> 18.01.19 13:06:51*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 3 months 10 days 6 hours 26 minutes 24 seconds ago
                 *** Names: editable-dog stoopkid koo5[m] HMCf Deadhandd
                 *** End of /NAMES list.
19.01.19 18:46:52*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fcyjqxwvxctxwdab) left #autonomic-dev: Quit: Connection closed for inactivity
19.01.19 23:45:59*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wilvlbsfxgqesjnx, stoopkid: stoopkid)
20.01.19 08:55:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wilvlbsfxgqesjnx) left #autonomic-dev: Quit: Connection closed for inactivity
20.01.19 12:51:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dnwljzdvjrwcbiiw, stoopkid: stoopkid)
#autonomic-dev> 21.01.19 15:44:54*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 3 months 13 days 9 hours 4 minutes 26 seconds ago
                 *** Names: editable-dog stoopkid koo5[m] Deadhandd HMCf
                 *** End of /NAMES list.
#autonomic-dev> 21.01.19 15:51:50*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 3 months 13 days 9 hours 11 minutes 22 seconds ago
                 *** Names: editable-dog stoopkid koo5[m] Deadhandd HMCf
                 *** End of /NAMES list.
#autonomic-dev> 21.01.19 15:53:36*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 3 months 13 days 9 hours 13 minutes 8 seconds ago
                 *** Names: editable-dog stoopkid koo5[m] Deadhandd HMCf
                 *** End of /NAMES list.
#autonomic-dev> 21.01.19 15:59:56*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 3 months 13 days 9 hours 19 minutes 29 seconds ago
                 *** Names: editable-dog stoopkid koo5[m] Deadhandd HMCf
                 *** End of /NAMES list.
24.01.19 06:54:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dnwljzdvjrwcbiiw) left #autonomic-dev: Quit: Connection closed for inactivity
24.01.19 10:02:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rdxzoaomwcfxqzug, stoopkid: stoopkid)
24.01.19 15:01:35*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rdxzoaomwcfxqzug) left #autonomic-dev: Quit: Connection closed for inactivity
24.01.19 18:23:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-thtwlwwwoiovmgfu, stoopkid: stoopkid)
25.01.19 00:42:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-thtwlwwwoiovmgfu) left #autonomic-dev: Quit: Connection closed for inactivity
25.01.19 11:21:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vbfmaewcvqpfxtze, stoopkid: stoopkid)
26.01.19 20:10:29*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vbfmaewcvqpfxtze) left #autonomic-dev: Quit: Connection closed for inactivity
28.01.19 12:05:44*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uiotybabltahdgdz, stoopkid: stoopkid)
29.01.19 06:15:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uiotybabltahdgdz) left #autonomic-dev: Quit: Connection closed for inactivity
29.01.19 15:13:06*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gbtilukvepnkbwph, stoopkid: stoopkid)
30.01.19 05:12:39*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gbtilukvepnkbwph) left #autonomic-dev: Quit: Connection closed for inactivity
30.01.19 14:42:05*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mykrzlymsbstffyr, stoopkid: stoopkid)
01.02.19 04:46:23*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mykrzlymsbstffyr) left #autonomic-dev: Quit: Connection closed for inactivity
01.02.19 18:27:21*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uhyaavohlnovszfi, stoopkid: stoopkid)
02.02.19 05:56:13*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uhyaavohlnovszfi) left #autonomic-dev: Quit: Connection closed for inactivity
02.02.19 09:37:44*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dcbrmuqxkookxevc, stoopkid: stoopkid)
03.02.19 06:36:53*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dcbrmuqxkookxevc) left #autonomic-dev: Quit: Connection closed for inactivity
03.02.19 09:45:07*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hagymcnahjbonmgs, stoopkid: stoopkid)
03.02.19 15:47:34*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hagymcnahjbonmgs) left #autonomic-dev: Quit: Connection closed for inactivity
04.02.19 11:14:54*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kakdumrdqqalawyz, stoopkid: stoopkid)
06.02.19 16:10:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kakdumrdqqalawyz) left #autonomic-dev: Quit: Connection closed for inactivity
06.02.19 16:56:33*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cdfsrsihbdiooenv, stoopkid: stoopkid)
07.02.19 00:50:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cdfsrsihbdiooenv) left #autonomic-dev: Quit: Connection closed for inactivity
07.02.19 07:39:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fltwwyqwoxcpgawp, stoopkid: stoopkid)
07.02.19 10:11:17*** Connecting...
07.02.19 10:11:44*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 4 months 3 hours 31 minutes 17 seconds ago
                 *** Names: ditable-doge stoopkid koo5[m] HMCf Deadhandd
                 *** End of /NAMES list.
07.02.19 10:12:26*** Nick change: You are now known as editable-dog
07.02.19 23:18:05*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fltwwyqwoxcpgawp) left #autonomic-dev: Quit: Connection closed for inactivity
11.02.19 20:51:22*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-znaqfqatrzcoczou, stoopkid: stoopkid)
12.02.19 03:00:55*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-znaqfqatrzcoczou) left #autonomic-dev: Quit: Connection closed for inactivity
12.02.19 20:36:49*** Nick change: HMCf (~root@37.153.110.58) is now known as HMCb
13.02.19 16:38:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-beeqrtvernxwuqgu, stoopkid: stoopkid)
14.02.19 04:28:10*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-beeqrtvernxwuqgu) left #autonomic-dev: Quit: Connection closed for inactivity
14.02.19 12:39:28*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wkgwcykvuwenxtrl, stoopkid: stoopkid)
14.02.19 19:18:25*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wkgwcykvuwenxtrl) left #autonomic-dev: Quit: Connection closed for inactivity
14.02.19 22:59:11*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xvcsfdhrxjrayntk, stoopkid: stoopkid)
15.02.19 03:38:40*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xvcsfdhrxjrayntk) left #autonomic-dev: Quit: Connection closed for inactivity
15.02.19 12:12:38*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bthnkpqblzrrwioi, stoopkid: stoopkid)
16.02.19 10:14:23*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bthnkpqblzrrwioi) left #autonomic-dev: Quit: Connection closed for inactivity
16.02.19 12:20:28*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nuizzfogjrdimvvu, stoopkid: stoopkid)
16.02.19 15:02:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nuizzfogjrdimvvu) left #autonomic-dev: Quit: Connection closed for inactivity
19.02.19 13:51:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rgawxssbeaqnlcyu, stoopkid: stoopkid)
19.02.19 16:30:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rgawxssbeaqnlcyu) left #autonomic-dev: Quit: Connection closed for inactivity
21.02.19 00:28:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qnoccmiirmgjztti, stoopkid: stoopkid)
21.02.19 05:27:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qnoccmiirmgjztti) left #autonomic-dev: Quit: Connection closed for inactivity
25.02.19 02:04:43*** Quit: Deadhandd (~deadhand@kntaon1614w-grc-11-76-66-96-100.dsl.bell.ca) left #autonomic-dev: Read error: Connection reset by peer
25.02.19 02:06:21*** Join: Deadhand (~deadhand@kntaon1614w-grc-11-76-66-96-100.dsl.bell.ca, (unauthenticated): deadhand)
25.02.19 15:20:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ntpreuxyeevzmodj, stoopkid: stoopkid)
26.02.19 04:29:32*** Connecting...
26.02.19 04:29:59*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 4 months 18 days 21 hours 49 minutes 32 seconds ago
                 *** Names: ditable-doge stoopkid Deadhand HMCb koo5[m]
                 *** End of /NAMES list.
26.02.19 04:30:41*** Nick change: You are now known as editable-dog
26.02.19 07:27:32*** Connecting...
#autonomic-dev> 26.02.19 10:11:12*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 4 months 19 days 3 hours 30 minutes 44 seconds ago
                 *** Names: editable-dog stoopkid Deadhand koo5[m] HMCb
                 *** End of /NAMES list.
28.02.19 22:49:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ntpreuxyeevzmodj) left #autonomic-dev: Quit: Connection closed for inactivity
01.03.19 06:53:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gvjotcyfrqrytmjc, stoopkid: stoopkid)
01.03.19 06:53:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gvjotcyfrqrytmjc) left #autonomic-dev: Excess Flood
01.03.19 06:53:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ztjtnuldzkjcraya, stoopkid: stoopkid)
04.03.19 15:07:25*** Quit: HMCb (~root@37.153.110.58) left #autonomic-dev: Ping timeout: 246 seconds
04.03.19 15:09:12*** Join: HMCb (~root@37.153.110.58, (unauthenticated): root)
05.03.19 03:27:38*** Netmerge: *.net *.split, split 3 days 9 hours 24 minutes 58 seconds ago (Use /WL to see who's still missing)
05.03.19 13:02:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ztjtnuldzkjcraya) left #autonomic-dev: Quit: Connection closed for inactivity
05.03.19 13:52:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rgztkksocykulbfz, stoopkid: stoopkid)
06.03.19 23:02:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rgztkksocykulbfz) left #autonomic-dev: Quit: Connection closed for inactivity
06.03.19 23:31:18*** Quit: HMCb (~root@37.153.110.58) left #autonomic-dev: Ping timeout: 245 seconds
06.03.19 23:37:18*** Join: HMCb (~root@37.153.110.58, (unauthenticated): root)
07.03.19 07:55:27*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fvtqismofbnskjna, stoopkid: stoopkid)
07.03.19 21:44:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fvtqismofbnskjna) left #autonomic-dev: Quit: Connection closed for inactivity
07.03.19 22:03:33*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jvsxknztiowymlsh, stoopkid: stoopkid)
08.03.19 00:14:59*** Connecting...
08.03.19 00:15:31*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #autonomic-dev: instead of eating, i read pdfs; instead of sleeping, i read pdfs; instead of seeing my friends, family and fiancee, i read pdfs; instead of making myself financially stable, i read pdfs. logs: http://loworbit.now.im/logs/
                 *** Topic set by editable-dog on Wed Oct 10 07:40:28 2018, 4 months 28 days 17 hours 35 minutes 4 seconds ago
                 *** Names: ditable-doge stoopkid HMCb Tamara_ koo5[m] Deadhand
                 *** End of /NAMES list.
08.03.19 00:16:13*** Nick change: You are now known as editable-dog
09.03.19 15:00:25*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jvsxknztiowymlsh) left #autonomic-dev: Ping timeout: 252 seconds
09.03.19 15:01:55*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yzcbpsdtnovpnpfg, stoopkid: stoopkid)
09.03.19 21:34:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yzcbpsdtnovpnpfg) left #autonomic-dev: Quit: Connection closed for inactivity
09.03.19 23:35:50*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-irrvamyhdddypsha, stoopkid: stoopkid)
10.03.19 01:45:22*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-irrvamyhdddypsha) left #autonomic-dev: Quit: Connection closed for inactivity
10.03.19 13:23:40*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gfklnydqsbjkdgdi, stoopkid: stoopkid)
12.03.19 02:06:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gfklnydqsbjkdgdi) left #autonomic-dev: Quit: Connection closed for inactivity
#autonomic-dev> 