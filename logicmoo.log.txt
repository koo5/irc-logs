13.12.18 06:14:59*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 6 months 18 days 10 hours 43 minutes 9 seconds ago
                 *** Names: editable-dog aindilis dmiles @ChanServ michalisko
13.12.18 06:15:00*** End of /NAMES list.
13.12.18 06:15:08<editable-dog>ok should be logging now
13.12.18 06:15:24<editable-dog>care to repaste that?
13.12.18 06:15:44<editable-dog>vps rebooted and i lost this and some other convo with him as well
13.12.18 06:16:56<editable-dog>http://loworbit.now.im/logs/logicmoo.log.txt
13.12.18 06:17:15<editable-dog>i just had to open a conflict on paypal with the vps host, so will see for how long i will be logging..:)
13.12.18 06:18:47<dmiles> [off] sort of was personal .. as in more of something for me to message stoopkid about
13.12.18 06:19:18<editable-dog>ok
13.12.18 06:19:37<dmiles> even thoujgh i assume you two are friends for a while so felt comy bringing it up to you :P
13.12.18 06:20:08<editable-dog>sure
13.12.18 20:41:44*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bwgtanxlgtspocdt, stoopkid: stoopkid)
14.12.18 03:27:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bwgtanxlgtspocdt) left #logicmoo: Quit: Connection closed for inactivity
14.12.18 13:25:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes, stoopkid: stoopkid)
14.12.18 16:17:59<aindilis> dmiles: ping
14.12.18 17:12:59<dmiles> pong
14.12.18 17:14:35<dmiles> aindilis: pong
14.12.18 19:05:52*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 252 seconds
14.12.18 19:07:01*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
14.12.18 19:40:47*** Quit: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
14.12.18 21:51:45*** Join: dmiles (~dmiles@71.19.251.149, dmiles: ...)
14.12.18 22:29:27*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
14.12.18 22:33:15*** Quit: dmiles (~dmiles@71.19.251.149) left #logicmoo: Ping timeout: 250 seconds
15.12.18 02:40:09*** Nick change: stoopkid (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes) is now known as Panzerwagener
15.12.18 06:15:18*** Nick change: Panzerwagener (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes) is now known as stoopkid
15.12.18 06:55:51<stoopkid> logicmoo: https://github.com/agda/agda-stdlib/issues/143
15.12.18 06:56:16<stoopkid> "One argument I am going to make is, it's largely convenient, if Agda can follow as much as conventions from Haskell as possible. It brings at least two advantages:
                 <stoopkid>  It gets Haskell users much easier to follow what's going on on Agda's side;
                 <stoopkid>     Things from Haskell tend to be long established. For those with little controversy, it would just save lots of time by not having to think about an alternative resolution. Though for those controversial, we can definitely pick and choose."
15.12.18 06:57:52<stoopkid> it's one thing for me to say that functional programmers are the ones who ruin type theory
15.12.18 06:58:02<stoopkid> it's another for me to point to a github issue where they're literally in the process of it XD
15.12.18 06:59:07<stoopkid> (although the suggestion here is actually reasonable considering that Agda's already got total-commitment to being a Haskell replica anyway)
15.12.18 07:09:48<stoopkid> it's actually reasonable in general, it's just the curry-howard isomorphism in action; a constructive proof-system will necessarily be isomorphic to a typed & total functional programming language, and so it "might as well" replicate the de facto standard typed functional programming lang
15.12.18 07:10:55<stoopkid> the real problem isn't so much that they put a functional programming spin on it, but rather that there's little to no influence from the logic-programming community
15.12.18 07:11:31<stoopkid> so from a prologger's perspective, you're just solving every query by hand
15.12.18 07:14:56<stoopkid> the middle-ground for me would be to have the end-user immersed into a prolog-like environment, actually at least two distinct ones, both respecting the underlying semantics of the type theory
15.12.18 07:15:48<stoopkid> the first would be one where your KB is just your proven propositions
15.12.18 07:16:05<stoopkid> + the type theory axioms
15.12.18 07:17:24<stoopkid> so technically most of your KB would be redundant relative to the underlying semantics, basically just serving as a big cache of known results
15.12.18 07:18:26<stoopkid> the second one would be more like the logic-programming you already know and love: the KB you would be immersed into would be some record type
15.12.18 07:20:38<stoopkid> similar to how you simulated hypothetical reasoning; your KB in this case would essentially just be a hypothetical
15.12.18 07:21:33<stoopkid> in either case, when your inferencer is having trouble turning up a proof of something, you could drop down into the haskell-style proof-language to try and finish it manually
15.12.18 07:23:12<stoopkid> (or perhaps some layer of abstraction above that which has cleaner syntax worked out for more complex derivations, like i was showing you earlier)
15.12.18 14:07:34<logicmoo> question i have to ask myself is what sort of things do i and socienty need to program today/tommorow
15.12.18 14:07:46*** Nick regain: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
15.12.18 14:09:17<dmiles> i mean like what sort of end user apps
15.12.18 14:18:10<dmiles> end users well are entire businesses
15.12.18 14:18:19<dmiles> as well
15.12.18 14:32:49<dmiles> maybe the variety of applications that are written in java give an overview
15.12.18 14:33:02<dmiles> well i mean from any mainstraim language
15.12.18 14:33:32<dmiles> then of course i might wonder what is next as far as needs to be written
15.12.18 14:36:41<dmiles> prolog is great for applications that have many many convulated rules that cant be allowed to interact badly
15.12.18 14:37:17<dmiles> but harder i suppose for applications that dont have any such logic
15.12.18 14:41:09<dmiles> most programns have 3 differnt logic levels:  What needs will it serve (when has the program done something illogically according to the user)...     
15.12.18 14:41:33<dmiles> When has the program done something illogically according to the process i carated for doing that 
15.12.18 14:42:17<dmiles> (those are the same logic)
15.12.18 14:43:19<editable-dog>id rather ask what the killer app is
15.12.18 14:43:42<dmiles> 2) when have i forgotten to write som epar tof code not handling a case i expected to be handled
15.12.18 14:44:47<dmiles> 3) then the datalog aspect of the impl
15.12.18 14:45:15<dmiles> well the kill app .. in mny cases is supposed to be the easiest app to
15.12.18 14:45:22<dmiles> killer app*
15.12.18 14:45:42<dmiles> in many cases is supposed to be the easiest app that a programming language gives us
15.12.18 14:45:56<dmiles> and that is how the programing language becomes famous
15.12.18 14:46:35<dmiles> for examlpe in Java is was Swing
15.12.18 14:47:22<dmiles> well also for people to do their C++ work
15.12.18 14:47:30<dmiles> (but have swing avaible)
15.12.18 14:48:18<dmiles> i spent 4 years trying to learn C++ (totalyl jsut as a side project and barely got it) .. I leanred java in 3 months.. And suddenyl i could program any C++ app
15.12.18 14:48:35<dmiles> (in C++)
15.12.18 14:49:04<dmiles> since the killer part java gave me was the best C++ experience 
15.12.18 14:49:55<dmiles> when when i programed in C# .. i saw all the things java was missing
15.12.18 14:50:20<dmiles> that is that java now feels like a toy language compared to C# 
15.12.18 14:51:36<dmiles> the killer app is a chatbot
15.12.18 14:52:03<dmiles> at least for society
15.12.18 14:52:33<dmiles> if worlfram alpha was able to be controlled and managed by a chatbot
15.12.18 14:53:08<dmiles> and of course all of our database severs
15.12.18 14:53:25<dmiles> and online ordering systems
15.12.18 14:53:59<dmiles> one that coalates everything it leanrs from many people to help teach other peopel to live better
15.12.18 14:54:06<dmiles> a nice nanny for peopel of all ages
15.12.18 14:54:29<dmiles> is what AGI is 
15.12.18 14:54:58<dmiles> one that will even let all the naughty people live rich and full lives
15.12.18 14:56:31<dmiles> super happy summercamp like startrek
15.12.18 14:58:09<dmiles> what are some introductory levels stops to get there?
15.12.18 14:59:32* dmiles will try to answer some points today but thinks there is not incorrect answers and hope others can list theirs
15.12.18 15:01:23<dmiles> <dmiles> I wrote up a list of what TimBL, Ohad, I, Kydi, Cycorp are all doing and hoping  :P  https://docs.google.com/document/d/1Qj3p5F9oQxG062kwExJy7wgpDYcrAF4ujCdr2lwYrds/edit
15.12.18 15:30:55<editable-dog>nice
15.12.18 15:45:49<dmiles> i wish i had time/money to pay someone to write it all up correctly
15.12.18 15:47:29<dmiles> thugh i did realize towards the end where I got the ideas of Logicmoo :P
15.12.18 15:47:53<dmiles> i mean PrologVirtualWorlds
15.12.18 15:48:34<dmiles> it was supposed to be the equivalent of to the new programing paradymn created at Mircrosoft
15.12.18 15:48:53<dmiles> We have also created some sample applications and user interfaces that we distribute separately.
15.12.18 15:48:54<dmiles> The platform supports development of applications with customizable user interfaces (3D, 2D, and text) and can be used for rapid prototyping of any type of distributed multi-user application from 3D virtual worlds to distance learning interfaces with streaming media and chat.
15.12.18 15:49:35<dmiles>  we could port thing like "Microsoft Office" made up of solely DCOM (Distributed Component Object Model)  into a "Second life" like services.  This worked very very well and we managed to get past some of the age old problems with distributed computing! 
15.12.18 15:51:16<dmiles> i created an ordering tool for office supplies when i was as MS that used that metadata to deduce whom the programmers had to get permission from to have it in their office+ who would authorize the company to pay for it + where it was going to be deleiverd to have what technician to install it or not
15.12.18 15:52:19<dmiles> so my code looked like   myIObject->GetADServer()->PickBestDEfault()->MakeSecureConnection(myIObject)->  WhomToCallWhenYourPipeBreaks->DirectSupervisor
15.12.18 15:52:40<dmiles>  i aggreggated the PersonObject with ForAuthorizingRandomPurchases
15.12.18 15:53:36<dmiles> now for the last 20 yearts my baseclasses are being upgaded with new reases of Active Directory For Exchange sever manqagment
15.12.18 15:55:13<dmiles> anmyways i wrote this app in 1999 and it upgrades itself using certain technologies i want to give away to the public
15.12.18 15:55:52<dmiles> (it is still in use whenver a Microsoft implee want to get a water coller in their office)
15.12.18 15:55:58<dmiles> employee
15.12.18 15:57:01<dmiles> it analyzes their posistion in teh compnay and create some advocacy documents to get them the water company
15.12.18 15:57:41<dmiles> this wasnt even my idea.. it was one the many types of applications I and many others were asked to write
15.12.18 15:58:10<dmiles> this was made possible by "Active Directory" servuices and VCard technology
15.12.18 15:59:03<dmiles> anyhow i shant go in too deep.. the idea though was we decided we could get "semantic"
15.12.18 15:59:27<dmiles> i left MS though to go work on even cooler stuff like CYC
15.12.18 16:01:22<dmiles> though i worked on a CYC thru a subcontractor called Teknoweldge
15.12.18 16:02:23<dmiles> there i felt like i we still did have not enough manpower and resources to keep pursueing the dream
15.12.18 16:02:49<dmiles> that is that they didnt know the stuff we knew at Microsoftr
15.12.18 16:02:53<dmiles> and visa versa
15.12.18 16:03:58<dmiles> but also i learned to over the next 10 years is that i could use one tech as an excuse not to work on aother tech as pong back and forth
15.12.18 16:04:31<dmiles> so it was fine in highsight to to them separated
15.12.18 16:05:52<dmiles> but it is hard since i know what all three techologies are
15.12.18 16:06:21<dmiles> 1) Distrubuted Microsoft MOO programming
15.12.18 16:06:56<dmiles> 2) Programs controlled and managed by Cycorp ontological engineering
15.12.18 16:07:27<dmiles> 3) and Logic programming
15.12.18 16:07:47<dmiles> oops .. i need to define #3 better at some point
15.12.18 16:08:52<dmiles> line to #1   https://web.archive.org/web/20001007212436/http://www.vworlds.org:80/gallery.asp
15.12.18 16:09:38<dmiles> Microsoft understood we were trying to make a MUD
15.12.18 16:10:04<dmiles> and replace the operating system with it
15.12.18 16:11:23<dmiles> We actually made an NTSeverice to host these little MUDs  https://web.archive.org/web/20001017104221/http://www.vworlds.org:80/addownload.asp#samples
15.12.18 16:12:57<dmiles> #2 i think perhaps Type theory things can help
15.12.18 16:13:16<dmiles> at least it should have been designed to do this
15.12.18 16:14:23<dmiles> well at least *some* of those get involved in type theory are doing so to get to get to the technology i was working with in #2
15.12.18 16:16:10<dmiles> its all so frustrating feeling like i am coming from a furture planet.. like one that has running water and eletricity to this primitive culture
15.12.18 16:16:30<dmiles> i used to fantasize for this as a kid.. really!
15.12.18 16:17:02<dmiles> to go back in time and be some sort of sevant
15.12.18 16:17:19<dmiles> now that it is a reality it is horrible and depressing
15.12.18 16:17:40<dmiles> i can blow my horn and bitch
15.12.18 16:17:46<dmiles> or do soethnig about it
15.12.18 16:18:22<dmiles> oddly i am in really odd positions
15.12.18 16:18:50<dmiles> working with things and people everyone woulod onmmly dream of meeting
15.12.18 16:19:14<dmiles> yet i am jsut like everyone else maybe even more crippled 
15.12.18 16:19:29<dmiles> (more crippled than all my work buddys)
15.12.18 16:19:31<aindilis> hey, reading backlog
15.12.18 16:20:25<dmiles> i dont understand why i am not on TV every few months like most people i work for
15.12.18 16:21:17<dmiles> also i dont returnj calls and i hide out from those people that are my friends whom make it in the press when they call me
15.12.18 16:23:06<dmiles> i have finnaly i hidden out or alienated enough of my rich and powerfull media savy peopel thjey are giving me time to create the things they make people dream of
15.12.18 16:23:58<dmiles> what i found was i was so busy prepping Bin48 for her next media visit i could never work on AGI
15.12.18 16:25:31<dmiles> also i needed people to go to some defcon for me so i could make the real thing
15.12.18 16:25:43<dmiles> Kino Coursey loved to do that for me
15.12.18 16:26:17<dmiles> (so i could stay home and actualyl get it done)
15.12.18 16:26:46<dmiles> now i dunno what to do
15.12.18 16:27:32<dmiles> there were times in the last 25 years i didnt know what i was doing and some of the lameness in the world proectected me from exposing my impostering
15.12.18 16:27:56<dmiles> now there is a whole set of things i am no longer an imposter for
15.12.18 16:28:21<dmiles> so it is really confusing
15.12.18 16:28:28<dmiles> as how to proceed
15.12.18 16:29:00<dmiles> some of the more powerfull people than me are still faking it
15.12.18 16:30:20<dmiles> TimBL, Lenat, Sowa know exectly what thjey dont know (they arnt faking it either) but thjey have no idea waht they need to do right now
15.12.18 16:32:02<dmiles> Mueller does know but i think he thinks it failed
15.12.18 16:32:49<dmiles> Schank doesnt know what Lenat and Sowa knows.. so schank is fucked
15.12.18 16:33:16<dmiles> ah.. idea.. i need to create a wikipedia page abotu these peopl;e
15.12.18 16:33:21<aindilis> cool
15.12.18 16:33:29<dmiles> i mean my own version of current history
15.12.18 16:33:32<dmiles> they might even read it
15.12.18 16:34:12<dmiles> jsut sometimes they are the sources of the information and it is in cofidence
15.12.18 16:34:45<dmiles> some cases i have spies workign int he compnay giving me information
15.12.18 16:34:54<dmiles> companies*
15.12.18 16:35:17<aindilis> hey it would be cool to model all that in logicmoo
15.12.18 16:35:26<aindilis> on an airgapped
15.12.18 16:35:39<aindilis> and then export views of the KB that are "declassified"
15.12.18 16:36:10<aindilis> do you have a semantic mediawiki replacement?
15.12.18 16:36:29<aindilis> I have been doing precisely this
15.12.18 16:36:33<dmiles> not really .. but blogspot might also work
15.12.18 16:36:47<dmiles> o0k then i can use what your making
15.12.18 16:36:51<aindilis> kk
15.12.18 16:37:11<aindilis> do you have continuity plans for PrologMUD?
15.12.18 16:37:12<dmiles> the last blocging i did got me a job offer at Kyndi
15.12.18 16:37:25<aindilis> link?
15.12.18 16:37:29<dmiles> but not the resources we need
15.12.18 16:38:01<aindilis> I've been looking into powerful language to compel people to work on things
15.12.18 16:39:07<aindilis> do any of your rich and powerful contacts have the ability to funnel resources?
15.12.18 16:39:15<aindilis> why don't we approach some of the top dogs?
15.12.18 16:39:24* dmiles is seaching for link
15.12.18 16:39:50<dmiles> https://groups.google.com/forum/#!searchin/ontolog-forum/kyndi%7Csort:relevance/ontolog-forum/bBummSGSZho/4RH-uysQAwAJ
15.12.18 16:39:56<aindilis> Ohad's system could be useful here to get people to work together
15.12.18 16:40:49<dmiles>  Ohad woudl be afraid to hire anyone smarter than him or i
15.12.18 16:40:55<dmiles> (i think)
15.12.18 16:41:02<dmiles> and that is what we need to do
15.12.18 16:41:24<dmiles> most people have this problem
15.12.18 16:41:26<aindilis> so there is no non-paid model?
15.12.18 16:42:02<dmiles> well we need some things done that we'd all hate to do 
15.12.18 16:42:15<aindilis> dmiles I will give you access and training to my AI if you promise not to exfiltrate it until I am done
15.12.18 16:42:20<aindilis> *done releasing it
15.12.18 16:42:21<dmiles> plus i can admit that i am not smart enough yet to do
15.12.18 16:42:46<aindilis> since you are smarter than me
15.12.18 16:42:55<dmiles> (those thngs can be done if i sacrafic time)
15.12.18 16:43:01<aindilis> k
15.12.18 16:43:14<aindilis> do you want me to be your successor on prologmud if I outlive you?
15.12.18 16:43:25<dmiles> well you do things i can never bare doing and you seem to not mind htem
15.12.18 16:43:30<aindilis> haha
15.12.18 16:43:40<aindilis> sure let me know how I can help
15.12.18 16:43:51<dmiles> and even better at those things than i am
15.12.18 16:43:58<aindilis> well I appreciate that
15.12.18 16:44:25<aindilis> we need to get funding then
15.12.18 16:44:32<aindilis> but searching for funding takes time too
15.12.18 16:44:35<dmiles>  <aindilis> do any of your rich and powerful contacts have the ability to funnel resources?
15.12.18 16:44:52<dmiles> i am trying to decide if i should David Hanson 
15.12.18 16:45:11<dmiles> if he wants to work on AI for a while
15.12.18 16:45:59<dmiles> he is probably the most powerfull friend right now that would say yes
15.12.18 16:46:33<dmiles> then there is TeraSem 
15.12.18 16:47:11<dmiles> Terasem are the currators of Bina48
15.12.18 16:47:16<aindilis> we need a princely strategy of unite and conquer
15.12.18 16:48:32<aindilis> so much work so little help
15.12.18 16:48:47<dmiles> Terasem said yes to me 18 months ago.. but i told thenm i give them a workplan
15.12.18 16:49:06<dmiles> a toy demo.. etc
15.12.18 16:50:01<aindilis> is that what marty's is?
15.12.18 16:50:13<dmiles> the problem is i need you ( aindilis ) , me,  davidwhitten, plus at least two more people smater than us
15.12.18 16:50:28<dmiles> and they only want the workplan to support me
15.12.18 16:50:45<dmiles> and Terasem only want the workplan to support me
15.12.18 16:50:47<aindilis> well I should get disability, and I can give it my best
15.12.18 16:50:55<dmiles> and in the end ui have to pretend i never worked on it
15.12.18 16:51:06<aindilis> wait, what?
15.12.18 16:51:19<aindilis> what is the license?
15.12.18 16:51:25<dmiles> likke i did wiht our last project https://en.wikipedia.org/wiki/BINA48
15.12.18 16:51:52<dmiles> notice my name seems to have been left out of that wikipedia page
15.12.18 16:52:24<aindilis> yeah, well that seems a difficult bargain
15.12.18 16:52:49<dmiles> i havent said "no" but i am afraid to say yes
15.12.18 16:52:52<aindilis> if you want I will call around
15.12.18 16:53:06<dmiles> Kyndi.. same way
15.12.18 16:53:07<aindilis> asking for no-strings attached open ended funding for AI from rich benefactors
15.12.18 16:53:15<dmiles> Cycorp .. definately will be worse
15.12.18 16:53:51<dmiles> my disability btw got approved last Dec 3rd!
15.12.18 16:53:55<aindilis> !!!!!!!!!!!!!!
15.12.18 16:54:01<dmiles> (i got the letter earlier this week!)
15.12.18 16:54:04<dmiles> yes!!!!
15.12.18 16:54:38<dmiles> so i get paid for the next 15 years again
15.12.18 16:54:46<aindilis> that's huge
15.12.18 16:54:50<dmiles> yes :P
15.12.18 16:55:17<dmiles> i dunno how i would have survived after i had alreayd lost all my money to
15.12.18 16:55:27<aindilis> yeah, that's a huge save
15.12.18 16:55:58<dmiles> when will we know about yours/
15.12.18 16:56:19<dmiles> well the good part is that i am on disability no one can pay me 
15.12.18 16:56:44<dmiles> i dont mind this at all
15.12.18 16:56:52<dmiles> i just need money to pay other peoke
15.12.18 16:56:55<aindilis> right
15.12.18 16:57:34<aindilis> maybe we hire a fundraiser
15.12.18 16:57:39<aindilis> who takes a cut
15.12.18 16:58:48<dmiles> David is sort of a fundraiser
15.12.18 16:58:56<dmiles> (Hanson)
15.12.18 16:59:10<dmiles> he might do it for us
15.12.18 16:59:25<dmiles> btw aindilis.. you ar enot actualyl expecendable to me :P
15.12.18 16:59:36<aindilis> :)
15.12.18 16:59:53<aindilis> John Oliver, Harris Rosen, LeBron James
15.12.18 17:00:02<dmiles> because .. irregardless yuou are one of the only peopel doing what yiou do
15.12.18 17:00:34<dmiles> (i mean your curration work)
15.12.18 17:00:35<aindilis> George Lucas, ShaileneWOodley Jim Oberweis MelGibson Jodie Foster ManojBhargava Mike Illitch
15.12.18 17:00:39<aindilis> thanks!
15.12.18 17:00:44<aindilis> that's a list of some potential donors
15.12.18 17:01:02<aindilis> people who have contributed to similar causes (to FLP at least, but AGI subsumes FLP)
15.12.18 17:01:11<dmiles> but what akes you irreplacable is that curration work would not be satisfying enough for you 
15.12.18 17:01:52<aindilis> thanks :)
15.12.18 17:02:04<dmiles> since probably we could pay someone to do a better job at currating than you!
15.12.18 17:02:17<aindilis> :)
15.12.18 17:02:26<aindilis> are you referring to FRDCSA packaging?
15.12.18 17:02:43<aindilis> https://github.com/aindilis/metasite-extractor
15.12.18 17:02:51<dmiles> jsut like we could probly pay someone to do a better job at releasing an event calc reasoner !
15.12.18 17:02:55<dmiles> (than it)
15.12.18 17:02:56<aindilis> ah I see 
15.12.18 17:02:57<dmiles> (than i)
15.12.18 17:03:05<dmiles> yes FRDCSA packaging
15.12.18 17:03:27<aindilis> well I'm planning a big push on packaging after I hopefully get disability
15.12.18 17:03:33<aindilis> I'm taking time off right now in point of fact
15.12.18 17:03:46<dmiles> it is not what FRDCSA packaging is or what the "event calc reasoner" tyhat makes it.. it is what we do afterwards
15.12.18 17:03:48<aindilis> since I cannot afford backup hard drives and don't want to lose work
15.12.18 17:03:54<aindilis> yes
15.12.18 17:04:48<dmiles> i read something that has made me relax slightly 
15.12.18 17:05:05<dmiles> i'll post it here after i find it
15.12.18 17:05:08<aindilis> k
15.12.18 17:05:21<dmiles> (i mean relax on the CYClone)
15.12.18 17:05:29<aindilis> k
15.12.18 17:05:43<aindilis> well your's is called Psyclone, I've renamed everything to Cyclone
15.12.18 17:05:57<aindilis> unless you want me to rename it back
15.12.18 17:08:13<aindilis> this looks excellent: 000 - Stages of developing LogicMOO: https://docs.google.com/document/d/1Qj3p5F9oQxG062kwExJy7wgpDYcrAF4ujCdr2lwYrds/edit
15.12.18 17:14:12<dmiles> Psyclone is much better name though!
15.12.18 17:14:43<aindilis> great.  yeah I've renamed all my stuff to Cyclone, so you can get Psyclone which you deserve
15.12.18 17:14:54<dmiles> oh .. i see
15.12.18 17:15:26<aindilis> I could call mine Cyclops if that makes it less ambiguous
15.12.18 17:18:22<aindilis> I'm building my own separate infrastructure which I can then mount with yours
15.12.18 17:19:00<aindilis> bindings, if you will
15.12.18 17:20:44<aindilis> maybe we could talk to redhat about doing an open source startup
15.12.18 17:21:22<aindilis> if the startup failed, we'd still have the code
15.12.18 17:22:00<aindilis> although yeah I see what you mean a lot of work is spent on keeping up appearances (e.g. Pioneer.app contest) versus doing real work
15.12.18 17:25:54<dmiles> i like you are doing Cyclone.. that helps keep my wortk from blocking yours
15.12.18 17:26:38<dmiles> yet most all that you doing in it is usable to me anyways
15.12.18 17:26:50<aindilis> perfectr
15.12.18 17:26:54<aindilis> *perfect
15.12.18 17:27:00<dmiles> (and visa versa sooner or later_
15.12.18 17:27:21<aindilis> yeah, I will try to release FRDCSA once I have about 4 more hard drives 
15.12.18 17:27:53<aindilis> I got pretty close, in fact I can give you one of the VMs, it just doesn't work great yet
15.12.18 17:27:59<aindilis> why don't I prepare it an ship it to you
15.12.18 17:28:14<aindilis> it'll have some basic things like UniLang working
15.12.18 17:28:20<aindilis> I'll do that
15.12.18 17:28:44<aindilis> it's the open source VM (not to be distributed because I only manually scrubbed it)
15.12.18 17:28:52<aindilis> I'll put that down for EOD
15.12.18 17:29:41<dmiles> awesome
15.12.18 17:29:45<aindilis>  :)
15.12.18 17:29:50<aindilis> k bbiab
15.12.18 17:29:55<dmiles> to answer youer question about Martys
15.12.18 17:30:00<aindilis> k
15.12.18 17:30:31<dmiles> oh you can go off.. it will take me 5-10 minutes to fomrlaize what i am saying
15.12.18 17:30:38<aindilis> kk, bbiab
15.12.18 17:30:55<dmiles> well the differnce between Martys and PrologMUD
15.12.18 17:30:58<aindilis> also I'd be interested in hearing more about what you were saying about organizing everyone together before I interrupted
15.12.18 17:31:28<dmiles> Marty's is based on Event Calculus
15.12.18 17:31:49<dmiles> PrologMUD is based on CycL
15.12.18 17:32:39<dmiles> CYC was designed to be a platform to do Event Calculus as well
15.12.18 17:33:18<dmiles> but no one ever got arround to really making Event Calculus work well at cycorp
15.12.18 17:34:18<dmiles> also PrologMUD is based on a certain paradymn of relational programming
15.12.18 17:35:03<dmiles> Marty's will be as well but not forcing myself to actually do it when i dont want to
15.12.18 17:35:37<dmiles> Event Calculus is secretly much simpler than CycL
15.12.18 17:36:17<dmiles> And very likely (i have been saying this for years) will be slower when put to the same tasks
15.12.18 17:36:40<dmiles> but i been saying dispite that slowness it needs to be tried
15.12.18 17:37:15<dmiles> what i been "saying" is that "Probably the right way to process CycL is using a Planner and not an infernce engine"
15.12.18 17:37:43<dmiles> in 1999 i discovered this to be true 
15.12.18 17:37:52<dmiles> but.. realisticalyl i been afraid
15.12.18 17:38:06<dmiles> since it should be 100s times slower implwise
15.12.18 17:38:36<dmiles> as if you think Cyc is slow before.. what until it has been PDDLized
15.12.18 17:39:18<dmiles> (though Cyc inst slow.. but its too slow to do some of the things that it is finnaly fast enough to try to do)
15.12.18 17:39:30<dmiles> for instnace playing Chess
15.12.18 17:39:53<dmiles> compare  CycL Chess to  PDDL-Chess :P
15.12.18 17:40:27<dmiles> or simpler    
15.12.18 17:40:34<dmiles> TicTacToe in    Prolog vs PDDL
15.12.18 17:40:43<aindilis> (http://reason.cs.uiuc.edu/filter/filter/chess-domain-exper/)
15.12.18 17:41:06<dmiles> oh awesome!
15.12.18 17:42:20<dmiles> that whole project is indeed based on asking outselves aobut this
15.12.18 17:43:39<dmiles> so Marty's is an experement to see see MUDing in PDDL
15.12.18 17:43:57<dmiles> (though its called EC today instead of PDDL)
15.12.18 17:44:17<dmiles> but secretly i dont see any difference between the two logics yet)
15.12.18 17:45:06<dmiles> other than you ( aindilis ) talking about some arificially imposed limits of current systems
15.12.18 17:46:47<dmiles> Mary's is thje reset button on PrologMUD
15.12.18 17:50:22<dmiles> so before i talked about a unified structure of CycL (such as ontological merging and so forth) that is/was a task for  logicmoo_base (thus PrologMUD)
15.12.18 17:50:59<dmiles> I am workign on isntead now a unified structure for  PDDL and EventCalc
15.12.18 17:54:20<dmiles> https://github.com/opensim4opencog/trunk-logicmoo/blob/master/prolog/pddl_reader/FairyTaleCastle.PDDL
15.12.18 17:54:53<dmiles> is pretty much event calc
15.12.18 17:55:55<dmiles> as so is:  https://github.com/opensim4opencog/trunk-logicmoo/blob/master/prolog/pddl_reader/FairyTaleCastle.ocl
15.12.18 18:01:13<dmiles> what is to be discovered is:
15.12.18 18:01:30<dmiles> Which KR (if any) are more expressive
15.12.18 18:03:47<dmiles> ant then a code war between Abdemo (Murrey Shannon), HynHTN (Lee McClusky), vs PDDL impls
15.12.18 18:04:33<dmiles> Murrey Shannon and beat Erik Meullerr so far 
15.12.18 18:05:17<dmiles> so this last week i made it so Murray Shannon can load Erik's KR
15.12.18 20:55:57<dmiles> here btw is some Metaplanning KR  https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/examples/Mueller2006/Chapter11/HungryCat.e.pro#L544-L575
15.12.18 21:26:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes) left #logicmoo: Quit: Connection closed for inactivity
15.12.18 22:44:37*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ietgoypnouvlthcu, stoopkid: stoopkid)
16.12.18 00:56:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ietgoypnouvlthcu) left #logicmoo: Quit: Connection closed for inactivity
16.12.18 07:34:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-maeebayinxexkulp, stoopkid: stoopkid)
16.12.18 13:35:19<stoopkid> dmiles: maybe what might be interesting to do together that's less commitment than developing along any particular strategy is put together a repo that just links to every different logic framework and tool-chain we're looking at with documentation & methods for set up, integration, goals & dreams etc..
16.12.18 13:36:04<aindilis> cool
16.12.18 13:37:57<stoopkid> cool i'll start working on getting my various type theory tools together then
16.12.18 13:42:33<stoopkid> aindilis: any particular preference on how to structure that repo? ex. git linking to the different tools as submodules?
16.12.18 13:49:04<aindilis> I would make a CYC ontology personally
16.12.18 13:49:34<aindilis> but a flat file website should be good enough as long as there is a consistent syntax
16.12.18 13:49:51<aindilis> I can always write a parser to slurp into CYC
16.12.18 13:50:38<aindilis> this is my website for tracking all such things: https://frdcsa.org
16.12.18 13:50:58<aindilis> I have some preliminary work on a software KB that tracks things like logical frameworks involved and such
16.12.18 13:51:10<aindilis> I could export portions of it
16.12.18 13:51:12<aindilis> to illustrate
16.12.18 13:51:23<aindilis> but not right now, I'm overloaded at the moment
16.12.18 14:01:06<stoopkid> oh awesome :)
16.12.18 18:46:39<dmiles> <stoopkid> cool i'll start working on getting my various type theory tools together then  <-  stoopkid: right on that is helpfull .. 
16.12.18 18:48:13<dmiles> things i wonder (though of course i jsut often over-assume) 
16.12.18 18:48:35<dmiles> is what are the goals , asperiations .. dreams
16.12.18 18:48:46<dmiles> of type theorists
16.12.18 18:49:15<dmiles> for isntance i may have at times assumed them loftier than they are
16.12.18 18:49:44<dmiles> other times not lofty enough
16.12.18 19:45:49<stoopkid> dmiles: wrt developing applications, its basically “hilberts program but for software development rather than mathematics”
16.12.18 19:45:59<stoopkid> but then also for mathematics too
16.12.18 19:46:30<stoopkid> (but technically not quite as impossibly lofty as hilbert’s goals)
16.12.18 19:48:01<stoopkid> they want to have one system thats proven sound and consistent so that they can use that as a semantic foundation for all their logic, math, verification, tool-chain, etc..
16.12.18 20:08:37<dmiles> it looks like multiparty seesion types are getting close to event calculus
16.12.18 20:26:22<stoopkid> dmiles: from a practical perspective types are just properties, in full generality
16.12.18 20:28:09<stoopkid> ofc (and also still from a practical perspective) there's a million different conceptions of what that can/can't mean
16.12.18 20:29:36<stoopkid> for kind of a "vanilla" interpretation there's only gonna be a very small number of criteria imposed on that
16.12.18 20:32:40<stoopkid> typically gotta be constructive, typically gotta reject type-membership as propostional, proof-checking typically has to terminate in finite-time (which typically results in complexity being thrust into the proof itself rather than into the proof-search procedure, although i don't consider that to be a bad thing), you basically have to have delineated a priori what *syntactically* constitutes a proof of your type, etc..
16.12.18 20:33:44<stoopkid> if you accept type-membership as propositional you essentially get a set theory instead of a type theory
16.12.18 20:34:36<stoopkid> (meaning, if you can ask the question "is object x in set X"; in type theory you technically actually can't, although there are ofc ways to make it essentially "look like" you are)
16.12.18 20:36:52<stoopkid> my own personal philosophy is not quite as strict as type theory
16.12.18 20:38:32<stoopkid> my own personal philosophy simply requires *some* fixed, sound, consistent, expressive, *structural* foundation of mathematics
16.12.18 20:39:00<stoopkid>  + machine-interpretable ofc
16.12.18 20:40:03<stoopkid>  + not simply terminating but *efficient* proof-checking, at least for standard practical problems
16.12.18 20:42:03<stoopkid> + *ideally* constructive (meaning all necessary witnesses to the truth of a proposition are computably extractable from any given proof), and capable of modeling and proving things about algorithms
16.12.18 20:43:12<stoopkid> Isabelle/HOL seems to satisfy all these properties and is rather different from type theories, it's more of an equational logic
16.12.18 20:44:40<stoopkid> they have very similar expressiveness and proof-strength, both are capable of expressing essentially the same things and can prove many of the same real-world things
16.12.18 20:45:51<stoopkid> (real-world in the sense of common practical computing problems, not necessarily real-world in the sense of modeling "bob eats pizza on tuesdays, if he thinks he can afford it" etc..)
16.12.18 20:46:00<stoopkid> (although probably very similar capabilities there too)
16.12.18 20:47:06<stoopkid> dmiles: oh hey mietek linked me this earlier i thought you might get a kick out of it: http://i.imgur.com/o3IlETL.jpg
16.12.18 20:48:53<stoopkid> and yea, all your demands for types regarding ex. session types, automation of program generation: 100%
16.12.18 20:51:01<stoopkid> you should probably look at Coq rather than Agda/Idris
16.12.18 20:51:07<stoopkid> unfortunately
16.12.18 20:51:08<stoopkid> imo
16.12.18 20:52:16<stoopkid> Coq is maybe something like half way between Agda and what you want type theory to be
16.12.18 20:54:05<stoopkid> instead of being immersed at the manual-proving/functional-programming layer, you're immersed in an interactive-proving / tactics-system layer
16.12.18 20:55:11<stoopkid> so it's basically an interactive proof system that's extensible with proof-automation strategies i.e. tactics
16.12.18 20:57:41<stoopkid> what you want from type theory is more like that but as a full-fledged distributed knowledge-base already equipped with a standard library of types to rival say the java ecosystem
16.12.18 20:57:55<stoopkid> types/proofs/tactics
16.12.18 20:58:29<stoopkid> doesn't seem there's any inherent reason this isn't doable it just needs doing
16.12.18 20:59:00<stoopkid> https://deepspec.org/page/Research/
16.12.18 20:59:16<stoopkid> look at the second section "A Network of Specifications"
16.12.18 21:00:04<stoopkid> this isn't their roadmap this is basically what they've already done
16.12.18 21:00:11<stoopkid> unfortunately most of it is not libre
16.12.18 21:00:16<stoopkid> (if any)
16.12.18 21:02:12<stoopkid> but this and other work demonstrates how sophisticated this "deep" verification can get while still being actually doable by a relatively small (albeit relatively well-funded) loose-knit team
16.12.18 21:04:42<stoopkid> https://github.com/seL4/seL4
16.12.18 21:05:01<stoopkid> this has deep verification given in Isabelle/HOL
16.12.18 21:05:24<stoopkid> it's an L4 microkernel
16.12.18 21:06:54<stoopkid> would be good to actually read over these pages in more detail too because these researchers are some of the ones actually a) developing the kinds of sophisticated computational types you're looking for; b) developing the kinds of strategies that make this kind of large-scale verification feasible
16.12.18 21:07:31<stoopkid> and also because that deepspec page i linked is pretty much word-for-word my own philosophy as to how formal verification needs to be done, and what needs to be done with it
16.12.18 21:09:40<stoopkid> also would be good to check out what HoTT theorists are doing with modeling quantum physics
16.12.18 21:10:23<stoopkid> i don't yet have any concrete examples of this but HoTT implementations are in rapid development and i'm sure this physics research is soon to manifest as some pretty serious type-theory based implementations of models of physics
16.12.18 21:13:29<stoopkid> this is because they just now have an actual model of logic respecting the deep topological semantics in our interpretations of physics (and pretty much everything else;  "homotopy" type theory)
16.12.18 21:17:20<stoopkid> one thing to maybe keep in mind with what the type theory community (and related communities like Isabelle/HOL etc..) is doing is that they don't really release anything that doesn't come along with a deep verification of it
16.12.18 21:18:31<stoopkid> and there's not all that many people in doing in all that coordinated of a fashion; so dev is slow in general, both at the individual level as well as the cumulative level
16.12.18 21:21:00<stoopkid> we're literally still at the stage where you shouldn't even be *expecting* "where's my feature that does x, where's my feature that does y", you should be expecting "how did you even get me a proof about feature x in the first place"
16.12.18 21:21:29<stoopkid> and we're still just laying the groundwork *just for that*
16.12.18 21:21:54<stoopkid> sad but that's where we're at, any type theorist that says otherwise is probably way too overly optimistic about the current situation
16.12.18 21:24:39<stoopkid> like there's basically not even a point for it *until* it's got pretty much every immediately necessary computational tool available and formally verified in it in a way that's understandable to the average programmer, with verifications modularly reusable in a standard way, etc..
16.12.18 21:25:53<stoopkid> with automation features in place and etc..
16.12.18 21:29:21<stoopkid> hence what you mostly see type theorists doing is just demo-ing that some activity is possible and then just completely moving on to the next thing, trying to ensure that every task we will eventually need to do is known to be doable before committing to actually really doing any of them, except in a few special cases of groups that have managed to take this stuff quite far, but even then still in a mostly academic setting,
                 <stoopkid> like the deepspec stuff and the sel4 kernel
16.12.18 21:29:42<stoopkid> like microsoft has a formally verified operating system kernel but that isn't windows yet, etc..
16.12.18 21:30:45<stoopkid> another issue, you can't necessarily integrate all this different work being done
16.12.18 21:31:18<stoopkid> like i tend to work in Agda, the verification of sel4 kernel won't directly translate there from Isabelle/HOL
16.12.18 21:32:01<stoopkid> and the work i've already done doesn't translate there
16.12.18 21:32:45<stoopkid> it doesn't even translate immediately to Coq which is nearly effectively the same system
16.12.18 21:34:15<stoopkid> and none are really developed to the point that i can use one to readily talk about the others, even though it should be *possible* (just like it was "possible" to formally verify an OS kernel)
16.12.18 21:38:07<stoopkid> note though in the deepspec "network of specifications" diagram at the top, second from the right: Coq
16.12.18 21:38:48<stoopkid> https://www.cs.princeton.edu/~appel/certicoq/
16.12.18 21:39:07<stoopkid> Coq verified in... Coq?
16.12.18 21:39:59<stoopkid> http://www.cs.princeton.edu/~appel/papers/certicoq-coqpl.pdf
16.12.18 21:40:46<stoopkid> kind of disappointing that a paper about formalizing and verifying a foundation of math inside itself has no mention of godel
16.12.18 21:42:04<stoopkid> but, long story short, it is possible for a foundation of math to verify its own compilation
16.12.18 21:43:13<stoopkid> to model its own deductive system and prove that, say, an x86 program actually implements it, relative to for example some bisimulation semantics
16.12.18 21:43:37<stoopkid> iow make a godelization of Coq in Coq and verify the compilation of that godelization
17.12.18 18:16:38*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 246 seconds
17.12.18 23:10:00*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
18.12.18 01:34:40<aindilis> hey
18.12.18 01:39:08<stoopkid> o/
18.12.18 05:27:19<aindilis> hey
18.12.18 05:27:23<aindilis> srry got distracted
18.12.18 05:27:26<aindilis> dmiles: ping
18.12.18 08:16:37<dmiles> even though i created tis robot..  https://www.cnbc.com/2017/12/21/meet-the-robot-that-passed-a-college-class-on-philosophy-and-love.html
18.12.18 08:17:20<dmiles> i am only gettign job offers to "ghost write" code
18.12.18 08:18:46<dmiles> in which will further prevent me for doing what i put on this earth to do
18.12.18 08:19:19<dmiles> which was to create AGO
18.12.18 08:19:21<dmiles> AGI
18.12.18 08:57:57<aindilis> can we get you a publicist?
18.12.18 08:58:36<aindilis> I also feel put on earth to create AI
18.12.18 08:58:49<aindilis> although I've been taking a long hard break from *any* work on it
18.12.18 08:58:55<aindilis> involuntarily
18.12.18 08:59:32<aindilis> The way I see it is is AGI => AI, but not AI => AGI
18.12.18 09:00:12<aindilis> er SAI => WAI, not WAI => SAI
18.12.18 11:20:42*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
18.12.18 11:43:12<dmiles> ?- gethostname(X).
18.12.18 11:43:13<PrologMUD> dmiles: % X='gitlab.logicmoo.org'
                 <PrologMUD> dmiles: %  det(Yes,1)
18.12.18 11:43:55<dmiles> ?- pwd.
18.12.18 11:43:56<PrologMUD> dmiles: % /home/prologmud_server/
                 <PrologMUD> dmiles: %  det(Yes,1)
18.12.18 11:44:21<dmiles> ?- halt.
                 <PrologMUD> dmiles: the halting problem is now solved!
                 <PrologMUD> dmiles: %  det(Yes,1)
18.12.18 11:44:58<dmiles> ?- halt(7)
18.12.18 11:45:03<dmiles> ?- halt(7).
18.12.18 11:45:04<PrologMUD> dmiles: % The following threads wouldn't die: [main]
18.12.18 11:47:50<dmiles> i am going to enable Marty's Adventure Game in the bot
18.12.18 11:48:22<dmiles> ?- threads.
18.12.18 11:49:23<dmiles> well the chat80 impl sort of conflicts so gotta fix that later
18.12.18 12:02:55<aindilis> cool
18.12.18 14:21:35*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Read error: Connection reset by peer
18.12.18 14:21:40*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
18.12.18 14:33:46*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
18.12.18 14:44:14*** Connecting...
18.12.18 14:44:32*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 6 months 23 days 19 hours 12 minutes 42 seconds ago
                 *** Names: editable-dog PrologMUD dmiles aindilis stoopkid @ChanServ michalisko
                 *** End of /NAMES list.
18.12.18 14:46:01<stoopkid> dmiles: i think i found a serious implementation issue with Agda
18.12.18 14:47:11<stoopkid> more serious than the fact that it's not prolog-like; basically you can't resolve a naming conflict after-the-fact
18.12.18 14:47:56<stoopkid> without actually going through and modifying each conflicting occurrence of the names
18.12.18 14:51:24<stoopkid> ex. if i have a module "Data.Nat" it needs to be in a file "Nat.agda" in a directory "Data" in your my lib; if you have a module "Data.Nat", it needs to be in a file "Nat.agda" in a directory "Data" in my lib; Agda's only option for including multiple libraries together in a project is to "include" them, but this basically just unions the included directories, so your module and my module have a name clash
18.12.18 14:53:02<stoopkid> you could try to resolve this by putting one or the other or both into a subdirectory, like "dmiles/Data/Nat.agda" and "stoopkid/Data/Nat.agda" but now your Nat module has to be called "dmiles.Data.Nat" and my Nat module has to be called "stoopkid.Data.Nat", and your modules have to reference each other using the "dmiles." prefix and my modules have to reference each other using the "stoopkid." prefix
18.12.18 14:53:47<stoopkid> but they don't/can't, because wherever you wrote "import Data.Nat", that's just what it is
18.12.18 14:55:21<stoopkid> so you can't apply some after-the-fact library-file configuration setting or compiler directive or etc.. to resolve these conflicts you literally have to actually go back through and modify every import statement to use the unique "dmiles." prefix
18.12.18 14:58:04<dmiles> this is the sort of problems that languages often refuse to correct
18.12.18 14:58:57<dmiles> sadly there are probably ideal arguments why this shouldnt be corrected
18.12.18 15:01:39<stoopkid> i can't think of one but yea i was asking about this in #agda and i pointed out how the two alternatives for the agda standard library both use some of the same completely generic names like a "Data" directory, so you wouldn't be able to use them in the same project, and somebody responded "they don't actually use any of the same file/module names though" and i'm like ... *facepalm*
18.12.18 15:02:31<dmiles> well we do want to be able to merge them 
18.12.18 15:02:57<dmiles> Data.Foo and Data.Bar and not have them be the same modules?
18.12.18 15:03:08<stoopkid> so agda-stdlib and agda-prelude are literally having to work around each other and avoid using any of the same generic names as each other rather than just each giving themselves a unique prefix/namespace like "std.Data" or "prelude.Data"
18.12.18 15:03:49<dmiles> ok then it is actualy worse than i toguiht
18.12.18 15:03:54<dmiles> thought
18.12.18 15:04:05<stoopkid> we can merge Data.Foo and Data.Bar, agda does fine at that
18.12.18 15:04:17<stoopkid> what it fails at is merging dmiles's Data.Foo with stoopkid's Data.Foo
18.12.18 15:04:33<dmiles> so this is ok right?   Data/Stoopkid/Nat.agda    Data/DMiles/Nat.agda
18.12.18 15:05:14<dmiles> not to merge but to at least load
18.12.18 15:05:15<stoopkid> yea or stoopkid/Data/Nat.agda  dmiles/Data/Nat.agda
18.12.18 15:05:32<stoopkid> only problem is: you can't do this after the fact
18.12.18 15:05:50<stoopkid> so let's say in Functions/Special.agda you wrote "open import Data.Nat"
18.12.18 15:06:00<stoopkid> well now you broke Functions/Special.agda
18.12.18 15:06:34<stoopkid> because open import Data.Nat is expecting Data be directly under the "virtual project root", and Nat.agda to be a file directly under that
18.12.18 15:07:30<stoopkid> now you have to go into Functions/Special.agda and change "open import Data.Nat" to "open import Data.Dmiles.Nat" to reflect the change you made in the directory structure
18.12.18 15:09:34<dmiles> this is a design decsision that probably at one ppoint was justified
18.12.18 15:09:45<dmiles> by the fact that they had bigger fishes to fry
18.12.18 15:09:55<stoopkid> most likely
18.12.18 15:10:33<dmiles> people get really good at argueing for bad ideas 
18.12.18 15:10:54<stoopkid> i've been noticing this more and more lately heh
18.12.18 15:11:01<dmiles> prolog has a ton of thse toi
18.12.18 15:15:22<dmiles> though in prolog these are supposed to be to make it easy on language implmentors
18.12.18 15:16:54<dmiles> suffering by the many to avoid suffering of the few
18.12.18 15:19:09<stoopkid> luckily there's a general strategy for how to work around this problem in the meantime, but only with repos that play nicely, basically you have to write all your modules relative to a unique prefix ahead of time
18.12.18 15:19:35<dmiles> this is what they wuill claim allows the best versioning
18.12.18 15:19:56<stoopkid> like if i write my code like "open import stoopkid.Data.Nat" and you write your code like "open import dmiles.Data.Nat", then there's no problems
18.12.18 15:20:38<dmiles> but you are right.. what if we really want to work togerther merging our classes\
18.12.18 15:21:23<stoopkid> right, we'd have to have just coincidentally both made this same design decision in our library structures
18.12.18 15:22:14<dmiles> is this is a problem from Haskell ?
18.12.18 15:22:43<stoopkid> no idea i switched to Coq and then  Agda before i ever really got that far in Haskell
18.12.18 15:23:40<dmiles> from what i understand is that Haskell to Agda   is like  RDF to N3
18.12.18 15:24:10<dmiles> that N3 will always have to run from a pure RDF framework
18.12.18 15:24:34<dmiles> (dispite in practice that would be intolerable)
18.12.18 15:25:00<dmiles> yet in practice that is a requirement
18.12.18 15:25:33<stoopkid> oy, huh, looks like it might be a problem in Haskell too and this probably does have something to do with it
18.12.18 15:26:22<dmiles> i noticed this problem when i was working on the Curry compiler
18.12.18 15:27:23<dmiles> it had to do witht here is an underlying linkage name
18.12.18 15:28:02<dmiles> so for example i coujld ahve 20 differnt Prelude that had no visible prefix
18.12.18 15:28:11<dmiles> yet they had secret prefixes
18.12.18 15:28:54<dmiles> *so they could tell each other appart)
18.12.18 15:29:30<dmiles> many languages have thios problem
18.12.18 15:30:08<dmiles> many languages have fixed this by making sometjhing like a virtual package aliasing system
18.12.18 15:31:03<dmiles> that happens however we want
18.12.18 15:32:41<dmiles> this recognizes of course that techically everyone should have initally a crazy ungueessable prefix 
18.12.18 15:32:52<dmiles> (by default)
18.12.18 15:33:21<dmiles> and then use aliases to find each other
18.12.18 15:34:33<stoopkid> i agree, i would have the prefix be the public-key that you use for signing your work
18.12.18 15:35:45<dmiles> yeah the public-key that you use for signing your work   is how it works at  "Strong named software" like at mircorosoft
18.12.18 15:36:55<dmiles> its so screwed up like when i need to replace my vendors code for my customert
18.12.18 15:37:36<dmiles> since our compiler prevents me from from making a version of it
18.12.18 15:38:28<dmiles> it actualy prevents code sharing .. i just decompile the vendors source and repacage it
18.12.18 15:38:41<dmiles> (under my public keys)
18.12.18 15:39:03<dmiles> hehe
18.12.18 15:39:40<stoopkid> i could totally understand the rationale for not having the virtual aliasing features if the rationale was that you're just supposed to use a guaranteed-globally-unique prefix anyway, but...
18.12.18 15:40:37<stoopkid> i'm pretty sure the number of agda repos in existence that use globally-unique-prefixes for their module references is somewhere between 0 and approximately 0
18.12.18 15:41:16<stoopkid> agda-stdlib and agda-prelude just use totally generic stuff like "Data.Nat" and everybody else just uses the same generic stuff like "Data.Nat"
18.12.18 15:42:12<stoopkid> in hindsight i'm thinking this probably is a way bigger factor in the fact that agda hasn't really scaled yet than anything to do with how it actually works as a programming language / logic
18.12.18 15:43:16<stoopkid> like it doesn't even matter how it actually works as a programming language / logic if you can't merge codebases to find out how it scales in the first place
18.12.18 15:45:07<dmiles> hah
18.12.18 15:45:12<dmiles> that is what i said about RDF
18.12.18 15:46:37<dmiles> since it is so hard or impossible to convert ISO-CommonLogic to RDF you'll never know just how incapable RDF is
18.12.18 15:46:39<stoopkid> even RDF is slightly better because they at least tell you that the point is to use unique prefixes and then make a point to do it themselves
18.12.18 15:47:41<stoopkid> RDF stuff is under the "rdf:" prefix, which, while slightly generic and not necessarily globally unique in a strong cryptographic sense, is still fine because, well, they are actually RDF
18.12.18 15:47:54<dmiles> so many times i get asked "Well show us what you cant do in RDF that you want to do"
18.12.18 15:48:13<stoopkid> lol what
18.12.18 15:48:34<dmiles> (my answer is "all the stuff we being doing in CommonLogic for the last decade!")
18.12.18 15:48:47<stoopkid> that's like asking "show us what you cant do in ASCII that you want to do"
18.12.18 15:49:32<dmiles> well technically i really can convert it.. CommonLogic to RDF :(    
18.12.18 15:49:40<dmiles> or Jpeg to Ascee
18.12.18 15:49:45<dmiles> or Jpeg to Ascii
18.12.18 15:50:01<dmiles> but onc ei do its 1000x time too low res
18.12.18 15:50:42<dmiles> i can convert all of  CommonLogic ot JSON-LD
18.12.18 15:51:00<dmiles> and all of common logic to  RDF lists 
18.12.18 15:52:17<dmiles> which is about as billiant as "nad dipping"
18.12.18 15:53:40<dmiles> creating the required infrastructure for Adga would be as rewarding
18.12.18 15:54:31<dmiles> (due to your bestcase being .. awe shit.. it didnt scale!)
18.12.18 15:54:59<dmiles> (or worse case is it did but now you have to use your system)
18.12.18 15:55:12<dmiles> (or vise versa)
18.12.18 15:55:42<dmiles> though the Adga doesnt relate to nad dipping 
18.12.18 15:56:03<dmiles> (just RDF or Datalog relates)
18.12.18 15:56:22<stoopkid> "the required infrastructure" as in the virtual aliasing stuff? cause i'd really like to have that for Agda at the moment XD
18.12.18 16:00:25<dmiles> :)
18.12.18 16:02:03<stoopkid> this starts to get into some of the things i was trying to figure out when i was working on atlas-project too
18.12.18 16:02:34<stoopkid> so ex. i've got 3 slightly different definitions of TuringMachine
18.12.18 16:03:50<stoopkid> hypothetically for every machine model i'd have a library+git-repo+module dedicated to that machine model, so ex. one for FSAs, one for QueueAutomata, one for TuringMachines, etc..
18.12.18 16:05:23<stoopkid> but, here for example: https://en.wikipedia.org/wiki/Turing_machine#Formal_definition
18.12.18 16:06:17<stoopkid> i can formalize Turing Machines "exactly" like that in Agda https://github.com/sto0pkid/MathStuff/blob/master/Logic.agda#L6122
18.12.18 16:06:57<stoopkid> except here they want this thing called  "a finite, non-empty set of states;"
18.12.18 16:07:15<stoopkid> so ok you want a Set, Q, such that Finite Q
18.12.18 16:07:19<stoopkid> ok so what is "Finite"
18.12.18 16:07:50<stoopkid> https://en.wikipedia.org/wiki/Finite_set#Necessary_and_sufficient_conditions_for_finiteness
18.12.18 16:08:02<stoopkid> https://en.wikipedia.org/wiki/Finite_set#Other_concepts_of_finiteness
18.12.18 16:09:40<dmiles> none of these definitions need the set of finite ordinal numbers to be defined first :P
18.12.18 16:10:01<stoopkid> no
18.12.18 16:10:54<dmiles> i've always wondered why people felt the need to have a total order 
18.12.18 16:11:01<dmiles> (liek Nat)
18.12.18 16:11:03<stoopkid> but the problem is, i have like 30 mathematically different variations on the Turing Machine that humans would still classify as Turing Machine
18.12.18 16:11:14<stoopkid> ?
18.12.18 16:12:15<dmiles> i just mean i've wondered why people sudied  a mapping to Nats to study "Finite"s
18.12.18 16:12:42<dmiles> (for another discussion)
18.12.18 16:13:44<dmiles> it is/was as arbitrary as the creations of rational numbers made only out of division and disallowing multiplication
18.12.18 16:14:00<stoopkid> probably because cardinalities are totally ordered :)
18.12.18 16:14:12<stoopkid> "disallowing multiplication" ?
18.12.18 16:14:39<dmiles>  X * X is 2    makes X irrational
18.12.18 16:15:03<stoopkid> correct
18.12.18 16:15:58<dmiles> rational number still may be made up from results of division
18.12.18 16:16:14<stoopkid> what about X / 0 ?
18.12.18 16:16:24<dmiles> (just not exponenting)
18.12.18 16:16:51<dmiles> good question is X / 0 a rational?
18.12.18 16:17:14<stoopkid> depends if you include an infinity object in your set or not
18.12.18 16:17:59<dmiles> not due to zero but i am of the whole opionion that this whole notion of "rational" is basically made up by humans and not by logic
18.12.18 16:18:21<dmiles> there are some parts of mathemeatics that humans created
18.12.18 16:18:28<dmiles> there are some parts of mathemeatics that humans did not create
18.12.18 16:18:50<stoopkid> humans definitely didn't create the rationals :)
18.12.18 16:19:19<dmiles> well we claim somehow that irrational numbers have a differntent computabilkty profile
18.12.18 16:19:32<stoopkid> but they may have (at times) failed to observe deeper structure behind them
18.12.18 16:20:11<dmiles> example of somethjings humans didnt create was prime numbers
18.12.18 16:20:24<stoopkid> hrm, what do you think music is made out of? :)
18.12.18 16:21:03<dmiles> that is that prime numbers play a meaningfull roel in the universe
18.12.18 16:21:13<dmiles> rational vs irrational dont
18.12.18 16:21:25<dmiles> integers vs rals do
18.12.18 16:21:30<dmiles> integers vs reals do
18.12.18 16:21:31<stoopkid> you would be surprised
18.12.18 16:22:21<stoopkid> there's not too much difference between rationals and integers really, set-theoretically or intuitively
18.12.18 16:22:24<dmiles> irrational numbers are not a byproduct of something that happens in the unverse for example
18.12.18 16:23:45<stoopkid> im really not sure that's the case either
18.12.18 16:23:51<stoopkid> pi and e come up everywhere
18.12.18 16:24:37<dmiles> the distiction am i after is that the interplay between  between wheterh a number is rational or not is about as notable as the differnces between the number 19 and 17
18.12.18 16:25:13<stoopkid> i mean
18.12.18 16:25:21<stoopkid> that's sort of in the eye of the beholder :P
18.12.18 16:25:46<stoopkid> "notability" isn't really a logical/mathematical property :)
18.12.18 16:26:11<dmiles> if course it is usefull for man to create distinctions or properies
18.12.18 16:27:00<dmiles> but i been wondering sometimes wether they belonged to the ssytem we are trying to classify
18.12.18 16:27:41<dmiles> or if we are inventing a system from scratch sometimes
18.12.18 16:27:56<dmiles> like FOL is a "from scratch"
18.12.18 16:29:16<dmiles> Definateness isnt "from scratch".. i'd like to think we can define it
                 <stoopkid> i'd agree that FOL is from scratch
18.12.18 16:29:33<stoopkid> i probably don't think HOL is from scratch though
18.12.18 16:29:49<dmiles> the distinction between the two are 
18.12.18 16:30:01<stoopkid> MSOL is "quite obviously invented"
18.12.18 16:30:53<dmiles> that is that we define a differncer between 17 and 19
18.12.18 16:31:25<dmiles> but maybe we should have picked out 19 and 16 ?
18.12.18 16:31:41<stoopkid> ?
18.12.18 16:32:06<dmiles> what we do when we define such differnces is we invent properties
18.12.18 16:32:33<stoopkid> yes
18.12.18 16:32:38<dmiles> in the case of my alst example.. i defined the property of "2" vs "3"
18.12.18 16:33:21<dmiles> even though secretly in my last example the properies where squarerootable vs prime
18.12.18 16:34:41<stoopkid> mmm, ok?
18.12.18 16:34:45<dmiles> so immagine for isntance i went and gave expert lectures about how 19 bananas are usinjg more soild to grow than 16 binana
18.12.18 16:34:47<dmiles> s
18.12.18 16:35:33<dmiles> and i have abundant amount of horse "solids"
18.12.18 16:35:59<dmiles> yet never seeing that i can actually carry a ballnced load of 16 binnana
18.12.18 16:36:41<stoopkid> and so you and the audience think '3 more' bananas = 'x more' soil instead of thinking 'prime number of bananas' = 'x more soil than square-rootable number of bananas'
18.12.18 16:36:53<stoopkid> well in this case you and the audience would probably be right but
18.12.18 16:37:14<dmiles> yes.. because we are not payign attention to the "natrual properties"
18.12.18 16:37:35<dmiles> we are creating unnatural values 
18.12.18 16:37:39<stoopkid> well
18.12.18 16:37:58<stoopkid> but nobody knows what the actual "natural" properties are
18.12.18 16:38:11<stoopkid> and i rather doubt this is knowable? :)
18.12.18 16:38:34<stoopkid> i'll certainly be skeptical of anybody who claims to know them, to say the least
18.12.18 16:38:58<dmiles> actually a philospeher arthor young showed us that our task is o create a system to detect natual properties
18.12.18 16:39:17<dmiles> (not that he accomplished this task.. but pointed it out)
18.12.18 16:40:21<stoopkid> you mean, a system to do science
18.12.18 16:41:13<dmiles> he showed us a new system to create aritifical properies.. and that if we can proved we inadvertantly used his system than we done something unnatrual
18.12.18 16:41:16<dmiles> yes
18.12.18 16:41:45<stoopkid> scientists don't/can't actually detect natural properties
18.12.18 16:42:59<dmiles> though he showed us an incompletenss property that most sciences leave off at 12 distinctions
18.12.18 16:43:23<dmiles> well they dont have to leave off at 12 but they natrually can distinguish 12
18.12.18 16:43:29<stoopkid> literally all they can do is invent contrived models and explanations of what they think they saw and try to have faith that the future will behave the way their model predicts based on what they think is the current state
18.12.18 16:44:27<stoopkid> it's rather amazing we can survive to even have this discussion under those rather extreme constraints
18.12.18 16:45:11<dmiles> so going along with your exmaple we have ..   ProposedModel   NaturalModel and Measuring to see differnces
18.12.18 16:45:52<dmiles> the ProposedModel in one case is Definateness vs Indefinateness
18.12.18 16:46:01<stoopkid> ProposedModel ObservedModel, and Measuring to see differences, and then UnobservableTrueNaturalModel
18.12.18 16:46:18<dmiles> We propose that Definateness vs Indefinateness is a property
18.12.18 16:47:17<dmiles>  A RealModel (Natural) may or may not be controlled by Definateness vs Indefinateness
18.12.18 16:47:48<stoopkid> no idea what you mean here
18.12.18 16:48:10<dmiles> i/we pruposed the create a scenerio i canont measure the importantce of definateness 
18.12.18 16:48:34<dmiles> (i jsut know it matters to my  ProposedModel)
18.12.18 16:49:22<dmiles> this is totally ok (i cant tell of it isnt or inst natural)
18.12.18 16:50:01<dmiles> but i have to recongnise that any elaborations upon that initial stage are going to inherit this uncertainty
18.12.18 16:50:02<stoopkid> ah i see, i didn't realize you were doing an example ProposedModel i thought definiteness/indefiniteness was supposed to be a fundamental concept about it
18.12.18 16:50:54<stoopkid> i would agree
18.12.18 16:51:09<dmiles> right definiteness/indefiniteness was an exnmaple
18.12.18 16:51:10<stoopkid> (wrt "elaborations inherit uncertainty")
18.12.18 16:52:31<dmiles> what was intesting is Arthor Young thought we can conflate (elaborate upon this) Proposal in only a finate number of ways
18.12.18 16:52:56<dmiles> that is that he sought tio classify how we elaboarted 
18.12.18 16:53:13<stoopkid> mmm
18.12.18 16:53:35<dmiles> before it loops back into a recognsiable object language 
18.12.18 16:53:58<stoopkid> now i don't know what you mean
18.12.18 16:54:28<dmiles> that is that we can set out to define a set of properies that define our properies
18.12.18 16:54:55<dmiles> which becomes suspectable to the first kind of uncertainty
18.12.18 16:55:20<dmiles> (thus we have a usefull recursionb)
18.12.18 16:55:29<stoopkid> mmm
18.12.18 16:55:51<stoopkid> isn't that just exactly modeling something under a hypothetical?
18.12.18 16:56:45<dmiles> yes.. there is a certian point which things cannot become any more uncertain than than one of the first uncertainaties
18.12.18 16:57:12<dmiles> for example
18.12.18 16:57:17<stoopkid> i mean, isn't that really just after the first uncertainty? :)
18.12.18 16:58:04<dmiles> ah right.. there are X number of stages of undertainty after the first
18.12.18 16:58:39<dmiles> the uncetainty about dividing something by zero is differnt than the uncertainy of finding the square root of a negative number
18.12.18 16:59:00<stoopkid> well
18.12.18 16:59:23<dmiles> square root of a negative number we decided to "repair"
18.12.18 16:59:32<stoopkid> it's not like a different concept of uncertainty tailored to each proposition though, it's just the same concept of uncertainty about different propositions ?
18.12.18 16:59:41<dmiles> we decided to define an new isntrument
18.12.18 17:00:38<stoopkid> we extend the rationals with infinity sometimes too :)
18.12.18 17:00:51<stoopkid> and sometimes we work without the complex numbers
18.12.18 17:00:59<dmiles> an uncertianty is calssified by wheter we tried to create a repare and then how much we repaired our repair
18.12.18 17:01:16<dmiles> wehter we seeks to close the model 
18.12.18 17:01:49<dmiles> right now infinity sort of closes our repair
18.12.18 17:02:12<dmiles> (i mean infinity we can accept it as a repair)
18.12.18 17:02:17<stoopkid> so basically you're looking for a logic that searches for the best axioms
18.12.18 17:02:39<dmiles> vs immaginary numbers we did a completely differnt sort of repair
18.12.18 17:03:08<dmiles> yes a  logic that searches for the best axioms.. that tells me a littel way some are better than others
18.12.18 17:03:18* stoopkid can totally accept imaginary numbers as a repair
18.12.18 17:03:44<dmiles> what Young found is that all scinces come up with arround 4 constants
18.12.18 17:04:02<dmiles> then use 3 repair models on these 4
18.12.18 17:04:27<stoopkid> e, pi, i and -1 ? :)
18.12.18 17:04:51<dmiles> he created create like logical sliderule to see which of the permuitations were gettign used at each stage of the sicnce
18.12.18 17:05:55<dmiles> pi hes says is "1" from a differnt axiom system
18.12.18 17:06:41<dmiles> so for exmaple the conversionms between 1 and pi.. might hint at  a  conversion between 0 and soemthing
18.12.18 17:07:17<dmiles> though when i say 4 .. it really means that we pick 4
18.12.18 17:07:41<stoopkid> sure
18.12.18 17:08:11<dmiles> oh oops 0 is defined by 1
18.12.18 17:09:00<dmiles> 1 is an exmaple of an elaboration to introduce that there is a differnce between 1 and something else
18.12.18 17:09:21<dmiles> (something else would be in our case 0)
18.12.18 17:09:57<stoopkid> i mean, you're basically just saying we can overload labels
18.12.18 17:10:02<dmiles> we can elaboarte 1 onto 1 and so on yeilding the constant of what it means to never stop doing that
18.12.18 17:10:38<dmiles> (btw actualy yound really said all scientce s have at least 12 cosntants)
18.12.18 17:10:57<dmiles> jsut usually 3 or 4 breeder labels
18.12.18 17:11:44<dmiles> exmaples of a breeder label is  distance vs velecity vs acceleertation
18.12.18 17:12:29<dmiles> distance and velocity are measurments meant to eleborate upon each otehr
18.12.18 17:12:51<dmiles> aceleertation is meant to exmaple how that can go differntly
18.12.18 17:13:20<dmiles> (velocity is a changing of the relationshiop velocity has upon distance)
18.12.18 17:13:33<dmiles> oops! (accelertate is a changing of the relationshiop velocity has upon distance)
18.12.18 17:13:53<stoopkid> mmmm
18.12.18 17:14:01<dmiles> there are only so many things we do to rearrange such a relationship
18.12.18 17:14:18<dmiles> (that we might consider being part of how they relate)
18.12.18 17:14:40<dmiles> we might add the concept of distance moving thru couved space
                 <stoopkid> i have several problems with your example but i think i get what you're trying to say
18.12.18 17:15:05<dmiles> but we may not change the materials in which we are messiong the move,ment of
18.12.18 17:15:45<dmiles> but we may not change the materials in which we are measuring since when we created the intial systme it was an axiom that the material didnt matter
18.12.18 17:16:08<dmiles> yet we *can* decide to label the material as relivant
18.12.18 17:16:31<stoopkid> yes
18.12.18 17:16:35<dmiles> i mean to say we have a set of pricip0les of what we can or cannot do
18.12.18 17:16:47<stoopkid> hrm
18.12.18 17:17:01<dmiles> and we tend to track such principles 
18.12.18 17:17:32<dmiles> there are only so many ways we can alter our labling printiples
18.12.18 17:17:41<dmiles> the rules about making rules
18.12.18 17:17:52<stoopkid> but history seems to have shown that except for in a very small number of mostly purely philosophical cases, all of our principles are simply conventions
18.12.18 17:18:10<dmiles> yes
18.12.18 17:18:43<stoopkid> so i don't see how that translates into "we can make a fixed set of principles"
18.12.18 17:18:48<dmiles> btw you know this but what Godel really did was seek to point out that every system is part of another system
18.12.18 17:19:57<dmiles> "we can make a fixed set of principles" in that the orignal system we started hacking (the system is " measuremnts of distance" )
18.12.18 17:20:24<dmiles> that we have a system definitions
18.12.18 17:20:25<stoopkid> i mean, i sort of do have a fixed set of principles but a) i don't really assume it to be universal, b) it doesn't seem to be quite the same thing you're talking about
18.12.18 17:21:20<dmiles> we have a system (Young was tying to enumerate it)  that only had "X nujmbers of mental games"
18.12.18 17:21:33<stoopkid> (and i actually don't necessarily assume it to be fixed either it probably just doesn't evolve very much because i just lack insights to go beyond what i've already come up with yet :D)
18.12.18 17:22:09<dmiles> and that every system is going to be created and screwed up by how it used such game moves
18.12.18 17:22:58<dmiles> (there are probly more than just the moves he pointed out)
18.12.18 17:23:14<dmiles> the idea is even the creation of his system was constrained by a set of mental moves
18.12.18 17:23:22<dmiles> constrained*
18.12.18 17:23:56<dmiles> that as systems become more complex they still stay within the legal plays of the first game
18.12.18 17:24:27<dmiles> (some case the first game btw doesnt even use all of the cool moves)
18.12.18 17:24:32<dmiles> (some cases the first game btw doesnt even use all of the cool moves)
18.12.18 17:24:54<dmiles> so Young wanted to see what games we never took to their natrual extreme
18.12.18 17:25:05<dmiles> one such game was mathematics
18.12.18 17:26:03<dmiles> he also picked out absurd games like Astrology to see what it did
18.12.18 17:26:54<dmiles> and physics.. the problem with reading his work .. it it looks like he is trying to draw parallels
18.12.18 17:27:29<dmiles> but i give him more credit.. i think we was trtying to create a system in shich things get created from
18.12.18 17:28:32<dmiles> the game moves have to do with how many previous and older hacks are applied per turn
18.12.18 17:28:48<dmiles> for exmaple 0 to 1 is a single hack
18.12.18 17:29:13<dmiles> then repeating it over and over is yet another sigle hack
18.12.18 17:29:32<stoopkid> hrm
18.12.18 17:29:40<dmiles> the creation of -1 is a single hack 
18.12.18 17:29:45<stoopkid> i mean, i like the idea of having machines do reverse mathematics
18.12.18 17:30:36<dmiles> mulplication (velocety rate toward infiniy) is a single hack
18.12.18 17:31:01<dmiles> now if we infrt (1 hask) we have a way to mess with teh first model
18.12.18 17:31:49<dmiles> but rhen we use that on -1 (new hack? i am not sure) we have a new thing
18.12.18 17:32:53<dmiles> so we create a repeair called "i"
18.12.18 17:33:02<stoopkid> so how does the system make sense of the things it's randomly flipping around?
18.12.18 17:33:15<dmiles> randomly flipping arround is a new properrty 
18.12.18 17:33:23<dmiles> (i mena one hack. )
18.12.18 17:33:51<stoopkid> right but how does the system make sense of these hacks?
18.12.18 17:34:28<dmiles> oh by putting them into his 12 sided things and abeying his 134 rules
18.12.18 17:35:01<stoopkid> got a link?
18.12.18 17:35:03<dmiles> there are 12 classification of hacks that can fllow any other previous 12 classifdication
18.12.18 17:37:43* dmiles gogling
18.12.18 17:38:26<dmiles> http://arthuryoung.com/wwexc2.html
18.12.18 17:39:40<stoopkid> is there an implementation of this?
18.12.18 17:39:51<dmiles> each movement (elaborartion) leverage a "Degree of Freedom"
18.12.18 17:41:15<dmiles> over the years i keep meaning to finish his work and make one
18.12.18 17:42:40<dmiles> people dont take him seriously due to they are looking at trying to verify what he is doing.. not learning the scince he is trying to create
18.12.18 17:44:25<dmiles> i mean on that articel they might think he is actualyl trying to say things about photons
18.12.18 17:46:31<dmiles> but what he is doing is testing the viabilty of a ontology for creation of a science  
18.12.18 17:49:32<stoopkid> well, i certainly share that goal
18.12.18 17:50:13<stoopkid> hrm, let's come back to this after i finish straigthening up my type theory tools :)
18.12.18 17:50:46<dmiles> yeah its  a huge subject
18.12.18 17:51:10<dmiles> it certainly has altered how i view creations
18.12.18 17:53:46<stoopkid> this is sort of a standard concept for mathematicians but i don't know of any actual tools based on applying the concept
18.12.18 17:54:28<stoopkid> (the things he's outlining on that page, i.e. how/why we're coming up with these spaces in the first place and such)
18.12.18 17:54:30<dmiles> The philosopher Arthur M. Young offered an elemental, cumulative approach to organizing physical and psychological processes using "degrees of freedom" and the relations between how we excersize  our librarl freedom
18.12.18 17:54:34<dmiles> Young described how science since Newton had essentially excluded key relationships that shape our physical, psychological, and social worlds.
18.12.18 17:56:21<stoopkid> (actually i think physicists and people who study thermodynamics actually do make a rigorous science out of exactly this)
18.12.18 17:56:39<stoopkid> (and tools to support it)
18.12.18 17:56:57<stoopkid> but i don't know of any generally available tool integrated with a general logic framework
18.12.18 17:57:04<dmiles> yeah.. i think so.. i think that they actualyl form hyphothesis using this form of thiniking
18.12.18 17:57:28<dmiles> (i mean exaclty the way Young is doing there!)
18.12.18 17:58:31<dmiles> ideally to discover when the specific relational math formaulas are likely
18.12.18 17:58:33<stoopkid> right, modern thermodynamics and modern information theory have essentially emerged as the generic rigorous study of how macrosystems relate to their microcompoments and their possible degrees of freedom
18.12.18 17:58:57<stoopkid> s/emerged/converged/
18.12.18 18:00:28<stoopkid> and yea they certainly have tools and apply them to discovering formulas but it's definitely not the case we have these kinds of things generally available in, say, agda for instance
18.12.18 18:00:50<stoopkid> or any of the other standard "foundations of math" systems i'm aware of
18.12.18 18:01:08<stoopkid> i could be wrong (that would be cool :)
18.12.18 18:01:48<dmiles> the only system i have seen that that tried to cover it logically was McCarthy's  Datalog that builds througfh degrees of elaboraTIONS
18.12.18 18:02:16<dmiles> where the programs code edits is some specific ways
18.12.18 18:02:47<dmiles> so in a why i guess McCarthy was workign on implementing it
18.12.18 18:08:22<dmiles> he starts out with a missionaries and canables model 
18.12.18 18:08:56<dmiles> and then explorers add a new decree of freedom
18.12.18 18:09:37<dmiles> and then explorers addinbg a new degree of freedom... he ends up with the logically idiomatic edits it take
18.12.18 18:10:07<dmiles> hah " McCarthy chooses the most horrible actions of men, such as necrophilia, cannibalism and murdering of babies"
18.12.18 18:49:20<dmiles> The motivation is that small changes in one's knowledge/problem, should result in small changes to the representation of that knowledge/problem. One direction allows elaboration to manually make amendments/retraction of axioms/facts.
18.12.18 20:06:33<stoopkid> dmiles: here's another one that bugs me, you've got people on the one hand complaining that total languages aren't turing-complete, fair, burden's on us to explain that design choice, but then you've got type theorists now saying that total languages are actually turing-complete
18.12.18 20:09:04<stoopkid> or rather, "can be": https://www.reddit.com/r/haskell/comments/vazfp/totality_vs_turing_completeness_mcbridepdf_35/
18.12.18 20:09:18<stoopkid> https://www.reddit.com/r/haskell/comments/vazfp/totality_vs_turing_completeness_mcbridepdf_35/c537nus
18.12.18 20:09:35<stoopkid> "Hello, yes, Agda and Coq are Turing complete after all, in any sense that matters."
18.12.18 20:13:10<stoopkid> i mean, it actually is true "in any sense that matters" and you don't even need the codata for that, but it's like, this is a case where the fact that it's true doesn't make up for how misleading and confusing it is
18.12.18 20:13:36<stoopkid> even with codata all programs still halt
18.12.18 20:14:39<stoopkid> and look at the comments here: https://stackoverflow.com/a/30559293
18.12.18 20:14:54<stoopkid> "Well, legal programs do terminate but you need to take into account co-programs (programs working with codata) which simply need to be productive."
18.12.18 20:15:36<stoopkid> also misleading
18.12.18 20:15:49<stoopkid> the productive programs are still terminating!
18.12.18 20:17:41<stoopkid> https://github.com/agda/agda-stdlib/blob/master/src/Codata/Conat.agda#L24
18.12.18 20:22:49<stoopkid> basically what they're really saying amounts to "you can model and work with infinite data-structures by putting the infiniteness behind a thunk and running finite operations that extract data out of the structure up to some thunk"
18.12.18 22:09:45<dmiles> so if agda didnt have the depant type verification.. what would it have over haskell?
18.12.18 22:20:35<dmiles> i guess " "you can model and work with infinite data-structures" and it wont be a complete accident
18.12.18 22:23:18<dmiles> a couple years ago someone was going to do an interactive fiction system in Haskell (no depenant types)   and he was stuck hiding all teh logic away from the haskell type system
18.12.18 22:23:57<dmiles> he had tripled like from N3..
18.12.18 22:24:16<dmiles> he had triples like from N3.. that he had to hide everyhing into Haskell. Anys
18.12.18 22:25:04<dmiles> https://hackage.haskell.org/package/atp-haskell-1.14/docs/Data-Logic-ATP-Lit.html
18.12.18 22:25:47<dmiles> at the time i didnt understand that haskell was not dependantly typed.. but i understood that the static typing would have made his work too impossibl
18.12.18 22:26:46<dmiles> at least when it came to representing a symmertry from the logical code and the game
18.12.18 22:27:58<dmiles> for isntance lets say "joe wanted to go north"
18.12.18 22:28:58<dmiles> it would be that the north the would be a enum better 03
18.12.18 22:29:12<dmiles> it would be that the north the would be a enum between 0 and 3
18.12.18 22:29:30<dmiles> and not a logical notion of north
18.12.18 22:30:58<dmiles> this already broke any chance for logic to be part of a program (at least thru a type system)
18.12.18 22:31:48<dmiles> i am not sayign it correctly.. but anyhow.. there are two types of types
18.12.18 22:32:13<dmiles> types that should always verify that a type error wont take palce
18.12.18 22:32:53<dmiles> types that have to do with self documenting behavoiurs
18.12.18 22:33:03<dmiles> 1) datatypes
18.12.18 22:33:12<dmiles> 2) self documenting types
18.12.18 22:33:43<dmiles> i have totaly assumed dependant typing was  mix of 2 and 1
18.12.18 22:34:19<dmiles> since the whole Nat example is identical to self-documejting-types
18.12.18 22:35:40<dmiles> gawd i guess self documejting types dont even exist as longo outside of mirosoft
18.12.18 22:35:47<dmiles> as lingo
18.12.18 22:37:16<dmiles> ok.. self documented types .. this are effectivelyt abstract interfaces
18.12.18 22:37:28<dmiles> such as List
18.12.18 22:37:31<aindilis>  dmiles, I was wondering about progress on the softbot domain w/ EC planner
18.12.18 22:37:45<dmiles> there is no impl of List other than you know what you do with lists
18.12.18 22:39:41<dmiles> there is no way to verify a  List<T> is a Set<T> until T claims it will implement equality
18.12.18 22:40:30<dmiles> "bar" is a  Set<Char>
18.12.18 22:40:55<dmiles> but we have no idea what a Char will be impleemented as
18.12.18 22:41:11<dmiles> nor should have any say in it
18.12.18 22:42:17<dmiles> take PersonObject.. ius there a datatype fo that?
18.12.18 22:42:30<dmiles> nope
18.12.18 22:43:04<dmiles> a PersonObject is a refernce to a semantci concept
18.12.18 22:43:59<dmiles> "self documenting" comes for the term that PersonObject will be sematically whatever usefull thing it needs to be
18.12.18 22:44:40<dmiles> a good exmaple from Scala is  Optional
18.12.18 22:44:43<dmiles> vs None
18.12.18 22:45:00<dmiles> we have no idea what datatypes for these could ever be
18.12.18 22:45:22<dmiles> mixing of datatypes and semantictypes is always a terrible idea
18.12.18 22:45:53<dmiles> yet so far this is all i have ever seen "verified" or proved
18.12.18 22:47:18<dmiles> is that people forceablely stop using meaningfull types (the in ortder to get datatype checking
18.12.18 22:47:57<dmiles> proably because these people never knew they could program in meaningfull types :)
18.12.18 22:48:43<dmiles> for simple programs like video drivers it makes sense to only use datatypes
18.12.18 22:49:21<dmiles> there is a class of software that needs datatypes 
18.12.18 22:49:58<dmiles> that *only* needs datatypes
18.12.18 22:50:52<stoopkid> no idea what you mean here really
18.12.18 22:51:19<dmiles> it probly stems from OO
18.12.18 22:51:28<dmiles> in OO there are not datatypes
18.12.18 22:52:02<dmiles> there are objects that you multiclass
18.12.18 22:52:56<dmiles> that is since the goal is to not lose performance in order to datatypes 
18.12.18 22:53:23<stoopkid> not sure why datatypes would make you lose performance
18.12.18 22:54:01<dmiles> for example if i am going to print  HelloWorld and then have the receicver respond
18.12.18 22:54:28<dmiles> i would ensure that the recieiver is not dealing with strings
18.12.18 22:55:04<dmiles> but dealing with the  new Msg(new Hello(), new Wolrd()()
18.12.18 22:55:35<dmiles> new Msg(new Hello(), new World()) should not be marshalled into a string
18.12.18 22:55:58<stoopkid> ?
18.12.18 22:56:59<dmiles> for exmaple lets say  new Hello() Obejct has a printMe() method 
18.12.18 22:57:34<dmiles> that method should not count on anything related to a 5 byte string
18.12.18 22:57:50<stoopkid> ah
18.12.18 22:57:51<dmiles> that would be a porr design
18.12.18 22:58:02<stoopkid> probably
18.12.18 22:58:32<dmiles> it should have an method that emits 5 single chars at some Char receiver
18.12.18 22:59:38<stoopkid> basically you're saying that printMe() should essentially be parametrically polymorphic over the class of things it could potentially input/output
18.12.18 22:59:47<dmiles> also we might have a contract to have it call   other->YouAreGreeted()
18.12.18 23:00:32<dmiles> so that the 'other' can understand without parsing
18.12.18 23:00:40<stoopkid> iow you should be able to just simply switch out the string being printed and nothing else would have to change?
18.12.18 23:00:41<dmiles> yes 
18.12.18 23:01:07<dmiles> oopps yes = basically you're saying that printMe() should essentially be parametrically polymorphic over the class of things it could potentially be output
18.12.18 23:01:31<stoopkid> well my next sentence was just paraphrasing that
18.12.18 23:02:03<dmiles> some poutput devices  might have a "YouAreGreeted()" imply a happy sound comes from the OS
18.12.18 23:02:50<dmiles> trying to make this all conform to "datatypes" is hearsy
18.12.18 23:03:02<dmiles> the semantic types is "releigion"
18.12.18 23:03:10<stoopkid> ?
18.12.18 23:03:50<dmiles> if i had to make this    Msg(new Hello(), new World())   marshall  thru a string i would be chanstized
18.12.18 23:03:59<dmiles> chastized
18.12.18 23:04:10<stoopkid> ok?
18.12.18 23:04:38<dmiles> due to that being premature 
18.12.18 23:04:57<stoopkid> who's making you do anything in terms of strings?
18.12.18 23:05:04<dmiles> also you cant "verify" the sensicalness of strings
18.12.18 23:05:59<dmiles> i may have choosen strings like a char*   since i was writng in C
18.12.18 23:06:07<dmiles> (and not C++)
18.12.18 23:06:42<stoopkid> huh?
18.12.18 23:06:49<dmiles> buit even in C i could still use semantic datatypes
18.12.18 23:07:14<dmiles> semantic types
18.12.18 23:07:42<stoopkid> wait
18.12.18 23:08:32<stoopkid> are you basically saying "it's poor design to program around concrete data types, you should program around abstract semantic interfaces instead" ?
18.12.18 23:08:40<dmiles> yes
18.12.18 23:08:47<stoopkid> well
18.12.18 23:08:48<dmiles> (thank you :P)
18.12.18 23:09:25<stoopkid> i agree, but, type theory doesn't stop you from doing that
18.12.18 23:09:57<dmiles> it doesnt.. but it does encourage you to invert a type for every use
18.12.18 23:10:07<dmiles> invent a fake datatyle
18.12.18 23:10:41<dmiles> so that you dont polymorphize yourself into a dumb mistake
18.12.18 23:10:51<stoopkid> not sure what you mean, got an example?
18.12.18 23:11:30<dmiles> we have a PrintableHello vs a ReadbleHello
18.12.18 23:12:12<dmiles> or lets say a  GreenHello   vs a   ColorlessHello
18.12.18 23:12:43<dmiles> we dont want to feed a ColorlessHello into a ColorizedWritter
18.12.18 23:12:57<dmiles> as that would be a type of error
18.12.18 23:13:12<stoopkid> literally a type error :P
18.12.18 23:13:16<dmiles> yes :)
18.12.18 23:13:40<dmiles> so this means i ahve to have multiple versions of Hellos in my VM
18.12.18 23:14:12<dmiles> so tha ti remember that i am supposed to keep track
18.12.18 23:14:38<stoopkid> not sure what you mean wrt multiple versions of Hellos
18.12.18 23:15:31<stoopkid> there are certainly ways to formulate this that wouldn't appear as "having to write multiple versions for every possible permutation of properties"
18.12.18 23:15:49<dmiles> well i am saying i should be being pedantic about the defiernce between where things need to go
18.12.18 23:16:17<dmiles> and write extra typetheory stuff to make sur ei dont put things together wrongly
18.12.18 23:17:01<stoopkid> well, you know i certainly won't argue with that :P
18.12.18 23:17:21<dmiles> for examle.. lets say that i really dont need types but just need strings everywhere
18.12.18 23:18:03<stoopkid> technically you don't ever need types; in the same sense that you don't ever need documentation
18.12.18 23:18:16<dmiles> i might invent types need to suddently invent situations i can prevent
18.12.18 23:18:36<dmiles> i might invent types in order to invent situations i can prevent
18.12.18 23:19:02<dmiles> (which is a good thing if i do that)
18.12.18 23:19:47<dmiles> but eventually the complexity will become that i am multiclassing and trying to get out of the unexepted misdesigns
18.12.18 23:21:03<stoopkid> hrm
18.12.18 23:21:05<dmiles> a typical misdesign:  the PersonString  that repesents a user i am emailing
18.12.18 23:21:59<dmiles> i might need to do a PersonStringIsEmail anda a PersonStringIsNAme
18.12.18 23:22:01<stoopkid> so what you're saying here is that the concept of using types breaks as the complexity of your application scales because the types are too rigid to support the kinds of changes you might make over time?
18.12.18 23:22:47<dmiles> i will have to create a helper fucntor that takes a   PersonStringIsName and convert it to a  PersonStringIsEmail 
18.12.18 23:23:17<dmiles> so that i dont try to send to a bad adress
18.12.18 23:23:28<dmiles> (that part is good)
18.12.18 23:23:43<dmiles> until now i want to start the email with their actual name
18.12.18 23:24:04<dmiles> so i invent a  PersonStringWithNameAndEmail
18.12.18 23:25:15<dmiles> yes that is the issue is that datatype design is almost never going to be right if you have to invent or pick a datatype for everyting you are about to do
18.12.18 23:26:12<stoopkid> ok i think i know what you're getting at, and i think i disagree entirely, can you continue elaborating on your example though?
18.12.18 23:26:13<dmiles> since very rarely are apps so simple 
18.12.18 23:26:48<dmiles> OO was created as a workarrond to datatyping
18.12.18 23:26:51<stoopkid> "until now i want to start the email with their actual name" what do you mean exactly and why are the original types getting in your way for this
18.12.18 23:27:38<dmiles> well in this example i started out by picking strings are a underlying datatype for people
18.12.18 23:27:55<dmiles> it may have been worsde.. i migh t have choosen their SSN
18.12.18 23:28:13<dmiles> well in this example i started out wrongheaded by picking strings are a underlying datatype for people
18.12.18 23:28:45<dmiles> i could have been even sillier and assumed the SSN is a better identity
18.12.18 23:29:22<stoopkid> what problem did choosing strings cause
18.12.18 23:30:09<dmiles> the string seemed brilliant because in this application i have jsut aske d the user to type the naem of the person they want to email
18.12.18 23:30:53<stoopkid> so you're using these strings as the id field in a "table" of people objects ?
18.12.18 23:30:59<dmiles> i am very sure it is a name (i have the input verified)
18.12.18 23:31:37<stoopkid> (quotes on "table" cause this could be a generalized knowledge-base rather than a table-based database)
                 <dmiles> right .. in this case tha tis what it is .. it is an id field in a "table" of people objects 
18.12.18 23:32:36<dmiles> well this example is going to be about making sure i have two differnt types of records .. one for names and one for emails
18.12.18 23:33:03<dmiles> in this case strings are pretty good idea
18.12.18 23:33:45<dmiles> the program can only veryfy that they are differnt if i make sure i give it typeinfo about the differnces
18.12.18 23:34:00<dmiles> (still so far so good()
18.12.18 23:34:17<dmiles> I would even expect this 
18.12.18 23:34:40<dmiles> but now i have to write a subject lines and a email message
18.12.18 23:34:59<dmiles> should subject lines and email messages be a compatable types?
18.12.18 23:35:14<stoopkid> idk, it's your example :P
18.12.18 23:35:15<dmiles> should subject lines and email messages be compatable types? (swappable ?)
18.12.18 23:35:40<dmiles> probalby not if i want to be a safe person
18.12.18 23:35:51<stoopkid> i'd agree
18.12.18 23:36:09<dmiles> so i distinguish them properly
18.12.18 23:36:22<dmiles> maybe still all good
18.12.18 23:36:27<stoopkid> hrm
18.12.18 23:36:31<stoopkid> define properly
18.12.18 23:36:56<dmiles> properly is i make sure that i constraint them as if they are not even strings anymore
18.12.18 23:37:08<stoopkid> hrm..
18.12.18 23:37:39<dmiles> they are  Subject and Message
18.12.18 23:38:02<stoopkid> i mean, might be overkill for the Subject line, i can't imagine it's not a string, but sure :)
18.12.18 23:38:07<dmiles> well maybe they are  SubjectString and MessageString soi i dont confse them
18.12.18 23:38:34<stoopkid> ok so they're both basically "differentiated strings"..
18.12.18 23:38:51<stoopkid> what makes them distinct?
18.12.18 23:38:54<dmiles> so i dont convse them with a  PrintThisFormatedMessage  with a UnformattedString
18.12.18 23:39:12<dmiles> so i dont convse them with a  PrintableMessage  with a UnformattedString
18.12.18 23:39:50<dmiles> well subject lines have to be ascii strings 
18.12.18 23:39:58<dmiles> mesage strings can varyu
18.12.18 23:41:11<dmiles> so here i have introduced now  PrintableMessage  AsciiString  NonAsciiMessageString
18.12.18 23:41:18<stoopkid> so they actually do have structurally different types that you want to assert
18.12.18 23:42:02<stoopkid> subject lines are some ASCII type and message strings are maybe some complex Unicode + attachment files + etc..
18.12.18 23:42:50<dmiles> yes .. right
18.12.18 23:43:14<dmiles> and maybe that doesnt matter on the system i am writting for "yet"
18.12.18 23:43:25<dmiles> so when it starts to matter i need them to call me back
18.12.18 23:43:38<dmiles> anjd have me rewrite all their software
18.12.18 23:43:46<stoopkid> not sure what you mean
18.12.18 23:44:29<dmiles> i mean *i* might choose to defensively realize that SubjectString and MessageString  are underlyingly differnt 
18.12.18 23:44:43<dmiles> since i know already they are
18.12.18 23:44:50<dmiles> but what if it was 10 years ago?
18.12.18 23:44:55<dmiles> and it didnt mater?
18.12.18 23:45:43<dmiles> so what i do is pretend these diferrences will one day matter
18.12.18 23:46:15<dmiles> sop that i am using the ost mindfull typing
18.12.18 23:46:29<dmiles> so that i am using the most mindfull typing possible 
18.12.18 23:47:04<dmiles> this is probably going to be encouraged
18.12.18 23:47:43<stoopkid> so what you're saying is you write an abstract interface that doesn't assume any concrete details about the underlying types and only works with specific abstract behaviors that the underlying types must "make available" some way or another ?
18.12.18 23:48:11<dmiles> yes
18.12.18 23:48:30<dmiles> i can still almost do that with just types
18.12.18 23:48:51<dmiles> but if i do it with just types.. it is going to turn out worse
18.12.18 23:49:01<stoopkid> why?
18.12.18 23:49:16<stoopkid> hrm
18.12.18 23:49:24<stoopkid> i think we have a different conception of what types are :)
18.12.18 23:49:50<stoopkid> one sec
18.12.18 23:49:56<dmiles> but if i do it with "just types".. it turns out worse due to that i actualyol dont use real abstractions anymore
18.12.18 23:50:48<dmiles> i have starting "emulating" abstractions now
18.12.18 23:50:59<dmiles> using contrete types
18.12.18 23:51:35<dmiles> now the " concrete types" are effectively just verifiable lies
18.12.18 23:52:09<stoopkid> so, i think where we're maybe miscommunicating is that for me the word "types" encompasses abstract (polymorphic) & semantic (dependent) types
18.12.18 23:52:15<dmiles> i only have to swindle the typechecker
18.12.18 23:52:32<stoopkid> https://github.com/sto0pkid/CategoryTheory/blob/master/Category.agda#L7
18.12.18 23:52:50<stoopkid> or better, this one: https://github.com/sto0pkid/CategoryTheory/blob/master/Category.agda#L15
18.12.18 23:53:10<dmiles> the problem is eventuaqlyl these polymorphic types are chosen by me
18.12.18 23:53:19<dmiles> not at first
18.12.18 23:53:39<dmiles> at first i am totally writing logical agda
18.12.18 23:54:35<dmiles> i only have to start being naughty if adga wants me to evenrttualy ground these into concrete types
18.12.18 23:55:33<dmiles> effectively type theory helps control my levle of naughtiness
18.12.18 23:55:41<dmiles> (keeps me honest)
18.12.18 23:56:33<dmiles> this is because nonrally people do much nastier things
18.12.18 23:56:48<stoopkid> yes you typically have to eventually ground your stuff in something concrete (the type theory doesn't really care but your machine does)
18.12.18 23:57:41<stoopkid> but the abstractions basically just let you turn that choice of concrete grounding into a configuration setting
18.12.18 23:57:56<dmiles> if we trained people to think abstractly we never would have thoujght we needed to create the typetheory
18.12.18 23:58:44<dmiles> i mean we would have still created some typetheory but its mission would be for a differnt set of bugs
18.12.18 23:59:23<dmiles> we crafted teh typetheory to add dilligence arround a particulator style of bugcatching
18.12.18 23:59:44<dmiles> based on the bugs that annoyed the wrong people
18.12.18 23:59:57<stoopkid> if by that you mean that if we trained people to think better then people would catch harder bugs, whether or not we were using type theory, then i agree :P
19.12.18 00:00:21<dmiles> i ratehr have typetheory catch the harder to spit bugs
19.12.18 00:00:26<dmiles> i ratehr have typetheory catch the harder to spot bugs
19.12.18 00:00:55<dmiles> like several obscure ones that dont happen very often 
19.12.18 00:01:02<dmiles> that are more major
19.12.18 00:01:34<dmiles> like raceconditions
19.12.18 00:01:49<dmiles> actualy typetheory i sgood with racecondition spottings
19.12.18 00:02:04<dmiles> (using session types)
19.12.18 00:02:44<stoopkid> i mean, type theory's pretty good at enforcing any property you express in it
19.12.18 00:02:52<dmiles> but when have you ever hear dof a type theorist coding with session types?
19.12.18 00:03:26<dmiles> (session types are vollentary)
19.12.18 00:03:41<stoopkid> those deepspec and sel4 folks that i linked you earlier are doing stuff like that
19.12.18 00:03:48<dmiles> immagine if session types were manditory !  
19.12.18 00:04:24<stoopkid> i mean, if you're advocating that we work in even stronger default typing than what the type theory already imposes, i'm probably not gonna argue :P
19.12.18 00:04:37<dmiles> lets make  typeassignment computation optional and sessiontypes mandory rather rthan the other way arrond!
19.12.18 00:05:14<stoopkid> ah, i would prefer a middleground: have both, in the places they already naturally belong! :D
19.12.18 00:06:00<dmiles> what i am agaist is making people deal with datatype problems
19.12.18 00:06:12<dmiles> what i am agaist is making programmers deal with datatype problems
19.12.18 00:06:57<dmiles> example is that i write in over senseitive to type error programming languages all the time and i never get type errors
19.12.18 00:07:11<stoopkid> hrm
19.12.18 00:07:20<dmiles> so last thing i am goign to do is wast time teaching the computer i can be trusted to keep working the way i do
19.12.18 00:07:40<stoopkid> let me give an example
19.12.18 00:08:07<stoopkid> obv the end-user programmer should basically just be able to do "whatever they want" right
19.12.18 00:08:15<stoopkid> infloop it? sure. try to divide by 0? sure why not
19.12.18 00:08:23<stoopkid> your computer right
19.12.18 00:09:08<stoopkid> generally though your average programmer wants to be working in a sandboxed environment
19.12.18 00:09:23<dmiles> well i dont want them to pay them double jsut beause they have to sign a contract
19.12.18 00:09:45<dmiles> (they ahve to sign a contract to proven that they didnt div0)
19.12.18 00:10:54<dmiles> the walmart greeter certainly would not check every reciept 
19.12.18 00:11:10<dmiles> if they did .. no one would go back to shop there
19.12.18 00:11:23<stoopkid> huh?
19.12.18 00:12:01<dmiles> walmart greeters act like secreity guards to make sure there in no one leaving with an unpaid for tiem
19.12.18 00:12:25<dmiles> they randomly sample suspicions customers
19.12.18 00:13:03<stoopkid> are you suggesting we need to let some bugs slip through in our programs because the bugs would find it rude and not come back if we tried checking them all?
19.12.18 00:13:55<stoopkid> or are you saying nobody's gonna write code for you if they have to prove it works
333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333319.12.18 00:13:56<dmiles> i am saying the prices of grocerties would go way up in price if we made sure every customer was searched
19.12.18 00:14:58<dmiles> i am saying that its fine to search consomers that they dont trust
19.12.18 00:15:15<stoopkid> or rather, that the managers aren't gonna pay the extra costs that would be associated with the proofs
19.12.18 00:15:53<dmiles> well what we  are asking is programmers write twice as much code
19.12.18 00:16:15<dmiles> with no benefits in some cases
19.12.18 00:16:21<stoopkid> yes
19.12.18 00:16:24<dmiles> )some cases plenty of benefit)
19.12.18 00:16:51<dmiles> i quite a job once for this exact reason :P
19.12.18 00:17:04<stoopkid> this is why i actually only advocate for it in a rather small number of important cases
19.12.18 00:17:42<dmiles> i had written a protocal excnanger betweeen  Java and C++  for Hanspon robotics
19.12.18 00:18:14<dmiles> i created "data holder objects" that had a methond called   .checkValid()
19.12.18 00:18:55<dmiles> that ensured every message was well formed
19.12.18 00:19:17<dmiles> no problem.. but now we needed it for  Prolog and JSON
19.12.18 00:19:48<dmiles> this means i have to invent a typesystem that would replicate the C++ and Java code
19.12.18 00:20:16<dmiles> so i created a validator that checked messages to make sure they were logically correct
19.12.18 00:20:34<dmiles> however there was no "datatype that can be confirmed to be in correct shape{"
19.12.18 00:20:46<dmiles> JSON was jsut JSON
19.12.18 00:21:32<dmiles> they asked me to create a separate class for all 29 diffenert messages still
19.12.18 00:22:11<dmiles> these fake classes wouldnt be able to be used in code
19.12.18 00:23:07<stoopkid> so, what i don't want is: "every programmer should only program in type theory" what i *do* want is: a) "every programming *language* should be formally modeled in type theory and have its compilation processes verified and use math/logic to expand our ability to write abstract/sophisticated transforms between diverse systems of computation"; b) "we should have a verified operating system that has a type-system at the
                 <stoopkid> deepest layer of the kernel guarding access to machine resources and providing the type theory's  capacity for abstraction up through every layer above that"; c) "computer algebra systems developed over a solid foundation of math"
19.12.18 00:23:45<dmiles> it was really in C++ and java theyt could not even use messages unless they had classes first
19.12.18 00:24:15<dmiles> (so it was reasonable to expect me to have writtenb their java ones for them)
19.12.18 00:24:30<dmiles> it was unreasoanmble to make javascript objects
19.12.18 00:25:38<dmiles> classes for the sake of classes.. or types for the sake pof types
19.12.18 00:25:48<stoopkid> also i tend to think of the utility of this stuff less for client-dev paid projects and more for crowd-funded, distributed, floss
19.12.18 00:26:10<stoopkid> or proof-markets
19.12.18 00:27:49<stoopkid> maybe 10-50 years from now it will be more standard practice and verifications won't be so challenging but where we're at now it's tough for any client-dev project with limited resources (all projects), finite deadlines (all projects), with a closed development process
19.12.18 00:28:24<stoopkid> but if you put it up on something crowd-sourced it could still work wonders even today
19.12.18 00:29:50<dmiles> it turns out that the fewer type constraints you put on a language the less type errors are possible
19.12.18 00:30:16<stoopkid> then it's just cumulative, you write some code, maybe eventually it gets typed, if not oh well you can run it if you want to; you write some types, maybe eventually somebody provides some code that satisfies them, if not oh well maybe attach some incentives to finding the implementation etc..
19.12.18 00:30:18<dmiles> (but another class of errors become more previalanet)
19.12.18 00:30:47<stoopkid> it's really just the same errors
19.12.18 00:30:58<stoopkid> the difference is when/how you catch them
19.12.18 00:31:05<dmiles> now it turns out if you increase the type constraints.. the type errors are now mananged
19.12.18 00:31:23<dmiles> but the other types of errros continue
19.12.18 00:31:32<stoopkid> eh?
19.12.18 00:32:10<dmiles> as the programmer is now working overtime to prevent the calss of "type errros"
19.12.18 00:32:39<dmiles> potentially make more of the otehr kinds of errors
19.12.18 00:32:59<stoopkid> if you wrote your types correctly then if your programmer got a type error then his program actually doesn't work
19.12.18 00:34:06<dmiles> in the first case he wasnt gettign type errors.. was gettign other types of errors 
19.12.18 00:34:21<stoopkid> yea that's what i mean :P
19.12.18 00:34:22<dmiles>  when we started gettign stricter.. he still wasnt making type errors.. but his otehr errros increased
19.12.18 00:34:54<stoopkid> you mean when we started getting stricter, his program gave a type error because it was wrong ?
19.12.18 00:35:08<dmiles> it never gave type errors 
19.12.18 00:36:07<dmiles> to give a realy world example 
19.12.18 00:36:20<dmiles> i wrote something in C# which decided the berst type for me
19.12.18 00:36:40<stoopkid> if his program had more errors after you increased the strictness of your types, you didn't actually increase the strictness of your types :P
19.12.18 00:36:51<dmiles> then i wrote in Java and it was tons more work io have to think out the types every time
19.12.18 00:37:22<dmiles> then in SCala. even worse
19.12.18 00:37:32<dmiles> i had to think out types even more!
19.12.18 00:37:38<dmiles> the same codebase
19.12.18 00:37:55<dmiles> jsut more bugs as we devolved
19.12.18 00:39:02<stoopkid> if your code won't even satisfy scala or Java types, then it *really* doesn't work
19.12.18 00:39:37<dmiles> it could satify the types but only with exra work that C# never rquired
19.12.18 00:39:59<stoopkid> i mean
19.12.18 00:40:08<stoopkid> there's infinitely many ways to make all of these processes more convenient
19.12.18 00:40:20<dmiles> C# never made me decide between a Oxed integer and a unboxedinteger
19.12.18 00:40:36<dmiles> between a boxed/unboxed
19.12.18 00:41:01<dmiles> java i hade to decide that every seingle method
19.12.18 00:41:15<stoopkid> well, ideally your type system should only be differentiating the things that you actually wanted to differentiate!
19.12.18 00:41:16<dmiles> and write a method for both cases!
19.12.18 00:41:39<stoopkid> (hence why i like HoTT btw heh)
19.12.18 00:41:48<dmiles> ok now rthat is a good point
19.12.18 00:41:55<dmiles> that is a good point
19.12.18 00:42:35<dmiles> can we trust people to differentiate enough?
19.12.18 00:43:29<stoopkid> mmm
19.12.18 00:43:57<stoopkid> i generally don't assume any general trustability with people/programmers ?
19.12.18 00:44:46<stoopkid> we can trust people/programmers to: release code with bugs, shoot themselves in the foot, download viruses, and, yea
19.12.18 00:45:25<dmiles> i am one of those people that dont want my typesystem differntialing between boxed/unboxed types 
19.12.18 00:45:39<stoopkid> hrm
19.12.18 00:45:59<stoopkid> to me it's less about your type-system doing the differentiation and more about your types themselves doing the differentiation
19.12.18 00:46:32<stoopkid> in your example here the boxed/unboxed are essentially the same underlying type, but annotated, right
19.12.18 00:47:09<dmiles> well in java its a  long vs Long 
19.12.18 00:47:29<dmiles> which to the cpu is a huge differnce
19.12.18 00:47:30<stoopkid> well
19.12.18 00:47:41<stoopkid> i can't speak to java's specific quirks really
19.12.18 00:48:15<stoopkid> but they also don't really have much bearing on type theories like Agda's and such
19.12.18 00:48:31<dmiles> well sort of like a   null terminated string vs a string that has the length as the first few bytes
19.12.18 00:48:34<stoopkid> although Agda also has its own completely different set of annoying quirks
19.12.18 00:48:56<stoopkid> well but there's the thing
19.12.18 00:49:16<stoopkid> there's some contexts where you want to treat them differently, and some contexts where you want to treat them the same
19.12.18 00:50:20<stoopkid> sometimes ex. i want to be explaining the specific algorithm that's gonna tell the actual machine how it's gonna process the actual concrete data-type it ends up working on
19.12.18 00:50:33<stoopkid> and otoh sometimes i just want to be working on the other side of an abstract string interface
19.12.18 00:51:52<dmiles> the problem with typetheory (i hope to god i am wrong!)  is muich of the verification has to do with datatypes 
19.12.18 00:51:55<stoopkid> obv i can't feed a base 3 number to something expect a base 2 number, but i can certainly feed either a base 3 or a base 2 number to something simply expecting "a number"
19.12.18 00:52:16<dmiles> the problem with typetheory (i hope to god i am wrong!)  is muich of the verification *seems* to have do with datatypes 
19.12.18 00:52:33<dmiles> seesion types are exmaples that have nothing to do with datatypes
19.12.18 00:53:27<dmiles> jsut most 85% examples seem to be about datatypes.. so i cant tell 
19.12.18 00:53:30<stoopkid> you mean has to do with specific concrete data-types, rather than being polymorphic?
19.12.18 00:54:00<dmiles> right..85% is about ensuring the correct contrete types got used
19.12.18 00:54:36<stoopkid> nah i don't think so, rather quite the opposite i think that's the thing we're seriously lacking atm
19.12.18 00:54:38<dmiles> (if not seemingly 99% )
19.12.18 00:55:40<stoopkid> it's really pretty much literally the opposite
19.12.18 00:55:43<dmiles> machine exceptions though at least 
19.12.18 00:57:36<stoopkid> 99% is pure abstraction that hasn't been bound to anything concrete yet, because binding abstract interfaces to concrete implementations is basically literally considered to be the menial labor of mathematics
19.12.18 00:58:52<dmiles> part of the problem is sloightly that when i read about formal verification it is what you say it is
19.12.18 00:59:19<dmiles> when i hear peopel talk aobuit it on irc.. it is about datatypers
19.12.18 00:59:36<dmiles> (still could be me misunderstanding people like)
                 <stoopkid> eh
19.12.18 01:00:02<stoopkid> if you're talking about ##dependent then you must be completely misunderstanding :)
19.12.18 01:00:46<stoopkid> they're the prime example i think of when i say that 99% of the work being done right now is literally just the ultra-high-level off-in-the-clouds abstraction
19.12.18 01:00:47<dmiles> oh sorry .. the input data us made up of datatypes
19.12.18 01:01:10<dmiles> oh sorry .. the "input data" is made up of datatypes
19.12.18 01:01:51<dmiles> i dont tust that the input type checking can do anyhting for the type of typechecking we care aobut
19.12.18 01:01:59<stoopkid> like they have more results about homotopies and abstract algebra and modal logics and etc than they do about bit vectors and strings
19.12.18 01:02:50<dmiles> tha tis a an  "int -> int"  -> "int -> inmt" is not going to be helping in any way
19.12.18 01:03:34<stoopkid> i mean
19.12.18 01:03:43<dmiles> since datatype saefy is unrelated to typesaftey
19.12.18 01:03:52<stoopkid> if that's all you think its types are...
19.12.18 01:04:02<stoopkid> then you must be missing something XD
19.12.18 01:04:31<dmiles> many languages like purescpt i belive only have datatype saftey
19.12.18 01:04:43<dmiles> sorta like haskell
19.12.18 01:05:00<stoopkid> how about my dreadbury mansion example
19.12.18 01:05:20<dmiles> that was using proceedural interpreation 
19.12.18 01:05:47<dmiles> (so it uses types but not in a safe/unsafe manner)
19.12.18 01:05:56<stoopkid> it is a type describing the constraints of a universe, you satisfy the type by providing an implementation of that universe, and any implementation that passes the type-checking will satisfy the specified constraints, i.e. be type-safe
19.12.18 01:06:03<dmiles> (i mena to say is its not about bugchecks)
19.12.18 01:06:56<dmiles> i mean i assume it is aboiut precalculation of the asnwer at compile time
19.12.18 01:08:05<dmiles> but i might have misjudged since i dint know as much when i looked at it
19.12.18 01:09:22<stoopkid> you mean you assume that my dreadbury mansion example was about precalculation of the answer at compile time?
19.12.18 01:09:29<dmiles> so i assume the type checker reduces the code to e,it the asnwer
19.12.18 01:10:37<dmiles> dreadbury mansion example, yes, is about using enough types the system by jsut verifiying the types is foirced into the only cosnsitent result which effectively was the saner
19.12.18 01:11:15<dmiles> the same as what the answer must be
19.12.18 01:13:25<stoopkid> sort of, although it didn't actually do the calculation, i did the calculation and it simply checked it, but yes i derived a set of constraints from the problem, created a record type that contained all these constraints, and then it was a provable fact that there was a predetermined answer to question in any structure/"world" that satisfied those constraints
19.12.18 01:14:03<stoopkid> to the* question
19.12.18 01:15:12<stoopkid> i didn't make mine particularly abstract: https://github.com/sto0pkid/CategoryTheory/blob/master/Agatha2.agda#L98
19.12.18 01:15:31<stoopkid> but i could've
19.12.18 01:15:48<stoopkid> instead of using Nat i could've had the population be an arbitrary Set
19.12.18 01:17:02<dmiles> i have a method that randomlizes he order of this list [1,2,3,4]  .. and another algrythem that sorts it afterwards.. i should be able to expect typetheory to give a proof that emiminated those methods?
19.12.18 01:17:52<stoopkid> you mean give a proof that shuffling and then a sorting an already sorted list returns the same list?
19.12.18 01:18:07<dmiles> yes
19.12.18 01:18:12<stoopkid> absolutely
19.12.18 01:19:11<dmiles> right on .. that is the type of value i was thinking dreabury was using (just more compleicated)
19.12.18 01:22:41<stoopkid> i don't have an example with shuffling and then sorting but i have an example of being able to eliminate reversing a list twice
19.12.18 01:24:05<dmiles> ideally we would want to be proving that our shufflings will never acednjtly assign a numnber twice
19.12.18 01:25:10<dmiles> we'd convey ihn some way that this  [1,1,1,1] is not a shuffing of [1,2,3,4]
19.12.18 01:26:28<dmiles> algrythemically we'd be able to verify that the shouffling code is incapable of making such a mistake
19.12.18 01:26:49<stoopkid> sure
19.12.18 01:27:47<stoopkid> these things are pretty straightforward to specify in Agda, this kind of like Agda-proving 101
19.12.18 01:29:00<stoopkid> this is the kind of thing that's simple enough that it isn't even a big deal to provide the proof manually
19.12.18 01:31:12<dmiles> to make it a little harder .. the next sort of proofs we might want is proof that a particualr bourd arrangemnt in tic tac toe will always result in a draw
19.12.18 01:31:34<dmiles> (say 3 moves from the end of a game)
19.12.18 01:31:58<stoopkid> here's a simple one but one of my favorites, it's even in the standard library: https://github.com/agda/agda-stdlib/blob/master/src/Data/Bool/Properties.agda#L456
19.12.18 01:32:25<stoopkid> so f (if a then x else y) == if a then (f x) else (f y)
19.12.18 01:33:15<dmiles> yeah
19.12.18 01:33:43<stoopkid> so with that tic tac toe example we've got a couple options
19.12.18 01:34:28<stoopkid> you could make a function/algorithm in that computes the answer, and then prove that your function/algorithm computes it correctly
19.12.18 01:34:51<dmiles> https://gist.github.com/phadej/c26dbe6a32b1600d31db  is anm exmaple
19.12.18 01:35:38<dmiles> (that examimes every possible playable game)
19.12.18 01:35:53<stoopkid> or you could take a specific board arrangement as input and use an inferencing process to determine the answer, using the constraints specified in the definition of the tic-tac-toe game and the type theory rules
19.12.18 01:36:12<stoopkid> yes so that example is taking the first option
19.12.18 01:36:55<stoopkid> writes a function/algorithm in type theory, "solve-position", and then "-- And eventually we could proof something like:"
19.12.18 01:39:23<stoopkid> this first option with writing the functions/algorithms in type theory and then proving stuff about them, that's what i want for the stuff i want to build an operating system kernel out of
19.12.18 01:40:13<stoopkid> the second option is more what i would want for, ex. world-building... "user-land"... your "toilets clogged therefore look up the supervisor authorized to call the plumber" scenarios, etc..
19.12.18 01:43:06<dmiles> ideally is always abput to do the things that the rules implied 
19.12.18 01:46:06<stoopkid> yes
19.12.18 04:05:06*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
19.12.18 04:14:44*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
19.12.18 04:46:08*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
19.12.18 05:50:09*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
19.12.18 06:02:43<stoopkid> dmiles: hrm, just realized another downside (or potentially interesting thing to be explored) with these theorem provers
19.12.18 06:03:01<stoopkid> take my turing machines for example
19.12.18 06:03:39<stoopkid> https://pastebin.com/rLKZCJ33
19.12.18 06:03:47<stoopkid> simple enough
19.12.18 06:03:49<stoopkid> but no
19.12.18 06:04:12<stoopkid> STATE, TAPE-SYMBOL, and INPUT-SYMBOL have to be finite
19.12.18 06:05:18<stoopkid> how do i express that these are finite? well apparently there's like 30+ definitions of finiteness that stop being equivalent depending on whether or not you have LEM, or AoC, or LPO, or LLPO, etc..
19.12.18 06:07:20<stoopkid> makes me wonder if a) dropping LEM and AoC splits up any equivalence class of classical propositional logic statements into an infinite hierarchy of non-equivalent constructive propositional statements, b) whether this can be abstracted out of a statement
19.12.18 06:09:30<stoopkid> i mean, it can in at least one sense
19.12.18 06:11:12<stoopkid> ex. ~A v B is equivalent to A -> B, but the latter does not imply the former in constructive logic
19.12.18 06:12:08<stoopkid> so if you want to treat A -> B as ~A v B, then anywhere you would've proved (~A v B) -> C, you can prove (A -> B) -> LEM -> C
19.12.18 12:37:13<dmiles> yes, i think you are about right about "dropping LEM" in that exqmple .. but "must" instead of "can" in " you can prove (A -> B) -> LEM -> C"
19.12.18 12:39:11<dmiles> anytime one drops an inference rule in the logic it has to be effectively transfered back into the object langauge
19.12.18 12:40:14<dmiles> btw this is the essence of what is meant by "canonicalization" in systems like CYC
19.12.18 12:41:16<dmiles> it that we are transfering into user statements the infernce rules we that dropped
19.12.18 12:42:28<dmiles> to ensure that those statements are still going to prove the same things
19.12.18 12:43:48<dmiles> thus dropping  "AoC" or "Definiteness" or "PoE" we have ensure that we add those options back
19.12.18 12:44:55<dmiles> this alters a Datalog program in new and usefull ways
19.12.18 12:48:02<dmiles> ideally what i am think about looking for in type theory statements is ways of adding them into datalog programs
19.12.18 12:49:20<dmiles> (rhat is *my* agenda generally with type theory)
19.12.18 12:50:01<dmiles> because i turn all non-datalog programs into being programs that can be ran under datalog
19.12.18 12:51:36<dmiles> this becomes interesting since turing machines can be converted to these as well
19.12.18 12:54:14<dmiles> and logical properties of those machines (finite? not-finite?) are handled by how infinatary or non-infinatary logic of those "logic program" machines 
19.12.18 12:54:26<dmiles> are handled
19.12.18 12:55:45<dmiles> proofs are no longer just programs.. they are also what the programs are going to do
19.12.18 12:56:38<dmiles> we want some proofs to be infinite (at least when they are)
19.12.18 12:59:38<dmiles> and we can still use the datalog hacks and interpretations to do thing that turing machines are supposedly unable to do along with all the things they can
19.12.18 13:01:00<dmiles> all types of inferenece rules and statements can be converted into such a system
19.12.18 13:02:29<dmiles> what interests most people (but not me) is figuring out if and how these things get converted to non-logic programs
19.12.18 13:04:43<dmiles> only because i and them both have opposite viewpoints on costs outwieghing the benefits (between the non-determinjistic turring machines vs determinstic turing machines)
19.12.18 13:06:50<dmiles> i think the sacrificing infinartary logics is too high a prices
19.12.18 13:07:01<dmiles> is too high a price 
19.12.18 13:08:12<dmiles> and they think that nondeterministic machines must cost too much due to that they have to be "emulated" on deterministic machines 
19.12.18 13:11:05<dmiles> even after being able to program computer for several years i was still immature enough to belive what everyone else did
19.12.18 13:11:25<dmiles> everyone else does
19.12.18 13:13:13<dmiles> even once understanding how it would work.. i still had to grow comfortable with it happening
19.12.18 13:14:29<dmiles> now, with that, it still hard to grow the skills to make it happen decently
19.12.18 13:18:02<dmiles> but i laugh due to i considering how much *extra skill* it would take me to program the same things without lettign it happen
19.12.18 13:21:58<dmiles> now a different spin (more of a positive note)
19.12.18 13:22:38<dmiles> people finnaly started to see value in teh use of theorem prover in programming
19.12.18 13:23:16<dmiles> they just havent discovered all the values yet 
19.12.18 13:25:19<dmiles> unlike those people like me whom also use theorems provers to "execute" programs 
19.12.18 13:30:46<dmiles> most of the theoretical problems of logic stem from wanting to ground things (fully bind them) into determinates 
19.12.18 13:30:58<dmiles> of both logic and computation
19.12.18 13:32:21<dmiles> for instance the fact there are an infinite natural numbers shows that there must be a problem
19.12.18 13:32:52<dmiles> (at least that is what people though Godel was implying)
19.12.18 13:34:39<dmiles> example of "ground things (fully bind them) into determinates "  would be to see the sucessor axiom in FOL would lead to a new axiom for every natrual number
19.12.18 13:37:14<dmiles> where i would say the mere inclination to seek ground things (fully bind them) into determinates is a deadly mistake
19.12.18 13:38:18<dmiles> i dont know why such a perverse inccentive was ever sught
19.12.18 13:38:25<dmiles> sought
19.12.18 13:38:51<dmiles> i dont know why such a perverse inclination was ever thought up
19.12.18 13:39:22<dmiles> there are no incentives to it
19.12.18 13:40:19<dmiles> it is merely a road to pain with no rewards
19.12.18 13:41:33<dmiles> "but proof of groundiblty is proof of termination!" they cry
19.12.18 13:42:13<dmiles> so i ask how has a prioblem with non-termination?
19.12.18 13:42:34<dmiles> (i ask "who?")
19.12.18 13:43:39<dmiles> they say "you (well prolog) does!.. your programs loop into infinitum when i tell it one or two logical things!"
19.12.18 13:44:20<dmiles> I ask "have you ever tried a p[roprolog with coninduction yet?"
19.12.18 13:45:15<dmiles> they say "Nope, but i have a possible solution"
19.12.18 13:46:19<dmiles> a prolog with coinduction returns ungroundable closures
19.12.18 13:47:10<dmiles> these ungrounable closures seem to be unacceptable to some people
19.12.18 13:47:21<dmiles> i cant for the life of me understand why 
19.12.18 13:48:17<dmiles> the mere fact such closures exist are evidence thje problem was solved
19.12.18 13:49:48<dmiles> ?- '#<'(X,0).
                 <PrologMUD> jmvanel: % X=_3464850{clpfd:clpfd_attr(no,no,no,from_to(inf,n(-1)),fd_props([],[],[]))}
                 <PrologMUD> jmvanel: %    Residual Goals:  clpfd:in(_3464850,..(inf,-1)) 
19.12.18 13:49:49<PrologMUD> jmvanel: %  det(Yes,1)
19.12.18 13:50:18<dmiles> ?- '#>'(X,0).
                 <PrologMUD> jmvanel: % X=_3479178{clpfd:clpfd_attr(no,no,no,from_to(n(1),sup),fd_props([],[],[]))}
                 <PrologMUD> jmvanel: %    Residual Goals:  clpfd:in(_3479178,..(1,sup)) 
19.12.18 13:50:19<PrologMUD> jmvanel: %  det(Yes,1)
19.12.18 13:51:52<dmiles> the first one the bot printed was  first order term that represented all (infinite number of) negative inetgers
19.12.18 13:52:19<dmiles> ok maybe it was a HOL term?
19.12.18 13:52:35<dmiles> the second one the bot printed was all (infinite number of) postive integers
19.12.18 13:54:11<dmiles> ?- '#<'(X,3),'#>'(X,-2).
                 <PrologMUD> jmvanel: % X=_3509022{clpfd:clpfd_attr(no,no,no,from_to(n(-1),n(2)),fd_props([],[],[]))}
19.12.18 13:54:12<PrologMUD> jmvanel: %    Residual Goals:  clpfd:in(_3509022,..(-1,2)) 
                 <PrologMUD> jmvanel: %  det(Yes,1)
19.12.18 13:55:08<dmiles> that was negative -1 thru 2 
19.12.18 13:55:21<dmiles> that was -1 thru 2 
19.12.18 13:55:35<dmiles> so ok we can do this with values
19.12.18 13:56:01<dmiles> can we do also do this with programs?
19.12.18 13:56:06<dmiles> yes
19.12.18 13:56:34<dmiles> we can also do this with program producing programs
19.12.18 13:57:00<dmiles> and programs producing programs that verify programs that produce such values
19.12.18 13:59:43<dmiles> the only thing that ever stopped that was some batshit crazy inclination to seek ground things (to fully bind them) 
19.12.18 14:00:23<dmiles> though i do think i understand where it came from
19.12.18 14:00:55<dmiles> from the 19th century mathematicians
19.12.18 14:02:36<dmiles> which we notice that 20th century mathematicians like Godel/Turring effectively  raising red flags about it
19.12.18 14:07:49<dmiles> like Godel was merly showing us how dumb we were being (expecting us to figuring out on our own to stop being so)
19.12.18 14:09:15<dmiles> Or if like most belive: he was really trying to cannonize what we were doing into law
19.12.18 14:09:25<dmiles> (our mistakes into laws)
19.12.18 14:10:35<dmiles> Turing actualyl gave blame..
19.12.18 14:10:41<dmiles> He blamed it on "Tape"
19.12.18 14:12:59<dmiles> ihis proposed problem required TAPE-SYMBOLs that are fully bound
19.12.18 14:14:03<dmiles> had his machine been allowed to do what CYC does he would not been able to do it
19.12.18 14:14:43<dmiles> (or what PrologMUD just did)
19.12.18 14:15:42<dmiles> that is that CYC/Logicmoo use a special kinds  on infinatary objects
19.12.18 14:16:21<dmiles> that is that CYC/Logicmoo use a special kinds of "infinatary objects" that cannot (supposedly) be represented in first order logic
19.12.18 14:19:01<dmiles>  "infinatary objects"  are what i also  call "proof carring terms"
19.12.18 14:20:35<dmiles> a turing machine can use finite tape as long as it can use "infinatary objects" 
19.12.18 14:20:45<dmiles> (on that tape)
19.12.18 14:21:39<dmiles> but the fact it can perhaps prove it own consisteny it might no longer be a turing machine by defintion
19.12.18 14:29:41<dmiles> lets pretend i didnt make the last statmenti think i went plenty far before saying that :P
19.12.18 14:29:58<dmiles> aindilis: on the EC
19.12.18 14:30:27<dmiles> the problem i am trying to solve is that EC doesnt use Preconditions the way we are used to
19.12.18 14:32:19<dmiles> i am setting up an exmaple i will commit
19.12.18 15:07:53<dmiles> here is an exmaple:  https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/ectest/ec_reader_test_ecnet.e.pro#L1501-L1502
19.12.18 15:09:00<dmiles> yet every other type of EC and PDDL axiom i have implemented
19.12.18 15:09:42<dmiles> its funny that the most simplistic of all STRIPS/PDDL is being aproblem
19.12.18 15:11:27<dmiles> a Trigger axiom like https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/ectest/ec_reader_test_ecnet.e.pro#L3503-L3528   
19.12.18 15:11:35<dmiles> works 
19.12.18 15:12:33<dmiles> and the axiom below the "effect axiom" works
19.12.18 15:17:19<dmiles> oh Existentials are needing to be fixed in place:  https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/ectest/ec_reader_test_ecnet.e.pro#L3903-L3908
19.12.18 15:21:31<dmiles> it might be that OCL planner supports all the axiom types 
19.12.18 15:21:34<dmiles> https://github.com/TeamSPoon/planner_api/blob/master/prolog/logicmoo_ocl_and_pddl.pl
19.12.18 15:22:57<dmiles> but i also know how now to make STRIPS support all of AC
19.12.18 15:23:48<dmiles> but OCL was invented perhaps to combine  STRIPS (PDDL)  and AC
19.12.18 15:24:17<dmiles> geez i should even document the axiom types
19.12.18 15:40:33<dmiles>  state constraints:  
                 <dmiles>    holds_at(Fluent)
                 <dmiles>        implies/equivalent_to
                 <dmiles>    holds_at(Fluent)
                 <dmiles>  effect axioms:  
19.12.18 15:40:34<dmiles>    happens(Event)
                 <dmiles>        terminates/initiates/releases
19.12.18 15:40:36<dmiles>    holds_at(Fluent)
                 <dmiles>  trigger axioms: 
                 <dmiles>       holds_at(Fluent)/happens(Event)
19.12.18 15:40:37<dmiles>            triggers
                 <dmiles>       happens(Event)
19.12.18 15:40:38<dmiles>  precondition axioms:  
                 <dmiles>       happens(Event)
19.12.18 15:40:40<dmiles>            implies
                 <dmiles>       holds_at(Fluent)
19.12.18 15:49:35<dmiles> how EC normally does Preconds is that we "guard" effect axioms one at a time with the preconditions
19.12.18 15:50:28<dmiles> but it is more expressive to use precondition axioms in separate statements
19.12.18 15:54:23<dmiles> logically a precond axiom works like...
19.12.18 15:54:24<dmiles>  not((
                 <dmiles>    holds_at(awake(Agent),Time) &
                 <dmiles>    holds_at(doorUnlocked(Door),Time) &
                 <dmiles>    holds_at(nearPortal(Agent,Door),Time)))
                 <dmiles>    ->
19.12.18 15:54:25<dmiles>  not(happens(doorLock(Agent,Door),Time)).
19.12.18 15:55:18<dmiles> % sleeping agents may not lock doors
19.12.18 15:55:45<dmiles> oops in this case thse are ORs
19.12.18 15:56:28<dmiles> its said as..
19.12.18 15:56:29<dmiles> happens(doorLock(Agent,Door),Time) -> 
                 <dmiles>   holds_at(awake(Agent),Time) &
                 <dmiles>   holds_at(doorUnlocked(Door),Time) &
                 <dmiles>   holds_at(nearPortal(Agent,Door),Time)
19.12.18 15:57:12<dmiles> which then "eforces" them as precondtions
19.12.18 15:57:19<dmiles> enforces*
19.12.18 16:01:10<dmiles> so a rule like..
19.12.18 16:01:11<dmiles> happens(doorLock(Agent,Door),Time)  
                 <dmiles>  terminates
                 <dmiles> holds_at(doorUnlocked(Door),Time)
19.12.18 16:02:06<dmiles> becomes 
19.12.18 16:02:07<dmiles> ...
                 <dmiles> happens(doorLock(Agent,Door),Time)  
                 <dmiles>   terminates
                 <dmiles> holds_at(doorUnlocked(Door),Time)
                 <dmiles>   <- holds_at(awake(Agent),Time) &
19.12.18 16:02:08<dmiles>      holds_at(doorUnlocked(Door),Time) &
                 <dmiles>      holds_at(nearPortal(Agent,Door),Time))
19.12.18 16:03:23<dmiles> which is understood as...
19.12.18 16:03:25<dmiles> .
19.12.18 16:03:26<dmiles> axiom(
                 <dmiles>  terminates(doorLock(Agent,Door),
                 <dmiles>             doorUnlocked(Door),Time),
                 <dmiles>    [ holds_at(awake(Agent),Time) &
                 <dmiles>      holds_at(doorUnlocked(Door),Time) &
19.12.18 16:03:28<dmiles>      holds_at(nearPortal(Agent,Door),Time)]).
19.12.18 16:04:41<dmiles> ok good i talked aobut it!.. now i know exactly what code i have to write :P
19.12.18 16:05:29<dmiles> i merely transform 
19.12.18 16:05:33<dmiles> with a findall/3
19.12.18 16:05:35<dmiles> axiom(
                 <dmiles>  terminates(doorLock(Agent,Door),
                 <dmiles>             doorUnlocked(Door),Time),
                 <dmiles>    []).
19.12.18 16:24:48<dmiles> why i LOVE prolog.. i did all that in 4 lines of code
19.12.18 16:24:50<dmiles> https://github.com/TeamSPoon/prologmud_I7/commit/7da19769e5518807fad5ffc526ae7e3e27335b85
19.12.18 16:26:50<dmiles> oops line 441 i misnamed a varaible
19.12.18 16:27:40<dmiles> append([Gs|PrecondL],Gss)   instead of append([Gs|PrecondLs],Gss)  
19.12.18 16:28:27<dmiles> a verifier could coaght such an error :)
19.12.18 20:03:46<dmiles> ak, i discovered http://www.cs.utexas.edu/users/tag/ccalc/examples/  this is the what Mueller suggests is his best competitor to DecReasoner
19.12.18 20:04:38<dmiles> (coded in Prolog)
19.12.18 20:05:38<dmiles> so.. i have to try it out :(  so more delay
19.12.18 20:12:07<dmiles> ?- sat(X*Y).
19.12.18 20:12:30<dmiles> ?- use_module(library(clpb)).
19.12.18 20:12:31<PrologMUD> jmvanel: % library(clpb) compiled into clpb 0.15 sec, 365 clauses
                 <PrologMUD> jmvanel: %  det(Yes,1)
19.12.18 20:12:34<dmiles> ?- sat(X*Y).
                 <PrologMUD> jmvanel: % X=1, Y=1
                 <PrologMUD> jmvanel: %  det(Yes,1)
19.12.18 23:21:25<stoopkid> dmiles: so it turns out the situation wasn't quite as bad as i thought it was in agda wrt the libraries thing
19.12.18 23:22:17<stoopkid> you can import two code-bases that have clashing names, and it doesn't cause a conflict until you actually make a reference to one of the clashing names
19.12.18 23:22:51<stoopkid> and you can rename one of them right there in your import statement
20.12.18 00:41:27<aindilis> dmiles: thanks for the overview, I'm debating on trying to work on AI right now since I have a big hole in my heart since I haven't been working on AI.
20.12.18 00:41:43<aindilis> I've been filling it with consumer purchases.
20.12.18 00:41:51<aindilis> thanks to some birthday money.
20.12.18 00:42:02<aindilis> but ultimately I won't be fulfilled until I work constantly on AI
20.12.18 00:42:07<aindilis> have to prepare for the hearing though
20.12.18 00:42:40<aindilis> so here is my todo list right now:
20.12.18 00:42:59<aindilis>  (EC/Prolog Agent)
                 <aindilis>  (FLP)
                 <aindilis>  (Packaging (depends on new hard drives))
                 <aindilis>  (Linguistics/NLU)
                 <aindilis>  (Release FRDCSA (maybe just give up trying to release it for now))
                 <aindilis>  
                 <aindilis>  (everything under the sun, all the hard work we have to do)
20.12.18 00:43:00<aindilis>  (backing things up)
                 <aindilis>  
20.12.18 00:44:33<aindilis> I'm having trouble understanding EC I admit
20.12.18 00:44:40<aindilis> I should read 2nd edition
20.12.18 00:45:02<aindilis> I got Marty's to run recently
20.12.18 00:45:24<aindilis> but the format is like category or type theory, it just won't sit right in my head
20.12.18 00:45:46<aindilis> I was wondering if you might program some kind of thing in the softbot domain
20.12.18 00:46:08<aindilis> having a true softbot would be a coveted thing - for instance the most number of github stars I have is on Prolog-Agent
20.12.18 00:46:26<aindilis> I want to work on - hey here are some operations, sequence them in a useful manner
20.12.18 00:46:41<aindilis> figure out what their effects are (did the factbase change?)
20.12.18 00:47:10<aindilis> if it is left up to me there is just going to be a lot of declarative code embedded into prolog
20.12.18 00:47:28<aindilis> it's not going to be able to synthesize over everything like you are trying to do
20.12.18 00:52:46<aindilis> I'm working on D&D too
20.12.18 00:55:32<aindilis> I'm also debating trying to finish nested expressions in FLUX
20.12.18 16:03:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-maeebayinxexkulp) left #logicmoo: Quit: Connection closed for inactivity
20.12.18 17:19:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fodefpojcwzpmfog, stoopkid: stoopkid)
20.12.18 21:30:09<stoopkid> dmiles: chess in Agda
20.12.18 21:30:12<stoopkid> https://github.com/drull95/dependently-typed-chess-expressions/blob/master/decide6.agda
20.12.18 21:58:31<dmiles> -- | short and long castles
20.12.18 21:58:32<dmiles> lcastle : BoardArrangement → BoardArrangement
                 <dmiles> lcastle b =
                 <dmiles>   case whosTurn b of
                 <dmiles>   λ{ white →
                 <dmiles>        let b' = mvPiece b king (C , #1)
20.12.18 21:58:33<dmiles>        in mvPiece b' (rook q) (D , #1)
                 <dmiles>    ; black → 
20.12.18 21:58:34<dmiles>        let b' = mvPiece b king (C , #8)
                 <dmiles>        in mvPiece b' (rook q) (D , #8)
20.12.18 21:58:35<dmiles>    }
20.12.18 21:59:35<dmiles> btw, that there is just the "long castle" side 
20.12.18 21:59:42<dmiles> but the question i have is that.. \
20.12.18 21:59:57<dmiles> lcastle : BoardArrangement → BoardArrangement
20.12.18 22:00:07<dmiles> is the "type spec of the function"
20.12.18 22:00:15<dmiles> is the stuff right below the "code" ?
20.12.18 22:03:01<dmiles> since that is probably a yes, than i really dont have too much of a valid beef about it not being logically declarative enouygh
20.12.18 22:04:50<dmiles> since " let b' = mvPiece b king (C , #1)"  meets my reqirements of at least not swindling the user to hjavbe to declare the type of 'b
20.12.18 22:06:03<dmiles> this is an exmaple why i liked C# bettrer than Java
20.12.18 22:08:46<dmiles> i could use "var i = 5;"   isntead of "int i = 5;"
20.12.18 22:09:30<dmiles> and the system would analyze my C# code to realize it was best to use a "byte i = 5;"
20.12.18 22:10:21<dmiles> on a differnt day it might have choose "int i = 5;"
20.12.18 22:11:10<dmiles> but at least it is based on something more brilliant than swindling me into a bad choice
20.12.18 22:13:43<dmiles> so good that Agda allows variants
20.12.18 22:14:49<dmiles> https://wiki.portal.chalmers.se/agda/pmwiki.php?n=ReferenceManual.ImplicitArguments
20.12.18 22:15:35<dmiles> oh actualyl this is interesting instead  https://stackoverflow.com/questions/12097474/agda-my-code-doesnt-type-check-how-to-get-implicit-arguments-right
20.12.18 22:17:12<dmiles> i think the answer shows that it can still be done well
20.12.18 22:18:14<dmiles> oops maybe the answer says we are still slightly stuck
20.12.18 22:20:50<stoopkid> yea unfortunately in dependently typed langs, type-inference is undecidable, and even if it were decidable that example shows there's many cases where it's ambiguous anyway
20.12.18 22:21:22<dmiles> hah
20.12.18 22:21:33<dmiles> to "in dependently typed langs, type-inference is undecidable"
20.12.18 22:23:07<dmiles> but that i consider to be ideal that the "dependent typing" is making things that much cooler
20.12.18 22:23:47<dmiles> (at least we are starting to do more elaborate things!)
20.12.18 22:25:08<stoopkid> heh
20.12.18 22:25:26<stoopkid> i'm making a bit of progress on getting closer to the more elaborate applications
20.12.18 22:25:44<dmiles> it is often the inability to clearly define types that requires me to use Prolog
20.12.18 22:27:27<dmiles> not nesc my inabilities but some applications call for such unclearity
20.12.18 22:28:59<dmiles> like an application that sends a message to a user
20.12.18 22:29:30<dmiles> we dont know if that message is going to be dialog box or a phone call
20.12.18 22:29:44<dmiles> voice phone call*
20.12.18 22:30:24<dmiles> the Microsoft's InConcert OS actually implementaed this in 1997
20.12.18 22:30:58<dmiles> the API was an ontology instead of datatypes
20.12.18 22:39:32<aindilis> what is the difference?
20.12.18 22:42:48<dmiles> here is abotu a close as to public paper i coudl find https://www.microsoft.com/en-us/research/wp-content/uploads/2016/11/chi99horvitz-1.pdf
20.12.18 22:44:37<dmiles> the differnce is kind of subtle
20.12.18 22:45:53<dmiles> loves(joe,sally)  isa(joe,person)   knows(joe,loves(joe,sally))
20.12.18 22:46:44<dmiles> these 4 joe(s) fit based on how they are used 
20.12.18 22:47:14<dmiles> actually better exmaple..
20.12.18 22:47:34<dmiles> sayTo(dmiles,joe,"hi")
20.12.18 22:47:48<dmiles> is differnt than loves(joe,sally) 
20.12.18 22:48:51<dmiles> how we deliver my message to  joe  is probably depending on a completely differnt set of factors than what it took for joe to love sallyu
20.12.18 22:50:02<dmiles> if this was datatypes it would be really presumptuous to picka  good one for joe
20.12.18 22:50:47<dmiles> for instance we probably dont want joe to be an email address
20.12.18 22:51:02<dmiles> (as a base datatypes)
20.12.18 22:53:03<dmiles> as an ontological item though we can deduce what he should be 
20.12.18 22:54:07<dmiles> well we deduce from usage what properties we will care about
20.12.18 22:54:36<dmiles> (is it his heart? is it his email adress?  is it is phone number?)
20.12.18 22:55:45<dmiles> joe probably has an infinate number of properties that wont fit into a datatype
20.12.18 22:56:50<dmiles> this is what makes logic programming also better at OO
20.12.18 22:57:41<dmiles> that we dont have datatypes but we have identities
20.12.18 22:58:51<dmiles> ?- isa(iExplorer1,X).
20.12.18 22:59:55<dmiles> oh its down
20.12.18 23:00:14* dmiles restarting it
20.12.18 23:00:44<dmiles> all the properies of identities are created by algrythems/programs
20.12.18 23:01:32<dmiles> vs the identities themselves that are created by semantics of equality
20.12.18 23:05:23<dmiles> semantics of equality are based on logical contexts
20.12.18 23:05:59<dmiles> programs subscribe to logic contexts
20.12.18 23:06:06<dmiles> programs subscribe to logical contexts
20.12.18 23:07:14<dmiles> so that logical written programs can ensure they can use the right versions
20.12.18 23:17:09*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Remote host closed the connection
20.12.18 23:19:33*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
20.12.18 23:23:32<dmiles> ?- not(holds_at(playHideAndSeek(bob), 1)). 
20.12.18 23:36:24<dmiles> ?- isa(iExplorer1,X).
20.12.18 23:36:25<PrologMUD> dmiles: % X=tTemporalThing
                 <PrologMUD> dmiles: % X=tObj
                 <PrologMUD> dmiles: % X=tAgent
                 <PrologMUD> dmiles: % X=tIndividual
20.12.18 23:36:26<PrologMUD> dmiles: % X=tSpatialThing
                 <PrologMUD> dmiles: % X=tChannel
                 <PrologMUD> dmiles: % X=tLookAble
                 <PrologMUD> dmiles: % X=tHominid
20.12.18 23:36:27<PrologMUD> dmiles: % X=mobExplorer
                 <PrologMUD> dmiles:  det(Yes,9)
20.12.18 23:36:44<dmiles> ?- quotedIsa(iExplorer1,X).
                 <PrologMUD> dmiles: % X=ftAtom
20.12.18 23:36:45<PrologMUD> dmiles: % X=ftTerm
                 <PrologMUD> dmiles: % X=ftProlog
                 <PrologMUD> dmiles:  det(Yes,3)
20.12.18 23:37:05<dmiles> ?- quotedIsa("iExplorer1",X).
                 <PrologMUD> dmiles: % X=ftString
                 <PrologMUD> dmiles: % X=ftTerm
                 <PrologMUD> dmiles: % X=ftText
20.12.18 23:37:06<PrologMUD> dmiles: % X=ftProlog
                 <PrologMUD> dmiles:  det(Yes,4)
20.12.18 23:37:37<dmiles> ?- isa(ftText,X).
20.12.18 23:37:38<PrologMUD> dmiles: % X=tRelation
                 <PrologMUD> dmiles: % X=tPred
                 <PrologMUD> dmiles: % X=ttExpressionType
20.12.18 23:37:39<PrologMUD> dmiles: % X=ttUnverifiableType
                 <PrologMUD> dmiles: % X=tCol
                 <PrologMUD> dmiles: % X=rtAvoidForwardChain
                 <PrologMUD> dmiles:  det(Yes,6)
20.12.18 23:38:12<dmiles> ?- isa(ttUnverifiableType,X).
                 <PrologMUD> dmiles: % X=tSet
20.12.18 23:38:13<PrologMUD> dmiles: % X=functorIsMacro
                 <PrologMUD> dmiles: % X=completelyAssertedCollection
                 <PrologMUD> dmiles: % X=ttTypeFacet
                 <PrologMUD> dmiles: % X=tCol
                 <PrologMUD> dmiles:  det(Yes,5)
20.12.18 23:38:55<dmiles> ?- isa(X, ttUnverifiableType).
20.12.18 23:38:56<PrologMUD> dmiles: % X=vtDirection
                 <PrologMUD> dmiles: % X=ftID
                 <PrologMUD> dmiles: % X=ftDice
                 <PrologMUD> dmiles: % X=ftString
20.12.18 23:38:57<PrologMUD> dmiles: % X=ftTerm
                 <PrologMUD> dmiles: % X=ftText
                 <PrologMUD> dmiles: % X=ftVoprop
                 <PrologMUD> dmiles: % X=tCol
20.12.18 23:38:58<PrologMUD> dmiles: % X=tFunction
                 <PrologMUD> dmiles: % X=tPred
                 <PrologMUD> dmiles: % X=ttExpressionType
20.12.18 23:38:59<PrologMUD> dmiles: %  det(Yes,11)
20.12.18 23:39:51<dmiles> ?- quotedIsa(iExplorer1,ftID).
20.12.18 23:39:52<PrologMUD> dmiles: %  det(Yes,1)
20.12.18 23:40:07<dmiles> ?- isa(iExplorer1,ftID).
                 <PrologMUD> dmiles: %  det(Yes,1)
20.12.18 23:41:05<dmiles> quotedIsa/2 describes the  datatype
20.12.18 23:41:26<dmiles> vs isa/2 lets you see the semantic type
20.12.18 23:41:29<dmiles> ?- isa("iExplorer1",X).
20.12.18 23:41:30<PrologMUD> dmiles:  det(No,0)
20.12.18 23:42:11<dmiles> that good ..  jsut tehically  isa(iExplorer1,ftID). should have returned No
20.12.18 23:42:27<dmiles> ?- isa(ftId,X).
20.12.18 23:42:28<PrologMUD> dmiles:  det(No,0)
20.12.18 23:42:32<dmiles> ?- isa(ftID,X).
20.12.18 23:42:33<PrologMUD> dmiles: % X=tRelation
                 <PrologMUD> dmiles: % X=tPred
                 <PrologMUD> dmiles: % X=ttExpressionType
                 <PrologMUD> dmiles: % X=ttUnverifiableType
                 <PrologMUD> dmiles: % X=tCol
20.12.18 23:42:34<PrologMUD> dmiles: % X=rtAvoidForwardChain
                 <PrologMUD> dmiles:  det(Yes,6)
20.12.18 23:42:54<dmiles> ttExpressionType is what i am calling datatypes
20.12.18 23:43:16<dmiles> tt stands for "type types"
20.12.18 23:44:47<dmiles> ?- listing(typ_prfx/2).
                 <PrologMUD> dmiles: :- module_transparent mpred_type_isa:typ_prfx/2.
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(vt, ttValueType).
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(tt, ttTypeType).
20.12.18 23:44:48<PrologMUD> dmiles: mpred_type_isa:typ_prfx(t, tSet).
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(pred, tPred).
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(format, tPred).
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(is, ftSyntaxOperator).
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(dcg, ftSyntaxOperator).
20.12.18 23:44:49<PrologMUD> dmiles: mpred_type_isa:typ_prfx(dcg, ftTextType).
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(txt, ftTextType).
20.12.18 23:44:50<PrologMUD> dmiles: mpred_type_isa:typ_prfx(sk, ftSkolemFunction).
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(fn, tFunction).
20.12.18 23:44:51<PrologMUD> dmiles: mpred_type_isa:typ_prfx(mud, rtMudPred).
                 <PrologMUD> dmiles: mpred_type_isa:typ_prfx(mud, tPred).
20.12.18 23:46:34<dmiles> typ_prfx(ft,ttExpressionType).
20.12.18 23:46:53<dmiles> typ_prfx(rt,ttRelationType).
                 <dmiles> typ_prfx(v,vtValue).
                 <dmiles> typ_prfx(i,tIndividual).
20.12.18 23:47:01<dmiles> was what got cut off
20.12.18 23:47:44<dmiles> ?- isa(vRed,X).
20.12.18 23:47:45<PrologMUD> dmiles: % X=vtValue
                 <PrologMUD> dmiles: % X=vtColor
20.12.18 23:47:46<PrologMUD> dmiles:  det(Yes,2)
20.12.18 23:48:05<dmiles> ?- isa(vtColor,X).
20.12.18 23:48:06<PrologMUD> dmiles: % X=tSet
                 <PrologMUD> dmiles: % X=functorIsMacro
                 <PrologMUD> dmiles: % X=tInferInstanceFromArgType
                 <PrologMUD> dmiles: % X=completelyAssertedCollection
20.12.18 23:48:07<PrologMUD> dmiles: % X=ttValueType
                 <PrologMUD> dmiles: % X=tCol
                 <PrologMUD> dmiles:  det(Yes,6)
20.12.18 23:48:20<dmiles> ?- isa(ttValueType,X).
                 <PrologMUD> dmiles: % X=ttTypeType
20.12.18 23:48:21<PrologMUD> dmiles: % X=tSet
                 <PrologMUD> dmiles: % X=functorIsMacro
                 <PrologMUD> dmiles: % X=ttNotTemporalType
                 <PrologMUD> dmiles: % X=completelyAssertedCollection
20.12.18 23:48:22<PrologMUD> dmiles: % X=tCol
                 <PrologMUD> dmiles: % X=pfcControlled
                 <PrologMUD> dmiles: % X=prologHybrid
                 <PrologMUD> dmiles:  det(Yes,8)
20.12.18 23:51:09<dmiles> ?- isa(X,vtColor).
20.12.18 23:51:10<PrologMUD> dmiles: % X=vRed
                 <PrologMUD> dmiles: %  det(Yes,1)
20.12.18 23:51:32<dmiles> ?- isa(X,vtTexture).
20.12.18 23:51:33<PrologMUD> dmiles:  det(No,0)
20.12.18 23:52:40<dmiles> ?- isa(X,tCoffeeCup).
20.12.18 23:52:41<PrologMUD> dmiles: % X=iTCoffeeCup7
                 <PrologMUD> dmiles: %  det(Yes,1)
20.12.18 23:53:19<dmiles> ?- mudColor(iTCoffeeCup7,W).
                 <PrologMUD> dmiles: % W=vBlack
20.12.18 23:53:20<PrologMUD> dmiles: % W=vBrown
                 <PrologMUD> dmiles: %  det(Yes,2)
20.12.18 23:53:48<dmiles> ?- argIsa(mudColor,2,What).
20.12.18 23:53:49<PrologMUD> dmiles: % What=vtColor
                 <PrologMUD> dmiles:  det(Yes,1)
20.12.18 23:54:15<dmiles> i guess i turned of the type deduction
20.12.18 23:54:35<dmiles> since it govels 6GB of data :P
20.12.18 23:54:40<dmiles> grovels
20.12.18 23:55:17<dmiles> ?- isa(X,tInferInstanceFromArgType).
                 <PrologMUD> dmiles: % X=vtSize
20.12.18 23:55:18<PrologMUD> dmiles: % X=vtTexture
                 <PrologMUD> dmiles: % X=vtColor
                 <PrologMUD> dmiles: % X=vtShape
                 <PrologMUD> dmiles: % X=vtMaterial
                 <PrologMUD> dmiles: % X=vtValue
20.12.18 23:55:19<PrologMUD> dmiles: % X=vtDirection
                 <PrologMUD> dmiles: % X=vtPosture
                 <PrologMUD> dmiles: %  det(Yes,8)
20.12.18 23:55:53<dmiles> i guess i could still let it do that
20.12.18 23:56:39<dmiles> ?- isa(X,tInferInstanceFromArgType), argIsa(P,_,X).
20.12.18 23:56:40<PrologMUD> dmiles: % X=vtSize, P=mudSize
                 <PrologMUD> dmiles: % X=vtSize, P=mudSize
                 <PrologMUD> dmiles: % X=vtSize, P=mudSize
20.12.18 23:56:41<PrologMUD> dmiles: % X=vtTexture, P=mudTexture
                 <PrologMUD> dmiles: % X=vtTexture, P=mudTexture
                 <PrologMUD> dmiles: % X=vtTexture, P=mudTexture
                 <PrologMUD> dmiles: % X=vtColor, P=mudColor
                 <PrologMUD> dmiles: % X=vtColor, P=mudColor
                 <PrologMUD> dmiles: % X=vtColor, P=mudColor
20.12.18 23:56:42<PrologMUD> dmiles: % X=vtShape, P=mudShape
                 <PrologMUD> dmiles: % X=vtShape, P=mudShape
20.12.18 23:56:43<PrologMUD> dmiles: % X=vtShape, P=mudShape
20.12.18 23:57:27<dmiles> ?- setof(P,(isa(X,tInferInstanceFromArgType), argIsa(P,_,X)),L),length(L,N).
20.12.18 23:57:28<PrologMUD> dmiles: % P=P, X=vtColor, L=[mudColor], N=1
                 <PrologMUD> dmiles: % P=P, X=vtDirection, L=[mudFacing,pathBetween_call,pathDirLeadsTo,pathName], N=4
                 <PrologMUD> dmiles: % P=P, X=vtMaterial, L=[mudMaterial], N=1
                 <PrologMUD> dmiles: % P=P, X=vtPosture, L=[actSetsPosture,mudStance], N=2
                 <PrologMUD> dmiles: % P=P, X=vtShape, L=[mudShape], N=1
20.12.18 23:57:29<PrologMUD> dmiles: % P=P, X=vtSize, L=[mudSize], N=1
                 <PrologMUD> dmiles: % P=P, X=vtTexture, L=[mudTexture], N=1
                 <PrologMUD> dmiles: % P=P, X=vtValue, L=[relationAllInstance,relationMostInstance], N=2
                 <PrologMUD> dmiles: %  det(Yes,8)
20.12.18 23:58:27<dmiles> oh right  relationMostInstance/relationAllInstance  have infinate types
20.12.18 23:59:01<dmiles> ?- isa(relationAllInstance,X).
                 <PrologMUD> dmiles: % X=tRelation
                 <PrologMUD> dmiles: % X=tPred
20.12.18 23:59:02<PrologMUD> dmiles: % X=functorIsMacro
                 <PrologMUD> dmiles: % X=prologHybrid
                 <PrologMUD> dmiles:  det(Yes,4)
20.12.18 23:59:30<dmiles> ?- relationAllInstance(P,tAgent,T).
                 <PrologMUD> dmiles:  det(No,0)
20.12.18 23:59:40<dmiles> ?- relationAllInstance(P,T1,T2).
20.12.18 23:59:41<PrologMUD> dmiles:  det(No,0)
20.12.18 23:59:48<dmiles> ?- relationAllExists(P,T1,T2).
20.12.18 23:59:49<PrologMUD> dmiles:  det(No,0)
21.12.18 00:00:09<dmiles> ?- relationMostExists(P,T1,T2).
21.12.18 00:02:18<dmiles> ?- listing(parserTest).
                 <PrologMUD> dmiles: :- dynamic baseKB:parserTest/2.
                 <PrologMUD> dmiles: :- module_transparent baseKB:parserTest/2.
21.12.18 00:02:19<PrologMUD> dmiles: baseKB:parserTest(A, B) :-
                 <PrologMUD> dmiles:     parserTest(A, B, _).
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A television is usually in the living room.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "The player carries the sack.").
21.12.18 00:02:20<PrologMUD> dmiles: baseKB:parserTest(iWorld7, "room is type of tRegion").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "The Living room is a room.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "The sack is a container.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A remote control is in the living room.").
21.12.18 00:02:21<PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A tv guide is a type of item.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A tv guide is in the living room.").
21.12.18 00:02:22<PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A tv guide is a type of book.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "An object has a text called printed name.").
21.12.18 00:02:32<dmiles> oh i mean to do /2
21.12.18 00:02:34<dmiles> ?- listing(parserTest/2).
21.12.18 00:02:35<PrologMUD> dmiles: :- dynamic baseKB:parserTest/2.
                 <PrologMUD> dmiles: :- module_transparent baseKB:parserTest/2.
                 <PrologMUD> dmiles: baseKB:parserTest(A, B) :-
                 <PrologMUD> dmiles:     parserTest(A, B, _).
21.12.18 00:02:36<PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A television is usually in the living room.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "The player carries the sack.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "room is type of tRegion").
21.12.18 00:02:37<PrologMUD> dmiles: baseKB:parserTest(iWorld7, "The Living room is a room.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "The sack is a container.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A remote control is in the living room.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A tv guide is a type of item.").
21.12.18 00:02:38<PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A tv guide is in the living room.").
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7, "A tv guide is a type of book.").
21.12.18 00:02:39<PrologMUD> dmiles: baseKB:parserTest(iWorld7, "An object has a text called printed name.").
21.12.18 00:02:46<dmiles> oops
21.12.18 00:02:48<dmiles> ?- listing(parserTest/3).
21.12.18 00:02:50<PrologMUD> dmiles:                   partitionedInto(tObj, tProperNamed, tImproperNamed)).
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7,
21.12.18 00:02:51<PrologMUD> dmiles:                   "An object is usually improper-named.",
                 <PrologMUD> dmiles:                   relationMostInstance(isa, tObj, tImproperNamed)).
21.12.18 00:02:52<PrologMUD> dmiles: baseKB:parserTest(iWorld7,
                 <PrologMUD> dmiles:                   "A thing can be scenery.",
21.12.18 00:02:53<PrologMUD> dmiles:                   relationSomeInstance(isa, tItem, tScenery)).
                 <PrologMUD> dmiles: baseKB:parserTest(iWorld7,
21.12.18 00:02:54<PrologMUD> dmiles:                   "The outside is a direction.",
                 <PrologMUD> dmiles:                   t(isa, vOutside, vtDirection)).
21.12.18 00:02:55<PrologMUD> dmiles: %  det(Yes,1)
21.12.18 00:04:46<dmiles> sometimes something like that reminds me why I use Lenat's ontology from programming
21.12.18 00:05:58<dmiles> for programming* .. so that it will be easy later to let the system help redesign itself 
21.12.18 00:07:26<dmiles> oops have to pick up kiddo from concert
21.12.18 00:21:34<aindilis> k
21.12.18 00:24:22<aindilis> that's a pretty impressive ontology there
21.12.18 00:24:45<aindilis> I keep finding that Prolog seems well suited for a KBS, but that in practice its hard to achieve one with it
21.12.18 00:25:20<aindilis> I will start logging	implementation questions I have
21.12.18 00:26:02<aindilis> it would be nice to have your assistance on the FLP itself, I will find my release SPSE2 domain and try to add to it and achieve it
21.12.18 01:29:53<aindilis> dmiles: ping
21.12.18 01:32:39<aindilis> dmiles do you have any advice on writing tests?
21.12.18 01:53:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fodefpojcwzpmfog) left #logicmoo: Quit: Connection closed for inactivity
21.12.18 02:43:02<dmiles> not really good advice.. other than i think it was a good idea to make tests/testing part of an entire systems design and coding priocess
21.12.18 02:43:24<aindilis> cool, I should have asked stoopkid how to actually use the Chess agda
21.12.18 02:43:50<dmiles> ah yes.. we should ask!
21.12.18 02:44:01<dmiles> he'll be back in probably about 10 minutes
21.12.18 02:44:09<aindilis> do you mind if I put a bot on this channel?
21.12.18 02:44:27<aindilis> I've just found my old unilang-irc-bot stuff
21.12.18 02:44:40<dmiles> woudl love that!
21.12.18 02:44:43<dmiles> please do
21.12.18 02:44:45<aindilis> k
21.12.18 02:45:13<dmiles> i almost should get CycLBot working in here to
21.12.18 02:45:26<aindilis> that'd be awesome too!
21.12.18 02:45:45<dmiles> i dont even know where the source code is
21.12.18 02:46:03<dmiles> you remember it in #opencyc channel?
21.12.18 02:46:09<aindilis> sort of
21.12.18 02:46:32<aindilis> I'm looking to see if I have a copy
21.12.18 02:46:37<dmiles> hrrm i cant even remember what language it was in
21.12.18 02:46:39<aindilis> was it straight up CycLBot
21.12.18 02:46:42<aindilis> or cycl-bot or something?
                 <dmiles> it might have been java
21.12.18 02:46:48<aindilis> jsp
21.12.18 02:46:50<aindilis> I see it
21.12.18 02:47:26<aindilis> cyclbot.jsp
21.12.18 02:47:44<dmiles> http://codu.org/logs/_ai/2002-05-07-raw.txt
21.12.18 02:47:49<aindilis> it's in cycmoo
21.12.18 02:48:24<aindilis> that'd be great
21.12.18 02:56:46<aindilis> might want to use this as part of our simulation system: http://www.sagemath.org/links-components.html
21.12.18 02:56:47<aindilis>  
                 <aindilis>  
21.12.18 02:57:16<aindilis> and MKM
21.12.18 02:58:56<aindilis> I'll try to slurp those old logs into unilang-irc-bot
21.12.18 02:59:56<dmiles> looking at the CycLBot stuff i wont be this week before i start it.. i am working to hard on getting Marty/EventCalc working
21.12.18 03:00:03<aindilis> kk
21.12.18 07:33:59*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qakppefbmujnfvlz, stoopkid: stoopkid)
21.12.18 07:42:18*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
21.12.18 07:42:30*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Client Quit
21.12.18 08:07:43<stoopkid> dmiles: i've been looking at symengine recently, have you ever used that one?
21.12.18 08:54:20* stoopkid looking at jupyter notebook too
21.12.18 09:02:28<stoopkid> "it is often the inability to clearly define types that requires me to use Prolog" that's what i use record types for (or one of the things); you don't need to have every detail defined ahead of time
21.12.18 09:03:35<stoopkid> i can basically just package together whatever constraints i already know, even if these are vague and incomplete
21.12.18 09:04:47<stoopkid> and then hypothetically every problem-solving approach you apply in prolog would apply in this setting as well, plus some more options available because you actually have a fixed foundation of math underneath it all
21.12.18 09:06:57<stoopkid> so you could hypothetically custom-tailor your inference processes around that since you don't have to plan for inferencing against completely arbitrary rule-sets
21.12.18 09:09:33<stoopkid> i'd assume this would allow some greater degree of sophistication and efficiency with the inferencing processes than would be achievable without a fixed foundation, but i haven't demonstrated that yet, i haven't worked too much on inferencing processes at all yet
21.12.18 09:22:08<dmiles> inferencing over complex, large and arbitrary logical rule-sets seems to be everyones goal :)
21.12.18 09:23:48<stoopkid> except for type theorists apparently
21.12.18 09:24:33<stoopkid> afaict we don't even have a type-theory-based computer algebra system or database yet, let alone a generalized inferencing system
21.12.18 09:27:19<dmiles> i can find rule sets for algebraic mathematics.. but not for the type theory impl
21.12.18 09:29:49<dmiles> for example polynomial solving https://github.com/maths/PRESS/blob/master/pressdir/methods/poly.pl#L48-L111
21.12.18 09:31:29<dmiles> but harder to find a logical formulas that construct and deconstruct depeandant types
21.12.18 09:33:35<dmiles> (but can find  logical formulas that construct, deconstruct mathmatical value expressions)
21.12.18 09:35:29<dmiles> so having automatic formula solvers (inference engines for doing homework) is doable 
21.12.18 09:36:47<dmiles> because that part of math was written out formulaicly on paper in a general enough way people could write programs to understand the rules
21.12.18 09:37:22<dmiles> this is harder i think for dependant type theory
21.12.18 09:37:59<dmiles> now sure if i am accurate here but didnt HCMa imply that it cant be done?
21.12.18 09:38:22<stoopkid> i doubt it would be any harder to formulate the rules for dependent type theory than it would be to implement some of these formula solvers
21.12.18 09:38:46<stoopkid> i don't think he ever implied that
21.12.18 09:39:32<dmiles> it was when i requested that a local axiomization specication for MLTT 
21.12.18 09:39:46<dmiles> local/logical
21.12.18 09:40:00<stoopkid> mmm
21.12.18 09:40:10<dmiles> where it would be written at as a series of theorems/postulates
21.12.18 09:40:27<dmiles> (well axioms)
21.12.18 09:40:48<stoopkid> i have the specification for at least the data fragment of MLTT (still working out some of the details of the codata fragment)
21.12.18 09:40:55<dmiles> so it would be the 5 infernce rules + all the rules that is used
21.12.18 09:41:16<stoopkid> what other rules? :)
21.12.18 09:42:18<stoopkid> i only need essentially 4 rules i can describe every data-type and all the logical operators
21.12.18 09:42:22<dmiles> the rules that virtually "play out" that secretly construct the implementations
21.12.18 09:42:31<stoopkid> huh?
21.12.18 09:42:46<dmiles> well data description is nice.. but we also waht "action"s
21.12.18 09:42:57<stoopkid> oy...
21.12.18 09:43:12<stoopkid> so what will this be, the 200th or 300th time that we've had this discussion? :P
21.12.18 09:43:32<stoopkid> effects/actions live outside the type theory
21.12.18 09:43:48<stoopkid> just like when you make an action with your body in real life, that action occurs outside of your mind...
21.12.18 09:44:02<dmiles> so for example when you create a sum type or a product type what are the requirments of the data brokerage?
21.12.18 09:44:05<stoopkid> you can have a mental model of what you're doing
21.12.18 09:44:45<dmiles> for exmaple the Curry implementation has 1300 axioms
21.12.18 09:44:49<stoopkid> "what are the requirements of the data brokerage", not sure what you mean
21.12.18 09:45:11<stoopkid> that's a lot of axioms, do you have them memorized?
21.12.18 09:45:53<dmiles> the requirement to "simulate" the isntancing of those types
21.12.18 09:46:05<stoopkid> idk what you mean
21.12.18 09:46:39<dmiles> so for example the logical specification on Nat shows us how to instance them,, how to deconstruct them
21.12.18 09:47:24<dmiles> how to decide if something is a NAt (since we can subtract 1 until we've reached zero)
21.12.18 09:47:52<stoopkid> you mean, there are introductions and eliminations for Nat
21.12.18 09:48:04<stoopkid> constructors and destructors
21.12.18 09:48:47<dmiles> yes so basically  introductions, eliminations, constructors and destructors for every part of the system
21.12.18 09:49:03<stoopkid> this is all given by those 4 rules
21.12.18 09:49:11<dmiles> that is what the 1300 axioms for the curry interpreter are
21.12.18 09:49:25<stoopkid> too many :)
21.12.18 09:49:48<dmiles> is how to construct a system that basically implements the introductions, eliminations, constructors and destructors of the reset of the system
21.12.18 09:50:21<dmiles> by doing it over a metasystem made up the same ways
21.12.18 09:51:50<dmiles> that was the same design of my lisp interpreter/compiler.. i added more and more axioms allowing the common lisp language implementation to be created
21.12.18 09:52:15<dmiles> all from axioms
21.12.18 09:53:06<dmiles> the setting of symbol values required 3 axioms
21.12.18 09:53:41<dmiles> the implementation for the common lisp arrays about 7
21.12.18 09:53:49<stoopkid> yea, idk how many prolog rules my 4 rules would actually translate to; presumably >4
21.12.18 09:54:25<stoopkid> 1300 still sounds excessive though :)
21.12.18 09:57:47<stoopkid> anyway, so you've got this "ROUTINES FOR POLYNOMIAL EQUATIONS" in prolog
21.12.18 09:58:29<stoopkid> so you're probably wondering why i even want this in type theory in the first place, considering how we already have the solver, what does it need to be in type theory for?
21.12.18 09:59:09<dmiles> type theory i assume offers a more comfortable KR from programming for people
21.12.18 10:00:22<stoopkid> so, let's take this polynomial solver: how would you go about proving that it's actually correct?
21.12.18 10:00:56<dmiles> plus *if*  type theory can be defined in terms of datalog (that is what the 1300 of Curry are is genreic datalog decls)  then it can be implemented on a solver
21.12.18 10:02:00<dmiles> to prove it is correct?  we only have to check it agaist the axioms in old text books
21.12.18 10:02:10<dmiles> sine it is already a proof of correctnes
21.12.18 10:02:16<stoopkid> huh?
21.12.18 10:02:25<dmiles> we now have to check that proof of correctness
21.12.18 10:02:39<dmiles> (if we wanted to check it)
21.12.18 10:03:16<dmiles> see PRESS is made up of axioms that have been discovered over 1000s of years
                 <stoopkid> what is it a proof of correctness of?
21.12.18 10:03:51<stoopkid> it looks like a set of rules, not a proof-of-correctness of... anything? :)
21.12.18 10:03:53<dmiles> those axioms when throw together become a proof
21.12.18 10:04:05<stoopkid> of what
                 <dmiles>  thrown together carefully
21.12.18 10:04:26<dmiles> a proof that is execurtable that will construct and deconstruct polynomic equations
21.12.18 10:04:47<stoopkid> what is it a proof of?
21.12.18 10:05:20<dmiles> well i'll start out kind of fresh here so we get on the same page
21.12.18 10:05:54<dmiles> immagine a science that contains 10 axioms   A0 - A9
21.12.18 10:06:25<dmiles> everyhing that science will do will be backed by a proof that lists those axioms in some order
21.12.18 10:06:45<stoopkid> yes
21.12.18 10:06:47<dmiles> like A2:A6:A5
21.12.18 10:07:25<dmiles> the complete datalog program (axiomset) is only A0-A9
21.12.18 10:07:36<stoopkid> right
21.12.18 10:07:37<dmiles> there is not yet a proof of correctness
21.12.18 10:07:44<stoopkid> indeed
21.12.18 10:07:48<dmiles> (or is there?)
21.12.18 10:07:55<stoopkid> there is not
21.12.18 10:08:09<dmiles> whatever the proof of correctness will be must mimic the A0-A9
21.12.18 10:09:10<dmiles> lets say it is possible that  A6:A0:10  (in that combination) should be incorrect
21.12.18 10:09:53<dmiles> i mean that is what you are saying is that there will be axiomatic cominations that are incorrect?
21.12.18 10:10:04<dmiles> combinations*
21.12.18 10:10:27<stoopkid> i'm not saying there will be, i'm asking how you would prove there aren't any
21.12.18 10:12:11<dmiles> we can only prove the A0-A9 by proving it was right.. but combinations we have to paossiblly search for some
21.12.18 10:12:39<stoopkid> eh?
21.12.18 10:13:17<stoopkid> if A0-A9 were proved right, and you still got combinations that are wrong, then your proof that A0-A9 were right is an incorrect proof
21.12.18 10:13:59<stoopkid> and if your method of proving that there are no invalid combinations is to do a search... this is not a proof... it's unit-testing
21.12.18 10:14:04<dmiles> A0 are A9 axioms of some science that PersonA thinks can with a comination of three axioms be able to 1000 usefull thngs for him
21.12.18 10:15:08<stoopkid> so you would simply exhaustively search all 1000 combinations of three axioms and check them individually for correctness?
21.12.18 10:15:12<dmiles> other scientists over 10 years have gotten together and each year made the A0 - A9
21.12.18 10:15:39<stoopkid> dmiles: btw: the back-stories of your examples really don't help me to understand the examples
21.12.18 10:15:59<dmiles> what they didnt think of divisionm by zero possible with A7
21.12.18 10:17:09<dmiles> they didnt relaize that A5:A6 would set up a zero
21.12.18 10:17:16<stoopkid> so basically not only is there no proof that the rules are correct, there literally couldn't even be such a proof because in this case the rules are actually literally incorrect?
21.12.18 10:17:41<dmiles> ok i'll list the rules
21.12.18 10:18:08<stoopkid> the specific rules don't matter
21.12.18 10:18:38<dmiles> A0 = y+1=z   A1 = x/(x-1)=y
                 <stoopkid> you're just avoiding the fact that there isn't actually a way to "prove" anything in prolog, except for relative to an encoded rule-set that you have to trust as axiomatic :P
21.12.18 10:19:28<dmiles> right tha tis what i am saying is it is impossible to prove correctness
21.12.18 10:19:33<dmiles> with any system
21.12.18 10:19:56<dmiles> you have to audit the philosopher
21.12.18 10:19:58<stoopkid> indeed, i agree, except for relative to another system that's already assumed correct
21.12.18 10:20:26<stoopkid> i.e. you can prove correctness of B under assumption of correctness of A, etc.. 
21.12.18 10:21:08<dmiles> so you have a assumed correct A?
21.12.18 10:22:06<stoopkid> yes, you don't get any proofs for free, the price is always some assumptions
21.12.18 10:22:56<stoopkid> but let's look at this solver
21.12.18 10:22:59<dmiles> PRESS as well (a prolog program) had to assume that the what mathmeticans think polynomial equations are solved 
21.12.18 10:23:11<stoopkid> should the axioms of this solver actually be... "axiomatic" ?
21.12.18 10:23:22<dmiles> they must be yes
21.12.18 10:23:34<stoopkid> well... no, not "must be"
21.12.18 10:23:56<stoopkid> you could choose another axiom-set from which the axioms/rules of this polynomial solver are derivable
21.12.18 10:24:45<stoopkid> there must be *some* axioms, but there's a wide variety of options for which particular axioms you pick to simulate the rest of your stuff with right
21.12.18 10:26:06<dmiles> soryr i probalby should have give one of the example fles:  https://github.com/maths/PRESS/blob/master/pressdir/axioms/isolat_ax.pl
21.12.18 10:26:43<dmiles> isolax( 1 ,cos(U)=1,U=360*N,arbint(N)).
21.12.18 10:27:23<dmiles> that axioms says that the cosine of any arbitrary integer * 360  will be 1
21.12.18 10:27:56<stoopkid> and indeed you agree that's a true statement yea?
21.12.18 10:28:25<dmiles>  if we were working in degrees and not radians and only if the greeks are right
21.12.18 10:28:52<dmiles> we can only verify such a statemtn by tracing its origins 1000s of years back
21.12.18 10:29:07<stoopkid> well, no, we don't need to trace its origins back
21.12.18 10:29:15<stoopkid> in fact, it'd be pretty useless if we couldn't verify it here and now
21.12.18 10:29:31<dmiles> it is a conjucture that this is true 
21.12.18 10:29:43<dmiles> since no one has ever tried to prove it
21.12.18 10:29:52<stoopkid> err
21.12.18 10:30:04<dmiles> i mean we might test it to be true
21.12.18 10:30:18<stoopkid> pretty much every undergrad mathematician and their little brother has tired and succeeded in proving it? :D
21.12.18 10:30:22<stoopkid> tried*
21.12.18 10:30:25<dmiles> immagine if it broke down a 360*360 ?
21.12.18 10:30:47<dmiles> or at 13234234234234234234343434343434433434 but was fine before or after?
21.12.18 10:31:08<stoopkid> it doesn't, we can prove it for *arbitrary* integers :P
21.12.18 10:31:16<stoopkid> it doesn't break down, at all :)
21.12.18 10:31:27<stoopkid> iow: the greeks actually were right, and we can directly verify that
21.12.18 10:32:03<dmiles> (i am sorta making it up as a Goldbachean Conjecture)
21.12.18 10:32:16<stoopkid> hrm
21.12.18 10:32:22<dmiles> "There is some N such that every number from some point onwards can be written as the sum of at most N primes. "
21.12.18 10:32:48<dmiles> that is a unproveable conjecture that is obvously true
21.12.18 10:33:29<dmiles> anohter one: "is every even number greater than 2 the sum of 2 primes?"
21.12.18 10:33:30<stoopkid> i think it's rather obviously false :P
21.12.18 10:33:55<stoopkid> oh woops
21.12.18 10:34:07<stoopkid> nvm i misread sum as product in your sentence
21.12.18 10:34:31<stoopkid> well, still, it's not obvious to me that it's true
21.12.18 10:34:43<dmiles> So far this conjecture has been numerically verified for all even numbers up to several billion
21.12.18 10:34:52<dmiles> but we cant be sure?
21.12.18 10:35:14<stoopkid> nope
21.12.18 10:35:33<dmiles> this is the problem with all equational axims
21.12.18 10:35:44<stoopkid> being true for all the cases we've tried doesn't imply its truth for all possible cases
21.12.18 10:35:46<stoopkid> watch this:
21.12.18 10:35:52<stoopkid> x < 1 trillion
21.12.18 10:36:15<stoopkid> if you try the first several billion numbers, and it turns out true, are you gonna conclude its true for all numbers?
21.12.18 10:36:28<stoopkid> no it will fail at and above 1 trillion
21.12.18 10:36:43<dmiles> right this is why most all of mathemetatics is conjecture
21.12.18 10:36:49<stoopkid> could just as easily be the case with goldbach's twin prime, etc..
21.12.18 10:36:58<stoopkid> well, no?
21.12.18 10:37:05<stoopkid> definitely not "most"
21.12.18 10:37:42<dmiles> ok well things beyond the basics
21.12.18 10:37:53<stoopkid> even then
21.12.18 10:38:33<stoopkid> its relatively rare to even have a conjecture in math at all
21.12.18 10:38:54<stoopkid> generally you can either prove it, disprove it, or you simply just don't know the answer
21.12.18 10:39:35<stoopkid> and then a very small number of people (often just 1) will have some kind of insight or intuition that will suggest to them what the answer "should" be
21.12.18 10:40:31<dmiles> sometimes we have to decide what things like if an immaginary number can fit into a certain equation
21.12.18 10:41:08<dmiles> or if a durivitive can be introduce
21.12.18 10:41:10<dmiles> d
21.12.18 10:41:40<dmiles> and when we introduce it .. what the implications will be 
21.12.18 10:42:26<stoopkid> yes
21.12.18 10:42:29<dmiles> the best we get are axioms to apply to axioms
21.12.18 10:43:24<dmiles> sometimes we have to create a limit on the domain
                 <stoopkid> you mean, the best we get in terms of verifying axioms A is some other set of axioms B that we think implies something about the validity of axioms A?
21.12.18 10:43:48<dmiles> (such as arctangents)
21.12.18 10:44:15<dmiles> (or maybe i meant tagents.. where it cant be one or zero)
21.12.18 10:44:31<stoopkid> hrm, in the case of putting limits on the domain, that's generally not "axiomatic"
21.12.18 10:45:02<stoopkid> or rather, it's generally derived from much more basic axioms
21.12.18 10:45:35<stoopkid> w/ tangent/arctangent, those points removed from the domain are the ones where the formula sin/cos would be dividing by 0
21.12.18 10:46:30<dmiles> yeah .. in this case we prove the mistake in order to prove the domain
21.12.18 10:46:57<dmiles> (i meant we can prove "hey this will be effectively dividing by zero.. here is the proof"
21.12.18 10:47:01<dmiles> )
21.12.18 10:47:58<dmiles> the only things we have are what we can equationally/axiomatically prove and disprove
21.12.18 10:48:22<stoopkid> right so i would probably not have an axiom like "tangent is not defined at the following points: "
21.12.18 10:48:27<dmiles> also what axioms we chose to ingore
21.12.18 10:48:50<stoopkid> i actually wouldn't even have an axiom like "division by 0 is not defined", as this can be proven as well
21.12.18 10:49:30<stoopkid> you can talk about the relation "x divides y" which is true when there exists an integer k such that x * k = y
21.12.18 10:50:02<dmiles> we can define infinety as the number that results from division by 0
21.12.18 10:50:25<stoopkid> indeed we could
21.12.18 10:50:37<dmiles> that they are inverses
21.12.18 10:51:19<dmiles> (that is why sometimes people will flip a fraction over to avoid one or the other)
21.12.18 10:51:40<dmiles> since in electronics we use infinity quite often
21.12.18 10:51:52<stoopkid> but even in that situation it could still be given as a *proof* based on the same reasoning, formulating "divides" as a relation, and defining what it means to multiply 0 by infinity
21.12.18 10:52:54<stoopkid> see, arithmetic over Nat is different from arithmetic over Nat + infinity
21.12.18 10:52:57<dmiles> (i can prove that an occilatior run at Nhz based on using infinity)
21.12.18 10:53:06<stoopkid> but we can *prove* that they're different, and how they're different
21.12.18 10:53:41<stoopkid> just based on properties of functions and sets
21.12.18 10:54:00<dmiles> none of this proves any consistency though does it?
21.12.18 10:54:28<dmiles> we jsut had to sign up to use the axioms as perscribed
21.12.18 10:55:04<stoopkid> everything you derive from the axioms is consistent under the assumption of consistency of the axioms, which you have to check directly, outside of the proof-system
21.12.18 10:55:42<dmiles> that is what i was saying abotu A0-A9
21.12.18 10:56:07<dmiles> (though A7 was going to be a division by zero that A5:A^ would need ot set up)
21.12.18 10:56:48<dmiles> what i am saying is no mater how pere thngs are .. devision by zero will emerge
21.12.18 10:56:58<dmiles> what i am saying is no mater how pure thngs are 
21.12.18 10:57:40<dmiles> or some conjecture about primes will give us completel valid statments that should be provable
21.12.18 10:57:51<dmiles> (yet doenst seem to be provable)
21.12.18 10:58:43<stoopkid> can you show me an informal proof of goldbach's conjecture or the twin primes conjecture? :)
21.12.18 10:59:05<stoopkid> i'm assuming not or you wouldn't have any funding issues :P
21.12.18 11:00:02<dmiles> the only things we can do about these inherit parts of all system is to at least recognise them and set up the axioms we need for cetain tasks
21.12.18 11:00:43<dmiles> these inherent parts of all system that Godel, Young claim exist
21.12.18 11:01:41<stoopkid> right, you the verifier can't verify itself
21.12.18 11:01:58<stoopkid> therefore: one should choose the minimum possible set of axioms/rules for their verifier
21.12.18 11:02:38<stoopkid> right, the verifier can't verify itself*
21.12.18 11:02:57<dmiles> though Hewitt whom i am a fan of posted this to LtU  http://lambda-the-ultimate.org/node/4784?from=400&comments_per_page=200
21.12.18 11:04:05<stoopkid> oy
21.12.18 11:04:10<stoopkid> i have so many problems with that
21.12.18 11:04:49<dmiles> well he used "Direct Logic" which is Nonmonotonic
21.12.18 11:05:32<dmiles> (for the same reasons I, McCarthy etc do to get around a few idealisms)
21.12.18 11:07:28<dmiles> simularly like in mathematics you may use range restrictions 
21.12.18 11:07:52<dmiles> to introduce domain restrictions
21.12.18 11:08:26<dmiles> by creating certain "undefined space"
21.12.18 11:08:27<stoopkid> we're not introducing any inconsistencies or new axioms when we do that in mathematics
21.12.18 11:09:00<dmiles> example of doing that in math is the range of divison by zero creates a undefined in consine
21.12.18 11:09:15<dmiles> cosine/sine
21.12.18 11:09:21<stoopkid> it's like, i talk to "pure logicians" that hate math, and they say things like "2 + 2 = 4 huh? WHAT ABOUT  MOD  3 !?!?!"
21.12.18 11:09:27<stoopkid> "ha, inconsistency! deal with it!"
21.12.18 11:09:48<stoopkid> when mathematicians just say "these are just different functions, potentially on entirely different spaces"
21.12.18 11:11:15<stoopkid> mathematicians really typically don't have an axioms about numbers at all
21.12.18 11:11:25<stoopkid> there's generally no axioms about Nats
21.12.18 11:11:28<stoopkid> no axioms about Reals
21.12.18 11:11:32<stoopkid> no axioms about sin/cosine
21.12.18 11:11:38<stoopkid> no axioms about calculus and derivatives and integrals
21.12.18 11:11:44<stoopkid> no axioms about limits
21.12.18 11:12:02<stoopkid> not even any axioms about abstract algebra (for the most part)
21.12.18 11:12:14<stoopkid> no axioms about statistics
21.12.18 11:12:18<stoopkid> no axioms about range-restrictions
21.12.18 11:12:27<dmiles> yet far more axims in math than in type theory :(
                 <stoopkid> no axioms about where functions are/aren't defined
21.12.18 11:12:33<stoopkid> not really
21.12.18 11:12:44<stoopkid> maybe if by "far more" you mean like 3-5
21.12.18 11:13:05<dmiles> mathmatical proofs use what for elements?
21.12.18 11:13:39<stoopkid> typically sets and functions are the primitives
21.12.18 11:13:59<stoopkid> type theory follows that same philosophy, dropping axiom of choice and LEM along the way
21.12.18 11:14:03<dmiles> like for exmaple refelixity and distrubuitive properties
21.12.18 11:14:19<dmiles> (in addition/equality)
21.12.18 11:14:48<dmiles> these properties can be somewhat axiomitized
21.12.18 11:15:06<stoopkid> equality will typically have some axioms: reflexivity, symmetry, transitivity, substitution principles
21.12.18 11:15:09<dmiles> so that we can recognise their usage in proofs
21.12.18 11:15:39<stoopkid> but distributivity of multiplication over addition is *provable* from the basic definitions of addition and multiplication as functions
21.12.18 11:16:26<stoopkid> indeed i can prove it in type theory for example, even though there aren't any built-in axioms for natural numbers or really even for equality!
21.12.18 11:17:46<dmiles> well axioms are definitionally arbitrary
21.12.18 11:18:00<dmiles> (none seem really built-in)
21.12.18 11:18:20<dmiles> we build them up
21.12.18 11:18:26<stoopkid> i mean, there aren't any axioms for natural numbers or equality at all in type theory
21.12.18 11:20:11<stoopkid> it's derivable from the axioms that Nat is a set, that there's a standard equality relation and addition/multiplication functions defined on it, and that multiplication distributes over addition wrt that equality relation
21.12.18 11:21:22<dmiles> one can build up axioms from functions or and one can build up functions from axioms
21.12.18 11:21:26<stoopkid> rule of least power is very serious cause this is the difference between me having to manually verify the validity of 5-10 rules vs. the validity of 1300 rules
21.12.18 11:22:01<stoopkid> (also a matter of how many domains those rules are applicable in)
21.12.18 11:22:25<stoopkid> (we want the same rules to be applicable across as many domains as possible, so that results derived from them are as interoperable as possible)
21.12.18 11:23:07<stoopkid> the polynomial solver meets the first criteria: a relatively small number of straightforward axioms that i can manually verify
21.12.18 11:23:27<stoopkid> but it fails on the second criteria: these rules are highly domain-specific
21.12.18 11:24:01<dmiles> well the issue i think that we are talking aobut is how much power it takes for automated programs as proofs (verification) to compared to automatic proofs as programs
21.12.18 11:24:02<stoopkid> i can do a few things with them, and then if i get a problem in a different domain, i have to define a new rule-set custom-tailored to that new domain
21.12.18 11:25:06<stoopkid> now my verifications become much more involved, because now i've got 20 axioms that need to be interoperable
21.12.18 11:25:15<stoopkid> and then a new domain: and soon we're up to 1300+ axioms
21.12.18 11:26:07<dmiles> the only way a system can get up to 1300 axioms is by designing a system that cannot do illogial things
                 <stoopkid> that literally nobody will ever verify, *except* potentially relative to a smaller set of rules that's capable of talking about the validity of other rule-sets/definitions
21.12.18 11:26:19<stoopkid> err
21.12.18 11:26:46<stoopkid> getting a system up to 1300 axioms is basically a guarantee that your system *will* do illogical things
21.12.18 11:27:14<dmiles> a system that cannot do illogical things things get there by having many axioms that act as "restrictors"
21.12.18 11:27:57<stoopkid> you know i can't do anything illogical in type theory right? and it only has like 5-20 axioms, depending on which particular formulation you look at
21.12.18 11:28:35<stoopkid> we don't have to add 1280 more axioms in order to stop the type theory from doing illogical things
21.12.18 11:28:42<stoopkid> in fact, that would probably be extremely counterproductive! :P
21.12.18 11:29:05<dmiles> if you cannot do illogical things that is a good place ot be .. you can even pump into it axioms that would cause illogical behavour and you are still safe?
21.12.18 11:29:53<dmiles> or are you saying that axioms should not be addable as if you did it could become unsafe?
21.12.18 11:30:13<stoopkid> the latter, almost
21.12.18 11:30:32<stoopkid> not that they "shouldn't be addable" but rather, adding an axiom is a "major" thing
21.12.18 11:30:57<stoopkid> like take C++ as an example
21.12.18 11:31:10<stoopkid> there's a difference between writing another C++ program, and releasing a new version of C++
21.12.18 11:31:16<stoopkid> the latter being the much more "major" thing
21.12.18 11:31:54<dmiles> everytime i sit down wuith C++ i write enough macros to make it a new language
21.12.18 11:32:14<dmiles> i only have to sanity check those macros
21.12.18 11:32:24<stoopkid> macros are a completely different story, they still expand to regular C++
21.12.18 11:32:35<stoopkid> similarly you could write macros in a logic-based framework
21.12.18 11:32:42<stoopkid> but they would still expand to that underlying logic
21.12.18 11:32:55<dmiles> axioms are just macros that expand to other axioms
21.12.18 11:33:53<stoopkid> hrm
21.12.18 11:34:08<dmiles> having axioms that range-restrict are important
21.12.18 11:34:17<stoopkid> i would accept "all axioms are macros" but i probably wouldn't accept "all macros are axioms"
21.12.18 11:34:38<dmiles> that is what you are creating in agda sometimes is ristrictions
21.12.18 11:35:13<stoopkid> cause you could ofc have a macro-system over your logic-programming framework that expands macros but only considers derivations valid if they use the original axiom-set, right?
21.12.18 11:36:15<stoopkid> and yes, function types can be seen as being a domain-restriction + a range-restriction, over a total space of tree-like objects
21.12.18 11:36:40<dmiles> well in prolog there are really only 2 built in axioms  Unify and Call
21.12.18 11:36:57<stoopkid> indeed but i meant, take some given prolog kb
21.12.18 11:37:21<dmiles> but yes that prolgo KB expands to jsut ever only using those two
21.12.18 11:38:07<dmiles> but from those 2 there is not must you cant trick them into doing
21.12.18 11:38:34<stoopkid> well i meant, take some given prolog kb, you could hypothetically make a macros system that expands to queries/derivations specific to this prolog kb
21.12.18 11:38:50<dmiles> *nod*
21.12.18 11:39:19<stoopkid> so this is similar to making a whole bunch of macros in C++
21.12.18 11:39:28<stoopkid> at the end of the day: it's still C++, you never change any of the semantics
21.12.18 11:40:08<stoopkid> it's not really "practically a new language", because the macros might expand to things that aren't C++, but those things will never make it through the compiler (modulo bugs), right?
21.12.18 11:40:18<dmiles> except in the case of this C++ program:    https://www.cl.cam.ac.uk/~am21/research/funnel/prolog.c
21.12.18 11:40:24<dmiles> (maybe)
21.12.18 11:41:01<dmiles> as in that it is an interpreter of a differnt language
21.12.18 11:41:18<dmiles> so as an experiment i rewrite it to as macros
21.12.18 11:41:23<dmiles> rewrote it
21.12.18 11:41:51<dmiles> and made it so i could no longer write C++ in the macro language
21.12.18 11:42:50<stoopkid> so, back to this: "you can even pump into it axioms that would cause illogical behavour and you are still safe?", no, you literally never have a safety guarantee when adding arbitrary new axioms
21.12.18 11:43:08<dmiles> (the macros ended up being all horn clauses)
21.12.18 11:43:50<stoopkid> and if you already know ahead of time that the axioms cause illogical behavior, then you basically have a guarantee of *non*-safety
21.12.18 11:44:04<dmiles> this is the same technique we do in emtting .lisp files as .c
21.12.18 11:44:40<stoopkid> actually i need to retract my statement a bit
21.12.18 11:45:00<stoopkid> there are limited domains where consistency is decidable
21.12.18 11:45:06<dmiles> well when writting probrams as nothing but axioms you also have the guertee you can write in the turing compete language
21.12.18 11:45:22<dmiles> well when writting probrams as nothing but axioms you also have the guertee you CANT write in the turing compete language
21.12.18 11:45:51<dmiles> so quite a few chances at bugs get unchanced
21.12.18 11:47:16<stoopkid> hrm... i don't think that's accurate either
21.12.18 11:47:24<dmiles> i think i've seen this argument used quite a bit by functional programmers (non-turing completeness as an asset!)
21.12.18 11:47:37<stoopkid> you should be able to formulate a system of axioms/rules that has turing-completeness
21.12.18 11:48:09<stoopkid> eh, turing-completeness is kind of a red herring
21.12.18 11:48:31<dmiles> yeah i probably agree with you (i certainly diagree with them!)
21.12.18 11:48:51<stoopkid> our logical frameworks are so much more restrictive than just "not turing complete" that saying that "not being turing-complete" has anything to do with it is kind of misleading
21.12.18 11:49:13<dmiles> prolog is usually written in two languages are once.. one is the program you wish you could write and then other is a program to interpret the first
21.12.18 11:49:53<stoopkid> there's a specific reason they aren't turing-complete, and a specific reason that they're even much much more restrictive than just simply "not turing-complete": recursion isn't there for you to do "general purpose programming" with, it's there for *proofs by induction*
21.12.18 11:49:55<dmiles> (since you dont want to ever be stuck writing the two programs as the same thing)
21.12.18 11:50:16<dmiles> Haskell programmers now do what Prolog programers do in that sense
21.12.18 11:50:41<stoopkid> if you don't know what induction principle your particular recursion corresponds to, you have no business calling your recursive program a "proof" of anything
21.12.18 11:50:57<dmiles> the two programs have two differnt proof-reading methodolgies
21.12.18 11:53:15<dmiles> one program is interpretor for data .. and the second program you write for that interpreter
21.12.18 11:53:40<dmiles> Haskell calls the first program the monads
21.12.18 11:54:23<dmiles> i bring that up due to really the 2nd priogram is not turing complete
21.12.18 11:54:53<dmiles> (but of couse the 1st program had to be)
21.12.18 11:55:25<stoopkid> there's no formal verification in haskell
21.12.18 11:56:04<stoopkid> ++++++++++++++++++++
21.12.18 11:56:10<stoopkid> sorry, cat :)
21.12.18 11:56:59<dmiles> i suppose in Agda one can use this same technique
                 <stoopkid> haskell is pretty much the worst of all possible worlds
21.12.18 11:57:37<stoopkid> indeed you could but it's sort of a different situation because there's no non-termination available
21.12.18 11:57:41<dmiles> that is what you have been refering to when we talk about the "killer record type"
21.12.18 11:58:01<dmiles> that is that record type being the second program
21.12.18 11:58:45<dmiles> and the first program is an interpreter for that record type
21.12.18 11:59:37<stoopkid> this is a different strategy from monads but yea
21.12.18 12:00:09<dmiles> the question that is asked is how much is going to get done between what HCMa  and you call open vs closed phaases
21.12.18 12:00:35<dmiles> which i assume it when the system gets a verificvation pass over program #2
21.12.18 12:01:15<stoopkid> i have no idea what's gonna get done at all in autonomic
21.12.18 12:01:34<stoopkid> if i were designing it myself there would only be the "closed" phase
21.12.18 12:01:44<stoopkid> and it wouldn't be closed-world semantics it would be open-world
21.12.18 12:02:02<stoopkid> so it would actually be a completely different design entirely than whatever HMC's plan is
21.12.18 12:07:24<dmiles> last night i wrote an interpetor for a language.. but in onder to write that interpetor i write a diffenrt interpreter
21.12.18 12:07:50<dmiles> because i wanted to keep the axioms small and verifiable
21.12.18 12:08:00<dmiles> (cognitively)
21.12.18 12:08:42<dmiles> that though does make it grow in total axioms
21.12.18 12:09:05<dmiles> so here is example of axioms for the seconds interpreter:  https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/ec_loader.pl#L146-L172
21.12.18 12:09:49<dmiles> that mond/interpretor is understood by this interpeter https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/ec_loader.pl#L45-L68
21.12.18 12:10:38<dmiles> cond_load_e(Cond,F):- needs_resolve_local_files(F, L), !, maplist(cond_load_e(Cond), L).  
21.12.18 12:10:39<dmiles> cond_load_e(_,F):- is_filename(F), \+ atom_concat(_,'.e',F), !.
                 <dmiles> cond_load_e(changed,'foundations/EC.e').
21.12.18 12:10:40<dmiles> cond_load_e(changed,'foundations/Root.e').
                 <dmiles> cond_load_e(_Cond,F):- etmp:ec_option(load(F), loading),!.
                 <dmiles> cond_load_e(changed,F):- etmp:ec_option(load(F), loaded),!.
                 <dmiles> cond_load_e(Cond,F):- Req = [pl],
21.12.18 12:10:41<dmiles>    \+ nb_current('$output_lang',Req), !,
                 <dmiles>    locally(b_setval('$output_lang',Req), cond_load_e(Cond,F)).
21.12.18 12:10:42<dmiles> cond_load_e(Cond,F):-
                 <dmiles>   set_ec_option(load(F), loading),
21.12.18 12:10:43<dmiles>   pprint_ecp_cmt(green, loading(Cond, F)),
21.12.18 12:10:44<dmiles>   e_to_pl(assert_ele, current_output, F), !,
                 <dmiles>   set_ec_option(load(F), loaded).
21.12.18 12:13:37<dmiles> e_to_pl(assert_ele, current_output, F).  pipes    the program to an interpetoer thru "e_to_pl" and into "assert_ele"
21.12.18 12:14:14<dmiles> (two more interpeters .. that have their own set of axioms)
21.12.18 12:14:55<dmiles> simularly i see this as the only way to be productive in a language like Agda
21.12.18 12:15:34<dmiles> (well it is the only way to be producting in any language!)
21.12.18 12:16:05<dmiles> i suspect this might be programing with holes
21.12.18 12:16:06<stoopkid> you mean to add more axioms to Agda or to write domain-specific interpreters in Agda that simplify programming/proving in domain-specific contexts?
21.12.18 12:16:32<dmiles> to write several domain specific interpreters for a data language
21.12.18 12:16:45<stoopkid> sure, i don't disagree with that
21.12.18 12:17:16<dmiles> (where each interpreter is only powerfull enough to understand a few anspects of the killer record type)
21.12.18 12:17:52<stoopkid> sure (or in some cases powerful enough to understand the whole thing; either way)
21.12.18 12:17:58<dmiles> yet none of the interpreters even have code until the other interpretor rtuns them
21.12.18 12:19:02<stoopkid> sure you could design them that way
21.12.18 12:19:30<stoopkid> it would probably be a good design strategy (i.e. to abstract the implementation detail out of them)
21.12.18 12:20:15<stoopkid> type theory doesn't force you do that (well unless you consider the type theory itself to be "the other interpreter") but it's generally a good strategy
21.12.18 12:20:58<dmiles> right .. this is whyt i asked if there is a interpetor for "type theory" that also runs programs
21.12.18 12:21:15<dmiles> (that is that the theory was axiomitized into a working runing logic program)
21.12.18 12:22:10<dmiles> not really a "prolog" port .. but if it has one it can run on just abouit any datalog backward comapable toolchain
21.12.18 12:22:29<stoopkid> you mean, is there an implementation of type theory in something like prolog/datalog such that you could just query against the type theory rules like "?x : Nat. ?x > 5. ?x < 10" ?
21.12.18 12:22:53<dmiles> right
21.12.18 12:23:11<stoopkid> i don't know, i'll try to find one
21.12.18 12:23:33<stoopkid> it would really surprise me if there wasn't but none of the implementations that have ever been shown to me were designed like that
21.12.18 12:24:33<stoopkid> and i'm rather confused as to why not; i presume they don't want their logic being misconstrued as an open-ended thing that you can just add more rules/axioms to arbitrarily, as is standard practice in the prolog world
21.12.18 12:24:57<dmiles> well the point of such a system is to lazy verify 
21.12.18 12:25:37<dmiles> that is that you do eveything when you have the most up to date information
21.12.18 12:28:20<stoopkid> not sure what you mean; type theory is pure math so there's never a problem of lacking "the most up to date information"
21.12.18 12:28:44<dmiles> in the case of your exmaple query the  10 might get changed to 100 depending on the enuser envirment variable
21.12.18 12:29:08<stoopkid> mmmmmmmm......
21.12.18 12:29:25<stoopkid> you do see how that's totally irrelevant to the logic right?
21.12.18 12:29:41<dmiles> it is relivant to the types though
                 <stoopkid> it's just a different user making a different query...
21.12.18 12:29:53<stoopkid> how exactly? :)
21.12.18 12:29:59<dmiles> and to the scheme of wher eth eprogram can and cant get to
21.12.18 12:31:29<dmiles> i often make logical queries in my code as to help decided what code i am going to run next
21.12.18 12:32:03<dmiles> (that is how my program accesses variables)
21.12.18 12:32:29<dmiles> the more theory behind the types of resuilts it cant get back the better
21.12.18 12:33:03<stoopkid> seems more reasonable to just assign a type to the results it *can* get back :P
21.12.18 12:33:48<dmiles> the reason for doing the "assign a type" at runtime is that is far less "contingency code"
21.12.18 12:34:24<dmiles> "contingency code" is what the compiler does when it can narrow things down well
21.12.18 12:34:54<stoopkid> what exactly does it do when it narrows the things down?
21.12.18 12:34:59<dmiles> and the biggest gripe i hear revolving arround haskelling languages
21.12.18 12:35:12<dmiles> whuich the curry interpreter/compier solved
21.12.18 12:35:53<dmiles> narrowing things from being an arroay for maxint size down to being an array that is always of size 1
21.12.18 12:36:21<dmiles> and narrowed down to not even being a sized one array
21.12.18 12:36:29<stoopkid> so optimization
21.12.18 12:36:38<dmiles> yes
21.12.18 12:37:08<stoopkid> people probably have this gripe about agda too
21.12.18 12:37:12<dmiles> type inference for over 20 years was all about narrowing 
21.12.18 12:37:31<stoopkid> my assessment: most people have no idea what they're talking about on this matter, including most type theorists
21.12.18 12:38:50<dmiles> "contingency code" is what type theory can be good at avoiding
21.12.18 12:39:20<stoopkid> hrm
21.12.18 12:39:30<stoopkid> why would you want to avoid it? :)
                 <dmiles> the reason for verification in the JVM was to emiminate dead paths
21.12.18 12:39:46<stoopkid> iow: why would you want to avoid domain-specific optimizations in specific domains?
21.12.18 12:39:57<dmiles> i ave expoentation
21.12.18 12:40:10<dmiles> i have exponeting conginency code 
21.12.18 12:40:50<stoopkid> you mean, the amount of domain-optimized code you end up with grows exponentially wrt the amount of generic code you write?
21.12.18 12:41:26<dmiles> sometimes i am so type-specific that the same proceedure need 50 versions (1 for each value)
21.12.18 12:41:39<stoopkid> (ex. for every C++ program there's a different domain-optimized version for every processor arch)
21.12.18 12:42:20<dmiles> and this only will get worse the more  domain-optimized code i  end up 
21.12.18 12:43:28<dmiles> since only 1 type value will pass thru that function that means 49 version are not needed
21.12.18 12:43:39<dmiles> but dang it runs fast at that 1 !
21.12.18 12:44:31<dmiles> teh compiler cant always guess which out of the 50 versions it can eleminate
21.12.18 12:45:41<dmiles> the "?x > 5. ?x < 10 " lets  lets it emimate 41 lets say
21.12.18 12:45:48<dmiles> but what i dont know that ?
21.12.18 12:46:29<dmiles>  "?x > 5. ?x < 10 " lets it not compile 46 versions of the 50
21.12.18 12:46:46<dmiles> why really should i bother to compile even one until i know?
21.12.18 12:47:31<dmiles> of course i dont mind having the checker deside i can safely gererate all 50
21.12.18 12:47:39<dmiles> (before ship)
21.12.18 12:48:39<dmiles> i guess it jsut shocks me that people wouldnt have been doing this stuff we've done for several years
21.12.18 12:51:01<dmiles> well i know they do type narrowingf
21.12.18 12:52:24<dmiles> the bytecode compiler in the JVM btw is an exmaple of this
21.12.18 12:52:40<dmiles> when it sees the bytecode it compiles it to x86 
21.12.18 12:53:00<dmiles> but before it does that it verified what types are never going to be used
21.12.18 12:53:50<dmiles> so the JIT cache depedning on the setting only contains 4 out 50 version of the compiled method
21.12.18 12:54:16<dmiles> i ussualy set it to never even have 1 version
21.12.18 12:54:36<dmiles> since in this exmaple it is passed thru only once
21.12.18 12:54:56<dmiles> so there no reason to retain the x86
21.12.18 12:55:40<dmiles> i studied the Haskell/Agda on the JVM .. it also did this
21.12.18 12:56:57<dmiles> well it was jsut HAsell but it had an Adga plugin
21.12.18 12:59:03<dmiles> it took me a week to get hackage even rebuilt to be class files
21.12.18 13:00:12<dmiles> since everyone hated the cocept of haskell btyecode
21.12.18 13:00:15<dmiles> concept
21.12.18 13:02:30<dmiles> https://jaxenter.com/frege-pirates-jvm-132822.html 
21.12.18 13:03:06<dmiles> the JVM gets rid of most problems
21.12.18 13:03:24<dmiles> but complely in logic axioms gets rid of even more
21.12.18 13:09:05<dmiles> as that page says
21.12.18 13:09:06<dmiles> Semantic
                 <dmiles> All data are invalriable values (value semantic)
                 <dmiles> Demand assessment (lazy evaluation), allows the handling of infinite data structures
21.12.18 13:10:26<dmiles> but what features that you get from logical axioms is the abilty to runinng code in verse
21.12.18 13:10:35<dmiles> run code in reverse
21.12.18 13:14:18<dmiles> or like in wam_cl ther eius no overhead of object isntnace creation no mayter how big or complex the data was
21.12.18 13:17:28<dmiles> anyhow the datalog version of Agda is more interesting to me than a datalog version of typetheory
21.12.18 13:18:09<dmiles> since verification is easy.. it is the interpetation that matters
21.12.18 13:19:00<dmiles> since it is doing what was layed out 
21.12.18 13:19:59<dmiles> (type theory as a practice.. not as a theory)
21.12.18 13:27:45<stoopkid> hrm
21.12.18 13:28:08<stoopkid> not sure what you mean; a datalog version of Agda would be a datalog version of type theory, because Agda is a version of type theory
21.12.18 13:29:02<dmiles> yes tha tis why i changed from "lets see mltt in datalog" to "lets see adga in datalog"
21.12.18 13:30:05<stoopkid> i'm still unsure what's the difference
21.12.18 13:30:30<dmiles> one only verifies programs the other runs them as well
21.12.18 13:31:14<stoopkid> mmm..
21.12.18 13:31:23<stoopkid> no, MLTT runs them as well
21.12.18 13:31:56<stoopkid> whatever MLTT doesn't run, technically neither does Agda, and whatever Agda does run, so does MLTT
21.12.18 13:32:36<dmiles> sounds good than.. what this woudl ammount to is having the N3 it takes to run them 
21.12.18 13:35:13<stoopkid> and what that would amount is just expressing the Agda/MLTT rules, since they already describe how to "run" the programs, iow you don't need any extra mechanics, and Agda doesn't have any extra mechanics for this it's just using the plain MLTT rules
21.12.18 13:36:09<stoopkid> there's one generalized inference rule handling that, the computation rule
21.12.18 13:53:30<stoopkid> note though that neither one will "run" anything that's inflooping
21.12.18 13:53:52<stoopkid> i try not to even think of them as algorithms to begin with
21.12.18 13:54:28<stoopkid> when you try to treat it like a general purpose programming language, the idiosyncracies of the total functional programming just don't even make sense
21.12.18 13:54:58<stoopkid> instead of programs, you just have terms, and terms have normal forms
21.12.18 13:55:21<stoopkid> and "running a term" is just simplifying it to its normal form
21.12.18 13:57:38<stoopkid> so like, 5 + 5; "running" this results in 10, but all you've done is normalize a term
21.12.18 13:58:20<stoopkid> and this can get highly sophisticated
21.12.18 13:59:00<stoopkid> "makeParser myRegex", where makeParser is a function that takes a regular expression and produces a parser function for it
21.12.18 13:59:30<stoopkid> but in all cases you're always just normalizing a normalizable expression
21.12.18 13:59:43<stoopkid> contrast this with, say, an oscillator
21.12.18 14:00:30<stoopkid> it won't "run" an oscillator
21.12.18 14:00:57<stoopkid> it could "run the oscillator 10 times"
21.12.18 14:01:16<stoopkid> it could have a function that takes a number N and returns "the result of running the oscillator N times"
21.12.18 14:01:27<stoopkid> but it won't just "run" the oscillator
21.12.18 14:02:08<stoopkid> even though it's 1 million times simpler than the makeParser function
21.12.18 14:02:52<stoopkid> you could even describe an infinite stream of all the states the oscillator will go through:
21.12.18 14:03:04<stoopkid> true :: false :: true :: false :: true :: ....
21.12.18 14:03:39<stoopkid> and then you can manipulate and reason over it with terms that are finitely normalizable
21.12.18 14:04:08<stoopkid> but you need something separate to actually run it
21.12.18 14:07:11<stoopkid> so for describing non-terminating computation, you do need the "two language" set up
21.12.18 14:09:21<stoopkid> wrt "contingency code"... you wouldn't exactly "avoid" this in type theory
21.12.18 14:09:50<stoopkid> if domain/platform-specific optimizations exist, and you want to make use of them, there isn't really a way around that
21.12.18 14:11:01<stoopkid> best possible scenario is that your framework can automatically derive the optimizations from the generic specification, when needed, such that you don't need to write them by hand for every different case
21.12.18 14:13:28<stoopkid> this is why for example i've been working on describing formal languages and abstract machine models in type theory
21.12.18 17:12:34<aindilis> hey
21.12.18 17:12:53<aindilis> stoopkid: can you give an example of how to use the chess domain?
21.12.18 18:08:09<stoopkid> aindilis: i haven't tried it out yet i'll see if i can work up an example though
21.12.18 19:19:26<aindilis> awesome
21.12.18 20:45:27<dmiles> 'but it won't just "run" the oscillator' 
21.12.18 20:46:17<dmiles> that is kind of the upside of "running" of a logic program.. it emulates 'as if you just ran it'  "the result of running the oscillator N times"
21.12.18 20:47:48<dmiles> some parts of programs probably done work out that way.. due ot that they need external informatin to \run' such as a word processor
21.12.18 20:49:12<dmiles> that is for isntance using term manipution as a means to emulate notepad.exe
21.12.18 20:49:24<dmiles> (also is what PrologMUD exclusively does)
21.12.18 20:50:14<dmiles> is it simulates what a MUD program might do
21.12.18 20:52:45<dmiles> since it is all sumulated with term rewriting there is no need to "run" anythng .. mainjly what is going on with it and a with a simulated notepad.exe (in logic).. it is runnig a logical search )infernce) and stopping whenever it is blocked waiting for a user to allow it to continue
21.12.18 20:53:57<dmiles> so as i type into the word processor 'h' the infenrce process resumes in which now an 'h' appears on the screen
21.12.18 20:54:12<dmiles> blocks again
21.12.18 20:54:19<dmiles> until 'e'
21.12.18 20:54:27<dmiles> and so on
21.12.18 20:55:14<dmiles> there are axioms that make each letter get consumed and blocked
21.12.18 20:56:14<dmiles> one can think fo these as game rules for playing "lets pretend we are a user and a word processesor"
21.12.18 21:15:21<stoopkid> "that is kind of the upside of "running" of a logic program.. it emulates 'as if you just ran it'  "the result of running the oscillator N times""
21.12.18 21:15:22<stoopkid> ?
21.12.18 23:04:18<aindilis> interesting
21.12.18 23:04:32<aindilis> iaec is supposed to be able to reason about the properties of strings
21.12.18 23:10:09<aindilis> I can't find the use case anywhere
21.12.18 23:10:35<dmiles> well logic programs can be complete that never require side effects 
21.12.18 23:11:19<aindilis> there was an interesting use of theorem proving over strings that was supposed to allow it to compose things
21.12.18 23:11:35<dmiles> for example the occilator exmaple you gave stoopkid is based on a computation instead of an interactive side-effect
21.12.18 23:14:14<dmiles> i can delare certain properties "logically" like ..
21.12.18 23:14:15<dmiles> loop_forever.  loop_forever:- loop_forever.
21.12.18 23:14:39<stoopkid> aindilis: got a link?
21.12.18 23:14:48<aindilis> to iaec?
21.12.18 23:15:01<stoopkid> yea i'm not familiar with it
21.12.18 23:15:17<aindilis> https://github.com/aindilis/iaec-notes
21.12.18 23:15:45<dmiles> (the inferental cost and stack code is zero) .. now here is a program io wrote that uses that "run forever" logical construct to make a 2hz occilator
21.12.18 23:16:11<dmiles> here is the "occilator"  https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/ec_loader.pl#L371-L376
21.12.18 23:16:47<dmiles> % recompiles and restart tests everytime source is update updated
                 <dmiles> rect:- once(ect), % first run
                 <dmiles>    loop_forever,
                 <dmiles>    wait_for_input([current_input],Was,0.5), 
                 <dmiles>    modified_file(_Any),
21.12.18 23:16:48<dmiles>    once(ect), 
21.12.18 23:16:49<dmiles>    Was == [current_input]. 
21.12.18 23:18:42<dmiles> logically "loop_forever" is just an "idea"
21.12.18 23:19:01<dmiles> implemented as:   "loop_forever.  loop_forever:- loop_forever. "
21.12.18 23:20:20<dmiles> when used in the above " rect:- ..."   it meant we can try again
21.12.18 23:20:39<dmiles> (that search is never ending)
21.12.18 23:21:19<dmiles> so twice a second it looks for modified files
21.12.18 23:22:04<dmiles> this is "ran" as a theorem proving process
21.12.18 23:23:07<dmiles> i can do the same things with any sort of preceedure or function
21.12.18 23:23:14<dmiles> use them as ideas or as programs
21.12.18 23:23:50<stoopkid> i'm not exactly sure what you're trying to demonstrate, that you can make prolog infloop?
21.12.18 23:23:58<dmiles> its not an infloop
21.12.18 23:24:16<dmiles> its that there are two "views" of a program
21.12.18 23:24:39<dmiles> two interpretations
21.12.18 23:25:17<aindilis> homoiconicity?
21.12.18 23:25:37<aindilis> you can the program as the idea
21.12.18 23:25:44<aindilis> can *pass
21.12.18 23:26:03<dmiles> one interpretation is about what *can* be proved and solved..   the second interpretation is about what *must* be proved and solved
                 <aindilis> I am struggling how to assert things like I have a blue horse
21.12.18 23:26:21<aindilis> hrm
21.12.18 23:26:51<stoopkid> dmiles: hrm, well i at least follow and agree with that intention
21.12.18 23:27:57<dmiles> i find the most usefull programing interpreters that calculate both of those things the entire time 
21.12.18 23:28:16<aindilis> so what are the use cases of this duality?
21.12.18 23:28:40<dmiles> the first useace developed was the abile to create a tail optimizaion
21.12.18 23:28:52<dmiles> was the ability*
21.12.18 23:29:00<aindilis> is this call by name vs call by value?
21.12.18 23:29:18<dmiles> this is that "loop_forever.  loop_forever:- loop_forever. " lies and claims it "will"
21.12.18 23:29:41<aindilis> ah as a theorem
21.12.18 23:29:47<dmiles> yet if you look at the first successfull clause it never will
21.12.18 23:30:07<dmiles> "loop_forever." <- first successfull clause 
21.12.18 23:30:45<dmiles> second clause "loop_forever:- loop_forever." assumes it *can*
                 <aindilis> programs vs proofs?
21.12.18 23:31:21<dmiles> yes.. in the case of prolgo it is the oppostite isomorphism
21.12.18 23:31:59<dmiles> "proofs as programs"    
21.12.18 23:32:33<aindilis> but its the semantics not the execution traces?
21.12.18 23:33:33<aindilis> I saw something about this somewhere
21.12.18 23:33:35<stoopkid> so you have a statement that claims to loop forever, but it's lying and doesn't even recurse?
21.12.18 23:33:36<dmiles> the seomantics and the executioon traces are joined into one thing
21.12.18 23:33:50<dmiles> stoopkid: yes
21.12.18 23:33:57<aindilis> it was a very subtle difference in how you interpretted programs
21.12.18 23:34:31<aindilis> cannot recall
21.12.18 23:35:30<dmiles> it turns out that the result of a functions evaluation is effectively about the completion of inferences over that function
21.12.18 23:36:05<dmiles> so functions without side effects are not *must* run
21.12.18 23:36:21<stoopkid> dmiles: you probably expected this question, but: why do you need this "lying" non-inflooping infloop? is it describing some kind of infinite data structure, or..?
21.12.18 23:37:45<dmiles> i would have ben unnerved had you not asked that.. well it is just a common way to ensure that the "can" and "must" are not locked together
21.12.18 23:38:00<dmiles> since that is the problem other languages have
21.12.18 23:38:22<dmiles> (the lying part)
21.12.18 23:38:59<stoopkid> but it seems like this loop_forever actually *can't* loop forever ?
21.12.18 23:39:05<dmiles> this particuialt case of lying was one of the first discoveries about the langauge so it is used quite a bit
21.12.18 23:39:27<dmiles> right it cant physically loop forever
21.12.18 23:39:50<dmiles> but from a non-prolog logical point of view it can
21.12.18 23:39:51<stoopkid> so it can't loop forever, and it must halt?
21.12.18 23:40:10<dmiles> so in prolog it can halt.. but not in regular logic
21.12.18 23:40:56<stoopkid> mmm... but it has a base-case
21.12.18 23:41:27<dmiles> right the base case is "i am true"
21.12.18 23:41:50<stoopkid> i mean, it's just simply provable, no infloops necessary
21.12.18 23:42:05<dmiles> or "i wont infloop unless you fail and ask for another solution"
21.12.18 23:42:28<dmiles> you are right when you say that
21.12.18 23:42:42<aindilis> but not simply executable?
21.12.18 23:43:19<stoopkid> i guess that would depend on your operational semantics
21.12.18 23:43:20<dmiles> yes in prolog this secondf clause is only in case of a second failure and wont be executable
21.12.18 23:44:03<aindilis> oh is this about the order-dependence of prolog?
21.12.18 23:44:06<dmiles> the idea is that the user  "rect" code about determine the logic that will be used
21.12.18 23:44:20<dmiles> yeah this requires order dependancy
21.12.18 23:45:02<dmiles> i was trying to sneak in (maybe wrongly) that the non-order dependant veiw sees this as infloop
21.12.18 23:45:04<stoopkid> i'm not really understanding the point of the "loop_forever" clause in rect, since this just simply succeeds
21.12.18 23:46:10<dmiles> in the case of  "modified_file(_Any)," failing it will restart and try againt since   loop_forever says it belives it "can" 
21.12.18 23:46:55<stoopkid> ok lemme see if i got this right
21.12.18 23:48:24<aindilis> Dec 13, 2035 is the 30th anniversary of my Dad's passing
21.12.18 23:49:02<dmiles> :(
21.12.18 23:49:03<aindilis> which is funny since he was a vehement opponent of AI
21.12.18 23:49:47<stoopkid> if you just had the first clause for loop_forever, then it would indeed be pointless to call it in the body of rect, but, this rect function basically has to keep looping until a file was modified, but if it calls modified_file(_Any) and doesn't succeed, then it would have already tried all the options for loop_forever, so the second_clause for loop_forever ensures there's always more options so that rect can keep waiting
                 <stoopkid> for input over and over until something changes?
21.12.18 23:50:15<dmiles> exactly stoopkid
21.12.18 23:50:43<aindilis> interesting
21.12.18 23:51:08<aindilis> do you find this breaks the KBS paradigm?
21.12.18 23:51:32<aindilis> it's seems like a hack
21.12.18 23:51:59<aindilis> or I'm wondering if you think these types of tricks are essential to it
21.12.18 23:52:09<dmiles> yes  when seeing CYC the first time and seeing tis ioncapability (to do such hacks) i was afraid that there would be too many limits
21.12.18 23:52:47<aindilis> I'm debating writing prologmud in cyc
21.12.18 23:52:50<dmiles> (too many potential limits to execution)
21.12.18 23:53:07* stoopkid also thinks this seems like a hack but also not necessarily sure there's a better way to handle it in prolog
21.12.18 23:53:55<aindilis> because I can imagine the types of contracts you are talking about passing between things require all kinds of this stuff
21.12.18 23:53:57<stoopkid> maybe if you could recurse directly on rect that would probably be cleaner
21.12.18 23:54:32<aindilis> sort of like cellular mechanics
21.12.18 23:55:03<aindilis> basically hacking the physical (/ logical) relationships extant
21.12.18 23:55:25<stoopkid> dmiles: now it makes sense why you always talk about prolog like you're "tricking" it into doing things :P
21.12.18 23:55:26<dmiles> here is the same program without loop_forever
                 <dmiles> rect:- once(ect), % first run
21.12.18 23:55:27<dmiles>    wait_for_input([current_input],Was,0.5), 
                 <dmiles>    \+ modified_file(_Any) -> rect; 
                 <dmiles>    Was == [current_input] -> rect. 
21.12.18 23:56:09<aindilis> what would be interesting would be building an ontology about these tricks
21.12.18 23:56:10<dmiles> oops
21.12.18 23:56:29<aindilis> e.g. documentatoin
21.12.18 23:56:41<aindilis> *self-documentation
21.12.18 23:56:57<dmiles> rect:- 
21.12.18 23:56:58<dmiles>    once(ect), % first 
                 <dmiles>    wait_for_input([current_input],Was,0.5), 
                 <dmiles>    ( \+ modified_file(_Any) -> rect; 
                 <dmiles>    ( Was \== [current_input] -> rect; true)). 
21.12.18 23:57:34<stoopkid> i like this version better
21.12.18 23:57:38<dmiles> this second version needs someone to impl TCO 
21.12.18 23:58:03<dmiles> otherwise stack will be concumed 
21.12.18 23:58:09<dmiles> consumed
21.12.18 23:58:57<dmiles> which is considered a problem for some languages
21.12.18 23:59:34<stoopkid> definitely a problem, good call. how does the other version solve that for you?
22.12.18 00:00:07<dmiles> the other version claim the call failed and has to clean up resources.. then it starts over (again and afgain)
22.12.18 00:00:38<aindilis> so dmiles are these tricks necessary through PrologMUD?
22.12.18 00:00:41<dmiles> but each time it keeps track of how to undo side effectgs
                 <stoopkid> i see
22.12.18 00:00:53<stoopkid> wow what a dirty trick that's pretty awesome though
22.12.18 00:01:01<dmiles> and after all some or most side effects are jsut logical infernces (nothjing to undo)
22.12.18 00:01:05<aindilis> yeah I'm not saying it's bad to do this
22.12.18 00:01:15<aindilis> to be executed when make/0 is run?
22.12.18 00:02:14<dmiles> well the reason i am compiling non prolog languages into PrologMUD is to give them such access to these things
22.12.18 00:02:30<aindilis> do you track the different kinds of side effects explicitly - that's a planned feature of IAEC
22.12.18 00:02:40<stoopkid> how does it keep track of how to undo side-effects? is it just queuing up the side-effects to run at the end after something succeeds so it can selectively remove these ?
22.12.18 00:02:50<stoopkid> aindilis: hehe
22.12.18 00:03:28<dmiles> i try to keep side effects into "channels" .. sort of like I/O channels
22.12.18 00:03:38<aindilis> IAEC is basically god mode on program execution
22.12.18 00:03:51<aindilis> function/predicate KBs
22.12.18 00:03:57<aindilis> memoization
22.12.18 00:04:12<aindilis> theorem proving over data structures passed
22.12.18 00:04:54<dmiles> which is why my programs contain so many miniintpertors .. i can free them in one swoop
22.12.18 00:04:57<aindilis> with a view towards synthesis
22.12.18 00:05:08<aindilis> which languages are you interpretting?
22.12.18 00:05:31<dmiles> ussualy some language that is being made up for a one off shot
22.12.18 00:05:37<aindilis> k
22.12.18 00:06:09<dmiles> for exmaple the ansi color annotator that decides how to colorize predicates uniqely
22.12.18 00:06:47<aindilis> so dmiles are these tricks necessary through PrologMUD?  are they in general orthogonal?
22.12.18 00:07:00<aindilis> or do you get unforeseen bahvior
22.12.18 00:07:24<dmiles> to_ansi(e,[bold,fg(yellow)]).
                 <dmiles> to_ansi(ec,[bold,fg(green)]).
                 <dmiles> to_ansi(pl,[bold,fg(cyan)]).
                 <dmiles> to_ansi([H|T],[H|T]).
                 <dmiles> to_ansi(C, [bold,hfg(C)]):- assertion(nonvar(C)), is_color(C),!.
22.12.18 00:07:26<dmiles> to_ansi(H,[H]).
                 <dmiles> is_color(white). is_color(black). is_color(yellow). is_color(cyan). 
                 <dmiles> is_color(blue). is_color(red). is_color(green). is_color(magenta).
22.12.18 00:08:47<dmiles> when i pass terms into to_ansi/2  it comes back in the language that JanW's interpretor understand
22.12.18 00:09:43<dmiles> which is a tiny language that preint ansi directives
22.12.18 00:10:38<dmiles> so in *my* language i onmly need to say  to_ansi(pl,Ansi).
22.12.18 00:10:52<dmiles> or  to_ansi(red,Ansi).
22.12.18 00:11:21<dmiles> and teh return variable Ansi is in JanWs DSL
22.12.18 00:11:36<dmiles> this is how KR works the best
22.12.18 00:11:58<dmiles> in these predicates that make small nibbles at a larger logic
22.12.18 00:12:05<aindilis> wait, where does the income from?  DCGs?
22.12.18 00:12:09<aindilis> *input
22.12.18 00:12:14<aindilis> *input come from?
22.12.18 00:12:48<dmiles> input of that function is used...
22.12.18 00:12:59<aindilis> k
22.12.18 00:13:11<dmiles> pprint_ec_no_newline(C, P):-
                 <dmiles>   print_e_to_string(P, S),
                 <dmiles>   to_ansi(C, C0),
                 <dmiles>   real_ansi_format(C0, '~s', [S]).
22.12.18 00:14:18<dmiles> which i se liek at...
22.12.18 00:14:19<dmiles> assert_ele(option(X,Y)):- set_ec_option(X,Y), maplist(pprint_ecp(yellow),[:- set_ec_option(X,Y)]).
                 <dmiles> assert_ele(xor(XORS)):- conjuncts_to_list(XORS,List),  !, pprint_ecp(red, xor(List)).
22.12.18 00:14:20<dmiles> assert_ele(t(F, W)):- !, maplist(pprint_ecp(yellow),[sort(F),isa(W,F)]).
22.12.18 00:15:03<aindilis> this reminds me of RNA
22.12.18 00:15:55<aindilis> what can you assert about assert_ele/1 as a predicate, say in Eurisko?
22.12.18 00:16:09<aindilis> what properties does it have?
22.12.18 00:16:21<dmiles> many things about that predicate can be asserted and deduced
22.12.18 00:16:40<dmiles> well yes.. i been wantign to create an ontology abotu thes properties
22.12.18 00:16:46<aindilis> yes!
                 <dmiles> i did create one
22.12.18 00:16:51<aindilis> cool
22.12.18 00:17:04<aindilis> that would be useful for introspection
22.12.18 00:17:51<dmiles> [20:42] <PrologMUD> dmiles: % X=rtAvoidForwardChain
22.12.18 00:18:17<dmiles> [20:48] <PrologMUD> dmiles: % X=ttNotTemporalType
                 <dmiles> [20:48] <PrologMUD> dmiles: % X=completelyAssertedCollection
                 <dmiles> [20:48] <PrologMUD> dmiles: % X=tCol
                 <dmiles> [20:48] <PrologMUD> dmiles: % X=pfcControlled
22.12.18 00:18:50<dmiles> things like BackchainForbidden
22.12.18 00:19:02<dmiles> CallOnlyWithGroundTerms
22.12.18 00:19:09<aindilis> cool
22.12.18 00:19:22<aindilis> yeah this kind of easy to access ontology will help people trying to learn about PrologMUD
22.12.18 00:19:27<dmiles> CYC has a completeness and soundness ontolgy for all relations
22.12.18 00:19:45<dmiles> i havent studied the soundness yet
22.12.18 00:20:07<dmiles> but the completeness has been important to decide compilation
22.12.18 00:20:16<aindilis> ah that's how CYC has that option to say with certainty versus most likely
22.12.18 00:20:25<dmiles> yes
22.12.18 00:20:26<aindilis> you told me about multiple layers
22.12.18 00:20:38<aindilis> to the compilation based on completeness
22.12.18 00:21:03<dmiles> well you look for the cheapst path that is complete sometimes
22.12.18 00:21:44<dmiles> we might use    colorOf(foo,red)    instead of  isa(foo,redColor)
22.12.18 00:21:56<dmiles> as isa/2 walks inmto incompleteness
22.12.18 00:22:38<dmiles> colorOf might be incomplete but why it is will be differnt
22.12.18 00:23:23<dmiles> Erisko was indeed the most important developemnt for Cyc
22.12.18 00:23:52<dmiles> since we need to have a good long discusin with our programs about how to make them perform
22.12.18 00:24:54<dmiles> and Erisko was a master at finding cheats and lies
22.12.18 00:25:02<dmiles> (to improve performance)
22.12.18 00:26:36<dmiles> when we track undoing of side effects ( stoopkid asked) is that we compose terms that are like a closure that will undo the side effects when the closure is called
22.12.18 00:27:40<dmiles> with some isntructions in the system ..  you invert the opcode (vm opcodes) and it runs the reverse
22.12.18 00:29:26<dmiles> all sorts of thing are rewrittings for terms// those side effects are easy sicne the term never actualy maters until the end
22.12.18 00:29:43<dmiles> (so you just discard the term)
22.12.18 00:30:02<stoopkid> so you just compose the side-effects together and don't actually run them until the end when you've got all the information about which effects you need to run?
22.12.18 00:30:34<dmiles> the difernce between Marty's adventure code and PrologMUD's orignal code is Marty (the auther) made many side effects a "todo" list
22.12.18 00:30:50<dmiles> that runs at the ends
22.12.18 00:31:24<dmiles> i wanted to do that and did it .. but not *everywhere*
22.12.18 00:32:04<dmiles> in PrologMUD i created an abstraction logic to swap out how that gets done/undone/manages
22.12.18 00:32:35<dmiles> (so i made sure i was agnostic rather than picking the "todo" list)
22.12.18 00:33:05<stoopkid> probably reasonable
22.12.18 00:33:18<dmiles> so i made sure i would conform to what lisp does "UNWIND-STACK"
22.12.18 00:34:20<dmiles> which requires a programmer to be slightly more cautous.. like closing up of open file handles
22.12.18 00:34:58<aindilis> alright well I'm going to work on some random stuff to try to bootstrap my productivity - thanks for sharing this information
22.12.18 00:35:03<dmiles> so if i open a file.. i register "in case somethng goes wrong .." TODO list
22.12.18 00:35:34<stoopkid> yea i gotta head off for the night as well, i'm gonna think some more about your loop_forever tail-recursion optimization though, certainly there's a less "tricky" way to describe that (although i have to admit i enjoy little hacks like this)
22.12.18 00:35:49<stoopkid> good talking with you both, catch ya later
22.12.18 00:35:51<dmiles> (some "todo" lists about what will be changed in the end.. vs some todo lists are how to "undo" lists)
22.12.18 00:35:53<aindilis> cya!
22.12.18 00:36:22<dmiles> nn
22.12.18 00:37:37<dmiles> nmy goal with PAKCS, WAMCL etc is to embue those languages with Undos
22.12.18 00:38:06<aindilis> well speaking of WAMCL I'm interested in applying it to Prolog-Agent
22.12.18 00:38:11<dmiles> to allow programs that have the interpreations of "can" and "must"
22.12.18 00:38:28<dmiles> (and the vm-level)
22.12.18 00:38:34<dmiles> (at the vm level)
22.12.18 00:38:44<aindilis> is that a feature of lisp?
22.12.18 00:39:28<dmiles> nope.. its an unspoken feature of nondeterminsitc execution
22.12.18 00:40:30<dmiles> that we build up non determinsitcially a  deterministic version of what the program *must* do to satify the execution properties
22.12.18 00:41:02<dmiles> we use search to compute the deterministic version of a theory 
22.12.18 00:42:11<dmiles> (that is we create a viable path (can) thru a search tree (proof) and then execture it (must)
22.12.18 00:42:12<dmiles> )
22.12.18 00:43:17<aindilis> I vaguely understand
22.12.18 00:43:32<aindilis> https://en.wikipedia.org/wiki/Powerset_construction
22.12.18 00:44:04<dmiles> we can use those RNA? to make calculating that viable better?
22.12.18 00:44:27<dmiles> type theory i think was about making those paths surely sane
22.12.18 00:44:32<dmiles> was/is
22.12.18 00:45:29<dmiles> yeah it is basically a study of what if you use NFA instead of DFA
22.12.18 00:45:59<dmiles> yeah it is basically a study of what new optimizations are possible in NFA (instead of DFA)
22.12.18 00:46:18<dmiles> like in NFA we use infinate datastructs that DFA cant
22.12.18 00:47:02<dmiles> (even though boith F's in those acronyms mean "finaite
22.12.18 00:47:41<dmiles> NFAs have been generalized in multiple ways, e.g., nondeterministic finite automaton with ε-moves, finite state transducers, pushdown automata, alternating automata, ω-automata, and probabilistic automata. Besides the DFAs, other known special cases of NFAs are unambiguous finite automata (UFA) and self-verifying finite automata (SVFA).
22.12.18 00:49:18<dmiles> i am looking at type theory as hopeful  NFA delarations not simply SVFA 
22.12.18 00:49:45<dmiles> well SVFA is only possible in datalog/prolog
22.12.18 00:50:19<dmiles> "In automata theory, a self-verifying finite automaton (SVFA) is a special kind of a nondeterministic finite automaton (NFA) with a symmetric kind of nondeterminism introduced by Hromkovič and Schnitger.[1] Generally, in self-verifying nondeterminism, each computation path is concluded with any of the three possible answers: yes, no, and I do not know."
22.12.18 00:51:26<dmiles> PrologMUD system uses a 4 valued logic that can return those 3 values
22.12.18 00:52:05<dmiles> the 4th value is "absurd"
22.12.18 00:52:17<aindilis> I was guessing t f unknown undecidable
22.12.18 00:53:09<dmiles> yeah undecidable could actualy be the reason
22.12.18 00:53:32<dmiles> what PrologMUD is create two proofs
22.12.18 00:53:40<aindilis> for and against?
22.12.18 00:53:44<dmiles> yes
22.12.18 00:53:53<dmiles> and then compares the proofs for comonailies
22.12.18 00:54:17<dmiles> and gets to the heart of how the two proofs could exist
22.12.18 00:54:37<dmiles> that is we identify the paradox
22.12.18 00:54:58<aindilis> only in the absurd case?
22.12.18 00:55:19<dmiles> well so far.. that is how to detect 
22.12.18 00:55:42<dmiles> but since both prrofs are not always complete.. they may not lead to all we needed ot know
22.12.18 00:56:48<dmiles> there are always "missing possible axiomitizaions" that arejust as resonable
22.12.18 00:57:34<aindilis> okay well I'm going to work on some menial programming, but it's interesting to get a glimpse as to the RNA
22.12.18 00:57:35<dmiles> so for exmample i give "a proof of yes" based on one set of axioms for "yes"
22.12.18 00:57:46<aindilis> ah
22.12.18 00:58:29<dmiles> i give "a proof of no" based on a more complete set of axioms (tha yes might have ahd)
22.12.18 00:58:53<dmiles> and i might not  see any intesection!
22.12.18 00:59:02<dmiles> intersection
22.12.18 00:59:49<dmiles> it is merely one side needs to axiomitize more in the other sides language
22.12.18 01:00:13<dmiles> so we can see what they disagree about
22.12.18 01:00:30<aindilis> these are subsets of the KB?
22.12.18 01:00:59<dmiles> well that is the right way to handle them.. make these slices subsets of the KB
22.12.18 01:01:26<dmiles> in program construction this might work as well
22.12.18 01:01:53<dmiles> since the goal is to make a sginely proof that pisses no one off
22.12.18 01:02:04<aindilis> ah
22.12.18 01:02:24<dmiles> we cant agree in our types about using Enums or strings
22.12.18 01:03:20<dmiles> so we decide that neighter of us get to chose anymore
22.12.18 01:03:26<aindilis> oh
22.12.18 01:03:38<dmiles> (we take the realivant reasoning we used for it)
22.12.18 01:03:50<aindilis> that's like 2^2^N
22.12.18 01:03:54<dmiles> hehe
22.12.18 01:04:12<dmiles> so very important that we dont miss optimizations!
22.12.18 01:04:22<aindilis> ah
22.12.18 01:04:25<dmiles> 2^2^N though is for DFA
22.12.18 01:05:30<dmiles> it is suspected (NFA mission) we can to hack our way to effectively doing 2^2^N as  N^3
22.12.18 01:05:54<aindilis> nice
22.12.18 01:06:24<dmiles> you know that feelign you get when you see a PDDL planner taking so damn long on such a simple problem
22.12.18 01:06:37<aindilis> yeah
22.12.18 01:06:54<dmiles> you know something is really scewed up and once fixed it wont be that way
22.12.18 01:07:07<aindilis> oh interesting
22.12.18 01:07:18<dmiles> (sort of a gut feeling of mistrust)
22.12.18 01:07:51<dmiles> i been trying to figure out who and what to blame
22.12.18 01:07:52<aindilis> yeah probably a way to characterize the probability of failure
22.12.18 01:08:57<aindilis> will you be on later tonight?
22.12.18 01:08:59<dmiles> i now think it is peopel that belive that certain characteristics much be present in their automa theory
22.12.18 01:09:18<dmiles> (so they dont get ot see what they really could do )
22.12.18 01:09:26<aindilis> yeah
22.12.18 01:09:55<dmiles> yep.. lets get ot work
22.12.18 01:10:10<aindilis> sounds good, thanks again
22.12.18 01:10:12<aindilis> ttys
22.12.18 01:18:39<dmiles> examples is  "probability of failure is not computable or decidable"
22.12.18 01:19:01<dmiles> ( " if this is your first rodeo" ) 
22.12.18 01:19:41<dmiles> where the right solution is forming a theory of failure
22.12.18 01:20:17<dmiles> so that one can bail before  N^2 becomes  N^3
22.12.18 01:21:25<dmiles> everyone that i talk to that thinks they are understanding this stuff are so full of ciches for why they cant do anything
22.12.18 01:22:57<dmiles> they become experts able to prove why they cant
22.12.18 01:23:17<aindilis> I get the same feeling when I told people about AI
22.12.18 01:23:34<aindilis> if they would invest 1/10th the effort in doing it as opposed to opposing it
22.12.18 01:24:13<dmiles> its ios sorry of funn having 99% of the world agreeing with them
22.12.18 01:24:40<aindilis> would you like me to skip playing far cry 5 and work on this instead?
22.12.18 01:24:41<dmiles> or at least some majority that shares an opinion
22.12.18 01:24:53<dmiles> thats what you asre doing.. shame!
22.12.18 01:25:00<dmiles> naw not bad
22.12.18 01:25:10<aindilis> I've been beaten rather badly regarding AI
22.12.18 01:25:21<dmiles> i was goign to watch netflix for an hour until i am so bored i have to code
22.12.18 01:25:27<aindilis> hehe
22.12.18 01:25:33<dmiles> (as meds take an hour to kick in)
22.12.18 01:25:51<aindilis> yeah, it'll be playable in less than a minute
22.12.18 01:26:07<aindilis> I need to figure out a strategy to be productive
22.12.18 01:26:19<aindilis> M says that my "writer's block" is serving a purpose
22.12.18 01:26:43<aindilis> maybe I'm metamorphisizing into a programmer who can understand you
22.12.18 01:26:46<dmiles> yeah it ok to feel blocked .. sooin you will be chomping at the bit to get back to it
22.12.18 01:27:22<dmiles> yeah.. tha tis kind of oddity
22.12.18 01:27:59<aindilis> I'm waiting on some hard drives
22.12.18 01:28:07<aindilis> too burnt by losing 8 hard drives this year
22.12.18 01:28:55<dmiles> there are plenty ideas that if you dont take them on.. no one will
22.12.18 01:29:10<aindilis> yes
22.12.18 01:29:17<aindilis> see pm
22.12.18 02:53:31*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qakppefbmujnfvlz) left #logicmoo: Quit: Connection closed for inactivity
22.12.18 05:04:13*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
22.12.18 05:07:08*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 272 seconds
22.12.18 05:08:02*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
22.12.18 05:12:56*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
22.12.18 05:14:40*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
22.12.18 05:21:15*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
22.12.18 08:02:56*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xqlaavgxnlhdturu, stoopkid: stoopkid)
22.12.18 12:53:48*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
22.12.18 13:36:13*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
22.12.18 15:24:56*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
22.12.18 17:58:54*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
22.12.18 22:50:08<aindilis> CYC hey
22.12.18 22:50:27<aindilis> CYC hey
                 <aindilis> CYC: hey
22.12.18 22:51:02<aindilis> 2018-12-22 22:50:26 <aindilis> CYC: hey
                 <aindilis>  
22.12.18 22:51:05<aindilis> dmiles can you try?
22.12.18 22:51:44<aindilis> cyc: hey
                 <aindilis> cyc: hey
22.12.18 22:52:00<aindilis> 2018-12-22 22:51:43 <aindilis> cyc: hey
                 <aindilis>  
22.12.18 22:52:34<aindilis> cyc: what's up dog
                 <aindilis> cyc: what's up dog
22.12.18 22:52:38<aindilis> 2018-12-22 22:52:33 <aindilis> cyc: what's up dog
                 <aindilis>  
22.12.18 22:53:18<aindilis> cyc: hey
                 <aindilis> cyc: hey
22.12.18 22:53:25<aindilis> there we go
22.12.18 22:54:17<aindilis> cyc: what's up
                 <aindilis> aindilis: what's up
22.12.18 23:05:41<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
22.12.18 23:06:47<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
22.12.18 23:08:35<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
22.12.18 23:08:36<aindilis> aindilis: (((var-X "." "#$Rover-5"))
22.12.18 23:09:42<aindilis> cyc: (all-instances #$Researcher)
22.12.18 23:09:43<aindilis> aindilis: ("#$ArtificialIntelligenceResearcher-2"
22.12.18 23:10:34<aindilis> have to put flooding control in
22.12.18 23:11:58<aindilis> cyc: (all-term-assertions #$DouglasMiles)
22.12.18 23:11:59<aindilis> aindilis: (("#<AS" ("#$isa" "#$DouglasMiles" "#$AIResearcher") ":" "POSICommunityMt" ">")
22.12.18 23:12:26<aindilis> I really need to get SKSI going
22.12.18 23:12:42<aindilis> dmiles: ping
22.12.18 23:13:45<aindilis> cyc: (all-term-assertions #$DouglasMiles)
22.12.18 23:13:54<aindilis> cyc: (all-term-assertions #$DouglasMiles)
22.12.18 23:14:20<aindilis> cyc: (all-term-assertions #$DouglasMiles)
22.12.18 23:15:01<aindilis> cyc: (all-term-assertions #$DouglasMiles)
22.12.18 23:15:25<aindilis> cyc: (all-instances #$Dog)
22.12.18 23:16:07<aindilis> cyc: (all-instances #$Dog)
22.12.18 23:16:09<aindilis> aindilis:
22.12.18 23:16:20<aindilis> cyc: (all-term-assertions #$DouglasMiles)
22.12.18 23:16:23<aindilis> aindilis:
22.12.18 23:16:51<aindilis> cyc: (all-term-assertions #$DouglasMiles)
22.12.18 23:16:56<aindilis> aindilis:
22.12.18 23:17:37<aindilis> cyc: (a '(#$isa #$AndrewDougherty #$ComputerProgrammerProfessional) #$POSICommunityMt)
22.12.18 23:17:40<aindilis> aindilis:
22.12.18 23:19:01<aindilis> cyc: (q '(#$isa ?X #$ComputerProgrammerProfessional) #$POSICommunityMt)
22.12.18 23:19:04<aindilis> aindilis:
22.12.18 23:19:44<aindilis> cyc: (q '(#$usesProgram ?X (#$softwareFn "emacs")) #IRCKBMt)
22.12.18 23:19:47<aindilis> aindilis:
22.12.18 23:20:41<aindilis> cyc: (q '(#$usesProgram ?X (#$softwareFn "emacs")) #$IRCKBMt)
22.12.18 23:20:44<aindilis> aindilis:
22.12.18 23:24:57<aindilis> cyc: (q '(#isa ?X #$Dog) #$BaseKB)
22.12.18 23:26:38<aindilis> cyc: (q '(#isa ?X #$Dog) #$BaseKB)
22.12.18 23:26:40<aindilis> aindilis:
22.12.18 23:27:48<aindilis> cyc: (q '(#isa ?X #$Dog) #$BaseKB)
22.12.18 23:27:51<aindilis> aindilis:
22.12.18 23:29:41<aindilis> cyc: ()
22.12.18 23:29:44<aindilis> aindilis:
22.12.18 23:29:51<aindilis> cyc: (alll-instances #$Dog)
22.12.18 23:29:54<aindilis> aindilis:
22.12.18 23:29:56<aindilis> cyc: (all-instances #$Dog)
22.12.18 23:29:58<aindilis> aindilis:
22.12.18 23:30:11<aindilis> cyc: (q '(#isa ?X #$Dog) #$BaseKB)
22.12.18 23:30:14<aindilis> aindilis:
22.12.18 23:30:37<aindilis> cyc: (q '(#isa ?X #$Dog) #$BaseKB)
22.12.18 23:30:49<aindilis> cyc: (q '(#isa ?X #$Dog) #$BaseKB)
22.12.18 23:30:53<aindilis> aindilis:
22.12.18 23:31:03<aindilis> cyc: (q '(#isa ?X #$Dog) #$BaseKB)
22.12.18 23:31:08<aindilis> aindilis:
22.12.18 23:31:34<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
22.12.18 23:31:39<aindilis> aindilis:
22.12.18 23:32:56<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
22.12.18 23:32:57<aindilis> aindilis:
22.12.18 23:33:13<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
22.12.18 23:33:14<aindilis> aindilis:
22.12.18 23:35:29<aindilis> going to add Free Life Planner next
22.12.18 23:41:10<aindilis> flp: isa(X,room)
22.12.18 23:41:58<aindilis> flp: isa(X,room)
22.12.18 23:43:01<aindilis> flp: isa(X,room)
22.12.18 23:43:34<aindilis> flp: isa(X,room)
22.12.18 23:44:12<aindilis> flp: isa(X,room)
22.12.18 23:44:50<aindilis> flp: isa(X,room)
22.12.18 23:45:40<aindilis> flp: isa(X,room)
22.12.18 23:45:51<aindilis> flp: isa(X,room)
22.12.18 23:48:05<aindilis> flp: isa(X,room)
22.12.18 23:53:46<stoopkid> aindilis: is this a cyc <-> IRC interface?
22.12.18 23:54:00<aindilis> yeah, but flp is my KBS
22.12.18 23:55:50<stoopkid> nice, do you have that on your frdcsa.org/ site ?
22.12.18 23:56:09<aindilis> no, I'm just adding it here for #$logicmoo use 
22.12.18 23:56:17<aindilis> *#logicmoo
22.12.18 23:56:33<stoopkid> ah gotcha
22.12.18 23:56:38<aindilis> so we can build MKM etc here
22.12.18 23:56:45<stoopkid> awesome :)
22.12.18 23:56:49<aindilis> :)
22.12.18 23:57:32<aindilis> also going to add prolog-agent (https://github.com/aindilis/prolog-agent)
22.12.18 23:58:58<stoopkid> do you happen to know any computer algebra systems that work with your tool-chains? i'm learning sympy now but if you know of a CAS more relevant to your current systems i'd be happy to check that out
22.12.18 23:59:20<aindilis> no, I don't except that Vampire works with FreeKBS2
22.12.18 23:59:28<aindilis> and I can implement other backends
22.12.18 23:59:34<aindilis> looking into Sage presently
22.12.18 23:59:53<aindilis> okay I'll add a freekbs2 interface too :)
23.12.18 00:04:41<aindilis> stoopkid: could you type a command, like "cyc: hey"
23.12.18 00:04:55<aindilis> so I can see if it works for you (it should just echo the text)
23.12.18 00:04:58<stoopkid> cyc: yo
23.12.18 00:05:03<stoopkid> cyc: hey
23.12.18 00:05:08<aindilis> no it's not working
23.12.18 00:05:11<aindilis> ty!
23.12.18 00:05:15<stoopkid> sure
23.12.18 00:06:08<aindilis> can you try again plz, just once?
23.12.18 00:06:29<aindilis> stoopkid: 
23.12.18 00:06:39<stoopkid> cyc: hey
                 <aindilis> stoopkid: hey
23.12.18 00:06:43<aindilis> cool
23.12.18 00:06:45<stoopkid> cool :)
23.12.18 00:06:56<aindilis> I have to setup permissions and stuff so it will be awhile before it's usable
23.12.18 00:07:16<aindilis> I have it working for me though so I can debug it
23.12.18 00:07:28<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 00:08:29<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 00:19:39*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
23.12.18 00:21:03*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 00:25:04<aindilis> cyc: (q '(#$isa ?X #$Dog) #$BaseKB)
                 <aindilis> aindilis:
23.12.18 00:25:13<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 00:25:14<aindilis> aindilis:
23.12.18 00:29:00<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 00:29:01<aindilis> aindilis:
23.12.18 00:40:37<aindilis> cyc: (cyc-query '(#$usesProgram ?Person (#$softwareFn "vim")) #$IRCKBMt)
23.12.18 00:41:20<aindilis> cyc: (cyc-query '(#$usesProgram ?Person (#$softwareFn "emacs")) #$IRCKBMt)
23.12.18 00:41:41<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 00:42:05<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 00:42:08<aindilis> aindilis:
23.12.18 00:42:12<aindilis> cyc: (cyc-query '(#$usesProgram ?Person (#$softwareFn "vim")) #$IRCKBMt)
23.12.18 00:42:13<aindilis> aindilis:
23.12.18 00:45:33<aindilis> cyc: (cyc-query '(#$and (#$usesProgram ?Person (#$softwareFn "vim")) (#$usesProgram ?Person (#$softwareFn "emacs"))) #$IRCKBMt)
23.12.18 00:45:34<aindilis> aindilis:
23.12.18 01:05:00<aindilis> cyc: (cap "FiniteModel")
23.12.18 01:05:35<aindilis> cyc: (cyc-query '(#$isa ?Dog #$Dog) #$BaseKB)
23.12.18 01:06:14<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 01:06:28<aindilis> cyc: (cap "FiniteModel")
23.12.18 01:06:29<aindilis> aindilis:
23.12.18 01:06:34<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 01:06:35<aindilis> aindilis:
23.12.18 01:07:16<aindilis> cyc: (constant-apropos "FiniteModel")
23.12.18 01:07:17<aindilis> aindilis:
23.12.18 01:07:37<aindilis> cyc: (ca "FiniteModel")
23.12.18 01:07:38<aindilis> aindilis:
23.12.18 01:08:52<aindilis> cyc: (apropos "CycSecure")
23.12.18 01:08:53<aindilis> aindilis:
23.12.18 01:10:14<dmiles> awesoem you are working on gwetting it to work?
23.12.18 01:10:21<aindilis> yeah
23.12.18 01:10:26<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 01:10:27<aindilis> aindilis:
23.12.18 01:10:31<dmiles> btw here on irc it does echo back
23.12.18 01:10:32<aindilis> it's a bit wonky at present
23.12.18 01:10:57<dmiles> so we only see that Cyc is saying your name but nothing floows your name
23.12.18 01:11:16<aindilis> hrm
23.12.18 01:11:22<dmiles> perhaps there is a newline breaking appart what the irc server send sees
23.12.18 01:11:26<aindilis> yeah
23.12.18 01:11:35<aindilis> sorry I didn't realize that, I will fix that
23.12.18 01:11:40<aindilis> but not now
23.12.18 01:11:54<aindilis> I'm done working on it for now, it's been a bit of a pain
23.12.18 01:11:59<aindilis> I'll return to it later
23.12.18 01:12:03<aindilis> (((var-X "." "#$Rover-5"))
                 <aindilis> ((var-X "." "#$ThePrototypicalDog"))
                 <aindilis> ((var-X "#$GenericInstanceFn" "#$Dog")))
23.12.18 01:12:07<aindilis> tha'ts what it looks like to me
23.12.18 01:12:32<aindilis> what are you up to?
23.12.18 01:12:34<dmiles> yeah that would mad eit more awesome here
23.12.18 01:12:39<aindilis> okay I'll fix it
23.12.18 01:12:42<aindilis> one sec
23.12.18 01:14:01<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 01:14:02<aindilis> (((var-X "." "#$Rover-5"))
23.12.18 01:14:42<aindilis> I take it you only see the first answer
23.12.18 01:14:53<dmiles> yep first answer now
23.12.18 01:15:02<dmiles> "[22:14] <aindilis> (((var-X "." "#$Rover-5"))"
23.12.18 01:17:07<aindilis> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 01:17:08<aindilis> (
                 <aindilis> ((var-X "." "#$Rover-5"))
                 <aindilis> ((var-X "." "#$ThePrototypicalDog"))
23.12.18 01:17:11<aindilis> ((var-X "#$GenericInstanceFn" "#$Dog"))
23.12.18 01:17:13<aindilis> )
23.12.18 01:18:19<aindilis> cyc: (constant-apropos "AndrewDougherty")
23.12.18 01:18:20<aindilis> (
                 <aindilis> "#$AndrewDougherty"
                 <aindilis> "#$AndrewDoughertyTrainsCalebWalshDuringFirstSessionOfFourthDayOfThirdWeek"
23.12.18 01:18:23<aindilis> "#$AndrewDoughertysDiagnosedAspergersSyndrome"
23.12.18 01:18:27<aindilis> )
23.12.18 01:19:07<dmiles> oh aweswom!
23.12.18 01:19:11<dmiles> cyc: (generate-phrase (cdar (second  (cyc-query '(#$isa ?X #$Dog) #$BaseKB))))))
                 <aindilis> dmiles: (generate-phrase (cdar (second  (cyc-query
23.12.18 01:19:28<aindilis> interesting
23.12.18 01:19:40<aindilis> one liners for now I guess
23.12.18 01:19:45<dmiles> cyc: (+ 1 1)
                 <aindilis> dmiles: (+ 1 1)
23.12.18 01:19:56<aindilis> here I'll enable you, one sec - careful what you type
23.12.18 01:20:06<dmiles> wil be carefull
23.12.18 01:20:31<dmiles> cyc: (+ 1 1)
23.12.18 01:20:47<dmiles> cyc: (list (+ 1 1))
23.12.18 01:21:24<dmiles> cyc: (cyc-query '(#$usesProgram ?Person (#$softwareFn "vim")) #$IRCKBMt)
23.12.18 01:21:43<dmiles> cyc: (cyc-query '(#$isa ?X #$Dog) #$BaseKB)
23.12.18 01:21:44*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 01:24:19*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 01:24:21<aindilis> hey
23.12.18 01:24:23<aindilis> srry about that
23.12.18 01:24:32<aindilis> the commands clogged my system and I couldn't respond
23.12.18 01:24:37<dmiles> :)
23.12.18 01:24:49<aindilis> so I set it to only log into #logicmoo for now
23.12.18 01:25:00<aindilis> try (+ 1 1) and wait until further notice please
23.12.18 01:25:12<dmiles> cyc: (+ 1 1)
23.12.18 01:25:35*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
23.12.18 01:26:00*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 01:26:03<aindilis> and again
23.12.18 01:26:42<aindilis> try again
23.12.18 01:27:15<aindilis> dmiles
23.12.18 01:27:33<dmiles> cyc: (+ 1 1)
23.12.18 01:27:56*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
23.12.18 01:28:25*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 01:28:40<dmiles> cyc: (+ 1 1)
23.12.18 01:28:57*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
23.12.18 01:29:31<dmiles> cyc: (+ 1 1)
23.12.18 01:29:39<dmiles> oops too soon "{
23.12.18 01:30:43*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 01:31:31<dmiles> cyc: (+ 1 1)
23.12.18 01:33:48<dmiles> on 1:JOIN:#logicmoo:/msg $chan Welcome $nick 
23.12.18 01:34:13<dmiles> on 1:JOIN:#logicmoo:/msg $chan cyc: (+ 1 1)
23.12.18 01:34:17<dmiles> oops :)
23.12.18 01:35:10<aindilis> well I'll debug it
23.12.18 01:35:14<aindilis> I'll log in with another user on a different channel and debug it
23.12.18 01:35:17<aindilis> not now though
23.12.18 01:35:24<aindilis> cy: (cyc-query '(#$and (#$equals ?Y #$Dog) (#$isa ?X ?Y)) #$BaseKB)
23.12.18 01:35:25<dmiles> u am pretty excited
23.12.18 01:35:27<aindilis> cyc: (cyc-query '(#$and (#$equals ?Y #$Dog) (#$isa ?X ?Y)) #$BaseKB)
23.12.18 01:35:33<aindilis> cyc: (cyc-query '(#$and (#$equals ?Y #$Dog) (#$isa ?X ?Y)) #$BaseKB)
23.12.18 01:35:37<aindilis> (
23.12.18 01:35:40<aindilis> ((var-Y "." "#$Dog") (var-X "#$GenericInstanceFn" "#$Dog"))
                 <aindilis> ((var-Y "." "#$Dog") (var-X "." "#$ThePrototypicalDog"))
23.12.18 01:35:44<aindilis> ((var-Y "." "#$Dog") (var-X "." "#$Rover-5"))
23.12.18 01:35:47<dmiles> here a query for you  (generate-phrase (cdar (third (cyc-query '(#$isa ?X #$Dog) #$BaseKB)))))
                 <aindilis> )
23.12.18 01:35:50<aindilis> so your missing the second var I take it?
23.12.18 01:36:01<aindilis> mismatched parens
23.12.18 01:36:07<aindilis> cyc: (generate-phrase (cdar (third (cyc-query '(#$isa ?X #$Dog) #$BaseKB))))
23.12.18 01:36:35<aindilis> cyc: (generate-phrase #$Dog)
23.12.18 01:36:52<aindilis> cyc: (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher))
23.12.18 01:36:57<dmiles> this returns  asingle string but has "multiple value rreutn
23.12.18 01:37:06<aindilis> yeah not working at present
23.12.18 01:37:12<dmiles> nothing is being sent back to irc brtw
23.12.18 01:37:14<aindilis> the perl API which wrpas java
23.12.18 01:37:18<aindilis> isn't complete
23.12.18 01:37:24<aindilis> which is used by the emacs client
23.12.18 01:37:35<aindilis> cyc: (cyc-query '(#$and (#$equals ?Y #$Dog) (#$isa ?X ?Y)) #$BaseKB)
23.12.18 01:37:36<aindilis> (
                 <aindilis> ((var-Y "." "#$Dog") (var-X "#$GenericInstanceFn" "#$Dog"))
                 <aindilis> ((var-Y "." "#$Dog") (var-X "." "#$ThePrototypicalDog"))
23.12.18 01:37:39<aindilis> ((var-Y "." "#$Dog") (var-X "." "#$Rover-5"))
23.12.18 01:37:41<aindilis> )
23.12.18 01:37:46<dmiles> that worked though
23.12.18 01:37:48<aindilis> do you see #$GenericInstanceFn ?
23.12.18 01:37:59<aindilis> I think I know why
23.12.18 01:38:05<dmiles> yeah they are comming back as strings
23.12.18 01:38:18<aindilis> let me change something
23.12.18 01:39:03<aindilis> cyc: (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher))
                 <aindilis> (
                 <aindilis> Andrew Dougherty is AI researcher
                 <aindilis> )
23.12.18 01:39:04<dmiles> awesome!
23.12.18 01:39:20<aindilis> it's cause it needs to double iterate on the first kind of query, but only single iterate on the second
23.12.18 01:39:28<aindilis> I can put it in a test
23.12.18 01:39:54<dmiles> try cyc: (generate-phrase (cdar (third (cyc-query '(#$isa ?X #$Dog) #$BaseKB))))
23.12.18 01:40:03<aindilis> one sec
23.12.18 01:40:04<dmiles> (so we can see it)
23.12.18 01:40:11<dmiles> kk
23.12.18 01:40:45<aindilis> cyc: (cyc-query '(#$and (#$equals ?Y #$Dog) (#$isa ?X ?Y)) #$BaseKB)
23.12.18 01:40:46<aindilis> (
                 <aindilis> ((var-Y "." "#$Dog") (var-X "#$GenericInstanceFn" "#$Dog"))
                 <aindilis> ((var-Y "." "#$Dog") (var-X "." "#$ThePrototypicalDog"))
23.12.18 01:40:49<aindilis> ((var-Y "." "#$Dog") (var-X "." "#$Rover-5"))
23.12.18 01:40:53<aindilis> )
23.12.18 01:41:07<dmiles> that was visible here
23.12.18 01:41:15<aindilis> cyc: (cyc-query '(#$and (#$equals ?Y #$Dog) (#$isa ?X ?Y)) #$BaseKB)
23.12.18 01:41:16<aindilis> (
                 <aindilis> ((var-Y "." "#$Dog") (var-X "#$GenericInstanceFn" "#$Dog"))
                 <aindilis> ((var-Y "." "#$Dog") (var-X "." "#$ThePrototypicalDog"))
23.12.18 01:41:19<aindilis> ((var-Y "." "#$Dog") (var-X "." "#$Rover-5"))
23.12.18 01:41:23<aindilis> )
23.12.18 01:41:24<aindilis> cyc: (generate-phrase (cdar (third (cyc-query '(#$isa ?X #$Dog) #$BaseKB))))
23.12.18 01:41:28<aindilis> (
23.12.18 01:41:45<dmiles> didnt come all the way thru
23.12.18 01:42:05<aindilis> cyc: (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher))
23.12.18 01:42:06<aindilis> (
23.12.18 01:42:20<dmiles> try  cyc: "I am a string"
23.12.18 01:42:29<aindilis> cyc: "I am a string"
23.12.18 01:42:30<aindilis> (
                 <aindilis> )
23.12.18 01:42:37<dmiles> hrrm missing
23.12.18 01:42:45<aindilis> cyc: "I am a string"
23.12.18 01:42:46<aindilis> (
                 <aindilis> )
23.12.18 01:42:48<dmiles> the parens showed up at least
23.12.18 01:43:05<dmiles> cyc: "\"I am a string\""
23.12.18 01:43:12<dmiles> perhaps
23.12.18 01:43:55<dmiles> once i know to get a string show up i can always make it preformat in mactoas to be whatever the cleint needs
23.12.18 01:44:06<dmiles> in macros
23.12.18 01:55:13<aindilis> cyc: (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher))
23.12.18 01:55:14<aindilis> (
                 <aindilis> "Andrew Dougherty is AI researcher"
23.12.18 01:55:17<aindilis> )
23.12.18 01:55:20<aindilis> cyc: "I am a string"
23.12.18 01:55:21<aindilis> (
23.12.18 01:55:24<aindilis> )
23.12.18 01:55:34<aindilis> cyc: (generate-phrase (cdar (third (cyc-query '(#$isa ?X #$Dog) #$BaseKB))))
23.12.18 01:55:35<aindilis> (
                 <aindilis> "a typical dog"
                 <aindilis> )
23.12.18 01:55:46<aindilis> cyc: (cyc-query '(#$and (#$equals ?Y #$Dog) (#$isa ?X ?Y)) #$BaseKB)
23.12.18 01:55:47<aindilis> (
23.12.18 01:55:50<aindilis> ((var-Y "." "#$Dog") (var-X "#$GenericInstanceFn" "#$Dog"))
                 <aindilis> ((var-Y "." "#$Dog") (var-X "." "#$ThePrototypicalDog"))
23.12.18 01:55:53<aindilis> ((var-Y "." "#$Dog") (var-X "." "#$Rover-5"))
23.12.18 01:55:56<aindilis> )
23.12.18 01:56:06<dmiles> so far everyting worked execept for "I am a string"
23.12.18 01:56:09<aindilis> okay the "I am a string" needs a fix at the base of perl
23.12.18 01:56:18<aindilis> *Perl API
23.12.18 01:56:23<dmiles> how about cyc: 1
23.12.18 01:56:27<aindilis> won't work
23.12.18 01:56:31<aindilis> cyc: 1
                 <aindilis> (
23.12.18 01:56:32<aindilis> )
23.12.18 01:56:34<dmiles> (list 1)
23.12.18 01:56:38<aindilis> yes that will work
23.12.18 01:56:41<aindilis> cyc: (list 1)
                 <aindilis> (
23.12.18 01:56:44<aindilis> "1"
23.12.18 01:56:48<aindilis> )
23.12.18 01:56:57<aindilis> cyc: (list t)
23.12.18 01:56:58<aindilis> (
                 <aindilis> "T"
                 <aindilis> )
23.12.18 01:57:01<aindilis> cyc: (list nil)
23.12.18 01:57:05<aindilis> (
23.12.18 01:57:08<aindilis> "NIL"
23.12.18 01:57:11<aindilis> )
23.12.18 01:57:41<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "emacs")) #$BaseKB)
23.12.18 01:57:42<aindilis> (
                 <aindilis> 78
23.12.18 01:57:45<aindilis> 73
23.12.18 01:57:48<aindilis> 76
23.12.18 01:57:52<aindilis> )
23.12.18 01:58:31<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "emacs")) #$IRCKBMt)
23.12.18 01:58:32<aindilis> (
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "gargantua"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "aurelien"))
23.12.18 01:58:34<aindilis> ((var-Y "#$personHavingIRCAliasFn" "mannen"))
23.12.18 01:58:37<aindilis> ((var-Y "#$personHavingIRCAliasFn" "insomniaSalt"))
23.12.18 01:58:41<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ealfonso"))
23.12.18 01:58:42<aindilis> ((var-Y "#$personHavingIRCAliasFn" "krux02__"))
23.12.18 01:58:45<aindilis> ((var-Y "#$personHavingIRCAliasFn" "Misha_B"))
23.12.18 01:58:49<aindilis> ((var-Y "#$personHavingIRCAliasFn" "azzamsa"))
23.12.18 01:58:53<aindilis> ((var-Y "#$personHavingIRCAliasFn" "pjb"))
23.12.18 01:58:54<aindilis> ((var-Y "#$personHavingIRCAliasFn" "AlexDaniel"))
23.12.18 01:58:58<aindilis> ((var-Y "#$personHavingIRCAliasFn" "davr0s"))
23.12.18 01:59:03<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ZombieChicken"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "caoliver"))
23.12.18 01:59:07<aindilis> ((var-Y "#$personHavingIRCAliasFn" "codingquark"))
23.12.18 01:59:11<aindilis> ((var-Y "#$personHavingIRCAliasFn" "aindilis"))
23.12.18 01:59:12<aindilis> ((var-Y "#$personHavingIRCAliasFn" "trafaret1"))
23.12.18 01:59:20<aindilis> ((var-Y "#$personHavingIRCAliasFn" "jlunzer"))
23.12.18 01:59:21<aindilis> ((var-Y "#$personHavingIRCAliasFn" "_death"))
23.12.18 01:59:24<aindilis> ((var-Y "#$personHavingIRCAliasFn" "GibbsEnergy"))
23.12.18 01:59:28<aindilis> ((var-Y "#$personHavingIRCAliasFn" "myrkraverk"))
23.12.18 01:59:32<aindilis> ((var-Y "#$personHavingIRCAliasFn" "bremner"))
23.12.18 01:59:34<aindilis> ((var-Y "#$personHavingIRCAliasFn" "nxtlvl"))
23.12.18 01:59:37<aindilis> ((var-Y "#$personHavingIRCAliasFn" "phoe"))
23.12.18 01:59:42<aindilis> ((var-Y "#$personHavingIRCAliasFn" "VG234"))
23.12.18 01:59:45<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ldlework"))
23.12.18 01:59:49<aindilis> ((var-Y "#$personHavingIRCAliasFn" "cjbayliss"))
23.12.18 01:59:52<aindilis> ((var-Y "#$personHavingIRCAliasFn" "adam_erc"))
23.12.18 01:59:55<aindilis> ((var-Y "#$personHavingIRCAliasFn" "python476"))
23.12.18 01:59:59<aindilis> ((var-Y "#$personHavingIRCAliasFn" "jnj"))
23.12.18 02:00:01<aindilis> ((var-Y "#$personHavingIRCAliasFn" "dustfinger"))
23.12.18 02:00:07<aindilis> ((var-Y "#$personHavingIRCAliasFn" "atw"))
23.12.18 02:00:11<aindilis> )
23.12.18 02:00:14<aindilis> was that instant or very slow?
23.12.18 02:00:17<aindilis> cause my TTS probably screwed it up
23.12.18 02:00:51<dmiles> it was throttled by server it seemed
23.12.18 02:01:12<dmiles> sicne first fw lines fast and then wenrt slow
23.12.18 02:01:15<aindilis> ok, I'm going to disable my TTS
23.12.18 02:01:49<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "vim")) #$IRCKBMt)
23.12.18 02:02:08<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "vim")) #$IRCKBMt)
23.12.18 02:02:10<aindilis> (
                 <aindilis> "connected"
                 <aindilis> )
23.12.18 02:02:16<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "vim")) #$IRCKBMt)
23.12.18 02:02:20<aindilis> (
23.12.18 02:02:22<aindilis> ((var-Y "#$personHavingIRCAliasFn" "netkam2"))
23.12.18 02:02:23<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ignatiz-"))
23.12.18 02:02:26<aindilis> ((var-Y "#$personHavingIRCAliasFn" "El_Che"))
23.12.18 02:02:29<aindilis> ((var-Y "#$personHavingIRCAliasFn" "forcer"))
23.12.18 02:02:33<aindilis> ((var-Y "#$personHavingIRCAliasFn" "no_gravity"))
23.12.18 02:02:36<aindilis> ((var-Y "#$personHavingIRCAliasFn" "minty-hime"))
23.12.18 02:02:39<aindilis> ((var-Y "#$personHavingIRCAliasFn" "kenzo"))
23.12.18 02:02:41<aindilis> ((var-Y "#$personHavingIRCAliasFn" "rmallah"))
23.12.18 02:02:47<aindilis> ((var-Y "#$personHavingIRCAliasFn" "jaziz"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "eyeoh"))
23.12.18 02:02:50<aindilis> ((var-Y "#$personHavingIRCAliasFn" "sdk"))
23.12.18 02:02:52<dmiles> see bnow it throttled
23.12.18 02:02:53<aindilis> ((var-Y "#$personHavingIRCAliasFn" "sanpei"))
23.12.18 02:02:57<aindilis> ((var-Y "#$personHavingIRCAliasFn" "mfiano"))
23.12.18 02:02:59<aindilis> ((var-Y "#$personHavingIRCAliasFn" "benjikun"))
23.12.18 02:03:03<aindilis> ((var-Y "#$personHavingIRCAliasFn" "fotonzade"))
23.12.18 02:03:06<aindilis> ((var-Y "#$personHavingIRCAliasFn" "krobzaur"))
23.12.18 02:03:09<aindilis> )
23.12.18 02:03:11<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "emacs")) #$IRCKBMt)
23.12.18 02:03:16<aindilis> (
23.12.18 02:03:17<dmiles>  server senq limit
23.12.18 02:03:19<aindilis> ((var-Y "#$personHavingIRCAliasFn" "gargantua"))
23.12.18 02:03:22<aindilis> ((var-Y "#$personHavingIRCAliasFn" "aurelien"))
23.12.18 02:03:25<aindilis> ((var-Y "#$personHavingIRCAliasFn" "mannen"))
23.12.18 02:03:28<aindilis> ((var-Y "#$personHavingIRCAliasFn" "insomniaSalt"))
23.12.18 02:03:31<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ealfonso"))
23.12.18 02:03:35<aindilis> ((var-Y "#$personHavingIRCAliasFn" "krux02__"))
23.12.18 02:03:38<aindilis> ((var-Y "#$personHavingIRCAliasFn" "Misha_B"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "azzamsa"))
23.12.18 02:03:41<aindilis> ((var-Y "#$personHavingIRCAliasFn" "pjb"))
23.12.18 02:03:46<aindilis> ((var-Y "#$personHavingIRCAliasFn" "AlexDaniel"))
23.12.18 02:03:49<aindilis> ((var-Y "#$personHavingIRCAliasFn" "davr0s"))
23.12.18 02:03:52<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ZombieChicken"))
23.12.18 02:03:55<aindilis> ((var-Y "#$personHavingIRCAliasFn" "caoliver"))
23.12.18 02:03:59<aindilis> ((var-Y "#$personHavingIRCAliasFn" "codingquark"))
23.12.18 02:04:02<aindilis> ((var-Y "#$personHavingIRCAliasFn" "aindilis"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "trafaret1"))
23.12.18 02:04:05<aindilis> ((var-Y "#$personHavingIRCAliasFn" "jlunzer"))
23.12.18 02:04:08<aindilis> ((var-Y "#$personHavingIRCAliasFn" "_death"))
23.12.18 02:04:11<aindilis> ((var-Y "#$personHavingIRCAliasFn" "GibbsEnergy"))
23.12.18 02:04:15<aindilis> ((var-Y "#$personHavingIRCAliasFn" "myrkraverk"))
23.12.18 02:04:18<aindilis> ((var-Y "#$personHavingIRCAliasFn" "bremner"))
23.12.18 02:04:21<aindilis> ((var-Y "#$personHavingIRCAliasFn" "nxtlvl"))
23.12.18 02:04:24<aindilis> ((var-Y "#$personHavingIRCAliasFn" "phoe"))
23.12.18 02:04:26<aindilis> ((var-Y "#$personHavingIRCAliasFn" "VG234"))
23.12.18 02:04:29<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ldlework"))
23.12.18 02:04:32<aindilis> ((var-Y "#$personHavingIRCAliasFn" "cjbayliss"))
23.12.18 02:04:36<aindilis> ((var-Y "#$personHavingIRCAliasFn" "adam_erc"))
23.12.18 02:04:39<aindilis> ((var-Y "#$personHavingIRCAliasFn" "python476"))
23.12.18 02:04:41<aindilis> ((var-Y "#$personHavingIRCAliasFn" "jnj"))
23.12.18 02:04:44<aindilis> ((var-Y "#$personHavingIRCAliasFn" "dustfinger"))
23.12.18 02:04:47<aindilis> ((var-Y "#$personHavingIRCAliasFn" "atw"))
23.12.18 02:04:50<aindilis> )
23.12.18 02:04:54<aindilis> yeah it was my tts
23.12.18 02:04:57<aindilis> are you there?
23.12.18 02:05:04<aindilis> or is it still entering
23.12.18 02:05:10<aindilis> It worked for me instantly, how about you?
23.12.18 02:05:11<aindilis> ah okay, have to figure out what that is and set max results
23.12.18 02:05:17<aindilis> what did you use in cycmoo?
23.12.18 02:05:20<aindilis> are you seeing this yes or now
23.12.18 02:05:26<aindilis> *no
23.12.18 02:05:29<aindilis> dmiles
23.12.18 02:05:39<dmiles> it completed 
                 <aindilis> ping
23.12.18 02:05:51<dmiles> oops i have to be ready
23.12.18 02:05:55<aindilis> k
23.12.18 02:05:56<aindilis> see you!
23.12.18 02:05:57<dmiles> pong
23.12.18 02:06:12<aindilis> ready for what?
23.12.18 02:06:19<aindilis> are you saying you have to go?
23.12.18 02:06:33<dmiles> i mean i need my keyboard to have it buffered so when i see it i can press enter
23.12.18 02:06:54<aindilis> any more queries you would like to run?
23.12.18 02:07:04<aindilis> cyc: (list "i am a string")
23.12.18 02:07:05<aindilis> (
                 <aindilis> "i am a string"
                 <aindilis> )
23.12.18 02:07:21<aindilis> I can drop those outer parens as implied
23.12.18 02:07:22<dmiles> i was saying you bypassed the server SENDQ limit and it was making things harder to see what they shoyudl come baclk
23.12.18 02:07:30<aindilis> ah
23.12.18 02:07:41<dmiles> the server does nto throttle the first 10 lines
23.12.18 02:07:49<dmiles> then avter that on average one second per line
23.12.18 02:08:35<dmiles> yet you want know
23.12.18 02:08:47<dmiles> also the return feedback is throttled on a difernt timeline
23.12.18 02:08:53<dmiles> stil the same linmts
23.12.18 02:08:56<aindilis> so what's the lisp command to truncate a list?
23.12.18 02:09:15<dmiles> from a start to end?
23.12.18 02:09:23<aindilis> (list a b c) (truncate list 2) (a b)
23.12.18 02:09:29<aindilis> (truncate list 0 2)
23.12.18 02:09:44<dmiles> :)
23.12.18 02:09:53<aindilis> I am asking
23.12.18 02:10:07<dmiles> .. cheacking what it is in Cyc right now
23.12.18 02:10:13<aindilis> I found one
23.12.18 02:10:47<dmiles> right on
23.12.18 02:10:52<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "emacs")) #$IRCKBMt)
23.12.18 02:10:53<aindilis> ((var-Y "#$personHavingIRCAliasFn" "gargantua"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "aurelien"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "mannen"))
23.12.18 02:10:56<aindilis> ((var-Y "#$personHavingIRCAliasFn" "insomniaSalt"))
23.12.18 02:10:59<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ealfonso"))
23.12.18 02:11:03<aindilis> ((var-Y "#$personHavingIRCAliasFn" "krux02__"))
23.12.18 02:11:06<aindilis> ((var-Y "#$personHavingIRCAliasFn" "Misha_B"))
23.12.18 02:11:09<aindilis> ((var-Y "#$personHavingIRCAliasFn" "azzamsa"))
23.12.18 02:11:11<aindilis> ((var-Y "#$personHavingIRCAliasFn" "pjb"))
23.12.18 02:11:14<aindilis> ((var-Y "#$personHavingIRCAliasFn" "AlexDaniel"))
                 <dmiles> yep outer parans are gone
23.12.18 02:11:17<aindilis> ((var-Y "#$personHavingIRCAliasFn" "davr0s"))
23.12.18 02:13:21<dmiles> (ca "FiniteModel")
23.12.18 02:13:36<dmiles> all-term-assertions #$DouglasMiles)
23.12.18 02:13:47<dmiles> (all-instances #$AIResearcher)
23.12.18 02:13:55<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "emacs")) #$IRCKBMt)
23.12.18 02:14:18<aindilis> cyc: (q '(#$usesProgram ?Y (#$softwareFn "emacs")) #$IRCKBMt)
23.12.18 02:14:19<aindilis> ((var-Y "#$personHavingIRCAliasFn" "gargantua"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "aurelien"))
                 <aindilis> ((var-Y "#$personHavingIRCAliasFn" "mannen"))
23.12.18 02:14:22<aindilis> ((var-Y "#$personHavingIRCAliasFn" "insomniaSalt"))
23.12.18 02:14:25<aindilis> ((var-Y "#$personHavingIRCAliasFn" "ealfonso"))
23.12.18 02:14:28<aindilis> ((var-Y "#$personHavingIRCAliasFn" "krux02__"))
23.12.18 02:14:32<aindilis> ((var-Y "#$personHavingIRCAliasFn" "Misha_B"))
23.12.18 02:14:35<aindilis> ((var-Y "#$personHavingIRCAliasFn" "azzamsa"))
23.12.18 02:14:38<aindilis> ((var-Y "#$personHavingIRCAliasFn" "pjb"))
23.12.18 02:14:40<aindilis> ((var-Y "#$personHavingIRCAliasFn" "AlexDaniel"))
23.12.18 02:14:45<aindilis> ...
23.12.18 02:14:46<aindilis> (ca "FiniteModel")
23.12.18 02:14:50<aindilis> cyc; (ca "FiniteModel")
23.12.18 02:14:52<aindilis> cyc: (ca "FiniteModel")
23.12.18 02:14:58<aindilis> 78
23.12.18 02:15:02<aindilis> 73
23.12.18 02:15:05<aindilis> 76
23.12.18 02:15:08<aindilis> cyc: (list (ca "FiniteModel"))
23.12.18 02:15:11<dmiles> it printed "78"
                 <aindilis> "NIL"
23.12.18 02:15:14<aindilis> cyc: (list (cap "FiniteModel"))
23.12.18 02:15:17<aindilis> "NIL"
23.12.18 02:15:21<aindilis> cyc: (list (constant-apropos "FiniteModel"))
23.12.18 02:15:23<aindilis> ("#$MKMCreatingAnInfiniteModel")
23.12.18 02:15:27<aindilis> cyc: (all-term-assertions #$DouglasMiles)
23.12.18 02:15:30<aindilis> ("#<AS" ("#$isa" "#$DouglasMiles" "#$AIResearcher") ":" "POSICommunityMt" ">")
23.12.18 02:15:33<aindilis> ("#<AS" ("#$isa" "#$DouglasMiles" "#$ComputerProgrammerProfessional") ":" "POSICommunityMt" ">")
23.12.18 02:15:36<aindilis> ("#<AS" ("#$isa" "#$DouglasMiles" "#$FRDCSACollaborator") ":" "POSICommunityMt" ">")
23.12.18 02:15:40<aindilis> ("#<AS" ("#$hasBeenInvitedToLikeFRDCSAFacebookPage" "#$DouglasMiles") ":" "POSICommunityMt" ">")
23.12.18 02:15:44<aindilis> ("#<AS" ("#$likedFRDCSAFacebookPage" "#$DouglasMiles") ":" "POSICommunityMt" ">")
23.12.18 02:15:47<aindilis> ("#<AS" ("#$collaborators" "#$AndrewDougherty" "#$DouglasMiles") ":" "POSICommunityMt" ">")
23.12.18 02:16:15<aindilis> cyc: (all-instances #$AIResearcher #$EverythingPSC)
23.12.18 02:16:16<aindilis> "#$AndrewDougherty"
                 <aindilis> "#$DouglasMiles"
                 <aindilis> "#$EricNichols"
23.12.18 02:16:19<aindilis> "#$AdamPease"
23.12.18 02:16:23<aindilis> "#$SimonColton"
23.12.18 02:16:26<aindilis> "#$ManuKonchady"
23.12.18 02:16:47<aindilis> cyc: (generate-phrase (all-instances #$AIResearcher #$EverythingPSC))
23.12.18 02:17:08<aindilis> cyc: (all-instances #$AIResearcher #$EverythingPSC)
23.12.18 02:17:11<aindilis> "#$AndrewDougherty"
                 <aindilis> "#$DouglasMiles"
                 <aindilis> "#$EricNichols"
23.12.18 02:17:14<aindilis> "#$AdamPease"
23.12.18 02:17:20<aindilis> "#$SimonColton"
23.12.18 02:17:23<aindilis> "#$ManuKonchady"
                 <aindilis> cyc: (generate-phrase (all-instances #$AIResearcher #$EverythingPSC))
23.12.18 02:17:32<aindilis> cyc: (all-instances #$AIResearcher #$EverythingPSC)
23.12.18 02:17:46<aindilis> cyc: (all-instances #$Dog #$EverythingPSC)
23.12.18 02:17:48<aindilis> "connected"
23.12.18 02:17:52<aindilis> cyc: (all-instances #$Dog #$EverythingPSC)
23.12.18 02:17:53<aindilis> "#$Snoopy"
                 <aindilis> "#$ScoobyDoo-FictionalCharacter"
                 <aindilis> "#$Muffet"
23.12.18 02:17:56<aindilis> "#$HYP-JuvenileFnDog-27104220"
23.12.18 02:17:59<aindilis> "#$HYP-JuvenileFnDog-59300253"
23.12.18 02:18:02<aindilis> "#$HYP-JuvenileFnDog-4981756"
23.12.18 02:18:05<aindilis> ("#<" ("#$GenericInstanceFn" "#$Dog") ">")
23.12.18 02:18:09<aindilis> "#$Dash-VictoriasPet"
23.12.18 02:18:11<aindilis> "#$HYP-Dog-5968235"
23.12.18 02:18:14<aindilis> "#$ThePrototypicalDog"
23.12.18 02:18:17<aindilis> ...
23.12.18 02:18:31<dmiles> (mapcar #'generate-phrase (all-instances #$Dog #$EverythingPSC))
23.12.18 02:18:53<aindilis> cyc: (mapcar #'generate-phrase (all-instances #$Dog #$EverythingPSC))
23.12.18 02:18:54<aindilis> "Snoopy"
                 <aindilis> "Scooby-Doo"
                 <aindilis> "Muffet"
23.12.18 02:18:57<aindilis> "a Kissing's puppy"
23.12.18 02:19:01<aindilis> "a Kissing's puppy"
23.12.18 02:19:04<aindilis> "a Kissing's puppy"
23.12.18 02:19:08<aindilis> "a typical dog"
                 <aindilis> "Dash "
23.12.18 02:19:11<aindilis> "a Holding An Object's dog"
23.12.18 02:19:14<aindilis> ...
23.12.18 02:19:17<aindilis> nice
23.12.18 02:19:21<aindilis> fast too
23.12.18 02:19:29<aindilis> (I shortened it to 9 entries + ...)
23.12.18 02:19:58<dmiles> ahg good yeah the 10th is probly the one that gets yuo on their shit list
23.12.18 02:20:13<aindilis> well the 11th right?
23.12.18 02:20:20<dmiles> i never checked
23.12.18 02:20:22<aindilis> k
23.12.18 02:20:44<dmiles> and it ok to blast units every send of their klimt
23.12.18 02:21:01<dmiles> i mean not that you need to
23.12.18 02:21:06<aindilis> k
23.12.18 02:21:12<aindilis> well I say I got far enough for now
23.12.18 02:21:18<dmiles> for sure!
23.12.18 02:21:21<aindilis> I'll have to trouble shoot it so you can run it and it won't kill it
23.12.18 02:21:33<dmiles> now the very last thing i suppse dis to be able to add users
23.12.18 02:21:50<dmiles> (not tonight )
23.12.18 02:21:51<aindilis> you mean access control to my cyc instance over irc?
23.12.18 02:22:14<dmiles> well if stoopkid ever wants to try it
23.12.18 02:22:17<dmiles> etc
23.12.18 02:22:18<aindilis> k
23.12.18 02:23:15<aindilis> let me know if you know how to segment the KB per user so I can have my info in the KB but a user with certain privileges logged in as a particular cyc user won't necessarily be able to see my "classified" portion
23.12.18 02:23:25<aindilis> you mentioned a #$FooBar Collection thing
23.12.18 02:24:02<aindilis> cyc: (apropos "CycSecure")
                 <dmiles> you want it for asswserions right?
23.12.18 02:24:03<aindilis> 84
23.12.18 02:24:08<aindilis> cyc: (list (apropos "CycSecure"))
23.12.18 02:24:09<aindilis> "T"
23.12.18 02:24:23<aindilis> yeah everything even constant names if possible
23.12.18 02:24:45<aindilis> otherwise I will simply set up a VM and export the KB
23.12.18 02:24:49<aindilis> but that's harder
23.12.18 02:25:04<aindilis> there's personal medical info in my instance that I don't want to leak (HIPAA)
23.12.18 02:26:02<aindilis> cyc: (constant-apropos "AndrewDougherty")
23.12.18 02:26:03<aindilis> "#$AndrewDougherty"
23.12.18 02:26:04<aindilis> "#$AndrewDoughertyTrainsCalebWalshDuringFirstSessionOfFourthDayOfThirdWeek"
                 <aindilis> "#$AndrewDoughertysDiagnosedAspergersSyndrome"
23.12.18 02:26:06<aindilis> see
23.12.18 02:27:10<aindilis> commiting
23.12.18 02:27:17* dmiles looking for an exmaple where we added the meta sesserions
23.12.18 02:29:33<aindilis> I'm going to add access to CYC, FLP, FreeKBS2, and Prolog-Agent
23.12.18 02:30:06<aindilis> I can also write an interface for PrologMUD provided I properly install it
23.12.18 02:31:45<aindilis> I suppose I could implement a quick function that wraps nonlist answers into lists, like 'qq or something
23.12.18 02:33:00<aindilis> cyc: (ql '(#$usesProgram ?Y (#$softwareFn "emacs")) #$IRCKBMt)
23.12.18 02:33:28<dmiles> (define listify (a) (ret (fif (atom a) (list a) a)))
23.12.18 02:33:38<aindilis> ty
23.12.18 02:34:39<dmiles> ;; no typeois .. cyc just has a propretary lisp impl tha ti program in
23.12.18 02:34:56<aindilis> yeah I've been coding in it
23.12.18 02:34:59<aindilis> subl, right?
23.12.18 02:35:07<dmiles> *nod* right on
                 <aindilis> I have written several KB
23.12.18 02:35:11<aindilis> kilobytes
23.12.18 02:35:33<aindilis> that's actually how I'm planning to implement PrologMUD in SubL
23.12.18 02:36:01<dmiles> awesome
23.12.18 02:38:00<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "FRDCSA")
23.12.18 02:38:01<aindilis> 78
                 <aindilis> 73
                 <aindilis> 76
23.12.18 02:38:08<aindilis> cyc: (listify (frdcsa-ata-grep #$DouglasMiles "FRDCSA"))
23.12.18 02:38:09<aindilis> "NIL"
23.12.18 02:38:15<aindilis> cyc: (listify (frdcsa-ata-grep #$DouglasMiles "."))
23.12.18 02:38:16<aindilis> "NIL"
23.12.18 02:38:27<aindilis> cyc: (listify (frdcsa-ata-grep #$DouglasMiles ""))
23.12.18 02:38:28<aindilis> "NIL"
23.12.18 02:38:53<dmiles> (listify 1)
23.12.18 02:39:06<aindilis> cyc: (listify 1)
                 <aindilis> "1"
23.12.18 02:39:11<aindilis> :)
23.12.18 02:39:16<dmiles> (listify (list 12 3 3))
23.12.18 02:39:31<aindilis> cyc: (frdcsa-grep "DouglasMiles" "Doug")
23.12.18 02:39:32<aindilis> 78
                 <aindilis> 73
                 <aindilis> 76
23.12.18 02:39:37<aindilis> cyc: (listify (frdcsa-grep "DouglasMiles" "Doug"))
23.12.18 02:39:38<aindilis> "NIL"
23.12.18 02:46:06<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:46:32<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:46:56<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:47:04<dmiles> (listify (string (frdcsa-grep "DouglasMiles" "Doug")))
23.12.18 02:47:13<aindilis> I'm testing out something that prints NIL
23.12.18 02:47:26<aindilis> cyc: (listify (string (frdcsa-grep "DouglasMiles" "Doug")))
23.12.18 02:47:27<aindilis> "NIL"
23.12.18 02:47:40<dmiles> i see
23.12.18 02:48:06<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:48:42<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:48:49<aindilis> cyc: (frdcsa-grep #$DouglasMiles "Doug")
23.12.18 02:49:05<aindilis> cyc: (frdcsa-grep #$DouglasMiles "Doug")
23.12.18 02:50:04<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:50:28<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:51:03<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:51:30<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:52:09<aindilis> cyc: NIL
23.12.18 02:52:18<aindilis> cyc: (list NIL)
                 <aindilis> "NIL"
23.12.18 02:52:31<aindilis> cyc: (listify (frdcsa-grep #$DouglasMiles "Doug"))
23.12.18 02:52:38<aindilis> cyc: (listify (frdcsa-ata-grep #$DouglasMiles "Doug"))
23.12.18 02:52:39<aindilis> "NIL"
23.12.18 02:52:46<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:52:47<aindilis> 78
                 <aindilis> 73
                 <aindilis> 76
23.12.18 02:52:56<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:52:57<aindilis> 78
                 <aindilis> 73
23.12.18 02:53:00<aindilis> 76
23.12.18 02:53:06<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:53:07<aindilis> 78
23.12.18 02:53:11<aindilis> 73
                 <aindilis> 76
23.12.18 02:53:24<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:53:38<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:54:00<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:54:07<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:54:17<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:54:22<aindilis> 78
                 <aindilis> 73
                 <aindilis> 76
23.12.18 02:54:56<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:54:58<aindilis> 78
                 <aindilis> 73
                 <aindilis> 76
23.12.18 02:55:15<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 02:55:18<aindilis> 78
                 <aindilis> 73
                 <aindilis> 76
23.12.18 03:02:51<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:03:04<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:03:20<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:03:39<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:04:13<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:04:17<aindilis> "connected"
23.12.18 03:04:19<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:04:21<aindilis> "connected"
23.12.18 03:04:25<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:05:05<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:05:21<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:05:37<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:06:16<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:06:32<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:06:35<aindilis> NIL
23.12.18 03:06:48<aindilis> sorry that took so long
23.12.18 03:07:19<aindilis> silly stuff with quoting, characters, strings and numbers
23.12.18 03:07:36<aindilis> my system has problems differentiating 9 and "9"
23.12.18 03:08:05<aindilis> cyc: (frdcsa-ata-grep #$DouglasMiles "Doug")
23.12.18 03:08:06<aindilis> NIL
23.12.18 03:08:10<aindilis> cyc: (listify (frdcsa-ata-grep #$DouglasMiles "Doug"))
23.12.18 03:09:28<aindilis> cyc: (cyc-query '(#$isa #$AndrewDougherty #$Dog) #$BaseKB)
23.12.18 03:09:29<aindilis> NIL
23.12.18 03:09:40<aindilis> cyc: (cyc-query '(#$isa #$AndrewDougherty #$AIResearcher) #$BaseKB)
23.12.18 03:09:41<aindilis> NIL
23.12.18 03:09:49<aindilis> cyc: (cyc-query '(#$isa #$AndrewDougherty #$Person) #$BaseKB)
                 <aindilis> NIL
23.12.18 03:10:28<aindilis> cyc: (cyc-query '(#$isa #$AndrewDougherty #$Person) #$EverythingPSC)
23.12.18 03:10:29<aindilis> "NIL"
23.12.18 03:11:01<aindilis> cyc: (cyc-query '(#$isa #$AndrewDougherty #$Graduate) #$EverythingPSC)
23.12.18 03:11:09<aindilis> cyc: (cyc-query '(#$isa #$AndrewDougherty #$Graduate) #$EverythingPSC)
23.12.18 03:11:12<aindilis> "NIL"
23.12.18 03:11:20<aindilis> cyc: (cyc-query '(#$isa #$AndrewDougherty #$Dog) #$EverythingPSC)
23.12.18 03:11:21<aindilis> NIL
23.12.18 03:11:43<aindilis> cyc: (all-isa #$AndrewDougherty #$EverythingPSC)
23.12.18 03:11:44<aindilis> "#$Graduate"
                 <aindilis> ("#<" ("#$GraduateFn" "#$DegreeGrantingHigherEducationInstitution") ">")
                 <aindilis> ("#<" ("#$GraduateFn" "#$University") ">")
23.12.18 03:11:47<aindilis> "#$Scientist"
23.12.18 03:11:51<aindilis> "#$ComputerScientist"
23.12.18 03:11:54<aindilis> "#$AIResearcher"
23.12.18 03:11:57<aindilis> "#$FRDCSACollaborator"
23.12.18 03:12:00<aindilis> "#$SkilledPerson"
23.12.18 03:12:03<aindilis> "#$SkilledWorker"
23.12.18 03:12:07<aindilis> ...
23.12.18 03:12:24<aindilis> (the part about graduating is cyc inferencing that is wrong imho, I'll have to make a new category of independent AI researcher)
23.12.18 03:12:48<aindilis> cyc: (sort (all-isa #$AndrewDougherty #$EverythingPSC))
23.12.18 03:13:48<aindilis> cyc: (comment #$Dog)
23.12.18 03:13:50<aindilis> "connected"
23.12.18 03:13:51<aindilis> cyc: (comment #$Dog)
23.12.18 03:13:52<aindilis> "connected"
23.12.18 03:13:56<aindilis> cyc: (comment #$Dog)
                 <aindilis> "A #$BiologicalSpecies (scientific name 'Canis familiaris') that is a specialization of #$CanineAnimal (q.v.).  Each instance of #$Dog is a canine animal that has either been bred to be a domestic pet (see #$DomesticatedAnimal) or is a wild canine animal that is not an instance of #$Wolf, #$Fox, or any other non-dog specialization of #$CanineAnimal. Note that although #$Dog and #$Wolf are considered distinct #$BiologicalSp
23.12.18 03:14:50<aindilis> cyc: (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt)
                 <aindilis> ((var-X "." "avar"))
23.12.18 03:14:51<aindilis> ((var-X "." "GhostwalkGames"))
                 <aindilis> ((var-X "." "jimgray"))
23.12.18 03:14:54<aindilis> ((var-X "." "johnjay"))
23.12.18 03:14:57<aindilis> ((var-X "." "aleksas"))
23.12.18 03:15:00<aindilis> ((var-X "." "warweasle"))
23.12.18 03:15:03<aindilis> ((var-X "." "asqrd_"))
23.12.18 03:15:21<aindilis> cyc: (mapcar 'cddr (car (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt)))
23.12.18 03:15:47<aindilis> cyc: (mapcar 'cddr (car (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs"))) #$IRCKBMt))
23.12.18 03:16:08<aindilis> cyc: (comment #$Dog)
23.12.18 03:16:11<aindilis> "connected"
23.12.18 03:16:13<aindilis> cyc: (mapcar 'cddr (car (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs"))) #$IRCKBMt))
23.12.18 03:16:45<aindilis> cyc: (mapcar 'cddr (car (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt)))
23.12.18 03:17:13<aindilis> cyc: (mapcar 'cddr (car (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt)))
23.12.18 03:17:34<aindilis> cyc: (mapcar #'cddr (car (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt)))
23.12.18 03:17:52<aindilis> cyc: (mapcar #'cddr (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt))
23.12.18 03:17:53<aindilis> "NIL"
                 <aindilis> "NIL"
                 <aindilis> "NIL"
23.12.18 03:17:56<aindilis> "NIL"
23.12.18 03:18:00<aindilis> "NIL"
23.12.18 03:18:03<aindilis> "NIL"
23.12.18 03:18:04<aindilis> "NIL"
23.12.18 03:18:07<aindilis> cyc: (mapcar #'last (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt))
23.12.18 03:18:10<aindilis> ((var-X "." "avar"))
23.12.18 03:18:14<aindilis> ((var-X "." "GhostwalkGames"))
23.12.18 03:18:17<aindilis> ((var-X "." "jimgray"))
23.12.18 03:18:21<aindilis> ((var-X "." "johnjay"))
23.12.18 03:18:24<aindilis> ((var-X "." "aleksas"))
23.12.18 03:18:27<aindilis> ((var-X "." "warweasle"))
23.12.18 03:18:30<aindilis> ((var-X "." "asqrd_"))
23.12.18 03:18:48<aindilis> cyc: (mapcar #'cadr (car (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt)))
23.12.18 03:18:55<aindilis> cyc: (mapcar #'cdar (car (cyc-query '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn "emacs")) #$IRCKBMt)))
23.12.18 03:19:20<aindilis> cyc: (+ 1 10
23.12.18 03:19:22<aindilis> cyc: (+ 1 1)
23.12.18 03:19:23<aindilis> "2"
23.12.18 03:19:34<aindilis> cyc: (* 999 999)
23.12.18 03:19:35<aindilis> "998001"
23.12.18 03:20:07<aindilis> cyc: (* 398 402)
23.12.18 03:20:08<aindilis> "159996"
23.12.18 03:20:19<aindilis> cyc: (* 38 42)
23.12.18 03:20:20<aindilis> "1596"
23.12.18 03:20:40<aindilis> cyc: (all-term-assertions #$Lenat)
23.12.18 03:20:41<aindilis> "connected"
23.12.18 03:20:43<aindilis> cyc: (all-term-assertions #$Lenat)
23.12.18 03:20:45<aindilis> ("#<AS" ("#$isa" var-var0 "#$MensClothing") ":" "CyclistsMt" ">")
23.12.18 03:20:49<aindilis> ("#<AS" ("#$politicalPartyMembers" "#$RepublicanParty-US" var-var0) ":" "CyclistsMt" ">")
23.12.18 03:20:52<aindilis> ("#<AS" ("#$formulaTemplateExample" "#$PrimarySupervisor-Template" "#$CurrentCycorpEmployee-TemplateTopic" ("#$primarySupervisor" "#$Witbrock" "#$Lenat")) ":" "CycorpInternalTemplateTestMt" ">")
                 <aindilis> ("#<AS" ("#$examplePredSentences" "#$ebmtNLToCycLTrainingExample" ("#$ebmtNLToCycLTrainingExample" "Doug Lenat speaks German." ("#$Quote" ("#$languageSpoken" "#$Lenat" "#$GermanLanguage")))) ":" "BaseKB" ">")
23.12.18 03:20:55<aindilis> ("#<AS" ("#$gafGatheringTriggerSentence" "#$GAFGathering-10383514" ("#$Quote" ("#$movieDirector" var-X "#$Lenat"))) ":" "GAFGatheringLogMt" ">")
23.12.18 03:20:58<aindilis> ("#<AS" ("#$evincesVerifiedGAF" "#$ObtainingASearchResult-125064016" ("#$movieDirector" ("#<" ("#$MovieNamedFn" "Identity") ">") "#$Lenat")) ":" "GAFGatheringLogMt" ">")
23.12.18 03:21:01<aindilis> ("#<AS" ("#$evincesVerifiedGAF" "#$ObtainingASearchResult-102007760" ("#$movieDirector" ("#<" ("#$MovieNamedFn" "Identity") ">") "#$Lenat")) ":" "GAFGatheringLogMt" ">")
23.12.18 03:21:05<aindilis> ("#<AS" ("#$sentenceParameterValueInSpecification" ("#$Quote" ("#$not" ("#$biologicalFather" "#$Cyc" "#$Lenat"))) ("#<" ("#$TestQueryFn" "#$CST-LenatIsNotCycsBiologicalFather") ">")) ":" "TestVocabularyMt" ">")
23.12.18 03:21:08<aindilis> ("#<AS" ("#$sentenceParameterValueInSpecification" ("#$Quote" ("#$spokesmanFor" var-ORG "#$Lenat")) "#$LilliputQuery-OpenNoGood-34") ":" "TestVocabularyMt" ">")
23.12.18 03:21:11<aindilis> ...
23.12.18 03:21:31<aindilis> cyc: (q '("#$politicalPartyMembers" "#$RepublicanParty-US" ?X) #$EverythingPSC)
23.12.18 03:21:32<aindilis> NIL
23.12.18 03:21:40<aindilis> cyc: (q '(#$politicalPartyMembers #$RepublicanParty-US ?X) #$EverythingPSC)
23.12.18 03:21:41<aindilis> ((var-X "." "#$RichardNixon"))
                 <aindilis> ((var-X "." "#$NancyReagan"))
23.12.18 03:21:44<aindilis> ((var-X "." "#$BenjaminHarrison"))
23.12.18 03:21:48<aindilis> ((var-X "." "#$ChesterAlanArthur"))
23.12.18 03:21:51<aindilis> ((var-X "." "#$JamesAGarfield"))
23.12.18 03:21:55<aindilis> ((var-X "." "#$RutherfordBHayes"))
                 <aindilis> ((var-X "." "#$GeraldFord"))
23.12.18 03:21:58<aindilis> ((var-X "." "#$DwightDEisenhower"))
23.12.18 03:22:03<aindilis> ((var-X "." "#$GeorgeHWBush"))
23.12.18 03:22:06<aindilis> ...
23.12.18 03:22:09<aindilis> cyc: (q '(#$politicalPartyMembers #$RepublicanParty-US #$Lenat) #$EverythingPSC)
23.12.18 03:22:11<aindilis> NIL
23.12.18 03:22:13<aindilis> cyc: (q '(#$politicalPartyMembers #$DemocraticParty-US #$Lenat) #$EverythingPSC)
23.12.18 03:22:16<aindilis> NIL
23.12.18 03:22:22<aindilis> cyc: (a '(#$politicalPartyMembers #$DemocraticParty-US #$AndrewDougherty) #$IRCKBMy)
23.12.18 03:22:30<aindilis> cyc: (a '(#$politicalPartyMembers #$DemocraticParty-US #$AndrewDougherty) #$IRCKBMt)
23.12.18 03:22:33<aindilis> T
23.12.18 03:22:37<aindilis> cyc: (q '(#$politicalPartyMembers #$DemocraticParty-US #$AndrewDougherty) #$IRCKBMy)
23.12.18 03:22:40<aindilis> cyc: (q '(#$politicalPartyMembers #$DemocraticParty-US #$AndrewDougherty) #$IRCKBMt)
23.12.18 03:22:44<aindilis> "NIL"
23.12.18 03:22:55<aindilis> cyc: (apropos "write")
                 <aindilis> T
23.12.18 03:24:46<aindilis> dmiles: do you know how to do SKSI?
23.12.18 03:28:37*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
                 <dmiles> cyc: (+ 1 1)
23.12.18 03:28:49<cyc> cyc: (+ 1 1)
23.12.18 03:28:50<aindilis> "connected"
23.12.18 03:28:56<cyc> cyc: (+ 1 1)
23.12.18 03:28:57<aindilis> "connected"
23.12.18 03:29:04<cyc> cyc: (+ 1 1)
23.12.18 03:29:05<aindilis> "connected"
23.12.18 03:29:21<dmiles> yes.. can do SKSI but it is prety hard ot set up
23.12.18 03:29:22<aindilis> cyc: (q '(#$politicalPartyMembers #$DemocraticParty-US #$AndrewDougherty) #$IRCKBMt)
23.12.18 03:29:23<aindilis> "NIL"
23.12.18 03:29:36<cyc> cyc: (q '(#$politicalPartyMembers #$DemocraticParty-US #$AndrewDougherty) #$IRCKBMt)
23.12.18 03:29:37<aindilis> "connected"
23.12.18 03:29:46<dmiles> actually the OS is not even as hard as the KR :P
23.12.18 03:30:05<dmiles> actually the OS seup (insstlaling the driverS)  is not even as hard as the KR :P
23.12.18 03:30:21<cyc> cyc: (q '(#$politicalPartyMembers #$DemocraticParty-US #$AndrewDougherty) #$IRCKBMt)
23.12.18 03:30:31<dmiles> drivers like myJDBC
23.12.18 03:31:30*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 03:32:32<dmiles> when i did the QUAKE gamming mod for Cycorp i at firsrt wanted to use SKSI.. but it ended up better to write a socket server and SubL
23.12.18 03:32:33*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
                 <dmiles> cyc: (+ 1 1)
23.12.18 03:32:49*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
23.12.18 03:33:03<dmiles> sorry.. hopefully that script doesnmt annoy you
23.12.18 03:33:29<cyc> no worries
23.12.18 03:33:38*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
                 <dmiles> cyc: (+ 1 1)
23.12.18 03:33:54<cyc> cyc: (+ 1 1)
23.12.18 03:33:56<aindilis> "connected"
23.12.18 03:34:03<cyc> cyc: (+ 1 1)
23.12.18 03:34:15<cyc> cyc: (+ 1 1)
23.12.18 03:34:31<dmiles> heh i can actualy tell its useing the java server api :P
                 *** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
23.12.18 03:34:51<cyc> :)
23.12.18 03:35:00<dmiles> due to that was like exactly how long it was before "connected"
23.12.18 03:35:13*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
                 <dmiles> cyc: (+ 1 1)
23.12.18 03:35:37<aindilis> cyc: (+ 1 1)
23.12.18 03:35:40<aindilis> "2"
23.12.18 03:35:45<cyc> cyc: (+ 1 1)
23.12.18 03:35:46<aindilis> "connected"
23.12.18 03:36:21<cyc> cyc: (+ 1 1)
23.12.18 03:36:23<aindilis> "connected"
23.12.18 03:36:57<cyc> cyc: (+ 1 1)
23.12.18 03:37:00<aindilis> "2"
23.12.18 03:37:09<cyc> that's screwed up
23.12.18 03:37:26<cyc> cyc: (+ 1 1)
23.12.18 03:37:27<aindilis> "2"
23.12.18 03:37:45<cyc> cyc: (q '(#$isa ?X #$Dog) #$EverythingPSC)
23.12.18 03:37:47<aindilis> ((var-X "." "#$Rover-5"))
                 <aindilis> ((var-X "." "#$ThePrototypicalDog"))
                 <aindilis> ((var-X "." "#$HYP-Dog-5968235"))
                 <aindilis> ((var-X "." "#$Dash-VictoriasPet"))
23.12.18 03:37:50<aindilis> ((var-X "#$GenericInstanceFn" "#$Dog"))
23.12.18 03:37:53<aindilis> ((var-X "." "#$HYP-JuvenileFnDog-4981756"))
23.12.18 03:37:56<aindilis> ((var-X "." "#$HYP-JuvenileFnDog-59300253"))
23.12.18 03:38:00<aindilis> ((var-X "." "#$HYP-JuvenileFnDog-27104220"))
23.12.18 03:38:03<aindilis> ((var-X "." "#$Muffet"))
23.12.18 03:38:06<aindilis> ...
23.12.18 03:39:11<cyc> cyc: (q '(#$isa ?X #$Dog) #$EverythingPSC)
23.12.18 03:39:12<aindilis> ((var-X "." "#$Rover-5"))
                 <aindilis> ((var-X "." "#$ThePrototypicalDog"))
                 <aindilis> ((var-X "." "#$HYP-Dog-5968235"))
23.12.18 03:39:16<aindilis> ((var-X "." "#$Dash-VictoriasPet"))
23.12.18 03:39:19<aindilis> ((var-X "#$GenericInstanceFn" "#$Dog"))
23.12.18 03:39:22<aindilis> ((var-X "." "#$HYP-JuvenileFnDog-4981756"))
23.12.18 03:39:25<aindilis> ((var-X "." "#$HYP-JuvenileFnDog-59300253"))
23.12.18 03:39:28<aindilis> ((var-X "." "#$HYP-JuvenileFnDog-27104220"))
23.12.18 03:39:31<aindilis> ((var-X "." "#$Muffet"))
23.12.18 03:39:35<aindilis> ...
23.12.18 03:39:49<aindilis> dmiles is it rate limiting it for you or jsut for cyc and not aindilsi?
23.12.18 03:40:09<aindilis> okay you're granted perms
23.12.18 03:40:45<cyc> cyc: (+ 1 1)
23.12.18 03:40:47<aindilis> "2"
23.12.18 03:40:53<cyc> dmiles: give it a try
23.12.18 03:42:43<cyc> cyc: (q '(#$isa ?X #$Graduate) #$EverythingPSC)
23.12.18 03:42:46<aindilis> ((var-X "." "#$HattieFromKansasCity"))
                 <aindilis> ((var-X "." "#$BillDally"))
                 <aindilis> ((var-X "." "#$PaulCohen-ComputerScientist"))
                 <aindilis> ((var-X "." "#$LarryBirnbaum"))
23.12.18 03:42:49<aindilis> ((var-X "." "#$KathleenVogel-SME"))
23.12.18 03:42:52<aindilis> ((var-X "." "#$JohnMcCarthy-ComputerScientist"))
23.12.18 03:42:56<aindilis> ((var-X "." "#$MurrayBurke"))
23.12.18 03:42:59<aindilis> ((var-X "." "#$DanielBorrajo"))
23.12.18 03:43:02<aindilis> ((var-X "." "#$RandyDavis"))
23.12.18 03:43:05<aindilis> ...
23.12.18 03:43:31<cyc> cyc: (p (q '(#$isa ?X #$Graduate) #$EverythingPSC))
23.12.18 03:43:32<aindilis> NIL
23.12.18 03:53:47<aindilis> cyc: (pc (q '(#$isa ?X #$Dog) #$BaseKB))
23.12.18 03:53:48<aindilis> "((?X . #$Rover-5)) ((?X . #$ThePrototypicalDog)) ((?X #$GenericInstanceFn #$Dog)) "
23.12.18 03:54:34<aindilis> cyc: (pc (q '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn ?Y)) #$BaseKB))
23.12.18 03:54:42<aindilis> cyc: (q '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn ?Y)) #$BaseKB)
23.12.18 03:54:43<aindilis> NIL
23.12.18 03:55:09<aindilis> cyc: (q '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn ?Y)) #$BaseKB)
23.12.18 03:55:10<aindilis> NIL
23.12.18 03:55:19<aindilis> cyc: (q '(#$usesProgram (#$personHavingIRCAliasFn ?X) (#$softwareFn ?Y)) #$BaseKB)
23.12.18 03:55:21<aindilis> NIL
23.12.18 03:55:33<aindilis> cyc: (q '(#$usesProgram ?X (#$softwareFn ?Y)) #$BaseKB)
23.12.18 03:55:34<aindilis> NIL
23.12.18 03:55:43<aindilis> cyc: (q '(#$usesProgram ?X (#$softwareFn "emacs")) #$BaseKB)
23.12.18 03:55:44<aindilis> NIL
23.12.18 03:56:12<aindilis> cyc: (q '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn ?Y)) #$IRCKBMt)
23.12.18 03:56:14<aindilis> ((var-X "." "karlpinc") (var-Y "." "postfix"))
                 <aindilis> ((var-X "." "benjikun") (var-Y "." "cgit"))
                 <aindilis> ((var-X "." "JohnMH") (var-Y "." "screen"))
23.12.18 03:56:17<aindilis> ((var-X "." "ksk") (var-Y "." "systemd"))
23.12.18 03:56:22<aindilis> ((var-X "." "jors") (var-Y "." "gnome"))
23.12.18 03:56:25<aindilis> ((var-X "." "roadie") (var-Y "." "rmail"))
23.12.18 03:56:28<aindilis> ((var-X "." "somiaj") (var-Y "." "irssi"))
23.12.18 03:56:31<aindilis> ((var-X "." "rjsalts") (var-Y "." "gimp"))
23.12.18 03:56:35<aindilis> ((var-X "." "phil_s_stein") (var-Y "." "alot"))
23.12.18 03:56:38<aindilis> ...
                 <aindilis> cyc: (pc (q '(#$likesObject (#$personHavingIRCAliasFn ?X) (#$softwareFn ?Y)) #$IRCKBMt))
23.12.18 03:56:41<aindilis> "((?X . \"karlpinc\") (?Y . \"postfix\")) ((?X . \"benjikun\") (?Y . \"cgit\")) ((?X . \"JohnMH\") (?Y . \"screen\")) ((?X . \"ksk\") (?Y . \"systemd\")) ((?X . \"jors\") (?Y . \"gnome\")) ((?X . \"roadie\") (?Y . \"rmail\")) ((?X . \"somiaj\") (?Y . \"irssi\")) ((?X . \"rjsalts\") (?Y . \"gimp\")) ((?X . \"phil_s_stein\") (?Y . \"alot\")) ((?X . \"twb\") (?Y . \"iptables\")) ((?X . \"ttkp\") (?Y . \"beef\")) ((?X . \"novu
23.12.18 03:57:49<aindilis> this is actually kinda creepy, I'm just now realizing
23.12.18 03:58:06<aindilis> talk about a usecase for CycSecure
23.12.18 03:58:48<aindilis> cyc: (pc (q '(#$likesObject (#$personHavingIRCAliasFn "aindilis") (#$softwareFn ?Y)) #$IRCKBMt))
23.12.18 03:58:49<aindilis> "((?Y . \"time\")) "
23.12.18 03:59:05<aindilis> cyc: (pc (q '(#$usesProgram (#$personHavingIRCAliasFn "aindilis") (#$softwareFn ?Y)) #$IRCKBMt))
                 <aindilis> "((?Y . \"emacs\")) ((?Y . \"iptables\")) ((?Y . \"xboard\")) "
23.12.18 03:59:16<aindilis> cyc: (pc (q '(#$usesProgram (#$personHavingIRCAliasFn "stoopkid") (#$softwareFn ?Y)) #$IRCKBMt))
23.12.18 03:59:22<aindilis> cyc: (pc (q '(#$usesProgram (#$personHavingIRCAliasFn "aindilis") (#$softwareFn ?Y)) #$IRCKBMt))
                 <aindilis> "((?Y . \"emacs\")) ((?Y . \"iptables\")) ((?Y . \"xboard\")) "
23.12.18 03:59:44<aindilis> cyc: (pc (q '(#$usesProgram (#$personHavingIRCAliasFn "aindilis") (#$softwareFn ?Y)) #$IRCKBMt))
23.12.18 03:59:45<aindilis> "((?Y . \"emacs\")) ((?Y . \"iptables\")) ((?Y . \"xboard\")) "
23.12.18 04:02:32*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xqlaavgxnlhdturu) left #logicmoo: Quit: Connection closed for inactivity
23.12.18 04:08:23<aindilis> hrm, cannot find the vulnerability info
23.12.18 04:08:34<aindilis> don't think it's included
23.12.18 04:10:07<aindilis> cyc: (arity #$vulnerableTo)
23.12.18 04:10:08<aindilis> "3"
23.12.18 04:11:11<aindilis> yay, we get to be our own intelligence agency!
23.12.18 04:11:35<aindilis> dmiles: care to play around with it now that I think I have your interface working?
23.12.18 04:11:43<cyc> cyc: (p (q '(#$isa ?X #$Graduate) #$EverythingPSC))
23.12.18 04:11:45<aindilis> NIL
23.12.18 04:11:49<cyc> cyc: (pc (q '(#$isa ?X #$Graduate) #$EverythingPSC))
23.12.18 04:11:51<aindilis> "((?X . #$HattieFromKansasCity)) ((?X . #$BillDally)) ((?X . #$PaulCohen-ComputerScientist)) ((?X . #$LarryBirnbaum)) ((?X . #$KathleenVogel-SME)) ((?X . #$JohnMcCarthy-ComputerScientist)) ((?X . #$MurrayBurke)) ((?X . #$DanielBorrajo)) ((?X . #$RandyDavis)) ((?X . #$GuySteeleJr)) ((?X . #$SidFromToronto)) ((?X . #$BenKuipers)) ((?X . #$KazushiKuse-ComputerScientist)) ((?X . #$MiaHamm)) ((?X . #$FrankRitter)) ((?X . #$Doug
23.12.18 04:13:10<cyc> I'll implement a pager soon enough
23.12.18 04:13:19<dmiles> i am very excited to play arroudn with it.. but prably cant for at least another hour and by then i mighjt be too tired
23.12.18 04:13:27<cyc> oh okay np
23.12.18 04:13:36<cyc> okay I'm done for now
23.12.18 04:13:39<cyc> thanks for playing 
23.12.18 04:13:45<cyc> THERMONUCLEAR WAR
23.12.18 04:13:52<dmiles> oh you dont mind if every 10-20 miutes i type in a random query thouhgh?
23.12.18 04:13:57<cyc> np
23.12.18 04:16:37<dmiles> cyc: 1
23.12.18 04:16:56<cyc> cyc: 1
23.12.18 04:16:58<dmiles> cyc: (kust 1 1)
23.12.18 04:17:06<dmiles> cyc: (list 1 1)
23.12.18 04:17:08<aindilis> "1"
                 <aindilis> "1"
23.12.18 04:17:23<cyc> cyc: (+ 1 1)
23.12.18 04:17:25<aindilis> "2"
23.12.18 04:17:37<dmiles> cyc: (+ 1 1)
23.12.18 04:17:38<aindilis> "2"
23.12.18 04:17:52<dmiles> oh you are goign thru the java API right?
23.12.18 04:18:06<cyc> yes but there's also a 0.5 sec delay that I may be able to remove
23.12.18 04:18:12<dmiles> the has an issue that we could execute a subl number
23.12.18 04:18:13<cyc> without it it wasn't working
23.12.18 04:18:22<cyc> k
23.12.18 04:18:29<cyc> cyc: 1
23.12.18 04:18:37<cyc> cyc: (list 10
23.12.18 04:18:42<cyc> cyc: (list 1)
23.12.18 04:18:44<aindilis> "1"
23.12.18 04:18:51<dmiles> cyc: "sfdsdf"
23.12.18 04:19:05<cyc> I guess I broke that
23.12.18 04:19:07<dmiles> cyc: #\1
23.12.18 04:19:15<dmiles> cyc: (list #\1)
23.12.18 04:19:42<dmiles> cyc: (list  "sdfsdf" )
23.12.18 04:19:43<aindilis> "sdfsdf"
23.12.18 04:20:35<dmiles> cyc: (define psus1 (a) (ret (+ a 1))))
23.12.18 04:20:36<aindilis> PSUS1
23.12.18 04:20:49<dmiles> cyc: (PSUS1 34)
23.12.18 04:20:50<aindilis> "35"
23.12.18 04:21:23<dmiles> cyc: (define psus1 (a) (ret (+ a 222))))
23.12.18 04:21:24<aindilis> PSUS1
23.12.18 04:21:25<dmiles> cyc: (PSUS1 34)
23.12.18 04:21:27<aindilis> "256"
23.12.18 04:22:47<aindilis> https://frdcsa.org/~andrewdo/dmiles/reverse-engineering.subl
23.12.18 04:22:57<aindilis> those are my helper functions in the main
23.12.18 04:26:34<dmiles> cyc: (all-term-assertions-sorted #$TheMatrix)
23.12.18 04:26:54<cyc> Expected constant not found #$TheMatrix
23.12.18 04:27:15<aindilis> cyc: (constant-apropos "thematrix")
23.12.18 04:27:17<aindilis> "#$TheMatrix-TheMovie"
                 <aindilis> "#$TheMatrixRevolutions-Movie"
23.12.18 04:27:25<aindilis> cyc: (all-term-assertions-sorted #$TheMatrix-TheMovie)
23.12.18 04:27:26<aindilis> NIL
23.12.18 04:27:31<aindilis> cyc: (all-term-assertions #$TheMatrix-TheMovie)
23.12.18 04:27:33<aindilis> ("#<AS" ("#$gafGatheringTriggerSentence" "#$GAFGathering-68716649" ("#$Quote" ("#$movieProducer" "#$TheMatrix-TheMovie" var-X))) ":" "GAFGatheringLogMt" ">")
                 <aindilis> ("#<AS" ("#$evincesUnverifiedGAF" "#$ObtainingASearchResult-79972533" ("#$movieProducer" "#$TheMatrix-TheMovie" "#$RonSilver")) ":" "GAFGatheringLogMt" ">")
                 <aindilis> ("#<AS" ("#$evincesUnverifiedGAF" "#$ObtainingASearchResult-129240438" ("#$movieProducer" "#$TheMatrix-TheMovie" "#$RonSilver")) ":" "GAFGatheringLogMt" ">")
23.12.18 04:27:36<aindilis> ("#<AS" ("#$evincesUnverifiedGAF" "#$ObtainingASearchResult-41660595" ("#$movieProducer" "#$TheMatrix-TheMovie" "#$RonSilver")) ":" "GAFGatheringLogMt" ">")
23.12.18 04:27:39<aindilis> ("#<AS" ("#$evincesUnverifiedGAF" "#$ObtainingASearchResult-114388260" ("#$movieProducer" "#$TheMatrix-TheMovie" "#$RonSilver")) ":" "GAFGatheringLogMt" ">")
23.12.18 04:27:41<aindilis> ("#<AS" ("#$evincesUnverifiedGAF" "#$ObtainingASearchResult-70962184" ("#$movieProducer" "#$TheMatrix-TheMovie" "#$RonSilver")) ":" "GAFGatheringLogMt" ">")
23.12.18 04:27:44<aindilis> ("#<AS" ("#$evincesUnverifiedGAF" "#$ObtainingASearchResult-1944756" ("#$movieProducer" "#$TheMatrix-TheMovie" "#$RonSilver")) ":" "GAFGatheringLogMt" ">")
23.12.18 04:27:48<aindilis> ("#<AS" ("#$evincesUnverifiedGAF" "#$ObtainingASearchResult-55627111" ("#$movieProducer" "#$TheMatrix-TheMovie" "#$RonSilver")) ":" "GAFGatheringLogMt" ">")
23.12.18 04:27:51<aindilis> ("#<AS" ("#$evincesUnverifiedGAF" "#$ObtainingASearchResult-116752356" ("#$movieProducer" "#$TheMatrix-TheMovie" "#$RonSilver")) ":" "GAFGatheringLogMt" ">")
23.12.18 04:27:54<aindilis> ...
23.12.18 04:28:08<dmiles> cyc: (first (all-term-assertions-sorted #$TheMatrix))
23.12.18 04:28:16<dmiles> oo[ps
23.12.18 04:28:23<cyc> do you know of a function to tell which version of cyc?
23.12.18 04:28:27<dmiles> cyc: (first (all-term-assertions #$TheMatrix-TheMovie))
23.12.18 04:28:49<cyc> cyc: (listify (first (all-term-assertions #$TheMatrix-TheMovie)))
23.12.18 04:28:56<dmiles> got that is hard to remember 
23.12.18 04:29:14<cyc> cyc: (first (listify (all-term-assertions  #$TheMatrix-TheMovie)))
23.12.18 04:29:27<cyc> cyc: (= 1 1)
23.12.18 04:29:29<aindilis> T
23.12.18 04:29:34<dmiles> i see it is in a list
23.12.18 04:29:58<dmiles> cyc: (string (all-term-assertions #$TheMatrix-TheMovie))
23.12.18 04:30:37<dmiles> cyc: (string (first (all-term-assertions #$TheMatrix-TheMovie)))
23.12.18 04:30:50<cyc> cyc: (pc (first (all-term-assertions  #$TheMatrix-TheMovie)))
23.12.18 04:30:58<cyc> cyc: (= 1 1)
23.12.18 04:31:00<aindilis> T
23.12.18 04:31:26<cyc> cyc: (q '(#$exists ?X (= ?X ?X)) #$BaseKB)
23.12.18 04:31:37<cyc> cyc: (cap "exist")
23.12.18 04:31:39<aindilis> NIL
23.12.18 04:31:46<cyc> cyc: (cap "there")
23.12.18 04:31:48<aindilis> NIL
23.12.18 04:31:54<cyc> cyc: (constant-apropos "exist")
23.12.18 04:31:56<aindilis> "#$Abandoned-ExistentialStatus"
                 <aindilis> "#$AgentTypeByExistentialStatus"
                 <aindilis> "#$AlexisTexas-Actor"
                 <aindilis> "#$AlexisTsipras-PublicOfficial"
23.12.18 04:31:59<aindilis> "#$AssignNodesMoreAppropriateExistingParents-Strategy"
23.12.18 04:32:02<aindilis> "#$CPT-TrueOrFalseEnergyExistsInOneForm"
23.12.18 04:32:05<aindilis> "#$CSQLExists"
23.12.18 04:32:08<cyc> cyc: (pc (constant-apropos "thereexist"))
                 <aindilis> "#$CST-DoComputersExist"
23.12.18 04:32:10<aindilis> "#$CST-DoesAnyonePerceiveAnythingThatDoesNotExistSubesequenToThatPerception"
23.12.18 04:32:14<aindilis> ...
23.12.18 04:32:16<dmiles> i keep forgeting we are of the JRTL
23.12.18 04:32:18<aindilis> "#$MKMThereExistAdditiveFunctionsWhichAreNotLinear #$ThereExistsVsThereExistAtLeast1 #$thereExistAtLeast #$thereExistAtLeast-RelHolds #$thereExistAtMost #$thereExistExactly #$thereExistRange #$thereExists #$thereExistsRolePlayer #$thereExistsRolePlayerOfType #$thereExistsVars "
23.12.18 04:32:29<cyc> cyc: (q '(#$thereExists ?X (= ?X ?X)) #$BaseKB)
23.12.18 04:32:30<aindilis> NIL
23.12.18 04:32:43<cyc> cyc: (constant-apropos "mathe")
23.12.18 04:32:47<aindilis> "#$AParenthesizedExpressionWithJustOneScalarIsEquivalentToThatScalar-MathematicalPrinciple"
                 <aindilis> "#$AndrewWiles-Mathematician"
                 <aindilis> "#$AppendingAnOperationToAMathExpression"
                 <aindilis> "#$Archimedes-Mathematician"
23.12.18 04:32:49<dmiles> the JRTL has to actualyl gather stuff
23.12.18 04:32:50<aindilis> "#$Aromatherapy"
23.12.18 04:32:53<aindilis> "#$Aromatherapy-TheWord"
23.12.18 04:32:57<aindilis> "#$Aryabhata-Mathematician"
23.12.18 04:33:00<aindilis> "#$AssociativeMathematicalOperator"
23.12.18 04:33:03<aindilis> "#$BELLAMathExpressionImageMapping"
23.12.18 04:33:06<aindilis> ...
23.12.18 04:33:08<cyc> well that's also being rate limited
23.12.18 04:33:20<dmiles> each term assertion has to xfer the data
23.12.18 04:33:51<cyc> cyc: (frdcsa-grep "mathe" "^M")
23.12.18 04:33:53<aindilis> NIL
23.12.18 04:33:55<dmiles> and there are also diffenrt datatypes on both sides
23.12.18 04:34:11<dmiles> (more datatypes on the server side)
23.12.18 04:34:18<cyc> yeah I mean my Emacs <-> Perl <-> Java <-> CYC is really ugly
23.12.18 04:34:36<cyc> very buggy
23.12.18 04:34:53<dmiles> (there are datatypes that the CycConnection cants use or see
23.12.18 04:34:57<cyc> a little bit at emacs . perl and also perl . java
23.12.18 04:35:03<cyc> ah
23.12.18 04:35:31<dmiles> in fact on the server that ofr overr 18000 datatypes.. on the client ther eis liek 20
23.12.18 04:35:40<cyc> cyc: (frdcsa-grep "mathe" "Mt")
23.12.18 04:35:42<aindilis> NIL
23.12.18 04:36:26<cyc> cyc: (q '(#$thereExists ?X (= ?X ?X)) #$MathMt)
23.12.18 04:36:28<aindilis> NIL
23.12.18 04:36:41<cyc> cyc: (pc (c #$MathMt))
23.12.18 04:36:51<cyc> cyc: (pc (all-term-assertions #$MathMt))
23.12.18 04:37:15<cyc> that seemed to hose it
23.12.18 04:37:37*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 04:38:12*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
                 <dmiles> cyc: (+ 1 1)
23.12.18 04:38:31<aindilis> cyc: (+ 1 1)
23.12.18 04:38:33<aindilis> "2"
23.12.18 04:38:37<dmiles> it littrerally take it 0.07 seconds to wiretransfer each term assertion so that it can have a proxy on the client
23.12.18 04:38:50<cyc> lol
23.12.18 04:39:02<cyc> I wrote it because of the Java Parser
23.12.18 04:39:23<cyc> I've been meaning to flesh it out and clean it up
23.12.18 04:39:33<cyc> mainly the Emacs interface so I can make better use of Cyc
23.12.18 04:39:51<cyc> I can't wait to do more NLP for IRC-KB
23.12.18 04:40:10<cyc> I've been trying to get a working KBP tool for years
23.12.18 04:41:01<dmiles> i forgot how suefull working on the system over IRC can be
23.12.18 04:41:10<cyc> why?
23.12.18 04:41:26<dmiles> i dunno.. jsut so much time has passed!
23.12.18 04:41:32<cyc> no I mean why is it useful
23.12.18 04:41:41<dmiles> oh.. part of it is a small accountabilty
23.12.18 04:41:52<dmiles> (sorta like "hours")
23.12.18 04:41:56<cyc> ah okay
23.12.18 04:42:01<cyc> cool
23.12.18 04:42:15<dmiles> and even if no one is watching.. you still having gotten soejthing to work until the both can do it
23.12.18 04:42:24<dmiles> until the bot
23.12.18 04:42:25<cyc> ah I see
23.12.18 04:43:06<dmiles> with PrologMUD i never operated on him via irc
23.12.18 04:43:21<dmiles> i think that other night was the most numbers of quierie si evenj did
23.12.18 04:43:27<dmiles> ever did
23.12.18 04:43:31<cyc> yeah
23.12.18 04:43:57<dmiles> yet j;;ykifsh/cycbot.. etc i worked woth them all the time
23.12.18 04:44:07<dmiles> all pre 2004
23.12.18 04:44:41<aindilis> cyc: 1
23.12.18 04:44:45<dmiles> the E2C worked because it had to worl on IRC back then :)
23.12.18 04:45:34<aindilis> cyc: 1
23.12.18 04:46:11<aindilis> cyc: 1
23.12.18 04:46:25<aindilis> cyc: 1
23.12.18 04:46:36<aindilis> cyc: 1
23.12.18 04:46:58<aindilis> cyc: 1
23.12.18 04:47:16<aindilis> ah nice
23.12.18 04:47:37<aindilis> I see so it's easier to build something when people are using it
23.12.18 04:48:09<aindilis> cyc: ah
23.12.18 04:48:23<dmiles> whjat ios crazy is there are 100x the number of people that are interested in teh stuff
23.12.18 04:48:56<aindilis> ah okay
23.12.18 04:49:31<dmiles> i just stopped dpoing it on irc out of certain reasons of not wanting to get in trouble 
23.12.18 04:49:39<aindilis> oh yeah
23.12.18 04:49:45<aindilis> that's a concern here
23.12.18 04:50:15<dmiles> wasnt legal .. but trouble with my significant others
23.12.18 04:50:20<aindilis> oh
23.12.18 04:50:23<dmiles> or sometimes jobs
23.12.18 04:50:42<dmiles> like Bina48 was an IRC bots in 2009
23.12.18 04:51:17<dmiles> they wanted her to be our physical andnroid
23.12.18 04:51:34<aindilis> cyc: (cyclify "Andy likes Emacs")
23.12.18 04:51:38<dmiles> sor sometimes in trouble with myself
23.12.18 04:52:00<aindilis> cyc: (cyclify "Dougherty likes Emacs")
23.12.18 04:52:04<dmiles> like i find someone that is imporessed by this stuff and play show off
23.12.18 04:52:26<aindilis> cyc: (listify (cyclify "Dougherty likes Emacs"))
23.12.18 04:52:41<dmiles> which is fine.. but not if i dont evnent and imporve soemthing for an entire year
23.12.18 04:52:44<aindilis> cyc: (cyclify (list "Dougherty likes Emacs"))
23.12.18 04:53:18<aindilis> well I plan to track who is working on what in POSIMt and POSICommunityMt and IRCMt and IRCKBMt
23.12.18 04:53:40<aindilis> for instance we can compute activity detection over project terminology on IRC
23.12.18 04:53:54<dmiles> 100x is to much an exageration
23.12.18 04:54:03<aindilis> I know it's probably a lost cause to try to coordinate people
23.12.18 04:54:10<dmiles> but i know that 5x is real now
23.12.18 04:54:29<aindilis> cyc: (= 1 1)
23.12.18 04:54:50<aindilis> cyc: (= 1 1)
23.12.18 04:55:05<aindilis> cyc: (= 1 1)
23.12.18 04:55:08<aindilis> T
23.12.18 04:55:54<cyc> well this may interest people like b3nszy
23.12.18 04:56:11<cyc> and bring some more people here - do you want more quantity or quality
23.12.18 04:56:42<dmiles> well like take NARS and OpenCog.. in 2004 there was at most 2 people 
23.12.18 04:56:48<dmiles> erm 2002
23.12.18 04:56:51<cyc> also it will be nice to build FreeSentientWorldSimulation
23.12.18 04:57:43<cyc> well maybe Cyc can reach out to people who have been dormant on the channel
23.12.18 04:58:19<dmiles> you know.. even anniepoo doesnt relaly know what cyc is
23.12.18 04:59:17<dmiles> its not a gripe agaisnt her at all .. its just the timeline gripe
23.12.18 05:00:12<dmiles> i think her and i met in 2010 
23.12.18 05:00:39<dmiles> by then you already long had a  cyc.el file
23.12.18 05:01:06<aindilis> yeah I lost a good version of that in 2003/2004 and never recovered
23.12.18 05:01:14<aindilis> that was going to be great
23.12.18 05:02:03<aindilis> it will be fun to attach some UniLang agents to this bot
23.12.18 05:02:35<dmiles> yes!
23.12.18 05:03:23<aindilis> https://frdcsa.org/~andrewdo/dmiles/AgentRegistry.pm
23.12.18 05:14:04<aindilis> cyc: (= 1 1)
23.12.18 05:14:05<aindilis> T
23.12.18 05:14:19<aindilis> cyc: (= 1 2)
                 <aindilis> NIL
23.12.18 05:14:58<aindilis> please let me know what areas you would like to develop of the KB
23.12.18 05:15:18<aindilis> for instance, I have the who-uses-what angle.  I'm also in the who-knows-what - both abilitative and epistemic
23.12.18 05:15:43<aindilis> I'd love to see that einstein puzzle thing here
23.12.18 05:16:49<aindilis> also social network analysis (so and so addressed so and so)
23.12.18 05:17:02<aindilis> IRC topic detection and tracking
23.12.18 05:17:40<aindilis> this is some stuff that invariably falls into either POSI, SocBot, social-intelligence, or the deprecated Machiavelli, 
23.12.18 05:18:22<aindilis> had a bad connotation
23.12.18 05:19:21<aindilis> k, gonna eat bbiab
23.12.18 05:25:32<aindilis> cyc: (length (all-instances #$FRDCSAExternalCodebase #$FRDCSAMt))
                 <aindilis> "1411"
23.12.18 05:25:48<aindilis> cyc: (length (all-instances #$FRDCSAMinorCodebase #$FRDCSAMt))
23.12.18 05:25:49<aindilis> "536"
23.12.18 05:26:55<aindilis> we need to start documenting PrologMUD here too
23.12.18 05:27:59<aindilis> cyc: (pred-3 "ProjectGoal" #$Person #$Project #$CharacterString)
                 <aindilis> NIL
23.12.18 05:28:15<dmiles> yeah i am going top be more active with the bot PrologMUD as well i jsut have a weeks worth or EventCalculus to fish (at the most)
23.12.18 05:28:24<aindilis> cyc: (a '(#$ProjectGoal #$FRDCSA "Document PrologMUD") #$FRDCSAMt)
23.12.18 05:28:51<aindilis> cyc: (q '(#$ProjectGoal #$FRDCSA ?X) #$FRDCSAMt)
23.12.18 05:29:50<aindilis> cyc: (q '(#$ProjectGoal #$AndrewDougherty #$FRDCSA ?X) #$FRDCSAMt)
23.12.18 05:29:58<aindilis> cyc: (a '(#$ProjectGoal ?X #$FRDCSA ?Y) #$FRDCSAMt)
23.12.18 05:30:17<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSA "Document PrologMUD") #$FRDCSAMt)
23.12.18 05:30:25<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$FRDCSAMt)
23.12.18 05:30:26<aindilis> NIL
23.12.18 05:30:29<aindilis> cyc: (a '(#$ProjectGoal ?X #$FRDCSA ?Y) #$FRDCSAMt)
23.12.18 05:30:34<aindilis> cyc: (a '(#$ProjectGoal ?X #$FRDCSAMt ?Y) #$FRDCSAMt)
23.12.18 05:30:35<aindilis> NIL
23.12.18 05:30:39<aindilis> cyc: (a '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
                 <aindilis> NIL
23.12.18 05:31:02<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:31:03<aindilis> NIL
23.12.18 05:31:18<aindilis> cyc: (u '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:31:19<aindilis> T
23.12.18 05:31:26<aindilis> cyc: (u '(#$ProjectGoal ?X #$FRDCSAMt ?Y) #$FRDCSAMt)
23.12.18 05:31:27<aindilis> T
23.12.18 05:31:30<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
                 <aindilis> NIL
23.12.18 05:31:43<aindilis> cyc: (all-term-assertions #$ProjectGoal)
                 <aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
                 <aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 05:31:47<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 05:31:50<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 05:31:53<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 05:31:56<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:31:59<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:32:03<aindilis> ("#<AS" ("#$factGatheringUnspecifiableArgPosition" "#$ProjectGoal" "2") ":" "BaseKB" ">")
23.12.18 05:32:49<aindilis> (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)
23.12.18 05:32:58<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)
                 <aindilis> NIL
23.12.18 05:33:26<aindilis> cyc: (a '(#$genlMt #$BaseKB #$FRDCSAMt) #$BaseKB)
23.12.18 05:33:29<aindilis> T
23.12.18 05:33:31<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)
23.12.18 05:33:32<aindilis> NIL
23.12.18 05:33:36<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:33:37<aindilis> NIL
23.12.18 05:34:04<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$FRDCSAMt)
23.12.18 05:34:05<aindilis> NIL
23.12.18 05:34:07<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:34:08<aindilis> NIL
23.12.18 05:34:20<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #BaseKB)
23.12.18 05:34:29<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$BaseKB)
23.12.18 05:34:30<aindilis> T
23.12.18 05:34:35<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:34:44<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$BaseKB)
23.12.18 05:34:45<aindilis> T
23.12.18 05:34:48<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$FRDCSAMt)
23.12.18 05:34:49<aindilis> T
23.12.18 05:34:54<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
                 <aindilis> NIL
23.12.18 05:35:10<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)
                 <aindilis> NIL
23.12.18 05:35:34<aindilis> cyc: (u '(#$genlMt #$BaseKB #$FRDCSAMt) #$BaseKB)
                 <aindilis> T
23.12.18 05:35:44<aindilis> cyc: (a '(#$genlMt #$BaseKB #$FRDCSAMt) #$FRDCSAMt)
23.12.18 05:35:45<aindilis> T
23.12.18 05:35:47<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)
23.12.18 05:35:48<aindilis> NIL
23.12.18 05:35:51<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:35:52<aindilis> NIL
23.12.18 05:36:09<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
                 <aindilis> NIL
23.12.18 05:36:35<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #BaseKB)
23.12.18 05:36:42<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$FRDCSAMt)
23.12.18 05:36:43<aindilis> NIL
23.12.18 05:38:09<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$FRDCSAMt)
23.12.18 05:38:10<aindilis> NIL
23.12.18 05:38:15<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$BaseKB)
23.12.18 05:38:16<aindilis> T
23.12.18 05:38:24<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:38:25<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:38:56<aindilis> cyc: (define ygoal (goal) (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject goal) #$BaseKB))
23.12.18 05:38:57<aindilis> YGOAL
23.12.18 05:39:07<aindilis> (ygoal "Implement Persistence")
23.12.18 05:39:16<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:39:17<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:39:39<aindilis> cyc: (define ygoal (goal) (ret (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject goal) #$BaseKB)))
                 <aindilis> YGOAL
23.12.18 05:39:43<aindilis> cyc: (ygoal "Implement Persistence")
                 <aindilis> NIL
23.12.18 05:39:47<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:39:48<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:40:21<aindilis> cyc: (define ygoal (goal) (ret (a (list #$ProjectGoal #$AndrewDougherty #$FRDCSAProject goal) #$BaseKB)))
23.12.18 05:40:22<aindilis> YGOAL
23.12.18 05:40:24<aindilis> cyc: (ygoal "Implement Persistence")
23.12.18 05:40:25<aindilis> NIL
23.12.18 05:40:27<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:40:28<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:41:02<aindilis> cyc: (csetf *goal* "test")
                 <aindilis> "test"
23.12.18 05:41:12<aindilis>  (define ygoal (goal) (ret (a (list #$ProjectGoal #$AndrewDougherty #$FRDCSAProject *test*) #$BaseKB)))
23.12.18 05:41:24<aindilis> cyc: (ygoal "Tmp")
23.12.18 05:41:25<aindilis> NIL
23.12.18 05:41:28<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:41:42<aindilis> cyc: (all-term-assertions #$ProjectGoal)
23.12.18 05:41:43<aindilis> ("#<AS" ("#$ProjectGoal" "#$AndrewDougherty" "#$FRDCSAProject" "Document PrologMUD") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
23.12.18 05:41:46<aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 05:41:50<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 05:41:53<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 05:41:56<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 05:41:59<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:42:02<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:42:06<aindilis> ...
23.12.18 05:42:08<aindilis>  (define ygoal (goal) (ret (cyc-assert (list #$ProjectGoal #$AndrewDougherty #$FRDCSAProject goal) #$BaseKB)))
23.12.18 05:42:17<aindilis> cyc: (ygoal "Implement Persistence")
23.12.18 05:42:18<aindilis> NIL
23.12.18 05:42:24<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)
23.12.18 05:42:25<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:42:38<aindilis> cyc: (define ygoals? () (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt))
23.12.18 05:42:39<aindilis> YGOALS?
23.12.18 05:42:40<aindilis> ygoals?
23.12.18 05:42:43<aindilis> (ygoals?)
23.12.18 05:42:45<aindilis> cyc: (ygoals?)
23.12.18 05:42:49<aindilis> NIL
23.12.18 05:42:55<aindilis> cyc: (define ygoals? () (ret (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)))
23.12.18 05:42:56<aindilis> YGOALS?
23.12.18 05:42:58<aindilis> cyc: (ygoals?)
23.12.18 05:43:01<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:43:17<aindilis> cyc: (ygoal "Implement Persistence")
                 <aindilis> NIL
23.12.18 05:43:28<aindilis> cyc: (all-term-assertions #$ProjectGoal)
23.12.18 05:43:29<aindilis> ("#<AS" ("#$ProjectGoal" "#$AndrewDougherty" "#$FRDCSAProject" "Document PrologMUD") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
                 <aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 05:43:32<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 05:43:35<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
23.12.18 05:43:39<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 05:43:41<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 05:43:44<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:43:47<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:43:50<aindilis> ...
23.12.18 05:45:30<aindilis>  (define ygoal (goal) (ret (cyc-assert (list #$ProjectGoal #$AndrewDougherty #$FRDCSAProject goal) #$BaseKB)))
23.12.18 05:45:44<aindilis> cyc: (all-term-assertions #$ProjectGoal)
23.12.18 05:45:45<aindilis> ("#<AS" ("#$ProjectGoal" "#$AndrewDougherty" "#$FRDCSAProject" "Document PrologMUD") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
                 <aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 05:45:48<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 05:45:50<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
23.12.18 05:45:53<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 05:45:57<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 05:46:00<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:46:03<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:46:06<aindilis> ...
23.12.18 05:46:09<aindilis> cyc: (ygoal "Implement Persistence")
23.12.18 05:46:11<aindilis> NIL
23.12.18 05:46:14<aindilis> cyc: (all-term-assertions #$ProjectGoal)
23.12.18 05:46:17<aindilis> ("#<AS" ("#$ProjectGoal" "#$AndrewDougherty" "#$FRDCSAProject" "Document PrologMUD") ":" "BaseKB" ">")
23.12.18 05:46:20<aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
23.12.18 05:46:27<aindilis> (ygoals?)
23.12.18 05:46:37<aindilis> cyc: (ygoals?)
23.12.18 05:46:41<aindilis> cyc: (ygoal?)
23.12.18 05:46:52<aindilis> cyc: (ygoals?)
23.12.18 05:47:12<aindilis> cyc: (ygoals?)
23.12.18 05:47:13<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:47:21<aindilis> cyc: (ygoal "Implement Persistence")
23.12.18 05:47:22<aindilis> NIL
23.12.18 05:47:23<aindilis> cyc: (ygoals?)
23.12.18 05:47:24<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:47:34<aindilis> cyc: (ygoal "\"Implement Persistence\"")
23.12.18 05:47:35<aindilis> NIL
23.12.18 05:47:36<aindilis> cyc: (ygoals?)
23.12.18 05:47:37<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:47:56<aindilis>  (define ygoal (goal) (ret (cyc-assert (quote (list #$ProjectGoal #$AndrewDougherty #$FRDCSAProject goal)) #$BaseKB)))
23.12.18 05:48:05<aindilis> cyc: (ygoal "\"Implement Persistence\"")
23.12.18 05:48:06<aindilis> NIL
23.12.18 05:48:08<aindilis> cyc: (ygoals?)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:48:32<aindilis> (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Implement Persistence") #$BaseKB)
23.12.18 05:48:35<aindilis> cyc: (ygoals?)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:48:52<aindilis> (cyc-assert '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Implement Persistence") #$BaseKB)
23.12.18 05:49:08<aindilis> cyc: (ygoals?)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:49:10<aindilis> (cyc-assert '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Implement Persistence") #$BaseKB)
23.12.18 05:49:43<aindilis> (cyc-assert '(#$ProjectGoal #$AndrewDougherty
                 <aindilis>       #$FRDCSAProject "Implement Persistence") #$FRDCSAMt)
23.12.18 05:49:46<aindilis> cyc: (ygoals?)
23.12.18 05:49:47<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:50:01<aindilis> (define ygoals? () (ret (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)))
23.12.18 05:50:03<aindilis> cyc: (ygoals?)
23.12.18 05:50:04<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:50:09<aindilis> (define ygoals? () (ret (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$FRDCSAMt)))
23.12.18 05:50:11<aindilis> cyc: (ygoals?)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Document PrologMUD"))
23.12.18 05:50:20<aindilis> cyc: (all-term-assertions #$ProjectGoal)
                 <aindilis> ("#<AS" ("#$ProjectGoal" "#$AndrewDougherty" "#$FRDCSAProject" "Document PrologMUD") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
23.12.18 05:50:23<aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 05:50:26<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 05:50:30<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
23.12.18 05:50:33<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 05:50:36<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 05:50:39<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:50:41<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:50:44<aindilis> ...
23.12.18 05:51:35<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Document PrologMUD") #$BaseKB)
                 <aindilis> T
23.12.18 05:51:48<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Implement Persistence") #$BaseKB)
23.12.18 05:51:49<aindilis> T
23.12.18 05:51:51<aindilis> cyc: (ygoals?)
23.12.18 05:51:52<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "Implement Persistence"))
23.12.18 05:52:31<aindilis> cyc: (u '(#$arg3Isa #$ProjectGoal #$CharacterString) #$BaseKB)
                 <aindilis> T
23.12.18 05:53:33<aindilis> cyc: (a '(#$arg3Isa #$ProjectGoal #$GoalText #$Goal) #$BaseKB)
23.12.18 05:53:43<aindilis> cyc: (a '(#$arg3Isa #$ProjectGoal #$Goal) #$BaseKB)
23.12.18 05:53:44<aindilis> T
23.12.18 05:53:59<aindilis> (func-1 "goalFn" #$CharacterString #$Goal)
23.12.18 05:54:12<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "Implement Persistence") #$BaseKB)
23.12.18 05:54:13<aindilis> T
23.12.18 05:54:15<aindilis> (func-1 "goalFn" #$CharacterString #$Goal)
23.12.18 05:54:27<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Implement Persistence")) #$BaseKB)
23.12.18 05:54:32<aindilis> cyc: (ygoals?)
23.12.18 05:54:33<aindilis> NIL
23.12.18 05:54:46<aindilis> cyc: (func-1 "goalFn" #$CharacterString #$Goal)
23.12.18 05:54:47<aindilis> NIL
23.12.18 05:55:03<aindilis> cyc: (comment #$Goal)
                 <aindilis> "Typically, this attribute characterizes relationships holding between Cyc formulas and a particular agent when the formula describes a state of affairs that the agent intends to take steps to actualize, i.e., when actualizing the state of affairs is a goal of the agent.  However, it might also be seen as an attribute of the relationship between the agent and the static situation depicted by that cyc formula (see #$StateFn
23.12.18 05:55:13<aindilis> cyc: (all-term-assertions #$goalFn)
23.12.18 05:55:14<aindilis> ("#<AS" ("#$isa" "#$goalFn" "#$UnaryFunction") ":" "UniversalVocabularyMt" ">")
                 <aindilis> ("#<AS" ("#$arity" "#$goalFn" "1") ":" "UniversalVocabularyMt" ">")
23.12.18 05:55:17<aindilis> ("#<AS" ("#$arg1Isa" "#$goalFn" "#$CharacterString") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$argIsa" "#$goalFn" "1" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 05:55:20<aindilis> ("#<AS" ("#$resultIsa" "#$goalFn" "#$Goal") ":" "BaseKB" ">")
23.12.18 05:55:32<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Implement Persistence")) #$BaseKB)
23.12.18 05:55:33<aindilis> T
23.12.18 05:55:36<aindilis> cyc: (ygoals?)
23.12.18 05:55:37<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "Implement Persistence"))
23.12.18 05:55:46<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Document PrologMUD")) #$BaseKB)
23.12.18 05:55:47<aindilis> NIL
23.12.18 05:56:02<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Document PrologMUD")) #$BaseKB)
                 <aindilis> NIL
23.12.18 05:56:20<aindilis> cyc: (ygoals?)
23.12.18 05:56:21<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "Implement Persistence"))
23.12.18 05:56:27<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Document PrologMUD")) #$BaseKB)
23.12.18 05:56:28<aindilis> NIL
23.12.18 05:56:38<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Document")) #$BaseKB)
23.12.18 05:56:39<aindilis> NIL
23.12.18 05:57:01<aindilis> cyc: (#$goalFn "test")
23.12.18 05:57:22<aindilis> cyc: (all-instances #$Goal)
                 <aindilis> NIL
23.12.18 05:57:47<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Implement Persistence")) #$BaseKB)
                 <aindilis> NIL
23.12.18 05:57:49<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Implement Persistence")) #$BaseKB)
23.12.18 05:57:50<aindilis> NIL
23.12.18 05:57:57<aindilis> cyc: (ygoals?)
23.12.18 05:57:58<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "Implement Persistence"))
23.12.18 05:58:02<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Implement Persistence")) #$BaseKB)
23.12.18 05:58:03<aindilis> T
23.12.18 05:58:08<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "wtf")) #$BaseKB)
                 <aindilis> T
23.12.18 05:58:11<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "wtf2")) #$BaseKB)
23.12.18 05:58:16<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "wtf2")) #$BaseKB)
23.12.18 05:58:17<aindilis> NIL
23.12.18 05:58:32<aindilis> cyc (comment #$CharacterString)
23.12.18 05:58:35<aindilis> cyc: (comment #$CharacterString)
                 <aindilis> "A specialization of #$AbstractInformationStructure.  Each instance of #$CharacterString is a string of characters or an abstract sequence of symbols.  Note that an instance of #$CharacterString is <i>not</i> any particular physical, tangible representation, since different encodings may represent the same string of characters.  An instance of #$CharacterString is a list (see the collection #$List) of characters (instances
23.12.18 06:00:51<aindilis> cyc: (u '(#$arg3Isa #$ProjectGoal #$CharacterString) #$BaseKB)
23.12.18 06:00:52<aindilis> T
23.12.18 06:00:55<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "wtf2")) #$BaseKB)
23.12.18 06:00:56<aindilis> NIL
23.12.18 06:01:00<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "Test")) #$BaseKB)
                 <aindilis> NIL
23.12.18 06:01:11<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn ?X)) #$BaseKB)
23.12.18 06:01:12<aindilis> T
23.12.18 06:01:14<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "wtf2")) #$BaseKB)
23.12.18 06:01:15<aindilis> NIL
23.12.18 06:01:21<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test") #$BaseKB)
23.12.18 06:01:22<aindilis> NIL
23.12.18 06:01:28<aindilis> cyc: (ygoals?)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "wtf"))
23.12.18 06:01:40<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "wtf")) #$BaseKB)
                 <aindilis> T
23.12.18 06:01:42<aindilis> cyc: (ygoals?)
23.12.18 06:01:43<aindilis> NIL
23.12.18 06:01:49<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test") #$BaseKB)
                 <aindilis> NIL
23.12.18 06:01:55<aindilis> cyc: (all-term-assertions #$ProjectGoal)
23.12.18 06:01:56<aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
23.12.18 06:01:59<aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 06:02:02<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 06:02:06<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
23.12.18 06:02:09<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 06:02:11<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 06:02:14<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 06:02:17<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 06:02:20<aindilis> ("#<AS" ("#$factGatheringUnspecifiableArgPosition" "#$ProjectGoal" "2") ":" "BaseKB" ">")
23.12.18 06:02:24<aindilis> ...
23.12.18 06:02:34<aindilis> cyc: (u '(#$factGatheringUnspecifiableArgPosition #$ProjectGoal 2) #$BaseKB)
23.12.18 06:02:35<aindilis> T
23.12.18 06:02:38<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test") #$BaseKB)
                 <aindilis> NIL
23.12.18 06:02:59<aindilis> cyc: (q '(#$arg3Isa #$ProjectGoal ?X) #$BaseKB)
                 <aindilis> ((var-X "." "#$Goal"))
23.12.18 06:03:11<aindilis> cyc: (u '(#$arg3Isa #$ProjectGoal #$Goal) #$BaseKB)
                 <aindilis> T
23.12.18 06:03:15<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test") #$BaseKB)
23.12.18 06:03:16<aindilis> T
23.12.18 06:03:19<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "great") #$BaseKB)
23.12.18 06:03:20<aindilis> NIL
23.12.18 06:03:23<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "fuck") #$BaseKB)
23.12.18 06:03:27<aindilis> NIL
23.12.18 06:03:28<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test") #$BaseKB)
23.12.18 06:03:32<aindilis> T
23.12.18 06:03:36<aindilis> cyc: (all-term-assertions #$ProjectGoal)
23.12.18 06:03:37<aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
23.12.18 06:03:40<aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 06:03:43<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 06:03:47<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
23.12.18 06:03:50<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 06:03:53<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 06:03:56<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 06:03:58<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 06:04:01<aindilis> ("#<AS" ("#$factGatheringUnspecifiableArgPosition" "#$ProjectGoal" "2") ":" "BaseKB" ">")
23.12.18 06:04:07<aindilis> cyc: (q '(#$arg3Isa #$ProjectGoal ?X) #$BaseKB)
23.12.18 06:04:11<aindilis> NIL
23.12.18 06:04:13<aindilis> cyc: (u '(#$arg3Isa #$ProjectGoal #$Thing) #$BaseKB)
23.12.18 06:04:17<aindilis> T
23.12.18 06:04:20<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test") #$BaseKB)
23.12.18 06:04:24<aindilis> T
23.12.18 06:04:27<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test2") #$BaseKB)
23.12.18 06:04:30<aindilis> T
23.12.18 06:04:33<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test3") #$BaseKB)
23.12.18 06:04:36<aindilis> T
23.12.18 06:04:41<aindilis> cyc: (ygoals?)
23.12.18 06:04:43<aindilis> NIL
23.12.18 06:04:47<aindilis> (define ygoals? () (ret (q '(#$ProjectGoal ?X
23.12.18 06:04:50<aindilis>       #$FRDCSAProject ?Y) #$BaseKB)))
23.12.18 06:04:54<aindilis> cyc: (define ygoals? () (ret (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)))
23.12.18 06:05:01<aindilis> YGOALS?
                 <aindilis> cyc: (ygoals?)
23.12.18 06:05:04<aindilis> NIL
23.12.18 06:05:07<aindilis> cyc: (pc (ygoals?))
23.12.18 06:05:19<aindilis> cyc: (q '(#$ProjectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)
23.12.18 06:05:22<aindilis> NIL
23.12.18 06:05:26<aindilis> cyc: (all-term-assertions #$ProjectGoal)
23.12.18 06:05:27<aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
23.12.18 06:05:30<aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 06:05:34<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
23.12.18 06:05:37<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 06:05:40<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 06:05:44<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 06:05:47<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 06:05:51<aindilis> ("#<AS" ("#$factGatheringUnspecifiableArgPosition" "#$ProjectGoal" "2") ":" "BaseKB" ">")
23.12.18 06:05:58<aindilis> cyc: (all-term-assertions #$ProjectGoal #$BaseKB)
23.12.18 06:06:01<aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
                 <aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 06:06:05<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 06:06:10<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 06:06:14<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 06:06:17<aindilis> cyc: (a '(#$arg3Isa #$ProjectGoal #$Thing) #$BaseKB)
23.12.18 06:06:21<aindilis> T
23.12.18 06:06:24<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test") #$BaseKB)
23.12.18 06:06:27<aindilis> T
23.12.18 06:06:30<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test2") #$BaseKB)
23.12.18 06:06:37<aindilis> T
                 <aindilis> cyc: (ygoals?)
23.12.18 06:06:40<aindilis> NIL
23.12.18 06:06:44<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test2") #$BaseKB)
23.12.18 06:06:48<aindilis> T
23.12.18 06:06:51<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test") #$BaseKB)
23.12.18 06:06:54<aindilis> NIL
23.12.18 06:07:01<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test3") #$BaseKB)
                 <aindilis> NIL
23.12.18 06:07:04<aindilis> cyc: (ygoals?)
23.12.18 06:07:07<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "." "test2"))
23.12.18 06:07:27<aindilis> cyc: (apropos "Rename")
23.12.18 06:07:28<aindilis> T
23.12.18 06:08:00<aindilis> cyc: (rename-constant #$ProjectGoal #$projectGoal)
23.12.18 06:08:18<aindilis> cyc: (arity 'rename-constant)
23.12.18 06:08:19<aindilis> NIL
23.12.18 06:08:27<aindilis> cyc: (subl-arity 'rename-constant)
                 <aindilis> NIL
23.12.18 06:08:41<aindilis> cyc: (documentation 'rename-constant)
                 <aindilis> NIL
23.12.18 06:09:24<dmiles> constant-rename ?
23.12.18 06:09:35<dmiles> i know one arg is the cosntant.. and the other is a string
23.12.18 06:10:04<aindilis> cyc: (rename-constant #$ProjectGoal "projectGoal")
23.12.18 06:10:05<aindilis> #$ProjectGoal
23.12.18 06:10:16<dmiles> (since you cant refer to the new name yet :P
23.12.18 06:10:25<aindilis> cyc: (all-term-assertions #$projectGoal)
23.12.18 06:10:26<aindilis> ("#<AS" ("#$ProjectGoal" "#$AndrewDougherty" "#$FRDCSAProject" "test2") ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$isa" "#$ProjectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
                 <aindilis> ("#<AS" ("#$arity" "#$ProjectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 06:10:29<aindilis> ("#<AS" ("#$arg1Isa" "#$ProjectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 06:10:32<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "1" "#$Person") ":" "BaseKB" ">")
23.12.18 06:10:36<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 06:10:39<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 06:10:41<aindilis> ("#<AS" ("#$arg2Isa" "#$ProjectGoal" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 06:10:43<aindilis> ("#<AS" ("#$argIsa" "#$ProjectGoal" "2" "#$CharacterString") ":" "BaseKB" ">")
23.12.18 06:10:46<dmiles> oh the javacode is caching the old nme
23.12.18 06:10:47<aindilis> ...
23.12.18 06:10:54<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject "test3") #$BaseKB)
23.12.18 06:10:57<aindilis> NIL
23.12.18 06:10:58<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test3") #$BaseKB)
23.12.18 06:11:01<aindilis> NIL
23.12.18 06:11:03<dmiles> in the browser it be updated
23.12.18 06:11:05<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test4") #$BaseKB)
23.12.18 06:11:08<aindilis> NIL
23.12.18 06:11:22<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test2") #$BaseKB)
23.12.18 06:11:23<aindilis> T
23.12.18 06:11:26<aindilis> cyc: (u '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test3") #$BaseKB)
23.12.18 06:11:27<aindilis> T
23.12.18 06:11:33<aindilis> cyc: (ygoals?)
                 <aindilis> NIL
23.12.18 06:11:43<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$GoalFn "test4")) #$BaseKB)
23.12.18 06:11:44<aindilis> T
23.12.18 06:11:46<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$GoalFn "test5")) #$BaseKB)
23.12.18 06:11:47<aindilis> NIL
23.12.18 06:12:10<aindilis> I think this is where I got hung up the last time I tried to define goals
23.12.18 06:12:48<dmiles> where exactly ?
23.12.18 06:13:01<dmiles> (is that you got hungout at)
23.12.18 06:13:06<aindilis> the fact that I can't have multiple of (#$GoalFn "string") (#$GoalFn "string2")
23.12.18 06:13:13<aindilis> in the 3rd arg position of projectogal
23.12.18 06:13:32<dmiles> ah .. you can
23.12.18 06:13:34<aindilis> see the first assertion test4 succeeds but then test5
23.12.18 06:13:35<aindilis> fails
23.12.18 06:13:45<aindilis> how then?
23.12.18 06:13:48<dmiles> you need to look at how CollectionIntersectionFn worls
23.12.18 06:14:07<aindilis> cyc (comment #$CollectionIntersectionFn)
23.12.18 06:14:14<dmiles> facticalyl a VariaoleArirtyFjunction
23.12.18 06:14:34<aindilis> cyc: (comment #$CollectionIntersectionFn)
23.12.18 06:14:49<dmiles> what the string grepper?
23.12.18 06:14:50<aindilis> cyc: (constant-apropos "CollectionIntersectionFn")
23.12.18 06:15:01<aindilis> cyc: (constant-apropos "CollectionIntersectionsFn")
23.12.18 06:15:05<aindilis> cyc: (comment #$CollectionIntersectionsFn)
                 <dmiles> (constant-apropos "Collection.*Fn")
23.12.18 06:15:22<aindilis> cyc: (constant-apropos "Collection.*Fn")
23.12.18 06:16:05<aindilis> cyc: (comment #$CollectionIntersectionFn)
23.12.18 06:16:14<dmiles> "(CollectionIntersectionFn SET-OF-COLS) is the collection that is by definition the "collection-intersection" (see collectionIntersection) of all of the collections that are elements of the set SET-OF-COLS." 
23.12.18 06:16:30<aindilis> cyc: (comment #$CollectionIntersectionFn)
23.12.18 06:16:33<aindilis> "(#$CollectionIntersectionFn SET-OF-COLS) is the collection that is by definition the \"collection-intersection\" (see #$collectionIntersection) of all of the collections that are elements of the set SET-OF-COLS."
23.12.18 06:16:39<aindilis> sorry my instance got borked
23.12.18 06:16:49<dmiles> WEll this is an Intersection.. we are doign something diffenrt but we use the same Syntaxical assertions it is
23.12.18 06:17:54<aindilis> I'm not sure this is the problem, I cannot simultaneous assert (projectgoals ... "goal 1") (projectgoals ... "goal 2")
23.12.18 06:18:02<aindilis> or (#$GoalFn "goal 1")
23.12.18 06:18:03<aindilis> etc
                 <dmiles> oh i ma making your things more complex sice it might be the problem is is veryt simple
23.12.18 06:18:20<dmiles> you jsut want ther eto be 1-to-many>?
23.12.18 06:18:26<dmiles> One project many goals?
23.12.18 06:18:37<aindilis> many projects many goals
23.12.18 06:18:43<aindilis> but for a given project, many goals
23.12.18 06:18:52<dmiles> (not tryuing to make a wird new tpye of super goal?)
23.12.18 06:19:03<aindilis> probably not
23.12.18 06:19:24<dmiles> ok right.. what you want shoudl worlk.. what is failing about it?
23.12.18 06:19:44<aindilis> asserting projectgoals "goal2" is failing
23.12.18 06:19:51<dmiles> it might not work btw over hte java API since you are makijng a NAUT and not a NART
23.12.18 06:20:12<dmiles> but not work ver the java API
23.12.18 06:20:18<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject "test2") #$BaseKB)
23.12.18 06:20:30<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject "test2") #$BaseKB)
23.12.18 06:20:31<aindilis> NIL
23.12.18 06:20:36<dmiles> since the API cant tell the difernt between those.. so you started out by making the wrong one
23.12.18 06:20:39<aindilis> hrm I'll have to restart
23.12.18 06:20:59<aindilis> cyc: (rename-constant #$projectGoals "ProjectGoals")
23.12.18 06:21:05<dmiles> (it made the worng one by mistake the very fist try)
23.12.18 06:21:49<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "test2")) #$BaseKB)
23.12.18 06:21:55<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "test2")) #$BaseKB)
23.12.18 06:21:56<aindilis> NIL
23.12.18 06:22:00<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "test")) #$BaseKB)
                 <aindilis> NIL
23.12.18 06:22:05<aindilis> cyc: (ygoals?)
23.12.18 06:22:06<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "test4"))
23.12.18 06:22:10<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "test4")) #$BaseKB)
23.12.18 06:22:11<aindilis> T
23.12.18 06:22:18<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
                 <aindilis> NIL
23.12.18 06:22:23<aindilis> cyc: (a '(#$Projectgoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
23.12.18 06:22:39<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
23.12.18 06:22:40<aindilis> NIL
23.12.18 06:22:43<aindilis> cyc: (a '(#$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
23.12.18 06:22:47<aindilis> cyc: (a '(#$projectGoals #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
23.12.18 06:23:01<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "test4")) #$BaseKB)
23.12.18 06:23:02<aindilis> T
23.12.18 06:23:05<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "blah")) #$BaseKB)
23.12.18 06:23:06<aindilis> T
23.12.18 06:23:07<dmiles> the return results btw dont mean suces failure here
23.12.18 06:23:16<aindilis> cyc: (ygoals?)
                 <dmiles> it means if it was Qued or not
23.12.18 06:23:17<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "test4"))
23.12.18 06:23:26<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "test4")) #$BaseKB)
23.12.18 06:23:27<aindilis> T
23.12.18 06:23:29<aindilis> cyc: (ygoals?)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "test4"))
23.12.18 06:23:38<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$GoalFn "test4")) #$BaseKB)
23.12.18 06:23:39<aindilis> T
23.12.18 06:23:40<aindilis> cyc: (ygoals?)
23.12.18 06:23:41<aindilis> NIL
23.12.18 06:23:47<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
23.12.18 06:23:48<aindilis> T
23.12.18 06:23:50<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:23:54<aindilis> NIL
23.12.18 06:23:56<aindilis> that's the problem, last two lines
23.12.18 06:24:15<dmiles> ok.. is (#$goalFn "goal 2") supposed ot be a NAUT or a NART ?
23.12.18 06:24:32* aindilis doens't know the difference for shame
23.12.18 06:24:46<dmiles> a NART is a First Order object and NAUTS arnt
23.12.18 06:25:08<dmiles> ideas a NAUTs
23.12.18 06:25:19<dmiles> hrmr best way to say it
23.12.18 06:25:39<dmiles> (love joe sally) is a sentents but it is not yet an asertion
23.12.18 06:25:42<aindilis> well the idea is simply to have a database of goals in CYC in NL (too lazy to code in CycL) in lieu of SKSI
23.12.18 06:26:13<dmiles> so  (#$goalFn "goal 2")  is a concept but not yet an entiryty
23.12.18 06:26:14<aindilis> cyc: (all-instances #$FRDCSAInternalCodebase #$FRDCSAMt)
23.12.18 06:26:15<aindilis> ("#$frdcsaInternalCodebaseFn" "akahige")
                 <aindilis> ("#$frdcsaInternalCodebaseFn" "all")
                 <aindilis> ("#$frdcsaInternalCodebaseFn" "alleyoop")
23.12.18 06:26:19<aindilis> ("#$frdcsaInternalCodebaseFn" "antispam-console")
23.12.18 06:26:22<aindilis> ("#$frdcsaInternalCodebaseFn" "antispam-node")
23.12.18 06:26:25<aindilis> ("#$frdcsaInternalCodebaseFn" "apartment-finder")
23.12.18 06:26:27<dmiles> those are NARTS
23.12.18 06:26:28<aindilis> ("#$frdcsaInternalCodebaseFn" "architect")
23.12.18 06:26:32<aindilis> ("#$frdcsaInternalCodebaseFn" "assess")
23.12.18 06:26:35<aindilis> ("#$frdcsaInternalCodebaseFn" "audience")
                 <aindilis> ...
23.12.18 06:26:38<aindilis> see that works
23.12.18 06:26:52<dmiles> you made them "Reifiable Functions"
23.12.18 06:26:55<aindilis> ah
23.12.18 06:26:59<aindilis> cyc: (all-isa #$frdcsaInternalCodebaseFn)
23.12.18 06:27:00<aindilis> "#$FixedArityFunction"
                 <aindilis> "#$FixedArityRelation"
                 <aindilis> "#$UnaryRelation"
23.12.18 06:27:03<aindilis> "#$FunctionalRelation"
23.12.18 06:27:06<aindilis> "#$StrictlyFunctionalRelation"
23.12.18 06:27:09<aindilis> "#$AtemporalThing"
23.12.18 06:27:11<aindilis> "#$AspatialThing"
23.12.18 06:27:14<aindilis> "#$AbstractThing"
23.12.18 06:27:18<aindilis> ("#<" ("#$CollectionUnionFn" ("#$TheSet" "#$ComputerStorageDevice" "#$AbstractIndividual")) ">")
23.12.18 06:27:21<aindilis> ...
23.12.18 06:27:28<aindilis> cyc: (q '(#$isa #$frdcsaInternalCodebaseFn ?X) #$BaseKB)
23.12.18 06:27:31<aindilis> ((var-X "." "#$Thing"))
23.12.18 06:27:34<aindilis> ((var-X "." "#$Location-Underspecified"))
23.12.18 06:27:37<aindilis> ((var-X "." "#$NonPersonThing"))
23.12.18 06:27:39<aindilis> ((var-X "." "#$PartiallyIntangible"))
23.12.18 06:27:41<aindilis> ((var-X "#$CollectionDifferenceFn" "#$Thing" "#$PerceptualAgent"))
                 <dmiles> what is $goalFn?
23.12.18 06:27:44<aindilis> ((var-X "#$CollectionDifferenceFn" "#$Thing" "#$PotentiallyExtrinsicallyValuable"))
23.12.18 06:27:47<aindilis> ((var-X "." "#$Trajector-Underspecified"))
23.12.18 06:27:50<aindilis> ((var-X "." "#$Intangible"))
23.12.18 06:27:54<aindilis> ((var-X "." "#$Individual"))
23.12.18 06:27:57<aindilis> cyc: (q '(#$isa #$frdcsaInternalCodebaseFn #$ReifiableFunction) #$BaseKB)
23.12.18 06:28:00<aindilis> NIL
23.12.18 06:28:08<aindilis> cyc: (t-or-f (q '(#$isa #$frdcsaInternalCodebaseFn #$ReifiableFunction) #$BaseKB))
                 <aindilis> "false"
23.12.18 06:28:11<aindilis> cyc: (constant-apropos "Reifiable)
23.12.18 06:28:17<aindilis> cyc: (constant-apropos "Reifiable")
23.12.18 06:28:20<aindilis> "#$CycLReifiableDenotationalTerm"
23.12.18 06:28:23<dmiles> well i am just not chosing the reigt way to say this
23.12.18 06:28:24<aindilis> "#$CycLReifiableNonAtomicTerm"
23.12.18 06:28:27<aindilis> "#$CycSecureReifiableFunction"
23.12.18 06:28:30<aindilis> "#$CyclishGlossaryEntry-ReifiableDenotationalTerm"
23.12.18 06:28:33<aindilis> "#$CyclishGlossaryEntry-ReifiableNon-AtomicDenotationalTerm"
23.12.18 06:28:36<aindilis> "#$ForwardReifiableCycLFunctor"
23.12.18 06:28:40<aindilis> "#$InverseBinaryPredicateFn-Unreifiable"
23.12.18 06:28:41<aindilis> "#$KBIT-FunctionsShouldBeReifiableOrUnreifiable"
23.12.18 06:29:01<dmiles> cyc: (q '(#$isa #$goalFn ?X) #$BaseKB)
23.12.18 06:29:20<dmiles> what was GoalFn ?
23.12.18 06:29:35<aindilis> a later implemenation of the same thing (forgot about goalFn)
23.12.18 06:29:46<dmiles> i think i see two issures at play 
23.12.18 06:29:58<aindilis> cyc: (set-difference (q '(all-isa #$goalFn)) (q '(all-isa #$frdcsaInternalCodebaseFn)))
23.12.18 06:29:59<aindilis> NIL
23.12.18 06:30:08<dmiles> one has to do with  StrictlyFunctionalRelation
23.12.18 06:30:16<aindilis> cyc: (set-difference (list "a" "b") (list "a" "c"))
                 <aindilis> "b"
                 <aindilis> "a"
23.12.18 06:30:43<dmiles> and the otehr has to do wioth projectGoal
23.12.18 06:31:30<dmiles> i'd need ot see there assertions that created them
23.12.18 06:32:48<aindilis> (define pred-3 (constant-string arg1isa arg2isa arg3isa &optional mt-arg)
                 <aindilis>  (clet ((constant (find-or-create-constant constant-string))
                 <aindilis>         (mt (get-mt mt-arg)))
                 <aindilis>   (a (list #$isa constant #$TernaryPredicate) mt)
23.12.18 06:32:51<aindilis>   (alt
23.12.18 06:32:53<aindilis>    (list
23.12.18 06:32:57<aindilis>     (list (non-nil arg1isa) (list #$arg1Isa constant arg1isa))
23.12.18 06:33:00<aindilis>     (list (non-nil arg2isa) (list #$arg2Isa constant arg2isa))
23.12.18 06:33:03<aindilis>     (list (non-nil arg3isa) (list #$arg2Isa constant arg3isa))
23.12.18 06:33:06<aindilis>     )
23.12.18 06:33:09<aindilis>    mt)
23.12.18 06:33:11<aindilis>   (pif *subl-debug*
23.12.18 06:33:14<aindilis>    (c constant))))
23.12.18 06:33:19<aindilis> oops
23.12.18 06:33:25<aindilis> (define func-1 (constant-string arg1isa resultisa &optional mt-arg)
23.12.18 06:33:28<aindilis>  (clet ((constant (find-or-create-constant constant-string))
23.12.18 06:33:32<aindilis>         (mt (get-mt mt-arg)))
23.12.18 06:33:35<aindilis>   (a (list #$isa constant #$UnaryFunction) mt)
                 <aindilis>   (alt
23.12.18 06:33:38<aindilis>    (list
23.12.18 06:33:41<aindilis>     (list (non-nil arg1isa) (list #$arg1Isa constant arg1isa))
23.12.18 06:33:44<aindilis>     (list (non-nil resultIsa) (list #$resultIsa constant resultisa))
23.12.18 06:33:47<aindilis>     )
23.12.18 06:33:51<aindilis>    mt)
23.12.18 06:33:54<aindilis>   (pif *subl-debug*
23.12.18 06:33:57<aindilis>    (c constant))))
23.12.18 06:34:53<dmiles> so far so good.. now lets see whet your pred-3 call was
23.12.18 06:34:59<dmiles> (and your fuct-1)
23.12.18 06:35:32<aindilis> #<AS:(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")):#$B                                                                                 
                 <aindilis> BaseKB>                                                                                                                                                        
23.12.18 06:35:33<aindilis> #<AS:(#$isa #$projectGoal #$TernaryPredicate):#$UniversalVocabularyMt>                                                                                         
                 <aindilis> #<AS:(#$arity #$projectGoal 3):#$UniversalVocabularyMt>                                                                                                        
23.12.18 06:35:36<aindilis> #<AS:(#$arg1Isa #$projectGoal #$Person):#$BaseKB>                                                                                                              
23.12.18 06:35:39<aindilis> #<AS:(#$argIsa #$projectGoal 1 #$Person):#$BaseKB>                                                                                                             
23.12.18 06:35:41<aindilis> #<AS:(#$arg2Isa #$projectGoal #$Project):#$BaseKB>                                                                                                             
23.12.18 06:35:45<aindilis> #<AS:(#$argIsa #$projectGoal 2 #$Project):#$BaseKB>                                                                                                            
23.12.18 06:35:48<aindilis> #<AS:(#$arg2Isa #$projectGoal #$CharacterString):#$BaseKB>                                                                                                     
23.12.18 06:35:51<aindilis> #<AS:(#$argIsa #$projectGoal 2 #$CharacterString):#$BaseKB>                                                                                                    
23.12.18 06:35:55<aindilis> #<AS:(#$factGatheringUnspecifiableArgPosition #$projectGoal 2):#$BaseKB>                                                                                       
23.12.18 06:35:58<aindilis> #<AS:(#$arg3Isa #$projectGoal #$Thing):#$BaseKB>                                                                                                               
23.12.18 06:36:01<aindilis> #<AS:(#$argIsa #$projectGoal 3 #$Thing):#$BaseKB> 
23.12.18 06:36:05<aindilis> CYC(250): (c #$frdcsaInternalCodebaseFn )                                                                                                                      
                 <aindilis> (c #$frdcsaInternalCodebaseFn )                                                                                                                                
23.12.18 06:36:08<aindilis> all-term-assertions:                                                                                                                                           
23.12.18 06:36:11<aindilis> #<AS:(#$isa #$frdcsaInternalCodebaseFn #$UnaryFunction):#$UniversalVocabularyM                                                                                 
23.12.18 06:36:14<aindilis> Mt>                                                                                                                                                            
23.12.18 06:36:17<aindilis> #<AS:(#$arity #$frdcsaInternalCodebaseFn 1):#$UniversalVocabularyMt>                                                                                           
23.12.18 06:36:20<aindilis> #<AS:(#$resultIsa #$frdcsaInternalCodebaseFn #$FRDCSAInternalCodebase):#$BaseK                                                                                 
23.12.18 06:36:27<aindilis> KB>          
23.12.18 06:36:30<aindilis> CYC(251): (c #$goalFn )                                                                                                                                        
23.12.18 06:36:32<aindilis> (c #$goalFn )                                                                                                                                                  
23.12.18 06:36:37<aindilis> all-term-assertions:                                                                                                                                           
23.12.18 06:36:40<aindilis> #<AS:(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")):#$B                                                                                 
23.12.18 06:36:41<aindilis> BaseKB>                                                                                                                                                        
23.12.18 06:36:44<aindilis> #<AS:(#$isa #$goalFn #$UnaryFunction):#$UniversalVocabularyMt>                                                                                                 
23.12.18 06:36:47<aindilis> #<AS:(#$arity #$goalFn 1):#$UniversalVocabularyMt>                                                                                                             
23.12.18 06:36:50<aindilis> #<AS:(#$arg1Isa #$goalFn #$CharacterString):#$BaseKB>                                                                                                          
23.12.18 06:36:55<aindilis> #<AS:(#$argIsa #$goalFn 1 #$CharacterString):#$BaseKB>                                                                                                         
23.12.18 06:36:58<aindilis> #<AS:(#$resultIsa #$goalFn #$Goal):#$BaseKB>   
23.12.18 06:37:03<aindilis> cyc: (u '(#$arg1Isa #$goalFn #$CharacterString) #$BaseKB)
23.12.18 06:37:06<aindilis> T
23.12.18 06:37:11<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)                                                                                 
23.12.18 06:37:14<aindilis> NIL
23.12.18 06:37:17<aindilis> cyc: (ygoals?)
23.12.18 06:37:20<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 1"))
23.12.18 06:37:27<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)                                                                                 
23.12.18 06:37:31<aindilis> T
23.12.18 06:37:34<dmiles> ah maker it a "#$CycLReifiableDenotationalTerm"
                 <aindilis> cyc: (ygoals?)
23.12.18 06:37:38<aindilis> NIL
23.12.18 06:37:41<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
                 <aindilis> T
23.12.18 06:37:44<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:37:47<aindilis> NIL
23.12.18 06:37:50<aindilis> cyc: (ygoals?)
23.12.18 06:37:54<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 1"))
23.12.18 06:37:58* dmiles get sthe exact kind that it should be
23.12.18 06:38:00<aindilis> cyc: (a '(#$isa #$goalFn #$CycLReifiableDenotationalTerm) #$BaseKB)
23.12.18 06:38:03<aindilis> NIL
23.12.18 06:38:14<aindilis> cyc: (constant-apropos "CycLReifiableDenotationalTerm")
23.12.18 06:38:15<aindilis> "#$CycLReifiableDenotationalTerm"
23.12.18 06:38:26<dmiles> ReifiableFunction
23.12.18 06:38:38<dmiles> jsut make it a ReifiableFunction
23.12.18 06:38:42<aindilis> cyc: (a '(#$isa #$goalFn #$ReifiableFunction) #$BaseKB)
23.12.18 06:38:43<aindilis> T
23.12.18 06:38:47<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:38:48<aindilis> NIL
23.12.18 06:38:51<aindilis> cyc: (ygoals?)
23.12.18 06:38:52<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 1"))
23.12.18 06:39:03<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)                                                                                 
23.12.18 06:39:04<aindilis> T
23.12.18 06:39:05<dmiles> the first term is in there as the wrong kind though
23.12.18 06:39:10<dmiles> oh
23.12.18 06:39:11<dmiles> i see
23.12.18 06:39:12<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
23.12.18 06:39:13<aindilis> T
23.12.18 06:39:15<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:39:16<aindilis> NIL
23.12.18 06:39:21<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB
23.12.18 06:39:23<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB
23.12.18 06:39:27<dmiles> (isa  (#$goalFn "goal 2") #$Goal)
23.12.18 06:39:31<aindilis> cyc: (u '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
23.12.18 06:39:34<aindilis> T
23.12.18 06:39:45<aindilis> cyc: (q '(#$isa (#$goalFn "goal 2") #$Goal) #$BaseKB)
23.12.18 06:39:46<dmiles> or atleast make it a Thing 
                 <aindilis> "NIL"
23.12.18 06:40:19<dmiles> cyc: (q '(#$isa (#$goalFn "goal 2") ?w) #$BaseKB)
23.12.18 06:40:34<aindilis> cyc: (q '(#$isa (#$goalFn "goal 2") ?w) #$BaseKB)
23.12.18 06:40:35<aindilis> ((var-W "." "#$GraphicalStructure"))
                 <aindilis> ((var-W "." "#$CycLExpression-Assertible"))
                 <aindilis> ((var-W "." "#$Intangible"))
                 <dmiles> cyc: (q '(#$isa (#$goalFn "goal 1") ?W) #$BaseKB)
23.12.18 06:40:38<aindilis> ((var-W "." "#$AspatialInformationStore"))
23.12.18 06:40:41<aindilis> ((var-W "." "#$TextString"))
23.12.18 06:40:44<aindilis> ((var-W "." "#$PartiallyIntangibleIndividual"))
23.12.18 06:40:47<aindilis> ((var-W "#$CollectionDifferenceFn" "#$Thing" "#$PotentiallyExtrinsicallyValuable"))
23.12.18 06:40:50<aindilis> ((var-W "#$CollectionUnionFn" ("#$TheSet" "#$ComputerStorageDevice" "#$AbstractIndividual")))
23.12.18 06:40:54<aindilis> ((var-W "." "#$AbstractThing"))
23.12.18 06:40:57<aindilis> ...
23.12.18 06:41:24<dmiles> cyc: (q '(#$isa (#$goalFn "goal 1") ?W) #$BaseKB)
23.12.18 06:41:27<aindilis> cyc: (u '(#$resultIsa #$goalFn #$Goal) #$BaseKB)
23.12.18 06:41:28<aindilis> T
23.12.18 06:41:33<aindilis> cyc: (a '(#$resultIsa #$goalFn #$Thing) #$BaseKB)
23.12.18 06:41:34<aindilis> T
23.12.18 06:41:40<aindilis> cyc: (q '(#$isa (#$goalFn "goal 1") ?W) #$BaseKB)
23.12.18 06:41:41<aindilis> ((var-W "." "#$Thing"))
23.12.18 06:41:48<aindilis> cyc: (ygoals?)
                 <aindilis> NIL
23.12.18 06:41:54<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 1")) #$BaseKB)
23.12.18 06:41:55<aindilis> T
23.12.18 06:41:57<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:41:58<aindilis> NIL
23.12.18 06:42:01<aindilis> cyc: (ygoals?)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 1"))
23.12.18 06:42:05<dmiles> see what is happening is that Cyc is negatleing to make it an isntance of something
23.12.18 06:42:16<dmiles> it hasnt been "Thingified"
23.12.18 06:42:27<aindilis> cyc: (a '(#$isa #$goalFn #$ReifiableFunction) #$BaseKB)
23.12.18 06:42:28<aindilis> T
23.12.18 06:42:29<dmiles> (GOals are fine as well
23.12.18 06:42:30<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:42:31<aindilis> NIL
23.12.18 06:42:41<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$GoalFn "goal 2")) #$BaseKB)
                 <aindilis> NIL
23.12.18 06:42:52<dmiles> before tryignm to assert it try to see if it can be made ot exist at all
23.12.18 06:43:09<aindilis> how?
23.12.18 06:43:34<aindilis> cyc: (q '(#$goalFn "goal 2") #$BaseKB)
23.12.18 06:43:35<aindilis> NIL
23.12.18 06:43:39<aindilis> cyc: (q '(#$goalFn "goal 1") #$BaseKB)
23.12.18 06:43:40<aindilis> NIL
23.12.18 06:43:48<aindilis> cyc: (q '(#$isa (#$goalFn "goal 1") ?X) #$BaseKB)
23.12.18 06:43:49<aindilis> ((var-X "." "#$Thing"))
23.12.18 06:44:04<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject '(#$goalFn "goal 2")) #$BaseKB)
                 <aindilis> NIL
23.12.18 06:44:11<dmiles> cyc: (q '(#$isa (#$goalFn "goal 3) ?X) #$BaseKB)
23.12.18 06:44:18<aindilis> cyc: (q '(#$isa (#$goalFn "goal 3") ?X) #$BaseKB)
23.12.18 06:44:19<aindilis> ((var-X "." "#$Thing"))
23.12.18 06:44:22<dmiles> cyc: (q '(#$isa (#$goalFn "goal 3") ?X) #$BaseKB)
23.12.18 06:44:29<aindilis> cyc: (q '(#$isa (#$goalFn "goal 3") ?X) #$BaseKB)
23.12.18 06:44:30<aindilis> ((var-X "." "#$Thing"))
23.12.18 06:44:54<dmiles> cyc: (q '(#$equals (#$goalFn "goal 3") (#$goalFn "goal 10")) #$BaseKB)
23.12.18 06:45:03<aindilis> cyc: (q '(#$equals (#$goalFn "goal 3") (#$goalFn "goal 10")) #$BaseKB)
23.12.18 06:45:04<aindilis> NIL
23.12.18 06:45:12<aindilis> cyc: (t-or-f (q '(#$equals (#$goalFn "goal 3") (#$goalFn "goal 10")) #$BaseKB))
23.12.18 06:45:13<aindilis> "false"
23.12.18 06:45:26<aindilis> cyc: (t-or-f (q '(#$equals (#$goalFn "goal 3") (#$goalFn "goal 3")) #$BaseKB))
                 <aindilis> "true"
23.12.18 06:45:44<dmiles> what ios arg3Format of  projectGoal ?
23.12.18 06:46:06<aindilis> cyc: (q '(#$arg3Format #$projectGoal ?X) #$BaseKB)
23.12.18 06:46:07<dmiles> (We want ot to be SetTheFormat)
23.12.18 06:46:08<aindilis> NIL
23.12.18 06:46:20<aindilis> cyc: (a '(#$arg3Format #$projectGoal #$SetTheFormat) #$BaseKB)
23.12.18 06:46:21<aindilis> T
23.12.18 06:46:22<aindilis> cyc: (q '(#$arg3Format #$projectGoal ?X) #$BaseKB)
23.12.18 06:46:23<aindilis> ((var-X "." "#$SetTheFormat"))
23.12.18 06:46:30<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$GoalFn "goal 2")) #$BaseKB)
23.12.18 06:46:31<aindilis> NIL
23.12.18 06:46:35<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:46:36<aindilis> NIL
23.12.18 06:47:23<dmiles> btw arg2Isa is wrong ?
23.12.18 06:47:41<dmiles> cyc: (q '(#$arg2Isa #$projectGoal ?X) #$BaseKB)
23.12.18 06:47:58<aindilis> cyc: (u '(#genlMt #$FRDCSAMt #$BaseKB) #$UniversalVocabularyMt)
                 <aindilis> NIL
23.12.18 06:48:05<aindilis> cyc: (u '(#$genlMt #$FRDCSAMt #$BaseKB) #$UniversalVocabularyMt)
23.12.18 06:48:06<aindilis> T
23.12.18 06:48:10<dmiles> cyc (+ 1 1 )
23.12.18 06:48:11<aindilis> cyc: (u '(#$genlMt #$BaseKB #$FRDCSAMt) #$UniversalVocabularyMt)
23.12.18 06:48:12<aindilis> T
23.12.18 06:48:13<dmiles> cyc: (+ 1 1 )
23.12.18 06:48:16<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$GoalFn "goal 2")) #$BaseKB)
                 <aindilis> NIL
23.12.18 06:48:22<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:48:23<aindilis> NIL
23.12.18 06:48:28<aindilis> cyc: (+ 1 1)
23.12.18 06:48:29<aindilis> "2"
23.12.18 06:48:46<dmiles> cyc: (q '(#$arg2Isa #$projectGoal ?X) #$BaseKB)
23.12.18 06:49:07<dmiles> you declared it a String right?
23.12.18 06:49:17<aindilis> try again
23.12.18 06:49:19<aindilis> with the cyc:
23.12.18 06:49:28<dmiles> [03:35] <aindilis> #<AS:(#$argIsa #$projectGoal 2 #$CharacterString):#$BaseKB>                  
23.12.18 06:49:55<dmiles> cyc: (q '(#$arg2Isa #$projectGoal ?X) #$BaseKB)
23.12.18 06:50:22<dmiles> cyc: (q '(#$arg2Isa #$projectGoal ?X) #$EverythingPSC)
23.12.18 06:50:25<aindilis> cyc: (q '(#$arg2Isa #$projectGoal ?X) #$EverythingPSC)
23.12.18 06:50:26<aindilis> ((var-X "." "#$CharacterString"))
                 <aindilis> ((var-X "." "#$Project"))
23.12.18 06:50:36<aindilis> cyc: (u '(#$argIsa #$projectGoal 2 #$CharacterString) #$BaseKB)
23.12.18 06:50:37<aindilis> T
23.12.18 06:50:42<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
                 <aindilis> NIL
23.12.18 06:50:54<aindilis> cyc: (q '(#$arg2Isa #$projectGoal ?X) #$EverythingPSC)
                 <aindilis> ((var-X "." "#$CharacterString"))
23.12.18 06:50:55<aindilis> ((var-X "." "#$Project"))
23.12.18 06:51:04<aindilis> cyc: (u '(#$argIsa 2 #$projectGoal #$CharacterString) #$BaseKB)
23.12.18 06:51:05<aindilis> T
23.12.18 06:51:08<aindilis> cyc: (q '(#$arg2Isa #$projectGoal ?X) #$EverythingPSC)
                 <aindilis> ((var-X "." "#$CharacterString"))
                 <aindilis> ((var-X "." "#$Project"))
23.12.18 06:51:17<aindilis> cyc: (u '(#$arg2Isa #$projectGoal #$CharacterString) #$BaseKB)
23.12.18 06:51:18<dmiles> ah the agenda was stopped
                 <aindilis> T
23.12.18 06:51:24<aindilis> cyc: (q '(#$arg2Isa #$projectGoal ?X) #$EverythingPSC)
23.12.18 06:51:25<aindilis> ((var-X "." "#$Project"))
                 <dmiles> is stopped
23.12.18 06:51:28<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 2")) #$BaseKB)
23.12.18 06:51:29<aindilis> T
23.12.18 06:51:32<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn "goal 3")) #$BaseKB)
23.12.18 06:51:36<aindilis> T
23.12.18 06:51:39<aindilis> cyc: (ygoals?)
23.12.18 06:51:40<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 3"))
23.12.18 06:51:44<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 2"))
23.12.18 06:51:47<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 1"))
23.12.18 06:52:04<aindilis> cyc: (all-term-assertions #$projectGoal)
23.12.18 06:52:05<aindilis> ("#<AS" ("#$projectGoal" "#$AndrewDougherty" "#$FRDCSAProject" ("#<" ("#$goalFn" "goal 1") ">")) ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$projectGoal" "#$AndrewDougherty" "#$FRDCSAProject" ("#<" ("#$goalFn" "goal 2") ">")) ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$projectGoal" "#$AndrewDougherty" "#$FRDCSAProject" ("#<" ("#$goalFn" "goal 3") ">")) ":" "BaseKB" ">")
23.12.18 06:52:08<aindilis> ("#<AS" ("#$isa" "#$projectGoal" "#$TernaryPredicate") ":" "UniversalVocabularyMt" ">")
23.12.18 06:52:11<aindilis> ("#<AS" ("#$arity" "#$projectGoal" "3") ":" "UniversalVocabularyMt" ">")
23.12.18 06:52:14<aindilis> ("#<AS" ("#$arg1Isa" "#$projectGoal" "#$Person") ":" "BaseKB" ">")
23.12.18 06:52:18<aindilis> ("#<AS" ("#$argIsa" "#$projectGoal" "1" "#$Person") ":" "BaseKB" ">")
23.12.18 06:52:20<aindilis> ("#<AS" ("#$arg2Isa" "#$projectGoal" "#$Project") ":" "BaseKB" ">")
23.12.18 06:52:22<dmiles> why is it workign now?
23.12.18 06:52:24<aindilis> ("#<AS" ("#$argIsa" "#$projectGoal" "2" "#$Project") ":" "BaseKB" ">")
23.12.18 06:52:27<aindilis> ...
23.12.18 06:52:31<dmiles> (was it jsut taking a fe wyot update?
23.12.18 06:52:35<aindilis> unasserted arg2isa projectGoal characterstring
23.12.18 06:53:09<dmiles> oh i see now
23.12.18 06:53:22<dmiles> i mena sec3erlty that really would made a differnce
23.12.18 06:53:34<dmiles> other thna the fact it wanted to gripe at yuou
23.12.18 06:53:50<dmiles> and once it was in grioping mood it wasnt take more
23.12.18 06:54:07<aindilis> cyc: (all-term-assertions #$goalFn)
23.12.18 06:54:08<aindilis> ("#<AS" ("#$termOfUnit" ("#<" ("#$goalFn" "goal 1") ">") ("#$goalFn" "goal 1")) ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$termOfUnit" ("#<" ("#$goalFn" "goal 2") ">") ("#$goalFn" "goal 2")) ":" "BaseKB" ">")
                 <aindilis> ("#<AS" ("#$termOfUnit" ("#<" ("#$goalFn" "goal 3") ">") ("#$goalFn" "goal 3")) ":" "BaseKB" ">")
23.12.18 06:54:11<aindilis> ("#<AS" ("#$isa" "#$goalFn" "#$UnaryFunction") ":" "UniversalVocabularyMt" ">")
23.12.18 06:54:14<aindilis> ("#<AS" ("#$arity" "#$goalFn" "1") ":" "UniversalVocabularyMt" ">")
23.12.18 06:54:17<aindilis> ("#<AS" ("#$isa" "#$goalFn" "#$ReifiableFunction") ":" "UniversalVocabularyMt" ">")
23.12.18 06:54:20<aindilis> ("#<AS" ("#$resultIsa" "#$goalFn" "#$Thing") ":" "BaseKB" ">")
23.12.18 06:54:38<aindilis> (func-1 "goalFn2" nil #$Thing)
23.12.18 06:54:47<dmiles> btw..  ("#<AS" ("#$termOfUnit" ("#<" ("#$goalFn" "goal 2") ">") ("#$goalFn" "goal 2")) ":" "BaseKB" ">")
23.12.18 06:54:52<aindilis> cyc: (a '(#$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn2 "goal 3")) #$BaseKB)
23.12.18 06:54:56<dmiles> meanst it made a NART and A NAUT
23.12.18 06:55:13<aindilis> ah okay
23.12.18 06:55:28<dmiles> termOfUnit job is to make sure both instance live on
23.12.18 06:56:07<dmiles> which means CYC "thingified" it
23.12.18 06:56:19<dmiles> (its Reified)
23.12.18 06:56:36<dmiles> sometimes you have to tell it .. some days you dont
23.12.18 06:56:50<dmiles> docs say you do
23.12.18 06:56:55<dmiles> practice says you dont
23.12.18 06:57:31<dmiles> reifier a Goal makes as much sense as reifiying a number (it doesnt)
23.12.18 06:57:43<dmiles> reifyinh a Goal makes as much sense as reifiying a number (it doesnt :P)
23.12.18 06:58:07<dmiles> so i am happy it didnt make you!
23.12.18 06:58:10<aindilis> do you have to reify an existential
23.12.18 06:58:44<dmiles> existentials may or mayt not be reified.. its really up to how much it exists
23.12.18 06:59:00<dmiles> that is how distinguable it is for otehrs
23.12.18 06:59:05<dmiles> from others
23.12.18 06:59:37<dmiles> liek    is the "1" the same one in two diffenrt equations ?
23.12.18 07:00:02<aindilis> ah
23.12.18 07:00:08<dmiles> 1+1 the same one or two differnt onces?
23.12.18 07:00:15<dmiles> 1+1 the same one or two differnt ones?
23.12.18 07:00:36<aindilis> is (goalFn "goal 1") or (GoalFn "goal 1") proper?
23.12.18 07:00:42<dmiles> PRoper
23.12.18 07:00:48<dmiles> Functions are UpperCased
23.12.18 07:00:54<aindilis> ty
23.12.18 07:01:58<dmiles> if we have the same (GoalFn "Be Happy")  they are problaby not the *same* goal ?
23.12.18 07:02:58<dmiles> or are tehy the same ?
23.12.18 07:03:21<aindilis> (define ygoal (goal) (ret (cyc-assert (list #$ProjectGoal #$AndrewDougherty #$FRDCSAProject goal) #$BaseKB)))
23.12.18 07:03:28<dmiles> (probly why i am talking about this is i only 80% understand it)
23.12.18 07:04:01<aindilis> (define ygoal (goal) (ret (cyc-assert (list #$ProjectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn goal)) #$BaseKB)))
23.12.18 07:04:11<aindilis> (define ygoal (goal) (ret (cyc-assert (list #$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn goal)) #$BaseKB)))
23.12.18 07:04:16<aindilis> cyc: (define ygoal (goal) (ret (cyc-assert (list #$projectGoal #$AndrewDougherty #$FRDCSAProject (#$goalFn goal)) #$BaseKB)))
23.12.18 07:04:17<aindilis> YGOAL
23.12.18 07:04:44<aindilis> (ygoal "Learn about CYC")
23.12.18 07:04:48<aindilis> cyc: (ygoal "Learn about CYC")
23.12.18 07:05:11<aindilis> cyc: (define ygoal (goal) (ret (cyc-assert (list #$projectGoal #$AndrewDougherty #$FRDCSAProject (list #$goalFn goal)) #$BaseKB)))
                 <aindilis> YGOAL
23.12.18 07:05:12<aindilis> cyc: (ygoal "Learn about CYC")
23.12.18 07:05:14<aindilis> T
23.12.18 07:05:20<aindilis> cyc: (ygoals?)
23.12.18 07:05:21<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "Learn about CYC"))
23.12.18 07:05:24<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 3"))
23.12.18 07:05:27<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 2"))
23.12.18 07:05:30<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "goal 1"))
23.12.18 07:06:00<aindilis> cyc: (define remove-ygoal (goal) (ret (cyc-unassert (list #$projectGoal #$AndrewDougherty #$FRDCSAProject (list #$goalFn goal)) #$BaseKB)))
                 <aindilis> REMOVE-YGOAL
23.12.18 07:06:09<aindilis> cyc: (remove-ygoal "goal 1"?)
23.12.18 07:06:11<aindilis> cyc: (remove-ygoal "goal 1")
23.12.18 07:06:12<aindilis> T
23.12.18 07:06:15<aindilis> cyc: (remove-ygoal "goal 2")
23.12.18 07:06:19<aindilis> T
23.12.18 07:06:22<aindilis> cyc: (remove-ygoal "goal 3")
23.12.18 07:06:25<aindilis> T
23.12.18 07:06:29<aindilis> cyc: (ygoals?)
23.12.18 07:06:44<aindilis> cyc: (ygoals?)
23.12.18 07:06:50<aindilis> cyc: (ygoals?)
23.12.18 07:06:53<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$goalFn" "Learn about CYC"))
23.12.18 07:06:56<aindilis> cool
23.12.18 07:07:06<aindilis> srry just coding it all up so I don't lose the progress we made
23.12.18 07:07:08<aindilis> sorry for that bug
23.12.18 07:07:12<aindilis> it gets hard to track things
23.12.18 07:07:32<aindilis> dmiles: probably not the same goal
23.12.18 07:07:39<aindilis> not in general
23.12.18 07:08:05<dmiles> i was thinking about what to do about my question
23.12.18 07:08:13<aindilis> restarting cyc instance with the code I recorded
23.12.18 07:08:47<dmiles> i think the answer is that when you set the resultIsa the type of thing it returns decided the comparablity
23.12.18 07:09:30<aindilis> I'm not sure how much of the extra stuff is necessary since we found that I had forgotten to unassert the #$CharacterString
23.12.18 07:09:33<aindilis> arg
23.12.18 07:09:45<dmiles> yeah dont worry about it for now
23.12.18 07:10:01<aindilis> yeah I won't, but this is cool to have goals sort of implemented
23.12.18 07:10:12<dmiles> yes!
23.12.18 07:10:25<dmiles> a win
                 <aindilis> now we need a way to relate them to CycLSentence
23.12.18 07:10:33<aindilis> thank you you did the hard work
23.12.18 07:10:49<aindilis> this is my debug style
23.12.18 07:10:55<aindilis> jsut throw a ton of stuff at it
23.12.18 07:11:02<aindilis> it's lazy
23.12.18 07:11:08<dmiles> sometimes htat works
23.12.18 07:11:17<aindilis> well it's the style I really only use
23.12.18 07:11:46<aindilis> okay so Cyc is loading up with MyKBs
23.12.18 07:12:10<aindilis> I suppose what I will work on next is a translator from FLP to CYC
23.12.18 07:12:26<aindilis> so I can query (q '(#$relatedSystems ?X ?Y) #$FRDCSAMt)
23.12.18 07:12:40<aindilis> and it will query SKSI like the FLP and build the responses
23.12.18 07:12:58<aindilis> since I have relatedSystems(frdcsa,[prologMUD]) etc
23.12.18 07:13:17<aindilis> I think you actually have some work on that
23.12.18 07:13:18<aindilis> ?
23.12.18 07:13:58<dmiles> is SKSI goign to use mySQL?
23.12.18 07:14:16<aindilis> well so I'm saying SKSI-like
23.12.18 07:14:38<dmiles>  you know my  questions intention
23.12.18 07:14:50<dmiles> know/knew
23.12.18 07:15:17<dmiles> yes .. so whenm i did tha ti made a Socket service
23.12.18 07:15:24* dmiles finding it
23.12.18 07:16:36<aindilis> I meant have work on exporting Cyc to Prolog and vice Versa
23.12.18 07:17:04<dmiles> exactly
23.12.18 07:17:09<dmiles> so that they call each other 
23.12.18 07:17:27<dmiles> cyc calls prolog when cyc uses certian predicates
                 <aindilis> could it be done with #$Eval
23.12.18 07:17:34<aindilis> ?
23.12.18 07:17:42<dmiles> yes
23.12.18 07:17:46<aindilis> cool
23.12.18 07:18:38<dmiles> https://github.com/logicmoo/old_logicmoo_workspace/blob/44025b6e389e2f2f7d86b46c1301cab0604bba26/pack/logicmoo_nlu/prolog/e2c/osim-sksi.lisp
23.12.18 07:19:21<aindilis> cyc: (ygoal "Implement SKSI")
23.12.18 07:19:24<aindilis> T
23.12.18 07:19:30<aindilis> cyc: (ygoals?)
23.12.18 07:19:31<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "Implement SKSI"))
23.12.18 07:19:35<aindilis> great, it's working now
23.12.18 07:19:44<aindilis> cyc: (ygoal "Document PrologMUD")
23.12.18 07:19:46<aindilis> T
23.12.18 07:19:47<aindilis> great, it's working now
23.12.18 07:19:49<aindilis> cyc: (ygoals?)
23.12.18 07:19:50<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "Document PrologMUD"))
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "Implement SKSI"))
23.12.18 07:20:22<aindilis> cyc: (remove-ygoal "Implement SKSI")
23.12.18 07:20:23<aindilis> T
23.12.18 07:20:25<aindilis> cyc: (ygoals?)
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "Document PrologMUD"))
23.12.18 07:20:41<aindilis> that's pretty intense (osim-sksi.lisp)
23.12.18 07:20:59<dmiles> yeah that was it "done right"
23.12.18 07:21:08<aindilis> wow
23.12.18 07:21:10<dmiles> but i think i have another version that is done good enough
23.12.18 07:23:27<aindilis> cyc: (parse-a-question-completely "Are sodium and chlorine the complete list of elements in the chemical formula of chloride?" #$AllLexicalMicrotheoryPSC)
23.12.18 07:23:42<aindilis> cyc: (parse-a-question-completely "Are sodium and chlorine the complete list of elements in the chemical formula of chloride?" #$AllLexicalMicrotheoryPSC)
23.12.18 07:24:42<aindilis> cyc: (= 1 2)
23.12.18 07:24:57<aindilis> cyc: (= 1 2)
23.12.18 07:25:02<aindilis> cyc: (= 1 2)
23.12.18 07:25:03<aindilis> NIL
23.12.18 07:25:07<aindilis> cyc: (+ 1 2)
                 <aindilis> "3"
23.12.18 07:26:31<dmiles> https://github.com/logicmoo/old_logicmoo_workspace/blob/44025b6e389e2f2f7d86b46c1301cab0604bba26/pack/logicmoo_nlu/prolog/e2c/osim.lisp#L996
23.12.18 07:27:02<dmiles> nope oops
23.12.18 07:29:04<aindilis> I think I want to make all of this work with an IRC bouncer is it called?  something that stays logged in and is relayed missed items, so that my erc-logging doesn't miss things
23.12.18 07:29:18<aindilis> and then compute SNA metrics from logs
23.12.18 07:30:03<aindilis> (ygoal "make all of this work with an IRC bouncer")
23.12.18 07:30:06<aindilis> cyc: (ygoal "make all of this work with an IRC bouncer")
23.12.18 07:30:07<aindilis> T
23.12.18 07:30:18<aindilis> cyc: (ygoal "compute SNA metrics from logs")
23.12.18 07:30:19<aindilis> T
23.12.18 07:30:25<aindilis> cyc: (ygoal "implement persistence")
23.12.18 07:30:26<aindilis> T
23.12.18 07:30:44<aindilis> cyc: (ygoal "extract I want to - for irc-kb")
23.12.18 07:30:45<aindilis> T
23.12.18 07:31:31<aindilis> cyc: (ygoal "extract I (really) should, etc - for irc-kb")
23.12.18 07:31:32<aindilis> T
23.12.18 07:31:44<aindilis> cyc: (ygoals?)
23.12.18 07:31:45<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "extract I (really) should, etc - for irc-kb"))
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "extract I want to - for irc-kb"))
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "implement persistence"))
23.12.18 07:31:48<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "compute SNA metrics from logs"))
23.12.18 07:31:51<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "make all of this work with an IRC bouncer"))
23.12.18 07:31:54<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "Document PrologMUD"))
23.12.18 07:32:56<aindilis> cyc: (define dgoals? () (ret (q '(#$projectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)))
23.12.18 07:32:57<aindilis> DGOALS?
23.12.18 07:33:06<aindilis> cyc: (define dgoal (goal) (ret (cyc-assert (list #$projectGoal #$DouglasMiles #$FRDCSAProject (list #$GoalFn goal)) #$BaseKB)))
                 <aindilis> DGOAL
23.12.18 07:33:14<aindilis> cyc: (define remove-dgoal (goal) (ret (cyc-unassert (list #$projectGoal #$DouglasMiles #$FRDCSAProject (list #$GoalFn goal)) #$BaseKB)))
                 <aindilis> REMOVE-DGOAL
23.12.18 07:33:24<dmiles> found it ! https://github.com/logicmoo/old_logicmoo_workspace/blob/44025b6e389e2f2f7d86b46c1301cab0604bba26/pack/logicmoo_nlu/prolog/e2c/cynd/osim.lisp#L753-L799
23.12.18 07:33:34<aindilis> (dgoal "build the PrologMUD community")
23.12.18 07:33:41<aindilis> cyc: (dgoal "build the PrologMUD community")
23.12.18 07:33:42<aindilis> T
23.12.18 07:33:47<aindilis> cyc: (dgoals?)
23.12.18 07:33:48<aindilis> ((var-X "." "#$DouglasMiles") (var-Y "#$GoalFn" "build the PrologMUD community"))
                 <aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "extract I (really) should, etc - for irc-kb"))
23.12.18 07:33:51<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "extract I want to - for irc-kb"))
23.12.18 07:33:54<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "implement persistence"))
23.12.18 07:33:57<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "compute SNA metrics from logs"))
23.12.18 07:34:01<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "make all of this work with an IRC bouncer"))
23.12.18 07:34:04<aindilis> ((var-X "." "#$AndrewDougherty") (var-Y "#$GoalFn" "Document PrologMUD"))
23.12.18 07:34:09<aindilis> dmiles: awesome, thx!
23.12.18 07:34:59<aindilis> cyc: (define dgoals? () (ret (q '(#$projectGoal #$DouglasMiles #$FRDCSAProject ?Y) #$BaseKB)))
23.12.18 07:35:00<aindilis> DGOALS?
23.12.18 07:35:07<aindilis> cyc: (define ygoals? () (ret (q '(#$projectGoal #$AndrewDougherty #$FRDCSAProject ?Y) #$BaseKB)))
23.12.18 07:35:08<aindilis> YGOALS?
23.12.18 07:35:11<aindilis> cyc: (dgoals?)
23.12.18 07:35:12<aindilis> ((var-Y "#$GoalFn" "build the PrologMUD community"))
23.12.18 07:35:43<aindilis> cyc: (define goals? () (ret (q '(#$projectGoal ?X #$FRDCSAProject ?Y) #$BaseKB)))
23.12.18 07:35:44<aindilis> GOALS?
23.12.18 07:35:57<aindilis> cyc: (constant-apropos "PrologMUD")
23.12.18 07:35:58<aindilis> "#$PrologMUD-TheProgram"
23.12.18 07:36:03<aindilis> cyc: (constant-apropos "LogicMOO")
23.12.18 07:36:04<aindilis> "#$LogicMOO-TheProgram"
23.12.18 07:37:46<dmiles> indeed
23.12.18 07:38:45<aindilis> cyc: (all-instances #$PossibleFRDCSACollaborator)
                 <aindilis> NIL
23.12.18 07:38:51<aindilis> cyc: (all-instances #$PossibleFRDCSACollaborator #$POSICommunityMt)
23.12.18 07:38:52<aindilis> "#$KevinReeves"
                 <aindilis> "#$StephenSchuresko"
                 <aindilis> "#$JosephDougherty"
23.12.18 07:38:55<aindilis> "#$JohnOliver"
23.12.18 07:38:58<aindilis> "#$HarrisRosen"
23.12.18 07:39:02<aindilis> "#$LeBronJames"
23.12.18 07:39:05<aindilis> "#$JKRowling"
23.12.18 07:39:08<aindilis> "#$GeorgeLucas"
23.12.18 07:39:11<aindilis> "#$ShaileneWoodley"
23.12.18 07:39:14<aindilis> ...
23.12.18 07:39:17<aindilis> cyc: (pc (all-instances #$PossibleFRDCSACollaborator #$POSICommunityMt))
23.12.18 07:39:20<aindilis> "#$KevinReeves #$StephenSchuresko #$JosephDougherty #$JohnOliver #$HarrisRosen #$LeBronJames #$JKRowling #$GeorgeLucas #$ShaileneWoodley #$JimOberweis #$MelGibson #$JodieFoster #$ManojBhargava #$MikeIllitch #$WillSmith #$JoelOsteen #$JodyAllen #$SarahSilverman #$MarkKantrowitz (#$personHavingIRCAliasFn #$Eazar001-IRCAlias) (#$personHavingIRCAliasFn #$Mohith) (#$personHavingIRCAliasFn #$Chrono-IRCAlias) #$WilliamBraswell #$
23.12.18 07:39:27<aindilis> donors count as possible collaborators
23.12.18 07:39:35<aindilis> *possible donors
23.12.18 07:41:28<aindilis> I always wanted to have a recruitment bot, I have a few partially implemented
23.12.18 07:41:37<aindilis> evangelist, jane 
23.12.18 07:42:41<aindilis> cyc: (pc (all-instances #$FRDCSACollaborator #$POSICommunityMt))
                 <aindilis> "#$JessBalint #$JustinCoslor #$AndrewDougherty #$DouglasMiles #$MeredithMcGhan #$JamesChoate #$KevinReeves #$MichaelIltis "
23.12.18 07:43:39<aindilis> cyc: (all-term-assertions #$FRDCSAThesis)
23.12.18 07:43:51<aindilis> cyc: (constant-apropos "FRDCSAThesis")
23.12.18 07:43:52<aindilis> "#$SubscribesToTheFRDCSAThesis"
                 <aindilis> "#$TheFRDCSAThesisHeldByMembersOfTheFRDCSA"
23.12.18 07:44:03<aindilis> cyc: (all-term-assertions #$TheFRDCSAThesisHeldByMembersOfTheFRDCSA)
23.12.18 07:44:04<aindilis> NIL
23.12.18 07:45:34<aindilis> dmiles: well thanks so much for your help tonight, sorry it was a bit slow at times
23.12.18 07:45:50<aindilis> s/it/my debugging process/
23.12.18 07:46:13<dmiles> np! i gettign a lot done on the Event Calc
23.12.18 07:46:19<aindilis> nice!
23.12.18 07:46:40<aindilis> cyc: (constant-apropos "Calculus")
23.12.18 07:46:42<aindilis> "#$Calculus"
                 <aindilis> "#$Calculus-TheWord"
23.12.18 07:46:44<aindilis> "#$MKMAlternativeProofOfTheFundamentalTheoremOfCalculus"
23.12.18 07:46:46<aindilis> "#$MKMApplicationOfFundamentalTheoremOfIntegralCalculus"
23.12.18 07:46:49<aindilis> "#$MKMArchimedesCalculus"
23.12.18 07:46:52<aindilis> "#$MKMBorelFunctionalCalculus"
23.12.18 07:46:55<aindilis> "#$MKMCalculusOfSubgroupOrders"
23.12.18 07:46:58<aindilis> "#$MKMCalculusOfVariations"
23.12.18 07:47:03<aindilis> "#$MKMCalgebraHomomorphismsPreserveContinuousFunctionalCalculus"
23.12.18 07:47:06<aindilis> ...
23.12.18 07:47:09<aindilis> cyc: (constant-apropos "EventCalculus")
23.12.18 07:47:11<aindilis> NIL
23.12.18 07:47:14<aindilis> cyc: (constant-apropos "ErikTMueller")
23.12.18 07:47:17<aindilis> NIL
23.12.18 07:47:20<aindilis> cyc: (constant-apropos "ErikMueller")
23.12.18 07:47:24<aindilis> NIL
                 <dmiles> oh neat that stuff is newly gathered
23.12.18 07:47:33<dmiles> the MKM stuff
23.12.18 07:47:37<aindilis> yeah!
23.12.18 07:48:12<aindilis> I should be able to create a latex document string function
23.12.18 07:48:18<aindilis> and assert the doc strings
23.12.18 07:48:30<aindilis> that is an example of something that should really be SKSI or equivalent
23.12.18 07:50:01<aindilis> cyc: (constant-apropos "IMAP")
23.12.18 07:50:02<aindilis> "#$ApacheDirective-CGIMapExtension"
                 <aindilis> "#$CardiacValveProsthesis-PrimaPlusStentlessAortic"
                 <aindilis> "#$CityOfLimaPeru"
23.12.18 07:50:05<aindilis> "#$CyrusIMAP-TheProgram"
23.12.18 07:50:08<aindilis> "#$Dimapur-District-India"
23.12.18 07:50:11<aindilis> "#$IMAPI-TheProgram"
23.12.18 07:50:14<aindilis> "#$IMAPServer-Network"
23.12.18 07:50:17<aindilis> "#$IMAPServerProgram"
23.12.18 07:50:20<aindilis> "#$Imapd-TheProgram"
23.12.18 07:50:24<aindilis> ...
23.12.18 07:51:32<aindilis> I was thinking that the NLU needs to be able to compare the linguistic semantics to the meaning inherent in the KB
23.12.18 07:51:48<aindilis> so like WN semantics and then probe the KB for models
23.12.18 07:52:09<aindilis> so that if I add a default rule that penguins don't fly
23.12.18 07:52:37<aindilis> it incorporates that somehow into the search, and if I remove it, it is removed from the search
23.12.18 07:53:27<aindilis> basically look at the actual meanings in the KB, instead of shallow surface mappings between words and constants
23.12.18 07:53:38<aindilis> idk if that's how it's implemented currently in e2c
23.12.18 07:54:06<aindilis> cyc: (constant-apropos "ComputationalSemantics")
23.12.18 07:54:07<aindilis> NIL
23.12.18 07:55:12<dmiles> well it tries to map what is said to into things that have fully (KB undestood) meainfg
23.12.18 07:56:17<aindilis> https://frdcsa.org/~andrewdo/dmiles/research-ontology.txt
23.12.18 07:56:29<dmiles> in some cases it interntally misaunderstand to enforce things making sense
23.12.18 07:56:51<aindilis> I can slurp these in using a similar (#$ResearchArea "computational semantics")
23.12.18 07:57:38<dmiles> like "I had some coffee" means that i wasnt holding a cup.. but i drank some
23.12.18 07:57:53<dmiles> like "I had some coffee" means that i drank some
23.12.18 07:58:00<aindilis> yeah
23.12.18 07:58:04<dmiles> (more imporant than vavinfg  acup)
23.12.18 07:58:14<aindilis> well that's pragmatics, right?
23.12.18 07:58:24<aindilis> implicature
23.12.18 07:58:37<aindilis> cyc: (constant-apropos "pragmatics")
23.12.18 07:58:39<aindilis> "#$NoteAboutNewPragmaticsPreds"
                 <aindilis> "#$Pragmatics"
                 <aindilis> "#$Pragmatics-TheWord"
23.12.18 07:58:41<aindilis> "#$TKBProbabilityPragmaticsMt"
23.12.18 07:58:44<aindilis> "#$isaOrGenls-ForPragmaticsOnly"
23.12.18 07:58:46<aindilis> "#$predQueryPragmatics"
23.12.18 07:58:52<aindilis> cyc: (comment #$pragmatics)
23.12.18 07:58:59<aindilis> cyc: (comment #$Pragmatics)
23.12.18 07:59:01<aindilis> "The subfield of #$Linguistics dealing with non-truth-conditional aspects of meaning.  This includes but is not limited to deixis, implicature, and conversational conventions."
23.12.18 07:59:38<aindilis> cyc: (all-term-assertions #$Pragmatics-TheWord)
23.12.18 07:59:39<aindilis> ("#<AS" ("#$regularAdverb" "#$Pragmatics-TheWord" "pragmatically") ":" "GeneralEnglishMt" ">")
                 <aindilis> ("#<AS" ("#$posForms" "#$Pragmatics-TheWord" "#$Adverb") ":" "GeneralEnglishMt" ">")
                 <aindilis> ("#<AS" ("#$regularDegree" "#$Pragmatics-TheWord" "pragmatic") ":" "GeneralEnglishMt" ">")
23.12.18 07:59:41<aindilis> ("#<AS" ("#$posForms" "#$Pragmatics-TheWord" "#$Adjective-Gradable") ":" "GeneralEnglishMt" ">")
23.12.18 07:59:44<aindilis> ("#<AS" ("#$massNumber" "#$Pragmatics-TheWord" "pragmatics") ":" "GeneralEnglishMt" ">")
23.12.18 07:59:47<aindilis> ("#<AS" ("#$posForms" "#$Pragmatics-TheWord" "#$MassNoun") ":" "GeneralEnglishMt" ">")
23.12.18 07:59:49<dmiles> the previoes version of E2C worked becaus iei had reasonable good domain setups
23.12.18 07:59:50<aindilis> ("#<AS" ("#$isa" "#$Pragmatics-TheWord" "#$EnglishWord") ":" "GeneralEnglishMt" ">")
23.12.18 07:59:54<aindilis> ("#<AS" ("#$denotation" "#$Pragmatics-TheWord" "#$MassNoun" "0" "#$Pragmatics") ":" "GeneralEnglishMt" ">")
23.12.18 07:59:57<aindilis> ("#<AS" ("#$isa" "#$Pragmatics-TheWord" "#$LexicalWord") ":" "UniversalVocabularyMt" ">")
23.12.18 08:00:40<aindilis> (cyc-query '(#$denotation #$Dog-TheWord ?X ?Y ?DENOTATION) #$GeneralEnglishMt)
23.12.18 08:00:42<aindilis> cyc: (cyc-query '(#$denotation #$Dog-TheWord ?X ?Y ?DENOTATION) #$GeneralEnglishMt)
23.12.18 08:00:43<aindilis> ((var-X "." "#$CountNoun") (var-Y "." "0") (var-DENOTATION "." "#$Dog"))
                 <aindilis> ((var-X "." "#$CountNoun") (var-Y "." "1") (var-DENOTATION "." "#$HotDog"))
23.12.18 08:00:45<dmiles> this new version works even better because it can invent really good domains 
23.12.18 08:01:52<dmiles> oh nice you are looking at the lisp code
23.12.18 08:02:45<aindilis> cyc: (cyc-capitalize-smart "hotdog")
23.12.18 08:02:46<aindilis> "Hotdog"
23.12.18 08:03:19<aindilis> (define definition (word) (cyc-query '(#$denotation (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:03:34<aindilis> (define definition (word) (cyc-query (list #$denotation (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:03:40<aindilis> (definition "dog")
23.12.18 08:03:44<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:03:45<aindilis> DEFINITION
23.12.18 08:03:47<aindilis> cyc: (definition "dog")
23.12.18 08:04:24<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (cyclify (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:04:25<aindilis> DEFINITION
23.12.18 08:04:26<aindilis> cyc: (definition "dog")
23.12.18 08:04:37<aindilis> cyc: (definition "dog")
23.12.18 08:04:52<aindilis> cyc: (cyclify "Dog")
23.12.18 08:06:53<dmiles> cyclify is designed to hit an API to a team of competing cyclifiers
23.12.18 08:07:10<aindilis> I'm trying to go from "Dog" to #$Dog
23.12.18 08:07:13<aindilis> guess (f
23.12.18 08:07:18<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (f (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:07:19<aindilis> "connected"
23.12.18 08:07:21<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (f (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:07:22<aindilis> DEFINITION
23.12.18 08:07:26<aindilis> cyc: (definition "dog")
23.12.18 08:07:37<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (see (f (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:07:38<aindilis> DEFINITION
23.12.18 08:07:39<aindilis> cyc: (definition "dog")
23.12.18 08:07:55<aindilis> cyc: (see (f (cyc-string-concat (list (cyc-capitalize-smart "dog") "-TheWord"))))
23.12.18 08:07:56<dmiles> cyc: (cyc-capitalize-smart "dog")
                 <aindilis> NIL
23.12.18 08:08:13<aindilis> cyc: (cyc-capitalize-smart "dog")
23.12.18 08:08:14<aindilis> "Dog"
23.12.18 08:08:20<dmiles> right on.. you debvugging the right way
23.12.18 08:09:06<aindilis> cyc: (cyc-string-concat (list (cyc-capitalize-smart "dog") "-TheWord"))))
                 <aindilis> "Dog-TheWord"
23.12.18 08:09:15<aindilis> cyc: (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart "dog") "-TheWord")))))
                 <aindilis> #$Dog-TheWord
23.12.18 08:09:26<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:09:27<aindilis> DEFINITION
23.12.18 08:09:30<aindilis> cyc: (definition "dog")
23.12.18 08:09:46<aindilis> cyc: (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart "dog") "-TheWord")))
                 <aindilis> #$Dog-TheWord
23.12.18 08:10:11<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:10:12<aindilis> DEFINITION
23.12.18 08:10:14<aindilis> cyc: (definition "dog")
23.12.18 08:10:50<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) X Y ?DENOTATION) #$GeneralEnglishMt))
                 <aindilis> DEFINITION
23.12.18 08:10:52<aindilis> cyc: (definition "dog")
23.12.18 08:11:27<aindilis> cyc: (define definition (word) (cyc-query (list #$thereExists (list ?X ?Y) (list #$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) ?X ?Y ?DENOTATION)) #$GeneralEnglishMt))
                 <aindilis> DEFINITION
23.12.18 08:11:29<aindilis> cyc: (definition "dog")
23.12.18 08:11:42<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:11:43<aindilis> DEFINITION
23.12.18 08:11:45<aindilis> cyc: (definition "dog")
23.12.18 08:12:13<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) #$CountNoun 0 ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:12:14<aindilis> DEFINITION
23.12.18 08:12:15<aindilis> cyc: (definition "dog")
23.12.18 08:12:43<aindilis> cyc: (define definition (word) (see (list #$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))) ?X ?Y ?DENOTATION))
23.12.18 08:13:04<aindilis> cyc: (define definition (word) (see (list #$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))))
23.12.18 08:13:05<aindilis> DEFINITION
23.12.18 08:13:07<aindilis> cyc: (definition "dog")
23.12.18 08:13:08<aindilis> NIL
23.12.18 08:13:28<aindilis> cyc: (define definition (word) (see (list #$denotation)))
23.12.18 08:13:29<aindilis> DEFINITION
                 <aindilis> cyc: (definition "dog")
23.12.18 08:13:30<aindilis> NIL
23.12.18 08:13:44<dmiles> does the filled in query do good stuff?
23.12.18 08:14:05<aindilis> cyc: (define definition (word) (cyc-query (list #$denotation #$Dog-TheWord ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
                 <aindilis> DEFINITION
23.12.18 08:14:07<aindilis> cyc: (definition "dog")
23.12.18 08:14:19<aindilis> cyc: (define definition (word) (cyc-query '(#$denotation #$Dog-TheWord ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
23.12.18 08:14:20<aindilis> DEFINITION
23.12.18 08:14:21<dmiles>  (cyc-query '(#$denotation #$Dog-TheWord ?X ?Y ?DENOTATION) #$GeneralEnglishMt)
23.12.18 08:14:22<aindilis> cyc: (definition "dog")
                 <aindilis> NIL
23.12.18 08:14:25<dmiles> oh you tested
23.12.18 08:14:39<aindilis> cyc: (define definition (word) (q '(#$denotation #$Dog-TheWord ?X ?Y ?DENOTATION) #$GeneralEnglishMt))
                 <aindilis> DEFINITION
23.12.18 08:14:48<aindilis> cyc: (define definition (word) (ret (cyc-query '(#$denotation #$Dog-TheWord ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:14:49<aindilis> DEFINITION
23.12.18 08:14:50<aindilis> cyc: (definition "dog")
23.12.18 08:14:51<aindilis> ((var-X "." "#$CountNoun") (var-Y "." "0") (var-DENOTATION "." "#$Dog"))
                 <aindilis> ((var-X "." "#$CountNoun") (var-Y "." "1") (var-DENOTATION "." "#$HotDog"))
23.12.18 08:14:58<dmiles> :)
23.12.18 08:14:59<aindilis> cyc: (define definition (word) (ret (cyc-query (list #$denotation #$Dog-TheWord ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:15:00<aindilis> DEFINITION
23.12.18 08:15:02<aindilis> cyc: (definition "dog")
23.12.18 08:15:23<dmiles> oh dang i thought hte query response wht the function return 
                 <aindilis> cyc: (define definition (word) (ret (cyc-query '(#$denotation dog ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:15:24<aindilis> DEFINITION
23.12.18 08:15:34<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:15:35<aindilis> NIL
23.12.18 08:15:47<aindilis> cyc: (define definition (word) (ret (cyc-query ,(#$denotation dog ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
                 <aindilis> DEFINITION
23.12.18 08:15:49<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:16:00<dmiles> backwuote
23.12.18 08:16:06<aindilis> cyc: (define definition (word) (ret (cyc-query `(#$denotation dog ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:16:07<aindilis> DEFINITION
23.12.18 08:16:08<aindilis> cyc: (definition #$Dog-TheWord)
                 <aindilis> NIL
23.12.18 08:16:17<dmiles> ,dog
23.12.18 08:16:24<aindilis> cyc: (define definition (word) (ret (cyc-query (list #$denotation ,dog ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:16:25<aindilis> DEFINITION
23.12.18 08:16:26<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:16:31<aindilis> cyc: (define definition (word) (ret (cyc-query ,(list #$denotation ,dog ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
                 <aindilis> DEFINITION
23.12.18 08:16:33<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:16:35<dmiles> heha
23.12.18 08:16:48<dmiles> define definition (word) (ret (cyc-query `(#$denotation ,dog ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:16:57<aindilis> cyc: (define definition (word) (ret (cyc-query `(#$denotation ,dog ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:16:58<aindilis> DEFINITION
                 <aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:17:22<aindilis> cyc: (define definition (word) (ret (cyc-query `(#$denotation ,dog ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:17:23<aindilis> DEFINITION
                 <dmiles> taking longer
23.12.18 08:17:24<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:17:38<aindilis> cyc: (define definition (word) (ret (cyc-query `(,#$denotation dog ?X ?Y ,?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:17:39<aindilis> DEFINITION
23.12.18 08:17:40<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:17:47<aindilis> cyc: (define definition (word) (ret (cyc-query `(,#$denotation dog ,?X ,?Y ,?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:17:48<aindilis> DEFINITION
23.12.18 08:17:50<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:17:52<dmiles> oh oh
23.12.18 08:18:00<aindilis> cyc: (define definition (word) (ret (cyc-query `(#$denotation ,dog '?X '?Y ?DENOTATION) #$GeneralEnglishMt)))
                 <aindilis> DEFINITION
23.12.18 08:18:02<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:18:04<dmiles> define definition (word) (ret (cyc-query `(#$denotation ,word ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:18:19<aindilis> cyc: (define definition (word) (ret (cyc-query `(#$denotation ,word ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:18:20<aindilis> DEFINITION
23.12.18 08:18:21<aindilis> cyc: (definition #$Dog-TheWord)
23.12.18 08:18:22<aindilis> ((var-X "." "#$CountNoun") (var-Y "." "0") (var-DENOTATION "." "#$Dog"))
23.12.18 08:18:25<aindilis> ((var-X "." "#$CountNoun") (var-Y "." "1") (var-DENOTATION "." "#$HotDog"))
23.12.18 08:18:40<aindilis> lol
23.12.18 08:18:42<aindilis> ty
23.12.18 08:19:17<aindilis> cyc: (define definition (word) (ret (cyc-query `(#$denotation (cyc-string-concat (list
23.12.18 08:19:18<aindilis>       (cyc-capitalize-smart ,word) "-TheWord")) ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:20:22<aindilis> cyc: (define definition (word) (ret (cyc-query `(#$denotation (cyc-string-concat (list (cyc-capitalize-smart ,word) "-TheWord")) ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:20:23<aindilis> DEFINITION
23.12.18 08:20:29<aindilis> cyc: (definition "dog")
23.12.18 08:20:30<aindilis> NIL
23.12.18 08:20:40<aindilis> (cyc-string-concat (list (cyc-capitalize-smart "dog") "-TheWord"))
23.12.18 08:20:44<aindilis> cyc: (cyc-string-concat (list (cyc-capitalize-smart "dog") "-TheWord"))
                 <aindilis> "Dog-TheWord"
23.12.18 08:20:55<aindilis> cyc: (define definition (word) (ret (cyc-query `(#$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart ,word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:20:56<aindilis> DEFINITION
23.12.18 08:20:59<aindilis> cyc: (definition "dog")
                 <aindilis> NIL
23.12.18 08:21:00<dmiles> btw was this and E2C function or one you just made up?
23.12.18 08:21:12<aindilis> no, srry, I just made it up
23.12.18 08:21:18<aindilis> cyc: (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart ,word) "-TheWord")))
23.12.18 08:21:24<aindilis> cyc: (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart "dog") "-TheWord")))
23.12.18 08:21:25<aindilis> #$Dog-TheWord
23.12.18 08:21:36<dmiles> since i made thisd exact function in both the prolog and lisp versions of E2C to :P
23.12.18 08:21:46<aindilis> nice!
23.12.18 08:22:31<aindilis> cyc: (define definition (word) (cletf ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))
23.12.18 08:23:02<aindilis> cyc: (define definition (word) (clet ((constant) (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")))) (ret (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))
23.12.18 08:23:03<aindilis> DEFINITION
23.12.18 08:23:07<aindilis> cyc: (definition "dog")
                 <aindilis> NIL
23.12.18 08:23:51<aindilis> cyc: (define definition (word) (clet ((constant) (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")))) (ret (see constant))))
23.12.18 08:23:52<aindilis> DEFINITION
23.12.18 08:23:53<aindilis> cyc: (definition "dog")
23.12.18 08:23:54<aindilis> NIL
23.12.18 08:24:04<aindilis> cyc: (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")))
23.12.18 08:24:08<aindilis> cyc: (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart "dog") "-TheWord")))
                 <aindilis> #$Dog-TheWord
23.12.18 08:24:21<aindilis> cyc: (define definition (word) (clet ((constant) #$Dog-TheWord) (ret (see constant))))
23.12.18 08:24:22<aindilis> DEFINITION
23.12.18 08:24:26<aindilis> cyc: (definition "dog")
23.12.18 08:24:50<aindilis> cyc: (define definition (word) (clet ((constant) #$Dog-TheWord) (ret constant)))
                 <aindilis> DEFINITION
23.12.18 08:24:51<aindilis> cyc: (definition "dog")
23.12.18 08:25:06<aindilis> cyc: (define definition (word) (clet ((constant) #$Dog-TheWord) constant))
23.12.18 08:25:07<aindilis> DEFINITION
23.12.18 08:25:08<aindilis> cyc: (definition "dog")
23.12.18 08:25:25<aindilis> cyc: (clet ((constant) #$Dog-TheWord) (ret constant))
23.12.18 08:25:43<aindilis> cyc: (clet ((constant #$Dog-TheWord)) (ret constant))
23.12.18 08:25:50<aindilis> cyc: (clet ((constant #$Dog-TheWord)) constant)
23.12.18 08:25:51<aindilis> #$Dog-TheWord
23.12.18 08:26:07<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (see constant))))
                 <aindilis> DEFINITION
23.12.18 08:26:09<aindilis> cyc: (definition "dog")
23.12.18 08:26:10<aindilis> NIL
23.12.18 08:26:49<aindilis> cyc: (define definition (word) (clet ((constant
                 <aindilis>       (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart
                 <aindilis>       word) "-TheWord"))))) (ret (cyc-query `(#$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart ,word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))
23.12.18 08:26:54<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (cyc-query `(#$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart ,word) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))
23.12.18 08:26:55<aindilis> DEFINITION
23.12.18 08:26:58<aindilis> cyc: (definition "dog")
23.12.18 08:27:01<aindilis> NIL
23.12.18 08:27:13<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (cyc-query `(#$denotation (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart ,constant) "-TheWord"))) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))
23.12.18 08:27:14<aindilis> DEFINITION
                 <aindilis> cyc: (definition "dog")
23.12.18 08:27:18<aindilis> NIL
23.12.18 08:27:31<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (cyc-query `(#$denotation (find-or-create-constant ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))
23.12.18 08:27:46<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (cyc-query `(#$denotation (find-or-create-constant ,constant) ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))
23.12.18 08:27:47<aindilis> DEFINITION
23.12.18 08:27:48<aindilis> cyc: (definition "dog")
23.12.18 08:27:49<aindilis> NIL
23.12.18 08:27:57<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (cyc-query `(#$denotation (find-or-create-constant ,constant ?X ?Y ?DENOTATION)) #$GeneralEnglishMt))))
23.12.18 08:27:58<aindilis> DEFINITION
23.12.18 08:27:59<aindilis> cyc: (definition "dog")
                 <aindilis> NIL
23.12.18 08:28:28<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))
23.12.18 08:28:29<aindilis> DEFINITION
23.12.18 08:28:30<aindilis> cyc: (definition "dog")
23.12.18 08:28:31<aindilis> ((var-X "." "#$CountNoun") (var-Y "." "0") (var-DENOTATION "." "#$Dog"))
23.12.18 08:28:34<aindilis> ((var-X "." "#$CountNoun") (var-Y "." "1") (var-DENOTATION "." "#$HotDog"))
23.12.18 08:29:19<aindilis> cyc: (definition "calculus")
                 <aindilis> ((var-X "." "#$MassNoun") (var-Y "." "0") (var-DENOTATION "." "#$Calculus"))
23.12.18 08:30:08<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (mapc #'comment (mapc #'cdr (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))
23.12.18 08:30:09<aindilis> DEFINITION
23.12.18 08:30:10<aindilis> cyc: (definition "calculus")
23.12.18 08:30:37<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (mapc #'cdr (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:30:38<aindilis> DEFINITION
23.12.18 08:30:39<aindilis> cyc: (definition "calculus")
23.12.18 08:30:40<aindilis> ((var-X "." "#$MassNoun") (var-Y "." "0") (var-DENOTATION "." "#$Calculus"))
23.12.18 08:31:34<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (mapc #'cdr (mapc #'cdr (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))
                 <aindilis> DEFINITION
23.12.18 08:31:36<aindilis> cyc: (definition "calculus")
23.12.18 08:31:37<aindilis> ((var-X "." "#$MassNoun") (var-Y "." "0") (var-DENOTATION "." "#$Calculus"))
23.12.18 08:31:43<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cdr (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:31:44<aindilis> DEFINITION
23.12.18 08:31:45<aindilis> cyc: (definition "calculus")
23.12.18 08:31:49<aindilis> NIL
23.12.18 08:32:00<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cadr (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:32:01<aindilis> DEFINITION
23.12.18 08:32:02<aindilis> cyc: (definition "calculus")
23.12.18 08:32:03<aindilis> NIL
23.12.18 08:32:08<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cdar (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:32:09<aindilis> DEFINITION
23.12.18 08:32:10<aindilis> cyc: (definition "calculus")
23.12.18 08:32:14<aindilis> (var-Y "." "0")
23.12.18 08:32:17<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:32:23<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cadar (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:32:24<aindilis> DEFINITION
23.12.18 08:32:29<aindilis> cyc: (definition "calculus")
23.12.18 08:32:32<aindilis> var-Y
23.12.18 08:32:33<aindilis> "."
23.12.18 08:32:38<aindilis> "0"
23.12.18 08:32:41<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (caddar (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:32:44<aindilis> DEFINITION
23.12.18 08:32:45<aindilis> cyc: (definition "calculus")
23.12.18 08:32:55<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (car (cddar (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))
23.12.18 08:32:59<aindilis> DEFINITION
23.12.18 08:33:02<aindilis> cyc: (definition "calculus")
23.12.18 08:33:06<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cddar (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:33:09<aindilis> DEFINITION
23.12.18 08:33:14<aindilis> cyc: (definition "calculus")
23.12.18 08:33:21<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cdar (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:33:24<aindilis> DEFINITION
23.12.18 08:33:27<aindilis> cyc: (definition "calculus")
                 <aindilis> (var-Y "." "0")
23.12.18 08:33:30<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:33:47<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))
23.12.18 08:33:48<aindilis> DEFINITION
23.12.18 08:33:49<aindilis> cyc: (definition "calculus")
23.12.18 08:33:50<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:34:00<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:34:01<aindilis> DEFINITION
23.12.18 08:34:11<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cdr (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:34:12<aindilis> DEFINITION
23.12.18 08:34:13<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:34:14<aindilis> DEFINITION
23.12.18 08:34:17<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cdr (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:34:21<aindilis> DEFINITION
23.12.18 08:34:24<aindilis> cyc: (definition "calculus")
23.12.18 08:34:27<aindilis> NIL
23.12.18 08:34:38<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))
23.12.18 08:34:39<aindilis> DEFINITION
23.12.18 08:34:40<aindilis> cyc: (definition "calculus")
23.12.18 08:34:41<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:34:51<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:34:52<aindilis> DEFINITION
23.12.18 08:34:54<aindilis> cyc: (definition "calculus")
23.12.18 08:34:55<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:35:00<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:35:01<aindilis> DEFINITION
23.12.18 08:35:03<aindilis> cyc: (definition "calculus")
23.12.18 08:35:07<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:35:10<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (last (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))
23.12.18 08:35:11<aindilis> DEFINITION
23.12.18 08:35:18<aindilis> cyc: (definition "calculus")
23.12.18 08:35:21<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:35:23<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (cdr (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
                 <dmiles> you know about ask-template?
23.12.18 08:35:27<aindilis> DEFINITION
23.12.18 08:35:32<aindilis> cyc: (definition "calculus")
                 <aindilis> NIL
23.12.18 08:35:35<aindilis> hrm, no
23.12.18 08:35:44<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (nth 3 (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:35:45<aindilis> DEFINITION
23.12.18 08:35:48<aindilis> hrm, no
23.12.18 08:35:52<aindilis> cyc: (definition "calculus")
23.12.18 08:35:55<aindilis> NIL
23.12.18 08:36:04<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (nth1 3 (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:36:05<aindilis> DEFINITION
23.12.18 08:36:06<aindilis> cyc: (definition "calculus")
23.12.18 08:36:12<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (nth1 (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))) 3))))
23.12.18 08:36:14<aindilis> DEFINITION
23.12.18 08:36:18<aindilis> cyc: (definition "calculus")
23.12.18 08:37:00<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (nth 2 (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:37:01<aindilis> DEFINITION
                 <aindilis> cyc: (definition "calculus")
23.12.18 08:37:02<aindilis> NIL
23.12.18 08:37:28<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))
23.12.18 08:37:29<aindilis> DEFINITION
23.12.18 08:37:30<aindilis> cyc: (definition "calculus")
23.12.18 08:37:31<aindilis> var-DENOTATION
                 <aindilis> "."
23.12.18 08:37:34<aindilis> "#$Calculus"
23.12.18 08:37:41<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))
23.12.18 08:37:43<aindilis> DEFINITION
23.12.18 08:37:46<aindilis> cyc: (definition "calculus")
23.12.18 08:37:50<aindilis> var-DENOTATION
23.12.18 08:37:53<aindilis> "."
23.12.18 08:37:54<dmiles> cyc: (ask-template '?D `(#$denotation #$Dog-TheWord ?X ?Y ?D) #$GeneralEnglishMt)
23.12.18 08:37:57<aindilis> "#$Calculus"
23.12.18 08:38:10<aindilis> cyc: (ask-template '?D `(#$denotation#$Dog-TheWord ?X ?Y ?D) #$GeneralEnglishMt)
23.12.18 08:38:14<aindilis> cyc: (ask-template '?D `(#$denotation #$Dog-TheWord ?X ?Y ?D) #$GeneralEnglishMt)
                 <aindilis> "#$Dog"
23.12.18 08:38:18<aindilis> "#$HotDog"
23.12.18 08:38:37<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (list (last (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))
23.12.18 08:38:38<aindilis> DEFINITION
23.12.18 08:38:40<aindilis> cyc: (definition "calculus")
23.12.18 08:38:41<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:38:49<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (list (nth 2 (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))
23.12.18 08:38:50<aindilis> DEFINITION
23.12.18 08:38:51<aindilis> cyc: (definition "calculus")
23.12.18 08:38:56<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (list (nth 3 (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))
23.12.18 08:38:58<aindilis> DEFINITION
23.12.18 08:39:01<aindilis> cyc: (definition "calculus")
23.12.18 08:39:07<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (list (last (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))
23.12.18 08:39:10<aindilis> DEFINITION
23.12.18 08:39:14<aindilis> cyc: (definition "calculus")
23.12.18 08:39:17<aindilis> (var-DENOTATION "." "#$Calculus")
23.12.18 08:39:22<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (list (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))
23.12.18 08:39:26<aindilis> DEFINITION
23.12.18 08:39:29<aindilis> cyc: (definition "calculus")
23.12.18 08:39:32<aindilis> "#$Calculus"
23.12.18 08:39:35<aindilis> aha!
23.12.18 08:39:40<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (mapc #'comment (ret  (list (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:39:43<aindilis> DEFINITION
23.12.18 08:39:47<aindilis> cyc: (definition "calculus")
23.12.18 08:39:50<aindilis> "#$Calculus"
23.12.18 08:40:00<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (mapc #'comment (list (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:40:01<aindilis> DEFINITION
23.12.18 08:40:02<aindilis> cyc: (definition "calculus")
                 <aindilis> "#$Calculus"
23.12.18 08:40:08<dmiles>  (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret  (last (ask-template `?DENOTATION `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))
23.12.18 08:40:20<dmiles> ha well you already got it
23.12.18 08:40:34<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (mapc #'comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))
23.12.18 08:40:35<aindilis> DEFINITION
23.12.18 08:40:36<aindilis> cyc: (definition "calculus")
23.12.18 08:40:40<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (mapc #'comment (list (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:40:46<aindilis> DEFINITION
                 <aindilis> cyc: (definition "calculus")
23.12.18 08:40:49<aindilis> "#$Calculus"
23.12.18 08:40:53<aindilis> cyc: (comment #$Calclus)
23.12.18 08:40:58<aindilis> cyc: (comment #$Calculus)
23.12.18 08:41:01<aindilis> "The subfield of #$Mathematics that studies continuously changing quantities (cf. #$quantityChangeFunction). The #$Calculus is characterized by the use of infinite processes, involving passage to a limit-the notion of tending toward, or approaching, an ultimate value. The English #$Physicist Isaac Newton and the German #$Mathematician G. W. Leibniz, working independently, developed the #$Calculus during #$TheSeventeenthCen
23.12.18 08:41:05<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (comment (list (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:41:07<aindilis> DEFINITION
23.12.18 08:41:11<aindilis> cyc: (comment #$Calculus)
23.12.18 08:41:14<aindilis> "The subfield of #$Mathematics that studies continuously changing quantities (cf. #$quantityChangeFunction). The #$Calculus is characterized by the use of infinite processes, involving passage to a limit-the notion of tending toward, or approaching, an ultimate value. The English #$Physicist Isaac Newton and the German #$Mathematician G. W. Leibniz, working independently, developed the #$Calculus during #$TheSeventeenthCen
23.12.18 08:41:17<aindilis> cyc: (definition "calculus")
23.12.18 08:41:28<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (list (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))))
23.12.18 08:41:31<aindilis> DEFINITION
                 <aindilis> cyc: (definition "calculus")
23.12.18 08:41:37<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:41:41<aindilis> DEFINITION
23.12.18 08:41:44<aindilis> cyc: (definition "calculus")
23.12.18 08:41:47<aindilis> "The subfield of #$Mathematics that studies continuously changing quantities (cf. #$quantityChangeFunction). The #$Calculus is characterized by the use of infinite processes, involving passage to a limit-the notion of tending toward, or approaching, an ultimate value. The English #$Physicist Isaac Newton and the German #$Mathematician G. W. Leibniz, working independently, developed the #$Calculus during #$TheSeventeenthCen
23.12.18 08:41:50<aindilis> bingo
23.12.18 08:42:23<dmiles> :)
23.12.18 08:42:47<aindilis> I'm terrible with lisp constructs like that, and was confused by the fact that it wasn't showing the outer list
23.12.18 08:42:50<aindilis> which I had forgotten
23.12.18 08:42:53<aindilis> cyc: (definition "dog")
23.12.18 08:42:54<aindilis> "A #$BiologicalSpecies (scientific name 'Canis familiaris') that is a specialization of #$CanineAnimal (q.v.).  Each instance of #$Dog is a canine animal that has either been bred to be a domestic pet (see #$DomesticatedAnimal) or is a wild canine animal that is not an instance of #$Wolf, #$Fox, or any other non-dog specialization of #$CanineAnimal. Note that although #$Dog and #$Wolf are considered distinct #$BiologicalSp
23.12.18 08:43:09<aindilis> (define definition (word)
                 <aindilis>  (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")))))
                 <aindilis>   (ret (list (mapc #'comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:43:10<dmiles> cyc: (definition "fox")
23.12.18 08:43:12<aindilis> cyc: (definition "dog")
23.12.18 08:43:15<aindilis> "A #$BiologicalSpecies (scientific name 'Canis familiaris') that is a specialization of #$CanineAnimal (q.v.).  Each instance of #$Dog is a canine animal that has either been bred to be a domestic pet (see #$DomesticatedAnimal) or is a wild canine animal that is not an instance of #$Wolf, #$Fox, or any other non-dog specialization of #$CanineAnimal. Note that although #$Dog and #$Wolf are considered distinct #$BiologicalSp
23.12.18 08:43:18<aindilis> cyc: (definition "fox")
23.12.18 08:43:31<dmiles> "wolf"
23.12.18 08:43:33<aindilis> cyc: (comment #$Fox-TheWord)
23.12.18 08:43:34<aindilis> NIL
23.12.18 08:43:37<aindilis> cyc: (definition "wolf")
                 <aindilis> "The collection of all wolves; a subset of #$CanineAnimal.  By default, members of #$Wolf are elements of #$WildAnimal.  Wolves are not included in the collection #$Dog.  The collection #$Wolf does not correspond to any biological taxon.  Note that members of the collection #$Wolf-Red are included in this collection as well as members of the collection #$Wolf-Gray."
23.12.18 08:44:09<aindilis> cyc: (definition "hotdog")
23.12.18 08:44:10<aindilis> "The collection of all hotdog sandwiches. A type of sandwich whose main ingredient is a hotdog, typically in a bun designed to hold a hotdog. The collection #$HotDogSandwich is a #$SpecifiedFoodDishType and a #$SpatiallyDisjointObjectType."
23.12.18 08:44:15<aindilis> cyc: (definition "dog")
                 <aindilis> "A #$BiologicalSpecies (scientific name 'Canis familiaris') that is a specialization of #$CanineAnimal (q.v.).  Each instance of #$Dog is a canine animal that has either been bred to be a domestic pet (see #$DomesticatedAnimal) or is a wild canine animal that is not an instance of #$Wolf, #$Fox, or any other non-dog specialization of #$CanineAnimal. Note that although #$Dog and #$Wolf are considered distinct #$BiologicalSp
23.12.18 08:44:24<aindilis> (define definition (word)
                 <aindilis>  (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord")))))
                 <aindilis>   (ret (list (mapc #'comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:44:33<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (mapc #'comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:44:34<aindilis> DEFINITION
23.12.18 08:44:36<aindilis> cyc: (definition "dog")
23.12.18 08:45:00<aindilis> cyc: (define definition (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:45:01<aindilis> DEFINITION
23.12.18 08:45:02<aindilis> cyc: (definition "dog")
                 <aindilis> "A #$BiologicalSpecies (scientific name 'Canis familiaris') that is a specialization of #$CanineAnimal (q.v.).  Each instance of #$Dog is a canine animal that has either been bred to be a domestic pet (see #$DomesticatedAnimal) or is a wild canine animal that is not an instance of #$Wolf, #$Fox, or any other non-dog specialization of #$CanineAnimal. Note that although #$Dog and #$Wolf are considered distinct #$BiologicalSp
23.12.18 08:45:07<aindilis> I'll leave it at that for now
23.12.18 08:45:19<aindilis> wow that was really, um...
23.12.18 08:45:38<aindilis> so sorry to have put you through that
23.12.18 08:46:03<aindilis> at least I'm trially GAs
23.12.18 08:46:08<aindilis> trialing
23.12.18 08:46:38<aindilis> that process is actually somewhat like how IAEC is supposed to proceed
23.12.18 08:46:45<aindilis> it'll use a GA with program synthesis bits
23.12.18 08:46:58<aindilis> I suppose I can have it use your debug techniques too that you were showing
23.12.18 08:47:38<dmiles> hehe
23.12.18 08:47:47<dmiles> i do that many time to
23.12.18 08:47:55<aindilis> okay phew, I was so embarassed
23.12.18 08:49:55<aindilis> do we have lambda expressions available?
23.12.18 08:50:14<dmiles> yep
23.12.18 08:50:53<dmiles> cyc: #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:51:16<aindilis> cyc: #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:51:37<dmiles> (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:51:59<aindilis> (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))))
23.12.18 08:52:04<aindilis> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))))
23.12.18 08:52:14<dmiles> one more param at end
23.12.18 08:52:24<aindilis> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))) (list "test"))
23.12.18 08:52:44<dmiles> CYC(50): (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))))
23.12.18 08:52:45<aindilis> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))) "test")
                 <dmiles> )
                 <dmiles> [Time: 224.315 µsecs]
                 <dmiles> "com.cyc.tool.subl.jrtl.nativeCode.type.operator.SubLInterpretedFunction@12656c"
23.12.18 08:52:53<aindilis> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt)))))))))) "test")
23.12.18 08:53:21<aindilis> hrm I don't know the string signature
23.12.18 08:53:25<dmiles> cyc: #'(lambda () "test")
23.12.18 08:53:32<aindilis> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))) "test"))
23.12.18 08:53:33<dmiles> cyc: #'(lambda () (ret "test"))
23.12.18 08:53:44<aindilis> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))) (ret "test")))
23.12.18 08:53:53<aindilis> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))) (ret "test")))
23.12.18 08:53:54<dmiles> the string is just cuz teh Client api would kniow how to handle returning it
23.12.18 08:54:13<aindilis> cyc: (list (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))) (ret "test"))))
23.12.18 08:54:31<aindilis> cyc: (= 1 1)
23.12.18 08:54:39<aindilis> cyc: (= 1 1)
23.12.18 08:54:41<aindilis> T
23.12.18 08:54:42<dmiles> its unflowed
23.12.18 08:54:43<aindilis> /var/lib/myfrdcsa/codebases/internal/unilang/start -s -u localhost 9000 -c
23.12.18 08:54:44<aindilis> (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))) (ret "test")))
23.12.18 08:54:47<aindilis> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))) (ret "test")))
23.12.18 08:54:48<aindilis> "com.cyc.tool.subl.jrtl.nativeCode.type.operator.SubLInterpretedFunction@617dbb"
23.12.18 08:54:52<aindilis> nice
23.12.18 08:55:31<dmiles> jsut to brage i built the compiler for cycorp that converts this to fastcalls
23.12.18 08:55:38<aindilis> brag away
23.12.18 08:55:49<aindilis> I have yet to find someone who can do the like
23.12.18 08:56:11<dmiles> i stole the idea from the Groovy lahguage
23.12.18 08:56:33<aindilis> there are plenty of PL wankers, but applying that properly to AI is critical
23.12.18 08:56:47<aindilis> I would actually love to get more into PL theory
23.12.18 08:56:54<aindilis> I can't find the books though
23.12.18 08:57:00<aindilis> CMU was a lot of that
23.12.18 08:57:46<aindilis> hey I'll organize my library into this
23.12.18 08:57:55<aindilis> (ygoal "organize library into CycL")
23.12.18 08:58:00<aindilis> cyc: (ygoal "organize library into CycL")
23.12.18 08:58:01<aindilis> T
23.12.18 08:58:13<aindilis> cyc: (ygoal "process I'll")
23.12.18 08:58:15<aindilis> T
23.12.18 08:58:48<dmiles> one thing that i always wanted to do is get all the subl methods documented into cycL
23.12.18 08:58:53<aindilis> hehe
23.12.18 08:59:02<aindilis> I was going to ask, but now I know
23.12.18 08:59:17<aindilis> oh well wait, you mean like this?: one sec
23.12.18 08:59:44<dmiles> though actually there are like 80k of them of somesuch
23.12.18 08:59:50<aindilis> https://github.com/aindilis/cyc-mode/blob/master/data-git/subl.cycl\
23.12.18 08:59:56<aindilis> https://github.com/aindilis/cyc-mode/blob/master/data-git/subl.cycl
23.12.18 09:00:14<dmiles> haha exactly
23.12.18 09:00:27<aindilis> cool
23.12.18 09:01:08<aindilis> I thought you meant (documentation *subl-function*)
23.12.18 09:01:25<aindilis> somewhere there's a function that reveals the signature types
23.12.18 09:01:36<dmiles> *nod* 
23.12.18 09:02:03<dmiles> well the ones i care aobut is like cyc-capitalize-smart
23.12.18 09:02:49<dmiles> since in e2c i write that myself :(
23.12.18 09:03:08<dmiles> took me like two hours
23.12.18 09:07:04<dmiles> https://github.com/logicmoo/old_logicmoo_workspace/blob/44025b6e389e2f2f7d86b46c1301cab0604bba26/pack/logicmoo_nlu/prolog/e2c/subl-grep.lisp
23.12.18 09:07:11<dmiles> thats not the string
23.12.18 09:07:35<dmiles> but it uses that thingy you mentions that gets the args back out
23.12.18 09:07:51<aindilis> oh thanks, I just looked through all my resources, couldn't find it
23.12.18 09:08:25<dmiles> FUNCTION-symbol-ARGLIST 
23.12.18 09:08:55<dmiles> (define my-apply (fn rest)
                 <dmiles>   (punless rest
                 <dmiles>    (ret (funcall (function CMDCALL))))
23.12.18 09:08:56<dmiles>   (clet ((argv (FUNCTION-symbol-ARGLIST cmdcall))(argc (length argv)))
                 <dmiles>      (pcond
                 <dmiles>         ((onerror-warn "unkownn"  (= argc 1)) (ret (funcall (function CMDCALL) (list rest))))
                 <dmiles>         ((onerror-warn "unkownn"  (= argc 1)) (ret (funcall (function CMDCALL) (list rest))))
23.12.18 09:08:58<dmiles>         ((onerror-warn "unkownn"  (= argc 2))(ret (funcall (function CMDCALL) (list rest))))
                 <dmiles>         (t  (ret (funcall (function CMDCALL) rest))))))
23.12.18 09:09:53<aindilis> that's it arglist
23.12.18 09:09:54<dmiles> that uses it to figure out how many extra params to add on
23.12.18 09:09:56<aindilis> ty
23.12.18 09:10:11<aindilis> cyc: (arglist 'comment)
23.12.18 09:10:53<dmiles> #'
23.12.18 09:10:56<aindilis> awesome
23.12.18 09:11:02<dmiles> (arglist #'comment)
23.12.18 09:11:08<aindilis> cyc: (function-symbol-arglist #'comment)
23.12.18 09:11:22<aindilis> cyc: (list (function-symbol-arglist #'comment))
23.12.18 09:11:29<aindilis> cyc: (pc (function-symbol-arglist #'comment))
23.12.18 09:11:35<aindilis> cyc: (pc (function-symbol-arglist 'comment))
23.12.18 09:11:36<aindilis> "SUBLISP::REQ-0 &OPTIONAL SUBLISP::OPT-1 "
23.12.18 09:11:42<aindilis> cyc: (function-symbol-arglist 'comment)
23.12.18 09:11:50<aindilis> cyc: (pc (function-symbol-arglist 'comment))
23.12.18 09:12:08<aindilis> cyc: (list (function-symbol-arglist 'comment))
23.12.18 09:12:18<aindilis> cyc: (pc (function-symbol-arglist 'comment))
23.12.18 09:12:22<aindilis> cyc: (pc (function-symbol-arglist 'comment))
23.12.18 09:12:24<aindilis> "SUBLISP::REQ-0 &OPTIONAL SUBLISP::OPT-1 "
23.12.18 09:12:44<aindilis> writing this down before If orget
23.12.18 09:13:39<dmiles> cyc: (GET-CYCLIFICATION-PARSERS)
23.12.18 09:14:02<aindilis> cyc: (GET-CYCLIFICATION-PARSERS)
23.12.18 09:14:08<aindilis> cyc: (pc (GET-CYCLIFICATION-PARSERS))
23.12.18 09:14:17<aindilis> cyc: (p (GET-CYCLIFICATION-PARSERS))
23.12.18 09:14:30<dmiles> this are unmarshallable
23.12.18 09:14:35<dmiles> these
23.12.18 09:14:54<dmiles> (wierd datatype that client cant see)
23.12.18 09:15:14<aindilis> it's cause that functions unbound
23.12.18 09:15:19<dmiles> oh
23.12.18 09:15:24<aindilis> I'm not running 1.0
23.12.18 09:15:29<aindilis> this is 4.0q or p
23.12.18 09:15:31<aindilis> p
23.12.18 09:15:37<aindilis> q
23.12.18 09:16:39<aindilis> do you have PL theory recommendations?
23.12.18 09:17:04<aindilis> my goal is to document all my learning into SubL so I don't forget it
23.12.18 09:17:23<aindilis> I just have to write/learn an API to handle my knowledge and then I no longer have to memorize everything
23.12.18 09:18:00<aindilis> it's amazing how many enemies CYC has considering it is literally the best system going
23.12.18 09:18:22<aindilis> everyone's like it's not real AI, and yet there is nothing close
23.12.18 09:18:23<dmiles> cyc: (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS  'OBJECT))
23.12.18 09:18:32<aindilis> cyc: (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS 'OBJECT))
23.12.18 09:18:33<aindilis> "OBJECT"
                 <aindilis> "BASIC-LIST"
                 <aindilis> "BASIC-BAG"
23.12.18 09:18:36<aindilis> "LUCENE-PASSAGE-LIST"
23.12.18 09:18:39<aindilis> "GOOGLE-PASSAGE-LIST"
23.12.18 09:18:41<aindilis> "BASIC-END-POINTER-LIST"
23.12.18 09:18:44<aindilis> "TEST-LIST-ELEMENT"
23.12.18 09:18:47<aindilis> "BASIC-TRIPLET"
23.12.18 09:18:50<aindilis> "SUBLOOP-PRIVATE-PAIR"
23.12.18 09:18:54<aindilis> ...
23.12.18 09:19:07<dmiles> :)
23.12.18 09:19:09<aindilis> cyc: (pc (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS 'OBJECT)))
23.12.18 09:19:10<aindilis> "OBJECT BASIC-LIST BASIC-BAG LUCENE-PASSAGE-LIST GOOGLE-PASSAGE-LIST BASIC-END-POINTER-LIST TEST-LIST-ELEMENT BASIC-TRIPLET SUBLOOP-PRIVATE-PAIR ASYNCH-BASIC-DOUBLY-LINKED-QUEUE BASIC-DOUBLY-LINKED-IPC-QUEUE TEXT-WRITER XML-WRITER GOOGLE-CLIENT LUCENE-CLIENT PROPRIETARY-SLURPER-FILTER PERSON-SLURPER-FILTER ARC-SLURPER-FILTER ARC-LEXICON-SLURPER XML-PROXY RKF-BB-PROXY RKF-UIA-PROXY HTML-QUESTION-ANSWERING-AGENT XML-QUESTION
23.12.18 09:19:23<aindilis> nothing close to CYC
23.12.18 09:19:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bwehpxlcweksmqnb, stoopkid: stoopkid)
                 <dmiles> cyc: (+ 1 1)
23.12.18 09:19:45<aindilis> oh maybe I got rid of your perms one sec
23.12.18 09:19:58<aindilis> try again
23.12.18 09:20:01<dmiles> cyc: (pc (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS 'OBJECT)))
23.12.18 09:20:37<cyc> try again
23.12.18 09:20:41<dmiles> cyc: (pc (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS )))
23.12.18 09:20:42<cyc> + 1 1
23.12.18 09:20:53<dmiles> cyc: (pc (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS ))))
23.12.18 09:21:01<cyc> no try cyc: (+ 1 1)
23.12.18 09:21:08<dmiles> cyc: (+  1 1)
23.12.18 09:21:09<aindilis> "2"
23.12.18 09:21:13<cyc> k cool
23.12.18 09:21:27<cyc> cyc: (pc (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS 'OBJECT)))
23.12.18 09:21:53<dmiles> cyc: (list (string (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS 'OBJECT))))
23.12.18 09:22:15<dmiles> cyc: (list (string (CLASSES-FIND-ALL-SUBCLASSES (CLASSES-RETRIEVE-CLASS 'OBJECT)))))
23.12.18 09:22:16*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 09:22:20<cyc> one sec
23.12.18 09:22:37<dmiles> well ther eare like 14,000 classes :P
23.12.18 09:22:56<dmiles> so we probly blew to client api
23.12.18 09:23:14*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
                 <dmiles> cyc: (+ 1 1)
23.12.18 09:23:27<dmiles> hah my script
23.12.18 09:23:44<dmiles> when it joins its probly too soon anyways
23.12.18 09:23:53<dmiles> qah stoopkid joined and thrat made my scriopt go off
                 *** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 09:24:05<dmiles> and you thought i was tryhigjn to get it to work again
23.12.18 09:24:54*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
                 <dmiles> cyc: (+ 1 1)
23.12.18 09:26:45*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
23.12.18 09:26:46<dmiles> cyc: (+ 1 1)
23.12.18 09:26:48<cyc> cyc: (+ 1 1)
23.12.18 09:26:51<aindilis`> "2"
23.12.18 09:27:00<cyc> I had to disable yours
23.12.18 09:27:02<dmiles> cyc: (+ 1 1)
23.12.18 09:27:03<cyc> for whatever reason
23.12.18 09:27:08<cyc> it messes up
23.12.18 09:27:23<dmiles> i just need to rename mayself :"P
23.12.18 09:27:46<dmiles> oh actualy can be ourt hostmask messing with the 
23.12.18 09:27:56<dmiles> with the IRC lib
23.12.18 09:28:15<dmiles> (i mean why a differnce)
23.12.18 09:28:41<aindilis`> try again
23.12.18 09:28:48<dmiles> cyc: (+ 1 1)
23.12.18 09:29:10<dmiles> cyc: (pc (function-symbol-arglist 'comment))
23.12.18 09:29:23*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 244 seconds
23.12.18 09:30:45<aindilis`> test
23.12.18 09:30:58*** Part: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: [No reason given]
23.12.18 09:32:21<cyc> try again
23.12.18 09:32:39<dmiles> cyc: (+ 1 1)
                 *** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 09:32:40<dmiles> cyc: (+ 1 1)
23.12.18 09:32:41<aindilis> "2"
23.12.18 09:32:49<dmiles> cyc: (+ 1 3)
23.12.18 09:32:51<aindilis> "4"
23.12.18 09:32:54<dmiles> yeah
23.12.18 09:33:34<aindilis> > cyc: (+ 1 3)
                 <aindilis> > cyc: (+ 1 1)
                 <aindilis> ERC> cyc: (+ 1 3)
23.12.18 09:33:44<aindilis> cyc: (+ 1 3)
23.12.18 09:33:45<aindilis> "4"
23.12.18 09:33:48<cyc> try again
23.12.18 09:34:42<dmiles> what is the sublist range comamnd again?
23.12.18 09:34:53<dmiles> cyc: (+ 1 6)
23.12.18 09:34:55<aindilis> "7"
23.12.18 09:36:36<cyc> and again
23.12.18 09:37:00<cyc> cyc: (+ 1 7)
23.12.18 09:37:01<aindilis> "8"
23.12.18 09:37:12<dmiles> cyc: (+ 1 8)
23.12.18 09:37:14<aindilis> "9"
23.12.18 09:37:50<cyc> again?
23.12.18 09:38:19<dmiles> cyc: (string #'(lambda (word) (clet ((constant (find-or-create-constant (cyc-string-concat (list (cyc-capitalize-smart word) "-TheWord"))))) (ret (list (comment (cdr (car (last (car (cyc-query `(#$denotation ,constant ?X ?Y ?DENOTATION) #$GeneralEnglishMt))))))))) (ret "test")))
23.12.18 09:38:53<dmiles> cyc (+ 33)
23.12.18 09:38:58<dmiles> cyc: (+ 33)
23.12.18 09:39:00<aindilis> "33"
23.12.18 09:39:40<cyc> and once more
23.12.18 09:39:52<cyc> may have gotten it to run faster
23.12.18 09:39:56<dmiles> cyc (- 33)
23.12.18 09:40:01<dmiles> cyc: (- 33)
23.12.18 09:40:03<aindilis> "-33"
23.12.18 09:40:10<cyc> cyc: (- 33)
23.12.18 09:40:12<aindilis> "-33"
23.12.18 09:40:22<cyc> cyc: (- 33)
23.12.18 09:40:23<aindilis> "-33"
23.12.18 09:40:31<dmiles> cyc: "sdfsdf"
23.12.18 09:40:43<dmiles> cyc: (list "sdfsdf")
23.12.18 09:40:45<aindilis> "sdfsdf"
23.12.18 09:41:04<cyc> cyc: (dgoals?)
23.12.18 09:41:05<aindilis> ((var-Y "#$GoalFn" "build the PrologMUD community"))
23.12.18 09:41:22<dmiles> cyc: (ygoals?)
23.12.18 09:41:24<aindilis> ((var-Y "#$GoalFn" "process I'll"))
                 <aindilis> ((var-Y "#$GoalFn" "organize library into CycL"))
                 <aindilis> ((var-Y "#$GoalFn" "extract I (really) should, etc - for irc-kb"))
                 <aindilis> ((var-Y "#$GoalFn" "extract I want to - for irc-kb"))
23.12.18 09:41:27<aindilis> ((var-Y "#$GoalFn" "implement persistence"))
23.12.18 09:41:31<aindilis> ((var-Y "#$GoalFn" "compute SNA metrics from logs"))
23.12.18 09:41:35<aindilis> ((var-Y "#$GoalFn" "make all of this work with an IRC bouncer"))
23.12.18 09:41:38<aindilis> ((var-Y "#$GoalFn" "Document PrologMUD"))
23.12.18 09:42:19<cyc> cyc: (+ 1 1)
23.12.18 09:42:21<aindilis> "2"
23.12.18 09:42:44<cyc> cyc: (+ 1 1)
                 <cyc> cyc: (+ 1 1)
                 <cyc> cyc: (+ 1 1)
23.12.18 09:42:45<aindilis> "2"
23.12.18 09:42:47<aindilis> "2"
23.12.18 09:42:48<aindilis> "2"
23.12.18 09:42:51<cyc> cool!
23.12.18 09:43:10<dmiles> cyc: (definition "dog")
23.12.18 09:43:12<aindilis> "A #$BiologicalSpecies (scientific name 'Canis familiaris') that is a specialization of #$CanineAnimal (q.v.).  Each instance of #$Dog is a canine animal that has either been bred to be a domestic pet (see #$DomesticatedAnimal) or is a wild canine animal that is not an instance of #$Wolf, #$Fox, or any other non-dog specialization of #$CanineAnimal. Note that although #$Dog and #$Wolf are considered distinct #$BiologicalSp
23.12.18 09:43:40<dmiles> cyc: (definition "function")
23.12.18 09:43:42<aindilis> "A first-order collection and a specialization of #$TemporalThing.  Each instance of #$Capability is an attribute that objects or agents can have.  Having an instance of the collection #$Capability indicates that an entity can play a role in a type of situation.  When an object OBJ has a capability, that does not entail that OBJ can unquestionably play the corresponding role in every such situation, since extrinsic factors
23.12.18 09:43:45<cyc> cyc: (definition "hacker")
23.12.18 09:43:57<cyc> cyc: (definition "computer")
23.12.18 09:44:10<cyc> cyc: (definition "function")
23.12.18 09:44:11<aindilis> "A first-order collection and a specialization of #$TemporalThing.  Each instance of #$Capability is an attribute that objects or agents can have.  Having an instance of the collection #$Capability indicates that an entity can play a role in a type of situation.  When an object OBJ has a capability, that does not entail that OBJ can unquestionably play the corresponding role in every such situation, since extrinsic factors
23.12.18 09:44:26<cyc> what about EC support?
23.12.18 09:45:04<dmiles> the SKSI can always call it
23.12.18 09:47:15<dmiles> what is funny is tje EC is a few steps harder to code engines fo rit that the stuff that normally goes with infernce engines
23.12.18 09:47:29<dmiles> but ther eis actualylo more optimizatin work peopelk have done
23.12.18 09:47:44<dmiles> at least that is public
23.12.18 09:48:32<cyc> hi stoopkid 
23.12.18 09:49:03<dmiles> so the EC work gives me the sense i will do all of Cyc and more
23.12.18 09:49:14<cyc> I'm not following
23.12.18 09:49:25<dmiles> even thouhgh it really would work out that way
23.12.18 09:49:48<dmiles> oh i mean that since EC coders have to work much harder that SC coders
23.12.18 09:49:59<dmiles> (i am a SC coder)
23.12.18 09:50:11<cyc> do all of CYC, you mean have EC access all of CYC?
23.12.18 09:50:26<cyc> or put all CYC into EC?
23.12.18 09:50:54<dmiles> well all the stuff that CYC does that one day all sat solvers  hope they can do
23.12.18 09:51:07<cyc> oh okay
23.12.18 09:51:20<dmiles> the vmapire-kif stuff
23.12.18 09:51:26<cyc> decreasoner?
23.12.18 09:51:28<dmiles> the stuff that i been always workign on
23.12.18 09:51:38<cyc> doesn't that use ASP
23.12.18 09:51:40<dmiles> yet decreasonjer is doing that and even harder stuff
23.12.18 09:51:46<cyc> ah
23.12.18 09:52:10<dmiles> so sitting here hte last two weeks workign on even harder stuff makes the old stuff i did seem easy
23.12.18 09:52:37<cyc> wow
23.12.18 09:53:16<cyc> okay well I'll leave the interface open for now
23.12.18 09:53:17<dmiles> yeah.. but a relaity check i am giving myself is that maybe i am deluded and wil not fell that way in a couple weeks
23.12.18 09:53:25<cyc> yeah
23.12.18 09:53:49<dmiles> but secretly once i really understood PFC .. cyc had beome easy
23.12.18 09:54:09<cyc> demoing for M here:
23.12.18 09:54:12<dmiles> (Prolog Forward Chaijing)
23.12.18 09:54:30<cyc> cyc: (ygoals?)
23.12.18 09:54:31<aindilis> ((var-Y "#$GoalFn" "process I'll"))
                 <aindilis> ((var-Y "#$GoalFn" "organize library into CycL"))
                 <aindilis> ((var-Y "#$GoalFn" "extract I (really) should, etc - for irc-kb"))
                 <aindilis> ((var-Y "#$GoalFn" "extract I want to - for irc-kb"))
23.12.18 09:54:34<aindilis> ((var-Y "#$GoalFn" "implement persistence"))
23.12.18 09:54:38<aindilis> ((var-Y "#$GoalFn" "compute SNA metrics from logs"))
23.12.18 09:54:41<aindilis> ((var-Y "#$GoalFn" "make all of this work with an IRC bouncer"))
23.12.18 09:54:44<aindilis> ((var-Y "#$GoalFn" "Document PrologMUD"))
23.12.18 09:55:52<cyc> okay well M came here, so I'm going to take a quick break and chat with her
23.12.18 09:56:06<cyc> wait, what?
23.12.18 09:56:10<cyc> pfc is harder than CYC?
23.12.18 09:57:28<dmiles> cyc: (generate-phrase '(#$and (#$equals ?Y #$Dog) (#$isa ?X ?Y)))
23.12.18 09:58:19<dmiles> PFC is a techology that basically gives CYC most of its pwoer
23.12.18 09:58:46<cyc> so by the time you understood PFC well you had already mastered a lot of CYC and so PFC came easier
23.12.18 09:58:48<dmiles> using that techologu instead of jsut normal prolog technilocy makes things easier
23.12.18 09:58:57<cyc> definitely
23.12.18 09:59:35<dmiles> yes in that way i had already conditioned myself to work 120% 
23.12.18 10:00:01<cyc> cyc: (generate-phrase '(#$isa #$DouglasMiles #$AIResearcher))
23.12.18 10:00:18<cyc> cyc: (listify (generate-phrase '(#$isa #$DouglasMiles #$AIResearcher)))
23.12.18 10:00:34<cyc> cyc: (generate-phrase '(#$isa #$DouglasMiles #$AIResearcher) #$EverythingPSC)
23.12.18 10:00:56<dmiles> cyc: (+ 1 1)
23.12.18 10:00:57<aindilis> "2"
23.12.18 10:01:01<cyc> cyc: (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher))
23.12.18 10:01:13<cyc> weird
23.12.18 10:01:37<cyc> cyc: (dgoals)
                 <cyc> cyc: (dgoals?)
23.12.18 10:01:40<aindilis> ((var-Y "#$GoalFn" "build the PrologMUD community"))
23.12.18 10:01:49<dmiles> cyc: (string #'generate-phrase)
23.12.18 10:01:50<aindilis> "#<Function GENERATE-PHRASE>"
23.12.18 10:02:10<dmiles> that is actualy not right
23.12.18 10:02:28<dmiles> thaqt should be a "COMPILED-FUNCTION"
23.12.18 10:02:50<dmiles> cyc: (string #'not-rewwewe)
23.12.18 10:03:11<dmiles> ok i grues it was acurate
23.12.18 10:03:20<dmiles> cyc: (string #'T)
23.12.18 10:03:36<dmiles> cyc: (string #'STRING)
23.12.18 10:03:38<aindilis> "#<Function STRING>"
23.12.18 10:03:42<cyc> cyc: (function-symbol-arglist 'generate-phrase)
23.12.18 10:03:59<cyc> cyc: (pc (function-symbol-arglist 'generate-phrase))
23.12.18 10:04:26<cyc> dead cyc
23.12.18 10:04:28<dmiles> cyc: (list  (generate-phrase (cdar (third (cyc-query '(#$isa ?X #$Dog) #$BaseKB)))))
23.12.18 10:04:37*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 10:05:11*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
                 <dmiles> cyc: (+ 1 1)
23.12.18 10:05:36<dmiles> hehe i realy should put a 5 seond delay on thjat
23.12.18 10:05:38*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 10:05:52<cyc> yeah that will help I'm sure
23.12.18 10:06:16<cyc> lemme know when its ready
23.12.18 10:08:29<dmiles> i thnk it is
23.12.18 10:08:48<dmiles> i put a 5 sec delet to trigger once
23.12.18 10:08:49*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 10:09:03<dmiles> it might at worse trigger ever second 5 times
23.12.18 10:09:11<dmiles> or nmot even work at all
23.12.18 10:09:17<cyc> cyc: (+ 1 1)
23.12.18 10:09:21<aindilis> "2"
23.12.18 10:09:29<dmiles> cyc: (+ 1 1)
23.12.18 10:09:31<aindilis> "2"
23.12.18 10:10:25<dmiles> cyc: (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher))
23.12.18 10:10:47<dmiles> the fiorst time that runs it has some caches to update
23.12.18 10:10:55<cyc> cyc: (pc (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher)))
23.12.18 10:11:04<dmiles> but also i forgot to wrap the result
23.12.18 10:11:14<cyc> java.lang.RuntimeException: Invalid expression, sval: null  st: Token[EOF], line 1  tok: -1\nreadStack: [**consMarkerSymbol*\
                 <cyc> *, PC, **consMarkerSymbol**, **consMarkerSymbol**, GENERATE-PHRASE, **consMarkerSymbol**, **consMarkerSymbol**, QUOTE, **consMarkerSymbol**, **consMarkerSymbo\
23.12.18 10:11:19<cyc> l**, isa, **consMarkerSymbol**, AndrewDougherty]\nstring: (pc (generate-phrase '(#\$isa #\$AndrewDougherty"
23.12.18 10:11:44<dmiles> yeah that the CFASL API is brokjen
23.12.18 10:12:13<dmiles> oh not the CFASL but the other one
23.12.18 10:12:24<cyc> cyc: (generate-phrase #$Dog)
23.12.18 10:12:25<aindilis> "dog"
23.12.18 10:12:34<cyc> I think it may be the length
23.12.18 10:12:57<cyc> cyc: (+ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
23.12.18 10:13:11<cyc> cyc: (+ 1 1 1 1 1)
23.12.18 10:13:12<aindilis> "5"
23.12.18 10:13:33<dmiles> the lcient API is such horrid code
23.12.18 10:13:48<cyc> it may be my erc processing code that's at fault let me check
23.12.18 10:14:23<cyc> cyc: (pc (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher)))
23.12.18 10:14:47<dmiles> your code ate worst is exposing stuff
23.12.18 10:15:09<dmiles> probly what gets you the "muytple-values return
23.12.18 10:15:37<dmiles> if my mempory wporked i'd show you the wrapper that will fix all that
23.12.18 10:16:13<cyc> yeah it's my code
23.12.18 10:16:21<cyc> one sec, I have to find the fix
23.12.18 10:17:27<dmiles> dont mid if i test something?
23.12.18 10:17:34<dmiles> cyc: (multiple-value-list (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher)))
23.12.18 10:18:20<dmiles> that would supposely collect the extra stack bvindings and make them intoa nomral cons
23.12.18 10:18:42<dmiles> cyc: (cmultiple-value-list (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher)))
23.12.18 10:19:21<dmiles> i i could rember the name of the intgeral macro that was cyc speefic
23.12.18 10:20:01<cyc> cyc: (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher))
23.12.18 10:20:03<aindilis> "Andrew Dougherty is AI researcher"
23.12.18 10:20:17<dmiles> cyc: (generate-phrase '(#$isa #$AndrewDougherty #$AIResearcher))
23.12.18 10:20:19<aindilis> "Andrew Dougherty is AI researcher"
23.12.18 10:20:53<dmiles> it woujld be fnny if part o the problem was sometimes we have a space at the end of our irc lines
23.12.18 10:21:16<cyc> cyc: (generate-phrase '(#$holdsIn (#$TimeIntervalInclusiveFn (#$DayFn 2 (#$MonthFn #$August (#$YearFn 1990))) (#$DayFn 27 (#$MonthFn #$February (#$YearFn 1991)))) (#$beliefs #$UnitedStatesOfAmerica (#$goals #$Iraq (#$exists (?ATTACK) (#$exists (?WEAPON) (#$and (#$isa ?ATTACK #$MilitaryAttack) (#$isa ?WEAPON #$WeaponOfMassDestruction) (#$performedBy ?ATTACK #$Iraq) (#$intendedMaleficiary ?ATTACK (#$ArmyFn #$UnitedStatesOfAmerica
                 <cyc> (#$deviceUsed ?ATTACK ?WEAPON))))))))
23.12.18 10:21:34<cyc> cyc: (generate-phrase '(#$holdsIn (#$TimeIntervalInclusiveFn (#$DayFn 2 (#$MonthFn #$August (#$YearFn 1990))) (#$DayFn 27 (#$MonthFn #$February (#$YearFn 1991)))) (#$beliefs #$UnitedStatesOfAmerica (#$goals #$Iraq (#$thereExists (?ATTACK) (#$thereExists (?WEAPON) (#$and (#$isa ?ATTACK #$MilitaryAttack) (#$isa ?WEAPON #$WeaponOfMassDestruction) (#$performedBy ?ATTACK #$Iraq) (#$intendedMaleficiary ?ATTACK (#$ArmyFn
                 <cyc> #$UnitedStatesOfAmerica)) (#$deviceUsed ?ATTACK ?WEAPON))))))))
23.12.18 10:21:41<dmiles> irc made that mulepuiple lines
23.12.18 10:21:44<cyc> yeah
23.12.18 10:21:59<cyc> I'll have to write something that chunks the input if the parse fails
23.12.18 10:22:25<cyc> cyc: (generate-phrase '(#$holdsIn (#$TimeIntervalInclusiveFn (#$DayFn 2 (#$MonthFn #$August (#$YearFn 1990))) (#$DayFn 27 (#$MonthFn #$February (#$YearFn 1991)))) (#$beliefs #$UnitedStatesOfAmerica (#$goals #$Iraq (#$thereExists (?ATTACK) (#$thereExists (?WEAPON) (#$and (#$isa ?ATTACK #$MilitaryAttack) (#$isa ?WEAPON #$WeaponOfMassDestruction) (#$performedBy ?ATTACK #$Iraq))))))))
23.12.18 10:22:55<cyc> cyc: (generate-phrase '(#$holdsIn (#$TimeIntervalInclusiveFn (#$DayFn 2 (#$MonthFn #$August (#$YearFn 1990))) (#$DayFn 27 (#$MonthFn #$February (#$YearFn 1991)))) (#$isa #$AndrewDougherty #$AIResearcher)))
23.12.18 10:22:56<aindilis> "throughout the temporal extent of the time period between August 2, 1990 and February 27, 1991, Andrew Dougherty is AI researcher"
23.12.18 10:23:00<cyc> nice
23.12.18 10:23:25<cyc> so the bottleneck is all my API crap
23.12.18 10:23:50<cyc> cyc: (constant-apropos "timer")
23.12.18 10:23:53<aindilis> "#$BigTimeRush-Band"
                 <aindilis> "#$BigTimeRush-TelevisionSeries"
                 <aindilis> "#$CapsuleTimeRelease"
                 <aindilis> "#$CapsuleTimeReleaseDegradable"
23.12.18 10:23:56<aindilis> "#$EmilyMortimer-Actor"
23.12.18 10:23:59<aindilis> "#$KitchenTimer"
23.12.18 10:24:02<aindilis> "#$MarkMortimer"
23.12.18 10:24:05<aindilis> "#$Mortimer-TheName"
23.12.18 10:24:08<aindilis> "#$Multimer-TheWord"
23.12.18 10:24:12<aindilis> ...
23.12.18 10:24:22<cyc> cyc: (pc (apropos "time"))
23.12.18 10:24:33<dmiles> upcase
23.12.18 10:24:37<cyc> cyc: (pc (APROPOS "time"))
23.12.18 10:24:51<dmiles> cyc: (pc (APROPOS "TIME"))
23.12.18 10:25:07<dmiles> cyc: (pc (APROPOS :TIME))
23.12.18 10:25:32<dmiles> apropos was one no one has ever really finished
23.12.18 10:25:59<dmiles> since it was documented in some jrtl to be unimplented yet it usingal was
23.12.18 10:26:26<cyc> cyc: (function-symbol-arglist 'TIME-ELAPSED)
23.12.18 10:26:35<cyc> cyc: (pc (function-symbol-arglist 'TIME-ELAPSED))
23.12.18 10:26:52<dmiles> cyc: (pc (function-symbol-arglist #'TIME-ELAPSED))
23.12.18 10:27:00<cyc> it died
23.12.18 10:27:06<cyc> on mine
23.12.18 10:27:13<cyc> *hung
23.12.18 10:27:17*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 10:27:18<dmiles> back when we did(constant-apropos "timer") 
23.12.18 10:27:29<dmiles> oh right on the return result
23.12.18 10:27:38<dmiles> of your woulkd ahwve kiled it
23.12.18 10:28:02<dmiles> sing the java API can evne have that many results
23.12.18 10:28:07<dmiles> (on the client)
23.12.18 10:28:20*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 10:28:21<cyc> cyc: (pc (function-symbol-arglist 'TIME-ELAPSED))
                 <dmiles> cyc: (+ 1 1)
23.12.18 10:28:22<dmiles> cyc: (+ 1 1)
23.12.18 10:28:23<dmiles> cyc: (+ 1 1)
23.12.18 10:28:24<dmiles> cyc: (+ 1 1)
23.12.18 10:28:25<dmiles> cyc: (+ 1 1)
23.12.18 10:28:33<dmiles> heh
23.12.18 10:28:41<dmiles> i will versie the 1 and the 5 now
23.12.18 10:28:45<cyc> k
23.12.18 10:28:54*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 10:29:16<dmiles> see i program that way to
23.12.18 10:29:23*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
                 <cyc> going to test autovivification
23.12.18 10:29:24<cyc> cyc: (+ 1 1)
23.12.18 10:29:28<dmiles> cyc: (+ 1 1)
23.12.18 10:29:46<cyc> cyc: (+ 1 1)
23.12.18 10:29:48<aindilis> "2"
23.12.18 10:29:49<aindilis> "2"
23.12.18 10:29:56<cyc> cyc: (pc (function-symbol-arglist 'TIME-ELAPSED))
23.12.18 10:29:58<aindilis> "SUBLISP::REQ-0 SUBLISP::REQ-1 &OPTIONAL SUBLISP::OPT-2 "
23.12.18 10:30:17<dmiles> you ging to make it suicied every 5 minutes?
23.12.18 10:30:35<dmiles> (j/k)
23.12.18 10:30:43<cyc> hehe
23.12.18 10:30:58<cyc> I'll have to put some error handling in
23.12.18 10:31:19<cyc> but I'm happy with progress so far, we at least have it so you can work with it
23.12.18 10:31:30<dmiles> yep!
23.12.18 10:31:32<cyc> I knew it was going to be buggy as opposed to a perl version
23.12.18 10:31:39<cyc> maybe I will write the perl version next
23.12.18 10:32:02<dmiles> that bypasses the OpenCYC conenc tto the RCYC serfver
23.12.18 10:32:23<cyc> well the perl already is accessing rcyc, this is rcyc of course
23.12.18 10:32:40<dmiles> even though cycorp claims it isnt the the Rcyc client API is not opencyc
23.12.18 10:33:32<dmiles> the client API stuill uses the JavaStreamTokenizer
23.12.18 10:33:47<dmiles> the RCyc server is really wirttne in lisp
23.12.18 10:33:52<dmiles> the Client is writtne in java
23.12.18 10:33:59<cyc> https://github.com/aindilis/perllib/blob/master/System/Cyc/ResearchCyc1_0/Java/CycAccess.pm
23.12.18 10:34:01<dmiles> *the serve ris Lisp trnalsated to JavA)
23.12.18 10:34:31<dmiles> yeah that the crap code
23.12.18 10:35:08<cyc> hehe, yeah mine too - mine is what you get when someone has motivation but not skill
23.12.18 10:35:19<dmiles> "import org.opencyc.cycobject.CycFort;"
23.12.18 10:36:19<dmiles> heh the fact you making it work this well when cycrpp claim you need the rewqiren version
23.12.18 10:36:45<cyc> well I can try to wrap the rewritten version
23.12.18 10:36:54<cyc> that came out right after I finished this
23.12.18 10:37:03<cyc> "finished"
23.12.18 10:37:07<cyc> *got tired of working on
23.12.18 10:37:19<cyc> actually iirc I was interrupted
23.12.18 10:37:46<cyc> I was working on IAEC, that's when I met M and the AI got derailed for a bit
23.12.18 10:37:52<dmiles> https://github.com/cycorp/api-suite/tree/master/core-api/src/main/java/com/cyc
23.12.18 10:37:55<cyc> simply because of changing time commitments
23.12.18 10:38:27<cyc> heh
23.12.18 10:38:46<cyc> is it stable?
23.12.18 10:39:36<cyc> M is the reason I worked so hard on FLP
23.12.18 10:39:49<dmiles> i trust it more than the opencyc code
23.12.18 10:39:50<cyc> she wanted to apply the AI to making our future work out
23.12.18 10:40:23<dmiles> i wont stick you to Cyc work :)
23.12.18 10:40:47<cyc> hehe
23.12.18 10:40:55<dmiles> but it is annoying that it works so much better than ours
23.12.18 10:41:14<dmiles> (at being cyc)
23.12.18 10:41:43<dmiles> which is why i still love cyc
23.12.18 10:42:13<cyc> it = ? , ours = ?
23.12.18 10:42:15<cyc> https://frdcsa.org/~andrewdo/dmiles/project_registry.pl
23.12.18 10:42:42<dmiles> cyc is btter at being cyc than logicmo is being cyc
23.12.18 10:42:46<cyc> ah
23.12.18 10:42:50<cyc> yeah
23.12.18 10:43:01<cyc> well it's a hard path to follow
23.12.18 10:43:17<cyc> which is why I'm thinking to start implementing some of PrologMUD in CYC
23.12.18 10:43:33<cyc> I wanted to implement more and more of FLP in CYC
23.12.18 10:43:45<dmiles> its stuff like BASIC-BAG LUCENE-PASSAGE-LIST GOOGLE-PASSAGE-LIST BASIC-END-POINTER-LIST TEST-LIST-ELEMENT BASIC-TRIPLET SUBLOOP-PRIVATE-PAIR ASYNCH-BASIC-DOUBLY-LINKED-QUEUE BASIC-DOUBLY-LINKED-IPC-QUEUE TEXT-WRITER XML-WRITER GOOGLE-CLIENT LUCENE-CLIENT PROPRIETARY-SLURPER-FILTER PERSON-SLURPER-FILTER ARC-SLURPER-FILTER ARC-LEXICON-SLURPER XML-PROXY RKF-BB-PROXY RKF-UIA-PROXY HTML-QUESTION
23.12.18 10:43:46<dmiles> -ANSWERING-AGENT
23.12.18 10:44:41<dmiles> no one remaining at cycorp has ever seen that code 
23.12.18 10:44:58<cyc> it's sad really
23.12.18 10:45:10<cyc> don't want the code to go terminal
23.12.18 10:45:53<dmiles> well thje RTP-PASER cycifier in 1998 still can be beat even though they abandoned it completely iin 1999
23.12.18 10:46:02<dmiles> still cant be beat
23.12.18 10:46:11<cyc> yeah
23.12.18 10:46:53<dmiles> which was basically a swarmed hyper version of a prolog DCG parser
23.12.18 10:47:15<cyc> cyc: (princ (apropos "rtp-parser"))
23.12.18 10:47:17<aindilis> T
23.12.18 10:47:32<cyc> cyc: (see (apropos "rtp-parser"))
23.12.18 10:47:33<aindilis> NIL
23.12.18 10:47:41<dmiles> cyc: (princ (apropos "RTP-"))
23.12.18 10:47:43<aindilis> T
23.12.18 10:47:50<cyc> cyc: (prin1-to-string (apropos "rtp-parser"))
23.12.18 10:47:52<aindilis> "T"
23.12.18 10:48:28<cyc> cyc: (mapc #'print (constant-apropos "api"))
23.12.18 10:48:30<aindilis> "#$3-DUltraPinball2CreepNight-TheGame"
                 <aindilis> "#$3-DUltraPinballTheLostContinent-TheGame"
                 <aindilis> "#$3DUltraPinballCollection-TheGame"
                 <aindilis> "#$AMRESCOCapitalTrust"
23.12.18 10:48:33<aindilis> "#$API-TheWord"
23.12.18 10:48:34<cyc> oops
23.12.18 10:48:36<aindilis> "#$AbujaCapitalTerritoryNigeria"
23.12.18 10:48:38<dmiles> need to redirect *STANDER-OUTPUT*
23.12.18 10:48:40<aindilis> "#$AchariaApicalis"
23.12.18 10:48:43<aindilis> "#$AechmeaPineliana"
23.12.18 10:48:46<aindilis> "#$AllianceCapitalMgmtLP-Corporation"
23.12.18 10:48:49<aindilis> ...
23.12.18 10:48:55<cyc> cyc: (mapc #'print (apropos "api"))
23.12.18 10:49:19<dmiles> that code is litteral outputed to stdout 
23.12.18 10:49:29<cyc> cyc: (SHOW-APROPOS-RESULTS "api")
23.12.18 10:50:32<dmiles> cyc: (apropos :RTP)
                 <cyc> CYC(108): (SHOW-APROPOS-RESULTS (list "api"))
                 <cyc> (SHOW-APROPOS-RESULTS (list "api"))
                 <cyc>  
23.12.18 10:50:33<cyc> Error: The value "api" failed to match the CDESTRUCTURING-BIND pattern (SYMBOL &REST REST).
                 <aindilis> T
23.12.18 10:50:35<cyc>  
23.12.18 10:51:41<dmiles> when i do tha tover the API soect i see the poutpout on the server
23.12.18 10:52:24<dmiles> when i do that over the remote socket
23.12.18 10:53:05<dmiles> oh i wrote a fix for this
23.12.18 10:53:15<cyc> that would be great
                 <cyc>  
                 <cyc>  
23.12.18 10:54:49<cyc> cyc: (date)
23.12.18 10:55:23<cyc> cyc: (date-abbreviation-string)
23.12.18 10:56:47<dmiles>  (CDO-ALL-SYMBOLS (sym)
                 <dmiles>       (xfer-symbol sym (fif (eq *CYC-PACKAGE* (symbol-package sym)) *SUBLISP-PACKAGE* *CYC-PACKAGE*))
                 <dmiles>       (cpushnew sym *greppable-symbols*))
23.12.18 10:57:09<dmiles> cyc: (defvar *greppable-symbols* ())
23.12.18 10:57:11<aindilis> *GREPPABLE-SYMBOLS*
23.12.18 10:57:34<dmiles> cyc: (CDO-ALL-SYMBOLS (sym)  (cpushnew sym *greppable-symbols*))
23.12.18 10:58:00<dmiles> cyc: (car *greppable-symbols*)
23.12.18 10:58:01<cyc>  
23.12.18 10:58:02<cyc> 2018-12-23 10:56:47 org.opencyc.api.CycApiException: Unimplemented method : SubLSpecialOperatorDeclarations.cdo_all_symbols()
                 <aindilis> NIL
23.12.18 10:58:19<dmiles> :)
23.12.18 10:58:41<dmiles> cyc: (CDO-SYMBOLS *CYC-PACKAGE*  (sym)  (cpushnew sym *greppable-symbols*)))
23.12.18 10:58:59<dmiles> that one to ?
23.12.18 10:59:04<cyc> yeah
                 <cyc>  
23.12.18 10:59:31<cyc> %CDO-SYMBOLS
23.12.18 10:59:45<dmiles> cyc: (%CDO-SYMBOLS *CYC-PACKAGE*  (sym)  (cpushnew sym *greppable-symbols*)))
23.12.18 11:00:16<dmiles> cyc: (%CDO-SYMBOLS (*CYC-PACKAGE*  (sym))  (cpushnew sym *greppable-symbols*)))
23.12.18 11:00:37<cyc> cyc: (%CDO-SYMBOLS (*CYC-PACKAGE*  (sym)) (cpushnew sym *greppable-symbols*))
                 <cyc>  
23.12.18 11:00:45<cyc> cyc: (%CDO-SYMBOLS (*CYC-PACKAGE*  (sym)) (cpushnew sym *greppable-symbols*))
23.12.18 11:01:02<dmiles> cyc: (list 1)
23.12.18 11:01:20<dmiles> cyc: (list "asdasd")
23.12.18 11:01:23*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 11:01:54*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 11:01:58<dmiles> cyc: *CYC-PACKAGE*
23.12.18 11:02:00<dmiles> cyc: (+ 1 1)
23.12.18 11:02:18<cyc> java.lang.ClassCastException: org.opencyc.cycobject.CycSymbol cannot be cast to org.opencyc.cycobject.CycList
23.12.18 11:02:19<aindilis> "2"
23.12.18 11:02:32<cyc> cyc: (%CDO-SYMBOLS (*CYC-PACKAGE*  (sym)) (cpushnew sym *greppable-symbols*))
23.12.18 11:02:53<cyc> cyc (+ 1 1)
23.12.18 11:03:02<dmiles> that ClassCastException is an example wehre the Client APi didnt replace all the skills of the server datatypes
23.12.18 11:03:30<cyc> cyc (+ 1 1)
23.12.18 11:03:42<cyc> cyc (+ 1 1)
23.12.18 11:03:50<dmiles> collen
23.12.18 11:04:00<cyc> cyc (+ 1 1)
23.12.18 11:04:09<dmiles> cyc: (+ 1 1)
23.12.18 11:04:13<aindilis> "2"
23.12.18 11:04:21<cyc> cyc (+ 1 1)
23.12.18 11:04:36<cyc> cyc: (+ 1 1)
23.12.18 11:04:37* dmiles has still left it off more than aindilis
23.12.18 11:04:38<aindilis> "2"
23.12.18 11:05:04<cyc> well let me know any syntax you'd like 
23.12.18 11:05:09<cyc> to prevent such mistakes
23.12.18 11:05:17<cyc> #(+ 1 1)
23.12.18 11:05:32<cyc> !(+ 1 1)
23.12.18 11:06:17<cyc> cyc: (pc (list *CYC-PACKAGE*))
23.12.18 11:06:18<aindilis> "#<The CYC package> "
23.12.18 11:06:36<cyc> cyc: (pc (list *greppable-symbols*))
23.12.18 11:06:37<aindilis> "NIL "
23.12.18 11:06:48<dmiles> good #'pc protect the client from stuff
23.12.18 11:07:24<cyc> I think I'm going to take a break and then work some on NLP
23.12.18 11:07:28<dmiles>  (pc (list (CLASS-OF *CYC-PACKAGE*)))
23.12.18 11:07:35<cyc> cyc: (pc (list (CLASS-OF *CYC-PACKAGE*)))
23.12.18 11:07:37<dmiles> cyc: (pc (list (CLASS-OF *CYC-PACKAGE*)))
23.12.18 11:07:45<cyc> class-of not fboundp
23.12.18 11:07:48<dmiles> cyc: (pc (list (TYPE-OF *CYC-PACKAGE*)))
23.12.18 11:07:49<aindilis> "*DTP-PACKAGE* "
23.12.18 11:07:59<dmiles> cyc: (pc (list (TYPE-OF :K)))
23.12.18 11:08:00<aindilis> "*DTP-SYMBOL* "
23.12.18 11:08:07<dmiles> cyc: (pc (list (TYPE-OF "FDASD")))
23.12.18 11:08:09<aindilis> "*DTP-STRING* "
23.12.18 11:08:36<cyc> cyc: (pc (list (type-of '(#$isa #$AndrewDougherty #$AIResearcher))))
23.12.18 11:08:38<aindilis> "*DTP-CONS* "
23.12.18 11:08:46<dmiles> yeah .. but thnak you for get the bot one here!
23.12.18 11:08:56<cyc> sure!
23.12.18 11:09:01<cyc> we'll need to implement persistence
23.12.18 11:09:32<dmiles> you just load sublfiles that rebuilt your KE rioght?
23.12.18 11:09:36<cyc> cyc: (pc (function-symbol-arglist "write-world"))
23.12.18 11:09:59<cyc> well so if we make changes, and want to commit them
23.12.18 11:10:18<dmiles> Whitten deisnged persistence usding his system
23.12.18 11:10:27<dmiles> i think he figured out transcripoting
23.12.18 11:10:43<dmiles> (desinged.. design a workflow tha tis)
23.12.18 11:10:47<cyc> cyc: (cap "knows")
23.12.18 11:10:49<aindilis> NIL
23.12.18 11:10:54<cyc> cyc: (cap "know")
23.12.18 11:10:56<aindilis> NIL
23.12.18 11:11:11<cyc> cyc: (pc (constant-apropos "knows"))
23.12.18 11:11:12<aindilis> "#$BeforetheDevilKnowsYoureDead-Movie #$CST-CycKnowsWhatItDoesntKnow #$CST-CycKnowsWhatItKnows #$CST-DoesBushKnowSomeoneWhoDoesntLiveInAntarctica #$CST-FalseThatCarterKnowsHesPresidentIn86AD #$CST-SpeakerKnowsLanguageSpoken #$FinancialKCT-EveryAccountantKnowsAboutSomeAccountingCOC #$GettingToKnowSomeone #$KnowsModelFn #$Knowsley-BoroughEngland #$biographicallyKnowsAbout #$knows #$knowsAbout #$knowsAboutIndirectlyVia #$know
23.12.18 11:11:13<dmiles> that he (write-transcript. )
23.12.18 11:11:28<cyc> cyc: (comment #$knowsAbou)
23.12.18 11:11:32<cyc> cyc: (comment #$knowsAbout)
23.12.18 11:11:33<aindilis> "<code>(#$knowsAbout AGENT THING)</code> means that the #$IntelligentAgent <code>AGENT</code> knows something about <code>THING</code>.  This predicate represents more than simple awareness, but exactly what is known -- the content of <code>AGENT</code>'s knowledge about <code>THING</code> -- is not specified.  For example, (#$knowsAbout #$MichaelJordan #$Basketball-TheGame).
23.12.18 11:11:50<cyc> cyc: (pc (constant-apropos "persistence"))
23.12.18 11:11:51<aindilis> "#$MKMPersistenceOfAnalyticRelations #$MKMPersistenceOfDifferentialEquations #$PersistenceDistribution #$PersistenceOfMemory-Painting #$Ramp-PersistenceDistribution #$SpatialPersistenceDistribution #$Spike-PersistenceDistribution #$Step-PersistenceDistribution #$TemporalPersistenceDistribution #$TemporalStep-PersistenceDistribution #$Uniform-PersistenceDistribution #$UniformPersistenceDistributionWithValueFn #$mtPersistenc
23.12.18 11:12:18<cyc> cyc: (constant-apropos "Whitten")
23.12.18 11:12:20<aindilis> "#$DannyWhitten-Musician"
23.12.18 11:12:21<aindilis> "#$DereckWhittenburg-CollegeCoach"
                 <aindilis> "#$JanetHubert-Whitten-Person"
23.12.18 11:12:36<cyc> cyc: (f "DavidWhitten")
23.12.18 11:12:38<aindilis> #$DavidWhitten
23.12.18 11:13:00<cyc> cyc: (a '(#$isa #$DavidWhitten #$AIResearcher) #$POSICommunityMt)
23.12.18 11:13:02<aindilis> T
23.12.18 11:13:21<dmiles> he calls me aobut every two weeks .. but i am alwaysa asleep whben he calls
23.12.18 11:13:52<cyc> cyc: (q '(#$arg2Isa #$knowsAbout ?X) #$BaseKB)
23.12.18 11:13:53<aindilis> ((var-X "." "#$Thing"))
23.12.18 11:14:09<cyc> cyc: (a '(#$knowsAbout #$DavidWhitten "CYC transcripts and persistence") #$POSICommunityMt)
23.12.18 11:14:10<aindilis> T
23.12.18 11:14:22<cyc> cyc: (q '(#$knowsAbout ?X ?Y) #$POSICommunityMt)
23.12.18 11:14:24<aindilis> ((var-X "#$InstanceNamedFn" "Danny Hillis" "#$ComputerScientist") (var-Y "." "#$MetawebInc"))
                 <aindilis> ((var-X "." "#$StagecoachGroup") (var-Y "." "#$Megabus-UnitedKingdomTransportationCompany"))
23.12.18 11:14:25<aindilis> ((var-X "." "#$StagecoachGroup") (var-Y "." "#$Megabus-NorthAmericanTransportationCompany"))
23.12.18 11:14:28<aindilis> ((var-X "." "#$UnitedStatesArmy") (var-Y "." "#$JointTacticalGroundStation"))
23.12.18 11:14:31<aindilis> ((var-X "." "#$MissileDefenseAgency") (var-Y "." "#$USGroundBasedMidcourseDefenseSystem"))
                 <aindilis> ((var-X "." "#$Argentina") (var-Y "#$PresidentFn" "#$Argentina"))
23.12.18 11:14:34<aindilis> ((var-X "." "#$India") (var-Y "#$PresidentFn" "#$India"))
23.12.18 11:14:35<dmiles> cyc: (pc (constant-apropos "MKM"))
23.12.18 11:14:37<aindilis> ((var-X "." "#$UnitedStatesOfAmerica") (var-Y "#$PresidentFn" "#$UnitedStatesOfAmerica"))
23.12.18 11:14:40<aindilis> ((var-X "." "#$USDAFSPacificSouthwesternRegion-Org") (var-Y "#$InstanceWithRelationFromFn" "#$RegionallyPartitionedUSDAFSRegion" "#$geographicalSubRegions" "#$USDAFSPacificSouthwestRegion"))
23.12.18 11:14:44<aindilis> ...
23.12.18 11:14:47<aindilis> "#$MKM00IsPossibleAndHasAnAnswer #$MKM0ne1AsRealNumbers #$MKM1011LimitsAndColimits #$MKM1012Images #$MKM1013Quotients #$MKM1014SetIsAPimathsfWpretopos #$MKM1015TheAxiomOfChoiceImpliesExcludedMiddle #$MKM101TheCategoryOfSets #$MKM102CardinalNumbers #$MKM103OrdinalNumbers #$MKM104ClassicalWellorderings #$MKM105TheCumulativeHierarchy #$MKM10SetTheory #$MKM110PatternMatchingAndRecursion #$MKM111PropositionsAsTypes #$MKM111TheF
23.12.18 11:14:48*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Excess Flood
23.12.18 11:15:05<cyc> wow excess flood ban
23.12.18 11:15:14<cyc> have to put a length cap
23.12.18 11:15:33<dmiles> i use an "eggdrop" for my connector
23.12.18 11:15:48<cyc> cool, will look into integrating it
23.12.18 11:15:52<dmiles> (so it at leas trecohjoins)
23.12.18 11:15:58<dmiles> (rejoins)
23.12.18 11:16:39<cyc> well besides all the GA-style debugging and bug-ridden nature of my code this has been pretty productive
23.12.18 11:16:56<dmiles> yep
23.12.18 11:17:04<cyc> thanks for helping me get back into AI
23.12.18 11:17:11<cyc> what would you like me to work on now?
23.12.18 11:18:37<dmiles> i think teh SubL mud was a good idea.. though it might feel like we are duplicating
23.12.18 11:18:56<cyc> well I'm fine with that feeling if you are
23.12.18 11:19:15<dmiles> yeah i am fine with it.. since righ tnow i am really focused on the EC solver
23.12.18 11:19:42<cyc> okay well I think I will work on something else then
23.12.18 11:19:55<cyc> I'll see you later, thanks a billion for helping me troubleshoot this
23.12.18 11:20:05<dmiles> yep! ttys
23.12.18 11:20:15<cyc> ttys
23.12.18 11:21:31*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 11:21:36<dmiles> cyc: (+ 1 1)
23.12.18 11:23:52*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.12.18 11:24:53*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.12.18 11:24:59<dmiles> cyc: (+ 1 1)
23.12.18 15:23:50*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
23.12.18 15:23:55<dmiles> cyc: (+ 1 1)
23.12.18 17:24:57<aindilis> cyc: (+ 1 1)
23.12.18 17:26:06<cyc> cyc: (+ 1 1)
23.12.18 17:26:08<cyc> "2"
23.12.18 17:26:23<aindilis> cyc: (+ 1 1)
23.12.18 17:27:02<aindilis> cyc: (+ 1 1)
23.12.18 17:28:18<cyc> cyc: (+ 1 1)
23.12.18 17:28:19<cyc> "2"
23.12.18 17:28:23<aindilis> cyc: (+ 1 1)
23.12.18 17:28:34*** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
23.12.18 17:29:02*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
23.12.18 17:29:07<dmiles> cyc: (+ 1 1)
23.12.18 17:29:46<aindilis> cyc: (+ 1 1)
23.12.18 17:31:24<cyc> cyc: (+ 1 1)
23.12.18 17:31:34<cyc> cyc: (+ 1 1)
23.12.18 17:31:40<cyc> cyc: (+ 1 1)
23.12.18 17:31:43<cyc> "2"
23.12.18 17:31:49<aindilis> cyc: (+ 1 1)
23.12.18 17:32:40<aindilis> cyc: (+ 1 1)
23.12.18 17:32:41<cyc> "2"
23.12.18 17:32:50<aindilis> dmiles: good to go
23.12.18 17:51:54<aindilis> cyc: (+ 1 1)
23.12.18 17:52:06<aindilis> cyc: (+ 1 1)
23.12.18 17:52:08<cyc> "2"
23.12.18 18:01:23*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
23.12.18 18:01:29<dmiles> cyc: (+ 1 1)
                 <aindilis> k here it goes
23.12.18 18:01:30<cyc> "2"
23.12.18 18:01:35<aindilis> cyc: (q '(#$usesProgram ?X (#$softwareFn "vim")) #$IRCKBMt)
23.12.18 18:01:36<cyc> ((var-X "#$personHavingIRCAliasFn" "netkam2"))
23.12.18 18:01:37<cyc> ((var-X "#$personHavingIRCAliasFn" "ignatiz-"))
                 <cyc> ((var-X "#$personHavingIRCAliasFn" "El_Che"))
                 <cyc> ((var-X "#$personHavingIRCAliasFn" "forcer"))
23.12.18 18:01:39<cyc> ((var-X "#$personHavingIRCAliasFn" "no_gravity"))
23.12.18 18:01:43<cyc> ((var-X "#$personHavingIRCAliasFn" "minty-hime"))
23.12.18 18:01:46<cyc> ((var-X "#$personHavingIRCAliasFn" "kenzo"))
23.12.18 18:01:49<cyc> ((var-X "#$personHavingIRCAliasFn" "rmallah"))
23.12.18 18:01:52<cyc> ((var-X "#$personHavingIRCAliasFn" "jaziz"))
23.12.18 18:01:55<cyc> ...
23.12.18 18:02:07<Copenhagen_Bram> hey add me! I use neovim!
23.12.18 18:02:14<aindilis> cyc: (q '(#$usesProgram ?X (#$softwareFn "neovim")) #$IRCKBMt)
23.12.18 18:02:15<cyc> ((var-X "#$personHavingIRCAliasFn" "Research"))
23.12.18 18:02:26<aindilis> okay I will add you
23.12.18 18:02:42<Copenhagen_Bram> thanks
23.12.18 18:02:55<aindilis> cyc: (a '(#$usesProgram (#$personHavingIRCAliasFn "Elon_Satoshi") (#$softwareFn "neovim")) #$IRCKBMt)
23.12.18 18:02:56<cyc> T
23.12.18 18:03:00<aindilis> cyc: (q '(#$usesProgram ?X (#$softwareFn "neovim")) #$IRCKBMt)
23.12.18 18:03:01<cyc> ((var-X "#$personHavingIRCAliasFn" "Research"))
                 <cyc> ((var-X "#$personHavingIRCAliasFn" "Elon_Satoshi"))
23.12.18 18:03:05<aindilis> :)
23.12.18 18:03:21<aindilis> added to the KB
                 <Copenhagen_Bram> why does it look like you're speaking to the robot in perl?
23.12.18 18:03:30<aindilis> well that's actually Lisp
23.12.18 18:03:33<Copenhagen_Bram> sorry
23.12.18 18:03:36<aindilis> SubLisp to be precise
23.12.18 18:03:40<aindilis> one sec
23.12.18 18:03:43<Copenhagen_Bram> some of us only know lojban you know
23.12.18 18:03:51<aindilis> http://www.cyc.com/subl-information/subl-reference/
23.12.18 18:04:00<Copenhagen_Bram> i myself have only a basic understanding of bash
23.12.18 18:04:08<aindilis> have you read the bash man page?
23.12.18 18:04:36<Copenhagen_Bram> i might have skimmed it once
23.12.18 18:04:40<aindilis> that's one of the essential documents to read imho
23.12.18 18:05:15<Copenhagen_Bram> i've been learning bash by using it and looking things up on ddg
23.12.18 18:05:25<aindilis> once you've experimented enough to have an understanding of something, then it really pays to read the manual, since otherwise you would have to reverse engineer everything
23.12.18 18:05:32<aindilis> granted it doesn't always get told to you in the order you would like
23.12.18 18:05:34<Copenhagen_Bram> hmm
23.12.18 18:07:01<aindilis> yeah CYC is proprietary, but it's the 2nd coolest program ever written.  dmiles here is writing PrologMUD which contains a *free/libre* replacement for CYC!
23.12.18 18:07:24<Copenhagen_Bram> ooh!
23.12.18 18:07:48<aindilis> https://github.com/TeamSPoon/prologmud
23.12.18 18:08:04<Copenhagen_Bram> um... I don't think I understand a lot of this
23.12.18 18:08:09<Copenhagen_Bram> it's over my head
23.12.18 18:08:21<aindilis> ah, well I find it can be fun to immerse myself in something
23.12.18 18:08:25<aindilis> and pick up bits and pieces
23.12.18 18:08:32<Copenhagen_Bram> I know you're making databases in lisp but that's it
23.12.18 18:08:35<aindilis> right
23.12.18 18:08:36<Copenhagen_Bram> hmm
23.12.18 18:08:49<Copenhagen_Bram> just letting you know, so you can ELI5 things to me
                 <aindilis> I always gravitate to places where people know more than I do
23.12.18 18:08:58<aindilis> ELI5?
23.12.18 18:09:01<aindilis> googling
23.12.18 18:09:04<Copenhagen_Bram> explain like i'm five
23.12.18 18:09:07<aindilis> ah
23.12.18 18:09:16<Copenhagen_Bram> now i know you're not a redditor lol
23.12.18 18:09:17<aindilis> yeah I'm really bad at explaining things, sorry!
23.12.18 18:09:34<aindilis> I cannot summarize, are you the same way?
23.12.18 18:09:52<Copenhagen_Bram> i dunno, I managed to explain ubuntu to a lady once
23.12.18 18:09:57<aindilis> cool
23.12.18 18:10:18<aindilis> my big passion in life is packaging all the software that's out there, but you're saying you want to use gentoo?
23.12.18 18:10:37<aindilis> they have packages to called gents, it's kind of like a debian source pacakge, right?
                 <Copenhagen_Bram> I want to explain things like open source and free software and linux to people, so maybe i know a bit about that
23.12.18 18:10:47<aindilis> that's great
23.12.18 18:10:49<Copenhagen_Bram> gents? i thought they were called ebuilds
23.12.18 18:10:58<aindilis> oh you're probably right
23.12.18 18:11:07<Copenhagen_Bram> yeah
23.12.18 18:11:18<Copenhagen_Bram> what's a debian source package like?
23.12.18 18:11:34<Copenhagen_Bram> i suppose it's sort of like a debian ebuild
23.12.18 18:11:36<aindilis> well it's source code and you can say 'apt-cache source <packagename>
23.12.18 18:11:43<aindilis> and it will download it
23.12.18 18:11:45<Copenhagen_Bram> hmm
23.12.18 18:11:49<aindilis> then there are commands that can build the package
23.12.18 18:11:59<Copenhagen_Bram> is it like an arch linux pkgbuild?
23.12.18 18:12:10<aindilis> so that if you really want to fiddle with the internals you can
23.12.18 18:12:13<aindilis> probably?
23.12.18 18:12:18<Copenhagen_Bram> > commands that can build the package
23.12.18 18:12:21<aindilis> yeah
23.12.18 18:12:34<Copenhagen_Bram> how many commands do you have to run to turn it into a package?
23.12.18 18:12:40<aindilis> like 1 or 2
23.12.18 18:12:46<Copenhagen_Bram> oh
23.12.18 18:12:51<aindilis> I'm trying to train machine learning algorithms to bridge the gap from original source code to a debian source package
23.12.18 18:12:58<Copenhagen_Bram> is there a package manager for debian that compiles things from source?
23.12.18 18:13:25<Copenhagen_Bram> do you mean you're making AI to make debian source packages for source codes?
23.12.18 18:13:34<aindilis> oh I see, well no not afaik, I think you have to download and build them yourself.  but I think it can handle dependent source packages, so that is sort of like it
23.12.18 18:13:38<aindilis> yes!
23.12.18 18:14:01<Copenhagen_Bram> oh cool
23.12.18 18:14:10<aindilis> https://github.com/aindilis/packager
23.12.18 18:14:23<aindilis> that's the main work on it
23.12.18 18:14:26<Copenhagen_Bram> if you care to learn the arts of arch and gentoo, you should make it write pkgbuilds and ebuilds too
23.12.18 18:14:34<aindilis> absolutely
23.12.18 18:14:38<aindilis> totally planned
23.12.18 18:14:46<aindilis> I'm just struggling to get it going still
23.12.18 18:15:06<Copenhagen_Bram> hmm, you have to compile the program yourself, as in the debian source package doesn't have a script to compile the source?
                 <aindilis> in fact `alien` can sort of convert between a few formats alreayd
23.12.18 18:15:21<aindilis> that's the approach I'll probably take at first -> build for debian then translate to gentoo etc
23.12.18 18:15:28<Copenhagen_Bram> in pkgbuilds and i assume gentoo's ebuilds they tell the package manager how to compile the program
23.12.18 18:15:40<aindilis> yeah
23.12.18 18:15:56<aindilis> cool
                 <Copenhagen_Bram> hmm
23.12.18 18:16:04<Copenhagen_Bram> is there any way i can help you?
23.12.18 18:16:08<aindilis> cyc: (constant-apropos "Gentoo")
23.12.18 18:16:10<cyc> "#$GentooLinux"
                 <cyc> "#$GentooPenguin"
                 <Copenhagen_Bram> moral support?
23.12.18 18:16:14<aindilis> yes!
23.12.18 18:16:23<Copenhagen_Bram> cyc: i cu do se bangu la lojban
23.12.18 18:16:31<aindilis> nice!
23.12.18 18:16:42<Copenhagen_Bram> uhh mi nintadni
23.12.18 18:16:44<aindilis> cyc: (ygoal "add lojban support")
23.12.18 18:16:46<cyc> T
23.12.18 18:17:20<aindilis> cyc: (ygoal "have it track who enters assertions and when")
23.12.18 18:17:21<cyc> T
23.12.18 18:17:26<Copenhagen_Bram> cyc: (ygoal "also add toki pona, esperanto, and laadan support")
23.12.18 18:17:33<aindilis> sorry no perms yet
23.12.18 18:17:46<aindilis> haven't put in "firewalls" yet
23.12.18 18:17:53<Copenhagen_Bram> cyc: (exec "sudo su")
23.12.18 18:17:57<aindilis> hehe
23.12.18 18:18:00<aindilis> exactly
23.12.18 18:18:01<Copenhagen_Bram> there now i have privs lol
23.12.18 18:18:17<aindilis> yeah let's start with moral support
23.12.18 18:18:18<Copenhagen_Bram> /s
23.12.18 18:18:23<Copenhagen_Bram> okay
23.12.18 18:18:28<aindilis> in the mean time I can help you with anything that I am capable of
23.12.18 18:18:36<aindilis> thank you!
                 <Copenhagen_Bram> okay
23.12.18 18:18:42<Copenhagen_Bram> yw
                 <aindilis> that means a lot to me you don't know
23.12.18 18:18:52<aindilis> added that to your KB entry
23.12.18 18:19:02<Copenhagen_Bram> what's a KB?
23.12.18 18:19:20<Copenhagen_Bram> <aindilis> in the mean time I can help you with anything that I am capable of 
23.12.18 18:19:22<aindilis> I always forget the answer - it's like a database but with tools to enforce logical consistency or something?
23.12.18 18:19:30<aindilis> googling
23.12.18 18:19:35<Copenhagen_Bram> i need help getting an entry level remote job that pays in bitcoin :/
23.12.18 18:19:58<aindilis> https://en.wikipedia.org/wiki/Knowledge-based_system
23.12.18 18:20:00<Copenhagen_Bram> hmm
23.12.18 18:20:03<aindilis> nice
23.12.18 18:20:30<Copenhagen_Bram> i also need help washing the dishes for 10 or 20 minutes a day
23.12.18 18:20:41<Copenhagen_Bram> i've logged so many days that i didn't do the dishes lol
23.12.18 18:20:44<aindilis> cyc: (ygoal "help Elon_Satoshi obtain entry level telecommute work that pays in bitcoin")
23.12.18 18:20:46<cyc> T
23.12.18 18:20:51<aindilis> ah you need reminders
23.12.18 18:21:04<Copenhagen_Bram> hmm
23.12.18 18:21:27<aindilis> pm me your phone number and install xabber and I can create you an account and I can have my system ping you with reminders whenever you want
23.12.18 18:21:30<Copenhagen_Bram> or i need to be less lazy
23.12.18 18:21:33<aindilis> xabber on the phone
23.12.18 18:21:50<aindilis> well keep in mind I have executive dysfunction because of asperger's syndrome
23.12.18 18:21:51<Copenhagen_Bram> what's the phone number for?
23.12.18 18:22:01<aindilis> oh right, I don't need that sorry
23.12.18 18:22:09<aindilis> sorry was thining back when it worked by texting
23.12.18 18:22:13<aindilis> *thinking
23.12.18 18:22:23*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
23.12.18 18:22:24<Copenhagen_Bram> i haven't used xmpp in a while
23.12.18 18:22:40<aindilis> yeah it was the only way I could get it to work
23.12.18 18:22:47<Copenhagen_Bram> hmm
23.12.18 18:22:48<aindilis> since cricket text messaging gateway is borked
23.12.18 18:22:59<Copenhagen_Bram> why don't I take a whack at the dishes right now?
23.12.18 18:23:05<aindilis> sounds great!
23.12.18 18:23:13<Copenhagen_Bram> alright
23.12.18 18:23:24<Copenhagen_Bram> also i have the program remind to make reminders with
23.12.18 18:23:30<Copenhagen_Bram> and the TUI for it wyrd
23.12.18 18:23:39<aindilis> nice
23.12.18 18:23:46<aindilis> that is good work
23.12.18 18:23:56<aindilis> maybe between the two of us we will come up with something to fix executive dysfunction
23.12.18 18:24:15<aindilis> https://frdcsa.org/visual-aid/pdf/Temporal-Planning-and-Inferencing-for-Personal-Task-Management-with-SPSE2.pdf
23.12.18 18:24:21<Copenhagen_Bram> What is executive dysfunction?
23.12.18 18:24:44<aindilis>  Every per-
23.12.18 18:24:46<Copenhagen_Bram> i'll ddg that
23.12.18 18:25:00<aindilis> what is ddg?
23.12.18 18:25:32<aindilis> sorry my copy and paste is messed up, try reading the Introduction of that paper, that explains executive function (and hence dysfunction)
23.12.18 18:25:53<Copenhagen_Bram> ddg is duckduckgo
23.12.18 18:25:57<aindilis> ah cool
23.12.18 18:25:59<Copenhagen_Bram> cuz suck it google
23.12.18 18:26:03<aindilis> yup
23.12.18 18:26:14<aindilis> hey if you need programmatic access to DDG I wrote a wrapper
23.12.18 18:26:21<Copenhagen_Bram> i was reading this https://www.webmd.com/add-adhd/guide/executive-function#1
23.12.18 18:26:27<aindilis> but it uses Chrome presently since the Firefox module aint working right
23.12.18 18:26:28<Copenhagen_Bram> i wonder if i have the same thing
23.12.18 18:26:34<aindilis> chances are yes
23.12.18 18:26:37<Copenhagen_Bram> huh
23.12.18 18:26:55<aindilis> many tech people have it
23.12.18 18:26:58<aindilis> cyc: (+ 1 1)
23.12.18 18:27:00<cyc> "2"
23.12.18 18:27:10<Copenhagen_Bram> i think you've fixed your executive dysfunction, by connecting your computer to your brain with perl to replace that part of your brain
23.12.18 18:27:20<aindilis> exactly that's the plan
23.12.18 18:27:25<aindilis> still aint working well though
23.12.18 18:27:35<aindilis> also prolog and emacs
23.12.18 18:27:47<aindilis> the life planner uses Prolog heavily thanks to dmiles tutelage
23.12.18 18:27:58<Copenhagen_Bram> i've been meaning to get into emacs lol
                 <Copenhagen_Bram> anyways, dishes
23.12.18 18:28:08<Copenhagen_Bram> well actually i need to drain and refill the sink lol
                 <aindilis> kk, I would love to help you with emacs, see you!
23.12.18 18:33:29<aindilis> cyc: (ygoal "have the ability to run a function which prints new subl code to files")
23.12.18 18:33:31<cyc> T
23.12.18 18:33:48<Copenhagen_Bram> what does T mean?
23.12.18 18:33:52<aindilis> True
23.12.18 18:33:57<Copenhagen_Bram> oh
23.12.18 18:34:08<aindilis> I think it means something like I parsed it correctly, maybe it also means that it succeeded, not sure
23.12.18 18:34:19<aindilis> my program doesn't handle the responses from CYC correctly yet
23.12.18 18:34:25<Copenhagen_Bram> hmm
23.12.18 18:34:48<aindilis> cyc (a '(#$isa #$Dog #$Person) #$BaseKB)
23.12.18 18:34:53<aindilis> cyc: (a '(#$isa #$Dog #$Person) #$BaseKB)
23.12.18 18:34:54<cyc> NIL
23.12.18 18:35:01<aindilis> cyc: (a '(#$isa #$AndrewDougherty #$Person) #$BaseKB)
23.12.18 18:35:03<cyc> T
23.12.18 18:35:27<aindilis> cyc: (a '(#$genls #$Dog #$Person) #$BaseKB)
23.12.18 18:35:28<cyc> NIL
23.12.18 18:35:45<aindilis> yeah it knows all dogs are not instances of people
23.12.18 18:35:57<aindilis> cyc: (u '(#$isa #$AndrewDougherty #$Person) #$BaseKB)
23.12.18 18:35:59<cyc> T
23.12.18 18:36:12<aindilis> cyc: (t-or-f '(#$isa #$AndrewDougherty #$Person))
23.12.18 18:36:13<cyc> "true"
23.12.18 18:36:35<aindilis> (function-symbol-arglist 't-or-f)
23.12.18 18:36:39<aindilis> cyc: (function-symbol-arglist 't-or-f)
23.12.18 18:36:46<aindilis> cyc: (pc (function-symbol-arglist 't-or-f))
23.12.18 18:37:35<aindilis> cyc: (pc (function-symbol-arglist 'function-symbol-arglist))
23.12.18 18:37:37<cyc> "SUBLISP::REQ-0 "
23.12.18 18:37:43<aindilis> cyc: (pc (function-symbol-arglist 't-or-f))
23.12.18 18:37:48<aindilis> cyc: (+ 1 1)
23.12.18 18:37:49<cyc> "2"
23.12.18 18:38:19<aindilis> if we had the source we could browse for type restrictions ;)
23.12.18 18:40:10<Copenhagen_Bram> i hope cyc doesn't become a paperclip maximizer lol
23.12.18 18:40:27<Copenhagen_Bram> it's dangerous to play with intelligence explosions
23.12.18 18:40:44<aindilis> that's right we need to inventory things
23.12.18 18:40:52<aindilis> cyc: (comment #$vulnerableTo)
23.12.18 18:40:54<cyc> "(#$vulnerableTo THREAT-OBJ OBJECT HARM-TYPE) means that THREAT-OBJ poses harm of type HARM-TYPE to OBJECT when the two are appropriately situated.  In other words, when THREAT-OBJ can affect OBJECT, it is likely that OBJECT will be damaged in some way.  However, OBJECT's vulnerability persists even if it never happens to be affected by THREAT-OBJ.  The point of stating blanket object-object vulnerabilities is to facilitate the
23.12.18 18:41:39<aindilis> cyc: (arg3Isa #$vulnerableTo ?X)
23.12.18 18:41:52<aindilis> cyc: (q '(#$arg3Isa #$vulnerableTo ?X) #$EverythingPSC)
23.12.18 18:41:53<cyc> ((var-X "." "#$Collection"))
23.12.18 18:42:03<aindilis> cyc: (q '(#$arg1Isa #$vulnerableTo ?X) #$EverythingPSC)
23.12.18 18:42:04<cyc> ((var-X "." "#$TemporallyExistingThing"))
23.12.18 18:42:24<Copenhagen_Bram> aindilis: why do you name all your commits "Nice."?
23.12.18 18:42:33<aindilis> lol you're the first person to ask
23.12.18 18:42:41<aindilis> because I have one gigantic repo
23.12.18 18:42:46<aindilis> and I commit sparingly
23.12.18 18:42:56<aindilis> so there's like a thousand things that got done, and I cannot summarize them all
23.12.18 18:43:30<Copenhagen_Bram> maybe you should commit more frequently
23.12.18 18:43:32<aindilis> also because I'm usually happy with everything in the commit, so "Nice." is how I feel about it
23.12.18 18:43:43<aindilis> well i don't want to overtax my ahrd drives - my repo is 26GB
23.12.18 18:43:50<Copenhagen_Bram> committing gives you a log and backup of every change you've made
23.12.18 18:43:53<Copenhagen_Bram> hmm
                 <aindilis> yeah
23.12.18 18:44:01<aindilis> I'm working on factoring things out, but it's taking time
23.12.18 18:44:04<Copenhagen_Bram> how much space does an ahrd drive hold?
23.12.18 18:44:16<aindilis> between 1 and 8 TB
23.12.18 18:44:31<aindilis> but if I have it checking all the files for changes, that strains the drives
23.12.18 18:44:51<aindilis> I commit about once every other day
23.12.18 18:45:57<aindilis> yeah my project has a lot of things that don't make sense because I didn't know the best practices and it's too late or will take great effort to fix, I keep SPSE2 domains with the complex dependencies mapped out.  It uses a directed graph to tell you which tasks depend on which, and can track which are done, etc.
23.12.18 18:46:45<Copenhagen_Bram> i have a puny *runs df* 291gb hard drive, and i have a yuuuuuge weechat log that's being modified and written to this very moment
                 <aindilis> ttps://www.youtube.com/watch?v=rfUP1jjhIZw
23.12.18 18:47:04<Copenhagen_Bram> plus every time i make a new password i make a git commit
23.12.18 18:47:16<Copenhagen_Bram> will my hard drive wear out?
23.12.18 18:47:28<aindilis> I lost 8 hard drives this year to disk failure
23.12.18 18:47:30<aindilis> YES!!!!!!!!!!!!!
23.12.18 18:47:45<Copenhagen_Bram> how long does it take?
23.12.18 18:47:53<Copenhagen_Bram> and good thing i backed up my home directory yesterday
23.12.18 18:48:01<Copenhagen_Bram> or it might have even been this morning
23.12.18 18:48:29<aindilis> backups, unless you have 3 copies of data, you will lose it
                 <aindilis> (including the original)
                 <aindilis> currently I keep all my important stuff backed up to a git server and some secondary systems, and I have a 1 TB SSD for the most important stuff
23.12.18 18:48:54<Copenhagen_Bram> how much does the git server cost?
                 <dmiles> also writting such a commit message "Nice." can help motivate one to create AI based software engineering tools :)
23.12.18 18:48:55<aindilis> yeah once I was really tired but I went ahead and backed something up, because I figured if I didn't it would eventually come to bite me in the ass
23.12.18 18:49:25<aindilis> and lo and behold like 4 years later I accidentally locked myself out of all my systems but was only able to recover since I had made that backup
23.12.18 18:49:38<Copenhagen_Bram> do you encrypt your data too?
23.12.18 18:49:44<aindilis> I used to, not after that though
23.12.18 18:49:50<Copenhagen_Bram> lol
23.12.18 18:50:08<Copenhagen_Bram> at least i can make 3 copies of a password if i wanted to, on paper
23.12.18 18:50:12<aindilis> well you know hard drives are expensive,there are 8 TB drives on sale for $130 right now
23.12.18 18:50:29<aindilis> you can use them as external drives and run the git on them on your local machine
23.12.18 18:50:34<dmiles> i'd make the third passwd the commit message
23.12.18 18:50:43<aindilis> nice!
23.12.18 18:50:57<aindilis> yeah those kinds of tricks are useful, I do a fair bit of that
23.12.18 18:51:21<Copenhagen_Bram> my trick is to make sure what of= is when i dd
23.12.18 18:51:46<aindilis> alright well I didn't sleep last night, so I'm going to veg out for a bit, but thanks for tracking me down.  I tried to find you but you weren't online iirc.
23.12.18 18:52:07<aindilis> I'm making a system that will notify me when my friends pop online
23.12.18 18:52:08<Copenhagen_Bram> yw
23.12.18 18:52:14<aindilis> it will send me a Xabber message
23.12.18 18:52:26<aindilis> and talk to me over my speakers (that part works, just not the friend detectino stuff)
23.12.18 18:52:29<Copenhagen_Bram> nice, i think i'll use the notify system built into weechat
                 <aindilis> k see you!
23.12.18 18:52:39* Copenhagen_Bram types /notify add aindilis
23.12.18 18:53:02<Copenhagen_Bram> now weechat will tell me if you're online lol
23.12.18 18:53:20<aindilis> coolbeans, ttys!
23.12.18 18:53:32<Copenhagen_Bram> lol sweet dreams
23.12.18 18:53:37<aindilis> :)
23.12.18 18:54:25* Copenhagen_Bram burns gentoo onto a flash drive
23.12.18 18:55:45* Copenhagen_Bram turs on La Fina Venk' and a chronometer and washes dishes
23.12.18 20:55:04<aindilis> cyc: (constant-apropos "Event"))
23.12.18 20:55:10<cyc> "#$2012InUFCEvents"
                 <cyc> "#$ADramaticTurnOfEvents-Album"
                 <cyc> "#$ALI_BABA-EVENT-KS"
23.12.18 20:55:11<cyc> "#$AbbreviationEvent"
23.12.18 20:55:13<cyc> "#$AbsoluteSportsEvent"
23.12.18 20:55:17<cyc> "#$AbsorptionEvent"
23.12.18 20:55:20<cyc> "#$AccreditationEvent"
23.12.18 20:55:23<cyc> "#$AceVentura-TheGame"
23.12.18 20:55:26<cyc> "#$AceVenturaPetDetective-TheMovie"
23.12.18 20:55:29<cyc> ...
23.12.18 20:55:32<aindilis> cyc: (constant-apropos "^Event")
23.12.18 20:55:34<cyc> NIL
23.12.18 21:04:04<Copenhagen_Bram> the game? :o
23.12.18 21:10:36<aindilis> cyc (+ 1 1 )
23.12.18 21:10:38<aindilis> cyc: (+ 1 1 )
23.12.18 21:10:40<cyc> "2"
23.12.18 21:24:09<aindilis> cyc: (+ 1 1)
23.12.18 21:25:29<aindilis> cyc: (+ 1 1)
23.12.18 21:25:31<cyc> "2"
23.12.18 21:47:56*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
23.12.18 21:48:00<dmiles> cyc: (+ 1 1)
23.12.18 21:48:02<cyc> "2"
23.12.18 22:42:29<cyc> cyc: (+ 1 1)
23.12.18 22:42:30<cyc> "2"
24.12.18 00:02:32*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
24.12.18 02:00:28<aindilis> cyc: testing
24.12.18 02:00:46<cyc> aindilis
24.12.18 04:28:12<aindilis> cyc: (+ 1 1)
24.12.18 04:28:14<cyc> "2"
24.12.18 05:19:19<aindilis> cyc: (+ 1 1)
24.12.18 05:19:27<aindilis> cyc: (+ 1 1)
24.12.18 05:19:32<cyc> "2"
24.12.18 05:22:53<aindilis> cyc: (+ 1 1)
24.12.18 05:22:54<cyc> "2"
24.12.18 05:59:28<aindilis> cyc: (+ 1 1)
24.12.18 05:59:29<cyc> "2"
24.12.18 06:13:55<aindilis> cyc: (+ 1 1)
24.12.18 06:13:58<cyc> "2"
24.12.18 07:38:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bwehpxlcweksmqnb) left #logicmoo: Quit: Connection closed for inactivity
24.12.18 07:55:59*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ibnvnyoqmrsylmxz, stoopkid: stoopkid)
24.12.18 07:56:05<dmiles> cyc: (+ 1 1)
24.12.18 09:01:51<stoopkid> best summary i've read on this topic so far: http://xahlee.info/cmaci/notation/lang_notation_formalism.html
24.12.18 09:02:12<stoopkid> they're missing a couple things though, i'm sure you guys could probably extend that with a couple more sections on logic programming
24.12.18 09:57:32<stoopkid> oy, sadly this dude is basically an edgelord
24.12.18 11:18:40*** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 272 seconds
24.12.18 11:18:41*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 272 seconds
24.12.18 16:49:49<Copenhagen_Bram> what dude?
24.12.18 18:16:48*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
24.12.18 18:16:53<dmiles> cyc: (+ 1 1)
24.12.18 18:17:57<cyc> cyc (+ 1 1)
24.12.18 18:18:53<cyc> cyc (+ 1 1)
24.12.18 18:19:46<cyc> cyc (+ 1 1)
24.12.18 18:20:39<cyc> cyc (+ 1 1)
24.12.18 18:21:00*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
24.12.18 18:21:05<dmiles> cyc: (+ 1 1)
24.12.18 18:22:06<cyc> cyc (+ 1 1)
24.12.18 18:25:11<aindilis> cyc (+ 1 1)
24.12.18 18:25:27<aindilis> cyc (+ 1 1)
24.12.18 18:25:35<aindilis> cyc (+ 1 1)
24.12.18 18:25:41<aindilis> cyc (+ 1 1)
24.12.18 18:26:32<aindilis> cyc: (+ 1 1)
24.12.18 18:26:37<cyc> "2"
24.12.18 18:28:08<aindilis> cyc (+ 1 1)
24.12.18 18:31:44<aindilis> cyc: (+ 1 1)
24.12.18 18:31:46<cyc> "2"
24.12.18 18:32:28<aindilis> cyc: (+ 1 1)
24.12.18 18:32:29<cyc> "2"
24.12.18 18:32:32<aindilis> cyc (+ 1 1)
24.12.18 18:32:33<cyc> "2"
24.12.18 18:34:27<aindilis> cyc (+ 1 1)
24.12.18 18:34:28<cyc> "2"
24.12.18 18:34:36<aindilis> cyc (+ 1 1)
24.12.18 18:34:38<cyc> "2"
24.12.18 18:34:44<cyc> cyc (+ 1 1)
24.12.18 18:35:16*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
24.12.18 18:36:06*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
24.12.18 18:36:12<dmiles> cyc: (+ 1 1)
24.12.18 18:36:13<cyc> "2"
24.12.18 18:37:16<cyc> cyc: (+ 1 1)
24.12.18 18:39:08<aindilis> cyc: (+ 1 1)
24.12.18 18:39:09<cyc> "2"
24.12.18 18:39:39<cyc> cyc: (+ 1 1)
24.12.18 18:40:03<cyc> cyc: (+ 1 1)
24.12.18 18:40:20<cyc> cyc: (+ 1 1)
24.12.18 18:40:27<aindilis> cyc: (+ 1 1)
24.12.18 18:40:28<cyc> "2"
24.12.18 18:40:41<aindilis> cyc: (+ 1 1)
24.12.18 18:40:42<cyc> "2"
24.12.18 18:40:48<aindilis> cyc: (+ 1 1)
24.12.18 18:40:49<cyc> "2"
24.12.18 18:41:02<aindilis> cyc: (+ 1 1)
24.12.18 18:41:04<cyc> "2"
24.12.18 18:41:15<cyc> cyc: (+ 1 1)
24.12.18 18:44:32<cyc> verc-default-nicks
24.12.18 18:47:19<aindilis> cyc (+ 1 2)
24.12.18 18:47:21<cyc> "3"
24.12.18 18:48:17<aindilis> cyc (comment "MagAi" #$IrishHistoryMt)
24.12.18 18:48:32<aindilis> cyc (comment "MagAi")
24.12.18 18:48:40<aindilis> cyc (constant-apropos "MagAi")
24.12.18 18:48:42<cyc> "#$AllScoreAverages-VisionSystemAgainstSINGoldStandard"
                 <cyc> "#$AllScoresForVisionSystemAgainstSINGoldStandard"
                 <cyc> "#$CalculateAverageF1ScoreOfVisionSystemAgainstSINGoldStandard"
                 <cyc> "#$CalculateAveragePrecisionOfVisionSystemAgainstSINGoldStandard"
24.12.18 18:48:45<cyc> "#$CalculateAverageRecallOfVisionSystemAgainstSINGoldStandard"
24.12.18 18:48:49<cyc> "#$CalculateF1ScoreOfVisionSystemAgainstSINGoldStandard"
24.12.18 18:48:52<cyc> "#$CalculatePrecisionOfVisionSystemAgainstSINGoldStandard"
24.12.18 18:48:56<cyc> "#$CalculateRecallOfVisionSystemAgainstSINGoldStandard"
24.12.18 18:48:59<cyc> "#$MagAi"
                 <cyc> ...
24.12.18 18:49:12<aindilis> cyc (pc (comment "MagAi" #$IrishHistoryMt))
24.12.18 18:50:26<aindilis> cyc (pc (listify (comment "MagAi" #$IrishHistoryMt)))
24.12.18 18:50:38<aindilis> cyc (listify (comment "MagAi" #$IrishHistoryMt))
24.12.18 18:50:55<aindilis> cyc (all-term-assertions #$MagAi)
24.12.18 18:50:56<cyc> ("#<AS" ("#$nameString" "#$MagAi" "Mag Ai") ":" "IrishHistoryMt" ">")
24.12.18 18:50:57<cyc> ("#<AS" ("#$comment" "#$MagAi" "the great plain in the County Roscommon, extending from Ballymore to Elphin, and from Bellanagare to Strokestown (pronounced Moy wee)") ":" "IrishHistoryMt" ">")
24.12.18 18:51:18<aindilis> cyc (ygoal "fix 'comment")
24.12.18 18:51:20<cyc> T
24.12.18 18:53:27<aindilis> cyc, (all-term-assertions #$Cuchulain)
24.12.18 18:53:28<cyc> ("#<AS" ("#$nameString" "#$Cuchulain" "Cuchulain") ":" "IrishHistoryMt" ">")
                 <cyc> ("#<AS" ("#$comment" "#$Cuchulain" "the usual name of the hero Setanta; son of the god Lug and of Dechtire, and foster-son of Sualtaim (pronounced Cuhulin)") ":" "IrishHistoryMt" ">")
24.12.18 20:57:56<dmiles> haha .. i googled edgeload
24.12.18 21:00:34<dmiles> (i only suspected that what it was) .. i see.. and yeah yeah.. prolog probably goes wherever eh talks about lisp
24.12.18 21:29:10<stoopkid> dmiles: i'd say it probably goes in conjunction with the lisp stuff; functional programming makes a great syntactic/semantic foundation for a proof-system that's why dependently typed lambda calculi are so successful in that regard
24.12.18 21:30:59<stoopkid> right now i sort of have a 3-layer system in mind: a logic programming lang for describing the foundations themselves, a typed functional lang to *be* the foundations themselves (i.e. the theory you model in prolog), and then logic programming again above the type theory layer, i.e. the "prolog in record types" thing
24.12.18 21:33:20<dmiles> really the biggest legit gripe we have (you brought it up first in ##dependent )  really is the syntax of depenatnly typed languages
24.12.18 21:34:24<dmiles> biggest gripe that we have that isnt something they need to change for us but for themselves
24.12.18 21:35:03<dmiles> the fact that Agda doesnt read and write the way lisp/prolog does
24.12.18 21:35:38<stoopkid> it's a legit gripe, although hypothetically you could use any syntax so long as it encodes the same structures  (albeit not necessarily with the existing implementations)
24.12.18 21:35:51<dmiles> that fact jsut slightly makes things a bit harder for them to reach their future goals
24.12.18 21:36:19<dmiles> so i am glad at least that author brought it :)
24.12.18 21:37:07<dmiles> they have future goals? well if they did 
24.12.18 21:38:06<stoopkid> i tend to agree, for example i'm struggling to find any computer algebra system integrated with a dependent type theory system (it's looking like there may be some with Coq, i've seen mentions that Coq has support for integration with computer algebra systems but I'm still trying to find what/how; and Agda doesn't have any yet)
24.12.18 21:38:18<dmiles> (they do! but no one can pretend they know anyoneones including their own goals)
24.12.18 21:39:16<stoopkid> his articles are a bit dated so some of the things he's mentioned have actually improved quite a bit
24.12.18 21:39:38<stoopkid> Agda integrates a number of the things he mentioned in a way that wasn't done in Coq
24.12.18 21:40:35<stoopkid> imo they would've done better to take LISP or pure lambda calc as their syntactic foundation rather than Haskell-style but it's definitely at least some improvement over Coq
24.12.18 21:41:17<stoopkid> and something over a prolog-style syntax maybe would've been even better than that, although i'm still working out how that could/should look
24.12.18 21:41:18<dmiles> there is a codebase that round trips converts Java/JS/C++ syntax into logical expressions  (and now I've also seen one that converts Haskell) 
24.12.18 21:42:29<dmiles> i know such a code base read/write would not be trival 
24.12.18 21:42:40<dmiles> know/knew
24.12.18 21:43:43<dmiles> i just mean converts into a S-Expressiable/Prolog-Expressable AST
24.12.18 21:44:38<dmiles> i am looking at converting Haskell into that as well
24.12.18 21:44:52<dmiles> (whuich i assume means it will do Agda?)
24.12.18 21:45:45<dmiles> Since it is able to read Curry-lang it is able to read Haskell-lang
24.12.18 21:47:45<dmiles> btw i did not write either libraries but kjnow their codebases intimately 
24.12.18 21:47:53<dmiles> first one was https://sewiki.iai.uni-bonn.de/research/jtransformer/start
24.12.18 21:48:16<dmiles> (not that interesting to us but made at least an amazing API)
24.12.18 21:50:24<dmiles> the second is https://git.ps.informatik.uni-kiel.de/curry/pakcs/blob/master/src/c2p.pl#L481
24.12.18 21:52:12<dmiles> which is interesting because for only adding about a 20 lines of code that i'vbe writting at least 100 times (one day will be lib) it converts haskell to a lisp syntax
24.12.18 21:53:23<dmiles> anyways back to what yuo are saying stoopkid 
24.12.18 21:53:46<dmiles> [18:31] <stoopkid> right now i sort of have a 3-layer system in mind: a logic programming lang for describing the foundations themselves, a typed functional lang to *be* the foundations themselves (i.e. the theory you model in prolog), and then logic programming again above the type theory layer, i.e. the "prolog in record types" thing
24.12.18 21:54:18<dmiles> oops back to our other thing...
24.12.18 21:54:36<dmiles> [18:41] <stoopkid> and something over a prolog-style syntax maybe would've been even better than that, although i'm still working out how that could/should look
24.12.18 21:55:15<dmiles> no mater what you pick out..  i know the only thhing that will make everyone happy .. is S-Expressions
24.12.18 21:56:23<dmiles> well sorry.. doesnt make hardly anyone appy..  but makes it so no one complains :)
24.12.18 21:56:49<dmiles> well sorry.. doesnt make hardly anyone *happy*..  but does make it so no one can complain!
24.12.18 21:58:12<dmiles> even JSON leverages what i mean by s-expressions
24.12.18 21:58:36<dmiles>  [18:31] <stoopkid> right now i sort of have a 3-layer system in mind: a logic programming lang for describing the foundations themselves, a typed functional lang to *be* the foundations themselves (i.e. the theory you model in prolog), and then logic programming again above the type theory layer, i.e. the "prolog in record types" thing
24.12.18 22:00:41<dmiles> i think what you are saying.. what i am pretending you are saying because it is what i want to hear...
24.12.18 22:01:05<dmiles> is that the type theory is loaded into assertions
24.12.18 22:01:35<dmiles> then some more of the type theory is used to hack and elablorate on it to make it even better
24.12.18 22:02:40<dmiles> then sometimes on top of that  non type theory might come into play
24.12.18 22:03:09<stoopkid> yea more or less
24.12.18 22:04:29<dmiles> non type theory = what the application wou;ld be data processing
24.12.18 22:07:07<dmiles> these 3 layers :    1) shared type theory domain specific    2) shared type theory non-domain specific  3) appdata
24.12.18 22:07:26<stoopkid> hrm
24.12.18 22:07:34<dmiles> oops! maybe not your layers
24.12.18 22:07:44<dmiles> but three layers on of your three layers ahve
24.12.18 22:07:53<dmiles> but three layers *one* of your three layers ahve
24.12.18 22:09:01<dmiles> 1) type theory as we know it   2) type theory manipulation  3) appdata
24.12.18 22:09:39<dmiles> teh really problem currently in type theory is that 1 and 3 are too far abort
24.12.18 22:09:43<dmiles> appart
24.12.18 22:10:40<dmiles> people use this really fun section of their brain (same part prolog programmers use even) to craft the 1 into 3
24.12.18 22:11:07<stoopkid> i'd maybe rephrase that as 1) proof  2) real-world modeling 3) apps; and this would basically be sublayers of my layer 3
24.12.18 22:12:28<stoopkid> i'd maybe rephrase my own layers as: 1) prolog ; 2) top-level ontology; 3) expressions within this ontology
24.12.18 22:12:43<dmiles> i think my description is more of a breakdown of just a modeling phase
24.12.18 22:13:22<dmiles> the phase that a person is trying to model something like chess
24.12.18 22:13:26<dmiles> (in Agda)
24.12.18 22:14:27<stoopkid> if i reinterpret your statement to be "the problem in type theory currently is that constructive proofs and real-world applications are too far apart", then i'd say you hit the nail on the head
24.12.18 22:14:31<stoopkid> but
24.12.18 22:14:45<stoopkid> look at something like SymPy
24.12.18 22:14:58<stoopkid> or Mathematica
24.12.18 22:15:02<dmiles> oh i see .. you have move way over towards my side ... i a more over towards yours.. hehe
24.12.18 22:15:24<dmiles> (we had swithed places)
24.12.18 22:15:54<stoopkid> or many of the other systems like that; the amount of work that it would take to eliminate the distance has been done 1000 times over
24.12.18 22:16:33<stoopkid> there's no technical reason SymPy couldn't have wrote their computer algebra system to manipulate constructive proofs in a constructive proof system
24.12.18 22:16:37<stoopkid> they just... didn't
24.12.18 22:16:52<dmiles> yeah .. the goal is the most possible elimination of that distance 
24.12.18 22:17:38<dmiles> in "constructive proofs and real-world applications are too far apart" <-  yeah i think this should be easy to fixed if it wasnt for humans in control
24.12.18 22:17:49<dmiles> i mean it is self inflicted wounds
24.12.18 22:18:31<dmiles> in prolog and mathmatica that was our 1st prioorty is to make sure no distance possible
24.12.18 22:18:46<dmiles> least distance
24.12.18 22:19:30<dmiles> "have wrote their computer algebra system to manipulate constructive proofs"  yes that was all they needed to do!
24.12.18 22:19:31<stoopkid> indeed; don't me wrong, type theorists have definitely done a good service by perfecting at least the theoretical structure of their top-level ontology, but i think they kinda "get stuck in it" or maybe "get stuck on Nat"
24.12.18 22:20:17<dmiles> exaCTLY
24.12.18 22:20:36<stoopkid> right; and i mean, ok, these computer algebra systems were never intending to be type theory, but type theory definitely *is* intending to be a computer algebra system, but then where's that work?
24.12.18 22:21:23<dmiles> right.. not even in twelf .. anywhere
24.12.18 22:21:50<stoopkid> type theorists are having too much trouble working their way up from Nat instead of stepping outside the box, reanalyzing the situation, and developing their system to have the computer algebra integrated from the very beginning so that it's not this huge struggle all the way up from the bottom
24.12.18 22:21:56<stoopkid> that's my assessment anyway
24.12.18 22:22:24<dmiles> is it that it replaced algrebraic logic with types?
24.12.18 22:22:55<dmiles> (that was my catharisis the otehr week)
24.12.18 22:23:22<stoopkid> hrm... maybe? not sure what exactly are the bounds of "algebraic logic" or what context that's in
24.12.18 22:24:25<stoopkid> i can say at least, i don't think it's an inherent issue with the logic rather just an issue of tool-chain; but "replacing X with Y" could certainly have caused them to have to redevelop tool-chains from scratch; not sure in this case
24.12.18 22:27:00<dmiles> the bounds of "algebraic logic" is where  we give properties abotu hoow when we used our type theory. some meta-properties we kept in our heads 
24.12.18 22:27:19<dmiles> so for instnace take that chess in agda
24.12.18 22:28:24<dmiles> we would make logical assertions enough that it would be appearant as to why we wrote each mehtod
24.12.18 22:28:53<stoopkid> ah
24.12.18 22:29:03<stoopkid> no i don't think that's the issue, per se
24.12.18 22:29:12<dmiles> for isntance the castling methods .. there are two fully separate methods.. one is for left castleing and hte other for right castling
24.12.18 22:29:44<dmiles> the reason it was written that way is the programmer was gettign to confused trying to make it a single method
24.12.18 22:30:14<dmiles> yet in other places he combined stuff
24.12.18 22:30:35<dmiles> (btw this is fintional example.. this is what was obvoius to me)
24.12.18 22:30:46<dmiles> (btw this is &not* fictional example.. this is what was obvoius to me)
24.12.18 22:31:06<stoopkid> i think it's *an* issue but i don't think it's *this* issue; i've started working on some formulations of exactly that kind of stuff in Agda to go along with my equational reasoning stuff that i was showing you (the "not completely terrible-looking proofs" stuff)
24.12.18 22:31:27<dmiles> so this algrbraric system here is to not let the type theory obfusicate that they are the same kind of manuver)
24.12.18 22:31:31<stoopkid> i think it's purely a human issue, i think Xah actually makes a perfect description of what that issue is and how it works
24.12.18 22:32:16<stoopkid> http://xahlee.info/cmaci/notation/trad_math_notation.html
24.12.18 22:32:17<dmiles> type theory obfusicating the app domain to please some limitation
24.12.18 22:33:05<dmiles> (that obfusication is a widening the gap)
24.12.18 22:33:10<stoopkid> 'In the Wikipedia article Golden ratio, quote: "Two quantities a and b are said to be in the golden ratio φ if: (a+b)/a = a/b = φ. This equation unambiguously defines φ." This is a example of abuse of math notation.'
24.12.18 22:33:23<stoopkid> 'This abuse does not happen just in Wikipedia, but in just about every math textbook from professional mathematicians.'
24.12.18 22:34:21<stoopkid> 'In (a+b)/a = a/b = φ, we have basically a system of equations of 3 variables. The reason someone wrote this equation to define the golden ratio, is due mostly to the abuse of the equal sign as used in traditional math notation. In fact, the equation does not make sense.'
24.12.18 22:34:52<stoopkid> 'Typically, mathematicians will just say it doesn't matter, because by context it makes it clear to humans. I disagree. I think it introduces lots of mis-understanding and garbage into our minds' etc..
24.12.18 22:34:54<stoopkid> and the point:
24.12.18 22:35:07<stoopkid> ***Of course, mathematicians simply grew up with this, got used to it, so don't perceive any problem. They'd rather attribute the problem to the inherent difficulty of math concepts. ***
24.12.18 22:35:45<stoopkid> same thing with type theorists
24.12.18 22:35:55<stoopkid> except they have a rigorous syntax
24.12.18 22:36:52<stoopkid> math *is* hard, it takes quite a bit to learn math, a lot of "trudging through the mud", following in the muddy footprints of those who came before you, struggling a lot with Nats... by the time you've made it through, you've "assimilated"
24.12.18 22:37:19<dmiles> type theorists rather attribute all their problems to undeciabilty :P
24.12.18 22:37:50<dmiles> wel type theorists rather attribute all their problems to something from Godel 
24.12.18 22:37:56<stoopkid> hrm... not in this case
24.12.18 22:38:23<stoopkid> type theorists would say "computer algebra system? pfft, *ofc* type theory can handle that, why are you even bothering me?"
24.12.18 22:38:25<dmiles> rather than to things that can easily be fixed
24.12.18 22:38:31<stoopkid> "well, because you say that but you haven't built that CAS yet"
24.12.18 22:39:05<dmiles> right .. i have had this converation with them but yet too nice to say that last line
24.12.18 22:39:46<stoopkid> hehe; yea, i'm a die-hard advocate for this stuff but i don't try to present any illusions that we're any further along with it than we actually are
24.12.18 22:39:48<dmiles> (and when i am not , they can point me to papers that tell me how they would do it)
24.12.18 22:41:10<dmiles> sopemtimes youve said "but first we gotta get all of math into the system"
24.12.18 22:41:18<stoopkid> type theory community is like a community of architects with no construction workers
24.12.18 22:41:53<dmiles> ontology compunity was like that to in its hayday
24.12.18 22:42:06<dmiles> community of architects with no construction workers
24.12.18 22:42:58<dmiles> oops .. i *was* a construction worker for ontolgy comunity in the late 90s
24.12.18 22:43:23<dmiles> but all the stuff past the 90s was community of architects 
24.12.18 22:43:32<stoopkid> yep; so it's like, they've got the blueprints, and the blueprints have been vetted by engineers, but.. i can't live in a blueprint or run a business out of one
24.12.18 22:44:26<stoopkid> on the other side of it though, i can live in and run businesses out of other systems, but the roof is always leaking, there's a missing stair, etc..
24.12.18 22:44:37<dmiles> well the probly happens next is what is call  "shitware"
24.12.18 22:45:17<dmiles> in ontology we ended up with unfinished provers
24.12.18 22:45:46<stoopkid> yea that's literally where we're at now lol
24.12.18 22:45:51<dmiles> not because the community got somethjing right.. it is someone proptypes the most simplistic designs
24.12.18 22:46:21<stoopkid> we've got great representation of math, and a shitload of math already represented, but as far as apps? basically shitware
24.12.18 22:46:51<stoopkid> i doubt there'd even be many type theorists who would argue that
24.12.18 22:46:54<dmiles> (even when the apps are spot on to the design with no bugs.. the result is still a less usefull design)
24.12.18 22:47:22<dmiles> still a less usefull design = shitware  to me
24.12.18 22:47:44<dmiles> (of no use)
24.12.18 22:48:02<stoopkid> right
24.12.18 22:48:23<stoopkid> and it is right now, if any type theorists claim otherwise, i would really love to see what they're referencing
24.12.18 22:49:07<stoopkid> i really don't think it's due to any intrinsic quality of type theory (except that it's maybe offputting to the folks who might eventually become the construction workers of the community)
24.12.18 22:49:20<stoopkid> but it's still the case unfortunately
24.12.18 22:49:37<stoopkid> example: there's no way i could do *anything* i'm doing in SymPy right now in Agda
24.12.18 22:50:00<stoopkid> there's no reason Agda *couldn't* do *all* of those same things, but the libs just haven't been made for it yet
24.12.18 22:50:09<dmiles> some poeple dream of a dependly typed Rust
24.12.18 22:51:13<dmiles> for isntance i know rust and scala 
24.12.18 22:51:36<dmiles> but i havent seen them relate to dependant types
24.12.18 22:54:29<stoopkid> i think at least part of the reason there's been a hold-up on integrating dependent type theory with CASs is that the type theorists are holding out for having all the manipulations be expressed & *proven* in type theory
24.12.18 22:55:19<stoopkid> which is... legitimate, but... i'm at a loss as to why there isn't a community-wide push for "we need to have this done like yesterday"
24.12.18 22:56:24<dmiles> well two issues you brought up:  No dependently typed language libraries
24.12.18 22:56:26<stoopkid> other than that they've just assimilated into a certain pattern that just isn't conducive to it, as Xah suggested
24.12.18 22:56:56<dmiles> oher issue you brought up:  No dependently typed CAS
24.12.18 22:57:13<stoopkid> hypothetically they're really just the same issue
24.12.18 22:57:49<stoopkid> (modulo how conducive the underlying language is for making that happen)
24.12.18 22:58:25<dmiles> the fact no one bothers to do either is a problem.. they are two difernt usecase
24.12.18 22:58:56<dmiles> (i mean by that is that the commity is divided by peopel that mostly care about one or the other)
24.12.18 22:59:09<stoopkid> hrm
24.12.18 22:59:38<stoopkid> yes, but for a broader community than the type theory community
24.12.18 23:00:18<stoopkid> there's the CAS community that just doesn't really dabble much in the type theory, and the type theory community that's just... "too comfortable where they are now"
24.12.18 23:00:35<dmiles> yes .. though it is hard to belive the type theory comunity cares abotu either thing basedon their actions
24.12.18 23:00:42<stoopkid> (probably because of how restricted they are to academia where there's effectively no pressure to really develop anything but a demo)
24.12.18 23:00:44<dmiles> based on their actions
24.12.18 23:01:03<stoopkid> ha
24.12.18 23:01:11<stoopkid> yea i originally had a much harsher response in mind
24.12.18 23:01:30<stoopkid> i was gonna say "i think it's maybe more like the type theory community is unified by people who care about neither"
24.12.18 23:02:12<dmiles> :) i agree but then we;d been acsuing them of being lyings
24.12.18 23:03:07<dmiles> i think sometimes i hear even this is what they want
24.12.18 23:03:25<dmiles> i dont mean those top people nesc
24.12.18 23:04:49<dmiles> if they are just goign for type verification./. well shit.. just use java
24.12.18 23:05:25<dmiles> well use one of the tools java people use for static anysis
24.12.18 23:05:36<stoopkid> another aspect to it i think: the community has developed a general mentality of defensiveness, likely due to the fact that type theory is constantly being attacked by pretty much the entire software dev & math community aside from their little niche
24.12.18 23:07:21<dmiles> liveness analysis .. type verification and type-level optimizations have gone on for years and have exceed the current expectations of what type theorists have
24.12.18 23:07:22<stoopkid> hrm; java's probably not a great example there; the type-systems of type-theory-based systems definitively shit all over java's type-system as far as expressions and proofs go, only lacking some particular conveniences for particular common patterns
24.12.18 23:07:27<dmiles> i assume is they loe the KR!
24.12.18 23:07:35<dmiles> i assume is they love the KR of type theory!
24.12.18 23:08:06<stoopkid> sure
24.12.18 23:08:12<stoopkid> i mean, what's not to love really
24.12.18 23:08:33<dmiles> i even love it
24.12.18 23:08:58<stoopkid> and that's quite the statement! hehe
24.12.18 23:09:30<dmiles> its just now can we now do something above Session types?
24.12.18 23:09:38<stoopkid> agreed, 100%
24.12.18 23:09:59<stoopkid> it's sooooo far past the time to take this stuff beyond demo-mode already
24.12.18 23:10:39<stoopkid> type theory community tends to just regard folks like us as complainers though
24.12.18 23:10:48<stoopkid> i mean, don't get me wrong, i do love to complain
24.12.18 23:11:01<stoopkid> but i also think my complaints are at least somewhat justified! XD
24.12.18 23:11:05<dmiles> btw session types are so cool i've stolen them and added prolog libraries to SWI to do them
24.12.18 23:12:14<dmiles> at least my interpreation of how they worked
24.12.18 23:12:39<stoopkid> i mean, there's some isolated works towards this kind of stuff
24.12.18 23:12:58<stoopkid> look at the deepspec stuff and sel4, they're working on all kinds of stuff like this, and successfully
24.12.18 23:13:07<stoopkid> but that's definitely not the average case
24.12.18 23:13:12<dmiles> why i love the KR is its non-programming KR for programs
24.12.18 23:14:23<dmiles> why i am scratching my head though is why it seeoms to be totalyl non-programming
24.12.18 23:14:38<stoopkid> ah
24.12.18 23:14:53<stoopkid> i think i can answer that with near certainty: the functional programming community
24.12.18 23:14:55<stoopkid> wadler et al
24.12.18 23:15:00<dmiles> i mean that it could be mmore than compiler hints
24.12.18 23:15:18<dmiles> i mean that it could be mmore than verification hints
24.12.18 23:16:17<stoopkid> the functional programming community has warped the type theory community's minds into a paradigm that just straight up doesn't work for type theory
24.12.18 23:16:52<stoopkid> look at conor mcbride, mietek, etc... and the mental gymnastics they'll go through to try to convince that total functional langs are actually turing-complete
24.12.18 23:17:23<stoopkid> i mean, they're *sort of* right, but in pretty much literally the most confusing way possible
24.12.18 23:18:46<stoopkid> so the vast majority of the type theory community is trying to figure out how to write all programs in terms of total functional programs... instead of just using the mathematics to model <insert whatever computational paradigm you want to use and verify stuff in>
24.12.18 23:18:59<stoopkid> with notable exceptions like deepspec, sel4, etc..
24.12.18 23:20:14<stoopkid> the functional programming community already scared off the vast majority of the regular programming community
24.12.18 23:20:38<stoopkid> and then type theorists advocate *total* functional programming and the regular programming community is like "seriously? wtf"
24.12.18 23:21:14<dmiles> yeah i mentally have never thought i was allowed to separate them
24.12.18 23:21:34<dmiles> functional programming and dependant type theory
24.12.18 23:21:56<stoopkid> so the vast majority of regular programmers who come into contact with type theory think it's just this weird obscure framework to force them to do only total functional programming, and don't even get *introduced* to the concept of using it as a math/logic framework to model arbitrary concepts and arbitrary computational paradigms
24.12.18 23:22:28<stoopkid> i blame lambda man XD
24.12.18 23:23:35<stoopkid> most of the type theory community at least understands the concept, but they're all academics... architects with no construction workers again..
24.12.18 23:24:04<stoopkid> they've scared off the vast majority of people who would actually bring their plans into fruition
24.12.18 23:24:23<stoopkid> and don't really have any strategy as a community as to how to bridge that divide
24.12.18 23:24:34<stoopkid> instead they just act better than everybody :/
24.12.18 23:25:44<stoopkid> (cause they're really ideologically not very far separated from the regular math community, which behaves *exactly* the same way in this regard, a fact that i complain about on a near-daily basis)
24.12.18 23:29:26<stoopkid> but yea, i think it's beyond that you actually are allowed to separate, you *must* separate them
24.12.18 23:29:40<stoopkid> the functional programming is purely just the language of your proofs
24.12.18 23:30:07<stoopkid> it's total functional for specific and very good proof-theoretic reasons
24.12.18 23:30:37<stoopkid> it *is* the case that it's *possible* to write a wide variety of very useful programs total-functionally
24.12.18 23:31:11<stoopkid> iow: the representation of the proofs is sophisticated enough that they are actually executable programs
24.12.18 23:31:37<stoopkid> but when you get the notion "ah, so that's how i'll do my general purpose programming", you're basically screwed
24.12.18 23:32:01<dmiles> hah
24.12.18 23:32:17<dmiles> (to "ah, so that's how i'll do my general purpose programming")  
24.12.18 23:32:29<dmiles> oops
24.12.18 23:32:52<stoopkid> general purpose programming and dependent type theory *can* be integrated, but one *must* do away wih the notion that the way to do this is to try to cram your general purpose programming into total functional programming
24.12.18 23:32:57<dmiles> (i read that as   "ah, so that's how i'll do it for my general purpose programming language")  
24.12.18 23:33:26<dmiles> since that is where i am at
24.12.18 23:33:42<dmiles> (where i am trying ot get to)
24.12.18 23:33:53<stoopkid> check out on the other hand how i've modeled turing machines and finite state automata in Agda
24.12.18 23:34:22<stoopkid> turing machines are obviously not total functional, and yet i've represented them.. no contradictions here
24.12.18 23:34:42<stoopkid> because i didn't make their execution a total functional program, i simply abstractly modeled it
24.12.18 23:35:01<stoopkid> described the logic of how that turing machine *would* execute in theory
24.12.18 23:38:02<dmiles> soemting i should do is compare that to a prolgo verison
24.12.18 23:38:17<dmiles> me hope is that basically it is the same code
24.12.18 23:38:47<dmiles> (that would help me see real logical simualties)
24.12.18 23:39:33<stoopkid> that would be cool, i'd be interested to do that comparison as well
24.12.18 23:41:10<stoopkid> if the prolog code just tries to encode the formal definition (i.e. "a tuple consisting of a set Q of states, a start state q0, ...") then they should be reasonably similar
24.12.18 23:41:38<stoopkid> indeed i've formulated it as a record type, which is where the prolog-over-type-theory would live, so..
24.12.18 23:41:49<dmiles> heh found this https://pastebin.com/rLKZCJ33 /.. me finding the one in your github though
24.12.18 23:45:37<dmiles> do yours:  https://github.com/sto0pkid/CategoryTheory/blob/3f60d42fc90cb5ec6abfdc3f1a097fa01eca7be3/TuringMachine.agda#L1-L49
24.12.18 23:46:11<stoopkid> https://github.com/sto0pkid/CategoryTheory/blob/3f60d42fc90cb5ec6abfdc3f1a097fa01eca7be3/TuringMachine.agda#L192
24.12.18 23:46:19<stoopkid> i'd probably use the first one
24.12.18 23:46:50<stoopkid> (from the pastebin, which isn't on my github yet, i'm in the middle of a major reorganization of all of my codebases)
24.12.18 23:47:18<dmiles> the prolog one is  https://bitbucket.org/ttmrichter/turing/src/6d9f6c8b89f8a2d1e016095df2c1370076c29f51/prolog/turing.pl?at=default&fileviewer=file-view-default
24.12.18 23:47:35* stoopkid has eliminated 75% of the code he's ever written in Agda by replacing it with stuff already present in the standard library
24.12.18 23:47:38<dmiles> but not comparable until i use the same input
24.12.18 23:48:46<dmiles> https://bitbucket.org/ttmrichter/turing/src/6d9f6c8b89f8a2d1e016095df2c1370076c29f51/prolog/turing_test.pl?at=default&fileviewer=file-view-default
24.12.18 23:49:04<stoopkid> damn, that documentation puts me to shame XD
24.12.18 23:50:35* stoopkid was gonna it puts my documentation to shame, but no, it puts *me* to shame, directly and personally lol
24.12.18 23:50:41<stoopkid> was gonna say*
24.12.18 23:53:08<dmiles> oh ttmricter did that because he was publishing it as a community package
24.12.18 23:53:10<stoopkid> the prolog is much closer to the representation in the pastebin than to the representation in my CategoryTheory repo
24.12.18 23:53:50<dmiles> here is on the compunuity whayt we do to the Doc http://www.swi-prolog.org/pack/file_details/turing/prolog/turing.pl?show=src
24.12.18 23:54:15<dmiles> (converted to HTML)
24.12.18 23:54:20<stoopkid> ah sweet, literate prolog
24.12.18 23:55:20<stoopkid> what's generating that HTML?
24.12.18 23:56:38<dmiles> the webserver (written in prolog) serves up the pages
24.12.18 23:58:15<dmiles> i hacked the code to make to use that soem docing for othjer langauges
24.12.18 23:59:38<stoopkid> cool; is that available somewhere? i'd like to run it locally
24.12.18 23:59:41<dmiles> sinc ei dont actualy doc .. i made it when serving my code create fake docs :P
25.12.18 00:00:00<dmiles> https://github.com/TeamSPoon/instant_prolog_docs/blob/master/prolog/instant_prolog_docs.pl
25.12.18 00:00:48<stoopkid> nice
25.12.18 00:01:33<dmiles> longer_sumry(verbose,'While Being Descriptive').
                 <dmiles> longer_sumry(wff,'Well-Formed Formula').
25.12.18 00:01:41<dmiles> that sort of thing :P
25.12.18 00:02:48<dmiles> https://github.com/SWI-Prolog/packages-pldoc
25.12.18 00:03:06<dmiles> that serves the webserver as well
25.12.18 00:03:55<stoopkid> sweet
25.12.18 00:04:11<stoopkid> hrm; i saw that jupyter notebook had a kernel for SWI-prolog, i wonder if this is already integrated with that
25.12.18 00:04:19<dmiles> oh packages-* come part  of the standard install of swi-prolkg
25.12.18 00:05:58<dmiles> we wanted to have live tooltips while coding .. so we ended up making a web service .. it be nice if jupiternotbook used it
25.12.18 00:06:52<dmiles> we had at one point ot make out own versions :(   https://swish.swi-prolog.org/example/tabling.swinb
25.12.18 00:06:58<dmiles> "Swi-notbook"
25.12.18 00:12:41<dmiles> ?- threads.
25.12.18 00:13:14<dmiles> oh PrologMUD was broken into GDB 
25.12.18 00:13:45<dmiles> he runs a webserver that serves up his code litteratly
25.12.18 00:13:50<dmiles> (he the bot)
25.12.18 00:15:47<stoopkid> i see: http://www.swi-prolog.org/IDE.html
25.12.18 00:16:09<dmiles> ah " SWISH notebooks provide functonality inspired by Jupyter/IPython notebook."
25.12.18 00:16:11<stoopkid> " SWISH notebooks provide functonality inspired by Jupyter/IPython notebook."
25.12.18 00:16:17<stoopkid> hehe
25.12.18 00:18:17<dmiles> often people write there .pl files as .tex format
25.12.18 00:18:35<dmiles> what they do in Adga to?
25.12.18 00:19:38<dmiles> for wam_common_lisp i compile the oyutput to github readable markdown files 
25.12.18 00:20:16<dmiles> kind of cute:  https://github.com/TeamSPoon/wam_common_lisp/blob/master/t/sanity-test.lisp_load.md
25.12.18 00:22:28<stoopkid> Agda's got a couple built-in tools for this:
25.12.18 00:22:30<stoopkid> https://agda.readthedocs.io/en/v2.5.4.2/tools/literate-programming.html
25.12.18 00:22:41<stoopkid> https://agda.readthedocs.io/en/v2.5.4.2/tools/generating-html.html
25.12.18 00:22:55<stoopkid> https://agda.readthedocs.io/en/v2.5.4.2/tools/generating-latex.html
25.12.18 00:25:04<stoopkid> not quite anything like a jupyter or swish notebook (i.e. with interactivity directly in the rendered HTML etc..) but at least for serving up static pages it works pretty well
25.12.18 00:25:32<stoopkid> i've been contemplating writing a jupyter kernel for agda
25.12.18 00:25:58<stoopkid> that's still in the "maybe" category for now tho
25.12.18 00:29:47<stoopkid> yea looks like the swipl kernel for jupyter is a completely different thing
25.12.18 00:31:37<stoopkid> when was swish originally built? looks like jupyter wasn't spun off from ipython until ~2014 so if it was built before about that time that would explain why they were "inspired by Jupyter/IPython notebook" rather than directly integrated with it to begin with
25.12.18 00:34:56<stoopkid> https://arxiv.org/pdf/1511.00915v1.pdf
25.12.18 00:35:31<dmiles> well pldoc was like 2003
25.12.18 00:35:40<dmiles> the SWISH is more recendt
25.12.18 00:37:21<stoopkid> uploaded to arxiv nov 3 2015; "Abstract. Recently, we see a new type of interfaces for programmers based on web technology. For example, JSFiddle, IPython Notebook and R-studio.", no mention of Jupyter yet; not sure when the article was written it might've been earlier than when it was uploaded to arxiv
25.12.18 00:37:37<stoopkid> "SWISH was originally written by Torbjörn Lager as a homage to SWI-Prolog. Jan Wielemaker designed and implemented the present version."
25.12.18 00:38:30<stoopkid> (from https://swish.swi-prolog.org/ > Help > About )
25.12.18 00:40:08<stoopkid> i'm guessing the one described in the paper is that "present version" and the original by Torbjorn was earlier although i haven't found a description of a different (earlier or later) version of it yet
25.12.18 00:45:11<dmiles> Torbjorn version didnt have save/load features probably 
25.12.18 00:45:51<dmiles> that saved to a users profile like now
25.12.18 00:46:30<dmiles> JanW and I and everyone is constantly argueing for what features shoudl and should be there
25.12.18 00:47:11<dmiles> we always get a little bit of waht we want 
25.12.18 00:48:03<dmiles> i had to fight for "save"
25.12.18 00:55:49<stoopkid> "On April 5, 2018, The Atlantic published an article entitled The Scientific Paper Is Obsolete, which discussed the role of the Jupyter Notebook and the Mathematica notebook in the future of scientific publishing[13]. This article led to responses from prominent scientists and academics, including economist Paul Romer." god i hope so lol
25.12.18 00:56:57<stoopkid> (from https://en.wikipedia.org/wiki/Project_Jupyter ; and Romer's article for reference: https://paulromer.net/jupyter-mathematica-and-the-future-of-the-research-paper/ ; and wow he really makes no hesitation to shit all over Mathematica)
25.12.18 00:58:50<stoopkid> damn it's a pretty good read and also a thoroughly scathing take on the entire proprietary model itself
25.12.18 00:59:00<stoopkid> "Jupyter rewards transparency; Mathematica rationalizes secrecy. Jupyter encourages individual integrity; Mathematica lets individuals hide behind corporate evasion. Jupyter exemplifies the social systems that emerged from the Scientific Revolution and the Enlightenment, systems that make it possible for people to cooperate by committing to objective truth; Mathematica exemplifies the horde of new Vandals whose pursuit of
25.12.18 00:59:01<stoopkid> private gain threatens a far greater pubic loss–the collapse of social systems that took centuries to build."
25.12.18 00:59:56<stoopkid> "If Steven Wolfram’s personality had made him just a bit better at faking both sincere apologies and sincere promises to do better, things might have turned out differently."
25.12.18 01:00:12<dmiles> hah
25.12.18 01:00:32<stoopkid> "Then, I still clung to the belief that for a for-profit corporation, the risk of damage to its reputation would keep dishonesty in check, just as it did for a person. ... I was slow to recognize that under the proprietary software model, dishonesty isn’t a bug; it’s a feature."
25.12.18 01:01:51<stoopkid> and then finally "The tie-breaker is social, not technical. The more I learn about the open source community, the more I trust its members. The more I learn about proprietary software, the more I worry that objective truth might perish from the earth."
25.12.18 01:02:38<dmiles> btw Logicoo is the CYC as   Maxima is to Mathmatica
25.12.18 01:03:02<dmiles> for same reasoning
25.12.18 01:03:39<dmiles> that the company goals made it hard for people to ever use it
25.12.18 01:03:57<dmiles> i mean the users desires clashed with developers
25.12.18 01:05:14<dmiles> in Wam-common-lisp .. io can run the Maxima tests but next Mathmatica
25.12.18 01:05:27<dmiles> but never would be allows to run Mathmatica
25.12.18 01:07:16<dmiles> i guess Sage is a newer version of this
25.12.18 01:08:50<dmiles> oh oops i might be actuaol; talking about MATLAB
25.12.18 01:09:29<dmiles> yep
25.12.18 04:20:48<dmiles> cyc: (list 1)
25.12.18 04:36:42<aindilis> ping
25.12.18 04:38:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ibnvnyoqmrsylmxz) left #logicmoo: Quit: Connection closed for inactivity
25.12.18 05:52:16*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
25.12.18 05:52:21<dmiles> cyc: (+ 1 1)
25.12.18 06:54:28*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
25.12.18 09:29:57*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mucssfrhnxwnjwqf, stoopkid: stoopkid)
25.12.18 09:30:03<dmiles> cyc: (+ 1 1)
25.12.18 10:59:31<Copenhagen_Bram> pong
25.12.18 12:22:44*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
25.12.18 12:22:50<dmiles> cyc: (+ 1 1)
25.12.18 17:05:27*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
25.12.18 17:05:39<logicmoo> cyc: (+ 1 1)
25.12.18 17:08:42*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
25.12.18 17:27:02* Copenhagen_Bram hugs cyc
25.12.18 19:09:32*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
25.12.18 20:03:04*** Nick change: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
25.12.18 21:28:13<aindilis> cyc: (+ 1 1)
25.12.18 21:28:14<cyc> "2"
25.12.18 21:28:19<aindilis> hi Copenhagen_Bram 
25.12.18 22:00:19<Copenhagen_Bram> hey aindilis 
25.12.18 22:00:32<Copenhagen_Bram> said Copenhagen_Bram over half an hour later
26.12.18 01:59:30*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mucssfrhnxwnjwqf) left #logicmoo: Quit: Connection closed for inactivity
26.12.18 04:48:51*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
26.12.18 04:48:55<dmiles> cyc: (+ 1 1)
26.12.18 04:49:24<aindilis> hi
26.12.18 08:07:20*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nqknfejzwgzexhsg, stoopkid: stoopkid)
26.12.18 08:07:26<dmiles> cyc: (+ 1 1)
26.12.18 08:07:27<cyc> "2"
                 <aindilis> "2"
26.12.18 10:18:21<Copenhagen_Bram> aindilis: did you get my message?
26.12.18 11:08:03*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 246 seconds
26.12.18 11:08:10*** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 246 seconds
26.12.18 13:39:19*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
26.12.18 16:29:12*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
26.12.18 16:29:17<dmiles> cyc: (+ 1 1)
26.12.18 17:29:40*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
26.12.18 17:29:45<dmiles> cyc: (+ 1 1)
26.12.18 18:05:53<Copenhagen_Bram> cyc: (+ 1 1)
26.12.18 20:39:06*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Quit: So long, and thanks for all the fish! 2.3 Weechat is best Weechat
26.12.18 22:49:03<aindilis> hey
26.12.18 22:51:16<dmiles> hi
26.12.18 22:51:24<aindilis> how was ur Christmas?
26.12.18 22:51:53<aindilis> I'm watching Chappie right now (w/o sound)
26.12.18 22:52:02<dmiles> was good .. i think this is the first hour i am starting to code for  a few days
26.12.18 22:52:17<aindilis> good timing then, I won't keep you then
26.12.18 22:52:23<aindilis> hey I got the hard drive
26.12.18 22:52:28<aindilis> so I should feel freer to code
                 <dmiles> i see my on-jpoin script was keeping attention
26.12.18 22:52:45<aindilis> cool, it did something when Y_K joined I think
26.12.18 22:53:00<aindilis> I thought maybe your preconditions were wrong or you were Y_K
26.12.18 22:53:39<dmiles> it does hurt i figured as a good ping test for liveness... sorry if oyu felt presure to make it always work :)P
                 <aindilis> yeah sorry for some reason when I run everything needed for the bot - it crashes my UniLang process frequently
26.12.18 22:53:48<aindilis> no worries
26.12.18 22:54:06<aindilis> I'm therefore going to rewrite it using a perl bot 
26.12.18 22:54:33<aindilis> going to work on EC?
26.12.18 22:54:38<aindilis> EC hurts my brain
26.12.18 22:54:45<dmiles> yeah
26.12.18 22:54:48<aindilis> cool
26.12.18 22:55:06<aindilis> do let me know if you get something like a softbot going with it
26.12.18 22:55:19<dmiles> though awkwarlly i found some recent code that might be better than my version and testing it out
26.12.18 22:55:33<aindilis> awesome!
26.12.18 22:55:48<aindilis> I like that you were flexible and agreed (if I understood correctly) to have softbot and FLP as PrologMUD domains, that's a smart move imho since it increases my motivation to work on it
26.12.18 22:56:32<aindilis> I think I want to work on PrologMUD in RCYC
26.12.18 22:56:34<aindilis> any pointers?
26.12.18 22:57:20<dmiles> yeah the EC itself is not application specific even thiohgh i am using it for NLU and MudSim it is usable everywhere
26.12.18 22:57:42<aindilis> cool
26.12.18 22:57:55<aindilis> well I'd like to make a homelessness MudSim domain
26.12.18 22:58:16<aindilis> do you think I should finish reading 2nd Edition?
26.12.18 22:58:25<aindilis> or just mess with ur code
26.12.18 22:59:54<aindilis> okay well good luck with coding today, I'm going to try to do 70% relax + 30% code
26.12.18 23:00:04<aindilis> let me know if you want me to try to tackle anything
26.12.18 23:00:06<dmiles> btw here is the manual for it:  https://github.com/aartikis/RTEC/blob/dsc-msc/RTEC_manual.pdf
26.12.18 23:00:15<aindilis> no way, real time?
26.12.18 23:00:23<aindilis> ah run time
26.12.18 23:00:37<aindilis> https://github.com/nkatzz/OLED
26.12.18 23:00:54<dmiles> realtime=runtime
26.12.18 23:00:58<aindilis> kk
26.12.18 23:01:08<aindilis> we should try to work with this dude
26.12.18 23:01:46<dmiles> Related Software
                 <dmiles> OLED: Online Learning of Event Definitions. OLED automatically constructs Event Calculus rules, such as complex event patterns, from annotated data streams.
                 <dmiles> LoMRF: Library for Markov Logic Networks. LoMRF supports Event Calculus reasoning under uncertainty.
                 <dmiles> ScaRTEC: A Scala implementation of RTEC.
26.12.18 23:01:58<dmiles> from the RTEC Readme :P
26.12.18 23:02:10<aindilis> yeah OLED sounds awesome
26.12.18 23:02:14<aindilis> I'm going to play with that
26.12.18 23:02:16<aindilis> thanks for the link
26.12.18 23:02:30<aindilis> learning domains is a crucial problem
26.12.18 23:03:11<aindilis> CONSCIOUSNESS.DAT <- too funny (if you've seen Chappie)
26.12.18 23:03:25<dmiles> the primary goal of DAYDREAMER was to learn to hack the EC domains
26.12.18 23:05:11<aindilis> alright I'll see what I can do with DAYDREAMER
26.12.18 23:05:33<aindilis> it looks like it needs world knowledge though
26.12.18 23:05:34<dmiles> but of course it means first one has to become good as we are with CycL with the intial EC..
26.12.18 23:05:47<aindilis> do you think it's worth it?
26.12.18 23:06:05<aindilis> I recall you saying it's harder than CycL actually
26.12.18 23:06:08<aindilis> since CycL is sitcalc
26.12.18 23:06:18<aindilis> surprised event calc isn't part of CYC
26.12.18 23:06:24<dmiles> its not any harder.. but is about the same amount of cognitive load
26.12.18 23:06:49<aindilis> do you think it would be worthwhile for me to build an adapter for EC for CYC?
26.12.18 23:07:06<dmiles> yeah i am also surprised event calc isn't part of CYC ... though there was no reason it couldt already use it
26.12.18 23:07:17<dmiles> oh god for sure
26.12.18 23:07:19<aindilis> both in terms of vocabulary and in terms of calling an external reasoner
26.12.18 23:07:42<aindilis> do you know how to call an external process from CYC?
26.12.18 23:07:48<dmiles> yes
26.12.18 23:08:02<aindilis> awesome sauce, maybe I can tie it in with the Agenda
26.12.18 23:08:12<dmiles> that was what that osim-sksi.lisp fiile was a start of
26.12.18 23:08:18<aindilis> okay
26.12.18 23:08:55<dmiles> here is what i'd do if i had any sense
26.12.18 23:09:03<dmiles> (this would be my todo list)
26.12.18 23:09:08<aindilis> k
26.12.18 23:09:48<dmiles> hack the LarKC (merged with ABCL) and start coding inline (non-external calls) to code
26.12.18 23:10:06<dmiles> for isntance within a few days OLEC is no longer even external
26.12.18 23:10:44<dmiles> and can load and use DAYDREAMER as well
26.12.18 23:11:25<dmiles> then i'd start moving bits and peices of DAYDREAMER and OLEC's interal KR ot be CYC KB structuires (rioght in their code!)
26.12.18 23:11:41<dmiles> then i'd start moving bits and peices of DAYDREAMER and OLEC's interal KR ot be CYC KB structuires (right in the middle of their code!)
26.12.18 23:14:36<dmiles> i dont dislike the JVM.. but somehow i feel compelled to do this all in prolog
26.12.18 23:15:05<dmiles> DAYDREAMER in wam-common-lisp
26.12.18 23:15:30<aindilis> this is awesome, please continue
26.12.18 23:16:11<dmiles> next i'd be use GATE-NLU code that is written in porlk gbut linked to the JVM
26.12.18 23:16:28<dmiles> next i'd be use GATE-NLU code that is written in prolog but linked very well to the JVM
26.12.18 23:17:12<dmiles> using that to suppliment the assertions in the CYC KB 
26.12.18 23:18:04<dmiles> at this point though no mud is yet visible
26.12.18 23:18:51<dmiles> actualy probably even before the NLU i'd be after gettign it so PRologMUD-in-CYC was usable by daydreamer based AI
26.12.18 23:19:52<dmiles> also by this point i'd want tools for the examination and human hacking of the event calculaus assertions
26.12.18 23:20:54<dmiles> since progress on this and next stages is continingent on maximizing the visiblity of our mistakes and successes
26.12.18 23:21:49<dmiles> since i/we would be floating arround on a sea of KR 
26.12.18 23:22:52<dmiles> so.. it'd take me down a path of creating an IDE liek thingy in the sense of EclipseIDE that allows the debug and exampination of the CycL
26.12.18 23:23:38<dmiles> from EC queries that are subquerying CycL (to best allow  holdsIn)
26.12.18 23:24:54<dmiles> like setting up (finishing cycorps work) on the existing Microtheory structure to get the MtDimensions workign with it
26.12.18 23:27:03<dmiles> this IDE would next be important to work with what looks like a popup hypercards that well show us proposed NL<->ECCycl
26.12.18 23:27:18<dmiles> proposed NL<->ECCycl translations
26.12.18 23:28:15<dmiles>  NL<->Cycl (aka E2C) *really* is not very usefull without the EC 
26.12.18 23:29:16<dmiles> though it not needed to be discarded but any real translations to CycL have ot become ECCycL
26.12.18 23:29:53<dmiles> (even if the NLU component is removed)
26.12.18 23:30:32<dmiles> but the U in NLU is really EC
26.12.18 23:30:50<dmiles> that was Schanks discovery that shocked the world
26.12.18 23:31:20<dmiles> at least alienated people such as Lenat
26.12.18 23:31:50<aindilis> do you have the LarKC link?
26.12.18 23:32:09<aindilis> *code
26.12.18 23:32:11<dmiles>  https://sourceforge.net/p/larkc/code/HEAD/tree/branches/LarKC_CommonLisp_Extensions/platform/src/com/cyc/cycjava/cycl/inference/harness/
26.12.18 23:32:14<aindilis> great
26.12.18 23:32:27<dmiles> ok so i have a verion that was before the new RCYC update
26.12.18 23:32:48<dmiles> but havent published it to a SVN
26.12.18 23:32:55<dmiles> erm to Github
26.12.18 23:33:38<dmiles> it can even run DAYDREAMER inside of it
26.12.18 23:34:44<aindilis> so what is the advantage of running the LarKC instead of the CYC?
26.12.18 23:34:53<aindilis> instead of daydreamer in CYC?
26.12.18 23:34:56<aindilis> just because it's easier
26.12.18 23:35:05<aindilis> does LarKC interactw ith CYC?
26.12.18 23:35:09<aindilis> firsdt class?
26.12.18 23:35:24<dmiles> LarKC_CommonLisp_Extensions is  CYC tha tcan run DAYDREAMER
26.12.18 23:35:35<dmiles> but some basic functions go removed
26.12.18 23:36:17<dmiles> teh disadvantage is that hte new cyc.jar for Rcyc was incompatable
26.12.18 23:36:36<aindilis> why not use RCYC 4.0q?
26.12.18 23:36:43<aindilis> cause it can't run DAYDREAMER easily?
26.12.18 23:37:04<dmiles> but i reworked the LarKC_CL to now run 4.0q jar file
26.12.18 23:37:18<dmiles> (that reworking what i havent published yet)
26.12.18 23:37:29<aindilis> nice, can you scp it to my machine?
26.12.18 23:37:32<dmiles>  why not use RCYC 4.0q?  it will not allow external code to control its KB
26.12.18 23:37:47<aindilis> how do you mean?
26.12.18 23:37:57<dmiles> and will not control eternal code to control it
26.12.18 23:38:11<dmiles> it can only use the JavaClient
26.12.18 23:38:32<aindilis> ah so you want something more direct than the javaclient
26.12.18 23:38:37<dmiles> RCYC 4.0q can only use small parts of SubL that run too slow
26.12.18 23:38:46<aindilis> k
26.12.18 23:38:51<aindilis> srry did not realize this
26.12.18 23:38:59<dmiles> vs  LarKC_CL actualy compiles subl to native code
26.12.18 23:39:23<aindilis> wow
26.12.18 23:39:32<dmiles> (i extented it to use a real CL compiler)
26.12.18 23:39:37<aindilis> link to gate-nlu?
26.12.18 23:40:30<dmiles> https://gate.ac.uk/gate/doc/plugins.html#Parser_SUPPLE
26.12.18 23:40:33<aindilis> ah supple
26.12.18 23:40:54<dmiles> https://gate.ac.uk/sale/tao/splitch18.html#sec:parsers:supple
26.12.18 23:40:59<dmiles> *nod*
26.12.18 23:41:39<dmiles> heh the only profesional grade NLU for the JVM is prolog
26.12.18 23:42:21<dmiles> though Suppl makes extensive use of StanfordNL
26.12.18 23:42:28<dmiles> (the gate versions)
26.12.18 23:43:19<aindilis> okay well I'll get started
26.12.18 23:43:26<aindilis> what should we call the concoction?
                 <dmiles> i need to actualyl find on which hardrive my new and improved  LarKC_CL is
26.12.18 23:43:35<aindilis> oh, yeah good idea to back that shit up
26.12.18 23:43:50<aindilis> let me know if and when ur ready to scp it
26.12.18 23:43:56<aindilis> or put it somewhere I can DL
26.12.18 23:44:16<dmiles> the  LarKC_CL there does everything.. but jsut is not extended to the new RCyc
26.12.18 23:44:39<aindilis> which RCyc does it work with if any?
26.12.18 23:44:44<aindilis> 4.0p?
26.12.18 23:45:00<dmiles> whatever was 2009
26.12.18 23:45:06<aindilis> k
26.12.18 23:45:19<dmiles> all that wnet on is like 20 java mentods got renamed
26.12.18 23:45:39<aindilis> cool
26.12.18 23:46:18<dmiles>  LarKC_CL  also donest have a CYC KB browser
26.12.18 23:46:30<dmiles> (that was why i forward ported)
26.12.18 23:47:02<dmiles> ok in the next two hours i will put the SubL Kernal up on SF
26.12.18 23:47:10<dmiles> erm on Github
26.12.18 23:47:21<aindilis> is that all that is needed for this recipe you spelled out here?
26.12.18 23:47:27<dmiles> yup!
26.12.18 23:47:42<aindilis> awesome!
26.12.18 23:47:58<dmiles> so you simply replace you subl.jar of your current rcyc
26.12.18 23:48:16<aindilis> oh-  great. okay I'm saving this convo and going to start gathering teh larkc and gate-nlu
26.12.18 23:48:23<aindilis> btw, a name for this meld?
26.12.18 23:48:27<aindilis> +daydreamer
                 <aindilis> etc
26.12.18 23:48:51<aindilis> I have to create a project to put it in
26.12.18 23:49:05<dmiles> lets call  it LarKC_CL
26.12.18 23:49:09<aindilis> great
26.12.18 23:49:22<aindilis> larkc-cl will be the dir for now, + that as the name
26.12.18 23:49:34<dmiles> perfect
26.12.18 23:49:59<aindilis> sounds like fun, thanks for giving me inspiration and guidance to do something useful
26.12.18 23:50:10<dmiles> the only reason i have not been motived to publish the project .. is who would understand it?
26.12.18 23:50:16<aindilis> hehe
26.12.18 23:50:17<dmiles> except you and i
26.12.18 23:50:22<aindilis> ;)
26.12.18 23:50:26<aindilis> good and bad thing
26.12.18 23:50:35<dmiles> even though tehcially btw it is the fast know Lisp on the JVM
26.12.18 23:50:44<aindilis> btw do you mind if I share this convo with a student of mine to show him what he needs to aim for
                 <dmiles> even though tehcially btw it is the fast known Lisp *ever* on the JVM
26.12.18 23:51:12<dmiles> runs 30% faster on benchmarks than even AllegroCL
26.12.18 23:51:19<aindilis> nice!
26.12.18 23:52:15<dmiles> oh but does take up 2x the ram :P
26.12.18 23:52:29<aindilis> yeah, but not usually an issue these days
26.12.18 23:56:39<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp
26.12.18 23:57:10<dmiles> i guess i did publish it!
26.12.18 23:57:37<dmiles> now if i did it with the new RCYC API
26.12.18 23:59:50<dmiles> looks like i did https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/commits/larkc/platform/src/com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbolImpl.java
27.12.18 00:00:06<aindilis> perfect!
27.12.18 00:00:50<dmiles> i even asked cycorp to make the new RCYC Source avable tpo the public so i could madd my common lisp compiler to it https://github.com/cycorp/issues/issues/9
27.12.18 00:01:01<dmiles> (so its not like i am hjiding this stuff()
27.12.18 00:01:32<aindilis> yeah
27.12.18 00:01:55<dmiles> cycl.jar can still continue to be closed source if needbe.
27.12.18 00:02:49<aindilis> alright, well I will get going on this
27.12.18 00:04:39<aindilis> thanks again, I will ping you with any questions I have along the way
27.12.18 00:04:49<dmiles> right on
27.12.18 00:05:49<dmiles> crazy i should have published the subl.jar 
27.12.18 00:06:28* dmiles testing otu hte build.xml to so if it works
27.12.18 00:12:13<dmiles> what was crazy is it took me 1500 billable hours for coding to create that for Bina48v2 
27.12.18 00:12:34<dmiles> one of these days i will feel far along anough to send them the invoice!
27.12.18 00:12:55<aindilis> ;)
27.12.18 00:12:56<aindilis> :)
27.12.18 00:13:00<aindilis> *
27.12.18 00:16:12<dmiles> what really needs done next.. you might even want ot be part of the project
27.12.18 00:16:59<dmiles> since this being backed by https://www.terasemmovementfoundation.com/
27.12.18 00:17:09<dmiles> maybe we eventualyl send a bill
27.12.18 00:17:14<aindilis> sure
27.12.18 00:17:39<dmiles> just that it will be under our terms that we dont pretended we didnt do the project
27.12.18 00:17:53<dmiles> (like i did for the last one)
27.12.18 00:18:00<aindilis> that would be nice, but I'll have to contribute something tangible first
27.12.18 00:18:27<dmiles> oh yeah.. here comes the tangbils and you are probly teh most qualified person i've talk to this year..
27.12.18 00:18:30<aindilis> yeah okay, that's a bit strange but I read somewhere how much people could get done if no one cared about credit, anyway, you did like 1500 hours and I've done like 0 ;)
27.12.18 00:18:58<aindilis> tangbils?
27.12.18 00:19:02<dmiles> is hack DAYDREAMER to keep all persisitence in CYC
27.12.18 00:19:23<aindilis> okay sounds like fun
27.12.18 00:19:38<aindilis> glad to be focused on important work
27.12.18 00:19:54<dmiles> yes that is *very* *very* important
27.12.18 00:20:05<aindilis> I know you keep saying daydreamer is enroute to something important, like access consciousness or something
27.12.18 00:20:14<aindilis> AGI
27.12.18 00:20:17<aindilis> yeah that's it
27.12.18 00:20:30<aindilis> and I'm impressed by DayDreamer, and intimidated at the same time
27.12.18 00:20:37<dmiles> yep.. DAYDREAMEr is a vital 30% of creating AGI
27.12.18 00:20:40<aindilis> also I'm more from a planning background
27.12.18 00:20:57<aindilis> and so if it isn't playing chess it doesn't seem intuitively correct
27.12.18 00:21:02<aindilis> it has to be data driven
27.12.18 00:21:31<aindilis> well this is awesome
27.12.18 00:21:50<aindilis> I've created the project skeleton and am collecting all the pieces
27.12.18 00:22:01<aindilis> going to play around with getting them each to work independently first
27.12.18 00:22:08<aindilis> and then follow your reciupe
27.12.18 00:22:11<aindilis> *recipe
27.12.18 00:22:36<dmiles> i can help with chelleges getting DAYDREAMER to run
27.12.18 00:23:04<aindilis> k
27.12.18 00:23:08<aindilis> k brb
27.12.18 00:23:12<dmiles> its fine even to do the devel over a clioent API
27.12.18 00:25:02<dmiles> secretly i'd suggest that first (only due to add 40 hours leanring to make DAYDREAMER run in LarkC .. and effectively will not achevie any more technological imporovemnt)
27.12.18 00:25:46<dmiles> this Client API i would immagine is basidally one you wrote for emacs lisp)
27.12.18 00:26:14<aindilis> kk
27.12.18 00:26:21<dmiles> where you open a socket to port 3602 and EVAL
27.12.18 00:26:44<aindilis> well is it okay if I use my perl bindings since they're more mature?
27.12.18 00:26:51<dmiles> that is fine to
27.12.18 00:26:57<aindilis> perfect
27.12.18 00:27:34<aindilis> well wait though
27.12.18 00:27:45<aindilis> didn't you say the newer java bindings were more stable
27.12.18 00:27:58<aindilis> and wha'ts the point of perl here?  where is this running?
27.12.18 00:28:24<aindilis> what's the ps axf output look like here
27.12.18 00:28:41<dmiles> yes but gettign them usable from the system you host daydreamer is the most important.. if using the new java API not hard than that is ok
27.12.18 00:29:14<aindilis> so I have cyc running, I have day dreamer running, I have larkc running, what should talk to what?
27.12.18 00:29:39<dmiles> intially  cyc  running  and daydreamer running
27.12.18 00:29:55<dmiles> and that daydreamer is in charge of doing all the talking
27.12.18 00:29:59<dmiles> (to cyc)
27.12.18 00:30:30<aindilis> okay so I need CL bindings?
27.12.18 00:30:33<aindilis> to CYC
27.12.18 00:30:37<dmiles> yes
27.12.18 00:30:42<aindilis> k
27.12.18 00:31:05<dmiles> so the code in dd-rules.cl instead of making the like structs it makes makes them as cyc assertions
27.12.18 00:31:22<aindilis> nice
27.12.18 00:31:37<dmiles> then the code that quould have used those structs use cyc-query
27.12.18 00:31:38<aindilis> does DD do EC?
27.12.18 00:31:41<dmiles> yes
27.12.18 00:31:47<aindilis> do I have to come up with the EC CYC VOcab first?
27.12.18 00:32:12<dmiles> that is sort what you are going to be mussling thru.. finding how much of the EC is already present
27.12.18 00:32:21<aindilis> yeah that's what I thought
27.12.18 00:32:26<aindilis> okay well I will do this first step now and report back
27.12.18 00:32:34<dmiles> which relaly CYC has all the KR for it i beleive
27.12.18 00:32:36<aindilis> no reason to talk anymore about the next steps
27.12.18 00:32:51<dmiles> it is just picking and choosing what you might sometimes still create
27.12.18 00:33:38<aindilis> k I'll get started, first I have to check on M since she has a bad cold
27.12.18 00:33:43<aindilis> ttys!
27.12.18 00:33:50<dmiles> so still a recap:  port DD to uses cyc-assert/cyc-query instead of its own data model
27.12.18 00:33:58<dmiles> yep!
27.12.18 00:34:03<aindilis> yep!
27.12.18 00:34:05<dmiles> that is your "job" :P
27.12.18 00:35:07<dmiles> ok .. i have to fantisize jsut a little about "step"s since stoopkid is here this step is of particular intrest to MKM
27.12.18 00:38:00<dmiles> MKM step.. is to get this http://www.math.harvard.edu/computing/maxima/ running inside of LarKC 
27.12.18 00:39:04<dmiles> that would take me no more than 20hours
27.12.18 00:39:38<dmiles> then another 40 hours to make sure that CYC has all access to the function from cyc-query
27.12.18 00:41:28<dmiles> why i wanted to bring up that step is that makes Cyc powerfull enough to handle of of mathematic supposelty
27.12.18 00:41:40<dmiles> hehe
27.12.18 00:42:41<dmiles> hrrm so Maxima has renamed itself to Sage?
27.12.18 00:44:55<dmiles> oh crap though they rewrote it in a new language that LarKC doesnt compile
27.12.18 00:46:29<dmiles> ok n/m it is still accessable as orignal impl
27.12.18 00:49:37<dmiles> or as https://www.cliki.net/embeddable-maxima
27.12.18 00:55:39<dmiles> what is the channel log url? i might add it to channel topic
27.12.18 01:01:09<dmiles> oh cute:  https://lively-web.org/users/robertkrahn/cyc-interface.html
27.12.18 01:05:32<dmiles> and doenst this open a socket to Cyc ?  https://github.com/aindilis/cyc-mode-2/tree/master/hybrid
27.12.18 01:07:06<cyc> it sends a unilang message from Emacs to the UniLang server which routes it to the System::CYC package in https://github.com/aindilis/perllib/System dir
27.12.18 01:07:17<cyc> https://github.com/aindilis/perllib/tree/master/System
27.12.18 01:07:30<dmiles> aha
27.12.18 01:08:10<cyc> I suppose I could set up a CL unilang client, but someone would have to fix the primary UniLang bug to make it usable more generally, which is embarassingly that it hogs CPU
27.12.18 01:08:31<cyc> I think I will try via this approach though if that's alright with you
27.12.18 01:08:47<dmiles> oh its fine yeah
27.12.18 01:08:48<cyc> since it will help me along with releasing/sprucing up UniLang
27.12.18 01:09:28<cyc> that will also render it compatible with FRDCSA which isn't bad
27.12.18 01:09:38<dmiles> the question came up for me when i was tryign to investigate if i was right or wriong that it was you that did the lisp thing for cyc
27.12.18 01:09:44<dmiles> and btw it was you :)
27.12.18 01:09:51<cyc> ah
27.12.18 01:09:52<cyc> :)
27.12.18 01:13:56<cyc> what compiler should I write the unilang adapter for?  ABCL? and in particular which socket lib should I use?
27.12.18 01:14:42<cyc> also is context where DD keeps the state?
27.12.18 01:15:01<dmiles> well how iu conume you DAYDREAMER code i wont be using a socket .. since your code will be runing inside of cyc dirrectly
27.12.18 01:15:15<dmiles> how i consume
27.12.18 01:15:43<cyc> k
27.12.18 01:15:50<cyc> so I should skip UniLang
27.12.18 01:15:58<cyc> and just get daydreamer running in side larkc?
27.12.18 01:16:04<dmiles> that is, however you defined daydreamer to call cyc-query.. i jsut removbe your code and it calls the real thing
27.12.18 01:16:05<cyc> in ABCL?
27.12.18 01:16:21<cyc> oh you'll help with that integration, okay
27.12.18 01:16:37<cyc> okay sounds good if i understand correctly
27.12.18 01:16:44<dmiles> guit it running in ABCL once i think while i get the LarKC set up
27.12.18 01:16:50<cyc> k
27.12.18 01:16:53<dmiles> ok yes.. get it running in ABCL once i think while i get the LarKC set up
27.12.18 01:18:15<dmiles> one issue with LarKC is it takes 5 minutes froma  cold start every time
27.12.18 01:18:20<dmiles> ABCL is much quicker
27.12.18 01:18:31<dmiles> (hehe)
27.12.18 01:18:58<cyc> oh well I am not advocating for ABCL, I want to do it the right way, I just thought since you mentioned it that was where I should run it - should I instead try to get it to run on LARKC?
27.12.18 01:20:15<dmiles> well let say by tommorow i will have confirmed there isnt any stupid bugs with running abcl running code in larkc
27.12.18 01:20:22<cyc> ah
27.12.18 01:20:23<cyc> kk
27.12.18 01:20:59<dmiles> that is all i am afraid of is that tehre are things like the rcytc use of /tmp directory and such
27.12.18 01:21:22<dmiles> like the rcyc use of /tmp directory and such to start webserver
27.12.18 01:21:39<dmiles> (these will all start when you start datdreameR)
27.12.18 01:22:35<dmiles> one things sorta very cool is emacs slime/swank should work 
27.12.18 01:23:12<dmiles> that is if one is used to common-lisp development ecosystem.. you do get all of that with this thingy
27.12.18 01:23:49<cyc> definitely
27.12.18 01:26:38<dmiles> (SL::IN-PACKAGE "CYC") (DECLARE-CB-TOOL :current-cb-echo "Echo the http request" "Echo the http request" "Echo the http request") (DEFINE-CB-LINK-METHOD :current-cb-echo (&optional linktext) (punless linktext (csetq inktext "Echo the http request")) (frame-link  (html-princ "cb-echo")    (html-princ linktext))   (ret nil))
27.12.18 01:26:50<dmiles> cyc: (SL::IN-PACKAGE "CYC") (DECLARE-CB-TOOL :current-cb-echo "Echo the http request" "Echo the http request" "Echo the http request") (DEFINE-CB-LINK-METHOD :current-cb-echo (&optional linktext) (punless linktext (csetq inktext "Echo the http request")) (frame-link  (html-princ "cb-echo")    (html-princ linktext))   (ret nil))
27.12.18 01:27:15<dmiles> cyc: (progn (SL::IN-PACKAGE "CYC") (DECLARE-CB-TOOL :current-cb-echo "Echo the http request" "Echo the http request" "Echo the http request") (DEFINE-CB-LINK-METHOD :current-cb-echo (&optional linktext) (punless linktext (csetq inktext "Echo the http request")) (frame-link  (html-princ "cb-echo")    (html-princ linktext))   (ret nil)))
27.12.18 01:30:57*** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 250 seconds
27.12.18 01:31:33*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
27.12.18 01:31:38<dmiles> cyc: (+ 1 1)
27.12.18 01:32:41<aindilis> sorry my cilent froze
27.12.18 01:32:51*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
27.12.18 01:33:03<aindilis> or something, I somehow was using the wrong emacs session
27.12.18 01:33:07<aindilis> back now
27.12.18 01:34:35<dmiles> i think i am going to buold th subl.jar and then accidenmtly commit it
27.12.18 01:34:56<dmiles> so all you'll need to do is replace that one file in your local dir
27.12.18 01:35:09<dmiles> local isntance of 4q
27.12.18 01:47:14<aindilis> k
27.12.18 01:47:25<aindilis> btw, I'm sorry for being such a noob, but ABCL is missing MEMQ?
27.12.18 01:47:57<aindilis> cannot fix first bug which is ABCL jar won't compile dd
27.12.18 01:48:06<aindilis> so far because of memq undfined
27.12.18 01:51:15<aindilis> it seems to be here, so I'll try building this: https://github.com/slyrus/abcl/blob/master/src/org/armedbear/lisp/Lisp.java
27.12.18 01:54:54<aindilis> well I think it's already there, but getting a weird message message
27.12.18 01:59:30<dmiles> https://github.com/eriktmueller/daydreamer/blob/master/compat.cl
27.12.18 01:59:31<aindilis> builds fine on sbcl
27.12.18 01:59:40<aindilis> yeah it's loading that and still not working
27.12.18 01:59:54<dmiles> oh on ABCL you have to comment that out
27.12.18 01:59:58<dmiles> since its a builtin
27.12.18 02:00:10<aindilis> I tried that
27.12.18 02:01:29<dmiles> btw people had compained it doesnt quite wqork right on SBCL .. but it does on clips
27.12.18 02:01:31<aindilis> that worked
27.12.18 02:01:32<dmiles> clisp
27.12.18 02:01:42<aindilis> I had to uncomment the whole compat thing
27.12.18 02:01:46<aindilis> not just memq
27.12.18 02:01:49<aindilis> btw, clisp did not work for me
27.12.18 02:01:54<aindilis> but sbcl did lol
27.12.18 02:01:57<dmiles> on SBCL it runs but then stops before it gets all the way thru 
27.12.18 02:02:12<aindilis> oh okay
27.12.18 02:02:14<aindilis> well trying now
27.12.18 02:02:17<aindilis> with ABCL
27.12.18 02:02:21<aindilis> ty for the help
27.12.18 02:02:26<dmiles> so you get at least teh first 30% on SBCL
27.12.18 02:13:56<aindilis> weird, it compiles if you remove all references to load compat.cl, but then it's missing null?
27.12.18 02:14:07<aindilis> when you run it, which is in compat.cl
27.12.18 02:15:19<dmiles> oh btw i do remember that the compiled version i could not get to work but the laod version did
27.12.18 02:15:28<aindilis> ah k
27.12.18 02:15:39<dmiles> so basically liek (load "dd")
27.12.18 02:16:00<dmiles> oh its "started" with dd
27.12.18 02:16:03<dmiles> (dd)
27.12.18 02:17:27<dmiles> oops ok the whole thing  loaded and started with  (load "dd")
27.12.18 02:17:44<dmiles> basically https://github.com/eriktmueller/daydreamer/blob/master/dd.cl
27.12.18 02:17:58<aindilis> isn't working for me
27.12.18 02:18:31<dmiles> for clips i got it to work.. for ABCL i had to change a few files
27.12.18 02:18:34<dmiles> clisp
27.12.18 02:18:47<dmiles> liek for abcl you have to rename all the files to .lisp
27.12.18 02:19:17<aindilis> k
27.12.18 02:19:23<aindilis> will try ty
27.12.18 02:19:28<dmiles> but then if there is a  (load "gate_get.cl")  you have to fix that as well
27.12.18 02:19:34<aindilis> yeah
27.12.18 02:19:58<dmiles> (you will thnak yourself for renaming them since then it suddenlty works all other lisps to)
27.12.18 02:20:30<aindilis> testing
27.12.18 02:38:52<aindilis> I got it to where it says  i hav eto go see a movie
27.12.18 02:39:16<aindilis> but there is some type error about 11 not being 1-10
27.12.18 02:39:18<dmiles> then it errors :)
27.12.18 02:39:24<aindilis> :)
27.12.18 02:39:54<dmiles> this is abcl right?
27.12.18 02:40:00<aindilis>  I have to go see a movie.
27.12.18 02:40:01<aindilis> ==================================================
                 <aindilis> End of delayed broadcast.
                 <aindilis> Run inferences in #{CX.7: (CX)}, bp = (#{ME: (FEMALE-PERSON first-name "Sarah"......)})
27.12.18 02:40:05<aindilis> Error loading /var/lib/myfrdcsas/versions/myfrdcsa-1.0/collaborative/git/daydreamer/dd.lisp at line 120 (offset 4359)
27.12.18 02:40:08<aindilis> #<THREAD "interpreter" {4917EA56}>: Debugger invoked on condition of type TYPE-ERROR
27.12.18 02:40:11<aindilis>   The value 11 is not of type (INTEGER 0 10).
27.12.18 02:40:15<aindilis> yeah
27.12.18 02:40:25<aindilis> 120 is simply (daydreamer)
27.12.18 02:40:50<dmiles> ok i remebert this error
27.12.18 02:41:03<aindilis> I copied all the helper functions from compat into dd.lisp sans memq
27.12.18 02:41:28<dmiles> i actualyl chaked memq impl in ABCL to workarorudn this i know thats crazy
27.12.18 02:42:01<dmiles> in hignsigt i wual have jsut used renamed memq to dd-memq !
27.12.18 02:42:15<aindilis> okay should I try that and see if 11 error disappears?
27.12.18 02:42:16<dmiles> in the sources
27.12.18 02:42:24<dmiles> yep
27.12.18 02:42:27<aindilis> k ty
27.12.18 02:42:44<dmiles> it has to do with teh fact that some list length is being misunderstood
27.12.18 02:43:13<dmiles> so its seeking the 11th unit of a 10 unit list
27.12.18 02:43:43<dmiles> by i am only 45% sure it was related to memq .. but that is enough to try
27.12.18 02:44:46<dmiles> also if this doesnt work.. you have it so at least now it with ABCL far enough it will probly work in clisp
27.12.18 02:48:01<aindilis> what is larkc going to run in?
27.12.18 02:48:18<aindilis> also I tried dd-memq and still getting 11
27.12.18 02:49:41<dmiles> ok yeah try clisp
27.12.18 02:50:06<dmiles> that 11 is that i hacked sometign in ABCL (it wasnt memq it was soemnting more extreme)
27.12.18 02:50:31<dmiles> also waht verson of clisp are you runing?
27.12.18 02:51:29<dmiles> (needs to probably be at least 2.49)
27.12.18 02:51:33<aindilis> well I already have a version of daydreamer that I have running with clisp (compiled)
27.12.18 02:51:36<aindilis> I'll just use that
27.12.18 02:51:58<dmiles> well dont worry at least the hack i did for ABCL is still in this source!
27.12.18 02:52:10<dmiles> (so it will run in our LarKC)
27.12.18 02:52:15<aindilis> Hrm, I'm using the Erik Mueller version
27.12.18 02:52:37<aindilis> cool
27.12.18 02:52:43<dmiles> yeha thats what i remember is clisp was the only one that worked otu of the box
27.12.18 02:52:54<aindilis> well since I've made my changes it doens't work lol
27.12.18 02:52:58<aindilis> I'll try out of the box
27.12.18 02:53:03<dmiles> oh i lie
27.12.18 02:53:05<aindilis> ut I have a working version
27.12.18 02:53:16<dmiles> i mena clisp i got working in under 10 minutes
27.12.18 02:53:22<dmiles> everyone else was hour at leasrt
27.12.18 02:53:55<dmiles> good
27.12.18 02:54:15<aindilis> k should i write a unilang client for clisp now? 
27.12.18 02:54:52<aindilis> and then send it over unilang to System::Cyc, the backend for dd_rule[12].lisp ?
27.12.18 02:55:11<dmiles> yeah
27.12.18 02:55:15<aindilis> k will do
27.12.18 02:55:26<dmiles> i say i goign to have the subl-larkc.jar done by tommorow .. but who knows
27.12.18 02:55:28<aindilis> I'm going to upload daydreamer to git
27.12.18 02:55:35<aindilis> okay no worries
27.12.18 02:55:53<dmiles> subl-larkc.jar would mean you dont have to do the UniLang bionding
27.12.18 02:56:07<aindilis> oh I see
27.12.18 02:56:15<aindilis> hrm
27.12.18 02:56:59<dmiles> subl-larkc.jar  is jsut like  RCyc exect it gives you a common Lisp REPL and not a SubLRepl
27.12.18 02:57:00<aindilis> I don't understand though, are we going to use ABCL or CLISP or does LarKC have it's own lisp in java?
27.12.18 02:57:04<aindilis> k
27.12.18 02:57:25<aindilis> so it could potentially be hard though to compile daydreamer for it, right?
27.12.18 02:57:29<dmiles> and that common-lisp repl was the one i etiuerh worked arorund or fixed a bug in ABCL for
27.12.18 02:57:35<aindilis> ah okay
27.12.18 02:58:05<aindilis> well I suppose it can't hurt to have a Clisp CL UniLang binding so I'll proceed with that
27.12.18 02:58:06<dmiles> also my version of ABCL is from the orignal developers.. the new ABCL are a buch of guys trying to learn
27.12.18 02:58:19<aindilis> I'll try to make sure whatever socket lib I use can handle ABCL + CLISP
27.12.18 02:58:28<aindilis> heh
27.12.18 02:58:50<dmiles> (they borked ABCL is so many ways!)
27.12.18 02:58:53<aindilis> another possibility is I could just work on translating the output manually for now
27.12.18 02:59:10<aindilis> I could use prin1-to-stirng or whatever to print out the data structures, then manually translate them
27.12.18 02:59:25<dmiles> oh yeah in cat that was very close to my workflow
27.12.18 02:59:27<aindilis> awaiting subl-larkc.jar
27.12.18 02:59:51<dmiles> i ended up making the structures actualyl print and  re-readable 
27.12.18 02:59:59<aindilis> oh okay
27.12.18 03:00:07<dmiles> just so i could feel out what they even were :)
27.12.18 03:00:26<aindilis> okay
27.12.18 03:00:32<dmiles> to make a  to-and-from
27.12.18 03:01:44<dmiles> yeah you can set up what you are could to assert and query
27.12.18 03:01:50<dmiles> (with your idea)
27.12.18 03:03:27<aindilis> okay
27.12.18 03:05:20<dmiles> Erik's structures are such a tangle of trees but seemed untangleable
27.12.18 03:05:43<dmiles> the reason: is immagine every cyc-constant had to be a hahsmap of links 
27.12.18 03:05:58<dmiles> (in order to have predicates relate them)
27.12.18 03:06:45<dmiles> where realistically it would not be a bunch of trees .. it be a flat list of predciates
27.12.18 03:07:33<dmiles> getting those sorted out is 50% the battle
27.12.18 03:08:20<dmiles> teh other 50% is deciding what should be used out of existing cyc vs what needs a new predicate
27.12.18 03:08:25<aindilis> https://github.com/aindilis/daydreamer
27.12.18 03:09:07<aindilis> oh hrm, I was hoping it was 1-1
27.12.18 03:10:01<dmiles> for example  OB.2008
27.12.18 03:10:10<dmiles> its a daydreamer assertion
27.12.18 03:10:22<dmiles> https://github.com/aindilis/daydreamer/blob/master/output.txt#L166-L179
27.12.18 03:10:50<dmiles> CX.4 is a Microtheory
27.12.18 03:11:32<dmiles> so for each CX.* you end up making a new mcirother
27.12.18 03:11:57<aindilis> k
27.12.18 03:12:59<dmiles> notices  EPISODE.* s  these are learned frames
27.12.18 03:13:52<dmiles> they get stored in "EPISODIC-RULE.*" 
27.12.18 03:14:00<dmiles> stored under*
27.12.18 03:14:42<aindilis> brb
27.12.18 03:14:49<dmiles> in that case even each  "EPISODIC-RULE.*"  might have its very own MT
27.12.18 03:15:00<dmiles> (one for each rule)
27.12.18 03:15:36<dmiles> with Geml Mts to "learned frame"  MTs
27.12.18 03:16:09<dmiles> though saying that much i already realized that should not have its very own MT
27.12.18 03:16:40<dmiles> probalby a "EPISODIC-RULE.555" is a First order object
27.12.18 03:17:01<dmiles> that Frames claim to be under
27.12.18 03:17:14<dmiles> frames being MTs  etc
27.12.18 03:18:37<aindilis> I know this is cheesy but should I do something like (ddPredFn (ddPredHeadFn "ACTING-EMPLOY") (ddXFn "actor") ?VAR55555-PERSON ?VAR-55556-ORGANIZATION) ?
27.12.18 03:18:57<aindilis> orjust #$actingEmploy
27.12.18 03:19:04<dmiles> that is a good idea to start with
27.12.18 03:19:23<dmiles> i do that and it annoys myself what i do that.. but i always regfret not doing that
27.12.18 03:19:41<aindilis> lol
                 <dmiles> i do that and it annoys myself when i do :)  but i always reret not doing that!
27.12.18 03:20:44<dmiles> also i sometimes will just get things visible int eh KB jsut so i can see the darn things .. no semantics t all to start
27.12.18 03:21:32<dmiles> then can start to see how thangs can relate at all
27.12.18 03:22:18<dmiles> the fact that you are thinking that way is very awesome
27.12.18 03:24:31<aindilis> okay I'm feeling winded probably from struggling with ABCL earlier, imma take a quick break and then try to find the salient points where I'll graft on the Cyc API
27.12.18 03:25:14<dmiles> so i am saying even if you are not making MTs for eveny memory frames .. we dont even know what the memory frames its better to almost have unstructured data at first
27.12.18 03:58:59<aindilis> well I tried to methods to do Perl function calls from common lisp but no luck
27.12.18 03:59:08<aindilis> that would have greatly sped things up on my end
27.12.18 03:59:30<aindilis> *two methods
27.12.18 04:01:22<aindilis> I do have a java unilang client though
27.12.18 04:04:28<dmiles> there are a couple lisp binding to opencyc
27.12.18 04:04:40<dmiles> bindings* that would work 
27.12.18 04:05:20<dmiles> i would just write out to a file what you are going to assert anyways
27.12.18 04:05:41<dmiles> for a day or two
27.12.18 04:08:20<aindilis> https://frdcsa.org/~andrewdo/dmiles/UniLang-Java-Client.tgz
27.12.18 04:09:00<aindilis> okay
27.12.18 04:39:50<aindilis> well I might as well ask since its taking me a while, do you know offhand how to avoid the contraction (...) printing?
27.12.18 04:41:11<dmiles> http://clhs.lisp.se/Body/v_pr_lev.htm
27.12.18 04:42:12<dmiles> so i (setq *print-length* nil)
27.12.18 04:42:38<dmiles> erik i think set it he thought to help sanity
27.12.18 04:43:23<dmiles> well (setq *print-length* nil) wont fix it right off
27.12.18 04:43:39<dmiles> since some of the code is set to shorten it
27.12.18 04:44:11<dmiles> its the gate object printing part
27.12.18 04:45:26<dmiles> https://github.com/aindilis/daydreamer/blob/master/gate_read_pr.cl#L183
27.12.18 04:45:49<dmiles> ah cool he sort in *ob-print-options*
27.12.18 04:45:58<aindilis> oty
27.12.18 04:46:02<aindilis> ty
27.12.18 04:46:36<dmiles> i spent a few hours doing what you are trying to do :P
27.12.18 04:46:47<dmiles> i wish i knew where thaqt code was
27.12.18 04:47:57<dmiles> i've lost two HD since thant i am surprised it was on those.. though i started some grepping
27.12.18 04:48:09<dmiles> in case i can locate it
27.12.18 04:48:20<dmiles> it should have been with the larkc code but wasnt
27.12.18 04:59:07<aindilis> well I have it printing in a lot of cases now
27.12.18 04:59:22<aindilis> although still occasionally has a ...
27.12.18 05:05:46<dmiles> well OBs are jsut one kind of thing the CXs probly have their own setting
27.12.18 05:05:51<aindilis> (setq *print-length* 60)
                 <aindilis>  
                 <aindilis> (setq *ob-short-length* 26)
                 <aindilis>  
27.12.18 05:05:56<aindilis> that should help
27.12.18 05:06:01<dmiles> yeah
27.12.18 05:17:12<aindilis> okay still some ldots (...) in the output, unsure why, but going to break for the day
27.12.18 05:18:43<dmiles> i am breaking to..  well ther ei salso someting called print depth that is differnt than length
27.12.18 05:19:04<aindilis> hrm, I searched for depth and only found one weird thing
27.12.18 05:19:07<aindilis> but I'll try again
27.12.18 05:19:16<aindilis> maybe it's lisp specific
27.12.18 05:19:42<dmiles> also there are other printer settign that are set in clisp
27.12.18 05:19:53<dmiles> by default 
27.12.18 05:20:15<dmiles> that limit various things 
27.12.18 05:20:24<dmiles> sometimes efven in the middle of a fomrat satement
27.12.18 05:20:47<dmiles> in a format statement one sometimes sets lenghts
27.12.18 05:21:13<dmiles> just mentiong thist in case you return befor ei do
27.12.18 05:21:34<dmiles> ok.. nn!
27.12.18 05:21:41<aindilis> great, thanks, I'll be around tomorrow around the same time I was today! nn!
27.12.18 06:36:58*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
27.12.18 06:37:04<dmiles> cyc: (+ 1 1)
27.12.18 07:26:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nqknfejzwgzexhsg) left #logicmoo: Quit: Connection closed for inactivity
27.12.18 09:19:20*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
27.12.18 13:33:11*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
27.12.18 13:33:16<dmiles> cyc: (+ 1 1)
27.12.18 14:51:36*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
27.12.18 16:52:57*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-pspeedlutibdwlxd, stoopkid: stoopkid)
27.12.18 16:53:01<dmiles> cyc: (+ 1 1)
27.12.18 18:52:15*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
27.12.18 18:52:44*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 272 seconds
27.12.18 18:53:41*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
27.12.18 18:53:59<dmiles> cyc: (+ 1 1)
27.12.18 18:55:18*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
27.12.18 18:55:23<dmiles> cyc: (+ 1 1)
27.12.18 18:56:35*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Read error: Connection reset by peer
27.12.18 18:58:43*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
27.12.18 18:58:51<dmiles> cyc: (+ 1 1)
27.12.18 20:27:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-pspeedlutibdwlxd) left #logicmoo: Quit: Connection closed for inactivity
27.12.18 20:57:18*** Join: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net, b3nszy: b3nszy)
27.12.18 20:57:23<dmiles> cyc: (+ 1 1)
27.12.18 20:57:27<b3nszy> hello
27.12.18 20:58:06<aindilis> hey
27.12.18 20:58:12<aindilis> srry was just grabbing some food
27.12.18 20:58:53<aindilis> dmiles: ping
27.12.18 20:59:09<aindilis> b3nszy: I'll show you some of the cyc bot
27.12.18 20:59:23<aindilis> CYC does CBR I think
27.12.18 20:59:27<aindilis> and planning
27.12.18 20:59:38<aindilis> and moreover, what you'll find with the planning idea
27.12.18 20:59:40<aindilis> is this
27.12.18 20:59:49<aindilis> that you need to some how model the possible actions
27.12.18 20:59:55<aindilis> they don't come for free
27.12.18 21:00:14<aindilis> so there's a lot of work on automatically learning what the possible actions are in various situations/configurations
27.12.18 21:00:24<aindilis> but I recommend you write a planning algorithm
27.12.18 21:00:31<aindilis> we mentioned doing tic tac toe
27.12.18 21:00:41<aindilis> you could also try to solve the rubics cube
27.12.18 21:00:49<aindilis> but that's a lot harder
27.12.18 21:00:54<aindilis> I couldn't do it
27.12.18 21:01:00<aindilis> but I didn't try very hard
27.12.18 21:01:17<aindilis> figuring out how to model the actions with the rubics cube is very hard
27.12.18 21:01:28<aindilis> but others have done it and I've downloaded their work
27.12.18 21:01:48<aindilis> the problem is not only figuring out how to express actions, but how to have a planner that can work with complex actions
27.12.18 21:01:58<aindilis> the planners are the effective limitations
27.12.18 21:02:16<aindilis> dmiles has been working on a very good planner for a language called Event Calculus
27.12.18 21:02:32<aindilis> it pays to know the existing frameworks and what their strengths and weaknesses are
27.12.18 21:02:42<aindilis> I'm encoding that info into CYC, let me bring up the CYC bot
27.12.18 21:04:09*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
27.12.18 21:04:14<dmiles> cyc: (+ 1 1)
27.12.18 21:04:17<cyc> "2"
27.12.18 21:04:27<aindilis> b3nszy: you following?
27.12.18 21:04:50<aindilis> cyc: (constant-apropos "Event")
27.12.18 21:04:54<cyc> "#$2012InUFCEvents"
                 <cyc> "#$ADramaticTurnOfEvents-Album"
                 <cyc> "#$ALI_BABA-EVENT-KS"
                 <cyc> "#$AbbreviationEvent"
27.12.18 21:04:57<cyc> "#$AbsoluteSportsEvent"
27.12.18 21:05:01<cyc> "#$AbsorptionEvent"
27.12.18 21:05:04<cyc> "#$AccreditationEvent"
27.12.18 21:05:07<cyc> "#$AceVentura-TheGame"
                 <b3nszy> yes
27.12.18 21:05:10<cyc> "#$AceVenturaPetDetective-TheMovie"
27.12.18 21:05:14<cyc> ...
27.12.18 21:05:27<aindilis> cyc: (f "EventCalculus")
27.12.18 21:05:29<cyc> #$EventCalculus
27.12.18 21:05:45<aindilis> cyc: (cap "Axiomatic")
27.12.18 21:05:47<cyc> NIL
27.12.18 21:05:51<aindilis> cyc: (constant-apropos "Axiomatic")
27.12.18 21:05:53<cyc> "#$AxiomaticTheory"
                 <cyc> "#$MKMAxiomaticDefinitionOfTheRealNumbers"
                 <cyc> "#$MKMAxiomaticGeometry"
                 <cyc> "#$MKMAxiomaticProjectiveGeometry"
27.12.18 21:05:56<cyc> "#$MKMBibliographyForAxiomaticsAndMathematicsFoundationsInCategories"
27.12.18 21:06:16<aindilis> cyc: (a '(#$isa #$EventCalculus #$AxiomaticTheory) #$BaseKB)
27.12.18 21:06:17<cyc> T
27.12.18 21:06:32<aindilis> cyc: (all-instances #$AxiomaticTheory #$EverythingPSC)
27.12.18 21:06:34<cyc> "#$ZermeloFraenkelSetTheory"
                 <cyc> "#$RegionConnectionCalculus8Theory"
                 <cyc> "#$EventCalculus"
                 <cyc> "#$ThePrototypicalAxiomaticTheory"
27.12.18 21:06:54<aindilis> cyc: (f "SituationCalculus")
27.12.18 21:06:55<cyc> #$SituationCalculus
27.12.18 21:06:58<aindilis> cyc: (f "FluentCalculus")
27.12.18 21:07:00<cyc> #$FluentCalculus
27.12.18 21:07:08<aindilis> cyc: (a '(#$isa #$SituationCalculus #$AxiomaticTheory) #$BaseKB)
27.12.18 21:07:10<cyc> T
27.12.18 21:07:19<aindilis> cyc: (a '(#$isa #$FluentCalculus #$AxiomaticTheory) #$BaseKB)
27.12.18 21:07:20<cyc> T
27.12.18 21:07:24<aindilis> cyc: (all-instances #$AxiomaticTheory #$EverythingPSC)
27.12.18 21:07:25<cyc> "#$ZermeloFraenkelSetTheory"
27.12.18 21:07:26<cyc> "#$RegionConnectionCalculus8Theory"
                 <cyc> "#$EventCalculus"
                 <cyc> "#$SituationCalculus"
27.12.18 21:07:29<cyc> "#$FluentCalculus"
27.12.18 21:07:32<cyc> "#$ThePrototypicalAxiomaticTheory"
27.12.18 21:07:57<aindilis> cyc: (all-isa (#$personHavingIRCAliasFn "b3nzsy") #$EverythingPSC)
27.12.18 21:08:12<b3nszy> have no clue what you're doing
27.12.18 21:08:15<aindilis> cyc: (all-isa #$Person #$EverythingPSC)
27.12.18 21:08:17<cyc> "#$TKBPersonTerroristToggle"
                 <cyc> ("#<" ("#$SingletonCollectionFn" "#$Person") ">")
                 <cyc> ("#<" ("#$CollectionUnionFn" ("#$TheSet" "#$FacetInstanceCollection" "#$ClarifyingCollectionType")) ">")
                 <cyc> "#$ClarifyingCollectionType"
27.12.18 21:08:20<cyc> "#$QAClarifyingCollectionType"
27.12.18 21:08:23<cyc> "#$KEClarifyingCollectionType"
27.12.18 21:08:26<cyc> "#$CandidateKBCompletenessNode"
27.12.18 21:08:30<cyc> "#$TimeDependentCollection"
27.12.18 21:08:33<cyc> "#$ProjectInstantiationToStartOfInstance-Collection"
27.12.18 21:08:36<cyc> ...
27.12.18 21:08:37<aindilis> okay
27.12.18 21:08:42<aindilis> it's hard to explain
27.12.18 21:08:59<aindilis> but I'm adding terminology to the KB then telling the KB what the terminology means
27.12.18 21:09:15<aindilis> for instance (f "EventCalculus") creates a constant in the KB
27.12.18 21:09:31<aindilis> a constant is like a constant in a math expression, like Pi or E or what not
27.12.18 21:09:32<aindilis> follow?
27.12.18 21:10:02<b3nszy> ok
27.12.18 21:10:15<b3nszy> what if you input conflicting information
27.12.18 21:10:19<b3nszy> like a bird can fly
27.12.18 21:10:26<b3nszy> a penguin is a bird
27.12.18 21:10:30<b3nszy> a penguin cant fly
27.12.18 21:10:41<aindilis> well there are several things that handle that
27.12.18 21:11:04<aindilis> CYC is rather expert as defeasible / default / nonmonotonic reasoning, of which that is the canonical example you provided
27.12.18 21:11:08<aindilis> *expert at
27.12.18 21:11:26<aindilis> so every assertion in the KB is marked either nonmonotonic or monotonic
27.12.18 21:11:31<aindilis> let me show you
27.12.18 21:11:32<aindilis> one sec
27.12.18 21:12:16<aindilis> 'ASSERTION'(':TRUE-DEF', [[], [['#$transitiveViaArgInverseExceptions', '#$FlightlessBird', ['NART'(['#$TypeCapableFn', '#$behaviorCapable']), '#$Bird', '#$Flying-FlappingWings', '#$doneBy'], 'NART'(['#$TypeCapableFn', '#$behaviorCapable']), '#$genls', 1]]], '#$NaiveAnimalsMt', [], 1074333, ':FORWARD').
                 <aindilis> 'ASSERTION'(':TRUE-MON', [[], [['#$typeBehaviorIncapable', '#$FlightlessBird', '#$Flying-FlappingWings', '#$doneBy']]], '#$AnimalActivitiesMt', [], 1133762, ':FORWARD').
27.12.18 21:12:29<aindilis> teh first assertion is true by default
27.12.18 21:12:37<aindilis> the second is always true
27.12.18 21:12:47<aindilis> it's the TRUE-DEF or TRUE-MON that determines that
27.12.18 21:13:09<aindilis> also, CYC probably has support for paraconsistent logics
27.12.18 21:13:24<aindilis> also if you assert something monotonicly and then contradict it you get a warning
27.12.18 21:13:25<aindilis> watch
27.12.18 21:13:48<aindilis> cyc: (q '(#$isa #$AndrewDougherty #$Person) #$POSICommunityMt)
27.12.18 21:13:50<cyc> "NIL"
27.12.18 21:13:55<aindilis> cyc: (q '(#$isa #$AndrewDougherty #$Person) #$POSIMt)
27.12.18 21:13:57<cyc> NIL
27.12.18 21:14:01<aindilis> hrm one sec
27.12.18 21:14:58<aindilis> cyc: (q '(#$isa #$AndrewDougherty #$AIResearcher) #$POSICommunityMt)
27.12.18 21:14:59<cyc> "NIL"
27.12.18 21:15:03<aindilis> ah okay
27.12.18 21:15:13<aindilis> cyc: (t-or-f (q '(#$isa #$AndrewDougherty #$AIResearcher) #$POSICommunityMt))
27.12.18 21:15:14<cyc> "true"
27.12.18 21:15:24<aindilis> cyc: (t-or-f (q '(#$isa #$AndrewDougherty #$Person) #$POSICommunityMt))
27.12.18 21:15:26<cyc> "true"
27.12.18 21:15:42<aindilis> I've asserted in a particular context that AndrewDougherty is an AIResearcher
27.12.18 21:15:50<aindilis> Cyc deduces int hat context that I amtherefore a person
27.12.18 21:16:01<aindilis> now if I assert that I am not a person, we should get an error
27.12.18 21:16:11<aindilis> cyc: (a '(#$not (#$isa #$AndrewDougherty #$Person)) #$POSICommunityMt))
27.12.18 21:16:12<cyc> NIL
27.12.18 21:16:18<aindilis> cyc: (t-or-f (a '(#$not (#$isa #$AndrewDougherty #$Person)) #$POSICommunityMt)))
27.12.18 21:16:20<cyc> "false"
27.12.18 21:16:23<aindilis> see ?
27.12.18 21:16:28<aindilis> a means assert, q means query
27.12.18 21:16:37<aindilis> take some time to look over this then ping me
27.12.18 21:16:54*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-noilmfgugexqaoiw, stoopkid: stoopkid)
27.12.18 21:16:59<dmiles> cyc: (+ 1 1)
27.12.18 21:17:01<cyc> "2"
27.12.18 21:18:27<aindilis> so b3nszy, srry I had to finish my dinner
27.12.18 21:18:31<aindilis> so here is what these things mean
27.12.18 21:18:39<b3nszy> speaking to pei wang atm
27.12.18 21:18:41<aindilis> #$isa is a relation that means something is an instance of
27.12.18 21:19:51<aindilis> k let me know when you're ready
27.12.18 21:20:27<aindilis> I'm trying to show you how I would go about accomplishing the two things you said you wanted to - the Cognitive Architecture that thinks like a planner, and the Case Based Reasoner
27.12.18 21:20:41<aindilis> dmiles has mentioned CBR in the past, I think he has done some work with it
27.12.18 21:42:03<aindilis> b3nszy: ping
27.12.18 22:34:40*** Quit: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net) left #logicmoo: Remote host closed the connection
27.12.18 23:03:41<aindilis> picked up 'DAYDREAMER: Daydreaming in Humans and Machines' for Kindle
27.12.18 23:04:00<aindilis> not feeling too well today but hopefully will be able to read some
27.12.18 23:49:32<dmiles> the book is pretty Huge
27.12.18 23:49:39<cyc> hey
27.12.18 23:49:49<dmiles> i dont know if i have read it all the way thru ever.. but i read it for several months somehow
27.12.18 23:50:00<cyc> I I am on page 4 or 392
27.12.18 23:50:05<cyc> *of
27.12.18 23:50:10<dmiles> :)
27.12.18 23:50:23<cyc> there is one source of stigma which i have to point out
27.12.18 23:50:34<cyc> is that I am usually interested in things with security applications
27.12.18 23:50:52<cyc> whereas daydreamer (superficially) sounds quaint
27.12.18 23:51:11<dmiles> well this is the onlyu framework that has a good chance to implment a security robot :P
27.12.18 23:51:28<cyc> so if you can explain how one could use this to plan security, it would enhance my motivation
27.12.18 23:51:48<cyc> I mean I get it sort of, it's thinking about and analyzing scenarios
27.12.18 23:51:52<cyc> learning from them
27.12.18 23:52:07<cyc> but how it would compare to some kind of adversarial planner
27.12.18 23:52:12<cyc> ATEL CTL* etc
27.12.18 23:52:41<cyc> I believe you but it might help if you could elucidate some
27.12.18 23:52:51<dmiles> hierarchical planning: achieving a goal by breaking it down into subgoals
                 <dmiles> analogical planning (chunking): storing successful plans and adapting them to future problems
                 <dmiles> episode indexing and retrieval: mechanisms for indexing and retrieval of cases
27.12.18 23:52:52<dmiles> serendipity detection and application: a mechanism for recognizing and exploiting accidental relationships among problems
                 <dmiles> action mutation: a strategy for generating new possibilities when the system is stuck
27.12.18 23:53:18<cyc> okay so could we create a security domain for it?
27.12.18 23:53:26<dmiles> yes
27.12.18 23:53:29<cyc> kk
27.12.18 23:54:00<cyc> so basically it has all the raw pieces and can be converted via the right domain and prodding into what I'm interested in
27.12.18 23:54:31<cyc> anyway I've already learned a lot about it even only on page 4
27.12.18 23:54:46<cyc> I can tell by its output it is useful
27.12.18 23:55:01<cyc> what kind of security domain would you like to create?
27.12.18 23:55:09<dmiles> also i noticed somethjing usefull about its output to
27.12.18 23:55:32<dmiles> that lets say have these are canned "we told you to think this way" 
27.12.18 23:55:49<dmiles> it can also learn for the things it says outloud
27.12.18 23:56:24<dmiles> as it frames our ideas in new ways that become knowledge that even it can use
27.12.18 23:56:36<cyc> interesting, I do that too sometimes
27.12.18 23:56:54<cyc> I like the frame based system and noticed ptrans and mtrans
27.12.18 23:57:13<cyc> it's definitely got all the right pieces, so what domain would you like to do security-wise?
27.12.18 23:57:17<dmiles> that is completely the secret to human and mathematic inginuity
27.12.18 23:57:21<cyc> I'm interested in home defense, food security etc
27.12.18 23:58:14<cyc> do you think we could extend it's planners to be stronger?
27.12.18 23:58:21<dmiles> well i see it compatible with PDDL that has security domains
27.12.18 23:59:04<cyc> but it does metaplanning too right?  so it's stronger than PDDL unless you can somehow work out metaplanning using arguments to fluents
27.12.18 23:59:13<dmiles> i think we can
27.12.18 23:59:23<cyc> cool
27.12.18 23:59:26<dmiles> it plans to plan yes
28.12.18 00:00:01<cyc> alright, well now that I am realizing the obvious - that it has good planning, it actually subsumes CTL* etc
28.12.18 00:00:14<dmiles> how it plans to plan is it looks at wher eit is at and decied what sort of planning domain to conquere
28.12.18 00:00:37<dmiles> for example it may seek revenge.. it may seek information etc
28.12.18 00:00:38<cyc> hey, Ihave an idea for a security domain - computer security
28.12.18 00:00:58<cyc> so I'll make a computer / home / food planner
28.12.18 00:01:13<cyc> *security planner
28.12.18 00:01:26<cyc> okay, also there was something else I wanted to run by you
28.12.18 00:01:31<cyc> can't remember, one sec
28.12.18 00:01:54<cyc> well first do you mind if I contact Mueller with some questions from time to time?
28.12.18 00:01:55<dmiles> i also think even the daily activities of FCSDA file orgnaizations to
28.12.18 00:02:03<cyc> cool
28.12.18 00:02:07<cyc> yeah that's a good one, ty
                 <dmiles> i think it is find to do
28.12.18 00:02:17<dmiles> i think it is fine to contaxt him,
28.12.18 00:02:31<cyc> what license is daydreamer?
28.12.18 00:02:48<cyc> ah GPL right on
28.12.18 00:03:03* dmiles was looking but glad yo found
28.12.18 00:03:36<cyc> okay well I don't have much more material to run by you, but I will try to implement some of those domains by tinkering with his example
28.12.18 00:03:53<cyc> I won't spend much time on it though since cyc integration is the priority
28.12.18 00:04:22<cyc> so with the right rule sets this thing could really help the cause of AI
28.12.18 00:04:33<dmiles> oh i think reading and leanring about daydreamer is very good use of time
28.12.18 00:05:06<dmiles> and domains that you will make daydreamer run in
28.12.18 00:05:07<cyc> oh I mean much time on tinkering, since reading is quicker method to learn, + we need the backend itnegration
28.12.18 00:05:12<cyc> ah okay
28.12.18 00:05:16<cyc> then I will have some fun with it
28.12.18 00:05:34<cyc> maybe I'll just start with PDDL domains and transliterate
28.12.18 00:05:44<cyc> brb
28.12.18 00:06:44<cyc> b
28.12.18 00:07:24<cyc> alright, well keep me posted, I'm going to review our game plan
28.12.18 01:24:48<dmiles> well dang .. looks liek when i did lose my hardrive the really awesome version of daydreame rtha ti started the work i was thinking you'd do is gone
28.12.18 01:25:20<dmiles> i dont miss that too much since all i got arround to is where you'd aindilis would be after you got it printing all the objects
28.12.18 01:25:47<cyc> for some reason I think I also got daydreamer or epilog or something to print everything
28.12.18 01:25:54<cyc> but I cannot do it again
28.12.18 01:25:57<cyc> so far
28.12.18 01:26:19<cyc> I asked on the lisp channel, I suppose I'll read more of it
28.12.18 01:26:26<dmiles> but part though i am disapointed about (that inpired me to write WAM-CL!) was when i started making all the Lisp Srructures that lisp made an assertion roiught into the KB
28.12.18 01:26:27<cyc> since the advice I tried didn't work
28.12.18 01:26:49<cyc> which KB?
28.12.18 01:27:22<dmiles> so that  native lisp structs could be marked to cyc-assert/retract/query their low level buines ot the a mirotheory
28.12.18 01:27:40<cyc> is it here? https://github.com/logicmoo/daydreamer
28.12.18 01:30:58<dmiles> their low level business
28.12.18 01:31:18<dmiles> oops grep/find must have put a finger on a disk wound
28.12.18 01:31:26<dmiles> ./c/Users/Administrator/Documents/My SlickEdit Config/vsdelta/D/workspace/phase02-jrtl/rcyc/daydreamer/gate_read_pr.lisp
                 <dmiles> ./c/Users/Administrator/Documents/My SlickEdit Config/vsdelta/D/workspace/phase02-jrtl/rcyc/daydreamer/gate_read_pr.lisp.vsdelta2
28.12.18 01:31:27<dmiles> ./c/Users/Administrator/Documents/My SlickEdit Config/vsdelta/D/workspace/phase02-jrtl/rcyc/gate_read_pr.cl
28.12.18 01:32:00<dmiles> nope i didnt commit due to the embarassment of my bad lisp
28.12.18 01:32:14<dmiles> since this was all about spying
28.12.18 01:32:32<dmiles> but! i do seem to have backup files
28.12.18 01:32:40<dmiles> my vsdeltas
28.12.18 01:32:56<cyc> so are we in the clear?
28.12.18 01:32:57<dmiles> so it should have my CYC hasks
28.12.18 01:33:05<cyc> great!
28.12.18 01:33:32<dmiles> it depends on hoiw much editing i did from vslick 
28.12.18 01:33:44<dmiles> mostly the cyc hacks i did ina  differnt IDE
28.12.18 01:33:55<dmiles> but it may have backed some thjngs up
28.12.18 01:34:14<dmiles> anyhow.. i jsut wanted to share this wonderfull trick that i might do again
28.12.18 01:34:21<dmiles> even if i cant find it
28.12.18 01:34:42<dmiles> each low level lisp object has named properties
28.12.18 01:35:19<dmiles> since i implment the structs from the JVM.. i can stroe them however i like
28.12.18 01:35:39<dmiles> including as predicates
28.12.18 01:36:16<cyc> I have some daydreamer code that came with wam_cl?
28.12.18 01:36:18<cyc> si that it?
28.12.18 01:36:20<dmiles> of course this would not be safe for some of the structs.. such as structs that are used in the KB browser
28.12.18 01:36:38<dmiles> as they would not resolve 
28.12.18 01:36:58<dmiles> it might be actualy
28.12.18 01:37:11<dmiles> since i started it the saem month
28.12.18 01:37:27<cyc> how could I tell?
28.12.18 01:37:30<cyc> I have several versions here
28.12.18 01:37:45<dmiles> like like sometime betweeen setp-oct of 2016
28.12.18 01:37:52<cyc> /media/root/FRDCSA-0315-BKUP/prologmud-20180917
28.12.18 01:38:11<dmiles> those might be them
28.12.18 01:38:31<cyc> k will scp it up to frdcsa.org/~andrewdo/dmiles/daydreamer-possible.tgz
28.12.18 01:38:32<cyc> one sec
28.12.18 01:38:38<dmiles> thx!
28.12.18 01:39:29<cyc> try now
28.12.18 01:41:02<cyc> hey I found a different one from jun 26 2016
28.12.18 01:41:33<dmiles> hrrm that might be right to since that work was what6 inspired me to update github in sept
28.12.18 01:41:38<dmiles> (update the LarKC code)
28.12.18 01:42:19<cyc> https://frdcsa.org/~andrewdo/dmiles/daydreamer-possible-2.tgz
28.12.18 01:42:47<cyc> another one from jan 12 2018
28.12.18 01:43:01<cyc> (the first is from feb 14 2018)
28.12.18 01:43:31<dmiles> sounds worthwhile for me to diff
28.12.18 01:44:12<cyc> https://frdcsa.org/~andrewdo/dmiles/daydreamer-possible-3.tgz
28.12.18 01:45:16<cyc> and one that was compiled on 0ct 20 2017
28.12.18 01:46:11<dmiles> oh aweoem that cyc.lisp file that is with them is the one that contains the code that untilizes my hacks
28.12.18 01:46:37<dmiles> ;; Starts AppdapterGUI
28.12.18 01:46:38<dmiles> ;; (UI-INSPECTOR)
                 <dmiles> ; (J-DESKTOP)
28.12.18 01:47:23<dmiles> i made a system to browse Daydreamer structs in this thingy i made that creates GUIs magically from JVM refs
28.12.18 01:47:53<dmiles> and then linked it inside of CYC
28.12.18 01:48:23<dmiles> ;; Starts Daydreamer
28.12.18 01:48:24<dmiles> (defun dd ()
                 <dmiles>   (Daydreamer)
                 <dmiles>  ;; (lisp-eval "(UI-INSPECT ^cx.3)")
                 <dmiles>   ;;(lisp-eval "(UI-INSPECT ^cx.30)")
                 <dmiles>   ;;(lisp-eval "(UI-INSPECT ^cx.50)")
                 <dmiles>   )
28.12.18 01:50:34<dmiles> so anyhow defiantely the daydreamer-possible
28.12.18 01:50:39<dmiles> so anyhow defiantely the daydreamer-possible3
28.12.18 01:50:46<dmiles> defiantely the 3
28.12.18 01:50:57<cyc> that has it all?
28.12.18 01:51:34<dmiles> has my daydreamer hacks
28.12.18 01:51:44<dmiles> and the cyc config files
28.12.18 01:51:55<cyc> `locate daydreamer | xargs grep -i ui-inspect` didn't show a def for ui-inspect
28.12.18 01:51:56<dmiles> jsut probably not my cyc code
28.12.18 01:52:03<cyc> what cyc-code?
28.12.18 01:52:31<dmiles> it would be .java files like a hacked  SubLMain.java
28.12.18 01:53:29<dmiles> and/or another *.java file someplace wth the word "UI-INSPECT" in it
28.12.18 01:53:58<dmiles> as UI-INSPECT gets defined from a compiled SubL file i compile to java
28.12.18 01:54:13<cyc> /media/root/Chris/cyc3/cyc-download/logicmoo.org/rootfilesys/cyc/cyc-lisp/platform/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
                 <cyc> /media/root/Chris/workhorseFrdcsaOrg-20180122/media/storage/cyc/prologmoo.com/devel/cyc-oldsys/cyc/java/com/cyc/tool/subl/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
                 <cyc> /media/root/Chris/workhorseFrdcsaOrg-20180122/media/storage/cyc/prologmoo.com/devel/cyc-oldsys/cyc/java/lib/tbrusseau/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
                 <cyc> /media/root/FRDCSA-0315-BKUP/ai.frdcsa.org/s3/repositories/git/CYC_JRTL_with_CommonLisp/platform/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:16<cyc> /media/root/FRDCSA-0315-BKUP/cyc/prologmoo.com/devel/cyc-oldsys/cyc/java/com/cyc/tool/subl/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:21<cyc> /media/root/FRDCSA-0315-BKUP/cyc/prologmoo.com/devel/cyc-oldsys/cyc/java/lib/tbrusseau/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:24<cyc> /media/root/Meredith/cyc3/cyc-download/logicmoo.org/rootfilesys/cyc/cyc-lisp/platform/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:27<cyc> /media/root/Meredith/s3/cyc/prologmoo.com/devel/cyc-oldsys/cyc/java/com/cyc/tool/subl/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:30<cyc> /media/root/Meredith/s3/cyc/prologmoo.com/devel/cyc-oldsys/cyc/java/lib/tbrusseau/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:34<cyc> /media/root/Meredith/s3/repositories/git/CYC_JRTL_with_CommonLisp/platform/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
                 <cyc> /media/root/s3/cyc/prologmoo.com/devel/cyc-oldsys/cyc/java/com/cyc/tool/subl/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:37<cyc> /media/root/s3/cyc/prologmoo.com/devel/cyc-oldsys/cyc/java/lib/tbrusseau/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:40<cyc> /media/root/s3/repositories/git/CYC_JRTL_with_CommonLisp/platform/src/com/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLMain.java
28.12.18 01:54:44<cyc> any of these?
28.12.18 01:55:16<dmiles> could be some of those 
28.12.18 01:55:21<cyc> k
28.12.18 01:55:29<dmiles> though i think i have all those localy here
28.12.18 01:55:45<cyc> ah k
28.12.18 01:56:06<dmiles> i'll grep my *.java files for the UI-INSPECT
28.12.18 01:56:15<cyc> locate subLisp | grep -E '\.java$' | xargs grep -i UI-INSPECT
28.12.18 01:56:29<dmiles> (that woudl even been in SubLMAin.. but the SubLMain i need will be in same director)
28.12.18 01:56:36<dmiles> ausome
28.12.18 01:57:05<cyc> damn
28.12.18 01:57:30<dmiles> root@gitlab:/mnt# grep -i UI-INSPECT . -r --include="*.java"
28.12.18 01:57:36<dmiles> i am runnihng that to
28.12.18 01:58:11<cyc> I am getting a new hard drive later today
28.12.18 01:58:15<cyc> 8TB
28.12.18 01:58:32<cyc> I lost 8 drives this year I'm sure you've heard me say
28.12.18 01:58:41<dmiles> :( yeah
28.12.18 01:59:00<cyc> do you know how to prevent data loss?
28.12.18 01:59:14<dmiles> i kinda feel like much of the backinbg up you and i did was post mortem to losing the code we are looking for
28.12.18 01:59:15<cyc> I was thinking of getting a large nas
28.12.18 01:59:27<cyc> srry, meaning?
28.12.18 01:59:47<dmiles> one year i lost a windows drive that i had been doing my linux devel on
28.12.18 02:00:02<dmiles> and you and i discuissed how life sucked and we lose everything to suck ass disks
28.12.18 02:00:19<dmiles> like a year or two ago
28.12.18 02:00:20<cyc> ah okay sorry I just understood your 'post mortem' - you meant the backing up was after losing the code
28.12.18 02:00:24<cyc> yeah
28.12.18 02:00:42<dmiles> so we started scp-ing to each otehr right after that
28.12.18 02:00:59<cyc> yeah, we still need to do more though
28.12.18 02:01:08<cyc> I'm trying to write a prolog based system that tracks copies of data
28.12.18 02:01:13<cyc> rsync git cp etc
28.12.18 02:01:23<cyc> git is the easiest
28.12.18 02:01:38<cyc> I havea  1 TB SSD drive now
28.12.18 02:01:42<cyc> to try to prevent data loss
28.12.18 02:01:51<cyc> I have a lot of important stuff on it
28.12.18 02:02:06<cyc> and I have several backup HDs and USB Keys for my main stuff
28.12.18 02:02:13<dmiles> i dont know really how to prevent dataloss other than some backup routine
28.12.18 02:02:20<cyc> k
28.12.18 02:02:35<dmiles> yet all my old backup dvds are rusted out 
28.12.18 02:02:41<cyc> :(
28.12.18 02:02:44<dmiles> so that never worked :)
28.12.18 02:02:51<cyc> did they get wet?
28.12.18 02:03:01<dmiles> one day we will have tech to recover them maybe .. who knows
28.12.18 02:03:09<dmiles> nope .. jsut time
28.12.18 02:03:29<dmiles> the metal oxidizes after a decade or so
28.12.18 02:03:37<cyc> okay well is there anything of yours I should back up of yours now?
28.12.18 02:03:55<dmiles> (some are more than a decade)
28.12.18 02:04:11<cyc> you know I have a git server
28.12.18 02:04:18<cyc> you could backup to that
28.12.18 02:04:56<dmiles> as we kepe making bacxkups and things more and more is backed up that is duplicated
28.12.18 02:05:22<cyc> yeah, that's the thing the prolog code (KBFS (knowledge based file system)) is supposed to handle
28.12.18 02:05:29<cyc> tracking duplications
28.12.18 02:05:33<dmiles> so i have to actualyl find the stuff that is not backed up 20 times by me already 
28.12.18 02:05:41<cyc> k
28.12.18 02:05:45<cyc> yeah same here
28.12.18 02:06:03<cyc> it's 2018 and there's no solution to this?
28.12.18 02:06:31<dmiles> wuposedly that is why we used compressed file versioning so dupes dont bug us
28.12.18 02:06:39<dmiles> (like git)
28.12.18 02:06:53<dmiles> but still right
28.12.18 02:07:30<cyc> okay well maybe I'll work a bit on that
28.12.18 02:07:33<cyc> KBFS
28.12.18 02:07:58<dmiles> you igth to diff the daydreamer3 to what you have and see iof there is anyhting you can use
28.12.18 02:08:05<cyc> k
28.12.18 02:08:11<dmiles> daydreamer-possible-3
28.12.18 02:08:44<dmiles> i asctualyl hacked my internal ABCL to allow... 
28.12.18 02:08:56<dmiles> (setq *lisp-file-type* "cl")
28.12.18 02:09:05<dmiles> so i would not have to rename the files to .lisp
28.12.18 02:09:27<cyc> k
28.12.18 02:09:42<dmiles> (jsut letting you know that they are not renamed)
28.12.18 02:09:58<cyc> k
28.12.18 02:12:05<cyc> I have doit.lsp and hash-dollar.lisp
28.12.18 02:14:09<cyc> see https://frdcsa.org/~andrewdo/dmiles/cyc-jrtl-with-commonlisp-possible.tgz
28.12.18 02:14:46<dmiles> oh nice!
28.12.18 02:14:59<cyc> is this anything?
28.12.18 02:15:06<cyc> it had doit.lsp with the right dir name
28.12.18 02:15:27<dmiles> well i am looking for "a" cyc-jrtl-with-commonlisp :)
28.12.18 02:15:35<cyc> :)
28.12.18 02:15:37<dmiles> a particualr one i have 5 differnt versions
28.12.18 02:15:55<dmiles> but not the 6th that i am looking for so far
28.12.18 02:15:57<cyc> dec 2016
28.12.18 02:16:39<dmiles> ah.. yes it is unique if iut has hash-dollar.lisp
28.12.18 02:16:55<dmiles> hash-dollar.lisp was a chack i make to create ew constants 
28.12.18 02:16:58<dmiles> hack
28.12.18 02:17:07<cyc> I have that in e2c
28.12.18 02:17:13<cyc> hash-dollar.lisp
28.12.18 02:17:24<dmiles> yeah.. i amy or may not have compied that over 
28.12.18 02:17:26<cyc> packs_xtra logicmoo_nlu
28.12.18 02:17:36<dmiles> yeha i created it orignaly in 2003
28.12.18 02:18:51<dmiles> #$fooBar does a search in the kb for "FooBar" etc .. if i cant find what you meant it creates a new one
28.12.18 02:19:23<dmiles> (this is at the level of SubL/Lisp readers)
28.12.18 02:19:24<cyc> nice
28.12.18 02:19:41<dmiles> ohg also if a constant wasa renamed.. it also checks fo rold-constant-names
28.12.18 02:19:55<cyc> you know I might have some of this stuff in one of my prologmud vms
28.12.18 02:20:00<cyc> going to look for one around oct 2016
28.12.18 02:20:02<cyc> and boot it
28.12.18 02:20:05<dmiles> at least some versions between today and 2003 did that :P
28.12.18 02:22:23<dmiles> ok that cyc-jrtl-with-commonlisp looks to be what i uploaded to gothub
28.12.18 02:22:45<dmiles> still we might et lucky .. i am glad we found the lisp code!
28.12.18 02:23:08<cyc> did you need the hash-dollar.lisp?
28.12.18 02:23:33<dmiles> where exactly was it?
28.12.18 02:23:41<dmiles> in e2c or?
28.12.18 02:23:47<cyc> /media/root/Meredith/lmw/logicmoo_workspace/packs_xtra/logicmoo_nlu/prolog/e2c
28.12.18 02:23:53<dmiles> ah i have that one
28.12.18 02:23:56<cyc> k
28.12.18 02:24:27<dmiles> i was hopping it shown up in a cyc-jrtl-with-commonlisp since that would be evidence we found a good one
28.12.18 02:24:28<cyc> I'll have to wait until 3 am your time to start up the server
28.12.18 02:24:46<dmiles> (thought he good one wont nesc have that in it)
28.12.18 02:24:53<dmiles> (though the good one wont nesc have that in it)
28.12.18 02:25:10<cyc> I don't want to wake M's mom when the server makes a loud start up noise
28.12.18 02:25:12<dmiles> (jsut one that had it would be evidence i bothered to copy the file there)
28.12.18 02:29:02<dmiles> Administrator@i74930k /cygdrive/d
                 <dmiles> $ ls workspace/phase02-jrtl/
                 <dmiles> '~cycjava-platform'   bin-eclipse   ext           itsimple   logs             OWLS2PDDL   platform-deps   robot    wpattern-javaff-gui
                 <dmiles>  AppdapterGUI         CycJava       itportfolio   JavaFF     old-ansi-tests   platform    Protege         SWIJNI
28.12.18 02:29:18<dmiles> om i found it
28.12.18 02:29:32<cyc> wonderful!
28.12.18 02:31:13<aindilis> I also have a planlogic vm from around jun 2016
28.12.18 02:31:20<aindilis> it may contain some stuff
28.12.18 02:31:56<dmiles> might.. what sort of shocking me is this was on my windwos drive and not my linux dirves
28.12.18 02:32:29<dmiles> but i remember having to work from windows for a few weeks
28.12.18 02:33:52<dmiles> me is grepping for UN-INSPECT there
28.12.18 02:34:05<dmiles> UI-INSPECT*
28.12.18 02:34:41<dmiles> of corese that drive is huge (it contains Bina48v1)
28.12.18 02:35:51<dmiles> UI-INSPECT wasnt there
28.12.18 02:36:28<dmiles> but linux drive i am checking has another hour of seachhing probably
28.12.18 02:38:09<aindilis> I have another server which has some data
28.12.18 02:38:19<aindilis> actually two others, but I'm kinda winded now
28.12.18 02:38:53<aindilis> I'm going to save this convo and move it into my searches data section
28.12.18 02:39:01<dmiles> well write down perhaps where they are.. i think i should do some more hard searching here
28.12.18 02:39:03<aindilis> I keep a list of active searches aka searchlores fravia
28.12.18 02:39:22<aindilis> *ala
28.12.18 02:39:54<aindilis> oh one is on justin.frdcsa.org and the other is node.frdcsa.org - they might outright contain files or more likely have it on a period VM
28.12.18 02:40:59<dmiles> yeah i was using justin.frdcsa.org before i just dont remember the timeline
28.12.18 02:49:13<aindilis> I think I'll write a deduplication algorithm
28.12.18 02:49:51<aindilis> I'll start with just a list of filenames, then I'll iterate to add sizes and other file::stat info
28.12.18 02:50:15<aindilis> I'll compute a directory similarity metric
28.12.18 03:07:32<aindilis> well I have the start of such a system now
28.12.18 03:07:45<aindilis> it tries to avoid n^2
28.12.18 03:13:45<dmiles> http://logicmoo.org/html/papers/subl-larck.jar
28.12.18 03:13:54<dmiles> oops http://logicmoo.org/html/papers/subl-larkc.jar
28.12.18 03:14:17<dmiles> i havent located the sourcecode for it yet :P
28.12.18 03:14:29<dmiles> but i am going to try it and see if it works
28.12.18 03:14:32<aindilis> I don't seem to have access to it
28.12.18 03:14:36<aindilis> k cool
28.12.18 03:20:57<aindilis> one neat thing is I have dnfct which will allow me to reason about different drives failing, what the restore plan is
28.12.18 03:21:54<aindilis> what we probably really need is just to use something like tao-lafs
28.12.18 03:22:11<aindilis> https://tahoe-lafs.org/trac/tahoe-lafs
28.12.18 03:34:08<dmiles> yes indeedee
28.12.18 03:50:10<dmiles> oh wow i found the code!
28.12.18 03:50:20<aindilis> NICE!
28.12.18 03:50:26<dmiles> it even has a system that lets us save and load cyc immages
28.12.18 03:50:32<aindilis> wow
28.12.18 03:50:34<dmiles> i forgot i wront that
28.12.18 03:50:45<aindilis> can I download it for safekeeping?
28.12.18 03:50:56<aindilis> I've been trying to install tahoe-lafs
28.12.18 03:52:02<dmiles> https://pastebin.com/NF9TcxRw
28.12.18 03:52:40<dmiles> oops i double pasted
28.12.18 03:52:54<dmiles> i am going to prepe the whole source thing to be saved
28.12.18 03:53:03<aindilis> awesome, so glad you found it
28.12.18 03:53:35<dmiles> i relaized after pasting it required quite a bit of helper clases
28.12.18 03:54:56<aindilis> well so what code exactly did you find?
28.12.18 03:55:08<aindilis> is it UI-INSPECT?
28.12.18 03:55:24<dmiles> it looks like the prelinminary stuff i was doing to support allowing daydreamer stucts to get into CYC
28.12.18 03:55:31<aindilis> great
28.12.18 03:55:39<dmiles> it has UI-Inpect as well
28.12.18 03:55:43<aindilis> grea
28.12.18 03:55:44<aindilis> *t
28.12.18 03:56:44<dmiles> its based vaguely on http://beanbowl.sourceforge.net/
28.12.18 03:58:25<dmiles> well i replaced the UI of it with the one i wrote for BINA48 at RoboKind where it deduces the best version of a CYC editor
28.12.18 03:59:00<dmiles> so if you are looking a a cyc constant that is a #$Dog it adds properies liek 4 legs
28.12.18 03:59:21<dmiles> and lets you alter the number ofr legs that #$Snoopy has
28.12.18 03:59:50<dmiles> with an up/down ticker arrow . hehe
28.12.18 04:00:47<dmiles> it was one of the things Lenat would only dream of.. but will only get if he opensources CYC
28.12.18 04:01:51<aindilis> wow that would be intersting
28.12.18 04:04:11<aindilis> does this have anything relating to dumping Daydreamer data structures without these: '...'
28.12.18 04:04:49<dmiles> well this version puts them realble to prolog 
28.12.18 04:04:56<dmiles> readable
28.12.18 04:05:01<aindilis> cool
28.12.18 04:05:09<dmiles> as it does with every SubLStruct
28.12.18 04:05:36<dmiles> it was jsut somewhat overwelming sinc ei was going bottem up
28.12.18 04:05:48<dmiles> whereas what we talked about is more top-down
28.12.18 04:06:10<aindilis> k
28.12.18 04:06:32<dmiles> well the daydreamer code how i would it is i have windiff.. and i jsut open the two direcoties side by side 
28.12.18 04:06:42<dmiles> and then use my code that remobved the "..."
28.12.18 04:07:08<dmiles> windiff = a diffing tool
28.12.18 04:07:44<dmiles> since it would be much to talk one thrue siunce there was 30+ edits of several files
28.12.18 04:07:51<dmiles> jsut to remove the "..."
28.12.18 04:08:27<dmiles> i convert the OBs the CXs etc into S-Expressions
28.12.18 04:09:30<dmiles> i thin i can commit those changes to logicmoo/daydreamer 
28.12.18 04:09:49<aindilis> :)
28.12.18 04:21:08<dmiles> https://github.com/logicmoo/daydreamer
28.12.18 04:23:29<dmiles> https://github.com/eriktmueller/daydreamer/compare/master...logicmoo:master  
28.12.18 04:23:35<dmiles> lets oif the edits
28.12.18 04:23:46<dmiles> to see some of the edits
28.12.18 04:24:06<aindilis> I get an error running that
28.12.18 04:24:16<aindilis> ;;   Loading file /var/lib/myfrdcsas/versions/myfrdcsa-1.0/collaborative/git/daydreamer/dd_gen.fas ...
                 <aindilis> *** - #:|37 38 (SETQ *NO-TOP-GEN-LST* (LIST ^RPROX ^CAUSAL-LINK ...))-5|: variable |^RPROX| has no value
                 <aindilis>  
28.12.18 04:24:55<dmiles> i registeed a special readwer macxro
28.12.18 04:24:59<dmiles> ^
28.12.18 04:26:15<dmiles> i sart out with  (load "dd")
28.12.18 04:26:24<aindilis> oh right, not suppose to compile
28.12.18 04:26:25<aindilis> srry
28.12.18 04:28:26<aindilis> this is great, is it taking longer to run because it's not compiled?
28.12.18 04:28:36<aindilis> or because of the extra work?
28.12.18 04:28:45<aindilis> this is brilliant
28.12.18 04:28:57<dmiles> it should only take no more than 3x when not compiled
28.12.18 04:29:26<aindilis> did you convert the frames into CycL like statements?
28.12.18 04:29:29<dmiles> (if i recall on clisp)
28.12.18 04:29:50<aindilis> that looks Cyclish (SUCCEEDED-GOAL (REVENGE ME MOVIE-STAR1 (FAILED-GOAL (LOVERS ME MOVIE-STAR1))) ^OB.3433)
28.12.18 04:30:17<aindilis> okay and what is the next step from here?
28.12.18 04:30:25<aindilis> thanks tons for finding that
28.12.18 04:30:40<aindilis> I was really having trouble with it
28.12.18 04:30:53<aindilis> it = getting the ... to go away etc
28.12.18 04:31:16<dmiles> i was going to but then ended up hacking the CYC kernel to read the structs and property objects.. but my step i feel was wrong headed to go the route i was going.. so that is why i suggested really going thru and dediceding what is assert/retracted
28.12.18 04:31:56<aindilis> dediceding = deducing || deciding?
28.12.18 04:32:04<dmiles> deciding
28.12.18 04:32:07<aindilis> k
28.12.18 04:32:31<aindilis> and the point is to leverage the world knowledge in CYC, right?
28.12.18 04:32:37<aindilis> plus CYcL infernece
28.12.18 04:33:21<dmiles> meaning that (#$resultOfGoal ((#$ActFn "REVENGE") #$Self  ... MOVIE-STAR1 (FAILED-GOAL (LOVERS ME MOVIE-STAR1)))   #$Success)
28.12.18 04:33:23<aindilis> now are we going to have this running in LarKC common lisp or in CLISP
28.12.18 04:34:37<dmiles>  LarKC common lisp but now tha ti found the code.. i am trying to decide how much to leave it the way it was or work on it more
28.12.18 04:35:04<dmiles> found the *real* LarKC common lisp
28.12.18 04:35:35<aindilis> that's awesome
28.12.18 04:35:53<dmiles> like i trying to decide if i patch whats on Github.. or somehow make this less crazy
28.12.18 04:36:04<dmiles> since this LarKC common lisp even laods SWI-PRolgo and has a GUI
28.12.18 04:36:31<aindilis> did you copy it already to multipel of your disks for safety?
28.12.18 04:36:57<dmiles> Warning: /mnt/dddd/workspace/prologmud_sample/runtime/daydream.pl:327:
                 <dmiles>         Goal (directive) failed: user:jpl
28.12.18 04:37:12<dmiles> the GUI is doing..
28.12.18 04:37:13<dmiles> ?- Warning: [Thread startDmiles] Thread running "startDmiles" died on exception: Java exception: java.lang.NoClassDefFoundError: com/sun/tools/attach/AttachNotSupportedExce ption
28.12.18 04:37:54<dmiles> the problem is the directory is liek 8gb
28.12.18 04:38:37<dmiles> so i might have to bakc up jsut the code whoich is even 1gb
28.12.18 04:38:50<dmiles> since some of it is mine and Lenats
28.12.18 04:39:07<dmiles> (30 years worth of coding)
28.12.18 04:40:24<aindilis> you'll want to back that up
28.12.18 04:40:35<aindilis> do you have a bd-r?
28.12.18 04:41:31<aindilis> I don't know if the UniLang approach is still relevant but the folks on #lisp just gave me enough pointers to get that approach to work
28.12.18 04:42:11<dmiles> i sorta want to suggest you keep using CLisp for now 
28.12.18 04:42:18<dmiles> bd-r ?
28.12.18 04:42:25<aindilis> blu-ray readwritable
28.12.18 04:42:52<dmiles> oh funny i have had no cdrom support  for at least a decade
28.12.18 04:43:06<dmiles> someone wanted to give me a movie for xmas
28.12.18 04:43:21<aindilis> :)
28.12.18 04:43:31<dmiles> 157M    ./AppdapterGUI
28.12.18 04:43:38<dmiles> 276M    ./CycJava
28.12.18 04:43:52<dmiles> 322M    ./platform
28.12.18 04:43:53<dmiles> 148M    ./platform-deps
28.12.18 04:44:13<dmiles> i think i cna back it up
28.12.18 04:44:35<aindilis> yeah you don't want to be losing that
28.12.18 04:50:20<aindilis> well when you get a chance I'd like to hear your thoughts on where to go from here, I'm a little confused.
28.12.18 04:50:32<aindilis> going to reread the spec doc for larkc-cl
28.12.18 04:51:23<dmiles> well the work for  larkc-cl looks liek it is a 2 day thing .. but tommorow i have to drive to oregonj and might be there a day
28.12.18 04:51:38<aindilis> oh no worries
28.12.18 04:51:45<aindilis> I'm just confused about what I'm supposed to do
28.12.18 04:51:57<aindilis> but I can wait if that's the plan
28.12.18 04:51:58<dmiles> so i am thinkikng since you got some ideas for UniLanfg lisp it might make sense to do in clisp
28.12.18 04:52:20<aindilis> well you said that the java interface takes a 0.07 hit each query or something, right?
28.12.18 04:52:27<aindilis> 0.07 sec
28.12.18 04:52:33<dmiles> also i thinking yeserday that you pretty much are goign ot have to decide wha to assert and querty
28.12.18 04:52:54<aindilis> okay well I have an idea
28.12.18 04:53:03<dmiles> and the larkc-cl is not going to make that any easier (if anyhting harder)
28.12.18 04:53:06<aindilis> this is really crappy, but maybe I'll just use expect and read to wrap it
28.12.18 04:53:34<aindilis> so like I'll parse out it's assertions and put them in the KB
28.12.18 04:53:38<dmiles> harder due to that you have to wait 5 mihnutes every time you make a code edit
28.12.18 04:53:39<aindilis> via System::CYC
28.12.18 04:53:44<aindilis> oh right
28.12.18 04:53:56<dmiles> as you have to restart the cyc isntance
28.12.18 04:54:20<aindilis> and then when it queries the KB, I''ll print them in
28.12.18 04:54:22<aindilis> using expect
28.12.18 04:54:24<aindilis> to the terminal
28.12.18 04:54:29<dmiles> vs over the remote you can prim the KE to the preds you just made
28.12.18 04:54:49<aindilis> yeah, I'm sold, i'm just trying to figure out hte best way to do i
28.12.18 04:54:50<aindilis> t
28.12.18 04:54:57<aindilis> https://clisp.sourceforge.io/impnotes/shell.html
28.12.18 04:55:08<aindilis> that's it
28.12.18 04:55:12<aindilis> I'll use that
28.12.18 04:56:12<aindilis> does CYC ever need to initiate to daydreamer?
28.12.18 04:56:44<aindilis> or can I just do a shell-command-to-string from within daydreamer, assert or query the KB, and read the result in as the output of the shell command?
28.12.18 04:57:14<aindilis> I suppose we could start by just doing the shell-command-to-string
28.12.18 04:57:29<aindilis> I know this is really ugly but I'm just not very expert with common lisp
28.12.18 04:58:47*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 240 seconds
28.12.18 05:03:38*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
28.12.18 05:03:45<dmiles> cyc: (+ 1 1)
28.12.18 05:03:46<cyc> "2"
28.12.18 05:03:57<aindilis> hey
28.12.18 05:04:02<dmiles> sorry machine was overloaded and coulnt type back
28.12.18 05:04:06<aindilis> np
28.12.18 05:04:18<dmiles> does CYC ever need to initiate to daydreamer?
28.12.18 05:04:23<dmiles> right now it doenst
28.12.18 05:04:35<dmiles> i can write in 5 lines in clisp a way to assert to cyc
28.12.18 05:04:44<aindilis> really?
28.12.18 05:04:45<aindilis> how?
28.12.18 05:04:48<dmiles> cyc-query takes abpout 10 lines
28.12.18 05:05:21<aindilis> oh through 3602
28.12.18 05:06:18<aindilis> alright well I'll have daydreamer output its assertions to a file and begin encoding them into CycL
28.12.18 05:06:25<dmiles> yes.. you (with-open-socket ("host" 3620 *istrem* *outstream*  )  (print "cyc-asert.. ")))
28.12.18 05:06:51<dmiles> 3602
28.12.18 05:07:20<dmiles> you just need to call (read *istrem*) twice and close the socket
28.12.18 05:07:38<dmiles> first reteunr is 200 or 500 
28.12.18 05:07:57<dmiles> next is the T or NIL
28.12.18 05:08:14<dmiles> but yeah to a file is fine to
28.12.18 05:09:01<dmiles> i wouldnt worry about the cyc-query until you got the asserts orking
28.12.18 05:09:38<aindilis> sounds good.  alrighty, I hope you have a safe trip to Oregon, I'll try to have some progress to show you on Monday
28.12.18 05:09:53<dmiles>  the stage after this is to make sure what the object assert/query are the same things that they internally do
28.12.18 05:10:08<aindilis> but defniitely now that I have the full assertions / queries this will be quicker
28.12.18 05:10:13<aindilis> thanks for finding that
28.12.18 05:11:50<dmiles> yw!
28.12.18 05:12:43<dmiles> thanks for looking inmto this .. this is really the AI/AGI work i wish i was doing more of even :)
28.12.18 05:13:08<aindilis> yw! :)
28.12.18 05:13:18<aindilis> it will be nice to make some progress on AGI
28.12.18 05:13:26<aindilis> I mean for me, since I haven't 
28.12.18 05:13:32<dmiles> though nothing stops me from it .. just i always find something else that is more infrastrcutual
28.12.18 05:13:53<dmiles> (just like you do sometimes i bet)
28.12.18 05:13:57<aindilis> yup
28.12.18 05:14:19<aindilis> although with constantly lsoing data I'm thinking about racing towards the finish line
28.12.18 05:14:45<aindilis> it's hard since I have a lot of data storage requirements
28.12.18 05:14:55<aindilis> for all the software I download
28.12.18 05:15:14<aindilis> okay nn!
28.12.18 05:19:18<dmiles> gnight!
28.12.18 05:19:36<dmiles> thiough i am up working for a couple more hours
28.12.18 05:23:57<dmiles> (on larkc-cl)
28.12.18 05:24:04<aindilis> cool
28.12.18 06:00:12*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Remote host closed the connection
28.12.18 06:16:46*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, PrologMUD: see http://prologmoo.com/)
28.12.18 06:16:51<dmiles> cyc: (+ 1 1)
28.12.18 06:16:52<cyc> "2"
28.12.18 08:02:45*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
28.12.18 08:02:51<dmiles> cyc: (+ 1 1)
28.12.18 08:02:52<cyc> "2"
28.12.18 11:51:47*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Ping timeout: 240 seconds
28.12.18 12:19:38*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 272 seconds
28.12.18 12:30:15*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
28.12.18 12:30:20<dmiles> cyc: (+ 1 1)
28.12.18 12:30:21<cyc> "2"
28.12.18 21:26:40<dmiles> aindilis: my cat walking is wobbly sdo i decide to pospone my trip to oregon until monday
28.12.18 21:27:07<dmiles> so tonight i am working of the LarKC
28.12.18 21:27:16<dmiles> the LarKC-CL
28.12.18 22:03:12<cyc> cool
28.12.18 22:03:32<cyc> I mean, sorry about the cat, I hope she is doing better, but cool that you'll be working on LarKC-CL
28.12.18 22:03:49<cyc> I wrote a parser (in Perl) for the output of DAYDREAMER
28.12.18 22:05:11<cyc> I haven't added the sigils or the ddPredFn stuff yet, but it looks like this ['cyc-assert',['KNOW','CHRIS','BAR1-LOC'],['ddMicrotheoryFn','CX.5']]
28.12.18 22:06:04<dmiles> looks good
28.12.18 22:06:50<dmiles> (right i get you, you still going to wrap the DD Terms with DdPredFn DdObjectFn
28.12.18 22:07:29<dmiles> )
28.12.18 22:08:41<dmiles> anoher important aspect.. not that you didnt already know this.. is before daydreamer runs it sets up a ton of data objects of what it is going to use for processing
28.12.18 22:08:48<dmiles> such as the rules and stuff
28.12.18 22:09:11<dmiles> it might be good before it starts planing to have it list out all the reules it will use
28.12.18 22:10:14<dmiles> as later on these are going to be loaded and stored in CYC
28.12.18 22:10:33<dmiles> going to be loaded from from CYC 
28.12.18 22:10:59<cyc> k, good idea
28.12.18 22:11:35<cyc> I was hoping to infer rules from CYC's rules 
28.12.18 22:11:38<cyc> as well
28.12.18 22:11:39<dmiles> the reason being  (here inlies the *power* of CYC now) is that we will have CycL rules that will annotate and improve the 
28.12.18 22:11:58<dmiles> yep you got it.. that is where i was going with that
28.12.18 22:13:29<dmiles> part of this excersize it learning what DD thinks is usefull KE (KR) and then doing evne better using CYC's rules
28.12.18 22:14:39<cyc> yeah. so I've just started reading the book some more
28.12.18 22:15:01<cyc> I want to get to the point where I understand most of the data structures and such
28.12.18 22:15:29<dmiles> yeah treuly getting it from reading the book is sane :)  
28.12.18 22:16:30<dmiles> trying to do it fully via reverse engineering would not been a very good idea
28.12.18 22:17:16<cyc> I'll have as my goal to get to page 50 for now
28.12.18 22:19:32<dmiles> perfect goal
28.12.18 23:23:47*** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 240 seconds
28.12.18 23:26:00*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
28.12.18 23:26:05<dmiles> cyc: (+ 1 1)
28.12.18 23:36:31*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
                 *** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
28.12.18 23:40:58*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
28.12.18 23:41:03<dmiles> cyc: (+ 1 1)
29.12.18 01:12:34<aindilis> dmiles: one perhaps possible method to do metaplanning and imperfect information in PDDL metric planners could be to use + and * to create a goedel representation
29.12.18 01:38:16<dmiles> most of the time when i am in a metaplanning context i am thinkg about it as planning what tool is doing to be doing the plan making.. for isntnace inference relizes when i am about to plan with imperfect information and help it chose the right planner 
29.12.18 01:39:34<aindilis> cool
                 <dmiles> (such as a planner that uses statistical means)
                 <aindilis> we should collaborate on a prolog version of verber that can export to a wide variety of planners
                 <aindilis> using ItSimple as a possible starting point
29.12.18 01:39:39<aindilis> on p.g. 35 right now - got side tracked but working through it again
29.12.18 01:40:08<dmiles> *nod* yeah much of my prolog code right now purpose is to convert between  EC/PDDL/OCL
29.12.18 01:40:22<aindilis> sweet
29.12.18 01:40:36<dmiles> PDDL<->OCL mostly
29.12.18 01:41:26<dmiles>  i found there are aobut 3 ECs and i convert between at least two of them EC1<->EC2
29.12.18 01:41:30<aindilis> OCL = object constraint language?
29.12.18 01:42:47<dmiles> OCL = http://eprints.hud.ac.uk/id/eprint/495/1/McCluskeyPlanning.pdf
29.12.18 01:43:27<dmiles>  OCL (object-centred language)
29.12.18 01:44:07<aindilis> ty
29.12.18 01:44:38<aindilis> I'm debating trying to hook up AM to FLP
29.12.18 01:44:46<aindilis> am-utexas
29.12.18 01:45:21<dmiles> https://www.google.com/search?q=gipo+ocl&oq=gipo+ocl+&aqs=chrome..69i57.3378j1j4&sourceid=chrome&ie=UTF-8
29.12.18 01:47:50<dmiles> is AM in CLISP?
29.12.18 01:48:37<aindilis> Prolog
29.12.18 01:48:42<dmiles> ah right on
29.12.18 01:48:58<dmiles> btw the LarKC-CL code i am working on has soo much PRolog support
29.12.18 01:49:06<dmiles> i forgot how much i put in
29.12.18 01:49:19<aindilis> :)
29.12.18 01:49:23<dmiles> i been fixing compiler errors for a couple hours now
29.12.18 01:49:33<dmiles> each JVM has its pros/cons
29.12.18 01:49:40<dmiles> (sorry runtime errors)
29.12.18 01:49:42<aindilis> is there a #+clisp
29.12.18 01:49:47<aindilis> mechanism for java
29.12.18 01:49:48<aindilis> ?
29.12.18 01:50:01<dmiles> not really
29.12.18 01:50:16<dmiles> the java version renamed and changed most of their classes 
29.12.18 01:50:24<dmiles> each java vcersion
29.12.18 01:50:30<dmiles> i wrote this for 1.7
29.12.18 01:50:44<aindilis> ah
                 <dmiles> but now the world is using 11
29.12.18 01:50:51<dmiles> 1.11
29.12.18 01:51:16<dmiles> 1.8 the debugger code stops working
29.12.18 01:51:22<aindilis> well let me know what password you want on ssh -p 2222 dmiles@central.frdcsa.org
29.12.18 01:51:24<dmiles> 1.7 the UI code stops
29.12.18 01:51:38<aindilis> or do you have an ssh key I could give you
29.12.18 01:51:46<dmiles> ah and they are not even backwards compantble anymore
29.12.18 01:51:48<aindilis> *could set up
29.12.18 01:52:04<aindilis> well I'm sorry for your troubles on this
29.12.18 01:52:22<aindilis> maybe we can arraign more coders onto the project
29.12.18 01:52:52<dmiles> oh i am used to iut.. a few more hours and all will be good
29.12.18 01:53:15<aindilis> I saw you discussing with anniepoo about PTRANS MTRANS etc
29.12.18 01:54:35<dmiles> i think i will jusut fix the GUI in 1.7 (the only thing that borke it was the rewrititng for 1.8)
29.12.18 01:55:15<aindilis> you mean set up the GUI for use in 1.7?
29.12.18 01:55:19<aindilis> or 1.11?
29.12.18 01:55:23<dmiles> yeah she gettign into CBR
29.12.18 01:55:27<aindilis> cool
29.12.18 01:55:43<dmiles> oh 1.11 they just removed too many usefull features of the JVM
29.12.18 01:55:57<dmiles> such as step debugging
29.12.18 01:56:02<aindilis> well jbalint has a java debugger
29.12.18 01:56:05<dmiles> they the GBD interface
29.12.18 01:56:10<aindilis> ah
29.12.18 01:56:14<aindilis> he wrote one
29.12.18 01:56:15<dmiles> thru the GBD interface
29.12.18 01:56:21<dmiles> not surprised 
29.12.18 01:56:24<aindilis> let me check if it's up to date
29.12.18 01:57:07<dmiles> alot of the cyc code i can comment out
29.12.18 01:57:19<dmiles> that uses native debugging
29.12.18 01:58:14<aindilis> he hasn't pushed in 2 years
29.12.18 01:58:16<dmiles> used to be that you could install breakpoints remotely
29.12.18 01:58:20<aindilis> https://github.com/jbalint/yellow-tree
29.12.18 02:02:14<dmiles> yep that is exacltly what this is for
29.12.18 02:02:24<dmiles> handling breakpoints set in lisp 
29.12.18 02:02:31<dmiles> (he did the ones in Lau)
29.12.18 02:02:37<dmiles> (he did the ones in Lua)
29.12.18 02:02:40<aindilis> cool
29.12.18 02:02:44<dmiles> but the same API
29.12.18 02:03:39<dmiles> ah he had to write it in C to workaround all the missing code 
29.12.18 02:04:01<dmiles> (well he didnt have to miss the missing code :P)
29.12.18 02:04:15<aindilis> :)
29.12.18 02:05:02<dmiles> i prety much will probly have to cvomment it out until i have time to try to do what he did
29.12.18 02:05:13<dmiles> (try ot use his code)
29.12.18 02:05:43<dmiles> i dunno i still want a working version so i might have to stick with 1.7
29.12.18 02:06:55<dmiles> teh errors i am gettign is from runing in backwards compatiblity mode to 1.7.. i just have to isntall a 1.7 VM
29.12.18 02:08:38<aindilis> Apparently we ought to set up meta-planning for DAYDREAMER
29.12.18 02:09:00<aindilis> since it's emotion driven planning cannot simulatenously solve problems
29.12.18 02:09:38<dmiles> solve simultainous problem?
29.12.18 02:09:41<dmiles> s
29.12.18 02:10:02<aindilis> "It should be noted that meta-planning handles problems which emotion-driven planning is not designed to handle: For example ...
29.12.18 02:10:25<aindilis> suppose the program has concerns to maintain a friendship with Karen, satisfy a need for food, and rationalize being turned down for a job.  Meta-planning ..
29.12.18 02:10:30<dmiles> so it uses meta-planning to solve those?
29.12.18 02:10:53<aindilis> would enable the generation of a plan in which the daydreamer has dinner with Karen in order to achieve two of her concerns simultaneously.
29.12.18 02:11:00<aindilis> I think it does emotion driven planning only
29.12.18 02:11:19<dmiles> i see 
29.12.18 02:11:26<aindilis> I think by metaplanning they are refering to a specific kind advocated by one guy
29.12.18 02:11:43<dmiles> concurrent planning
29.12.18 02:11:54<dmiles> ah ok
29.12.18 02:38:33<aindilis> okay done with p.g. 50
29.12.18 02:38:53<aindilis> it got really hard around my p.g. 45
29.12.18 02:38:57<aindilis> I didn't get it all
29.12.18 02:42:16<aindilis> also it seems like at the base of it it really isn't nested, which is odd, since you describe your EC planner as handling nested expressions
29.12.18 02:45:06<dmiles> well my system cant tell (sure it could if it tried) the differnce between  predlike(love) and love
29.12.18 02:45:56<dmiles> or  knows(joe,isa(foo,bar)) and  know_joe_foo_isa_bar
29.12.18 02:46:36<dmiles> since they are just terms
29.12.18 02:48:38<dmiles> i a unifable conslist is passed in place of CHRIS like (BOY NAMED "CHRIS")  it might not notice eitehr
29.12.18 02:50:01<dmiles> if DD does notice (and cares) than i should fix that
29.12.18 02:50:35<aindilis> k, I was just thinking about complex rules
29.12.18 02:50:47<aindilis> it would be nice to evaluate rule inference from within CYC instead of DD
29.12.18 02:51:45<dmiles> our usecase definately requires the usage of terms like  knows(joe,isa(foo,bar)) for isntance as a goal
29.12.18 02:52:28<aindilis> he has a mechanism for beliefs, but not beliefs about beliefs
29.12.18 02:55:16<dmiles> i dont think that is too hard to add since they are added as domain rules
29.12.18 02:56:01<aindilis> already I'm starting to see DD as something to be extended
29.12.18 02:56:04<dmiles> but i know what you mean.. if he has heuristics abotu confimring beliefs he doesnt have hueristics about beifs or beleifs
29.12.18 02:56:21<dmiles> but i know what you mean.. if he has heuristics abotu confimring beliefs he doesnt have hueristics about beliefs of beleifs
29.12.18 02:56:40<aindilis> well it says explicitly in the book that he has omitted higher order beliefs
29.12.18 02:56:55<dmiles> oh yes.. i was not expecting the code is not going to be totally rewritten
29.12.18 02:56:58<aindilis> I'm making a CYC domain with my notes
29.12.18 02:57:19<aindilis> #$DAYDREAMERMt, #$DDThis #$DDThat
29.12.18 02:59:16<dmiles> mostly DD serves as a toploop that requires CYC as the thing that makes the domain worthwile
29.12.18 03:00:50<dmiles> for instance the concept of belief means "things CYC doent use inference anymore to infer"
29.12.18 03:02:00<dmiles> things themselves might actually be in some set of statements about things that are actually beliefs and not
29.12.18 03:03:07<dmiles> the FTP domain is an example that emotional heuristics we might see as non-applicable
29.12.18 03:03:32<dmiles> yet is still pretends that they are
29.12.18 03:03:46<dmiles> yet the code still pretends that they are
29.12.18 03:05:34<dmiles> in a way if you look at the whole DD thing about emotions .. what Erik is doing is saying "here is a domains that pretends it is  planning arround emotions"
29.12.18 03:06:12<dmiles> yet each time it tries to do anything about the emotions it starts subplanning 
29.12.18 03:07:01<dmiles> "KNOWS SELF (phone-number HARISON-FORD)"
29.12.18 03:07:59<dmiles> which then makes a plan about calling his old college alumni office ot get his current phone number
29.12.18 03:08:34<dmiles> the goal was based on wanting to go on a date with him
29.12.18 03:08:57<dmiles> oops i mean to satify some emotion related to sex/love
29.12.18 03:09:16<aindilis> yeah, I realize we can replace the emotional needs with our security needs
29.12.18 03:09:50<aindilis> or rather, these particular emotional needs with emotional needs relating to security, or whatever is the agent's motivation
29.12.18 03:10:40<aindilis> I think all in all it is a nice system for balancing competing needs
29.12.18 03:10:48<dmiles> having those two planing systems together "planner with subplanner" we can still replace either
29.12.18 03:11:14<aindilis> are you going to use RTEC with it?
29.12.18 03:12:21<dmiles> yes i am seing that the EC of RTEC/Mine as required even jsut to undertand and run the real world frames
29.12.18 03:12:41<aindilis> ah
29.12.18 03:13:36<dmiles> DD is an example of a mostly-formed softbot agent
29.12.18 03:14:10<dmiles> that does at least present the right levle of KR it thinks itself enededing
29.12.18 03:14:22<dmiles> that does at least present the right levle of KR it thinks itself needing
29.12.18 03:14:52<dmiles> but of course this could ahve been any planner
29.12.18 03:15:43<dmiles> what we are gettign from Erik is like a MachineThatToursSomething
29.12.18 03:17:14<dmiles> that MachineThatToursSomething could have been written in OCL or PDDL if you look at it from the level of State
29.12.18 03:17:30<dmiles> ProgramAtState1 gets ProgramAtState2
29.12.18 03:17:52<dmiles> i donjt mean in the context of bottem up (even though that was my example)
29.12.18 03:18:09<dmiles> the best example i can think of thogh
29.12.18 03:18:32<dmiles> is when the Agent gets Dumped.. she has a need to handle it with  IceCream or Revenge
29.12.18 03:19:01<dmiles> after Revenge she has to find Penance
29.12.18 03:19:23<dmiles> (after IceCream she has to find Excersize)
29.12.18 03:20:23<dmiles> so DD itself is pretty much as an entire thing more of a pre-contrived domain
29.12.18 03:21:14<dmiles> sure it is generic, but some of its value is the silly emotional rules
29.12.18 03:21:42<aindilis> well it is quite a lot like some agents I was wrote about previously that get interested in things, and then fall away from them, investigate other things.  moreover, it has reactions for things like plan failure, which is neat- everything dovetails.  also it can do cyclic, maintenanice, or achievement goals, etc.
29.12.18 03:22:02<dmiles> actually the morst important part of DD is the "Reharsal Goal"
29.12.18 03:22:15<dmiles> the "Rehearsal Goal"
29.12.18 03:22:55<dmiles> the Rehearsal Goal is to attempt to solidify a plan to act out later
29.12.18 03:23:29<dmiles> right exacly "as reactions for things like plan failure"
29.12.18 03:24:18<dmiles> that in the orchastra of what it does keeps it moving 
29.12.18 03:24:42<dmiles> (most people might call *that* a meta-planner)
29.12.18 03:25:15<dmiles> (not Erik in this case)
29.12.18 03:26:28<dmiles> what i found sefull is that fact DD is mostly a meta-planner
29.12.18 03:26:48<aindilis> so for instance, in the plan to get a coat to get the newspaper, how does it realize it's raining outside?
29.12.18 03:26:57<dmiles> with probably not that great of an actual plan planner
29.12.18 03:27:14<dmiles> with probably not that great of an actual planner for getting Hirosn fords phone number
29.12.18 03:27:35<aindilis> well apparently it uses Carbonell's analogy planning
29.12.18 03:27:40<aindilis> I know Carbonell, he hates me
29.12.18 03:28:10<dmiles> "how does it realize it's raining outside"  part of gettign that detail is having the concept that GOING-PLANCES requires PREPAREDNESS-FOR-GOING-PLANCES goal
29.12.18 03:28:27<aindilis> ah nice
29.12.18 03:28:35<dmiles> GOING-PLACES*
29.12.18 03:29:33<aindilis> (DEPENDENCY
                 <aindilis>  linked-from (POS-EMOTION 0.9)
                 <aindilis>  linked-to (ACTIVE-GOAL (LOVERS ME ?MALE-PERSON) ^OB.2212)
                 <aindilis>  weight 1.0
29.12.18 03:29:36<aindilis>  offset 0.0
29.12.18 03:29:40<aindilis>  decay 0.0)
29.12.18 03:29:43<aindilis>  
29.12.18 03:29:46<aindilis> how would you translate that to CYC?
29.12.18 03:30:12<aindilis> as a #$and with a bunch of (#$DDLinkedFrom (#$POSEmotion 0.9)) ... clauses?
29.12.18 03:30:16<dmiles> the utility of CYC comes in whnen we make a rule like  for all ACTION there exists (PREPAREDNESSGoalFn ?ACTION) as a DEPENDENCY
29.12.18 03:31:07<dmiles> OB.2212 is ?
29.12.18 03:31:24<aindilis> i haven't figured out what those are yet
29.12.18 03:31:54<aindilis> are they assertion ids?
29.12.18 03:32:18<dmiles> (relateToCauses (POS-EMOTION  ME 0.9 )   (LOVERS ME ?MALE-PERSON) )
29.12.18 03:32:52<dmiles> like:  (relateToCauses (POS-EMOTION  ME 0.9 )  (AddNewGoal (LOVERS ME ?MALE-PERSON) )
29.12.18 03:33:00<dmiles> oops
29.12.18 03:33:04<dmiles> like:  (relateToCauses (POS-EMOTION  ME 0.9 )  (AddNewGoal ME (LOVERS ME ?MALE-PERSON) )
29.12.18 03:33:33<dmiles> the KE is ovfen in the load files more than the output
29.12.18 03:33:42<aindilis> ah okay
29.12.18 03:34:32<dmiles> like 
                 <dmiles> (ob$create '(PERSON obname Debra))
29.12.18 03:35:19<dmiles> is  (isa (InstanceNamedFn  Debra" #$Person) #$PErson)
29.12.18 03:37:16<dmiles> like at https://github.com/eriktmueller/daydreamer/blob/2ee977fc0402c12d9d6eaea70485ab3a42840546/gate_test.cl#L237-L257
29.12.18 03:40:29<dmiles> well this file is probably mostly https://github.com/eriktmueller/daydreamer/blob/master/dd_kb.cl 
29.12.18 03:40:47<aindilis> hehe, I was just daydreaming when a serendipity caused me to develop an analogical plan
29.12.18 03:41:42<aindilis> I noticed one your instances had dd_rule[34]
29.12.18 03:41:52<aindilis> .cl
29.12.18 03:42:38<aindilis> as part of a rehearsal plan
29.12.18 03:43:29<dmiles> :)
29.12.18 03:43:40<aindilis> okay my goal for tomorrow is going to be to read up to p.g. 100
29.12.18 03:43:56<dmiles>     ((KNOW Unlisted-Dir (TELNO Harry)))
                 <dmiles>     ((BELIEVE Tel-Emp1 (BELIEVE Tel-Emp1
29.12.18 03:43:57<dmiles>                                 (ACTIVE-GOAL (KNOW Tel-Emp1 (TELNO Harry))))))
                 <dmiles>     ((BELIEVE Tel-Emp1 (ACTIVE-GOAL (KNOW Tel-Emp1 (TELNO Harry)))))
29.12.18 03:44:47<dmiles> yeah where i got my exmaple
29.12.18 03:45:14<dmiles>  that is pretty nested
29.12.18 03:46:23<aindilis> well that's strange, thought he said he couldn't do beliefs about beliefs
29.12.18 03:46:38<aindilis> I've noticed there seem to be some advancements in the code
29.12.18 03:46:50<aindilis> it may have been X about X where X \= beliefs
29.12.18 03:47:24<dmiles> that might only be about beliving the telephone compnay employee knows
29.12.18 03:47:47<aindilis> well that's good then
29.12.18 03:47:49<dmiles> (not about beliving the teleco employee belifs that they know)
29.12.18 03:47:50<aindilis> that it does that
29.12.18 03:48:13<aindilis> alright, well I'm going to take like an hour long break
29.12.18 03:48:49<dmiles> sounds good
29.12.18 03:49:37<dmiles> "how would you translate that to CYC?" the answer i meant ot give but didnt quite give...
29.12.18 03:49:48<dmiles> is first i'd have translated the DD KB 
29.12.18 03:49:57<dmiles> (from the rules file)
29.12.18 03:50:08<dmiles> then the outpout events like the one you shown
29.12.18 03:50:21<dmiles> i'd have point back to the KR that created it
29.12.18 03:52:09<dmiles> that came from (define-rule Lovers-Theme-Plan (all lovers1 oseren-alone)
                 <dmiles>   (RULE subgoal (RSEQ (ROMANTIC-INTEREST ?Female-Person)
                 <dmiles>                       (NOT (LOVERS ?Self))) ; was RNOT, was .. ?:Female-Person
29.12.18 03:52:10<dmiles>         goal (ACTIVE-GOAL (LOVERS ?Self ?Female-Person))
                 <dmiles>         is 'plan-only
                 <dmiles> ;        self-type MALE-PERSON
29.12.18 03:52:11<dmiles>         plan-comments '(if
29.12.18 03:52:12<dmiles>              "ACTIVE-GOAL for self to have ACTIVE-GOAL of LOVERS with person"
                 <dmiles>                        then "ACTIVE-GOAL for ROMANTIC-INTEREST in person"
29.12.18 03:52:13<dmiles>                        "and ACTIVE-GOAL for not LOVERS with anyone")
29.12.18 03:52:14<dmiles>         plan-no-gen '(t t)
                 <dmiles>         plausibility 1.0))
29.12.18 03:52:45<dmiles> oops i meant ot grab the part about PSO-Empotipon
29.12.18 03:53:24<dmiles> oh interesting the 0.9 there came as a result of a rehearal
29.12.18 03:53:47<dmiles> um  Test-Theme
29.12.18 03:54:05<dmiles>      inf-comments '(if "testing object serendipities"
                 <dmiles>                        then "activate daydreaming goal for REHEARSAL"
                 <dmiles>                        "of LOVERS")
29.12.18 03:54:37<dmiles> as that rule..
29.12.18 03:54:38<dmiles>  (RULE subgoal (RTRUE)
                 <dmiles>         goal (ACTIVE-GOAL (REHEARSAL (ACTIVE-GOAL (LOVERS ?Self ?Male-Person))))
                 <dmiles>         emotion (POS-EMOTION strength 0.9)
29.12.18 03:56:15<dmiles> jsut setting up .. https://github.com/eriktmueller/daydreamer/blob/master/dd_kb.cl#L3264-L3280   in CycL is not trivial :O
29.12.18 03:56:50<dmiles> i'd make fiorst a NART like (DDRuleFn "Rehearsal-Plan")
29.12.18 03:57:19<dmiles> (isa (DDRuleFn "Rehearsal-Plan") DDPlanOnlyRule)
29.12.18 03:57:57<dmiles> vs (isa (DDRuleFn "Test-Theme") DDInferenceOnlyRule)
29.12.18 03:59:38<dmiles>  ?Obj in this Rule is a substate of the 
29.12.18 03:59:40<dmiles> world
29.12.18 03:59:53<dmiles> Objective*
29.12.18 04:00:36<dmiles> pretty complex to get this into CycL!
29.12.18 04:02:11<dmiles> aindilis:  i wont at all deny that i have attempted to give you one of the most difficult jobs  :P
29.12.18 04:23:14<dmiles> 20 years ago at Tekn, AdamP would give me such tasks and i knew anyone even remotely qualifed to do what i was asked to do was had several phDs
29.12.18 04:23:33<dmiles> probly making 5x what i was (i was making a 6k month ) ... somehow i managed to pull it off
29.12.18 04:28:05<aindilis> I've always admired your skills, I will definitely try to get this working. I probably don't understand the problem yet because it doesn't look very hard at this point.
29.12.18 04:28:13<dmiles> the truth was probably no one was ever qualified to do such things until people assumed they are
29.12.18 04:28:35<aindilis> I have a cold right now it's making me artificially tired
29.12.18 04:28:44<aindilis> I think I'm done for the day
29.12.18 04:28:53<dmiles> yeah actually it isnt that hard probably .. jsut wierd
29.12.18 04:29:22<aindilis> yeah I know what you mean about doing multiple PhD type owrk
29.12.18 04:29:37<aindilis> I feel like the work I have done could merit such
29.12.18 04:30:13<dmiles> from what i've seen i feel it could ahve to
29.12.18 04:31:00<aindilis> I'm getting a bit overwhelmed since I have so much stuff to do, I'm really interested in finding a way to delegate to get some people to set up software.  for instance, a lot of my to.do file processing stuff depends on getting recognizing textual entailment software to work
29.12.18 04:31:30<aindilis> see Complete RTE Systems: https://aclweb.org/aclwiki/Textual_Entailment_Resource_Pool
29.12.18 04:31:43<aindilis> I'm middling finished with wrapping all of these
29.12.18 04:32:24<aindilis> I'm just giving an example of anxiety producing stuff
29.12.18 04:32:37<aindilis> I am of course dedicated to getting DAYDREAMER going
29.12.18 04:32:51<dmiles> some of the Tests for Martys MUD came from that test set
29.12.18 04:33:00<aindilis> cool
29.12.18 04:33:21<dmiles> at least that is my litmus test that i kinda assume only EC can pass
29.12.18 04:33:32<aindilis> you mean frmo RTE test set?
29.12.18 04:33:39<aindilis> and then, I need to get backup working
29.12.18 04:33:46<aindilis> which means writing the deduplicator
29.12.18 04:33:53<dmiles> yes.. most of the tests are only testing if EC was done
29.12.18 04:34:07<aindilis> and also, having transport to remote systems to collect the hardware info and data info
                 <dmiles> (yet no one doing them uses EC!)
29.12.18 04:34:26<aindilis> ah nice
29.12.18 04:34:43<aindilis> I wish there were more of us
29.12.18 04:35:01<aindilis> which is why I'm tracking people's skill level and projects to try to make alignment pushes
29.12.18 04:35:11<dmiles> example "Two men exchanged lunch boxes"  "Two men had luch boxes.. then they had each others"
29.12.18 04:35:32<aindilis> ah neat
29.12.18 04:35:35<aindilis> good example
29.12.18 04:35:54<aindilis> with RTE I'd be content just for a surface match
29.12.18 04:35:57<aindilis> for starters
29.12.18 04:36:05<aindilis> an efficient surface match
29.12.18 04:36:29<aindilis> since I have to check whether which of millions of to.do list items are equivalent 
29.12.18 04:36:39<aindilis> s/whether//
29.12.18 04:37:30<aindilis> but it seems like there are two many architects and two few builders
29.12.18 04:37:35<aindilis> *too
29.12.18 04:37:38<aindilis> lol
29.12.18 04:37:41<aindilis> tired evidently
29.12.18 04:37:57<aindilis> I'm really excited though about this
29.12.18 04:38:02<aindilis> what we're working on together
29.12.18 04:38:15<aindilis> I'm grateful you've invested as much time as you have trying to get me up to speed on it
29.12.18 04:38:17<dmiles> me to
29.12.18 04:38:32<aindilis> hopefully I'll be a quick study
29.12.18 04:39:11<aindilis> I'm going to try to finish converting the assertions I've collected into CycL and asserting them through my System::CYC Perl package
29.12.18 04:39:20<aindilis> just to test things out
29.12.18 04:39:31<aindilis> getting a UniLang client for clisp is really daunting
29.12.18 04:39:45<aindilis> it would be much easier with ABCL since I could just use my Java library
29.12.18 04:40:04<aindilis> but of course it doens't build for ABCL
29.12.18 04:40:19<dmiles> well some version of ABCL that code does work on
29.12.18 04:40:29<dmiles> but oh yeah has that 10 vs 11 error
29.12.18 04:41:58<dmiles> well by monday i should have the LarKC-CL done
29.12.18 04:42:13<aindilis> cool, is it a shareable version?
29.12.18 04:42:24<aindilis> like can I run it on my computer?
29.12.18 04:42:29<dmiles> i am going to share it on github.. may as well
29.12.18 04:42:37<aindilis> really, cool!
29.12.18 04:42:41<aindilis> thx, wasn't sure
29.12.18 04:42:46<aindilis> that makes it more interesting for me
29.12.18 04:44:35<dmiles> good.. ok nn
29.12.18 04:44:41<aindilis> okay, nn!
29.12.18 04:44:45<aindilis> are you done for the night?
29.12.18 04:45:04<dmiles> i am going to try a couple more things to get it running now that it builds
29.12.18 04:45:09<aindilis> awesome
29.12.18 04:45:11<aindilis> ttys
29.12.18 08:00:35<aindilis> how'd it go?
29.12.18 08:00:37<aindilis> dmiles
29.12.18 08:01:20<aindilis> I made some trifling progress on the backup solution - enough to realize it is a very complex project
29.12.18 09:27:53*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-noilmfgugexqaoiw) left #logicmoo: Quit: Connection closed for inactivity
29.12.18 14:40:45*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lddixjnuupdhosio, stoopkid: stoopkid)
29.12.18 14:40:50<dmiles> cyc: (+ 1 1)
29.12.18 15:04:13*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
29.12.18 15:06:21*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
29.12.18 15:06:26<dmiles> cyc: (+ 1 1)
29.12.18 21:12:02<aindilis> my thumb is really hurting so I think I'll have to take a break from coding, maybe read that book or watch a movie
29.12.18 21:12:34<dmiles> sounds good
29.12.18 21:12:49<aindilis> also a break from chatting
29.12.18 21:13:31<dmiles> i have 2 versions i really want to use of LarKC-CL .. so i have to code merge them.. its a like an 8 hour affair to do so
29.12.18 21:13:50<aindilis> gl
29.12.18 21:13:56<dmiles> yep
29.12.18 21:14:19<aindilis> I'll try to get to p.g. 150 by EOD
29.12.18 21:14:34<dmiles> neat
29.12.18 21:14:47<aindilis> I am a slow reader
29.12.18 21:17:37<aindilis> I think I might start calling this thinker or analyzer instead of daydreamer since daydreamer has connotations of impracticality
29.12.18 21:20:11<dmiles> :)
29.12.18 21:38:38<aindilis> this could also have application in simulating others to anticipate their behavior
29.12.18 21:44:55<dmiles> out of over a 100 AI books ive read or reviewed this is book is is the only one that proposes a model to allow that
29.12.18 21:45:17<dmiles> (to make that possible)
                 <aindilis> there is also Computational Autism
29.12.18 21:45:33<dmiles> i should chank that out
29.12.18 21:45:47<dmiles> check that out
29.12.18 21:45:49<aindilis> I was working with the author but I suffered a breakdown and haven't heard back from him since, I have some of his Prolog theory of mind code
29.12.18 21:46:16<aindilis> his name is Boris Galitsky
29.12.18 21:48:03<dmiles> Autistic Reasoning is indeed the seed of DD like learning
29.12.18 21:48:37<aindilis> well I know he mentions autistic thinking in the book, are you referring to that because that reasoning is not what I was referring to?
29.12.18 21:48:48<aindilis> *the DD book
29.12.18 21:49:45<dmiles> nope i am refering to Autistic Thinking  is (either by accident or on purpose the foundation of daydreaming) 
29.12.18 21:49:56<dmiles> nope i am refering to Autistic Thinking  is (either by accident or on purpose) the foundation of daydreaming
29.12.18 21:51:35<aindilis> are you refering to Blueler's Autistic Thinking (which takes place in Schizophrenics) or actual Autism?
29.12.18 21:51:53<dmiles> as autistic thnking is only differet as it is seeing daydreamer results as actual results
29.12.18 21:51:54<aindilis> since I think the prior is mentioned in association to DD and the latter in association to Computational Autism
29.12.18 21:52:18<dmiles> Blueler's yes
29.12.18 21:52:35<aindilis> yeah so Computational Autism is about autism proper 
29.12.18 21:53:38<aindilis> and not afaik about Blueler's, sorry just trying to clarify the sense
                 <dmiles> *nod* i was reading https://www.springer.com/us/book/9783319399713 of BorisG and it looks like that he and ErikM  end up pretty much togehter
29.12.18 21:54:13<dmiles> I assumed BorisG was using Blueler's definition
29.12.18 21:54:30<aindilis> I am pretty sure he wasn't
29.12.18 21:54:51<aindilis> since Blueler said it took place in Schizophrenics
29.12.18 21:55:03<aindilis> Schizophrenia and Autism are coterminal syndromes
29.12.18 21:55:10<aindilis> but they are still different
29.12.18 21:55:22<dmiles> How i defined Blueler's to work is that the Agent assumes if they clap their hands twice that they will get more money tommorow
29.12.18 21:55:52<dmiles> when tomorow comes any sign of money is confirmation
29.12.18 21:56:10<dmiles> if no money comes tomoorow they make up that it did.. create a false memory
29.12.18 21:56:17<aindilis> yeah
29.12.18 21:56:21<aindilis> no I don't think that's what is meant by autism proper
29.12.18 21:56:30<aindilis> autism proper is characterized by this:
29.12.18 21:58:01<dmiles> ah "autistic thinking" is a special symptom i was assuming .. people without autism have it jhust as much as peopel with autsim
29.12.18 21:58:55<aindilis> see https://frdcsa.org/~andrewdo/dmiles/autism
29.12.18 21:59:03<aindilis> in particular see whataspe.htm
29.12.18 21:59:46<dmiles> i see, yeah we were talking about two differnt things
29.12.18 22:00:16<aindilis> yeah, it's the same two different think as in the book Capitalism and Schizophrenia, they don't mean Schizophrenia proper
29.12.18 22:00:18<dmiles> "autism proper" and "autistic thinking" only are accidentally named simularly
29.12.18 22:00:39<aindilis> well they're probably somewhat related by yeah it's largely polysemous here
29.12.18 22:00:45<aindilis> *but yeah
29.12.18 22:00:56<dmiles> "Autistic thinking is a type of mental activity in which focus is directed inward and the thinking is subjective (as opposed to objective). Autistic thinking is comprised of inner thoughts and individual reality. Daydreaming and fantasies are common elements of autistic thinking."
29.12.18 22:00:57<aindilis> *two different things
29.12.18 22:01:15<aindilis> yeah that's probably why he calls it such
29.12.18 22:01:53<dmiles> Autistic Reasoning i just assume BorisG uses taht to say that Each hillclimb is based on a usefull-fiction
29.12.18 22:02:18<aindilis> well I think Boris is concerned with treating people diagnosed with Autism
29.12.18 22:02:21<dmiles>  usefull-fictions are a result of autistic thinking
29.12.18 22:02:22<aindilis> and remediation strategies
29.12.18 22:02:36<aindilis> but his simulations provide useful tools for AI
29.12.18 22:02:51<dmiles> yes indeed
29.12.18 22:03:13<aindilis> since savant computation is common to both autists and computers
29.12.18 22:06:00<dmiles> i see yes BorisG actualyl even gets into the Code
29.12.18 22:06:22<dmiles> pretty awesome!
29.12.18 22:34:27<aindilis> awesome!
30.12.18 00:45:31<dmiles> aindilis does your cyc instnace have a  scg-repo-v2  ?
30.12.18 00:45:39<aindilis> checking
30.12.18 00:46:04<dmiles> under /data
30.12.18 00:46:30<dmiles> 5.7G    /opt/cyc/data/scg-repo-v2
30.12.18 00:46:47<aindilis> hrm rcyc has a small scg-repo-v2
30.12.18 00:46:55<aindilis> let me check my other versions
30.12.18 00:47:05<dmiles> thx
30.12.18 00:48:28<aindilis> yes it does
30.12.18 00:48:37<aindilis> it's 5.7G surprisingly
30.12.18 00:48:56<aindilis> 4.0q
30.12.18 00:49:27<aindilis> do you need a copy?
30.12.18 00:49:33<dmiles> ok .. i might not include it as part of the distro since people are expected to already have that maybe
30.12.18 00:49:39<aindilis> kk
30.12.18 00:49:48<aindilis> probably wise
30.12.18 01:00:39<dmiles> how big is your ./units folder?
30.12.18 01:01:08<aindilis> 3118MB
30.12.18 01:01:35<dmiles> ok mine to 
30.12.18 01:03:15<dmiles> and if oyu dont mind so i dont keep asking for everyting.. du . -h --max-depth=3
30.12.18 01:03:58<aindilis> from cyc/run?
30.12.18 01:04:07<dmiles> yeah jsut from run
30.12.18 01:04:53<dmiles> i mixed in too much stuff to my 4q
30.12.18 01:05:02<aindilis> https://frdcsa.org/~andrewdo/dmiles/du-cyc.txt
30.12.18 01:06:29<dmiles> perfect
30.12.18 01:06:34<aindilis> :)
30.12.18 01:09:22<aindilis> #$equalSymbols (swoon)
30.12.18 01:09:37<aindilis> gotta love the extralogical features
30.12.18 01:10:43<dmiles> i always refer to CycL as a programming language (in the sense that prolog is) such things are nice
30.12.18 01:12:05<dmiles> if the prolog language could jsut have all the Cyc predicates!
30.12.18 01:12:36<aindilis> well that would be a thing to try to get people to start implementing on ##prolog
30.12.18 01:12:58<dmiles> its hard for them to even immagine such a thing like CYC could exist
30.12.18 01:13:28<dmiles> well people know it exists but they think of it as some AI-ish thing
30.12.18 01:14:40<dmiles> instead of it as the most killer prolog impl the govt could afford
30.12.18 01:15:46<dmiles> yet before people learn prolog they assume it will be what cyc is!
30.12.18 01:17:10<dmiles> but yeah.. that is going to be an objective is to get ##prolog people feeling like CYC is theirs
30.12.18 01:17:29<dmiles> (not some obscure failed AI)
30.12.18 01:17:40<aindilis> cyc (+ 1 1)
30.12.18 01:18:24*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
30.12.18 01:18:29<dmiles> cyc: (+ 1 1)
30.12.18 01:18:31<cyc> "2"
30.12.18 01:18:59<aindilis> cyc (dgoal "get ##prolog people feeling like CYC is theirs")
30.12.18 01:19:01<cyc> T
30.12.18 01:19:24<aindilis> so you say this LarKC you are releasing has good SWIPL support?
30.12.18 01:19:33<aindilis> that would be a big start towards that goal
30.12.18 01:20:36<dmiles> good idea,,  i coded it to work both dirrection as prolog library
30.12.18 01:20:56<aindilis> wonderful
30.12.18 01:21:25<dmiles> i was actualyl workign toward removing that feature.. but i relaize i dont get any pay to remove features
30.12.18 01:21:34<dmiles> heh
30.12.18 01:22:24<dmiles> well i was commenting out at leas the code that makes CYC store all its assertions in prolog
30.12.18 01:22:44<aindilis> yeah having that code would be a huge boon to FLP
30.12.18 01:23:20<aindilis> sorry if I'm not responding, I'm still not feeling well with this sinus thing
30.12.18 01:23:38<aindilis> I want to chat but I haven't done the work required to make the chat interesting
30.12.18 01:23:40<dmiles> well good trhat you see meirt in that 
30.12.18 01:24:17<dmiles> the only drawback is that such linkage (to prolog) is version dependant
30.12.18 01:25:18<dmiles> but i can make it less version-dependant 
30.12.18 01:25:28<dmiles> at least i think
30.12.18 01:26:04<dmiles> the only thing that makes is so is the JVM has to know where the libswipl.so is
30.12.18 01:26:40<dmiles> oh and the JVM has to match the one the swipl user is using that month probably
30.12.18 01:29:03<dmiles> what would be perfect is if a person got a compy of rcyc thru a pack install :P)
30.12.18 01:29:53<aindilis> heh
30.12.18 01:30:11<aindilis> well let's do opencyc that way anyway
30.12.18 01:30:28<dmiles> i wonder if cycorp would allow that if i said i wanted to distribute the MUD this way
30.12.18 01:30:39<aindilis> could do it like a ROM
30.12.18 01:31:14<dmiles> ROM?
30.12.18 01:31:35<aindilis> well like you could say you need rcyc installed here to work
30.12.18 01:31:40<aindilis> but have the thing install it
30.12.18 01:32:40<aindilis> *it = everything else needed to run
30.12.18 01:33:03<aindilis> the yellow-tree debugger has a lot of uses
30.12.18 01:33:15<dmiles> ah :P
30.12.18 01:34:08<aindilis> plausible deniability is a useful thing
30.12.18 01:35:25<dmiles> of course i can just make them connect to my cyc server to for some light install think to try it out
30.12.18 01:35:39<dmiles> some light install thing to try it out
30.12.18 01:35:41<aindilis> the flip side is that sometimes people think something was indicated that wasn't
30.12.18 01:35:57<aindilis> yeah that's cool
30.12.18 01:36:13<aindilis> ever use transmission torrent client?
30.12.18 01:36:32<dmiles> is that like a VPN ?
30.12.18 01:36:44<dmiles> or is it jsut super plight torrent?
30.12.18 01:36:53<dmiles> or is it jsut super light-wieght torrent?
30.12.18 01:36:56<aindilis> well you can use transmission with a VPN, I think it's just a lightweight torrent
30.12.18 01:38:08<aindilis> I always thought I would distribute FRDCSA over torrent, when I had finished redacting it
30.12.18 01:38:24<aindilis> it's way too big for a regular download
30.12.18 01:39:04<dmiles> yeah indeed
30.12.18 01:39:23<aindilis> I used to even think that I should just release everything without redaction and then just face the facts
30.12.18 01:39:58<aindilis> but I concluded that I needed to be present for its completion since I couldn't trust that the seed would take root
30.12.18 01:40:29<aindilis> I did upload the redacted version to a friends online site
30.12.18 01:40:37<dmiles>  release everything without redaction and then just face the facts .. everyone alienated is alredy ? :)
30.12.18 01:41:04<aindilis> I meant face legalities or consequences, maybe like Aaron
30.12.18 01:42:11<aindilis> you know there's a lot of software in FRDCSA that I only have a site license for
30.12.18 01:42:34<aindilis> and if I redistributed it it would violate the terms of the license
30.12.18 01:42:41<aindilis> for instance, vampire-kif
30.12.18 01:42:53<aindilis> which still runs FreeKBS2
30.12.18 01:43:01<dmiles> hrrm so vampire-kif that is an interesting snafu
30.12.18 01:43:32<dmiles> since it was going to be say HUGE
30.12.18 01:43:37<dmiles> then wasnt
30.12.18 01:43:59<dmiles> so would the authors just be giddy to ahve peopel actualyl interested in it again?
30.12.18 01:44:27<aindilis> hehe, yeah hard to tell
30.12.18 01:44:47<aindilis> but the fact that CYC garners so little respect is unbelievable
30.12.18 01:45:12<aindilis> bogosity and all that
30.12.18 01:45:25<dmiles> i dunno how much you knew aobut the deal with opencyc
30.12.18 01:45:44<aindilis> I think you said or I read that fragmentation was the reason it was scrubbed
30.12.18 01:45:47<dmiles> everyone hated to have to do opencyc at cycorp
30.12.18 01:45:55<dmiles> (even before it came out)
30.12.18 01:46:15<aindilis> it seems like a collosal effort and the only person who uses it is me
30.12.18 01:46:16<dmiles> but it was a why to get some of TimBLs money
30.12.18 01:46:24<dmiles> a way to*
30.12.18 01:47:06<aindilis> I hate that we're in a bind that in order to do something useful we need to pay people but we can't hire anyone because no one will front money for something that is given away freley
30.12.18 01:47:21<dmiles> when it did come out it was so much work that the $500k grant never would have made it worth it
30.12.18 01:47:27<aindilis> right
30.12.18 01:47:44<aindilis> nevertheless, OpenCYC is a good platform to rebuild
30.12.18 01:47:58<dmiles> LarKC was another.. and RCyc was yet another
30.12.18 01:48:01<aindilis> I'm trying to keep everything mutually compatible with RCyc and OCyc
30.12.18 01:48:04<aindilis> wow
30.12.18 01:48:27<dmiles> more payouts to cycorp to get them to play nice
30.12.18 01:48:47<aindilis> well it may yet serve cycorp's interest to have FRDCSA / LogicMOO using it.  who knows we might actually succeed.
30.12.18 01:49:31<aindilis> Witbrock was adamant that CYC never be fully released
30.12.18 01:50:19<aindilis> which might be a good thing if cybercriminals were to get a hold of it (true cybercriminals)
30.12.18 01:51:14<dmiles> in 2004 i left my kids and had to move near cycorp in order to be able to code on it
30.12.18 01:51:27<dmiles> due to that they never wanted it out there
30.12.18 01:51:52<aindilis> hrm, I have to remember that as invested as I am in it, you've done so much more for / with it
30.12.18 01:52:04<dmiles> that was when i moved in with Kino.. Cycorp was going to let us have one copy as long as we kept it safe out our work
30.12.18 01:53:02<dmiles> oh what i was actualyl about to bring up there.. is they were so afraid peiople would use Lisp
30.12.18 01:53:13<dmiles> use lisp to talk to its
30.12.18 01:53:36<aindilis> why is that a problem for them?
30.12.18 01:53:46<dmiles> or do something as extreme as  (DEFINE A (assrt) .. ) that you do
30.12.18 01:54:10<dmiles> we never could figure out why!
30.12.18 01:54:15<aindilis> heh
30.12.18 01:54:37<dmiles> they spent tons of money building a sandbox interpretor 
30.12.18 01:54:58<dmiles> to prevent stuff liek that
30.12.18 01:55:17<dmiles> the problem is that sandbox interpreter was couausing so many silly bugs
30.12.18 01:55:49<dmiles> it was like the more moeny that went into the sandbox .. the less useable cyc was
30.12.18 01:56:16<dmiles> everyone finnally got sick of my and everyones whining
30.12.18 01:56:43<aindilis> interesting
30.12.18 01:56:44<dmiles> i just have no clue why it ever got made in the first place
30.12.18 01:57:03<dmiles> (i mean sure there was like a 250k grant that it pretended it was for)
30.12.18 01:57:20<dmiles> but that money was gone by 2002
30.12.18 01:58:15<dmiles> not sure why i am brining it up other than it really confused peopel as to the use of opencyc
30.12.18 01:59:07<dmiles> it literally killed opencyc
30.12.18 01:59:23<aindilis> the sandbox interpretter? which comes with opencyc?  killed opencyc?
30.12.18 01:59:45<dmiles> open version of opencyc they took it out
30.12.18 01:59:50<dmiles> one version
                 <aindilis> ah
30.12.18 02:00:03<dmiles> since it jsut never really worked
30.12.18 02:00:11<aindilis> yeah I was really sad to see opencyc flounder
30.12.18 02:00:12<dmiles> but is in mostr versions
30.12.18 02:00:13<aindilis> *founder
30.12.18 02:00:32<aindilis> I suppose there just wasn't enough interest
30.12.18 02:00:38<aindilis> why is that?
30.12.18 02:00:46<dmiles> there was average 250 downloads a day for years
30.12.18 02:01:05<aindilis> well that contradicts what I just said
                 <dmiles> like 250k dowloads total or something
30.12.18 02:01:34<dmiles> it was jsut no one understood what it would be used fgor
30.12.18 02:01:41<aindilis> ah
30.12.18 02:02:14<aindilis> well speaking of using it, I am building some ontologies about logics like sitcalc eventcalc and fluentcalc
30.12.18 02:02:27<dmiles> now had it been what RCYC is now with the OpenCYC KB? it woulsd be extremely popular
30.12.18 02:02:51<dmiles> since people use DEFINE to write software
30.12.18 02:03:14<dmiles> could use DEFINE/DEFMACRO to write AI software
30.12.18 02:03:15<aindilis> ah okay now I understnad what you're saying, I had forgotten that define doens't work in most OCycs
30.12.18 02:04:21<dmiles> right define might have worked oiwhtj one OCyc
30.12.18 02:04:49<aindilis> rcyc 1.0 is unique in that the NLU features work, I haven't gotten them to work with any other
30.12.18 02:05:18<dmiles> is that RCYC a  CRTL or a JRTL ?
30.12.18 02:05:30<aindilis> i don't remember
30.12.18 02:05:37<aindilis> probaby jrtl
30.12.18 02:05:46<aindilis> since I have an API for it I think via Java
30.12.18 02:07:29<dmiles> get the NLU to really work is very complex to setup
30.12.18 02:07:44<dmiles> (for them as well)
30.12.18 02:08:21<dmiles> as it requires the right noncyc processes to be running as daemons
30.12.18 02:09:12<dmiles> (cyc can start those daeomons.. no problem.. but whether they meet the expected dyanicic links is another thing)(
30.12.18 02:10:35<aindilis> ah true
30.12.18 02:10:48<aindilis> I think I ran it on an older 32 bit VM
30.12.18 02:11:08<aindilis> it's on justin.frdcsa.org, I'd have to boot it up
30.12.18 02:11:35<aindilis> can't do that since it will wake people
30.12.18 02:11:49<aindilis> I once got the SCG working
30.12.18 02:11:53<dmiles> n/p
30.12.18 02:12:17<dmiles> oh SCG stands for what again?
30.12.18 02:12:24<aindilis> Semantic Construction Grammar
30.12.18 02:12:53<aindilis> http://www.www2015.it/documents/proceedings/companion/p673.pdf
30.12.18 02:13:11<aindilis> I should probably export some of my VMs with this stuff for you to download
30.12.18 02:13:58<aindilis> still haven't copied anything to my new backup drive
30.12.18 02:14:20<aindilis> trying to figure out how to get all my core stuff into git and backed up in several places
30.12.18 02:14:22<dmiles> ok SCG is the 3rd try at NLU
30.12.18 02:14:32<aindilis> imho it was pretty weak
30.12.18 02:14:51<aindilis> hey do you think I could get hired by CYC if I promised to fix their NLU?
30.12.18 02:14:55<aindilis> *Cycorp
30.12.18 02:15:04<aindilis> they ignored me the last time I reached out to them
30.12.18 02:15:22<aindilis> should I persist or leave them alone?
30.12.18 02:15:36<dmiles> persist again
30.12.18 02:15:44<aindilis> I didn't know if they didn't want me or if they were in the midst of restructuring and dropped the ball
30.12.18 02:15:53<aindilis> okay
30.12.18 02:15:55<dmiles> just restructuring
30.12.18 02:15:58<aindilis> I will contact them
30.12.18 02:16:48<aindilis> yeah I have some theories about how to do NLU right
30.12.18 02:16:52<aindilis> it will take forever of course
30.12.18 02:17:20<aindilis> and I don't think I really want to dedicate myself to that problem
30.12.18 02:17:46<aindilis> for instance: yeah <I have some theories> about how to do NLU
30.12.18 02:17:51<aindilis> that's a pattern
30.12.18 02:18:13<aindilis> a template that needs to be disambiguated and then loads in a set of assertions
30.12.18 02:18:19<aindilis> /pattern/idiom/
30.12.18 02:18:27<aindilis> I think the parser should be idiomatic
30.12.18 02:18:36<aindilis> I think X should be
30.12.18 02:18:41<aindilis> Y
30.12.18 02:18:48<aindilis> people speak in soundbytes
30.12.18 02:19:05<aindilis> a literal transliteration gets you nowhere really
30.12.18 02:19:07<dmiles> they had it working 100% with try 1 RTP.. but then they started doing it correctly (according to me) in the KB-Workflow version but only 1/2 finished the code .. then came SCG i guess that must be like 30% done
30.12.18 02:19:15<aindilis> "gets you no where"
30.12.18 02:19:32<aindilis> ah okay
30.12.18 02:19:44<aindilis> yeah you had mentioned
30.12.18 02:19:48<aindilis> I never saw try 1
30.12.18 02:20:30<dmiles> try #1 they used a  assertTemplate* and askTemplate*
30.12.18 02:22:13<aindilis> yeah that looks pretty cool, just looking at it now
                 <dmiles> cyc:  (constant-apropos "assertT")
30.12.18 02:22:16<cyc> "#$assertTemplate"
                 <cyc> "#$assertTemplate-Reln"
                 <cyc> "#$assertTemplate-Test"
                 <cyc> "#$assertionAssertTime"
30.12.18 02:22:38<dmiles> cyc:  (constant-apropos "askTe")
30.12.18 02:22:40<cyc> "#$CulturalAnalysisTaskTemplates-Basic"
                 <cyc> "#$IntelligenceAnalysisTaskTemplates-Basic"
                 <cyc> "#$taskTester"
30.12.18 02:22:50<dmiles> cyc:  (constant-apropos "queryTe")
30.12.18 02:22:52<cyc> "#$AreThereAnyQueryTemplatesWithoutQueries-KBIntegrityTest"
30.12.18 02:22:53<cyc> "#$BackchainInRecursiveQueryTest"
                 <cyc> "#$BuilderQueryTemplateForLogicalFieldTypeOfSKSFn"
                 <cyc> "#$BuilderQueryTemplateForMeaningSentenceOfSKSFn"
30.12.18 02:22:56<cyc> "#$CST-AnimalsDontHaveFruitAsAnatomicalParts-HypothesizedQueryTest"
30.12.18 02:22:59<cyc> "#$CST-AnimalsDontHaveFruitAsAnatomicalParts-HypothesizedQueryTest-TypeLevel"
30.12.18 02:23:02<cyc> "#$CST-AnimalsDontHaveFruitAsAnatomicalParts-HypothesizedQueryTest-TypeLevel-2"
30.12.18 02:23:05<cyc> "#$CST-QCO-AnimalsDontHaveFruitAsAnatomicalParts-HypothesizedQueryTest-TypeLevel"
30.12.18 02:23:08<cyc> "#$CTC-WeaponFromRadiologicalMaterial-QueryTemplate"
30.12.18 02:23:12<cyc> ...
30.12.18 02:23:17<aindilis> btw I wrote some cool emacs code for navigating camelcase cyc assertions
30.12.18 02:23:35<aindilis> it jumps to EachConjoinedWord
30.12.18 02:23:41<aindilis> i.e. first to E, then C, then W
30.12.18 02:25:02<aindilis> ^#<^AS:(^#$^Each^Conjoined^Word^
30.12.18 02:25:16<aindilis> makes it easy to edit htem
30.12.18 02:25:25<dmiles> neatoh with a reader-macro?
30.12.18 02:25:45<aindilis> um, just some silly re-search-(forward|backward) and substring, stirng= stuff
30.12.18 02:26:00<aindilis> really ugly but it mostly works
30.12.18 02:26:48<dmiles> neat
30.12.18 02:27:00<aindilis> I want to keep plodding away at this until it works great
30.12.18 02:27:15<aindilis> this = all the CYC stuff
30.12.18 02:27:38<aindilis> I am especially interested in getting some other people to join in on the effort
30.12.18 02:27:49<aindilis> but that rarely seems to work
30.12.18 02:28:21<aindilis> if I could just convince people to build and share software
30.12.18 02:28:27<aindilis> but I can't
30.12.18 02:28:42<aindilis> *people in the larger sense
30.12.18 02:28:46<aindilis> you and jbalint already do this
30.12.18 02:28:49<dmiles> i want to see jsut as much lisp API for CYC as PrologAPI
30.12.18 02:29:14<aindilis> so you said LarKC has CommonLISP+Prolog
30.12.18 02:29:21<aindilis> + CycL + SubL?
30.12.18 02:30:04<aindilis> if so that will be great, I've struggled to implement a KBS in Prolog
30.12.18 02:30:07<dmiles> well yeah i working/worked on making sure we had working Lisp CYC API.. but i mean encouraging programing by lisp people
30.12.18 02:30:23<aindilis> okay
30.12.18 02:30:41<aindilis> cyc (dgoal "encourage programming of Cyc by Lisp people")
30.12.18 02:30:42<cyc> T
30.12.18 02:30:52<aindilis> btw you said whitten had figured out transcripts?
30.12.18 02:30:57<aindilis> *whitten
30.12.18 02:30:59<aindilis> *Whitten
30.12.18 02:31:12<dmiles> yeah we need to get him on here.. he really is definately interested
30.12.18 02:31:29<aindilis> should I email him now?
30.12.18 02:32:14<dmiles> that would be great!
30.12.18 02:32:20<aindilis> k bbiab
30.12.18 02:33:01<dmiles> "Doug and I are ressartign/revamping all the old cyc code etc "
30.12.18 02:33:26<aindilis> ressurecting/revamping?
30.12.18 02:33:45<aindilis> whitten@netcom.com ?
30.12.18 02:34:32<dmiles>  ressurecting 
30.12.18 02:37:02<aindilis> Hi David, Doug and I are resurrecting/revamping all the old CYC code.  Would you be interested in joining us?  We're on #logicmoo on freenode.  Best, Andrew
30.12.18 02:37:13<aindilis> This is being sent as a linkedin friend request
30.12.18 02:37:19<aindilis> sound good
30.12.18 02:37:33<aindilis> ?
30.12.18 02:39:38<dmiles> great 
30.12.18 02:42:14<aindilis> k sent
30.12.18 06:29:37<aindilis> how'd it go with LarKC?
30.12.18 06:32:00<dmiles> startignt o wind down.. have it in about a 660m git repo
30.12.18 06:32:13<dmiles> minus the 4q data/unitrs
30.12.18 06:32:21<aindilis> that's a little large for github, right?
30.12.18 06:32:32<dmiles> it will acutalyl be fine on github
30.12.18 06:32:39<dmiles> all the files are under 50mb
30.12.18 06:32:44<aindilis> great, good work!
30.12.18 06:32:49<dmiles> and the whole repo is inder a gig
30.12.18 06:33:45<dmiles> it even runs .. tommtorow i have to "move" (using ajava refacting tool makes it easier) my old ABCL code back close to the original filestructure
30.12.18 06:33:58<dmiles> and diff like hell some more
30.12.18 06:34:14<aindilis> well you're about half way done?
30.12.18 06:34:21<aindilis> of the 8 hours?
30.12.18 06:34:38<aindilis> I just can't tell you how excited I am to use this
30.12.18 06:34:41<dmiles> yes 
30.12.18 06:35:06<aindilis> of course I need to go ahead and finish reading the text, I took a break from it today since I wasn't feeling well / was having trouble concentrating
30.12.18 06:35:08<dmiles> but i brought it right up to where that i am ready to start having to be super carefull
30.12.18 06:35:14<aindilis> ah
30.12.18 06:35:26<dmiles> that means i have to start runing the ANSI-TESTS after every few changes
30.12.18 06:35:47<dmiles> to make sure i dont regres
30.12.18 23:24:00<dmiles> hrrm having a hard time focusing.. though i have a hair to write an email for EriKM to gives us some encouragment
30.12.18 23:24:52<dmiles> unlike me he is good at relpying to emails
30.12.18 23:38:32<dmiles> bah.. i cant get the words correct in an email to him
30.12.18 23:39:45<dmiles> Mainly I am writing to let him know that I sometimes wonder what it would have been like if while he was doing his pHD thesis if he was able to use ResearchCYC instead of the GATE code
30.12.18 23:40:40<dmiles> basically if that would make DAYDREAMER scale better?
30.12.18 23:42:00<dmiles> hrmr i jsut going to stsart fdrafting the email in google docs
30.12.18 23:42:13<dmiles> so others can help
30.12.18 23:52:50<dmiles> @ https://docs.google.com/document/d/1rXoCdBmTiO2ThWyD11JEV5iBYFdkU5OpXDn8LwOUNB4/edit
30.12.18 23:53:12<aindilis> ty
30.12.18 23:56:10<aindilis> just fyi here my agenda (when I get back to programming, hopefully tomorrow night) is top priority is 1) DAYDREAMER/CYC integration, and then 2) (log to sensor-network / problemspace / elog, have assertions at the ready like [2018-12-30 22:02:44]: motion controlRoomSouthWall -> atTime([2018-12-30 22:02:44],motion(controlRoomSouthWall)), have available in FLP. Mine with anomaly detection stuff.  Also have prolog code that i
                 <aindilis> upon each sensor impulse to determine what to do - for instance, if there is motion in the room, start up darknet to identify what is in the room.) and 3) is work on backup-manager (which backs up FRDCSA systems to git repositories on multiple drives) and data-manager (which is responsible for duplication/deduplication)
                 <aindilis>  
30.12.18 23:56:58<aindilis> btw, I requested access to your doc
30.12.18 23:58:13<aindilis> as regards ErikM email, we need to involve him in more than just DAYDREAMER and EC
30.12.18 23:58:24<aindilis> but probably a good start would be to focus on those two
31.12.18 00:03:08<dmiles> oh oops i thought i put it in the shared folder .. sorry
31.12.18 00:03:49<dmiles> there :P
31.12.18 02:08:20<dmiles> is that good? or is it too long? 
31.12.18 02:08:59<aindilis> hey checking
31.12.18 02:12:23<aindilis> yeah I like it sof ar
31.12.18 02:19:34<dmiles> sent
31.12.18 02:25:16<aindilis> cool
31.12.18 02:28:06<dmiles> i am scrubing some personal stuff out of the LarKC_CL before i push it (meaing i have to remake the .git )
31.12.18 02:28:22<aindilis> ah k
31.12.18 03:06:59<dmiles> cyc: (+ 1 1)
31.12.18 06:32:06<aindilis> dmiles: ping
31.12.18 06:52:16*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
31.12.18 06:52:25<logicmoo> cyc: (+ 1 1)
31.12.18 06:52:31<aindilis> ping
31.12.18 06:54:38*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 245 seconds
31.12.18 08:01:24*** Nick regain: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
31.12.18 08:01:29<dmiles> pong
31.12.18 08:02:17<dmiles> you probly saw i commited it .. i mainly had to at least get it githubed so i could track what i am doing
31.12.18 08:03:25<dmiles> basically i have 4 version that work.. but all have underlaping feature sets
31.12.18 08:04:07<dmiles> so my goal right now is to get them package and source file aligned 
31.12.18 08:28:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lddixjnuupdhosio) left #logicmoo: Quit: Connection closed for inactivity
31.12.18 10:12:30*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xvxykhtxxkcwnunc, stoopkid: stoopkid)
31.12.18 10:12:35<dmiles> cyc: (+ 1 1)
31.12.18 16:52:18*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
31.12.18 16:53:23*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
31.12.18 17:20:04*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
31.12.18 17:20:12<dmiles> cyc: (+ 1 1)
31.12.18 18:37:46*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
31.12.18 18:37:51<dmiles> cyc: (+ 1 1)
31.12.18 23:35:24<aindilis> ping
31.12.18 23:49:16*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
31.12.18 23:49:21<dmiles> cyc: (+ 1 1)
31.12.18 23:49:39* Copenhagen_Bram pokes teh shushbot Cyc
31.12.18 23:50:02<Copenhagen_Bram> cyc is pronounced shush in lojban so now cyc is shushbot
31.12.18 23:50:13* Copenhagen_Bram hugs cycbot
01.01.19 02:06:25*** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
01.01.19 02:06:59*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
01.01.19 02:07:05<dmiles> cyc: (+ 1 1)
01.01.19 02:07:46<cyc> cyc: (+ 1 1)
01.01.19 02:08:06<aindilis> cyc: (+ 1 2)
01.01.19 02:09:27*** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
01.01.19 02:10:09*** Join: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
01.01.19 02:10:15<dmiles> cyc: (+ 1 1)
01.01.19 02:10:16<cyc> "2"
01.01.19 02:10:47<aindilis> cyc: (+ 1 1)
01.01.19 02:10:49<cyc> "2"
01.01.19 02:11:00<aindilis> I really need to write the perl version of this
01.01.19 02:11:05<aindilis> or prolog, if there is a prolog irc bot
01.01.19 02:49:33<aindilis> hello
01.01.19 05:37:44<aindilis> dmiles: should I compare function names etc to see if there are collisions between RCyc and DAYDREAMER, and rename things in DAYDREAMER if there are?
01.01.19 05:38:11<aindilis> also, I see assert/retract but I don't see any way to query the kb - do you know which functions that would involve?
01.01.19 08:14:24<dmiles> Gate query code is "prove" iirc.. checking now
01.01.19 08:14:29<aindilis> k
01.01.19 08:14:43<aindilis> happy new year btw!
01.01.19 08:15:25<dmiles> https://github.com/eriktmueller/daydreamer/blob/master/gate_prove.cl
01.01.19 08:15:46<dmiles> you to! ty
01.01.19 08:16:25<aindilis> :) I hope this year is a very productive one wrt PrologMUD and your Yak Shaving Doc
01.01.19 08:17:41<aindilis> that gate_prove.cl code is nice and short
01.01.19 08:18:01<dmiles> though also there is.. https://github.com/eriktmueller/daydreamer/blob/2ee977fc0402c12d9d6eaea70485ab3a42840546/gate_cx.cl#L125-L141 
01.01.19 08:18:39<dmiles> AND https://github.com/eriktmueller/daydreamer/blob/2ee977fc0402c12d9d6eaea70485ab3a42840546/gate_cx.cl#L434
01.01.19 08:22:46<dmiles> he does lots of calling of cheaper code that would nomrlaly be more like a query
01.01.19 08:24:06<dmiles> sorta like calling (all-instances ..) isntead of (cyc-query (#$isa ?X ..) .)
01.01.19 08:26:13<dmiles> lke instead of (cyc-query (foo bar ?X)..)   he is likely to have used  (ob$get bar 'foo)
01.01.19 08:28:39<dmiles> btw it was things like that that made me decide to impl Lisp in Prolog
01.01.19 08:29:28<dmiles> since Lisp objects like most OO belongs as assert/retract/query
01.01.19 08:30:07<dmiles> in order to maximize OO to the super powers of logic
01.01.19 08:38:52<aindilis> cool!
01.01.19 08:39:07<aindilis> srry was futzing with zoneminder
01.01.19 08:41:40<aindilis> reminds me of AMOP
01.01.19 08:57:36<dmiles> *nod*
01.01.19 09:00:49<dmiles> i have had for years no doubt that one day all programs will operate on this principle
01.01.19 09:01:20<aindilis> well how's it different than LogTalk
01.01.19 09:02:05<dmiles> LogTalk is actually a GREAT EXMAPLE of this principle
01.01.19 09:02:17<aindilis> cool, so it's worth learning?
01.01.19 09:03:20<dmiles> though what i found is that the author of LogTalk wanted so badly to follow this principle that he made it impossible for anyone to do OO
01.01.19 09:03:30<dmiles> well sorry he did certianly not make it imposssible
01.01.19 09:03:48<dmiles> just that you are constanlty building from the ground up
01.01.19 09:04:17<dmiles> for example.. immagine you want an object that is a name+email of a person
01.01.19 09:04:58<dmiles> in logtalk these values are asserted and retracted allong a object isntnace you create
01.01.19 09:05:27<dmiles> the hard part for me was i needed a object isntnace creator
01.01.19 09:05:39<dmiles> i mean i had to write one
01.01.19 09:06:25<dmiles> stil not an issue.. but it was very confusing as to why (i* needed to
01.01.19 09:06:35<aindilis> yeah that's strange
01.01.19 09:07:34<dmiles> and there was no examples of logtalk doing that even for its own innerworklings
01.01.19 09:08:32<aindilis> aren't those called factories and aren't they just fundamentally part of OO?  Also, isn't there usually a init method?
01.01.19 09:08:46<dmiles> so i felt like the author thought such a paradymn is supposed to be discouraged (but doesnt publaicaly admit it)
01.01.19 09:09:01<dmiles> right exactly
01.01.19 09:09:53<dmiles> it was that Logtalk is specifically attempting to avoid the conventual OO
01.01.19 09:10:31<dmiles> though it promotes the idea of singltons from OO
01.01.19 09:11:18<aindilis> ah yeah
01.01.19 09:11:51<dmiles> i fent like its mission was to trick me into constantly rethinking "should i be using a singlton here?"
01.01.19 09:12:38<dmiles> whenver my answer was "No" ... i felt like i was being punished
01.01.19 09:12:57<aindilis> weird
01.01.19 09:13:36<aindilis> do you have your factory system available 
                 <aindilis> ?
01.01.19 09:13:45<dmiles> so i wrote myu own factor systme 
01.01.19 09:13:50<dmiles> factory system
01.01.19 09:14:13<dmiles> https://github.com/TeamSPoon/wam_common_lisp/blob/master/prolog/wam_cl/soops.pl
01.01.19 09:14:48<aindilis> wow you've added a lot to that repo
01.01.19 09:15:07<aindilis> what is ./prolog/wam_cl/soops2new.pl ?
01.01.19 09:15:31<dmiles> why the code is so huge is i have 5 types of objects that i am experimenting supported
01.01.19 09:15:51<aindilis> does it work with logtalk?
01.01.19 09:15:59<aindilis> or with your own OO system?
01.01.19 09:17:24<dmiles> looks liek soops2new.pl was one tht had a coumple bugs stopping WAM-CL from runing
01.01.19 09:18:08<dmiles> usualyl i name it soops.new and soops.next hrrm i didnt know i named it that one day
01.01.19 09:18:14<dmiles> :)
01.01.19 09:18:39<dmiles> oh yeha i extended it to work with logitalk.. tha tis one of the 5 backing ipmpls
01.01.19 09:18:45<dmiles> logtalk
01.01.19 09:18:51<aindilis> cool
01.01.19 09:19:20<dmiles> what i do is set a an object to call a static method
01.01.19 09:20:00<dmiles> like a lisp "keyword";s  (symbol-pacvkage :MYKW) 
01.01.19 09:20:35<dmiles> returns the KEYWORD package rather than storing the package as a memer on every keyword
01.01.19 09:20:49<dmiles> returns the KEYWORD package rather than storing the package as a memer on every Symbol tha tis also a keyword
01.01.19 09:21:56<dmiles> oh but of course i dont really have methods :P  i have runtime "inference"
01.01.19 09:22:26<aindilis> k
01.01.19 09:23:20<dmiles> the system infers that the result of (symbol-package :MYKW)  
01.01.19 09:23:38<dmiles> i wanted Logtalk to do stuff like this to
01.01.19 09:23:52<dmiles> the fact it wasnt designed to do this was so strange to me
01.01.19 09:24:06<aindilis> well have you made a swipl pack for soop?
01.01.19 09:24:13<aindilis> at least you didn't call it poop, right?
01.01.19 09:24:19<dmiles> hehe
01.01.19 09:24:21<aindilis> I remember when you were writing it
01.01.19 09:24:29<aindilis> or mentioning that the name crossed your mind
01.01.19 09:25:12<dmiles> "dictoo" is what i call the pack essentualy now. it implements 3 of my OO bgackends
01.01.19 09:25:30<dmiles> erm what i published 
01.01.19 09:25:42<aindilis> great
01.01.19 09:26:59<dmiles> https://github.com/TeamSPoon/dictoo/blob/master/prolog/dictoo_lib.pl
01.01.19 09:28:22<aindilis> are they mutually intelligable?
01.01.19 09:28:25<dmiles> is_logtalk_object(O):- logtalk_ready, call(logtalk:current_object(O)).
01.01.19 09:29:16<aindilis> in otherwords can you dynamically switch between them (for whatever reason?)
01.01.19 09:30:13<dmiles> well sort of.. i kinda would like to replace  soops  with dictoo  but i need to implment AMOP and all of CLOS for soops
01.01.19 09:30:24<aindilis> oh sweet
01.01.19 09:30:54<dmiles> dictoo is maily data record managment
01.01.19 09:31:25<dmiles> not type/class management
01.01.19 09:31:34<aindilis> so like a Frame system
01.01.19 09:31:45<aindilis> does it have demons?
01.01.19 09:32:51<dmiles> https://github.com/swi-to-yap/slack_prolog
01.01.19 09:33:19<aindilis> what is that?
01.01.19 09:34:07<dmiles> it is an example of what i wanted to use logtalk for
01.01.19 09:34:35<dmiles> but instead wrote dictoo/gvar that did what is done that on that page
01.01.19 09:34:47<dmiles> that i  can do process control and such with jsut dictoo
01.01.19 09:35:44<dmiles> well the $Client there is controlling a library on the slck server jsut using JSON
01.01.19 09:36:18<aindilis> ah I didn't even recognize that as Prolog lol
01.01.19 09:36:46<dmiles> hehe
01.01.19 09:37:14<dmiles> yeah it is using prolog as the language that it desierves to be
01.01.19 09:37:24<dmiles> deserves to be
01.01.19 09:38:49<dmiles> ?- $Client.files_upload(
                 <dmiles>   channels: '#general',
                 <dmiles>   as_user: true,
                 <dmiles>   file: slack_client.files.new_upload('/path/to/avatar.jpg', 'image/jpeg'),
                 <dmiles>   title: 'My Avatar',
01.01.19 09:38:50<dmiles>   filename: 'avatar.jpg',
                 <dmiles>   initial_comment: 'Attached a selfie.'
                 <dmiles> ).
01.01.19 09:39:01<aindilis> does dictoo use the same syntax (the $ and .) 
01.01.19 09:39:06<dmiles> yes
01.01.19 09:39:26<aindilis> cool
01.01.19 09:40:27<dmiles> i could make an entire career and life out of just this new language .. but then i never get to work on AI :(
01.01.19 09:40:51<aindilis> yeah we have to somehow cut to the chase with AI
01.01.19 09:41:08<dmiles> this is wher ei wish i had lots of money and could assign developers to make it their life
01.01.19 09:41:16<dmiles> since it needs to be 
01.01.19 09:41:23<aindilis> well so about that
01.01.19 09:41:45<aindilis> if we can somehow incorporate the executive dysfunction management stuff (which I need to survive) I can offer to program more for you directly
01.01.19 09:42:15<aindilis> also I'm tracking all IRC convos trawling for developers that we can align with
01.01.19 09:42:17<dmiles> oh well i see you are valuable enough i wouldnt make you work on soemthing that borring
01.01.19 09:42:35<aindilis> oh I see
01.01.19 09:42:45<dmiles> teaching and promoting the programming in dictoo
01.01.19 09:42:55<aindilis> I just mean whatever you need me to work on
01.01.19 09:43:03<aindilis> it's clear you have a better architecture than I do
01.01.19 09:43:32<aindilis> so I can offer to help you more with your code I'm thinking, just so long as we touch some of the points I need.
01.01.19 09:43:49<aindilis> like maybe I can dedicate a certain number of hours per week
01.01.19 09:44:03<aindilis> we could start small and scale it up
01.01.19 09:44:21<aindilis> I wonder what we could do if you took over parts of FLP
01.01.19 09:44:28<aindilis> if I just gave you the damn VM already
01.01.19 09:44:37<aindilis> you could see what is there
01.01.19 09:45:08<aindilis> do you have any interest in incorporating FLP into PrologMUD yet?
01.01.19 09:45:22<aindilis> like there are some package issues
01.01.19 09:45:47<aindilis> I know I'm kind of baiting and switching here - offering to help with yours and then saying we need to work on FLP.  But I just mean minimaally
01.01.19 09:45:55<aindilis> *minimally
01.01.19 09:46:13<aindilis> anyway I'm getting ready to offer you more direct work
01.01.19 09:46:21<aindilis> I've been fixing to do this now for a few weeks
01.01.19 09:46:35<aindilis> it will be a set back to FRDCSA in the short run
01.01.19 09:46:45<aindilis> but I think it's globally better
01.01.19 09:47:04<aindilis> like I'm thinking 3 hrs per day starters
01.01.19 09:47:20<aindilis> as though it were a sweat equity job
01.01.19 09:47:33<aindilis> maybe 4 days a week
01.01.19 09:47:37<dmiles> well i see the CYC thing gettign it usable to where it can replace logicmoo as a possible task
01.01.19 09:47:46<aindilis> really?
01.01.19 09:47:47<dmiles> i mean i am openminded enough to do that
01.01.19 09:47:53<aindilis> no, see
01.01.19 09:48:09<aindilis> I only intended it to bridge partway into CYC to enable better collaboration between PrologMUD and CYC
01.01.19 09:48:27<aindilis> since we have RCyc we might as well do some of the work on CYC's side is the thinking
01.01.19 09:48:29<dmiles> oh if i know other people can work on CCY i would have always used CCY
01.01.19 09:48:41<aindilis> hrm
01.01.19 09:48:50<aindilis> really?
01.01.19 09:48:54<aindilis> I thought the licensing was the issue
01.01.19 09:49:02<aindilis> anyway, whatever you think is best
01.01.19 09:49:14<aindilis> I'm willing to subordinate my goals to yours for the purposes of achieving AI
01.01.19 09:49:18<dmiles> right the ammount of cockblockage from CYC is too hiugh for the world protentuallyu
01.01.19 09:49:27<aindilis> right
01.01.19 09:49:34<aindilis> it was more an expedient
01.01.19 09:49:45<aindilis> to bank heavier on CYC until we had Psyclone
01.01.19 09:49:54<aindilis> in which case it's all portable to Psyclone anyway :)
01.01.19 09:50:04<dmiles> well want i sgoing on is i am sorta working on tools that eiother Logicmoo or CYC can use
01.01.19 09:50:10<aindilis> right
01.01.19 09:50:36<aindilis> okay well do we have a job tracking system?  like atlassian or something?
01.01.19 09:50:42<dmiles> but while i am doign that logicmoo code isnt being written (that fine) but just how it is
01.01.19 09:50:45<aindilis> we could scrum, potentially get others
01.01.19 09:51:11<aindilis> like imagine if ErikM and jbalint and Dwhitten etc scrummed with us on PrologMUD
01.01.19 09:51:44<dmiles> so anyhow iu jsut htinking.. "oh god.. if i am using logicmoo i gotta write all this extra darn code.. even if not now.. i have to do it later
01.01.19 09:52:08<aindilis> right
01.01.19 09:52:13<aindilis> you mean psyclone essentially?
01.01.19 09:52:14<dmiles> *nod*
01.01.19 09:52:26<dmiles> yes the writitng of Pysiclone
01.01.19 09:53:30<dmiles> its jsut hard to decide how to bugest time to create AI when i also have to write psyclone 
01.01.19 09:53:52<aindilis> which is why I'm offering to help
01.01.19 09:54:00<aindilis> I could be a manager too
01.01.19 09:54:08<aindilis> and coordinate some other coders
01.01.19 09:54:32<dmiles> oh i am nmot really complaining i am jsut thinking of the time we take making FLP in CYC vs Logicmoo
01.01.19 09:54:54<aindilis> oh, well can't it do FLP:CYC and FLP:LogicMOO?
01.01.19 09:55:09<aindilis> all I really need is some executive skills code
01.01.19 09:55:35<aindilis> see https://frdcsa.org/~andrewdo/dmiles/autism/whataspe.htm to see what is lacking (needs implementation)
01.01.19 09:56:25<aindilis> yeah I guess it's harder than I thought, maybe we hold off on you touching FLP
01.01.19 09:57:17<dmiles> the LARKC-CL projec ti am working on .. basically ythat is supposed to make it possible to impl PrologMUD in CYC
01.01.19 09:57:33<aindilis> oh right because it loads prolog
01.01.19 09:57:54<dmiles> of course i am completely changing how CYC's intenral kernel works at the same time but it is some small stuff
01.01.19 09:58:39<dmiles> small stuff= making CYC compatable with Prolog based flow control
01.01.19 09:59:33<aindilis> so did you want me to clock in for 3 hrs 4 times a week?
01.01.19 09:59:50<dmiles> to give example 1 month of coding on CYC   vs  1 year coding on Logicmoo 
01.01.19 10:00:14<dmiles> (to get them equally capable)
01.01.19 10:00:18<aindilis> yeah
01.01.19 10:00:58<aindilis> well the good news is that once you get it running on CYC, you will have it *running* - you can always worry about replacing CYC w/ Psyclone alter
01.01.19 10:01:00<aindilis> *later
01.01.19 10:01:10<dmiles> well i am looking at hte commercial project of BINA48 v2
01.01.19 10:01:37<aindilis> I am cool just so long as there's a viable open source version
                 <dmiles> that Terasem has been asking to get done
01.01.19 10:01:50<aindilis> of what we work on
01.01.19 10:01:55<aindilis> not the whole BINA48 v2
01.01.19 10:02:12<dmiles> yeah she will be opensourced
01.01.19 10:02:17<aindilis> no way
01.01.19 10:02:19<aindilis> :)
01.01.19 10:02:36<aindilis> link ?
01.01.19 10:02:49<aindilis> so they just want the copyright?
01.01.19 10:02:51<dmiles> i mean if i am doing it.. i am doing it a certain way.. if they want to reduce the pay be several million due to opensrcness .. that is up to thems
01.01.19 10:03:12<aindilis> ah okay
01.01.19 10:03:28<aindilis> can I ask you a BINA question?
01.01.19 10:03:47<dmiles> sure
01.01.19 10:04:09<aindilis> how did it respond with that eloquent discussion of war ethics in the philosophy class?  was that prewritten or did it synthesize that?
01.01.19 10:04:24<aindilis> *she
01.01.19 10:04:49<dmiles> it is using a infobotting techniquque wher eit thinks everything it heard was its own thoujghts
01.01.19 10:05:07<dmiles> dacid hanson wrote most of those things
01.01.19 10:05:32<aindilis> interesting
01.01.19 10:05:45<dmiles> my code converts those into its ideas in btxml
01.01.19 10:06:08<aindilis> ah sweet
01.01.19 10:06:09<dmiles> (that i wrote in C#)
01.01.19 10:06:34<aindilis> okay interesting
01.01.19 10:06:40<dmiles> basicalyl its a prolog-like version of AIML that things get stored in
01.01.19 10:07:23<dmiles> it based on "silient mental cahnnels"
01.01.19 10:07:43<dmiles> tha tis that there are hidden AIML conversaions going on in the bots head
01.01.19 10:07:56<aindilis> interesting
01.01.19 10:08:19<aindilis> does it use a dialog manager?
01.01.19 10:09:07<dmiles> not really.. in practice it sucks pretty bad.. i think they must have a very good marketing team
01.01.19 10:09:25<dmiles> sometimes it doesnt suck though
01.01.19 10:09:50<aindilis> well remember that til site?
01.01.19 10:09:59<dmiles> the dialog managment part is just that it reacting to what it just said in its head
01.01.19 10:10:41<dmiles> https://github.com/search?q=heardSelfSay&type=Code
01.01.19 10:11:49<dmiles> til site?
01.01.19 10:11:51<aindilis> https://dit.uvt.nl
01.01.19 10:11:53<aindilis> srry dit
01.01.19 10:12:39<aindilis> https://dit.uvt.nl/annotated-examples.html
01.01.19 10:12:50<aindilis> what is scheduled for BINA48 v2?
01.01.19 10:12:56<dmiles> *nod* i want to get that into version 2 wherrei am planing the "heardSelfSay" channel
01.01.19 10:13:06<aindilis> sweet!
01.01.19 10:13:22<dmiles> well that is what daydreamer will one day secretely do
01.01.19 10:13:31<aindilis> cool
01.01.19 10:14:03<dmiles> that is what huiamsn do .. we "handle" our selves 
01.01.19 10:14:24<aindilis> yeah
01.01.19 10:14:31<dmiles> based on invisible interal conversaions
01.01.19 10:14:36<dmiles> internal
01.01.19 10:15:07<aindilis> do you have any pointers on the conversion to CycL?
01.01.19 10:15:35<aindilis> you said it was hard, I said it didn't seem so.  I should probably just finish reading the book and then it should be apparent how to proceed, right?
01.01.19 10:15:55<aindilis> so like in two weeks I should be ready
01.01.19 10:16:18<dmiles> its hard and not hard.. the  hard part is deciding whne the CycL is good
01.01.19 10:16:35<dmiles> not deciding the CycL
01.01.19 10:16:50<dmiles> but deciding if it is good enought .. etc
01.01.19 10:16:59<aindilis> k
01.01.19 10:17:29<dmiles> i thjnk reading the book is super helpfull.. i found myself reverse/engineerign and guessing 80% of the time
01.01.19 10:17:58<aindilis> oh so the book is only 20% of the job?
01.01.19 10:18:05<dmiles> jsut do to not having read the book recently when i wass working onit
01.01.19 10:18:14<aindilis> oh okay
01.01.19 10:18:43<dmiles> book would ahve made that 80% maybe 20%
01.01.19 10:19:46<aindilis> alright, well I should be on tonight around 6-8 PM my time, so 3 to 5 yours
01.01.19 10:19:47<dmiles> jsut due to the book and code being 20% out of sync
01.01.19 10:19:55<aindilis> ah right
01.01.19 10:20:16<aindilis> let's make this the most productive PrologMUD year yet
01.01.19 10:20:20<aindilis> :)
01.01.19 10:20:57<dmiles> yes!
01.01.19 10:21:33<aindilis> k ttys!
01.01.19 10:23:47<dmiles> nn!
01.01.19 19:12:54*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
01.01.19 19:18:23*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
01.01.19 19:18:28<dmiles> cyc: (+ 1 1)
01.01.19 20:07:50*** Join: b3nszy (~b3nszy@207-244-182-155-dhcp.mia.fl.atlanticbb.net, b3nszy: b3nszy)
01.01.19 20:07:55<dmiles> cyc: (+ 1 1)
01.01.19 20:08:08<b3nszy> dmiles: have you ever looked into game design for AI research
01.01.19 20:52:39<aindilis> hey b3nszy 
01.01.19 20:53:19<b3nszy> hey 
01.01.19 20:53:36<b3nszy> Im looking into game design now
01.01.19 20:53:39<b3nszy> for AI research
01.01.19 20:53:43<aindilis> ah, cool
01.01.19 20:53:51<aindilis> btw I think I have something for you
01.01.19 20:53:53<aindilis> one sec
01.01.19 20:54:35<aindilis> oh nm it was those papers
01.01.19 20:54:43<aindilis> yeah as far as game design I do a little of that
01.01.19 20:54:55<aindilis> what kind of game?  how would it enable AI?
01.01.19 20:55:24<aindilis> still I think I have something for you but I cannot remember what
01.01.19 21:00:50<aindilis> b3nszy: ?
01.01.19 21:01:12<b3nszy> hey 
01.01.19 21:01:15<b3nszy> not sure
01.01.19 21:01:18<b3nszy> god games
01.01.19 21:01:22<b3nszy> simulation games
01.01.19 21:01:31<aindilis> I have a lot of those I'm writing
01.01.19 21:01:36<b3nszy> http://www.speciesgame.com/
01.01.19 21:01:44<b3nszy> but really I want to build a virtual world
01.01.19 21:01:46<aindilis> here I'll post the list of my games I'm writing
01.01.19 21:01:48<b3nszy> that is complex and emergent
01.01.19 21:01:54<b3nszy> but cant find any info on how to build such a system
01.01.19 21:02:13<b3nszy> I feel like environment building should be a part of AI research
01.01.19 21:02:17<b3nszy> building suitable worlds
01.01.19 21:02:24<b3nszy> or environments
01.01.19 21:02:36<aindilis> https://pastebin.com/zDbbCCHr
01.01.19 21:02:49<aindilis> any of that interest you?
01.01.19 21:04:10<aindilis> metaverse is a general purpose cultural simulation game
01.01.19 21:04:35<aindilis> you can simulate past present present future and alternative versions of those 
01.01.19 21:04:57<b3nszy> yeah like second-life
01.01.19 21:05:09<b3nszy> enders game ai sounds awesome
01.01.19 21:05:28<aindilis> yeah it does, I really wish someone would do that
01.01.19 21:05:33<aindilis> but I'm writing it in the meantime
01.01.19 21:06:13<aindilis> I actually wrote a 3d version of the battleroom using a 3d renderer I wrote that supported anaglyph 3d rendering
01.01.19 21:07:20<aindilis> what a wonder it would be to have all the code I've lost
01.01.19 21:08:09<b3nszy> so you were into making games as well?
01.01.19 21:08:13<b3nszy> I'm not really big into games
01.01.19 21:08:21<aindilis> when I was younger I made several games
01.01.19 21:08:23<b3nszy> but it seems like the perfect industry to do real AGI research
01.01.19 21:08:31<aindilis> but then I switch to scientific simualtions
01.01.19 21:08:44<aindilis> the closest thing to the ender's game ai in existence was Lenat winning the Travelers competition
01.01.19 21:08:47<b3nszy> as of now there's so little funding in AGI since it's seen as a distant dream
01.01.19 21:08:51<aindilis> you know about that right?
01.01.19 21:10:16<aindilis> Lenat and Eurisko gained notoriety by submitting the winning fleet (a large number of stationary, lightly-armored ships with many small weapons)[3] to the United States Traveller TCS national championship in 1981, forcing extensive changes to the game's rules. However, Eurisko won again in 1982 when the program discovered that the rules permitted the program to destroy its own ships, permitting it to continue to use much t
                 <aindilis> strategy.[3] Tournament officials announced that if Eurisko won another championship the competition would be abolished; Lenat retired Eurisko from the game.[4] The Traveller TCS wins brought Lenat to the attention of DARPA,[5] which has funded much of his subsequent work.
01.01.19 21:11:54<b3nszy> how did it work?
01.01.19 21:12:08<aindilis> it worked much like AM (AutoMathematician)
01.01.19 21:12:13<aindilis> there are many papers on it
01.01.19 21:12:19<aindilis> I will link to the best one on AM
01.01.19 21:12:35<aindilis> I forget which ones discuss Eurisko in enough detail, but I am working on reimplementing Eurisko
01.01.19 21:12:49<aindilis> https://github.com/aindilis/eurisko-resources
01.01.19 21:13:45<aindilis> this is probably it: https://github.com/aindilis/eurisko-resources/blob/master/doc/ADA155378.pdf
01.01.19 21:14:31<aindilis> btw you should check out DAYDREAMER, many people say it's the closest thing to a Cognitive Archietecture out there
01.01.19 21:15:45<aindilis> https://www.amazon.com/dp/B008G1QZY0/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1&fbclid=IwAR1-_QWZqntaJevHRnqni7QpFzV1LD7nPXCgmxXB2pOL1rZcMp6COoL6_JE#customerReviews
01.01.19 21:17:05<b3nszy> those this book
01.01.19 21:17:13<b3nszy> address the story making process within humans?
01.01.19 21:17:18<b3nszy> ive been thinking about that a lot lately
01.01.19 21:17:28<aindilis> well sort of it addresses the kind of thinking people do
01.01.19 21:18:20<aindilis> for instance, say you were imagining an alternate version of past events, and you realized something worse happened, that would make you feel good events went the way they did.  the daydreamer tracks emotions and emotional needs and wraps them into a continuous deliberative system. it's really very nice.
01.01.19 21:18:59<b3nszy> could this be useful in developing a game?
01.01.19 21:19:08<b3nszy> could you use this systems somehow 
01.01.19 21:19:19<aindilis> well, you can use it to model people's behavir
01.01.19 21:19:42<aindilis> for a multiagent simulation
01.01.19 21:20:08<aindilis> aka lots of NPCs
01.01.19 21:20:19<aindilis> best part is the code is GPL
01.01.19 21:22:12<b3nszy> gpl?
01.01.19 21:22:29<aindilis> gnu public license
01.01.19 21:25:56<b3nszy> have you implemented daydreamer?
01.01.19 21:26:02<b3nszy> in any of your AI systems
01.01.19 21:26:19<aindilis> not yet, but I'm trying to integrate it with them
01.01.19 22:40:08<b3nszy> aindilis: 
01.01.19 22:40:12<b3nszy> read moe about daydreamer
01.01.19 22:40:19<b3nszy> that's so cool so it's emotion-driven goals?
01.01.19 22:40:29<b3nszy> that would be awesome in a game with emotional NPC's
01.01.19 22:44:32<aindilis> yeah
01.01.19 22:44:49<aindilis> did you want to start writing such a game?
01.01.19 22:45:19<b3nszy> maybe Im starting with a simple game
01.01.19 22:45:26<b3nszy> but I can see a lot of promise in game design and AI
01.01.19 22:45:38<b3nszy> that would be awesome
01.01.19 22:45:41<b3nszy> you dont even have to make a game
01.01.19 22:45:55<b3nszy> but somehow input the daydreamer cognitive architecture into sim NPC's
01.01.19 22:47:07<aindilis> I think LogicMOO does some integration with The Sims
01.01.19 22:47:23<aindilis> like it has a BDI and basic emotional rules
01.01.19 22:47:39<aindilis> I think dmiles is interested in integrating DAYDREAMER to take over those things
01.01.19 22:48:29<aindilis> right now I'm trying to get DAYDREAMER to use a large commonsense knowledge base to make it easier to model a range of behaviors
01.01.19 22:48:48<aindilis> and hopefully have its rules generated automatically from rules in the KB
01.01.19 22:49:03<aindilis> I'm also integrating it with FLP to do social reasoning
01.01.19 22:57:53<b3nszy> for what
01.01.19 22:58:25<aindilis> well FRDCSA tries to do social reasoning as well
02.01.19 00:07:32*** Quit: b3nszy (~b3nszy@207-244-182-155-dhcp.mia.fl.atlanticbb.net) left #logicmoo: Remote host closed the connection
02.01.19 03:56:12<stoopkid> dmiles: i have so many issues with your rant in dependent lol
02.01.19 03:58:38<stoopkid> 1. formal verification folks actually aren't trying to promise AGI, idk what formal verification person ever promised to deliver that with formal verification alone
02.01.19 04:00:09<stoopkid> 2. formal verification folks really aren't (and probably shouldn't be) trying to deliver any kind of fully unconstrained AGI at all, in fact quite the opposite
02.01.19 04:00:39<stoopkid> we wanna micromanage that brain down to arbitrary levels of logical precision
02.01.19 04:03:22<stoopkid> mainly for just one reason: we want an actually guaranteed constraints enforcement system that we can control with *our own minds*, hence none of what provides those guarantees can be changed really without creating an entirely new system and reorienting our minds and our metatheoretic assumptions/conclusions around that new mental framework / "foundation of math"
02.01.19 04:04:53<stoopkid> a lot of formal verification folk probably wouldn't even want AGI research to *begin* until any application of it was to be *surely* constrained by such a system
02.01.19 04:05:03<stoopkid> i'd probably include myself in that :)
02.01.19 04:05:40<stoopkid> i mean: research of the variety of deploying it to test..
02.01.19 04:06:14<stoopkid> unconstrained AGI? not necessarily an easily reversible decision :)
02.01.19 04:06:29<stoopkid> look at humans, we're AGIs and we're planet-wreckers
02.01.19 04:10:39<stoopkid> a lot of programmers and computer scientists look at that attitude as ridiculous, like, you would literally have to program it with the capability to do that but a) i am positive that this is within our capabilities, b) i see absolutely no reason to trust that certain people wouldn't program exactly the kinds of things that would actually trigger the AGI into also being a planet-wrecker
02.01.19 04:11:13<stoopkid> it's really just a very short step from AGI + *any directive for self-preservation at all*
02.01.19 04:14:19<stoopkid> all you need is for it to be attached to enough actuators to bootstrap itself into actually preserving itself, and for its "subservience to humans" check to fail, and game over, obsoletion and extinction of humans
02.01.19 04:17:06<stoopkid> luckily i'm not too worried because i think everybody's AIs will fail at actually being general without some sort of strong & consistent foundation mimicking or generalizing on what seems to be the nearly-universally shared human-mathematical foundation
02.01.19 04:18:54<stoopkid> it's gotta be able to like... "think"
02.01.19 04:20:43<stoopkid> think like in the way that your mind can essentially automatically & subconsciously break down any experience / thought into a gestalt & abstract topological complex and relate them based on purely structural logic
02.01.19 04:22:09<stoopkid> think how cleanly your mind accomplishes that... this is a pretty far stretch from shit like "general rules & logic programming framework" or "neural nets" or "expert systems"
02.01.19 04:24:39<stoopkid> i mean, i say it's a far stretch from neural nets but you can say "wait but the brain is just a neural net", and yea it's actually just a mish-mash of chemical reactions so what is this universally shared & universally applicable perfect pristine platonic perfect logic i.e. "math" ?
02.01.19 04:25:34<stoopkid> it's a *specific* thing, in a certain sense it's *not* general because being "more general" would just "break it"
02.01.19 04:26:01<stoopkid> what else would you have? "the things that don't even make sense" ?
02.01.19 04:28:34<stoopkid> my hypothesis is that biologically this is actually one of the primary roles of the prefrontal cortex, is to solidify this particular structure
02.01.19 04:30:03<stoopkid> or rather, to actually "reflect" this structure and give us the ability to actually consciously manipulate it
02.01.19 04:30:07<stoopkid> i.e. "do math"
02.01.19 04:30:45<stoopkid> what else really separates us from animals besides opposable thumbs on two free hands?
02.01.19 04:34:24<stoopkid> but now we've got this math, and we *know* the math, really really deeply, and that's a far stretch from our work in expert systems and neural nets and etc...
02.01.19 04:35:34<stoopkid> what, like animals, can't our expert systems & neural nets replicate? the math that unifies the pure structure of their experiences
02.01.19 04:38:00<stoopkid> this isn't to discredit all the rest of the work that's gone into AGI via expert systems, neural nets, etc.. that work is almost directly analogous to "the rest of the brain besides the prefrontal cortex"
02.01.19 04:39:05<stoopkid> or in many cases what i would even just classify as "regular software" (a lot of logic programming stuff)
02.01.19 04:39:57<stoopkid> (any deterministic expert system, ex. computer algebra systems, wolfram alpha, etc..)
02.01.19 04:43:55<stoopkid> now from a practical perspective going back to the original thing with your rant is.. i don't see any reason to think that we would know how to achieve human-math for an AI besides for just directly giving it the foundation in the first place.. i see a lot of AI research as being like.. "just throw more brains at it and eventually it'll start thinking" but i really don't think that's how it works
02.01.19 04:46:18<stoopkid> so this is where i think the "computational foundations of math" research (which is nearly exactly "the formal verification peoples' " research) is actually extremely relevant to actually eventually providing AGI
02.01.19 04:48:14<stoopkid> admittedly, these foundations so far are maybe still somewhat lacking, but imo it's no coincidence that AGI is not here yet
02.01.19 04:49:20<stoopkid> it *is* the "general" in the "general intelligence"
02.01.19 04:50:51<stoopkid> think, we all sat here in this channel and agreed that logically 0.9999.... = 1 in the real numbers
02.01.19 04:50:52<stoopkid> why
02.01.19 04:51:18<stoopkid> and why is literally every other person in the world gonna agree to that?
02.01.19 04:53:15<stoopkid> those who know that it's true know that any doubt that it's true must literally have come only from a miscommunication of what the underlying structure was, i.e. what exactly this structure everybody's calling "the real numbers" is
02.01.19 04:53:35<stoopkid> turns out it's *not* just sequences of digits, hence the confusion
02.01.19 04:56:20<stoopkid> and after properly communicating the structure in question, we all, literally every single person, will whole-heartedly agree that it's true, and maybe "true" is not quite a strong enough word to express our commitment to this truth, we would all whole-heartedly accept that all of logic would just be entirely broken and meaningless were this to be false, just the same as if we were to assert that true is false and up is
                 <stoopkid> down
02.01.19 04:58:34<stoopkid> and even further, this isn't just a shared subjective bias as to the truth of this statement, it's not just "platonically" true, this logic actually seems to dictate the literal objective physical universe
02.01.19 05:02:46<stoopkid> ex. the pythagorean theorem results out of this pure logic applied to our "default" spaces like N^2 , R^2, taken to a limit.. and then it's actually experimentally true out to an extremely convincing approximation
02.01.19 05:07:28<stoopkid> i mean, we can see just how general it manages to be while still maintaining coherence, our mental framework coherently encompasses both euclidean and non-euclidean geometry... and arbitrary other geometries... and these are all in specific relation to each other regardless of whatever particular form the actual universe takes
02.01.19 05:12:30<stoopkid> now let's maybe look at some examples of what kinds of mathematical things are actually providing all this capacity for structural homogenization and manipulation of seemingly completely arbitrary concepts
02.01.19 05:13:00<stoopkid> https://en.wikipedia.org/wiki/Topological_space
02.01.19 05:13:20<stoopkid> "Being so general, topological spaces are a central unifying notion and appear in virtually every branch of modern mathematics."
02.01.19 05:13:42<stoopkid> "The definition of a topological space relies only upon set theory and is the most general notion of a mathematical space that allows for the definition of concepts such as continuity, connectedness, and convergence."
02.01.19 05:14:13<stoopkid> https://en.wikipedia.org/wiki/Abstract_algebra
02.01.19 05:15:40<stoopkid> "By abstracting away various amounts of detail, mathematicians have defined various algebraic structures that are used in many areas of mathematics. For instance, almost all systems studied are sets, to which the theorems of set theory apply."
02.01.19 05:16:57<stoopkid> https://en.wikipedia.org/wiki/Higher-order_logic
02.01.19 05:18:19<stoopkid> HOL is interesting because it's purely syntactic but it can express seemingly everything, but then we wonder... what makes these syntactic things true in the first place
02.01.19 05:19:21<stoopkid> we attach semantics to it, and where are we pulling these semantics from
02.01.19 05:19:59<stoopkid> the first two kinds of things, these generic "spaces"
02.01.19 05:20:47<stoopkid> and that's why we have:
02.01.19 05:20:48<stoopkid> https://en.wikipedia.org/wiki/Model_theory
02.01.19 05:21:40<stoopkid> "Model theory recognises and is intimately concerned with a duality: it examines semantical elements (meaning and truth) by means of syntactical elements (formulas and proofs) of a corresponding language.
                 <stoopkid>     universal algebra + logic = model theory."
02.01.19 05:28:59<stoopkid> interestingly, this all seems even further connected by the fact that the set of unary propositions you can form in a logic equipped with both conjunction and disjunction turns the underlying set in question (the set that the x's and y's are coming from in "forall x exists y") into a topological space
02.01.19 07:22:55<aindilis> dmiles: I wrote a basic Event Logging framework for FRDCSA called ELog2
02.01.19 07:23:13<aindilis> this allows you to assert that things took place at a particular time or duration
02.01.19 07:23:23<aindilis> going to use it with SKSI
02.01.19 07:23:29<aindilis> to integrate all my sensors
02.01.19 07:23:47<aindilis> and then do anomaly detection
02.01.19 07:24:06<aindilis> it improves on Event-Log which only allow you to assert strings, not formula
02.01.19 07:24:23<aindilis> still has a ways to go before it will be production ready
02.01.19 07:24:37<aindilis> meanwhile zoneminder has an API
02.01.19 07:53:42<dmiles> stoopkid, the question i have is: what sort of a degree or fields of study would have been pursued by the most likely to be sucessfull AGI research candidates?  
02.01.19 08:05:13<dmiles> right on aindilis
02.01.19 08:12:27<dmiles> admittedly this question assumes that the candidate would at least now have a strong interest in study of AGI
02.01.19 08:14:23<dmiles> Otehr questions related to my question.. is who do we have to answer that first question?
02.01.19 08:15:59<dmiles> I suppose my hypothesis is that those whom are currently answering *that* question needs to do more research
02.01.19 08:18:37<dmiles> certainly those people have not been reading the back covers of AI books.. and if they had, would their conclusions still be accurate?
02.01.19 08:20:16<dmiles> (the second part of that question is just due to the fact that the answer may have evolved over time)
02.01.19 08:21:05<dmiles> since answer to the very first question may have also eveolved:   what sort of a degrees or fields of study would have been pursued by the most likely to be sucessfull AGI research candidates?  
02.01.19 08:35:22<dmiles> 35 years ago it was a life/death question someone put to me
02.01.19 08:36:09<dmiles> so i spent several weeks trying to come up with the answer
02.01.19 08:37:24<dmiles> i looked into Schank's Wittenstiegn's Russel's eductational upbringings
02.01.19 08:38:35<dmiles> oh and in particual Noam Chomsky
02.01.19 08:43:26<dmiles> i suspect that if one was to try to do the same reseach as i did then, they might come up with differnce answers
02.01.19 08:46:09<dmiles> the sticking points i have with otehrs is probably due to not having yet updated my results
02.01.19 12:32:59<stoopkid> dmiles: hmmm, idk i think there's at least several distinct fields of study that afaict should represent necessary components of AGI
02.01.19 12:35:44<stoopkid> ex. i assume you need a mathematical foundation in there somewhere but this is just one component; a knowledge-representation framework
02.01.19 12:36:37<stoopkid> i have assumptions about what that mathematical foundation would need to look like (ex. a lot like humans')
02.01.19 12:37:06<stoopkid> but even just designing this foundation, that's already like 10 different fields of study *at least*
02.01.19 12:37:43<stoopkid> regular math, computer science, philosophy, proof theory, etc..
02.01.19 12:39:32<stoopkid> and all of this is kind of far separated from AI work like "fine-grained motor-control"
02.01.19 12:40:53<stoopkid> it's completely different from research in "planning" although it can facilitate planning by providing a foundation in which those plans are formulated
02.01.19 12:43:15<stoopkid> it doesn't itself provide the knowledge that "expert systems" use, but can again facilitate that by providing a homogeneous knowledge representation & manipulation framework for the knowledge stored in that expert system
02.01.19 12:43:25<stoopkid> it doesn't do the kind of "learning" that neural nets, genetic algorithms and etc.. use
02.01.19 12:44:53<stoopkid> but can again facilitate that kind of learning by providing a KR framework
02.01.19 15:11:59<dmiles> stoopkid: i mostly agree with what you said
02.01.19 15:13:04<dmiles> thoiugh i have to reread what you said before this lart question of mine
02.01.19 15:13:11<dmiles> last*
02.01.19 15:17:29<dmiles> strong & consistent foundation mimicking or generalizing on what seems to be the nearly-universally shared human-mathematical foundation
                 <dmiles> [01:18] <stoopkid> it's gotta be able to like... "think"
                 <dmiles> [01:20] <stoopkid> think like in the way that your mind can essentially automatically & subconsciously break down any experience / thought into a gestalt & abstract topological complex and relate them based on purely structural logic
02.01.19 15:17:30<dmiles> [01:22] <stoopkid> think how cleanly your mind accomplishes that... this is a pretty far stretch from shit like "general rules & logic programming framework" or "neural nets" or "expert systems"
02.01.19 15:18:21<dmiles> all the research i've read into this has been by Roger Schank
02.01.19 15:18:47<dmiles> whom explained exactly how that was done by humans and proposed ways to do it on computers
02.01.19 15:20:17<dmiles> though i've read scores of other books that speculated.. Schanks was the only one that gave a clear enough model
02.01.19 15:22:17<dmiles> (though I had  to read at least 10 of his 30 books to understand wat he was discribing)
02.01.19 15:23:16<dmiles> which i agree  this was a pretty far stretch from shit like "general rules & logic programming framework" or "neural nets" or "expert systems"
02.01.19 15:24:46<dmiles> though i knew the only way to build what he was proposing required first a build an expert system to invent a logic programming framework to "set it up" once
02.01.19 15:25:14<dmiles> since it require too much work on the part of humans (or me) to build it myself
02.01.19 15:26:03<dmiles> so sometimes i saw first a programming language that was expressive enouhjgh was needed
02.01.19 15:26:34<dmiles> i say this in the past tesnbse due to not thinking about this lately
02.01.19 15:27:14<dmiles> though i been acting off this information for a while
02.01.19 15:28:55<dmiles> one day i think other parts of society will finally understand what Schank was trying to teach
02.01.19 15:29:22<dmiles> and will start to go down the same path that i did
02.01.19 15:29:37<dmiles> well societly was for a few years
02.01.19 15:30:49<dmiles> but most of those researchers are dead and gone
02.01.19 15:31:32<dmiles> so will have to wait for the next genration of researchers to get where the rest of us got to
02.01.19 15:35:14<dmiles> i wanted to see if schanks learning model could be taught arithemtic
02.01.19 15:35:39<dmiles> and came up with a way that it could be
02.01.19 15:35:58<dmiles> (about 7 years ago)
02.01.19 15:36:37<dmiles> what is embarassing i still am bitching about no one but me willing to work on it!
02.01.19 15:36:45<dmiles> not even schank will
02.01.19 15:37:27<dmiles> btw arround the same time Cycorp started to teach Cyc how to teach arithemetic
02.01.19 15:38:05<dmiles> cyc: (+ 1 1)
02.01.19 15:38:24<dmiles> when its up later i'll show some of the things it uses
02.01.19 15:38:42<dmiles> my system uses simular means 
02.01.19 15:39:10<dmiles> (except is  the taught program vs that Cyc teaches)
02.01.19 15:40:25<dmiles> this i actualy important insight to how my system works.. it works by building a teacher program that reminds it how to do it every time
02.01.19 15:41:00<dmiles> that was what Schank and i proposed
02.01.19 15:42:09<dmiles> is we construct mental frameworks that we listen to in order to perform tasks
02.01.19 15:43:28<dmiles> with about a 1-3 second memory buffer
02.01.19 15:45:18<dmiles> one can learn enough and visualize enough in that ammount of time to do most complex of all maths
02.01.19 15:46:08<dmiles> (because it happens partually via memory jogging) 
02.01.19 15:46:47<dmiles> teh problem is that NNs computational storage requirements were too high
02.01.19 15:47:11<dmiles> so we came up with MOP (memory organization packets)
02.01.19 15:47:26<dmiles> (differnt from AMOP :P)
02.01.19 15:47:52<dmiles> MOPs are like mini computer game engines
02.01.19 15:48:54<dmiles> that barely contain enough of the domain .. but enough to ryme with the rest of the system
02.01.19 15:49:48<dmiles> i mean  contain enough of the domain but *still can* ryme with the rest of the system
02.01.19 15:50:16<dmiles> ryming in this case is the way it causes the least disturbance
02.01.19 15:51:16<dmiles> soemtimes i think i am jsut going to accept offers to work on my system
02.01.19 15:52:25<dmiles> in closed source way that i wont get any credit
02.01.19 15:52:40<dmiles> jsut since i am so tired of the world not having it
02.01.19 15:53:33<dmiles> or do what Schank did .. write 10-20 books untiul someone else understands it?
02.01.19 15:56:05<dmiles> though i do think if i was going to have to explain it to myself due to a brain reset i could do it in less than 80 hours of video
02.01.19 15:56:24<dmiles> i might actually try that soon !~
02.01.19 15:56:44<dmiles> most people are smarter than me and might actualy get it to
02.01.19 15:57:39<dmiles> i think Feignman tried something like this once
02.01.19 15:58:16<dmiles> i sorta think anyone who cant is talking out their arse.. so i better at least try
02.01.19 16:09:36<dmiles> i wonder if it will be watchable by others.. i'll just have to do it and find out.. might try an hour of it tonoghjt when i am back from Oregon
02.01.19 16:12:07<dmiles> MOPs = http://www.oxfordreference.com/view/10.1093/oi/authority.20110803100149680
02.01.19 16:15:24<dmiles> he formalizes them here:  https://web.stanford.edu/class/linguist289/schank80.pdf
02.01.19 16:16:15<dmiles> what becomes interesting is that you can use these for things like doing arithemetic
02.01.19 16:17:09<dmiles> evne though on their face (like his examples) would seem a bit too hihglevel.. but that is just his exmaples
02.01.19 16:18:38<dmiles> so on a simpler level there is a MOP for doing "long addition on paper"
02.01.19 16:19:06<dmiles> and other such excersizes
02.01.19 16:20:33<dmiles> in that paper when he gives example of "As we will see, these five MOPS overlap quite a bit. There is nothing wrong with that; indeed it should be expected that any memory theory would propose overlapping structures since they are the source of both memory confusions and the making of useful generalizations across domains"
02.01.19 16:21:20<dmiles> this is simular to how my system gets to doing "long division on paper"
02.01.19 16:23:01<dmiles> btw what made DAYDREAMER sop valuable is it was a platform for player MOPs
02.01.19 16:23:12<dmiles> for playing MOPs
02.01.19 16:23:46<dmiles> cyc is valuable as it is cheapest reusable system for storage of them
02.01.19 16:26:03<dmiles> "At Yale in recent years and among researchers in general who are concerned with scripts or schemata, it has seemed plausible to answer these questions with something called the “plumber script. ” Such a script implies that any body of knowledge can be a script. Clearly a body of knowledge about plumbing
02.01.19 16:26:04<dmiles> can be assembled from the various corners of memory in which it resides in order to create such an entity as a plumber script. One issue is whether such an entity preexists in memory or is constructed, and, if the latter is true, then the real issue is “constructed from what pieces by what method?” A second issue is where are our episodic memories to be found that will help us
02.01.19 16:27:34<dmiles> Thus far we have taken the position that to have precompiled chunks of such as a plumber script is unrealistic, particuiarly when we consider facts of memory such as recognition confusions, memory searches, and forgetting based upon the breaking up of an experience into chunks. A great deal of information can be retrieved about plumbers (e.g., what a plumb
02.01.19 16:28:13<dmiles> CYC is a key to solving that
02.01.19 16:29:46<dmiles> is we need a system store the method in which we use to created constructions
02.01.19 16:30:19<dmiles> so that "just in time" such constructions can be made
02.01.19 16:31:08<dmiles> though any relational programming storage system can be used.. cyc so far has been the most efficient developed
02.01.19 16:35:12<dmiles> it is sorta neat that Schank gaves us end-to-end complete system for AGI.. sorta sad no ones tried it.. not even him
02.01.19 16:40:06<dmiles> at one time NARS could have been the systme to help implement Schank
02.01.19 16:40:26<dmiles> but tyhey dont understand his work so i think they are probably going to NNs next
02.01.19 16:41:06<dmiles> that is they are redesigning NARS so it can no longer do it
02.01.19 16:41:45<dmiles> but ideally a non-atomic reasoning systme is what Schank immagines
02.01.19 16:41:53<dmiles> oops non-axiomatics
02.01.19 16:42:43<dmiles> yet another causualty to NNs 
02.01.19 16:45:11<dmiles> as Cyc getting into AGI was a causualty of Expert systems
02.01.19 16:46:12<dmiles> due to Lenat not understanding Schannk .. well wanting to prove something that he, Lenat creates
02.01.19 16:46:39<dmiles> ok.. off to Oregon a few hours
02.01.19 17:03:18*** Join: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net, b3nszy: b3nszy)
02.01.19 17:03:22<b3nszy> hey aindilis
02.01.19 17:03:23<dmiles> cyc: (+ 1 1)
02.01.19 17:53:13*** Quit: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net) left #logicmoo: Remote host closed the connection
02.01.19 18:11:43*** Join: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net, (unauthenticated): b3nszy)
02.01.19 18:11:47<b3nszy> hey aindilis
02.01.19 18:11:48<dmiles> cyc: (+ 1 1)
02.01.19 19:07:36*** Quit: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net) left #logicmoo: Remote host closed the connection
02.01.19 20:39:07*** Join: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net, (unauthenticated): b3nszy)
02.01.19 20:39:12<dmiles> cyc: (+ 1 1)
02.01.19 20:39:13<b3nszy> aindilis: u there/
02.01.19 21:44:24<editable-dog>aindilis: i just had quite the realization, that the group action platform might be thought of as a platform for businessess to use the exact same mechanisms that people would use to organize themselves
02.01.19 21:44:57<editable-dog>im literally closer to the core of the matters now, and to coming up with realistic usecases
02.01.19 22:52:42<aindilis> b3nszy: ping
02.01.19 22:52:47<aindilis> editable-dog: reviewing our convo
02.01.19 22:53:00<b3nszy> hey
02.01.19 22:53:10<aindilis> hey 
02.01.19 22:53:13<aindilis> how r u?
02.01.19 22:53:20<b3nszy> good
02.01.19 22:53:25<b3nszy> after researching for several days
02.01.19 22:53:28<b3nszy> through journals
02.01.19 22:53:29<b3nszy> aitopics
02.01.19 22:53:40<b3nszy> I can't find anthing on it so im starting a new approach to AGI
02.01.19 22:53:49<b3nszy> world first AGI
02.01.19 22:54:19<aindilis> ah interesting
02.01.19 22:56:09<aindilis> editable-dog: I seem to have lost all but the trailing end of our convo from 2018-12-12
02.01.19 22:56:18<aindilis> if you have logged a copy of it please let me know
02.01.19 22:56:31<aindilis> I've been meaning to tell you that I worked some on ethical-consumer-system
02.01.19 22:57:18<aindilis> I don't know if that's what you are referencing regarding "group action platform" (although I don't think it is), or if you are referring to one of your own projects, or my dossier system and related tools
02.01.19 22:57:24<aindilis> b3nszy: please describe
02.01.19 22:57:53<b3nszy> well Im under the sentiment that an agent will only be as complex as it's environment
02.01.19 22:58:08<b3nszy> and that a agents intelligence arises from a balance between self and world
02.01.19 22:58:26<b3nszy> the world must produce the agent and the agent must somehow effect the world
02.01.19 22:58:44<b3nszy> it's a balancing act but acting under laws of evolution
02.01.19 22:59:15<aindilis> well for one, evolution might be impossible if given too complex of an environment, so I would imagine the key is to increase the complexity of the environment slowly with the complexity of the agent lagging slightly
02.01.19 22:59:28<b3nszy> I think it should be seed based
02.01.19 22:59:35<b3nszy> I want no control over this world
02.01.19 22:59:39<b3nszy> or maybe possible world
02.01.19 22:59:54<aindilis> k
02.01.19 23:00:01<b3nszy> My goal is to design a virtual environment 
02.01.19 23:00:08<b3nszy> doesn't have to be a simulation of our physical world
02.01.19 23:00:23<b3nszy> just containing he fundamental principles I believe are crucial for emergence, complexity, intelligence
02.01.19 23:00:47<aindilis> oh just so you know, what Pei Wang calls semantics + inference is what I call "theorem proving"
02.01.19 23:00:58<aindilis> so he and I are not in disagreement
02.01.19 23:01:50<aindilis> it was just terminological
02.01.19 23:02:03<aindilis> cool
02.01.19 23:02:10<aindilis> you'll need to be able to program this
02.01.19 23:02:30<aindilis> I would imagine you won't get it your first try
02.01.19 23:02:38<aindilis> so you should code a sequence of attempts
02.01.19 23:03:05<aindilis> that's what I do, I have a subdir called attempts and then I start with attempt/1 attempt/2 etc etc
02.01.19 23:03:15<aindilis> I make attempt/1/ a dir
02.01.19 23:03:33<aindilis> https://github.com/aindilis/prolog-agent/tree/master/attempts
02.01.19 23:04:17<aindilis> https://github.com/aindilis/free-life-planner/tree/master/attempts
02.01.19 23:07:11<b3nszy> AGI research on its own seems impossible
02.01.19 23:07:16<b3nszy> you need to be specialized in one way or another
02.01.19 23:07:30<b3nszy> and sure I 100% wont be successful at making such a world for a while
03.01.19 00:35:28*** [read:errno=104 from nil] 
03.01.19 00:35:29*** Disconnected
03.01.19 00:35:30*** Connecting...
                 -Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** Couldn't look up your hostname
03.01.19 00:35:31-Server Notice- *** No Ident response
03.01.19 00:35:36*** [sasl.login from editable-dog (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
03.01.19 00:35:43*** Mode change: +Zi on editable-dog by editable-dog (server)
                 -freenode-connect- Due to the ongoing spam, all new connections will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
                 *** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
03.01.19 00:35:50*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 7 months 9 days 5 hours 4 minutes ago
                 *** Names: editable-dog b3nszy Copenhagen_Bram cyc PrologMUD dmiles stoopkid aindilis @ChanServ michalisko
                 *** End of /NAMES list.
03.01.19 00:35:56<dmiles> cyc: (+ 1 1)
03.01.19 00:35:59-Server Notice- *** Notice -- TS for #webofneeds changed from 1546493759 to 1365151743
03.01.19 00:44:20*** Quit: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net) left #logicmoo: Remote host closed the connection
03.01.19 01:52:31<aindilis> dmiles: okay I've integrated Sensor-Network with ELog2 minimally
03.01.19 01:52:51<aindilis> at least now I'll start to have data I can use to to mine associations.
03.01.19 01:53:06*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
03.01.19 01:53:12<dmiles> cyc: (+ 1 1)
03.01.19 01:53:18<aindilis> for instance, I could tell alice, do this now, and if I said it repeatedly it could learn when to do things based on sensor vlaues
03.01.19 01:53:28<aindilis> hi Elon_Satoshi 
03.01.19 01:55:18*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 268 seconds
03.01.19 02:09:17*** Join: Musk_Nakamoto (~elonsatos@2001:5b0:42c3:cdd8:d4ab:d67b:7aa6:8dda, (unauthenticated): elonsatoshi)
03.01.19 02:09:23<dmiles> cyc: (+ 1 1)
03.01.19 02:09:56<aindilis> hi Musk_Nakamoto
03.01.19 02:10:35*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 250 seconds
03.01.19 02:12:08<Musk_Nakamoto> hey aindilis 
03.01.19 02:12:27<aindilis> hey
03.01.19 02:12:28<aindilis> how are you?
03.01.19 02:12:31*** Quit: Musk_Nakamoto (~elonsatos@2001:5b0:42c3:cdd8:d4ab:d67b:7aa6:8dda) left #logicmoo: Quit: So long, and thanks for all the fish! 2.3 Weechat is best Weechat
03.01.19 02:14:44*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
03.01.19 02:14:49<dmiles> cyc: (+ 1 1)
03.01.19 02:14:51<aindilis> "2"
03.01.19 04:39:03<aindilis> okay I now have it speaking anomalous events out
03.01.19 05:23:48<aindilis> dmiles: ping
03.01.19 08:07:04<aindilis> hey
03.01.19 09:03:59<aindilis> dmiles: got owntracks/mqtt to work
03.01.19 09:04:08<aindilis> now tracking the whereabouts of my cell phone
03.01.19 09:04:46<aindilis> next going to get zmeventserver and find working and integrated with ELog2
03.01.19 09:05:03<aindilis> https://github.com/schollz/find
03.01.19 10:30:07<editable-dog>aindilis: i dont have the convo, seems i started logging here only after
03.01.19 10:31:09<editable-dog>well i was refering to my own ideas, but we seem to have an overlap at least in "organizing boycotts"
03.01.19 10:33:04<editable-dog>well my situation is that i want to keep working on my cnl stuff for a while longer, hopefully it will become useful enough for this "group action" stuff
03.01.19 10:35:06<editable-dog>for one, im convinced that this stuff is too complex to be handled by traditional user interfaces
03.01.19 10:36:26<editable-dog>for two, im aiming for a sort of universal,central computer shell/console with this
03.01.19 10:36:52<editable-dog>and again this seems like the only way to bring the group action stuff into one's life effectively
03.01.19 10:39:03<editable-dog>i dont consider these ideas a 100% requirements before going on with the group action stuff, but they currently have higher priority
03.01.19 12:45:28*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
03.01.19 12:45:34<dmiles> cyc: (+ 1 1)
03.01.19 14:54:12*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
03.01.19 21:32:12* dmiles back from Oregon
03.01.19 21:33:30* dmiles reading scrollback
03.01.19 21:35:19<dmiles> funny about termomlogical differnces about "theorem proving"
03.01.19 21:35:43<dmiles> for at least a decade i was tinking "theorem proving" was supposed to be the same thing that we'd been doing for CCY
03.01.19 21:36:11<dmiles> that is that infernce engines and theorem provers were supposed to be the samer things
03.01.19 21:36:51<dmiles> though it does use identical sorts of algrytehms
03.01.19 21:37:41<dmiles> such as even canonicalizations (trips thru nomral forms) 
03.01.19 21:39:19<dmiles> neat aobut yorur "event recogniser" aindilis
03.01.19 21:40:15<dmiles> abnormnal event recognition is in essense is how CBR leanring takes place
03.01.19 21:41:09<dmiles> that is we index and specialize agaistn these in script theory
03.01.19 21:44:24<dmiles> bleh so where am i .. working on CYC tonight?  Oh letter to Erik bounced i missed his email adreess chanage
03.01.19 21:44:47<dmiles> Also thinking aobujt bugging Schank
03.01.19 21:48:37<dmiles> i sorta want to see if he wants to really continue this project:  https://www.linkedin.com/pulse/lets-do-ai-right-response-from-old-folks-home-new-tool-roger-schank/
03.01.19 21:49:01<dmiles> "OK. We have to fight back. Enough with the AI is going to take over the world stories. Enough with chat bots. Enough with pretending AI is easy. Enough with AI people who barely know the first thing about AI.
                 <dmiles> "
03.01.19 21:51:04<dmiles> "The SPGU Tool (SPGU-T) takes that 1970’s technology and makes it useful in the modern era. People who plan often need help in making their plans succeed. A tool that helps them plan needs to have a detailed representation of the context of that plan, what goals were being satisfied and well-known obstacles to achieving those goals. Then it can access expert knowledge to assist a planner 
03.01.19 21:51:05<dmiles> when the planner is stuck. We used this methodology when we built the Air Campaign Planner for the Department of Defense (in the 90’s). "
03.01.19 21:54:48<dmiles> I kinda get that the tool proablaby hasnt been worked on since that artical
03.01.19 21:55:30<dmiles> but since he prably only has a couple years left to live. we need him to get us started working on it
03.01.19 21:56:17<dmiles> (Schank that is)
03.01.19 21:58:59<dmiles> hrrm looks like Hanson Robotics wants to tap me
03.01.19 21:59:38<dmiles> (tapping as in the "game of magic")
03.01.19 22:00:09<dmiles> so perhaps that might to be to soem advantage 
03.01.19 22:00:43<dmiles> since Hanson Robotics is probaby one of companies that makes Shcank blod boil
03.01.19 22:01:39<dmiles> i say that because two Hanson execs jsut asked me for linkedin friendships
03.01.19 22:03:37<dmiles> so i started thinkinmg more about my brain dumpo video.. i think i am goign to do that
03.01.19 22:04:18<dmiles> though going to make it to the level of myself 19 yearas ago could understand
03.01.19 22:04:46<dmiles> but i think jsut about most people can undertadn it
03.01.19 22:05:16<dmiles> it is a one of those letters to my past self (from the future)
03.01.19 22:06:10<dmiles> that explains the details i didnt understand back then about the details of the workorder (that i do understand now)
03.01.19 22:06:39<dmiles> that would facilitate the the creation of AGI
03.01.19 22:14:58<dmiles> my mom (in Oregon) teased me that i should be embarrassed if all that i leanred in 20 (abotu AI) years could be transcribed in 80 hours :O
03.01.19 22:17:05<dmiles> i confessed all tha ti leanred in the last 5 hours i could prably do in 5 hours
03.01.19 22:17:15<dmiles> 5 years = 5 hours
03.01.19 22:18:35<dmiles> i expained that much of the learning was trying thing for wheter or not success
03.01.19 22:30:48<dmiles> ok resent our Letter to Meuler over LinkedIn
03.01.19 22:42:57<aindilis> awesome! well said, btw
03.01.19 22:43:19<aindilis> yeah definitely need to get Schank involved
03.01.19 22:50:55*** Join: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net, b3nszy: b3nszy)
03.01.19 22:50:58<b3nszy> hey aindilis
03.01.19 22:51:00<dmiles> cyc: (+ 1 1)
03.01.19 22:51:01<b3nszy> are you there
03.01.19 22:51:05<b3nszy> I have some new ideas about AI
03.01.19 22:51:12<aindilis> hi b3nszy 
03.01.19 22:51:43<dmiles> lets hear them
03.01.19 22:51:57<b3nszy> so
03.01.19 22:52:20<b3nszy> I've noticed with people almost all our actions and decisions are made to reach a emotional harmony
03.01.19 22:52:31<b3nszy> with some emotions having higher importance than others
03.01.19 22:53:05<b3nszy> and intelligence is simply a tool (same for creativity) to problem solve and reach some emotional equilibrium 
03.01.19 22:53:14<b3nszy> also we narrow our search space drastically through emotional reasoning
03.01.19 22:53:57<b3nszy> for example. To decide what to eat we will create a hypothetical of eating this certain food and attach our hypothetical emotional state to reach a conclusion 
03.01.19 22:54:10<b3nszy> an interesting one to narrow search space for possibl futures
03.01.19 22:54:26<b3nszy> is to imagine what we would feel proud of accomplishing if we were on our deathbeds
03.01.19 22:54:50<b3nszy> we narrow hundreds of possible careers/paths via a emotional reasoning heuristic 
03.01.19 22:55:12<b3nszy> not sure if there are any projects in AI but it seems like humans are constantly trying to reach emotional harmony
03.01.19 22:55:31<b3nszy> and even animals of the simplest kind are trying to reach a physical state harmony
03.01.19 22:55:37<b3nszy> aka not in pain, hungry, etc
03.01.19 22:56:01<b3nszy> so they use their intelligence/creativity to change their physical/emotional state to a more harmonious state
03.01.19 22:56:13<b3nszy> our goal is simply to exist in balance
03.01.19 22:57:07<aindilis> well I agree with all this
03.01.19 22:58:48<aindilis> so b3nszy what do you propose we work on?
03.01.19 22:59:43<b3nszy> I imagine it like a thing balancing on a ball
03.01.19 22:59:50<b3nszy> we need an environment first and foremost
03.01.19 23:00:12<b3nszy> but we can model this by having a balancing thing that is never balanced but the AI's goal is to keep this thing in balance
03.01.19 23:00:14<aindilis> can you elucidate some of the properties of this environment?
03.01.19 23:00:38<b3nszy> then hopefully things like intelligence emerge to help keep the balance
03.01.19 23:00:45<b3nszy> then we can include more things to the agent to balance
03.01.19 23:00:56<b3nszy> and that creates more complexity and more 'intelligence'
03.01.19 23:01:09<b3nszy> dmiles: what do you think
03.01.19 23:03:02<b3nszy> thought: we can never reach true balance because the environment (outside of our control) is constantly changing
03.01.19 23:06:05<b3nszy> aindilis: complex, changing, adapting, systems based
03.01.19 23:06:13<b3nszy> also trying to reach a balance within itself
03.01.19 23:07:40<aindilis> so what are some necessary conditions required to actually implement such a system
03.01.19 23:09:54<b3nszy> no clue
03.01.19 23:09:59<aindilis> hrm
03.01.19 23:10:00<b3nszy> also this requires a new science
03.01.19 23:10:02<b3nszy> or understanding
03.01.19 23:10:12<b3nszy> I have no clue how to implement or make such a thing and suspect nobody does
03.01.19 23:10:24<aindilis> so what can you do to bring it about, and what can we do to help?
                 <b3nszy> we have to learn and better understand the science behind these systems
03.01.19 23:10:43<aindilis> okay is there a reading list?
03.01.19 23:10:50<b3nszy> nope
03.01.19 23:10:54<b3nszy> can't find any literature on this
03.01.19 23:10:57<b3nszy> I think it's a new idea
03.01.19 23:11:04<aindilis> cool
03.01.19 23:11:15<b3nszy> I can't even find literature to back it up
03.01.19 23:11:20<b3nszy> which is surprising 
03.01.19 23:11:29<b3nszy> there has to be something out there though
03.01.19 23:11:45<b3nszy> dmiles: are you aware of any?
03.01.19 23:12:07<dmiles> i am looking for a immagage i wonce copied that shows the flowchart of such a system
03.01.19 23:13:23<dmiles> https://files.gitter.im/artificial-general-intelligence/Lobby/nr1x/image.png
03.01.19 23:14:49<dmiles> the recovery/rationalization goals are an example of it trying to maintain sucha  balance
03.01.19 23:16:26<dmiles> certain goals that lead to certain failures are only persued when the recovery/rationalization plans have been shown they have been able to get balanced after failures
03.01.19 23:17:42<dmiles> really simplistic example: i am ok with taking a plate  of food dsipite it wont fill me up due to knowing i am at a buffet
03.01.19 23:18:30<b3nszy> wait I have to go for a bit
03.01.19 23:18:36<b3nszy> will u be on in about and hour or 2
03.01.19 23:18:43<aindilis> yes
03.01.19 23:18:54<dmiles> the idea is that i can ballance my goals rather than be obsessesed with winning at one
03.01.19 23:19:21*** Quit: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net) left #logicmoo: Remote host closed the connection
03.01.19 23:21:25<dmiles> btw that image constutes the "meta-planner" domain 
03.01.19 23:21:41<dmiles> the NE image anyways
03.01.19 23:22:31<dmiles> or maybe NW looks closer to a PDDLifiable graph
03.01.19 23:23:37<dmiles> vs NE shows what happens when "run the NW"
03.01.19 23:26:43<dmiles> well my description to benzy was over concerned with "ballancing process" rather than he was looking for "what do we ballance"
03.01.19 23:27:09<aindilis> ah
03.01.19 23:27:45<aindilis> I'm trying to see if I can help him to implement his ideas in code, he hasn't done a ton of coding yet
03.01.19 23:28:23<aindilis> I'm thinking he might be good to manage other coders that he can persuade to work on his ideas
03.01.19 23:28:37<dmiles> i am very much believer in  "We seek to have least amount of cognitive discord" 
03.01.19 23:28:40<aindilis> so he could possibly be a "recruiter"
03.01.19 23:28:50<dmiles> dunno
03.01.19 23:28:57<aindilis> yeah it mentions that in the Daydreaming in humans and machines
03.01.19 23:29:23<aindilis> well I think his ideas are good
03.01.19 23:29:25<dmiles> our whole system of languagfe is to fake ourtselves into minimizing that discord
03.01.19 23:29:46<dmiles> our whole system of languagfe is to fake ourselves into minimized discord
03.01.19 23:30:13<aindilis> so kind of like a low energy state
03.01.19 23:30:31<dmiles> yeah 
03.01.19 23:31:11<dmiles> our language as complex as it takes to lie to ourtselves
03.01.19 23:31:37<dmiles> and as complex enough to tell ourselves what to do
03.01.19 23:32:17<dmiles> (not complex enough that is to actually do what we are told)
03.01.19 23:32:36<aindilis> yeah
03.01.19 23:32:43<dmiles> (well not until we are in the middle of doing it)
03.01.19 23:32:44<aindilis> that's the part I'm working on
03.01.19 23:33:15<dmiles> such as putting dishes away in a dish washer requires stacking language
03.01.19 23:33:49<dmiles> if you are lucky after the dishes are int eh dishwasher none of that language is on your mind anymore
03.01.19 23:34:33<aindilis> ah 
03.01.19 23:34:50<aindilis> right now I'm doing `security language`
03.01.19 23:35:04<dmiles> trying to recall a certain step in that process requires small translations making the details more like a movie than the self talk that went on to stack dishes
03.01.19 23:35:08<aindilis> trying to integrate all best practices
03.01.19 23:36:36<dmiles> we might recalkl the story of the coffee mud that just didnt fix in the top rack
03.01.19 23:36:51<dmiles> we might recalkl the story of the coffee mug "that just didnt fit in the top rack"
03.01.19 23:37:31<dmiles> *nod*
03.01.19 23:37:58<aindilis> I think I'm going to focus on something else actually cause I'm stalling
03.01.19 23:38:12<aindilis> come back to it in a day or two
03.01.19 23:38:20<aindilis> I need something fun today
03.01.19 23:38:43<aindilis> *something else = something besides security
03.01.19 23:38:46<dmiles> i need soemthing overly structured today 
03.01.19 23:38:57<aindilis> hrm, how is EC system coming?
03.01.19 23:39:01<aindilis> RTEC
03.01.19 23:39:08<dmiles> (my video isnt structured enough)
03.01.19 23:39:33<dmiles> So.. it is etehr gettign ABCL-CYC working or it is doing EC-MArty
03.01.19 23:39:54<aindilis> btw, exemplary work in getting LarKC_CL released!
03.01.19 23:40:13<dmiles> RTEC i discovered it is great. but it doesnt do any extra EC that not already working
03.01.19 23:40:16<aindilis> I will read 10 pages of Daydreaming ...
03.01.19 23:41:23<dmiles> so interestingly.. taking a look at RTEC.. its works and is fine
03.01.19 23:41:34<dmiles> but how do *you* use it?
03.01.19 23:41:47<dmiles> I mean to say you know how you might use it
03.01.19 23:41:51<aindilis> you = andrewDougherty ?
03.01.19 23:41:59<dmiles> for isntance it is great at monitoring video camaera
03.01.19 23:42:23<aindilis> that's a good application
03.01.19 23:42:26<aindilis> which I need
03.01.19 23:42:30<dmiles> you or me .. but for isntnace.. you have a usecase the docs explan how to do
03.01.19 23:42:32<aindilis> my primary area of interest is in plan fusion
03.01.19 23:42:37<aindilis> oh really
03.01.19 23:42:45<dmiles> right they do video camaera stuff
03.01.19 23:42:58<dmiles> (but not plan fusion)
03.01.19 23:43:03<aindilis> so for instance, planning food, finances, transporation etc
03.01.19 23:43:04<dmiles> but anomally recognstion
03.01.19 23:43:09<aindilis> awesome
03.01.19 23:43:25<dmiles> yet.. hjow do you get it to use your video camaera and not the authors
03.01.19 23:43:28<aindilis> I lied I don't actually have anomaly recognition working yet
03.01.19 23:43:34<aindilis> hrm, probably rtsp
03.01.19 23:43:40<aindilis> checking out hte docs
03.01.19 23:43:50<dmiles> yep taht is probably the answer
03.01.19 23:44:06<dmiles> but.. its more of a problem of customizing the app
03.01.19 23:44:25<dmiles> that is the problem in all these cases
03.01.19 23:45:09<dmiles> i mean building a system for "customizing the app" 
03.01.19 23:45:18<aindilis> yup
03.01.19 23:45:25<aindilis> fortunately I'm somewhat good at that process
                 <dmiles> rather than customizing the app
03.01.19 23:45:30<aindilis> oh
03.01.19 23:45:35<aindilis> less good at that
03.01.19 23:45:38<aindilis> but still have WIPs
03.01.19 23:45:45<aindilis> I have a sensor wrapper
03.01.19 23:46:00<aindilis> and a program that builds OO structures from NL descriptions
03.01.19 23:46:06<dmiles> i am realyl good at customizaing apps.. so good i disallow myself that previlige anymore
03.01.19 23:46:08<aindilis> similar to Hugo Liu's one
03.01.19 23:46:27<aindilis> why?
03.01.19 23:46:42<dmiles> i would spend my whole life customizing apps
03.01.19 23:46:52<dmiles> as i am good at it
03.01.19 23:46:53<aindilis> ah I see
03.01.19 23:47:00<aindilis> sort of what I spend my life doing
03.01.19 23:47:13<dmiles> some of that is ok to do
03.01.19 23:47:42<dmiles> so with all apps i get one shot at customizing
03.01.19 23:48:07<dmiles> and that customization is to make it fit into a customizaion framework
03.01.19 23:48:31<dmiles> hehe
03.01.19 23:48:56<dmiles> so with RTEC i am delayed until i knopw exactly what that end framwework looks like
03.01.19 23:49:28<aindilis> http://homepages.inf.ed.ac.uk/rbf/CAVIARDATA1/xmlcaviargui/manual/manual.pdf
03.01.19 23:49:38<dmiles> not a long delay at least!
03.01.19 23:49:42<dmiles> yep
03.01.19 23:50:15<aindilis> time to write some authors!
03.01.19 23:50:36<aindilis> I'll try to set up that java code to see if it does the labelling automatically, if not I'll write the authors
03.01.19 23:50:51<aindilis> I think though this is overkill for my needs
03.01.19 23:50:57<aindilis> I mean, if it worked out of the bag, yes
03.01.19 23:51:08<aindilis> but I think I need more just presence detection
03.01.19 23:51:29<aindilis> so like if a PIR motion detector or camera picks up motion, I get a warning to look at the screen
03.01.19 23:51:37<aindilis> I'm very close to achieving that now
03.01.19 23:51:54<aindilis> but I really wish I had integrate EC into ELog2
03.01.19 23:51:58<aindilis> I just don't know how yet
03.01.19 23:52:08<aindilis> this is my data model:
                 <dmiles> the Prolog code for it that talks to the Java code of that is EC
03.01.19 23:52:24<aindilis> well I don't fully understand it for some reason
03.01.19 23:52:37<aindilis> my data model is: RecordDate, Start, End, Formula
03.01.19 23:53:00<aindilis> prepended with ID autoincrement, Sender, Receiver
03.01.19 23:53:16<aindilis> so like is that sufficient to translate to and from EC?
03.01.19 23:53:30<dmiles> yes
03.01.19 23:53:46<aindilis> the intended semantics is Start='2018...', End=NULL -> atTime([2019-01-03,23:53:37],detected(room1,motion))
03.01.19 23:53:58<aindilis> cool
03.01.19 23:54:01<dmiles> even the same datamodel RTEC used
03.01.19 23:54:02<aindilis> I figured it wa
03.01.19 23:54:05<aindilis> was lol
03.01.19 23:54:40<aindilis> it feels really good to be collecting this data
03.01.19 23:54:52<aindilis> let me know if you want a copy
03.01.19 23:56:21<aindilis> bbiab 15 mins
03.01.19 23:56:48<dmiles> well focusing on tonight i think getting LARKC_CL installable when you hjave a copy of Rcyc 
03.01.19 23:57:08<aindilis> that would be amazing!
03.01.19 23:57:09<dmiles> that is that the lauch scripts allow setitng of installation dirs
03.01.19 23:57:37<dmiles> i trying to decide if i will make it jsut copy over what you set up as a target to be copied over
03.01.19 23:57:51<dmiles> so far that is the onyl method that seems to work
03.01.19 23:58:11<aindilis> hrm
03.01.19 23:58:42<dmiles> so i am making iot do a file copy to a temp dir of Rcyc and then it over that temp stuff
03.01.19 23:59:22<dmiles> everyting works .. its jsut the install scripts that is hard
04.01.19 00:00:38<dmiles> partly since i *want* certian files that you customize to persists etc
04.01.19 00:01:05<aindilis> ah
                 <dmiles> i doing that by copying some of it as symlinks
04.01.19 00:01:52<dmiles> actualyl locally my devel envirnoment is windows 7
04.01.19 00:02:15<dmiles> i figure i make it work in windows (which was a bit hader)
04.01.19 00:02:22<dmiles> harder*
04.01.19 00:02:42<dmiles> anyways i'll figure it out
04.01.19 01:54:10*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
04.01.19 01:57:26*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
04.01.19 01:57:31<dmiles> cyc: (+ 1 1)
04.01.19 03:15:55<aindilis> dmiles: does RTEC create a set of models?
04.01.19 03:16:05<aindilis> also, does it handle noisy or incomplete sensing?
04.01.19 03:17:24<aindilis> for instance, if there is motion in my room, and then it tracks my phone leaving the area - can it say: possibly (door sensor battery dead|door was left open earlier|there is a person remaining in my room|etc|etc) 
04.01.19 03:18:04<aindilis> as for noisy sensors, for instance, currently my motion sensor parser is nondeterministic
04.01.19 03:18:53<aindilis> a few other features I would like to add - a measure of how predictable actions are, for instance, if you left at the same time each morning for work
04.01.19 03:19:14<aindilis> so I imagine there would need to be association mining stuff here
04.01.19 03:19:54<aindilis> (I realize that security is not our foremost AGI priority but at least I am doing something EC related and breaking through the writer's block I have had since someone said a disparaging comment about FLP)
04.01.19 03:21:04<aindilis> also Sensor Networks are inherently part of the housed person's FLP 
04.01.19 03:22:03<aindilis> for instance RTEC is anticipated in my 2011 paper which mentions "Location Logic" which is supposed to do all this kind of stream/event based reasoning
04.01.19 03:22:17<aindilis> https://frdcsa.org/visual-aid/pdf/Temporal-Planning-and-Inferencing-for-Personal-Task-Management-with-SPSE2.pdf
04.01.19 03:24:36<aindilis> I suppose for predictability you could measure the entropy of a histogram
04.01.19 03:25:35<aindilis> in particular, I would like the system to, upon having a perimeter door sensor fire, to notify a person if the time of the door opening could be predicted, and to prevent them from hazarding forth under such conditions
04.01.19 03:25:43<aindilis> another feature I'm interested in is route randomization
04.01.19 03:26:23<aindilis> or at least to caution them
04.01.19 03:27:51<aindilis> I suppose the histogram model only works for daily transport events, there would need to be something like to predict if the person opened the door about once every 2 hours or something
04.01.19 03:28:44<aindilis> the idea with FRDCSA is develop a contingent plan skein of everything in advance
04.01.19 04:24:47<aindilis> dmiles: ping
04.01.19 04:39:37<dmiles> oh hey sorryu i diodnt see in here
04.01.19 04:39:42<aindilis> np
04.01.19 04:39:56<aindilis> I have a question regarding security
04.01.19 04:40:22<aindilis> do you know of anything that can take an NL description of an attack vector, and allow you to write an NL description of a response, etc etc
04.01.19 04:40:52<aindilis> so for instance: mitigates('reinforce front door','come through the front door').
04.01.19 04:41:06<aindilis> or hasResponse('come through the front door','retreat to safe room').
04.01.19 04:41:31<dmiles> just the stuff i am working on in MArtys is all that i am aware of
04.01.19 04:41:34<aindilis> I was thinking some of your Teknowledge COA critiquer might have that language
04.01.19 04:41:40<dmiles> where its is matching NL to frames
04.01.19 04:42:00<dmiles> you have frames for "come through the front door"
04.01.19 04:42:01<aindilis> well, so I'm more concerned about just enumerating threats and responding to them with mitigations and responses.
04.01.19 04:42:14<aindilis> not with their representation in an AI planner
04.01.19 04:42:24<dmiles> and frames for "reenforce X"
04.01.19 04:42:31<dmiles> this to is how CYC does it
04.01.19 04:42:38<dmiles> is by matching to frames
04.01.19 04:42:59<aindilis> okay, I'll check it out.  so sort of like this: https://frdcsa.org/~andrewdo/dmiles/securityOntology.pl
04.01.19 04:43:20<aindilis> hopefully there would be a gui you know
04.01.19 04:43:23<dmiles> that is that all NL should be able to match a set of WFF-able assertions
04.01.19 04:43:38<aindilis> again I'm not too concerned about formalization of the NL
04.01.19 04:43:55<aindilis> this is more about ensuring that all threats have been mitigated and have like 3 planned responses, for drilling and such
04.01.19 04:44:06<aindilis> I call this system btw WOPR after the War Games system, to give you an idea of its intent
04.01.19 04:44:19<dmiles> well think about what assertions you''d need to anglify that
04.01.19 04:44:51<dmiles> that .pl file that is
04.01.19 04:45:48<dmiles> since that is effectively close to waht you are looking for gettign it out of NL descriptions
04.01.19 04:46:46<dmiles> the Teknowledge COA critiquer was using CYC i thought at the time
04.01.19 04:46:48<aindilis> well I am converting security books into Prolog to get the predicates like hasResponse/2 and such
04.01.19 04:47:12<aindilis> does it handle multiple levels of threat/response/counterresponse/countercounterresponse?
04.01.19 04:47:32<aindilis> so like, could you use it ideally to describe a game of chess?
04.01.19 04:47:57<aindilis> I suppose that is what I will have to do, make a chess version of this
                 <dmiles> well it used the VErsion #1 of the CYC NLU
04.01.19 04:48:27<dmiles> (the only one that actually worked)
04.01.19 04:48:32<aindilis> ah
04.01.19 04:48:58<dmiles> cyc: (+ 1 1)
04.01.19 04:49:06<aindilis> okay so you are saying formalization in CYC/Prolog is necessary?
04.01.19 04:49:16<dmiles> yes that is what i am saying
04.01.19 04:49:29<aindilis> k
04.01.19 04:49:45<aindilis> hrm
04.01.19 04:50:00<aindilis> I suppose I will try to write a toy system for chess now
04.01.19 04:50:11<aindilis> so like enumerateThreats(X), lists all possible moves
04.01.19 04:50:17<aindilis> in the current situation
04.01.19 04:50:27<dmiles> Teknowledge COA critiquer at least that i saw was mostly a CYC app
04.01.19 04:50:29<aindilis> I was wondering, suppose the siutation changes
04.01.19 04:51:14<aindilis> so like can you say something like: suppose Justin dies, do this if that, or this if that, or this if that
04.01.19 04:51:29<dmiles> yeah such rules were assertable
04.01.19 04:51:40<aindilis> I'm wondering about abstractions that apply to multiple situations, not just hte current
04.01.19 04:51:47<aindilis> okay
04.01.19 04:51:53<aindilis> do you know what SitProp is?
04.01.19 04:51:58<aindilis> and all those PropProp etc things
04.01.19 04:52:03<dmiles> yeah
04.01.19 04:52:09<aindilis> are they relevant?
04.01.19 04:52:13<dmiles> very
04.01.19 04:52:18<aindilis> one sec
04.01.19 04:52:34<dmiles> though they came jsut a tiny bit afterwards as a better KR
04.01.19 04:53:05<aindilis> what are they?
04.01.19 04:53:10<aindilis> they are slices of sitcalc situations?
04.01.19 04:53:19<aindilis> SitProp means prop holds in sit?
04.01.19 04:53:22<dmiles> that cycorp lined up to start replacing the prevous KR
04.01.19 04:53:38<dmiles> yes
04.01.19 04:53:55<dmiles> PropProp is a nomral cyc-like rule
04.01.19 04:54:28<aindilis> are there other preds in this KR
04.01.19 04:54:29<aindilis> ?
04.01.19 04:54:31<dmiles>  SitProp means propostion holds in situation
04.01.19 04:54:48<dmiles> yes.. i dont have my cyc runing to r3emmber them 
04.01.19 04:54:57<dmiles> yes more preds
04.01.19 04:55:13<dmiles> i thought there was Events in there to
04.01.19 04:55:22<cyc> testing
04.01.19 04:55:36<dmiles> well events are sits .. but there was i thought 6 preds
04.01.19 04:55:46<dmiles> erm 9
04.01.19 04:56:14<aindilis> cyc (+ 1 1)
04.01.19 04:56:16<cyc> "2"
04.01.19 04:56:18<aindilis> go ahead
04.01.19 04:56:37<aindilis> cyc (constant-apropos #$SitProp)
04.01.19 04:56:48<dmiles> cyc: (constant-apropos "SitProp")
04.01.19 04:56:50<cyc> "#$causes-SitProp"
                 <cyc> "#$decreasesLikelihood-SitProp"
                 <cyc> "#$enables-SitProp"
                 <cyc> "#$ensures-SitProp"
04.01.19 04:56:53<cyc> "#$explains-SitProp"
04.01.19 04:56:56<cyc> "#$increasesLikelihood-SitProp"
04.01.19 04:57:00<cyc> "#$preconditionFor-SitProp"
04.01.19 04:57:03<cyc> "#$prevents-SitProp"
04.01.19 04:57:19<aindilis> so you can use #$and with Situations
04.01.19 04:57:22<aindilis> er props
04.01.19 04:57:28<dmiles> cyc: (constant-apropos "ntProp")
                 <aindilis> #$and #$prop1 #$prop2
04.01.19 04:57:30<cyc> "#$Boddie-NoellRestaurantProp-Corporation"
                 <cyc> "#$ForestServiceGrantProposalConceptFilter"
                 <cyc> "#$GenericGrantProposalResearchTask-Allotment"
                 <cyc> "#$GrantProposal"
04.01.19 04:57:33<cyc> "#$GrantProposalResearchQueryLibraryFolder"
04.01.19 04:57:36<cyc> "#$GrantProposalResearchTask"
04.01.19 04:57:40<cyc> "#$IndecentProposal-TheMovie"
04.01.19 04:57:44<cyc> "#$MKMAnyTopologicalSpaceWithTheFixedPointPropertyIsConnected"
04.01.19 04:57:47<cyc> "#$MKMFixedPointProperty"
04.01.19 04:57:50<cyc> ...
04.01.19 04:57:51<dmiles> cyc: (constant-apropos "causes-")
04.01.19 04:57:56<cyc> "#$CPTTestInvolves-causes-SubSitTypeSubSitType"
04.01.19 04:57:59<cyc> "#$causes-EventEvent"
04.01.19 04:58:02<cyc> "#$causes-PropProp"
04.01.19 04:58:05<dmiles> there we go
                 <cyc> "#$causes-PropSit"
04.01.19 04:58:07<cyc> "#$causes-RoleInSitTypeSitType"
04.01.19 04:58:10<cyc> "#$causes-SitProp"
04.01.19 04:58:14<cyc> "#$causes-SitSit"
04.01.19 04:58:17<cyc> "#$causes-SitSitType"
04.01.19 04:58:20<cyc> "#$causes-SitTypeProp"
04.01.19 04:58:23<cyc> ...
04.01.19 04:58:41<dmiles> Event, Sit Props
04.01.19 04:58:48<dmiles> which btw it EC :P
04.01.19 04:58:59<aindilis> what about temporal?
04.01.19 04:59:19<aindilis> I guess events and sits have temporal annotaitons
04.01.19 04:59:21<dmiles> cyc: (constant-apropos "SitSit")
04.01.19 04:59:23<cyc> "#$SitSitBinaryPredicate"
04.01.19 04:59:24<cyc> "#$causes-SitSit"
                 <cyc> "#$causes-SitSitType"
                 <cyc> "#$disrupts-SitSitType"
04.01.19 04:59:27<cyc> "#$enables-SitSit"
04.01.19 04:59:30<cyc> "#$enables-SitSitType"
04.01.19 04:59:33<cyc> "#$increasesLikelihood-SitSitType"
04.01.19 04:59:36<cyc> "#$inhibits-SitSitType"
04.01.19 04:59:40<cyc> "#$maintains-SitSitType"
04.01.19 04:59:44<cyc> ...
04.01.19 04:59:52<aindilis> duh what can CYC do?
04.01.19 05:00:05<dmiles> i thoujght the temporals where in there
04.01.19 05:00:21<aindilis> I'm just joking that people give CYC a hard time and it's light years ahead
04.01.19 05:00:45<aindilis> what is SitType
04.01.19 05:01:03<aindilis> I take arg2 "enables/inhibits/etc" arg1?
04.01.19 05:01:24<dmiles> well the temporality in CYC is based on Tempotal Extens
04.01.19 05:01:36<dmiles> TemporalExtents
04.01.19 05:02:14<dmiles> so for example if "Joe loves Sue" the tempral extand has to be after Joe was born at least
04.01.19 05:02:30<aindilis> so I suppose this relates very closely to what we are doing merging CYC/EC/DAYDREAMER Etc
04.01.19 05:02:34<dmiles> well best way to explain is that we wanted to not use TimeFunctions
04.01.19 05:03:02<dmiles> i might say  (holdsIn (loves Joe Sue) Joe)
04.01.19 05:03:21<aindilis> where Joe has a particular temporal extent?
                 <dmiles> or i might say  (holdsIn (loves Joe Sue) (YearFn 1983))
04.01.19 05:03:24<aindilis> ah
04.01.19 05:03:39<dmiles> that Joe himself is a Temproal Extent
04.01.19 05:04:03<aindilis> does cyc reason fully with these predicates?
04.01.19 05:04:09<dmiles> so ideally all things except fo (AtemporalCollectionType)
04.01.19 05:04:18<aindilis> k
04.01.19 05:04:31<aindilis> hrm, I think what I will do is formalize it first in Prolog
04.01.19 05:04:45<aindilis> should I make it web-based, GUI-based or Emacs-based?
04.01.19 05:05:00<dmiles> web based is good idea
04.01.19 05:05:03<aindilis> and then I can translate and extend into Cyc's vocab
04.01.19 05:05:10<aindilis> and should it be standalone or part of FLP?
04.01.19 05:05:25<dmiles> oh i'd use it excsue to expand FLP web UI
04.01.19 05:05:32<aindilis> k
04.01.19 05:05:59<aindilis> okay thanks so much for your help
04.01.19 05:06:08<aindilis> if you wanted toyou could read the backlog to see what I was taling about then
04.01.19 05:06:17<dmiles> to answer your question  inhibits  for a SitSit is a temporal relation
04.01.19 05:06:33<dmiles> but not nesc a PropProp
04.01.19 05:06:48<aindilis> SitType is what?
04.01.19 05:06:59<dmiles> Means we giave a whole class of Sits
04.01.19 05:07:14<aindilis> identified by any means?
04.01.19 05:07:43<dmiles> it is    argCens vs ArgIsa
04.01.19 05:07:48<aindilis> hrm I bet I could use a chess annotation tool as a start
04.01.19 05:07:49<dmiles> it is    argGenls vs ArgIsa
04.01.19 05:07:54<aindilis> k
04.01.19 05:08:20<aindilis> okay thanks again
04.01.19 05:08:38<aindilis> WOPR may get booted up, and to honor this, I'll watch wargames whilst I code
                 <dmiles> (all-term-assertions #$disrupts-SitSitType #$EverythingPSC)
04.01.19 05:08:41<dmiles> cyc: (all-term-assertions #$disrupts-SitSitType #$EverythingPSC)
04.01.19 05:08:43<cyc> ("#<AS" ("#$expansion" "#$disrupts-SitTypeSitType" ("#$relationAllInstance" "#$disrupts-SitSitType" ":ARG1" ":ARG2")) ":" "BaseKB" ">")
                 <cyc> ("#<AS" ("#$isa" "#$disrupts-SitSitType" "#$FirstOrderCollectionPredicate") ":" "UniversalVocabularyMt" ">")
                 <cyc> ("#<AS" ("#$isa" "#$disrupts-SitSitType" "#$BinaryPredicate") ":" "UniversalVocabularyMt" ">")
                 <cyc> ("#<AS" ("#$arity" "#$disrupts-SitSitType" "2") ":" "UniversalVocabularyMt" ">")
04.01.19 05:08:46<cyc> ("#<AS" ("#$negationPreds" "#$maintains-SitSitType" "#$disrupts-SitSitType") ":" "UniversalVocabularyMt" ">")
04.01.19 05:08:49<cyc> ("#<AS" ("#$argIsa" "#$disrupts-SitSitType" "2" "#$FirstOrderCollection") ":" "UniversalVocabularyMt" ">")
04.01.19 05:08:53<cyc> ("#<AS" ("#$arg2Isa" "#$disrupts-SitSitType" "#$FirstOrderCollection") ":" "UniversalVocabularyMt" ">")
04.01.19 05:08:56<cyc> ("#<AS" ("#$argIsa" "#$disrupts-SitSitType" "1" "#$Situation") ":" "UniversalVocabularyMt" ">")
04.01.19 05:08:59<cyc> ("#<AS" ("#$arg1Isa" "#$disrupts-SitSitType" "#$Situation") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:02<cyc> ...
04.01.19 05:09:03<dmiles> cyc: (reverse (all-term-assertions #$disrupts-SitSitType #$EverythingPSC))
04.01.19 05:09:05<cyc> ("#<AS" ("#$genTemplate" "#$disrupts-SitSitType" ("#$ConcatenatePhrasesFn" ("#$ParaphraseFn" ":ARG1") ("#$PhraseFromStringFn" "disrupts an event of type") ("#$ParaphraseFn" ":ARG2"))) ":" "EnglishParaphraseMt" ">")
04.01.19 05:09:07<cyc> ("#<AS" ("#$comment" "#$disrupts-SitSitType" "(#$disrupts-SitSitType SIT SITTYPE) means that SIT disrupts a situation of type SITTYPE.  In particular, the occurrence of SIT disrupts the occurrence of some particular instance of SITTYPE that would have occurred in a less disrupted manner had SIT itself not occurred.") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:10<cyc> ("#<AS" ("#$genlPreds" "#$disrupts-SitSitType" "#$inhibits-SitSitType") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:14<cyc> ("#<AS" ("#$factGatheringUnspecifiableArgPosition" "#$disrupts-SitSitType" "2") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:17<cyc> ("#<AS" ("#$arg2Genl" "#$disrupts-SitSitType" "#$Situation") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:20<cyc> ("#<AS" ("#$argGenl" "#$disrupts-SitSitType" "2" "#$Situation") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:23<cyc> ("#<AS" ("#$factGatheringUnspecifiableArgPosition" "#$disrupts-SitSitType" "1") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:26<cyc> ("#<AS" ("#$arg1Isa" "#$disrupts-SitSitType" "#$Situation") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:30<cyc> ("#<AS" ("#$argIsa" "#$disrupts-SitSitType" "1" "#$Situation") ":" "UniversalVocabularyMt" ">")
04.01.19 05:09:33<cyc> ...
04.01.19 05:09:59<dmiles> cyc: (reverse (all-term-assertions #$causes-SitSitType #$EverythingPSC))
04.01.19 05:10:13<dmiles> oops
04.01.19 05:10:19<dmiles> cyc: (reverse (all-term-assertions #$causes-SitSitType #$EverythingPSC)))
04.01.19 05:11:01<dmiles> cyc: (+ 1 1)
04.01.19 05:11:03<cyc> "2"
04.01.19 05:14:39<aindilis> https://decodechess.com/
04.01.19 05:15:30<aindilis> I think chess is too situational, whereas there are long standing threats in real life
04.01.19 05:15:40<aindilis> so chess isn't quite the right metaphor
04.01.19 05:16:02<aindilis> I'll have to ponder this some, in the mean time I suppose I will work on that securityOntology
04.01.19 05:23:43<aindilis> thanks again for providing me with this reference, I will see what I can do to use it to Embed EC and also get familiar with it now that you've kind of clarified it for me
04.01.19 05:24:10<aindilis> it's hard to get the high level picture from the predicate comments
04.01.19 05:24:32<dmiles> yeah i wasnt quite accurate when i said CYC didnt have EC
04.01.19 05:24:40<aindilis> ah, that's a relief
04.01.19 05:24:41<dmiles> it has KR but not code for it
04.01.19 05:24:54<aindilis> you mean it lacks the assertions for inferencing with its semantics?
04.01.19 05:25:04<dmiles> well there is code but its spurqatic and not really used in genral harness
04.01.19 05:25:11<aindilis> kk
04.01.19 05:25:39<aindilis> this stuff is really cool and could lead to a security-minded approach to AGI
04.01.19 05:25:56<dmiles> vs someone other than Lenat was to ran cycorp they might have insisted EC modules woudl work
04.01.19 05:26:14<aindilis> well we can run our version!
04.01.19 05:26:49<dmiles> yep :P
04.01.19 05:27:14<aindilis> let's assume you're building a chess engine, you can have like a beginner approach, or you can have a more expert approach.  a beginner would implement a bad KR
04.01.19 05:27:35<aindilis> so a security-minded approach can hopefully have the benefit of being close to airtight
04.01.19 05:28:14<aindilis> e.g. understanding ordinals/cardinals vs saying things are "infinite" like a child
04.01.19 05:29:06<aindilis> not saying I'm not a beginner though ;P
04.01.19 05:31:34* dmiles is begginer wishing someone else would be writitng the build.xml file
04.01.19 05:31:45<aindilis> Ant?
04.01.19 05:31:49<dmiles> yes
04.01.19 05:32:05<dmiles> i have to track down and add every .jar
04.01.19 05:32:11<dmiles> that i used .. etc
04.01.19 05:32:24<dmiles> to the build.properies
04.01.19 05:32:32<dmiles> etc
04.01.19 05:32:33<aindilis> yeah I've done that I think
04.01.19 05:32:38<aindilis> hehe, you using Mason?
04.01.19 05:32:55<dmiles>   [javac] warning: [options] bootstrap class path not set in conjunction with -source 1.7
04.01.19 05:32:56<dmiles>     [javac] /mnt/gggg/PrologMUD/pack/larkc_cl/jrtl-cl/jsrc-logicmoo-desktop/org/logicmoo/system/BeanShellCntrl.java:40: error: package org.appdapter.core.convert.Converter does not exist
                 <dmiles>     [javac] import org.appdapter.core.convert.Converter.ConverterMethod;
04.01.19 05:32:57<dmiles>     [javac]                                            ^
                 <dmiles>     [javac] /mnt/gggg/PrologMUD/pack/larkc_cl/jrtl-cl/jsrc-logicmoo-desktop/org/logicmoo/system/BeanShellCntrl.java:41: error: package org.appdapter.gui.api does not exist
04.01.19 05:32:58<dmiles>     [javac] import org.appdapter.gui.api.BoxPanelSwitchableView;
04.01.19 05:33:07<dmiles> fixing error slike that so it builds on the command line
04.01.19 05:33:24<aindilis> what is the name of the Java package manager?
04.01.19 05:33:40<dmiles> maven
04.01.19 05:33:44<aindilis> that's what i meant
04.01.19 05:33:53<dmiles> but i havent mavenized this
04.01.19 05:33:56<aindilis> ah
04.01.19 05:34:03<dmiles> i mavenized parts of this 
04.01.19 05:34:18<dmiles> liek appdapter
04.01.19 05:34:22<aindilis> we def need more people involved to handle things like this
04.01.19 05:35:11<dmiles> the reason i dont mavenize this is that it uses compilers that are non java
04.01.19 05:35:33<dmiles> since its written in 3 languages.. etc
04.01.19 05:36:16<dmiles> but the parts being apain are java right now
04.01.19 05:38:11<aindilis> https://www.youtube.com/watch?v=tx02tY8ABfA&t=62s
04.01.19 05:38:59<dmiles> :P
04.01.19 05:39:16<aindilis> that's kind of what it's like, we need the killer demo
04.01.19 05:39:25<aindilis> to get the people, but the people to get the demo
04.01.19 05:40:04<dmiles> i ,miss robokind where i had people paid to do this stuff
04.01.19 05:40:18<aindilis> nice
04.01.19 05:40:37<dmiles> liek setting up contuous integration
04.01.19 05:40:42<aindilis> yeah
04.01.19 05:40:48<aindilis> writing tests etc
04.01.19 05:40:57<dmiles> sucks that all those places wanted fakeware
04.01.19 05:41:14<dmiles> i mean places that are well organized often have no tech
04.01.19 05:41:21<aindilis> yeah
04.01.19 05:41:29<dmiles> jsut well-organizaion nazis
04.01.19 05:41:49<dmiles> we need a couple well-organizaion nazis
04.01.19 05:41:55<aindilis> I know one
04.01.19 05:42:09<aindilis> but he's into informatics
04.01.19 05:42:33<aindilis> networking business
04.01.19 05:42:36<aindilis> computer networking
04.01.19 05:43:00<dmiles> and someone that belives so much in mazen they will prove to use that ABCL and LACK-CL can be mavenized
04.01.19 05:43:07<dmiles> in maven
04.01.19 05:43:19<dmiles> and someone that belives so much in maven they will prove to us that ABCL and LACK-CL can be mavenized
04.01.19 05:43:22<aindilis> hehe, I totally would do it but I would probably slow you down
04.01.19 05:43:41<aindilis> since I am pretty weak with Java
04.01.19 05:43:49<aindilis> jbalint on the other hand
04.01.19 05:43:53<aindilis> he wakes in a few hours
04.01.19 05:44:06<aindilis> but he's overloaded
04.01.19 05:44:51<dmiles> i am jsut being lazy.. since been working a while i could get this building in under an hour if i just took more pills
04.01.19 05:45:23<aindilis> okay I'm being lazy too, I wanted to say ttys so we can stop procrastinating but I didn't want to be rude
04.01.19 05:45:25<dmiles> but feel like its the wrong hour to take more
04.01.19 05:45:38<aindilis> ah okay, yeah I'm going to take a break and then reassert this stuff
04.01.19 05:46:06<dmiles> well i was wasting time in NARS
04.01.19 05:46:18<aindilis> ah k
04.01.19 05:46:27<aindilis> so, thanks again for chatting, always a pleasure! I'll be bbiab 2 hrs
04.01.19 05:46:48<dmiles> on know that GMPowers is a littel scared that teh team is goign to ruin nars
04.01.19 05:47:03<dmiles> he hasnt said this to me in along while
04.01.19 05:47:44<aindilis> that does happen
04.01.19 05:48:06<dmiles> oh two x-nars peopel want to work with us
04.01.19 05:48:14<aindilis> you get people with less experience trying to do it how they know it instead of learning the right way
04.01.19 05:48:22<aindilis> well that's great!
04.01.19 05:48:39<aindilis> if you have their handles I will record that into my KB
04.01.19 05:48:53<dmiles> i dont trust xjrn but i do the otehr guy (the most recent escapee)
04.01.19 05:49:34<aindilis> cool!
04.01.19 05:49:43<aindilis> slow but steady growth
04.01.19 05:50:00<dmiles> i'll remember his name soon
04.01.19 05:50:04<aindilis> ah k
04.01.19 05:50:59<dmiles> some peopel give their left nut to work on cyc
04.01.19 05:51:05<dmiles> erm most
04.01.19 05:51:23<aindilis> srry you're saying they do or they would
04.01.19 05:51:27<aindilis> ?
04.01.19 05:51:40<dmiles> the otehr guy taht i cant remember his name "would"
04.01.19 05:51:46<aindilis> ah cool
04.01.19 05:52:46<aindilis> well I had licensing issues with it originally, but my own KBS was progressing too slowly, and you were very generous with time and assistance.  learning extralogical Prolog made all the difference for FRDCSA, so ty!
04.01.19 05:53:30<aindilis> I do intend to get back on track with DAYDREAMER soon
04.01.19 05:53:39<aindilis> I've just been on a security kick
04.01.19 05:54:12<aindilis> there were three things I said I needed to work on: DAYDREAMER, logging, and backup
04.01.19 05:54:23<aindilis> so logging is pretty much done
04.01.19 05:54:39<aindilis> and I get antsy about the backups
04.01.19 05:55:06<aindilis> and DAYDREAMER is a bit opaque, so I'll skip the security stuff and get back to reading about DAYDREAMER, since that's critical
04.01.19 05:55:08<aindilis> ttys!
04.01.19 05:57:21<dmiles> nn!
04.01.19 05:57:30<aindilis> night!
04.01.19 07:01:50<aindilis> okay read the next 10 pages
04.01.19 07:13:57<dmiles> i got the java code building from the command line
04.01.19 07:14:04<dmiles> now working on the .lisp code
04.01.19 07:15:31<dmiles>    [echo] Compiling Lisp system
                 <dmiles>      [echo] from /mnt/gggg/PrologMUD/pack/larkc_cl/jrtl-cl/src/org/armedbear/lisp
                 <dmiles>      [echo]  to  /mnt/gggg/PrologMUD/pack/larkc_cl/jrtl-cl/build/classes/org/armedbear/lisp
                 <dmiles>      [java] DEBUG: First SUBLFILE
                 <dmiles>      [java] Exception in thread "main" java.lang.Error: !commonSymbolsOK!
04.01.19 07:15:33<dmiles> :)
04.01.19 07:16:04<dmiles> !commonSymbolsOK! is my error that shows when CYC code is trying to be loaded in wrong order
04.01.19 07:17:32<aindilis> great work!
04.01.19 07:17:42<aindilis> this DAYDREAMER is really helping me with EQ
04.01.19 07:18:48<dmiles> EQ>
04.01.19 07:18:53<dmiles> EC?
04.01.19 07:19:02<aindilis> EQ := emotional intelligence
04.01.19 07:19:26<aindilis> it's allowing me to make deductions about people's behaviro that I normally miss
04.01.19 07:19:33<aindilis> by representing everything first class
04.01.19 07:19:54<dmiles> thats kind of neat 
04.01.19 14:32:01<dmiles> cyc: (constant-apropos "AddingSimpleFractions")
04.01.19 14:32:03<cyc> "#$AddingSimpleFractions"
                 <cyc> "#$AddingSimpleFractions-PlannedBy-VersionOfElleForAddMixedNumbers0001-1-30000101h00m11"
                 <cyc> "#$AddingSimpleFractions-PlannedBy-VersionOfElleForAddMixedNumbers0001-1-30000101h01m07"
04.01.19 14:32:04<cyc> "#$AddingSimpleFractions-PlannedBy-VersionOfElleForAddMixedNumbers0001-1-30000101h03m25"
04.01.19 14:32:06<cyc> "#$AddingSimpleFractions-PlannedBy-VersionOfElleForAddMixedNumbers0001-1-30000101h04m21"
04.01.19 14:32:10<cyc> "#$AddingSimpleFractions-PlannedBy-VersionOfElleForAddMixedNumbers0001-1-30000101h07m02"
04.01.19 14:32:14<cyc> "#$AddingSimpleFractions-PlannedBy-VersionOfElleForAddMixedNumbers0001-1-30000101h13m17"
04.01.19 14:32:17<cyc> "#$AddingSimpleFractions-PlannedBy-VersionOfElleForAddMixedNumbers0001-1-30000101h16m44"
04.01.19 14:32:20<cyc> "#$AddingSimpleFractions-PlannedBy-VersionOfElleForAddMixedNumbers0001-1-30000101h18m51"
04.01.19 14:32:23<cyc> ...
04.01.19 14:39:06<dmiles> cyc: (all-genls  #$IdentifyingAnAspectOfAProblemDescription)
04.01.19 14:39:08<cyc> "#$Identifying"
                 <cyc> "#$MentalSituation-SingleSubject"
                 <cyc> "#$IntentionalMentalSituation"
04.01.19 14:39:11<cyc> "#$IntentionalMentalEvent"
04.01.19 14:39:14<cyc> "#$Thinking"
04.01.19 14:39:18<cyc> "#$GeneralizedTransfer"
04.01.19 14:39:21<cyc> "#$InformationTransferEvent"
04.01.19 14:39:24<cyc> "#$InformationGathering"
04.01.19 14:39:27<cyc> "#$MentalSituation"
04.01.19 14:39:30<cyc> ...
04.01.19 14:39:32<dmiles> cyc: (all-specs  #$IdentifyingAnAspectOfAProblemDescription)
04.01.19 14:39:36<cyc> "#$IdentifyingOneRelevantQuantity"
04.01.19 14:39:37<cyc> "#$IdentifyingAllRelevantNumberWordsInAMathProblem"
04.01.19 14:39:41<cyc> ("#<" ("#$IdentifyingNIrrelevantQuantitiesFn" "2") ">")
04.01.19 14:39:44<cyc> ("#<" ("#$IdentifyingNIrrelevantQuantitiesFn" "1") ">")
04.01.19 14:39:47<cyc> ("#<" ("#$IdentifyingNIrrelevantQuantitiesFn" "4") ">")
04.01.19 14:39:50<cyc> ("#<" ("#$IdentifyingNIrrelevantQuantitiesFn" "3") ">")
04.01.19 14:39:53<cyc> ("#<" ("#$IdentifyingNIrrelevantQuantitiesFn" "0") ">")
04.01.19 14:39:56<cyc> "#$IdentifyingAllIrrelevantQuantitiesInAMathWordProblem"
04.01.19 14:40:00<cyc> ("#<" ("#$IdentifyingNRelevantQuantitiesFn" "4") ">")
04.01.19 14:40:03<cyc> ...
04.01.19 14:43:16<dmiles> cyc: (all-instances  #$AcceptableSolutionProcessModelMicrotheory)
04.01.19 14:43:19<cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" "#$OrderingTwoSimpleFractions") ">")
                 <cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" "#$DividingDecimals-DecimalDividend") ">")
                 <cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" "#$RemovingADecimalPoint") ">")
                 <cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" ("#$IdentifyingNIrrelevantQuantitiesFn" "0")) ">")
04.01.19 14:43:22<cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" "#$OrderingTwoSimpleFractions-CommonDenominators") ">")
04.01.19 14:43:25<cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" "#$MultiplyingSmallIntegers") ">")
04.01.19 14:43:29<cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" "#$PlacingADecimalPoint") ">")
04.01.19 14:43:32<cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" "#$SubtractingIntegers-SingleDigitFromLargerValue") ">")
04.01.19 14:43:35<cyc> ("#<" ("#$CanonicalProcessForProblemTypeMtFn" "#$SubtractingMixedFractions-FractionalPartOfMinuendLess") ">")
04.01.19 14:43:37<cyc> ...
04.01.19 14:46:51<dmiles> ok PlacingADecimalPoint/RemovingADecimalPoint etc are individule actions that CYC can teach Bina48 how to do
04.01.19 14:47:40<dmiles> workign out a system that she can request help
04.01.19 14:49:14<dmiles>  cyc was set up to teach humans how to do arithmetic
04.01.19 14:49:35<dmiles> but it is structured wnough i think it will work out for teaching robot
04.01.19 17:13:24*** Join: egp_ (~egp_@141.105.40.254, egp_: Eugene)
04.01.19 17:13:30<dmiles> cyc: (+ 1 1)
04.01.19 17:13:32<cyc> "2"
04.01.19 17:26:32<aindilis> yeah there is that Math ITS Game from CYC
04.01.19 18:56:43*** Join: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net, (unauthenticated): b3nszy)
04.01.19 18:56:48<b3nszy> hey dmiles and aindilis
                 <dmiles> cyc: (+ 1 1)
04.01.19 18:56:50<cyc> "2"
04.01.19 18:57:04<b3nszy> have food poisoning atm but have you been thinking about my idea?
04.01.19 20:01:01*** Quit: egp_ (~egp_@141.105.40.254) left #logicmoo: Remote host closed the connection
04.01.19 20:17:36*** Join: egp_ (~egp_@141.105.40.254, egp_: Eugene)
04.01.19 20:17:42<dmiles> cyc: (+ 1 1)
04.01.19 20:17:43<cyc> "2"
04.01.19 21:49:14*** Quit: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net) left #logicmoo: Remote host closed the connection
05.01.19 00:07:44<aindilis> I am thinking about using HPKB COA system as basis of WOPR
05.01.19 00:08:08<aindilis> I could reduce the kinds of activities available
05.01.19 00:08:14<aindilis> and add some interpersonal ones
05.01.19 00:08:43<aindilis> but for starters I would just get some basic functionality of it working
05.01.19 00:08:48<aindilis> dmiles: 
05.01.19 02:38:55*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xvxykhtxxkcwnunc) left #logicmoo: Quit: Connection closed for inactivity
05.01.19 02:40:52<aindilis> dmiles: have you succeeded in running the continuousQuery.prolog file?
05.01.19 02:40:54<aindilis> in RTEC
05.01.19 02:41:16<aindilis> and if so do you have a shell script to do it?
05.01.19 04:46:40<dmiles> aindilis: yes.. but i used Yap prolog 
05.01.19 04:47:04<aindilis> ah
05.01.19 04:47:07<dmiles> (instaed of SWI)
05.01.19 04:47:24<dmiles> at least on a couple examples
05.01.19 04:47:34<aindilis>  I guess I'll just try to compile it for swipl after I run it in yap
05.01.19 04:47:44<aindilis> maybe communicate with the repo owner about it if I can't figure it out
05.01.19 04:48:05<aindilis> btw, I'm taking an off day today, all I did was to work out the API to retrieve cell phone position reports
05.01.19 04:48:14<dmiles> neat
05.01.19 04:48:17<aindilis> what are you up to?
05.01.19 04:48:48<dmiles> i been getting CYC to run under ABCL
05.01.19 04:48:55<aindilis> nice!
05.01.19 04:48:58<dmiles> about to commit soon
05.01.19 04:49:06<aindilis> would I be able to try it out?
05.01.19 04:49:16<dmiles> and started a README.md so you can install it
05.01.19 04:49:20<aindilis> cool ty
05.01.19 04:50:12<dmiles> i expremented with a couple difernt directory layouts .. thats what taking time
05.01.19 04:50:21<aindilis> good
05.01.19 04:50:34<dmiles> i ending up now jsut going to home it all under a single dir
05.01.19 04:50:47<aindilis> I like that approach when possible
05.01.19 04:51:24<dmiles> so at one point in the install we do a git checkout . to restore my overwrites
05.01.19 04:52:00<dmiles> i ended up not using the shipped cyc.jar 
05.01.19 04:52:35<dmiles> well still sorta expermenting with if i can patch the 12 files in it i replace with a classloader
05.01.19 04:52:49<dmiles> otherwise i have to ship the entire java src
05.01.19 04:52:57<aindilis> ooh
05.01.19 04:53:02<dmiles> (of the cyc.jar)
05.01.19 04:53:14<aindilis> yeah I don't know bout that
05.01.19 04:53:18<dmiles> it isnt too scarey hopefully (to cycorp)
05.01.19 04:53:31<aindilis> good
05.01.19 04:54:06<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/tree/larkc/platform/Desktop/server-4q/com/cyc/cycjava/cycl
05.01.19 04:54:16<dmiles> its alredy commited anyways :)
05.01.19 04:55:01<dmiles> its not like i am shipping the lisp code.. just the .java code that lisp code creates
05.01.19 04:55:08<aindilis> ah k
05.01.19 04:55:20<aindilis> I hadn't realized it worked that way
05.01.19 04:55:54<aindilis> well i backed it up
05.01.19 04:55:58<dmiles> yeah it can be translated to C/Java/CommonLisp
05.01.19 04:56:32<dmiles> though i have a C# and C++ version of the code as well
05.01.19 04:56:41<aindilis> :)
05.01.19 04:57:12<aindilis> I think I mentioned I'm looking at using the HPKB COA as the foundation for WOPR
05.01.19 04:57:23<dmiles> say more
05.01.19 04:58:00<aindilis> well you know, the teknowledge dump has the COA stuff, and I intend to get it to load in CYC/Prolog, and then see what kind of bindings it has and then go through and slice the KB
05.01.19 04:58:26<aindilis> get rid of the things like seaborne assaults and replace it with things like interpersonal diplomatic actions
05.01.19 04:58:53<aindilis> I'm not sure if it's a good plan - I'm also working on just writing it myself
05.01.19 04:58:58<aindilis> I hope the two ends meet
05.01.19 04:59:19<aindilis> but it is a good corpus of SitSitType type stuff
05.01.19 04:59:38<aindilis> I wonder if the version in the dump was working at all
05.01.19 05:00:20<aindilis> but it's going to be tedious to formalize and extract all the home security knowledge from books
05.01.19 05:01:54<dmiles> yeah oyu can probley set up a bunch of cosntant renames
05.01.19 05:02:29<dmiles> so that you can leverage what you know to be a be a semi-complex and complete domain
05.01.19 05:02:48<aindilis> do you know is that COA version a working one?
05.01.19 05:03:02<aindilis> there is a KB called working but I don't know if everything plays nicely
05.01.19 05:03:13<dmiles> i started during the end of that project so not as familiar
05.01.19 05:03:20<aindilis> k
05.01.19 05:03:33<dmiles> basicalyul they got tired of paying cycorp 30% of all their grants
05.01.19 05:03:42<aindilis> why is it that Adam isn't really keen on Prolog and yet was using it in it?  I don't understnad that
05.01.19 05:03:57<aindilis> lol
05.01.19 05:04:19<dmiles> so they hired me to start cvonverting all their projects to PRolog instead of CYC
05.01.19 05:04:25<aindilis> awesome
05.01.19 05:04:36<aindilis> is that how you got going on PrologMUD?
05.01.19 05:04:42<dmiles> yes
05.01.19 05:04:46<aindilis> k, cool
05.01.19 05:04:56<aindilis> neat how the incidents of our lives shape our futures
05.01.19 05:04:59<dmiles> well actualy i was working for Microsoft on ProogMUDs at the time
05.01.19 05:05:10<aindilis> cool
05.01.19 05:05:36<dmiles> and when Tekn tried to find prolog programmers they found that there was maybe onle 2 or three in the country
05.01.19 05:06:12<dmiles> it was Mark Stickel or Me or this other guy 
05.01.19 05:06:38<dmiles> all their previous employees had to start learning Prolog
05.01.19 05:07:07<dmiles> like the all the prolog code you see is from people that started leanring it after i was hired
05.01.19 05:07:14<aindilis> k
05.01.19 05:07:38<dmiles> oh but what i was going to say.. is that CYC should hav been a MUD
05.01.19 05:08:03<aindilis> does that presume the application domain is physical?
05.01.19 05:08:33<dmiles> not always.. such as most properties are classes and types
05.01.19 05:08:49<aindilis> k
05.01.19 05:09:07<dmiles> but yeah i always felt it was sanest to allow a physcial view of everyting non-physical
05.01.19 05:09:17<dmiles> (but onyl a view.. not a relaity)
05.01.19 05:09:26<dmiles> (but onyl a view.. not a reality)
05.01.19 05:09:55<aindilis> well I'm sorry I'm not feeling very well, so I'm just going to lurk here if you want to share more info and maybe occasionally respond.  Thanks for sharing ABCL CYC, please let me know when I can try to install it.  I need to take something to prevent catching M's cold
05.01.19 05:09:59<dmiles> some rooms are made up of only non-physical objects
05.01.19 05:10:12<dmiles> such as Plan-Room
05.01.19 05:10:24<aindilis> neat
05.01.19 05:15:21<dmiles> so i thin cyc should be shippablke in less than an hour
05.01.19 05:15:29<aindilis> :)!
05.01.19 05:38:01*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
05.01.19 05:38:06<dmiles> cyc: (+ 1 1)
05.01.19 05:38:08<cyc> "2"
05.01.19 06:34:16*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
05.01.19 07:13:30<cyc> so maybe we'll just DAYDREAMER inside ABCL after all?
05.01.19 07:13:43<cyc> *just run
05.01.19 07:16:15<dmiles> yes
05.01.19 07:16:42<cyc> :)
05.01.19 07:27:32<aindilis> weird apparently FRDCSA used to have an rcyc-jrtl-cyc-sys10p129151-kb7142 file somewhere
05.01.19 07:27:41<aindilis> but it's missing now
05.01.19 07:30:47<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/README.md
05.01.19 07:31:02<aindilis> wow it's already 5 days into 2019
05.01.19 07:31:18<aindilis> oh cool, so it's ready to build?
05.01.19 07:31:38<dmiles> i think so
05.01.19 07:33:07<dmiles> damn refsr https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/README.md
05.01.19 07:33:45<dmiles> i still have to fix the very last step
05.01.19 07:33:52<aindilis> k
05.01.19 07:33:56<dmiles> it worked on windows.. but that wa my first linux run
05.01.19 07:34:20<dmiles> all tha tis not starting is the HTTPD server
05.01.19 07:35:18<dmiles> CYC(2): :bt
                 <dmiles>   0: (SYSTEM:BACKTRACE)
                 <dmiles>   1: (INVOKE-DEBUGGER #<ERROR {13396395}>)
                 <dmiles>   2: org.armedbear.lisp.Lisp.error(Lisp.java:434)
05.01.19 07:35:19<dmiles>   3: com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:260)
                 <dmiles>   4: com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:308)
05.01.19 07:35:20<dmiles>   5: com.cyc.tool.subl.jrtl.nativeCode.type.core.AbstractSubLObject.enforceType(AbstractSubLObject.java:158)
                 <dmiles>   6: com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high.close(streams_high.java:130)
05.01.19 07:35:21<dmiles>   7: com.cyc.cycjava.cycl.file_vector.close_file_vector(file_vector.java:527)
05.01.19 07:35:38<dmiles> oh its no closing a file handle
05.01.19 07:35:50<dmiles> anyways i am really tuckered out 
05.01.19 07:36:22<dmiles> i feel like this will take a while to troubleshoot
05.01.19 07:37:11<aindilis> This is phenomenol work!  Take a break now.
05.01.19 07:37:25<dmiles> i wondewr if i can green/bold what i type in at the install
05.01.19 07:37:41<aindilis> Monday morning I will do backups
05.01.19 07:37:51<aindilis> should take 1-2 days
05.01.19 07:38:04<aindilis> then I should be ready to continue
05.01.19 07:39:09<aindilis> so you just have to run ant twice?
05.01.19 07:39:45<dmiles> yes
05.01.19 07:40:01<dmiles> it been a long time bug in ABCL for a few years
05.01.19 07:40:25<dmiles> also you will run ant one last time though as..
05.01.19 07:40:37<dmiles> ant -f ec-build.xml
05.01.19 07:40:49<dmiles> (so three times total)
05.01.19 07:40:51<dmiles> ant
05.01.19 07:40:52<dmiles> and
05.01.19 07:40:55<dmiles> oops
05.01.19 07:41:07<dmiles> ant ; ant ; ant -f ec-build.xml
05.01.19 07:42:48<dmiles> though set_classpath script might need the jvm install dir changed
05.01.19 07:43:01<dmiles> i am using tools.jar
05.01.19 07:43:10<dmiles> (from the JVM)
05.01.19 07:44:23<cyc> srry something froze my machine
05.01.19 07:44:40<aindilis> back now ping
05.01.19 07:45:00<dmiles> n/p
05.01.19 07:49:26<aindilis> ha! The fact that it was common lisp interpreter through me for a loop
05.01.19 07:49:40<aindilis> (comment #$prevents-SitSitType) -> boom, error
                 <aindilis> lol
05.01.19 07:50:05<aindilis> this is FANTASTIC
05.01.19 07:50:40<aindilis> how would one write that with ANSI CL?
05.01.19 07:50:48<dmiles> (appropos "REPL")
05.01.19 07:51:30<dmiles> ok its.. 
05.01.19 07:51:34<dmiles> (CYC-REPL)
05.01.19 07:51:43<dmiles> to get the SubL interactor
05.01.19 07:51:51<dmiles> CL-USER(2): (CYC-REPL)
05.01.19 07:51:52<dmiles> Warn: Redefining {dynamic special built-in-function CL:* -pf_multiply- ====> CL:NIL}
                 <dmiles> Warn: COMMON-LISP:* NOT redefining #<Primitive.pf_multiply CL:* "&rest numbers" {18D003CD}> with #<SubLCompiledFunction CL:*  {4116F66A}>
                 <dmiles> CYC(1):
05.01.19 07:52:20<aindilis> this is amazing!
05.01.19 07:52:33<dmiles> oops   com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException: Undefined reader macro #$.
05.01.19 07:53:00<dmiles> wierd that was working earlier
05.01.19 07:53:35<dmiles> oh i see.. i blocking on first error
05.01.19 07:53:54<dmiles> it thinks it needs to be stuck in CL Error mode
05.01.19 07:54:22<aindilis> well I know you're tired I won't push you to tweak it right now, great job compiling this!
05.01.19 07:54:38<aindilis> now does it do Prolog with PAIP?
05.01.19 07:54:48<aindilis> or does it have SWIPL bindings?
05.01.19 07:54:56<dmiles> it does yes
05.01.19 07:55:03<aindilis> sweet, where?
05.01.19 07:55:22<aindilis> this is candyland
05.01.19 07:55:24<dmiles>  (apropos "SWI")
05.01.19 07:55:27<aindilis> ty!
05.01.19 07:55:47<aindilis> Imma tell jbalint
05.01.19 07:55:54<dmiles> SWIPL-INIT-SERVER [FUNCTION] unbound"{built-in-function COMMON-LISP-USER:SWIPL-INIT-SERVER -MethodFunction-}"
05.01.19 07:56:02<dmiles> that dont mean the fucntion is unbound
05.01.19 07:56:09<aindilis> k
05.01.19 07:56:12<dmiles> jsut means the suble is not yet bound
05.01.19 07:56:23<dmiles> jsut means the symbol-value is not yet bound
05.01.19 07:56:30<dmiles> the symbol-function is
05.01.19 07:56:37<aindilis> cool
05.01.19 07:57:53<dmiles> i have to document the startup switches i made fort intialing pprolgo and such
05.01.19 07:58:10<aindilis> oh okay no rush, I'll try to build DAYDREAMER on it in a bit
05.01.19 07:58:12<dmiles> since tehre are 5 differnt start modes
05.01.19 07:58:27<aindilis> I know there's stuff like this:
05.01.19 07:58:45<aindilis> 'ASSERTION'(':TRUE-DEF', [[], [['#$typeLevelCognates', '#$causes-SitSitType', '#$causes-SitTypeSitType']]], '#$BaseKB', [], 568753, ':FORWARD').
05.01.19 07:58:55<aindilis> does the SWIPL do that or is that another LIB?
05.01.19 07:59:18<dmiles> that was SWIPL i think
05.01.19 07:59:27<aindilis> I'm sorry I'll stop asking you questions, I'm sure you want to rest
05.01.19 07:59:34<aindilis> TY!
05.01.19 07:59:41<aindilis> AGI ... ...
05.01.19 08:00:52<dmiles> (apropos "-EVAL")
05.01.19 08:01:26<dmiles> BSH and PROLOG have EVALs
05.01.19 08:01:51<dmiles> BSH is a BeanSCripting Framework i used to tie the systems togehr
05.01.19 08:02:02<aindilis> ah
05.01.19 08:02:03<dmiles> ok nn!
05.01.19 08:02:18<aindilis> nn!  
05.01.19 11:00:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jgabdpcadfkgdgjd, stoopkid: stoopkid)
05.01.19 11:00:21<dmiles> cyc: (+ 1 1)
05.01.19 14:12:31*** Join: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net, b3nszy: b3nszy)
05.01.19 14:12:34<b3nszy> hey aindilis and dmiles
05.01.19 14:12:36<dmiles> cyc: (+ 1 1)
05.01.19 14:12:42<b3nszy> have you seen this recent talk by joscha bach? https://media.ccc.de/v/35c3-10030-the_ghost_in_the_machine?fbclid=IwAR0h1-qkD8QWCr-MWth_L0KlXUSYXgNZSq2h-fQG-_E2c1vw38mVu0yeaHk#t=3687
05.01.19 14:12:46<b3nszy> very interesting
05.01.19 15:17:42<aindilis> hey b3nszy 
05.01.19 15:21:47<b3nszy> hi
05.01.19 15:37:52<aindilis> I will check it out tomorrow
05.01.19 16:38:50*** Quit: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net) left #logicmoo: Remote host closed the connection
05.01.19 20:02:40<dmiles> aindilis: i will be on in a couple hours to work on the bugs i left last night
06.01.19 01:47:05*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
06.01.19 01:48:23*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
06.01.19 02:29:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jgabdpcadfkgdgjd) left #logicmoo: Quit: Connection closed for inactivity
06.01.19 03:56:38*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
06.01.19 03:56:46<dmiles> cyc: (+ 1 1)
06.01.19 03:56:56<aindilis> hey
06.01.19 04:00:41*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
06.01.19 04:00:42*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Remote host closed the connection
06.01.19 04:00:46<dmiles> cyc: (+ 1 1)
06.01.19 04:01:16*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
06.01.19 04:01:21<dmiles> cyc: (+ 1 1)
06.01.19 04:54:03<aindilis> dmiles: ping
06.01.19 04:54:47<aindilis> so I did some simple stuff today - wrapped the URL for getting the position data from the OwnTracks db using my API::Manager system and then have SensorNetwork refactored and calling it
06.01.19 04:55:01<aindilis> I want to in a few days have it be reasoning with track data.
06.01.19 04:55:25<aindilis> but my priorities right now are the backup and the DAYDREAMER/CYC_JRTL
06.01.19 04:56:14<aindilis> it kind of stinks right now because all of this stuff is done imperatively in Perl
06.01.19 04:56:36<aindilis> whereas ideally it would be done in Prolog, but I haven't had time to get all the infrastructure in place to do taht
06.01.19 04:57:02<aindilis> imperative feels like putting the wagon before the horse
06.01.19 05:33:32<aindilis> dmiles: ping
06.01.19 06:22:39<aindilis> ping
06.01.19 06:22:56<aindilis> I opened an issue for RTEC to work in SWIPL
06.01.19 08:23:58<aindilis> dmiles: ping
06.01.19 08:50:55<dmiles> aindilis: pong
06.01.19 08:51:05<aindilis> hey
06.01.19 08:51:07<aindilis> how'd it go?
06.01.19 08:51:24<dmiles> it starts with my very last commit
06.01.19 08:51:35<aindilis> cool, will try in a sec
06.01.19 08:51:46<aindilis> just setting up a camera and computing geodistances with aperl mod
06.01.19 08:51:48<dmiles> and even works.. i am not writitng up a daydreammer eample
06.01.19 08:51:59<aindilis> wait DAYDREAMER works too?
06.01.19 08:52:11<dmiles> yes but does not leverage CYC 
06.01.19 08:52:19<aindilis> ah cool, well that's for me to figure out
06.01.19 08:52:26<aindilis> you've made it easy
06.01.19 08:52:38<aindilis> I will read another 10 pages today
06.01.19 08:52:44<dmiles> awesome!
06.01.19 08:53:01<dmiles> i had a power outage earlier and may have lost what you said
06.01.19 08:53:17<aindilis> "so I did some simple stuff today - wrapped the URL for getting the position data from the OwnTracks db using my API::Manager system and then have SensorNetwork refactored and calling it"
06.01.19 08:53:33<aindilis> the rest was just musings
                 <dmiles> power outage was just due to high winds
06.01.19 08:53:37<aindilis> ah
06.01.19 08:54:27<aindilis> I hope you didn't work *too* hard today 
06.01.19 09:07:09<dmiles> :)
06.01.19 09:07:11<dmiles> (UI-INSPECT ^cx.1)
06.01.19 09:07:21<dmiles> i am working on the UI-INSPECTOR
06.01.19 09:07:46<dmiles> so one can see structures
06.01.19 09:08:05<dmiles> so going to work another 2-3 hours until it works
06.01.19 09:46:36<cyc> okay well I sort of got this camera set up
06.01.19 09:46:52<cyc> sorry it was taking me a while
06.01.19 09:47:16<cyc> I will now set up and test your work
06.01.19 12:22:36*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
06.01.19 12:22:41<dmiles> cyc: (+ 1 1)
06.01.19 14:33:03*** Join: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net, b3nszy: b3nszy)
06.01.19 14:33:07<b3nszy> hey aindilis
06.01.19 14:33:08<dmiles> cyc: (+ 1 1)
06.01.19 14:33:17<aindilis> hi b3nszy 
06.01.19 14:33:18<b3nszy> want to be a part of my virtual learnign environment project
06.01.19 14:33:23<aindilis> sure
06.01.19 14:33:26<b3nszy> im starting it back up have around 20 members now
06.01.19 14:33:29<b3nszy> download discord
06.01.19 14:35:44<b3nszy> https://discord.gg/qy9TuC
06.01.19 14:35:46<aindilis> k using the web client, now what
                 <aindilis> k
06.01.19 15:02:28<aindilis> dmiles: can I ask a hint, do I need to modify files to get DAYDREAMER to load?
06.01.19 15:13:28*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
06.01.19 15:13:53*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
06.01.19 15:13:59<dmiles> cyc: (+ 1 1)
06.01.19 15:18:51<aindilis> dmiles: quick question, do I have to modify DAYDREAMER source to load in LarKC_CL?
06.01.19 15:21:05<aindilis> b3nszy: I shared a GDoc with you
06.01.19 15:21:12<aindilis> it's just a temporary thing
06.01.19 15:21:17<aindilis> where is the code for the mathbot?
06.01.19 15:26:20<b3nszy> aindilis: 
06.01.19 15:26:23<b3nszy> where is it
06.01.19 15:26:32<aindilis> https://docs.google.com/document/d/1nbkFwSQcY9rqWniTtCTRQ7SWzlXid0hbbTtsO9MHTwQ/edit
06.01.19 15:33:55<b3nszy> let's talk on discord
06.01.19 15:34:03<b3nszy> I made a private room in the channel 
06.01.19 15:34:19<aindilis> how do I access it?
06.01.19 16:30:47<aindilis> dmiles: thanks to pjb on #lisp I got it working
06.01.19 16:30:52<aindilis> DAYDREAMER
06.01.19 16:31:04<aindilis> (setf *default-pathname-defaults* #P"/var/lib/myfrdcsas/versions/myfrdcsa-1.0/sandbox-new/cyc-jrtl-with-commonlisp-20190106/cyc-jrtl-with-commonlisp-20190106/\
                 <aindilis> platform/daydreamer/")                                                                                                                                         
                 <aindilis> (load "dd")                                                                                                                                                    
                 <aindilis> (daydreamer)
06.01.19 16:32:14<aindilis> maybe also this, I'm not sure yet: (setq *LISP-FILE-TYPE* "cl")
06.01.19 18:13:54*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
06.01.19 18:18:56*** Quit: b3nszy (~b3nszy@99-73-134-11.lightspeed.miamfl.sbcglobal.net) left #logicmoo: Remote host closed the connection
06.01.19 18:45:58<dmiles> (cl:load "e2c/d")
06.01.19 18:46:10<dmiles> loads teh local copy
06.01.19 18:46:24<dmiles>  (daydreamer)
06.01.19 18:46:30<dmiles> runs it
06.01.19 18:46:38<aindilis> ah cool
06.01.19 21:20:05*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-znhwhzhgrxvqiuok, stoopkid: stoopkid)
06.01.19 21:20:10<dmiles> cyc: (+ 1 1)
06.01.19 21:43:50*** Join: egp__ (~egp_@31.47.182.1, egp_: Eugene)
06.01.19 21:43:56<dmiles> cyc: (+ 1 1)
06.01.19 21:44:56*** Quit: egp_ (~egp_@141.105.40.254) left #logicmoo: Ping timeout: 258 seconds
06.01.19 21:50:31*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
06.01.19 21:50:37<dmiles> cyc: (+ 1 1)
06.01.19 23:21:23*** Quit: egp__ (~egp_@31.47.182.1) left #logicmoo: Quit: Leaving
06.01.19 23:21:36*** Join: egp_ (~egp_@31.47.182.1, egp_: Eugene)
06.01.19 23:21:42<dmiles> cyc: (+ 1 1)
06.01.19 23:22:57*** Quit: egp_ (~egp_@31.47.182.1) left #logicmoo: Remote host closed the connection
07.01.19 04:02:54<aindilis> http://www.goertzel.org/benzine/WakingUpFromTheEconomyOfDreams.htm
07.01.19 04:03:00<aindilis> similar to FRDCSA early days
07.01.19 04:04:37<aindilis> https://frdcsa.org/~andrewdo/dmiles/013124.html
07.01.19 04:05:52<aindilis> maybe that http://ilpubs.stanford.edu:8090/594/1/2003-33.pdf paper could help with our data-integration ideas
07.01.19 06:47:49<aindilis> dmiles: ping
07.01.19 07:07:19<dmiles> aindilis: pong
07.01.19 07:08:03* dmiles is adding nickname triggers now.. my IRC client got fragged on a week or two ago
07.01.19 07:23:27<aindilis> dmiles: hey
07.01.19 07:23:53<aindilis> sorry also my IRC doesn't seem to be doing anything about nickname triggers
07.01.19 07:24:06<aindilis> I set it up to but it hasn't done anything, so I'll have to troubleshoot it, but not now
07.01.19 07:24:38<aindilis> I'm debating pursuing the braindead thing I want to do, which is to get location hovering detection reverse-geocoding working, or to work on the security ontology / WOPR system which is hard.
07.01.19 07:25:11<aindilis> I am of course thrilled about LarKC_CL
07.01.19 07:25:24<aindilis> but not feeling up to doing real work atm
07.01.19 07:25:45<aindilis> maybe I'll just dabble with loading the Prolog stuff, I tried to figure it
07.01.19 07:25:47<aindilis> *out
07.01.19 07:26:11<aindilis> if you can please tell me how to execute a prolog query
07.01.19 07:26:23<aindilis> I knew the function name but I couldn't figure out the arg format
07.01.19 07:28:52<aindilis> (it's braindead because it's not my highest priority, not because it isn't worth doing or difficult to do)
07.01.19 07:29:33<aindilis> then again it may be good just to get something working
07.01.19 07:29:41<aindilis> build stamina
07.01.19 07:34:41<dmiles> did you get the https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/#extra-features to work?
07.01.19 07:35:41<dmiles> tonight i been converting CycL assertion handles from JVM objects to proxy objects.. this is part of getting ready to do the prolog interface correctly
07.01.19 07:35:57<aindilis> oh wow
07.01.19 07:35:58<aindilis> nice!
07.01.19 07:36:22<aindilis> yes it worked fine
07.01.19 07:36:37<dmiles> well the idea is the KB cant have an asserion unless prolog providfes it.. and of course prolog must provide everyrting that CYC already expects to be present
07.01.19 07:37:25<aindilis> hrm
07.01.19 07:37:28<aindilis> what does that entail
07.01.19 07:37:29<aindilis> ?
07.01.19 07:37:43<dmiles> jsut moving the assertion-cotent struct into prolog
07.01.19 07:38:12<aindilis> ah so it's not like you have to translate all the functions
07.01.19 07:38:21<dmiles> i am about 90% done with this process
07.01.19 07:38:28<aindilis> awesome
07.01.19 07:39:09<dmiles> oh though what is very important to me though is that some prolgo calls become cyc-queries
07.01.19 07:39:28<aindilis> ah right
07.01.19 07:39:41<dmiles> since what prolog lacks is the memmoization that Cyc provides
07.01.19 07:39:54<dmiles> and cyc's tactiacian stuff
07.01.19 07:40:05<aindilis> yeah it will be first rate and really speed up development
07.01.19 07:40:44<dmiles> cyc-tactician provides all the things prolgo is missing
07.01.19 07:41:33<aindilis> yeah I simply cannot wait to try it out, but that's tempered by the cold I'm running
07.01.19 07:41:36<dmiles> cyc-tactician = query planner .. = what order to call prolog preds
07.01.19 07:41:44<aindilis> wow
07.01.19 07:41:46<aindilis> bidirectional?
07.01.19 07:42:19<dmiles> well i am working on one dirrectional right now .. "Prolog calls Cyc"
07.01.19 07:42:41<aindilis> ah, but when you say what order to call prolog preds, how does that work?
07.01.19 07:43:44<dmiles> oh all prolog preds are pretending to be part of the Cyc KB.. so when you assert(isa(joe,mary)) that asserts into CYC.. but cyc _actualyl_ stores everyhting in Prolog
07.01.19 07:44:20<aindilis> does it still index?
07.01.19 07:44:23<dmiles> so isa(joe,mary) actualyl shows up as a prolog clause
07.01.19 07:44:33<dmiles> yes it still indexes
07.01.19 07:44:48<aindilis> wow, did you rip out the previous persistence mechanism?
07.01.19 07:45:02<dmiles> thats the 90% that i workign on
07.01.19 07:45:20<aindilis> oh, wow. so here's a though I wrote a db persistence mechanism for prolog
07.01.19 07:45:29<aindilis> maybe that could come in handy for cross-session persistence
07.01.19 07:46:02<aindilis> also, I doubt it's possible but it would be ridiculous if LarKC_CL could load Formalog (Perl/Prolog interface)
07.01.19 07:46:08<dmiles> techically if you made the persistence reassert the prologo clauses.. then that should reload CYC
07.01.19 07:46:28<aindilis> hrm, that wouldn't be as quick as we'd like but it could be a start
07.01.19 07:46:41<aindilis> what about writing a world? will that still work?
07.01.19 07:47:24<dmiles> in this case i am actualyl breaking my world writter code (which i never tested to work yet anyways)
07.01.19 07:47:36<aindilis> ah 
                 <aindilis> k
07.01.19 07:48:05<dmiles> so one model of wrong writting is basically a Java Seriled Snapshot of what CYC has loaded
07.01.19 07:48:22<dmiles> so one model of world  writting is basically a Java Serailed Snapshot of what CYC has loaded into memory
07.01.19 07:48:27<dmiles> i can restore that memory
07.01.19 07:48:38<aindilis> oh okay
07.01.19 07:49:05<dmiles> but that is based on assertion-content structs being int he JVM
07.01.19 07:49:17<dmiles> (instead of Prolog)
07.01.19 07:50:03<aindilis> yeah
07.01.19 07:50:30<dmiles> i could still make it that work .. but they have to delete thesmevles etc.. back and forth
07.01.19 07:50:46<dmiles> so easier to let proolg manage any KB edits
07.01.19 07:51:06<dmiles> persisting the edits
07.01.19 07:51:19<aindilis> okay well I can work on the DB stuff then, is that what you'd like?
07.01.19 07:51:32<aindilis> it writes okay, I'm not sure if it reads okay yet
07.01.19 07:51:45<dmiles> though of course with all the prolgo stuff i stil making sure it can be switched off using any Prolog
07.01.19 07:51:51<aindilis> great
07.01.19 07:52:22<dmiles> writes okay, I'm not sure if it reads okay = heh was same with my JVM world-immage saver
07.01.19 07:52:48<aindilis> lol
                 * dmiles not actualyl wrote the reader yet
07.01.19 07:52:59<aindilis> right, same here
07.01.19 07:54:13<dmiles> so you saying you got slightly unhappy with PDDL.. did you say there was an alternative you liked?
07.01.19 07:54:24<aindilis> heh
07.01.19 07:54:32<aindilis> we're kinda screwed
07.01.19 07:54:38<aindilis> there was this:
07.01.19 07:54:53<aindilis> https://pdfs.semanticscholar.org/ac47/bbda711c4b3b66340cc5282e74959e21f090.pdf\
07.01.19 07:54:56<aindilis> https://pdfs.semanticscholar.org/ac47/bbda711c4b3b66340cc5282e74959e21f090.pdf
07.01.19 07:55:16<aindilis> I was hoping to use a combination of your metaplanner with other (sub)planners
07.01.19 07:55:57<aindilis> I need to do more work on the "factored" planning.  if I understand the term correctly, you generate certain plans and then assert them as constraints in other generated plans
07.01.19 07:56:06<aindilis> I suppose you could backtrack
07.01.19 07:56:18<aindilis> on plan layers
07.01.19 07:56:33<aindilis> but all planners have something wrong with them
07.01.19 07:56:45<aindilis> what we need is a temporal conditional metric metaplanner
07.01.19 07:56:57<aindilis> that can deal with imperfect information
07.01.19 07:57:33<aindilis> so again, there is a lot of work these days on systems that have many planners and run them concurrently
07.01.19 07:57:40<dmiles> why i was wondering is how the KR might be differnt
07.01.19 07:57:56<aindilis> GDL-II would be good
07.01.19 07:57:59<aindilis> RtGDL
07.01.19 07:58:10<aindilis> *rtGDL
07.01.19 07:59:02<dmiles> ah yeah rtGDL
07.01.19 07:59:21<aindilis> also ggpzero
07.01.19 07:59:23<dmiles> in many ways Logicmoo was based on programmers thinking in rtGDL
07.01.19 07:59:37<aindilis> https://github.com/richemslie/galvanise_zero
07.01.19 07:59:44<dmiles> well GDL then the rt was goign to come soon
07.01.19 07:59:59<aindilis> yeah it's important to be flexible and support all frameworks and translations between them
07.01.19 08:00:02<aindilis> I have a translator
07.01.19 08:00:05<aindilis> let me look
07.01.19 08:00:49<dmiles> re: galvanise_zero .. there are even Prolog Based GGP players
07.01.19 08:01:08<aindilis> good
07.01.19 08:01:11<aindilis> we need some more
07.01.19 08:01:14<aindilis> I never got FLUXPlayer
07.01.19 08:01:50<aindilis> https://bitbucket.org/haz/uambat
07.01.19 08:02:00<aindilis> :)
07.01.19 08:02:06<dmiles> its much like FLUXPlayer.. was FLUX suppposed to be GGP?
07.01.19 08:02:22<aindilis> well FLUXPlayer is GGP, FLUX is FLUX
07.01.19 08:02:50<aindilis> check out UAMBAT i was thrilled when I found it, not sure how mature it is
07.01.19 08:04:36<dmiles> https://www.cc.gatech.edu/faculty/ashwin/papers/er-10-03.pdf  <- that is the Prolog  thing i thought was GGP
07.01.19 08:05:04<dmiles> oops n/m that is the java-philed version og MMPM
07.01.19 08:06:04<dmiles> yes uambat will really help me understand 
07.01.19 08:06:15<aindilis> well it looks to be vaporware srry
07.01.19 08:06:29<aindilis> The project is currently in its inception phase, and if you would like to be involved at any level (from active collaboration to just cheering us on), then contact Christian Muise for more information.
07.01.19 08:06:36<aindilis> we'll have to inspire him/her
07.01.19 08:07:15<aindilis> this repo looks interesting too: https://bitbucket.org/haz/pdkb-planning
07.01.19 08:07:34<aindilis> I think this person has the right approach
07.01.19 08:07:42<dmiles> ah yeah it looks like he understood what we/he needed was all
07.01.19 08:07:44<aindilis> *.*
07.01.19 08:08:56<aindilis> I have an idea
07.01.19 08:09:13<aindilis> maybe we can export a properly licensed version that we can use as a testbed for planning technologies
07.01.19 08:09:24<aindilis> and people would on their own mount their planners and interfaces to it
07.01.19 08:09:38<aindilis> we could get it working and advertise on ICAPS/IPC
07.01.19 08:09:44<aindilis> I could write a paper
07.01.19 08:10:10<aindilis> *version of LarKC_CL
07.01.19 08:10:22<dmiles> oh i see almost what yiou are saying .. is we beuild everyitntg arorund the notion of having a great planner.. and the world needs to provide that great planner?
07.01.19 08:10:46<aindilis> well, set of planners that are run concurrently or layeredly
07.01.19 08:10:47<dmiles> so the world uses our testbed to show their great planner
07.01.19 08:10:57<aindilis> yeah and we get free integration of everything
07.01.19 08:11:16<aindilis> it's a long shot
07.01.19 08:11:23<aindilis> but may be if we got the ball rolling
07.01.19 08:11:26<dmiles> well we have to build all that anyways
07.01.19 08:11:33<aindilis> I suppose I should not fear new projects
07.01.19 08:11:51<aindilis> at 700 projects I'm starting to get nervous for new ones which is wrong-headed
07.01.19 08:11:59<dmiles> so i dont see that as any extra work 
07.01.19 08:12:01<aindilis> new projects fill in the gaps
07.01.19 08:12:10<aindilis> making everything easier quicker
07.01.19 08:12:18<aindilis> it's counterintuitive to most people
07.01.19 08:12:30<aindilis> has to do with complements of recursively enumerable sets
07.01.19 08:12:33<aindilis> but I forget why
07.01.19 08:12:54<aindilis> so yeah, what should the planner testbed be called -> PlannerTestBed?
07.01.19 08:13:05<dmiles> well they should start looping back and repeating (so stays at 700)
07.01.19 08:13:14<aindilis> yeah sort of 
07.01.19 08:13:20<aindilis> but I've been adding them more rapidly
07.01.19 08:13:27<aindilis> let's see really quickly
07.01.19 08:13:39<dmiles> oh i wouldnt make a project called PlannerTestBed until the code is finished for it
07.01.19 08:13:55<dmiles> (sounds funny to say it that way)
07.01.19 08:14:55<dmiles> how that code gets finished is that the KR is all set up
07.01.19 08:15:02<dmiles> erm the KR workflow that is
07.01.19 08:15:35<dmiles> KR workflow = we are able to combine several MTs in order to create a savable planning domain
07.01.19 08:16:22<dmiles> for exmaple some of these should be exporatable as PDDL
07.01.19 08:16:43<dmiles> some as rtGDL.. some as EventCalc etc
07.01.19 08:17:29<aindilis> actually I have that working as prolog
07.01.19 08:17:48<aindilis> except for the multiple Mts
07.01.19 08:17:52<aindilis> what it does is this
07.01.19 08:18:07<aindilis> takes the domain file, get's all the preds/functions/types etc, and then lists those
07.01.19 08:18:15<aindilis> to generate a problem file
07.01.19 08:18:20<aindilis> and domain file
07.01.19 08:18:38<aindilis> but doing it across Mts should be easy I think
07.01.19 08:18:47<aindilis> just iterate over the Mt and add to the search
07.01.19 08:18:54<dmiles> how and why we would have any such things to export is that we get  https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/examples/AkmanEtAl2004/ZooWorld.e.pro
07.01.19 08:19:28<dmiles> right
07.01.19 08:19:29<aindilis> oh you mean EC Mts
07.01.19 08:19:37<aindilis> ah well we'll need that UAMBAT
07.01.19 08:19:39<dmiles> yes as wwell
07.01.19 08:20:23<dmiles> oh you mean EC Mts  <- we need EC in a system that can be maintained with forward chaining.. such as in CYC
07.01.19 08:20:34<aindilis> k
07.01.19 08:20:49<dmiles> GDL == CycL 
07.01.19 08:20:50<aindilis> wow this is going to be scary powerful
07.01.19 08:21:07<aindilis> btw did you ever get the Shop2 to run? 
07.01.19 08:21:10<dmiles> rtGDL slightly a little more vauge.. closer to EC
07.01.19 08:21:11<aindilis> you said you did with CynD
07.01.19 08:21:24<aindilis> I haven't ever gotten it to run
07.01.19 08:21:36<aindilis> that would be first step I think
07.01.19 08:21:38<dmiles> i got it to run in 2006.. 
07.01.19 08:21:47<dmiles> CycD with SHOP
07.01.19 08:21:55<aindilis> okay if you can do it again, that would be cool
07.01.19 08:21:58<dmiles> but i designed a faster planner in Prolog 
07.01.19 08:22:12<dmiles> that is the HyHTNThing
                 <aindilis> does it still use all the Cyc Predicate Bindings?
07.01.19 08:22:37<dmiles> oh .. that code only got 90% finished
                 <aindilis> methodForAction effectOfAction etc
07.01.19 08:22:41<dmiles> it tested and worked
07.01.19 08:22:46<aindilis> cool
07.01.19 08:22:48<dmiles> it just wasnt deployable 
07.01.19 08:22:56<aindilis> what do you mean?
07.01.19 08:23:11<aindilis> btw I tried to integrate 3t and LarKC_CL
07.01.19 08:23:22<aindilis> but I am not good with CL so that didn't go anywhere
07.01.19 08:23:26<dmiles> i had to hardcode things liek socket addresses and at times write little removal predicate hacks
07.01.19 08:23:39<aindilis> maybe if we got Eleassar involved he could get it to run
07.01.19 08:23:41<aindilis> k
07.01.19 08:23:57<aindilis> should I email him?
07.01.19 08:24:13<dmiles> also it would always be too slow over a socket
07.01.19 08:24:21<dmiles> (cycD was all socket baseD)
07.01.19 08:24:35<dmiles> and i need to make millions of calls per second
07.01.19 08:24:55<dmiles> (CynD was all socket based :P)
07.01.19 08:25:23<dmiles> when i designed it for runing *in* cyc
07.01.19 08:25:30<dmiles> so in a way that willb e more possible now
07.01.19 08:25:32<aindilis> yeah
07.01.19 08:25:35<aindilis> cool
07.01.19 08:25:56<dmiles> yeah email him
07.01.19 08:26:17<aindilis> what about the expired RCyc licenses?
07.01.19 08:26:18<dmiles> also there is the better than shop planner in the e2c dir
07.01.19 08:27:36<aindilis> what is it called?
07.01.19 08:29:35<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/e2c/osim-agent-planner.lisp
07.01.19 08:30:35<aindilis> is it worth doing 3t then if you already have a good planner?
07.01.19 08:30:38<aindilis> I think it is
07.01.19 08:30:50<aindilis> I suppose also there is contract work to be had
07.01.19 08:30:54<dmiles> this one is base don preconditionFor-PropSit
07.01.19 08:30:59<aindilis> awesome
07.01.19 08:31:15<aindilis> is there a particular load command (to spare me the trail/error)
07.01.19 08:31:37<aindilis> I will have fun with that tonight
07.01.19 08:31:48<aindilis> I'm going to abort what I was just working on now that this has gotten even tastier
07.01.19 08:32:42<aindilis> we need a third wheel here
07.01.19 08:32:47<aindilis> on LarKC_CL
07.01.19 08:32:55<aindilis> Herb Simon said that three people can change the world
07.01.19 08:33:00<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/e2c/osim-agent-planner.lisp#L29-L38
07.01.19 08:33:01<aindilis> or Alan Newell or someone
07.01.19 08:33:11<dmiles> soetmthing like that.. but i have to update it
07.01.19 08:33:33<aindilis> great
07.01.19 08:34:49<aindilis> can't find the quote but it was something about the improbability of getting three rational people together
07.01.19 08:35:20<aindilis> assuming Con_T
07.01.19 08:36:15<aindilis> alright, well I'm going to create a project dir for the planner-testbed
07.01.19 08:36:20<aindilis> larkc-cl-planner-testbed
07.01.19 08:36:53<aindilis> I have a particular file system layout I use to put documentation/related systems, frdcsa Emacs code etc all together
07.01.19 08:41:44<aindilis> *Christopher Elsaesser
07.01.19 08:57:04<aindilis> Hi, Are you still associated with the 3t Planner?  We're using LarKC (with bindings for Java/Common Lisp/Prolog/SubL/CycL) and ResearchCYC to create a planner testbed for integration of large scale world knowledge w/ millions calls per sec.  Are you interested in integrating 3t?  Best, Andrew, Doug
07.01.19 08:57:30<aindilis> dmiles: sound good (LinkedIn Connection request)
07.01.19 08:57:32<dmiles> i htink that is good
07.01.19 08:57:40<aindilis> linked in connection request okay?
07.01.19 08:57:49<aindilis> sorry there were space limitations hence the abbreviated version
07.01.19 08:57:59<aindilis> I don't have an email for him
07.01.19 08:59:17<dmiles> 8nod*
07.01.19 09:10:19*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
07.01.19 09:10:24<dmiles> cyc: (+ 1 1)
07.01.19 09:34:55*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
07.01.19 10:38:56<stoopkid> dmiles: so here's my basic idea regarding artificial almost-general intelligence; a) take any/all existing tools and add a foundation of math and add two basic activities: 1) turning sensory input into a situational model (this includes any goals it's been given, along with memory); 2) proving things in the foundation with the goal of coming up with *tactics* (basically the routines that would be used by a computer algebra
                 <stoopkid> system above the foundations) that solve subgoals of the actual situational goal you've given it
07.01.19 10:39:55<stoopkid> b) in between the actual intelligent agent and any actuators it will be attached to, interject the foundation of math again
07.01.19 10:41:14<stoopkid> so that you have verifiable deterministic fine-grained control over when/how the intelligent agent is actually allowed to "do" stuff
07.01.19 10:42:53<stoopkid> i.e. the AI has to actually prove that its plan actually fits the constraints you've enforced before it's allowed to execute them
07.01.19 10:58:53<stoopkid> this might not be the end-all-be-all but i think it would be a major step forward, a couple major problems would just be solved in full generality (at least within the scope of the framework, which should at least be strong enough to handle the vast majority of real-world practical situations): 1) maintaining full control over the machine, no matter how smart it gets, while still giving it arbitrary access to actuators,
                 <stoopkid> limited by the constraints you've imposed. this is quite literally the "try to make sure it at least can't easily *accidentally* become the terminator" feature; 2) constant source of the right kind of "training" to train the AI in logic, which is the main non-domain-specific thing that's currently "easy for specially-designed programs and humans but not for AIs"
07.01.19 11:02:07<stoopkid> 3) even just for the sake of using the foundations themselves for stuff like formal verification, obv by maximizing our automation we're gonna squeeze the most out of our foundations
07.01.19 11:13:09<stoopkid> under this framework, all the things would fit together (it seems to me): foundations gives the substance of the "thoughts", a CAS is an advanced tactics system over some foundation, representing i.e. its ability to apply arithmetic / calculus / etc.. to some problem, constraints are described by logic programming (in a record type sitting in the foundation) although the execution model is a bit different (there isn't one,
                 <stoopkid> per se, that's what your "AI" is), and then entirely arbitrary reasoning methods can be applied here
07.01.19 11:18:06<stoopkid> now a neural net evolving by a genetic algorithm actually makes sense, it's no longer "too unconstrained", the proof-checking system in the foundations along with your imposed constraints on access to actuators enforces that it can never actually do anything that it can't logically justify
07.01.19 11:25:03<stoopkid> you could apply totally arbitrary things; self-organizing maps, deterministic search systems, genetic algorithms, the logical reasoning is no longer a "fragile" construction, the mechanics of the logic is just all taken care of already so that issue is off the table we've essentially removed the burden of knowledge-representation from every other component of the system and take care of it generically in this sound
                 <stoopkid> consistent foundation that then also gives us these other features
07.01.19 11:31:36<stoopkid> SOMs, neural nets, genetic algorithms, all great "learners" but all of them are fragile when it comes to knowledge-representation, in fact that fragility is basically wrapped up directly in a feature: they literally change to adapt themselves to approximations of different concepts, and don't represent any *particular* concept faithfully (or at least making them do that is certainly harder than just giving them a foundation
                 <stoopkid> to work with)
07.01.19 11:37:53<stoopkid> logic programming, a powerful search strategy but fragile when it comes to knowledge-representation, iow  2 + 2 = 4 is no more logical / illogical, provable / disprovable than "john only eats pizza on tuesday and always eats pizza on thursday" (the latter is provable if tuesday = thursday, which a logic program could certainly do, and we could also say 2 + 2 = 3, etc...), it's "too" general; maybe it's like saying
                 <stoopkid> "something that describes everything describes nothing"
07.01.19 11:43:28<stoopkid> CASs, similar situation; they're trying to put together all this complex math and make it work out coherently, but without a particular foundation there's no particular notion of how to keep that logic coherent; consider, ex. SymPy... it's looped and broke on very straightforward commands since the first day i used it; this is an extremely common symptom of ad hoc foundations / top-level ontologies trying to achieve this
07.01.19 11:43:29<stoopkid> degree of sophistication! it's a house of cards
07.01.19 11:56:36<stoopkid> that can all maybe be sorted out eventually but, that seems to be a much more difficult task than just directly arranging these separate pieces into this combined structure as a baseline
07.01.19 11:59:00<stoopkid> so wrt turning sensory input into a logical model of the situation, that's one place where it makes sense to use neural nets and SOMs and such
07.01.19 12:00:56<stoopkid> they make discrete concepts out of analog (or digital representations of analog) inputs
07.01.19 12:03:26<stoopkid> how can you train them? have them come up with some model, come up with a prediction of future sensory input, prove that the prediction logically follows from the model, compare the actual future sensory input to the model, and then repeat, with a goal of maximizing predictive accuracy
07.01.19 12:11:16<dmiles> i agree with everything you've been saying about consistent foundations
07.01.19 12:12:04<dmiles> also especially about esnuring a proofs exist
07.01.19 12:14:01<dmiles> also for sure i think early on.. like now it is important to have a framework that describes how to apply totally arbitrary things
07.01.19 12:14:50<dmiles> well at least from a implementation point of view
07.01.19 12:16:21<dmiles> (though .. i suppose i am being obsessed being *able* expect to use SOMs, NNs, CASs etc)
07.01.19 12:16:31<dmiles> (together that is)
07.01.19 12:19:06<dmiles> Before Lenat attmpted CYC he designed an "Automated Mathematician", which consists of heuristics describing the heuristics it used and then a language for describing how to use and change it's  heuristics.
07.01.19 12:19:58<stoopkid> i think that's maybe about right
07.01.19 12:20:27<dmiles> "I may not be able to tell how to get this correct.. but i can start putting together the factors that i think i see are involved"
07.01.19 12:22:47<stoopkid> right, and hypothetically this could be any mechanism, though ofc some will be better than others, but this is something you could potentially even evolve out of a genetic algorithm, the only thing that really needs to be fixed firmly in place is the foundation itself
07.01.19 12:22:52<dmiles> the idea is that all things can be elaborated on .. even the problem of having problems
07.01.19 12:25:01<stoopkid> one benefit of having an explicit language for the heuristics system, that can basically be part of / the same thing as the tactics system, i.e. the heuristics it comes up with are actually explicit routines that you can you can directly run for interactive proving
07.01.19 12:25:34<stoopkid> which is just the same thing as the computer algebra system
07.01.19 12:26:19<dmiles>  if we dont have the tehcnolog to build good CASs that is very worrysome toi me
07.01.19 12:26:47<stoopkid> well, we do :D but i'd say we aren't really using it much quite yet
07.01.19 12:26:57<dmiles> sorta like "heh, Nat comes first"
07.01.19 12:26:58<stoopkid> ex. nobody uses Coq's tactics system as their CAS
07.01.19 12:27:52<stoopkid> tbh not really Coq's fault i think you probably could use it pretty effectively and there's been some work to actually make that happen
07.01.19 12:28:58<stoopkid> but that's all a CAS is: a (combined internal/external) tactics system over some foundation.. usually ad hoc
07.01.19 12:31:03<stoopkid> internal tactics i.e. routines actually described within the foundation; external tactics i.e. external search strategies that try to come up with stuff for the proof-checker to validate
07.01.19 12:31:27<dmiles> CAS is all a search probablem right?
07.01.19 12:31:52<stoopkid> only in the same sense that "everything is a search problem"
07.01.19 12:32:18<dmiles> (that is we have to decide a fast path thru a proof tree)
07.01.19 12:33:25<stoopkid> pretty much, i'd say it's basically equivalent to interactive theorem proving
07.01.19 12:33:56<dmiles> the automated tactician for proving things in CYC use a ton of metaproof ideas
07.01.19 12:34:34<dmiles> that is the system first has to define a set of metaproofs it will try to fill in
07.01.19 12:36:09<dmiles> these are predefined based on completeness
07.01.19 12:36:41<stoopkid> so, if that all eventually gets checked against some particular consistent foundation, then yea, same kinda deal, and if you can use it to solve algebra problems then it's a CAS :)
07.01.19 12:37:10<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/tree/larkc/platform/unused/cycjava/com/cycjava/cycl/inference/harness  <- searcfh for the files witht eh word tactic"
07.01.19 12:37:17<dmiles> "tactics" in them
07.01.19 12:38:23<dmiles> these module decide what proofs elements will be involved
07.01.19 12:38:39<dmiles> modules*
07.01.19 12:39:29<stoopkid> so, this is what we want the AI to come up with :)
07.01.19 12:40:20<dmiles> admittedly it had to be bootstrapped once 
07.01.19 12:40:38<dmiles> (that is so we could have an AI that could experiment fast enough)
07.01.19 12:41:56<dmiles> but yeah.. CYC needs to be better at reorganizing its tactics systems
07.01.19 12:42:26<dmiles> right now it only scores the tactics based on how good they did in past
07.01.19 12:42:34<dmiles> (in that way it learns)
07.01.19 12:42:59<dmiles> but sometimes a very producive like of inference is jsut a race to teh wrong conclusions
07.01.19 12:43:22<dmiles> but sometimes a very producive line of inference is jsut a fastger race to the bottom
07.01.19 12:44:00<stoopkid> sure, so i think we're on the same page there: we want basically as minimal as possible hard-coded stuff at this level to bootstrap it into figuring things out itself
07.01.19 12:47:13<dmiles> i made a hyposthesis abotu 7 years ago that if we dont have the technology to make a self optimiztion chess playing program that can stalemte a perfect player every time.. then we stand no chance of scaling up to the level of human *anything*
07.01.19 12:47:42<dmiles> i jsut mean we prablably dont stand a chance at AI
07.01.19 12:48:09<dmiles> since i would venture to guess that life is at least slightly more complex thna a chess board
07.01.19 12:48:20<stoopkid> :)
07.01.19 12:51:57<dmiles> i then think about trying to encode such  rules (of that chess program into a NN) and thinmk about the space blowup
07.01.19 12:53:49<dmiles> this was why i turned to GAs
07.01.19 12:53:55<stoopkid> GAs?
07.01.19 12:54:36<dmiles> genetic algrythems that take logical rules and try to find a survivable set of usages
07.01.19 12:54:45<stoopkid> ah
07.01.19 12:55:18<dmiles> since each rule alone have a 1000x blowup when coverted to a trained NN
07.01.19 12:56:18<dmiles> you get the same annealing without having such blowups 
07.01.19 12:56:59<dmiles> the annealing is the reorganization it does
07.01.19 12:58:34<stoopkid> i would maybe combine that with another approach; typically our inferencers just apply the rules directly and search the entire space, this gives something logical but is inefficient. i would be interested to see the system actually *map* larger-scale topological features of the search-space (out to least some depth, which in some cases might even be finite characterizations of the structure of infinite subspaces of the
                 <stoopkid> search space)
07.01.19 12:59:51<dmiles> i created a maze solver that used a GA over terrible and sweeping moves
07.01.19 13:00:43<dmiles> it turned out though that it found "shapes" that were present yet i could not see them
07.01.19 13:01:20<dmiles> (the maze genrator was random) each cyc the mazesolver learned aobut the random mazes
07.01.19 13:01:26<dmiles> each cycle
07.01.19 13:02:54<dmiles> what it did come up with was sets of moves that helped it travel in straight lines.. and not get trapped anymore
07.01.19 13:03:54<dmiles> the idea was that if there were effeicent and innefeicinet moves in gneral.. maybe they could be discovered
07.01.19 13:05:23<dmiles> for example it woudl be ineeficient to try to walk a perimeter and then walking a smaller perimiter inside the larger one
07.01.19 13:05:34<dmiles> (the maze exits were always along walls)
07.01.19 13:06:56<dmiles> it wiould be inefficient to pass up and down a hallway never taking a differnt exit
07.01.19 13:07:15<dmiles> i mean jsut walking the same trail back and forth over and over
07.01.19 13:07:48<dmiles> those two properties should be provable as ineefient
07.01.19 13:08:26<dmiles> properties = what the genetics gave to the littel lifeforms
07.01.19 13:09:23<dmiles> the lifeforms that survived had to be able to solve random mazes.. that is discover the good and bad rules
07.01.19 13:10:18<dmiles> this started as some code i typed in out of a magazing in 1986
07.01.19 13:10:19<stoopkid> you can look for cycles; if there's a cycle around some component of the maze then the interior of the cycle is irrelevant
07.01.19 13:11:18<stoopkid> so you should never be searching the interior of the cycle unless you have to traverse back through it due to a failed search outside of the cycle
07.01.19 13:14:07<dmiles> well these guys (the litle lifeforms) had jsut a library of paths "NEEEN" "NNNNN" "EEEEE" "SSSEE" 
07.01.19 13:14:46<dmiles> and no way of seeing the picture that they were in a maze
07.01.19 13:15:35<stoopkid> right, i figure they need that picture
07.01.19 13:15:39<dmiles> they simply had to come up with that "NNNNN" "SSSSS" was a bad chain
07.01.19 13:16:24<dmiles> also they didnt even know when they got held up from movement by a wall
07.01.19 13:16:27<stoopkid> (at least to do any more sophisticated reasoning on their maze-solving, such as like we're doing now, rather than randomly evolving it)
07.01.19 13:17:23<dmiles> i wanbted to see if they'd come up with things like evolving foolproof chains
07.01.19 13:17:59<stoopkid> probably not, mostly because i really doubt there are any
07.01.19 13:18:08<dmiles> one foolproof chain would be one that was if you immagine keeping one of your hands always touching a wall
07.01.19 13:19:24<dmiles> if you start from an outside wall and the exit is one an outside wall.. you will always solve the maze
07.01.19 13:19:57<stoopkid> sure except i don't think you can accomplish that with a library of fixed paths and no way to actually recognize when the path turns etc..
07.01.19 13:20:14<stoopkid> nor can you get the little guys *themselves* to figure that out
07.01.19 13:20:50<stoopkid> otoh if you give them some sensory perception, a memory, and some math..
07.01.19 13:21:32<stoopkid> then you could actually maybe get some pretty smart little NPCs
07.01.19 13:21:53<dmiles> oh but they did actualy solve them .. mazes liked like:  https://scratch.mit.edu/projects/131933302/
07.01.19 13:23:16<dmiles> it was to show that without any contexts aealing will happen
07.01.19 13:23:27<dmiles> anealing and learning happens
07.01.19 13:25:57<dmiles> it was merely the same concept of NNs but big changes 
07.01.19 13:26:09<dmiles> (big changes to how it adapts)
07.01.19 13:26:19<dmiles> (instead of small gradual changeS)
07.01.19 13:29:09<stoopkid> were you modifying the little guys per-maze though? i.e. on each maze did you need to run the GA to make the little guy's instructions adapt to that maze?
07.01.19 13:30:09<dmiles> i would create 200 patterns find the best 4 servicors .. take 1/2 there stuff and radmize to make a new 200 guys
07.01.19 13:30:19<dmiles> best 4 survivors
07.01.19 13:30:53<dmiles> 200 little guys with totally random patterns
07.01.19 13:31:13<dmiles> every genration i reclreated a new maze
07.01.19 13:31:54<stoopkid> well, did you find any fully/statistically generic patterns?
07.01.19 13:33:26<dmiles> yeah.. the guys that have the most usefull combos of shapes walked the mazes.. the otehrs jsut died
07.01.19 13:34:13<dmiles> i could have done the same thing with strings of numbers. and checked to see if they would fit somehwere into pi
07.01.19 13:34:43<dmiles> (it was the same sort of "find a smart key")
07.01.19 13:35:02<dmiles> for exmaple you wont find in pi  "55555" ever
07.01.19 13:35:30<dmiles> or "12222" + "12222"
07.01.19 13:36:11<dmiles> it was basically that all mazes seemed to have the same sort of goods and bads
07.01.19 13:37:02<dmiles> "find a smart key" works in many situations
07.01.19 13:37:06<stoopkid> http://www.angio.net/pi/bigpi.cgi?UsrQuery=55555
07.01.19 13:37:26<dmiles> oh neat!
07.01.19 13:38:03<dmiles>  it searches  200000000 digits
07.01.19 13:38:05<stoopkid> it's actually hypothesized (though unproven) that you'll find every string of digits infinitely often at the same frequency of occurrence (in the limit as you go out to infinitely many digits)
07.01.19 13:38:16<stoopkid> did you try 12222122222 :) ?
07.01.19 13:38:49<dmiles> The string 12222122222 did not occur in the first 200000000 digits of pi after position 0.
                 <dmiles> (Sorry! Don't give up, Pi contains lots of other cool strings.)
07.01.19 13:39:30<stoopkid> yep
07.01.19 13:40:42<dmiles> ideally a GA could learn a heuristic for guessing the value of pi
07.01.19 13:42:06<dmiles> (even though it would make no sense to yuse such an attack.. burt if that was all you had.. you'd discover a set of genritics)
07.01.19 13:42:18<dmiles> genetics
07.01.19 13:42:44<dmiles> even though really there shouldnt been any
07.01.19 13:43:25<dmiles> maybe there should be.. i actually dont know
07.01.19 13:44:08<dmiles> the coding of a GA can be done in a GA 
07.01.19 13:44:13<stoopkid> apparently both my social security # and my phone number appear in the first 200 million digits of pi
07.01.19 13:44:17<dmiles> the coding of a NN cant be done in a NN
07.01.19 13:46:33<dmiles> if a phone number appears in less digits than the orignal .. it might be easier to store in the lesser digits
07.01.19 13:47:24<stoopkid> e is approximated to 8 digits starting at position 73,154,827
07.01.19 13:47:54<dmiles> my 10 digit number was 8 digits 43,499,772
07.01.19 13:49:00<dmiles> such a space saving technique is what GA is supposd to discover
07.01.19 13:49:15<dmiles> but it starts out with cold hard rules
07.01.19 13:50:19<dmiles> not saying GA is at all very one size fits all.. or even very good at all.. gut hella way better than NNs
07.01.19 13:50:40<dmiles> at performing NN tasks
07.01.19 13:52:14<dmiles> for example at labeling images for recognsiton
07.01.19 13:53:08<dmiles> and speech to text\
07.01.19 13:53:45<dmiles> though all NNs doing speech to text or playing chess are merely just GAs
07.01.19 13:54:02<dmiles> like AlphaGo 
07.01.19 13:54:42<dmiles> is a NN that breeds and kills (reorders) Prolog-based Go rules
07.01.19 13:56:14<dmiles> I've tried to find pure NNs that dont use Prolog-like rules at Go and Chess.. they jsut dont exist yet
07.01.19 13:56:30<dmiles> they might not ever
07.01.19 13:57:09<dmiles> Immage recogntion is pure NN though
07.01.19 13:57:24<dmiles> pure NN of speech rec doesnt work
07.01.19 13:57:28<dmiles> pure NN on speech rec doesnt work
07.01.19 13:58:40<dmiles> NNs that reorder small immuatble recognisers dont even work
07.01.19 13:59:04<dmiles> they still have to use an "augmented transitition network"
07.01.19 13:59:12<dmiles> (basically a prolog DCG)
07.01.19 13:59:47<dmiles> (where the NNs decide how likely which DCG rules to see first)
07.01.19 14:00:33<dmiles> where i am going with this is NN utterly fail without hard symbolic logic interfaces
07.01.19 14:01:06<dmiles> hard symbolic logic interfaces always work when they have a complete lanmguage
07.01.19 14:01:11<dmiles> (they are jsut slower)
07.01.19 14:01:35<dmiles>  NN utterly fail when they have a complete lanmguage
07.01.19 14:01:59<dmiles> complete language = that is the search space is enermerable
07.01.19 14:02:20<dmiles> (even if infinate.. it still can be calculated)
07.01.19 14:03:07<dmiles> though i still see using NNs for many things
07.01.19 14:03:22<dmiles> jsut not for machine intelligence
07.01.19 14:04:05<dmiles> (such as sensory "rollups" NNs can produce good symbols)
07.01.19 14:05:33<dmiles> just surprising that many people are not workign from this vantage point
07.01.19 14:06:31<dmiles> (i guess serious NN scientists know all this .. but they are afraid to start the long road of leqaarnig non-NNs)
07.01.19 14:07:13<dmiles> (since they know they can probly get one more discovery for the NN cause)
07.01.19 14:08:51<dmiles> your supposition that the GA wouldnt make a good generic maze solver btw i think i agree
07.01.19 14:09:06<stoopkid> hm
07.01.19 14:09:12<dmiles> multply that by 100 for NNs!
07.01.19 14:09:51<dmiles> since the NN in my problem set up would be no more capable
07.01.19 14:10:37<dmiles> and the NN would have been very unlikely to do breed and cull
07.01.19 14:11:04<stoopkid> it's not that i don't think a GA or NN would make a good generic maze solver, it's like you said, they're good at some tasks, not so good at others, the primary one being solid knowledge-representation (like i said we generally want to take the burden off the GAs and NNs to handle this and then allow their minds to roam freely like they're supposed to)
07.01.19 14:11:16<dmiles> or even end up with the variations of all those 5 cardinal dirrection strings
07.01.19 14:11:34<stoopkid> i.e. every single one of the tools has a particular place & role
07.01.19 14:12:40<stoopkid> out of: foundations; logic programming; CASs; NNs; GAs; none of them really does everything "on its own"
07.01.19 14:16:32<stoopkid> GAs are really just a fixed concept; we know what it's gonna do, it's gonna select for best fitness, the end, which is great we'll get the most fit things by our measure of fitness, *no matter kinds of things or measure of fitness* we choose, then it's deferred to the question of: what are the things and what is the measure of fitness
07.01.19 14:18:35<stoopkid> imo for the purpose of general inferencing, the things themselves should actually be reasoners that have basically first-class awareness of the foundation they're working in etc..
07.01.19 14:20:44<stoopkid> you could even cascade this, so then this little guy that actually "thinks" about things can itself run a genetic algorithm to come up with some strategy etc..
07.01.19 14:22:17<stoopkid> cause the problem with a GA is just that: its utility is dependent on the utility of the little guys that it evolves
07.01.19 14:24:20<stoopkid> so i figure we would want it to be evolving the *entire* AI
07.01.19 14:27:01<dmiles> *nod*
07.01.19 14:27:21<dmiles> I've only found one way to do the "entire" like that
07.01.19 14:42:29<dmiles> Roger Schank and Erik Mueller make some conclusions that only could have come if they were thinking in a certain model of AGI.. though scouring their books i dont see that "certain model".. i sort of feel like they left it "unspoken" since it was foundational
07.01.19 14:43:24<dmiles> like in a math book you dont justify why you did math *that* way.. you jsut know why and then you do it
07.01.19 14:44:50<dmiles> the "foundational" is "Explaination based reasoning"
07.01.19 14:45:25<dmiles> that means that for every thing it does.. it must come out with a stawman proxy
07.01.19 14:45:48<dmiles> (that is too general to be correct)
07.01.19 14:45:55<dmiles> yet is not incorrect 
07.01.19 14:46:25<dmiles> all my life (that i can remember) that is how *i* do my thjinking
07.01.19 14:46:59<dmiles> i've thought others do it as well
07.01.19 14:47:20<dmiles> so i always assumed that was what Schank was writting about
07.01.19 14:47:37<dmiles> he even calls it "Explaination based reasoning"
07.01.19 14:48:25<dmiles> "Explaination based" is a special debriefing phase that begans all thoghts and all toughts are again debreifed
07.01.19 14:49:04<dmiles> like for instance a felling doesnt exist until we put it into a mental language
07.01.19 14:49:13<dmiles> like for instance a feeling doesnt exist until we put it into a mental language
07.01.19 14:49:45<dmiles> nothing exists in our minds until we pre-breif or de-breif
07.01.19 14:50:19<dmiles> all such briefs are allows way shallow
07.01.19 14:50:45<dmiles> all such briefs are always very shallow compared to the actualalities
07.01.19 14:51:04<dmiles> that is a law that we cant break
07.01.19 14:51:15<dmiles> (mentally)
07.01.19 14:51:48<dmiles> we cheat that law by making up extra naratives
07.01.19 14:52:36<dmiles> so i started to study *that* mental system very specifcially a few years ago
07.01.19 14:52:58<dmiles> as it turns out is the only system that allow full AGI
07.01.19 14:53:33<dmiles> (that i know of.. i been searching for at least 30 years and that is the only system i have seen)
07.01.19 14:53:39<dmiles> that has a snowballs chance
07.01.19 14:54:29<dmiles> the only system that has all the the structural requirements in place
07.01.19 14:55:08<dmiles> i know many people have to discovered it ! after all they cant come up with many theories had they not started from where i am at now
07.01.19 14:56:11<dmiles> maybe in a few years i am going to end up where everyone else is now :)
07.01.19 14:57:34<dmiles> but the only evidence it is a unique theory is that i've only seen it in a few 40-200 year old pychology books
07.01.19 14:57:59<dmiles> so maybe it was just passed over
07.01.19 14:58:17<dmiles> Wittengstien i think understood it
07.01.19 14:58:37<dmiles> Heideger spent his whole life writting about it
07.01.19 14:59:48<dmiles> in "Being and Time" he called it sa'Sien
07.01.19 14:59:51<dmiles> in "Being and Time" he called it sa'Sien
07.01.19 14:59:56<dmiles> in "Being and Time" he called it Da'Sien
07.01.19 15:01:17<dmiles> "Dasein's culturally conditioned uses and articulations"
07.01.19 15:01:55<dmiles>  because ‘being’ for Heidegger does not mean ‘in existence’ ” (Sheehan 2001). Indeed, Being concerns sense-making (intelligibility), and the different ways in which entities make sense to us, including as present-at-hand, are dependent on the fact that we are Dasein, creatures with a particular mode of Being. 
07.01.19 15:02:19<dmiles> basically "intelligibility" is a fitness function
07.01.19 15:03:33<dmiles> *that* mental system very specifcially only seeks to increase the intelligibility level to jsutify the Beings existence
07.01.19 15:04:20<dmiles> which btw requires Dasein in order to be intelligible at all
07.01.19 15:04:31<dmiles> Being = Dasein
07.01.19 15:05:09<dmiles>  because there is Dasein, which means that without Dasein there would be no truth—including propositional truth as correspondence. But it is reasonable to hear this seemingly relativistic consequence 
07.01.19 15:05:52<dmiles> it is so reasonable to hear that we (most AGI scientist) have overlooked it
07.01.19 15:07:20<dmiles> problem when people read Heidegger, i think they see it as philosophy
07.01.19 15:07:32<dmiles> not a system of mental states
07.01.19 15:08:02<dmiles> they think he is refering to the "nature of truth"
07.01.19 15:08:26<dmiles> what he is actualyl doing is pointing out a thrist for intelligibility
07.01.19 15:08:50<dmiles> intelligibility is seldom (if ever) related in any way to truth
07.01.19 15:09:27<dmiles> intelligibility just means a narative debriefing of "Explaination" is being created
07.01.19 15:09:58<dmiles> when "Explaination" is being created, it creates "a truth"
07.01.19 15:10:07<aindilis> (dmiles: I don't want to interrupt but I was wondering what you thought about Chris' reply that I forwarded you)
07.01.19 15:10:48<dmiles> so what gets done for an AGI is "a truth" is being genrated
07.01.19 15:10:58* dmiles looks now
07.01.19 15:12:17<dmiles> in essence meta-reasoning is the _only_ form of thought 
07.01.19 15:15:18<dmiles> tha tis great he has time to work on it
07.01.19 15:15:57<aindilis> what do you make of the fact that they use ACL vs ABCL?
07.01.19 15:16:13<dmiles> All current developers use Allegro CL and ACL's jlinker ..  btw.. the entire  Java interface i am using is jlinker
07.01.19 15:16:35<dmiles> ACL does have minor differences 
07.01.19 15:16:58<aindilis> wait, I though ABCL was in JVM and wouldn't need jlinker, but you're using it?
07.01.19 15:17:02<aindilis> that's good then, right?
07.01.19 15:17:07<aindilis> means we should be able to work something out
07.01.19 15:17:08<aindilis> ?
07.01.19 15:17:14<dmiles> Cyc's lisp code was ACL based to
07.01.19 15:17:23<aindilis> perfect!
07.01.19 15:17:39<dmiles> saying i/them copied jlinker as the model for the interface to java
07.01.19 15:17:51<aindilis> okay
07.01.19 15:17:57<aindilis> is it backward compatible?
07.01.19 15:18:00<dmiles> yes
07.01.19 15:18:02<aindilis> cool
07.01.19 15:18:05<aindilis> okay
07.01.19 15:18:14<dmiles> I added some extra jlinker stuiff that ABCL didnt haave
07.01.19 15:18:28<aindilis> did you want to handle replying to him and CCing me about the serendipity
07.01.19 15:18:31<aindilis> ?
07.01.19 15:18:42<aindilis> since you can speak more to the details
07.01.19 15:18:50<dmiles> well i want to get about 8 hours sleep before replying
07.01.19 15:18:56<aindilis> hehe
07.01.19 15:18:57<aindilis> srry
07.01.19 15:19:01<aindilis> you're a machine
07.01.19 15:19:03<aindilis> :)
07.01.19 15:19:28<dmiles> i just feel spacey (why i am not coding)
07.01.19 15:19:51<aindilis> yeah, I didn't feel very good either
07.01.19 15:20:01<aindilis> hey AP/3t is adversarial multiagent to boot
07.01.19 15:20:07<aindilis> will be good for security stuff
07.01.19 15:20:17<aindilis> it's super powerful
07.01.19 15:20:30<aindilis> okay I will let you rest
07.01.19 15:20:32<dmiles> yeah
07.01.19 15:20:37<dmiles> pretty awesome
07.01.19 15:21:11<dmiles> glad that it already in Lisp and not some other languaged
07.01.19 15:21:21<aindilis> well that's why I thought of it first
07.01.19 15:21:32<aindilis> I have some scripts to get it to run that I wrote
07.01.19 15:21:40<aindilis> but I don't really understand the gestalt
                 <dmiles> at worse it will be 3 days to make it run in our system
07.01.19 15:21:47<aindilis> :_
07.01.19 15:21:48<aindilis> :)
07.01.19 15:24:04<aindilis> *and open source
07.01.19 15:28:09<dmiles> well i got Assertion conten from a native to an interpreted structure https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/commit/2d07eedb793963e330c3b000364e5d5cc0fc6158#diff-96555bb0e251b6867ccad549d2e80662R110
07.01.19 15:28:30<aindilis> :)
07.01.19 15:30:17<dmiles> so now i am 90% done
07.01.19 15:30:35<dmiles> this afternoon i'll get it into prolog
07.01.19 15:31:44<dmiles> which means that CYC is going be started from a SWI-Prolog thread
07.01.19 15:32:13<dmiles> SWI-prolog will start the JVM-Lisp
07.01.19 15:32:19<aindilis> ooh, so maybe I can start SWI-Prolog using Formalog, and then start CYC from there
07.01.19 15:32:26<dmiles> yes
07.01.19 15:32:58<dmiles> ?- use_module(library(jpl)) 
07.01.19 15:32:59<yesbot> yes.
07.01.19 15:33:09<aindilis> :)
07.01.19 15:34:06<dmiles> ?- cd('/opt/CYC_JRTL_with_CommonLisp/platform').
07.01.19 15:34:10<dmiles> ?- cd('/opt/CYC_JRTL_with_CommonLisp/platform')
                 <yesbot> No permission to call sandboxed `'$current_module'(_9654,_9656)'
07.01.19 15:34:11<yesbot> Reachable from:
                 <yesbot> 	  system:'$file_type_extensions'(A,B)
                 <yesbot> 	  system:absolute_file_name(A,B,C)
                 <yesbot> 	  shell:absolute_file_name(A,B,C)
                 <yesbot> 	  shell:name_to_files_(A,B,C)
07.01.19 15:34:12<yesbot> 	  shell:name_to_files(A,B,C)
                 <yesbot> 	  shell:name_to_files(A,B)
07.01.19 15:34:13<yesbot> 	  shell:name_to_file(A,B)
                 <yesbot> 	  prolog_eval:cd(A)
07.01.19 15:34:14<yesbot> lol.
07.01.19 15:35:07<dmiles> i guess its good its sandboxed
07.01.19 15:35:22<aindilis> yeah
07.01.19 15:36:02<dmiles> when i get up i'll fix it so that PrologMUD is starting CYC when it starts
07.01.19 15:36:23<dmiles> so i can show how it works
07.01.19 15:36:50<aindilis> cool
07.01.19 15:36:56<aindilis> this is truly spectacular
07.01.19 15:37:48<dmiles> thx.. ok nn
07.01.19 15:38:19<aindilis> nn!
07.01.19 15:56:40*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 258 seconds
07.01.19 15:57:00*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
07.01.19 16:01:22*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
07.01.19 16:01:27<dmiles> cyc: (+ 1 1)
07.01.19 16:03:02*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
07.01.19 16:03:08<dmiles> cyc: (+ 1 1)
07.01.19 18:23:23*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
07.01.19 18:23:29<dmiles> cyc: (+ 1 1)
07.01.19 20:07:32*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
07.01.19 22:52:52<dmiles> Erik Mueller  7:16 AM
                 <dmiles> DAYDREAMER requires planning knowledge, and I'm not sure how much of that Cyc has. Maybe Cyc's ontology would be useful though.
07.01.19 22:53:30* dmiles now working on writting response to Chris
07.01.19 23:04:14<dmiles> so what i take it to be Chris response is that he willing to help integrate the planner into our system
07.01.19 23:05:28<dmiles> what i cant tell yet though is that if he wants to help get us using it.. much like the way we help people if they wanted to uses CYC
07.01.19 23:07:56<dmiles> right at moment in PrologMUD/LarkC i dont have a planning domain set up
07.01.19 23:08:31<dmiles> so in my case i dont have set up a way to kick its tires to know when it is/isnt working
07.01.19 23:09:12<dmiles> but that will change once i get the larkc integration done
07.01.19 23:09:17<dmiles> i mean for swi-prolog
07.01.19 23:11:04<dmiles> but fdor sure i think integrating the 3T planner is a good idea
07.01.19 23:12:51<dmiles> might we be swapping out daydreamers planner for 3T?
07.01.19 23:12:57<dmiles> that is one potential idea
07.01.19 23:14:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-znhwhzhgrxvqiuok) left #logicmoo: Quit: Connection closed for inactivity
07.01.19 23:14:59<dmiles> one idea a while ago i had was to convert the daydream meta-planning and planning domains to someting like PDDL
07.01.19 23:17:21<dmiles> when i get the current integrations i am working on done, it becomes easier to get planning domains into CYC
07.01.19 23:17:54<dmiles> for exmaple my ec_loader would loading into CycL insead of EC-prolog
07.01.19 23:18:36<dmiles> which then i could use 3T
07.01.19 23:19:57<dmiles> for using 3T i suppse a question i would have is deciding what the domains would be look like
07.01.19 23:20:14<dmiles> would best be looking like
07.01.19 23:22:55<dmiles> is this 3T ?  https://atc1.aut.uah.es/~mdolores/Docs/2011/Munoz_et_al%20ASTRA11.pdf
07.01.19 23:23:11<dmiles> "To bring out that question, in
                 <dmiles> this paper we propose a modular 3-Tier or 3T architecture
                 <dmiles> in which each layer has a different technology.
                 <dmiles> "
07.01.19 23:26:02<dmiles> well this paper is actauly about the 3T  http://spots.gru.edu/mdowell/ResearchPapers/CONFNC97.pdf
07.01.19 23:28:17<dmiles> ok i see there is 3 differnt types of KR 
07.01.19 23:28:30<dmiles> each Teir needs its own
07.01.19 23:29:28<dmiles> sequence planning is normally wiht PDDL does
07.01.19 23:29:40<dmiles> (at the sequencing tier)
08.01.19 00:34:29<aindilis> dmiles: "swapping out daydreamers planner for 3T' - definitely
08.01.19 00:34:42<aindilis> is this 3T - not sure, there are several systems that go by 3t
08.01.19 00:34:49<aindilis> best is to check out source, one sec
08.01.19 00:35:04<aindilis> http://svn.traclabs.com/svn/3t
08.01.19 00:35:58<aindilis> 3t integration I imagine to be similar to or concurrent with DAYDREAMER integration
08.01.19 00:36:25<aindilis> also 3t is unique in that it really extends PDDL and has support for a lot of planning types.  It is the "CYC" of planners afaik.
08.01.19 00:36:53<aindilis> plus it's all programmable via Lisp
08.01.19 00:37:00<aindilis> meaning extensible for us
08.01.19 00:37:37<aindilis> having Chris working with us will be a godsend, because he will be able to answer questions, offer documentation and possibly open up some of the other repos and tools to us
08.01.19 00:37:58<aindilis> dmiles: sorry I didn't reply sooner I was sleeping since I don't feel well
08.01.19 00:38:49<aindilis> I think I need to go easy otherwise I could succomb to this cold and be out of commission for like 3 weeks (it's an unusual cold that they're warning people about because of how long it lasts)
08.01.19 00:41:05<aindilis> one the down side regarding 3t is it is so complex that I haven't been able to understand it well enough to verify or prove what it is capable of
08.01.19 00:41:59<aindilis> so there is an outside chance that we'll hit a wall with it too.  but we've already accounted for that by saying this is a planner testbed.  we'll want to make sure there is an abstract interface that can be used with non-3t planners so we don't limit ourselves
08.01.19 00:43:03<aindilis> instead of the most direct possible integration.  even having it running in the same process is suspect, but I *think* okay.  Lisp/Prolog/Java etc planners *should* be allowed to do so, yet still sufficiently padded internally to avoid overfitting
08.01.19 00:43:38<aindilis> or premature optimization
08.01.19 00:49:59<aindilis> https://github.com/aindilis/3t-frdcsa
08.01.19 00:50:13<aindilis> you'll also need planner and maybe planner-working
08.01.19 00:50:37<aindilis> which I will put in your https://frdcsa.org/~andrewdo/dmiles/planner(-working).tgz
08.01.19 00:50:39<aindilis> one sec
08.01.19 00:52:59<aindilis> done, also https://frdcsa.org/~andrewdo/dmiles/acl81.tgz
08.01.19 01:25:39<aindilis> dmiles: ping
08.01.19 02:37:06<aindilis> dmiles: ping
08.01.19 02:38:06<dmiles> oh hey .. god i am buring up time in ##logic
08.01.19 02:38:48<dmiles> downloading now
08.01.19 02:41:28<aindilis> brb
08.01.19 02:45:18<aindilis> b
08.01.19 02:47:13<aindilis> if you're using 3t-frdcsa the command to run it from Emacs is C-c3tp
08.01.19 02:48:44<dmiles> ln -s /opt/LarkcStudy/var/lib/myfrdcsa/ /var/lib/
08.01.19 02:48:55<aindilis> k
08.01.19 02:48:57<dmiles> oops didnt mean to paste
08.01.19 02:49:34<dmiles> those are unzipped .. should i do a git clone.. and where?
08.01.19 02:49:56<aindilis> well you'll want it in /var/lib/myfrdcsa/codebases/minor/3t-frdcsa
08.01.19 02:50:26<aindilis> and then put planner, planner-working, and acl81 where their symlinks in the /var/lib/myfrdcsa/codebases/minor/3t-frdcsa dir point to
08.01.19 02:50:42<aindilis> this configuration could be editted, it's just the absolute paths that I use
08.01.19 02:50:47<aindilis> there isn't much to it
08.01.19 02:51:52<dmiles> lrwxrwxrwx 1 root root 48 Jan  8 07:51 data -> /var/lib/myfrdcsa/codebases/minor-data/3t-frdcsa
08.01.19 02:52:06<dmiles> jus thtat one borkenn symlink is what i have left
08.01.19 02:52:08<aindilis> that's not necessary
08.01.19 02:52:27<aindilis> it's broken since my minor-data directory was lost due to hard drive failure, but it's not necessary
08.01.19 02:52:49<dmiles> right on
08.01.19 02:52:59<aindilis> (load "/var/lib/myfrdcsa/codebases/minor-data/3t-frdcsa/3t-frdcsa.el)
08.01.19 02:53:07<aindilis> (load "/var/lib/myfrdcsa/codebases/minor-data/3t-frdcsa/3t-frdcsa.el")
08.01.19 02:53:50<aindilis> it prompts for y/n, and then a string, and then y/n, the correct sequence is y, RET, y
08.01.19 02:54:02<aindilis> RET being return key
08.01.19 02:54:29<aindilis> and should if successful run an adversarial nuclear weapon domain
08.01.19 02:55:00<aindilis> I couldn't get all the domains to work, but this is using a much older version of the planner, I was just looking into using the latest, but I'm going to hold off as I said since I'm not feeling well
08.01.19 02:55:18<dmiles> oh oops   (load "/var/lib/myfrdcsa/codebases/minor/3t-frdcsa/3t-frdcsa.el")
08.01.19 02:55:36<dmiles> but i might symlink minor-data to mionor
08.01.19 02:55:42<aindilis> k
08.01.19 03:17:30*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
08.01.19 03:17:35<dmiles> cyc: (+ 1 1)
08.01.19 03:19:25<aindilis> I'm sorry, the command is : C-c3tl
08.01.19 03:23:58<aindilis> okay the new planner code works with 3t-frdcsa
08.01.19 03:24:28<aindilis> so you just need to symlink the 3t/trunk/planner (whereever you put the latest svn copy) to /var/lib/myfrdcsa/codebases/minor/3t-frdcsa/planner
08.01.19 03:41:53*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
08.01.19 03:57:20<aindilis> dmiles: were you able to email Chris or should I just tell him what you told me last night about jlinker etc + ask him for pointers on how to understand it
08.01.19 03:57:52<aindilis> *how to understand 3t
08.01.19 04:20:32<aindilis> dmiles: ping
08.01.19 04:23:33<dmiles> CL-USER(1): (load "/var/lib/myfrdcsa/codebases/minor-data/3t-frdcsa/3t-frdcsa.el")
08.01.19 04:23:34<dmiles> ; Loading /var/lib/myfrdcsa/codebases/minor-data/3t-frdcsa/3t-frdcsa.el
                 <dmiles> Error: attempt to call `GLOBAL-SET-KEY' which is an undefined function.
08.01.19 04:23:51<aindilis> srry that is emacs lisp
08.01.19 04:24:09<aindilis> my code to launch 3t runs in Emacs
08.01.19 04:24:25<aindilis> it's because it depends on user input halfway through it
08.01.19 04:24:47<aindilis> so I have it launch it and then prompt you what to put in
08.01.19 04:24:54<aindilis> the sequence is y, return, y
08.01.19 04:25:14<aindilis> after you run \C-c3tl in Emacs after (load "/var/lib/myfrdcsa/codebases/minor-data/3t-frdcsa/3t-frdcsa.el")
08.01.19 04:26:15<aindilis> did you want to email me a blurb about integrating 3T w/ LarKC_CL and I will write up some questions regarding the use of 3T (how to gain answers to questions we have about it)
08.01.19 04:26:33<aindilis> and then I'll email him and CC you?
08.01.19 04:27:48<dmiles> yes that would be awesome
08.01.19 04:28:00<aindilis> okay great
08.01.19 04:35:56<dmiles> going to try in xemacs instead of the terminal version
08.01.19 04:36:03<aindilis> ah k
08.01.19 04:36:08<aindilis> I don't know if that will work
08.01.19 04:36:31<dmiles> oh it works in the SSH terminatal emacs?
08.01.19 04:36:36<dmiles> "emacs"
08.01.19 04:36:38<dmiles> ok
08.01.19 04:36:41<aindilis> sure yes
08.01.19 04:37:13<aindilis> https://frdcsa.org/~andrewdo/writings/3t-planning-output.txt
08.01.19 04:47:27<dmiles> http://logicmoo.org:1322/session/4f2ae51b-b21d-4c2c-a8af-a579a4c38e21
08.01.19 04:58:42<aindilis> srry for the delay, M came downstairs for a bit.  Um, this link doesn't load for me
08.01.19 05:00:06<dmiles> http://73.190.111.74:1322/session/4f2ae51b-b21d-4c2c-a8af-a579a4c38e21
08.01.19 05:01:43<dmiles> sorry i'll stop rezing the screen :P
08.01.19 05:02:53<aindilis> one sec
08.01.19 05:06:29<dmiles> if trying to paste remotely its <shift> +<insret>
08.01.19 05:23:35<aindilis> okay it's runable now
08.01.19 05:23:45<aindilis> clear everything out and run \C-c3tl
08.01.19 05:23:51<aindilis> dmiles:
08.01.19 05:24:02<aindilis> sorry that took so long C-w kept closing the window on me
08.01.19 05:24:09<aindilis> and other things are overloaded too
08.01.19 05:24:48<dmiles> good work!
08.01.19 05:24:54<aindilis> ty
08.01.19 05:25:01<aindilis> so you can see that it enters a few things in
08.01.19 05:25:09<aindilis> you have to run that command then do y, return, y,
08.01.19 05:25:14<aindilis> can you try?
08.01.19 05:25:22<dmiles> ok
08.01.19 05:26:07<dmiles> should i exit emacs?
08.01.19 05:26:18<aindilis> no run the \C-c3tl from emacs
08.01.19 05:27:08<dmiles> ok i am goign to make the screen smaller
08.01.19 05:27:13<aindilis> k
08.01.19 05:28:32<aindilis> great
08.01.19 05:28:54<aindilis> it's possible to try to run other domains it gives, it has a list
08.01.19 05:28:58<aindilis> but most do not work for some reason
08.01.19 05:29:05<aindilis> I had to add some functions to get it to run
08.01.19 05:29:35<aindilis> you can kill the buffer and then run again
08.01.19 05:30:02<aindilis> to get this far just be sure to load and eval /var/lib/myfrdcsa/codebases/minor/3t-frdcsa/3t-frdcsa.el and /var/lib/myfrdcsa/codebases/internal/kmax/kmax.el
08.01.19 05:30:22<dmiles> i dont have any kinetic sense for emacs yet :)
08.01.19 05:30:48<dmiles> it is the same thing when poeople use vi
08.01.19 05:30:51<aindilis> yeah
08.01.19 05:30:55<aindilis> I totally hear you
08.01.19 05:31:08<aindilis> um, if you want I will write a shell script that does it
08.01.19 05:31:19<aindilis> if I can, since I might have had a reason for running it this way
08.01.19 05:31:28<aindilis> besides being able to customize
08.01.19 05:32:07<dmiles> that would be good.. i can use that code to decide how to run from ABCL
08.01.19 05:32:20<aindilis> okay, so I cannot do it tonight
08.01.19 05:32:27<aindilis> since I have gotten worse
08.01.19 05:32:28<dmiles> i am sure i can make it run find in ABCL
08.01.19 05:32:34<aindilis> AWESOME!!!
08.01.19 05:33:30<aindilis> I'm just going to put a movie on for now
08.01.19 05:33:37<aindilis> hopefully tomorrow I will feel better
08.01.19 05:33:40<dmiles> i mean after i get this prolog integration done
08.01.19 05:33:45<aindilis> ah
08.01.19 05:33:55<aindilis> if you want to write that letter I will forward
08.01.19 05:34:10<aindilis> you know what I'll just reply with what I know now
08.01.19 05:34:14<aindilis> and run it by you first
08.01.19 05:34:31<dmiles> ok thanks
08.01.19 05:34:40<aindilis> thank you!
08.01.19 05:43:02<aindilis> dmiles: is there a way to run LarKC_CL in ABCL and 3t in AllegroCL at the same time, in case they are hesitant to use ABCL?
08.01.19 05:43:32<aindilis> does jlinker allow that?
08.01.19 05:43:44<dmiles> yes that would work in jlinker
08.01.19 05:43:46<aindilis> I am just curious in case they say they need it to at least have that as one mode of operation
08.01.19 05:43:47<aindilis> kk
08.01.19 05:43:51<aindilis> I will note that then
08.01.19 06:09:03<aindilis> hrm I am having writers block lol
08.01.19 06:16:56<aindilis> the README-QUICKSTART seems to have info on how to run AP (3T) from ABCL
08.01.19 06:18:42<aindilis> see also: planner/doc/INDEX.html
08.01.19 08:10:29<aindilis> dmiles: ping
08.01.19 09:43:19*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Remote host closed the connection
08.01.19 10:09:57*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
08.01.19 10:10:02<dmiles> cyc: (+ 1 1)
08.01.19 10:10:03<dmiles> aindilis: pong
08.01.19 10:10:07<aindilis> hey
08.01.19 10:10:13<aindilis> so how'd it go?
08.01.19 10:10:22<aindilis> I am reading AP documention
08.01.19 10:10:31<aindilis> I didn't send the letter since my cold flared up
08.01.19 10:10:39<aindilis> couldn't concentrate would have come across weak
08.01.19 10:10:44<dmiles> well good.. i got the sync code done .. now i am testing it
08.01.19 10:10:52<aindilis> awesome!
08.01.19 10:11:01<aindilis> I also started getting AP to load in LarKC_CL
08.01.19 10:11:18<aindilis> but #+abcl is missing in most cases
08.01.19 10:11:23<aindilis> is there a way to emulate ACL?
08.01.19 10:11:29<aindilis> *all cases
08.01.19 10:11:45<aindilis> also (require "clos") didn't seem to fix that it was missing
08.01.19 10:11:49<aindilis> i had to use asdf
08.01.19 10:12:11<dmiles> ACL from ABCL?
08.01.19 10:12:25<aindilis> yeah, because the source only has #+acl() #+ccl()
08.01.19 10:12:29<dmiles> well in the README-QUICKSTART it says just use SDF
08.01.19 10:12:34<aindilis> hrm
08.01.19 10:12:35<aindilis> k
08.01.19 10:12:37<dmiles> well in the README-QUICKSTART it says just use ASDF
08.01.19 10:12:42<aindilis> yes I did
08.01.19 10:12:59<dmiles> but you can add :Acl TO THE FEAURES
08.01.19 10:13:00<aindilis> but I got an error on a dolist not having enough args
08.01.19 10:13:03<aindilis> okay
08.01.19 10:13:04<aindilis> ty
08.01.19 10:14:16<aindilis> # (require 'asdf)                                                                                                                                                                                                                                                                                                              
                 <aindilis> # (setf asdf:*central-registry* '(*default-pathname-defaults* #P"/var/lib/myfrdcsa/sandbox/3t-20190108/3t-20190108/trunk/planner/"))                                                                                                                                                                                           
08.01.19 10:14:17<aindilis> # (asdf:operate 'asdf:load-op 'ap)        
08.01.19 10:14:25<aindilis> that's what I have so far
08.01.19 10:14:33<aindilis> I don't see where to add :ACL to features
08.01.19 10:14:34<dmiles> (pushnew :ACL *features*)
08.01.19 10:14:37<aindilis> ty
08.01.19 10:15:26<dmiles> well i assume such a dirty hack wil just work arround minor things
08.01.19 10:15:37<dmiles> i wouldnt do that until ASDF is completely loaded
08.01.19 10:15:52<dmiles> as it will confuse the packages
08.01.19 10:16:09<dmiles> (tricks ASDF into npot using ABCL)
08.01.19 10:16:13<aindilis> k restarting
08.01.19 10:16:27<dmiles> i'd jsut fix the DOLIST macro
08.01.19 10:16:37<dmiles> i mean in the couple places
08.01.19 10:16:52<aindilis> it wants a clos: function and (require "clos") did not provide it for some reason
08.01.19 10:16:53<dmiles> and use  #+abcl() 
08.01.19 10:17:24<dmiles> instead of clos you have to use closer-mop[
08.01.19 10:17:35<aindilis> :)
08.01.19 10:19:18*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 252 seconds
08.01.19 10:19:32<dmiles> once i get my cuirrent stuff fixed i can give it a try here
08.01.19 10:19:57<dmiles> be about 1/2hr to hour (i cant test it anyways until i fix it
08.01.19 10:20:08<aindilis> hrm, np, I was just trying to impress you lol
08.01.19 10:20:22<aindilis> I've actually been reading the manual some
08.01.19 10:20:34<aindilis> it's in doc/INDEX.html
08.01.19 10:21:13<aindilis> so for it looks like this is PDDL with some nifty extensions
08.01.19 10:21:17<aindilis> first of all task-decomposition
08.01.19 10:21:22<aindilis> contingent planning
08.01.19 10:21:25<aindilis> adversarial planning
08.01.19 10:21:29<aindilis> temporal planning
08.01.19 10:21:30<aindilis> etc
08.01.19 10:21:37<aindilis> I don't get the impression it is complete
08.01.19 10:21:45<aindilis> would be incredible if it were
08.01.19 10:22:17<aindilis> so the PDDLishness actually works out well for learnability
08.01.19 10:22:33<aindilis> I want to try to mount the taxonomy
08.01.19 10:22:37<aindilis> there is some owl import stuff too
08.01.19 10:22:49<aindilis> I need to know enough about it to talk intelligibly to Chris
08.01.19 10:22:58<aindilis> btw, how high a priority is AP at the moment?
08.01.19 10:23:08<aindilis> should we be focused in the short term on DAYDREAMER more?
08.01.19 10:23:25<aindilis> I would imagine getting DAYDREAMER to use AP would be difficult
08.01.19 10:23:35<dmiles> well an important thing is to get the planning domain built
08.01.19 10:23:53<aindilis> oh you mean the proxy to CYCKB?
08.01.19 10:23:55<dmiles> at least for me so i can have a use for the planer
08.01.19 10:24:02*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
08.01.19 10:24:08<dmiles> cyc: (+ 1 1)
08.01.19 10:24:21<dmiles> exmaple the PDDL/KR 
08.01.19 10:24:54<dmiles> like i think a planner is step three
08.01.19 10:25:00<dmiles> or step two
08.01.19 10:25:06<dmiles> in at least my todo list
08.01.19 10:25:29<dmiles> the hjighest priority is the KE pipeline
08.01.19 10:25:48<dmiles> that gets the planing domain to be reachable by some automatic process
08.01.19 10:25:54<cyc> oh okay, so like #$preconditionFor-Props?
08.01.19 10:26:18<dmiles> yes so example is actualy starting to use the #$preconditionFor-Props
08.01.19 10:26:30<cyc> okay
08.01.19 10:26:43<dmiles> for isntance populating CYC from a PDDL file
08.01.19 10:26:44<cyc> so populating a planning domain into CycL?
08.01.19 10:26:48<cyc> k
08.01.19 10:26:55<cyc> ah straightforward
08.01.19 10:27:43<dmiles> setting up planning domains to be used by a planner
08.01.19 10:27:47<cyc> really it generates all the assertions by processing the PDDL as input and then querying CYC for matching preds/objects/etc
08.01.19 10:28:09<dmiles> right it query CYC for thje domain and problems
08.01.19 10:28:12<cyc> oh so export to 3t for instance as opposed to shop?
08.01.19 10:28:39*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 268 seconds
08.01.19 10:28:42<cyc> having AP in the AP package should make this whole thing easier then I would think
08.01.19 10:28:47<dmiles> well running 3t as a internal Cyc processes
08.01.19 10:29:03<cyc> yeah
08.01.19 10:29:18<dmiles> doing to 3T what is being done to daydreamer
08.01.19 10:29:31<cyc> k cool, so I will let you get back to it so you can try to load 3t today
08.01.19 10:29:36<cyc> and pass me the instructions
08.01.19 10:29:52<dmiles> i'll be tryign inb teh console in 30-690 minutes
08.01.19 10:29:56<cyc> I will continue to read the manual and play with the source
08.01.19 10:29:58<dmiles> i'll be tryign inb teh console in 30-60 minutes
08.01.19 10:30:02<cyc> kk
                 <cyc> great
08.01.19 10:30:11<cyc> setting alexa timer
08.01.19 10:30:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dvggvlfsesubonno, stoopkid: stoopkid)
08.01.19 10:30:20<dmiles> cyc: (+ 1 1)
08.01.19 10:30:35<dmiles> well i cna commenbt out my new code and try it in a few minutes
08.01.19 10:31:13*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
08.01.19 10:31:18<dmiles> cyc: (+ 1 1)
08.01.19 10:31:43<cyc> if I am typing when that happens it hangs my Emacs process, I'll have to fix that
08.01.19 10:32:25<dmiles> at least i''ll estimate hjow much work it is in ABCL
08.01.19 10:35:50<cyc> testing
08.01.19 10:35:59<aindilis> cool
08.01.19 10:36:16<aindilis> testing
08.01.19 11:00:14<dmiles> sorry still trying ot get the prolog code to a stoable point
08.01.19 11:00:40<aindilis> I've started working on WOPR/RedTeam
08.01.19 11:00:47<dmiles>  the school called and daugter taking to hpostial with sprained knee
08.01.19 11:00:53<aindilis> :((
08.01.19 11:01:04<dmiles> well i can work at least fpor a little bit more
08.01.19 11:01:25<aindilis> well I'm sorry your daughter sprained her knee
08.01.19 11:01:32<aindilis> I hope she feels better soon
08.01.19 11:35:56<dmiles> made too many changes .. replacing much of the internal lisp storage with prolog assert/retracts
08.01.19 11:36:04<aindilis> hrm
08.01.19 11:36:06<dmiles> so i will have to try when i get home today
08.01.19 11:36:11<aindilis> np
08.01.19 11:36:18<dmiles> well i casn revert the git repo
                 <aindilis> I'm going to wrap up for the day
08.01.19 11:36:38<aindilis> well I'm done for today anyway
08.01.19 11:36:43<dmiles> but then agfain i jsut need to finish the code i was in the middle of writitng
08.01.19 11:36:46<aindilis> I made a standalone WOPR
08.01.19 11:36:50<aindilis> yeah
08.01.19 11:37:04<aindilis> so I'm going to try to get WOPR working really well
08.01.19 11:37:18<aindilis> but first, some kind of relaxation
08.01.19 11:37:19<dmiles> i spent a longer tryign to back it out than i would have jsut to finish it :)
08.01.19 11:37:29<aindilis> srry
08.01.19 11:37:39<dmiles> noit your fault.. i volenteered
08.01.19 11:37:43<aindilis> k
08.01.19 11:37:47<aindilis> drive safe!
08.01.19 11:37:49<aindilis> nn!
08.01.19 11:38:00<dmiles> nn
09.01.19 00:05:18*** Netmerge: *.net *.split, split 49 years 8 months 25 days 5 hours 5 minutes 19 seconds ago (Use /WL to see who's still missing)
09.01.19 00:05:23<dmiles> cyc: (+ 1 1)
#logicmoo> 09.01.19 04:09:28*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
09.01.19 04:09:29*** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 7 months 15 days 8 hours 37 minutes 38 seconds ago
                 *** Names: editable-dog yesbot aindilis stoopkid Copenhagen_Bram PrologMUD dmiles cyc @ChanServ michalisko
                 *** End of /NAMES list.
09.01.19 04:09:34<dmiles> cyc: (+ 1 1)
09.01.19 05:56:45<aindilis> dmiles: ping
09.01.19 06:00:29<dmiles> ok.. i gettign to work now!
09.01.19 06:00:42<aindilis> heh, I slept frm the last time we talked til right now
09.01.19 06:00:57<dmiles> :)
09.01.19 06:01:55* dmiles was ranting in ##logic about hw Schank is missunderstood
09.01.19 06:02:37<dmiles> about how even I misunderstood him from 1986-2014
09.01.19 06:03:19<dmiles> though i knew he was right from 1993-present i just didnt understand what he was right about
09.01.19 06:03:32<aindilis> which is?
09.01.19 06:04:02<dmiles> about what the model of cogntion actualyl was
09.01.19 06:04:18<aindilis> k
09.01.19 06:04:37<aindilis> what is the model of cognition?  I'm trying to elicit a very brief summary
09.01.19 06:04:43<dmiles> iit was that we "seek to create inteligability in our narrative space"
09.01.19 06:05:01<aindilis> k
09.01.19 06:05:22<dmiles> my mistake we that i thought schank only says we " create inteligability in our narrative space"
09.01.19 06:05:24<aindilis> we try to explain things to ourselves about some topic
09.01.19 06:05:51<dmiles> or more simply i thought schank says  "we use inteligability in our narrative space""
09.01.19 06:06:17<aindilis> what more doth he say?
09.01.19 06:06:21<dmiles> right that we "try to explain things to ourselves" is the important peice i missed
09.01.19 06:06:38<aindilis> ah
09.01.19 06:07:06<aindilis> I see so it's narrative coherence drawn from some set of stimuli
09.01.19 06:07:19<aindilis> in other words, abduction?
09.01.19 06:07:52<dmiles> "how we explain things to ourselves" is fed back as "environemntal stimulus"
09.01.19 06:08:04<aindilis> ah
09.01.19 06:08:28<aindilis> interesting, can you model this in object/metalanguage?
09.01.19 06:08:42<dmiles> so that we work on things annotated with these hints .. they become heuristics
09.01.19 06:09:11<dmiles> and often more than heuristics as they are adequate for problem solving
09.01.19 06:09:18<aindilis> what software implementations of this are there?
09.01.19 06:09:24<aindilis> and do we need to petition Schank
09.01.19 06:09:49<dmiles> i can model this in object and metalanguage yes
09.01.19 06:10:20<dmiles> the feedback mechanism though is comkplex enough that is what CYC/Logicmoo is required to maintain
09.01.19 06:10:54<aindilis> it seems like you get a sequence of object metalanguage -> new object metalanguage -> new object metalanguage like iterating systems or like layers of soil geographically
09.01.19 06:11:15<aindilis> yeah
09.01.19 06:11:16<dmiles> often it is very Teired that way
09.01.19 06:11:33<dmiles> Tiered
09.01.19 06:11:48<dmiles> but alos it breaks Tiers all the time
09.01.19 06:11:56<aindilis> cool
09.01.19 06:12:06<aindilis> DAYDREAMER in CYC sufficient?
09.01.19 06:12:26<aindilis> did ErikT ever reply?
09.01.19 06:12:46<aindilis> ErikT LarKC
09.01.19 06:12:50<dmiles> "this moosehead beer is really awesome as it has a very small caribou footprint"
09.01.19 06:13:17<aindilis> heh
09.01.19 06:13:31<dmiles> (pun on carbon footprint)(also has cute moosetracks printed on lable)
09.01.19 06:14:07<dmiles> DAYDREAMER in CYC is mostly sufficient 
09.01.19 06:14:43<dmiles> then up to use ot do all the things Schank ranted we neede to also do
09.01.19 06:14:47<dmiles> up to us
09.01.19 06:15:02<aindilis> link?
09.01.19 06:15:07<aindilis> I'm going to start a new project
09.01.19 06:15:26<aindilis> schank-narrative-cognition or something
09.01.19 06:15:28<dmiles> Erik replied back with an answer that was not dismissive but was providing as little information as possible
09.01.19 06:15:34<aindilis> lol
09.01.19 06:15:42<aindilis> well I guess that's a start
09.01.19 06:16:07<dmiles> he is crazy busy person
09.01.19 06:16:28<dmiles> have you seen is amature sitcoms?
09.01.19 06:16:31<dmiles> his
09.01.19 06:16:33<aindilis> no
09.01.19 06:17:17<aindilis> can you forward me his response?
09.01.19 06:19:19<dmiles> Are you aware of whether or not Doug Lenat ever considered having the daydreamer system as a Cyc module? Obviously, the two systems were designed for each other. (CYC is GATE on steroids)
                 <dmiles> Erik Mueller sent the following message at 3:36 AM
09.01.19 06:19:20<dmiles> View Erik’s profile
                 <dmiles> Erik Mueller
                 <dmiles> Erik Mueller  3:36 AM
                 <dmiles> I'm not sure, but Cyc used to run machine learning at night to identify inconsistencies and possible omissions in the knowledge base. A kind of night dreaming.
09.01.19 06:19:38<dmiles> DAYDREAMER requires planning knowledge, and I'm not sure how much of that Cyc has. Maybe Cyc's ontology would be useful though.
09.01.19 06:20:31<aindilis> okay ty
09.01.19 06:20:45<aindilis> it's informative
09.01.19 06:21:00<aindilis> so about CYC planning knowledge, what is the status?
09.01.19 06:21:11<aindilis> there is a lot of work on extracting planning domains from text
09.01.19 06:21:20<aindilis> makes sense to ground that work in CYC
09.01.19 06:21:48<dmiles> Douglas Miles
                 <dmiles> Douglas Miles  6:23 AM
09.01.19 06:21:49<dmiles> Do you know of any researchers whom are presently use Case Base Explanation/Reasoning or Conceptual Dependency Theory? I am, (at least I believe). And thinking a study group or culmination of ideas would be to everyone's advantage.
09.01.19 06:21:50<dmiles> Roger Schank sent the following message at 8:36 AM
                 <dmiles> View Roger’s profile
                 <dmiles> Roger Schank
                 <dmiles> Roger Schank  8:36 AM
                 <dmiles> not offhand; you could check with former students of mine
09.01.19 06:22:36<aindilis> hrm, yeah these don't seem to be "let's work together" type messages
09.01.19 06:22:50<aindilis> from them
09.01.19 06:23:07<aindilis> which is odd since we want to work ontheir stuff
09.01.19 06:24:21<dmiles> ohhthat from schank was a couiple years ago.. i am finding other corispendances
09.01.19 06:24:52<dmiles> none were any more possitive than that
09.01.19 06:25:07<dmiles> but i thinking he is edging closer to be a ranting maniac like me
09.01.19 06:25:21<dmiles> startign to feel liek he might be percived that way now
09.01.19 06:25:35<aindilis> hrm
09.01.19 06:25:43<dmiles> so he might actually want to start to do something about that :)
09.01.19 06:25:56<aindilis> :)
09.01.19 06:26:37<aindilis> I'm working on WOPR
09.01.19 06:26:54<dmiles> 7/24/2016
                 <dmiles> Douglas Miles sent the following message at 10:35 AM View Douglas’ profile
                 <dmiles> Douglas Miles
                 <dmiles> Douglas Miles  10:35 AM
09.01.19 06:26:55<dmiles> Jeff, you are brilliant and one of the very few people that really understands how Roger C. Schank's theory of intelligence works!
                 <dmiles> Jeff Orkin is now a connection.
09.01.19 06:27:02<aindilis> I'm hoping to get it to the point where it can sit on top of LarKC/DAYDREAMER/3T
09.01.19 06:27:16<dmiles> hrrm i forgot about Jeff
09.01.19 06:28:01<dmiles> http://alumni.media.mit.edu/~jorkin/goap.html
09.01.19 06:29:20<aindilis> ah yes
09.01.19 06:29:32<aindilis> GOAP
09.01.19 06:30:46<dmiles> hrrm well https://www.linkedin.com/in/roger-schank-5420a298/detail/recent-activity/
09.01.19 06:33:56<dmiles> his articale with Marvin Minksy picture is the one i am looking for
09.01.19 06:35:07<dmiles> this one https://www.linkedin.com/pulse/lets-do-ai-right-response-from-old-folks-home-new-tool-roger-schank/
09.01.19 06:35:51<dmiles> though i dont think Ray Bareiss, and Chris Riesbeck was authors.. more observers
09.01.19 06:36:53<dmiles> that is what *we* are building
09.01.19 06:37:37<dmiles> what Ohad wants to build
09.01.19 06:37:39<dmiles> There will, however, be cases in which SPGU-T cannot answer a question or cannot identify relevant help and advice with reasonable certainty even after interacting with the user to further understand his or her specific context. In such cases, SPGU-T will refer the question or situation to a human expert and promise the user that the expert will address the issue. SPGU-T can extend its case 
09.01.19 06:37:40<dmiles> base as a result of capturing such interactions, thus enabling it to answer a wider range of questions and to provide better help and advice to future users. Marvin would approve.
09.01.19 06:37:48<dmiles> just Ohad is farid of that last paragraph
09.01.19 06:39:12<aindilis> because his system = SPGU
09.01.19 06:39:14<aindilis> -T
09.01.19 06:40:10<dmiles> Schank wwhen writting that article was visualizing what he wished to be happening for him
09.01.19 06:41:11<dmiles> "that is what *we* are building" .. well sort of maybe we should tell schank "ours is called SPGU-T" :P
09.01.19 06:41:29<aindilis> I think we should call it spgu-t-planlogic or something
09.01.19 06:41:41<aindilis> mayble spgu-t-pl
09.01.19 06:41:44<dmiles> actually when i first published the thjinking in 1999 it was called spgu_driver
09.01.19 06:41:49<aindilis> kk
09.01.19 06:41:52<aindilis> let's go with that
09.01.19 06:43:11<aindilis> finally, got WOPR online
09.01.19 06:43:34<aindilis> now I can add a ton of rules to it
09.01.19 06:43:52<aindilis> can you extend the sequence:
09.01.19 06:44:07<dmiles> damn  http://swig.planetrdf.com/2003/02/20/2003-02-20.html   <- like ad the first link
09.01.19 06:44:26<dmiles> soryr i jsut paste
                 <dmiles> d at 2003-02-20 20:04
09.01.19 06:44:27<dmiles> XP in OpenCyc
                 <dmiles> posted by dmiles at 2003-02-20 20:04 (+) tags:
                 <dmiles> dmiles: Implementation of Explanation Patterns in OpenCyc.
09.01.19 06:44:28<dmiles> dmiles: It'd be nice to have an english->cd terms in OpenCyc parser like the one described in "A Conceptual Dependency parser for natural language".
                 <dmiles> dmiles: Work in progress... see [spgu.ke] http://217.117.225.187/~yeb/XP/spgu.ke 
09.01.19 06:44:29<dmiles> dmiles: (written in KE format)
                 <dmiles> dmiles: [Prolog Example of] http://12-212-75-114.client.attbi.com/root/opt/sourceforge/logicmoo/openmodality/iso-prolog/logicmoo_pvw_espg.pl
09.01.19 06:44:31<aindilis> planHasContingency/1, possibleRepsonse/2, hasResponse/2, hasThreat/2, hasRisk/2 etc
09.01.19 06:45:10<dmiles> we need to get Yeb helping
09.01.19 06:45:32<aindilis> Yeb?
09.01.19 06:45:37<dmiles> Yeb Havinga
09.01.19 06:46:02<dmiles> him and i worked together on OpenCyc stuff
09.01.19 06:46:38<aindilis> sounds gret
09.01.19 06:46:41<aindilis> *great
09.01.19 06:47:05<aindilis> do we have a file for recruitment or should I add him to my KB along with Schank, Erik, and Jeff?
09.01.19 06:47:15<dmiles> yes
09.01.19 06:47:19<aindilis> k
09.01.19 06:47:34<aindilis> I will put them down as collaborating on what projects?
09.01.19 06:47:40<aindilis> LarKC_CL, SPGU_driver ?
09.01.19 06:48:02<aindilis> possibly collabing
09.01.19 06:48:28<aindilis> I will start a new KB PlanLogic.subl
09.01.19 06:49:54<dmiles> oh i rather call it SPGU_TT
09.01.19 06:50:02<dmiles> or n/m 
09.01.19 06:50:04<aindilis> k
09.01.19 06:51:08<aindilis> I have to add a new entry for LarKC into Cyc-Mode-2 lol
09.01.19 06:51:31<dmiles> i dunno they are sorta blended such as SPGU_MUD or SPGU_TT
09.01.19 06:51:49<dmiles> or SPGU_DD
09.01.19 06:52:06<dmiles> DD was based on SPGU 
09.01.19 06:52:58<dmiles> i am going to ask Yep for http://217.117.225.187/~yeb/XP/
09.01.19 06:59:10<aindilis> okay made the KB, have projects and people
09.01.19 07:02:10<aindilis> brb
09.01.19 07:02:26<dmiles> found it ! https://web.archive.org/web/*/http://wwwhome.portavita.nl:80/~yeb/*
09.01.19 07:11:57<aindilis> wonderful we should archive this
09.01.19 13:01:18<stoopkid> dmiles: another thing i've been looking at to be eventually integrated, graphics packages and numeric methods packages
09.01.19 13:03:24<stoopkid> example, we've got NumPy, does nice numeric methods and arbitrary precision arithmetic stuff in python, and integrates with the rest of the SciPy, SymPy etc.. environment; then we've got matplotlib, Qt etc.. for handling plotting (and graphics in general)
09.01.19 13:04:36<stoopkid> but plotting and graphics is really just a whole lot of numeric methods stuff... the only difference is where its happening (on your GPU and being sent to your display) and what the numerical methods are being applied to (drawing windows and shapes and stuff)
09.01.19 13:07:55<stoopkid> and ofc, we want to utilize the massive parallelism of the GPU for large & repeated numeric methods problems anyway,  ex. "general purpose GPU"
09.01.19 13:09:16<stoopkid> so realistically, graphics should just be a domain-specific sub-problem of using the "general purpose GPU" paradigm for large & repeated numeric methods problems
09.01.19 13:11:37<stoopkid> so at its core it should just be a) the *same* numeric methods system you use for the rest of your numeric methods (which itself should really just be a subcomponent of your more general symbolic computation / computer-algebra system); b) a generic "dispatching" system that will actually take care of setting up the problem on diverse hardware
09.01.19 13:20:56<stoopkid> this is another example of the benefit of using a single & shared foundation for as many things as possible; we would not be able to (easily) integrate the tools we build with the generic numeric methods system with the graphics framework unless the graphics are actually described in terms of that same numeric methods system
09.01.19 13:22:15<stoopkid> note that this is typically in the same line of reasoning as that used to justify logic programming for this purpose: "everything in your KB is already expressed in terms of the same logical/computational substance, so you can integrate it", but that's where the soundness problem comes in (unless you're talking about logic-programming-in-record-types *above* some foundation)
09.01.19 13:24:00<stoopkid> wrt our discussion earlier: "like in a math book you dont justify why you did math *that* way.. you jsut know why and then you do it"
09.01.19 13:24:07<stoopkid> yes/no
09.01.19 13:25:13<stoopkid> in the vast majority of math books they actually are trying to justify why they did math *that* way, or at the very least, that doing math the way they did is *at least valid / sound*
09.01.19 13:25:46<stoopkid> but usually even trying to justify how you would even have come up with their particular route from A to B in the first place
09.01.19 13:27:40<stoopkid> the only reason they don't do it in "complete detail" "right then and there" is because they try to save space in the text by relying on the assumption that you already "know" the soundness/validity of the individual proof/computation-steps they explicitly present in the book
09.01.19 13:29:44<stoopkid> and then there are pedagogical and philosophical books that actually try to dig down into the very substance of what basic arithmetic and logic are and do, etc...
09.01.19 13:30:14<stoopkid> and then the majority of the math community is just implicitly/explicitly relying on the ZFC interpretation of this "foundation"
09.01.19 13:31:07<stoopkid> seriously go try to discuss foundations with the average mathematician and they'll be like "ZFC, please stfu about foundations"
09.01.19 13:33:13<stoopkid> "blind acceptance" of ZFC might not win an absolute majority of mathematicians but it certainly wins a plurality
09.01.19 13:38:57<stoopkid> i'd even say that if you see a math textbook that isn't explicitly laying out a set of axioms/rules used in its results, then you should be able to assert that it's actually ZFC and that the authors are actually totally wrong about any assertions they make if ZFC doesn't support those assertions
09.01.19 13:41:52<stoopkid> i bet you'd find quite a few examples in the literature where ZFC doesn't actually support the assertion made, and no alternative foundation is provided
09.01.19 13:43:10<stoopkid> but the idea is really that they actually are *supposed* to be justifying all their results in terms of "some" foundation of math
09.01.19 13:45:44<stoopkid> even the Greeks made axiomatic foundations
09.01.19 13:46:33<stoopkid> (ancient Greeks i mean, modern Greeks ofc do lots of things too lol)
09.01.19 13:51:38<stoopkid> anyway any result in a math textbook should either be presenting a result in terms of *some* foundation that allows mechanical proof-checking, or should be trying to justify some axiom/rule in that foundation
09.01.19 13:52:17<stoopkid> like you should be able to hold them accountable to that any declare any textbook that fails to satisfy this to be a faulty textbook
09.01.19 13:52:24<stoopkid> and* declare
09.01.19 13:53:50<stoopkid> but i think you would also be surprised at how many advanced math books would (eventually) pass the test and how many actually would share the same common foundation 
09.01.19 13:58:05*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
09.01.19 13:58:10<dmiles> cyc: (+ 1 1)
09.01.19 13:59:30<stoopkid> 'the "foundational" is "Explaination based reasoning"'
09.01.19 14:00:04<stoopkid> hmm
09.01.19 14:00:06<stoopkid> maybe
09.01.19 14:00:43<stoopkid> there's a difference between reasoning about pure math and "real world" reasoning
09.01.19 14:01:38<stoopkid> like the differences between the two are so profound that for thousands of years people have been fairly open to the hypothesis that pure math actually lives in some separate "pure Platonic reality"
09.01.19 14:04:21<stoopkid> like i've said, you can't have the fact that 2 + 2 = 4 be on the same level as the 'fact' that "All birds fly" or "mechanics is Newtonian"
09.01.19 14:09:36<stoopkid> this is basically all the defeasibility you need, you just separate it out into two categories of things: mathematical theorems and scientific theories
09.01.19 14:19:05<stoopkid> as far as the mathematical theorems go, that's more constrained by your axioms/rules than it is by anything else (ex. the search strategy you use with them), it's basically just "search this given space as best you can" not a whole lot more to it than that besides details
09.01.19 14:21:22<stoopkid> as far as the scientific theories go, you have them expressed in terms of math, like "assume X Y and Z are true, *then* the following would be true", so you can still apply your foundations to them, but a different sort of reasoning strategy is necessary
09.01.19 14:22:21<stoopkid> (is *also* necessary)
09.01.19 14:26:59<stoopkid> basically something like that prediction-based-learning-loop i described
09.01.19 14:38:29<stoopkid> so here's something related that i would describe as "explanation based reasoning"
09.01.19 14:41:06<stoopkid> let's take NLP for instance; what's the status of NLP? everybody says "it seems like it's really good at learning, but in some sense we don't think it actually 'understands', and indeed you can probably figure out how to confuse the hell out of it"
09.01.19 14:41:38<stoopkid> or on the other extreme, expert systems and CNLs
09.01.19 14:43:46<stoopkid> how can we ensure it's "understanding" *something*? make it translate the natural language into logic and then paraphrase it for you (same way we ensure this when explaining things to people), the thing it needs to "learn" is that loop
09.01.19 15:40:22*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
09.01.19 21:43:01<dmiles> > as far as the mathematical theorems go, that's more constrained by your axioms/rules than it is by anything else (ex. the search strategy you use with them), it's basically just "search this given space as best you can" not a whole lot more to it than that besides details
09.01.19 21:44:17<dmiles> i kinda surprised that the technology to do mathematics has this property sometimes
09.01.19 21:45:53<dmiles> whould have expected that "two categories of things: mathematical theorems and scientific theories" would have been differnt in that regard
09.01.19 23:43:47<stoopkid> dmiles: well
09.01.19 23:44:07<stoopkid> i do kind of gloss over a lot of "details" there :P
09.01.19 23:44:44<stoopkid> wrt 'it's basically just "search this given space as best you can" not a whole lot more to it than that besides details'
09.01.19 23:46:22<stoopkid> the real point here is that the whole space and the entire set of "correct" things to do is already predetermined, and you're just searching through a known space
09.01.19 23:46:44<stoopkid> with science otoh i think about information-theoretic agents
09.01.19 23:47:24<stoopkid> some "little dude" equipped with some sensory input, actuators, and some cognition for doing reasoning
09.01.19 23:48:48<stoopkid> the little dude has no idea how it even got there, what it itself is made of or how it itself works, or what is the space around it or what is even the meaning of its life
09.01.19 23:48:56<stoopkid> i kinda empathize with the little dude
09.01.19 23:52:23<stoopkid> it doesn't know the rewrite rules of the space, as opposed to with a foundation of math where you explicitly have every rewrite rule
09.01.19 23:55:08<stoopkid> so it's fairly different activities, searching a well-defined space described by explicit rewrite rules vs. taking raw input from an unknown world via unknown mechanics and hoping to turn it into any kind of sense at all
09.01.19 23:58:15<dmiles> well i'd love to think that mathematics no longer involves search
09.01.19 23:58:40<dmiles> (due to such well definedness)
09.01.19 23:59:00<stoopkid> i'd kinda be hard-pressed to think that there's anything that doesn't involve search :P
10.01.19 00:01:01<dmiles> yeah .. in fact the whole subject of complexity in Finite Model Theory (the part that is really about mathematics) does based the properties of complexity on search
10.01.19 00:09:19<dmiles> the problem being a search for which of the mathematical axioms will lead to meeting some goal should be easier even i what i would hope after findinbg out we are still stuck in search-land
10.01.19 00:10:18<dmiles> after findinbg out we are still stuck in search-land deciding which of the mathematical axioms will lead to meeting some goal would be easier i hoped 
10.01.19 00:11:25<dmiles> since there should not be anything in search-land that could be made any easier
10.01.19 00:14:07<stoopkid> not sure what you mean really but no, foundations don't really make math easier, for the most part, they just make a computer be able to do it too
10.01.19 00:15:34<stoopkid> the only way you can really make the search easier for proofs is with some alternate foundation or just by keeping track of a high-level map of patterns and features of the search-space
10.01.19 00:16:48<dmiles> what i would hope is such a high-level map is readiliy documented
10.01.19 00:17:59<stoopkid> i mean, you could say that about anything
10.01.19 00:18:08<stoopkid> and i would agree :D
10.01.19 00:18:20<dmiles> well not not somethning everyone thinks is most important 
10.01.19 00:18:31<dmiles> well why not somethning everyone thinks is most important  :)
o10.01.19 00:18:34<stoopkid> everyone is usually wrong most of the time
10.01.19 00:18:41<stoopkid> imho
10.01.19 00:19:22<stoopkid> idk, porn?
10.01.19 00:19:51<stoopkid> what do people think is most important cause i don't see much commonality in most peoples' goals lol
10.01.19 00:20:11<stoopkid> at least in execution anyway
10.01.19 00:22:10<dmiles> even the community wanting mathematics would rather porn than write out rules like this sinch having these rules would indeed lead to even ore work
10.01.19 00:23:36<stoopkid> you mean: make an NLP system that interprets math textbooks and figures out what are the theorems stated in the book and what are the axioms/rules and whether or not they've been applied correctly?
10.01.19 00:24:28<dmiles> i mean a common library of heuristics that is consumed by CASs
10.01.19 00:25:20<dmiles> but yes i might built what you just said based on that library to
10.01.19 00:25:32<dmiles> built/build
10.01.19 00:26:18<dmiles> though whether or not axioms/rules been applied correctly can already be done without the heuristics
10.01.19 00:27:07<dmiles> thought ok.. still might need them to search for what we are supposed to be verifying
10.01.19 00:27:09<stoopkid> common public libraries would be cool, for each different heuristics format
10.01.19 00:33:38<stoopkid> https://en.wikipedia.org/wiki/Third-generation_programming_language
10.01.19 00:33:48<stoopkid> https://en.wikipedia.org/wiki/Fourth-generation_programming_language
10.01.19 00:34:01<stoopkid> https://en.wikipedia.org/wiki/Fifth-generation_programming_language
10.01.19 00:36:04<stoopkid> http://thepeoplessite.wikia.com/wiki/Sixth-generation_programming_language
10.01.19 00:36:13<stoopkid> (i'm dubious about the last one but ok)
10.01.19 00:37:27* dmiles is almost afraid to look
10.01.19 00:37:47<dmiles> thank god!
10.01.19 00:37:56<dmiles> i was adfraid Haskell would be
10.01.19 00:38:15<dmiles> or have it relate to type theory :P
10.01.19 00:39:02<dmiles> instead it was what *i* would have said
10.01.19 00:39:20<stoopkid> i'm also somewhat dubious about the distinction between some aspects of 3 and 4 and some aspects of 4 and 5
10.01.19 00:39:43<dmiles> though i might feel safer merging 6GPL to 5GPL
10.01.19 00:40:05<dmiles> yes lisp is *not* 5GPL
10.01.19 00:40:27<stoopkid> i guess the distinction between 3 and 4 makes sense... not sure about 5
10.01.19 00:40:38<dmiles> the unexecutable parts of Agda and Prolog are 5GPL
10.01.19 00:41:13<dmiles> the unexecutable parts of Agda (how they are like the executable parts of Prolog) are imo 5GPL
10.01.19 00:42:28<dmiles> 5 is that compilers of 1-4 dont work for 5GPL
10.01.19 00:42:49<dmiles> 5 requires a processor that runs forward and backwards
10.01.19 00:43:55<dmiles> vs 4th seesm to need such power but can be run as things like SQL transactions
10.01.19 00:44:17<dmiles> oops i got 4th confused with.. um.. checking
10.01.19 00:44:38<stoopkid> well, the "unexecutable parts of Agda that are like the executable parts of Prolog" are actually executable too, just like Prolog
10.01.19 00:44:43<dmiles> SQL stroed preceedures are whaich ?
10.01.19 00:45:02<dmiles> SQL stored procs are which gen?
10.01.19 00:45:21<stoopkid> probably 4th
10.01.19 00:46:57<dmiles> 3rd gen are now considered relatively low level in comparison to languages such as Python, Ruby, and Common Lisp, which have some features of fourth-generation programming languages.
10.01.19 00:47:26<dmiles> (just pointing out how the speration of 3rd and 4th is barely there)
10.01.19 00:48:44<stoopkid> i'd characterize 4th generation as being a proliferation of a) idiomatic abstractions over the procedural stuff, ex. Python's idioms, OOP, many functional langs, etc.., b) pluggable/portable domain-specific packages and frameworks that you wouldn't have wanted to build over bare assembly (ex. graphics packages, web packages, networking packages, compilation frameworks, etc..)
10.01.19 00:49:19<dmiles> glad the parts i called unexecutable are actually used as executable
10.01.19 00:50:05<dmiles> (oops i didnt mean that they werent actualyl being used as execuation.. but meant to say i am glad that i wasnt correct on it)
10.01.19 00:50:15<stoopkid> well they aren't really, it's literally like having a bunch of prolog queries and a prolog kb (the axioms/rules) and trying to solve them yourself
10.01.19 00:50:34<stoopkid> iow they just aren't employing much automation yet
10.01.19 00:50:41<dmiles> oh
10.01.19 00:50:43<stoopkid> not for any particular reason, they just aren't :)
10.01.19 00:51:20<stoopkid> i mean, i could go into the reasons they aren't but i mean there's no technical barrier other than just doing it
10.01.19 00:52:01<stoopkid> Coq is better for that
10.01.19 00:52:34<dmiles> if it started to done in Ada peopel would start introducing problems that have plaghued prolog compilers for years
10.01.19 00:53:36<dmiles> so by it not actually being done .. (not that this is why) Agda can pretend such problems are solved
10.01.19 00:54:50<dmiles> the plaguing problems with 5th gen language is that everything peopl want is unwanted by someone else
10.01.19 00:55:03<dmiles> tonight on ##prolog..
10.01.19 00:55:27<stoopkid> i'd categorize 5th generation as being the first attempt(s) at actually abstracting further beyond the  procedural paradigm solidified in the 3rd generation and proliferated in the 4th generation
10.01.19 00:55:33<dmiles> [20:30] <dmiles> ?- X=a, member(X,[a,b,c]),deterministic(YN),write((x=X , det=YN)),nl,fail.
                 <dmiles> [20:30] <dmiles> x=a,det=false
10.01.19 00:55:34<dmiles> [20:30] <dmiles> ardin_agoy wants the det=true there 
10.01.19 00:55:35<dmiles> [20:31] <dmiles> i think that is presumptuous to expect that 'a' cannot unify with 'c' 
                 <dmiles> [20:32] <dmiles> currently sure.. a=c   will fail.. but what if the side effect of a test of  a=b    changes the physics and  now a=c ?
10.01.19 00:55:36<dmiles> [20:33] <dmiles> why this *used* to work like ardin_agoy wanted was swi-prolog would "look ahead"
10.01.19 00:56:08<dmiles> "changes the physics" was stollen language from stoopkid :P
10.01.19 00:56:58<dmiles> ?- X=a, member(X,[a,b,c]),deterministic(YN),write((x=X , det=YN)),nl,fail
                 <yesbot> No permission to call sandboxed `deterministic(_2250)'
                 <yesbot> No permission to call sandboxed `deterministic(_2250)'
                 <yesbot> 2 + 2 = 5.
10.01.19 00:57:10<dmiles> damn security!
10.01.19 00:57:28<stoopkid> ex. logic programming, machine-interpretable foundations, symbolic computation / computer-algebra systems
10.01.19 00:59:06<dmiles> yeah to 5th 
10.01.19 00:59:20<stoopkid> prolog is certainly a major abstraction, so are Agda/Coq types, so is a lot of stuff you can do in a computer algebra system (though not all of it, in some ways most of them are only barely being 5th gen)
10.01.19 00:59:22<dmiles> so hey what is Haskell?  
10.01.19 00:59:43<stoopkid> weird
10.01.19 01:00:29<stoopkid> it's maybe a higher-end 3rd gen..
10.01.19 01:00:40<stoopkid> or maybe... trying to be 5th gen but just totally failing
10.01.19 01:01:57<stoopkid> i guess that's what it is, a deficient attempt at 5th gen
10.01.19 01:01:58<dmiles> teh closest thing i felt to prolog is very surprising was PHP and MS-ActiveServerPages
10.01.19 01:02:38<stoopkid> cause ex. lisps and untyped lambda calcs are definitely 3rd gen
10.01.19 01:03:16<stoopkid> that's something somebody in the 50s and 60s could've been sitting with some assembly lang and been like, "i'm gonna make my higher-level lang be lisp-like!" and actually ofc they actually did that
10.01.19 01:03:41<dmiles> i sold a "automatic doorway page generator" called "spider candy" that would continulay reqrite things and keep web spiders busy for years
10.01.19 01:04:06<dmiles> in PHP ..but it was basically prolog code
10.01.19 01:04:25<dmiles> my biggest buys were porn websites!
10.01.19 01:05:08<stoopkid> i'm sure lol
10.01.19 01:05:23<stoopkid> PHP is definitely 4th gen, like Python
10.01.19 01:05:59<stoopkid> Agda and even Haskell types are definitely much more like prolog
10.01.19 01:06:34<stoopkid> so is stuff with computer algebra systems
10.01.19 01:07:21<stoopkid> unfortunately they all just get used in different ways making them appear to be different things when really not! (or at least, similar enough to be mostly combined in their core functionality and have the rest be recovered by simpler auxiliary tools)
10.01.19 01:07:53<dmiles> what it would do is genrate natural language conversations about random popular top 25 topic .. these became fake newsgroup websites (spiuders trust newgroup formats to give good results) .. so the thing made a series of conversations where people shared pictures and argued the merits of  pokeman's penis
10.01.19 01:08:40<stoopkid> the paradigm that seems to universally define 5th gen is constraints-based programming, or maybe more generally "telling the computer what you want and having it figure  out how to achieve it"
10.01.19 01:09:08<dmiles> (it even made the picutres legit with an aout text-to-giff maker)
10.01.19 01:10:25<stoopkid> declarative programming, logic programming, type theories, etc.. all fit the description
10.01.19 01:11:31<stoopkid> and i'd even say that after 5th generation it stops making as much sense to characterize the generations in terms of programming languages by rather more general "computing paradigms" (and in fact to maybe retroactively recategorize some the previous generations around that notion)
10.01.19 01:11:40<dmiles> OOP jsut is considered uteraly declarative in that sense though
10.01.19 01:12:53<dmiles> i mean to say that OOP is often to *me* considered to be the ultimate decarative ideal (to 4th gen)
10.01.19 01:14:08<stoopkid> i basically just see OOP as a sort of convenient attachment to procedural stuff, usually with a bastardized type system
10.01.19 01:14:18<stoopkid> at least looking at it as a whole paradigm
10.01.19 01:15:02<dmiles> well OOP is "about" heirarcial organization of code reuse and contracts 
10.01.19 01:15:13<dmiles> which happens only when peopel declare those things
10.01.19 01:16:00<dmiles> how we attach procedural stuff to that happens to
10.01.19 01:16:30<stoopkid> yea that hierarchical organization for code reuse and contracts is the bastardized type-system stuff
10.01.19 01:17:45<dmiles> what hasnet happened to much degree (sadly) is hierarchical organization for code reuse and contracts AND non proccedurual languages
10.01.19 01:18:27<dmiles> KL-ONE though is very much supposed to be that
10.01.19 01:18:37<stoopkid> ex. in my dreadbury mansion example, the problem is expressed essentially as one big class (i did rather poor OOP but hypothetically you could do it better and modularize and stuff), which you could make subclasses of which would inherit the structure, methods, etc..
10.01.19 01:19:39<dmiles> be great if Deabury was all a ton of holes
10.01.19 01:20:12<dmiles> Deadbury was very well typed
10.01.19 01:20:20<dmiles> Deadbury was very well typed holes
10.01.19 01:21:03<stoopkid> by holes you mean "something to be filled by a proof" ?
10.01.19 01:22:49<dmiles> well i was thinking of holes like "something to be filled by a proof"  .. but would make sense if there was a whole type system for deciding  how to tie differnt programs typesystems together 
10.01.19 01:23:12<stoopkid> i mean...
10.01.19 01:23:25<dmiles> teh results would make deadbury looked like ppsudeocode
10.01.19 01:23:43<stoopkid> you could use ex. Agda, Coq, etc..
10.01.19 01:23:53<stoopkid> you need one to actually be able to describe the others coherently
10.01.19 01:24:43<dmiles> you might be right about one needed to be capable of competely subsumming the others
10.01.19 01:25:01<stoopkid> we don't have a way to just mash them together without representing them all from one particular type-system, and there probably isn't really a way that we can actually deterministically control
10.01.19 01:26:28<dmiles> well at least when i program .. i pretend i am inventing a new programing language (as i said i write code as data+interpretor) i think of that interpreter to be like a type system
10.01.19 01:26:51<dmiles> well i mean i think of the contract at least as a typesystem
10.01.19 01:27:01<dmiles> well i mean i think of the contract that the data and interpretor have
10.01.19 01:27:39<dmiles> i am often not resuing these interpretors as much as i should
10.01.19 01:28:42<stoopkid> with the tools currently available for this you probably can't reuse your interpreters (or their features) as much as you should be able to
10.01.19 01:29:47<dmiles> so i have the data sharing going swimminbgly (that is i use existential interferce to transform data bweween my subsystems) using the hierachial ontology of the data... *still* i am not arranging my into a  special hierachial ontology the way i know i should be
10.01.19 01:30:56<dmiles> so i have the data sharing going swimminbgly (that is i use existential intefernce to transform data bweween my subsystems) (using the hierachial ontology of the data was lucky to be part of)... *still* i am not arranging my *interpretors* into a special hierachial system
10.01.19 01:31:12<stoopkid> i find that the majority of stuff actually doesn't really fit well into any particular hierarchical structure
10.01.19 01:32:27<dmiles> so my goal is arranging my *interpretors* into a special hierachial system (so they resue each others code) 
10.01.19 01:33:57<dmiles> when i do find place i should be doing it.. (such as 3 interpretors that need to do simlar things) i add a argument that i pass into a genralized version
10.01.19 01:34:22<dmiles> the gneralized version i assume might corispond top holes
10.01.19 01:34:33<dmiles> the gneralized version i assume might corispond wtih *holes*
10.01.19 01:36:03<dmiles> so for an everyday exmaple of this..
10.01.19 01:36:37<dmiles> you have a sorting algrythem you pass a  "this is i how you will see a list elment" "this is how you compare elements" "this is how you make a list when you have nothing but elements"
10.01.19 01:37:18<dmiles> and what is returned by that .. is a sorting algrythem compiled to handle your lists
10.01.19 01:38:26<dmiles> that system is a reusable as a set joiner
10.01.19 01:38:54<dmiles> (as long as sorting in this case means remoing duplicates)
10.01.19 01:38:59<dmiles> (as long as sorting in this case means removing duplicates)
10.01.19 01:40:13<dmiles> so for exmaple.. i write   join_sets(S1,S2,Out):-flatten([S1,S2],List),sort(List,Set).
10.01.19 01:40:22<dmiles> oh
10.01.19 01:41:09<dmiles> so for exmaple.. i write   pred_join_sets(Info,S1,S2,Out):-pred_flatten(Info,[S1,S2],List),pred_sort(Info, List,Set).
10.01.19 01:41:25<dmiles> pred_join_sets(Info,S1,S2,Out):-pred_flatten(Info,[S1,S2],List),pred_sort(Info, List,Out).
10.01.19 01:42:05<dmiles> 'Info' comes in form a a typesystem library
10.01.19 01:42:30<dmiles> 'Info' comes in as library of methods
10.01.19 01:43:11<dmiles> .
10.01.19 01:43:13<dmiles>  pred_join_sets(Info,S1,S2,Out):-pred_flatten(Info,[S1,S2],List),pred_sort(Info, List,Out).
10.01.19 01:43:16<dmiles> .
10.01.19 01:43:44<dmiles> so  pred_join_sets, pred_flatten, pred_sort  are full of holes 
10.01.19 01:44:09<dmiles> i pass Info there to describe how i want them filled
10.01.19 01:45:12<dmiles> btw i just supplied the complete sourcecode of pred_join_sets
10.01.19 01:46:15<dmiles> i point that out since "full of holes " is that cheap
10.01.19 01:48:21<dmiles> the details of the Hierachy is part of waht is passed as Info
10.01.19 01:52:02<dmiles> sorry an element in that hierachy is passed.. then the Hierachy is supposed to be used when the routine had not existing support
10.01.19 01:53:50<dmiles> so when for exmaple i might use "printf-to-string+write-string" in place of the fact i was missing "printf"
10.01.19 01:55:10<dmiles> the "hole" being that i am going to make visible some set of characters to the user
10.01.19 01:55:51<dmiles> proof =  i want a proof to that the program generated will acomplish that
10.01.19 01:56:52<dmiles> or     proof = the program generated will acomplish that
10.01.19 01:58:03<dmiles> pred_join_set btw is a proof 
10.01.19 01:58:31<dmiles> made up of   pred_flatten + pred_sort
10.01.19 01:58:45<dmiles> pred_flatten has a proof as well .. and so on
10.01.19 02:00:56<dmiles> this is a declarative system for how programs write themselves 
10.01.19 02:01:59<dmiles> i makes sense to provide as many thiungs heirarchially as possible
10.01.19 02:03:07<dmiles> it makes sense to provide as many things heirarchially as possible so they can generalize upwards and downwards that heirarchy.. also realize mistakes that show up when something heirachaly should be impossible
10.01.19 02:13:41<dmiles> i wrote a program that effectely does that here:  https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/marty_white/adv_log2eng.pl#L306-L337
10.01.19 02:15:17<dmiles> what that code does is consumes a series of programartic operations and rewrites then to constructs a new program based on overloads pased inthe valiable called Punct
10.01.19 02:18:50<dmiles> if the list of operations are [] it writes a program that simple prints nothing unless  Punct=[<nothing>="you see nothing"]
10.01.19 02:19:26<dmiles> in which case it constructs a program that prints "you see nothing"
10.01.19 02:21:29<dmiles> the "Obj" variable tells what sort of interpretor has to understand the created program
10.01.19 02:22:30<dmiles> this type is programing is admittedly very complicated :P
10.01.19 02:23:19<dmiles> but to try to accomplish the same task any more simply would have been 100x more lines of code i think
10.01.19 02:23:57<dmiles> as in *i* whould have to have written it all
10.01.19 02:25:04<dmiles> they had this problem they said in DwarfFortress.. which is why it is millions of lines of code
10.01.19 02:25:21<dmiles> (they hadnt come up with a solution)
10.01.19 02:26:55<dmiles> other than to write more code to handle more contingencies as they arose in the game
10.01.19 02:28:14<dmiles> as per https://www.pcgamer.com/how-cats-get-drunk-in-dwarf-fortress-and-why-its-creators-havent-figured-out-time-travel-yet/
10.01.19 02:31:32<dmiles> PrologMUD is in part is to make Dwarf Fortress in 1/1000th the lines of code
10.01.19 02:32:55<dmiles> Dwarf Fortress is in part to simulate all of human existence in a proceedural language
10.01.19 02:40:07<dmiles> code to write:  " we actually have it broken down into 2,600 little checkboxes, and we’ve done 42% of them"
10.01.19 02:41:16<dmiles> "Do we do law, property, status, customs, economics, boats? Which of those comes first? Because they influence each other so much, law influences economics, economics influences law, ... once we get to the point where it doesn’t really matter which things we do"
10.01.19 02:41:42<dmiles> "then we just do whatever we feel like."
10.01.19 02:42:02<dmiles> goal of PrologMUD is to not have to hire programmers to do that :P
10.01.19 02:43:13<dmiles> so intead i was to design a program and programming language to automaticaly do all that
10.01.19 02:43:43<dmiles> as much as possible
10.01.19 07:02:06<aindilis> dmiles: ping
10.01.19 08:34:41*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
10.01.19 08:34:47<dmiles> cyc: (+ 1 1)
10.01.19 08:46:19<aindilis> dmiles: any luck with 3T integration?
10.01.19 08:46:45<aindilis> I'm still under the weather so I've just been doing things with Sensor Network.
10.01.19 08:56:09<dmiles> oh heh i was cought in scrollback :P so i wondered what channels have been highlighting one of my 20 alert words :P
10.01.19 08:56:18<aindilis> heh
10.01.19 08:58:22<dmiles> still working on PrologSync
10.01.19 08:58:26<aindilis> cool
10.01.19 08:59:10<dmiles> oh but what took a ton of time was porting Yeb's KE text files from OpenCYC to RCYC
10.01.19 09:00:15<dmiles> and porting the Opencyc 0.7 java client code to RCYC
10.01.19 09:00:46<aindilis> well it's good it's finished
10.01.19 09:03:40<dmiles> http://c-73-190-111-74.hsd1.wa.comcast.net:3602/cgi-bin/cg?cb-c-ist&c336994
10.01.19 09:04:24<dmiles> well
10.01.19 09:04:31<dmiles> http://c-73-190-111-74.hsd1.wa.comcast.net:3602/cgi-bin/cg?cb-cf&c336993
10.01.19 09:06:45<dmiles> here is a Shankian memory episode...
10.01.19 09:06:53<dmiles> http://c-73-190-111-74.hsd1.wa.comcast.net:3602/cgi-bin/cg?cb-cf&c336794
10.01.19 09:07:22<dmiles> sorry meant..
10.01.19 09:07:27<dmiles> http://c-73-190-111-74.hsd1.wa.comcast.net:3602/cgi-bin/cg?cb-c-ist&c336794
10.01.19 09:07:49<dmiles> (All MT contents of that CDTestDataMt)
10.01.19 09:08:46<dmiles> that was "John gave Bill an Orange that was ingested"
10.01.19 09:10:01<aindilis> why are there so many assertions then?
10.01.19 09:10:17<dmiles> the neodavidsoinism
10.01.19 09:10:36<dmiles> that makes everything hang off events
10.01.19 09:11:38<dmiles> if you click CD-Bill
10.01.19 09:12:07<dmiles> you see two events the reciving and the eating
10.01.19 09:12:18<dmiles> [Remove Bookmark]  Individual : CD-Bill [+] 
                 <dmiles> on the term
                 <dmiles> Mt : CDTestDataMt
                 <dmiles> isa :	[Mon]Person 
                 <dmiles> Mt : CDTestDataMt
10.01.19 09:12:19<dmiles> [Def](actors 
                 <dmiles>     (SKF-0045014685) CD-Bill)
10.01.19 09:12:20<dmiles> Mt : CDTestDataMt
10.01.19 09:12:21<dmiles> [Def](performedBy 
                 <dmiles>     (SKF-8349895780) CD-Bill)
10.01.19 09:13:55<dmiles> on .. this page cyc deduces a transional event..
10.01.19 09:14:05<dmiles> http://c-73-190-111-74.hsd1.wa.comcast.net:3602/cgi-bin/cg?cb-cf&nart302018
10.01.19 09:15:34<dmiles> sorry transional "STATE" (not Event)
10.01.19 09:15:48<dmiles> which is this: http://c-73-190-111-74.hsd1.wa.comcast.net:3602/cgi-bin/cg?cb-cf&nart302019
10.01.19 09:15:56<aindilis> ah, I'll have to finish reading Schanks book
10.01.19 09:16:29<dmiles> Daydreamer tries to work according to Schanks CD
10.01.19 09:18:32<dmiles> one more link :)   http://c-73-190-111-74.hsd1.wa.comcast.net:3602/cgi-bin/cg?cb-c-gaf-arg&c337024&2
10.01.19 09:18:49<dmiles> DD Goals generally fit under these
10.01.19 09:23:40<aindilis> ty
10.01.19 09:23:50<aindilis> sorry was just finishing a bowl of cereal
10.01.19 09:28:20<aindilis> bbiab
10.01.19 09:28:38<dmiles> ttys
10.01.19 09:31:13*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
11.01.19 00:15:07<dmiles> ok i am seeing if i can make 3T run in UABCL
11.01.19 00:22:51<aindilis> yay!
11.01.19 01:09:23<dmiles> 3T is going to be our most ideal planner option anyways since it is in lisp
11.01.19 06:41:16<aindilis> dmiles: ping
11.01.19 07:22:18<aindilis> dmiles: ping
11.01.19 08:14:29<aindilis> dmiles: ping
11.01.19 10:37:49<aindilis> dmiles: ping
11.01.19 13:36:40*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
11.01.19 13:37:04*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
11.01.19 13:38:21*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
11.01.19 13:46:46*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
11.01.19 13:46:54<dmiles> cyc: (+ 1 1)
11.01.19 13:52:45*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
11.01.19 13:52:50<dmiles> cyc: (+ 1 1)
11.01.19 13:53:25*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
11.01.19 13:53:30<dmiles> cyc: (+ 1 1)
11.01.19 15:45:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dvggvlfsesubonno) left #logicmoo: Quit: Connection closed for inactivity
11.01.19 15:46:43*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
11.01.19 15:46:49<dmiles> cyc: (+ 1 1)
11.01.19 16:10:52*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xlmwxpymrzifvrjs, stoopkid: stoopkid)
11.01.19 16:10:57<dmiles> cyc: (+ 1 1)
11.01.19 18:37:51*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
11.01.19 21:26:56*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 252 seconds
#logicmoo> 12.01.19 00:13:40*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 7 months 18 days 4 hours 41 minutes 50 seconds ago
                 *** Names: editable-dog stoopkid yesbot PrologMUD dmiles aindilis cyc @ChanServ michalisko
                 *** End of /NAMES list.
12.01.19 00:13:45<dmiles> cyc: (+ 1 1)
12.01.19 04:26:07*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Quit: disconnect
12.01.19 04:26:30*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
12.01.19 04:26:37<dmiles> cyc: (+ 1 1)
12.01.19 05:56:56*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
12.01.19 05:57:01<dmiles> cyc: (+ 1 1)
12.01.19 07:02:36<aindilis> dmiles: ping
12.01.19 07:49:25<aindilis> dmiles: I was wondering if the LarKC_CL prolog bindings were working.  Also if you know the command to load Yeb's files.  Also, how 3T is coming?  and some more questions then if I can recall them.
12.01.19 07:54:24<aindilis> With the prolog bindings I could begin integrating WOPR
12.01.19 08:29:54<dmiles> so the prolog bindings work now.. but i need to polish a couple thing .. there is an issue that when a assertion is leading to 10,000+ dependant deductions the system stops for 10 seconds to show a stack overflow
12.01.19 08:30:31<dmiles> currently there are at least 3 of these assertions in the KB at start
12.01.19 08:31:04<aindilis> ah cool
12.01.19 08:31:08<aindilis> ty!
12.01.19 08:31:46<dmiles> i now have the confige file of init/jrel-releae-specific autoloading Yebs file
12.01.19 08:32:50<dmiles> there is a cycorp bug that eveidently only one KE file can be loaded using the stardard APi at once
12.01.19 08:32:51<aindilis> awesome
12.01.19 08:33:03<dmiles> so i had tro combine his files into 1
12.01.19 08:33:32<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/init/release-specific-init.lisp
12.01.19 08:34:00<aindilis> cool
12.01.19 08:35:10<aindilis> okay well I will go ahead and play around
12.01.19 08:35:22<aindilis> did you say there was a way to load it from SWIPL?  (LarKC_CL)?
12.01.19 08:36:01<aindilis> in which case I could go ahead and load Formalog first and have a real whopper there
12.01.19 08:36:15<aindilis> (not that it isn't already a real whopper)
12.01.19 08:36:45<dmiles> root@gitlab:/opt/CYC_JRTL_with_CommonLisp/platform# . set_classpath.sh
12.01.19 08:36:53<dmiles> root@gitlab:/opt/CYC_JRTL_with_CommonLisp/platform# swipl -l from_swipl.pl
12.01.19 08:37:03<aindilis> :)
12.01.19 08:37:09<aindilis> we are the champions my friend!
12.01.19 08:37:21<dmiles> i havent tested it in a few hours thogh
12.01.19 08:37:33<dmiles> hehe
12.01.19 08:37:48<dmiles> due ot making sure it Yebs stuff is working
12.01.19 08:37:49<aindilis> okay well I'll try to load it in a sec here
12.01.19 08:37:51<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/Desktop/opencyc-jsrc/org/opencyc/chat/ScriptChat.java 
12.01.19 08:37:52<aindilis> yeah
12.01.19 08:38:06<dmiles> this last link is Yeb and I old IRC bot
12.01.19 08:39:18<dmiles> well i wrote https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/Desktop/opencyc-jsrc/org/opencyc/chat/IrcChat.java  
12.01.19 08:39:22<dmiles> and then he extended it 
12.01.19 08:40:33<dmiles> so i been using it as an excuse to get the OpenCYC API working in our LarKC
12.01.19 08:40:54<aindilis> awesome, does that mean it will be backwards compatible for people who don't have RCYC?
12.01.19 08:41:06<dmiles> (i ahd to take a break from 3T after about 5 hours.. it looks like about a 30 hour project)
12.01.19 08:41:16<aindilis> ah wow
12.01.19 08:41:46<dmiles> well i can probably get it done in 15 hours.. but i know me.. i am prepetually slower than i think
12.01.19 08:42:04<aindilis> it's good to pad one's estimates
12.01.19 08:42:16<dmiles> like 20 years ago i'd ay 15 then have it done in 8
12.01.19 08:42:24<aindilis> heh
12.01.19 08:42:47<dmiles> like when i worked at Technolodge i got 10 years of code written in 1
12.01.19 08:43:06<aindilis> yeah, I used to be more proficient too
12.01.19 08:43:10<aindilis> *prolific
12.01.19 08:43:14<aindilis> sucks
12.01.19 08:43:29<aindilis> I think physical fitness is the key here
12.01.19 08:43:32<aindilis> has your fitness waned?
12.01.19 08:44:02<dmiles> for sure it has i am at least 90lbd heaeier
12.01.19 08:44:38<dmiles> btw if you just staRT with:   . set_classpath.sh ; ./run-cyc-java.sh
12.01.19 08:45:01<dmiles> you can: telnet localhost 4023  
12.01.19 08:45:04<aindilis> then what we really need is to put 1 hour of exercise into our busy schedule so we don't have 24 hours of being dead per day
12.01.19 08:45:07<dmiles> and that is a prolog repl
12.01.19 08:45:18<aindilis> meaning, that we could get more programming done
12.01.19 08:45:37<aindilis> I am struggling to get exercising but I think that I am going to join a dojo
12.01.19 08:45:47<dmiles> yes.. but that 1 hour is work 
12.01.19 08:45:54<aindilis> lol
                 <dmiles> but i think you are correct
12.01.19 08:46:09<aindilis> okay I'm going to try to bicycle for 5 mins today
12.01.19 08:46:40<dmiles> my problem is a drink one galon of chocolate milk every day
12.01.19 08:47:10<dmiles> i been  trying to cut back to 1/2 gallon!
12.01.19 08:47:12<aindilis> I also have a strong thirst
12.01.19 08:47:59<aindilis> https://www.youtube.com/watch?v=Pg_NtXFdu1s
12.01.19 08:50:49<dmiles> :) 
12.01.19 08:50:56<aindilis> :)
12.01.19 08:51:10<aindilis> did you get to the punchline?
12.01.19 08:52:00<aindilis> I drink energy drinks and lots of water and some diet drinks
12.01.19 08:52:11<aindilis> it's a real problem
12.01.19 08:52:33<dmiles> hah dies of theirst
12.01.19 08:52:38<aindilis> :)
12.01.19 08:53:35<dmiles> sol this link work for you?  http://logicmoo.org:3602/cgi-bin/cg?cb-inferred-gaf-arg-assertions&c78935&c78935&2&c128219
12.01.19 08:53:45<aindilis> yes
12.01.19 08:53:57<dmiles> ok good somehow my DNS fixed itself
12.01.19 08:54:11<aindilis> hrm, maybe I can load those other thinks
12.01.19 08:55:12<aindilis> *links, but no
12.01.19 08:55:23<aindilis> probably got different IDs
12.01.19 08:55:40<aindilis> okay sorry earlier I was chatting in two windows at once, but now I'm freed up
12.01.19 08:56:00<aindilis> so I will build the current source and try to load, bbiab
12.01.19 08:56:47<dmiles> ok awesome
12.01.19 08:58:51<dmiles> hah crap i guess i commented out (load-ke-text-file #$CycAdministrator "e2c/XP/xp.ke")
12.01.19 08:58:57<dmiles> in the last commit
12.01.19 08:59:06<aindilis> oh I'll just uncomment
12.01.19 08:59:22<dmiles> yep .. i been testing all sorts of things so things come and go every commit
12.01.19 08:59:36<dmiles> (yep to uncoomenting it)
12.01.19 09:30:11<aindilis> installed swi-prolog=7.7.25 and compiled
12.01.19 09:30:19<aindilis> now I have to ensure my logicmoo installation is correct
12.01.19 09:30:24<aindilis> this looks amazing though
12.01.19 09:41:28<aindilis> what is the current best practice for installing logicmoo?  : https://frdcsa.org/~andrewdo/dmiles/installation.txt
12.01.19 09:42:43<aindilis> dmiles:
12.01.19 09:42:52<aindilis> brb
12.01.19 09:56:43<dmiles> hrrm here is what i'd do..  mv /home/andrewdo/lib/swipl/pack  /home/andrewdo/lib/swipl/pack-saved
12.01.19 09:57:38<dmiles> start swipl and isntall these packs
12.01.19 09:57:59<dmiles> pack_install(logicmoo_utils).
12.01.19 09:58:05<dmiles> pack_install(dictoo).
12.01.19 09:58:16<dmiles> pack_install(pfc).
12.01.19 09:59:07<aindilis> kk
12.01.19 09:59:17<dmiles> me making a list in notepad
12.01.19 10:00:39<dmiles> aleph
                 <dmiles> amazon_api
                 <dmiles> delay
                 <dmiles> func
                 <dmiles> hello
12.01.19 10:00:40<dmiles> julian
                 <dmiles> instant_prolog_docs
12.01.19 10:00:41<dmiles> function_expansion
12.01.19 10:01:13<dmiles> list_util
12.01.19 10:01:25<dmiles> hold off on logicmoo_base for a few
12.01.19 10:01:35<dmiles> logtalk
12.01.19 10:02:02<dmiles> iif you havenet started yet i can just rtell you which ones to rmeove away
12.01.19 10:02:08<aindilis> hello gives a bunch of errors
12.01.19 10:03:17<aindilis> okay I've finished up to logtalk with exception of hello
12.01.19 10:04:03<aindilis> I just copied it
12.01.19 10:04:07<aindilis> ready
12.01.19 10:04:20<dmiles> regex
12.01.19 10:04:38<dmiles> tap
12.01.19 10:04:40<dmiles> typedef
12.01.19 10:04:49<dmiles> uri_qq
12.01.19 10:05:04<dmiles> oh oops you are ready with tehj simpler way as if we jsut started?
12.01.19 10:05:11<aindilis> no
12.01.19 10:05:16<aindilis> I am ready to finish
12.01.19 10:05:19<dmiles> ok i will continue
12.01.19 10:05:26<aindilis> this will be good reference
12.01.19 10:05:29<dmiles> wam_common_lisp
12.01.19 10:05:58<aindilis> l
12.01.19 10:05:59<aindilis> k
12.01.19 10:06:00<dmiles> ok that should do it
12.01.19 10:06:10<dmiles> oops sorry one more
12.01.19 10:06:26<dmiles> small_adventure_games
12.01.19 10:06:43<dmiles> oh and i guess:   eggdrop 
12.01.19 10:06:54<dmiles> sinc ei am about to include eggdrop in LARKC
12.01.19 10:07:20<dmiles> (eggdrop is the puppeteer of the PrologMUD irc bot)
12.01.19 10:07:36<aindilis> okay run from_swipl.pl?
12.01.19 10:07:42<dmiles> yes
12.01.19 10:07:55<aindilis>  source_sink `library(logicmoo_utils)' does not exist   
12.01.19 10:08:03<aindilis> source_sink `library(xlisting/xlisting_console)' does not exist  
12.01.19 10:08:05<aindilis> otherwise fine
12.01.19 10:08:38<dmiles> can you past the log?
12.01.19 10:08:41<dmiles> paste
12.01.19 10:08:53<dmiles> i need ot see whom is asking for those that way
12.01.19 10:08:55<aindilis> ERROR: /var/lib/myfrdcsa/sandbox/cyc-jrtl-with-commonlisp-20190112/cyc-jrtl-with-commonlisp-20190112/platform/from_swipl.pl:3:                                 
                 <aindilis>         source_sink `library(logicmoo_utils)' does not exist                                                                                                   
                 <aindilis> Warning: /var/lib/myfrdcsa/sandbox/cyc-jrtl-with-commonlisp-20190112/cyc-jrtl-with-commonlisp-20190112/platform/from_swipl.pl:3:                               
                 <aindilis>         Goal (directive) failed: user:use_module(library(logicmoo_utils))                                                                                      
12.01.19 10:08:59<aindilis> % dot_cfg:using_dot_type(core,user)
12.01.19 10:09:03<aindilis> ERROR: /home/andrewdo/lib/swipl/pack/logicmoo_utils/prolog/logicmoo/xlisting.pl:3:                                                                             
12.01.19 10:09:05<aindilis>         source_sink `library(xlisting/xlisting_console)' does not exist                                                                                        
12.01.19 10:09:08<aindilis> Warning: /home/andrewdo/lib/swipl/pack/logicmoo_utils/prolog/logicmoo/xlisting.pl:3:                                                                           
12.01.19 10:09:11<aindilis>         Goal (directive) failed: xlisting_lm:reexport(library(xlisting/xlisting_console))  
12.01.19 10:09:53<dmiles> thx finxing thos now
12.01.19 10:09:57<dmiles> fixingf
12.01.19 10:11:49<dmiles> pack_list_installed.
12.01.19 10:12:17<dmiles> ?- pack_list_installed.
12.01.19 10:12:46<aindilis> https://pastebin.com/xHsn1fkH
12.01.19 10:14:45<dmiles> damn you really did get it right .. i thiohjght for sure a 1.1.118 would sneak in
12.01.19 10:15:05<dmiles> i think i am going to need to see the home output liek the firsttime you ran from_swipl
12.01.19 10:15:11<dmiles> the whole output
12.01.19 10:15:21<dmiles> jsut like the first link you gave
12.01.19 10:16:57<aindilis> first time with these libs or with the original?
12.01.19 10:17:44<dmiles> with these
12.01.19 10:17:52<aindilis> this is the first time I ran it after building it:  oh okay one sec https://frdcsa.org/~andrewdo/dmiles/installation-first.txt
12.01.19 10:17:56<dmiles> i want to see where the prompot stops at.. etc
12.01.19 10:18:53<aindilis> https://frdcsa.org/~andrewdo/dmiles/installation-first-new.txt
12.01.19 10:20:00<aindilis> so it loads okay
12.01.19 10:20:17<aindilis> (although (cyc-repl) (all-term-assertions #$Dog) or (constant-apropos "Dog") fail)
12.01.19 10:20:24<dmiles> touch /home/andrewdo/.abclrc
12.01.19 10:20:55<aindilis> Listening for transport dt_socket at address: 5005
                 <aindilis> DEBUG: First SUBLFILE
                 <aindilis> Armed Bear Common Lisp 1.5.0-uabcl-dev (built Sat Jan 12 2019 09:19:25 EST)
                 <aindilis> Java 1.8.0_181 Oracle Corporation
12.01.19 10:20:59<aindilis> OpenJDK 64-Bit Server VM
12.01.19 10:21:02<aindilis> Low-level initialization completed in 0.499 seconds.
12.01.19 10:21:05<aindilis> Startup completed in 3.147 seconds.
12.01.19 10:21:08<aindilis> Type ":help" for a list of available commands.
12.01.19 10:21:11<aindilis> CL-USER(1): 
12.01.19 10:21:14<aindilis> Listening for transport dt_socket at address: 5005
12.01.19 10:21:17<aindilis> DEBUG: First SUBLFILE
12.01.19 10:21:21<aindilis> Armed Bear Common Lisp 1.5.0-uabcl-dev (built Sat Jan 12 2019 09:19:25 EST)
12.01.19 10:21:24<aindilis> Java 1.8.0_181 Oracle Corporation
12.01.19 10:21:27<aindilis> OpenJDK 64-Bit Server VM
12.01.19 10:21:30<aindilis> Low-level initialization completed in 0.499 seconds.
12.01.19 10:21:33<aindilis> Startup completed in 3.147 seconds.
12.01.19 10:21:36<aindilis> Type ":help" for a list of available commands.
12.01.19 10:21:40<aindilis> CL-USER(1): 
12.01.19 10:21:41<aindilis> srry seems to have pasted twice
12.01.19 10:21:51<aindilis> CYC(1): (all-term-assertions #$Dog)
12.01.19 10:21:54<aindilis> Error: Undefined reader macro #$.
12.01.19 10:21:57<aindilis> java.lang.Exception
12.01.19 10:21:58<dmiles> (cyc-init-server)
12.01.19 10:22:10<dmiles> oh hrrm
12.01.19 10:22:16<dmiles> i lost what the prompot was
12.01.19 10:22:27<aindilis> CL-USER(1):    <- ?
12.01.19 10:22:32<dmiles> since you said "CYC(1):"
12.01.19 10:22:49<dmiles> oh we'll get to the cyc runtlevel moementarily
12.01.19 10:23:00<dmiles> so the startup sequence from here is..
12.01.19 10:23:02<dmiles> (cyc-init-server)
12.01.19 10:23:28<aindilis> undefined
12.01.19 10:23:30<dmiles> that will start to load cyc jsut still end up at the wrong prompt.. but lets see if we can get there frist
12.01.19 10:24:16<dmiles> the prompt wasnt [1]CL-USER(1):  was it?
12.01.19 10:24:24<aindilis> yes
12.01.19 10:24:27<aindilis> well without [1]
12.01.19 10:24:33<dmiles> ok good
12.01.19 10:24:52<dmiles> (init-subl)
12.01.19 10:24:59<aindilis> T
12.01.19 10:25:09<dmiles> (init-cyc)
12.01.19 10:25:19<aindilis> .... 10% etc
12.01.19 10:25:24<dmiles> ok good
12.01.19 10:25:33<aindilis> CL-USER(10):
12.01.19 10:25:36<dmiles> (init-kb)
12.01.19 10:26:17<dmiles> this should be doing the loading of uniots now
12.01.19 10:26:23<aindilis> yeah
12.01.19 10:26:29<aindilis> U(110:
12.01.19 10:26:34<aindilis> U(11):
12.01.19 10:26:39<dmiles> (init-server)
12.01.19 10:27:18<dmiles> ;; hehe io bet about i jsut mispelled  (init-cyc-server)
12.01.19 10:27:37<aindilis> U(12):
12.01.19 10:27:44<dmiles> (cyc-repl)
12.01.19 10:28:03<aindilis> k should I try something? (all-isa #$Dog) or something?
12.01.19 10:28:04<dmiles> yay!
12.01.19 10:28:11<dmiles> it says what?
12.01.19 10:28:12<aindilis> awesome!
12.01.19 10:28:17<dmiles> CYC(1):  ?
12.01.19 10:28:21<aindilis> yeah
12.01.19 10:28:26<aindilis> :)
12.01.19 10:28:30<dmiles> ok yep safge to do all-isa 
12.01.19 10:28:38<aindilis> yeah it results in a good answer
12.01.19 10:28:52<dmiles> the KB shouild be webbrowable
12.01.19 10:28:53<aindilis> so how do we get this to load from from_swipl.pl ?
12.01.19 10:28:56<aindilis> kk
12.01.19 10:29:18<aindilis> yup
12.01.19 10:29:33<aindilis> it's fast too
12.01.19 10:31:04<dmiles> at https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/from_swipl.pl#L376
12.01.19 10:31:36<dmiles> switch that to uable
12.01.19 10:31:41<aindilis> kk
12.01.19 10:31:48<dmiles> erm uabclk insted of jabcl
12.01.19 10:31:50<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/from_swipl.pl#L348
12.01.19 10:31:56<dmiles> (the diffenrce)
12.01.19 10:32:16<dmiles> oh actually thogjuh
12.01.19 10:32:17<aindilis> cool
12.01.19 10:32:30<dmiles> call_jmain('org.armedbear.lisp.Main',['--prologsync,','--eval','(init-cyc-server)','--eval','(cyc-repl)']).
12.01.19 10:33:01<dmiles> i'd just cooment out the :- jabcl
12.01.19 10:33:16<dmiles> and add :- call_jmain('org.armedbear.lisp.Main',['--prologsync,','--eval','(init-cyc-server)','--eval','(cyc-repl)']).
12.01.19 10:33:39<aindilis> done
12.01.19 10:33:50<aindilis> okay so how do I call swipl predicates from CycL or CommonLisp
12.01.19 10:33:57<aindilis> *SubL
12.01.19 10:34:33<dmiles> prolog calls cycl but io may have commented out certaiul code that was segfaulting
12.01.19 10:34:53<dmiles> i'll have to see if i preventing it from laoding
12.01.19 10:35:07<dmiles> from the from_swipl
12.01.19 10:35:25<dmiles> i have 4 ways to start and host the syste,m.. so i have to vette everything 4-ways
12.01.19 10:36:03<dmiles> but ui am done vettign the Java Starts everyting
12.01.19 10:36:12<dmiles> now i';ll vett the prolog starts everything
12.01.19 10:36:29<aindilis> is there a way to get a prolog repl?
12.01.19 10:36:53<dmiles> in anohte rwuindpow see if you can telnet localhost 4023
12.01.19 10:37:32<dmiles> (whether or not the interal 4023 server starts is what i was worred about)
12.01.19 10:37:45<aindilis> telnet: Unable to connect to remote host: Connection refused
12.01.19 10:37:52<dmiles> the 4023 is a proog repl
12.01.19 10:37:58<aindilis> cool
12.01.19 10:38:25<dmiles> ok then .. i think we short start like we did bu tnot let cyc block the repl
12.01.19 10:38:30<dmiles> should 
12.01.19 10:38:39<aindilis> can I just call (quit)
12.01.19 10:38:50<dmiles> twice
12.01.19 10:38:56<dmiles> one to get out of cyc
12.01.19 10:39:00<dmiles> and one to get out of abcl
12.01.19 10:39:10<aindilis> okay I'm at command line
12.01.19 10:39:39<dmiles> find the line  startDmiles:- uabcl.
12.01.19 10:39:50<aindilis> k
12.01.19 10:40:20<dmiles> above it
                 <dmiles> startDmiles:- call_jmain('org.armedbear.lisp.Main',['--prologsync,','--eval','(init-cyc-server)','--eval','(cyc-repl)']),!.
12.01.19 10:40:39<aindilis> :- call_jmain... ?
12.01.19 10:40:53<dmiles> comment out :- your old call jamil
12.01.19 10:41:07<dmiles> comment out :- your old call_jmain tha tyou added
12.01.19 10:41:12<aindilis> k
12.01.19 10:41:24<dmiles> uncomment out  %:- thread_create(startDmiles,_,[detached(true),debug(false),alias(startDmiles)]).
12.01.19 10:41:34<aindilis> k
12.01.19 10:41:45<dmiles> shat shoudl do it
12.01.19 10:42:29<dmiles> swipl from_swipl
12.01.19 10:42:47<aindilis> almost done loading, then what?
12.01.19 10:43:14<dmiles> the fact it does star the 4023 server makes me think it didnt install callback either
12.01.19 10:43:28<dmiles> so well have to see once it start
12.01.19 10:43:48<dmiles> let me know when the ?- prompt is up
12.01.19 10:43:55<aindilis> will do
12.01.19 10:44:06<aindilis> k
12.01.19 10:44:09<dmiles> well will do stucff liek..  ?- listing(sync/3).
12.01.19 10:44:18<aindilis> try telneting?
12.01.19 10:44:26<dmiles> nope
12.01.19 10:44:36<aindilis> I'm at CYC(1):
12.01.19 10:44:42<dmiles> we going to find out if the register cyc methods intpo proloog ran
12.01.19 10:45:00<aindilis> there is not ?-
                 <dmiles> weirfd
12.01.19 10:45:19<dmiles> you cxommenteed out the old  jcall_mains ?
12.01.19 10:45:48<dmiles> ah .. paste your  from_swipl fuile for me
12.01.19 10:45:58<aindilis> startDmiles:- uabcl. 
12.01.19 10:46:01<aindilis> I didn't comment out that
12.01.19 10:46:06<aindilis> jabcl:- call_jmain('org.armedbear.lisp.Main',['--nocyc','--load','~/.abclrc']).                                                                                
                 <aindilis> uabcl:- call_jmain('org.armedbear.lisp.Main',['--prologsync,','--eval','(init-cyc-server)']).                                                                  
12.01.19 10:46:09<aindilis>                                                                                               or those
12.01.19 10:46:24<dmiles> oh ther4e was cuts at the end of soemthning
12.01.19 10:46:53<dmiles> startDmiles:- call_jmain('org.armedbear.lisp.Main',['--prologsync,','--eval','(init-cyc-server)','--eval','(cyc-repl)']),!.
12.01.19 10:46:54<aindilis> https://frdcsa.org/~andrewdo/dmiles/from_swipl.pl
12.01.19 10:47:28<aindilis> :- call_jmain('org.armedbear.lisp.Main',['--prologsync,','--eval','(init-cyc-server)','--eval','(cyc-repl)']),!.                                               
                 <aindilis> startDmiles:- uabcl.                                                                                                                                           
12.01.19 10:47:29<aindilis> startDmiles:- dwq_call(jpl_call('org.logicmoo.system.BeanShellCntrl',start_from_prolog,[],_O))
12.01.19 10:47:34<aindilis> that's probabily it
12.01.19 10:47:45<aindilis> it's not startDmiles :- call_jmain, just :- call_jmain
12.01.19 10:47:51<dmiles> ah yep :p
12.01.19 10:48:13<aindilis> rerun?
12.01.19 10:48:28<dmiles> yes
12.01.19 10:48:34<dmiles> that shoudl work now
12.01.19 10:48:50<aindilis> k cool, srry for the misunderstanding
12.01.19 10:49:24<dmiles> there are so many start up modes i have to use 
12.01.19 10:49:32<aindilis> :- getenv('DISPLAY',_)->true;setenv('DISPLAY','10.0.0.122:0.0').
12.01.19 10:49:35<dmiles> sometimes i need to land in common lisp
                 <aindilis> 'should I replace with my IP?
12.01.19 10:49:42<dmiles> oh yes.. good
12.01.19 10:49:55<aindilis> (okay I have started it already, but I'll change it for future use)
12.01.19 10:50:18<dmiles> ?- listing(sync/3).
12.01.19 10:50:34<aindilis> will do
12.01.19 10:50:43<dmiles> well onc eit stops tyring to blow your console away
12.01.19 10:51:09<aindilis> CYC(1): HTTP server listening on port 3602.  Connect via URL http://ai:3602/cgi-bin/cg?cb-start
                 <aindilis> SPARQL server started on port 3615.
                 <aindilis> Jetty server started on port 3603
                 <aindilis> Ready for services.
12.01.19 10:51:11<aindilis> listing(sync/3).
12.01.19 10:51:14<aindilis> ERROR: Undefined procedure: sync/3 (DWIM could not correct goal)                                                                                               
12.01.19 10:51:18<aindilis> ^  Call: (13) [system] call(prolog_listing:close_sources) ? 
12.01.19 10:51:23<dmiles> l
12.01.19 10:51:26<dmiles> l
12.01.19 10:51:30<dmiles> l
12.01.19 10:51:39<aindilis> ERROR: Undefined procedure: sync/3 (DWIM could not correct goal)                                                                                               
                 <aindilis> ^  Call: (13) [system] call(prolog_listing:close_sources) ? l
                 <aindilis> Error:     com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException: UNBOUND VALUE: CYC:L
                 <aindilis> java.lang.Exception
12.01.19 10:51:42<dmiles> (to leap your way past)
12.01.19 10:51:44<aindilis>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:105)
12.01.19 10:51:47<aindilis>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:279)
12.01.19 10:51:51<aindilis>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:253)
                 <aindilis>         at org.armedbear.lisp.Symbol.unboundError(Symbol.java:161)
12.01.19 10:51:57<aindilis> CYC(2): 
12.01.19 10:52:01<aindilis> I never got a ?-
                 <dmiles> ok right now thety  are fighting over whokm, is controloing stdin
12.01.19 10:52:18<aindilis> should I telnet in?
12.01.19 10:52:26<dmiles> yeha i am going to have to vet from_swipl 
12.01.19 10:52:35<aindilis> telnet: Unable to connect to remote host: Connection refused
12.01.19 10:52:37<dmiles> yes tell me if the telnet code wasnt disable
                 <aindilis> okay no worries
12.01.19 10:52:56<dmiles> well i tried to disable it a few hours ago.. i actualyl suceeded!
12.01.19 10:53:04<aindilis> :)
12.01.19 10:53:19<aindilis> This must be hard to juggle everything
12.01.19 10:53:23<aindilis> what I think I'll do is this
12.01.19 10:53:38<dmiles> but ok about 1/2 hour to an hour i should have cleaned up the startup sequence of from_swpl for all the new code
12.01.19 10:53:59<aindilis> once it is reasonably working (with CL/PL/SubL etc) I will make a release LarKC_CL-1.0a or something, and then I will build everything on that
12.01.19 10:54:05<dmiles> the startup sequnce from java at leat works  (and starts the telnet server)
12.01.19 10:54:13<aindilis> yeah
12.01.19 10:54:22<aindilis> and then you can make whatever changes, and I'll be insulated from them
12.01.19 10:54:35<aindilis> then when the need to upgrade exists, we'll make another version 1.0b orwhatever
12.01.19 10:54:37<aindilis> sound good?
12.01.19 10:54:45<aindilis> that way it will remain relatively stable on my end
12.01.19 10:54:49<dmiles> yes .. we'll do that
12.01.19 10:54:51<aindilis> so that I can build FLP into it
                 <aindilis> kk
12.01.19 10:55:24<aindilis> okay good luck!  I need a little break
12.01.19 10:55:31<aindilis> right arm is hurting
12.01.19 10:56:09<dmiles> swipl is slightly crippled when starting from java.. so glad you dont mind that we start from swipl
12.01.19 10:56:17<aindilis> no I need to
12.01.19 10:56:24<aindilis> cause I'mma start SWIPL from Perl :)
12.01.19 10:56:59<aindilis> lucky
12.01.19 10:57:28<dmiles> yay!
12.01.19 10:57:34<aindilis> :)!
12.01.19 10:58:20<aindilis> bbiab
12.01.19 10:58:23<aindilis> TY!!!
12.01.19 11:05:29<dmiles> oh btw
12.01.19 11:05:33<dmiles> when you get a chance
12.01.19 11:05:50<dmiles> jsut start swipl  (no comnad argS)
12.01.19 11:06:00<dmiles> and   ?- use_module(library(logicmoo_utils)).
12.01.19 11:27:19<aindilis> ?- use_module(library(logicmoo_utils)).
12.01.19 11:27:20<aindilis> ERROR: source_sink `library(logicmoo_utils)' does not exist  
12.01.19 11:29:20<dmiles> root@gitlab:/opt/CYC_JRTL_with_CommonLisp/platform# ls ~/lib/swipl/pack/logicmoo_utils/prolog/
                 <dmiles> debuggery  file_scope.pl  hook_database.pl  INDEX.pl  logicmoo  logicmoo_common.pl  logicmoo_startup.pl  logicmoo_utils_all.pl  must_sanity.pl  xlisting
                 <dmiles> root@gitlab:/opt/CYC_JRTL_with_CommonLisp/platform#
12.01.19 11:29:35<dmiles> same files for you?
12.01.19 11:30:08<dmiles> oh
12.01.19 11:30:48<dmiles>    pack_install(logicmoo_base).
12.01.19 11:31:44<dmiles> still the xlisting thing makes no sense
12.01.19 11:31:54<dmiles> xlisting error you getting on load
12.01.19 11:59:44<aindilis> srry
12.01.19 12:00:13<aindilis> debuggery  file_scope.pl  hook_database.pl  INDEX.pl  logicmoo  logicmoo_common.pl  logicmoo_startup.pl  logicmoo_utils_all.pl  must_sanity.pl  xlisting
12.01.19 12:02:23<dmiles> ls -l  ~/lib/swipl/pack/logicmoo_utils/prolog/
12.01.19 12:02:39<dmiles> is the data newest on INDEX.pl ?
12.01.19 12:02:46<dmiles> date*
12.01.19 12:02:51<aindilis> no all jan 12 09;58
12.01.19 12:02:59<dmiles> same time as the rest?
12.01.19 12:03:02<aindilis> yeah
12.01.19 12:04:01<dmiles>  rm -f ~/lib/swipl/pack/logicmoo_utils/prolog/INDEX.pl
12.01.19 12:04:08<dmiles> i am making sur ei dont commit it anymore :P
12.01.19 12:05:01<dmiles> ok well once you  pack_install(logicmoo_base). 
12.01.19 12:05:07<aindilis> yes done
12.01.19 12:05:15<dmiles> jsut want you to confirm the first error goes away
12.01.19 12:05:51<dmiles> also let me know if the error about xlisting disapears or not
12.01.19 12:05:56<dmiles> (it is strange)
12.01.19 12:06:06<aindilis> first error went away, xlisting still there
12.01.19 12:06:49<dmiles> ok well the xlisting is almost i am goiugn to comment it out anyways
12.01.19 12:07:13<dmiles> oh xlisting is not even in that file
12.01.19 12:59:38*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
12.01.19 12:59:43<dmiles> cyc: (+ 1 1)
12.01.19 13:27:41<dmiles> here btw is what i meant by all the differnt lauching modes !  https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/USAGE-ABCLC.md
12.01.19 13:35:22<dmiles> bleh i need more swithces.. like for wither or not we load Yeps code?  
12.01.19 13:35:57<dmiles> sorry Yeb's IRC nick was yepster
12.01.19 13:38:23*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 245 seconds
12.01.19 13:40:53*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
12.01.19 13:40:59<dmiles> cyc: (+ 1 1)
12.01.19 13:57:14<aindilis> looks good
12.01.19 14:44:43<dmiles> oh btw Type Inference Rules for CycL page 34 of https://www.csee.umbc.edu/courses/771/papers/flogic.pdf 
12.01.19 14:46:37<dmiles> when i was hired to reverse engineer and clone cyc.. the main guy that wrote this paper was paid ot reverse engineer cyc as well
12.01.19 14:46:49<dmiles> Michael Kifer
12.01.19 14:46:57<aindilis> ah interesting
12.01.19 14:46:59<dmiles> he calls it Flora
12.01.19 14:47:11<dmiles> called it Flora back then.. now iots Flora2
12.01.19 14:47:47<dmiles> in other words this wont say CYC .. it is his cycone 
12.01.19 14:48:00<dmiles> cyclone
12.01.19 14:49:02<aindilis> coolbeans, I have to bbiab
12.01.19 14:49:15<dmiles> this puts a finger way i dont appreciate logtalk as much as i could
12.01.19 14:49:34<dmiles> logtalk should be about allowing programing with f-logic
12.01.19 14:49:57<dmiles> well *could* have been that
12.01.19 14:51:34<dmiles> the more i learn to program in logtalk, the more i am disapointed its not an f-logic system
12.01.19 14:53:28<dmiles> F-Logic: We propose a novel formalism called Frame Logic abbr Flogic that accounts in a clean and declarative fashion for most of the structural aspects of objectoriented and framebased languages.  These features include object identity complex objects inheritance polymorphic types query methods encapsulation and others In a sense
12.01.19 14:54:00<dmiles> Flogic has a modeltheoretic semantics and a sound and complete resolutionbased proof theory A small number of fundamental concepts that come from objectoriented programming have direct representation in Flogic   Flogic stands in the same relationship to the object oriented paradigm as classical predicate calculus stands to relational programming 
12.01.19 14:55:35<dmiles> whenever i program in a OO based language i am dispointed its not F-logic in the same way as logtalk inst
12.01.19 14:56:35<dmiles> what blows my mind utterly and completely is that agda is not f-logic
12.01.19 14:58:00<dmiles> wanting agda to be f-logic is probably only 99% of everyone
12.01.19 14:59:31<dmiles> well i mean everyone wants it to be but no one knows if f-logic programming could even exist in this century
12.01.19 15:06:20<dmiles> resuable code ===== non-monotonic type theory
12.01.19 15:13:02<dmiles> besides michael kifers paper i did find one other paper http://virthost.vub.ac.be/lnaweb/ojs/index.php/LogiqueEtAnalyse/article/viewFile/1840/1622
12.01.19 15:22:06<dmiles> Guarded dependent type theory well specifically Clocked Type Theory (CloTT) is the closest thing type theorists have
12.01.19 15:22:08*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 245 seconds
12.01.19 15:25:53<dmiles> though it seems CloTT is more a defense mechanism than a system to generate reusable programs
12.01.19 16:02:40*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
12.01.19 16:02:45<dmiles> cyc: (+ 1 1)
12.01.19 17:28:03*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
12.01.19 18:24:30*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Quit: So long, and thanks for all the fish! 2.3 Weechat is best Weechat
12.01.19 18:39:39*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
12.01.19 18:39:45<dmiles> cyc: (+ 1 1)
13.01.19 03:22:42*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
13.01.19 03:22:47<dmiles> cyc: (+ 1 1)
13.01.19 03:39:01*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
13.01.19 12:48:28<aindilis> dmiles: despite my hand killing me I couldn't resist to integrate LarKC/FLP.  So it's working (I still need to automate 2 steps, disabling original CYC + loading FLP source once LarKC is loaded).  However, I cannot seem to execute commands from prolog.  For instance, cl_eval/2 doesn't exist.
13.01.19 12:52:16<aindilis> *execute CYC or CL commands
13.01.19 12:53:09* dmiles stops ranting on #ai and start to slowly comming the version that prolkog can call CYC/CL
13.01.19 12:53:17<dmiles> comming/commiting
13.01.19 12:53:20<aindilis> ah k
13.01.19 12:53:21<aindilis> hehe
13.01.19 12:53:33<aindilis> well you know feel free to "rant", I think we should edit into a book
13.01.19 12:53:41<aindilis> *edit your "rants"
13.01.19 12:54:37<dmiles> yes
                 <aindilis> incidentally, I know 3T integration is a beast, but have you had any luck with it so far?
13.01.19 12:54:49<dmiles> i still having restarted sinc eht efirst 5 hours
13.01.19 12:55:01<aindilis> ah k
13.01.19 12:55:10<aindilis> well you know M is an author
13.01.19 12:55:16<aindilis> maybe she would take to editing your rants?
13.01.19 12:55:19<aindilis> "rants"
13.01.19 12:55:21<dmiles> i am focusing on make sure that prolog can use the CYC KB as if its its own perosnal KB
13.01.19 12:55:28<aindilis> yeah cool
13.01.19 12:55:33<aindilis> this is really awesome
13.01.19 12:55:42<aindilis> it's neat to see all those things running together
13.01.19 12:55:54<aindilis> plus I won't have to rely on my crappy allTermAssertions implementaiton
13.01.19 12:56:00<dmiles> by as we speak i am booting up the system so i can demo in PrologMUD
13.01.19 12:56:07<dmiles> by/btw
13.01.19 12:56:08<aindilis> k
13.01.19 12:56:10<aindilis> cool
13.01.19 12:56:27<aindilis> we'll need to keep things modular so we can do this kind of loading
13.01.19 12:56:34<dmiles> everytime i make a code edit fix its  afix minute wait to see it workign :P
13.01.19 12:56:36<aindilis> I'd like to also load prologud fwiw
13.01.19 12:56:45<aindilis> yeah
13.01.19 12:56:49<dmiles> wich is btw exactl why i disable certian things 
13.01.19 12:56:50<aindilis> this is really a problem
13.01.19 12:57:02<aindilis> the loading time is horrific
13.01.19 12:57:18<aindilis> I think we need to develop a style where we make as much progress as possible between reloads
13.01.19 12:57:24<aindilis> maybe more introspection
13.01.19 12:57:32<aindilis> and tools for cleaning things out
13.01.19 12:57:35<aindilis> like namespaces etc
13.01.19 12:57:53<dmiles> i was thinking aobut seeing if there was a forward and backward playing JVM
13.01.19 12:58:00<dmiles> that is that i can snapshot it
13.01.19 12:58:04<aindilis> there is
13.01.19 12:58:08<aindilis> let me look it up
13.01.19 12:58:24<dmiles> i suspected there would be ! 
13.01.19 12:59:18<aindilis> I cannot remember or find it I will ask in #java
13.01.19 12:59:50<dmiles> oh hell i just got the 5 minutes done and now rtemember i didnt fix what i meant ot whne ui tore it down an outr ago
13.01.19 13:03:23<aindilis> is this it? https://harmony.apache.org/subcomponents/drlvm/JVMTI-PopFrame.html
13.01.19 13:04:24<aindilis> well no one is answering so far, Imma stop looking
13.01.19 13:07:16<dmiles> what i need relaly is a jvm that can be paused and stored to disk
13.01.19 13:07:55<aindilis> http://drops.dagstuhl.de/opus/volltexte/2018/9222/pdf/LIPIcs-ECOOP-2018-17.pdf
13.01.19 13:08:10<dmiles> so i can start out with the state after the first 5 minutes of loading 
13.01.19 13:08:28<aindilis> yeah that would be great
13.01.19 13:08:39<dmiles> oh i know this exists
13.01.19 13:08:47<dmiles> i can even do with with vmware
13.01.19 13:09:09<dmiles> but i need something lighter that has a couple buttons
13.01.19 13:09:27<dmiles> pause and restore of my VM isntance take 45 minutes
13.01.19 13:09:42<aindilis> wow
13.01.19 13:11:08<dmiles> "There was a JSR 323 proposed for this a while back but it was rejected. You can find some links in those articles about the research behind this and what it would take. It was mostly rejected as an idea that was too immature."
13.01.19 13:11:15<dmiles> :)
13.01.19 13:12:11<dmiles> oops actually thoujgh i need to for my current deugging today not do the JVM buit some C codes storage of the JVM state
13.01.19 13:12:31<dmiles> ?- threads.
13.01.19 13:12:51<dmiles> [1m% maybe_call(get2react([pubm,"dmiles","dmiles@c-73-190-111-74.hsd1.wa.comcast.net","*","#logicmoo","?- threads."])).
                 <dmiles> % irc_receive("dmiles","dmiles@c-73-190-111-74.hsd1.wa.comcast.net","*","#logicmoo",say("?- threads.")).
13.01.19 13:12:52<dmiles> SWI-Prolog [thread 8 (egg_go) at Sun Jan 13 18:12:31 2019]: received fatal signal 11 (segv)
13.01.19 13:12:53<dmiles> C-stack trace labeled "crash":
                 <dmiles>   [0] save_backtrace() at /root/swipl-devel/src/os/pl-cstack.c:341 [0x7fb0f1ef8195]
                 <dmiles>   [1] print_c_backtrace() at /root/swipl-devel/src/os/pl-cstack.c:886 [0x7fb0f1ef836e]
13.01.19 13:13:04<dmiles> after all that :P
13.01.19 13:13:17<dmiles> that is an easy fix thouh
13.01.19 13:13:37<dmiles> but we wont know for annother 10 minutes
13.01.19 13:13:48<aindilis> lol
13.01.19 13:13:59<aindilis> I used to get in trouble at work cause I'd play guitar while it was building
13.01.19 13:14:09<dmiles> thats why i IRC and rant
13.01.19 13:14:15<aindilis> ah hehe
13.01.19 13:14:46<dmiles> otherwise i start editing the code and have to start the rebuild every 30 secends
13.01.19 13:15:41<dmiles> that is that i am coding stuff that i will never ever catch up to testing it
13.01.19 13:16:31<dmiles> like all the code we havbe ben talking aobut last couple weeks :O
13.01.19 13:16:54<dmiles> i am finnally going back thru and buggfixing
13.01.19 13:17:11<dmiles> the code i wrote 4 yearsa ago
13.01.19 13:19:11<aindilis> oh cool
13.01.19 13:19:19<aindilis> it seems to work pretty well, save for the calling issue
13.01.19 13:21:17<aindilis> I'm impressed that you got this to build
13.01.19 13:21:28<aindilis> not that I doubt you could, but it's still labrynthian
13.01.19 13:22:17<aindilis> okay I think i fixed the CYC startup and FLP not startup bugs
13.01.19 13:22:31<dmiles> wqell i need a whole ,team of lackies to ensure my code fountain is building and things
13.01.19 13:22:43<aindilis> yea
13.01.19 13:22:45<aindilis> *yeah
                 <dmiles> that settign up contimues uinegration etc
13.01.19 13:22:54<aindilis> well should I set up continuous integration for us?
13.01.19 13:23:05<aindilis> I need to write tests for my systems
13.01.19 13:23:11<aindilis> Jenkins?
13.01.19 13:23:14<dmiles> yes rthat would be awesome
13.01.19 13:23:20<aindilis> I think I made a VM
13.01.19 13:23:23<dmiles> yes jenkins is great 
13.01.19 13:23:25<aindilis> kk
13.01.19 13:23:34<dmiles> with a commit hooks on github
13.01.19 13:23:43<aindilis> ah okay I'll research taht
13.01.19 13:23:59<aindilis> I'm make a VM so you can have a copy
13.01.19 13:24:14<aindilis> vmdk okay?
13.01.19 13:24:17<dmiles> everyime i say i am goign to research installiong Jenkins i get hung up on my bakclog of 4 years of code
13.01.19 13:24:27<aindilis> yeah me too
13.01.19 13:25:02<dmiles>  vmdk is fine yeah
13.01.19 13:25:30<dmiles> though as long as if i commit it can reprioortieze testign my new commit before my last one
13.01.19 13:26:06<dmiles> as i i write code e way faasdter than it can ever been tested
13.01.19 13:26:20<aindilis> startDmiles:- call_jmain('org.armedbear.lisp.Main',['--prologsync,','--eval','(init-cyc-server)']),                                                                                                                                                                                                                            
                 <aindilis>               ensure_loaded('/var/lib/myfrdcsa/codebases/minor/free-life-planner/free_life_planner.pl'),
                 <aindilis>               !.
13.01.19 13:26:33<aindilis> how to I tell it to load that?
13.01.19 13:26:41<aindilis> since obviously call_jmain doesn't return
13.01.19 13:26:57<aindilis> or does it and I just messed up somehow
13.01.19 13:27:03<dmiles> it need to be aafter the java code is finished so last night i set up a notification system
13.01.19 13:27:15<aindilis> ah cool
13.01.19 13:27:20<dmiles> to tell it when to start loading the next phase 
13.01.19 13:27:47<dmiles> though right now i doing it by eyeball
13.01.19 13:27:56<aindilis> okay sure I'll do it that way for now
13.01.19 13:28:08<dmiles> since it will take me too long to test the notmification code :(
13.01.19 13:28:28<aindilis> well since I got this to load I can take it easy now
13.01.19 13:28:38<aindilis> I did notice however that FLP + PrologMUD doesn'tw ork
13.01.19 13:28:42<aindilis> too much conflicts
13.01.19 13:28:56<dmiles> actualyl jsut saying that .. now making me hook up the notify code since we both are needing it 
13.01.19 13:29:05<dmiles> oh i can fix that
13.01.19 13:29:09<aindilis> okay cool
13.01.19 13:29:24<aindilis> I'll need to install PrologMUD, but loading LarKC/FLP/PrologMUD will be glorius
13.01.19 13:29:27<dmiles> i jsut need to have a chance to reproduce the problem
13.01.19 13:29:28<aindilis> *glorious
13.01.19 13:29:43<aindilis> ah hrm, well I'm still trying to release FLP
13.01.19 13:29:56<aindilis> I can set it up on my machine and tell you the problem, or you could log in a screenshare or somethig
13.01.19 13:30:02<aindilis> you know you have access to my main machine
13.01.19 13:30:16<aindilis> you should log in a change your password if you haven't already
13.01.19 13:30:38<dmiles> i edit over Samba thoujgh
13.01.19 13:30:52<dmiles> oh but you coudl set it up here!
13.01.19 13:31:00<dmiles> so that i can test
13.01.19 13:31:11<aindilis> set up FLP on your machine?
13.01.19 13:31:15<dmiles> yes
13.01.19 13:31:23<aindilis> hrm, what about a VM?
13.01.19 13:31:29<aindilis> that's a little more doable
13.01.19 13:31:35<aindilis> could you run the VM there?
13.01.19 13:31:36<dmiles> yeah i'll give you root and a freesh VM
13.01.19 13:31:45<aindilis> okay well what if I made it locally
13.01.19 13:31:54<aindilis> and then you downloaded the VMDK
13.01.19 13:31:59<dmiles> oh yes avutlauly make it locally then i can download it
13.01.19 13:32:03<aindilis> okay
13.01.19 13:32:05<dmiles> yep
13.01.19 13:32:09<aindilis> I've been planning to do this for a while
13.01.19 13:32:16<aindilis> I sort of need to finish the deidentification stuff
13.01.19 13:32:26<aindilis> it's been on hold while I work on the three things
13.01.19 13:32:35<aindilis> backup, sensors, and larkc
13.01.19 13:32:43<aindilis> but I will add jenkins and vm back to the top
13.01.19 13:33:37<aindilis> I will start work on the VM later today
13.01.19 13:33:46<aindilis> now that I got this working
13.01.19 13:33:53<aindilis> hand feels sort of alright
13.01.19 13:34:27<aindilis> 2019-01-13 13:33:37 <aindilis> I will start work on the VM later today <- pretty cool timestamp
13.01.19 13:34:53<aindilis> okay I have to write the deidenfitication stuff first
13.01.19 13:35:03<aindilis> I'll get on it
13.01.19 13:35:09<aindilis> ttys!
13.01.19 13:35:21<dmiles> ok yes
13.01.19 13:38:39<dmiles> opt/logicmoo_workspace/packs_sys/logicmoo_base/prolog/logicmoo/pfc/user_type_barriers.pfc.pl::- set_prolog_flag(gc,false).
                 <dmiles> opt/logicmoo_workspace/packs_sys/logicmoo_base/prolog/logicmoo/common_logic/common_logic_sanity.pl::- set_prolog_flag(gc,false).
13.01.19 13:38:40<dmiles> opt/logicmoo_workspace/packs_sys/logicmoo_base/prolog/logicmoo_lib.pl::- set_prolog_flag(gc,false).
13.01.19 13:39:03<dmiles> i need someone to write a commit hook to rejerct such code :P
13.01.19 13:42:43<dmiles> gc constatantly interfears with my debuggign
13.01.19 14:59:47<dmiles> ?- threads/
                 <yesbot> Syntax error: Unbalanced operator
13.01.19 14:59:48<yesbot> threads/
                 <yesbot> ** here **
                 <yesbot>  . 
                 <yesbot> 2 + 2 = 5.
13.01.19 14:59:50<dmiles> ?- threads.
13.01.19 15:04:30<dmiles> ?- threads.
13.01.19 15:06:14<dmiles> ?- true.
13.01.19 15:17:55<dmiles> ?- true.
13.01.19 15:17:56<PrologMUD> dmiles: %  det(Yes,1)
13.01.19 15:18:09<dmiles> ?- threads.
13.01.19 15:18:10<PrologMUD> dmiles: %        Thread Status       Time    Stack use    allocated
                 <PrologMUD> dmiles: % ---------------------------------------------------------
                 <PrologMUD> dmiles: %          main running     3.211       91,960      374,624
                 <PrologMUD> dmiles: %            gc running     0.006          744      112,480
                 <PrologMUD> dmiles: %        egg_go running     0.008       52,304      112,480
13.01.19 15:18:11<PrologMUD> dmiles: %       bg_abcl running     3.972        2,744      112,480
                 <PrologMUD> dmiles: % prolog_server running     0.000          816      112,480
                 <PrologMUD> dmiles: %  det(Yes,1)
13.01.19 15:20:29<dmiles> ?- cl_eval_string("(+ 1 1)")
                 <yesbot> procedure `prolog_eval:cl_eval_string(A)' does not exist
13.01.19 15:20:30<yesbot> lol.
13.01.19 15:20:38<dmiles> ?- cl_eval_string("(+ 1 1)").
13.01.19 15:20:43<PrologMUD> dmiles: % DWQ: success:user:call_crtl(call_ctrl,[{cl_eval_string("(+ 1 1)")}],<jref>(0x7f81844c08a0))
                 <PrologMUD> dmiles: % LO: 2 ;; SubLFixnum
13.01.19 15:20:44<PrologMUD> dmiles: %  det(Yes,1)
13.01.19 15:21:22<aindilis> lookin good
13.01.19 15:23:11<dmiles> ?- cl_eval_string("*PACKAGE*
                 <yesbot> Syntax error: End of file in quoted string
                 <yesbot> ** here **
                 <yesbot> c
                 <yesbot> Say what?
13.01.19 15:23:18<dmiles> ?- cl_eval_string("*PACKAGE*").
                 <PrologMUD> dmiles: % DWQ: success:user:call_crtl(call_ctrl,[{cl_eval_string("*PACKAGE*")}],<jref>(0x7f80e82961f0))
13.01.19 15:23:19<PrologMUD> dmiles: % LO: #<PACKAGE COMMON-LISP-USER> ;; Package
                 <PrologMUD> dmiles: %  det(Yes,1)
13.01.19 15:24:52<dmiles> ?- cl_eval_string("*PACKAGE*",O).
                 <PrologMUD> dmiles: % DWQ: success:user:call_crtl(call_ctrl,[{cl_eval_string("*PACKAGE*")}],<jref>(0x7f80e82961f0))
                 <PrologMUD> dmiles: % O=<jref>(0x7f80e82961f0)
                 <PrologMUD> dmiles: %  det(Yes,1)
13.01.19 15:25:25<dmiles> ?- cl_eval_string("*PACKAGE*",O), OO= O.toString
                 <yesbot> procedure `prolog_eval:cl_eval_string(A,B)' does not exist
                 <yesbot> Say what?
13.01.19 15:25:28<dmiles> ?- cl_eval_string("*PACKAGE*",O), OO= O.toString.
                 <PrologMUD> dmiles: % DWQ: success:user:call_crtl(call_ctrl,[{cl_eval_string("*PACKAGE*")}],<jref>(0x7f80e82961f0))
13.01.19 15:27:54<dmiles> it was all so stupid hack .. i fixed the code by settign env vara
13.01.19 15:28:01<dmiles> export _JAVA_SR_SIGNUM=20 
13.01.19 15:28:16<aindilis> that's all I have to do?
13.01.19 15:28:33<dmiles> well you still nneed signalling code
13.01.19 15:29:00<dmiles> and i ahve to find a new name for cl_eval/2
13.01.19 15:29:21<dmiles> since if conflicts with cyc:eval/2
13.01.19 15:29:52<dmiles> well i have to test whateever i reanem to
13.01.19 15:30:04<dmiles> and i am still wating for my last test to complerte :(
13.01.19 15:30:08<aindilis> I need to get back to Christopher of 3T fame
13.01.19 15:30:23<aindilis> I didn't email him since I was sick/incoherent
13.01.19 15:30:58<dmiles> with that all i gotta do is port it to ABCL
13.01.19 15:31:16<dmiles> the jlinker isnt a problem for me at all
13.01.19 15:31:31<aindilis> cool!  and also... I was wondering, is the thing that makes the really fast queries (i'm guessing having the store be in Prolog) working at all? or is that roadmap?
13.01.19 15:31:50<dmiles> well Lisp on the JVM is faster than Lisp in ACL
13.01.19 15:31:58<dmiles> which is a mind blower
13.01.19 15:32:03<aindilis> hehe
13.01.19 15:32:11<dmiles> well not ABCL lisp .. but my Lisp
13.01.19 15:32:46<aindilis> so I'll get a good speed with multiple calls to cl_eval/2's new name/
13.01.19 15:32:50<aindilis> *?
13.01.19 15:33:09<dmiles> in this case it will at best get adequate speed
13.01.19 15:33:20<dmiles> sinc eit passes thru JNI with two thunks
13.01.19 15:33:26<aindilis> also is there a way to do cl_eval([+,1,1],X).  okay good enough for me!
13.01.19 15:33:59<dmiles> oh yes it is faster to not use strings in the case there
13.01.19 15:34:14<aindilis> I'm thinking with proper Isa and Mt support it will speed up a lot of development
13.01.19 15:34:17<aindilis> *of FLP
13.01.19 15:34:53<dmiles> bit yes cl_eval([+,1,1],X) will work fine
13.01.19 15:34:55<aindilis> plz let me know when it's committed
13.01.19 15:35:20<aindilis> so to release VM I need to do backup
13.01.19 15:35:30<aindilis> and I'll have to start backup a different day, hand too weak
13.01.19 15:35:52<aindilis> I cannot build the VM on the disk that has everything on it that hasn't really been backed up
13.01.19 15:35:58<aindilis> until I back it up
13.01.19 15:36:02<dmiles> handing JRefs objects that are forint to prolog yuo have to use soem JPL
13.01.19 15:36:18<dmiles> like for exmaple oif the return was a pacakge
13.01.19 15:36:21<aindilis> ah
13.01.19 15:40:55<dmiles> ?- cyc_eval_progn([+,1,1],X).
13.01.19 15:41:28<dmiles> ?- cyc_eval([+,1,1],X).
13.01.19 15:41:43<dmiles> ?- user:cyc_eval([+,1,1],X).
13.01.19 16:24:41<dmiles> ?- cyc_eval([+,1,1],X).
13.01.19 16:24:48<dmiles> ?- clc_cyc_eval([+,1,1],X).
13.01.19 16:25:11<dmiles> ?- cl_cyc_eval([+,1,1],X).
13.01.19 16:25:52<dmiles> ?- cl_cyc_eval([+,1,1],X).
13.01.19 16:32:27<dmiles> ?- cl_cyc_eval([+,1,1],X).
13.01.19 18:39:01<stoopkid> in ##AGI:
13.01.19 18:39:18<stoopkid> freeman42x: does anyone know of what tests could tell us whether an agent we implemented is any closer to becoming an AGI?
13.01.19 18:39:55<stoopkid> tomzx: have the test attempt to shut the AGI program. If it's AGI, it'll attempt to protect itself from termination.
13.01.19 18:40:01<stoopkid> lol
14.01.19 03:48:51*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 258 seconds
14.01.19 03:51:13*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
14.01.19 03:51:18<dmiles> cyc: (+ 1 1)
14.01.19 08:12:14*** Quit: cyc (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 272 seconds
14.01.19 08:12:19*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
14.01.19 08:16:45*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
14.01.19 08:16:50<dmiles> cyc: (+ 1 1)
14.01.19 08:54:24*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
14.01.19 08:54:29<dmiles> cyc: (+ 1 1)
14.01.19 09:11:19<aindilis> dmiles: I got rtec to run in SWIPL
14.01.19 10:12:45<aindilis> dmiles: okay got it to load in FLP
14.01.19 10:16:35<aindilis> had to change all the :- ['../../<FILE>'] to :- consult('<FULLPATH>/<FILE>').
14.01.19 10:18:55<aindilis> so it will load in sensor network
14.01.19 10:19:27<aindilis> now all I have to do is figure out how to use it with stream data, and then on top of that, get OLED to work too
14.01.19 10:22:54<aindilis> dmiles: since you've played with RTEC, do you know offhand how to take stream inputs, i.e. repeated callbacks?
14.01.19 11:13:05<aindilis> didn't know about this: http://users.iit.demokritos.gr/~a.artikis/RTEC-2examples-SWI.zip
14.01.19 11:13:14<aindilis> RTEC compatible with SWIPL from authors
14.01.19 15:52:28<aindilis> dmiles: ping
14.01.19 16:12:18*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
14.01.19 23:04:35<dmiles> SWI-Prolog [thread -1 () at Tue Jan 15 02:02:44 2019]: received fatal signal 11 (segv)
                 <dmiles> C-stack trace labeled "crash":
                 <dmiles>   [0] save_backtrace() at /root/swipl-devel/src/os/pl-cstack.c:341 [0x7efddb5cc195]
14.01.19 23:04:36<dmiles>   [1] print_c_backtrace() at /root/swipl-devel/src/os/pl-cstack.c:886 [0x7efddb5cc36e]
                 <dmiles>   [2] sigCrashHandler() at /root/swipl-devel/src/os/pl-cstack.c:911 [0x7efddb5cc45e]
                 <dmiles>   [3] fork1() at ??:? [0x7efdd1f0d432]
14.01.19 23:04:37<dmiles>   [4] JVM_handle_linux_signal() at ??:? [0x7efdd1f1211b]
14.01.19 23:04:38<dmiles>   [5] JVM_FindSignal() at ??:? [0x7efdd1f04898]
                 <dmiles>   [6] killpg() at ??:? [0x7efddb124f20]
14.01.19 23:04:39<dmiles>   [7] PL_thread_attach_engine() at /root/swipl-devel/src/pl-thread.c:5336 [0x7efddb589f12]
14.01.19 23:04:40<dmiles>   [8] PL_create_engine() at /root/swipl-devel/src/pl-thread.c:5479 [0x7efddb58a0ac]
14.01.19 23:04:41<dmiles>   [9] Java_org_jpl7_fli_Prolog_attach_1pool_1engine() at /root/swipl-devel/packages/jpl/src/c/jpl.c:4492 [0x7efdd25ad157]
                 <dmiles> Running on_halt hooks with status 139
14.01.19 23:04:42<dmiles> ./From_Prolog.sh: line 7: 14606 Segmentation fault      (core dumped) ./from_swipl.pl $@
14.01.19 23:05:12<dmiles> aindilis: pong
14.01.19 23:05:30<dmiles> i am sorta fighting that ruight now
14.01.19 23:06:22<dmiles> oh gawd after 6 hours.. i paste that i and i just figured it out .. haha
15.01.19 01:24:37*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
15.01.19 01:24:42<dmiles> cyc: (+ 1 1)
15.01.19 01:25:24*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 268 seconds
15.01.19 08:39:13<aindilis> dmiles: ping
15.01.19 20:41:01*** Join: egp_ (~egp_@5.254.229.243, egp_: Eugene)
15.01.19 20:41:06<dmiles> cyc: (+ 1 1)
16.01.19 00:27:59*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
16.01.19 00:28:04<dmiles> cyc: (+ 1 1)
16.01.19 01:22:54*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
16.01.19 02:48:47*** Quit: egp_ (~egp_@5.254.229.243) left #logicmoo: Ping timeout: 240 seconds
16.01.19 02:49:28*** Join: egp_ (~egp_@5.254.229.243, egp_: Eugene)
16.01.19 02:49:34<dmiles> cyc: (+ 1 1)
16.01.19 04:05:13*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xlmwxpymrzifvrjs) left #logicmoo: Quit: Connection closed for inactivity
16.01.19 09:36:39*** Quit: egp_ (~egp_@5.254.229.243) left #logicmoo: Quit: Leaving
16.01.19 09:37:50*** Join: egp_ (~egp_@5.254.229.243, egp_: Eugene)
16.01.19 09:37:55<dmiles> cyc: (+ 1 1)
16.01.19 09:41:22*** Quit: egp_ (~egp_@5.254.229.243) left #logicmoo: Client Quit
16.01.19 09:41:40*** Join: egp_ (~egp_@5.254.229.243, egp_: Eugene)
16.01.19 09:41:45<dmiles> cyc: (+ 1 1)
16.01.19 09:45:00*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
16.01.19 09:45:05<dmiles> cyc: (+ 1 1)
16.01.19 10:12:08*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jccstxogekcxhdxq, stoopkid: stoopkid)
16.01.19 10:12:14<dmiles> cyc: (+ 1 1)
16.01.19 10:48:52<dmiles> i'd announce http://ontologforum.org/index.php/ConferenceCall_2019_01_16  in here had we been on less shared channels
16.01.19 12:21:34*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
16.01.19 12:57:43*** Nick change: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) is now known as Copenhagen_Bram
16.01.19 13:05:25<aindilis> dmiles: do you have the slides?
16.01.19 13:05:33<aindilis> I had to leave for a little bit at the end
16.01.19 13:06:07<aindilis> ah I found them
16.01.19 13:06:17<dmiles> ok
16.01.19 13:07:48<dmiles> anonymous morphed into AndrewDougherty
16.01.19 13:07:49<dmiles> Please change your name from 'anonymous' using the Settings button
                 <dmiles> anonymous1 morphed into Donna
16.01.19 13:07:50<dmiles> anonymous morphed into Douglas R. Miles
                 <dmiles> anonymous morphed into John Sowa
                 <dmiles> Gary: Ken are you running each of the presentations or are we trying to share screens?
                 <dmiles> anonymous morphed into AlexShkotin
                 <dmiles> Gary: http://ontologforum.org/index.php/ConferenceCall_2019_01_16
16.01.19 13:07:51<dmiles> anonymous morphed into TerryLongstreth
16.01.19 13:07:52<dmiles> ToddSchneider: Gary, please mute your microphone when not talking.
                 <dmiles> MikeBennett: lot of background noise please mute
16.01.19 13:07:53<dmiles> Mark Underwood: Mike  Thanks, message received
16.01.19 13:07:54<dmiles> Mark Underwood: (RE Finance track presentation)
                 <dmiles> Douglas R. Miles: wow great list of speakers
16.01.19 13:07:55<dmiles> Gary: @John. Thank you for helping to recruit Benjamin for our session when Pascal was forced to move his talk to the 2nd session.
16.01.19 13:07:56<dmiles> Alessandro Oltramari: I will forward the announcement to the Ontolog list, but you may be interested in this breakout session I'm co-organizing at US2TS: https://deepsemantic2019.github.io/
16.01.19 13:07:57<dmiles> Donna: I like the introduction of visualization as an approach to reasoning/explanation thanks @Mike, @Mark
16.01.19 13:08:08<dmiles> MikeBennett: The current limitations in SemWeb that I am seeing are more to do with the practitioner focus on applications, exclusion of foundational terms as they do not help the reasoner or they slow it down. Needed a clearer distinction between computationally independent model and application, of which either can be in OWL/DL at least in part. I'm generalizing but this is what I see.
16.01.19 13:08:09<dmiles> MikeBennett: So I would not say the SemWeb is a failure but it fails to deliver the things that you and I and others here care about.
16.01.19 13:08:10<dmiles> John Sowa: Mike and Allessandro, please look at the historical documents, which show both theory and practice from 1980 to the present.
                 <dmiles> John Sowa: I collected them in http://jfsowa.com/ikl
16.01.19 13:08:11<dmiles> MikeBennett: Thanks
16.01.19 13:08:12<dmiles> Alessandro Oltramari: I will check them out, for sure. But it's true that if SW fails to deliver what ontologists originally meant, it also shows that the two communities are only marginally related, these days
                 <dmiles> MikeBennett: As indeed they are.
16.01.19 13:08:13<dmiles> John Sowa: Basic point:  For those of us who were there, the visions of 1980 were more coherent than the visions of 2019.
16.01.19 13:08:14<dmiles> John Sowa: I noticed that Tim Finin was signed on earlier today, but he went away.  He also live through most of these developments.
16.01.19 13:08:15<dmiles> TerryLongstreth: @Ravi - RL of XRL is Reinforcement Learning
                 <dmiles> Gary: @John, do you mean the visions now in 2019 or earlier in the century?
16.01.19 13:08:16<dmiles> John Sowa: For anybody who did, all we have today is a huge increase in volume with no increase in fundamental ideas.
16.01.19 13:08:17<dmiles> John Sowa: Gary, by visions I mean the 100+ documents cited in http://jfsowa.com/ikl
16.01.19 13:08:18<dmiles> Gary: @John We will have to mull over this vision and foundation for our communique starting with the sessions but getting some sense in the first synthesis.
16.01.19 13:08:19<dmiles> John Sowa: Ontolog Forum, for example, is rehashing the kinds of ideas from the email lists of the 1990s.
                 <dmiles> John Sowa: If interested, look at the SRKB email list from 1991 to 1994.  (cited in IKL)
16.01.19 13:08:20<dmiles> John Sowa: you'll see a lot of familiar names.
16.01.19 13:08:21<dmiles> Gary: This laundry list suggests a small task to organize and visualize the landscape.  There are some rudimentary ones I have seen in passing but haven't contemplated.
                 <dmiles> Donna: have a good week everyone!
16.01.19 13:08:23<dmiles> John Sowa: There has been progress in theory and in some of the implementations, but anybody who doesn't know the history is doomed to repeat it.
                 <dmiles> anonymous3 morphed into BobbinTeegarden
                 <dmiles> ToddSchneider: Meeting ends @13:05 Eastern.
16.01.19 13:08:25<dmiles> oh dear god
                 <dmiles> was supposed to be into aGDoc
16.01.19 13:10:09<dmiles> i sadly only started lookng into the text chat after most people left
16.01.19 13:10:41<aindilis> Ben Grosof, I'll be there
16.01.19 13:11:16<dmiles> i wanted to tell John.. What would be scarier is if everyone left off and stoppe3d talking about these things
16.01.19 13:11:44<aindilis> yeah I also get the impression that the work in the 1980s was on track
16.01.19 13:11:50<aindilis> from the books I have read
16.01.19 13:11:57<aindilis> only issue was, lack of compute power
16.01.19 13:12:14<dmiles> i mostly agree 
16.01.19 13:12:39<aindilis> so, any luck with your efforts on LarKC?
16.01.19 13:12:54<aindilis> with Prolog calls or 3T?
16.01.19 13:13:02<dmiles> well i started developing it in windows to get arround some X11 bugs that was craching it
16.01.19 13:13:10<aindilis> ah, the 3T?
16.01.19 13:13:12<dmiles> working on PRollgo Calls right now again
16.01.19 13:13:15<aindilis> cool
16.01.19 13:13:38<dmiles> everything take soo long
16.01.19 13:13:45<aindilis> yeah I had to run some errands yesterday so I didn't get anything done really
16.01.19 13:13:51<aindilis> maybe some stuff in the morning
16.01.19 13:13:59<dmiles> i will probly get to the 3T by sunday
16.01.19 13:14:15<aindilis> cool, well the 3t is less important to me than the prolog calls fwiw
16.01.19 13:14:30<aindilis> simply cause I don't know how to use 3t
16.01.19 13:14:35<aindilis> I still need to write him back
16.01.19 13:14:44<dmiles> ?- gethostname(X).
                 <PrologMUD> dmiles: % X=i74930k
                 <PrologMUD> dmiles: %  det(Yes,1)
16.01.19 13:14:54<aindilis> nice
16.01.19 13:15:04<dmiles> ?- cyc_eval([+,1,1],O).
16.01.19 13:15:21<dmiles> ?- cl_eval([+,1,1],O).
                 <PrologMUD> dmiles: % O=2
                 <PrologMUD> dmiles: %  det(Yes,1)
16.01.19 13:15:27<dmiles> ?- cl_cyc_eval([+,1,1],O).
16.01.19 13:15:28<PrologMUD> dmiles: % O=2
                 <PrologMUD> dmiles: %  det(Yes,1)
16.01.19 13:15:44<aindilis> so I can run it?
16.01.19 13:15:50<aindilis> if I install again?
16.01.19 13:16:03<aindilis> has it been committed?
                 <dmiles> what the issue i am dealing with is how much mashaling and what sort of dataconversions
16.01.19 13:16:11<aindilis> yeah
                 <dmiles> yes that was commited a few days ago.. sorry
16.01.19 13:16:15<aindilis> np
16.01.19 13:16:26<aindilis> so okay I'll play around with it then, ty!
16.01.19 13:16:34<dmiles> i should probly do a new commit as i dont remembver what parts were left over
16.01.19 13:17:16<aindilis> I'm in the process of backup
16.01.19 13:17:46<aindilis> afterwards I should be more readily available, also hopefully hand will stop hurting
16.01.19 13:18:22<aindilis> oh I was wondering if you knew off hand how to run RTEC in real time?
16.01.19 13:18:29<aindilis> I got it working for SWIPL, wasn't hard
16.01.19 13:18:35<aindilis> but it's confusing
16.01.19 13:18:51<aindilis> it looks like a batch process, not a real time callback
16.01.19 13:19:13<dmiles> oh btw there are like 7 differnt examples in RTEC but you have to merge all the diffent  branches to get to the exmaples
16.01.19 13:19:21<aindilis> okay
16.01.19 13:19:22<dmiles> i noiced that at leasrt 1/2 work fine it SWI-Prolog
16.01.19 13:19:42<aindilis> how is Marty's thing coming btw?  what is the story with it?
16.01.19 13:19:43<dmiles> jsut a couple is what i had to use Yap for
16.01.19 13:20:05<aindilis> is it on hold whilst we integrate DAYDREAMER/3T/LarKC?
16.01.19 13:20:26<aindilis> or does it tie into it (awesome if it does)
16.01.19 13:20:32<dmiles> i havent delved deeply to see what the differnce inrealtime data and not in RTEC
16.01.19 13:20:40<aindilis> k
16.01.19 13:20:43<aindilis> ty
16.01.19 13:21:05<aindilis> maybe I should write my own platform and then see about integrating theirs
16.01.19 13:21:23<dmiles> Martys is waiting untuil LarKC is workign so i can start to integrate
16.01.19 13:21:24<aindilis> since I will understand the domain better
16.01.19 13:21:37<aindilis> awesome!  so it isn't being abandoned at all
16.01.19 13:21:50<dmiles> since MArtys ec_planer is supposed to allow CYC
16.01.19 13:22:09<dmiles> the https://github.com/TeamSPoon/prologmud_I7/tree/master/prolog/ec_planner
16.01.19 13:23:05<dmiles> well martys is required to see  the ec_planner textual entailemt
16.01.19 13:23:13<aindilis> https://youtu.be/Afw8e-abVa8?t=32
16.01.19 13:23:31<dmiles> the change i am making is that the domains are stored in CYC now
16.01.19 13:23:40<aindilis> :)
16.01.19 13:23:57<dmiles> spo this leads to the biggest amount of work this week is CL representation vs CycL represenation
16.01.19 13:24:16<aindilis> yeah
16.01.19 13:24:21<aindilis> and it's all performant?
16.01.19 13:24:29<dmiles> how do we say (#$isa #$Fido #$Dog) ?
16.01.19 13:24:40<dmiles> vs (CL:ISA :FIDO :DOG) 
16.01.19 13:25:05<dmiles> so far i am making prolog atoms cyc constants
16.01.19 13:25:16<aindilis> hrm
16.01.19 13:25:20<dmiles> and anything with a colon in them CL SYMBOLS
16.01.19 13:25:59<dmiles> cl_eval(['CL:MAKE-SYMBOL',"foo"],O).
16.01.19 13:26:10<dmiles> ?- cl_eval(['CL:MAKE-SYMBOL',"foo"],O).
16.01.19 13:26:29<dmiles> [#logicmoo,: ,error(java_exception(<jref>(0000000023453670)),org.jpl7.JPLException)]
16.01.19 13:26:55<aindilis> this reminds me vaguely
16.01.19 13:26:57<dmiles> opops i had not account for a PACK of NIL
16.01.19 13:27:13<aindilis> of how I had to do things to get the interlingua to speak between Perl/Emacs/Prolog
16.01.19 13:27:26<dmiles> ?- cl_eval(['CL:MAKE-SYMBOL',"foo",''CL:*package*'],O).
16.01.19 13:27:27<aindilis>  /Cyc
16.01.19 13:27:39<dmiles> ?- cl_eval(['CL:MAKE-SYMBOL',"foo",'CL:*package*'],O).
16.01.19 13:28:04<dmiles> right now i am making things "rereable" in atoms
16.01.19 13:28:11<dmiles> at least i can fall back to that default
16.01.19 13:28:35<dmiles> but when i return them from the API i still working on presenation
16.01.19 13:28:58<dmiles> for exmaple the common lisp packages.. what datatype do you want?
16.01.19 13:29:09<dmiles> well do we want
16.01.19 13:29:20<dmiles> currently i am using my rereable theme
16.01.19 13:29:40<dmiles> ?- cl_eval('CL:*package*',O).
16.01.19 13:29:55<dmiles> oops that got pumped thru the reader
16.01.19 13:29:59<dmiles> erm the constant reader
16.01.19 13:30:28<dmiles> ?- cl_eval('COMMON-LISP:*PACKAGE*',O).
                 <PrologMUD> dmiles: % O=<jref>(000000001DA84420)
                 <PrologMUD> dmiles: %  det(Yes,1)
16.01.19 13:30:49<dmiles> i might jsut make it that symbols have to be fully qualified
16.01.19 13:30:58<dmiles> ?- cl_eval('CL:*PACKAGE*',O).
                 <PrologMUD> dmiles: % O=<jref>(000000001DA84420)
                 <PrologMUD> dmiles: %  det(Yes,1)
16.01.19 13:31:14<dmiles> well alias fine but whne they print back to you
16.01.19 13:31:34<dmiles> ?- cl_eval(['CL:PACKAGE-NAME','CL:*PACKAGE*'],O).
                 <PrologMUD> dmiles: % O='COMMON-LISP-USER'
                 <PrologMUD> dmiles: %  det(Yes,1)
16.01.19 13:32:01<dmiles> oopps that was a screwup
16.01.19 13:32:06<aindilis> well there will probably be handy translation functions
16.01.19 13:32:09<dmiles> it should have come back a s a string
16.01.19 13:32:31<dmiles> yep i been writinmg translation funcitons mostly
16.01.19 13:32:51<dmiles> all that is taking time
16.01.19 13:33:12<dmiles> jsut to let you know why i can jsut leave it it 95% done
16.01.19 13:33:25<dmiles> as i cant ever use it in that state even myself
16.01.19 13:33:37<dmiles> let alkone expect other to reverse engine what to do
16.01.19 13:33:42<dmiles> let alkone expect other to reverse engineer what to do
16.01.19 13:34:26<dmiles> so i been building up more command line options and things to set this
16.01.19 13:34:58<dmiles> we only doing 2 translation profiles but based on lispo vars
16.01.19 13:35:13<dmiles> well only doing*
16.01.19 13:36:04<aindilis> awesome!
16.01.19 13:36:09<dmiles> one is a fast usable mode that is hard to understand
16.01.19 13:36:24<dmiles> the otehr is a more debuggable
16.01.19 13:36:37<dmiles> first mode is all jrefs
16.01.19 13:36:50<dmiles> but not reabale from prolog
16.01.19 13:37:05<dmiles> unless you are the swi-jpl expert
16.01.19 13:37:26<dmiles> which i bveen doign swi-jpl for over 15 years
16.01.19 13:37:47<aindilis> it is the first I heard of swi-jpl :)
16.01.19 13:38:05<aindilis> but that sounds like how you are integrating the two
16.01.19 13:38:14<dmiles> http://www.swi-prolog.org/packages/jpl/
16.01.19 13:38:55<aindilis> very nice
16.01.19 13:39:11<dmiles> http://swi-to-yap.github.io/swicli/documentation.html
                 <aindilis> so you're embedding prolog into ABCL?
16.01.19 13:39:21<dmiles> yeah i embed it
16.01.19 13:39:28<dmiles> yeah i embbeded it
16.01.19 13:39:59<dmiles> now i am jsut dealing with the marshalling issues to make it so people can understand it
16.01.19 13:40:16<dmiles> i wrote this code in 2006
16.01.19 13:40:32<dmiles> teh inital link to ABCL
16.01.19 13:41:10<dmiles> but also i made it work better back then for C# than for Java
16.01.19 13:41:47<dmiles> since i prefered the C# version of ABCL i created
16.01.19 13:42:07<aindilis> coool
16.01.19 13:42:09<aindilis> *cool
16.01.19 13:42:13<dmiles> JPL is so much more primitive than SWICLI
16.01.19 13:42:55<dmiles> alot of waht i am doing it trying to catch JPL to SWICLI
16.01.19 13:43:03<dmiles> which is very sad
16.01.19 13:43:12<dmiles> since JPL was spart of SWI
16.01.19 13:43:25<aindilis> yeah
16.01.19 13:43:33<dmiles> but iot take me too many weeks of arm twisting to get imporovements in
16.01.19 13:44:09<dmiles> oh btw.. when JPL came out it was one-dirrection
16.01.19 13:44:20<dmiles> so i wrorte a better C version in 2002
16.01.19 13:44:35<dmiles> which then SWI made it bi-directional
16.01.19 13:44:48<dmiles> so i always merely write competeling project 
16.01.19 13:45:03<aindilis> yeah that's annoying
                 <dmiles> competing code whenever i want JanW to write code
16.01.19 13:45:10<aindilis> ah
16.01.19 13:45:13<aindilis> I see ;)
16.01.19 13:45:33<dmiles> hehe
16.01.19 13:45:55<aindilis> well I don't have much more to say right now
16.01.19 13:46:10<aindilis> I think I need to take it easy for a bit - will you be around later?
16.01.19 13:46:29<dmiles> ah i am jsut telling you why this is a longer process than i first said
16.01.19 13:46:40<dmiles> yep
16.01.19 13:46:51<aindilis> oh okay, yeah, no worries, I am just super grateful you're making it available
16.01.19 13:46:59<dmiles> is i am having to also even make some of this code mergable back to upstream
16.01.19 13:47:30<aindilis> although I cannot foresee the benefits of using LarKC with FLP, I know that this is absolutely necessary for rapid progress
16.01.19 13:47:33<dmiles> since everyone who uses JPL is in hell and needs to use my code anyways
16.01.19 13:47:51<aindilis> well that's good I hope they incorporate it
16.01.19 13:48:34<aindilis> I have a world knowledge domain
16.01.19 13:48:41<aindilis> part of FLP
16.01.19 13:48:45<aindilis> and that right there is done then
16.01.19 13:48:53<aindilis> and then there's the microtheory support
16.01.19 13:48:59<aindilis> right, that will transpose to Prolog right?
16.01.19 13:49:15<dmiles> right, how do you want that to look?
16.01.19 13:49:23<aindilis> hrm, I cannot envision it
16.01.19 13:49:40<aindilis> and then there's inferencing
16.01.19 13:49:50<dmiles> i decided to make the default EverytingPSC unless otherwise specified
16.01.19 13:50:08<aindilis> hrm, yeah I was shocked when I realized not everything is in Everything
16.01.19 13:50:11<aindilis> EverythingPSC
16.01.19 13:50:15<dmiles> :)
16.01.19 13:50:28<aindilis> so I had been making wrong deductions
16.01.19 13:50:34<dmiles> well right that is that issue that some thnings done show up there
16.01.19 13:50:45<dmiles> or do show up there
16.01.19 13:50:57<aindilis> I think it's a sane default
16.01.19 13:51:07<aindilis> I will most certainly write FLP specific wrappers for most of the API you expose
16.01.19 13:51:18<dmiles> what would  ?- isa(X,Y).   do?
16.01.19 13:51:36<aindilis> one thing I guess now that I think about it, there is going to be interplay between CYC's Mts and Prolog's modules
16.01.19 13:51:47<aindilis> hrm, that is a good question
16.01.19 13:51:53<aindilis> I never thought about that
16.01.19 13:52:04<dmiles> oh i been thinking about this for years and have answers
16.01.19 13:52:25<dmiles> but still i dont know what answers other peopel would ahve guessed at
16.01.19 13:52:38<aindilis> yeah the query just blows up in my mind
16.01.19 13:53:08<aindilis> anyway good problems to have
16.01.19 13:53:22<dmiles> some of this works base don fixes i created for cyc to
16.01.19 13:53:50<dmiles> that i have some special impl MTs that always return answers
16.01.19 13:54:03<dmiles> but th most easiest most geneal answer
16.01.19 13:54:11<dmiles> most general answer
16.01.19 13:54:19<dmiles> this allows better termination
16.01.19 13:54:44<aindilis> okay
16.01.19 13:55:00<dmiles> so that jsut cuz the anteceeded should return 70 billion results.. it doesnt need to run the next clause 70 billion times
16.01.19 13:55:19<aindilis> just want to preserve soundness and completeness where possible, but yeah I recall you saying isa bleeds into undecidability
16.01.19 13:55:58<dmiles> over the last decade i created a new type of logical form that is able to preserve undecidability
16.01.19 13:56:09<dmiles> (and not have it be a bad thing)
16.01.19 13:56:11<aindilis> I think I recall you talking about this
16.01.19 13:56:19<aindilis> it was that it wasn't "clear"
16.01.19 13:56:35<dmiles> right what the logical form does is make it clear
16.01.19 13:56:54<dmiles> cycorp engineers sorta knew this.. but they never go to writ ethe code.. jsut hte KE
16.01.19 13:57:11<dmiles>  but they never got to write the code.. jsut hte KE
16.01.19 13:57:36<dmiles> so prolog in this situation at least has the cyc constants avialbe to epxeress it
16.01.19 13:57:46<aindilis> so how does isa perform?  with like a closure?
16.01.19 13:57:59<dmiles> yes i use a closure in this case
16.01.19 13:58:19<dmiles> that the units only work as had as the consumer uses the closure
16.01.19 13:58:52<aindilis> how does it maintain state?
16.01.19 13:59:04<aindilis> for instance if the KB changes
16.01.19 13:59:08<dmiles> so when i return 70 biullion results.. you only see one term come bck .. which is a closure that creates a skoelm that unified with one of the 70b terms
16.01.19 13:59:17<aindilis> ah
16.01.19 13:59:40<dmiles> right actualyl i never even considered if the KB changes in etweeen calling the closure or not
16.01.19 14:00:08<aindilis> so it has some index of the traversal?
16.01.19 14:00:23<dmiles> i am assuming it shouldnt change results past query time .. but io have it that it is accidently does
16.01.19 14:01:04<dmiles> well i do let it use an index for tranverl
16.01.19 14:01:06<aindilis> hey quick question OT, why the heck doesn't CYC include metadata like "IntentionLogic" if it tries to implement it?
16.01.19 14:01:34<dmiles> but some  terversals are so lazy they might not happen until after the KB got changed
16.01.19 14:02:39<dmiles> well yeah.. that was my big complaint when workign with Adam Pease and SUMO
16.01.19 14:02:44<dmiles> we anted nothing liek IntentionLogic
16.01.19 14:02:59<aindilis> k
16.01.19 14:03:07<dmiles> nothing that was going to start flame wars abotu logic
16.01.19 14:03:11<aindilis> ah
16.01.19 14:03:39<aindilis> out of curiosity how would it start flamewars?
16.01.19 14:04:00<dmiles> in logical proofs i use  "sentenceImplies" which allow modus poonens but stops Modus tollens
16.01.19 14:04:17<aindilis> k
16.01.19 14:04:19<dmiles> oh well like Gary's BFO
16.01.19 14:04:40<aindilis> ah k
16.01.19 14:04:48<dmiles> everyone wants the KB so tiny they can memorrize it in under a week
16.01.19 14:05:03<aindilis> well I guess I'm going to start some flamewars
16.01.19 14:05:14<aindilis> by naming all the logics and associating them with their axioms
16.01.19 14:05:21<aindilis> and their axioms in relation to CYC KB
16.01.19 14:05:27<dmiles> example des cyc need a logical Bottom?
16.01.19 14:05:38<dmiles> is Thing==Top?
16.01.19 14:05:52<dmiles> is T==Top ?
16.01.19 14:05:58<dmiles> is Thing==T?
16.01.19 14:06:09<aindilis> oh 
16.01.19 14:06:17<aindilis> sorry took me a second, I was thinking like a spinning top ;)
16.01.19 14:06:24<dmiles> arguments abotu those questions
16.01.19 14:06:39<dmiles> like is False = Bottom.. is NIL = False?
16.01.19 14:06:46<aindilis> can't they just model both approaches?
16.01.19 14:06:53<aindilis> in separate metamts
16.01.19 14:07:03<aindilis> I know what you're saying though
16.01.19 14:07:09<dmiles> its jsut more to memorize :P
16.01.19 14:07:25<dmiles> and somehow there is a realeastate war
16.01.19 14:07:28<aindilis> I have something called assumption junction which basically does this, it branches at every polemic
16.01.19 14:07:33<dmiles> real estate war
16.01.19 14:07:52<aindilis> the first assumption is there are no assumptions
16.01.19 14:07:54<aindilis> lol
16.01.19 14:08:08<aindilis> yeah, i understand, cyc is a cyberphysical system
16.01.19 14:09:14<aindilis> namespace collisions etc
16.01.19 14:09:31<aindilis> somehow I'm going to have to navigate all that
16.01.19 14:09:35<aindilis> with MKM
16.01.19 14:09:36<dmiles> yeah.. well whaich constants belong in Cyc 101
16.01.19 14:09:52<aindilis> I'm a maximalist
16.01.19 14:10:03<dmiles> vs what class do we start ot teach people about each constant
16.01.19 14:10:11<aindilis> yeah
16.01.19 14:10:22<dmiles> I'm a maximalist in the same way
16.01.19 14:10:28<dmiles> Rule of Most Power
16.01.19 14:10:32<aindilis> hehe
16.01.19 14:10:36<aindilis> that's probably why we get along
16.01.19 14:10:53<dmiles> yeah
16.01.19 14:11:21<aindilis> :)
16.01.19 14:11:51<aindilis> I suppose looking for other maximalists would be a good idea
16.01.19 14:12:16<dmiles> ['CL:FIND-PACKAGE',"COMMON-"] 
16.01.19 14:12:20<dmiles> oops
16.01.19 14:12:33<dmiles> ['CL:FIND-PACKAGE',"COMMON-LISP"]  might be how i return the package
16.01.19 14:12:55<aindilis> ah
16.01.19 14:13:02<dmiles> cl_eval('CL:*PACKAGE*',O).
16.01.19 14:13:05<dmiles> ?- cl_eval('CL:*PACKAGE*',O).
                 <PrologMUD> dmiles: % O=<jref>(000000001DA84420)
                 <PrologMUD> dmiles: %  det(Yes,1)
16.01.19 14:13:07<dmiles> type 1
16.01.19 14:13:11<dmiles> vs type 2
16.01.19 14:13:53<dmiles> ['COMMON-LISP:FIND-PACKAGE','"COMMON-LISP-USER"]  
16.01.19 14:13:59<aindilis> you mean you use a function call to avoid having to write awkwardly in JPL?
16.01.19 14:14:18<dmiles> i return a function call
16.01.19 14:14:21<aindilis> oh
16.01.19 14:14:27<dmiles> that will manufacture 
16.01.19 14:14:34<aindilis> cool
16.01.19 14:14:39<dmiles> in SBCL this is called *PRINT-READABLEY*
16.01.19 14:15:00<aindilis> man I love CS
16.01.19 14:15:14<aindilis> I wish I were a Lisp power user
16.01.19 14:15:19<aindilis> CL
16.01.19 14:15:20<dmiles> well part of the  *PRINT-READABLY* ssytem 
16.01.19 14:15:40<aindilis> sometimes though I forget just how nice CS is
16.01.19 14:15:54<aindilis> like I take for granted the awesome computers we have available today
16.01.19 14:16:15<aindilis> I found some more early AI writing though
16.01.19 14:16:18<aindilis> *my AI
16.01.19 14:16:25<aindilis> which captures the spirit
16.01.19 14:16:53<aindilis> I need to get in the mindset
16.01.19 14:18:24<aindilis> hey I have to run some errands
16.01.19 14:18:27<aindilis> I'll bbiab
16.01.19 14:18:34<aindilis> thanks for chatting!
16.01.19 14:18:42<dmiles> ?- cl_eval( ... )  i am gouign to have at the top levle mode a non cyc constant default
                 <yesbot> Syntax error: Operator expected
                 <yesbot> cl_eval( ... ) 
                 <yesbot> ** here **
                 <yesbot>  i am gouign to have at the top levle mode a non cyc constant default . 
                 <yesbot> New prescription glasses?
16.01.19 14:23:15<dmiles> ?- listing(cyc_progn).
16.01.19 14:23:22<dmiles> ?- listing(cl_cyc_progn).
16.01.19 14:23:30<dmiles> ?- listing(cl_cyc_eval).
16.01.19 14:23:31<PrologMUD> dmiles: :- dynamic user:cl_cyc_eval/2.
                 <PrologMUD> dmiles: user:cl_cyc_eval(A, B) :-
                 <PrologMUD> dmiles:     call_ctrl(cl_cyc_eval(A), B).
                 <PrologMUD> dmiles: %  det(Yes,1)
16.01.19 14:24:35<dmiles> functions to automatically defined thru an isntrospection process i created for durring classlaoder
16.01.19 14:25:19<dmiles> this might get renamed to cyc_cyc_eval
16.01.19 14:25:24<dmiles> oops
16.01.19 14:25:43<dmiles> this might get renamed to ext_cyc_eval in it loads into rteh comon lisp EXENTIONS package
16.01.19 14:26:29<dmiles> the functino used to name its lisp_cyc_eval
16.01.19 14:26:36<dmiles> the functino used to name itself lisp_cyc_eval
16.01.19 14:27:27<dmiles> hrrm should the KB also track definations?
16.01.19 14:36:12<dmiles> stoopkid: time loop in AI
16.01.19 14:36:44<dmiles> oops sorry ##AGI
16.01.19 14:36:53<dmiles> or did you predict it!
16.01.19 14:42:19<dmiles> ?- isa(1,X).
16.01.19 14:42:20<PrologMUD> dmiles:  det(No,0)
16.01.19 14:42:27<dmiles> ?- isa(isa,X).
                 <PrologMUD> dmiles: % X=tRelation
                 <PrologMUD> dmiles: % X=tPred
16.01.19 14:42:28<PrologMUD> dmiles: % X=pfcControlled
                 <PrologMUD> dmiles: % X=prologHybrid
                 <PrologMUD> dmiles: % X=prologMultiValued
                 <PrologMUD> dmiles: % X=rtBinaryPredicate
16.01.19 14:42:29<PrologMUD> dmiles:  det(Yes,6)
16.01.19 14:43:12<dmiles> ?- mudIsa(X,Y).
                 <PrologMUD> dmiles: % X=iPlato7, Y=tAgent
16.01.19 14:43:13<PrologMUD> dmiles: % X=iPlato7, Y=mobPhilosopher
                 <PrologMUD> dmiles: % X=iPlato7, Y=tChannel
                 <PrologMUD> dmiles: % X=iPlato7, Y=tObj
                 <PrologMUD> dmiles: % X=iPlato7, Y=tSpatialThing
                 <PrologMUD> dmiles: % X=iPlato7, Y=tTemporalThing
                 <PrologMUD> dmiles: % X=iPlato7, Y=tIndividual
16.01.19 14:43:14<PrologMUD> dmiles: % X=iPlato7, Y=tLookAble
                 <PrologMUD> dmiles: % X=iExplorer7, Y=tAgent
16.01.19 14:43:15<PrologMUD> dmiles: % X=iExplorer7, Y=tChannel
                 <PrologMUD> dmiles: % X=iExplorer7, Y=tObj
16.01.19 14:44:28<dmiles> ?- mpred_why(isa(iPlato7,tTemporalThing)).
                 <PrologMUD> dmiles: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> dmiles: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> dmiles: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> dmiles: Justifications for tTemporalThing(iPlato7):
16.01.19 14:44:29<PrologMUD> dmiles:     1.1 tSpatialThing(iPlato7)  % [mfl4(_5982,baseKB,_5986,_5988)] 
                 <PrologMUD> dmiles:     1.2 tSpatialThing(W4)==>tTemporalThing(W4)  % [mfl4(_5406,baseKB,_5410,_5412)] 
                 <PrologMUD> dmiles:     1.3 tAgent(iPlato7)  % [mfl4(_7224,baseKB,_7228,_7230)] 
16.01.19 14:44:30<PrologMUD> dmiles:     1.4 tAgent(W4)==>tSpatialThing(W4)  % [mfl4(_8910,baseKB,_8914,_8916)] 
                 <PrologMUD> dmiles:     1.5 genls(tSpatialThing,tTemporalThing)  % [logicmoo_base/prolog/logicmoo/pfc/system_basic.pfc.pl:402] 
16.01.19 14:44:31<PrologMUD> dmiles:     1.6 genls(W4,X4)/(W4\=X4)==>(isa(Y4,W4)==>isa(Y4,X4))  % [mfl4(_12786,baseKB,_12790,_12792)] 
                 <PrologMUD> dmiles:     1.7 mobPhilosopher(iPlato7)  % [logicmoo_base/prolog/logicmoo/pfc/system_common.pfc.pl:1244] 
16.01.19 14:44:32<PrologMUD> dmiles:     1.8 mobPhilosopher(W4)==>tAgent(W4)  % [mfl4(_6868,baseKB,_6872,_6874)] 
                 <PrologMUD> dmiles:     1.9 genls(tAgent,tSpatialThing)  % [prologmud/prolog/prologmud/mud_builtin.pfc.pl:785] 
16.01.19 14:48:55<dmiles> aindilis here is a question what is the version of Cyc API querty that returns the proof elelents?
16.01.19 14:49:43<dmiles> sort the way HL-WHY-NOT-WFF returns elements
16.01.19 14:51:44<aindilis> fi-query? idk
16.01.19 14:52:49<dmiles> oh i was thinkkign cyc-query was a alias to that but now i think about it.. even if cyc-query is an anlias fi-ask did have a option to return the proof
16.01.19 15:18:07<dmiles> FI-JUSTIFY  
16.01.19 15:18:18<dmiles> god things take a while 
16.01.19 15:19:12<dmiles> FI-JUSTIFY to each binding set CYC returns that is
16.01.19 15:21:20<dmiles> ?- cl_cyc_eval_string("(FI-JUSTIFY '(#$isa #$Fido #$Dog) #$InferencePSC)",O).
16.01.19 15:21:40*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
16.01.19 15:24:06*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
16.01.19 15:24:11<dmiles> cyc: (+ 1 1)
16.01.19 15:50:34*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
16.01.19 15:50:40<dmiles> cyc: (+ 1 1)
16.01.19 18:04:11*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
17.01.19 04:31:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jccstxogekcxhdxq) left #logicmoo: Quit: Connection closed for inactivity
17.01.19 07:46:35*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vtomzjfbvzgekfib, stoopkid: stoopkid)
17.01.19 07:46:41<dmiles> cyc: (+ 1 1)
17.01.19 08:06:34*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
17.01.19 08:06:39<dmiles> cyc: (+ 1 1)
17.01.19 08:53:41*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
17.01.19 11:57:11<dmiles> aindilis: is there particular OpenCyc clients you found do anmd dont work agaisnt your rcyc ?
17.01.19 11:57:42<dmiles> aindilis: are there particular version of OpenCyc clients you found do and dont work agaisnt your rcyc immage ?
17.01.19 11:59:09<dmiles> like some that give this error? 
                 <dmiles> 	at org.opencyc.api.ConnectionTimer.run(ConnectionTimer.java:27)
17.01.19 11:59:10<dmiles> Cyc Server ended binary mode task processor handler.
17.01.19 11:59:11<dmiles> org.opencyc.api.CfaslInputStreamClosedException: Cfasl connection closed by peer because of bad opcode: -1
                 <dmiles> 	at org.opencyc.api.CfaslInputStream.reportUnhandledCfaslOpcode(CfaslInputStream.java:301)
17.01.19 12:42:14<aindilis> I wouldn't know how to set up an rcyc image to work with opencyc
17.01.19 12:42:26<aindilis> I used the OpenCYC API to access RCyc I think, by making some modificaitons
17.01.19 12:42:30<aindilis> that's available here:
17.01.19 12:42:59<aindilis> https://github.com/aindilis/perllib/blob/master/System/Cyc/ResearchCyc/Java/CycAccess.pm
17.01.19 12:43:50<aindilis> as opposed to https://github.com/aindilis/perllib/blob/master/System/Cyc/OpenCyc/Java/CycAccess.pm
17.01.19 12:51:00<dmiles> good work btw!
17.01.19 12:54:13<aindilis> ty!
17.01.19 12:58:29<dmiles> shucks that ResearchCyc/Java/CycAccess.pm is almsot identical to what i am using
17.01.19 12:59:27<dmiles> your not using ResearchCyc_01 are you?
17.01.19 12:59:56<dmiles> Also teh EnterpriseCyc.. whuich one is that?
17.01.19 13:00:58<dmiles> the ResearchCyc_01 is very differnt from what i have now 
17.01.19 13:04:12<dmiles> ResearchCyc1_0 looks like it has more reestablising of connextions
17.01.19 16:29:10*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
17.01.19 16:29:13<dmiles> cyc: (+ 1 1)
17.01.19 17:13:12<aindilis> the EnterpriseCyc doesn't work
17.01.19 17:13:28<aindilis> the 01 is for researchcyc-1.0
17.01.19 17:13:49<aindilis> sorry I was away running errands, dmiles
17.01.19 17:29:19<dmiles> so researchcyc was the one you used with 4q ?
17.01.19 17:29:58<dmiles> assuming 4q is what you used on irc
17.01.19 17:30:25<aindilis> yeah
17.01.19 17:31:30<dmiles> ok i have to dig in deeper to figure out why is was acting liek that for me.. but almost got the preint-readable code done
17.01.19 17:31:40<aindilis> nice!!!
17.01.19 17:31:46<aindilis> I am looking forward to using this
17.01.19 17:31:52<aindilis> I feel like a lead weight
17.01.19 17:31:56<aindilis> physically
17.01.19 17:32:02<aindilis> but am going to work on wopr some
17.01.19 17:33:42<dmiles> print readably system is where package is returned like this:   '#.(|SYSTEM|::|%FIND-PACKAGE| "COMMON-LISP-USER")' 
17.01.19 17:34:57<dmiles> actually '#.(CL:FIND-PACKAGE "COMMON-LISP-USER")'
17.01.19 17:35:27<aindilis> is this a prerequisite to calling cl_cyc_eval etc?
17.01.19 17:35:33<dmiles> yes
17.01.19 17:35:35<aindilis> k
17.01.19 17:36:12<aindilis> right now I'm working on inferring types of constants from arg positions
17.01.19 17:37:08<aindilis> if you have doAttack(attacker,attack1,target), and argIsa(doAttack/3,2,attack), then infer isa(attack1,attack).
17.01.19 17:37:29<aindilis> pretty simple I would guess
17.01.19 17:37:35<aindilis> but will be nice when we have a larger ontology
17.01.19 17:37:45<aindilis> with argIsa already specified
17.01.19 17:37:58<dmiles> right on .. i was doing that as a forward chain after assert time in PFC .. but i never got to  innerArgIsa
17.01.19 17:38:28<dmiles> interArgIsa
17.01.19 17:38:49<dmiles> and argResultIsa
17.01.19 17:39:25<dmiles> sometimes there are conflicts bettween interArgIsa
17.01.19 17:40:05<dmiles> but at least they dont conflict with argIsa info
17.01.19 17:41:11<aindilis> interArgIsa is type implication between args?
17.01.19 17:41:18<dmiles> yes
17.01.19 17:41:20<aindilis> k
17.01.19 17:41:36<dmiles> (interArgIsa bodyPart 1 2 Person PersonBPart)
17.01.19 17:42:19<dmiles> (interArgIsa bodyPart 1 2 Plant PlayMateril ) etc
17.01.19 17:43:05<dmiles> (interArGenls bodyPart 1 Plant 2 VegitableMatter ) etc
17.01.19 17:43:25<aindilis> ah
17.01.19 17:55:26<dmiles> ?- cl_eval(['type-of',1],O).
17.01.19 17:55:27<PrologMUD> dmiles: % O='CL:BIT'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 17:55:58<dmiles>  ?- cl_eval(['ALL-INSTANCES','Dog'],O).
17.01.19 17:55:59<PrologMUD> dmiles: % O=['NART'(3903),'ThePrototypicalDog','Rover-5'|_4932]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 17:57:18<dmiles>  ?- cl_eval(['ALL-INSTANCES','Dog'],[_,O|_]).
                 <PrologMUD> dmiles: % O=O
17.01.19 17:57:19<PrologMUD> dmiles: %  det(Yes,1)
17.01.19 17:57:40<dmiles>  ?- cl_eval(['ALL-INSTANCES','Dog'],O), O=[_,X|_]
17.01.19 17:57:44<dmiles>  ?- cl_eval(['ALL-INSTANCES','Dog'],O), O=[_,X|_].
                 <PrologMUD> dmiles: % O=['NART'(3903),'ThePrototypicalDog','Rover-5'|_6418], X='ThePrototypicalDog'
17.01.19 17:57:45<PrologMUD> dmiles: %  det(Yes,1)
17.01.19 17:58:18<dmiles>  ?- cl_eval(['ALL-INSTANCES','Dog'],O), O=[_,X|_],cl_eval(['type-of',X],W).
                 <PrologMUD> dmiles: % O=['NART'(3903),'ThePrototypicalDog','Rover-5'|_5948], X='ThePrototypicalDog', W='CYC:CONSTANT'
17.01.19 17:58:19<PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:00:14<dmiles> the open tail of _5948 is a bug
17.01.19 18:00:36<aindilis> really?
17.01.19 18:00:54<aindilis> what if it's saying that this is all it knows there could be more?
                 <dmiles> but... interestingly i could for lists longer tha some amount left it open and have a unification cosure
17.01.19 18:00:58<dmiles> my bug 
17.01.19 18:01:13<dmiles> right i am doign what you suggested
17.01.19 18:01:16<dmiles> :)
17.01.19 18:01:37<aindilis> :)
17.01.19 18:01:59<dmiles> also i wont have to marshall as much data this way initially
17.01.19 18:03:25<dmiles> JPL has a stings==atoms bug that i is conind of sucky.. 
17.01.19 18:04:07<aindilis> :( my interlingua does too
17.01.19 18:04:17<dmiles> i can enterh makes string '"i am a string"'   or 'STRING'('i am a string').
17.01.19 18:04:28<aindilis> yeah
17.01.19 18:04:44<aindilis> but '"i am a string"' confuses with atoms of the same
17.01.19 18:05:13<dmiles> yeah
17.01.19 18:06:04<dmiles> the fastmode i am going to do 'STRING'('i am a string') i suppose
17.01.19 18:06:20<aindilis> but that involves extra introspection ;)
17.01.19 18:06:31<dmiles> slowmode is slow because how atoms works is it calls the lisp reader on the contents
17.01.19 18:06:39<aindilis> darn
17.01.19 18:07:05<dmiles> 'STRING'('i am a string') is fast since i switch on functor
17.01.19 18:07:16<aindilis> k
17.01.19 18:08:23<dmiles> what sucks in JanW fixed the bug one dirrection only
17.01.19 18:08:43<dmiles> it take two minute to fix the code othjer dirrection
17.01.19 18:08:50<aindilis> heh
17.01.19 18:08:55<dmiles> so i assume it was for backwards compantiblty
17.01.19 18:09:25<dmiles> (that madwe him descide it doesnt belong fixed)
17.01.19 18:11:30<dmiles> ?- ME= "string", cl_eval(['type-of',ME],W).
                 <PrologMUD> dmiles: % ME="string", W=['CL:SIMPLE-BASE-STRING',6|_6314]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:11:39<dmiles> ?- ME= '"string"', cl_eval(['type-of',ME],W).
                 <PrologMUD> dmiles: % ME='"string"', W=['CL:SIMPLE-BASE-STRING',6|_5180]
17.01.19 18:11:40<PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:12:05<dmiles> the direction it works
17.01.19 18:12:39<dmiles> ?- ME= '"string"', cl_eval(['symbol-name',t],W).
                 <PrologMUD> dmiles: % ME='"string"', W='T'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:12:54<dmiles> ?- cl_eval(['symbol-name',[]],W).
                 <PrologMUD> dmiles: % W='NIL'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:13:24<dmiles> returns as an Atom there
17.01.19 18:15:09<dmiles> ?- cl_eval(['symbol-name','package'],W),cl_eval(['type-of',[]],W)
                 <yesbot> procedure `prolog_eval:cl_eval(A,B)' does not exist
                 <yesbot> 2 + 2 = 5.
17.01.19 18:15:14<dmiles> ?- cl_eval(['symbol-name','package'],W),cl_eval(['type-of',[]],W).
17.01.19 18:15:41<dmiles> ?- cl_eval(['symbol-name','package'],W),cl_eval(['type-of',W],O).
17.01.19 18:16:06<dmiles> ?- cl_eval(['symbol-name','NIL'],W),cl_eval(['type-of',W],O).
17.01.19 18:16:07<PrologMUD> dmiles: % W='NIL', O='CL:NULL'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:16:32<dmiles> ?- cl_eval(['type-of',['symbol-name','NIL']],W).
                 <PrologMUD> dmiles: % W=['CL:SIMPLE-BASE-STRING',3|_9684]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:17:01* dmiles is cdocumenting that bug from himself ot fix now
17.01.19 18:17:47<dmiles> The results should ahve been the same
17.01.19 18:22:45<dmiles> ?- cl_eval(['type-of','isa'],W).
17.01.19 18:22:46<PrologMUD> dmiles: % W='CYC:CONSTANT'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:22:51<dmiles> ?- cl_eval(['type-of','isarrrdasfsw'],W).
17.01.19 18:23:07<dmiles> ?- cl_eval(['type-of','\'isarrrdasfsw'],W).
                 <PrologMUD> dmiles: % W='CL:SYMBOL'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:23:23<dmiles> ?- cl_eval(['type-of','(+ 1 1)'],W).
17.01.19 18:23:24<PrologMUD> dmiles: % W=['CL:INTEGER',0,2147483647|_4926]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:24:03<dmiles> ?- cl_eval(['type-of','\'(+ 1 1)'],W).
                 <PrologMUD> dmiles: % W='CL:CONS'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:24:17<dmiles> ?- cl_eval(['type-of','`(+ 1 1)'],W).
                 <PrologMUD> dmiles: % W='CL:CONS'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:25:01<dmiles> ?- cl_eval(['type-of','#\Null'],W).
17.01.19 18:25:10<dmiles> ?- cl_eval(['type-of','#\\Null'],W).
                 <PrologMUD> dmiles: % W='CL:CHARACTER'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:25:33<dmiles> ?- cl_eval(['#\\Null',W).
17.01.19 18:25:42<dmiles> ?- cl_eval('#\\Null',W).
                 <PrologMUD> dmiles: % W='#\\Null'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:25:58<dmiles> ?- cl_eval('`(+ 1 1)',W).
                 <PrologMUD> dmiles: % W=['CL:+',1,1|_12998]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:26:08<dmiles> ?- cl_eval('#.`(+ 1 1)',W).
17.01.19 18:26:09<PrologMUD> dmiles: % W=2
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:26:23<dmiles> ?- cl_eval('(+ 1 1)',W).
17.01.19 18:26:24<PrologMUD> dmiles: % W=2
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:26:34<dmiles> ?- cl_eval("(+ 1 1)",W).
                 <PrologMUD> dmiles: % W='(+ 1 1)'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:27:15<dmiles> ?- cl_eval([quote,'(+ 1 1)'],W).
17.01.19 18:27:16<PrologMUD> dmiles: % W='(+ 1 1)'
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:27:41<dmiles> that one was wrong
17.01.19 18:28:05<dmiles> ?- cl_eval([quote,[+,1,1]],W).
                 <PrologMUD> dmiles: % W=[+,1,1]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:28:19<dmiles> should have been the result
17.01.19 18:29:04<dmiles> ?- cl_eval(['read-from-string',"(+ 1 1)"],W).
                 <PrologMUD> dmiles: % W=[+,1,1|_6518]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:30:11* dmiles better fix that open list bug
17.01.19 18:31:53<dmiles> i looked at the code for 10 minutes and it wasnt obvious
17.01.19 18:32:19<dmiles> it is the type of bug i never even make
17.01.19 18:33:38<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/src/org/armedbear/lisp/Cons.java#L617
17.01.19 18:35:17<dmiles> here was my bug free version..    https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/f2c799b026a6373cf77215c5b37c8f81d012aaf4/platform/src/org/armedbear/lisp/Cons.java#L651
17.01.19 18:36:51<dmiles> the buggy version is tail call optimized version of that
17.01.19 18:37:44<dmiles> with a bailout at 100
17.01.19 18:39:21<dmiles> ok i see a mistake :P
17.01.19 18:39:31<dmiles> args[1] = PrologSync.toProlog(cdr, skip);   should be  args[1] = PrologSync.toProlog(next, skip);
17.01.19 18:41:58<dmiles> for this kind of code there should be people whom know how and better than me 
17.01.19 18:42:55<dmiles> ?- cl_eval(['read-from-string',"(+ 1 1)"],W).
                 <PrologMUD> dmiles: % W=[+,1,1]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:43:08<dmiles> yup that was all it was
17.01.19 18:44:45<dmiles> i like that i can fix all this without restarting cyc
17.01.19 18:45:17<dmiles> since i am on windows 7 i dont have to restart all the time like i woudl on linux
17.01.19 18:45:58<dmiles> the windows distro of hot code swapping is actually better hehe
17.01.19 18:52:17<dmiles> ?- cl_eval(['ALL-INSTANCES','Dog'],O).
17.01.19 18:52:18<PrologMUD> dmiles: % O=['NART'(3903),'ThePrototypicalDog','Rover-5']
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:52:32<dmiles> ?- cl_eval(['ALL-INSTANCES','Dog','EverythingPSC'],O).
                 <PrologMUD> dmiles: % O=['Snoopy','ScoobyDoo-FictionalCharacter','Muffet','HYP-JuvenileFnDog-27104220','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-4981756','NART'(3903),'Dash-VictoriasPet','HYP-Dog-5968235','ThePrototypicalDog','Rover-5']
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:53:01<dmiles> ?- cl_eval(['ALL-INSTANCES','Dog','InferencePSC'],O).
                 <PrologMUD> dmiles: % O=['Snoopy','ScoobyDoo-FictionalCharacter','Muffet','HYP-JuvenileFnDog-27104220','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-4981756','NART'(3903),'Dash-VictoriasPet','HYP-Dog-5968235','ThePrototypicalDog','Rover-5']
17.01.19 18:53:02<PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:53:06<dmiles> ?- cl_eval(['ALL-INSTANCES','Dog'],O).
17.01.19 18:53:07<PrologMUD> dmiles: % O=['NART'(3903),'ThePrototypicalDog','Rover-5']
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:53:20<dmiles> sometiems i cahces
17.01.19 18:53:23<dmiles> it caches
17.01.19 18:53:39<dmiles> ?- cl_eval(['ALL-INSTANCES','Dog','BaseKB'],O).
17.01.19 18:53:40<PrologMUD> dmiles: % O=['NART'(3903),'ThePrototypicalDog','Rover-5']
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:56:04<dmiles> ?- cl_eval(['ALL-GENLS','Dog','BaseKB'],O).
17.01.19 18:56:05<PrologMUD> dmiles: % O=['TerrestrialFunctioningObject','TerrestrialOrganism','Carnivore','Amniote','Homeotherm','HumanScaleObject','TopAndBottomSidedObject','LeftAndRightSidedObject','BilateralObject','FrontAndBackSidedObject','HexalateralObject','Sentient','SentientAnimal','NART'(202348),'AxisymmetricObject','BilaterallySymmetricObject','MulticellularOrganism','Coelomate','ChordataPhylum','Vertebrate','AirBreathingVertebrate','Mammal','
                 <PrologMUD> ViviparousAnimal','Eutheria','NonHumanAnimal','CarnivoreOrder','Quadruped','CanineAnimal','CanisGenus','AerobicBLO','AerobicOrganism','Agent-NonGeographical','EmbodiedAgent','PerceptualAgent','PerceptualAgent-Embodied','NART'(233711),'Organism-Whole','EukaryoticOrganism','Agent-NonArtifactual','NonFluidlikeTangibleThing','ContainerIndependentShapedThing','NART'(234304),'NART'(195972),'SolidTangibleThing','NART'(231023),'NART'(
                 <PrologMUD> 224490),'FiniteSpatialThing','OrganicMaterial','BiologyTermSearchAdmittedThing','BiologySCGTemplateAdmittedThing','NART'(237118),'BiologySCGTemplateAdmittedIndividual','BiologySCGTemplateAdmittedPartiallyTangible','System','FunctionalSystem','FixedFunctionalSystem','NaturalTangibleStuff','TemporallyContinuousThing','SpatiallyContinuousThing','SpatiallyBoundedThing','NaturalThing','Opaque','NART'(236380),'NART'(195378),'NART'(1
                 <PrologMUD> 64641),'BiologicalLivingObject','NART'(230418),'AnimalBLO','Container-Underspecified','IndividualAgent','CompositeTangibleAndIntangibleObject','PotentiallyExtrinsicallyValuable','NART'(195935),'PartiallyIntangible','PartiallyIntangibleIndividual','Agent-Underspecified','NART'(195510),'Agent-Generic','Agent-PartiallyTangible','NART'(195976),'PositiveDimensionalThing','PolyDimensionalThing','ThreeDimensionalThing','NART'(88857),
                 <PrologMUD> 'SpatialThing-NonSituational','Region-Underspecified','Landmark-Underspecified','Boundary-Underspecified','NART'(203170),'SpatialThing','SpatialThing-Localized','TemporallyExistingThing','SomethingExisting','EnduringThing-Localized','PartiallyTangible','NART'(254360),'Location-Underspecified','Trajector-Underspecified','Individual','N
17.01.19 18:56:06<PrologMUD> dmiles: ART'(222735),'TemporalThing'|<jref>(0000000022394FD0)]
                 <PrologMUD> dmiles: %  det(Yes,1)
17.01.19 18:59:03<dmiles> NonAtomicReifiableTerms require the print-readably code
17.01.19 18:59:36<dmiles> oh so do Cyc varialbes!
17.01.19 19:05:09<aindilis> oww
                 <aindilis> *wow
17.01.19 19:20:10*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
17.01.19 19:22:36*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
17.01.19 19:22:41<dmiles> cyc: (+ 1 1)
17.01.19 19:30:20<dmiles> oh i rmeembered a workarrouind i came up with a few years ago.. is where i pass a object(Jref,Ruman
17.01.19 19:30:34<dmiles> oh i rmeembered a workarrouind i came up with a few years ago.. is where i pass a o(Jref,HumanReadable)
17.01.19 19:31:32<dmiles> o(_,"i am a string")
17.01.19 19:32:44<dmiles> when commong back it comes back as  o(<jref>(0000000022394FD0),'i am a string')
17.01.19 19:33:44<dmiles> cyc side really only cases about <jref>(0000000022394FD0)
17.01.19 19:33:57<dmiles> only cares about
17.01.19 19:34:52<dmiles> JPL created a system to prevent us from typing them in /me eyes roll
17.01.19 19:35:21<aindilis> https://travis-ci.org/
17.01.19 19:35:36<dmiles> i am doing my best to not switch corm JPL to SWICLI
17.01.19 19:35:58<aindilis> well swicli would be less desirable for me from a license point of view, fwiw
17.01.19 19:36:32<dmiles> i can give swicli any liceince you desire
17.01.19 19:36:53<aindilis> well meaning it's C# which is Mono which GPL folks don't care for
17.01.19 19:37:18<dmiles> yeah it is Mono 
17.01.19 19:37:26<aindilis> they view it as part of an insideous strategy of Microsoft to "embrace, extend, extinguish"
17.01.19 19:37:46<dmiles> yet what it really was a attempt to default MS
17.01.19 19:37:53<aindilis> :)
                 <dmiles> yet what it really was a attempt to defeat MS
17.01.19 19:38:33<dmiles> i used to hang out on the GNU IRC server back when it was maintain
17.01.19 19:38:54<aindilis> well I like C# the language, but I'm a Stallmanite so I follow his advice mostly
17.01.19 19:39:19<dmiles> but yeah, i think Mono was basically abandoned :(
17.01.19 19:39:23<aindilis> not saying you are bound by this obligation :(
17.01.19 19:39:28<aindilis> :( <- about Mono
17.01.19 19:40:45<aindilis> I'm working right now on trying to get reverse geocoding working for OwnTracks
                 <dmiles> http://www.xmlvm.org/clr2jvm/  <- some day when i ahave time i am goign to run SWICLI thru that
17.01.19 19:40:55<aindilis> nice!
17.01.19 19:51:12*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
17.01.19 20:52:44*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
17.01.19 20:53:02*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
17.01.19 20:53:10<logicmoo> cyc: (+ 1 1)
17.01.19 20:54:25*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
17.01.19 20:54:30<logicmoo> cyc: (+ 1 1)
17.01.19 20:55:13*** Join: PrologMUD_ (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
17.01.19 20:55:18<logicmoo> cyc: (+ 1 1)
17.01.19 21:00:24*** Nick regain: PrologMUD_ (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) is now known as PrologMUD
17.01.19 21:14:48*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
17.01.19 21:15:11*** Netmerge: *.net *.split, split 3 minutes 8 seconds ago (Use /WL to see who's still missing)
17.01.19 21:15:17<logicmoo> cyc: (+ 1 1)
17.01.19 22:02:52*** Nick regain: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
#logicmoo> 18.01.19 13:06:48*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 7 months 24 days 17 hours 34 minutes 58 seconds ago
                 *** Names: editable-dog complex_brother stoopkid Elon_Satoshi aindilis PrologMUD dmiles yesbot michalisko @ChanServ
                 *** End of /NAMES list.
18.01.19 13:06:53<dmiles> cyc: (+ 1 1)
18.01.19 13:54:00*** Join: jbalint (~jbalint@unaffiliated/jbalint, jbalint: Jess Balint)
18.01.19 13:54:04<aindilis> heya!
18.01.19 13:54:05<dmiles> cyc: (+ 1 1)
18.01.19 14:05:23<aindilis> dmiles: do you know what sparql endpoint LarKC_CL uses?  and if it supports INSERT?
18.01.19 14:58:40<dmiles> itsd supports INSERT yes i thijnk
18.01.19 14:58:51<aindilis> cool
18.01.19 15:07:42*** Nick change: complex_brother (~radiognom@5.254.229.243) is now known as egp_
18.01.19 15:08:19*** Nick change: egp_ (~radiognom@5.254.229.243) is now known as egp__
18.01.19 15:10:46*** Quit: egp__ (~radiognom@5.254.229.243) left #logicmoo: Quit: Leaving
18.01.19 15:18:42*** Join: egp_ (~radiognom@5.254.229.243, (unauthenticated): radiognome invisible)
18.01.19 15:18:48<dmiles> cyc: (+ 1 1)
18.01.19 17:23:12*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
18.01.19 17:23:18<dmiles> cyc: (+ 1 1)
18.01.19 18:52:55*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
18.01.19 19:10:45<dmiles> i am thinking make loading the cyc.lisp file semi manditory
18.01.19 19:11:19<dmiles> it defines the the constant reader
18.01.19 19:12:30<dmiles> oh the re-reability stuff
18.01.19 19:12:35<dmiles> like..
18.01.19 19:12:36<dmiles> (defmethod print-object ((obj class) stream)
                 <dmiles>   (print1 "#." stream) 
                 <dmiles>     (write `(find-class ',(class-name obj)) :stream stream :readably t))
18.01.19 19:20:32<dmiles> for some reason i still dont know exactly the cyc code that gets calleed before every backchain 
18.01.19 19:22:38* dmiles will figure it out by installing a removal module with a breakpoint!
19.01.19 02:18:12<aindilis> how's it coming?
19.01.19 02:20:08<aindilis> dmiles
19.01.19 06:18:29*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
19.01.19 06:18:34<dmiles> cyc: (+ 1 1)
19.01.19 06:22:17*** Quit: egp_ (~radiognom@5.254.229.243) left #logicmoo: Remote host closed the connection
19.01.19 12:37:58*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
19.01.19 13:00:02<aindilis> dmiles: ping
19.01.19 14:56:25*** Quit: jbalint (~jbalint@unaffiliated/jbalint) left #logicmoo: Ping timeout: 246 seconds
19.01.19 14:59:52*** Join: jbalint (~jbalint@71-90-85-113.dhcp.ftbg.wi.charter.com, (unauthenticated): Jess Balint)
                 *** Quit: jbalint (~jbalint@71-90-85-113.dhcp.ftbg.wi.charter.com) left #logicmoo: Changing host
                 *** Join: jbalint (~jbalint@unaffiliated/jbalint, jbalint: Jess Balint)
19.01.19 14:59:57<dmiles> cyc: (+ 1 1)
19.01.19 15:39:44<Elon_Satoshi> hello
19.01.19 15:40:23<aindilis> hey
19.01.19 16:11:35*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
19.01.19 16:11:40<dmiles> cyc: (+ 1 1)
19.01.19 16:29:33<dmiles> doing good.. right now i am fixing bugs rather than adding that  Cyc calls SWI code
19.01.19 16:59:44*** Join: egp_ (~radiognom@5.254.229.243, (unauthenticated): radiognome invisible)
19.01.19 16:59:49<dmiles> cyc: (+ 1 1)
19.01.19 18:13:00*** Quit: egp_ (~radiognom@5.254.229.243) left #logicmoo: Quit: Leaving
19.01.19 18:13:21*** Join: egp_ (~radiognom@5.254.229.243, (unauthenticated): radiognome invisible)
19.01.19 18:13:26<dmiles> cyc: (+ 1 1)
19.01.19 18:14:22*** Nick change: egp_ (~radiognom@5.254.229.243) is now known as biosphere-surviv
19.01.19 18:14:34*** Nick change: biosphere-surviv (~radiognom@5.254.229.243) is now known as biosurvivdapp
19.01.19 18:15:22*** Quit: biosurvivdapp (~radiognom@5.254.229.243) left #logicmoo: Client Quit
19.01.19 18:15:54*** Join: biosurvivdapp (~radiognom@5.254.229.243, (unauthenticated): radiognome invisible)
19.01.19 18:15:59<dmiles> cyc: (+ 1 1)
19.01.19 18:46:52*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fcyjqxwvxctxwdab) left #logicmoo: Quit: Connection closed for inactivity
19.01.19 20:19:44*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
19.01.19 23:45:55*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wilvlbsfxgqesjnx, stoopkid: stoopkid)
19.01.19 23:46:00<dmiles> cyc: (+ 1 1)
20.01.19 01:46:08<stoopkid> dmiles: the more i look at the euclidean space stuff the more magical it seems to me. like for example we can bootstrap an arbitrarily close approximation to a straight line without needing a pre-existing straight-edge for reference.... even though straight lines "aren't even supposed to exist" in the real world
20.01.19 01:51:37<stoopkid> like trace a line with a ruler and then flip the ruler across the line and trace along the ruler between the same two points; a perfectly straight ruler (to whatever precision you can detect) is gonna be the one where both traces are the same line; if the ruler is crooked at all then this will be reflected in a deviation between the two curves it traces, and any curve that fits entirely between those two curves will be a
                 <stoopkid> closer approximation to a straight line
20.01.19 01:57:39<stoopkid> further this seems to be closely related to the conclusion that a "straight" line (whatever that actually means) is the minimal length curve between two points
20.01.19 02:29:17<dmiles> oh that is sort of genius with the ruler.. in other words the drawn line is perfectly straight
20.01.19 02:29:41<dmiles> just has various thickness 
20.01.19 02:30:11<dmiles> (the two drawn lines are the outside of a perfect straight lines)
20.01.19 02:30:17<dmiles> (the two drawn lines are the outside of a perfect straight line)
20.01.19 02:43:05<stoopkid> yea it's nice cause that's always kind of messed with me; how do verify that a line's "straight" without already having a straight-line to reference, and then how do you know that one's straight, without getting into seemingly overly-complex appeals to physics, optics, measuring equipment, etc... but this determines relative straightness of a line in a completely self-contained way without reference to any other object or
                 <stoopkid> extra equipment, physics assumptions, etc.. just some relatively intuitive geometry
20.01.19 02:46:15<stoopkid> this is definitely a +1 for some anti-foundationalist lines of reasoning
20.01.19 02:51:15<stoopkid> well, it doesn't actually draw a perfectly straight line just gives a self-contained way to determine whether one ruler is a better approximation of straight than another, so you can bootstrap better and better approximations without getting into a "no true scotsman" situation where you're not sure how to determine whether one approximation is better than another
20.01.19 02:56:27<stoopkid> this seems to be related to the rotational invariance of euclidean space too; i.e. there's an implicit assumption that when you flip the ruler from one side to the other you don't change its local geometry
20.01.19 03:03:44<dmiles> there was another trick i remember from school much liek this one it was a method to draw a perfect square i think
20.01.19 03:04:32<dmiles> well i think it was a method to space 4 points apart 
20.01.19 03:05:05<dmiles> that if you connected them would be a perfect square
20.01.19 03:05:24<dmiles> or perhaps it was triangle
20.01.19 03:05:59<dmiles> it shocked me i remember
20.01.19 03:06:45<dmiles> i think it required a string being used to draw a cercle
20.01.19 03:06:46<stoopkid> for a perfect triangle you can just connect 3 lines/rods of the same length; for a perfect square you can connect 4 lines/rods of the same length, and 2 diagonals of the same length
20.01.19 03:07:48<dmiles> despite he string may have wrapped arround your whatnot and ytour pencil was inaccurate
20.01.19 03:08:04<dmiles> (the angle you held the pencil)
20.01.19 03:09:18<dmiles> oh i remmber it was a way to craw a perfect right angle
20.01.19 03:10:27<stoopkid> https://www.youtube.com/watch?v=PLStY8nJYTM
20.01.19 03:10:31<dmiles> i might be exagerating about the perfection despite the of the angle of the you held the pencile
20.01.19 03:11:03<dmiles> that was it yep :)
20.01.19 03:15:21<stoopkid> http://www.math.uchicago.edu/~may/VIGRE/VIGRE2007/REUPapers/FINALFULL/Ruggeri.pdf
20.01.19 03:15:55<stoopkid> some research into cryptography based on compass & straightedge constructions
20.01.19 03:19:28<stoopkid> i'm sort of wondering what kind of cryptography exists that can be performed completely mechanically while being practical (i.e. the machine could fit on a desk and could finish the operations in a reasonable amount of time)
20.01.19 03:20:18<dmiles> its a bit like analog computing
20.01.19 03:23:00<stoopkid> similar, although the mechanical constructions could and probably would have a finite set of discrete states... although maybe not
20.01.19 03:23:28<stoopkid> the fact that you can bootstrap close approximations to straight-lines in a completely self-contained way kinda gives me a bit more confidence in the reliability of analog computing
20.01.19 03:25:33<stoopkid> we can certainly make a mechanical turing machine and do all the same crypto we currently do, but it probably wouldn't be practical in either time or machine size (although i could be wrong about that)
20.01.19 03:26:40<stoopkid> but those algorithms operate purely on bit-vectors and don't take advantage of any of the assumptions that we can take advantage of in mechanics due to being immersed in a 3D euclidean geometry
20.01.19 03:30:26<stoopkid> i'm pretty sure there aren't any absolute advantages to this, seeing as how you could simulate the mechanics on an electronic machine and likely run the simulation faster than the real thing, but i'm not really so interested in actually competing with electronic machines in an absolute sense anyway but rather just seeing if these advantages could be leveraged to at least make modern cryptography *possible* to do without an
20.01.19 03:30:27<stoopkid> electronic machine
20.01.19 04:03:24<dmiles> I found a pretty good exmaple of a CYC proof 
20.01.19 04:03:25<dmiles> http://logicmoo.org:3602/cgi-bin/cg?cb-inference-answer-full-justification&665&0&0&0
20.01.19 04:04:14<dmiles> here are the tactics it chose http://logicmoo.org:3602/cgi-bin/cg?cb-problem&665&0
20.01.19 04:06:53<dmiles> the query was "are plents bigger than golfballs"
20.01.19 04:37:48<aindilis> dmiles: ping
20.01.19 04:41:12<dmiles> pong
20.01.19 04:41:22<aindilis> how goes it?
20.01.19 04:41:49<dmiles> working on removal module functions to be able to run prolog code
20.01.19 04:42:02<aindilis> ah cool
20.01.19 04:42:19<dmiles> what are you up to?
20.01.19 04:42:35<aindilis> not much, I had a busy day earlier and wound up staying up this late for no particular reason
20.01.19 04:42:42<aindilis> let me see what I worked on
20.01.19 04:42:50<aindilis> I did some planning
20.01.19 04:42:58<aindilis> worked on sensor integration
20.01.19 04:43:03<aindilis> set up the correct working rtec-swi
20.01.19 04:43:31<aindilis> did some backup
20.01.19 04:43:55<aindilis> I honestly forget it seems like there was more
20.01.19 04:45:40<dmiles> very good rtec is workable
20.01.19 04:46:39<aindilis> yeah still having trouble figuring it out
20.01.19 04:47:14<aindilis> does EC have before(t,Phi) and after(t,Phi)?
20.01.19 04:47:24<dmiles> yes
20.01.19 04:47:31<aindilis> k that will come in handy
20.01.19 04:47:41<aindilis> for WSM
20.01.19 04:47:45<aindilis> *world state monitor
20.01.19 04:48:09<aindilis> when updating a fluent value it only knows the change happened sometime earlier
20.01.19 04:48:42<aindilis> right now I'm working on WOPR
20.01.19 04:51:55<dmiles> i like that name 
20.01.19 04:53:35<aindilis> WOPR?  from war games you prolly know, and when it's working I'm buying a Burger King Whopper to celebrate :)
20.01.19 06:34:44<aindilis> man I was getting my butt kicked trying to write the chess program
20.01.19 06:35:03<aindilis> couldn't get anything to work
20.01.19 06:39:14<dmiles> :)
20.01.19 06:55:54<dmiles> i know.. its is no smiling mater
20.01.19 08:55:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wilvlbsfxgqesjnx) left #logicmoo: Quit: Connection closed for inactivity
20.01.19 09:20:19*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
20.01.19 09:20:24<dmiles> cyc: (+ 1 1)
20.01.19 10:58:36*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
20.01.19 12:51:10*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dnwljzdvjrwcbiiw, stoopkid: stoopkid)
20.01.19 12:51:16<dmiles> cyc: (+ 1 1)
20.01.19 13:21:01*** Join: biosurvivdapp_ (~radiognom@5.254.246.87, (unauthenticated): radiognome invisible)
20.01.19 13:21:06<dmiles> cyc: (+ 1 1)
20.01.19 13:23:48*** Quit: biosurvivdapp (~radiognom@5.254.229.243) left #logicmoo: Ping timeout: 250 seconds
20.01.19 13:24:20<stoopkid> dmiles: ken thompson, "reflections on trusting trust"; https://www.archive.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf  you were the one who was telling me about "training a compiler" like this, right?
20.01.19 13:27:40<stoopkid> (page 2 in particular; the part about extending a self-hosting compiler to recognize a new escape-char pattern '\v')
20.01.19 13:33:42<aindilis> dmiles: do you have a convenient kif -> prolog converter, mine makes some silly substitutions
20.01.19 13:33:49<aindilis> I'm working with GGP-Botter
20.01.19 13:34:03<aindilis> debugging why it isn't sending moves back
20.01.19 13:34:16<aindilis> *preferably written in Prolog
20.01.19 13:42:56<aindilis> ah: http://www.swi-prolog.org/pack/list?p=s_expression
20.01.19 13:59:16<aindilis> dmiles: how do you use s_expression?
20.01.19 14:16:33<aindilis> well I got it to load but I'm pretty sure i screwed up my larkc instance
20.01.19 14:19:51<aindilis> okay deborked larkc I think
20.01.19 14:23:58<aindilis> I cannot get with_open_options(1.2.111).
20.01.19 14:25:41<aindilis> I guess it doens't exist
20.01.19 15:59:08<aindilis> dmiles: if I have [a(_5000),['X' = _5000]], how do I get a(X) written to a string?
20.01.19 15:59:10<aindilis> or atom
20.01.19 15:59:27<aindilis> er [[a(_5000)],['X' = _5000]]
20.01.19 16:06:17<aindilis> is :-(a(X),b(X),c(X)) the same as a(X) :- b(X), c(X).
                 <aindilis> ?
20.01.19 16:53:17<dmiles> ah i need to update s_expression  and with_open_options
20.01.19 16:53:48<dmiles> i moved the source of with_open_options into logicmoo_utils 
20.01.19 16:54:05<dmiles> but still i can make it work by at least updating 
20.01.19 16:55:13<dmiles> the writting of the varnames is based on instanciating the var  X with '$VAR'('X')  
20.01.19 16:58:36<dmiles> b_implode_varnames0([N=V|Vs]):- sanity(is_list(Vs)),ignore((nonvar(N),V='$VAR'(N);V=N)),b_implode_varnames0(Vs),!.
20.01.19 16:58:37<dmiles> b_implode_varnames0(_).
20.01.19 17:01:58<dmiles> :-(a(X),b(X),c(X))  is differnt than  a(X) :- b(X), c(X).
20.01.19 17:02:20<dmiles> :-(a(X), ( b(X),c(X)) )
20.01.19 17:02:32<dmiles> would be the same
20.01.19 17:03:42<dmiles> to aindilis
20.01.19 17:05:01<dmiles> stoopkid, interesting article
20.01.19 17:07:03<dmiles> well i may have mentioned in prolgo you can introduce new printf/format directives
20.01.19 17:07:46<dmiles> as well, one can define new new arritmentic operations
20.01.19 17:08:13<dmiles> also change how their existing operations work
20.01.19 17:09:07<dmiles> arround the time that ariticle came out i was writting ASM that altered itself :O
20.01.19 17:09:40<dmiles> well it would change NOPs into JSRs
20.01.19 17:09:51<dmiles> (series of NOPs)
20.01.19 17:10:43<dmiles> that was chepaer and faster than havign it make a logical desision later
20.01.19 17:11:44<dmiles> cheapoer and faster than using varialbe
20.01.19 17:13:17<dmiles> often prolog code works this way as well.. you are inserting and deleting lines code at runtime rather than updating variables
20.01.19 17:16:50<dmiles> for at least the first couple of decades of teh prolog language that was the only way possible to have variables
20.01.19 17:17:51<dmiles> portable prolog (programs that can be ran anywhere) have to still use this trick
20.01.19 17:37:22<aindilis> dmiles: I managed to get GGP-Botter to work
20.01.19 17:37:39<aindilis> that's a Prolog GGP/GDL barebones system
20.01.19 17:37:56<aindilis> the state is getting corrupted which is why I suspect it is proposing illegal moves
20.01.19 17:38:09<aindilis> but it works with the Game Server
20.01.19 17:38:31<aindilis> the next goal is to implement some chess analysis on top of the rules
20.01.19 17:38:40<aindilis> against the spirit of the GGP competition
20.01.19 17:38:52<aindilis> but my goal is to make rigorous the security ontology
20.01.19 17:39:28<aindilis> and have an analysis window which represents a high level analysis of the game state 
20.01.19 17:40:56<aindilis> by formalizing lasker's text on chess
20.01.19 17:41:56<dmiles> oh neat i didnt look into https://github.com/michalkurzeja/GGP-Botter much
20.01.19 17:42:16<aindilis> it basically works out of the box, but must be configured correctly
20.01.19 17:42:46<aindilis> also getting game server to work is hard, I have a custom set up that I use
20.01.19 17:44:18<aindilis> all I did was find the logging commands and start logging more and more until I figured out how to configure it
20.01.19 17:44:30<aindilis> maybe I'll roll a package of it
20.01.19 17:45:02<dmiles> soon you will be like me and not even bother to read docs if they exist
20.01.19 17:45:08<aindilis> hehe
20.01.19 17:45:14<aindilis> well there were no docs
20.01.19 17:45:35<aindilis> basically the problem was this, the domain I was using games.ggp.org/base Chess messed up the parser
20.01.19 17:45:40<aindilis> switching to Chess 200 basically solved that
20.01.19 17:45:50<dmiles> yeah.. i am so used to that being the case.. having docs would only slow me down
20.01.19 17:46:08<aindilis> I guess I could write some docs
20.01.19 17:46:52<aindilis> I could add a warning for when the parser messes up
20.01.19 17:46:55<dmiles> oh well yeah.. sometimes i wonder if i should spend the rest of my life writitng docs for my unducuemnted software
20.01.19 17:47:18<aindilis> I'm starting to feel like it's endgame time
20.01.19 17:47:51<aindilis> all the big projects I once wanted to take on seem to far afield for the needs of the present
20.01.19 17:48:14<aindilis> like suppositional-decomposer
20.01.19 17:48:20<aindilis> which is similar to Cyc's original praser
20.01.19 17:48:21<aindilis> *parser
20.01.19 17:50:18* aindilis is gonna watch Ender's Game to try to rekindle the passion
20.01.19 17:50:20<dmiles> last night i started to work on the 2010 code i did for Secondlife connection to CYC.. i had to since that was when i wrote a 2-way calling system i need to use between CYC and SWI
20.01.19 17:50:30<aindilis> oh wow
20.01.19 17:50:55<dmiles> . and realized the Secondlife KE is probly pretty applicable to the MUD
20.01.19 17:51:14<aindilis> I almost messed around with Vampire/FreeKBS2 interface
20.01.19 17:51:26<aindilis> awesome
20.01.19 17:51:53<aindilis> let me know if and when there's a link?
20.01.19 17:52:02<aindilis> I know I have opencog4opensim somewhere
20.01.19 17:52:04<aindilis> is taht it?
20.01.19 17:52:14<aindilis> or something like that
20.01.19 17:52:29<aindilis> opensim4opencog
20.01.19 17:52:43<dmiles> rightr now its gettign errros due to cycorp renmaming their cosntants.. but in about an hour i should be fully renamed
20.01.19 17:52:49<aindilis> cool
20.01.19 17:53:12<aindilis> I was debating trying to reboot the HPKB CYC tests that came with the teknowledge dump
20.01.19 17:53:24<dmiles> getting it running is helping me fix small bugs in lkareKC
20.01.19 17:53:29<aindilis> cool
20.01.19 17:53:54<dmiles> the Teknowledge stuff doesnt use Vampire though right?
20.01.19 17:54:11<aindilis> I don't know/think so, I was debating getting it working on CYC
20.01.19 17:54:33<aindilis> it would involve getting old constants either working or moved
20.01.19 17:54:53<dmiles> ah right sometimes that stuff is so painfull
20.01.19 17:55:04<aindilis> :(
20.01.19 17:55:20<dmiles> in the next hour i am hackign the #$contstant reader to search oldCoanstantNames again
20.01.19 17:55:38<aindilis> cool
20.01.19 17:56:10<dmiles> the idea is that we can assert multiple oldConstantNames 
20.01.19 17:56:23<dmiles> to get at least some automatic mapping
20.01.19 17:56:52<aindilis> cool
20.01.19 17:57:08<aindilis> what is an example SL KE doc?
20.01.19 17:57:12<aindilis> so I can search and find on my fs?
20.01.19 17:58:14<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/e2c/osim.lisp
20.01.19 17:58:17<aindilis> ty
20.01.19 17:58:46<dmiles> i am actualyl booting it up so ina  few it might be ready to be browesed
20.01.19 17:58:59<aindilis> oh so you're talking about CynD?
20.01.19 17:59:24<dmiles> yes
20.01.19 17:59:32<aindilis> I've wanted to see that run for a while
20.01.19 17:59:34<dmiles> but CynD hacked to run in Secondlife
20.01.19 17:59:35<aindilis> coolbeans
20.01.19 17:59:39<aindilis> ah
20.01.19 17:59:48<dmiles> (instead of Doom3/Quake4)
20.01.19 18:04:43<aindilis> GGP-Botter comes with a handy prefix to infix parser (KIF to Prolog): gdlParser.pl
20.01.19 18:05:12<dmiles> oh neat
20.01.19 18:06:09<aindilis> so GDL to GDL-Prolog
20.01.19 20:01:11*** Join: egp_ (~radiognom@5.254.246.87, (unauthenticated): radiognome invisible)
20.01.19 20:01:17<dmiles> cyc: (+ 1 1)
20.01.19 20:01:56<egp_> Hey guys, hey dmiles. What do you now use instead of opencyc?
20.01.19 20:02:40<egp_> I am thinking about searching for some replacement inference engine
20.01.19 20:03:26<egp_> as my old project was using opencyc 0.7.0b win32, now i use linux and opencyc is discontinued
20.01.19 20:03:44<egp_> now i am reanimating that project
20.01.19 20:05:25<egp_> i also saw my old code for Jamud/LogicMOO
20.01.19 20:05:41<egp_> called hutmoo. But pity, my area files are lost
20.01.19 20:07:04<egp_> there were some institute of math rooms with twisted spaces in descriptions
20.01.19 20:07:16<egp_> people were liking those rooms
20.01.19 20:07:53<egp_> they were connecting to hutmoo via the icq
20.01.19 20:10:34<egp_> i'd like to try an nlu assistant
20.01.19 20:10:39<egp_> to make it
20.01.19 20:10:48<egp_> with grokking the input
20.01.19 20:11:04<egp_> with some limited language
20.01.19 20:12:39<egp_> the proof of concept should be able to play requested music terms
20.01.19 20:22:27*** Quit: biosurvivdapp_ (~radiognom@5.254.246.87) left #logicmoo: Quit: Leaving
20.01.19 20:23:38<egp_> i also have projects with SL - but not ai ones
20.01.19 20:23:54<egp_> not ontology/logics
20.01.19 20:26:36* egp_ is checking yago
20.01.19 20:52:47<egp_> KBpedia also. both seem to be rdf/n3 corpora
20.01.19 20:52:56<egp_> i need an inference engine
20.01.19 20:54:45<egp_> https://jena.apache.org/documentation/inference/index.html
20.01.19 21:05:58<egp_> let's check Reasoner reasoner = ReasonerRegistry.getOWLReasoner(); =)
20.01.19 21:06:03<egp_> heheh
20.01.19 21:07:18<dmiles> oh neat egp_ did we meet back when you were using opencyc?
20.01.19 21:07:33<egp_> yes
20.01.19 21:07:42<dmiles> what was your nick?
                 <egp_> buguldey is my another nick
20.01.19 21:07:58<egp_> joxy or buguldey or s6 - i used plenty
20.01.19 21:08:33<egp_> my acct with opencyc 0.7.0b 2.0 4.0 is linked from kbpedia blog =))
20.01.19 21:08:39<dmiles> now mostly i use researchcyc
20.01.19 21:08:40<egp_> sf.net acct
20.01.19 21:08:52<egp_> i had it but lost
20.01.19 21:09:04<egp_> received semi-legally so no pity
20.01.19 21:09:20<egp_> opencyc exists in backups
20.01.19 21:09:31<egp_> at sf.net publically
20.01.19 21:10:20<egp_> i'd like to make some profits with this nlu assistant
20.01.19 21:10:38<egp_> like my own business
20.01.19 21:10:43<egp_> private one
20.01.19 21:10:52<dmiles> hrrm actualy i had really thought of this but the ppublic verion of rcyc we put up (comes with no KB) but one can still make assertiosn and so forth
20.01.19 21:11:21<egp_> opencyc also allows for asserts
20.01.19 21:11:33<egp_> but i need a supported software
20.01.19 21:12:28<egp_> dmiles, do you use rcyc at the job or uni?
20.01.19 21:12:49<dmiles> Jena works to.. just i cant get logical proofs back with Jena whuich i need
20.01.19 21:13:21<egp_> i could also consider opencog's pln reasoning in the future
                 <dmiles> i worked on cyc for a dayjob 20 years ago
20.01.19 21:13:47<egp_> what is a state of things at cycorp now, in short words?
20.01.19 21:14:02<egp_> did you work at cycorp?
20.01.19 21:14:24<dmiles> cycorp just trying to find their nitch
20.01.19 21:14:44<dmiles> i worked as a non-empooyee several times in the last 20 years
20.01.19 21:15:06<dmiles> that is they consulted with me 
20.01.19 21:15:17<egp_> hehe i almost entered goertzel's novamente
20.01.19 21:15:32<egp_> but he offered 0 USD and i postponed the entry =))))))
20.01.19 21:15:39<dmiles> :)
20.01.19 21:15:52<egp_> ben the joker
20.01.19 21:16:25<dmiles> i work with David Hanson and Ben seem to work together sometimes
20.01.19 21:16:27<egp_> he wrote a long, long contract with the ending of 0 usd =)
20.01.19 21:16:33<dmiles> David Hanson and Ben seem to work together sometimes
20.01.19 21:16:47<egp_> yes
20.01.19 21:16:52<dmiles> i only ever work with David Hanson though
20.01.19 21:17:12<egp_> i have read sophia is their creation, they worked both on sophia
20.01.19 21:17:17<dmiles> i'd love to see that contract sometimes
20.01.19 21:17:48<egp_> i am unsure he would like anyone to see it but it's funny
20.01.19 21:18:05<dmiles> yeah i dont want you to lose trust with anyone
20.01.19 21:19:11<dmiles> i dont know much about sophia but i did create Davids first robort
20.01.19 21:19:35<dmiles> Bina48
20.01.19 21:20:05<egp_> this contract with novamente was long, long before singularitynet.io inception
20.01.19 21:21:51<dmiles> i am using Rcyc as a prolog and lisp  code maintiance system 
20.01.19 21:22:30<dmiles> that is that Cyc's job is to keep track of what sourcecode makes up the code for the NLU/Planner/Agents stuff
20.01.19 21:23:21<dmiles> and keep track of whatever data such program(s) use
20.01.19 21:24:21<dmiles> math rooms are sort of brilliant idea
20.01.19 21:24:30<dmiles> for the MUD/MOO
20.01.19 21:24:50<egp_> i guess my next task wrt my assistant (grokbot is its codename) is implementing working owl queries as illustrated at https://jena.apache.org/documentation/inference/index.html
20.01.19 21:25:08<egp_> that was a twisted institute =)
20.01.19 21:25:25<egp_> a few rooms, actually
20.01.19 21:25:32<egp_> but lost
20.01.19 21:25:37<dmiles> originaly my idea (26 years ago) wasour mind was made up of various NPCs argueing it out and hanging out in rooms that impliciely gavfe them skills
20.01.19 21:26:32<dmiles> that is that size and load of the KB was based on what room they were in
20.01.19 21:27:27<dmiles> but anyways yeah the comedey of cwertain rooms of deep study would make it fun for humans
20.01.19 21:27:59<egp_> i also took a sld grokbot.ai
20.01.19 21:28:07<egp_> unused for now
20.01.19 21:28:29<dmiles> dont let it expire!
20.01.19 21:28:34<egp_> yup
20.01.19 21:28:37<egp_> a good name
20.01.19 21:28:49<dmiles> those peeps trying to sell me logicmoo.com now for 20k $
20.01.19 21:29:03<dmiles> (when i let it exporie:P)
20.01.19 21:30:19<dmiles> so i registered a few extra names with them like:  "fucktardsstealsthisdotcom.com"
20.01.19 21:30:55<dmiles> for them to sale back to me
20.01.19 21:31:13<egp_> my accts sometimes taken by marketers when i get rid of them
20.01.19 21:34:04<dmiles> wow logicmoo.com is only 3095$ to buy
20.01.19 21:35:17<dmiles> so .. yago it tends to have a lot of statisical data .. but at least it has Music information
20.01.19 21:36:31<dmiles> wikiData is a good thing to
20.01.19 21:36:46<egp_> what about kbpedia?
20.01.19 21:36:56<egp_> they recently opensourced
20.01.19 21:37:07<egp_> https://github.com/Cognonto/kbpedia
20.01.19 21:37:15<egp_> http://kbpedia.org/
20.01.19 21:37:35<dmiles> yeah i relaly like kbpeia that they roll it all together
20.01.19 21:38:28<egp_> i reanimate my old east project with modern available ontology engines. porting from opencyc 0.7.0b_win32
20.01.19 21:38:43<egp_> east_project
20.01.19 21:38:56<egp_> aka gandalf aka Autocoder
20.01.19 21:39:18<dmiles> awesome!
20.01.19 21:39:33<egp_> not much there - some rigid nl parsing with ontologies, tree transformations, flexible engine
20.01.19 21:45:31<egp_> would like to also insert code from my god_and_adam project as a toy behavior source
20.01.19 21:50:28<dmiles> what i've discovered the most over the years is that even when i had the research technology the most awesome it can be the part that was always the worst was the connection between the porogram and the data
20.01.19 21:50:48<dmiles> program and the data
20.01.19 21:51:16<dmiles> for example the https://docs.google.com/document/d/1rdI_f-2YnX0e2RD6rGAY57YAqzLj2xHsk36m5HT6SoM/edit
20.01.19 21:51:23<dmiles> that is the NLU thing
20.01.19 21:51:56<dmiles> it was always limited by the speed data thucking 
20.01.19 21:52:10<dmiles> thunking and marshalling 
20.01.19 21:58:10<dmiles> so my current project is about solving that issue
20.01.19 21:58:48<dmiles> in order to allow the old NLU projects to work
20.01.19 21:59:27<dmiles> hrrm this is the first time i have ever said this! 
20.01.19 21:59:54<dmiles> that is i have always let this go unsaid
20.01.19 22:00:56<dmiles> likely i have created a myth in many peoples heads like aindilis's that we need this stuff to start work
20.01.19 22:01:23<dmiles> erm that the reason to create this stuff is so we can finaly start to work
20.01.19 22:01:39<dmiles> that the technology can begin gbeing researched
20.01.19 22:01:51<dmiles> in a wayt all thaat is true
20.01.19 22:03:28<dmiles> though what i mean has gone unsaid is that i havent to _continued_ to develop things (for several years!) merely due to the infrastrute was of too slow despite beinhg theoretically ideal 
20.01.19 22:10:33<egp_> in future, i want to make inferences with true===all_inclusive_logics_estimation(estimated_term, estimation_value_term)
20.01.19 22:10:55<egp_> in tradition math logics,  estimation_value_term would be either true or false
20.01.19 22:11:58<egp_> in Goertzel's PLN logics, estimation_value_term would be (probability-and-confidence (probability p) (confidence c))
20.01.19 22:12:22<dmiles> soemthing important (at least my my thinking) is that estimation_value_term(s) must be grokable and have actualy semantics
20.01.19 22:13:09<dmiles> oh good you know about PLN (i only pretend to) so i can ask you some basic 101 questions 
20.01.19 22:13:11<egp_> they are for inference engines to be either understood or left uninterpreted
20.01.19 22:13:22<egp_> i also pretend to know about pln
20.01.19 22:13:48<egp_> i never liked such probabilistic reasoning as The Dogma
20.01.19 22:13:50<dmiles> ah damn.. well maybe this question will be easy.. they have Two values between 0-1 right?
20.01.19 22:14:18<egp_> right, p \belongs_to [0, 1]
20.01.19 22:14:33<egp_> confidence, i am unsure
20.01.19 22:14:39<dmiles> ok then what is the otehr scaled value for
20.01.19 22:14:51<egp_> i never worked with PLN - only have read their discussions a bit
20.01.19 22:15:08<dmiles> well mainly i jsut tryinmg to see how it is differnt from NARS
                 <egp_> the second value is mathematical confidence
20.01.19 22:15:23<dmiles> ok so its  turthness and confidence?
20.01.19 22:15:36<dmiles> truthness and confidence?
20.01.19 22:15:50<egp_> https://en.wikipedia.org/wiki/Confidence_interval
20.01.19 22:16:21<egp_> i am unsure do they use interval or a center of interval
20.01.19 22:16:38<egp_> not truthness. a probability
20.01.19 22:16:50<egp_> of a  estimated_term
20.01.19 22:17:06<egp_> p=1 === false
20.01.19 22:17:10<egp_> oh
20.01.19 22:17:12<egp_> err
20.01.19 22:17:15<egp_> p=1 === true
20.01.19 22:17:19<egp_> p=0 === false
20.01.19 22:17:26<dmiles> ah .. i was goign to asked you  "probability of an event such as a fact being true?"  
20.01.19 22:17:32<egp_> yes
20.01.19 22:17:37<dmiles> but right its more on the terms
                 <egp_> exactly
20.01.19 22:17:42<egp_> yes
20.01.19 22:18:17<dmiles> instead of merely sprinkles on turds they want the sprinkles to be richly colored
20.01.19 22:18:52<dmiles> sorry.. i so one day want to say that in fron tof ben
20.01.19 22:19:41<egp_> ben seems to be highly arrogant these days when he operates millions. at least very busy fulfilling promises of snet to people
20.01.19 22:19:57<dmiles> well ok.. so " estimation_value_term " .. when you look at Douglas Lenat's version of this it is interesting
20.01.19 22:20:21<egp_> what's Lenat's version of this?
20.01.19 22:20:52<dmiles> that all  estimation_value_term's need to be able to work in complex ways to each otehr
20.01.19 22:21:10<egp_> under all-inclusive-logics, i mean that est-value-term can be anything
20.01.19 22:21:20<egp_> yes yes
20.01.19 22:21:23<egp_> same here
20.01.19 22:21:26<dmiles> rather than sorting them along only 2 two intervals
20.01.19 22:21:32<egp_> they must interoperate
20.01.19 22:22:21<dmiles> yes an  "estimation_value_term" should be able to be something like "i have never looked"
20.01.19 22:22:31<egp_> yes
20.01.19 22:22:34<egp_> exactly
20.01.19 22:22:41<egp_> or "it seems"
20.01.19 22:22:46<dmiles> right
20.01.19 22:22:51<egp_> or "it seems" as est-value
20.01.19 22:23:07<dmiles>  estimation_value_term's in humans have a narative
20.01.19 22:23:29<dmiles> and those narratives can be groked and compared
20.01.19 22:23:59<dmiles> so in CYC we have proably 7  estimation_value_term
20.01.19 22:24:01<dmiles> s
20.01.19 22:24:32<egp_> this also allows for heaps of heavily contradictory sayings, as in humans
20.01.19 22:24:42<dmiles> so in CYC we have proably have arround 7 estimation_value_terms 
20.01.19 22:25:04<dmiles> but 7 isnt enough.. but its enough for the things cyc does at l3east
20.01.19 22:27:08<dmiles>   (( assumed_t(P,A,B) => -not_true_t(P,A,B) & -fallacy_t(P,A,B)  )),
                 <dmiles>            (( possible_t(P,A,B) => -not_true_t(P,A,B) & -fallacy_t(P,A,B)  )),            
                 <dmiles>            (( true_t(P,A,B) & not_true_t(P,A,B) => fallacy_t(P,A,B) )),
20.01.19 22:27:09<dmiles>            (( true_t(P,A,B) =>  -not_true_t(P,A,B) & possible_t(P,A,B) & -unknown_t(P,A,B) )),
20.01.19 22:27:34<dmiles>    (( answerable_t(P,A,B) <=> askable_t(P,A,B) & -unknown_t(P,A,B) )),
                 <dmiles>            (( askable_t(P,A,B) <=> -fallacy_t(P,A,B) )),
                 <dmiles>            (( answerable_t(P,A,B) => true_t(P,A,B) v not_true_t(P,A,B)  )),
20.01.19 22:28:37<dmiles> which are far boehond most logics
20.01.19 22:28:45<dmiles> beyond
20.01.19 22:29:35<dmiles> but right  "estimation_value_term"s are interesting
20.01.19 22:49:22<stoopkid> dmiles: so i've found that the issue with doing that training thing, from a verification perspective, is a self-hosting compiler always comes in a pair (source , binary). this training thing makes a real neat way to extend a language from inside itself, but there's a tradeoff here because the new features available in your language will correspond to more complexity in the opaque binary
20.01.19 22:51:10<stoopkid> this issue is basically, how does somebody else come along after several (or hundreds of) iterations of this process and verify that a trusting-trust attack hasn't been done against the binary ?
20.01.19 22:53:26*** Join: egp__ (~radiognom@5.254.246.87, (unauthenticated): radiognome invisible)
20.01.19 22:53:32<dmiles> cyc: (+ 1 1)
20.01.19 22:55:05*** Quit: egp_ (~radiognom@5.254.246.87) left #logicmoo: Quit: Leaving
20.01.19 22:58:32<stoopkid> there actually is a partial solution here at least; somebody had to bootstrap the original implementation of this self-hosting language as some (source_original , binary_original) pair. if we assume that at least this is trusted, and the source files for each successive version are trusted, then we can re-run the whole chain of compilations starting with binary_original as our initial version of the compiler to re-bootstrap
                 <stoopkid> all the way back to the current version of the language
20.01.19 22:59:34<dmiles> i hate to talk about turing completeness but i thiunk it might come down to how much the interpeter can and cant do
20.01.19 22:59:58<dmiles> the CPU is an interpreter as well
20.01.19 23:01:07<dmiles> but the other day i had a revelation as to whjy i think the self defining code isnt too bad that i do.. i always write two programs.. one the interpreter and two the program for that interpeer
20.01.19 23:01:46<dmiles> perect example is the printf writer i made for Marty's MUD code
20.01.19 23:02:19<dmiles> bugs that printf writter can only effect what it prints to the screen
20.01.19 23:02:56<dmiles> for exmaple it might start to mispell words or say someting obcene
20.01.19 23:03:14<dmiles> but it wont take anyhting down but the reputation of the system
20.01.19 23:03:56<dmiles> the printf writter is as turning complete as a printf writer can be
20.01.19 23:04:10<dmiles> as turing complete as a printf writer ever could be
20.01.19 23:04:25<stoopkid> there's only one turing-completeness :P
20.01.19 23:04:57<dmiles> jsut like the thing that feeds the printf writer is only as complete as it can be.. and so on
20.01.19 23:05:13<dmiles> oh these subprograms can run forever to
20.01.19 23:05:24<dmiles> for exmaple you can turn the printer to write an infinate list
20.01.19 23:05:48<dmiles> and it will run until someone turns it off
20.01.19 23:06:12<dmiles> each writer btw has to share time with other ones
20.01.19 23:07:07<dmiles> as i implemented noncooperative threading (means the threads cannt force another thread to cooperate)
20.01.19 23:07:48<dmiles> though i guess the issue here is bugs
20.01.19 23:07:59<dmiles> yes i cant really stop buggy printfs
20.01.19 23:09:41<stoopkid> there's no problem with self-defining code, per se, that's not really the issue (also i should note that in the context of compilers i can't really think of any situation where a compiler should infloop), in fact it actually seems maybe critical to be able to bootstrap a language in itself and seems also to even be a relatively clean design pattern for that purpose. the issue is rather how to analyze & maintain these
                 <stoopkid> self-hosting systems
20.01.19 23:15:34<stoopkid> there's definitely not just one answer there, the goal being how can somebody actually *personally* be assured that some binary purported to implement the current version of the language is actually correctly implemented? under the real-world constraints that the binary for the current version might be huge and obscure, and might be the result of 100s of iterations of the self-modification process (meaning 100s of source
                 <stoopkid> files to trace through to figure out the connection between the current version and the original <source,binary> pair)
20.01.19 23:16:16<stoopkid> (and also given that you're allowed to at least assume the underlying hardware is correct)
20.01.19 23:26:36<stoopkid> so ex. you have hw <- (source1, binary1) <- ... 100s of iterations of (source,binary) pairs ... <- (source_current, binary_current)
20.01.19 23:27:01<stoopkid> out of that, you understand and trust: hw, source1, binary1, and source_current
20.01.19 23:29:59<stoopkid> so the question is basically, under the assumption of trust in these things (and potentially some extra component X assumed to actually be understandable; let's say a formal verification system for example, but let's assume that's overkill), is there a process by which somebody can verify the correctness of binary_current, without having to manually verify it or manually verify the "correctness" of the "... 100s of
                 <stoopkid> iterations of self-modifications..." ?
20.01.19 23:47:03<dmiles> would the verification be any hader if you waited for several modification versions later?
20.01.19 23:47:22<dmiles> would the verification be any _harder_ if you waited for several modification versions later?
20.01.19 23:47:39<dmiles> than if you did a verification after each modification?
20.01.19 23:49:18<dmiles> Cycorp thought the answer was yes.. so after every modification they spent a second running it to make sure it worked
20.01.19 23:49:56<dmiles> i mean at each KB change they ran an abnormality checker
20.01.19 23:50:10<dmiles> this went on until year 2000
20.01.19 23:50:29<dmiles> however its been turn off since
20.01.19 23:50:44<stoopkid> sure, the developers should be trying to verify every step of the way; but now say somebody else comes along
20.01.19 23:51:39<dmiles> i turned it back on fgor me .. but now it would take me months/years to ever trust cyc again for what other peopel have done.. in fact we have tons of stuff that would fail!
20.01.19 23:52:38<dmiles> nut everyone *thought* it ber easy to chack at any time
20.01.19 23:52:52<dmiles> nut everyone *thought* it would be easy to check at any time
20.01.19 23:53:21<dmiles> at least in CYC the order the assertion go in change everyhtinhg
20.01.19 23:53:47<dmiles> one year Lenat considreed paying someone to spend a year tryign to write a program that could reload CYC 
20.01.19 23:53:58<dmiles> (reload CYC in a non failuing order)
20.01.19 23:54:18<dmiles> We can relaoad cyc we just dont verify anyhting since it supposedly already was
20.01.19 23:55:53<stoopkid> hrm, is cyc self-hosting?
20.01.19 23:56:22<dmiles> 578.70370 Days
20.01.19 23:56:33<dmiles> is how long it take to verify it :(
20.01.19 23:56:59<dmiles> CycL is a datalog language
20.01.19 23:57:21<dmiles> that is written in a datalog in datalog
20.01.19 23:58:05<dmiles> what the program is instructed to do is based on what that datalog says it should do
20.01.19 23:58:55<dmiles> and that datalog is deduced based on more deduced datalog
20.01.19 23:59:30<dmiles> so ion that way it is self hosted
21.01.19 00:01:24<egp__> dmiles, i think i will (at least) temporarily stay on opencyc 2.0 or 4.0
21.01.19 00:03:19<dmiles> some peopel thing 0.7 was still the best
21.01.19 00:03:47<egp__> i need it for linux, i don't have
21.01.19 00:03:50<dmiles> teh thing of it is thooguh if you want the RDF you need to pick a later one
21.01.19 00:04:07<egp__> i want inference. regardless of tech
21.01.19 00:04:15<dmiles> wqhere can i download a 4.0 btw?
21.01.19 00:04:54<dmiles> n/m found it
21.01.19 00:05:35* dmiles seeing if it was JRTL or CRTL
21.01.19 00:06:01<dmiles> neat its a JRTL
21.01.19 00:06:05<egp__> dmiles, here's my backup https://sourceforge.net/projects/opencyc-backups/
21.01.19 00:06:33<egp__> https://sourceforge.net/projects/opencyc-backups/files/
21.01.19 00:06:42<egp__>  opencyc-0.7.0b	2016-05-08		3
                 <egp__>  opencyc-4.0	2014-12-31		7
                 <egp__>  opencyc-2.0	2014-12-31		
21.01.19 00:07:02<egp__> Home / opencyc-4.0
                 <egp__> Name	Modified	Size	Downloads / Week
                 <egp__> Parent folder
                 <egp__> opencyc-4.0-windows.zip	2014-12-31	193.0 MB	3
                 <egp__> opencyc-4.0-README	2014-12-31	3.0 kB	0
21.01.19 00:07:03<egp__> opencyc-4.0-linux.tgz	2014-12-31	191.5 MB	
21.01.19 00:07:31<dmiles> ahah.. you are the maintainere :<egp_> buguldey is my another nickP  
21.01.19 00:07:39<egp__> yes
21.01.19 00:08:19<egp__> my backup is referred from kbpedia's http://cognonto.com/resources/opencyc/ =)
21.01.19 00:09:46<egp__> we need to copy it into more clouds in case of sf.net's shutdown
21.01.19 00:09:52<egp__> for case
21.01.19 00:12:02<dmiles> http://pdkb.org/wiki/index.php/Main_Page
21.01.19 00:12:45<dmiles> didnt know if you knew this is oen of our historical sites to
21.01.19 00:13:21<dmiles> at least it is important to him to preserve this part of hiostpory and docs
21.01.19 00:26:40<egp__> heh. github doesn't allow for files > 100m
                 <egp__> git push
                 <egp__> Counting objects: 15, done.
21.01.19 00:26:41<egp__> Delta compression using up to 8 threads.
                 <egp__> Compressing objects: 100% (15/15), done.
21.01.19 00:26:42<egp__> Writing objects: 100% (15/15), 817.64 MiB | 6.76 MiB/s, done.
21.01.19 00:26:44<egp__> Total 15 (delta 2), reused 0 (delta 0)
21.01.19 00:26:46<egp__> remote: Resolving deltas: 100% (2/2), done.
21.01.19 00:26:48<egp__> remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
21.01.19 00:26:53<egp__> remote: error: Trace: c997179329ec05a31ee457ccaa0fea99
21.01.19 00:26:55<egp__> remote: error: See http://git.io/iEPt8g for more information.
21.01.19 00:26:57<egp__> remote: error: File 2.0/opencyc-2.0-linux.tgz is 210.62 MB; this exceeds GitHub's file size limit of 100.00 MB
21.01.19 00:27:00<egp__> remote: error: File 2.0/opencyc-2.0-win64.zip is 211.58 MB; this exceeds GitHub's file size limit of 100.00 MB
21.01.19 00:27:03<egp__> remote: error: File 4.0/opencyc-4.0-linux.tgz is 182.64 MB; this exceeds GitHub's file size limit of 100.00 MB
21.01.19 00:27:08<egp__> remote: error: File 4.0/opencyc-4.0-windows.zip is 184.09 MB; this exceeds GitHub's file size limit of 100.00 MB
21.01.19 00:27:11<egp__> remote: error: File 2.0/opencyc-2.0-win32.zip is 211.58 MB; this exceeds GitHub's file size limit of 100.00 MB
21.01.19 00:27:14<egp__> To https://github.com/openmindproject/opencyc-backups.git
21.01.19 00:27:16<egp__>  ! [remote rejected] master -> master (pre-receive hook declined)
21.01.19 00:27:18<egp__> error: failed to push some refs to 'https://github.com/openmindproject/opencyc-backups.git'
21.01.19 00:27:20<egp__> Ok
21.01.19 00:51:59<dmiles> here is example of an error i was taliking aobut ealier
                 <dmiles> Initializing Reformulator Rules
21.01.19 00:52:00<dmiles>  [... 10%.... 20%Warning: Encountered (#$EvaluateSubLFn (#$ExpandSubLFn (NIL) (RTP-GENERATE-MADLIBS 'ARG1 'ARG2))) which is not a CYCL-EXPRESSION.  Skipping the reformulator rule #<AS:(#$expansion #$ParserMadLibsFn (#$EvaluateSubLFn (#$ExpandSubLFn (NIL) (RTP-GENERATE-MADLIBS ':ARG1 ':ARG2)))):#$TemplateParsingMt>.
21.01.19 00:52:01<dmiles> .Warning: Encountered (#$typePlaysFunctionalRoleInType-Expect ?VAR1 ?VAR2 ?VAR3) which is not a CYCL-EXPRESSION.  Skipping the reformulator rule #<AS:(#$expansion #$typePlaysFunctionalRoleInType-Expect (#$implies (#$isa ?SYSTEM :ARG3) (#$expected-ToBe (#$thereExists ?AGENT (#$and (#$isa ?AGENT :ARG1) (:ARG2 ?SYSTEM ?AGENT)))))):#$FunctionalRoleAnalysisMt>.
21.01.19 00:52:55<dmiles> this issue is that  (RTP-GENERATE-MADLIBS 'ARG1 'ARG2)  is not a CycL Expression.. but at the time it was assert it was    CYCL-EXPRESSION 
21.01.19 00:54:00<egp__> yay. great. installed github large files storage https://git-lfs.github.com/ and now uploaded ok
21.01.19 00:54:30<dmiles> thnkas i ddint know about git-lfs
21.01.19 00:55:19<egp__> here's a new backup (a mirror of the one at sf.net)
21.01.19 00:55:20<egp__> https://github.com/openmindproject/opencyc-backups
21.01.19 00:56:34<egp__> one needs to re-add, re-commit all large files and re-push
21.01.19 00:56:48<egp__> after git lfs installation
21.01.19 00:58:52<egp__> git push
21.01.19 00:58:53<egp__> Uploading LFS objects: 100% (8/8), 1.1 GB | 5.0 MB/s, done                                                                                                                                                         
                 <egp__> Counting objects: 14, done.
                 <egp__> Delta compression using up to 8 threads.
21.01.19 00:58:55<egp__> Compressing objects: 100% (13/13), done.
21.01.19 00:58:57<egp__> Writing objects: 100% (14/14), 1.69 KiB | 1.69 MiB/s, done.
21.01.19 00:58:59<egp__> Total 14 (delta 0), reused 0 (delta 0)
21.01.19 00:59:01<egp__> To https://github.com/openmindproject/opencyc-backups.git
21.01.19 00:59:03<egp__>    8104bdd..49ba326  master -> master
21.01.19 00:59:05<egp__> Ok
21.01.19 01:41:43<egp__> installed opencyc 4.0
21.01.19 01:41:46<egp__> linux
21.01.19 02:01:24<egp__> hmm don't know how to store world image to disk
21.01.19 02:01:42<egp__> it forgets all new asserted/created data
21.01.19 02:08:33<egp__> will now try jena
21.01.19 02:08:58<egp__> (write-image "world-egp-cyc") didn't work at opencyc4.0
21.01.19 02:09:17<egp__> it was working at opencyc 0.7.0b
21.01.19 02:10:53<egp__> or maybe pln
21.01.19 02:10:58<egp__> not jena
21.01.19 02:44:47<dmiles> what error does opencyc4.0 give with a write-image ?
21.01.19 02:45:14<dmiles> not emplemented excepetion?
21.01.19 02:45:34<dmiles> (or undefined ? )
21.01.19 06:50:29<egp__> world-egp-cyc 0 bytes
21.01.19 06:50:48<egp__> error i need to try again
21.01.19 06:52:51<egp__> eternal stack trace
21.01.19 06:52:52<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
                 <egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
                 <egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall(Functions.java:74)
                 <egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:414)
21.01.19 06:52:53<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:198)
21.01.19 06:52:55<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
21.01.19 06:52:57<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
21.01.19 06:59:01<egp__> trying to extract the full trace
21.01.19 07:02:35<egp__> i put the following to stdin of cyc java
21.01.19 07:02:36<egp__> cat stdin 
21.01.19 07:02:37<egp__> (write-image "world-egp-cyc")
                 <egp__> (halt-cyc-image)
21.01.19 07:03:16<egp__> the log is:
21.01.19 07:03:21<egp__> (stdout)
21.01.19 07:03:22<egp__> HTTP server listening on port 3602.  Connect via URL http://i7sn1:3602/cgi-bin/cg?cb-start
                 <egp__> Ready for services.
                 <egp__> Total memory allocated to VM: 7281MB.
                 <egp__> Memory currently used: 1032MB.
21.01.19 07:03:23<egp__> Memory currently available: 6248MB.
21.01.19 07:03:25<egp__> CYC(1): Initial Lisp Listener Exiting Now
21.01.19 07:03:27<egp__> Exception in thread "SubL Thread #1" java.lang.StackOverflowError
21.01.19 07:03:29<egp__>         at java.security.AccessController.doPrivileged(Native Method)
21.01.19 07:03:31<egp__>         at java.io.BufferedWriter.<init>(BufferedWriter.java:109)
21.01.19 07:03:33<egp__>         at java.io.BufferedWriter.<init>(BufferedWriter.java:88)
21.01.19 07:03:35<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException.getStringForException(SubLException.java:195)
21.01.19 07:03:40<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:403)
21.01.19 07:03:42<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:198)
21.01.19 07:03:44<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
21.01.19 07:03:46<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
21.01.19 07:03:49<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall(Functions.java:74)
21.01.19 07:03:53<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:414)
21.01.19 07:03:55<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:198)
21.01.19 07:03:57<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
21.01.19 07:03:59<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
21.01.19 07:04:02<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall(Functions.java:74)
21.01.19 07:04:05<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:414)
21.01.19 07:04:08<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:198)
21.01.19 07:04:10<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
21.01.19 07:04:12<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
21.01.19 07:04:15<egp__> etc
21.01.19 07:04:17<egp__> tail -f stdout.log 
21.01.19 07:04:19<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:414)
21.01.19 07:04:23<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:198)
21.01.19 07:04:25<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
21.01.19 07:04:27<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
21.01.19 07:04:29<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall(Functions.java:74)
21.01.19 07:04:31<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:414)
21.01.19 07:04:33<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:198)
21.01.19 07:04:35<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
21.01.19 07:04:39<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
21.01.19 07:04:41<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall(Functions.java:74)
21.01.19 07:05:00<egp__> and cyc seems to be hanged up
21.01.19 07:05:42<egp__> cat stderr.log 
                 <egp__> Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
21.01.19 07:05:56<egp__> java -version
                 <egp__> java version "1.8.0_192"
                 <egp__> Java(TM) SE Runtime Environment (build 1.8.0_192-b12)
                 <egp__> Java HotSpot(TM) 64-Bit Server VM (build 25.192-b12, mixed mode)
21.01.19 07:07:10<egp__> ls -lh |grep egp
                 <egp__> -rw-rw-r-- 1 user user    0 янв 21 15:00 world-egp-cyc
                 <egp__> Ok
21.01.19 07:09:01<egp__> OpenCyc 4.0 has been tested with the following Java implementations
                 <egp__>  (*) OpenJDK 1.6 IcedTea6 1.11.1
21.01.19 07:09:02<egp__>  (*) OpenJDK 1.7 IcedTea7  2.1.1
                 <egp__>  (*) Oracle/Sun JDK 1.6 u32
                 <egp__>  (*) Oracle/Sun JDK 1.7 u4
                 <egp__>  (*) IBM Java 1.6 u10
21.01.19 07:09:05<egp__>  (*) IBM Java 1.7 u3
21.01.19 07:09:10<egp__> i might try one of these
21.01.19 07:09:59<dmiles> it might be that the StackOverflowError is caused by needed to allocarte differtly on the 1.8 JVM
21.01.19 07:10:14* dmiles gets you the options you want
21.01.19 07:11:10<dmiles> -server -d64 -Xms5000m -Xmx8000m -XX:ReservedCodeCacheSize=96m  -XX:+DoEscapeAnalysis -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XshowSettings:vm 
21.01.19 07:12:05<dmiles> co get rid of everyhting besides the classpath
21.01.19 07:13:32<dmiles> i just mention that so you know to get rid of the -D anmd -XX opetions
21.01.19 07:16:16<dmiles> jynx.. i am hacking that code riht now to fix it so it can load worlds that are on read-only filesystem LO
21.01.19 07:16:48<egp__> openjdk 11 shows different error on write image
21.01.19 07:16:49<egp__> export PATH=~/bin2/java-jdk/openjdk/11.0.1_linux_x64_bin/jdk-11.0.1/bin/:$PATH
21.01.19 07:17:07<egp__> head server/cyc/run/std*
21.01.19 07:17:08<egp__> ==> server/cyc/run/stderr.log <==
                 <egp__> OpenJDK 64-Bit Server VM warning: Ignoring option MaxPermSize; support was removed in 8.0
                 <egp__> Exception in thread "SubL Thread #1" java.lang.ExceptionInInitializerError
                 <egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Eval.<clinit>(Eval.java:351)
                 <egp__> 	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
21.01.19 07:17:10<egp__> 	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1042)
21.01.19 07:17:12<egp__> 	at java.base/jdk.internal.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:43)
21.01.19 07:17:15<egp__> 	at java.base/jdk.internal.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:186)
21.01.19 07:17:17<egp__> 	at java.base/java.lang.reflect.Field.acquireFieldAccessor(Field.java:1105)
21.01.19 07:17:19<egp__> 	at java.base/java.lang.reflect.Field.getFieldAccessor(Field.java:1086)
21.01.19 07:17:23<egp__> 	at java.base/java.lang.reflect.Field.get(Field.java:418)
21.01.19 07:17:25<egp__> ==> server/cyc/run/stdin <==
21.01.19 07:17:27<egp__> (write-image "world-egp-cyc")
21.01.19 07:17:29<egp__> (halt-cyc-image)
21.01.19 07:17:31<egp__> ==> server/cyc/run/stdout.log <==
21.01.19 07:17:33<egp__> Listening for transport dt_socket at address: 8889
21.01.19 07:17:35<egp__> Starting Cyc.
21.01.19 07:17:39<egp__> Initial Lisp Listener Exiting Now
21.01.19 07:17:41<egp__> Ok
21.01.19 07:17:43<egp__> java -version
21.01.19 07:17:45<egp__> openjdk version "11.0.1" 2018-10-16
21.01.19 07:17:47<egp__> OpenJDK Runtime Environment 18.9 (build 11.0.1+13)
21.01.19 07:17:49<egp__> OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)
21.01.19 07:17:53<egp__> Ok
21.01.19 07:17:57<egp__> cat server/cyc/run/stderr.log 
21.01.19 07:17:59<egp__> OpenJDK 64-Bit Server VM warning: Ignoring option MaxPermSize; support was removed in 8.0
21.01.19 07:18:01<egp__> Exception in thread "SubL Thread #1" java.lang.ExceptionInInitializerError
21.01.19 07:18:03<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Eval.<clinit>(Eval.java:351)
21.01.19 07:18:05<egp__> 	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
21.01.19 07:18:09<egp__> 	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1042)
21.01.19 07:18:11<egp__> 	at java.base/jdk.internal.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:43)
21.01.19 07:18:14<egp__> 	at java.base/jdk.internal.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:186)
21.01.19 07:18:16<egp__> 	at java.base/java.lang.reflect.Field.acquireFieldAccessor(Field.java:1105)
21.01.19 07:18:18<egp__> 	at java.base/java.lang.reflect.Field.getFieldAccessor(Field.java:1086)
21.01.19 07:18:20<egp__> 	at java.base/java.lang.reflect.Field.get(Field.java:418)
21.01.19 07:18:24<egp__> 	at com.cyc.tool.subl.util.SubLFiles.initialize(SubLFiles.java:71)
21.01.19 07:18:26<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLMain.initializeSubL(SubLMain.java:107)
21.01.19 07:18:28<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLMain$2.safeRun(SubLMain.java:497)
21.01.19 07:18:30<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess.run(SubLProcess.java:123)
21.01.19 07:18:32<egp__> 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
21.01.19 07:18:34<egp__> 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
21.01.19 07:18:38<egp__> 	at java.base/java.lang.Thread.run(Thread.java:834)
21.01.19 07:18:40<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread.run(SubLThread.java:109)
21.01.19 07:18:42<egp__> Caused by: java.lang.ClassCastException: class jdk.internal.loader.ClassLoaders$AppClassLoader cannot be cast to class java.net.URLClassLoader (jdk.internal.loader.ClassLoaders$AppClassLoader and java.net.URLClassLoader are in module java.base of loader 'bootstrap')
21.01.19 07:18:46<egp__> 	at com.cyc.tool.subl.util.IsolatedClassLoader.<clinit>(IsolatedClassLoader.java:37)
21.01.19 07:18:48<egp__> 	... 16 more
21.01.19 07:18:50<egp__> Ok
21.01.19 07:18:54<egp__> so it's jdk version mismatch
21.01.19 07:19:18<dmiles> i genrally run everyithing on 8
21.01.19 07:19:36<dmiles> 9 thru 11 couse other bugs for me
21.01.19 07:20:53<dmiles> it be good to see those 15 more though
21.01.19 07:21:00<dmiles> canj pastebin perhaps
21.01.19 07:22:41<egp__> 16 more is printed by jre, not me
21.01.19 07:22:48<dmiles> your startup in teh run_cyc.sh is  java -server -Xms5g -Xmx8g -XX:MaxPermSize=256m -XX:+AggressiveOpts -XX:+UseParallelGC -XX:+UseBiasedLocking -XX:+UseFastAccessorMethods -XX:-UseSpinning -XX:PreBlockSpin=10 -XX:+UseCompressedOops -cp %CLASSPATH% com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLMain %BACKGROUND% -f %INIT_FORM% ?
                 <egp__> this is THE full trace
21.01.19 07:22:52<egp__> Unrecognized option: -d64
                 <egp__> Error: Could not create the Java Virtual Machine.
                 <egp__> Error: A fatal exception has occurred. Program will exit.
21.01.19 07:23:33<dmiles> oops .. i passed the win32 version but your is basicalyl the same?
21.01.19 07:23:58<egp__> tail ../server/cyc/run/bin/cyc-runner.sh
21.01.19 07:23:59<egp__> echo "Starting Cyc with command"
                 <egp__> echo "java ${BIT_FLAG} ${SERVER_FLAG} -Xms${MIN_HEAP} -Xmx${MAX_HEAP} ${CODE_CACHE_FLAG} ${PERM_SIZE_FLAG} \
                 <egp__> ${EA_FLAG} ${CM_FLAG} ${PGC_FLAG} ${FAST_OPTS_FLAG} ${AGENT_LIB_FLAG} ${EXTRA_OPTIONS} \
                 <egp__> ${LOG_FLAG} ${ASSERTS_FLAG} -cp ${CLASSPATH} ${MAIN_CLASS} -f ${INIT_FORM} $@"
                 <egp__> echo > stdin
21.01.19 07:24:00<dmiles> for these startup options you need to use jdk 1.8
21.01.19 07:24:01<egp__> echo '(write-image "world-egp-cyc")' >> stdin
21.01.19 07:24:03<egp__> echo '(halt-cyc-image)' >> stdin
21.01.19 07:24:05<egp__> cat stdin | java -server -d64 -Xms5000m -Xmx8000m -XX:ReservedCodeCacheSize=96m  -XX:+DoEscapeAnalysis -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XshowSettings:vm  -cp "${CLASSPATH}" ${MAIN_CLASS} -f "${INIT_FORM}" "$@" > stdout.log 2> stderr.log
21.01.19 07:24:11<egp__> i have linux 64 bit
21.01.19 07:24:17<egp__> ok trying with 1.8
21.01.19 07:24:33<egp__> java -version
                 <egp__> java version "1.8.0_192"
                 <egp__> Java(TM) SE Runtime Environment (build 1.8.0_192-b12)
                 <egp__> Java HotSpot(TM) 64-Bit Server VM (build 25.192-b12, mixed mode)
                 <egp__> Ok
21.01.19 07:24:39<dmiles> perfect
21.01.19 07:24:56* dmiles is usign that exact version
21.01.19 07:25:59<egp__> cat stderr.log 
                 <egp__> VM settings:
                 <egp__>     Min. Heap Size: 4.88G
                 <egp__>     Max. Heap Size: 7.81G
                 <egp__>     Ergonomics Machine Class: server
                 <egp__>     Using VM: Java HotSpot(TM) 64-Bit Server VM
21.01.19 07:26:01<egp__> Ok
21.01.19 07:26:14<egp__> cat stdin 
21.01.19 07:26:15<egp__> (write-image "world-egp-cyc")
                 <egp__> (halt-cyc-image)
                 <egp__> Ok
21.01.19 07:26:35<dmiles> oh , it cleamed ot writ ethe image?
21.01.19 07:26:38<dmiles> claimed
21.01.19 07:27:06<egp__> CYC(1): Initial Lisp Listener Exiting Now
                 <egp__> Exception in thread "SubL Thread #1" java.lang.StackOverflowError
                 <egp__>         at java.security.AccessController.doPrivileged(Native Method)
                 <egp__>         at java.io.BufferedWriter.<init>(BufferedWriter.java:109)
                 <egp__>         at java.io.BufferedWriter.<init>(BufferedWriter.java:88)
21.01.19 07:27:07<dmiles> ls -l world-egp-cyc*
21.01.19 07:27:08<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException.getStringForException(SubLException.java:195)
21.01.19 07:27:11<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:403)
21.01.19 07:27:13<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:198)
21.01.19 07:27:15<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
21.01.19 07:27:17<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
21.01.19 07:27:20<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall(Functions.java:74)
21.01.19 07:27:24<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:414)
21.01.19 07:27:26<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:198)
21.01.19 07:27:28<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:166)
21.01.19 07:27:30<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.type.symbol.AbstractSubLSymbol.getFunc(AbstractSubLSymbol.java:106)
21.01.19 07:27:33<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions.funcall(Functions.java:74)
21.01.19 07:27:35<egp__>         at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.possiblyCallErrorHandler(Errors.java:414)
21.01.19 07:27:49<egp__> ls -l ../server/cyc/run/world-egp-cyc*
                 <egp__> -rw-rw-r-- 1 user user 0 янв 21 15:00 ../server/cyc/run/world-egp-cyc
21.01.19 07:27:58<egp__> 0 bytes
21.01.19 07:28:42<dmiles> ah.. well .. we'll need to talk to DWhitten to see what he does to save off his 4.0
21.01.19 07:29:07<dmiles> though i think he might be doing something with trasncript files
21.01.19 07:29:49<dmiles> also .. totally accidently related.. but aindilis and I are probably going to fix write-image soon
21.01.19 07:29:56<dmiles> like in the next two months
21.01.19 07:30:57<egp__> tail -n1 ../server/cyc/run/bin/cyc-runner.sh
21.01.19 07:30:58<egp__> cat stdin | java -server -d64 -Xms5000m -Xmx8000m -XX:ReservedCodeCacheSize=96m  -XX:+DoEscapeAnalysis -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XshowSettings:vm  -cp "${CLASSPATH}" ${MAIN_CLASS} -f "${INIT_FORM}" "$@" > stdout.log 2> stderr.log
                 <egp__> Ok
21.01.19 07:32:13<dmiles> you might try again on your nerwer JVM with the -d64 gone
21.01.19 07:32:21<dmiles> but not htinking it will work
21.01.19 07:33:52<egp__> java -version
                 <egp__> openjdk version "11.0.1" 2018-10-16
                 <egp__> OpenJDK Runtime Environment 18.9 (build 11.0.1+13)
                 <egp__> OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)
                 <egp__> Ok
21.01.19 07:35:11<egp__> cat stderr.log 
21.01.19 07:35:12<egp__> OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
                 <egp__> VM settings:
                 <egp__>     Min. Heap Size: 4.88G
                 <egp__>     Max. Heap Size: 7.81G
21.01.19 07:35:13<egp__>     Using VM: OpenJDK 64-Bit Server VM
21.01.19 07:35:16<egp__> Exception in thread "SubL Thread #1" java.lang.ExceptionInInitializerError
21.01.19 07:35:17<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.Eval.<clinit>(Eval.java:351)
21.01.19 07:35:19<egp__> 	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized0(Native Method)
21.01.19 07:35:23<egp__> 	at java.base/jdk.internal.misc.Unsafe.ensureClassInitialized(Unsafe.java:1042)
21.01.19 07:35:26<egp__> 	at java.base/jdk.internal.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:43)
21.01.19 07:35:28<egp__> 	at java.base/jdk.internal.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:186)
21.01.19 07:35:31<egp__> 	at java.base/java.lang.reflect.Field.acquireFieldAccessor(Field.java:1105)
21.01.19 07:35:32<egp__> 	at java.base/java.lang.reflect.Field.getFieldAccessor(Field.java:1086)
21.01.19 07:35:34<egp__> 	at java.base/java.lang.reflect.Field.get(Field.java:418)
21.01.19 07:35:38<egp__> 	at com.cyc.tool.subl.util.SubLFiles.initialize(SubLFiles.java:71)
21.01.19 07:35:40<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLMain.initializeSubL(SubLMain.java:107)
21.01.19 07:35:43<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLMain$2.safeRun(SubLMain.java:497)
21.01.19 07:35:44<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess.run(SubLProcess.java:123)
21.01.19 07:35:46<egp__> 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
21.01.19 07:35:48<egp__> 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
21.01.19 07:35:50<egp__> 	at java.base/java.lang.Thread.run(Thread.java:834)
21.01.19 07:35:54<egp__> 	at com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread.run(SubLThread.java:109)
21.01.19 07:35:56<egp__> Caused by: java.lang.ClassCastException: class jdk.internal.loader.ClassLoaders$AppClassLoader cannot be cast to class java.net.URLClassLoader (jdk.internal.loader.ClassLoaders$AppClassLoader and java.net.URLClassLoader are in module java.base of loader 'bootstrap')
21.01.19 07:36:00<egp__> 	at com.cyc.tool.subl.util.IsolatedClassLoader.<clinit>(IsolatedClassLoader.java:37)
21.01.19 07:36:02<egp__> 	... 16 more
21.01.19 07:36:04<egp__> Ok
21.01.19 07:36:08<egp__> this is better than stack overflow
21.01.19 07:36:23<dmiles> ah.. i know exactly the problkem 
21.01.19 07:36:24<egp__> but unsolvable w/o cyc java source code
21.01.19 07:37:00<dmiles> since i was the one responsble for adding com.cyc.tool.subl.util.IsolatedClassLoader :P
21.01.19 07:37:46<dmiles> who would have known the JVM would change away from URLClasslaoders
21.01.19 07:38:13<egp__> cat stdout.log 
21.01.19 07:38:14<egp__> Starting Cyc.
                 <egp__> Initial Lisp Listener Exiting Now
                 <egp__> Ok
21.01.19 07:38:45<egp__> oraclejdk 1.8 behaves better
21.01.19 07:39:54<dmiles> i am using jdk for the foreseeable future anyways
21.01.19 07:40:01<dmiles> i am using jdk 1.8 for the foreseeable future anyways
21.01.19 07:40:15<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/src/com/cyc/tool/subl/util/IsolatedClassLoader.java#L84    <- the source of the file btw
21.01.19 07:40:50<dmiles> i didnt mean to hightlight line 84 there
21.01.19 07:45:44<dmiles> are you a pretty good java coder?
21.01.19 07:45:50<egp__> yes
21.01.19 07:45:52<dmiles> to egp__
21.01.19 07:45:57<dmiles> oh awesome
21.01.19 07:45:58<egp__> exp since 1998
21.01.19 07:46:21* egp__ looking around the above repo
21.01.19 07:47:20<dmiles> pretty much the https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/src/com/cyc/tool  is the same as in opencyc
21.01.19 07:48:43<dmiles> what i am doing in that repo there is blending the Cycorp lisp Runtime with a common-lisp runtime
21.01.19 07:49:32<dmiles> merging the 3 OOs of  CommonLisp/ SubLOOPs / Java's OO
21.01.19 07:50:47<dmiles> and then soon making it that these object instance use zero memory
21.01.19 07:51:43<dmiles> well a ClassName00000000000000001  i guess they will all take up
21.01.19 07:52:53<dmiles> but ideally all the "fields" are assdwerted/retracted as KB contnet ;P
21.01.19 07:53:22<dmiles> so a bit like the Dream of DROOLs
21.01.19 07:54:12<dmiles> field values are obtained via a CYC-QUERY
21.01.19 07:54:27<egp__> armed bear common lisp. interesting...
21.01.19 07:54:46<egp__> i have almost 0 practice with lisp
21.01.19 07:55:24<dmiles> notice part of the system there is glued togerh with BeanSHell
21.01.19 07:56:10<dmiles> ( Jamud got my hooked on BeanShell )
21.01.19 07:56:50<egp__> before beanshell appeared, i had my own java expressions language called genie
21.01.19 07:56:57<egp__> i have it somewhere in repos
21.01.19 07:57:22<dmiles> would love to see genie
21.01.19 07:59:00<dmiles> egp__: youknow Scheme though?
21.01.19 07:59:49<dmiles> before Rhino/BeanShell i used to study Kawa for ideas
21.01.19 08:00:37<egp__> i have 0 exp of scheme too
21.01.19 08:01:08<egp__> i added :help to stdin - no luck
21.01.19 08:01:25<dmiles> in opencyc ?
21.01.19 08:01:40<dmiles> yeah that is only this version of cyc :P
21.01.19 08:02:31<dmiles> its a special version meant to get users all the same pwoers reserved normally only for cycorp employees
21.01.19 08:03:18<dmiles> full pluggabily of new cyc modules and things
21.01.19 08:12:24<dmiles> these are inferce mpodeule in it http://logicmoo.org:3602/cgi-bin/cg?cb-hl-module-summary
21.01.19 08:12:40<dmiles> i just added these:...
21.01.19 08:12:41<dmiles> simClassPropertyValue literals
21.01.19 08:12:42<dmiles> simEval literals
                 <dmiles> simPropertyNext literals
                 <dmiles> simPropertyValue literals
21.01.19 08:13:09<dmiles> that is so CYC can control Secondlife objects/NPCs
21.01.19 08:20:30<egp__> dmiles, it would be interesting to run opencyc 4.0 with abcl
21.01.19 08:21:06<egp__> <dmiles> in opencyc ? --------- yes in opencyc 4.0
21.01.19 08:21:30<dmiles> how i'd go about it is run jad on the cyc.jar
21.01.19 08:21:48<dmiles> the use the JRTL from LarKC
21.01.19 08:21:54<dmiles> then use the JRTL from LarKC
21.01.19 08:22:11<egp__> heheh]
21.01.19 08:22:20<egp__> hakkers
21.01.19 08:22:30<dmiles> LarKC has all the /com/cyc/tool  classes
21.01.19 08:22:53<dmiles> cyc.jar has the com/cyc/javacycclasses
21.01.19 08:23:19<dmiles> then you can fix the write-image code 
21.01.19 08:23:32<egp__> ok i think i could tweak later. now, a boring random dayjob to run
21.01.19 08:23:46<egp__> try to tweak
21.01.19 08:24:24<dmiles> i been porting all the SubLObjects to abcl lisp objects
21.01.19 08:24:58<dmiles> which btw runs faster than ABCL did orignally
21.01.19 08:25:19<egp__> dmiles, "JRTL from LarKC" - does it have a sources download?
21.01.19 08:25:24<egp__> or a repo
21.01.19 08:25:49<dmiles> @ https://sourceforge.net/p/larkc/code/HEAD/tree/
21.01.19 08:25:58<egp__> ok ty
21.01.19 08:26:36<dmiles> but i used https://sourceforge.net/p/larkc/code/HEAD/tree/branches/LarKC_CommonLisp_Extensions/platform/
21.01.19 08:27:03<dmiles> since it already has ABCL integrated into it
21.01.19 08:28:28<dmiles> but the latest greatest of ABCL and LarKC are at https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/tree/larkc/platform :)
21.01.19 08:29:21<dmiles> which includes the SPARQL servers and stuff
21.01.19 08:30:31<egp__> great ty
21.01.19 08:33:01<dmiles> pretty much all of opencyc is in it to.. https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/Desktop/cycjava-persistence-hacks/com/cyc/cycjava/cycl/cycl.java#L31-L1285
21.01.19 08:33:15<dmiles> in that REPO
21.01.19 08:34:33<dmiles> the caveat though is that one needs to have saved out like and opencyc or rcyc image .. i havent added that does to its 8 gb
21.01.19 08:34:59<dmiles> but now i see github-lfs  i might be able to
21.01.19 09:38:22<egp__> dmiles, i think i will maybe do a composite all-inclusive-logics-estimation engine with adapters to cyc, opencog pln, apache jena, etc
21.01.19 09:40:44<egp__> like, (thinks ('cyc (instancename 'x)) 'y) (thinks ('pln) 'z) (thinks ('jena) 't)
21.01.19 09:43:45<egp__> (thinks (agent (system-type 'cyc) (instancename 'x)) 'y) (thinks (agent (system-type 'pln)) 'z) (thinks (agent (system-type 'jena)) 't)
21.01.19 09:45:31<egp__> (all-inclusive-logics-estimation estimated-term estimation-value-term)
21.01.19 09:46:33<egp__> (estimation-value-term (thinks ...))
21.01.19 11:05:56*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
21.01.19 11:06:01<dmiles> cyc: (+ 1 1)
21.01.19 14:40:53*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 245 seconds
21.01.19 14:50:37*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
21.01.19 14:50:42<dmiles> cyc: (+ 1 1)
#logicmoo> 21.01.19 15:44:51*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 7 months 27 days 20 hours 13 minutes ago
                 *** Names: editable-dog Elon_Satoshi T_K egp__ stoopkid jbalint aindilis PrologMUD dmiles yesbot @ChanServ michalisko
                 *** End of /NAMES list.
21.01.19 15:44:56<dmiles> cyc: (+ 1 1)
#logicmoo> 21.01.19 15:51:47*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 7 months 27 days 20 hours 19 minutes 56 seconds ago
                 *** Names: editable-dog Elon_Satoshi T_K egp__ stoopkid jbalint aindilis PrologMUD dmiles yesbot @ChanServ michalisko
                 *** End of /NAMES list.
21.01.19 15:51:52<dmiles> cyc: (+ 1 1)
#logicmoo> 21.01.19 15:53:33*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 7 months 27 days 20 hours 21 minutes 42 seconds ago
                 *** Names: editable-dog Elon_Satoshi T_K egp__ stoopkid jbalint aindilis PrologMUD dmiles yesbot @ChanServ michalisko
                 *** End of /NAMES list.
21.01.19 15:53:38<dmiles> cyc: (+ 1 1)
#logicmoo> 21.01.19 15:59:53*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 7 months 27 days 20 hours 28 minutes 3 seconds ago
                 *** Names: editable-dog Elon_Satoshi T_K egp__ stoopkid jbalint aindilis PrologMUD dmiles yesbot @ChanServ michalisko
                 *** End of /NAMES list.
21.01.19 15:59:59<dmiles> cyc: (+ 1 1)
21.01.19 17:24:45*** Nick change: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) is now known as Copenhagen_Bram
21.01.19 18:52:51*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
21.01.19 19:57:27<aindilis>  dmiles: ping
21.01.19 20:57:09*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
21.01.19 20:58:37*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
21.01.19 20:58:42<dmiles> cyc: (+ 1 1)
21.01.19 21:06:13<aindilis> dmiles: ping
21.01.19 21:16:27*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 272 seconds
21.01.19 21:22:15*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
21.01.19 21:22:20<dmiles> cyc: (+ 1 1)
22.01.19 01:58:56<aindilis> dmiles: ping
22.01.19 02:41:10<aindilis> dmiles: ping
22.01.19 03:19:51<aindilis> what is the best SWIPL testing framework?
22.01.19 03:50:36<aindilis> dmiles: do you want to log into my main machine with me and get a feel for FLP?
22.01.19 03:50:52<aindilis> I was wondering if you were at all intereseted in developing for it, for example:
22.01.19 03:51:02<aindilis> runningLowOn(Item) :-
                 <aindilis>         hasInventory(Item,X),
                 <aindilis>         genls(Item,battery),
                 <aindilis>         reorderThreshold(Item,Y)
22.01.19 03:51:08<aindilis>         X <= Y.
22.01.19 03:51:13<aindilis> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                                                                                                                                                                                                                                         
22.01.19 03:51:17<aindilis> %% (when (we are running low on common batteries and the finances                                                                                                                                                                                                                                                              
22.01.19 03:51:19<aindilis> %%        allow)                                                                                                                                                                                                                                                                                                               
22.01.19 03:51:22<aindilis> %%  (reorder them))                                                                                                                                                                                                                                                                                                            
22.01.19 03:51:26<aindilis> %% if we are well off, order in bulk, if not, order
22.01.19 03:51:32<aindilis> this is totally simple idea, of immense practical utility
22.01.19 03:51:56<aindilis> I was debating writing a rule editor tonight
22.01.19 03:52:10<aindilis> but realized that I would get trapped by the details of HTML5 and AJAX, so held off
22.01.19 03:52:26<aindilis> my system is rather immature in terms of interfacing the web with Prolog
22.01.19 03:52:45<aindilis> there isn't a whole lot of support APIs for handling the impedence mismatch
22.01.19 04:30:36<aindilis> maybe I can farm out development of different modules
22.01.19 04:30:45<aindilis> like someone could write the inventory managment componet
22.01.19 04:41:29<aindilis> RTEC has a lot of application for the rule-application subsystem
22.01.19 05:40:45*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
22.01.19 05:40:50<dmiles> cyc: (+ 1 1)
22.01.19 05:59:12<aindilis> dmiles: ping
22.01.19 09:12:27*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
22.01.19 09:59:34*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
22.01.19 09:59:40<dmiles> cyc: (+ 1 1)
22.01.19 15:20:59<aindilis> dmiles: ping
22.01.19 15:50:50<dmiles> pong aindilis
22.01.19 15:51:07<dmiles> will be arround tonoght.. having a busy day today doing family stuff
22.01.19 15:51:08<dmiles> http://logicmoo.org:3602/cgi-bin/cg?cb-c-all-asserted-knowledge&c336895
22.01.19 15:51:11<dmiles> btw 
22.01.19 15:51:14<aindilis> great, enjoy!
22.01.19 15:51:16<aindilis> ttys!
22.01.19 16:40:27<dmiles> http://logicmoo.org:3602/cgi-bin/cg?cb-c-total&c267004
22.01.19 16:40:46<dmiles> back for a aobut a 1/2 hour
22.01.19 16:41:41<dmiles> that is one of the MTs used to teach math to highscollers
22.01.19 16:42:03<dmiles> highschooler's  well any age
22.01.19 16:42:56<dmiles> as on e can see its is basically a Datalog/Prolog program
22.01.19 17:12:06*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
22.01.19 17:54:31*** Join: biosphere-surviv (~radiognom@37.49.189.98, (unauthenticated): radiognome invisible)
22.01.19 17:54:37<dmiles> cyc: (+ 1 1)
22.01.19 17:56:30*** Quit: egp__ (~radiognom@5.254.246.87) left #logicmoo: Ping timeout: 272 seconds
22.01.19 18:32:28*** Nick change: biosphere-surviv (~radiognom@37.49.189.98) is now known as egp_
22.01.19 20:53:07*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 240 seconds
22.01.19 21:08:58*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
22.01.19 21:09:03<dmiles> cyc: (+ 1 1)
23.01.19 12:09:56*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
23.01.19 12:10:02<dmiles> cyc: (+ 1 1)
23.01.19 12:10:43<dmiles>  https://zoom.us/j/689971575
23.01.19 13:41:03*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 250 seconds
23.01.19 14:43:19*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.01.19 14:43:25<dmiles> cyc: (+ 1 1)
23.01.19 14:50:03<aindilis> dmiles: damn I was late and then my internet didn't work - I really wanted to see Grosof, did anyone record it?
23.01.19 14:59:32*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
23.01.19 15:00:04*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.01.19 15:00:10<dmiles> cyc: (+ 1 1)
23.01.19 15:05:01<aindilis> dmiles: ping
23.01.19 15:17:45*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 272 seconds
23.01.19 15:43:50*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.01.19 15:43:55<dmiles> cyc: (+ 1 1)
23.01.19 16:46:08<dmiles> Ben Grosof was covering how I and.or Cyc uses rules to generate explainations
23.01.19 16:46:33<aindilis> cool
23.01.19 16:46:50<dmiles> not that he said that was the case.. but it is pretty speot on
23.01.19 16:47:20<aindilis> so what are you up to?  I've had a bad day of faulty network connections and random stuff going wrong
23.01.19 16:47:36<aindilis> but right now I'm interested in the metaplanner
23.01.19 16:47:40<dmiles> i been having a hard time motivating myself
23.01.19 16:47:43<aindilis> but I should be writing tests
23.01.19 16:47:54<aindilis> hrm, maybe we can work on something together that will jumpstart us
23.01.19 16:47:55<dmiles> so i been watching netflix
23.01.19 16:48:02<aindilis> ah okay no worries
23.01.19 16:48:10<aindilis> maybe I'll take an off day too
23.01.19 16:48:35<aindilis> I really want something interesting, some advanced planner
23.01.19 16:48:48<aindilis> but it's kind of moot
23.01.19 16:48:53<dmiles> well i am starting to come up finallu.. buty have to take a kid to thje doctors (followup on her knee) in an hour
23.01.19 16:49:05<aindilis> I really need to get FLP working so I don't miss any more meetings ;)
23.01.19 16:49:17<aindilis> kk
23.01.19 16:49:28<aindilis> any luck with getting the Prolog/LarKC stuff going? 
23.01.19 16:49:39<aindilis> I'd love to start integrating FLP so I get proper Mt support
23.01.19 16:49:43<dmiles> well over the last two days i did finanly get Removal Modules working
23.01.19 16:49:47<aindilis> nice!
23.01.19 16:50:02<dmiles> this mean that CYC will be able to call prolog
23.01.19 16:50:17<aindilis> what about the other 5 directions?
23.01.19 16:50:33<aindilis> Prolog -> CL -> Prolog -> CYC -> CL -> CYC ?
23.01.19 16:50:59<dmiles> well this is a breakthru in gettign CYC to call anyhting
23.01.19 16:51:06<aindilis> awesome!
23.01.19 16:51:19<dmiles> but you ask an interesting qwuestion
23.01.19 16:51:22<aindilis> yeah I can imagine with Kappa
23.01.19 16:51:46<dmiles> think abotu (dolist (var List) ...)
23.01.19 16:52:10<dmiles> the var gets rebound every interatio
23.01.19 16:52:22<dmiles> List nonmralyl being a list
23.01.19 16:52:34<dmiles> what i am working on is making that a query
23.01.19 16:52:41<dmiles> (a prolog query)
23.01.19 16:52:51<dmiles> (this is part of the 5 differnt dirrection)
23.01.19 16:52:53<aindilis> that's interesting
23.01.19 16:53:16<dmiles> that is probalb ypretty natural for lisp programmer
23.01.19 16:53:37<dmiles> well tend to do that even witha  cyc query
23.01.19 16:53:42<dmiles> we'd tend to do that even witha  cyc query
23.01.19 16:54:17<dmiles> back when i wrote the code to intially do this.. i had a speical prolog i implemnted
23.01.19 16:54:27<dmiles> (in java)
23.01.19 16:54:59<dmiles> that was more powerfull than SWI-Prolog .. but was slower than SWI-porlog
23.01.19 16:55:18<dmiles> also surely i never catch uup to all the libs of SWI-PRpolog
23.01.19 16:55:30<aindilis> yeah
                 <dmiles> so am very happy to be using SWI-Prolog for this
23.01.19 16:55:35<aindilis> cool
23.01.19 16:56:13<dmiles> though i still having to get this mechanism workignb out the best
23.01.19 16:56:30<dmiles> oops i mean porting to work with SWI-prolog
23.01.19 16:56:46<dmiles> that  idea of a Lazxy Lisp list
23.01.19 16:57:00<dmiles> that  idea of a Lazy Lisp list being a prolog iterator
23.01.19 16:57:31<aindilis> so all state of CL/Cyc is in Prolog?
23.01.19 16:58:02<dmiles> i had that working seemlessly the otehr week but odd two dayas ago i was surpised to see it wasnt syncing
23.01.19 16:58:17<dmiles> i just have to find how i disabled that
23.01.19 16:58:23<dmiles> hehe
23.01.19 16:58:26<aindilis> :)
23.01.19 16:58:33<aindilis> I need to write a lot of tests
23.01.19 16:58:38<aindilis> do you recommend plunit or tap?
23.01.19 16:58:50<aindilis> what does logicmoo use?
23.01.19 16:59:04<dmiles> i made my own test framwarod
23.01.19 16:59:15<aindilis> of course you did ;)
23.01.19 16:59:30<aindilis> link?
23.01.19 16:59:40<dmiles> well i jsut made it simple.. not even complex as plunit
23.01.19 16:59:48<aindilis> okay then I'll use plunit
23.01.19 16:59:55<dmiles> yeah.. plunit is fine
23.01.19 17:00:04<aindilis> that's what I started using already
23.01.19 17:00:14<dmiles> all i did was made sure that some parts of code asserted that it had tests 
23.01.19 17:00:16<aindilis> should I write tests for the highest or lowest level predicates?
23.01.19 17:00:38<dmiles> for both i think
23.01.19 17:00:41<aindilis> the ones that are called the most or the ones that most time is spent in 
23.01.19 17:00:42<aindilis> okay
23.01.19 17:01:12<aindilis> almost every pred should have a test?
23.01.19 17:01:24<dmiles> also i rtned to have tests int he file and outside of file both
23.01.19 17:01:33<aindilis> k
23.01.19 17:02:22<aindilis> okay I'll trouble you no more for now, I know you have to go, also I need a break, still tired from cursing earlier today
23.01.19 17:02:32<dmiles> my complaint on this is sorta liek it was to stoopkid
23.01.19 17:03:09<dmiles> like that if you write a test you want it to do more than one hting
23.01.19 17:03:25<dmiles> for exmaple.  you would not also want it to becomme part of the pldocs?
23.01.19 17:03:33<aindilis> what if we got a professional game developer to use LogicMOO/PrologMUD as the engine for a RogueLike?
23.01.19 17:03:45<aindilis> yeah
23.01.19 17:04:04<dmiles> so one tick is to write the tests as pldocs
23.01.19 17:04:06<dmiles> trickj
23.01.19 17:04:51<dmiles> well anyways .. it is easier to extrct from pldoc (codewise)
23.01.19 17:05:01<dmiles> but plunit has way better converage than pldoc
23.01.19 17:05:20<dmiles> so it best to do plunit and prettend we will genrate docs from the plunit soon
23.01.19 17:05:31<aindilis> k
23.01.19 17:06:38<dmiles> so in trhe jnext hour i am going to make removal moules call prolog code now that i have written all support code
23.01.19 17:06:52<aindilis> cool!!!
23.01.19 17:07:04<aindilis> I'm trying to interest developers in using LogicMOO
23.01.19 17:07:08<aindilis> for game development
23.01.19 17:07:13<aindilis> on #gamedev
23.01.19 17:07:35<dmiles> well what logicmoo has now that it didnt have 1 month ago is room for java-philes
23.01.19 17:07:47<aindilis> howso?
23.01.19 17:07:53<dmiles> and room for lisp developers moreso now
23.01.19 17:08:01<aindilis> due to LarKC?
23.01.19 17:08:11<dmiles> oh that LarKC is a huge wad 3000 plus java files
23.01.19 17:08:13<dmiles> yes
23.01.19 17:08:18<aindilis> k
23.01.19 17:08:28<aindilis> so I'll talk to Prolog/Lisp/Java devs
23.01.19 17:08:30<dmiles> so it is wayt easier to find qualified help
23.01.19 17:09:40<dmiles> yeah .. finajmyl can use all three of those
23.01.19 17:10:00<aindilis> I'll look at itch.io
23.01.19 17:10:37<dmiles> there have been people in #lispgames for a while fantising aobut prolog-like kb
23.01.19 17:13:13<aindilis> https://itch.io/jam/7drl-challenge-2019
23.01.19 17:13:34<aindilis> will we have opencyc bindings for a public release?
23.01.19 17:14:19<aindilis> or use OpenCYC KB?  or how is that going to work?
23.01.19 17:16:28<dmiles> did you ever play MAthCraft game by cycorp?
23.01.19 17:16:37<aindilis> yeah
23.01.19 17:16:44<dmiles> it worked by hitting a public server 
23.01.19 17:16:49<aindilis> okay
23.01.19 17:16:53<dmiles> so Cyc was at cycorp
23.01.19 17:17:07<dmiles> but the game was a 3gb install
23.01.19 17:17:10<dmiles> local
23.01.19 17:17:13<aindilis> yeah
23.01.19 17:17:17<aindilis> I wish CYC did more of htese
23.01.19 17:18:06<dmiles> i suppose that is our case
23.01.19 17:18:21<dmiles> i dont even know though how a java or lisp-phile can start LarKC
23.01.19 17:18:30<aindilis> k
23.01.19 17:18:34<dmiles> wihtout having the KB
23.01.19 17:18:43<dmiles> i mean that bugs me now
23.01.19 17:18:49<aindilis> hrm, I suppose we should think this through now
23.01.19 17:18:56<aindilis> not right now, but just soon
23.01.19 17:19:06<aindilis> before recruiting devs
23.01.19 17:19:37<aindilis> I still need to reply to Christopher
23.01.19 17:19:52<dmiles> yeah .. i kinda not sure what we arte supposed to do.. i suppose i can try to kmaek a releas eof the CYC kb that is only the tinyKB
23.01.19 17:19:54<aindilis> I haven't heard from Marty in a long time
23.01.19 17:20:06<aindilis> cool
23.01.19 17:20:08<aindilis> no rush though
23.01.19 17:20:19<aindilis> I think just getting it working for us is the first priority
23.01.19 17:20:34<dmiles> yeah
23.01.19 17:20:41<aindilis> also we plan to eventually replace out the rcyc component
23.01.19 17:20:51<aindilis> with LogicMOO's Psyclone
23.01.19 17:20:57<dmiles> yeha i think so
23.01.19 17:21:05<dmiles> that replacemnt is sitll the plan
23.01.19 17:21:09<aindilis> cool
23.01.19 17:21:21<aindilis> I will create an SPSE2 planning domain for all of this
23.01.19 17:21:39<aindilis> alright, gluck with coding, bbiab
23.01.19 17:21:46<dmiles> ok/... ttys
23.01.19 17:21:51<aindilis> ttys
23.01.19 18:36:20*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
23.01.19 20:26:10<stoopkid> dmiles: "my complaint on this is sorta liek it was to stoopkid" "like that if you write a test you want it to do more than one hting" can you elaborate on that some?
23.01.19 20:28:37<dmiles> my complaint was about how in Agda that some of the typetheory information  should be used as part of the program
23.01.19 20:28:48<dmiles> should be/could be 
23.01.19 20:29:27<dmiles> ideally more 
23.01.19 20:29:52<stoopkid> ah
23.01.19 20:30:02<stoopkid> yea definitely
23.01.19 20:30:27<dmiles> asking it to be both a proceedural language and non proceedural language
23.01.19 20:30:46<dmiles> non proceedural at least in the way prolog is
23.01.19 20:34:11<stoopkid> so, declarative but expressive enough to declare procedures?
23.01.19 20:35:31<dmiles> yes expressive enough to declare the mechanics of the procedures 
23.01.19 20:36:45<dmiles> googling for this is hard to see if languages have been designed with this in mind
23.01.19 20:37:14<stoopkid> arguably prolog already is that since you can just cut everywhere and recover the imperative paradigm completely
23.01.19 20:38:29<stoopkid> agda already is that too but in a somewhat different way, but unfortunately they didn't design it as a convenient prolog-like kb
23.01.19 20:38:36<dmiles> yeah.. i have acully more of a gripe that prolog extensions to encourage proceedural programming havent been readily made part of the expected toolkit
23.01.19 20:39:22<dmiles> that peopel have been made to belive that such a thing in prolog should be aukward
23.01.19 20:43:24<dmiles> many people choose Clojures  core.logic due to the blindspot in other languages
23.01.19 22:54:36<aindilis> I think I'm going to try to implement a toy game
23.01.19 22:54:40<aindilis> in CYC
23.01.19 22:54:55<aindilis> very basic, like tic tac toe basic
23.01.19 22:57:42<aindilis> how is it coming btw?  Now that you can call prolog from CYC?
23.01.19 23:10:33<aindilis> using QuickLisp with ABCL we have a lot of potential here
23.01.19 23:10:47<aindilis> also the Java as well, you're right about including other devs
23.01.19 23:10:59<aindilis> some people showed interest in the project btw on ##roguelikedev
23.01.19 23:11:36<aindilis> actually java is probably closer to the way to go except for some of the advanced processing
23.01.19 23:11:45<aindilis> but for graphics and such
23.01.19 23:14:05<aindilis> well actually, looks like C++ is the way to go, how do you integrate C++ with LarKC_CL?
23.01.19 23:14:11<aindilis> like CynD
23.01.19 23:16:05<aindilis> I guess we could just use the CynD stuff with the open sourced Doom3 stuff
23.01.19 23:20:38<dmiles> i can translate all of CYC to C++ and have it working within a couple days..  Cycorp doesnt evne have this much technoolgy 
23.01.19 23:20:43<dmiles> just not the ABCL parts :(
23.01.19 23:20:56<aindilis> all cool
23.01.19 23:21:13<aindilis> *ah cool
23.01.19 23:21:40<aindilis> so is there a way to do the current LarKC_CL w/ C++?
23.01.19 23:21:45<aindilis> add extra bindings?
23.01.19 23:22:02<dmiles> i did once embad CL in C 
23.01.19 23:22:08<dmiles> embed*
23.01.19 23:22:38<aindilis> hrm
23.01.19 23:22:49<aindilis> that's compatible with the current stack?
23.01.19 23:23:46<dmiles> https://pastebin.com/zu3iDR9V
23.01.19 23:23:52<dmiles> its way bitrotted
23.01.19 23:24:24<dmiles> but it is very tight connection between prolog and lisp
23.01.19 23:24:27<aindilis> looks cool
23.01.19 23:25:51<dmiles> its not incompatable but it add 5 weeks to get where we are now
23.01.19 23:26:11<aindilis> okay well I'll add it as a future expansion possibility
23.01.19 23:27:14<dmiles> here is my removal mosule code working http://logicmoo.org:3602/cgi-bin/cg?cb-inference&1986&0
23.01.19 23:28:07<dmiles> but finding a way to make it so its is easier to adress arbrirary prolog that doenst have Cyc constants is what i am working on now
23.01.19 23:28:20<aindilis> an interesting
23.01.19 23:28:32<aindilis> corresponding to the subset SubL \ CycL
23.01.19 23:29:12<dmiles> well its is tehcnally the same problem interface CycL to anyhting
23.01.19 23:29:24<dmiles> so to SubL to CycL
23.01.19 23:30:15<dmiles> hrrm actually that muight be my  next line of attack is making sure common lisp structures are visalbe CycL
23.01.19 23:30:26<dmiles> SubL is represetnatable as CycL
23.01.19 23:30:37<dmiles> making SubL that is
23.01.19 23:30:47<dmiles> making SubL as livable CycL
23.01.19 23:31:23<dmiles> for exmaple evalSubLFn
23.01.19 23:31:44<dmiles> it is always wrong
23.01.19 23:32:14<dmiles> as in wrongly unconmfortable
23.01.19 23:32:55<aindilis> ah
23.01.19 23:33:18<dmiles> like where do NIL fit into the cyc constants?
23.01.19 23:33:22<dmiles> or T?
23.01.19 23:33:38<dmiles> or MEMBER
23.01.19 23:34:37<aindilis> hrm I haven't used evalSubLFn but I've been meaning too
23.01.19 23:34:38<aindilis> *to
23.01.19 23:34:42<dmiles> usauly there are predciates like CYC-MEMBER
23.01.19 23:36:24<dmiles> like CYC-MINIMUM 
23.01.19 23:36:40<dmiles> which interfaces to lisp's MINIMUM 
23.01.19 23:37:19<aindilis> ah I am having trouble understanding, maybe an example would help sometime
23.01.19 23:39:34<dmiles> http://logicmoo.org:3602/cgi-bin/cg?cb-cf&c29331
23.01.19 23:40:12<dmiles> actualy here is alist of them o
23.01.19 23:40:20<dmiles> http://logicmoo.org:3602/cgi-bin/cg?cb-c-total&c1596
23.01.19 23:40:42<dmiles> scrool 1/2 way down
23.01.19 23:40:48<dmiles> so you see all the read stuff
23.01.19 23:40:53<dmiles> red srtuff
23.01.19 23:41:12<dmiles> these are all places CYC calls lisp
23.01.19 23:41:25<dmiles> however there is always a helper functiohn
23.01.19 23:41:56<dmiles> so cyc uses the helper CYC-EXPONENT
23.01.19 23:42:07<dmiles> to call the Lisp EXP
23.01.19 23:42:31<aindilis> wow very useful for synthesis
23.01.19 23:42:47<aindilis> having a CycL representation
23.01.19 23:43:00<aindilis> you could literally infer the code
23.01.19 23:43:13<dmiles> the CYC-EXPONENT code sepcially wrapps the results.. so if a lisp RATIO comes back it can make a CycL Fraction
23.01.19 23:43:30<dmiles> or a CycL integer
23.01.19 23:44:05<dmiles> internally there are 3 layers of prepresnation
23.01.19 23:44:26<dmiles> yes.. this is way i say CycL is a programming language
23.01.19 23:44:38<dmiles> much like prolog
23.01.19 23:44:51<aindilis> yeah I've figured it out now that you've said that, let me remember what clued me in
23.01.19 23:44:58<dmiles> where code called is inferable
23.01.19 23:45:17<aindilis> there was some specific example I ran into where it dawned on me
23.01.19 23:45:24<aindilis> that it was more a programming language than anything else
23.01.19 23:45:29<aindilis> forgetting the example though
23.01.19 23:45:45<dmiles> Kappa is somehat programmish 
23.01.19 23:46:23<dmiles> (well but Kappa still is pretty clean)
23.01.19 23:47:02<dmiles> oh actualyl the parts of CYC like  wher eit does list concatentations is pretty much prolgo jacking
23.01.19 23:47:20<dmiles>  is pretty much prolog hacking
23.01.19 23:49:21<dmiles> so the issue i am solving i guess rigfht now is how to make these 3 layers the most automatic
23.01.19 23:49:52<dmiles> i eitehr do that by making all data content CycL
23.01.19 23:50:04<dmiles> that is making everything pretend its cycl
23.01.19 23:50:24<dmiles> or by doing it right case by case
23.01.19 23:51:13<dmiles> cycorp went case by case as needed
23.01.19 23:52:27<dmiles> Cosnbtant NestDagFn
23.01.19 23:52:28<dmiles> isa :	[Mon]BinaryFunction  [Mon]EvaluatableFunction 
                 <dmiles> resultIsa :	[Mon]SubLList  [Mon]Thing 
23.01.19 23:52:43<dmiles> comment :	[Def]"(NestedDagFn ?Path ?Dag) returns the dag that recursively contains ?Dag within it, at a position dictated by ?Path. Effectively the inverse functionality of SubDagFn, so (SubDagFn ?Path (NestedDagFn ?Path ?Dag)) = ?Dag." 
23.01.19 23:52:44<dmiles> Mt : BaseKB
23.01.19 23:52:45<dmiles> evaluationDefn :	[Mon](SubLQuoteFn CYC-NESTED-AVM)
23.01.19 23:53:18<dmiles> here is a case they left it undone
23.01.19 23:53:34<dmiles> that was a case anyways they sort of said Any cycL list
23.01.19 23:54:16<dmiles> Question i have: Waht did the DAGs even look like
23.01.19 23:54:31<dmiles> were they SubL symbols?
23.01.19 23:55:20<dmiles> oh btw  CL:NIL == TheEmptyList
23.01.19 23:55:35<dmiles> that is example of  SubL vs CycL
23.01.19 23:57:07<dmiles> btw here is Cycoirp writing Prolog code:  http://logicmoo.org:3602/cgi-bin/cg?cb-af&8168761
23.01.19 23:58:14<dmiles> well sorta i think your example you are thinking of is them writting Lisp code
23.01.19 23:58:26<dmiles> which does happen to
23.01.19 23:58:38<dmiles> Writitng Lisp and Prolog code w/in CycL
23.01.19 23:59:09<dmiles> (i dont mean escaped code like in evalSubL .. but as trhe CycL *is* effectively emulating the code)
24.01.19 00:00:09<dmiles> so hear is an amplle of atestcase i havent descided on..
24.01.19 00:00:39<dmiles> (#$prologMember ?X (TheList . . . ))
24.01.19 00:00:52<dmiles> what arte the dots?
24.01.19 00:00:58<dmiles> #$a #$b #$c ?
24.01.19 00:01:21<dmiles> (PrologAtomFn "a")  (PrologAtomFn "b")  (PrologAtomFn "c") ?
24.01.19 00:01:52<dmiles> at wha point is  (equals (PrologAtomFn "isa") #$isa)  ?
24.01.19 00:02:46<dmiles> (LispSymbolFn "MEMBER" #$CommonLispPacakge)
24.01.19 00:03:15<dmiles> vs (LispSymbolFn "MEMBER" (LispPackageFn "COMM-LISP"))
24.01.19 00:05:02<dmiles> this is important to how we call and access 3T
24.01.19 00:05:09<dmiles> or any lisp code
24.01.19 00:05:48<dmiles> one ideal is that we alter the sourcecode of 3T by assert/retract
24.01.19 00:06:03<dmiles> and the prolog sourcecode
24.01.19 00:06:19<dmiles> programs are found via CYC-QUERY
24.01.19 00:06:39<dmiles> the query results are what we run
24.01.19 00:07:38<dmiles> i guess i answered my question :P
24.01.19 00:08:00<dmiles> that Prolog and Lisp data needs to not be CycL
24.01.19 00:08:30<dmiles> though still needs to be wrapped
24.01.19 00:08:55<dmiles> i guess this makes things easier for me thogh
24.01.19 00:09:29<dmiles> that i just a toCycL() methods on all objects
24.01.19 00:09:49<dmiles> and fromCycL on all constructors
24.01.19 00:10:29<dmiles> as i am  excited about Cyc writting such programs
24.01.19 00:11:43<dmiles> that solves my tonuights problems
24.01.19 00:12:34<aindilis> sorry I've been composing the letter to Christopher of AP/3T.  Is the current larkc runnable?
24.01.19 00:16:17<dmiles> yes
24.01.19 00:16:26<dmiles> i suppose i'll commit
24.01.19 00:16:34<aindilis> wait
24.01.19 00:16:41<aindilis> you're sure it's working?
24.01.19 00:16:54<aindilis> because I'm sending Elsaessar the rcyc4.0q + the larkc_cl
24.01.19 00:17:03<aindilis> and want it to go smoothly with him
24.01.19 00:17:44<dmiles> it starts up from both java and prolog equally
24.01.19 00:18:03<aindilis> k cool, as long as your sure it won't bomb the demo for him and make him lose interest
24.01.19 00:18:35<dmiles> what promt would he like to have at the start?
24.01.19 00:18:40<dmiles> Common Lisp?
24.01.19 00:18:43<aindilis> I'm assuming that
24.01.19 00:19:32<dmiles> ok good
24.01.19 00:19:51<dmiles> for CYC prolog a person needs to run (cyc-repl)
24.01.19 00:20:00<dmiles> for CYC prompt a person needs to run (cyc-repl)
24.01.19 00:22:44<dmiles> well its in
24.01.19 00:22:50<aindilis> great
24.01.19 00:22:56<aindilis> I'll email you the email for approval
24.01.19 00:23:08<aindilis> let me know what you think
24.01.19 00:23:12<aindilis> sorry I wasn't reading your thread
24.01.19 00:23:16<dmiles> i suppose you might need to try it once to make sur eit runs other places from my machine
24.01.19 00:23:28<aindilis> I got bombarded by like 50 things at once - it was the devil's work
24.01.19 00:23:55<aindilis> M lost her keys, my computer crashed and I lost my tab and email lol
24.01.19 00:23:59<aindilis> among like 10 other things
24.01.19 00:24:14<aindilis> *froze, and my tab crashed
24.01.19 00:24:15<dmiles> oh my 
24.01.19 00:24:21<aindilis> I got it back though, somehow
24.01.19 00:24:43<aindilis> I will try it out before I send the email
24.01.19 00:27:45<dmiles> i need to run for an hours
24.01.19 00:27:51<dmiles> just an hour or so
24.01.19 00:27:56<aindilis> okay sorry I was "ignoring" you, okay great
24.01.19 00:27:59<aindilis> see you soon!
24.01.19 00:28:14<dmiles> ttys
24.01.19 01:18:07<aindilis> okay read the history - fantastic!
24.01.19 01:49:50<dmiles> email looks great btw aindilis
24.01.19 01:50:05<aindilis> great, I will then finish testing CYC_JRTL
24.01.19 01:50:07<aindilis> and then send
24.01.19 01:50:33<dmiles> great
24.01.19 01:59:19<aindilis> platform/src/org/armedbear/lisp/JavaObject.java:65: error: method does not override or implement a method from a supertype
24.01.19 01:59:24<aindilis> seems there is one error
24.01.19 02:01:28<dmiles> ok i'll recommit evidently i may have missed that file
24.01.19 02:01:46<aindilis> ah k, cool
24.01.19 02:02:24<dmiles> ok try pulling
24.01.19 02:02:56<dmiles> line 65 was a commont block over here
24.01.19 02:04:16*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Quit: dmiles
24.01.19 02:04:32<dmiles> killing the bot so i am more like you guys on my test
24.01.19 02:04:49<aindilis> ah k, it seems to be going now
24.01.19 02:05:22<dmiles> i reverted a couple files so i thinking it didnt relaize they were supposed to be newewr
24.01.19 02:07:12<aindilis> does from_swipl.pl work in this version?
24.01.19 02:07:40<dmiles> will test once more and confirm if itr does after this build
24.01.19 02:07:45<aindilis> k
24.01.19 02:10:15<aindilis> interestingly the swipl looks to be working (nice job downloading the packs btw), but the run-cyc-java.sh isn't
24.01.19 02:10:16<dmiles> swipl from_swipl.pl
24.01.19 02:11:08<dmiles> did you call . set_classpath.sh ?
24.01.19 02:11:17<aindilis> hah, you're right srry
24.01.19 02:11:18<aindilis> % tcp_connect('$socket'(1),gitlab:3334).
24.01.19 02:11:19<aindilis> Warning: [Thread egg_go] Thread running "egg_go_fg" died on exception: Socket error: Host not found                 
24.01.19 02:11:30<dmiles> swipl from_swipl.pl magically sets the classpath
24.01.19 02:11:36<aindilis> nice
24.01.19 02:11:39<dmiles> just not the other one
24.01.19 02:12:00<aindilis> ?- now what?
                 <yesbot> Syntax error: Operator expected
                 <yesbot> now
                 <yesbot> ** here **
                 <yesbot>  what? . 
                 <yesbot> Say what?
24.01.19 02:12:31<dmiles> Thread running "egg_go_fg" died on exception: Socket error: Host not found                  is fine
24.01.19 02:12:40<aindilis> kk
                 <dmiles> thats the eggdrop thing
24.01.19 02:12:58<aindilis> so how do I call CL and CYC from Prolog?
24.01.19 02:13:02<aindilis> This is awesome btw
24.01.19 02:13:22<dmiles> i have to look at the prolgo test file to see what sorts of tings should work
24.01.19 02:14:04<dmiles> ?- cl_eval('*package*').
24.01.19 02:14:39<aindilis> looks like trace is on
24.01.19 02:14:47<dmiles> notrace.
24.01.19 02:15:03<dmiles> nodebug.
24.01.19 02:15:26<aindilis> not having an effect
24.01.19 02:16:24<dmiles> well from here you can do things like laod and run prooog code
24.01.19 02:16:33<aindilis> yeah :)
24.01.19 02:16:38<aindilis> okay I'm going to send the email to him
24.01.19 02:17:15<dmiles> yeah i been working more on the LarKC code than the prolgo code
24.01.19 02:17:43<dmiles> most of the prolog code hakcing happens from java
24.01.19 02:17:59<aindilis> he can speak french in russian
24.01.19 02:18:06<aindilis> oh boy I'm rapidly declining for the night
24.01.19 02:18:18<aindilis> I'll have to go to bed soon
24.01.19 02:18:19<aindilis> sorry
24.01.19 02:18:24<aindilis> will you be around tomorrow?
24.01.19 02:18:36<dmiles> yes.. i'll be here
24.01.19 02:18:45<aindilis> great, around what time do you think?
24.01.19 02:18:52<dmiles> i havbe 3-4 appointments through the day as usual
24.01.19 02:19:00<dmiles> same as friday
24.01.19 02:19:04<aindilis> okay
24.01.19 02:19:17<dmiles> prably abotu the same hours as today
24.01.19 02:19:39<dmiles> i have to be gone by 11am and back 7 hours later
24.01.19 02:20:11<dmiles> 11am pst
24.01.19 02:20:39<aindilis> okay well I'll try to meetup at that time
24.01.19 02:20:47<aindilis> great work dmiles!
24.01.19 02:20:51<aindilis> nn
24.01.19 02:20:53<dmiles> nn
24.01.19 02:21:29*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
24.01.19 02:21:34<dmiles> cyc: (+ 1 1)
24.01.19 02:22:10<dmiles> ;;; Running: java -cp $CLASSPATH -server -d64 -Xms5000m -Xmx8000m -XX:ReservedCodeCacheSize=96m  -XX:+DoEscapeAnalysis -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC  -Djava.library.path=/usr/local/lib/swipl/lib/x86_64-linux:.  -XshowSettings:vm  org.armedbear.lisp.Main  --eval (init-cyc-server) --eval (cyc-repl)
24.01.19 02:22:28<dmiles> heh it drops him into cyc-repl
24.01.19 02:25:15<dmiles> fixed that
24.01.19 02:25:33<aindilis> ah okay I'll elide the point about using (quit)
24.01.19 02:26:14<dmiles> i been quiting using ctrl-d
24.01.19 02:26:19<dmiles> between all the repls
24.01.19 02:26:31<aindilis> p.s.  It's necessary to run
                 <aindilis> . set_classpath.sh
                 <aindilis> before ./run-cyc-java.sh
                 <aindilis> or you can start from SWI Prolog with
24.01.19 02:26:33<dmiles> the quit commant can mean to exit the lisp systme
24.01.19 02:26:36<aindilis> swipl -s from_swipl.pl
24.01.19 02:26:39<aindilis> This is a work in progress of integrating several mature systems so expect this part of it to be fleshed out.
24.01.19 02:26:42<aindilis> ^- that's what I added
24.01.19 02:26:48<aindilis> to the email
24.01.19 02:27:18<dmiles> that is good i think
24.01.19 02:27:22<aindilis> k good
24.01.19 02:27:23<aindilis> k sending
24.01.19 02:29:21<aindilis> bombs away
24.01.19 06:54:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dnwljzdvjrwcbiiw) left #logicmoo: Quit: Connection closed for inactivity
24.01.19 10:01:59*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rdxzoaomwcfxqzug, stoopkid: stoopkid)
24.01.19 10:02:04<dmiles> cyc: (+ 1 1)
24.01.19 14:28:47*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
24.01.19 14:32:01*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
24.01.19 14:32:06<dmiles> cyc: (+ 1 1)
24.01.19 15:01:35*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rdxzoaomwcfxqzug) left #logicmoo: Quit: Connection closed for inactivity
24.01.19 15:30:31*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
24.01.19 15:30:37<dmiles> cyc: (+ 1 1)
24.01.19 15:56:15*** Quit: egp_ (~radiognom@37.49.189.98) left #logicmoo: Quit: Leaving
24.01.19 16:00:55*** Join: egp_ (~radiognom@37.49.189.98, (unauthenticated): radiognome invisible)
24.01.19 16:01:01<dmiles> cyc: (+ 1 1)
24.01.19 18:23:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-thtwlwwwoiovmgfu, stoopkid: stoopkid)
24.01.19 18:23:20<dmiles> cyc: (+ 1 1)
24.01.19 19:22:36*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
24.01.19 20:21:48*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 268 seconds
24.01.19 22:01:56*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
24.01.19 22:02:01<dmiles> cyc: (+ 1 1)
24.01.19 23:02:56<aindilis> dmiles: ping
24.01.19 23:03:10<aindilis> did a teeny bit of work on continuous integration
24.01.19 23:03:35<aindilis> worked for hours on OwnTracks since it stopped working - no dice - was like chasing moby dick
24.01.19 23:03:51<aindilis> prove -v -e 'swipl -q -t main -s' -t t/example.pl -r --timer --formatter=TAP::Formatter::JUnit -l t > test_results.xml
24.01.19 23:04:00<aindilis> that should get it into a format usable by jenkins
24.01.19 23:04:08<aindilis> but jenkins seems overly complex for our needs
24.01.19 23:04:11<aindilis> there's also hudson
24.01.19 23:04:22<aindilis> better TAP integration is here: https://wiki.jenkins.io/display/JENKINS/TAP+Plugin
24.01.19 23:04:36<aindilis> I was wondering if you knew of a way to write tests in plunit but run them with TAP
24.01.19 23:04:54<aindilis> I guess I'll work on that now
24.01.19 23:14:21<aindilis> okay I have plunit tests running from tap
24.01.19 23:14:31<aindilis> that was easy to wrap
24.01.19 23:14:48<aindilis> next thing to do is setup VMs for jenkins and hudson
24.01.19 23:46:30<aindilis> well running into problems doing the testing within Formalog
24.01.19 23:47:10<aindilis> with_output_to(atom(A),run_tests(lists)) does not grab the plunit tests
24.01.19 23:47:18<aindilis> and I cannot invoke tap's main properly
24.01.19 23:48:51<aindilis> https://cpanratings.perl.org/dist/Language-Prolog-Yaswi suggets using Autotest
25.01.19 00:42:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-thtwlwwwoiovmgfu) left #logicmoo: Quit: Connection closed for inactivity
25.01.19 04:12:23*** Quit: egp_ (~radiognom@37.49.189.98) left #logicmoo: Quit: Leaving
25.01.19 04:12:47*** Join: egp_ (~radiognom@37.49.189.98, egp_: radiognome invisible)
25.01.19 04:12:52<dmiles> cyc: (+ 1 1)
25.01.19 04:13:00*** Nick change: egp_ (~radiognom@37.49.189.98) is now known as Ascension
25.01.19 04:13:10*** Nick change: Ascension (~radiognom@37.49.189.98) is now known as AscensionChilles
25.01.19 04:13:16*** Nick change: AscensionChilles (~radiognom@37.49.189.98) is now known as AscensionChill
25.01.19 04:14:45*** Quit: AscensionChill (~radiognom@37.49.189.98) left #logicmoo: Client Quit
25.01.19 04:15:07*** Join: AscensionChill (~radiognom@37.49.189.98, (unauthenticated): radiognome invisible)
25.01.19 04:15:12<dmiles> cyc: (+ 1 1)
25.01.19 04:17:30*** Join: egp_ (~radiognom@37.49.189.98, (unauthenticated): radiognome invisible)
25.01.19 04:17:36<dmiles> cyc: (+ 1 1)
25.01.19 04:17:58*** Quit: egp_ (~radiognom@37.49.189.98) left #logicmoo: Remote host closed the connection
25.01.19 05:04:56*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
25.01.19 05:05:02<dmiles> cyc: (+ 1 1)
25.01.19 06:12:11*** Join: egp_ (~radiognom@31.47.169.26, egp_: radiognome invisible)
25.01.19 06:12:16<dmiles> cyc: (+ 1 1)
25.01.19 06:14:44*** Quit: AscensionChill (~radiognom@37.49.189.98) left #logicmoo: Ping timeout: 272 seconds
25.01.19 08:52:42*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
25.01.19 09:14:13*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 11:01:57*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 11:02:02<dmiles> cyc: (+ 1 1)
25.01.19 11:13:44*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 11:18:19*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 11:18:24<dmiles> cyc: (+ 1 1)
25.01.19 11:21:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vbfmaewcvqpfxtze, stoopkid: stoopkid)
25.01.19 11:21:06<dmiles> cyc: (+ 1 1)
25.01.19 11:22:20*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 11:48:15*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 11:48:20<dmiles> cyc: (+ 1 1)
25.01.19 11:52:17*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 11:55:28*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 11:55:34<dmiles> cyc: (+ 1 1)
25.01.19 11:59:28*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 12:01:49*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 12:01:54<dmiles> cyc: (+ 1 1)
25.01.19 12:05:51*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 12:17:00*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 12:17:05<dmiles> cyc: (+ 1 1)
25.01.19 12:20:56*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 13:07:22*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 13:07:28<dmiles> cyc: (+ 1 1)
25.01.19 13:14:49*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 13:18:59*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 13:19:04<dmiles> cyc: (+ 1 1)
25.01.19 13:29:07*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
25.01.19 13:31:27*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
25.01.19 13:31:32<dmiles> cyc: (+ 1 1)
25.01.19 14:54:06*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
25.01.19 14:54:11<dmiles> cyc: (+ 1 1)
25.01.19 15:10:39<aindilis> dmiles: ping
25.01.19 15:11:05<aindilis> I talked to David Whitten and to cut to the chase he proposes that we develop a Prolog <-> YottaDB persistence mechanism
25.01.19 15:11:11<aindilis> we = him and I
25.01.19 15:11:28<aindilis> YottaDB is a NoSQL system
25.01.19 15:13:18<aindilis> given his experience with medical systems (and FLP has many of the same issues since medical is one of its domains of application, and besides - all the private information issues), I consider this a valuable opportunity to achieve deidentification of FLP at the same type as enhancing LarKC's persistence, since he says that YottaDB is more fundamentally compatible with CYC than is SQL.
25.01.19 15:14:23<aindilis> I didn't fully understand all of his explanations as I was tired from our discussion last night, so if you have any thoughts on NoSQL w/ LarKC I'd be interested in them.
25.01.19 15:15:14<aindilis> I had thought that NoSQL was a category theoretic inverse of SQL, but maybe that's enough.  Also there are probably support tools (like you were saying about CYC) that make it more worthwhile.
25.01.19 15:15:27<aindilis> https://yottadb.com/
25.01.19 15:17:30<aindilis> Apparently it's mission critical.
25.01.19 16:58:33*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
25.01.19 17:09:46<aindilis> dmiles: ping
25.01.19 21:44:30*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
25.01.19 21:44:35<dmiles> cyc: (+ 1 1)
25.01.19 22:48:54*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
25.01.19 23:11:06<dmiles> awesome you got ahold of David
25.01.19 23:11:11<aindilis> yeah
25.01.19 23:12:06<dmiles> i dont really have an option on YottaDB
25.01.19 23:12:11<aindilis> kk
25.01.19 23:12:31<aindilis> (sorry I've had three long conversations in the last day, so I won't be up for much discussion)
25.01.19 23:12:40<aindilis> (too tired at this point)
25.01.19 23:12:59<aindilis> btw dmiles can you summarize what we're doing presently with LarKC?
25.01.19 23:13:08<aindilis> I've forgotten some of the details
25.01.19 23:13:26<aindilis> and I'm wondering what the scope of the current work is
25.01.19 23:13:48<aindilis> so you would be okay with LarKC using YottaDB as persistence, since Whitten (who as you know is knowledgeable) recommends it
25.01.19 23:14:28<aindilis> brb
25.01.19 23:16:08<dmiles> yes OK with Yatta that way as long as i am not the only one writting that code
25.01.19 23:18:15<dmiles> So to summerize what is going on with LArKC is that with every nice project DAYDREAMER, E2C,  CycD, any planning systems like #Tthere is no tooth to tail installation system
25.01.19 23:18:41<dmiles> So to summerize what is going on with LArKC is that with every nice project DAYDREAMER, E2C,  CycD, any planning systems like 3T  there is no tooth to tail installation and configureation system
25.01.19 23:19:03<dmiles> so regardless of how usefull such things arte they remain unuseable
25.01.19 23:20:15<dmiles> so with Daydreamer.. how do you add new ideas?
25.01.19 23:20:24<dmiles> with 3T how do you agregate plans?
25.01.19 23:20:31<dmiles> where do the plans get carried out?
25.01.19 23:21:02<dmiles> sim problem with Bina48
25.01.19 23:21:25<dmiles> i am the only one that ever woulde figure out how to isntall it on a machine
25.01.19 23:21:40<dmiles> (the robot brain of Bina48)
25.01.19 23:21:59<aindilis> ah
25.01.19 23:22:14<dmiles> how would new knowedge be added to Bina48
25.01.19 23:22:17<dmiles> or to 3T
25.01.19 23:22:42<dmiles> or to daydreamer
25.01.19 23:23:43<dmiles> PrologMUD itself may not need CYC .. but to really get E2C for PrologMUD going i need the content management of CYC
25.01.19 23:24:02<dmiles> i need a system to maange all oe limmion DCG templates
25.01.19 23:24:24<dmiles> cycorp provides at least 100k of such DCG templates
25.01.19 23:24:31<dmiles> erm sorry 10k
25.01.19 23:24:50<dmiles> Daydreamer is also based on the same template system
25.01.19 23:25:08<dmiles> the Logic2Egnlish code
25.01.19 23:25:49<dmiles> what all these apps have in common is they are based on the same program data
25.01.19 23:26:05<dmiles> but in little toyu increments
25.01.19 23:26:25<dmiles> daydreamer has 30 DCG genration templates
25.01.19 23:26:32<dmiles> ProlgoMUD has arorund 30
25.01.19 23:26:54<dmiles> E2C needs abotu 1k of them
25.01.19 23:27:47<dmiles> so LarKC is a place to allow all such programs to use each otehrs data
25.01.19 23:28:27<aindilis> cool
25.01.19 23:28:43<aindilis> what is the status of prolog integration?
25.01.19 23:28:44<dmiles> when CynD ran using E2C it would do about 2 seconds of CPU to understand the user.. but 3 minutes in TCP wank
25.01.19 23:28:58<aindilis> wow
25.01.19 23:29:01<aindilis> ah I see
25.01.19 23:29:07<dmiles> as it made millions of backchain calls to cyc
25.01.19 23:29:12<dmiles> (over TCP)
25.01.19 23:29:38<aindilis> can you call Cyc from Prolog now?
25.01.19 23:29:59<dmiles> its almost comforabel to call back and forth
25.01.19 23:30:09<aindilis> swipl_cyc_call(['#$isa',X,'#$Dog'],X) or something
25.01.19 23:30:14<dmiles> but i working on the CycL side 
25.01.19 23:30:28<aindilis> calling Prolog from CycL
25.01.19 23:30:32<aindilis> can I play with it at all?
25.01.19 23:30:42<dmiles> yeah the stuff like wipl_cyc_call(['#$isa',X,'#$Dog'],X) work
25.01.19 23:30:45<aindilis> I'm mainly interested for now in calling Cyc from Prolog
25.01.19 23:30:55* dmiles has to look at history to see what i named the preds
25.01.19 23:32:27<dmiles> [15:53] <dmiles> ?- cl_eval(['ALL-INSTANCES','Dog','InferencePSC'],O).
                 <dmiles> [15:53] <PrologMUD> dmiles: % O=['Snoopy','ScoobyDoo-FictionalCharacter','Muffet','HYP-JuvenileFnDog-27104220','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-4981756','NART'(3903),'Dash-VictoriasPet','HYP-Dog-5968235','ThePrototypicalDog','Rover-5']
25.01.19 23:32:40<aindilis> cool
25.01.19 23:32:44<dmiles> cl_eval/2
25.01.19 23:34:57* aindilis boots LarKC
25.01.19 23:35:06<dmiles> ?- cl_eval(['ASK-TEMPLATE',[quote,'?X'],[quote,[isa, '?X', 'Dog','InferencePSC'],O).
25.01.19 23:35:16<dmiles> ?- cl_eval(['ASK-TEMPLATE',[quote,'?X'],[quote,[isa, '?X', 'Dog'],'InferencePSC'],O).
25.01.19 23:35:39<aindilis> too few closing
25.01.19 23:35:49<dmiles> ?- cl_eval(['ASK-TEMPLATE',[quote,'?X'],[quote,[isa, '?X', 'Dog']],'InferencePSC'],O).
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy']
25.01.19 23:35:50<PrologMUD> dmiles: %  det(Yes,1)
25.01.19 23:36:24<dmiles> ?- cl_eval(['ASK-TEMPLATE',[quote,'?X'],[quote,[isa, '?X', 'Dog']],'InferencePSC'],O),member(E,O).
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='Rover-5'
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='ThePrototypicalDog'
25.01.19 23:36:25<PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='HYP-Dog-5968235'
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='Dash-VictoriasPet'
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E=['GenericInstanceFn','Dog']
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='HYP-JuvenileFnDog-4981756'
25.01.19 23:36:26<PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='HYP-JuvenileFnDog-59300253'
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='HYP-JuvenileFnDog-27104220'
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='Muffet'
25.01.19 23:36:27<PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='ScoobyDoo-FictionalCharacter'
                 <PrologMUD> dmiles: % O=['Rover-5','ThePrototypicalDog','HYP-Dog-5968235','Dash-VictoriasPet',['GenericInstanceFn','Dog'],'HYP-JuvenileFnDog-4981756','HYP-JuvenileFnDog-59300253','HYP-JuvenileFnDog-27104220','Muffet','ScoobyDoo-FictionalCharacter','Snoopy'], E='Snoopy'
25.01.19 23:36:28<PrologMUD> dmiles: %  det(Yes,11)
25.01.19 23:39:20<dmiles> then i have http://logicmoo.org:3602/cgi-bin/cg?cb-cf&c336896
25.01.19 23:40:01<dmiles> which i am debugging right now.. trying to figure out the "ruight way"| cycorp employees get the current MT context
25.01.19 23:41:33<aindilis> yeah I intend to write all of the YottaDB interface
25.01.19 23:43:07<dmiles> right on
25.01.19 23:44:29<dmiles> i cant remember wher ei leanred aobut DEFINE-EVALUATION-DEFN
25.01.19 23:44:47<dmiles> as to what Cyc docs cover writting of removal modules
25.01.19 23:45:06<aindilis> you mean unassert?
25.01.19 23:45:47<dmiles> "removal module" names is is confusing .. what it does is remove compuational complexity at infernce time
25.01.19 23:45:54<aindilis> k
25.01.19 23:46:29<dmiles> SBHL modules are removal modules
25.01.19 23:46:59<dmiles> Subsumpive Rewrite Heuristics
25.01.19 23:47:16<dmiles> SubsumpiveRewrite Heuristic Language
25.01.19 23:48:28<dmiles> the http://www.cyc.com/wp-content/uploads/2015/04/other-ways-to-extend-cyc-1.pdf doesnt ocer the actual use
25.01.19 23:52:31<dmiles> but i have old instances of me using it though.. https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/0f7b95e7f9c0982f790e36e425fe1b8c86d076a9/platform/e2c/backup/mudsystem.lisp#L93-L104
25.01.19 23:52:46<dmiles> line 96 is the prolog Modes 
25.01.19 23:53:22<dmiles> (inference-removal-module :removal-spawnPredicate-bound-bound-unbound
                 <dmiles>  '(:sense :pos 
                 <dmiles> 	:predicate #$osim:spawnPredicate 
                 <dmiles> 	:required-pattern (#$osim:spawnPredicate :fully-bound :fully-bound :not-fully-bound) 
                 <dmiles> 	:cost-expression 0 :completeness :complete 
                 <dmiles> 	:input-extract-pattern (:template  (#$osim:spawnPredicate (:bind value-1) (:bind value-2) :anything) ((:value value-1) (:value value-2)))
25.01.19 23:53:23<dmiles> 	:input-verify-pattern :anything
25.01.19 23:53:24<dmiles> 	:output-generate-pattern (:call spawnPredicate :input)
                 <dmiles> 	:output-construct-pattern  (#$osim:spawnPredicate (:value value-1) (:value value-2) :input)
25.01.19 23:53:25<dmiles> 	:documentation "(#$osim:spawnPredicate <fully-bound> <not-fully-bound>)"
25.01.19 23:53:26<dmiles> 	:example "(#$osim:spawnPredicate -1 ?WHAT)"))
                 <dmiles> (register-solely-specific-removal-module-predicate #$osim:spawnPredicate)
25.01.19 23:54:14<dmiles> is example of what the docs toguth me in 2004 :P
25.01.19 23:54:45<dmiles> we tell it the costs and completeness of calling prolog
25.01.19 23:55:40<dmiles> for each type of binding pattern to each predicate
25.01.19 23:55:56<dmiles> we also do this for calling lisp code like of Daydreamer and 3T
25.01.19 23:56:11<dmiles> then cyc computes the strategies it takes to make infernces
25.01.19 23:56:50<dmiles> that is Cyc organizes the heuristics to make sure the logic is going to get proofs needed
26.01.19 00:02:27<dmiles> that code would take me year or two to write in prolog
26.01.19 00:04:26<dmiles> its the code that Coq and Issablle etc dream they had
26.01.19 00:05:17<dmiles> well the greatest innovation that came from EURISKO
26.01.19 00:08:32<aindilis> nice
26.01.19 00:27:05*** Quit: egp_ (~radiognom@31.47.169.26) left #logicmoo: Remote host closed the connection
26.01.19 00:35:15*** Join: AscensionChill (~radiognom@31.47.169.26, (unauthenticated): radiognome invisible)
26.01.19 00:35:20<dmiles> cyc: (+ 1 1)
26.01.19 08:12:27*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
26.01.19 08:12:32<dmiles> cyc: (+ 1 1)
26.01.19 09:15:47*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
26.01.19 10:34:25*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
26.01.19 10:34:30<dmiles> cyc: (+ 1 1)
26.01.19 10:38:20*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
26.01.19 10:40:49*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
26.01.19 10:40:55<dmiles> cyc: (+ 1 1)
26.01.19 10:47:57*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
26.01.19 10:50:24*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
26.01.19 10:50:29<dmiles> cyc: (+ 1 1)
26.01.19 10:54:27*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
26.01.19 10:57:52*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
26.01.19 10:57:57<dmiles> cyc: (+ 1 1)
26.01.19 14:17:59<dmiles> i have to leave for about 5 hours for family b-day
26.01.19 14:19:32*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
26.01.19 15:19:03<aindilis> kk
26.01.19 15:19:05<aindilis> dmiles: ping
26.01.19 16:05:48*** Nick change: AscensionChill (~radiognom@31.47.169.26) is now known as egp_
26.01.19 16:05:52<egp_> dmiles, fyi
26.01.19 16:06:11<egp_> eclipse also suggests smth about git lfs -
26.01.19 16:06:15<egp_> "eclipse.buildId=4.8.0.I20180611-0500
                 <egp_> java.version=1.8.0_192
                 <egp_> java.vendor=Oracle Corporation
                 <egp_> BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=en_US
                 <egp_> Framework arguments:  -product org.eclipse.epp.package.jee.product
                 <egp_> Command-line arguments:  -os linux -ws gtk -arch x86_64 -product org.eclipse.epp.package.jee.product
26.01.19 16:06:17<egp_> org.eclipse.egit.core
26.01.19 16:06:19<egp_> Warning
26.01.19 16:06:21<egp_> Sun Jan 27 05:04:48 IRKT 2019
26.01.19 16:06:23<egp_> Builtin LFS support not present/detected
26.01.19 16:06:25<egp_> java.lang.ClassNotFoundException: org.eclipse.jgit.lfs.BuiltinLFS cannot be found by org.eclipse.egit.core_5.0.0.201806131550-r
26.01.19 16:06:30<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:508)
26.01.19 16:06:32<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:419)
26.01.19 16:06:34<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:411)
26.01.19 16:06:36<egp_> 	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:150)
26.01.19 16:06:38<egp_> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
26.01.19 16:06:40<egp_> 	at java.lang.Class.forName0(Native Method)
26.01.19 16:06:44<egp_> 	at java.lang.Class.forName(Class.java:264)
26.01.19 16:06:46<egp_> 	at org.eclipse.egit.core.Activator.registerBuiltinLFS(Activator.java:279)
26.01.19 16:06:48<egp_> 	at org.eclipse.egit.core.Activator.start(Activator.java:212)
26.01.19 16:06:50<egp_> 	at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:779)
26.01.19 16:06:52<egp_> 	at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
26.01.19 16:06:54<egp_> 	at java.security.AccessController.doPrivileged(Native Method)
26.01.19 16:06:58<egp_> 	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:772)
26.01.19 16:07:00<egp_> 	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:729)
26.01.19 16:07:02<egp_> 	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1002)
26.01.19 16:07:04<egp_> 	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:354)
26.01.19 16:07:06<egp_> 	at org.eclipse.osgi.container.Module.doStart(Module.java:581)
26.01.19 16:07:08<egp_> 	at org.eclipse.osgi.container.Module.start(Module.java:449)
26.01.19 16:07:10<egp_> 	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:468)
26.01.19 16:07:14<egp_> 	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:114)
26.01.19 16:07:16<egp_> 	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:505)
26.01.19 16:07:18<egp_> 	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:328)
26.01.19 16:07:20<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:392)
26.01.19 16:07:22<egp_> 	at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:36)
26.01.19 16:07:24<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:454)
26.01.19 16:07:28<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:419)
26.01.19 16:07:30<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:411)
26.01.19 16:07:32<egp_> 	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:150)
26.01.19 16:07:34<egp_> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
26.01.19 16:07:36<egp_> 	at org.eclipse.egit.ui.Activator$RepositoryChangeScanner.<init>(Activator.java:921)
26.01.19 16:07:38<egp_> 	at org.eclipse.egit.ui.Activator.setupRepoChangeScanner(Activator.java:1034)
26.01.19 16:07:40<egp_> 	at org.eclipse.egit.ui.Activator.start(Activator.java:336)
26.01.19 16:07:44<egp_> 	at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:779)
26.01.19 16:07:46<egp_> 	at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
26.01.19 16:07:48<egp_> 	at java.security.AccessController.doPrivileged(Native Method)
26.01.19 16:07:50<egp_> 	at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:772)
26.01.19 16:07:52<egp_> 	at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:729)
26.01.19 16:07:54<egp_> 	at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1002)
26.01.19 16:07:58<egp_> 	at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:354)
26.01.19 16:08:00<egp_> 	at org.eclipse.osgi.container.Module.doStart(Module.java:581)
26.01.19 16:08:02<egp_> 	at org.eclipse.osgi.container.Module.start(Module.java:449)
26.01.19 16:08:04<egp_> 	at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:468)
26.01.19 16:08:06<egp_> 	at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:114)
26.01.19 16:08:08<egp_> 	at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:505)
26.01.19 16:08:10<egp_> 	at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:328)
26.01.19 16:08:14<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:392)
26.01.19 16:08:16<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:470)
26.01.19 16:08:18<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:419)
26.01.19 16:08:20<egp_> 	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:411)
26.01.19 16:08:22<egp_> 	at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:150)
26.01.19 16:08:24<egp_> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
26.01.19 16:08:28<egp_> 	at org.eclipse.osgi.internal.framework.EquinoxBundle.loadClass(EquinoxBundle.java:609)
26.01.19 16:08:30*** Quit: egp_ (~radiognom@31.47.169.26) left #logicmoo: Quit: Leaving
26.01.19 16:08:46*** Join: egp_ (~radiognom@31.47.169.26, egp_: radiognome invisible)
26.01.19 16:08:52<dmiles> cyc: (+ 1 1)
26.01.19 16:09:05<egp_> <egp_> dmiles, fyi
26.01.19 16:09:07<egp_> <egp_> eclipse also suggests smth about git lfs -
26.01.19 16:09:09<egp_> <egp_> "eclipse.buildId=4.8.0.I20180611-0500
26.01.19 16:09:13<egp_> <egp_> java.version=1.8.0_192
26.01.19 16:09:15<egp_> <egp_> java.vendor=Oracle Corporation
26.01.19 16:09:17<egp_> <egp_> BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=en_US
26.01.19 16:09:19<egp_> <egp_> Framework arguments:  -product org.eclipse.epp.package.jee.product
26.01.19 16:09:21<egp_> <egp_> Command-line arguments:  -os linux -ws gtk -arch x86_64 -product org.eclipse.epp.package.jee.product
26.01.19 16:09:24<egp_> <egp_> org.eclipse.egit.core
26.01.19 16:09:28<egp_> <egp_> Warning
26.01.19 16:09:30<egp_> <egp_> Sun Jan 27 05:04:48 IRKT 2019
26.01.19 16:09:32<egp_> <egp_> Builtin LFS support not present/detected
26.01.19 16:09:34<egp_> <egp_> java.lang.ClassNotFoundException: org.eclipse.jgit.lfs.BuiltinLFS cannot be found by org.eclipse.egit.core_5.0.0.201806131550-r
26.01.19 16:09:37<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:508)
26.01.19 16:09:39<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:419)
26.01.19 16:09:43<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:411)
26.01.19 16:09:45<egp_> <egp_>  at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:150)
26.01.19 16:09:47<egp_> <egp_>  at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
26.01.19 16:09:49<egp_> <egp_>  at java.lang.Class.forName0(Native Method)
26.01.19 16:09:51<egp_> <egp_>  at java.lang.Class.forName(Class.java:264)
26.01.19 16:09:53<egp_> <egp_>  at org.eclipse.egit.core.Activator.registerBuiltinLFS(Activator.java:279)
26.01.19 16:09:55<egp_> <egp_>  at org.eclipse.egit.core.Activator.start(Activator.java:212)
26.01.19 16:09:59<egp_> <egp_>  at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:779)
26.01.19 16:10:01<egp_> <egp_>  at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
26.01.19 16:10:03<egp_> <egp_>  at java.security.AccessController.doPrivileged(Native Method)
26.01.19 16:10:05<egp_> <egp_>  at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:772)
26.01.19 16:10:08<egp_> <egp_>  at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:729)
26.01.19 16:10:10<egp_> <egp_>  at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1002)
26.01.19 16:10:14<egp_> <egp_>  at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:354)
26.01.19 16:10:17<egp_> <egp_>  at org.eclipse.osgi.container.Module.doStart(Module.java:581)
26.01.19 16:10:19<egp_> <egp_>  at org.eclipse.osgi.container.Module.start(Module.java:449)
26.01.19 16:10:21<egp_> <egp_>  at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:468)
26.01.19 16:10:23<egp_> <egp_>  at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:114)
26.01.19 16:10:28<egp_> <egp_>  at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:505)
26.01.19 16:10:31<egp_> <egp_>  at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:328)
26.01.19 16:10:33<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:392)
26.01.19 16:10:35<egp_> <egp_>  at org.eclipse.osgi.internal.loader.sources.SingleSourcePackage.loadClass(SingleSourcePackage.java:36)
26.01.19 16:10:38<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:454)
26.01.19 16:10:40<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:419)
26.01.19 16:10:44<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:411)
26.01.19 16:10:46<egp_> <egp_>  at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:150)
26.01.19 16:10:48<egp_> <egp_>  at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
26.01.19 16:10:50<egp_> <egp_>  at org.eclipse.egit.ui.Activator$RepositoryChangeScanner.<init>(Activator.java:921)
26.01.19 16:10:52<egp_> <egp_>  at org.eclipse.egit.ui.Activator.setupRepoChangeScanner(Activator.java:1034)
26.01.19 16:10:54<egp_> <egp_>  at org.eclipse.egit.ui.Activator.start(Activator.java:336)
26.01.19 16:10:58<egp_> <egp_>  at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:779)
26.01.19 16:11:00<egp_> <egp_>  at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
26.01.19 16:11:02<egp_> <egp_>  at java.security.AccessController.doPrivileged(Native Method)
26.01.19 16:11:04<egp_> <egp_>  at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:772)
26.01.19 16:11:07<egp_> <egp_>  at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:729)
26.01.19 16:11:09<egp_> <egp_>  at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1002)
26.01.19 16:11:13<egp_> <egp_>  at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:354)
26.01.19 16:11:16<egp_> <egp_>  at org.eclipse.osgi.container.Module.doStart(Module.java:581)
26.01.19 16:11:18<egp_> <egp_>  at org.eclipse.osgi.container.Module.start(Module.java:449)
26.01.19 16:11:20<egp_> <egp_>  at org.eclipse.osgi.framework.util.SecureAction.start(SecureAction.java:468)
26.01.19 16:11:22<egp_> <egp_>  at org.eclipse.osgi.internal.hooks.EclipseLazyStarter.postFindLocalClass(EclipseLazyStarter.java:114)
26.01.19 16:11:25<egp_> <egp_>  at org.eclipse.osgi.internal.loader.classpath.ClasspathManager.findLocalClass(ClasspathManager.java:505)
26.01.19 16:11:30<egp_> <egp_>  at org.eclipse.osgi.internal.loader.ModuleClassLoader.findLocalClass(ModuleClassLoader.java:328)
26.01.19 16:11:32<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:392)
26.01.19 16:11:34<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:470)
26.01.19 16:11:36<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:419)
26.01.19 16:11:38<egp_> <egp_>  at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:411)
26.01.19 16:11:40<egp_> <egp_>  at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:150)
26.01.19 16:11:44<egp_> <egp_>  at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
26.01.19 16:11:46<egp_> <egp_>  at org.eclipse.osgi.internal.framework.EquinoxBundle.loadClass(EquinoxBundle.java:609)
26.01.19 16:11:48<egp_> <egp_>  at org.eclipse.core.internal.registry.osgi.RegistryStrategyOSGI.createExecutableExtension(RegistryStrategyOSGI.java:177)
26.01.19 16:11:51<egp_> <egp_>  at org.eclipse.core.internal.registry.ExtensionRegistry.createExecutableExtension(ExtensionRegistry.java:931)
26.01.19 16:11:54<egp_> <egp_>  at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:243)
26.01.19 16:11:59<egp_> <egp_>  at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:60)
26.01.19 16:12:02<egp_> <egp_>  at org.eclipse.ui.internal.services.WorkbenchServiceRegistry.getSourceProviders(WorkbenchServiceRegistry.java:174)
26.01.19 16:12:05<egp_> <egp_>  at org.eclipse.ui.internal.services.SourceProviderService.readRegistry(SourceProviderService.java:104)
26.01.19 16:12:08<egp_> <egp_>  at org.eclipse.ui.internal.Workbench$34.runWithException(Workbench.java:2378)
26.01.19 16:12:10<egp_> <egp_>  at org.eclipse.ui.internal.StartupThreading$StartupRunnable.run(StartupThreading.java:32)
26.01.19 16:12:14<egp_> <egp_>  at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:233)
26.01.19 16:12:16<egp_> <egp_>  at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:144)
26.01.19 16:12:18<egp_> <egp_>  at org.eclipse.swt.widgets.Display.syncExec(Display.java:5831)
26.01.19 16:12:20<egp_> <egp_>  at org.eclipse.ui.internal.StartupThreading.runWithoutExceptions(StartupThreading.java:95)
26.01.19 16:12:22<egp_> <egp_>  at org.eclipse.ui.internal.Workbench.initializeDefaultServices(Workbench.java:2373)
26.01.19 16:12:24<egp_> <egp_>  at org.eclipse.ui.internal.Workbench.init(Workbench.java:1654)
26.01.19 16:12:28<egp_> <egp_>  at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2859)
26.01.19 16:12:30<egp_> <egp_>  at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:654)
26.01.19 16:12:32<egp_> <egp_>  at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:336)
26.01.19 16:12:34<egp_> <egp_>  at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:597)
26.01.19 16:12:36<egp_> <egp_>  at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:148)
26.01.19 16:12:38<egp_> <egp_>  at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
26.01.19 16:12:40<egp_> <egp_>  at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
26.01.19 16:12:44<egp_> <egp_>  at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
26.01.19 16:12:47<egp_> <egp_>  at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
26.01.19 16:12:50<egp_> <egp_>  at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)
26.01.19 16:12:52<egp_> <egp_>  at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)
26.01.19 16:12:54<egp_> <egp_>  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
26.01.19 16:12:58<egp_> <egp_>  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
26.01.19 16:13:00<egp_> <egp_>  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
26.01.19 16:13:02<egp_> <egp_>  at java.lang.reflect.Method.invoke(Method.java:498)
26.01.19 16:13:04<egp_> <egp_>  at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:656)
26.01.19 16:13:06<egp_> <egp_>  at org.eclipse.equinox.launcher.Main.basicRun(Main.java:592)
26.01.19 16:13:08<egp_> <egp_>  at org.eclipse.equinox.launcher.Main.run(Main.java:1498)
26.01.19 16:13:10<egp_> <egp_>  at org.eclipse.equinox.launcher.Main.main(Main.java:1471)
26.01.19 16:13:14<egp_> <egp_> "
26.01.19 16:13:16<egp_> <egp_> this is eclipse photon R (Release) 4.8.0
26.01.19 16:13:18<egp_> <egp_> with egit
26.01.19 16:13:20<egp_> hope this helps
26.01.19 16:48:16*** Quit: egp_ (~radiognom@31.47.169.26) left #logicmoo: Ping timeout: 272 seconds
26.01.19 16:49:34*** Join: egp_ (~radiognom@31.47.169.26, (unauthenticated): radiognome invisible)
26.01.19 16:49:40<dmiles> cyc: (+ 1 1)
26.01.19 17:02:20<aindilis> well there goes another hard drive
26.01.19 17:10:40*** Quit: egp_ (~radiognom@31.47.169.26) left #logicmoo: Ping timeout: 250 seconds
26.01.19 17:14:07*** Join: egp_ (~radiognom@31.47.169.26, egp_: radiognome invisible)
26.01.19 17:14:13<dmiles> cyc: (+ 1 1)
26.01.19 20:10:29*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vbfmaewcvqpfxtze) left #logicmoo: Quit: Connection closed for inactivity
26.01.19 20:14:48*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
26.01.19 20:14:53<dmiles> cyc: (+ 1 1)
26.01.19 21:27:36<aindilis> dmiles: ping
26.01.19 21:39:09<dmiles> pong
26.01.19 21:39:25<dmiles> there goes another hard drive :(
26.01.19 21:40:25<dmiles> i found a box yearday full of HD that one day i need to data recover.. juesus they had a millimter of moss/mold on htem!
26.01.19 21:41:46<aindilis> :(
26.01.19 21:42:07<aindilis> I'll check mine then, and add a rule to FLP about stored hard drives waiting for recovery
26.01.19 21:42:36<aindilis> srry right before you replied I found a major problem with FLP
26.01.19 21:42:41<aindilis> troubleshooting it
26.01.19 21:42:43<aindilis> are you back now?
26.01.19 21:43:01<dmiles> yup about to resume the CycL calls prologo work
26.01.19 21:43:06<aindilis> cool
26.01.19 21:43:15<aindilis> I am debating what to work on
26.01.19 21:43:22<aindilis> there is so much that needs doing
26.01.19 21:43:30<dmiles> i have a tiny grepping task for you :P
26.01.19 21:43:33<aindilis> sure
26.01.19 21:43:37<dmiles> i lost a file
26.01.19 21:43:42<aindilis> yeah
26.01.19 21:44:13<dmiles> i am thinking it might been an old cycorp doc they have removed
26.01.19 21:45:16<dmiles> it contain the text:  ":input-verify-pattern"
26.01.19 21:45:43<dmiles> or ":input-extract-pattern"
26.01.19 21:46:07<dmiles> basically whatever doumentaiton i used to write https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/0f7b95e7f9c0982f790e36e425fe1b8c86d076a9/platform/e2c/backup/doom3.lisp#L93-L105
26.01.19 21:48:38<dmiles> oh not actualyl a high prioiry though
26.01.19 21:51:02<aindilis> okay yeah I'm seeing some code that contains it but so far no doc
26.01.19 21:51:31<aindilis> I think there are some official cyc docs that I am missing
26.01.19 21:51:40<aindilis> we should create a repo to share all CYC-documentation
26.01.19 21:51:42<dmiles> so ignore anything you see as lisp. or .pl anything esle would be great
26.01.19 21:51:44<aindilis> for us
26.01.19 21:54:10<dmiles> yes 
26.01.19 21:54:51<dmiles> and copy some of it to http://pdkb.org/wiki/index.php/Main_Page
26.01.19 21:55:11<aindilis> hehe, I was just looking at that
26.01.19 21:55:14<aindilis> w/ Whitten
26.01.19 21:55:36<aindilis> it's not on there btw
26.01.19 22:08:42<dmiles> i been gettign amphetimines from my doctors for over 20 years now..  so i've hit the max ammount any doctor can perscribe in good conciounce
26.01.19 22:08:55<dmiles> so my doctor turned me on to https://www.phenfactor.com/lp/page/order/?adv=1&imt=1
26.01.19 22:10:02<aindilis> cool, have you started using them?
26.01.19 22:10:11<dmiles> on my first one now
26.01.19 22:10:25<aindilis> hope it goes well, let me know how it goes
26.01.19 22:10:37<dmiles> he said it is equivalent to adderoll
26.01.19 22:10:39<aindilis> I use focus factor, but haven't noticed a different
26.01.19 22:10:41<aindilis> ah 
26.01.19 22:11:20<aindilis> I'm having a problem that Emacs is not receiving messages back
26.01.19 22:11:25<dmiles> he said he can probably only get away with 6 months of dosing me befiore i have to start buying online
26.01.19 22:11:42<dmiles> (hehe)
26.01.19 22:12:06<dmiles> talking to CYC?!
26.01.19 22:12:23<dmiles> i just now debugging a problem that CYC is not replying back to sockets
26.01.19 22:12:55<aindilis> it was rather stupid, I just had to restart UniLang
26.01.19 22:12:58<aindilis> some weirdness there
26.01.19 22:13:15<aindilis> I finally remembered that restarting FLP does not restart UniLang
26.01.19 22:13:31<aindilis> since I don't have an autoreconnect system working yet
26.01.19 22:13:42<aindilis> so it doesn't want to drop all the other clients
26.01.19 22:13:47<aindilis> and it went away after restarting
26.01.19 22:13:50<aindilis> *phew*
26.01.19 22:14:25<dmiles> time for a restart loop and a bash kill lop someplace :P
26.01.19 22:14:57<aindilis> well I want a way for them to ping localhost 9000 to see if it has come up yet
26.01.19 22:15:13<aindilis> but my code for checking the connection is messed up for some reason
26.01.19 22:16:32<aindilis> okay now i got the alexa -> FLP temperature checking working again
26.01.19 22:16:55<aindilis> now I have to fix the backword-word function which I made to greedy by mistake
26.01.19 22:17:06<aindilis> but I'll do that later, I can just disable it's use in prolog for now
26.01.19 22:17:25<dmiles> sort of nice having UniLang
26.01.19 22:17:27<aindilis> still haven't found a smoking gun on input-verify etc
26.01.19 22:17:45<aindilis> yeah UniLang is good, it just kills CPU cycles thouhg
26.01.19 22:18:13<aindilis> it's like OAA
26.01.19 22:18:34<dmiles> yeah
26.01.19 22:19:33<dmiles> oh Btw LarKC scope is to provide what you are doing but make it possible to do all in one place
26.01.19 22:19:44<dmiles> (without tcp that is)
26.01.19 22:20:20<dmiles> all the OAAs running in CYC 
26.01.19 22:21:25<aindilis> okay disabled in prolog mode for now
                 <aindilis> yeah
26.01.19 22:21:34<aindilis> yeah LarKC is like a kernel
26.01.19 22:21:42<aindilis> I'll continue to use UniLang for a lot of things
26.01.19 22:21:50<dmiles> https://metacpan.org/pod/distribution/Inline-Java/Java/PerlInterpreter/PerlInterpreter.pod
26.01.19 22:21:52<aindilis> but having LarKC will be good for info fusion
26.01.19 22:22:39<aindilis> nice!
26.01.19 22:22:40<dmiles> huh Perl6 interpro but no Perl5 interpretor for BSH
26.01.19 22:23:10<aindilis> so perl is weird because you can't cleanly wipe out namespaces
26.01.19 22:23:31<aindilis> so one advantage of unilang is being able to restart an agent while everythign else is running
26.01.19 22:23:41<aindilis> is there an equivalent technique in LarKC?
26.01.19 22:23:54<dmiles> yes
26.01.19 22:23:56<aindilis> cool!
26.01.19 22:24:15<dmiles> soerta how the Httpd Kernel runs
26.01.19 22:25:26<aindilis> k
26.01.19 22:25:49<aindilis> my next big project I am working on is bring FLP under test
26.01.19 22:26:08<aindilis> I got those testing techniques to work except that I have to get autotest to work now
26.01.19 22:27:03<dmiles> oh yeah.. i just lookd CYC/Larkc has unix process control untils to
26.01.19 22:27:11<aindilis> https://frdcsa.org/~andrewdo/dmiles/dmiles-input-verify.txt
26.01.19 22:27:15<dmiles> has unix process control utils to
26.01.19 22:27:50<aindilis> my cyc documentation did not seem to have anything
26.01.19 22:27:55<aindilis> for input-verify
26.01.19 22:29:11<dmiles> oh oh.. that grep made me know exactly tha ti can find sourcedocs that weill explain
26.01.19 22:29:25<aindilis> great :)
26.01.19 22:30:42<aindilis> brb
26.01.19 22:32:43<aindilis> b
26.01.19 22:36:52*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
27.01.19 01:20:22<aindilis> dmiles: ping
27.01.19 01:21:16<aindilis> 0bafa2d9884a3c511e7c4300eb1a69d220c068c8 segfaults
27.01.19 01:21:59<aindilis> when calling cl_eval
27.01.19 01:22:01<aindilis> /2
27.01.19 09:43:51*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
27.01.19 09:43:56<dmiles> cyc: (+ 1 1)
27.01.19 10:06:30*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
27.01.19 11:21:55*** Quit: egp_ (~radiognom@31.47.169.26) left #logicmoo: Quit: Leaving
27.01.19 11:40:38*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
27.01.19 11:43:01*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
27.01.19 11:43:07<dmiles> cyc: (+ 1 1)
27.01.19 14:06:48*** Join: AscensionChill (~radiognom@31.47.169.26, (unauthenticated): radiognome invisible)
27.01.19 14:06:54<dmiles> cyc: (+ 1 1)
27.01.19 14:07:10*** Quit: AscensionChill (~radiognom@31.47.169.26) left #logicmoo: Remote host closed the connection
27.01.19 14:44:12<aindilis> dmiles: ping
27.01.19 16:14:47*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Quit: So long, and thanks for all the fish! 2.3 Weechat is best Weechat
27.01.19 17:33:36*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
27.01.19 17:33:42<dmiles> cyc: (+ 1 1)
27.01.19 17:42:11*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
27.01.19 17:42:16<dmiles> cyc: (+ 1 1)
27.01.19 17:44:11*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Client Quit
27.01.19 20:10:37<aindilis> dmiles: ping
27.01.19 20:11:20<dmiles> aindilis: pong.. i see the crash.. going to work on it this evening
27.01.19 20:11:42<dmiles> whats the news.. how goes things?
27.01.19 20:11:48<aindilis> hey thanks for asking
27.01.19 20:11:55<aindilis> um, just trying to get productive
27.01.19 20:12:05<aindilis> you?
27.01.19 20:12:34<aindilis> I'm going to work on all the SitForProp stuff
27.01.19 20:13:34<aindilis> *causes-SitProp etc
27.01.19 20:14:43<aindilis> mainly working on FLP
27.01.19 20:16:02<dmiles> good about the SitPropStuff
27.01.19 20:16:17<aindilis> yeah, working on life rules, executive capabilities etc
27.01.19 20:16:36<aindilis> plus adversarial planning, I'll forward you what Chris wrote back about AP/3T
27.01.19 20:17:10<aindilis> oh looks like he included you
27.01.19 20:17:19<dmiles> • Achieve scalability through giving up completeness. Partial reasoning results are useful in many domains of application. Significant speedups and can be obtained by incompleteness in many stages of the reasoning process, ranging from selection of the axioms to incomplete reasoning over those axioms.
27.01.19 20:17:20<dmiles> • Do not build a single reasoning engine that is supposed to be suited for all kinds of use-cases, but instead build a configurable platform on which different components can be plugged in to obtain different scale/efficiency trade-offs, as required by different usecases.
27.01.19 20:17:39* dmiles sorry i using this to be a temp paste buffer
27.01.19 20:17:47<aindilis> np
27.01.19 20:17:51<aindilis> this is useful stuff
27.01.19 20:18:14<aindilis> also working on a lot of OS stuff
27.01.19 20:18:19<aindilis> er Emacs stuff
27.01.19 20:18:25<aindilis> trying to get productive
27.01.19 20:20:00<aindilis> I've had some bad luck working on things lately, mainly OwnTracks and receipt scanning
27.01.19 20:58:46<dmiles> > oh looks like he included you    
27.01.19 20:58:52<dmiles> on linked in or gmail?
27.01.19 20:59:04<aindilis> gmail
27.01.19 21:01:40<dmiles> if oyu domnt mind forwaring to logicoo@gmail.com that;d be great i cant find it
27.01.19 21:01:51<dmiles> oops logicmoo@gmail.com
27.01.19 21:01:59<aindilis> sure
27.01.19 21:02:00<aindilis> one sec
27.01.19 21:02:37<aindilis> sent
27.01.19 21:14:04<dmiles> very excited to get this working on LarKC.. i was goign tru some of the docs and it is very compatatible languagewise
27.01.19 21:14:48<dmiles> goal is to be by wendsday start the AP port 
27.01.19 21:23:09<dmiles> ?- cl_eval([+,1,1],O).
                 <dmiles> O = 2.
                 <PrologMUD> dmiles: % O=2
                 <PrologMUD> dmiles: %  det(Yes,1)
27.01.19 21:23:47<dmiles> oh give him the cl_eval/2 crashing him
27.01.19 21:24:00<dmiles> it'll break into my local debugger
27.01.19 21:24:35<dmiles> ?- cl_eval(['type-of',[+,1,1]],O).
27.01.19 21:24:36<PrologMUD> dmiles: % O=['CL:INTEGER',0,2147483647]
                 <PrologMUD> dmiles: %  det(Yes,1)
27.01.19 21:24:43<dmiles> ?- cl_eval(['class-of',[+,1,1]],O).
                 <PrologMUD> dmiles: % O='BUILT-IN-CLASS'
                 <PrologMUD> dmiles: %  det(Yes,1)
27.01.19 21:25:07<aindilis> that's great!
27.01.19 21:27:12<dmiles> the% O='BUILT-IN-CLASS' btw inst right.. its supposed to be '(find-class CL:INTEGER)'
27.01.19 21:27:23<dmiles> well '#.(find-class CL:INTEGER)' 
27.01.19 21:27:59<dmiles> ?- cl_eval(['class-of','#.(find-class CL:INTEGER)' ],O).
27.01.19 21:29:10<dmiles> ?- cl_eval(['class-of','#.(find-class :INTEGER)' ],O).
27.01.19 21:29:13<aindilis> k
27.01.19 21:29:42<dmiles> ?- cl_eval(['class-of','#.(find-class `CL:INTEGER)' ],O).
27.01.19 21:39:00<aindilis> okay making progress on testing
27.01.19 21:40:23<dmiles> ?- cl_eval(['class-of','#.(find-class `CL:INTEGER)' ],O).
27.01.19 21:40:43<PrologMUD> dmiles: % The following threads wouldn't die: [main]
27.01.19 22:03:33<dmiles> ?- cl_eval(['class-of','#.(find-class `CL:INTEGER)' ],O).
27.01.19 22:04:00<PrologMUD> dmiles: % The following threads wouldn't die: [main]
27.01.19 22:04:27<dmiles> ok i cam able to reproduce it well enogh i think
27.01.19 22:04:32<aindilis> k
27.01.19 22:28:43<aindilis> great I think I got it working sort of
27.01.19 22:28:46<aindilis> testing
27.01.19 22:29:23<aindilis> it's kind of roundabout: use plunit with autotest simulating tap using a formatter to format for jUnit for Jenkins
27.01.19 22:29:40<aindilis> but basically I can do plunit tests now
27.01.19 22:29:46<aindilis> in SWIPL/YASWI
27.01.19 22:30:17<aindilis> I still have to get the autotest -> tap adapter working, I emailed someone who said they have already done this
27.01.19 22:31:02<aindilis> but I guess it means I can start writing tests
27.01.19 22:31:29<dmiles> thats pretty awesome 
27.01.19 22:31:35<aindilis> :)
27.01.19 22:55:26*** Join: swamps (~radiognom@31.47.169.26, (unauthenticated): radiognome invisible)
27.01.19 22:55:32<dmiles> cyc: (+ 1 1)
27.01.19 22:55:42* swamps = egp
27.01.19 22:55:58<swamps> i'd like to try parsing wikipedia
27.01.19 22:56:11<swamps> to get a realtime-updated ontology
27.01.19 22:56:16<swamps> to create
27.01.19 22:56:44<swamps> a bit later
27.01.19 22:57:10<aindilis> swamps: 
27.01.19 22:57:13<aindilis> I am working onthat
27.01.19 22:57:36<swamps> i want to take etap4 source code (i have an old version) and rework it
27.01.19 22:57:53<swamps> it supports russian, english, french and maybe a bit more langs
27.01.19 22:58:19<swamps> etap basically has common rules + rules for word classes and indiv.words
27.01.19 22:58:38<swamps> by academic Yu.Apresyan
27.01.19 22:59:13<swamps> i think about creating a MIT/BSD lic. parser from that, not mentioning etap heritage
27.01.19 22:59:34<swamps> since it'll be a full rework
27.01.19 23:00:08<swamps> or maybe mention a heritage
27.01.19 23:03:45<swamps> aindilis, do you have a public foss project doing that?
27.01.19 23:04:04<aindilis> well yes and no
27.01.19 23:04:06<aindilis> I'm trying to release my stuff
27.01.19 23:04:19<aindilis> I don't think those tools are included in what has been released
27.01.19 23:04:40<aindilis> for me that would be ones called workhorse, reasonbase and another unnamed system
27.01.19 23:04:53<aindilis> let me try to find the unnamed system
27.01.19 23:05:09<swamps> i am not a fan of ml auto-deduced garbage rules - i'll use a ling sci data on language
27.01.19 23:05:26<swamps> no hurry
27.01.19 23:06:05<swamps> however i consider zach solan's ml parser as an ourstanding achievement
27.01.19 23:06:15<swamps> forgot its codename
27.01.19 23:07:02<swamps> still, zach solan's algorithm needs work
27.01.19 23:07:42<swamps> it's based on conditional probabilities
27.01.19 23:08:21<swamps> adios is its codename. but zach stopped working on it switching to other areas
27.01.19 23:09:09<swamps> it uses no neural networks
27.01.19 23:11:42<aindilis> so I'm interested in KBP tools
27.01.19 23:11:54<swamps> it started from non-marked-up sequences of characters, including any punctuation and whitespace
27.01.19 23:12:03<aindilis> https://www.nist.gov/tac
27.01.19 23:12:09<swamps> kbp=kb processing?
27.01.19 23:12:27<aindilis> population
27.01.19 23:12:47<aindilis> it's a way to get common relationship extraction stuff into a KB
27.01.19 23:12:57<aindilis> so like you might have for a person their spouse, employer etc
                 <swamps> interesting.
27.01.19 23:13:41<aindilis> http://web.archive.org/web/20170926184414/http://tac.nist.gov/
27.01.19 23:13:46<swamps> doesn't connect to www.nist.gov. Stupid Roskomnadzor
27.01.19 23:13:48<aindilis> I don't why nist is down
27.01.19 23:14:24<swamps> even web.archive.org is not accessible from Ru
27.01.19 23:14:34<aindilis> http://web.archive.org/web/20180902151756/https://tac.nist.gov/
27.01.19 23:14:35<swamps> stupid law enforcers broke it all
27.01.19 23:14:48<swamps> i connect via UK proxy, it works
27.01.19 23:16:06<aindilis> a simple approach is to use a high quality NER system, extract a lot of entities, run them through a definitional question answering system
27.01.19 23:16:19<aindilis> but I don't have the latter, although I tried to write one
27.01.19 23:16:34<aindilis> I parsed everything to logic form and looks for be#v#1
27.01.19 23:17:02<aindilis> that might be enough to get a comment
27.01.19 23:17:08<aindilis> for CYC
27.01.19 23:17:18<swamps> i guess it's a `vague declarative` form, not a logic
27.01.19 23:17:30<aindilis> hehe
27.01.19 23:17:44<aindilis> my DefQA system used a web search API
27.01.19 23:17:50<swamps> processing and careful evaluation is necessary to convert to logics
27.01.19 23:18:05<swamps> where's such an api?
27.01.19 23:18:06<aindilis> yeah I agree, I have an NLU theory
27.01.19 23:18:08<aindilis> I wrote it
27.01.19 23:18:11<swamps> web search
27.01.19 23:18:30<swamps> ok
27.01.19 23:18:32<aindilis> https://frdcsa.org/~andrewdo/projects/nlu/notes-axiomatized.txt
27.01.19 23:18:39<aindilis> this is my NLU theory, pretty basic
27.01.19 23:19:02<aindilis> I am working on something similar to CYC's template parser
27.01.19 23:19:11<aindilis> *also working
27.01.19 23:20:15<swamps> about (substring (entryfn sayer 100) 10 14) alike syntax - i am a fan of GATE-like annotations and references to annotations
27.01.19 23:20:28<aindilis> ah is that similar?
27.01.19 23:20:36<swamps> i.e. we have a text or file or sentence
27.01.19 23:20:41<aindilis> I realized at one point I was essentially trying to write GATE
27.01.19 23:20:51<swamps> and have many layers of annotation sets
27.01.19 23:21:01<swamps> referring to substrings
27.01.19 23:21:03<aindilis> so standoff annotation?
27.01.19 23:21:06<swamps> yes
27.01.19 23:21:08<aindilis> k
27.01.19 23:21:24<aindilis> do you have a website?
27.01.19 23:21:29<swamps> no
27.01.19 23:21:35<aindilis> here are mine:  https://frdcsa.org/~andrewdo/ https://frdcsa.org/frdcsa
27.01.19 23:21:43<swamps> it's long ago when i worked on nlu
27.01.19 23:21:48<aindilis> this is a similar system
27.01.19 23:21:52<swamps> i have little progress
27.01.19 23:22:07<aindilis> https://frdcsa.org/~andrewdo/writings/workhorse.odp
27.01.19 23:22:29<swamps> i have little code in vcs repos, not significant
27.01.19 23:22:35<aindilis> kk, brb
27.01.19 23:28:40<swamps> aindilis, also during 6 months or so, i was helping opencog's relex and link grammars - was writing various patches
27.01.19 23:28:49<aindilis> cool
27.01.19 23:29:00<swamps> mentioned as a co-author at relex's AUTHORS file
27.01.19 23:29:22<aindilis> yeah Linas said he didn't think that notes-axiomatized was doing anything particularly interesting
27.01.19 23:29:31<aindilis> he said it had been done before
27.01.19 23:30:00<swamps> but lg formalism is insufficient for russian as it has a free order of words
27.01.19 23:30:09<swamps> and lg assumes some rules
27.01.19 23:30:18<aindilis> interesting
27.01.19 23:30:28<aindilis> I really think linguistics is the key to NLU
27.01.19 23:31:24<aindilis> there was some example I was going to give but I cannot remember it, where it is basic linguistics but CYC's parser didn't even bother with it
27.01.19 23:31:43<aindilis> not knocking it, just saying it would be best to have one that paid attention to all linguistic phenonena
27.01.19 23:31:53<swamps> sure
27.01.19 23:32:53<swamps> about linguistics - it has much broader scope of thought compared to many of various modern ml approaches
27.01.19 23:33:11<aindilis> oh I think I remember, it was some tense that implied that the act was in the middle of being completed, and cyc didn't demarcate that at all
27.01.19 23:33:17<aindilis> yeah
27.01.19 23:33:19<swamps> noam chomsky demonstrates this extended scope in some of recent interviews
27.01.19 23:33:54<swamps> interviews on modern science, including cs and neurobiology
27.01.19 23:34:00<swamps> and ai
27.01.19 23:34:09<swamps> and nlp
27.01.19 23:34:27<aindilis> yeah well I'm an adherent of dmiles' approach, I would say I'm a symbolicist who will use ML as needed, but dmiles says he's not a symbolicist
27.01.19 23:34:37<aindilis> so I don't know what I am
27.01.19 23:35:07<swamps> symbols need to be derived from experience, but this is not straigtforward process - this is extremely complex process
27.01.19 23:35:09<aindilis> so I don't much care for ML like DL except that it is pretty darn useful, I'll use whatever gets the job done
27.01.19 23:35:24<swamps> yes
27.01.19 23:35:27<aindilis> I realize to get it precisely right yes, but I think CYC strikes a good balance
27.01.19 23:35:29<swamps> same here
27.01.19 23:35:49<aindilis> do you use CYC much?
27.01.19 23:35:53<swamps> i used
27.01.19 23:36:16<aindilis> so you are from Russia?  which part if I may ask?
27.01.19 23:36:21<swamps> i had a custom-written toy coverage parser using cyc
27.01.19 23:36:28<aindilis> sweet
27.01.19 23:36:31<aindilis> still have it?
27.01.19 23:36:35<swamps> russia - irkutsk, siberia, near baikal lake
27.01.19 23:36:48<swamps> yes it's on github and code.google.com
27.01.19 23:36:59<swamps> and i am not a fan of embodiment like Goertzel
27.01.19 23:37:15<swamps> i am sure embodiment is entirely optional
27.01.19 23:37:32<swamps> experience can multi-facet multi-approach
27.01.19 23:37:46<aindilis> yeah I'd agree
27.01.19 23:37:59<swamps> and embodied experiences are just a single area not covering everything
27.01.19 23:38:16<aindilis> do you have a link to your github?
27.01.19 23:38:24<swamps> Jarvis alike Grand AIs have broad experience not limited by embodiment
27.01.19 23:38:30<aindilis> mine btw is https://github.com/aindilis
27.01.19 23:38:35<swamps> i'll find a link to grammar file now
27.01.19 23:38:39<aindilis> kk
27.01.19 23:38:46<swamps> for that toy grammar using cyc
27.01.19 23:39:29<aindilis> alright I'm kinda worn out, long day, will you be around tomorrow?
27.01.19 23:39:38<aindilis> I think I'm going to put a movie on
27.01.19 23:39:44<swamps> you can notice CYC refs like #$Be(be1) or NART "(#$PronounFn ?T ?S ?N #$ObjectPronoun)"(o)
27.01.19 23:39:49<swamps> https://github.com/egphilippov/buguldey-ai-foss/blob/master/eclipse_projects/east1_20190121sn1_bundle/east1/nlparser.e1
27.01.19 23:39:59<aindilis> I just got plunit testing working for one of my larger projects, so I'm pretty happy with that
27.01.19 23:40:02<aindilis> coolbeans!
27.01.19 23:40:23<swamps> i have plenty of public vcs repos, filled with various garbage
27.01.19 23:41:22<swamps> aindilis, i'll be here long years
27.01.19 23:41:49<aindilis> looks good
27.01.19 23:41:53<aindilis> what is Genealang?
27.01.19 23:41:59<aindilis> a genealogy system?
27.01.19 23:42:28<aindilis> oh i get it, gene as in Eugene
27.01.19 23:42:32<swamps> no
27.01.19 23:42:42<swamps> genealang was never written
27.01.19 23:42:45<aindilis> kk
27.01.19 23:42:48<swamps> for genealogy expression
27.01.19 23:42:51<aindilis> ah
27.01.19 23:43:01<aindilis> I have a genealogy thing in CYC
27.01.19 23:43:13<swamps> aindilis, here are the screenshots of the work using that toy grammar. a toy nlu experiment https://github.com/egphilippov/buguldey-ai-foss/tree/master/eclipse_projects/east1_20190121sn1_bundle/east1/screenshots
27.01.19 23:43:20<aindilis> https://frdcsa.org/~andrewdo/projects/genealogy/
27.01.19 23:43:57<aindilis> that parser looks good
27.01.19 23:44:01<aindilis> I wrote something kinda similar
27.01.19 23:44:09<aindilis> except it didn't have a parse tree
27.01.19 23:44:29<aindilis> it just matched words and phrases to cyc terms using the wordnet synset mapping
27.01.19 23:47:39<swamps> it parses into a graph - a tree is simply for the graphical console explorer
27.01.19 23:47:46<aindilis> oh nice
27.01.19 23:47:54<swamps> and then applies general graph transformation rules
27.01.19 23:47:59<swamps> a list of
27.01.19 23:48:06<swamps> transf. rules
27.01.19 23:48:18<swamps> etap acts similarly
27.01.19 23:48:29<swamps> it applies transformations and filters
27.01.19 23:48:33<aindilis> looks good I am adding that you are NLU SME
27.01.19 23:48:34<swamps> same here
27.01.19 23:48:44<swamps> what is SME?
27.01.19 23:48:49<aindilis> subject matter expert
27.01.19 23:49:09<aindilis> adding to my CycKB
27.01.19 23:49:23<aindilis> trying to track who knows/works on what
27.01.19 23:49:30<swamps> yes, NLU is my main interest during life. but it's not always that i pay attn to this 
                 <aindilis> to help rally the troops
27.01.19 23:49:35<aindilis> kk
27.01.19 23:49:40<aindilis> sort of same here
27.01.19 23:49:49<aindilis> I'm also interested in planning
27.01.19 23:49:56<aindilis> but computers have advantage at NLU since they are text based
27.01.19 23:50:07<aindilis> it's easier for them to work with
27.01.19 23:50:38<aindilis> kk talk to you later!
27.01.19 23:50:46<swamps> my toy systems have toy planning. like decide() calls
27.01.19 23:50:47<swamps> etc
27.01.19 23:50:53<aindilis> good
27.01.19 23:50:55<swamps> see you
27.01.19 23:50:57<aindilis> see you!
27.01.19 23:55:58<swamps> with time, i'd like to port that east1 toy system to opencyc4.0 as it runs on linux not windows (opencyc0.7.0b has windows only)
28.01.19 01:37:32<dmiles> hrrm to KB of 0.07.0b was a little better than 4.0 (i dont rmeber so am asking)
28.01.19 01:41:02<dmiles> ?- cl_cyc_eval(['assertion-count'],O).
28.01.19 01:41:03<PrologMUD> dmiles: % O=8470118
                 <PrologMUD> dmiles: %  det(Yes,1)
28.01.19 01:42:28<dmiles> ?- cl_cyc_eval("(assertion-count)",O).
28.01.19 04:27:43*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
28.01.19 04:27:48<dmiles> cyc: (+ 1 1)
28.01.19 04:28:30*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 252 seconds
28.01.19 04:50:07*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
28.01.19 04:50:12<dmiles> cyc: (+ 1 1)
28.01.19 05:31:58*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
28.01.19 06:38:48*** Quit: swamps (~radiognom@31.47.169.26) left #logicmoo: Ping timeout: 245 seconds
28.01.19 08:22:29*** Nick change: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) is now known as Copenhagen_Bram
28.01.19 12:05:40*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uiotybabltahdgdz, stoopkid: stoopkid)
28.01.19 12:05:46<dmiles> cyc: (+ 1 1)
28.01.19 12:30:50*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
28.01.19 12:30:55<dmiles> cyc: (+ 1 1)
28.01.19 14:06:05*** Join: swamps (~radiognom@31.47.182.135, (unauthenticated): radiognome invisible)
28.01.19 14:06:10<dmiles> cyc: (+ 1 1)
28.01.19 14:30:00*** Quit: swamps (~radiognom@31.47.182.135) left #logicmoo: Quit: Leaving
28.01.19 14:38:10*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
28.01.19 15:01:23*** Join: swamps (~radiognom@31.47.182.135, (unauthenticated): radiognome invisible)
28.01.19 15:01:28<dmiles> cyc: (+ 1 1)
28.01.19 16:30:04*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
28.01.19 16:30:09<dmiles> cyc: (+ 1 1)
28.01.19 16:41:51*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
28.01.19 19:17:04<aindilis> test view: received error: '$c_call_prolog'/0: Undefined procedure: plunit_utilWritePredicates:view/1
28.01.19 19:17:20<aindilis> view is in user:view, I'm trying to run a test from a .plt file, and it cannot see view
28.01.19 19:17:23<aindilis> any ideas?
28.01.19 19:17:35<aindilis> dmiles
28.01.19 19:19:08<aindilis> making it user:view(...) instead of view(...) worked, but I don't want to have to prepend everything that way
28.01.19 19:34:04<dmiles> one option maybe is to do a  "  :- import(user:view/1). "
28.01.19 19:34:32<aindilis> so plunit tests are really only used for modules?
28.01.19 19:35:01<aindilis> .plt files I mean
28.01.19 19:35:04<dmiles> it is making up the plunit_utilWritePredicates name on its own?
28.01.19 19:35:08<aindilis> yeah
28.01.19 19:35:25<aindilis> :- begin_tests(utilWritePredicates).
28.01.19 19:36:02<dmiles> well it seems plunit is not automatically importing user:  that makes sense when the test is goign to do wierd things
28.01.19 19:36:32<aindilis> okay, so should I move these items into a module?
28.01.19 19:36:37<aindilis> like view?
28.01.19 19:36:40<aindilis> into a module util?
28.01.19 19:36:51<aindilis> :- module(util, [view/1]).
28.01.19 19:37:12<dmiles> oh that should work yes..those things can even be in their own file that you do a...
28.01.19 19:37:22<dmiles> a..   :-indclude(my_file).
28.01.19 19:37:30<aindilis> well I'm doing a :- consult('util.pl').
28.01.19 19:37:55<aindilis> I have a ton of things using util.pl and so I'd rather not make it a module right away
28.01.19 19:38:02<dmiles> that consult mostly needs to happen from within the  :- begin_tests(utilWritePredicates).
28.01.19 19:38:16<aindilis> hrm, kk
28.01.19 19:38:27<dmiles> ideal each test gives a blank slate
28.01.19 19:39:08<dmiles> the trick i use a lot though we are not supposed to..
28.01.19 19:39:16<aindilis> okay adding the consult worked
28.01.19 19:39:26<dmiles> is  :- system:consult('util.pl').
28.01.19 19:39:34<aindilis> but I'm afraid that the files do not consult all the files they need
28.01.19 19:39:49<dmiles> then the consultation happens visabible everywhere
28.01.19 19:40:20<aindilis> so like file a.pl pred1() :- true. file b.pl consult(a.pl). pred2() :- pred1().  if I do tests consult(b.pl), and run pred2, won't it miss pred1?
28.01.19 19:41:05<aindilis> her if a.pl does conuslt(b.pl) and b.pl does not do a consult
28.01.19 19:41:08<aindilis> *er
28.01.19 19:41:19<dmiles> it should as long as teh pred2 is defined in teh same maodule despiite it being in a a differnt file
28.01.19 19:41:34<aindilis> oh interesting I'll test
28.01.19 19:41:35<aindilis> ty
28.01.19 19:42:36<aindilis> I don't think so, it missed it
28.01.19 19:43:21<dmiles> you are outside of modules in this case?
28.01.19 19:43:39<dmiles> (being in a particualr test would put you into a module)
28.01.19 19:43:41<aindilis> well this is probably in plunit_utilWritePredicates
28.01.19 19:44:04<dmiles> yuo then need to consult both files
28.01.19 19:44:07<aindilis> so do I have to files containing all predicates, or should I just start rewriting the whole FLP.
28.01.19 19:44:11<dmiles> inside that unit
28.01.19 19:44:24<aindilis> maybe I could just consult the main flp file lol
28.01.19 19:44:39<aindilis> that would seem like it would take forever and blow up memeory
28.01.19 19:44:56<dmiles> yeah i'll have a standard fle that gets what you need so you only have to insidert in thing into the tests
28.01.19 19:45:18<aindilis> k
28.01.19 19:45:21<aindilis> I'll try that
28.01.19 19:47:58<aindilis> ERROR: /var/lib/myfrdcsa/codebases/minor/flp-tests/flp_tests.pl:3:                                                                                                                                                                                                                                                             
                 <aindilis>         load_files/2: No permission to load source `'/var/lib/myfrdcsa/codebases/minor/free-life-planner/lib/multifile-and-dynamic-directives.pl'' (Non-module file already loaded into module user; trying to load into plunit_utilWritePredicates0)                                                                          
28.01.19 19:51:43<aindilis> so if you have a.pl :- module(a,[]). and b.pl :- module(b,[]).  and you have c.pl :- module(c,[]). :- use_module(a).  and d.pl :- module(d,[]). :- use_module(a).  does a get loaded once or twice into memory?
28.01.19 19:52:24<dmiles> just once
28.01.19 19:52:26<aindilis> k
28.01.19 19:52:43<aindilis> man this is going to suck rewriting the whole thing
28.01.19 19:52:53<aindilis> I think I need to bone up on pldoc and plunit first
28.01.19 19:52:58<aindilis> and the mdoule systems
28.01.19 19:53:14<aindilis> do you think it's time for a rewrite?
28.01.19 19:53:19<dmiles> i had to rewrite PFC 6time due to the module system  even they 4 of them owrked
28.01.19 19:53:25<aindilis> :(
28.01.19 19:53:52<aindilis> well, I guess I'll have frdcsa/flp1 frdcsa/flp2 frdcsa/flp3
28.01.19 19:53:53<aindilis> etc
28.01.19 19:53:56<dmiles> one time i used include/1 truicks
28.01.19 19:54:14<aindilis> I am doing a lot of include and a lot of consult and a lot of ensure_loaded
28.01.19 19:54:30<aindilis> so is there a way to export every pred in the module?
28.01.19 19:54:37<aindilis> iwthout listing it all in the to_export field?
28.01.19 19:56:14<dmiles> yes.. in fact tha tis what i know do now with prologmud/logicmoo
28.01.19 19:56:24<aindilis> okay
28.01.19 19:56:33<aindilis> I will make my packs downloadable and remove private information from them
28.01.19 19:56:44<aindilis> it will be a fresh start
28.01.19 19:57:18<aindilis> I think I will make a new codebase free-life-planner-2
28.01.19 19:57:21<aindilis> I think I will make a new codebase free-life-planner2
28.01.19 19:57:25<aindilis> or just flp2
28.01.19 19:57:33<dmiles> at the time of my file si use :-use_moulde(libgrary(logicmoo_common)). 
28.01.19 19:58:00<aindilis> okay I will have to pay close attention to how logicmoo does things
28.01.19 19:58:13<aindilis> you know, maybe I don't have to rewrite everything
28.01.19 19:58:35<dmiles> then at bottem.. i use   ..
28.01.19 19:58:37<aindilis> hrm, I'll need to write a prolog system for keeping all the prolog rules in place, to verify proper code
28.01.19 19:59:57<aindilis> I am going to write a few test programs first to get a hang of the module system
28.01.19 20:00:03<aindilis> a few test FLPs
28.01.19 20:00:37<dmiles> ..  
                 <dmiles> :- fixup_exports.
28.01.19 20:01:02<aindilis> ah k
28.01.19 20:01:09<aindilis> so it just calculates them and adds them
28.01.19 20:01:10<aindilis> kk
28.01.19 20:01:37<dmiles> yes
28.01.19 20:01:46<dmiles> it acutally imports them into system
28.01.19 20:01:49<aindilis> I should probably make it so I can run both at the same time
28.01.19 20:01:54<aindilis> so I should put most things into system?
28.01.19 20:03:43<aindilis> I suppose I need to get prologmud installed on ai.frdcsa.org
28.01.19 20:03:56<aindilis> to see how it works
28.01.19 20:04:43<dmiles> i do have a version that does what you doing..  https://github.com/TeamSPoon/gvar_syntax/blob/master/prolog/globals_api.pl#L158-L167
28.01.19 20:05:29<aindilis> yeah I think I need to learn more prolog to write the next version of FLP
28.01.19 20:05:37<aindilis> I'd invite you to help if you would like
28.01.19 20:06:00<aindilis> I think honestly I could rewrite it in place
28.01.19 20:06:09<aindilis> by transitioning files one by one to modules
28.01.19 20:06:36<aindilis> I think I am going to postpone the rewrite
28.01.19 20:07:00<aindilis> maybe I could even involve anniepoo
28.01.19 20:07:32<aindilis> ooh I know, write toy version of FLP
28.01.19 20:07:36<aindilis> *versions
28.01.19 20:07:43<dmiles> if you gtet things setup so i can see the issue firsthand i can probly find a lightwight header/footer to avodi the rewrite
28.01.19 20:07:58<aindilis> okay
28.01.19 20:08:35<aindilis> I have an idea
28.01.19 20:08:42<aindilis> we will present the idea to 100K ideas
28.01.19 20:08:49<aindilis> it's a local think take
28.01.19 20:08:55<aindilis> *incubator
28.01.19 20:09:05<aindilis> hrm, nm
28.01.19 20:09:08<aindilis> ty for your help
28.01.19 20:09:18<aindilis> I'm going to just take it easy now for a bit
28.01.19 20:09:24<aindilis> how is LarKC_CL coming?
28.01.19 20:09:47<aindilis> oh, I will set it up to show you how to use it
28.01.19 20:09:52<aindilis> so you can write that header, TY!
28.01.19 20:09:55<aindilis> but not right now
28.01.19 20:09:59<aindilis> bit overwhelmed
28.01.19 20:18:52<aindilis> dmiles: I would like to install logicmoo/prologmud, is there a current best practice for that?
28.01.19 20:19:34<aindilis> I'll make the FLP2 installable from swipl or what not immediately
28.01.19 20:19:43<aindilis> it will always be installable, then I'll copy code
28.01.19 20:20:19<aindilis> it will be test driven
28.01.19 20:21:52<aindilis> I need to do requirements engineering for this
28.01.19 20:22:39<aindilis> I think I need to hold off though
28.01.19 20:22:49<aindilis> till my situation stabilizes
28.01.19 20:23:02<aindilis> but we could all work on it if it is installable
28.01.19 20:28:59<aindilis> hey I had a thought how to release FRDCSA
28.01.19 20:29:07<aindilis> maybe I could set up a second computer
28.01.19 20:29:30<aindilis> and run the scrubber and rebuild the repository and everything on the scrubbed machine
28.01.19 20:29:45<aindilis> hrm, no nm won't work, can't merge files properly
28.01.19 20:32:58<aindilis> okay probably best just to write the scrubber and continue
28.01.19 20:46:53<dmiles> jsut one long line..
28.01.19 20:46:56<dmiles> of :- maplist(P>>pack_install(P,[upgrade(true),git(true),interactive(false)]), [ predicate_streams,multimodal_dcg,eggdrop,gvar_syntax,dictoo,logicmoo_utils, instant_prolog_docs,pfc,logicmoo_base,prologmud,s_expression, wam_common_lisp,prologmud_samples]).
28.01.19 20:47:08<aindilis> ty!
28.01.19 20:48:26<aindilis> ERROR: Arguments are not sufficiently instantiated
28.01.19 21:24:33<aindilis> bbiab
28.01.19 22:40:07<dmiles> got an idea.. shell into my box.. i'll make sure you are a super user so you can "sudo su -" 
28.01.19 22:40:17<aindilis> hey I figured it out
28.01.19 22:40:19<dmiles> and install it on my machine
28.01.19 22:40:33<dmiles> ah
28.01.19 22:40:34<aindilis> both of them (the tests and logicmoo installation)
28.01.19 22:40:45<aindilis> I am working to install it on your machine
28.01.19 22:40:52<aindilis> I need the tests in place before the redaction
28.01.19 22:41:06<aindilis> and the redaction before the VM release
28.01.19 22:41:19<aindilis> so I'm happy with my progress, I've written 5 tests!
28.01.19 22:41:21<aindilis> :P
28.01.19 22:41:25<dmiles> awesome!
28.01.19 22:42:49<dmiles> root@gitlab:~# usermod -aG sudo aindilis
                 <dmiles> usermod: user 'aindilis' does not exist
28.01.19 22:42:56<dmiles> weird
28.01.19 22:43:06<aindilis> hrm
28.01.19 22:43:22<dmiles> oh you are andrewdo
28.01.19 22:43:27<aindilis> ah
28.01.19 22:43:42<dmiles> anyways you are super user now
28.01.19 22:43:47<aindilis> cool!
28.01.19 22:45:36<dmiles> so FLP stuff is workign out then?
28.01.19 22:45:48<aindilis> yeah, all I had to do was consult(.plt)
28.01.19 22:45:53<aindilis> instead of load_all_tests.
28.01.19 22:45:58<aindilis> silly
28.01.19 22:46:01<aindilis> but effective
28.01.19 22:46:20<dmiles> i see
28.01.19 22:46:35<aindilis> so I'm going to target to write tests for the most important files until all predicates are tested.
28.01.19 22:47:01<aindilis> how did it go on idni?
28.01.19 22:47:11<aindilis> I haven't read the whole thing yet
28.01.19 22:47:34<aindilis> textual programming, FRDCSAL is FRDCSA's textual programming impl
28.01.19 22:48:02<aindilis> https://frdcsa.org/frdcsa/internal/frdcsal/
28.01.19 22:48:50<dmiles> i think the things i said will make sense soon
28.01.19 22:49:05<aindilis> at the same time as I write plunit tests I should write pldocs don't you think?
28.01.19 22:49:08<aindilis> great!
28.01.19 22:51:30<dmiles> hey what is wrong with my syntax?
28.01.19 22:52:21<aindilis> idk
28.01.19 22:52:33<aindilis> I just manually maplisted them
28.01.19 22:53:41<dmiles> ok it was i needed to write [P]
28.01.19 22:53:49<aindilis> ah
29.01.19 02:57:37<aindilis> https://pastebin.com/SiBfzgCH
29.01.19 03:00:45<dmiles> i like your should_be_wrapped/1  
29.01.19 03:01:33<aindilis> thanks, I'll have to figure out how to handle all the other things that will get in the namespace in FLP
29.01.19 03:01:45<aindilis> also, is there a way to get the return value of Goal?
29.01.19 03:01:49<dmiles> should_be_wrapped(Goal):- predicate_properties(Goal,...),predicate_properties(Goal,...),predicate_properties(Goal,...),
29.01.19 03:01:58<aindilis> k
29.01.19 03:02:01<dmiles> (is another way to)
29.01.19 03:02:29<dmiles> could key of filename and line numbers etc
29.01.19 03:03:24<aindilis> aop_advice(Goal) :-
                 <aindilis>         do_aop_code_before(Goal),
                 <aindilis>         (   Goal -> Result = true ; Result = fail ),
                 <aindilis>         do_aop_code_after(Goal,Result).
29.01.19 03:03:28<dmiles> you mean durring  do_aop_code_after/1?
29.01.19 03:03:37<aindilis> yeah I think I got it
29.01.19 03:03:55<dmiles> oh yeah i would done it that way to
29.01.19 03:03:58<aindilis> alright this is pretty cool
29.01.19 03:04:03<aindilis> thanks for your help!
29.01.19 03:04:12<aindilis> I should be able to pipe this into FreeKBS2
29.01.19 03:04:24<aindilis> and then generate the tests from that
29.01.19 03:04:45<aindilis> it's also part of IAEC that I've wanted for a long time
29.01.19 03:04:54<aindilis> I found this system called WHIRL but I couldn't get it to work
29.01.19 03:05:06<aindilis> https://bigzaphod.github.io/Whirl/dma/docs/aspects/aspects-man.html
29.01.19 03:05:41<aindilis> also its the beginning of the CFO (comprehensive function ontology)
29.01.19 03:05:53<aindilis> think frames with predicate static analysis properties
29.01.19 03:06:00<aindilis> er dynamic
29.01.19 03:07:11<dmiles> that sort of metaprogramming sure makes things nice
29.01.19 03:07:21<dmiles> it becomes addictive :P
29.01.19 03:07:26<aindilis> ideally you could call all the prerequisites for a function in order to be able to use the function
29.01.19 03:07:48<dmiles> yep.. like load the predicate about to be called (if its missing)
29.01.19 03:07:56<dmiles> fix any dumb module bugs
29.01.19 03:08:02<aindilis> :)
29.01.19 03:08:15<aindilis> hey tha'ts a great idea
29.01.19 03:08:31<aindilis> do you have stuff like this in PrologMUD?
29.01.19 03:08:36<dmiles> find_and_call/1 oredicate i use sometimes
29.01.19 03:08:38* aindilis is think that you do
29.01.19 03:08:43<aindilis> cool
29.01.19 03:09:42<dmiles> find_and_call(genlMt(X,Y))  in case its found in code of in the dynaic parts
29.01.19 03:10:08<aindilis> cool
29.01.19 03:10:09<aindilis> part of my issue is Sayer https://frdcsa.org/frdcsa/internal/sayer does not work with anything but functionally dependent arguments, so I have to fix it or do it a different way.  Sayer2 supposedly fixes it, but isn't written yet.
29.01.19 03:10:27<aindilis> https://frdcsa.org/frdcsa/minor/sayer/
29.01.19 03:11:12<dmiles> logicmoo_utils is 90% aspect ortientated programming 
29.01.19 03:11:37<dmiles> providing those from logicmoo_base and prologmud
29.01.19 03:11:45<dmiles> providing those *for* logicmoo_base and prologmud
29.01.19 03:12:14<aindilis> cool
29.01.19 03:12:18<aindilis> I'll check them out
29.01.19 03:12:22<aindilis> alright I need to veg srry
29.01.19 03:12:43<aindilis> thanks again, it was a pretty good day for me, I hope for you too
29.01.19 03:14:12<dmiles> uit was think ytou! nn
29.01.19 03:14:22<dmiles> thank you
29.01.19 03:14:26<aindilis> nn!
29.01.19 03:57:14<dmiles> [00:42] <Cheery> dmiles: happen to know where I'd find guide to how to introduce forall/exist quantifiers into prolog interpreter?
29.01.19 03:57:37<dmiles> [00:52] <Cheery> a fitting interpretation of quantifiers would allow prolog to do search over interaction.
                 <dmiles> [00:53] <Cheery> but my backtracking-on-success approach has issues.
                 <dmiles> [00:53] <Cheery> http://vpaste.net/1duW0
                 <dmiles> [00:55] <dmiles> http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/6046/pdf/imm6046.pdf
29.01.19 03:57:38<dmiles> [00:56] <dmiles> oh i thought you meant to implement them.. not just qyuery them
                 <dmiles> [00:56] <dmiles> not to just make query using them.. but to assert sentences that use them :P
29.01.19 03:57:39<dmiles> [00:57] <dmiles> this "enforce them"
29.01.19 03:58:31<dmiles> i now have an example of what logical emforement means :P
29.01.19 04:23:30<dmiles>  oh eheh CYC and Advanced Math https://apps.dtic.mil/dtic/tr/fulltext/u2/a155378.pdf
29.01.19 04:23:36<dmiles> thx aindilis pointing it out
29.01.19 05:39:04*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
29.01.19 05:39:10<dmiles> cyc: (+ 1 1)
29.01.19 06:15:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uiotybabltahdgdz) left #logicmoo: Quit: Connection closed for inactivity
29.01.19 08:41:40*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
29.01.19 11:54:57*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Excess Flood
29.01.19 11:55:16*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
29.01.19 11:55:22<dmiles> cyc: (+ 1 1)
29.01.19 15:13:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gbtilukvepnkbwph, stoopkid: stoopkid)
29.01.19 15:13:07<dmiles> cyc: (+ 1 1)
29.01.19 20:32:25<aindilis> dmiles: ping
29.01.19 20:32:34<aindilis> I am sort of implementing a "tracer"
29.01.19 20:32:41<aindilis> but I cannot figure out "redo"
29.01.19 20:32:59<aindilis> (call(Goal) -> Result = 'true' ; Result = 'fail')
29.01.19 20:33:06<aindilis> how does one sense when Goal is nondet?
29.01.19 20:33:30<aindilis> I'll upload my code
29.01.19 20:36:10<aindilis> https://frdcsa.org/~andrewdo/dmiles/prolog-aop.tgz
29.01.19 21:23:43<dmiles>  (call(Goal) *-> Result = 'true' ; Result = 'fail')
29.01.19 21:25:06<dmiles> and if the call failed.. afgter you report it.. make sure you contianue to fail
29.01.19 21:27:44<dmiles> aop_advice(Goal) :-
                 <dmiles> 	do_aop_code_before(Goal),
                 <dmiles> 	(   Goal *-> Result = true ; Result = fail ),
                 <dmiles> 	do_aop_code_after(Goal,Result),
                 <dmiles> 	Result \== fail.
29.01.19 21:28:10<aindilis> k great!
29.01.19 21:28:26<dmiles> the *-> is nondet
29.01.19 21:28:58<aindilis> ah
29.01.19 21:28:59<aindilis> hehe
29.01.19 21:29:05<aindilis> I totally missed that
29.01.19 21:30:17<aindilis> yay!
29.01.19 21:32:06<aindilis> any idea how to obtain the output of call with with_output_to?
29.01.19 21:32:36<aindilis> I think I fiugred it out
29.01.19 21:33:08<dmiles> ?- with_output_to(string(String),writeln(hi)).
                 <PrologMUD> dmiles: % String="hi\n"
29.01.19 21:33:09<PrologMUD> dmiles: %  det(Yes,1)
29.01.19 21:33:47<aindilis> well wrapping it is causing the nondet to stop working it
29.01.19 21:33:50<aindilis> *working
29.01.19 21:34:11<dmiles> yeah .. JanW wanted it that way... i had to fix it for PrologMUD
29.01.19 21:34:42<dmiles> all JanW preds break nondet semantics!
29.01.19 21:34:58<aindilis> :(
29.01.19 21:35:05<dmiles> it was a bit tricky though
29.01.19 21:35:26<dmiles> ?- pwd.
29.01.19 21:35:27<PrologMUD> dmiles: % w:/opt/cyc_jrtl_with_commonlisp/platform/
                 <PrologMUD> dmiles: %  det(Yes,1)
29.01.19 21:35:51<dmiles> that is also a cpature of stderr
29.01.19 21:36:45<dmiles> oh stilly me i never wront a user to use ensuer APi for  nd_with_output_to/2
29.01.19 21:37:12<dmiles> oh stilly me i never wrote the easy API for  nd_with_output_to/2
29.01.19 21:37:51<dmiles> well https://github.com/TeamSPoon/predicate_streams/tree/master/prolog
29.01.19 21:38:41<aindilis> with_output_to_predicate( :Pred1, :Goal) is nondet. ?
29.01.19 21:38:47<dmiles> yes
29.01.19 21:39:03<dmiles> so wiht each call you have to keep that info somepnmacer
29.01.19 21:39:04<aindilis> awesomesauce!
29.01.19 21:39:13<aindilis> like an assert or something
29.01.19 21:39:21<dmiles> yes
29.01.19 21:39:28<aindilis> last question, how to print "Redo"?
29.01.19 21:39:36<aindilis> how do I tell if it's being redone?
29.01.19 21:39:42<dmiles> redo_cleanup_each(
                 <dmiles>           set_current_output(Stream),
                 <dmiles>           Goal,
                 <dmiles> set_current_output(Prev)))).
29.01.19 21:39:50<dmiles> oop[s
29.01.19 21:40:08<dmiles> i had to desing a way to detect REDO's in SWI
29.01.19 21:40:12<aindilis> I think I can probably get automated legacy testing done with this
29.01.19 21:40:19<aindilis> ah wow
29.01.19 21:40:35<aindilis> I'll make a pack out of it
29.01.19 21:40:44<aindilis> with proper author attribution
29.01.19 21:42:00<dmiles> its a little tricky detecting redo but can be done
29.01.19 21:42:31<aindilis> well it's not absolutely necessary
29.01.19 21:42:38<aindilis> I think it will figure it out
29.01.19 21:42:41<aindilis> from the db calls
29.01.19 21:42:56<aindilis> I was just wanting the tracer to be as similar as possible
29.01.19 21:43:01<aindilis> AOP tracer
29.01.19 21:43:50<dmiles> trusted_redo_call_cleanup(Setup,Goal,Cleanup):- 
                 <dmiles>    \+ \+ '$sig_atomic'(Setup),
                 <dmiles>    catch( 
                 <dmiles>      ((Goal, deterministic(DET)),
                 <dmiles>        '$sig_atomic'(Cleanup),
                 <dmiles>          (DET == true -> !
29.01.19 21:43:51<dmiles>           ; (true;('$sig_atomic'(Setup),fail)))), 
                 <dmiles>       E, 
29.01.19 21:43:52<dmiles> ('$sig_atomic'(Cleanup),throw(E))). 
29.01.19 21:44:25<dmiles> the SETUPO is called at each REDO
29.01.19 21:45:02<dmiles> oh i can write out the aop_redo
29.01.19 21:46:27<dmiles> aop_advice(Goal) :-
                 <dmiles> 	do_aop_code_before(Goal),
                 <dmiles> 	(   Goal *-> (Result = true; (aop_redo_code(Goal),fail) ) ; Result = fail ),
                 <dmiles> 	do_aop_code_after(Goal,Result),
                 <dmiles> 	Result \== fail.
29.01.19 21:47:49<aindilis> great!  TY!
29.01.19 21:48:36<dmiles> i asked JanW and Bart Daemon for help to do that.. I was tottally lost 
29.01.19 21:48:42<dmiles> they couldnt figur eit out
29.01.19 21:48:55<dmiles> thne i did :)
29.01.19 21:49:27<dmiles> JanW had been coding 30+ years .. me only 20
29.01.19 21:49:50<dmiles> Bart 40 years
29.01.19 21:50:05<aindilis> that's funny because when I saw that code it reminded me of this awesome pipe solo in a recording
29.01.19 21:50:13<aindilis> so I brought up the pipe solo just to hear it
29.01.19 21:50:31<aindilis> the first time I heard it I thought (in a good way), well now they're just showing off :)
29.01.19 21:51:09<dmiles> Actually i asked O'keef this question in 1999 and i think he answered it .. i just didnt know enought
29.01.19 21:51:12<dmiles> link pelawe
29.01.19 21:51:30<dmiles> link please
29.01.19 21:51:33<aindilis> https://github.com/TeamSPoon/predicate_streams/blob/master/prolog/predicate_streams.pl
29.01.19 21:51:37<aindilis> ops sorry
29.01.19 21:51:57<aindilis> https://youtu.be/xvr2zmReH6U?t=93
29.01.19 21:54:00<aindilis> it's best to hear it in the middle of the song though, but 93 seconds in is a long time to way
29.01.19 21:54:02<aindilis> *wait
29.01.19 21:54:09<aindilis> but it's most profound to hear it in contrast
29.01.19 21:58:22<dmiles> it is great 
29.01.19 21:58:43<aindilis> :)
29.01.19 21:58:58<dmiles> btw after Bart/Jan saw it.. (and even after i did) we are like damn that was sooo easy
29.01.19 21:59:08<aindilis> hehe
29.01.19 21:59:37<dmiles> it is much like repeat it is swindling teh predication algrythem
29.01.19 21:59:56<aindilis> yeah it will take me a while to understand it lol
29.01.19 22:01:42<aindilis> it's amazing :)
29.01.19 22:02:20<aindilis> okay I will try to hobble these two into the prolog-aop code
29.01.19 22:02:46*** Quit: swamps (~radiognom@31.47.182.135) left #logicmoo: Ping timeout: 246 seconds
29.01.19 22:03:30<dmiles> i still have to say it though.. "after every success, you create a "bogus new choice".. well now the moment the system takes the bait (such as a call to redo) .. you such 'ahah gotcha" then you fail your own code then you actualyl redo
29.01.19 22:04:07<dmiles> then you fail your own code in ortder to force the redo
29.01.19 22:04:22<dmiles> "
29.01.19 22:04:37<aindilis> I see
29.01.19 22:05:21<aindilis> I am going to break swipl-aop into its own project
29.01.19 22:05:47*** Join: swamps (~radiognom@128-71-8-213.broadband.corbina.ru, (unauthenticated): radiognome invisible)
29.01.19 22:05:53<dmiles> cyc: (+ 1 1)
29.01.19 22:05:58<dmiles> just little thinmg like that aop deserve it
29.01.19 22:06:50<aindilis> yeah my projects are pretty fine grained these days, they reside in the codebases/minor dir
29.01.19 22:07:22<aindilis> I have some larger ones but changing their namespace to something like codebases/major would be difficult (without tests)
29.01.19 22:07:33<aindilis> since I use a lot of hard coded paths :(
29.01.19 22:07:54<aindilis> easy to write code to replace that though, was supposed to be part of the auto-refactoring system that never got finished
29.01.19 22:08:27<aindilis> just regex for this guy /var/lib/myfrdcsa/codebases/minor and replace with ConcatDir(Dir('minor codebases'),<PROJECTNAME>)
29.01.19 22:08:56<aindilis> I have some pretty decent Perl refactoring tools working
29.01.19 22:09:01<aindilis> part of code-monkey
29.01.19 22:09:11<aindilis> like one I used to use a lot converts scripts into modules
29.01.19 22:16:25<dmiles> your ConcatDir(Dir('minor codebases'),<PROJECTNAME>) mechanism needs to even be project
29.01.19 22:16:35<dmiles> (hehe)
29.01.19 22:16:39<aindilis> lol
29.01.19 22:16:43<aindilis> it is MyFRDCSA project ;)
29.01.19 22:17:09<aindilis> https://github.com/aindilis/myfrdcsa/blob/master/MyFRDCSA.pm
29.01.19 22:17:32<dmiles> ha!
29.01.19 22:17:57<aindilis> some projects are a lot bigger than others
29.01.19 22:18:06<aindilis> a lot of the ones on github are my larger projects
29.01.19 22:18:35<aindilis> but the idea is swipl-aop shouldn't be bound logically to automated-legacy-testing project
29.01.19 22:18:43<aindilis> so it gets moved to its own project
29.01.19 22:19:22<aindilis> I guess they're like packs
29.01.19 22:20:02<dmiles> when your code portfolio gets to this certian size it will be nice one day to not have to write code anymore
29.01.19 22:20:14<aindilis> YES! :)
29.01.19 22:22:17<dmiles> i am sure we are already there
29.01.19 22:22:36<aindilis> you mean humanity or us in particular?
29.01.19 22:22:57<dmiles> well p[ersonaly we both are.. and humanity is there to
29.01.19 22:23:08<aindilis> cause I think I have a ways to go to get to the DWIM
29.01.19 22:23:29<dmiles> being in that place is why i took an interest in CYC 
29.01.19 22:23:37<aindilis> ah you mean in theory
29.01.19 22:23:38<aindilis> ?
29.01.19 22:23:51<aindilis> yes, I think in theory I'm to that point
29.01.19 22:24:10<dmiles> well when i took an interest in CYCm, i wasnt there yet
29.01.19 22:24:13<aindilis> ah
29.01.19 22:24:31<dmiles> but now being there it be crazy to not have sematnic autocoding
29.01.19 22:24:47<aindilis> oh I see, yeah I think you are probably further along with that
29.01.19 22:24:49<aindilis> than myself
29.01.19 22:25:03<aindilis> that's what I want with CYC
29.01.19 22:25:07<aindilis> Prolog-Agent really
29.01.19 22:25:15<aindilis> which is why I'm interested in the metaplanner
29.01.19 22:25:49<aindilis> but this idea that you run common sense collection programs and then the behavior falls out of the KBS
29.01.19 22:26:22<aindilis> how do you do it btw if you don't mind explaining?
29.01.19 22:27:24<dmiles> teh trick is that every program gets a place as adding to a PDDL domeain.. even if jnot PDDL
29.01.19 22:28:26<dmiles> like all the CYC .. cyclification parsers all claim to tpo be specializaions for a godlike impl of a perfect cyclification parser
29.01.19 22:29:07<dmiles> this way we unly have to use the virtual perfect cyclification parser
29.01.19 22:29:20<aindilis> (where is quietly/1 defined?)
29.01.19 22:29:28<dmiles> bugger.pl
29.01.19 22:29:30<aindilis> ty
29.01.19 22:29:38<dmiles> oh must_trace.pl
29.01.19 22:29:46<dmiles> oops  must.pl
29.01.19 22:31:43<dmiles>  quietly(Goal):- 
                 <dmiles>     tracing ->
                 <dmiles>       each_call_cleanup(notrace,Goal,trace);
                 <dmiles>       Goal.
29.01.19 22:32:16<dmiles>  % Wrap `quietly/1` over parts of your code you no longer need to stepped thru.
                 <dmiles>  % This is a *nondeterministic* version of notrace/1 !  (Instead of like once/1)
29.01.19 22:33:17<dmiles> thats the semantic pur version
29.01.19 22:33:23<dmiles> pure*
29.01.19 22:33:33<dmiles> which works fine
29.01.19 22:33:54<dmiles> i just wanted to mention that in case you found the real thing which is liek 30 line monster
29.01.19 22:34:02<aindilis> ah
29.01.19 22:34:52<aindilis> set_current_output?
29.01.19 22:34:54<aindilis> lives where?
29.01.19 22:35:14<aindilis> set_current_output_to
29.01.19 22:35:40<dmiles> https://github.com/TeamSPoon/predicate_streams/blob/master/prolog/predicate_streams.pl#L112
29.01.19 22:36:02<dmiles> um line 124
29.01.19 22:36:03<aindilis> ky
29.01.19 22:39:20<dmiles> set_current_output/1 is my patch top JanW's set_output/1  .. Ja ns only hacks the stream.. it doesmt also correctly set stream names
29.01.19 22:39:51<aindilis> ah
29.01.19 22:40:15<dmiles> JanWs doesnt _also_ correctly set stream names .. which breaks code later that expects to do things using stream naes
29.01.19 22:41:43<dmiles> JanW will relaize this in the next two year so can delete it it soon i hope
29.01.19 22:42:45<dmiles> well JanW does realize it but likes it the way it is.. after 2 more years of daily pain and suffering he'll go my right
29.01.19 22:43:00<dmiles> my route
29.01.19 22:43:37<dmiles> once JanW fixes  notrace/1 i can delete quitely/1
29.01.19 22:45:35<aindilis> :)
29.01.19 22:49:01<dmiles> i have to run and take a nap in  a few minutes
29.01.19 22:49:04<aindilis> kk
29.01.19 22:49:22<aindilis> thanks for your help again
29.01.19 22:50:01<dmiles> i was startign to code you up with_output_to_nondet
29.01.19 22:50:21<dmiles> but i realized the first arg will continmue to be uninsanciated
29.01.19 22:50:57<dmiles> or the first arg will be insated // but each call will get longer and long
29.01.19 22:51:05<dmiles> er
29.01.19 22:51:08<aindilis> hrm, with_output_to_predicate is not savingt to saved_output
29.01.19 22:51:42<aindilis> going to try now to do redo detection
29.01.19 22:51:44<dmiles> oh its enoungh .. but of course you have to decide whne to drain that buffer
29.01.19 22:52:32<aindilis> 	findall(O,saved_output(O),Os),
29.01.19 22:52:33<aindilis> 	retractall(saved_output(_)),
                 <aindilis> 	error([os,Os]),error_nl,
29.01.19 22:53:02<dmiles> yeah that works
29.01.19 22:53:12<aindilis> but it's just: [os,[]]
29.01.19 22:53:26<aindilis> 	with_output_to_predicate({}/[X]>>assert(saved_output(X)), ( call(Goal) *-> Result = 'Exit' ; Result = 'Fail'  )),
29.01.19 22:53:33<aindilis> :- dynamic saved_output/1.
29.01.19 22:53:49<dmiles> oh yepo you are doing it right!
29.01.19 22:54:04<dmiles> it need proably a call to flush_output
29.01.19 22:54:08<aindilis> kk
29.01.19 22:54:10<aindilis> ty!
29.01.19 22:58:24<dmiles> how did you figure out to put a lambda there? 
29.01.19 22:58:32<aindilis> you did
29.01.19 22:58:34<dmiles> i know i have one example
29.01.19 22:58:35<dmiles> ah
29.01.19 22:58:41<aindilis> what is {}/
29.01.19 22:58:58<dmiles> you can remove the {}/
29.01.19 22:59:03<aindilis> ah
29.01.19 23:00:54<dmiles> force_close/1 was suppise to flush it
29.01.19 23:01:16<dmiles> oh i see though you dode envber beleive its relaly time
29.01.19 23:01:58<dmiles> oh i see though you code never beleives it is time to be done.. since ther eare sluight choicepoints laying arround
29.01.19 23:02:14*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
29.01.19 23:02:19<dmiles> cyc: (+ 1 1)
29.01.19 23:04:34<dmiles> it is very subtle .. so subtle JanW complained and said way he made everything as if in once/1
29.01.19 23:05:07<dmiles> so that programmers dont have to think so hard
29.01.19 23:06:48<dmiles> okjm..i hope i am up in 3 hours
29.01.19 23:07:09<aindilis> okay, take care!  ttys!
29.01.19 23:07:13<aindilis> rest well
29.01.19 23:08:14*** Part: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: [No reason given]
29.01.19 23:08:26*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
29.01.19 23:08:31<dmiles> cyc: (+ 1 1)
29.01.19 23:08:37<dmiles> Pascal Hitzler in 2 hours
29.01.19 23:08:53<dmiles> erm 12pm EST
29.01.19 23:09:14<dmiles> he is a total God
29.01.19 23:09:49<aindilis> what's in 2 hours?
29.01.19 23:10:13<dmiles> i meant 12 hours
29.01.19 23:10:21<aindilis> Ontolog?
29.01.19 23:11:22<aindilis> http://ontologforum.org/index.php/ConferenceCall_2019_01_30
29.01.19 23:11:41<dmiles> thaqnmks i weas having too hard a time fining it
29.01.19 23:11:52<aindilis> it doesn't mention him?
29.01.19 23:12:06<aindilis> I will read up on him though
29.01.19 23:12:08<dmiles> ok maybe he is next week
29.01.19 23:12:10<aindilis> ah
29.01.19 23:15:13<dmiles> but tommorow at least it looks like they are going to exmplain Logicmnoo/Schank
29.01.19 23:16:02<dmiles> 12:00pm - 12:10pm Donna Fritzche: Introduction to Narrative     (2C1)
                 <dmiles> 12:10pm - 1:00pm Ken Baclawski: Proof as Explanation and Narrative     (2C2)
                 <dmiles> 1:00pm - 1:10pm Mark Underwood: Bag of Verses: Frameworks for Narration from Cognitive Psychology     (2C3)
                 <dmiles> 1:10pm - 1:30pm Discussion Time     (2C4)
29.01.19 23:17:58*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 245 seconds
29.01.19 23:35:56*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
29.01.19 23:36:01<dmiles> cyc: (+ 1 1)
30.01.19 00:38:34*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
30.01.19 03:59:29*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
30.01.19 03:59:34<dmiles> cyc: (+ 1 1)
30.01.19 04:29:00<aindilis> dmiles: ping
30.01.19 05:12:39*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gbtilukvepnkbwph) left #logicmoo: Quit: Connection closed for inactivity
30.01.19 09:01:36*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
30.01.19 10:16:30*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
30.01.19 10:16:36<dmiles> cyc: (+ 1 1)
30.01.19 11:13:52*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
30.01.19 11:56:40<dmiles> meeting is starting in 5 minutes
30.01.19 11:58:27*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
30.01.19 11:58:33<dmiles> cyc: (+ 1 1)
30.01.19 13:00:33*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
30.01.19 14:42:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mykrzlymsbstffyr, stoopkid: stoopkid)
30.01.19 14:42:06<dmiles> cyc: (+ 1 1)
30.01.19 16:34:38*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 245 seconds
30.01.19 16:35:04*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
30.01.19 16:35:09<dmiles> cyc: (+ 1 1)
30.01.19 16:58:29*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
30.01.19 16:58:49*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
30.01.19 16:58:54<dmiles> cyc: (+ 1 1)
30.01.19 17:35:50*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
30.01.19 17:43:34*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
30.01.19 17:43:39<dmiles> cyc: (+ 1 1)
30.01.19 18:09:24<aindilis> dmiles: hey
30.01.19 18:09:40<aindilis> sorry I missed the meeting today, did you say you were presenting on EC sometime?
30.01.19 18:09:46<aindilis> also any luck with LarKC_CL?
30.01.19 18:10:24<aindilis> as for me I've gotten it generating some basic tests, I'll need to roundtrip it, there's a lot of work left.
30.01.19 18:10:30<aindilis> taking an "off" day
30.01.19 18:24:27<dmiles> still working on the cyc calls prolgo stuff  https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/e2c/larkc_prolog.lisp
30.01.19 18:55:27<aindilis> cool!
30.01.19 18:56:11<aindilis> does prolog calling CYC work without a segfault?
30.01.19 19:02:48<dmiles> yes
30.01.19 19:02:55<aindilis> great, building right now
30.01.19 19:03:17<dmiles> the issue is really if java gets stackoverflow .. prolog just s3egfalts
30.01.19 19:03:25<aindilis> ah
30.01.19 19:04:13<dmiles> so it is going to be really based on what you call if it triggers a stack overflow.. i fixed a few common SOs 
30.01.19 19:04:33<aindilis> ah k, sounds like a thorny problem
30.01.19 19:06:09<dmiles> oh actualyl i can even improve it by maching it jsut return "found a bug to be fixed" when it does.. why i had not considered that before is i was busy just fixing the bogs :P
30.01.19 19:06:26<aindilis> heh, sweet!
30.01.19 19:09:19<aindilis> weird I built it and there is no cl_eval/2
30.01.19 19:09:31<aindilis> oo
30.01.19 19:09:32<aindilis> oops
30.01.19 19:10:56<aindilis> ERROR: /home/andrewdo/lib/swipl/pack/with_open_options/prolog/filestreams.pl:36:                                                                                                                                                                                                                                               
                 <aindilis>         source_sink `library(logicmoo_util_startup)' does not exist                                                                                                                                                                                                                                                            
                 <aindilis> Warning: /home/andrewdo/lib/swipl/pack/with_open_options/prolog/filestreams.pl:36:                                                                                                                                                                                                                                             
                 <aindilis>         Goal (directive) failed: logicmoo_util_filestreams:use_module(library(logicmoo_util_startup))                                                                                                                                                                                                                          
30.01.19 19:11:00<aindilis> ERROR: /home/andrewdo/lib/swipl/pack/with_open_options/prolog/filesystem.pl:14:                                                                                                                                                                                                                                                
30.01.19 19:11:03<aindilis>         module/2: No permission to redefine module `logicmoo_util_filesystem' (Already loaded from /home/andrewdo/lib/swipl/pack/logicmoo_utils/prolog/logicmoo/filesystem.pl)   
30.01.19 19:11:52<dmiles> ah i had not used tgen together yet.. i just need to get one model differnt name i suppose
30.01.19 19:13:40<aindilis> I can just cd cyc-jrtl...; git pull  ; cd platform ; git pull <- right?
30.01.19 19:13:51<aindilis> then ./build-cyc-java.sh or whatever
30.01.19 19:14:00<dmiles>  cat ~/lib/swipl/pack/with_open_options/pack.pl
30.01.19 19:14:51<aindilis> version('1.1.118')
30.01.19 19:14:59<dmiles> should only have a README.md file in it saying the files are moved away
30.01.19 19:15:18<aindilis> name(with_open_options).
                 <aindilis> version('1.1.118').
                 <aindilis> title('Utilities to open various objects for read/write').
30.01.19 19:15:21<aindilis> author( 'Douglas Miles', 'http://www.linkedin.com/in/logicmoo' ).
30.01.19 19:15:24<aindilis> packager( 'TeamSPoon/LogicMoo', 'https://github.com/TeamSPoon/' ).
30.01.19 19:15:27<aindilis> maintainer( 'TeamSPoon', 'https://github.com/TeamSPoon/' ).
30.01.19 19:15:31<aindilis> home( 'https://github.com/TeamSPoon/with_open_options' ).
30.01.19 19:15:34<aindilis> download( 'https://github.com/TeamSPoon/with_open_options/release/*.zip' ).
30.01.19 19:15:37<aindilis> provides(filestreams).
30.01.19 19:15:40<aindilis> autoload(true).
30.01.19 19:15:53<aindilis> no has two files
30.01.19 19:15:56<aindilis> how do I upgrade?
30.01.19 19:16:09<dmiles> i means all the contents of that pack to the logicmoo_utils
30.01.19 19:16:15<dmiles> i moved all the contents of that pack to the logicmoo_utils
30.01.19 19:16:34<dmiles> so rm -rf  ~/lib/swipl/pack/with_open_options/
30.01.19 19:16:52<dmiles> and then do a pack_install(with_open_options)
30.01.19 19:17:04<dmiles> and you'll get the fresh version
30.01.19 19:17:24<dmiles> whioch will say 1.2.11
30.01.19 19:17:41<aindilis> Install with_open_options@1.1.118 from GIT at https://github.com/TeamSPoon/with_open_options.git Y/n
                 <aindilis> 	   
30.01.19 19:17:51<aindilis> it looks like it's missing
30.01.19 19:18:00<dmiles> say no.. i guess i have to register my cocal hope
30.01.19 19:18:04<dmiles> one sec
30.01.19 19:19:33<dmiles> pack_install('https://github.com/TeamSPoon/with_open_options.git').
30.01.19 19:20:32<aindilis> great, ty!
30.01.19 19:22:47<aindilis> I bet you Dunning-Kruger explains a lot of the attitudes wrt CYC
30.01.19 19:23:53<dmiles> hah
30.01.19 19:32:25<dmiles> ok i get hte cl_eval/2/1 problem now
30.01.19 19:32:36<dmiles> gettign it
30.01.19 19:32:38<aindilis> hrm, phew I thought I had to reinstall
30.01.19 19:32:46<aindilis> which is hard on my disks I think
30.01.19 19:37:11<aindilis> since that other failure I'm wary, I now need 2 disks to break even
30.01.19 19:41:57<dmiles> almost got it but now have to run and test
30.01.19 19:42:04<aindilis> k great!
30.01.19 19:42:12<dmiles> takes about 20 minutes 
30.01.19 19:42:16<aindilis> k
30.01.19 21:03:44<aindilis> thanks for getting it ready
30.01.19 21:32:11<dmiles> breaks on ?- cl_eval(['cyc:find-assertion-by-id',4353450],O),cl_eval(['cyc:assertion-sentence',O],OO).
30.01.19 21:32:29<dmiles> so i need to try to find that .. then it will be ready
30.01.19 21:32:40<aindilis> you mean ready ready?
30.01.19 21:32:58<aindilis> to the point where I can call limitless CYC from SWIPL at reasonably high speed?
30.01.19 21:33:10<dmiles> yes
30.01.19 21:33:12<aindilis> wow!
30.01.19 21:33:29<aindilis> I hope I live long enough to enjoy the fruits of this system
30.01.19 21:33:32<dmiles> i still need to fininsh the "cyc call prolog"
30.01.19 21:33:44<aindilis> yeah, understood, but I can get started in the meantime
30.01.19 21:33:47<dmiles> but prolog calls cyc is fine
30.01.19 21:33:50<dmiles> will be fine
30.01.19 21:35:58<dmiles> oh i have to run back on the PrologSync
30.01.19 21:36:07<dmiles> turn that back on
30.01.19 21:36:33<dmiles> and make sure it doenst make prolgo OOME
30.01.19 21:36:40<dmiles> out of memory error
30.01.19 21:37:04<dmiles> when i sync the 59 million assertions its does
30.01.19 21:37:36<dmiles> but i trying to just asset the contents instead
30.01.19 21:37:42<dmiles> assert
30.01.19 21:40:25<dmiles> cl_eval(['cyc:assertion-sentence',O],OO). was supposed to be cl_eval(['cyc:assertion-formula',O],OO).  but it should be taking down the whole system
30.01.19 21:41:49<dmiles> ok to realy rely be ready i do need to keep an object table
30.01.19 21:42:33<dmiles> so kets say 3 hours from now
30.01.19 21:42:44<aindilis> k no worries, I'm going to take an "off day", so there's no rush on my end
30.01.19 21:43:47<aindilis> btw, when I take an "off day", I wind up relaxing to the point where I become productive again, provided there's a real shot at doing nothing or just "fun" stuff.  it's like reverse psychology.  So I take 20 off days in a row and wind up working 20 days lol.  sometimes I need a real "off day"
30.01.19 21:44:05<dmiles> yeah
30.01.19 21:44:33<dmiles> oh .. i have an idea.. no object table!
30.01.19 21:45:12<dmiles> that means if we want Assertion with its MT we have to ask for it
30.01.19 21:45:33<dmiles> right now i am preconverting it based on what i think we want
30.01.19 21:46:28<dmiles> but i have tio run for groceries why i sid 3 hiyurs and not 2 :P
30.01.19 21:46:35<dmiles> but enjoy day off for  ahile!
30.01.19 21:46:50<aindilis> ty, I hear it's nice weather where you are?
30.01.19 21:47:01<aindilis> it's like -24 here
30.01.19 21:47:09<dmiles> oh wow
30.01.19 21:47:10<aindilis> but going to find my happy place
30.01.19 21:47:23<dmiles> weather is fine here as usual
30.01.19 21:47:25<aindilis> yeah added a reminder to FLP to stock up on groceries before winter storm
30.01.19 21:47:27<aindilis> *s
30.01.19 21:47:32<aindilis> :)
30.01.19 21:48:11<aindilis> it really chaffes me that there is no FLP (yet)
30.01.19 21:48:57<dmiles> FLP is big a job
30.01.19 21:49:28<aindilis> yeah thanks for all your help, I feel that I can become prodcutive on it again if I can bring it under test and not have to play whackamole
30.01.19 21:49:53<aindilis> under test and refactor
30.01.19 21:50:45<dmiles> you should werite 
30.01.19 21:51:06<dmiles> oopps the cat did that
30.01.19 21:51:16<aindilis> lol wasn't quite sure what it meant
30.01.19 21:52:04<dmiles> i was going to write out:  you should write out the actual todo list of FLP .. but was going to say that since we were refering to "a day off"
30.01.19 21:52:24<aindilis> ah do you want a copy of the to.do list?
30.01.19 21:52:35<dmiles> was/wanst
30.01.19 21:52:39<dmiles> sure
30.01.19 21:52:52<aindilis> okay I will begin producing it, it's strewn a lot of places
31.01.19 02:35:19<dmiles>  ?- cl_eval(['cyc:find-assertion-by-id',4353450],O),cl_eval(['cyc:assertion-formula',O],OO).
31.01.19 02:37:39<dmiles>  ?- cl_eval(['cyc:find-assertion-by-id',4353450],O),cl_eval(['cyc:assertion-formula',O],OO).
31.01.19 02:37:40<PrologMUD> dmiles: % O='ASSERTION'(4353450), OO=['oboDerived:hasExactSynonym','oboGo:P-XyleneBiosyntheticProcess','"p-xylene biosynthesis"']
                 <PrologMUD> dmiles: %  det(Yes,1)
31.01.19 02:37:44<dmiles>  ?- cl_eval(['cyc:find-assertion-by-id',4353450],O),cl_eval(['cyc:assertion-formula',O],OO).
31.01.19 02:37:45<PrologMUD> dmiles: % O='ASSERTION'(4353450), OO=['oboDerived:hasExactSynonym','oboGo:P-XyleneBiosyntheticProcess','"p-xylene biosynthesis"']
                 <PrologMUD> dmiles: %  det(Yes,1)
31.01.19 02:37:58<dmiles>  ?- cl_eval(['cyc:find-assertion-by-id',450],O),cl_eval(['cyc:assertion-formula',O],OO).
                 <PrologMUD> dmiles: % O='ASSERTION'(450), OO=[termOfUnit,'NART'(450),['LFStreetNameFn','LFAgent','HumanResidence']]
                 <PrologMUD> dmiles: %  det(Yes,1)
31.01.19 02:38:34<dmiles> ?- cl_eval(['cyc:nart-formula','NART'(450)],OO).
31.01.19 02:38:56<PrologMUD> dmiles: % OO=<jref>(0x456beb8)
31.01.19 02:38:57<PrologMUD> dmiles: %  det(Yes,1)
31.01.19 02:39:04<dmiles> ?- cl_eval(['cyc:nart-formula','NART'(450)],OO).
31.01.19 02:41:58<PrologMUD> dmiles: % OO=<jref>(0x46d3618)
31.01.19 02:41:59<PrologMUD> dmiles: %  det(Yes,1)
31.01.19 02:43:48<dmiles> ?- cl_eval(['cyc:nart-formula','NART'(450)],OO).
31.01.19 02:49:10<dmiles> ?- cl_eval(['cyc:nart-formula','NART'(450)],OO).
31.01.19 04:43:36<dmiles> ?- cl_eval(['cyc:nart-formula','NART'(450)],OO).
31.01.19 04:44:32<dmiles>  ?- cl_eval(['cyc:nart-el-formula','NART'(450)],OO).
                 <PrologMUD> dmiles: % OO=['LFStreetNameFn','LFAgent','HumanResidence']
                 <PrologMUD> dmiles: %  det(Yes,1)
31.01.19 04:44:59<dmiles>  ?- cl_eval(['type-of','NART'(450)],OO).
31.01.19 04:45:00<PrologMUD> dmiles: % OO='CYC:NART'
                 <PrologMUD> dmiles: %  det(Yes,1)
31.01.19 04:45:14<dmiles>  ?- cl_eval(['class-of','NART'(450)],OO).
                 <PrologMUD> dmiles: % OO='#.(COMMON-LISP:FIND-CLASS \'COMMON-LISP:T)'
31.01.19 04:45:15<PrologMUD> dmiles: %  det(Yes,1)
31.01.19 04:49:47<dmiles>  ?- cl_eval(['class-of','NART'(450)],OO).
31.01.19 04:54:13<PrologMUD> dmiles: % OO='STRUCTURE-CLASS'
                 <PrologMUD> dmiles: %  det(Yes,1)
31.01.19 04:54:56<dmiles>  ?- cl_eval(['class-of','NART'(450)],OO).
31.01.19 04:54:57<PrologMUD> dmiles: % OO='STRUCTURE-CLASS'
                 <PrologMUD> dmiles: %  det(Yes,1)
31.01.19 04:55:03<dmiles>  ?- cl_eval(['class-of','NART'(450)],OO).
31.01.19 04:55:04<PrologMUD> dmiles: % OO='STRUCTURE-CLASS'
                 <PrologMUD> dmiles: %  det(Yes,1)
31.01.19 04:55:16<dmiles>  ?- cl_eval(['class-of','NART'(450)],OO).
31.01.19 05:36:26<aindilis> https://keysleft.com/
31.01.19 10:04:13*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
31.01.19 10:04:22<dmiles> cyc: (+ 1 1)
31.01.19 11:15:00*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Quit: So long, and thanks for all the fish! 2.3 Weechat is best Weechat
31.01.19 12:03:38*** Quit: swamps (~radiognom@128-71-8-213.broadband.corbina.ru) left #logicmoo: Ping timeout: 272 seconds
31.01.19 17:08:17*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
31.01.19 17:08:22<dmiles> cyc: (+ 1 1)
31.01.19 18:29:49*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
31.01.19 19:02:17<aindilis> hey
31.01.19 20:04:34<dmiles> [17:01] <sseehh> i know prolog has some kind of + - variable direction specifier.. i just ended up hardcoding it as interactions with an Evaluation context which extends the NARS unifier
31.01.19 20:04:35<dmiles> [17:01] <sseehh>  protected Term computeXfromYandXY(Evaluation e, Term x, Term y, Term xy) {
                 <dmiles> [17:01] <dmiles> oh ehe do you mind if i paste some of this chant into #logicmoo ?
31.01.19 20:04:36<dmiles> [17:02] <sseehh> then depending on what happens it can either replace the entire term, bind some variable to one or more possible groundings, or cancel
                 <dmiles> [17:02] <sseehh> go for it
31.01.19 20:04:37<dmiles> [17:02] <dmiles> there is a couple peopel you' will see in there that are in #nars but they are not going to rat you out
                 <dmiles> [17:02] <sseehh> when multiple variables with multiple possiblities are found it uses a cartesian iterator to try them
31.01.19 20:04:38<dmiles> [17:02] <sseehh> lol np
                 <dmiles> [17:03] <sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/eval/Evaluation.java
31.01.19 20:04:39<dmiles> [17:03] <sseehh>  public void canBe(Term x, Iterable<Term> y) {
31.01.19 20:04:40<dmiles> [17:03] <dmiles> ok yes the iterator deal ..  saythe term will become 3 differnt gorund versions
                 <dmiles> [17:03] <sseehh> this tells it that 'x' (a variable probably) is possibly any of the values in Y
31.01.19 20:04:41<dmiles> [17:03] <dmiles> NARS views this as how?
31.01.19 20:04:42<dmiles> [17:04] <sseehh> so it will try them
                 <dmiles> [17:04] <sseehh> well currently it attempts thees kinds of evaluations for every task that is input
31.01.19 20:04:43<dmiles> [17:04] <dmiles> we force NARS into dealling with teh 3 diffenrt results?
31.01.19 20:04:44<dmiles> [17:04] <sseehh> oh it genreates multiple tasks
                 <dmiles> [17:04] <sseehh> like
31.01.19 20:05:00<dmiles> -
                 <dmiles> [17:04] <dmiles> lets contiuue this in #logicmoo
31.01.19 20:05:20*** Join: sseehh (~me@2601:547:501:6b0c::d442, sseehh: realname)
31.01.19 20:05:25<dmiles> cyc: (+ 1 1)
31.01.19 20:05:44<dmiles> i just pasted the last 2- lines
31.01.19 20:06:00<dmiles> so it genrated the multiple tasks
31.01.19 20:06:07<dmiles> genrates*
31.01.19 20:06:21<sseehh> https://github.com/automenta/narchy/blob/f93f3773e8e499eebbe99ecd50c592f7f5b610d1/nal/src/main/java/nars/Task.java#L864
31.01.19 20:07:02<dmiles>  new Perceive.TaskEvaluation(each).evalTry(n.evaluator, x);
31.01.19 20:07:18<dmiles> does that sort of "force" ?
31.01.19 20:07:45<dmiles> what i mean be force is make it as if nars did it
31.01.19 20:08:19<sseehh> yes and no, well im sure there is a better way
31.01.19 20:08:23<sseehh> but this is what happens
31.01.19 20:08:36<sseehh> if there is potential for functor evaluation, rewriting etc, it sends it thorugh this
31.01.19 20:08:47<sseehh> if it generates no additional tasks then the input task proceeds normally
31.01.19 20:08:55<sseehh> being a belief, question, goal etc
31.01.19 20:09:10<dmiles> gotcha so not backwards compatibility issues if it is not being leveraged
31.01.19 20:09:11<sseehh> but if it generates some variations, then it is as if this task was rewritten to one or more new tasks
31.01.19 20:09:25<sseehh> yes this is totally experimental
31.01.19 20:09:37<sseehh> but i can show how it is supposed to work and where it sort of does
                 <dmiles> (and totaly still no issues to leverge)
31.01.19 20:09:43<sseehh> but it is not at full potential yet
31.01.19 20:10:01<sseehh> there is also an UnevaluatedTask subclass of TAsk
31.01.19 20:10:04<sseehh> which just prevents this evaluation step
31.01.19 20:10:11<sseehh> which is useful for 'quoting' a task
31.01.19 20:10:12<sseehh> like
31.01.19 20:10:30<sseehh> if you want to teach it that equals(2,add(#1,x))
31.01.19 20:10:38<sseehh> if you just evaluate it it will be 'true'
31.01.19 20:10:42<sseehh> with #1
31.01.19 20:10:43<sseehh> =1
31.01.19 20:10:44<sseehh> or something
31.01.19 20:11:04<sseehh> but as an UnevaluatedTask it proceeds into the perception and memory as-is
31.01.19 20:11:19<sseehh> here is an example of what this is all for
31.01.19 20:11:41<sseehh>     assertArithmetic("(f(1)==>f(2))", "[((f(#1)==>f(#2))&&cmp(#1,#2,-1)), ((f(#1)==>f(add(#1,1)))&&equal(#1,1))]");
                 <sseehh> assertArithmetic("(f(2)==>f(1))", "[((f(#1)==>f(#2))&&cmp(#2,#1,-1)), ((f(add(#1,1))==>f(#1))&&equal(#1,1))]");
31.01.19 20:12:03<sseehh> this is a plugin i call arithmetic introduction because it decorates some input belief with arithmetic relationships
31.01.19 20:12:11<sseehh> between 2 or more integer subterms
31.01.19 20:12:27<sseehh> so by inputting: (f(1)==>f(2)).
31.01.19 20:12:56<sseehh> nars will accept this as an ordinary 'implication' belief basically it is the equivalent of prolog: f(2) |- f(1).
31.01.19 20:13:10<sseehh> but if the arithmetic plugin processes it
31.01.19 20:13:20<sseehh> it will produce those 2 outputs
                 <dmiles> i think i am starting to understand ..you are allowing the same sort of leanring to learn about logical operations as if they are an environment
31.01.19 20:13:27<sseehh> ((f(#1)==>f(#2))&&cmp(#1,#2,-1))
31.01.19 20:13:34<sseehh> ((f(#1)==>f(add(#1,1)))&&equal(#1,1))
31.01.19 20:13:55<sseehh> in this separated form with variables, it becomes possible to find the patterns connecting differnt examples
31.01.19 20:14:04<sseehh> so if i enter f(2)==>f(3),  f(3)==>f(4)
31.01.19 20:14:18<dmiles> (well in this case you are actualyl asserting how to do things and lettting it go into the nornal layers that emember stuff)
31.01.19 20:14:20<sseehh> eventually the pattern described by the relationship among variables becomes stronger than the individual cases
31.01.19 20:14:47<sseehh> imagine a pixel bitmap and beliefs specify whether each pixel is on or off
31.01.19 20:15:07<sseehh> you end up wtih stuff like (&&, b(1,2), --b(2,3), b(3,4)) etc
31.01.19 20:15:56<sseehh> now if it gets the arithmetic introduced input also then it can learn rules that can apply to new inputs by variable unfication within this isolated term eval context
31.01.19 20:16:12<dmiles> in this case we are instead of using pixels we used relationships applicatible in many more parts of applicaitons
31.01.19 20:16:58<dmiles> (such as arithemitc)
31.01.19 20:17:15<sseehh>  assertEval($$("x(0)"), "(x(#1) && equal(add(#1,1),1))");
31.01.19 20:17:18<sseehh> now here it is in reverse
31.01.19 20:17:35<sseehh> if it somehow derives the belief: (x(#1) && equal(add(#1,1),1)).  or it could be a question or goal or whatver
31.01.19 20:17:38<sseehh> and then you evaluate this
31.01.19 20:17:53<sseehh> see how #1 gets assigned to 0
31.01.19 20:18:05<sseehh> by working backwards
31.01.19 20:18:32<sseehh> this is how one part of the system's processing, oblivious to arithmetic, gets completed by another part which deals specifically with arithmetic but is oblivious to everything else
31.01.19 20:19:01<sseehh> these kinds of inline evaluations are designed to be applied directy in the term substitutor after unification
31.01.19 20:19:19<sseehh> so they are in some cases meant to be invisible transformation steps
31.01.19 20:19:40<sseehh> but using UnevaluatedTask allows these kinds of steps to teach the system explicitly
31.01.19 20:20:19<sseehh> i dont know the best way of using these things and it feels like i only got about 50% fully thought out
31.01.19 20:20:36<sseehh> it isnt using prolog here but the design is totally inspired by it
31.01.19 20:21:57<sseehh> if it could use prolog in this way, with tight integration with the unifier, substitution, task evaluation etc i think this is really powerful to bridge the capabilities of deterministic programming with the unpredictability of nars
31.01.19 20:22:28<sseehh> and also many opportunities for memoization
31.01.19 20:56:56<aindilis> dmiles: I think we should get the source code from Bratko and include it if possible.  in fact there are many books we ought to get the source code from.
31.01.19 20:57:23<aindilis> also I thought of a way to fund FLP - we could develop special modules for special needs communities, like Parkinson's, and soliciit funding from places like the Fox foundation
31.01.19 20:59:26<dmiles> back.. reading scrollback
31.01.19 21:00:22<dmiles> > i dont know the best way of using these things and it feels like i only got about 50% fully thought out
31.01.19 21:01:15<dmiles> well the case when not having these thing as possiblity at all (in NARS) felt wrong
31.01.19 21:01:37<dmiles> even if we cant exectly justify why we need them
31.01.19 21:03:11<dmiles> as you said, it isnt that we need prolog for such things ("inspired by") we still have to probably have some access to doign them
31.01.19 21:03:50<sseehh> there is so much overlap in what prolog does and what nars does that there has to be a way to integrate them
31.01.19 21:04:40<sseehh> and at the same time give nars and the user both the power of available evrything useful that prolog does and has done for decades
31.01.19 21:05:50<sseehh> im trying to build SxxMachine, i just load it into intelliJ and got some issues probably missing some important build step
31.01.19 21:06:22<sseehh> but ideally something like this can load into any java IDE and build, either maven or gradle.  probably a maven config would be good to add for this project
31.01.19 21:06:23<dmiles> can import "Eclipse Project" ?
31.01.19 21:06:46<sseehh> i dont have the eclipse plugin installed and even if i did activate it i dont know if it would work but i will try that as a last resort
31.01.19 21:06:53<dmiles> i excluded various files (since some are duplicationed)_
31.01.19 21:07:16<dmiles> then set it up to builkd each directory are its own step i think
31.01.19 21:07:18<sseehh> basically it seems 2 erorrs in bench
31.01.19 21:07:24<sseehh> can not find Const.Intern
31.01.19 21:07:27<dmiles> first build needs the jar.. sencond build doesnt etc
31.01.19 21:07:50<sseehh> well it just seems to not find this one method and thats the only thing preventing a build
31.01.19 21:07:59<sseehh> i could jut write it
31.01.19 21:08:00<sseehh> String.Intern
31.01.19 21:08:05<sseehh> ill try that
31.01.19 21:08:28<dmiles> Const Intern should fallover the the factor that Const ihnerits from
31.01.19 21:08:34<dmiles> factory*
31.01.19 21:08:55<dmiles> i subclassed a static class that has Intern
31.01.19 21:09:07<sseehh> Term?
31.01.19 21:09:12<sseehh> public class Const extends Term {
31.01.19 21:09:21<dmiles> yeha and then Term inherits the static class
31.01.19 21:09:28<sseehh> abstract class Term implements Undoable {
31.01.19 21:09:40<dmiles> ok hrrm tha tis the wrong verions
31.01.19 21:09:48<sseehh> yeah i figured something is off
31.01.19 21:10:14<sseehh> in the meantime ill see what happens just patching it
31.01.19 21:11:10<sseehh> ?- animal(X).
                 <sseehh> X = goat
                 <sseehh> Yes
                 <sseehh> more? 
31.01.19 21:11:13<sseehh> seems to work
31.01.19 21:11:38<dmiles> https://github.com/DouglasRMiles/SxxMachine
31.01.19 21:12:51<sseehh> oh ok
31.01.19 21:13:46<dmiles> this one merges Taurus code
31.01.19 21:13:49<sseehh> where does all this bootlib, lib stuff come from? generated by another prolog?
31.01.19 21:13:53<dmiles> Taurus
31.01.19 21:14:17<dmiles> bootlib is semihand coded from another prolog
31.01.19 21:14:23<dmiles> Tauru
31.01.19 21:16:00<sseehh> what is missing from this in order to support cyc?
31.01.19 21:16:56<sseehh> this repo has pom.xml
31.01.19 21:16:57<sseehh> good
31.01.19 21:17:23<dmiles> the pom was a leftover :P
31.01.19 21:17:58<dmiles> which i saw how they wanted it to build but xjrn noticed it would never work if a person was using it to build the uncompoiled system
31.01.19 21:18:34<dmiles> remember when xjrn couldnt figure out how to build CafeProlog
31.01.19 21:18:44<dmiles> erm the com.google version at least
31.01.19 21:19:18<dmiles> it was because the google one they ripped and tore away everything they didnt understand
31.01.19 21:19:53<dmiles> leaving it to self host .. but no self to host
31.01.19 21:20:07<sseehh> well if there is some extra build step it can be added to a maven config
31.01.19 21:20:35<dmiles> before it can compile itself the first time it has to have another prolog (or an old copy of itself)
31.01.19 21:20:39<sseehh> [WARNING] 'build.plugins.plugin[org.apache.maven.plugins:maven-antrun-plugin].dependencies.dependency.systemPath' for com.sun:tools:jar refers to a non-existing file /home/me/jdksrc/build/linux-x86_64-server-release/jdk/../lib/tools.jar. Please verify that you run Maven using a JDK and not just a JRE. @ line 38, column 19
31.01.19 21:20:55<sseehh> just a note because i am trying it with the latest jdk
31.01.19 21:21:31<sseehh> dunno ill figure it out. but is there something specific i should need to do to build this
31.01.19 21:23:06<sseehh> oh i see
31.01.19 21:24:09<sseehh> it would be nice if this can all be done at runtime as a generic jar extraction procedure and cache the results
31.01.19 21:25:18<dmiles> yeah it makes sense to have a Main that actualyl gets it going from wher eit 
31.01.19 21:25:29<dmiles> from hwrre it is
31.01.19 21:25:55<dmiles> well i shoudl confirm at least once i can buuild it
31.01.19 21:25:58<sseehh> yeah then it really defines what the bootstrap consists of
31.01.19 21:26:05<sseehh> because some of it may not always be necessary
31.01.19 21:26:09<sseehh> it can filter out what it needs at that point
31.01.19 21:26:28<dmiles> right much of it wont be until some .prolog file is edited
31.01.19 21:26:40<sseehh> yeah then a lot can be lazily computed
31.01.19 21:27:05<sseehh> does this use anything for memoization
31.01.19 21:27:06<sseehh> ?
31.01.19 21:27:36<sseehh> memoization and resource caching can be the same thing, some kind of persistent map<>
31.01.19 21:28:29<dmiles> it needs CYC for memoizaion :P
31.01.19 21:29:12<sseehh> https://github.com/automenta/narchy/tree/volatile1/util/src/main/java/jcog/memoize
31.01.19 21:29:13<dmiles> well i started to code a path to memoizaion
31.01.19 21:29:32<sseehh> https://github.com/automenta/narchy/blob/volatile1/util/src/main/java/jcog/memoize/byt/ByteHijackMemoize.java#L10
31.01.19 21:30:19<sseehh> and i found this today https://github.com/comodal/collision which is similar to that hijack memoize but more map-like
31.01.19 21:30:41<sseehh> collision is probably the closest thing to hijack that ive found
31.01.19 21:30:46<dmiles> oh yeah i think it makes sence to have function meooization and predicate memoization both
31.01.19 21:31:02<dmiles> i seeing some of your code is about function memoization
31.01.19 21:31:46<sseehh> yes this package is about that. just a bunch of different memoization impl that just cache X,Y pairs computed by a provided Function<X,Y> 
31.01.19 21:31:54<dmiles> thought predicate memoization can often be function as long as you see a predicate as returning a list of copies of itelf
31.01.19 21:32:00<dmiles> thought/though
31.01.19 21:32:18<sseehh> is that 'tabling'
31.01.19 21:32:20<sseehh> or something else
31.01.19 21:32:26<dmiles> tabling yeah
31.01.19 21:32:38<sseehh> you can use something like this for that you can just use tuple keys
31.01.19 21:32:42<dmiles> what i was saying is i didnt implement tabling
                 <sseehh> ot contextualize each instance
31.01.19 21:32:51<sseehh> but probably for that a tree-like stucture would be more ideal
31.01.19 21:32:56<dmiles> (yet) getign to get tabling from cyc
31.01.19 21:32:57<sseehh> i wanted to make a hijack tree
31.01.19 21:33:12<sseehh> trie rather
31.01.19 21:33:23<sseehh> https://github.com/automenta/narchy/blob/volatile1/util/src/main/java/jcog/tree/radix/MyConcurrentRadixTree.java
31.01.19 21:33:28<dmiles> yeah .. i did start to get the code ready fro the tries based memo
31.01.19 21:33:59<sseehh> this is modified from concurrent radix trie .  i just poured it into one class
31.01.19 21:34:18<sseehh> byte[]-level trie deduplication with map-like semantics, arbitrary values at the leaves
31.01.19 21:34:19<dmiles> well there are two low level preds i need to add   shift/N and reset/N
31.01.19 21:35:11<sseehh> it uses reentrant rw lock here but further improvement would see this converted to the newer StampLock like i did for the Rtree
31.01.19 21:35:30<sseehh> hijackbag is just fully atomic like the original non-blocking hashmap
31.01.19 21:35:39<sseehh> collision had the same idea too
31.01.19 21:36:34<dmiles> that non-blocking motif shoulda coulda been used everywhere 
31.01.19 21:36:39<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/term/util/builder/InterningTermBuilder.java this is what i do with term interning
31.01.19 21:37:11<dmiles> thoat interning is to allow a termKey usefull in places right>?
31.01.19 21:37:31<sseehh> it sets up a bunch of memoizers which basically is just serializing function arguments to hashed byte[] keys and the result of specific functions
31.01.19 21:37:36<dmiles> (as a baseis of a tries check)
31.01.19 21:38:00<dmiles> i see
31.01.19 21:38:02<sseehh> the interning has 2 main purposes, one is to ideally speed up repeated computation (assuming the compute is more expensive than a lookup or failed store)
31.01.19 21:38:06<sseehh> but more importantly
31.01.19 21:38:20<sseehh> it is to ensure one or nearly one copy of any immutable singleton
31.01.19 21:38:31<sseehh> which saves memory but also makes == comparisons fast
31.01.19 21:38:43<dmiles> *nod*
31.01.19 21:38:46<sseehh> and the saving memory also puts less burden on cpu cache meaning everything should proceed smoother
31.01.19 21:38:51<sseehh> ideally
31.01.19 21:39:13<sseehh> especialy when terms contain other terms, if these can all be focused on the same parts as higher levels get constructed
31.01.19 21:39:31<sseehh> this is the idea and im sure it applies to prolog and any intermediate term construction operations
31.01.19 21:39:51<sseehh> i wanted to eventually move some of this term itnerning nito tuprlog
31.01.19 21:39:54<dmiles> oh it applies to finding smarter ways to find memos in proloog
31.01.19 21:40:17<dmiles> and for clause indexes
31.01.19 21:40:34<sseehh> the reason for byte[] keying these is so that the keys (func args) themselves dont need to be stored in the table. as long as there is a deterministic byte[] serialization protocol
31.01.19 21:40:54<sseehh> and also array equality test avoids virtual calls that .equals would need
31.01.19 21:41:04<dmiles> we (prolog implementors) should be able to index certain comouind clauses better than we done 
31.01.19 21:41:07<sseehh> and also byte[] can be compressed with a fast compressor like snappy making the comparisons even faster
31.01.19 21:41:48<sseehh> and use less cpu cache which is the conclusion i read about in h2o.ai design in using compressor
31.01.19 21:41:49<dmiles> we (prolog implementors) should be able to index certain compound and deep clauses better than we done 
31.01.19 21:42:17<sseehh> their justification for compressing everything was that they saw cpu decompression could complete faster than a cpu cache miss
31.01.19 21:42:39<sseehh> whcih is counterintuitive without realizing the orders of magnitude difference in the timing
31.01.19 21:43:27<sseehh> http://cliffc.org/blog/2014/03/20/h2o-architecture/ this guy designed the original JDK hotspot
31.01.19 21:43:38<sseehh> and wrote NBHM nonblocking hashmap
31.01.19 21:43:45<sseehh>  * A note on compression:  Big Data is heavily (and losslessly) compressed – typically 2x to 4x better than GZIP on disk (YMMV), and can be accessed like a Java Array (a Giant greater-than-4billion-element distributed Java array).  H2O guarantees that if the data is accessed linearly then the access time will match what you can get out of C or Fortran – i.e., be memory bandwidth bound, not CPU bound.  You can access the array (for both re
                 <sseehh> ads and writes) in any order, of course, but you get strong speed guarantees for accessing in-order.  You can do pretty much anything to an H2O array that you can do with a Java array, although due to size/scale you’ll probably want to access the array in a blatantly parallel style.
31.01.19 21:44:02* dmiles is still working out an answer to the question of what is required to get prolog and CYC workign well toether
31.01.19 21:44:09<sseehh> er
31.01.19 21:44:10<sseehh>  * A note on decompression: The data is decompressed Just-In-Time strictly in CPU registers in the hot inner loops – and THIS IS FASTER than decompressing beforehand because most algorithms are memory bandwidth bound.  Moving a 32byte cached line of compressed data into CPU registers gets more data per-cache-miss than moving 4 8-byte doubles.  Decompression typically takes 2-4 instructions of shift/scale/add per element, and is well covered b
31.01.19 21:44:11<sseehh> y the cache-miss costs.  As an example, adding a billion compressed doubles (e.g., to compute the average) takes 12ms on a 32-core (dual-socket) E5-2670 Intel – an achieved bandwidth of over 600Gb/sec – hugely faster than all other Big Data solutions.  Accounting for compression, H2O achieved 83Gb/sec out of the theoretical maximum of 100Gb/sec on this hardware.
31.01.19 21:46:18<dmiles> LarKC/CYC  at least runs faster on JVM than it does in AllegroCL and C
31.01.19 21:46:29<sseehh> is there some diagram showing the interaction of the different layers: cyc, prolog, ..
31.01.19 21:46:51<sseehh> is cyc designed well for multithreaded use?
31.01.19 21:47:08<dmiles> (on JVM it does use 3x the ram though)
31.01.19 21:47:24<dmiles> yes it is very multithreaded
31.01.19 21:47:38<sseehh> yeah there are ways to improve RAM usage.  this usually comes with reduced GC pressure improving speed too
31.01.19 21:47:48<sseehh> what kind of multithreading does it us
31.01.19 21:47:49<sseehh> use
31.01.19 21:48:02<sseehh> like, lots of synchronized(..) locks, atomic ops etc?
31.01.19 21:48:10<dmiles> well we create threads and Tasks.. and then conspond them to each other how we see fit
31.01.19 21:48:18<sseehh> i can imagine they just put a bunch of stuff inside synchronized and call it multithreaded
31.01.19 21:48:24<sseehh> and end up slowing it down in many ways
31.01.19 21:48:48<dmiles> i am the only one that uses syncronised but that is mainly for startup
31.01.19 21:48:56<dmiles> and for a bit of threaded I/O
31.01.19 21:49:26<sseehh> creating lots of tasks probably doesnt help either.  probably for something like cyc a fiber / continuation or actor system owuld work bette than plain threads
31.01.19 21:49:51<sseehh> which cyc tasks might just be it, just like nars tasks are
31.01.19 21:50:38<sseehh> what i do with nars in multithreaded mode is since tasks are discrete procedures is buffer them in concurrent queues and have a fixed set of worker threadas process everything
31.01.19 21:51:45<sseehh> continuation frameworks like killim or galaxy etc they try to rewrite the bytecode of ordinary code so that the entire thread state can be persisted
31.01.19 21:51:49<sseehh> and restored
31.01.19 21:52:00<sseehh> but if the tasks are granular enough already then theres no need to interrupt them
31.01.19 21:52:22<sseehh> using a concurrent memoization sytsem allows one thread to benefit from the computation of another thread
31.01.19 21:52:35<sseehh> but there are cases when a thread-local memoization is helpful too
31.01.19 21:53:21<dmiles> how lisp symbols are bound is using a huge array.. it would be interestign to experiment how this can be optimized
31.01.19 21:53:37<dmiles> we create an array for each thread
31.01.19 21:53:47<dmiles> and then a cell for each symbol
31.01.19 21:54:00<dmiles> teh symbols value is in an array
31.01.19 21:54:12<dmiles> that array
31.01.19 21:54:17<sseehh> yeah i never really thought about implementing high performance lisp but it is a lsightly differnt problem than prolog which is more tree-based
31.01.19 21:54:45<sseehh> although a good solution for one would work in the other
31.01.19 21:54:51<sseehh> for example
31.01.19 21:55:01<dmiles> where i was going is it would be fascinating to find out what we are doing that could be better 
31.01.19 21:55:23<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/subterm/AnonVector.java
31.01.19 21:55:37<dmiles> some stuff is doesn due to auto-source translation 
31.01.19 21:56:01<sseehh> i separated the term implementation from the subterm implementation.  subterm ends up being like a list of terms and a compound term wraps that with some other metadata
31.01.19 21:56:08<dmiles> the prolog stuff is also some autotranslating
31.01.19 21:56:16<sseehh> this AnonVector is one subterm implementation that stores a specific alphabet of reserved atomic terms as a short[]
31.01.19 21:56:42<sseehh> these are easy to map in and out of but the in-memory representation is oblivious to the GC so it avoids all these pointers that would otherwise need to be there
31.01.19 21:56:54<sseehh> but also i can use the highest bit as a negation flag
31.01.19 21:57:32<sseehh> and then store any negation with this too, without needing to wrap the individual terms with a negation instance except dynamically
31.01.19 21:58:07<sseehh> also searching for containment is fast because the limited alphabet requires a specific kind of term
31.01.19 21:58:18<sseehh> and then its a numeric comparison on a short short[] array
31.01.19 21:58:40<sseehh> i took it a step further here https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/subterm/MappedSubterms.java
31.01.19 21:58:59<sseehh> this is slightly different in that it wraps another subterms impl containing the actual terms
31.01.19 21:59:12<sseehh> but just stores an integer saying which index is referenced for its subterms
31.01.19 21:59:17<sseehh> with the negation trick also
31.01.19 21:59:37<sseehh> so for (y, x, z) and (z, y, x) these can share the same canonically sorted (x,y,z) base subterm
31.01.19 21:59:44<sseehh> and just consist of different 3-byte mappings to it
31.01.19 21:59:55<sseehh> but also (--x, y, z) too
31.01.19 22:00:11<sseehh> or (x, x, y, z) would be 0,0,1,2
31.01.19 22:00:26<dmiles> its really eat that you ar expeimenting with writing of specializations of Term
31.01.19 22:00:32<dmiles> eat/neat
31.01.19 22:00:55<dmiles> since we all know that this stuff has to be done (and yet never gets done)
31.01.19 22:00:59<sseehh> yeah i dont know what is optimal i just know there are many ways to do it. eventually they can all be put into an optimizer and let it decide the best policy for using them
31.01.19 22:01:13<sseehh> by analyzing microbenchmarks and profiling data
31.01.19 22:01:19<dmiles> *nod*
31.01.19 22:01:44<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/term/compound/FastCompound.java
31.01.19 22:01:47<dmiles> you are like a version of xjrn excecpt not on cocain
31.01.19 22:01:49<sseehh> this one isnt complete but its an extreme example
31.01.19 22:02:11<sseehh> lol i learn so much from him
31.01.19 22:02:37<dmiles> *nod* his ideas are very good
31.01.19 22:03:19<sseehh> this 'fast compound' isnt exactly fast last time i tried but the idea is to store an entire multi-level term as reference to a single list of unique subterms
31.01.19 22:03:46<sseehh> so it is basically a linearized tree of number references whereas the subterms i previously described are already linear already
31.01.19 22:04:12<sseehh> so (x, (y, x)) would be like (x,y) x (0, (1, 0))
31.01.19 22:04:53<sseehh> and traversingn the recursive tree structure would somehow use a visitor pattern involving mostly linear traversal of a numeric array
31.01.19 22:05:19<sseehh> paying attention to special codec that says where the recursion pushes and pops into subterms
31.01.19 22:05:56<sseehh> most attempts at doing this level of interning are happy with one global dictionary of strings mapped to int's
31.01.19 22:06:13<sseehh> but nars this isnt a complete solution because for total generality we want to be able to forget atoms
31.01.19 22:06:40<dmiles> ah good point about this in relation to nars
31.01.19 22:07:11<dmiles> though it depands if the atom was jsut supposed to be forgettable or not
31.01.19 22:07:27<sseehh> i imagine in a real dynamic prolog intended to run continuously this is also necesasry too
31.01.19 22:07:46<sseehh> well temporary atoms can be drawn from a pool of special terms like the anon vector
31.01.19 22:07:47<dmiles> some code does need atom GC
31.01.19 22:07:55<dmiles> yeah lots of temp atoms
31.01.19 22:08:05<sseehh> in isolated computation context i think this is what tarau's latest impl was trying to do
31.01.19 22:08:11<sseehh> and what i do in the deriver
31.01.19 22:08:46<sseehh> i call it 'anonymizing' a term reducing it to a a mixture of non-variable numerically indexed constants, and numerically indexed variables
31.01.19 22:09:05<sseehh> all these sharing parts of a 16-byte short number space
31.01.19 22:09:15<sseehh> with certain bits indicating what is what
31.01.19 22:09:41<sseehh> public abstract class AnonID implements Atomic, The {
                 <sseehh>     
                 <sseehh>     public static final short ATOM_MASK = 0;
                 <sseehh>     public static final short VARDEP_MASK = 1 << 8;
                 <sseehh>     public static final short VARINDEP_MASK = 2 << 8;
31.01.19 22:09:42<sseehh>     public static final short VARQUERY_MASK = 3 << 8;
31.01.19 22:09:44<sseehh>     public static final short VARPATTERN_MASK = 4 << 8;
31.01.19 22:09:46<sseehh> private static final short IMG_MASK = 5 << 8;
31.01.19 22:09:52<dmiles> one trick peopel use (i do sometimes) is keep my global and local atoms separated
31.01.19 22:10:00<sseehh> yeah that is the idea here
31.01.19 22:10:12<sseehh> but these are immutable so they are global too
31.01.19 22:10:19<sseehh> just the semantics are applied locally
31.01.19 22:10:26<dmiles> oh yeah .. i have 4 types of Prolgo Vars i use
31.01.19 22:10:30<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/term/anon/Anon.java#L20
31.01.19 22:10:55<dmiles> hah ver close to the first 3 you note
31.01.19 22:10:59<dmiles> hah very close to the first 3 you note
31.01.19 22:11:04<sseehh> $$("(x,y)").anon() == (_1, _2)
31.01.19 22:11:11<sseehh> something like this
31.01.19 22:11:16<dmiles> oh yeah "dont care vars"
31.01.19 22:11:19<sseehh> $$("(x,y,#z)").anon() == (_1, _2, #1)
31.01.19 22:11:45<dmiles> some vars i dont even bother to trail in SxxMachine
                 <sseehh> in anon form i can memoize the results and it applies to entire families of other terms
31.01.19 22:12:07<sseehh> like (x, y, z)  or (a, b, c) share the same anon form
31.01.19 22:12:17<sseehh> so whatever applies to anon of one applies to the anon of the other
31.01.19 22:12:35<dmiles> right prologs called this the numbervar form 
31.01.19 22:12:47<sseehh> so the more that i can memoize of operations in the transformed mode the more it helps
31.01.19 22:12:55<dmiles> so we can tell    (x, y, z)   (a, b, a)   apart
31.01.19 22:13:21<sseehh> in numbervar form they also have a compact byte[] seialization
31.01.19 22:13:31<sseehh> so these produce good byte[] memoize keys
31.01.19 22:13:38<dmiles> *nod*
31.01.19 22:13:50<sseehh> i use this to winnow a huge trie of predicates for premise terms
31.01.19 22:14:02<sseehh> and then memoize the results which are indices of applicable conclusions
31.01.19 22:14:07<sseehh> an array of indices
31.01.19 22:14:25<sseehh> and then all i need is that to continue processing any premise that matches equivalent form
31.01.19 22:14:51<sseehh> so if there are like 100 applicable conclusions, i may only want to try 8 of them now but when i want to try more again, the lookup is already computed
31.01.19 22:15:13<sseehh> and i dont have to find the 100 out of 1000 that could match which is testing all kinds of propeties of the term
31.01.19 22:15:42<dmiles> yeah
31.01.19 22:16:40<dmiles> those 1000 are left in an interor in CYC
                 <sseehh> since lisp s-expressions are just structs without a name then this term/subterms distinction might be good for both lisp and prolog
31.01.19 22:16:55<dmiles> those 1000 are left in an iterator in CYC .. that stays put
31.01.19 22:17:24<dmiles> Tauru figure out a trick is after the 1000th binding to jsut roll back into 1
31.01.19 22:17:27<sseehh> does cyc weight them, like a heuristic saying some are more important than others to try
31.01.19 22:17:33<dmiles> and then even randomize the ohers in which theyy are given
31.01.19 22:17:39<dmiles> yes
31.01.19 22:17:49<sseehh> how does cyc know when to give up and try something else?
31.01.19 22:17:54<dmiles> a huge API exists fort the whight system
31.01.19 22:18:35<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/e2c/larkc_prolog.lisp#L52-L64
31.01.19 22:19:08<sseehh> but what i was saying about a lisp/prolog structure it still relies heavily on runtime OOP and GC system.  someone (thinking xjrn) might suggest something more off-heap
31.01.19 22:19:12<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/e2c/larkc_prolog.lisp#L173
31.01.19 22:20:14<dmiles> each typer of +/-/+/- patterns exists for each predicate with costs
31.01.19 22:20:45<dmiles>    :required-pattern
                 <dmiles>    (#$prologCall :not-fully-bound
                 <dmiles>     ((:test inference-predicate-p) . :not-fully-bound))
                 <dmiles>    :cost             removal-prolog-unbound-mt-gaf-lookup-pos-cost
                 <dmiles>    :completeness     :grossly-incomplete
31.01.19 22:20:54* dmiles paste in here rahter than URLs
31.01.19 22:21:24<dmiles> vs
31.01.19 22:21:25<dmiles>  (#$prologAsserted :fort
                 <dmiles>     (:or
                 <dmiles>      ((:test removal-prolog-asserted-pred-fort) . :anything)
                 <dmiles>      (#$not (:fort . :anything))))
                 <dmiles>    :cost     removal-prolog-asserted-gaf-lookup-pos-cost
31.01.19 22:21:26<dmiles>    :completeness :complete
31.01.19 22:21:55<sseehh> how is completeness quantified?
31.01.19 22:22:17<dmiles> it is how trustworthy the evidence exists down the chain
31.01.19 22:22:37<dmiles> as in a default #$prologAsserted is down the chain
31.01.19 22:22:47<dmiles> #$prologAsserted  of course is totally knowable
31.01.19 22:23:03* dmiles should ahve used the oteher exmaple of proologCall to genation
31.01.19 22:23:25<dmiles>    (#$prologCall :fort
                 <dmiles>     (#$not ((:test inference-predicate-p) . :fully-bound)))
                 <dmiles>    :cost   removal-prolog-neg-gaf-cost
                 <dmiles>    :expand removal-prolog-neg-gaf-expand
                 <dmiles>    :documentation
                 <dmiles>    "(#$prologCall <mt> (#$not (<predicate> . <fully-bound>)))
31.01.19 22:23:26<dmiles>     by recursively querying sentence (#$not (<predicate> . <fully-bound>))
                 <dmiles>     in <mt>"
31.01.19 22:23:35<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/exe/MultiExec.java#L114 this is a scheduler that takes feedback from causal traces triggered by certain task outcomes
31.01.19 22:23:36<dmiles> hah ! we dont even declare completness there
31.01.19 22:24:24<sseehh> all this lisp code could probably be translated automatically to clojure and then from there read into java via reflection or clojure static analysis
31.01.19 22:24:32<dmiles> completeness has to do with how much we trust we are going to get all the bindings if we keep going
31.01.19 22:24:45<sseehh> or just any java lisp or scheme impl instaed of clojure which has a different syntax
31.01.19 22:25:09<dmiles> well this is data more than code in that one case
31.01.19 22:25:11<sseehh> so that coudl be quantified by # of unbound variables, and/or in relation to the overall size (complexity) of the query
31.01.19 22:25:37<sseehh> without knowing anything else that can be used to rank likely simpler from more complex queries
31.01.19 22:25:44<dmiles> yeah many things go into such a computation
31.01.19 22:25:58<dmiles> for exmaple.. we really only need complete toplevle vars (if we even want completeness)
31.01.19 22:26:17<sseehh> for something like these kinds of estimates i wanted to try training a character-level classifeir like a neural network
31.01.19 22:26:22<sseehh> and just run the byte[] representation across it
31.01.19 22:27:20<sseehh> not only for something like estimating computation cost but for estimating priority or utility of the computation with regard to some other meta-goal
31.01.19 22:27:34<dmiles> Achieve scalability through giving up completeness. Partial reasoning results are useful in many domains of application. Significant speedups and can be obtained by incompleteness in many stages of the reasoning process, ranging from selection of the axioms to incomplete reasoning over those axioms.
31.01.19 22:27:40<sseehh> both of those determing a cost/benefit calculation
31.01.19 22:28:17<sseehh> yeah this is what NARS doesnt complain about, the half-known patterns
31.01.19 22:28:19<dmiles>  • Do not build a single reasoning engine that is supposed to be suited for all kinds of use-cases, but instead build a configurable platform on which different components can be plugged in to obtain different scale/efficiency trade-offs, as required by different usecases.
31.01.19 22:28:40<dmiles> (from the CYC bible)
31.01.19 22:28:56<dmiles> (vs AIKR is NARS bible)
31.01.19 22:29:01<sseehh> well depends if you consider the LISP vm a reasonnig engine itself
31.01.19 22:29:49<sseehh> sounds like if a programming language doesnt meet all those requirements already it wouldnt work anywa
31.01.19 22:30:03<dmiles> well the CYC system does hypothisize what sourcecode to use
31.01.19 22:30:42<dmiles> (in the tatician module.. it has to write a plan that will possibly make the query happen)
31.01.19 22:30:56<sseehh> what i take that to mean is its like micromanaging somethign which should already exist in standard toolkit
31.01.19 22:31:11<sseehh> like how java can load a dynamic library
31.01.19 22:31:21<sseehh> so one level of abstraction above this should be all thats needed
31.01.19 22:31:35<sseehh> and then it can have access to any system library
31.01.19 22:32:17<sseehh> yet if a single reasoning engine isnt built to use this hypothetical universal interface then it is still just some glue code that will do it, no matter how app specific it remains
31.01.19 22:32:18<dmiles> i just mean that it uses esitimates to create a tree of execution
31.01.19 22:32:30<dmiles> (then runs that tree)
31.01.19 22:32:51<dmiles> whereas prolog does the saem thing but using a deth first
31.01.19 22:33:34<sseehh> yeah prolog defaults to depth first, a breadth first is also conceivable and there are other variations on graph search with adjustable heuristic tradeoffs thta do some of both adaptively
31.01.19 22:33:37<dmiles> (i am contrasting CycL infernce from Prolog infenrce)
31.01.19 22:34:07<dmiles> both infernce result in desifing what code to run
31.01.19 22:34:12<sseehh> https://en.wikipedia.org/wiki/Tree_traversal
31.01.19 22:34:27<dmiles> both infernce result in choosing what code will be ran
31.01.19 22:34:32<sseehh> https://en.wikipedia.org/wiki/Best-first_search
31.01.19 22:34:44<sseehh> https://en.wikipedia.org/wiki/Iterative_deepening_depth-first_search
31.01.19 22:36:42<dmiles> *nod* and then one i created 17 years ago  https://swi-prolog.iai.uni-bonn.narkive.com/GAgj4vwn/getting-how-many-prolog-frames-a-particular-variable-has-existed-in-thus-far
                 <sseehh> this is where an execution plan, represented as a graph or at least DAG, if it's in the same representation as other data can be edited while its running not so much planned and then executed
31.01.19 22:37:32<sseehh> 17 years ago lol
31.01.19 22:38:03<dmiles> yeah one day i'll publish soemting on it!
31.01.19 22:38:36<dmiles> it turns out to be the most amazing search i've seen as long as it uses one other view
31.01.19 22:38:49<sseehh> well loooks like we are just continuing solving the problem described here
31.01.19 22:39:01<dmiles> tha tis i mean the first level search is controlled by deathrate of aged vars
31.01.19 22:39:24<sseehh> without reading too much into this i would label this as an annotated prolog frame metamodel
31.01.19 22:39:27<dmiles> then we make interative deepening decide how many vars must die
31.01.19 22:39:53<sseehh> where all the components of the prolog execution have additional stats tracked
31.01.19 22:39:55<dmiles> (so instead of cvalculating the max-depth you calculate the expected expriations)
31.01.19 22:40:34<sseehh> yeah if there was like 20 variables maybe 2 or 3 are more important than all the rest combined
31.01.19 22:40:45<dmiles> yes
31.01.19 22:40:51<sseehh> if you can identify those then the search can concentrate on matching those first, as if you could see the entire program and just those terms light up brighter
31.01.19 22:41:15<sseehh> this is what nars is expected to do as a result of the prioritized linking
31.01.19 22:41:18<dmiles> thoguh te problem i was trying to solve at the time at least with this thring was not having memoizaions and needing to allow cycles
31.01.19 22:41:37<sseehh> where the relevance of other terms and their components are activated by other things, in proportion to their activation
31.01.19 22:42:09<sseehh> but you can do that easily now with something like SxxMachine right?
31.01.19 22:42:28<dmiles> the depth of var? yes
31.01.19 22:42:58<sseehh> and memoization
31.01.19 22:43:04<sseehh> probably 17 years ago memory was a much bigger constranit too
31.01.19 22:43:08<sseehh> constraint
31.01.19 22:43:14<dmiles> i havent finished the code .. it needs about 16 more ohours
31.01.19 22:43:24<dmiles> i havent finished the code .. it needs about 16 more hours in SxxMachine
                 <sseehh> 17 to be safe
31.01.19 22:43:28<dmiles> hehe
31.01.19 22:43:51<sseehh> i didnt finish trying to build this newer repo
31.01.19 22:43:53<dmiles> the deal is i have 3 differnce memoization schemes
31.01.19 22:43:54<sseehh> it has more stuff in it
31.01.19 22:44:23<dmiles> and i actualyl cant decide which to use.. i feel liek i have to imple,nmt all t3 to know
31.01.19 22:44:31<sseehh> [ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.8:run (default) on project prolog-cafe: An Ant BuildException has occured: /home/me/SxxMachine/src/main/prolog is not a valid directory
31.01.19 22:44:50<sseehh> well memoization always seemed to me just a matter of caching (x,y) pairs
31.01.19 22:44:58<dmiles> yeah the pom is very wrong
31.01.19 22:45:08<sseehh> if it isnt some space for time tradeoff then i dont think memoization is the right word
31.01.19 22:45:19<dmiles> can Intellij export Poms ?
31.01.19 22:45:49<sseehh> from a project structure or something else? i never saw it generate a pom though it would be nice
31.01.19 22:45:58<dmiles> oh i can make eclipse export
31.01.19 22:46:03<sseehh> gradle can generate pom's
31.01.19 22:46:08<sseehh> since it uses maven inside
31.01.19 22:46:41<dmiles> aindilis: well we have a java-phile her ein sseehh
31.01.19 22:46:46<sseehh> so sick of maven and gradle. a java based configuration makes too much sense, gotta use either XML or groovy to really try to help the java developer
31.01.19 22:47:02<aindilis> hi sseehh 
31.01.19 22:47:09<sseehh> hi aindilis
31.01.19 22:47:32<dmiles> sseehh is one of the previous NARS dev that is interested in working with us on CYC
31.01.19 22:47:36<sseehh> there was a java project configuration tool somewher
31.01.19 22:47:53<aindilis> yeah, I've been listening to your chat, but not sure what it is about exactly
31.01.19 22:48:06<aindilis> *while working on some library building for Prolog
31.01.19 22:48:08<sseehh> http://project.jerkar.org/ this or somethign else too bad it isnt the standard
31.01.19 22:48:27<dmiles> well sseehh had been working on impls of prolog on JVM 
31.01.19 22:48:32<aindilis> ah
31.01.19 22:48:59<aindilis> do you know the author of the javascript version of Prolog?
31.01.19 22:49:04<aindilis> he may have mentioned you
31.01.19 22:49:22<dmiles> he is on #swig
31.01.19 22:49:31<sseehh> duno
31.01.19 22:49:38<dmiles> (the author of the javascript version of Prolog)
31.01.19 22:50:04<aindilis> so what are you discussing now?
31.01.19 22:50:10<dmiles> oh i was saying that about sseehh in that he actualyl run towards them instead of the other dirrection screaming
31.01.19 22:50:20<aindilis> where you do you want to go with CYC, sseehh?
31.01.19 22:50:33<aindilis> what are your primary use cases?
31.01.19 22:50:34<dmiles> oh what i was proosing to sseehh
31.01.19 22:50:38<dmiles> proposing was..
31.01.19 22:50:54<dmiles> that i might want to invlude his version of NARS as a Cyc module
31.01.19 22:51:01<aindilis> ooohhh nice!
                 <sseehh> i need a reliable adaptive control system for an autonomous army of robots to conquer the solar system
31.01.19 22:51:11<aindilis> sheesh
                 <sseehh> what else are you going to do with cyc
31.01.19 22:51:16<sseehh> + nars
31.01.19 22:51:30<aindilis> yeah I need to conquer the solar system to, maybe we can work together?
31.01.19 22:51:48<dmiles> maybe change the SWI-porlog to SxxMachine-hybrid-sseehhKMachine
31.01.19 22:51:56<sseehh> well only if cyc determines there is enough solar system to share
31.01.19 22:52:11<aindilis> are you open source friendly?
31.01.19 22:52:13<sseehh> lol
31.01.19 22:52:20<sseehh> lol im free software friendly
31.01.19 22:52:22<aindilis> :)
31.01.19 22:52:46<sseehh> https://github.com/automenta/narchy/blob/volatile1/LICENSE
31.01.19 22:52:47<aindilis> what about rebuilding Eurisko?
31.01.19 22:53:01<aindilis> are you involved with automenta?
31.01.19 22:53:08<aindilis> narchy?
31.01.19 22:53:31<sseehh> yeah im answering if im friendly to opensoruce'
31.01.19 22:53:40<aindilis> I knew another developer who worked on that
31.01.19 22:53:45<aindilis> let me find his email
31.01.19 22:53:56<sseehh> https://www.gnu.org/philosophy/open-source-misses-the-point.en.html
31.01.19 22:54:16<aindilis> ah yeah I'm a stallmanite
31.01.19 22:54:24<aindilis> open source is like a cover
31.01.19 22:54:34<sseehh> yeah it is controlled opposition
31.01.19 22:54:45<sseehh> er, controlled non-opposition
31.01.19 22:54:47<aindilis> "SeH" <seh1seh@yandex.com> ?
31.01.19 22:54:52<sseehh> yeah
31.01.19 22:54:59<sseehh> do you see how the lettters correspond to my nick
31.01.19 22:55:01<aindilis> great! it's you
31.01.19 22:55:03<aindilis> yes
31.01.19 22:55:15<aindilis> we've emailed before
31.01.19 22:55:27<sseehh> thats good im sorry i dont remember what was it about?
31.01.19 22:55:29<aindilis> we fell out of talking for a while, I've been meaning to renenage
31.01.19 22:55:32<aindilis> *reengage
31.01.19 22:55:44<aindilis> well we were talking about FRDCSA and NARS
31.01.19 22:55:55<aindilis> "Chou Enlai" <adougher9@yahoo.com>
31.01.19 22:56:05<sseehh> i remmeber you had the repo with all the interestnig prolog code
31.01.19 22:56:11<aindilis> :)
31.01.19 22:56:27<aindilis> well it's not as good as dmiles' stuff here, but I'm working on it
31.01.19 22:56:49<sseehh> yeah that stuff was fascinating
31.01.19 22:56:51<aindilis> that would be lovely to add OpenNARS to LarKC_CL
31.01.19 22:57:18<aindilis> well today I found a lot of good code in Bratko 4th edition
31.01.19 22:57:28<aindilis> I think we need to have more swipl packs of things like that
31.01.19 22:57:47<aindilis> like the advice language, the abduction system, the scheduler, etc
31.01.19 22:57:48<dmiles> LarKC is the relaease of CYC to the EU
31.01.19 22:58:04<aindilis> does NARS have a test suite?
31.01.19 22:58:33<aindilis> we also need a FOOPS implementatoin
31.01.19 22:58:39<aindilis> since AMZI is nonfree
31.01.19 22:58:59<dmiles> but cycorp still managed to make LarKC unprogrtammable to anyone outside of Cycorp 
31.01.19 22:59:20<aindilis> k carry on, I will lsiten with more interest now
31.01.19 22:59:21<dmiles> (So LarKC is the allowance of multiple proogrammihg lanmgauges to be useD)
31.01.19 22:59:40<dmiles> So far I added to allow Comomn Lisp 
31.01.19 22:59:59* aindilis rereads emails
31.01.19 23:00:01<dmiles> And prolgo to a hight degree
31.01.19 23:00:25<sseehh> yes _my_ narchy has a bunch of tests
31.01.19 23:00:39<sseehh> i have to say _my_ narchy to differentiate it from opennars
31.01.19 23:00:44<aindilis> ah
31.01.19 23:01:01<dmiles> ( and of course Java works fine .. just the OpenCYC way was too network latent for Java coderes)
31.01.19 23:02:33<aindilis> https://github.com/automenta/gss ++
31.01.19 23:03:25<dmiles> There is much of CYC java code that was generated from closed sourex SubLisp sources (not evne common lisp) that is stuck being the way it is in Java
31.01.19 23:04:21<dmiles> sseehh: can you describe some differnces betweeen NARS and numpy?
31.01.19 23:05:20<dmiles> (i guess Nars and OpenNars is also differnt in ways)
31.01.19 23:05:56<dmiles> i think sseehh embrassed some stuff around the prology parts of NARS more than the rest of the team)
31.01.19 23:06:22<dmiles> at least saw it diffferntly
31.01.19 23:06:43<sseehh> between nars and narchy u mean?
31.01.19 23:06:49<dmiles> yes
31.01.19 23:07:08<dmiles> heh i said "numpy"
31.01.19 23:07:23<sseehh> i was working on opennars then i had some strange ideas and it eventually evolved to the point i had to say 'this is no longer nars'
31.01.19 23:07:28<sseehh> yhe lol
31.01.19 23:07:51<sseehh> some of the differences are described in the README.md but its out of date
31.01.19 23:08:05<sseehh> there isnt much real documentation about it
31.01.19 23:08:23<sseehh> ive thought about making some presentations to try to explain from the begining
31.01.19 23:08:34<sseehh> but then i want to change something
31.01.19 23:08:45<sseehh> so i figure ill end up just making nars rewrite itself before that happens
31.01.19 23:08:59<sseehh> then it can just explain itself too
31.01.19 23:09:26<sseehh> tbh there isnt much to gain from understanding opennars
31.01.19 23:09:28<dmiles> well one difference is i can still understand the syntax
31.01.19 23:09:43<sseehh> if what i see running in narchy isnt a total hallucination
31.01.19 23:10:12<sseehh> i made changes to the syntax yes
31.01.19 23:10:39<sseehh> and added some macros to it
31.01.19 23:10:50<sseehh> like a:b  is the same as (b-->a)
31.01.19 23:11:06<sseehh> so you can say very compactly like an s-expression:
31.01.19 23:11:15<sseehh> (field1:value, field2:value2)
31.01.19 23:11:58<sseehh> aindilis, yes re: gss i have some new ideas for that
31.01.19 23:12:26<sseehh> that should solve everything
31.01.19 23:12:33<sseehh> i mean it would be the solution to everything
31.01.19 23:12:51<aindilis> well I'm multitasking right now, but what I read of our emails I think I need to *understand* what Narchy does exactly.  it's kind of like category theory or type theory, i just can't wrap my head around it
31.01.19 23:12:58<aindilis> *awesome about solution to everything
31.01.19 23:13:44<sseehh> well its probably best if i dont try to pigeonhole specific thigns it does
31.01.19 23:14:03<sseehh> because it doesnt do anything particularly well
31.01.19 23:14:09<sseehh> like jack of all trades master of none taken to the extreme
31.01.19 23:14:52<sseehh> and also why i cant recommend a reason why anyone should look into it other than if it seems intersting it no worse than a million other projects on github
31.01.19 23:16:15<sseehh> GSS as it is described at the time in the readme has specific unnecessary conceptual limitations
31.01.19 23:16:21<sseehh> that i now understand
31.01.19 23:16:57<sseehh> gss as it was originally conceived, in terms of being a realizable product isnt all that complicated.. just think of a smart GPS navigator or something
31.01.19 23:17:04<sseehh> in which you can program preferences
31.01.19 23:17:05<sseehh> like
31.01.19 23:17:46<sseehh> "i like avoiding earthquakes" "i like avoiding nuclear plant"  "i like access to internet"
31.01.19 23:18:04<sseehh> and it would compute more or less a heatmap of where you can go to meet these benefit/threat prefernces
31.01.19 23:18:17<sseehh> in terms of known geolocated events and objects
31.01.19 23:18:22<aindilis> cool!
31.01.19 23:18:24<aindilis> performAction(addToPendingTasks(silenceCellPhoneAtMovieTheater)) :-
                 <aindilis>         arrivingAndStayingAt(Agent,Location),
                 <aindilis>         isa(Location,movieTheater),
31.01.19 23:18:26<sseehh> some from sensor networks like weather
31.01.19 23:18:27<aindilis>         sittingStill(minutes(Minutes)),
31.01.19 23:18:30<aindilis>         Minutes > 1.
31.01.19 23:18:33<aindilis> performAction(addToPendingTasks(silenceCellPhoneAtMovieTheater)) :-
                 <sseehh> and others more permanent like the location of mailboxes etc
31.01.19 23:18:37<aindilis>         arrivingAndStayingAt(Agent,Location),
                 <aindilis>         isa(Location,movieTheater),
31.01.19 23:18:40<aindilis>         sittingStill(minutes(Minutes)),
31.01.19 23:18:43<aindilis>         Minutes > 1.
31.01.19 23:19:39<aindilis> yeah I've been working with owntracks doing reverse geocoding and inferring types using Google Places API to add proposed actions and reminders and stuff based on location information, plus planned location
31.01.19 23:19:53<sseehh> yeah see you actually got to the details i never bothered to actually even try to write examples
31.01.19 23:20:25<sseehh> i would always get stuck at some meta-level knowing that the details of the story are what actually mattered what would end up on the screen
31.01.19 23:20:42<aindilis> well I have 12 lcoational rules so far
31.01.19 23:20:53<aindilis> looking to develop more
31.01.19 23:20:55<sseehh> but i just kept glossing over it and i still might but im just saying i appreciate your line of thinking
31.01.19 23:21:14<aindilis> awesome!  same here, I think all three of us are very closely positioned
31.01.19 23:21:19<sseehh> re: google places and mapping, i recommend openstreetmaps and its api
31.01.19 23:21:29<sseehh> and forget google
31.01.19 23:21:31<aindilis> right, well I use openRouteService too
31.01.19 23:22:05<aindilis> in fact, one of the AI founders said it's very rare to get three rational people together
31.01.19 23:22:26<aindilis> but that if it happens, they can really make a difference
31.01.19 23:22:38<sseehh> im not rational
31.01.19 23:22:41<aindilis> together meaning in the same interests
31.01.19 23:22:45<aindilis> darn, oh well :P
31.01.19 23:22:48<sseehh> thats nars job
31.01.19 23:22:51<aindilis> ah cool
31.01.19 23:22:53<aindilis> yeah good point
31.01.19 23:23:12<sseehh> anyway if you understnad what i was saying about the heatmap
31.01.19 23:23:21<sseehh> and the availability of OSM data including their extensive amenity tags
                 <aindilis> yes
31.01.19 23:23:29<sseehh> which include things like mailboxes, swings, parking spaces etc
31.01.19 23:23:33<sseehh> individual tres
31.01.19 23:23:35<sseehh> trees
31.01.19 23:23:45<sseehh> the next step is a graph rather than a heatmap
31.01.19 23:23:52<sseehh> and by this i mean a graph that extends through spacetime
31.01.19 23:23:55<sseehh> showing multiple possible routes
31.01.19 23:24:01<sseehh> rooted in the current time and position
31.01.19 23:24:12<sseehh> but braching outward more or less in all directions like a spacetime raytracer
31.01.19 23:24:15<aindilis> very nice, does Narchy have probability reasoning?
31.01.19 23:24:20<sseehh> yes
31.01.19 23:24:27<aindilis> can you compute these propagating conditional densities?
31.01.19 23:24:38<sseehh> yes but 
31.01.19 23:24:46<sseehh> probably this is best done by a dedicated algorithm for now
31.01.19 23:24:57<aindilis> k
31.01.19 23:25:05<sseehh> so you input the same kind of preferences
31.01.19 23:25:10<sseehh> not just input but edit
31.01.19 23:25:11<sseehh> like in realtime
31.01.19 23:25:31<aindilis> so it has to make deducitons
31.01.19 23:25:50<sseehh> "im really concerned with not being affected by a geological event today" or "i need to get as far away from other people as possilbe"
31.01.19 23:25:53<aindilis> we should set aside 1 hour sometime for a GIS hackathon
31.01.19 23:26:12<aindilis> to come up with a toy system or toy use case for it
31.01.19 23:26:20<sseehh> and these would affect the paths that the graph paths are generating
31.01.19 23:26:31<sseehh> which you could see in realtime all the possible decisions
31.01.19 23:26:36<sseehh> and it would adapt like a GPS
31.01.19 23:26:46<sseehh> and interact with other people's graphs etc
31.01.19 23:26:51<sseehh> the key is to keep it as simple as possible
31.01.19 23:26:56<sseehh> not to make it a social network but just a simple app
31.01.19 23:27:03<sseehh> which could run on a phone, even while disconnected
31.01.19 23:27:04<aindilis> another thing to do is to predict needs and plan routes for htem
31.01.19 23:27:15<aindilis> for instance, ususally after I eat I need to use the restroom
31.01.19 23:27:17<sseehh> yes that is what it could do because these preferences can include needs
31.01.19 23:27:31<sseehh> and needs could be predicted from past needs, or other environmental clues
31.01.19 23:27:37<aindilis> and so it would anticipate the probability of me needing to get to the restroom
                 <aindilis> eys!
31.01.19 23:27:39<aindilis> yes
31.01.19 23:27:47<aindilis> across time
31.01.19 23:27:54<sseehh> the preferences/needs/dont-needs/avoids etc.. all these are just semantic quantifiers
31.01.19 23:28:08<sseehh> which some map features either possess or anti-possess or whatever
31.01.19 23:28:21<sseehh> and in various amounts
31.01.19 23:28:32<sseehh> which can also be inferred with the help of an upper level ontology like SUMO
31.01.19 23:28:33<aindilis> okay let me know when you want to hack on it
31.01.19 23:29:14<sseehh> so that if you need to go to the bathroom in a movie theatre, it would suggest with a small probability that you might end up walking to a corner and just piss there
31.01.19 23:29:26<aindilis> ah I see
31.01.19 23:29:38<sseehh> or other possibilties not ordinarily considered
31.01.19 23:29:48<aindilis> I like this idea of a continuously updated probability distribution of my future locations
31.01.19 23:29:55<aindilis> across time
31.01.19 23:30:02<sseehh> yeah i dotn know why this doesnt exist  yet
31.01.19 23:30:05<aindilis> of course I would add that it needs to integrate the risk
31.01.19 23:30:06<aindilis> hehe
31.01.19 23:30:14<aindilis> I was saying that to dmiles the other day
31.01.19 23:30:17<sseehh> yes that is what the benefit/threat spectrum includes
31.01.19 23:30:26<sseehh> increase or decrease proximity
31.01.19 23:30:27<aindilis> nice
31.01.19 23:30:35<sseehh> they would be like sliders on a big menu
31.01.19 23:30:41<sseehh> adjustable in different amounts
31.01.19 23:30:46<aindilis> like for instance being by a cats mouth is dangerous if you are a mouse
31.01.19 23:31:02<sseehh> so some goal or preference could be not important yet it helps to decide the overall plan by shifting it slightly
31.01.19 23:31:23<sseehh> and then it becomes clear that its easily achievable whereas you might not have thought it was
31.01.19 23:31:52<sseehh> all part of this enhanced route planning algorithm, really just an extension of existing route planners that can prioritize by vehicle or time of day to avoid traffic
31.01.19 23:31:53<aindilis> so when I was a bicyclist I came up with a theory of naviation
31.01.19 23:32:23<sseehh> yeah you could avoid all chewing systems larger than a certain proprtion of one's body size
31.01.19 23:32:42<sseehh> whether it is a large animal or a machine
31.01.19 23:32:46<sseehh> the threat is the same
31.01.19 23:32:50<aindilis> yeah
31.01.19 23:33:02<sseehh> these would be defaults prepackaged with it
31.01.19 23:33:07<sseehh> so that you dont have to think about all the details
31.01.19 23:33:15<aindilis> yah
31.01.19 23:33:17<aindilis> okay so I'm interested now in where you want to go with CYC and Narchy
31.01.19 23:33:27<aindilis> what the roadmap for integration is
31.01.19 23:33:34<sseehh> like most of the stuff i see in your repositories is what this would be
31.01.19 23:33:37<aindilis> dmiles: can you keep adding systems?
31.01.19 23:33:38<sseehh> actually elucidated
31.01.19 23:33:49<dmiles> when I started coding SxxMachine it was to build some lowlevel support missing from SWI-prolog mainly to to code inference capabilities to rival CYC's.
                 <dmiles> But the part it would still be missing is the Content and Mutli-engine management of CYC.. 
31.01.19 23:33:50<dmiles> (example integrating several Sub-NARSes together is done declartively in CycL and letting CYC redesign better)
31.01.19 23:34:49<sseehh> what is the minimal amount of cyc that you could run in SxxMachine without SWI, LISP or anything else
31.01.19 23:34:59<sseehh> in one self contained java project
31.01.19 23:35:28<dmiles> oh one can run cyc but you cant do anyhting usefull with CYC asis
31.01.19 23:36:07<dmiles> having CYC is like having a MSSQL server.. thats about it
31.01.19 23:36:17<dmiles> you still need to create and use that data
31.01.19 23:36:21<sseehh> well then the useful part is what to decide whether any of what exist that is supposed to be uesful actually is, or if it can be reinvented on the new architecture anyway
31.01.19 23:36:27<sseehh> yeah same with narchy
31.01.19 23:36:35<sseehh> except i have the cool 3d zooming UI
31.01.19 23:36:57<sseehh> which im sure cyc doesnt
31.01.19 23:37:02<dmiles> CYC has a cool WebUI to control the SQL server
31.01.19 23:37:10<aindilis> well I am thinking, you could use CYC KB from Narchy and reason using Narchy's algoirthms?
31.01.19 23:37:19<sseehh> and vice versa
31.01.19 23:37:27<aindilis> ah
31.01.19 23:37:32<sseehh> ideally there would be a common data structure
31.01.19 23:37:33<dmiles> "control the SQL server" control the CYC server that is
31.01.19 23:37:36<sseehh> to minimize any kind of translation
31.01.19 23:37:50<aindilis> is Narchy runable right now for me?
31.01.19 23:38:09<dmiles> right the least abount of translation betweeen even Term objects
31.01.19 23:38:17<sseehh> you can run narchy and watch it play some games like tetris mario brothers jake2
31.01.19 23:38:23<aindilis> cool
31.01.19 23:38:30<sseehh> and all the little demo apps
31.01.19 23:38:35<sseehh> but its not all put together
31.01.19 23:38:41<sseehh> they are scattered and its a mess
31.01.19 23:38:48<dmiles> (when Terms are actualyl the same between CYC and Narchy that is)
31.01.19 23:38:52<sseehh> but it can be itnegrated into a complete OS
31.01.19 23:38:56<sseehh> i want to make a fork of debian or something
31.01.19 23:39:06<sseehh> without any X-windows manager just boot straight into the 3d gui
31.01.19 23:39:38<sseehh> https://www.bitchute.com/channel/seh/
31.01.19 23:39:40<dmiles> " watch it play some games like tetris mario brothers jake2"  is example of a application framwork
31.01.19 23:39:53<dmiles> (that is importnat)
                 <sseehh>  black market aborted ai parts
31.01.19 23:39:54<sseehh> free 0 day shipping.
31.01.19 23:42:38<sseehh>   24.0000: (SHAVE ELECTRIC-RAZOR ANDY FLAGSTAFF-HILL) [D:0.2500; C:1.0000]
31.01.19 23:42:45<sseehh> i know where flagstaff hill is
31.01.19 23:42:53<aindilis> :)
31.01.19 23:42:56<sseehh>   0.4000: (SET-DOWN ANDY LAUNDRY FORBES-AND-CHESTERFIELD) [D:0.1000; C:1.0000]
31.01.19 23:42:58<sseehh> i know where that is
31.01.19 23:42:59<aindilis> I used to sleep there
31.01.19 23:43:11<aindilis> I was homeless
31.01.19 23:43:13<sseehh>   19.2500: (RIDEBUS USER BUS-71D-51 CULMORE-AND-DERRY HELMSHIRE-AND-BROOKS) [D:0.0000; C:1.0000]\
31.01.19 23:43:22<sseehh> i know where 71D goes
31.01.19 23:43:32<aindilis> well those roads are anonymized
31.01.19 23:43:41<aindilis> "CULMORE-AND-DERRY HELMSHIRE-AND-BROOKS"
31.01.19 23:43:49<aindilis> so that's probably why you don't recognize them
31.01.19 23:43:54<sseehh> right i dont recognzie those
31.01.19 23:45:05<sseehh> how long were u homeless?
31.01.19 23:45:14<aindilis> off and on for 4 years
31.01.19 23:46:40<dmiles> hrrm i do see integrating Sxx Machine to CYC easier than finish the SWI-prolog work
31.01.19 23:47:11<sseehh> is it a matter of a ton of lisp code like that larkc file?
31.01.19 23:47:24<dmiles> hrrm sorry nope that was a lie.. the things i liek in SWI-Prolog is the package system
31.01.19 23:48:21<dmiles> in LarKC the code was once 50mb of lisp code but it was translated
31.01.19 23:48:40<dmiles> many parts i leave untranslated because i am editing it each day
31.01.19 23:48:57<sseehh> if it is depending a lot on lisp code like that my instinct is to read all that into java using either an actual jvm lisp or scheme impl or even clojure.  then decide how to translate that to fit the engine internals
31.01.19 23:49:09<dmiles> but also much lisp code is code that is being made to run in CYC
31.01.19 23:49:35<dmiles> oh rioght yeah i am using a Lisp written in Java
31.01.19 23:49:44<dmiles> called ArmedBrearCommonLisp
31.01.19 23:49:58<sseehh> there must be some boundary beyond which everything is affected by the transformations necessary or desired of the new architecture
31.01.19 23:50:07<dmiles> that makes it so peopel can learn lisp and know how to cod ein cyc
31.01.19 23:50:10<sseehh> and the remainder that isnt affected should run as-is or at least some of it
31.01.19 23:50:18<sseehh> right ABCL is what i was thinking of
31.01.19 23:50:19<sseehh> and JScheme
31.01.19 23:50:40<dmiles> yeha i replaced much of Cycorps lisp impl with ABCLs
31.01.19 23:50:56<sseehh> then maybe you can use ABCL like you did javacafe
31.01.19 23:51:08<sseehh> at least as a bootstrap step
31.01.19 23:51:57<dmiles> bootstrap into JVM?
31.01.19 23:52:01<dmiles> erm into Java code?
31.01.19 23:52:08<sseehh> yeah
31.01.19 23:52:13<sseehh> or some intermediate reprenstation
31.01.19 23:52:41<sseehh> my instinct basically derives from the need to get the code into some editor where i can apply reliable source code refactoring like with java
31.01.19 23:52:47<dmiles> oh yeah i can run the translator no problem it hjsut i dont want to run the translator and then work with the post translated
31.01.19 23:53:05<dmiles> i did that with many files and that was a good idea.. other files not
31.01.19 23:53:19<dmiles> like the configuraion files 
31.01.19 23:53:31<dmiles> the configuration files is nice maintainng them untranslated
31.01.19 23:53:47<sseehh> yeah i can understand that. just saying from my perspective its the opposite
31.01.19 23:54:12<sseehh> not having any direct experience with the code i just see it now only as a tree of symbols
31.01.19 23:55:05<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/e2c/cogbot-ke.lisp#L202-L218
31.01.19 23:55:31<dmiles> as exampole.. will probably be compiled later
31.01.19 23:55:48<sseehh> is this all standard lisp? would ABCL interpret this without error
31.01.19 23:55:55<sseehh> even if it didnt do anything if run
31.01.19 23:55:56<dmiles> or translated into java using the autotranslator
31.01.19 23:56:07<sseehh> like the #( stuff
31.01.19 23:56:25<dmiles> oh thats in Cycoprs lisp that translated to Java .. ABCLS doesnt
31.01.19 23:56:26<sseehh> #$isa no idea
31.01.19 23:56:46<dmiles> oh i extended ABCL to understand Cycorps Lisp so ABLE does fine with this
31.01.19 23:57:08<sseehh> is ABLE in the SxxMachine projct?
31.01.19 23:57:22<dmiles> sorroy ABCL
31.01.19 23:57:31<dmiles>  SxxMachine project isnt used yet
31.01.19 23:57:55<dmiles> SxxMachine would be used to make it easier ot have intrcall between Lisp and Prolog
31.01.19 23:58:13<dmiles> for exmale.. 
31.01.19 23:58:43<dmiles> 18:02] <aindilis> well I was going to do query(CycLString, Result),length(Result,Length),random(X,1,Length),nth(X,Result,Item).
31.01.19 23:58:53<sseehh> ok i see https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/tree/larkc/abcl is here
31.01.19 23:59:09<dmiles> yeah
31.01.19 23:59:38<dmiles> hacked into  https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/tree/larkc/platform/src/org/armedbear/lisp
31.01.19 23:59:42<sseehh> so if i run abcl from this project on the .lisp in this project, can i say i got cyc running and if not what is missing
31.01.19 23:59:47<aindilis> I suppose type(Result,closure) -> X ; Y
01.02.19 00:00:14<dmiles> so if i run abcl from this project on the .lisp in this project, can i say i got cyc running and nothing is missing
01.02.19 00:01:07<dmiles> well aindilis might nee dto send the missing datafiles.. post them somewhere for you
01.02.19 00:01:22<dmiles> aindilis: like you did for Chris
01.02.19 00:01:25<aindilis> k
01.02.19 00:01:44<dmiles> CYC boots to the ABCL prompt
01.02.19 00:02:06<dmiles> which at that point is Common Lisp with all the application serverices of CYC
01.02.19 00:02:14<sseehh> ok
01.02.19 00:02:26<dmiles> and at least my connects to this irc bot
01.02.19 00:02:50<dmiles> ?- cl_eval(['cyc:find-assertion-by-id',4353450],O),cl_eval(['cyc:assertion-formula',O],OO).
                 <PrologMUD> dmiles: % O='CYC:ASSERTION'(4353450), OO=['oboDerived:hasExactSynonym','oboGo:P-XyleneBiosyntheticProcess','"p-xylene biosynthesis"']
01.02.19 00:02:51<PrologMUD> dmiles: %  det(Yes,1)
01.02.19 00:03:01<sseehh> what i want to do next is 1) finish trying to get the newer repo of sxxmachine to at least run, if possible.   then 2) do the same with the CYC ABCL project
01.02.19 00:03:38<sseehh> then ill probably want to merge the two into one project
01.02.19 00:03:49<sseehh> and just start refactoring stuff
01.02.19 00:03:53<dmiles> i'd to the CYC ABCL project fiorst .. while i at least vet that i even commited all of the SxxMachine 
01.02.19 00:03:54<sseehh> add some gui
01.02.19 00:04:01<sseehh> ok
01.02.19 00:05:23<aindilis> see pm
01.02.19 00:05:25<dmiles> then from CYC ABCL project.. we'd probley see how to make it call back and forth to your nars
01.02.19 00:05:34<sseehh> it would be nice to get all this lisp code into one big trie and each branch hashed as well and then be able to identify not just code duplicates but structural equivalence like intelliJ does with java AST
01.02.19 00:06:10<dmiles> oh the lisp code parts still need lots of reqiring
01.02.19 00:06:17<dmiles> rewriting
01.02.19 00:06:27<sseehh> yeah what im thinking is it may be easier to build a tool to help with that
01.02.19 00:07:02<sseehh> like point click execute
01.02.19 00:07:09<sseehh> while seeing a huge tree rendered in opengl
01.02.19 00:07:27<dmiles> well even the CYC kb would be nice in that regard
01.02.19 00:07:28<sseehh> and if some code is broken it wont crash the system but offer a way to fix it while its running
01.02.19 00:07:54<sseehh> and as a last resort it can just call random methods
01.02.19 00:07:57<sseehh> until it finds the right one
01.02.19 00:07:58<sseehh> lol
01.02.19 00:08:59<aindilis> http://www.cs.ubbcluj.ro/~csatol/log_funk/prolog/PrologBookPrgs/programs.txt
01.02.19 00:12:34<dmiles> here is my instance runing LarK_CL http://logicmoo.org:3602/cgi-bin/cg?cb-c-all-asserted-knowledge&c75787
01.02.19 00:13:01<dmiles> which it loads datastructures that are not in the lisp files
01.02.19 00:13:53<dmiles> the lisp files are application programs that are made to twiddle the data
01.02.19 00:14:24<dmiles> twiddle the data loaded by cyc
01.02.19 00:15:38<dmiles> easy way to say it is there is  CycL and Lispcode
01.02.19 00:17:45<dmiles> CycL containds assertions about the world and often const information abotu using certain programs
01.02.19 00:17:53<dmiles> cost*
01.02.19 00:21:12<dmiles> [Mon](genls DialoguePanelMicrotheory ApplicationContext)
01.02.19 00:21:13<dmiles> [Mon](genls InteractionHistoryMicrotheory ApplicationContext)
01.02.19 00:21:43<dmiles> DialoguePanelMicrotheory might suggest what buttons appear on a pannel
01.02.19 00:22:04<dmiles> whereas  InteractionHistoryMicrotheory would contain the buttons used
01.02.19 00:22:59<dmiles> Mt : MDAGroundTestDataMt
                 <dmiles> [Inf](doCreateFromDescription "context of scenario simulated by The Simulated Scenario of GroundTest115" 
                 <dmiles>     (Kappa 
                 <dmiles>       (?SCENARIO-CONTEXT) 
                 <dmiles>       (and 
01.02.19 00:23:00<dmiles>         (genlMt MDATestMt ?SCENARIO-CONTEXT) 
01.02.19 00:23:01<dmiles>         (genlMt ?SCENARIO-CONTEXT BMDModelSpindleCollectorMt) 
                 <dmiles>         (genlMt ?SCENARIO-CONTEXT MDAGroundTestScenarioLiftingTheoryMt) 
01.02.19 00:23:02<dmiles>         (ist EnglishMt 
01.02.19 00:23:03<dmiles>           (nameString ?SCENARIO-CONTEXT "the context of the scenario simulated by The Simulated Scenario of GroundTest115")) 
                 <dmiles>         (ist BaseKB 
01.02.19 00:23:04<dmiles>           (isa ?SCENARIO-CONTEXT Microtheory)) 
                 <dmiles>         (ist BaseKB 
01.02.19 00:23:06<dmiles>           (isa ?SCENARIO-CONTEXT ApplicationContext)) 
                 <dmiles>         (ist MDAGroundTestDataMt 
                 <dmiles>           (problemSolvingContextOfSimulation ExecutionSimulationOfGroundTest115-2 ?SCENARIO-CONTEXT)))))
01.02.19 00:23:47<dmiles> might be a rule about how a test is application to somethning
01.02.19 00:25:48<dmiles> might be a rule about how to configure a mario brothers game
01.02.19 00:26:35<dmiles> (implies 
                 <dmiles>     (and 
                 <dmiles>       (problemSolvingContextOfSimulation ?SIM ?SIM-MT) 
                 <dmiles>       (simulationAssumesBackground ?SIM ?BACKGROUND-MT)) 
                 <dmiles>     (ist UniversalVocabularyMt 
                 <dmiles>       (genlMt ?SIM-MT ?BACKGROUND-MT)))
01.02.19 00:27:25<dmiles> Would be rule to decide what previous used models go into such a test
01.02.19 00:27:37<sseehh> similar to what SUMO has
01.02.19 00:28:08<dmiles> yes exactly. SUMO was Adam trying to stop giving Cycorp 1/3 of his grant money
01.02.19 00:28:38<dmiles> so he copied CYC and hired me to give him a free copy
01.02.19 00:28:40<sseehh> i emailed adam some output of runing SUMO KIF translated to nars
01.02.19 00:28:49<dmiles> so he copied CYC's  Infernrce System  and hired me to give him a free copy
01.02.19 00:29:18<dmiles> (to write a version of CYC that he paid for)
01.02.19 00:29:50<sseehh> is that what this is supposed to be? https://github.com/ontologyportal/sigmakee
01.02.19 00:30:06<dmiles> yes that is exaclty 
01.02.19 00:30:26<dmiles> i wrote 90% of the code of that
01.02.19 00:30:37<aindilis> is it prolog?
01.02.19 00:30:43<dmiles> its JSP and JAva
01.02.19 00:30:45<aindilis> k
01.02.19 00:31:01<dmiles> the Prolog code he left out and wa goign to use Vampire-KIF
01.02.19 00:31:07<sseehh> i think now it uses EProver
01.02.19 00:31:12<dmiles> ah
01.02.19 00:31:18<sseehh> which i was looking at the other day, it is a pretty powerful formula prover
01.02.19 00:31:51<dmiles> yeah EProver is closest thjing to CYC out there now
01.02.19 00:32:19<dmiles> i wish i could say my prolog code was!
01.02.19 00:32:21<sseehh> the sumo webapp does sort of resemble this cyc web app i'm accessing
01.02.19 00:32:31<sseehh> cyc's is more colorful
01.02.19 00:32:44<dmiles> and has right click!
01.02.19 00:33:10<dmiles> the one i did for Adam used to have Editing
01.02.19 00:33:12<sseehh> almost makes up for the cgi-bin
01.02.19 00:33:24<dmiles> yeha the cgi-bin is fked
01.02.19 00:33:29<dmiles> faked
01.02.19 00:33:30<sseehh> websockets
01.02.19 00:33:39<dmiles> faked not fucked :P
01.02.19 00:33:41<sseehh> should replace all http stuf
01.02.19 00:34:03<sseehh> https://github.com/automenta/narchy/blob/volatile1/util/src/test/java/jcog/net/http/WebSocketTest.java
01.02.19 00:34:05<dmiles> well it has to still run in lynx in case of WWIII
01.02.19 00:34:24<dmiles> is/was why it was that way
01.02.19 00:34:44<dmiles> (lynx text-only web browser)
01.02.19 00:35:14<sseehh> https://github.com/mabe02/lanterna
01.02.19 00:35:19<dmiles> some general hunkered down in a bucker telling it what russian cyc to blast next
01.02.19 00:35:28<sseehh> yeah i remember using lynx before i even knew what www was
01.02.19 00:35:38<dmiles> some general hunkered down in a bunker asking it what russian city to blast next
01.02.19 00:36:03<sseehh> lanterna can serve over telnet socket
01.02.19 00:37:04<dmiles> why got told that was first thing i wanted to do is get right of all the hyper linkjs and rreplace them with a class 
01.02.19 00:38:25<sseehh> https://github.com/automenta/narchy/tree/skynet5/ui/src/main/java/spacegraph/util/geo/osm for rendering the fallout projections
01.02.19 00:39:04<sseehh> https://github.com/automenta/narchy/blob/skynet5/ui/src/main/java/spacegraph/space3d/widget/OsmSpace.java#L58
01.02.19 00:40:22<dmiles> its been a fantasy of mine (but you sseehh actualyl did it) is make a UI for CYC 
01.02.19 00:40:49<dmiles> though i wouldnt feel right enslaving you for that
01.02.19 00:41:09<sseehh> yeah im imagingn it now
01.02.19 00:41:28<sseehh> there is so much detail here it is not usable
01.02.19 00:41:30<sseehh> on pages like this
01.02.19 00:41:46<sseehh> the only way i can make sense of it is it were drastically simplified to something like a google search box
01.02.19 00:41:54<sseehh> and then anything relevant would appear surrounding it
01.02.19 00:42:02<sseehh> in different sizes and colors
01.02.19 00:42:12<sseehh> and to put this in a freeform mindmap
01.02.19 00:42:24<sseehh> where different queries and other inputs would be like post-it notes
01.02.19 00:42:32<sseehh> and graphs sprouting out of them
01.02.19 00:43:29<sseehh> basically that plus a small control panel would make it look like a finished product even if it didnt do anything besides generate the same display as whats here
01.02.19 00:43:40<dmiles> well ok i did do this:  https://www.youtube.com/watch?v=zr9uT1y5aj0
01.02.19 00:44:35<sseehh> yeh just like that
01.02.19 00:45:00<sseehh> but with a few changes for actually making the graph the main tool
01.02.19 00:45:38<sseehh> everything in the sidebar would be in the graph
01.02.19 00:45:52<sseehh> any sidebar would be pinned floating HUD-layer windows
01.02.19 00:45:57<sseehh> but the same as the graph
01.02.19 00:46:03<sseehh> just frozen
01.02.19 00:46:42<sseehh> the text almost needs to be colorized like camelcase, camelcolor
01.02.19 00:47:02<sseehh> because the words sort of look the same especially when they have a common prefix
01.02.19 00:47:19<sseehh> when listed in alphabetical order they just turn into blobs
01.02.19 00:49:10<sseehh> i appreciate the level of detail this gets into but something like topicalFocusOfIntelligenceAnalysisOfType and i wonder how much of these things are just recursing into their own redundancy
01.02.19 00:49:32<sseehh> so i think the really useful concepts will end up being the mixture of components like this
01.02.19 00:49:51<sseehh> that by the time a user sees anything, a real distillation will have occurred
01.02.19 00:49:56<sseehh> simplifying the output
01.02.19 00:50:04<sseehh> even if it is just an unsorted bag of words
01.02.19 00:50:14<sseehh> represnting the underlying concepts being blended
01.02.19 00:53:08<dmiles> comment :	[Mon]"Where SIM is a ModelBasedSimulation process, (simulationAssumesBackground SIM MT) means that the model being executed in SIM (modelSpecificationExecuted) assumes all of the propositions that are true in the Microtheory MT."
01.02.19 00:53:45<dmiles> [Inf](argIsa simulationAssumesBackground 1 ModelBasedSimulation)
                 <dmiles> [Inf](argIsa simulationAssumesBackground 2 Microtheory)
01.02.19 00:54:37<dmiles> just to give exmaple here.. is usualyl this is for some application
01.02.19 00:55:02<dmiles> ideally one day all the peopel that write applications will start being to share the concpets
01.02.19 00:56:11<sseehh> https://github.com/automenta/narchy/blob/skynet5/app/src/main/java/nars/op/kif/KIFInput.java#L292
01.02.19 00:56:15<dmiles> such as  The ModelBasedSimulation44 Assumes that it is belived that rules for GeographyOfTexas is true
01.02.19 00:56:17<sseehh> in case i didnt link this, its my KIF translator
01.02.19 00:56:22<sseehh> which loads SUMO
01.02.19 00:56:43<dmiles> awesome!
01.02.19 00:57:06<dmiles> i do see it would be nice to shuttle and sync between a NARS instance and CYC
                 <sseehh> so i dont see loading cyc to be much more difficult
01.02.19 00:57:23<sseehh>         n.input("load(\"file:///tmp/sumo/Merge.kif.nalz\");");
                 <sseehh>         n.input("load(\"file:///tmp/sumo/Mid-level-ontology.kif.nalz\");");
                 <sseehh>         n.input("load(\"file:///tmp/sumo/FinancialOntology.kif.nalz\");");
                 <sseehh> n.input("load(\"file:///tmp/sumo/Economy.kif.nalz\");");
01.02.19 00:57:29<sseehh>         n.input("$1.0 possesses(I,#everything)!");
                 <sseehh>         n.input("$1.0 uses(#anything, I).");
                 <sseehh>         n.input("$1.0 --Dead:{I}!");
                 <sseehh>         n.input("$1.0 Human:{I}.");
01.02.19 00:57:30<sseehh>         n.input("$1.0 --needs(I, #all)!");
01.02.19 00:57:31<sseehh>         n.input("$1.0 --lacks(I, #anything)!");
01.02.19 00:57:33<sseehh>         n.input("$1.0 benefits(#all, I)!");
01.02.19 00:57:35<sseehh>         n.input("$1.0 --suffers(#anything, I)!");
01.02.19 00:57:39<sseehh>         n.input("$1.0 income(I, #money, #anyReason)!");
01.02.19 00:57:41<sseehh>         n.input("$1.0 --(I-->Hungry)!");
01.02.19 00:57:43<sseehh>         n.input("$1.0 --(I-->Thirsty)!");
01.02.19 00:57:45<sseehh>         n.input("$1.0 enjoys(I,?x)?");
01.02.19 00:57:47<sseehh>         n.input("$1.0 dislikes(I,?x)?");
01.02.19 00:57:49<sseehh>         n.input("$1.0 needs(I,?x)?");
01.02.19 00:57:51<sseehh>         n.input("$1.0 wants(I,?x)?");
01.02.19 00:57:53<sseehh> n.input("$1.0 patient(?what,I)?"); 
01.02.19 00:58:18<dmiles> it would be really good to see how closely SUMO test and NARS rules for those tests are
01.02.19 00:58:35<sseehh> yeah there will certainly be differences
01.02.19 00:59:28<dmiles> https://github.com/TeamSPoon/logicmoo_base/blob/master/t/KBs/Sigma_Test_Questions.txt
01.02.19 00:59:34<dmiles> those ar ethe test question
01.02.19 01:00:12<sseehh> this reminds me of this test i adapted from AIMA book
01.02.19 01:00:13<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/test/java/nars/nal/nal5/AIMATests.java#L62
01.02.19 01:00:21<sseehh>   n.believe(
                 <sseehh>                 "((&&,Weapon(#y),Sells($x,#y,#z),Hostile(#z)) ==> Criminal($x))",
                 <sseehh>                 "Owns(Nono, M1)",
                 <sseehh>                 "Missile(M1)",
                 <sseehh>                 "((Missile($x) && Owns(Nono,$x)) ==> Sells(West,$x,Nono))",
01.02.19 01:00:22<sseehh>                 "(Missile($x) ==> Weapon($x))",
01.02.19 01:00:24<sseehh>                 "(Enemy($x,America) ==> Hostile($x))",
01.02.19 01:00:26<sseehh>                 "American(West)",
01.02.19 01:00:28<sseehh>                 "Enemy(Nono,America)"
01.02.19 01:00:30<sseehh>         );
01.02.19 01:00:32<sseehh>         @Nullable Task Q = n.question($.$(
01.02.19 01:00:34<sseehh> "Criminal:?x"
01.02.19 01:00:36<sseehh> except here there isnt a huge ontology of background knowledge it needs to make use of
01.02.19 01:00:56<sseehh> guess who the criminal ends up being
01.02.19 01:01:05<dmiles> hehe
01.02.19 01:01:30<sseehh> but this is about the same complxity as some of these questions
01.02.19 01:01:39<sseehh> i think its doable
01.02.19 01:03:39<sseehh> though eprover will get the answer first. nothing is going to outperform that on crisp boolean logic
01.02.19 01:04:44<dmiles> did you speed of Cyc compare to EPRover? 
01.02.19 01:04:50<dmiles> http://www.cyc.com/wp-content/uploads/2015/06/First-Orderized.pdf 
01.02.19 01:05:11<dmiles> Table 2: Inference Experiments
01.02.19 01:06:02<dmiles> teh EProver was able to do tons of what CYC could do and the otehr provers couldnt
01.02.19 01:06:09<sseehh> in the email i sent adam i asked if he know of anyone using SUMO to solve goals like in my example. he said no
01.02.19 01:06:36<sseehh> i scanned eprover's manual and some presentations.  its scary
01.02.19 01:06:49<sseehh>  n.input("$1.0 possesses(I,#everything)!");
01.02.19 01:07:08<sseehh> this is the typical thing someone might want to do with an upper level ontology right?
01.02.19 01:07:20<dmiles> yes
01.02.19 01:07:27<dmiles> or wait
01.02.19 01:07:47<dmiles> we want to assure the system stays fine in case of     n.input("$1.0 possesses(I,#everything)!");
01.02.19 01:08:09<dmiles> such a test would make sure that   n.input("$1.0 possesses(I,#nothing)!");  stays false
01.02.19 01:08:11<sseehh> --posses(I,I)!
01.02.19 01:08:17<dmiles> yeah like that
01.02.19 01:08:20<sseehh> yaeh
01.02.19 01:08:24<sseehh> these can all be added later
01.02.19 01:08:28<sseehh> while its running
01.02.19 01:08:32<sseehh> as we think of them
01.02.19 01:08:40<dmiles> yeah
01.02.19 01:08:43<sseehh> because its flexible it can revise its beliefs
01.02.19 01:09:17<sseehh> (--(#x <-> bad) && possesses(I,#x))!
01.02.19 01:09:30<dmiles> and even applicaitons can even use this sort of stuff to maintain statwe
01.02.19 01:09:50<dmiles> (as long as they ask/tell etc this)
01.02.19 01:09:51<sseehh> yeah homoestatic controls
01.02.19 01:10:25<sseehh> i guess NAL will prove its usefulness when it needs to decide between bad and worse
01.02.19 01:11:01<dmiles> well nars does do many things really well
01.02.19 01:11:21<dmiles> but all these system are just one trick ponies
01.02.19 01:11:27<dmiles> but all these systems
01.02.19 01:11:51<sseehh> well prototypes of what will eventually be the first 2 trick pony
01.02.19 01:12:05<dmiles> hah
01.02.19 01:12:26<dmiles> everyone hops 1 or 2 tricks will be enough
01.02.19 01:12:29<sseehh> when it comes down to it the core of NAL nonaxiomatic logic is a bunch of truth formulas, like opencog which was heavily inspired by nars from the begining
01.02.19 01:12:34<dmiles> hopes*
01.02.19 01:12:48<sseehh> these formulas can be evolved maybe in better application specific ways
01.02.19 01:13:19<sseehh> im thinking that the next step will involve a redesign that allows evolutionary reconfiguration 
01.02.19 01:13:35<dmiles> the ideal system is one that matches the pony to whatever
01.02.19 01:13:44<sseehh> at that point there wont be much point in saying what type of system something is or isnt
01.02.19 01:14:05<sseehh> there will be too many to name, and they will always be changing themselves
01.02.19 01:15:19<dmiles> autoreconfiguraion adn a system to narrate to itself abotu how it will configure
01.02.19 01:18:23<sseehh> theres at least 2 copies of abcl in this project
01.02.19 01:18:48<sseehh> is there anything i can safely delete to narrow it down
01.02.19 01:19:45<dmiles> teh unused copy the one at a higher level can be delted
01.02.19 01:20:06<dmiles> i have it exxcldued from my project config so it never bugs me
01.02.19 01:20:35<dmiles> i use it with a diffing tool.. it is a 1/2 way theires and mine version i maintain
01.02.19 01:21:02<dmiles> so i can detect changes in theirs that i dont need
01.02.19 01:21:03<sseehh> Delete part of the cloned repo 
                 <sseehh> ~~~~
                 <sseehh> root@gitlab:/opt/CYC_JRTL_with_CommonLisp# rm -rf platform/
01.02.19 01:21:05<sseehh> lol what
01.02.19 01:21:18<dmiles> you will git checkout  :P
01.02.19 01:21:34<dmiles> after yoyu copy the cycorp stuff
01.02.19 01:21:41<dmiles> so our stuff overwirtes it
01.02.19 01:24:17<sseehh> the jake2 java quake2 port that i have in narchy/lab/ actually downloads the shareware version of the game, extracts it, and is ready to play the first time its run
01.02.19 01:24:25<sseehh> i mean thats how someone else wrote it
01.02.19 01:27:04<dmiles> oh yeah swamps wants to use the opencyc KB i am planning to diffing the Jadified cyc.jar of opencyc and seeing if i cant get it to backards compatibly load his archived version
01.02.19 01:27:42<sseehh> https://github.com/automenta/narchy/blob/skynet5/lab/src/main/java/jake2/qcommon/Q2DataTool.java#L17
01.02.19 01:28:13<dmiles> thx
01.02.19 01:30:29<dmiles> i sorta forgot in the build isnteuctuons to say to  mv platform/lib/cyc.jar platform/lib/cyc.jar.hid
01.02.19 01:30:50<dmiles>  mv platform/lib/subl.jar platform/lib/subl.jar.hid
01.02.19 01:31:12<dmiles> to keep things from picking up the unpatched versions
01.02.19 01:32:06<sseehh> or just delete them
01.02.19 01:32:24<dmiles> *nod*
01.02.19 01:33:02<dmiles> oh btw ABCL maxes out at java 1.8
01.02.19 01:33:16<dmiles> before stuff starts to break
01.02.19 01:33:33<dmiles> i dont mind relaxing thje -source 1.6 to   -source 1.8 
                 <sseehh> same with sxx
01.02.19 01:33:52<sseehh> im on jdk13
01.02.19 01:34:05<sseehh> i have 8, 9, 11 installed though
01.02.19 01:34:10<dmiles> it might jsut be you need to add the tools.jar 
01.02.19 01:34:18<dmiles> or whatever it being excluded
01.02.19 01:34:20<sseehh> nah that wont work on 9+
01.02.19 01:34:23<sseehh> because they got rid of it
01.02.19 01:34:34<dmiles> jdb-sdi 
01.02.19 01:34:35<sseehh> there has to be some more permanent fix, ill find it
01.02.19 01:34:51<dmiles> it is that i am using JavaDebugInterface
01.02.19 01:35:05<dmiles> so CYC can add and remove certian bvreakppints
01.02.19 01:35:13<sseehh> https://github.com/automenta/narchy/tree/volatile1/docs/jdk my jdk build scripts fwiw
01.02.19 01:35:40<dmiles> (i programmatically add breakpoints)
01.02.19 01:35:41<sseehh> ouhc yah there are going to be newer ways of doing that with 9+
01.02.19 01:35:55<sseehh> maybe using a java agent
01.02.19 01:36:13<dmiles> ai use Unsafe to overright FeildAccessor is some cases to
01.02.19 01:36:24<dmiles> i also *
01.02.19 01:36:42<sseehh> Unsafe is still accessible but they want to eventually remove it
01.02.19 01:37:02<sseehh> the recommended way is using VarHandles to reference the fields and VarHandle has most of the Unsafe access methods but not all of them
01.02.19 01:37:12<sseehh> so that will probably be simple
01.02.19 01:38:22<dmiles> usecase i have is when hotswapping static methods
01.02.19 01:39:02<sseehh> https://www.infoq.com/articles/Easily-Create-Java-Agents-with-ByteBuddy
01.02.19 01:39:36<dmiles> for fields i use it for making sure teh relatiional data model is in line with the OO model
01.02.19 01:39:58<dmiles> (so i get a notification of field changes)
01.02.19 01:40:38<dmiles> so when someone access a field OO--wise i can make a deductive query to decide the value that shouild be there
01.02.19 01:40:57<dmiles> in order ot have memory free objects
01.02.19 01:42:07<dmiles> allowing an infernce system like CYC or evne NARS to "guess" what the field vlaue should be
01.02.19 01:42:39<sseehh> i think that is called "imputing" a value
01.02.19 01:42:52<sseehh> like in a spreadsheet
01.02.19 01:43:02<sseehh> a missing cell can be intermpolated as a guess
01.02.19 01:43:38<dmiles> i wonder if entire systems use this
01.02.19 01:43:41<sseehh> bytebuddy is the best tool for class manipulation and agent building
01.02.19 01:44:10<sseehh> that or just ASM
01.02.19 01:44:34<dmiles> yeha i ASM right now i use to synthsize some of the code unsed
01.02.19 01:44:38<sseehh> ASM can do a lot too
01.02.19 01:44:52<dmiles>  ASM right now i use to synthsize some of the code used
01.02.19 01:45:15<sseehh> https://github.com/automenta/narchy/blob/volatile1/app/src/main/java/nars/op/java/Opjects.java#L85 this uses bytebuddy to create dynamic proxy wrapper interfaces for classes to intercept method calls. it doesnt do anything with fields yet though
01.02.19 01:45:20<dmiles> that was how i realised cycorp leaked *my* code is i am the one that dded that method specialization code for them
01.02.19 01:46:07<sseehh> with bytebuddy there is probably a visitor that replaces direct field access with an intermediate method where you can attach an interceptor
01.02.19 01:46:14<dmiles> erm was ,leaking full cyc that is
01.02.19 01:46:34<sseehh> were they not suposed to?
01.02.19 01:46:49<dmiles> i dunno .. i was just surprised
01.02.19 01:47:11<sseehh> if you had it licensed and they changed it i bet they could be sued
01.02.19 01:48:37<dmiles> i volenteered to do it
01.02.19 01:49:14<dmiles> i probly enve put their boiler plate copywrite on it 
01.02.19 01:50:27<dmiles> oh Opjects was actualy about doing what i meant 
01.02.19 01:51:27<dmiles> oh i guess you are making it as Term but still
01.02.19 01:57:40<sseehh> it observes object method calls and generates beliefs about it so it translates arguments into terms (termizer)
01.02.19 01:57:49<sseehh> and in the opposite direction it interprets goals into method calls
01.02.19 01:58:18<sseehh> so you can show the system how something works and then it can theoretically form its own goals to do the same or different
01.02.19 01:58:33<sseehh> so if its playing tetris for example and its observing the method calls the game makes
01.02.19 01:58:56<sseehh> it can get additional clues about whats happening inside
01.02.19 01:59:18<sseehh> and even call individual methods. it may decide to call a method at any time though
01.02.19 01:59:31<sseehh> so for example i had to hide the reset method
01.02.19 01:59:54<sseehh> because it just wanted to keep hitting reset to exploit the particular reward function that makes it seek zero block density
01.02.19 02:00:32<sseehh> but it will learn someting like, if theres a method called boolean gameOver() which the game uses to check if the game has ended
01.02.19 02:00:48<sseehh> it can learn that the true result of that coincides with the negative reward signal i give it for losing
01.02.19 02:01:39<sseehh> then anything visible to it which is called by gameOver() now becomes additional clues as to why it might get a bad reward in that situation
01.02.19 02:02:35<dmiles> is see.. you could even infect jake2 like that 
01.02.19 02:03:16<dmiles> (arbitratily replace its objects)
01.02.19 02:04:04<dmiles> though jake is sorta funny codebase in that respect
01.02.19 02:04:27<sseehh> yeah anything but it isnt magic, it has to compete with all other mental activity
01.02.19 02:04:56<sseehh> jake2 is more or less a direct port of quake2 C code
01.02.19 02:05:18<dmiles> *nod* since really what  i am talking about is having a NARS *also* create a mental version of the world
01.02.19 02:05:26<sseehh> i was able to add a 'hurt meter' to guage when nars hit an enemy 
01.02.19 02:05:31<sseehh> and fed that as a reward signal. lol
01.02.19 02:06:12<dmiles> yeah it feels liek a direct translation of non OO
01.02.19 02:06:33<sseehh> it can be effective in a world without necessarily having a specificallly separate mental model of it from any other world it might be exposed to, and without necessarily considering itself separate from that world either
01.02.19 02:07:18<sseehh> but its not possible to say it wont happen either. the self could be hiding within the memory as an emergent pattern 
01.02.19 02:07:20<dmiles> what i immagien is having two worlds..where this altranate maintaied world is for you and I to see what it imamgines
01.02.19 02:08:20<sseehh> well its easy to imagine for a simple 2d game like tetris
01.02.19 02:08:25<sseehh> i display the pixels that it sees
01.02.19 02:08:30<sseehh> and tint it to show some other things
01.02.19 02:08:46<sseehh> first is that the temporal duration parameter affects how blurred the result is
01.02.19 02:08:56<sseehh> if the temporal duration is long then it experiences things as slower moving blurs
01.02.19 02:09:04<sseehh> so the motion of the falling blocks will be smeared and blurred
01.02.19 02:09:15<sseehh> decreasing it to about the framerate of the game and it is clear
01.02.19 02:09:23<sseehh> this would be a parameter it can control dynamically
01.02.19 02:09:30<sseehh> because some things need to be observed at different time scales
01.02.19 02:09:43<sseehh> or some parts of the system will operate at different timescales
01.02.19 02:09:51<sseehh> simultaneously
01.02.19 02:09:57<dmiles> yeah it can find the right frame right level at differnt times
01.02.19 02:10:08<sseehh> i have 2 color overlays so far
01.02.19 02:10:21<sseehh> in green/red spectrum i indicate the goal level
01.02.19 02:10:41<sseehh> so green means it wants the pixel to be true, in other words, white
01.02.19 02:10:46<sseehh> red means it wants the opposite
01.02.19 02:11:00<sseehh> so these red and green sparkles indicate its prefernce for what color the pixel should be
01.02.19 02:11:04<sseehh> which is different from what it is
01.02.19 02:11:09<sseehh> usually
01.02.19 02:11:24<sseehh> the more of this the better idea it has of how it wants to be playing
01.02.19 02:11:29<sseehh> in the current moment
01.02.19 02:11:35<sseehh> the same evaluation can be computed for any time in the past or present
01.02.19 02:11:48<sseehh> so i could make a 3d view of this showing how the goal changes across time
01.02.19 02:12:05<sseehh> and it would show desires coalescing in the near future, passing thru the present into the past etc
01.02.19 02:12:30<sseehh> these desires are also being formed for more abstract concepts deeper in memory
01.02.19 02:12:42<sseehh> these are only the ones which actually make it to the 'surface' of the game
01.02.19 02:13:06<sseehh> where it is the lowest level percepts
01.02.19 02:13:25<sseehh> they have reached the entire feedback loop from raw input to control decision
01.02.19 02:14:00<sseehh> but the problem is if the time it takes for this loop to form and propagate the decision is slower than the game, it will seem like it is laggy, slow, or just acting randomly as it tries desperately to catch up with the new input
01.02.19 02:14:22<sseehh> in one game i added the ability for it to hit the pause button
01.02.19 02:14:32<sseehh> and this is probably helpful in allowing it time to analyze what just happened
01.02.19 02:14:37<dmiles> well probly want to slow the game down to mke it waiting fort hte game
01.02.19 02:14:43<sseehh> and it doesnt get any reward while paused so it shouldnt always want that
01.02.19 02:14:58<sseehh> yeah that is the obvious solution but im so impatient i just cant do it
01.02.19 02:15:00<sseehh> like
01.02.19 02:15:07<dmiles> yeah jsut a autpause
01.02.19 02:15:11<sseehh> i shouldnt be doing testing it
01.02.19 02:15:27<sseehh> half the time i think im just hallucinating that its doing what i think it should be doing
01.02.19 02:15:41<sseehh> when it actually does manage to do something good
01.02.19 02:15:53<sseehh> but i measure it, i measure the amount of desire it formed when manipulating a motor concept
01.02.19 02:16:00<sseehh> so i see when it actgually did make a decision
01.02.19 02:16:16<sseehh> vs. just the random curiosity which can occaisionally make a good decision but it has no reason behind it
01.02.19 02:17:08<sseehh> but i think what remains of it is just optimization, and faster cpu and more memory cant hurt
01.02.19 02:17:58<sseehh> its basically infinitely scalable. there is some point where more threads become less helpful but at that point a hierarchical design should be introduced like we have left and right hemispheres and other brain organs
01.02.19 02:18:55<sseehh> by optimization i actually mean just clearly specifying the constraints on what it should do
01.02.19 02:18:58<sseehh> and make the system enforce them
01.02.19 02:19:03<sseehh> it shouldnt be any more complex than tha
                 <sseehh> that
01.02.19 02:19:05<dmiles> yeah there can be  a layer that just sets up experimenting with isolation
01.02.19 02:19:17<dmiles> isolating out differnt facotrs
01.02.19 02:19:22<sseehh> but what is also hard is deciding those constraints, and then deciding ranges of those constraints that is safe for the system to control by itself
01.02.19 02:19:40<sseehh> like i gave it control over its curiosity level
01.02.19 02:19:59<sseehh> i dont let it turn it off completely but it can be adjusted to very infrequent where it gets injected with random motor noise
01.02.19 02:20:23<sseehh> other ones would be temporal duration, memory activation and forgetting rates etc
01.02.19 02:21:13<sseehh> ideally there would be a continuous spectrum where it can basically switch from pure prolog execution to pure nars execution and modes in between
01.02.19 02:21:40<sseehh> so that once it does learn what it needs to do it can compile that to a program, execute it because it wants to, with 99% focus and subservience to its own decision
01.02.19 02:21:47<dmiles> if the part it let control those specific factors not able to be part of the system that sees as much of the world
01.02.19 02:22:25<sseehh> yeah originally i thought these regulation controls would be better as a separate controller using non-NARS components for reliabliity
01.02.19 02:22:37<sseehh> and that may be the case. but they can just as easily be additional motor controls directly in the system
01.02.19 02:22:42<sseehh> and/or both
01.02.19 02:22:48<dmiles> yeah there are certian times that a set of actions need to get the dogma of prolog (call it mussle meory)
01.02.19 02:22:56<sseehh> yes exactly
01.02.19 02:23:04<sseehh> parasympathetic nervous sytem or the other one
01.02.19 02:23:06<sseehh> subconscious
01.02.19 02:23:32<sseehh> because by default it is spending 100% of its cpu in conscious mode which doesnt give it very much
01.02.19 02:23:48<dmiles> we humans certainly dont
01.02.19 02:23:55<sseehh> like a shaky laser trying to paint an entire wire at 30fps
01.02.19 02:24:04<sseehh> entire wall
01.02.19 02:24:10<dmiles> good analogy
01.02.19 02:24:12<sseehh> it ends up just wandering all over the place
01.02.19 02:25:02<sseehh> one possibilty is something like this 'impiler' plugin i started making
01.02.19 02:25:28<sseehh> it was meant to scan the memory for implication networks that could be summarized into more or less boolean decision networks
01.02.19 02:25:42<sseehh> through time
01.02.19 02:25:59<sseehh> then from these it should be possible to compile schedules and even bytecode
01.02.19 02:26:10<sseehh> which takes as input the deciding factors and produces the resulting output
01.02.19 02:26:32<sseehh> these would execute in negligible time
01.02.19 02:26:45<sseehh> and yet do most of the work that the reasoner struggles with
01.02.19 02:27:00<sseehh> basically to transform implication beliefs into control flow graphs
01.02.19 02:27:30<sseehh> to transform the most strongly polarized and highly confident implicatoin beliefs
01.02.19 02:28:07<sseehh> then it can try the compiled policy, and it can even learn from it
01.02.19 02:28:20<sseehh> it can say 'no that is wrong' and then reinsert the conclusion as a new belief
01.02.19 02:28:22<dmiles> pretty much you are creating a view at one higher level
01.02.19 02:28:48<dmiles> you could see this "these are implications" views as a whole new game
01.02.19 02:29:00<dmiles> and even have wants for such implications
01.02.19 02:29:25<sseehh> yes though technically implication terms are not allowed to be goals, at least in opennars and i follow that
01.02.19 02:29:30<dmiles> wants for the existence of non present impls
01.02.19 02:29:32<sseehh> i dont really know why but its a special case
01.02.19 02:29:42<sseehh> wants for conjunctoins though are fine
01.02.19 02:30:05<sseehh> and this impiler would use conjunction as well, especailly implications containing conjunctions in precondition and postconditions
01.02.19 02:30:10<sseehh> ((x && y) ==> --z)
01.02.19 02:30:14<dmiles> ah conjuctions are evne happening i suppose
01.02.19 02:30:22<sseehh> yeah any kind of conjunctive expression
01.02.19 02:30:30<sseehh> (x || y) ==> (z && --w))
01.02.19 02:30:36<sseehh> (x || y) ==>+1min (z && --w))
01.02.19 02:30:45<sseehh> (x || y) ==>+1min (z &&+30s --w))
01.02.19 02:30:46<sseehh> etc
01.02.19 02:31:08<dmiles> yeah it can all be turtles
01.02.19 02:31:24<sseehh> well i think what you were starting to say was the memory could have a view that exposes only the implication
01.02.19 02:31:27<sseehh> to a higher level
01.02.19 02:31:32<sseehh> and yes that is definitely possible
01.02.19 02:31:38<sseehh> especialyl with some recent changes i made
01.02.19 02:32:23<dmiles> right that it is looking at a level that secretly shouldnt make any ap;licayble sense.. but must since tha tis what is 
01.02.19 02:32:42<sseehh> its compartmentalization that can help it focus
01.02.19 02:32:54<sseehh> the same reason why neural networks are usually built in layers
01.02.19 02:33:03<sseehh> one hides the inputs from the next
01.02.19 02:33:04<dmiles> yeah to force this artificial compartmentalization
01.02.19 02:33:21<sseehh> otherwise it would be like double the input to the second next layer
01.02.19 02:34:21<sseehh> without these kind of constraint it is like an all -> all connective system so no wonder it performs bad
01.02.19 02:34:33<sseehh> but i think it is very small changes that would make a huge differnce
01.02.19 02:35:20<dmiles> well the issue i alway wonder in nars is that the scoipe of a number of litteral per rule (3!) cant always be ideal
01.02.19 02:35:56<dmiles> that some things get obfusicated to itself
01.02.19 02:36:24<sseehh> scope of number?
01.02.19 02:36:25<dmiles> (of course since its allways playing dammage control to this linit it does imporove)
01.02.19 02:36:51<dmiles> the linmit that all rules are A & B -> C
01.02.19 02:37:04<sseehh> you mean deriver rules?
01.02.19 02:37:15<sseehh> like
01.02.19 02:37:23<sseehh> (A-->B), (B-->C) |- (A-->C)
01.02.19 02:37:24<dmiles> maybe these are  deriver 
01.02.19 02:37:28<sseehh> this is a double premise deriver rule
01.02.19 02:37:40<sseehh> it is meant to take 2 tasks and form an output task
01.02.19 02:37:47<sseehh> but there are single premise rules which take 1 task and 1 term
                 <dmiles> oh right yeah techically rthat are  (A-->B), (B-->C) |- (A-->C)
01.02.19 02:37:59<sseehh> and there can be rules which just operate on the task
01.02.19 02:38:06<sseehh> these would be single premise also
01.02.19 02:38:48<sseehh> so that covers self transforms and binary interactions.  anything beyond that can be applied in plugins which can be considered specialized derivers
01.02.19 02:39:04<sseehh> like the conjunction clustering plugin, this clusters active beliefs into ccentroids
01.02.19 02:39:17<sseehh> which are then used to form conjunction from 2 or more of its members
01.02.19 02:39:23<sseehh> so this is like an N-ary deriver
01.02.19 02:39:38<dmiles> yeah the creation of centroids 
01.02.19 02:39:43<sseehh> i guess that covers basically all of the cases
01.02.19 02:40:36<dmiles> the creation of centroids seem to need to be done secondaritly
01.02.19 02:40:37<sseehh> instead of clusters and centroids (using a growing neural gas clustering btw) it would work just as well to use an RTree and consider the leaves as centroids
01.02.19 02:40:58<sseehh> the rtree would probably be more predictable and more efficient i just didnt bother to abstract it yet
01.02.19 02:41:14<sseehh> but any kind of grouping or partitioning would fit into that interface
01.02.19 02:41:30<sseehh> and then the procedure which transforms the group into some result, like a new task could be pluggable too
01.02.19 02:43:43<dmiles> those organiszaions are important to have happen
01.02.19 02:44:34<sseehh> going afk ill continue in cyc_jrtl tomorrow at the overwrite the platform/ folder step
01.02.19 02:45:10<dmiles> right on i'll mess with SxxMachine in the next 12 hours
01.02.19 02:45:34*** Quit: sseehh (~me@2601:547:501:6b0c::d442) left #logicmoo: Quit: Leaving
01.02.19 03:03:26*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
01.02.19 03:03:31<dmiles> cyc: (+ 1 1)
01.02.19 03:04:07*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 240 seconds
01.02.19 03:24:17<aindilis`> dmiles: what are you working on?
01.02.19 03:25:03<aindilis`> I was just curious if you were able to finish that calling CYC from Prolog?
01.02.19 03:26:12<dmiles> yup thats all in!
01.02.19 03:26:18<aindilis`> YAY!
01.02.19 03:26:26<aindilis`> so I will build
01.02.19 03:26:29<dmiles> yes
01.02.19 03:28:23<dmiles> watching TV for an hourcalling prolog
01.02.19 03:28:28<aindilis`> :)
01.02.19 03:28:39<aindilis`> I took a serious off day for like an hour and then was really productive
01.02.19 03:28:45<aindilis`> so I guess Imma try that again
01.02.19 03:28:46<aindilis`> :)
01.02.19 03:28:56<dmiles> was going to try out SxxMachine .. in a way it will help may play with CYC to calling prolog
01.02.19 03:29:05<aindilis`> ah nice
01.02.19 03:30:31<dmiles> i have a couple things to imporove getting prolog calling CYC but that is just some helper functions that will all be in Prolog
01.02.19 03:31:00<aindilis`> wonderful
01.02.19 03:31:06<aindilis`> so excited
01.02.19 03:31:20<aindilis`> did you CYC state is maintained in PrologKB?
01.02.19 03:32:25<dmiles> ?- between(11111,11113,O),cl_eval(['cyc:el-ist-formula','CYC:ASSERTION'(O)],E).
01.02.19 03:32:42<dmiles> ?- between(11111,11113,O),cl_eval(['cyc:assertion-ist-formula','CYC:ASSERTION'(O)],E).
                 <PrologMUD> dmiles: % O=11111, E=[ist,'BaseKB',[termOfUnit,'CYC:NART'(11111),['LocallyExploitableFn','VulnerableToPostScriptCommandExecution']]]
                 <PrologMUD> dmiles: % O=11112, E=[ist,'BaseKB',[termOfUnit,'CYC:NART'(11112),['RemotelyExploitableFn','VulnerableToPostScriptCommandExecution']]]
                 <PrologMUD> dmiles: % O=11113, E=[ist,'BaseKB',[termOfUnit,'CYC:NART'(11113),['LocallyExploitableFn','VulnerableToJavascriptCommandExecution']]]
01.02.19 03:32:43<PrologMUD> dmiles: %  det(Yes,3)
01.02.19 03:33:03<dmiles> ?- between(91111,91113,O),cl_eval(['cyc:assertion-ist-formula','CYC:ASSERTION'(O)],E).
                 <PrologMUD> dmiles: % O=91111, E=[ist,'BaseKB',[termOfUnit,'CYC:NART'(91111),['URLFn','"http://www.calgaryhealthregion.ca/hecomm/nal/AdultsOlderAdults/1_Gout%20final.pdf"']]]
                 <PrologMUD> dmiles: % O=91112, E=[ist,'BaseKB',[termOfUnit,'CYC:NART'(91112),['URLFn','"http://www.medicalmoment.org/_content/facts/jul03/151177.asp"']]]
01.02.19 03:33:04<PrologMUD> dmiles: % O=91113, E=[ist,'BaseKB',[termOfUnit,'CYC:NART'(91113),['URLFn','"http://www.homeoint.org/books3/kentmm/eupat-perf.htm"']]]
                 <PrologMUD> dmiles: %  det(Yes,3)
01.02.19 03:33:34<dmiles> not really but it is accessable .. ansd can be loaded this way
01.02.19 03:33:44<aindilis`> okay have you benchmarked?
01.02.19 03:34:02<dmiles> nope but it is certainly faster than anything tc-based
01.02.19 03:34:10<dmiles> tcp based
01.02.19 03:34:13<aindilis`> great
01.02.19 03:34:26<aindilis`> I guess I'll try to benchmark
01.02.19 03:34:39<dmiles> yeah good that will help tease out bugs i need to fix
01.02.19 03:34:56<dmiles> since you might hit blocks i didnt think about
01.02.19 03:35:01<aindilis`> okay
01.02.19 03:41:16<aindilis`> hrm it's still segfaulting for me, do I need to build from scratch instead of git pull ; build-cyc-java.sh ?
01.02.19 03:41:20<aindilis`> dmiles
01.02.19 03:42:02<dmiles> ./build-cyc-java.sh  should rm -rf build
01.02.19 03:42:15<dmiles> i mean it shouild build
01.02.19 03:42:29<aindilis`> yeah still getting the segfault though
01.02.19 03:42:31<aindilis`> :(
01.02.19 03:42:33<dmiles> is it segfaulting on build?
01.02.19 03:42:43<dmiles> what command segfaults it?
01.02.19 03:42:45<aindilis`> no on running first prolog query, after swipl -s from_swipl.pl
01.02.19 03:42:49<aindilis`> cl_eval
01.02.19 03:43:04<dmiles> cl_eval what?
01.02.19 03:43:13<aindilis`> between(11111,11113,O),cl_eval(['cyc:assertion-ist-formula','CYC:ASSERTION'(O)],E).
01.02.19 03:43:20<aindilis`> cl_eval([+,1,1],O).
01.02.19 03:43:23<aindilis`> both of those did
01.02.19 03:43:27<dmiles> ?- cl_eval([+,1,1],O).
                 <PrologMUD> dmiles: % O=2
                 <PrologMUD> dmiles: %  det(Yes,1)
01.02.19 03:43:34<aindilis`> segfaults for me
01.02.19 03:43:51<aindilis`> should I reinstall from scratch?
01.02.19 03:43:58<dmiles> oh i should login maybe on your machine
01.02.19 03:44:03<aindilis`> kk one sec
01.02.19 03:45:09<aindilis`> do you have the password or should I set one?
01.02.19 03:45:15<aindilis`> ssh -p 2222 central.frdcsa.org
01.02.19 03:45:19<aindilis`> ssh -p 2222 dmiles@central.frdcsa.org
01.02.19 03:45:44<aindilis`> it lives in: /var/lib/myfrdcsa/sandbox/cyc-jrtl-with-commonlisp-20190124/cyc-jrtl-with-commonlisp-20190124
01.02.19 03:45:54<aindilis`> I'll have to change perms
01.02.19 03:45:59<aindilis`> or ownership
01.02.19 04:46:23*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mykrzlymsbstffyr) left #logicmoo: Quit: Connection closed for inactivity
01.02.19 12:45:15*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
01.02.19 12:45:20<dmiles> cyc: (+ 1 1)
01.02.19 14:48:51*** Join: sseehh (~me@2601:547:501:6b0c::d442, sseehh: realname)
01.02.19 14:48:56<dmiles> cyc: (+ 1 1)
01.02.19 14:49:45<sseehh> dmiles, do u have a gitlab acct
01.02.19 14:50:27<sseehh> i want to commit my changes to CYC_.. project to a private gitlab acct
01.02.19 14:51:03<sseehh> bin   data  examples  LICENSE    resource  test   unused
                 <sseehh> conf  doc   lib       README.md  src       tools  www
01.02.19 14:51:34<sseehh> yes i just moved stuff around and probably broke 99% of it but it couldnt be automated anyway by prolog cyc lisp or even java
01.02.19 14:51:48<sseehh> shells cripts
01.02.19 14:52:26<sseehh> so i think that might be a good focus in recreating whatever this is supposed to do
01.02.19 14:53:39<sseehh> at most i want to commit 1gb of this stuff, i blocked most of the 11gb+ other stuff in .gitignore'd unused 
01.02.19 14:54:52<sseehh> it should be possible to distill all of that data to some structure that makes sense enough to make a non-confusing init script that would load it modularly
01.02.19 14:56:02<sseehh> i gathered most of the java stuff i could find in src/ including appdapter
01.02.19 14:56:22<sseehh> i know it wont build right away but its a start at consolidating it in one place that i can understand it
01.02.19 15:05:33<editable-dog>hey sseehh , long time no see
01.02.19 15:07:01<sseehh> ur going to have to remind me who else you might be. i dont even remember who editable-log is
01.02.19 15:08:32<sseehh> Error:java: OutOfMemoryError: insufficient memory
01.02.19 16:10:59<editable-dog>koo5
01.02.19 16:28:30<sseehh> editable-dog, thanks yes im glad its you
01.02.19 16:28:37<sseehh> how is everything
01.02.19 17:38:55<editable-dog>its up and down, as its always been, hows it with you?
01.02.19 17:43:06<sseehh> same
01.02.19 17:43:18<sseehh> but steady progress
01.02.19 17:43:27<sseehh> what are u working on lately
01.02.19 17:43:45<sseehh> i briefly checked out some of your new github projects
01.02.19 18:22:39*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
01.02.19 18:27:17*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uhyaavohlnovszfi, stoopkid: stoopkid)
01.02.19 18:27:23<dmiles> cyc: (+ 1 1)
01.02.19 18:42:32*** Quit: sseehh (~me@2601:547:501:6b0c::d442) left #logicmoo: Remote host closed the connection
01.02.19 18:45:38*** Join: sseehh (~me@2601:547:501:6b0c::d442, (unauthenticated): realname)
01.02.19 18:45:43<dmiles> cyc: (+ 1 1)
01.02.19 18:52:46<editable-dog>still playing with rdf
01.02.19 18:58:01<sseehh> https://en.wikipedia.org/wiki/Knowledge_Interchange_Format 1992
01.02.19 19:00:09<sseehh> A first public draft of RDF appeared in October 1997
01.02.19 19:03:03<sseehh> its typical. w3c will promote some protocol for social networking like activitystreams and try to convince everyone its some amazing breakthrough as best they can.  meanwhile..
01.02.19 19:03:30<sseehh> https://github.com/ontologyportal/sumo/blob/master/Communications.kif details the fine grain actions of communication in general
01.02.19 19:05:55<sseehh> http://www.adampease.org/OP/SUMO.owl
01.02.19 19:14:42<sseehh> https://arxiv.org/pdf/1810.00337.pdf For expression simplification,our approach outperforms Z3 (De Moura & Bjørner, 2008)which is the state-of-the-art theorem prover that uses ad-vanced optimization techniques (Satisfiability Modulo The-ories, SMT). For online job scheduling, under a controlledsetting, we demonstrate that our model outperforms GoogleOR-tools (Google, 2019) in terms of both speed and qual-ity of solution, and DeepRM (Mao et al.,
01.02.19 19:14:43<sseehh>  2016), a neuralnetwork predicting a holistic scheduling plan, by large mar-gins especially when more heterogeneous resources leadto more complicated scheduling. For SAT, we outperformtwo recent neural-based SAT solvers (NeuroSAT (Selsamet al., 2019) and DG-DAGRNN (Amizadeh et al., 2019))on problems with small number of variables. 
01.02.19 19:18:34<sseehh> We use expression parse trees as theinput, and employ the N-ary Tree-LSTM designed in (Taiet al., 2015) as the input encoder to compute the embeddingfor each node in the tree
01.02.19 19:50:07*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
01.02.19 20:02:04<editable-dog>yeah yeah
01.02.19 20:44:52*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
01.02.19 20:44:57<dmiles> cyc: (+ 1 1)
01.02.19 23:34:44*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Remote host closed the connection
02.02.19 00:17:41<aindilis> dmiles: ping
02.02.19 01:11:07<aindilis> dmiles: ping
02.02.19 02:31:06<aindilis> ping
02.02.19 02:32:22<aindilis> I get between 5 and 10 K queries per sec
02.02.19 02:46:05*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
02.02.19 02:46:10<dmiles> cyc: (+ 1 1)
02.02.19 02:56:51<aindilis> dmiles: which pred goes from [a,b,[c,d]] to a(b,c(d)) ?
02.02.19 02:57:00<aindilis> into_ or transform_ What?
02.02.19 02:57:33<aindilis> I'm writing wrappers now
02.02.19 02:57:39<aindilis> for larkc_cl
02.02.19 03:05:39*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
02.02.19 03:05:45<dmiles> cyc: (+ 1 1)
02.02.19 05:32:02<aindilis> dmiles: ping
02.02.19 05:56:13*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uhyaavohlnovszfi) left #logicmoo: Quit: Connection closed for inactivity
02.02.19 06:02:48<aindilis> dmiles: ping
02.02.19 07:15:00*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
02.02.19 07:15:36*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
02.02.19 07:15:41<dmiles> cyc: (+ 1 1)
02.02.19 09:37:40*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dcbrmuqxkookxevc, stoopkid: stoopkid)
02.02.19 09:37:46<dmiles> cyc: (+ 1 1)
02.02.19 10:42:44*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
02.02.19 10:42:50<dmiles> cyc: (+ 1 1)
02.02.19 11:15:18*** Quit: sseehh (~me@2601:547:501:6b0c::d442) left #logicmoo: Remote host closed the connection
02.02.19 11:15:49*** Join: sseehh (~me@2601:547:501:6b0c::d442, (unauthenticated): realname)
02.02.19 11:15:54<dmiles> cyc: (+ 1 1)
02.02.19 16:21:33*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
02.02.19 16:36:01<dmiles> from [a,b,[c,d]] to a(b,c(d)) ?
02.02.19 16:36:02<dmiles> [23:57] <aindilis> into_ or transform_ What?
                 <dmiles> [23:57] <aindilis> I'm writing wrappers now
02.02.19 16:36:05<dmiles> :)
02.02.19 16:36:30<dmiles> yeah doign such smoothing layers are good practive
02.02.19 16:37:24<dmiles> that is what i meant that most of the interface left is mostly written in prolog
02.02.19 16:37:32<dmiles> the to be done 
02.02.19 16:39:51<dmiles> https://github.com/search?q=org%3ATeamSPoon+pterm_to_sterm&type=Code
02.02.19 16:42:31<dmiles> https://github.com/search?q=org%3ATeamSPoon+sterm&type=Code    finds more minni exampler of various interfacing helpers
02.02.19 16:49:03<dmiles> [11:50] <sseehh> i want to commit my changes to CYC_.. project to a private gitlab acct
02.02.19 16:49:22<dmiles> you have an acct that allows prive projects?
02.02.19 16:49:39<dmiles> private*
02.02.19 16:50:38<dmiles> well reaanging the src pwould be fine
02.02.19 16:50:52<dmiles> it suprise you how much is used and not used
02.02.19 16:51:41<sseehh> gitlab has free private acct
                 <sseehh> and i dont know what kind of licenses im violating if i upload it somewhere
02.02.19 16:52:08<sseehh> i just took the big cyc project, without even getting it to run, and just starting rearranging stuff
02.02.19 16:52:14<dmiles> oh can mmore than one person access that 1 free freebie?
02.02.19 16:52:18<sseehh> yaeh
02.02.19 16:52:21<sseehh> with a gitlab acct
02.02.19 16:52:26<dmiles> oh that heck we are in good shape
02.02.19 16:53:12<dmiles> well so more the build arrangemnt has had to do with if a person is going to use the GUI or not
02.02.19 16:53:15<sseehh> i dont know what part is which, i guess everything from the resaerchcycgz is somehow protected by cycorp
02.02.19 16:53:18<dmiles> some*
02.02.19 16:54:05<sseehh> what i wanted to do was get a basic ABCL core running. and piece by piece load some lisp
02.02.19 16:54:08<dmiles> yeah the resaerchcycgz stuff unzipped would in some ways be so noice to keep in the repo
02.02.19 16:54:16<sseehh> in a clean project structure
02.02.19 16:54:43<sseehh> i mean if ABCL can just run with a plain build setup out of maven
02.02.19 16:54:48<dmiles> were you able do the part of the readme wher eit loads/compiles ABCL code?
02.02.19 16:54:49<sseehh> your enhanced ABCL i mean
02.02.19 16:55:02<sseehh> yeah i got thru it all and said screw it i want to see how bad i can fuck it up
02.02.19 16:55:12<sseehh> waiting for gigabytes to unzip and maxing out my 8gb ram
02.02.19 16:55:21<dmiles> i wonder if ABCL build steps are pom able
                 <sseehh> trying to compile everything after undoing the -Xmx5000
02.02.19 16:55:26<sseehh> lol
02.02.19 16:55:52<sseehh> your enhanced cyc-capable ABCL should be able to run by its own
02.02.19 16:55:56<sseehh> then on top of that start adding cyc
02.02.19 16:56:01<dmiles> yeah hard to complile wihout that 5gb
02.02.19 16:56:06<sseehh> preferably as much as possible without their licensed stuff
02.02.19 16:56:21<sseehh> there should be no reason to compile all that stuff
02.02.19 16:56:42<sseehh> its basicfally abusing the JIT by trying to store so much data as code
02.02.19 16:57:03<dmiles> right that was the desin is that hte enchanced ABCL should be able to run witheut the CYC classes 
02.02.19 16:57:34<dmiles> show me example tha tis data
02.02.19 16:57:47<sseehh> with all the build steps and mess i wasnt sure what was ABCL and what was cyc
02.02.19 16:57:50<dmiles> since there are sort of 2-3 data levels
02.02.19 16:57:56<sseehh> or larkc however that differs from cyc is not clear either
02.02.19 16:58:08<sseehh> i saw a lot of automaticaly generated java code
02.02.19 16:58:19<sseehh> and it was slowing my IDE down and must be responsible for the huge build times
02.02.19 16:59:10<dmiles> there is two cores here on in src/  and the rest in Desktop/server-q4
02.02.19 16:59:28<sseehh> yeah first thought was. ok what is quake4 doing here
02.02.19 16:59:46<sseehh> i mean there is the doom stuff too
02.02.19 16:59:58<dmiles> in src/ has a few  tranlated files (liek 20 or so)
02.02.19 17:00:34<dmiles> many started out translateb all are manitained only from java
02.02.19 17:00:47<sseehh> where do i find the latest version of your ABCL with your additions. and i want to just bulid that first
02.02.19 17:01:40<dmiles> to do tha tit would be basically building just src/
02.02.19 17:01:56<dmiles> the src/com stuff is not much added
02.02.19 17:02:13<dmiles> the src/org is ABCL by itesel;f
02.02.19 17:02:31<sseehh> ok
02.02.19 17:02:35<sseehh> ill see if i can isolate that cleanly
                 <dmiles> the problem yu'd see of course if i refernce the Descrtop/*/ in many places
02.02.19 17:02:42<sseehh> yeah that was where i started to give up
02.02.19 17:02:53<sseehh> it was going into the larkc api iirc
02.02.19 17:03:06<sseehh> or the cyc
02.02.19 17:03:11<dmiles> i stasrted to make a Desktop/*/org/logicicmoo/* that was goign to be where they met up
02.02.19 17:03:25<sseehh> whats in there
02.02.19 17:03:59<dmiles> well stuff that controls the AI parts .. sort like laughing and configureating
02.02.19 17:04:14<dmiles> lauthing/launching
02.02.19 17:04:25<sseehh> ok
02.02.19 17:04:34<sseehh> once ABCL is isolated that is one self contained layer
02.02.19 17:04:45<sseehh> then on that would be the org/logicmoo
02.02.19 17:04:51<sseehh> separate module
02.02.19 17:05:15<sseehh> once i can get those separated then ill see if org/logicmoo makes sense to me
02.02.19 17:05:16<dmiles> so here are the mildinly deascibalbe layers
02.02.19 17:05:37<dmiles> describable layers to be separated..
02.02.19 17:06:02<dmiles> Enahnched ABCL/SubL
02.02.19 17:06:16<dmiles> CYCJAVA
02.02.19 17:06:44<dmiles> Logicmoo
02.02.19 17:07:03<dmiles> JLisp(Oringal ABCL IDE)
02.02.19 17:07:18<dmiles> oops,, i soudl actualy say what these are
02.02.19 17:07:55<dmiles> AppdaperterGUI . which i almost never build
02.02.19 17:08:12<dmiles> i mena i almost never use
02.02.19 17:08:38<sseehh> is cycjava from cycorp?
02.02.19 17:08:51<sseehh> or your 3rd party cyc api
02.02.19 17:08:53<dmiles> yes thjat is the mass wad of translate files
02.02.19 17:09:07<dmiles> oh yeah then there is the NEtworkClient for CYC
02.02.19 17:09:38<dmiles>  cycjava  is the cycorp part tha tmake it CYC and not just a lisp system
02.02.19 17:10:22<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/tree/larkc/platform/Desktop/server-4q/com/cyc/cycjava/cycl
02.02.19 17:10:54<dmiles> magore constains end up gettign the file moved here https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/tree/larkc/platform/Desktop/cycjava-persistence-hacks/com/cyc/cycjava
02.02.19 17:11:00<sseehh> maybe you had the same idea but to avoid any licensing issues it should be possible to make a totally non-Cyc-containing proto-Cyc, which has the ability to load (and translate if necessary) the official cyc stuff.  but once one person loads it and connects to another instance the knowledge can evolve freely in the network
02.02.19 17:12:16<sseehh> so in a hypothetical project that does that there would be no need to download multi gb official .gz files
02.02.19 17:12:19<dmiles> well there is no KR based code without CYCJAVA
02.02.19 17:12:34<sseehh> right that would be the separation
02.02.19 17:13:07<sseehh> imagine taking all the cyc kb run it thorugh nars for a few days and then is that still cyc?
02.02.19 17:13:16<sseehh> i dont know how you could prove it is anything
02.02.19 17:13:25<sseehh> that goes on a p2p network
02.02.19 17:13:34<dmiles> yeah it separates OK there it would not be hard for me to have the 10 differnt require CYCJAVA refs be having CYCJAVA come back and register based on interfaces
02.02.19 17:14:20<sseehh> any special building and configuring etc it shouldnt boil down to more than a plain pom.xml .. the systme once running hsould be relied on anything else
02.02.19 17:14:30<sseehh> so even without any Cyc stuff it should manage to do that
02.02.19 17:14:42<sseehh> whether its ABCL at the core, whether Sxx needs to be a component of that too
02.02.19 17:14:44<sseehh> etc
02.02.19 17:14:52<dmiles> you do see though that there is no KB as part of CYCJAVA
02.02.19 17:15:06<dmiles> (the CYCJAVA contains no data)
02.02.19 17:15:12<sseehh> i didnt track how much of the resarchgz was actually used
02.02.19 17:15:25<sseehh> but what i did see still looked sort of kb-ish
02.02.19 17:15:28<dmiles> (all the data comes for the researchcyctgz)
02.02.19 17:15:40<dmiles> right it sorta will still look KBish
02.02.19 17:15:45<sseehh> yes so what is in platform and why that had to come from resaerchgz isnt clear
02.02.19 17:15:51<dmiles> since that code hasks the KB
02.02.19 17:16:10<dmiles> that code does runtime hacking of the KB
02.02.19 17:16:28<sseehh> why is that necessar?
02.02.19 17:16:31<dmiles> platform is the 59million assertion
02.02.19 17:16:35<dmiles> s
02.02.19 17:16:47<dmiles> oops
02.02.19 17:17:05<dmiles> tgz is the 59mil assertions
02.02.19 17:17:22<dmiles> cycjava is only maybe 8k asserions
02.02.19 17:17:41<sseehh> right and cycjava is that all handwritten or is it translated from something else like lisp
02.02.19 17:18:01<dmiles> it all translated from lisp that is not anywhere
02.02.19 17:18:05<sseehh> because even if it's java im still thinking its something that should possibly be stored as non-java data
02.02.19 17:18:07<dmiles> not even in the tgz
02.02.19 17:18:19<sseehh> ok so some special lisp source is what they use to generate it
02.02.19 17:18:31<sseehh> but in theory you could reverse generate the lisp from it?
02.02.19 17:18:42<dmiles> yeah that lisp is the closed source "crown jewel" of cycorp
02.02.19 17:18:50<sseehh> yeah i figured it was something like this
02.02.19 17:18:51<dmiles> in theory yes
02.02.19 17:19:04<sseehh> so im saying to revrse that then use that to load the rest of the data
02.02.19 17:19:19<sseehh> its not like its obfuscated or anything
02.02.19 17:19:35<dmiles> yeah that can be tranalated back to the Lisp
02.02.19 17:19:43<sseehh> then all that java code would disappear
02.02.19 17:19:50<sseehh> leaving only the core java stuff
02.02.19 17:20:05<dmiles> yes
02.02.19 17:20:32<dmiles> just relaize all of that is lisp code and none lisp data
02.02.19 17:20:56<dmiles> meaning we still ahve to run it.. but that is what the codre does
02.02.19 17:21:11<sseehh> yeah the ABCL stuff once super optimized
02.02.19 17:21:15<sseehh> should be the ideal thing for it
02.02.19 17:21:33<dmiles> only reason meanng tha tit being lisp code it is not any CYC KB
02.02.19 17:21:53<dmiles> i mean the only reason i say that
02.02.19 17:22:04<sseehh> yeah its cyc kernel or whatever
02.02.19 17:22:50<dmiles> i am goign to make a google doc decribing the layers 
02.02.19 17:23:09<sseehh> its like a vendor lockin they are doing
02.02.19 17:23:12<sseehh> by using that generated .java
02.02.19 17:23:26<sseehh> they figure it is so much code who is going to be able to do anything else with it
02.02.19 17:23:43<sseehh> that it has to be treated as one monolithic cyc-specific requiremnet for cyc
02.02.19 17:23:59<sseehh> which being so complex also discourages modification
02.02.19 17:24:21<sseehh> and why the pure lisp version is more valuable
02.02.19 17:24:22<dmiles> yeah
02.02.19 17:24:34<sseehh> using java to obfuscate lisp essentialy
                 <dmiles> part of the came with LArkc
02.02.19 17:24:50<dmiles> LarKC is all teranslated lisp code
02.02.19 17:28:07<dmiles> somethings do need to be included with the non-cyc core layers
02.02.19 17:28:34<dmiles> but all that is alreayd in .lisp
02.02.19 17:29:04<dmiles> i run the system independant of CYC quite often
02.02.19 17:29:57<sseehh> what is jpl7
02.02.19 17:30:09<dmiles> what would pprobly make sense though is that there is a pre-ABCL module 
02.02.19 17:30:17<sseehh> is that replaced by Sxx
02.02.19 17:30:28<dmiles> yep jpl7 is a part of a pre-abcl module
02.02.19 17:30:43<sseehh> pre meaning what
02.02.19 17:31:05<dmiles> all the things that written that hacked version of ABCL depends on
02.02.19 17:31:19<sseehh> why does abcl depend on prolog?
02.02.19 17:31:48<dmiles> is the system when using proog runs too slow if i am marchaing back and forth
02.02.19 17:32:18<dmiles> i mean the ABCL system part without prolog would have too slow an interface to prolog
02.02.19 17:32:31<dmiles> i;ll give an exmap,e.
02.02.19 17:32:49<dmiles> soi you have a Prolog List of Prolgo Atoms
02.02.19 17:33:11<dmiles> and that is going to call a lisp function that will return prolog
02.02.19 17:33:14<sseehh> ok so it is prolog features invoked from abcl
02.02.19 17:33:33<sseehh> prolog functions
02.02.19 17:33:56<sseehh> but is Sxx intended to replace jpl7 
02.02.19 17:34:01<dmiles> it is so that both systems are made up of the same datatypes
02.02.19 17:34:19<sseehh> ok tha tmight be good to consider the combination of abcl and prolog as something separate from abcl
02.02.19 17:34:22<dmiles> yes Sxx will replace JPL7
02.02.19 17:34:28<sseehh> is it ready to do that now
02.02.19 17:34:31<sseehh> or is somethign missing
02.02.19 17:35:37<sseehh> why not just move ABCL into Sxx
                 <dmiles> well SxxProlog just needs slightly more love.. it might be dine wher ei left it yesterdayt
02.02.19 17:35:51<dmiles> it might be fine where i left off yesterday.. but i need rto confirm
02.02.19 17:35:56<sseehh> no rush
02.02.19 17:35:59<dmiles> that everytring still runs
02.02.19 17:36:23<dmiles> but CYC JRTL is ready for you to hack on
02.02.19 17:36:31<sseehh> seems unifying ABCL with Sxx is the way to go and then build everything off that
02.02.19 17:36:52<dmiles> yeah .. actualyt very right
02.02.19 17:36:54<sseehh> yeah but i down know what JRTL does, or at least supposed to do
02.02.19 17:37:09<sseehh> i could care less how cyc actually designed their vendor lockin garbage
02.02.19 17:37:12<dmiles> Sxx would become part of the JRTL
02.02.19 17:37:28<sseehh> i know there is a better architecture here
02.02.19 17:37:42<sseehh> so theres reallly no need to keep using their terminology if it isnt clear
02.02.19 17:37:46<sseehh> it just more of their strategic obfuscation
02.02.19 17:37:54<dmiles> JRTL = ABCL + SubLisp + Sxx
02.02.19 17:38:03<dmiles> ABCL and SubLisp cant be speparated
02.02.19 17:38:51<dmiles> since basically i delete 50% of rthe ABCL cod eand 50% of the SubLisp code and tha tis the JRTL
02.02.19 17:39:28<dmiles> SubvL and ABCL have separate codebases that are linked agaisnt them
02.02.19 17:40:06<dmiles> meaning there are jar files that are already compiled agaisnt them all over the itnernet
02.02.19 17:40:19<dmiles> some are open and closed src
02.02.19 17:40:41<sseehh> which shouldt be a problem if the reverse thing is possible
02.02.19 17:40:58<sseehh> it wont actually need to run such jars if they just contain the important data
02.02.19 17:41:00<dmiles> with a class transformer perhaps
02.02.19 17:41:15<sseehh> runtime reflection or non-runtime class transformer, both would work
02.02.19 17:41:32<sseehh> something like classgraph might be sufficient
02.02.19 17:41:38<dmiles> for ecxmaple the cyc.jar that swamps uses
02.02.19 17:41:39<sseehh> it doesnt actually load the classes into java but works on them
02.02.19 17:41:52<sseehh> https://github.com/classgraph/classgraph/wiki
                 <dmiles> we want that to continue to work
02.02.19 17:42:40<dmiles> his cyc.jar is from a diffenrt version that he has licience rights to
02.02.19 17:43:26<dmiles> but anyhow this is pretty minoir it works now
02.02.19 17:43:45<dmiles> just giving that working trhat wahtever we move we need to convirm it didnt break it
02.02.19 17:44:00<dmiles> or we have in place the trsnaform
02.02.19 17:44:14<dmiles> so we are free to move the things we want
02.02.19 17:44:57<dmiles> all the prelinked ABCL stuff is distrubited via source
02.02.19 17:45:12<sseehh> what is cyc-tiny
02.02.19 17:45:18<dmiles> but the compiler in many cases has hardcode classnames
02.02.19 17:45:43<dmiles> cyc-tiny is a KB that on cyc.jar loads .. that is the 8k assertions verionb fo CYC
02.02.19 17:46:04<dmiles> that one cyc.jar loads
02.02.19 17:46:07<sseehh> sounds like something i could load into nars
02.02.19 17:46:15<dmiles> the one nornally distributed larkc
02.02.19 17:46:27<dmiles> yeah we want to get that the be our KB
02.02.19 17:46:39<dmiles> the problem is it was made for a partucalr cyc.jar 
02.02.19 17:46:57<dmiles> that we need to make sure our cyc.jar is able to load
02.02.19 17:47:17<sseehh> its binary files what is it supposed to look like
02.02.19 17:47:20<sseehh> like is it lisp
02.02.19 17:47:55<dmiles> yes it is a mixes of seriozed JRTL mixed with some Lisp
02.02.19 17:48:27<dmiles> oops li lie
02.02.19 17:48:33<dmiles> yes it is a mixes of seriozed JRTL mixed with CYCKB content
02.02.19 17:48:55<sseehh> ./unused/old-CVS/opencyc/oracle/oracle-opencyc.jar,v
                 <sseehh> ./unused/old-CVS/opencyc/org/opencyc/oracle/Attic/oracle-opencyc.jar,v
                 <sseehh> ./www/htdocs/java/fet/lib/OpenCyc.jar
                 <sseehh> ./www/htdocs/java/gke2/lib/OpenCyc.jar
                 <sseehh> ./www/htdocs/java/ql/lib/OpenCyc.jar
02.02.19 17:48:56<sseehh> ./www/htdocs/java/script-editor/lib/OpenCyc.jar
02.02.19 17:49:02<dmiles> actually really we need ot have  CYCJAVA-EasyPeasy and CYCJAVA-TheREst
02.02.19 17:49:17<sseehh> can any of these OpenCyc.jar access cyc-tiny
02.02.19 17:49:27<dmiles> nope
                 <sseehh> like if i want to see what it looks like
02.02.19 17:49:34<sseehh> what does OpenCyc.jar do
02.02.19 17:49:36<dmiles> ohj what tha tlooks like is.. 
02.02.19 17:49:47<dmiles> OpenCyc.jar is the thin network client to CYC
02.02.19 17:49:59<sseehh> lol would be nice to have named it cyc-client.jar
02.02.19 17:50:15<sseehh> what .jar loads it
02.02.19 17:50:17<sseehh> tinycyc
02.02.19 17:50:37<sseehh> if i wanted to make a tiny-cyc explorer
02.02.19 17:50:57<dmiles> ok i hava the sourc ethat loads tiny .. i havent commeted that since it is of course totalyl incomable with what loads now
02.02.19 17:51:07<dmiles> but i think it is important that we have it there to be diffing off of
02.02.19 17:51:23<sseehh> so tiny-cyc is replaced by newer-tiny-cyc somewhere else?
02.02.19 17:51:39<dmiles> nope which sucks
02.02.19 17:51:55<dmiles> so we bascially have to backport 
02.02.19 17:52:26<dmiles> what it means is we java to take the two codebases and find a comprisimes to what the 2nd codebase does
02.02.19 17:52:36<sseehh> so tiny-cyc is a necessary core component. but the java code that reads it isnt commited because its incompatible with what?
02.02.19 17:52:53<sseehh> lol
02.02.19 17:52:56<dmiles> incompable with cyc-large
02.02.19 17:53:07<dmiles> so ther eare two CYCJAVAs
02.02.19 17:53:12<sseehh> but cyc-large contains the equivalent of tiny-cyc? so tiny cyc itself isnt whats necessar
02.02.19 17:53:24<sseehh> but you have it here for reference
02.02.19 17:53:48<dmiles> yes cyc-large has all of cyc-0tiny 
02.02.19 17:53:54<sseehh> ok that makes sense
02.02.19 17:53:59<sseehh> is it possible to get a new cyc-tiny from cyc-large
02.02.19 17:54:23<dmiles> our goal ios to allow the cyclarge codebase to load cyc-tiny data
02.02.19 17:54:43<dmiles> it would take me a day to make that possible
02.02.19 17:55:10<dmiles> it really is what i want even
02.02.19 17:55:13<sseehh> yeah no rush im just suggesting possible critical paths towards something substantial
02.02.19 17:55:42<dmiles> if we do that .. we can be totally liceince free of cycorp
02.02.19 17:56:02<sseehh> yeah and running no obfuscated cyc java code
02.02.19 17:56:39<dmiles> oh that code would still need to be ran .. but at least i feel that code is lience free 
02.02.19 17:56:40<sseehh> not that its actually obfuscated. but the packaging is to me
02.02.19 17:56:52<dmiles> what is not licence free is the KB that we load now
02.02.19 17:57:19<dmiles> the TGZ KB is what requires the licence
02.02.19 17:57:38<dmiles> the CYCTINY = no licence licence
02.02.19 17:57:44<sseehh> anything here relevant https://github.com/cycorp ?
02.02.19 17:57:48<dmiles> but small isse
02.02.19 17:58:03<sseehh> model-generator-suite
                 <sseehh> Automated generation of Java APIs from Cyc KB terms. 
02.02.19 17:58:37<sseehh> https://github.com/cycorp/api-suite/blob/master/LICENSE apache
02.02.19 17:58:46<sseehh> https://github.com/cycorp/common-libraries/blob/master/LICENSE apache
02.02.19 17:58:54<sseehh> same for model geneator suite
02.02.19 17:58:58<dmiles> thats kind of cool.. that code uses the thin network client
02.02.19 17:59:42<dmiles> the only sad thing about that code is that user of it have to talk to CYUC over the wire
02.02.19 18:00:02<dmiles> but it shows how CycL is as programmatic as Java
02.02.19 18:00:09<dmiles> can be so
02.02.19 18:00:30<dmiles> its kind of like RDFReactor
02.02.19 18:00:48<dmiles> that your KB creastes java abstract classes
02.02.19 18:00:58<sseehh> right
02.02.19 18:01:36<dmiles> thats another thing https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/tree/larkc/platform/Desktop/opencyc-jsrc
02.02.19 18:01:55<dmiles> that is the OpenCyc.jar that at least can be ina  separate repo
02.02.19 18:02:36<dmiles> *but* one future project is to make it not a think client but a wrapper over the real server objwects
02.02.19 18:03:03<dmiles> *but* one future project is to make it not a thin-client but an wrapper that no longer uses RMI 
02.02.19 18:03:39<sseehh> how does cycorp expect anyone to trust cyc to do anything serious if their kb, especially not the tiny-cyc core of it is not open
02.02.19 18:03:44<dmiles> (think of thin-client like a very crippled RMI)
02.02.19 18:04:31<dmiles> hah i know .. really
02.02.19 18:04:42* dmiles gives oyu a link to its source thoujgh
02.02.19 18:05:20<dmiles> https://raw.githubusercontent.com/TeamSPoon/logicmoo_base/master/prolog/logicmoo/plarkc/logicmoo_u_cyc_kb_tinykb.pl
02.02.19 18:05:33<sseehh> To inquire about a getting a license for a supported Cyc server, please fill out the following form. For information on the different Cyc platforms, visit here. 
02.02.19 18:05:35<sseehh> dead link
02.02.19 18:05:43<sseehh> so i cant even read the license
02.02.19 18:05:49<sseehh> without applying for it?
                 <sseehh> lol
02.02.19 18:06:04<dmiles> nope
02.02.19 18:06:10<dmiles> hehe
02.02.19 18:06:43<dmiles> the problem with all this there is some technology that will dies with cycorp
02.02.19 18:06:56<dmiles> the problem with all this there is some technology that will die with cycorp in 3-4 years
02.02.19 18:07:08<dmiles> when Lenat dies .. etc
02.02.19 18:07:16<dmiles> so dumb
02.02.19 18:07:29<dmiles> and it not the KB 
02.02.19 18:07:32<sseehh> https://www.crunchbase.com/organization/cycorp#section-overview
02.02.19 18:07:46<sseehh> Jul 20, 2017	
                 <sseehh> Logo of Venture Round - Cycorp
                 <sseehh> Venture Round - Cycorp
                 <sseehh> 	—	$10M	— 
02.02.19 18:08:02<sseehh> Cycorp has $4.5M in revenue annually. Cycorp competes with Bonsai, Inbenta, and Next IT.
02.02.19 18:08:21<dmiles> crap nevermind Cyril will keep it locked up
02.02.19 18:08:58<dmiles> i didnt realize Lenat is alreayd getting ready to die
02.02.19 18:09:08<dmiles> (passed it onto Cyril)
02.02.19 18:09:22<aindilis> who is Cyril?
02.02.19 18:09:38<sseehh> Trusted. Transparent.
                 <sseehh> Actually Intelligent.
                 <aindilis> ah I see the link
02.02.19 18:09:44<sseehh> lol
02.02.19 18:10:02<dmiles> i never heard of Cyril before today eitehr
02.02.19 18:10:24<dmiles> looks like some beancounter who knows nontinbgn about CYC
02.02.19 18:11:04<dmiles> why not leave it to Goolsbey!
02.02.19 18:11:07<dmiles> or me!
02.02.19 18:11:13<sseehh> or everyone
02.02.19 18:11:22<sseehh> it is just bits after all
02.02.19 18:11:28<sseehh> that can be copied for free
02.02.19 18:12:01<sseehh> unless there is some secret hardware involved
02.02.19 18:13:11<sseehh> i mean if i got the research.tgz run it, will it work entirely offline?
02.02.19 18:21:19<sseehh> how much of SUMO could replace tiny-cyc
02.02.19 18:21:25<sseehh> like anything in merge or mid-level
                 <dmiles> the tgz was desinged to be access over the thin-client
02.02.19 18:21:47<sseehh> https://github.com/ontologyportal/sumo/blob/master/tinySUMO.kif at least lol
02.02.19 18:22:01<dmiles>  tiny-cyc ~= sumo topleve only
02.02.19 18:22:10<dmiles> you say my linik to the contents of TinyKB?
02.02.19 18:22:32<sseehh> no didnt see the link
02.02.19 18:22:36<dmiles> tiny-cyc = sumo missing mid-level and belweow
02.02.19 18:22:40<sseehh> oh i see it
02.02.19 18:22:45<dmiles> https://raw.githubusercontent.com/TeamSPoon/logicmoo_base/master/prolog/logicmoo/plarkc/logicmoo_u_cyc_kb_tinykb.pl
02.02.19 18:22:50<dmiles> tha tis the data of tiny-kb
02.02.19 18:23:12<sseehh> what if sumo top level is beter than tiny cyc?
02.02.19 18:23:17<sseehh> thanks
02.02.19 18:23:21<dmiles> its abotu the same
02.02.19 18:23:32<dmiles> oh actualyl cyc-tity is a bit better
02.02.19 18:23:46<dmiles> cyc-tiny is about the rule impl rules
02.02.19 18:24:09<dmiles> erm cyc-tiny is an empty KB
02.02.19 18:24:14<sseehh> well i dont evne know what i mean by beter
02.02.19 18:24:18<dmiles> (jsut contains enought to set up the code)
02.02.19 18:24:36<dmiles> exactlyAssertedEL_first(isa, equiv, 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
                 <dmiles> exactlyAssertedEL_first(isa, equiv, 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
02.02.19 18:24:37<dmiles> exactlyAssertedEL_first(isa, equalSymbols, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
02.02.19 18:24:38<dmiles> exactlyAssertedEL_first(isa, equalSymbols, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
02.02.19 18:24:51<sseehh> like, if tiny cyc is contained in sumo. then what can i do with tiny cyc that i cant in sumo
02.02.19 18:24:56<sseehh> is what im wondering
02.02.19 18:25:12<dmiles> brb
02.02.19 18:25:53<sseehh> here bigger is likely not better. i expect a smaller set of assertions to have more potential
02.02.19 18:26:36<dmiles> well they are both designed to describe the builtins of the langauge
02.02.19 18:27:39<dmiles> they are both promises of "these predicates will always work in our infenrce engines"
02.02.19 18:28:22<dmiles> cyc-tiny described the bootstreap KR
02.02.19 18:28:26<dmiles> well they both do
02.02.19 18:29:15<dmiles> cyc doesnt have anyhitng like MILO (sumo midlevel) unless you consider that is opencyc
02.02.19 18:29:47<sseehh> did you ever hear of IEML
02.02.19 18:29:58<dmiles> why i dont like SUMo as much.. is...
02.02.19 18:30:08<sseehh> i consider it an upper level ontology but it isnt described that way
02.02.19 18:30:18<dmiles> exactlyAssertedEL_first(isa, argsQuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
                 <dmiles> exactlyAssertedEL_first(isa, argsQuotedIsa, 'ArgQuotedIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
02.02.19 18:30:19<dmiles> exactlyAssertedEL_first(isa, argSometimesIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
                 <dmiles> exactlyAssertedEL_first(isa, argSometimesIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
02.02.19 18:30:54<dmiles> these are secret hidden axioms for sumo
02.02.19 18:31:07<dmiles> adam left them out because he didnt want to make users have to think
02.02.19 18:31:25<sseehh> ive seen quoted arguments in sumo
02.02.19 18:31:37<sseehh> no idea what the others are
02.02.19 18:31:56<dmiles> exactlyAssertedEL_first(isa, completelyEnumerableCollection, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
                 <dmiles> exactlyAssertedEL_first(isa, completelyDecidableCollection, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
                 <dmiles> exactlyAssertedEL_first(isa, completeExtentEnumerableViaBackchain, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
02.02.19 18:31:57<dmiles> exactlyAssertedEL_first(isa, completeExtentEnumerableViaBackchain, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
                 <dmiles> exactlyAssertedEL_first(isa, completeExtentEnumerableForValueInArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
02.02.19 18:31:58<dmiles> exactlyAssertedEL_first(isa, completeExtentEnumerableForArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
02.02.19 18:32:16<dmiles> those 4 are much better exmaples
02.02.19 18:32:30<sseehh> so these are like meta-predicates
02.02.19 18:32:31<sseehh> ?
02.02.19 18:32:48<dmiles> yes that allow users to hack the heuristics of the infenrce engine
02.02.19 18:33:16<dmiles> "completeExtentEnumerableViaBackchain" means .. not just facts but "try hard"
02.02.19 18:33:31<sseehh> ok i see
02.02.19 18:33:54<dmiles> DefaultMonotonicPredicate means these will not be overridden even with iherirtance
02.02.19 18:34:25<dmiles> (and means that LEM is legal there)
02.02.19 18:34:40<sseehh> well SUMO doesnt have a specific engine that it runs on
                 <dmiles> Law of excluded middle
02.02.19 18:34:45<sseehh> so i can understand why that isnt relevant to sumo
02.02.19 18:35:08<sseehh> but it could certainly be added to sumo when run on whatever engine uses them
02.02.19 18:35:36<dmiles> exactly and i agree with you about that
02.02.19 18:35:47<sseehh> sumo webapp is using eprover
02.02.19 18:35:55<sseehh> but i dont know much about eprover
02.02.19 18:36:14<sseehh> since sumo doesnt seem to be designed to actually 'do' anything either
02.02.19 18:36:17<dmiles> jsut the prioblem is that i have even fouind many cases we need that extra levle of experessivensss to describe the the AI how incomplete we were being whenb we said stuff
02.02.19 18:36:30<sseehh> like when i asked adam p about whether someone had made goals out of sumo he said no which surprised me
02.02.19 18:37:07<sseehh> when you mention controlling the power level of the backchaining, in nars that is somewhat controlled by budgeting
02.02.19 18:37:15<dmiles> like i need to tell the AI that i am only partialy complete with some ruile
02.02.19 18:37:17<sseehh> but it is still a problem left to the user
02.02.19 18:37:20<sseehh> so its the same thing
02.02.19 18:37:46<dmiles> sometimes a user knows exactly what they need nars to do and not tink about
02.02.19 18:38:22<dmiles> and tell nars what not think about using the attention mechanism
02.02.19 18:38:30<sseehh> of course the goal is to let these decisions be decided by nars
02.02.19 18:38:47<sseehh> but in development a user still decides
02.02.19 18:38:53<dmiles> (since despite it would work even with the user not telling nars)
02.02.19 18:39:33<sseehh> in game playing for example there is a chocie of how much one sensor prioritized over another
02.02.19 18:39:38<sseehh> and that this is like mixing audio signals
02.02.19 18:39:56<sseehh> there is not necessarily a correct or optimal way but it becomes an aesthetic
02.02.19 18:40:23<sseehh> and how it adjusts the mix in response to cognition
02.02.19 18:40:27<sseehh> it must be decided in realtime
02.02.19 18:40:58<sseehh> https://dictionary.ieml.io/#/
02.02.19 18:41:09<dmiles> you might for instance want to suddenly turn off a sensor as a user sinc it isnt used in some config
02.02.19 18:41:20<sseehh> https://pierrelevyblog.com/my-research-in-a-nutshell/the-basics-of-ieml/
02.02.19 18:41:26<sseehh> yeah and i hit a gui button for that now
02.02.19 18:41:47<sseehh> or a slider
02.02.19 18:42:43<sseehh> ieml is really quite different from sumo, cyc etc
02.02.19 18:42:48<dmiles> its not a very scaled attention process that happens when the botton is pressed
02.02.19 18:43:12<sseehh> toggling a button could completely deactivate a plugin
02.02.19 18:43:21<sseehh> while adjusting a slider can control priority or a time frequency
02.02.19 18:43:49<sseehh> https://www.dropbox.com/s/wtt6jpp1hc88x98/00-0-0-semantic-sphere-1-1.pdf?dl=0 ebook
02.02.19 18:43:51<dmiles> the language of prlugin deactivation is a language that we'd want nars to speak
02.02.19 18:44:02<sseehh> yeah and it can if it just Opjects itself
02.02.19 18:44:08<sseehh> which is 1 line of java
02.02.19 18:44:24<sseehh> but thats just asking for trouble
02.02.19 18:44:33<sseehh> more likely we want to define a limited interface for doing that
02.02.19 18:44:35<sseehh> at least at first
02.02.19 18:44:37<sseehh> and to proxy through that
02.02.19 18:44:40<dmiles> well nares is a btton masher :P
02.02.19 18:44:43<sseehh> right
02.02.19 18:44:54<sseehh> and it needs to be until we show another nars what happens when another nars executes System.exit
02.02.19 18:45:34<sseehh> out of curiosity
                 <dmiles> right
02.02.19 18:45:47<dmiles> oh btw is https://www.dropbox.com/s/wtt6jpp1hc88x98/00-0-0-semantic-sphere-1-1.pdf?dl=0%20ebook  wher ethr e term AIKR is defined?
02.02.19 18:46:01<sseehh> AIKR = assumption of insufficient knowledge resource
02.02.19 18:46:08<sseehh> that is defined in pei wang's books ill link in a sec
02.02.19 18:46:11<sseehh> this is something entirely differn
02.02.19 18:46:19<sseehh> IEML is pierre levy's
02.02.19 18:46:30<sseehh> https://sites.google.com/site/narswang/EBook/Chapter2/section-2-1-intelligence-defined
02.02.19 18:46:43<sseehh>      Intelligence, as the experience-driven form of adaptation, is the ability for an information system to achieve its goals with insufficient knowledge and resources. 
02.02.19 18:47:21<sseehh> IEML doesnt call itself an ontology certainly not an upper-level ontology.  but i think it can be thought of as one
02.02.19 18:47:34<sseehh> whats special is it is formed from a really really upper level ontology
02.02.19 18:47:38<dmiles> cyc was funded expecting IEML
02.02.19 18:48:10<dmiles> but Lenat scammed pretending it was for soemtinbg else
02.02.19 18:48:25<sseehh> There are
                 <sseehh> obviously 2
                 <sseehh> 6
                 <sseehh> ,
                 <sseehh> i.e. 64, distinct subsets of the set of six primitives T, B,
02.02.19 18:48:27<dmiles> finnaly peopel got tired of telling him to get back on track
                 <sseehh> S, A, U and E. At layer 0, there are 64 – 1 =
02.02.19 18:48:29<sseehh> 63 meaningful id
02.02.19 18:48:31<sseehh> eographic characters.
02.02.19 18:48:33<sseehh> The number 63 corresponds to
02.02.19 18:48:35<sseehh> the
02.02.19 18:48:37<sseehh> set of parts
02.02.19 18:48:39<sseehh> of
02.02.19 18:48:41<sseehh> the set of primitives minus the null
02.02.19 18:48:43<sseehh> set. The null set – to be distinguished from the primitive “empty” – is only used for
02.02.19 18:48:45<sseehh> operations: it has no interpretation in the dictionary. At layer 1 (the first triplication),
02.02.19 18:48:47<sseehh> there are 63
02.02.19 18:48:51<sseehh> 3
02.02.19 18:48:53<sseehh> , i.e. more than 250,047 di
02.02.19 18:48:55<sseehh> stinct semantic sequences. At layer 2 (the
02.02.19 18:48:57<sseehh> second triplication), there are 63
02.02.19 18:48:59<sseehh> 9
02.02.19 18:49:01<sseehh> ,
02.02.19 18:49:03<sseehh> or 15,633,814,156,853,823 sequences. At layer 3
02.02.19 18:49:05<sseehh> (after three triplications), we get 63
02.02.19 18:49:07<sseehh> 27
02.02.19 18:49:09<sseehh> sequences, which gives
02.02.19 18:49:11<sseehh> 3,821,156,589,287,986,284,580,441,367,887,410,055,869,435,352,767 distinct semantic
02.02.19 18:49:13<sseehh> sequences.
02.02.19 18:49:15<sseehh> At layer 4, we get 63
02.02.19 18:49:17<sseehh> 81
02.02.19 18:49:21<sseehh> distinct semantic sequences, which gives
02.02.19 18:49:23<sseehh> 12
02.02.19 18:49:25<sseehh> ,913,993,997,549,750,548,748,951,390,525,129,485,166,487,876,965,953,696,70
02.02.19 18:49:27<sseehh> 1,312,933,401,663. Layer 5 is made up of 63
02.02.19 18:49:29<sseehh> 243
02.02.19 18:49:31<sseehh> distinct sequences, and layer 6 of
02.02.19 18:49:33<sseehh> 63
02.02.19 18:49:35<sseehh> 729
02.02.19 18:49:37<sseehh> distinct sequences.
02.02.19 18:50:06<sseehh> http://www.akasig.org/2008/05/14/pierre-levy-vs-tim-berners-lee-round-01/ haha
02.02.19 18:50:13<dmiles> in you opinion is ythat good or bad in nars?
02.02.19 18:50:33<dmiles> the exmaple when nars is working ion such aproblem
02.02.19 18:51:01<sseehh> what is good or bad?
02.02.19 18:51:44<dmiles> "distinct subsets of the set of six primitives" setup
02.02.19 18:52:08<dmiles> teh dealing with a problem that works out by creation of that setup
02.02.19 18:52:14<sseehh> this isnt a good explanation of ieml
02.02.19 18:52:20<sseehh> trying to put it into words
02.02.19 18:52:27<sseehh> im not saying ieml is necessarily useful
02.02.19 18:52:35<sseehh> but that its design is intersting to compare with something like sumo/cyc
02.02.19 18:52:54<sseehh> im trying to find this one ieml dictionary pdf 
02.02.19 18:53:09<sseehh> basically there are several layers
02.02.19 18:53:23<sseehh> layer 0 has 2 states: virtual and actual
02.02.19 18:53:38<sseehh> actual=exists, virtual=doesnt exist
02.02.19 18:53:45<sseehh> layer 1.. i forget  2 i forget all of them
02.02.19 18:53:55<sseehh> but there is a finite number of these and they define a coordinate for a concept
02.02.19 18:53:59<sseehh> and he mapped them all out
02.02.19 18:54:06<sseehh> and what they cover is pretty comprehensive
02.02.19 18:54:22<dmiles> see my belief is that IEML is founded on the same principle that Lenat was paid ot make CYC use
02.02.19 18:54:49<sseehh> in english and french
02.02.19 18:55:13<sseehh> no IEML is like a research project by one pofessor
02.02.19 18:56:33<sseehh> https://www.researchgate.net/publication/281686083_IEML_Grammar/download
02.02.19 18:56:35<sseehh> still not it
02.02.19 18:56:38<sseehh> but ill look a bit more
02.02.19 18:56:40<sseehh> its this one pdf
02.02.19 18:56:43<sseehh> that is juts charts
02.02.19 18:57:10<dmiles> Information Economy MetaLanguage  simular to RLL (Representation Language Language), heuristic creation and modification became much simpler.
02.02.19 18:57:48<dmiles> but yeah differnt
02.02.19 18:58:10<sseehh> https://iemldev.github.io/ieml-dictionary
02.02.19 18:58:36<sseehh> E: 	Seme 	Auxiliary 	emptiness, illusion, monad
                 <sseehh> U: 	Seme 	Verb 	virtual
                 <sseehh> A: 	Seme 	Verb 	actual
                 <sseehh> S: 	Seme 	Noun 	sign
                 <sseehh> B: 	Seme 	Noun 	being
02.02.19 18:58:37<sseehh> T: 	Seme 	Noun 	thing
02.02.19 18:58:39<sseehh> O: 	Paradigm 	Verb 	process, verb, dyad
                 <dmiles> neat though that is perfecrtly finite
02.02.19 18:58:41<sseehh> M: 	Paradigm 	Noun 	representation, noun, triad
02.02.19 18:58:43<sseehh> F: 	Paradigm 	Noun 	fullness | form | pentad | dyad/pentad dialectic
02.02.19 18:59:09<sseehh> i.y.- 	Seme 	Verb 	compute
02.02.19 18:59:10<sseehh> s.a.-t.a.-f.o.-' 	Seme 	Noun 	computer scientist
                 <sseehh> t.e.-t.u.-wa.e.-' 	Seme 	Noun 	computer science | software engineering (skill)
                 <sseehh> d.i.-b.i.-' 	Seme 	Noun 	computer
02.02.19 18:59:23<sseehh> the symbols at the beginning are like a coordinate
02.02.19 18:59:25<sseehh> for the concept
02.02.19 18:59:32<sseehh> when i searched for computer these 4 came up
02.02.19 18:59:56<sseehh> some of the coordinates are shorter which means they are at a higher level or closer to the center of the sphere
02.02.19 19:00:03<sseehh> higher level category
02.02.19 19:00:24<sseehh> while longer coordinates are more specific
02.02.19 19:01:06<dmiles> i see
02.02.19 19:01:23<sseehh> https://iemldev.github.io/ieml-dictionary/scripts/d.i.-b.i.-'.html
02.02.19 19:01:34<dmiles> i thick this is what we immaigne that every KR should secretly be even
02.02.19 19:01:39<dmiles> think*
02.02.19 19:01:53<sseehh> if yo uclick on table here this is what i was trying to find osmething like
02.02.19 19:02:01<dmiles> secretly be making happen even when we dont see it
02.02.19 19:02:03<sseehh> https://iemldev.github.io/ieml-dictionary/scripts/M_M_.i.-M_M_.i.-E_.-+t.u.-'.html
02.02.19 19:02:31<sseehh> the table of this concept is like a hyperplane slice of 2 coordinates
02.02.19 19:03:02<sseehh> so all the points are ontologically connected
02.02.19 19:03:14<sseehh> and symmetric
02.02.19 19:03:33<dmiles> yeah and from those points are where things dangle from
02.02.19 19:03:35<sseehh> yeah i think we just dont know how ot use something like IEML yet it is so advanced
02.02.19 19:04:02<sseehh> you can see why this contrasts so differently with the RDF vision
02.02.19 19:04:19<sseehh> because if everything can be descried in such a way what is the point of all the other ontologies
02.02.19 19:04:23<sseehh> not saying that it can,
02.02.19 19:04:39<sseehh> but that it is just an example of a really comprehensive symmetric ontology
02.02.19 19:05:25<dmiles> one ontology does start to move twoards this.. it is perfectly symetrical this way to is DOLCE
02.02.19 19:05:38<sseehh> https://iemldev.github.io/ieml-dictionary/scripts/M_M_.i.-n.i.-'.html
02.02.19 19:06:17<sseehh> ill check out dolce never heard of it
02.02.19 19:06:31<dmiles> i translated it into KIF here:  https://github.com/TeamSPoon/logicmoo_base/blob/master/prolog/logicmoo/plarkc/logicmoo_u_dolce_2_1.kif
02.02.19 19:07:18<dmiles> i mena i took there KIF and instead o makeing it....
02.02.19 19:07:47<dmiles> E:E:U: E:E:A:.	E:E:S:.
02.02.19 19:08:16<sseehh> looks like sumo from skimming. how is it different?
02.02.19 19:08:50<dmiles> sumo only uses some of the parts
02.02.19 19:09:11<dmiles> so it accidently contains all of sumo
02.02.19 19:09:23<dmiles> and everyitng sumo forgot
02.02.19 19:09:37<dmiles> but not more or less than sumo needed
02.02.19 19:10:02<dmiles> symetric in the same way ieml is
02.02.19 19:10:48<dmiles> Dolcs starts out with 6 letters
02.02.19 19:11:00<dmiles> and every predicate is a compbo of those 6 letters
02.02.19 19:12:03<dmiles> damn its hard to find a doc that exmaplains this 
02.02.19 19:12:04<sseehh> i can see this is really advanced what happened to it?
02.02.19 19:12:15<sseehh> http://www.loa.istc.cnr.it/old/Papers/DOLCE2.1-FOL.pdf
02.02.19 19:12:49<sseehh> page 31
02.02.19 19:13:04<dmiles> Table 3 (page 14 hints)
02.02.19 19:13:23<dmiles> yes exaclyt
02.02.19 19:13:37<dmiles> 31 and on
02.02.19 19:14:12<sseehh> and they just stopped after this?
02.02.19 19:14:22<dmiles> well we alweays get defunded
02.02.19 19:14:31<dmiles> they got defunded
02.02.19 19:14:36<dmiles> everyone gets defunded
02.02.19 19:14:46<sseehh> yaeh but thats no reason to stop
02.02.19 19:15:09<dmiles> its hard finding peopel that can approach this stuff that dont have dayjobs
02.02.19 19:15:39<dmiles> since people that canj approach it are often qualified to do anything
02.02.19 19:15:48<sseehh> thats either the case here, or it got absorbed by military for secret use
02.02.19 19:15:55<dmiles> so they gets stuck only doing stupid useless stuff
02.02.19 19:16:30<dmiles> evn in militrary advance projects it still stuck doing stupid things that seem exciting due to its top secret
02.02.19 19:16:48<sseehh> well thats becaues they are already have the agi they just need to keep pretending like they dont
02.02.19 19:17:03<sseehh> so it doesnt alert the other country's secret agi
02.02.19 19:17:04<dmiles> hah i said that in myu 1999 interview with Adam
02.02.19 19:17:37<dmiles> i was scared he would not hire me (think i was a nut job) for sayuing that
02.02.19 19:17:52<sseehh> its probably an AGI supercomputer on some other planet
02.02.19 19:17:58<sseehh> that they are keeping secret
02.02.19 19:18:10<dmiles> after working with him for a year.. i realized he was going to all the secret parties in deep national labortories
02.02.19 19:18:27<sseehh> lol
02.02.19 19:19:04<dmiles> his average month he spent 4 days in each natuional labortory
02.02.19 19:19:20<dmiles> Rome Labs.. Los Alamos
02.02.19 19:19:29<sseehh> https://eventhorizonchronicle.blogspot.com/ this guy's books
02.02.19 19:19:41<sseehh> on the right side
02.02.19 19:19:45<dmiles> yet he still as suprised as you and i were
02.02.19 19:20:18<dmiles> yeah Adam got invited into those tunnels and Area51 etc
02.02.19 19:20:57<dmiles> Rany and I used to joke adam hired us to keep us out of the hands of the russians
02.02.19 19:21:11<dmiles> erm Randy was another employee
02.02.19 19:21:24<dmiles> they hired us because they were afraid we were on the right path
02.02.19 19:21:47<sseehh> and not because they had something useful you could do for them?
02.02.19 19:22:08<dmiles> *nod*
02.02.19 19:22:21<sseehh> so you didnt do anything?
02.02.19 19:22:31<sseehh> or end up doing anything
02.02.19 19:22:58<dmiles> Adam assured us like at least once a month that the govt was not hiding it from us that we were the ones building it
02.02.19 19:23:30<dmiles> and i found that too hard to belive!
02.02.19 19:23:38<dmiles> well i belive it still
02.02.19 19:23:48<dmiles> i mean of cours ei wanted to belive it
02.02.19 19:24:17<dmiles> that after all his eyes was looking at every month.. that this was the shizzy
02.02.19 19:24:45<sseehh> how could he know what the govt has
                 <dmiles> but that was hard to fathom
02.02.19 19:24:47<sseehh> its all compartmentalized
02.02.19 19:24:54<sseehh> the problem is him claiming to know
02.02.19 19:24:57<sseehh> he certainly couldnt have
02.02.19 19:25:22<sseehh> one black project doesnt know about the other
02.02.19 19:25:27<dmiles> well becaus ehe was  aNASA program manager before this thjey probly figured he;d be telling them what we had
02.02.19 19:26:10<dmiles> like everyone thinks everyone else is not an imposter
02.02.19 19:26:48<dmiles> so he get sent to like 5 black projects a month
02.02.19 19:26:56<dmiles> that had nothing to do with him
02.02.19 19:27:15<dmiles> jsut to keep him relaizign he cant think too narrow
02.02.19 19:27:24<dmiles> or end up trying to reinvent a wheel
02.02.19 19:27:25<sseehh> yeah but those could be memory implant center visits
02.02.19 19:27:37<dmiles> or to at least know what wheels he should make us reinvnet
02.02.19 19:28:13<dmiles> the idea was he will require less moneyh the more tools tey showed him
02.02.19 19:28:44<dmiles> or notice two technongies were made for each other yet no one would see that but him
02.02.19 19:28:47<sseehh> that makes sense but were ther eany usable tools
02.02.19 19:29:04<dmiles> a few 
02.02.19 19:29:15<sseehh> ok that is reasonable
02.02.19 19:29:24<dmiles> but many less than i wanted to accept
02.02.19 19:29:27<sseehh> unles the whole point of needing to reduce cost is also fake
02.02.19 19:29:41<sseehh> since they produce the money
02.02.19 19:29:42<sseehh> lol
02.02.19 19:29:52<sseehh> they probably have a time printing press too
02.02.19 19:30:03<sseehh> and can just clone new workers
02.02.19 19:30:05<dmiles> right i want to assume they do
02.02.19 19:30:56<sseehh> bbl ill check dolce out in more detail eventually
02.02.19 19:31:05<dmiles> like stargate advanced
02.02.19 19:31:11<dmiles> stuff liek that
02.02.19 19:31:14<dmiles> nope
02.02.19 19:31:43<dmiles> Intelij constantly runs out of memory?!
02.02.19 19:31:48<dmiles> why is that
02.02.19 19:32:08<dmiles> it only lets be set it to 800mb the IDEA
02.02.19 19:32:12<dmiles> oops the IDE
02.02.19 19:32:50<dmiles> i can see your struggle
02.02.19 19:32:56<dmiles> Eclipse doesnt have these memory issues
02.02.19 19:33:25<dmiles> As much as Eclipse has sucked ass for ever a decade ruining peopels leives
02.02.19 19:33:54<dmiles> Eclipse only ruins my life about once or twice a year
02.02.19 19:34:20<dmiles> (not daily) like it did 10 years ago
02.02.19 19:35:07<dmiles> But i can see how much you love certain parts of IntellijIDEA
02.02.19 19:35:43<dmiles> i actually like them wayt better than eclipse
02.02.19 19:35:53<dmiles> but cant belive it would have such memory ,linmits
02.02.19 19:37:11<dmiles> Its not just CYC thogh, several projects over the years at severral companies had this problem with our modules being too complex
02.02.19 19:37:37<dmiles> it wasnt circular deps ,, it was we often used too many programming languages with too many soiurce files
02.02.19 19:38:12<dmiles> to work in Intellij
02.02.19 19:39:02<dmiles> but fine like in Netbeans
02.02.19 19:40:23<dmiles> though NARS isnt nesc that toy of a sourcetree tierh and you gotten to work jsut fine
02.02.19 19:41:58<dmiles> so phase 1 only need 1000 java files not all 4800 files
02.02.19 19:43:58<dmiles> ok I AM TRYIGJN TO SEE WHAT TO PRIORITZE
02.02.19 19:44:02<dmiles> oops
02.02.19 19:44:18<dmiles> same as sseehh was tryign to see.. we are both trying to do the same work :
02.02.19 19:44:27<dmiles> which makes more more happy
02.02.19 19:45:20<dmiles> so the build order of modules.. i have borne in appart into 6 modules before
02.02.19 19:45:35<dmiles> then peopel gripe it is too complex to build
02.02.19 19:46:05<dmiles> or its too complex to run the pre-ciommit tests
02.02.19 19:46:38<dmiles> i can make it into 6 build steps ran by one batch file
02.02.19 19:46:43<dmiles> script file
02.02.19 19:47:05<dmiles> and create onfigurations for the various tests its runs
02.02.19 19:50:53<aindilis> yay! to both trying to do the same work
02.02.19 19:50:54<dmiles> i can make each build stp its own src dir
02.02.19 19:52:22<dmiles> it just easier for defining prorovments if i use the same layout as the original ABCL does for their Repo
02.02.19 19:52:57<dmiles> so i can keep tracking the diffs easily
02.02.19 19:55:30<dmiles> so a couple issues.. it takes 5 seconds if i build the lisp files to startt.. vs if i dont, it takes over a minute
02.02.19 19:55:42<dmiles> so that is why the build process is the way it is
02.02.19 19:56:02<dmiles> is it makes my startup and development time faster
02.02.19 19:56:54<dmiles> i am tryign to figure out a way still that is convient for sseehh 
02.02.19 19:58:17<dmiles> one thig to that is cool is both sseehh and I are so nice we dont mind doing work really the other person should do
02.02.19 19:58:29<aindilis> :)
02.02.19 19:58:34<aindilis> that is true, thank you!!!!
02.02.19 19:58:53<dmiles> you are as well to aindilis
02.02.19 19:59:00<aindilis> ahh
02.02.19 19:59:05<aindilis> aww
02.02.19 19:59:06<aindilis> *
02.02.19 20:00:40<dmiles> so i need a way for sseehh to be able to make changesd and test when theose changes havent borkenb things
02.02.19 20:01:18<aindilis> if it's prolog you need i'm close to finish the auto-legacy-test system
02.02.19 20:01:51<dmiles> i think sseehh understand the thunk problem .. i still ahve to confiorm he does
02.02.19 20:02:17<dmiles> the thunk problem is why i could not keep the ABCL and SubL Lisp separated
02.02.19 20:02:31<dmiles> and cant keep Prolog sepatrated out
02.02.19 20:03:09<dmiles> is i already have to pass between the layers 59 minion times per quiery
02.02.19 20:03:53<dmiles> what is a 1 second quiery now whith themn separated became 2 minutes or mopre
02.02.19 20:04:02<dmiles> every time we rtested this
02.02.19 20:04:28<dmiles> here was always a x1000 slowdown whenever we added thunking
02.02.19 20:05:16<dmiles> even with SWI-prolog we'll have to see if that thunk is more expeanive than using SxxProlog
02.02.19 20:06:40<dmiles> SxxProlog tranlatesd into 30,0000 .java files
02.02.19 20:06:50<dmiles> erk only 30k .java files
02.02.19 20:07:18<dmiles> i htink Intellij is not happy about that eacher.. yet is fine in Eclipe
02.02.19 20:08:23<dmiles> it also works not transalted to java.. that is what i was workng on yesterday
02.02.19 20:08:29<dmiles> to allow that step to be skipped
02.02.19 20:14:52<dmiles> possible objectives:
02.02.19 20:15:01<dmiles> Making possible to load tiny-kb
02.02.19 20:15:39<dmiles> Show of the build/devel process that only i know about
02.02.19 20:16:48<dmiles> Fixing the things wrong with Buildsystem that sseehh is actualyl right aobut
02.02.19 20:17:34<dmiles> replacing Jpl7 with Sxx
02.02.19 20:18:08<dmiles> continuing devoping Daytdreamer
02.02.19 20:18:19<dmiles> continuing developing 3T
02.02.19 20:19:33<dmiles> * even though it was my priority to work on thse last two things 
02.02.19 20:19:56<dmiles> * it makes more sense making it a project a jabaphile does run away from screaming
02.02.19 20:20:44<dmiles> I want sseehh to be able to opimize it as he sees fit
02.02.19 20:21:17<dmiles> in 2006 i let xjrn help but never showed him how we do it at cycopr to test each change
02.02.19 20:21:49<dmiles> so he spend hours breaking it
02.02.19 20:22:09<dmiles> and never even know that he hadnt loaded the KB
02.02.19 20:22:21<dmiles> since he thought the code was KB
02.02.19 20:23:04<dmiles> problm with projects sometimes written in so many programming languages
02.02.19 20:28:38<dmiles> i am taking my daughter to socilize in about two hours 2 hours
02.02.19 20:29:09<aindilis> cool, enjoy!
02.02.19 20:29:16* aindilis will be around till 8 AM EST
02.02.19 20:30:01<dmiles> so probably i can at least get the build JRTL separated into one one IntelliJ buildable thing
02.02.19 20:30:42<dmiles> the CYCJAVA not very likely
02.02.19 20:31:18<dmiles> since it is all one blob
02.02.19 20:40:35<dmiles> though i think if i at least separtate teh 6 modules at least inteellij can be used to beuild 5 of them
02.02.19 20:41:30<dmiles> and hten sseehh might be able to figure out how to workarround Intellij
02.02.19 20:41:56<dmiles> its fine if it can call external ant file
02.02.19 20:42:01<dmiles> for the java cyc stuff
02.02.19 20:42:16<dmiles> it is just intellij cant index the files
02.02.19 20:44:31<dmiles> what i dont get is that Eclipse indexes them fine
02.02.19 20:44:49<dmiles> it even shows me all 70k wanrtings
02.02.19 20:45:59<aindilis> quick question, I keep getting ?- predicate_property(user:member/2,file(X)).
02.02.19 20:46:01<aindilis> X = '/usr/local/lib/swipl/library/yall.pl'
02.02.19 20:46:24<aindilis> I'm trying to get my source files
02.02.19 20:46:30<aindilis> s/member/my_member/
02.02.19 20:48:36<dmiles>  ?- user:member/2 = M:F/A, functor(P,F,A), souircefile(M:P,File).
02.02.19 20:48:44<dmiles> ?- true.
02.02.19 20:48:45<aindilis> ty!!!
02.02.19 20:48:57<dmiles> sec bots down
02.02.19 20:51:10<dmiles> its  ?- user:member/2 = M:F/A, functor(P,F,A), source_file(M:P,File).
02.02.19 20:51:17<aindilis> ah
02.02.19 20:52:29<aindilis> yay! TY!
02.02.19 20:52:57<dmiles> hrrm that did work?
02.02.19 20:53:02<aindilis> I think so yes
02.02.19 20:53:11<aindilis> I have to figure out some other little glitch to be sure though
02.02.19 20:53:21<dmiles> yeah often it works on user files not so oftne on system version of memeber
02.02.19 20:53:28<aindilis> good
02.02.19 20:53:32<aindilis> that's what I need
02.02.19 20:53:38<aindilis> exactly
02.02.19 20:54:30<dmiles> ?- member/2 = F/A, functor(P,F,A), predicate_property(M:P,file(File)), \+ predicate_property(M:P,imported_from(_)).
                 <dmiles> F = member,
                 <dmiles> A = 2,
02.02.19 20:54:31<dmiles> P = member(_5080, _5082),
                 <dmiles> M = lists,
                 <dmiles> File = '/usr/local/lib/swipl/library/lists.pl' .
02.02.19 20:54:51<dmiles> is how to get everthing
02.02.19 20:54:57<aindilis> okay I'll use that
02.02.19 20:58:45<dmiles> CYCJAVA is 2,208,222 loc
02.02.19 20:59:25<aindilis> hey cool so FRDCSA ~= LOC(CYCJAVA)
02.02.19 20:59:32<dmiles> Language                     files          blank        comment           code
                 <dmiles> -------------------------------------------------------------------------------
                 <dmiles> Java                          1241         103628          14637        2208222
02.02.19 21:00:44<dmiles> JRTL
02.02.19 21:00:45<dmiles> -------------------------------------------------------------------------------
                 <dmiles> Language                     files          blank        comment           code
                 <dmiles> -------------------------------------------------------------------------------
02.02.19 21:00:46<dmiles> Java                           539          18694          16524         145122
                 <dmiles> Lisp                           204           6070          10151          50241
                 <dmiles> C                                1             11             23             56
02.02.19 21:00:47<dmiles> Ant                              1              9              2             56
                 <dmiles> -------------------------------------------------------------------------------
                 <dmiles> SUM:                           745          24784          26700         195475
02.02.19 21:08:54<dmiles> sseehh so if i had it working in Eclipse and show how to build and index and explained the why things are done a certian way that whyould be helpfull?
02.02.19 21:09:41<dmiles> alos i got intellij to use the clipse build files.. but it didnt fix some of the memory erros
02.02.19 21:10:10<dmiles> i think it i jsut need to switch to a 64bit intellij
02.02.19 21:10:31<dmiles> that intellij used 32bit jvm
02.02.19 21:11:45*** Quit: sseehh (~me@2601:547:501:6b0c::d442) left #logicmoo: Read error: Connection reset by peer
02.02.19 21:13:57<dmiles> i kinda want o see it wokring or not in intellij before i start moving files
03.02.19 02:35:39<dmiles> ok so i think what i am doing is building a non full cyc
03.02.19 02:35:50<dmiles> making one tht is about the size of larkc
03.02.19 02:36:23<dmiles> since it looks liek i can probly get somethign like thjat to build in Intellij
03.02.19 02:36:53<dmiles> so for sseehh i am making sort of  a crippled version he can work with
03.02.19 02:38:00<dmiles> i think opencyc ends up being too big
03.02.19 02:38:07<dmiles> but not larkc
03.02.19 02:38:26<dmiles> another possiblity is i can jsut not include the source of the cyc.jar in his builds
03.02.19 02:41:36<dmiles> so i am going to do what i said i was goign to do makje this a replacement for subl.jar mostly
03.02.19 02:42:02<dmiles> so a parse can run opencyc or rcyc and jsut replace the subl jar
03.02.19 02:48:46*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
03.02.19 02:48:51<dmiles> cyc: (+ 1 1)
03.02.19 06:36:53*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dcbrmuqxkookxevc) left #logicmoo: Quit: Connection closed for inactivity
03.02.19 07:48:46<dmiles> ?- member/2 = F/A, functor(P,F,A), predicate_property(M:P,file(File)), \+ predicate_property(M:P,imported_from(_)).
03.02.19 07:48:47<PrologMUD> dmiles: % F=member, A=2, P=member(_9804,_9806), M=lists, File='/usr/local/lib/swipl/library/lists.pl'
                 <PrologMUD> dmiles:  det(Yes,1)
03.02.19 07:49:46<dmiles> ?-  cl_eval('*package*').
03.02.19 07:50:43<dmiles> ?- notdebug,notrace, catch(cl_eval('*package*'),E,say(E)).
03.02.19 07:50:54<dmiles> ?-  cl_eval('*package*',O).
03.02.19 07:51:11<dmiles> ?-trheads.
03.02.19 07:51:16<dmiles> ?- threads.
03.02.19 07:53:12<PrologMUD> dmiles: ^  Call: (138) [locally_each] locally_each:key_erase(tlbugger)
                 <PrologMUD> dmiles:  ? 
                 <PrologMUD> dmiles:    Call: (140) [pshook] pshook:stream_write(<stream>(0x7fde7c037390), " ? ")
03.02.19 07:55:00<dmiles>  ?-  cl_eval('*package*').
03.02.19 07:55:38<dmiles> ?-  true.
03.02.19 07:55:39<PrologMUD> dmiles: %  det(Yes,1)
03.02.19 07:56:00<dmiles> ?- cl_eval('*package*',O).
03.02.19 07:56:02<PrologMUD> dmiles: % O='#.(CL:FIND-PACKAGE "COMMON-LISP-USER")'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 07:56:53<dmiles> ?- cl_eval([type-of','*package*'],O).
03.02.19 07:57:02<dmiles> ?- cl_eval(['type-of','*package*'],O).
03.02.19 07:57:03<PrologMUD> dmiles: % O='CL:PACKAGE'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 07:57:27<dmiles> ?- cl_eval(['type-of','*package*'],'CL:PACKAGE'(O)).
                 <PrologMUD> dmiles: % O=O
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 07:59:27<dmiles> ?- cl_eval('#.(find-assertion-by-id 77777)',O).
03.02.19 07:59:28<PrologMUD> dmiles: % O='CYC:ASSERTION'(77777)
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 07:59:59<dmiles> ?- cl_eval('`#.(find-assertion-by-id 77777)',O).
                 <PrologMUD> dmiles: % O='CYC:ASSERTION'(77777)
03.02.19 08:00:00<PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:00:10<dmiles> ?- cl_eval('`#.()',O).
                 <PrologMUD> dmiles: % O=[]
03.02.19 08:00:11<PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:00:21<dmiles> ?- cl_eval('`#.(+ 1 1)',O).
03.02.19 08:00:22<PrologMUD> dmiles: % O=2
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:00:34<dmiles> ?- cl_eval('(+ 1 1)',O).
                 <PrologMUD> dmiles: % O=2
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:00:57<dmiles> ?- cl_eval('(/ 1 0)',O).
03.02.19 08:01:14<dmiles>  ?- cl_eval(['class-of','oboDerived:hasExactSynonym'],OO).
                 <PrologMUD> dmiles: % OO='#.(COMMON-LISP:FIND-CLASS \'CYC:CONSTANT)'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:01:31<dmiles>  ?- cl_eval(['type-of','oboDerived:hasExactSynonym'],OO).
                 <PrologMUD> dmiles: % OO='CYC:CONSTANT'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:02:21<dmiles>  ?- cl_eval(['type-of','CYC:ASSERTION'(77777)],OO).
03.02.19 08:02:22<PrologMUD> dmiles: % OO='CYC:ASSERTION'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:02:29<dmiles>  ?- cl_eval(['type-of','CYC:ASSERTION'(77723423477)],OO).
03.02.19 08:02:30<PrologMUD> dmiles: % OO='CYC:ASSERTION'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:02:40<dmiles>  ?- cl_eval(['type-of','CYC:ASSERTION'(777234233423434477)],OO).
03.02.19 08:02:41<PrologMUD> dmiles: % OO='CYC:ASSERTION'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:03:00<dmiles>  ?- cl_eval(['type-of','CYC:NART'(777234233423434477)],OO).
03.02.19 08:03:01<PrologMUD> dmiles: % OO='CYC:NART'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:03:06*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
03.02.19 08:03:22<dmiles>  ?- cl_eval(['nart-el-formula','CYC:NART'(7772)],OO).
03.02.19 08:03:23<PrologMUD> dmiles: % OO=['MeaningInSystemFn','WordNet-1997Version','"A01518826"']
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:03:32<dmiles>  ?- cl_eval(['nart-el-formula','CYC:NART'(777332)],OO).
                 <PrologMUD> dmiles: % OO=[]
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:03:36<dmiles>  ?- cl_eval(['nart-el-formula','CYC:NART'(77222222222222227332)],OO).
03.02.19 08:03:37<PrologMUD> dmiles: % OO=[]
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:03:44<dmiles>  ?- cl_eval(['nart-el-formula','CYC:NART'(0)],OO).
                 <PrologMUD> dmiles: % OO=['LFSignatureFn','LFWife']
03.02.19 08:03:45<PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:03:50<dmiles>  ?- cl_eval(['nart-el-formula','CYC:NART'(-1)],OO).
03.02.19 08:04:17<dmiles>  ?- catch(cl_eval(['nart-el-formula','CYC:NART'(-1)],OO),E,say(E)).
03.02.19 08:04:18<PrologMUD> dmiles: error(java_exception(<jref>(0x7f12c2db48e8)),org.jpl7.JPLException)
                 <PrologMUD> dmiles: % OO=OO, E=error(java_exception(<jref>(0x7f12c2db48e8)),'org.jpl7.JPLException')
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:04:52<dmiles>  ?- catch(cl_eval(['nart-el-formula','CYC:NART'(-1)],OO),error(E,_),say(E)).
03.02.19 08:04:53<PrologMUD> dmiles: java_exception(<jref>(0x7f12c2db48d0))
                 <PrologMUD> dmiles: % OO=OO, E=java_exception(<jref>(0x7f12c2db48d0))
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:05:41<dmiles>  ?- catch(cl_eval(['nart-el-formula','CYC:NART'(-1)],OO),error(java_exception(E),_),say(E)).
03.02.19 08:05:42<PrologMUD> dmiles: <jref>(0x7f1224018ff8)
                 <PrologMUD> dmiles: % OO=OO, E=<jref>(0x7f1224018ff8)
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 08:06:42<dmiles>  ?- catch(cl_eval(['nart-el-formula','CYC:NART'(-1)],_),error(java_exception(E),_),say(E)), jpl_call(E,toString,[],O).
                 <PrologMUD> dmiles: <jref>(0x7f1224018f98)
03.02.19 08:06:43<PrologMUD> dmiles: % E=<jref>(0x7f1224018f98), O='org.jpl7.JPLException: class com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException:     com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException: class org.armedbear.lisp.LispError #<ERROR {1D7A273B}> slots=[class com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException:     com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException: class org.armedbear.lisp.JavaE
                 <PrologMUD> xception #<JAVA-EXCEPTION {6B7C9D67}> slots=[Java exception: ~A., (#<org.jpl7.JPLException org.jpl7.JPLException: class com.... {5A353B8E}>), #<*DTP-ALIEN* {7CCE17C2}>]    com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException: class org.armedbear.lisp.JavaException #<JAVA-EXCEPTION {6B7C9D67}> slots=[Java exception: ~A., (#<org.jpl7.JPLException org.jpl7.JPLException: class com.... {5A353B8E}>), #<*DTP-ALIEN* {7CCE17C
                 <PrologMUD> 2}>]\n\tat com.cyc.tool.subl.jrtl.nativeCode.type.exception.ExceptionFactory.makeException(ExceptionFactory.java:19)\n\tat com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLO
                 <PrologMUD> dmiles: bjectFactory.makeException(SubLObjectFactory.java:183)\n\tat org.armedbear.lisp.Lisp.conditionToSubLException(Lisp.java:460)\n\tat org.armedbear.lisp.Lisp.error(Lisp.java:444)\n\tat com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors.error(Errors.java:268)\n\tat com.cyc.tool.subl.jrtl.nativeCode.type.operator.SubLCompiledFunction.apply(SubLCompiledFunction.java:161)\n\tat com.cyc.tool.subl.jrtl.nativeCode.type.operator.Ab
                 <PrologMUD> stractSubLFunction.funcall(AbstractSubLFunction.java:152)\n\tat com.cyc.tool.subl.jrtl.nativeCode.type.operator.SubLCompiledFunction.applyObject(SubLCompiledFunction.java:123)\n\tat com.cyc.tool.subl.jrtl.nativeCode.type.operator.SubLCompiledFunction.arrayify(SubLCompiledFunction.java:120)\n\tat org.armedbear.lisp.LispObject.execute(LispObject.java:1160)\n\tat org.armedbear.lisp.LispThread.execute(LispThread.java:871)\n\tat or
                 <PrologMUD> g.armedbear.lisp.Lisp.evalCall(Lisp.java:670)\n\tat org.armedbear.lisp.Lisp.eval(Lisp.java:635)\n\tat org.logicmoo.system.BeanShellCntrl.lisp_progn(BeanShellCntrl.java:1575
03.02.19 08:06:44<PrologMUD> dmiles: )\n\tat org.logicmoo.system.BeanShellCntrl.lisp_eval(BeanShellCntrl.java:1607)\n\tat sun.reflect.GeneratedMethodAccessor29.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.logicmoo.system.BeanShellCntrl.invokeM(BeanShellCntrl.java:1471)\n\tat org.logicmoo.system.BeanShellCntrl$SpecialMethod
                 <PrologMUD> .invokeFromProlog0(BeanShellCntrl.java:2976)\n\tat org.logicmoo.system.BeanShellCntrl$SpecialMethod$1.call(BeanShellCntrl.java:2931)\n\tat org.logicmoo.system.BeanShellCntrl$14.call(BeanShellCntrl.java:881)\n\tat org.logicmoo.system.BeanShellCntrl$SpecialMethod.invokeFromProlog(BeanShellCntrl.java:2934)\n\tat org.logicmoo.system.BeanShellCntrl.call_ctrl(BeanShellCntrl.java:533)\nclass com.cyc.tool.subl.jrtl.nativeCode.type.exc
                 <PrologMUD> eption.SubLException: class org.armedbear.lisp.JavaException #<JAVA-EXCEPTION {6B7C9D67}> slots=[Java exception: ~A., (#<org.jpl7.JPLException org.jpl7.JPLException: class 
03.02.19 08:06:45<PrologMUD> dmiles: com.... {5A353B8E}>), #<*DTP-ALIEN* {7CCE17C2}>]     com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException: class org.armedbear.lisp.JavaException #<JAVA-EXCEPTION {6B7C9D67}> slots=[Java exception: ~A., (#<org.jpl7.JPLException org.jpl7.JPLException: class com.... {5A353B8E}>), #<*DTP-ALIEN* {7CCE17C2}>], CL:NIL]    com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException: class org.armedbear.lisp.LispE
03.02.19 08:06:46<PrologMUD> rror #<ERROR {1D7A273B}> slots=[class com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException:     com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLException: class org.armedbear.lisp.JavaException #<JAVA-EXCEPTION {6B7C9D67}> slots=[Java exception: ~A., (#<org.jpl7.JPLException org.jpl7.JPLException: class com.... {5A353B8E}>), #<*DTP-ALIEN* {7CCE17C2}>]    com.cyc.tool.subl.jrtl.nativeCode.type.exception.SubLExcep
                 <PrologMUD> tion: class org.armedbear.lisp.JavaException #<JAVA-EXCEPTION {6B7C9D67}> slots=[Java exception: ~A., (#<org.jpl7.JPLException org.jpl7.JPLException: class com.... {5A353B8
                 <PrologMUD> dmiles: E}>), #<*DTP-ALIEN* {7CCE17C2}>]\n\tat com.cyc.tool.subl.jrtl.nativeCode.type.exception.ExceptionFactory.makeException(ExceptionFactory.java:19)\n\tat com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory.makeException(SubLObjectFactory.java:183)\n\tat org.armedbear.lisp.Lisp.conditionToSubLException(Lisp.java:460)\n\tat org.armedbear.lisp.Lisp.error(Lisp.java:444)\n\tat com.cyc.tool.subl.jrtl.nativeCode.subLis
03.02.19 08:06:50*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Excess Flood
03.02.19 08:07:06*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
03.02.19 08:07:11<dmiles> cyc: (+ 1 1)
03.02.19 08:15:33*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
03.02.19 08:15:38<dmiles> cyc: (+ 1 1)
03.02.19 09:45:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hagymcnahjbonmgs, stoopkid: stoopkid)
03.02.19 09:45:09<dmiles> cyc: (+ 1 1)
03.02.19 15:07:58*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 245 seconds
03.02.19 15:08:23*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 245 seconds
03.02.19 15:13:58*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
03.02.19 15:14:03<dmiles> cyc: (+ 1 1)
03.02.19 15:15:59*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
03.02.19 15:16:05<dmiles> cyc: (+ 1 1)
03.02.19 15:45:02*** Join: sseehh (~me@2601:547:501:6b0c::d442, sseehh: realname)
03.02.19 15:45:07<dmiles> cyc: (+ 1 1)
03.02.19 15:46:39<sseehh> hi
03.02.19 15:47:04<sseehh> dont worry about working around intelliJ just cocnenrtrate on the build setup to be simple
03.02.19 15:47:26<sseehh> i can increase its memory limit, its in idea64.vmoptions btw
03.02.19 15:47:31<sseehh> by default it is 800mb
03.02.19 15:47:34*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hagymcnahjbonmgs) left #logicmoo: Quit: Connection closed for inactivity
03.02.19 15:48:07<sseehh> but i have it on 1.2gb i can increase it up to 2gb if i need, 3gb is pushing it on this 8gb machine
03.02.19 15:48:13<sseehh> my nars tests i limit to 1gb
03.02.19 15:48:37<sseehh> just out of principle to see what can be done with a moderate amount of mem
03.02.19 15:48:56<sseehh> more mem and the intern caches can be bigger. more concepts can be remembered etc but i am interested in doing more with less
03.02.19 15:49:10<sseehh> and have succeeded in reducing requirements considerably
03.02.19 15:49:46<sseehh> i dont think involving so many classes is necessarily helpful
03.02.19 15:49:51<sseehh> like i said its abusing the JVM to do that
03.02.19 15:50:06<sseehh> relying on java symbol tables etc. may not actually improve speed at all
03.02.19 15:50:28<sseehh> whatever is code is code whatever is data that the code can act on is data. hence the reason for differnt code and data handling in cpu cache
03.02.19 15:50:51<sseehh> if they are separate i guess the code is expected to typically be longer lived than the data
03.02.19 15:51:06<sseehh> so it can swap out the data with a different policy better for it
03.02.19 15:51:22<sseehh> something like this, i can find someone else's better justification later
03.02.19 15:52:05<sseehh> modern JVM does a ton of optimization
03.02.19 15:52:34<sseehh> i dont fully understand it but i think the partial evaluation stuff is particularly relevant as to why this kind of class generation isnt helpful
03.02.19 15:53:13<sseehh> if the code is cleanly written then whatever is partially evaluable will seem natural to factor out, either manually or the JIT will try to do something abou tit
03.02.19 15:53:50<sseehh> but if theres 30000 java files and it doesnt see the obvious patterns we do it will have to duplciate the patterns for each instance
03.02.19 15:53:52<sseehh> to some degree
03.02.19 15:54:04<sseehh> some of the method contents will be equivalent, and hopefully it notices that
03.02.19 15:54:14<sseehh> but they are still taking up 30000 * n VM symbol table entries
03.02.19 15:55:06<sseehh> instead if there was just a few classes that operate on the data, the lisp objects or prolog objects or nars concepts or narlisplog data structure
03.02.19 15:55:43<sseehh> the code can get JIT'd fully and it lives in the cpu cache while the data fed to it to make the decisions is as best as can be expected for a data processing program
03.02.19 15:56:04<sseehh> ^ my speculation dont take this as fact
03.02.19 15:56:56<sseehh> probably someone will suggest graal as the right choice for building a new language that fully takes advantage of JVM
03.02.19 15:57:16<sseehh> graal is actually at least partially in jdk11+ already. i dont know what it all involves
03.02.19 15:57:20<sseehh> but its basically the JIT written in java itself
03.02.19 15:57:42<sseehh> because they figured it was already good enough why not just apply it to itself and make the develpoment easier by involving less C++
03.02.19 15:58:18<sseehh> graal has a ton of stuff for AST and bytecode generation.. but i dont think this is necessary here
03.02.19 15:59:03<sseehh> because its already going to do much of what a compiled language would have to do if the java code is written right.  ie. most of the runtime 'compilation' is possible thru lambdas
03.02.19 15:59:17<sseehh> and enum's.  xjrn is big on enum's
03.02.19 16:00:38<sseehh> there is a ton of .pl .cyc etc assertions here. i expect only a small part of it to actually be useful in a metaprogramming learning system ie if it cant end up buildnig the equvialent on its own then whats the point
03.02.19 16:02:38<sseehh> whats the point of cyc 60k assertion if it cant read wikipedia to learn a similar result
03.02.19 16:02:44<sseehh> 300k assertion or whtaever
03.02.19 16:03:19<sseehh> i was looking at dolce and it led me to some comparison of upper level ontology, another that was mentioend was Sowa's ontology which is cool too
03.02.19 16:03:56<sseehh> SUMO claims it improves on dolce in several ways, ill accept its claims for now and assume SUMO does everything dolce does
03.02.19 16:04:31<sseehh> A Comparison of Upper Ontologies https://pdfs.semanticscholar.org/4f28/6fdf9280449588b9d3781c9c897da28e0cff.pdf 
03.02.19 16:04:53<sseehh> DOLCE ergo SUMO:On Foundational and Domain Models in SWIntO(SmartWebIntegratedOntology) http://www.dfki.de/~sonntag/swinto1.pdf
03.02.19 16:04:59<sseehh> an attempt to combine dolce and sumo
03.02.19 16:05:23<sseehh> http://www.jfsowa.com/talks/interop.pdf this is interesting
03.02.19 16:06:35<sseehh> The diagrams show the evolution of the DAML project.●The winning proposal in 2000 added detail to Hendler’s version. ●The diagram of 2001 moved logic to the side.●In the final report, the “unifying logic” looks like an afterthought.Hendler wrote that DAML must support heterogeneous systems.●Tim B-L emphasized heterogeneous systems in his  proposal.●But the final report did not mention the word 'heterogeneous'. 
03.02.19 17:08:06<sseehh> https://github.com/deepstupid/SxxMachine/commit/085d744d857220d8bb7c31bd3f3551335f5f5f0a
03.02.19 17:08:25<sseehh> https://github.com/deepstupid/SxxMachine/tree/master/jsrc/SxxMachine
03.02.19 17:08:39<sseehh> any remaining java is in jsrc2
03.02.19 18:24:57*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
03.02.19 19:34:50<dmiles> well just to understand what is being said on wikipedia enough to lern from it takes quite a few assertions
03.02.19 19:36:26<dmiles> i supposed one issue about LarKC is tht since every integer is boxed and it nees them to be == .. we have a factory
03.02.19 19:36:45<dmiles> and that right there is a 400mb
03.02.19 19:38:08<dmiles> well for one reason that is so big is the succor into is storage as a vbalue to
03.02.19 19:39:17<dmiles> when the JRTL is loaded with no data or KB it alreayd is pretty huge
03.02.19 19:40:22<dmiles> enause it is required to do some of its own build steps
03.02.19 19:40:41<dmiles> and because*
03.02.19 19:41:39<dmiles> need about SxxMachine i'll check it out!
03.02.19 19:42:48<dmiles> with Sxx MQachine i did reealize a couple grave mistakes that slow it down 3x when iots in java
03.02.19 19:43:06<dmiles> achully someone fixed those mistakes in CafeProlgo aobut 15 years ago
03.02.19 19:43:24<dmiles> but i added them back since in C++ they arte bonus 
03.02.19 19:43:50<dmiles> the mistake was that the Engine was keeping its registers in an array
03.02.19 19:44:28<dmiles> so when that was fixed (stroed in java fields that pretened to be an array) the code sped up 3/4x
03.02.19 19:44:50<dmiles> how for C++ that becomes a big slowdown
03.02.19 19:45:17<dmiles> since everything becomes sored in a VTable
03.02.19 19:45:47<dmiles> since SxxMachine was supposed to be C++ i did lots of things that would slow java dowb
03.02.19 19:46:17<dmiles> in the name of speeding up C++
03.02.19 19:47:21<dmiles> but it made JSR (jump subroutines) really fast
03.02.19 19:48:06<dmiles> (since SxxMachine is an impl of WAM)
03.02.19 19:48:41<dmiles> truthfully it would be best to go back to the original versiosn of CafeProlog befor ei started slowuing it down\
03.02.19 19:50:01<dmiles> it was relalyh slow in 2003 but someone in the next decade made it 4x/5x faster
03.02.19 19:50:31<dmiles> based on tricks for the JVM
03.02.19 19:52:52<dmiles> example  Term OpPlusOperands = new Term[] {foo,bar,baz,1,2};  became  new foo(bar,bar,baz,1,2);
03.02.19 19:53:39<dmiles> when i need to to access say  OpPlusOperands[3] 
03.02.19 19:54:09<dmiles> or  myFoo.exec();
03.02.19 19:54:29<dmiles> in java that requires  OpPlusOperands[0].exec() 
03.02.19 19:54:48<dmiles> in C++ that is  OpPlusOperands[]()
03.02.19 19:55:26<dmiles> its not sorucesize that is an issue here java can be faster than the C++
03.02.19 19:55:43<dmiles> the old java ways is even faster than C++ was
03.02.19 19:56:18<dmiles> new java way is  myFoo.exec();
03.02.19 19:56:45<dmiles> or OpPlusOperands.exec();
03.02.19 19:56:57<dmiles> which made it run faster thant the C++ version that that code
03.02.19 19:57:29<dmiles> but the way i have itr now is it runs 4 times slower thnat the java way :)
03.02.19 19:58:46<dmiles> btw.. unrealated someone at Cycorp discovered this trick to that made java so fast.. and it sped up larkc as well
03.02.19 19:59:22<dmiles> of course made the java code not so easy/pretty to look at
03.02.19 20:01:11<dmiles> same trick .. use objects with field to implement operations
03.02.19 20:01:52<dmiles> instead of arrays
03.02.19 20:03:35<dmiles> looking at what you did wuith SxxMAchne is good
03.02.19 20:03:55<dmiles> it will keep that structure
03.02.19 20:08:27<dmiles> before merging it into LarKC will want to restore the fixes
03.02.19 20:08:58<dmiles> well back out my C++ evils
03.02.19 20:09:42<dmiles> 		Term[] y1 = VA(a1);
                 <dmiles> 		a7 = S("call", y1);
03.02.19 20:10:00<dmiles> that there is a perect example is my C++ evils
03.02.19 20:11:35<dmiles> the brilliant way it used to work was callOp.exec(a1);
03.02.19 20:12:11<dmiles> instead of me building 3 arrays
03.02.19 20:13:35<dmiles> VA(a1); builds 1,   varargs of S builds 1,  the object created by S has yet another array to hold the y1
03.02.19 20:14:29<sseehh> i looked at SxxMachine today also
03.02.19 20:14:42<sseehh> i couldnt get anywhere and went back to tuprolog to try to learn more since its simpler
03.02.19 20:14:48<dmiles> in C++ version i so pointer tricks that    *&a1  to never alocate array
03.02.19 20:14:50<sseehh> i have been cleaning it up the past few hours
03.02.19 20:15:08<sseehh> and found a bunch of useless shit tuprolog does and replaced it with a better solution
03.02.19 20:15:28<sseehh> its already as fast as i can tell, the unit tests finish in a few seconds. i havent profiled it on a real task
03.02.19 20:16:53<dmiles> everytime you study one prolog you realize bunches of new tuircks all the opthers should be using
03.02.19 20:16:54<sseehh> the arg stuff is maybe better done with methodhandles now since java 9+
03.02.19 20:17:14<sseehh> methodhandles are a way of creating a re-usable function call with the arg pre-computed
03.02.19 20:17:43<dmiles> like all the method handle tric
03.02.19 20:17:45<sseehh> these are ordinary objects can can be cached
03.02.19 20:17:57<dmiles> you saw some of my method handle tricks?
03.02.19 20:18:00<sseehh> its what the jit would be doing internally
03.02.19 20:18:09<sseehh> i think its the exact same thing. it uses them while compilnig
03.02.19 20:18:21<sseehh> i forget .. i think i saw Method stuff
03.02.19 20:18:28<sseehh> which is the basic reflection way
03.02.19 20:18:39<dmiles> naw these are spefic to java 8/9
03.02.19 20:18:44<sseehh> ok good then u know what im talking about
03.02.19 20:19:01<dmiles> they are in 8 but syntacitally superior in 9
03.02.19 20:19:24<sseehh> its still a messy api imho
03.02.19 20:19:28<sseehh> varhandles too
03.02.19 20:19:33<sseehh> dunno what they were thinking
03.02.19 20:20:00<sseehh> basically tuprolog has a clause store which it checks structs against first by term head and then the args it tries to unify
03.02.19 20:20:15<sseehh> they use this rbtree but it could just as easily be a Map<> but anyway i didnt change that yet
03.02.19 20:20:24<sseehh> what i changed was the leaves which store the arguments that need to be tried
03.02.19 20:20:30<sseehh> the order here matters due to assertA assertZ
03.02.19 20:20:35<sseehh> so it is stored in a list
03.02.19 20:20:45<sseehh> and it stupidly has to try every single one
03.02.19 20:20:56<sseehh> but not only that, it makes a copy of the entire list before it even tries any
03.02.19 20:20:58<sseehh> lol
03.02.19 20:21:11<sseehh> then on top of that it de-unifies a bunch of variables that arent even touched
03.02.19 20:21:16<sseehh> and reunifies them from a copy after its done
03.02.19 20:21:29<dmiles> yep!
03.02.19 20:21:36<sseehh> unless im missing something not obvious
03.02.19 20:21:49<sseehh> but i keep running the tests and they just get a bit faster
03.02.19 20:21:52<sseehh> and still pass
03.02.19 20:22:06<sseehh> what i want to add next is a hash-based containment test for contsant args
03.02.19 20:22:12<sseehh> either using a Set<> or a bloom filter
03.02.19 20:22:19<sseehh> which is lazily recomputed if the clausestore leaf changes
03.02.19 20:22:32<dmiles> did you ever study CafePRolog 2007 version?
03.02.19 20:22:43<sseehh> i dont remember so effectively no
03.02.19 20:22:44<dmiles> opps sorry whatever version corisponded to java9
03.02.19 20:23:21<dmiles> that was the fastest/best i've seen.. but it didnt translate well to C++
03.02.19 20:23:34<sseehh> did it WAM or was it all dynamic
03.02.19 20:23:39<dmiles> i guess 2012 version
03.02.19 20:23:46<dmiles> it was both
                 <sseehh> i saw the cafeprolog sstuff in SxxMachine today but i didnt look into it
03.02.19 20:24:02<sseehh> i just managed to get whats in my git repo there to compile as a plain java project
03.02.19 20:24:04<dmiles> well i took out some of the best stuff
03.02.19 20:24:11<dmiles> that i couldnt use in C++
03.02.19 20:24:17<sseehh> but i think it still has trouble due to some initialization
03.02.19 20:24:36<sseehh> like it couldnt find the reconsult primitive
03.02.19 20:25:01<sseehh> i looked into what it was doing and at that point figured tuprolog isnt any worse
03.02.19 20:25:28<sseehh> they both have to do the same thing: bind dynamic terms to registered primtiives
03.02.19 20:25:46<sseehh> and narchy does the same thing
03.02.19 20:26:21<sseehh> since i want something like a clausestore for nars i see the ways prolog does it
03.02.19 20:26:27<sseehh> and they can be applied
03.02.19 20:26:42<dmiles> https://gerrit.googlesource.com/prolog-cafe/+/master  <- was the best version
03.02.19 20:27:39<dmiles> oops i lied soory
03.02.19 20:28:23<sseehh> also tuprolog was unifying the same thing it just checked for all the goals, for each next goal
03.02.19 20:29:01<sseehh> maybe the saving the variable thing is needed.. i dunno but the tests still pass without it
03.02.19 20:29:16<sseehh>         int n = vars.size();
                 <sseehh>         List<Term> saveUnifications = n > 0 ? deunify(vars, new FasterList<>(n)) : null;
03.02.19 20:29:18<dmiles> sometimes it depands on waht style of verable 
03.02.19 20:29:35<sseehh> yeah that breaks it
03.02.19 20:29:37<sseehh> when i removed it
03.02.19 20:30:25<dmiles> some varialbes p[erform evaluation on uinify that have side effects you want
03.02.19 20:30:37<dmiles> (not in tuprolog) but in some prologs
03.02.19 20:30:54<sseehh> i wouldnt be surprised if it happens in tuprolog
03.02.19 20:31:08<sseehh> tuprolog does all kinds of things that make it scary for multithread use
03.02.19 20:31:25<sseehh> like it was relying on some counter or something to identify unique variable instances
03.02.19 20:31:34<sseehh> i ended up using an atomic long assigned to each new variable
03.02.19 20:31:40<sseehh> then it can compare the sequence
03.02.19 20:34:42<sseehh> tuprolog's got awkward class and method names. like 'existCompatibleClause' this ended up being more like 'unify' as its main purpose was to eventually call unify(goal)
03.02.19 20:35:02<sseehh> er actually i renamed that one too
03.02.19 20:35:19<sseehh> all it did was test goal.unifiable(clause)
03.02.19 20:36:36<sseehh> is that prolog-cafe the best version its relatively new from 2018
03.02.19 20:37:19<dmiles> it is whatever versionb uses "@FunctionalInterface" Operation
03.02.19 20:37:35<dmiles> it is whatever versionb used @FunctionalInterface Operation  .. except mine (the orignal was better_)
03.02.19 20:39:39<sseehh> yeah there was a lot of lambdas in SxxProlog's cafe stuff
03.02.19 20:39:55<sseehh> most of those were convertable to method references
03.02.19 20:40:10<sseehh> in intellij's automatic refactoring abilities
03.02.19 20:41:03<sseehh> i wondered about whether there was a good way to execute lisp in prolog.  and found your repo for exactly that
03.02.19 20:41:16<dmiles> https://github.com/logicmoo/SxxMachine/commit/e20b66997fbf3a511aba4e95b3b45595b777959e#diff-6c84c754079a369b95adeabea4fa75e4L67
03.02.19 20:41:21<sseehh> but it didnt answer why that had to be so complicated so i looked again at ABCL the official version
03.02.19 20:41:35<dmiles> you wwill see there is a perfect exmaple of how i ruined it
03.02.19 20:42:02<dmiles> return (Operation)pred_write_1::exec_static ;}
                 <dmiles> return (Operation) animal.s_write.FindProc(1) ;}
03.02.19 20:42:16<dmiles> - return (Operation) animal.s_write.FindProc(1) ;}
03.02.19 20:42:17<sseehh> and i looked at the lisp it seemed like the most alien way for programming anything i couldnt get any further
03.02.19 20:42:20<dmiles> oop
03.02.19 20:42:27<dmiles> - return (Operation)pred_write_1::exec_static ;}
03.02.19 20:42:28<sseehh> i am familiar with lisp even less than prolog
03.02.19 20:42:31<dmiles> + return (Operation) animal.s_write.FindProc(1) ;}
03.02.19 20:42:58<sseehh> but why isnt lisp in prolog a matter of just creatnig a bunch of call() goals
03.02.19 20:43:05<sseehh> and translating some standard function names
03.02.19 20:43:30<dmiles> are you refering to WAM_CL ?
03.02.19 20:43:59<dmiles> tha tis exacvly what i did for https://github.com/TeamSPoon/wam_common_lisp
03.02.19 20:44:07<sseehh> yeah that repo
03.02.19 20:44:12<dmiles> i convert all lisp into jsut calls
03.02.19 20:44:20<sseehh> right so why is it like hundreds of files
03.02.19 20:44:33<dmiles> ther eis 50mb of lisp sources
03.02.19 20:44:42<dmiles> tha tit has to convert
03.02.19 20:44:50<dmiles> most of it are tests
03.02.19 20:45:05<dmiles> checking for ANSI compliance etc
                 <sseehh> ok so its actually converting lisp to prolog?
03.02.19 20:45:10<dmiles> yes
03.02.19 20:45:13<sseehh> ok
03.02.19 20:45:29<dmiles> it has to convert ANSI lisp to ISO prolog
03.02.19 20:45:51<dmiles> ther eare millions of gotchas
03.02.19 20:46:03<sseehh> thats what i mean
03.02.19 20:46:06<dmiles> well at least 100+
03.02.19 20:46:25<sseehh> ok that seems reasonable
03.02.19 20:46:34<sseehh> what part is the actual translator and what is translated
                 <dmiles> often times i sacrific eligance for reasability
03.02.19 20:46:46<dmiles> often times i sacrific eligance for readability
03.02.19 20:47:03<sseehh> im no better
03.02.19 20:47:24<dmiles> yeah that is the fun part i bootstrap much of the translator
03.02.19 20:47:35<dmiles> so some macros become source translations
03.02.19 20:47:50<sseehh> is the code this generates able to run in something like tuprolog?
03.02.19 20:48:00<dmiles> yes
03.02.19 20:48:16<dmiles> well most of the time
03.02.19 20:48:27<dmiles> i startign to use some special tricks specific to swi
03.02.19 20:48:31<sseehh> does the lisp code from something like cyc end up being cleaner in prolog or is it worse
03.02.19 20:49:12<dmiles> its often about the same.. i could make it better but it becomes dangeraous since sometimes somone will redifine a macro
03.02.19 20:49:16<sseehh> i imagine once its in prolog the code can be unified against itself in ways that lisp cant
03.02.19 20:49:40<dmiles> peiopel redifine compiler macros at runtime
03.02.19 20:49:58<dmiles> people tend redefine compiler macros at runtime!
03.02.19 20:50:22<dmiles> so i have to often be lazy abotu certain conversions
03.02.19 20:50:35<dmiles> (wait till very last minute)
03.02.19 20:50:48<dmiles> yes tha tis the pwoer we week
03.02.19 20:50:58<dmiles> yes tha tis the pwoer we seek .. to let the code reunify and rewrite itself
03.02.19 20:51:32<dmiles> that is how thining lilke PrologMUD work is it reads text and recodes itself
03.02.19 20:51:51<dmiles> (based on users ideas)
03.02.19 20:52:13<dmiles> sometimes that happens in Lispy ways to
03.02.19 20:52:32<dmiles> up to now mostly practices i've done were prolog
03.02.19 20:52:44<dmiles> i mena up till the last 3 years
03.02.19 20:53:37<dmiles> what the value of CYC is it makes it so i can do post-mortems and pre-mortems
03.02.19 20:54:26<dmiles> so when the system links to Ssytem.exit/1 i get a "proof"
03.02.19 20:55:08<dmiles> also can set up rules that prevent that all from english
03.02.19 20:56:32<sseehh> i tried an experiment once making a meta-stack in java that could be used to record paths and probalistic decide branch at choice points in execution
03.02.19 20:56:53<sseehh> i didnt finish with it but it was an attempt at a general controller that you can throw a bunch of methods into it
03.02.19 20:56:59<sseehh> and then it could learn what it should execute stochasticaly
03.02.19 20:57:16<sseehh> after being trained by running the code it would just learn the method call sequence
03.02.19 20:57:21<dmiles> in a way think of thoise lie unterrances
03.02.19 20:57:27<dmiles> like utternence
03.02.19 20:57:43<sseehh> yeah that get rewarded
03.02.19 20:57:56<sseehh> like a reinforcement learning stack trace
03.02.19 20:57:57<dmiles> yeah that have to make poetic sense
03.02.19 20:58:10<dmiles> (reinforced the good version o peoptry)
03.02.19 20:58:30<sseehh> https://github.com/automenta/narchy/blob/volatile1/util/src/main/java/jcog/exe/flow/MetaFlow.java#L27
03.02.19 20:58:59<dmiles> yeah you end up with a Best Fit
03.02.19 20:59:03<sseehh>         MetaFlow m = exe().forkUntil(System.nanoTime() + 500L * 1_000_000L,
                 <sseehh>                 MetaFlowTest::a,
03.02.19 20:59:04<sseehh>                 MetaFlowTest::b,
                 <sseehh>                 () -> c(0));
                 <sseehh> System.out.println(m.plan.prettyPrint());
03.02.19 20:59:09<dmiles> best fittings CFG
03.02.19 20:59:11<sseehh>     private static void a() {
                 <sseehh>         exe().good((float) (Math.random()*1f));
                 <sseehh> }
03.02.19 20:59:18<sseehh> the reward points are in the methods
03.02.19 20:59:22<sseehh> good, bad
03.02.19 20:59:29<sseehh> so it records the stack trace at that point
03.02.19 20:59:40<sseehh> then from the traces it could learn the patterns
03.02.19 20:59:46<dmiles> genious really
03.02.19 20:59:52<dmiles> (use iof stack)
03.02.19 21:00:12<sseehh> exe() goes to a threadlocal context
03.02.19 21:00:19<dmiles> those become phrases
03.02.19 21:00:21<sseehh> because thats the root where it is executing from anyway
03.02.19 21:00:37<sseehh> it uses stackwalker api
03.02.19 21:00:45<sseehh> and stores the stack using a compact reprresntation
03.02.19 21:00:46<sseehh> in a trie
03.02.19 21:00:52<sseehh> of byte[]
03.02.19 21:01:13<sseehh>  public final class StackCursor extends DynBytes {
03.02.19 21:01:18<dmiles> yeah interned that way so it knows how to reinforce the same ones later
03.02.19 21:01:24<sseehh> whcih are iteratively constructed and destructed
03.02.19 21:01:30<sseehh> as it goes up and down stack frames
03.02.19 21:01:38<sseehh> and the other thing this has are multiple qualities
03.02.19 21:01:41<sseehh> good and bad are just the default
03.02.19 21:01:50<sseehh> there can be other qualities it tracks
03.02.19 21:02:03<sseehh> these could record things like memory usage
03.02.19 21:02:06<sseehh> or cpu time
03.02.19 21:02:14<sseehh> as well as any runtime state summarized as a scalar
03.02.19 21:02:34<sseehh> this way there isnt just a general good/bad but a multidimensional pareito front to be optimized
03.02.19 21:02:49<dmiles> such genious code but it is sad so few are quaified to leverage it 
03.02.19 21:03:06<sseehh> i barely remember it. it was a one-off
03.02.19 21:03:10<sseehh>     final Quality BAD = quality("bad").value(-1);
                 <sseehh> final Quality GOOD = quality("good").value(+1);
03.02.19 21:03:26<dmiles> *nod* you could spend a year playing with it
03.02.19 21:03:35<sseehh> here the value's actual desirability is specified.  you could invert it and it would make it seek the bad feature instead of good
03.02.19 21:03:41<dmiles> it deserves a year from someone
03.02.19 21:04:04<sseehh> it could also specify both good and bad in the same branch
03.02.19 21:04:15<dmiles> well at least a couple more months than you would allow yourself to do
03.02.19 21:04:30<sseehh> i wanted to make it do what i was doing in nars with the value system
03.02.19 21:04:39<sseehh> as a general replacement for it
03.02.19 21:04:43<sseehh> but i didnt figure that out
03.02.19 21:04:51<sseehh> the main thing about this isnt finished is how it actually learns from the recorded data
03.02.19 21:04:58<dmiles> well interfacing it to NARS isnt that hard
03.02.19 21:05:02<sseehh> but many kinds of ML tool could apply here
03.02.19 21:05:22<dmiles> but sometimes i feel the NARS team might make that harder
03.02.19 21:05:32<dmiles> (i mena as tine has gone on)
03.02.19 21:05:58<sseehh> without having to synchronize()  with other developer it can go faster
03.02.19 21:06:00<dmiles> jsut due to trying to simplify things
03.02.19 21:06:52<dmiles> or synchronze() things
03.02.19 21:07:03<sseehh> today i changed somethng in narchy tasklink's these are the only task type that remain after some other major changes
03.02.19 21:07:14<sseehh> it basically collapsd up to 4 links into one
03.02.19 21:07:28<sseehh> and atomicaly merges all the components in the same proportion
03.02.19 21:07:44<dmiles> which is sorta what gmpower is thinking much about lately
03.02.19 21:08:14<dmiles> how to compact sequences into one group
03.02.19 21:08:16<sseehh> the point was to consolidate the link instances and the operations that have to sort them etc but now it is even more like a simple digraph like a blob that rapidly moves through the system
03.02.19 21:08:32<sseehh> yeah we both appreciate the compression as intelligence explanation
03.02.19 21:08:56<sseehh> http://mattmahoney.net/agi2.html
03.02.19 21:09:39<sseehh> http://mattmahoney.net/dc/dce.html#Section_14  1.4. Compression is an Artificial Intelligence Problem
03.02.19 21:10:30<dmiles> there are so many problems that any RL works on
03.02.19 21:10:41<dmiles> (as well even that)
03.02.19 21:11:20<dmiles> RL is a form of Competitiveness 
03.02.19 21:11:33<dmiles> RL as one form of Competitiveness 
03.02.19 21:12:14<dmiles> way to internally group things (compression) can be 
03.02.19 21:13:21<dmiles> so as you see those stacktraces as sentences in a new languag ethe system creates
03.02.19 21:13:42<dmiles> (or be it even a nars sequence)
03.02.19 21:13:58<sseehh> yeah it can be represented in cyc, nars.. its the same thing
03.02.19 21:14:17<sseehh> thats why that part is in the jcog module not nars specific
03.02.19 21:14:28<dmiles> yeah that was why i chose unification is it makes that language easier to work with
03.02.19 21:15:02<dmiles> at least easier to make translformations of that  language part of ints language
03.02.19 21:15:23<dmiles> at least easier to make tranformations of the language part of its language
03.02.19 21:15:41<dmiles> since i think humans cheat that way
03.02.19 21:15:45<sseehh> code <-> data
03.02.19 21:15:51<dmiles> yeah
03.02.19 21:15:54<sseehh> like it can go back and forth into intermediate form where its neither
03.02.19 21:15:56<sseehh> or both
03.02.19 21:16:23<dmiles> and always being ab le to be verbalized (having a textual represention) 
03.02.19 21:16:41<sseehh> intellij must have some really good pattern matching stuff for it to find the duplicates and also when methods are extracted it finds matching code even if the identifiers are different
03.02.19 21:17:08<dmiles> yeah .. this is what that kind of language is skilled at
03.02.19 21:17:20<dmiles> (the type of thing intellij is dowing)
03.02.19 21:17:27<sseehh> its some really good algorithm
03.02.19 21:17:44<sseehh> intellij is pretty big
03.02.19 21:17:47<sseehh> code-wise
03.02.19 21:17:56<dmiles> i've used their patterns language a couple times
03.02.19 21:18:23<dmiles> i dont remember even what they called it
03.02.19 21:18:27<sseehh> i wanted to make an opengl version of the gui
03.02.19 21:18:31<sseehh> replacing the swing it uses
03.02.19 21:18:54<dmiles> they made an eclip[se plugin before taking over intellij
03.02.19 21:19:31<sseehh> is it that 3 letter acronym starting with an M
03.02.19 21:19:37<sseehh> M.. something
03.02.19 21:19:46<dmiles> (jetbrains may have alwos been intellij but it was not the only systme it used to use)
03.02.19 21:20:01<sseehh> jetbrains is the company that makes intellij
03.02.19 21:20:33<dmiles> but then i swiched to JTransformer since refactors for java can be written in prllog
03.02.19 21:20:51<dmiles> but the other language was very close to prolog
03.02.19 21:21:19<dmiles> (the one Jetbrains was working on for refactoing)
03.02.19 21:21:58<dmiles> it alsl can be used to do advanced serach over your code
03.02.19 21:22:23<dmiles> might been MPS
03.02.19 21:22:41<sseehh> did you see that classgraph tool.  that is supposed to be the fastest but i havent used it
03.02.19 21:23:35<dmiles> i havent
03.02.19 21:24:02<sseehh> https://github.com/classgraph/classgraph/wiki
                 <dmiles> i wish there was one that could find minimum depandaies
03.02.19 21:24:32<dmiles> so that the javacyc can be broken into a few classes
03.02.19 21:24:37<dmiles> erm into a few groups
03.02.19 21:24:53<dmiles> though as i jsut typed that.. i jsut related how using MPS :P
03.02.19 21:25:31<dmiles> replacing innerlinks with dynmic call by name 
03.02.19 21:26:02<dmiles> jsut it be nice to have a callgraph tool do it for us
03.02.19 21:26:14* dmiles was confusing classgraph with callgraph
03.02.19 21:26:42<sseehh> theres more than one callgraph api i dont know whats best
03.02.19 21:26:55<dmiles> well classgraph will show the same info
03.02.19 21:27:03<dmiles> (which class is using which classeS)
03.02.19 21:27:05<sseehh> maybe even using jdk itself
03.02.19 21:27:09<sseehh> it has to do something similar in the JIT
03.02.19 21:27:20<sseehh> and more, interprocedural analysis
03.02.19 21:28:09<dmiles> well i often see the JIT decioding it will inline one at a time.. sometiems a child will or wont be inlined bepending on how much gasoline is left to be consumed for a particualr inline
03.02.19 21:28:45<dmiles> so in CYC we have millions of small methods
03.02.19 21:29:03<dmiles> so that JIT can figure it out
03.02.19 21:29:32<dmiles> millions of small methiods isntead of 100k slightly larger methods
03.02.19 21:29:50<dmiles> but of course this can create interdepancy hells
03.02.19 21:30:05<dmiles> but jit thios way inlines the most interdependant stuff
03.02.19 21:30:31<dmiles> since so much more code is shared this way
03.02.19 21:31:00<sseehh> there is a tool to show what gets inlined and what doesnt and why
03.02.19 21:31:07<sseehh> https://github.com/AdoptOpenJDK/jitwatch/wiki/Instructions
03.02.19 21:31:12<dmiles> so like most mehtods in c.c.tool.jtrl  will be called 1000s of times in c.c.java.
03.02.19 21:31:17<sseehh> it will say a method is too big or soething
03.02.19 21:31:29<dmiles> yeah we took that too big advbice to an extreme :P
03.02.19 21:31:38<sseehh> yeah but its not necessarily helpful
03.02.19 21:31:45<sseehh> if say 10 functions do the same thing for the same parameter
03.02.19 21:32:13<sseehh> or can be made to use the same method by adding another parameter etc
03.02.19 21:32:19<sseehh> but a lot of this should be done by the compiler
03.02.19 21:32:29<sseehh> so code quality doesnt get sacrificed
03.02.19 21:32:41<dmiles> yeah .. every hand optimization is dubious
                 <sseehh> its a balance but i think the IDE can eventually give better feedback so we dont have to guess so much
03.02.19 21:32:44<sseehh> especialy as we write the code
03.02.19 21:32:59<sseehh> which is what the opengl GUI would allow
03.02.19 21:33:03<sseehh> enough room to show these kinds of charts
03.02.19 21:33:18<sseehh> as overlays on an AST floating above the code
03.02.19 21:33:22<dmiles> what doi you think about the  10 cell array vs 10 filed object debate?
03.02.19 21:33:35<sseehh> i didnt catch that
03.02.19 21:33:38<dmiles> what do you think about the  10 cell array vs 10 fields object debate?
03.02.19 21:33:51<sseehh> oh
03.02.19 21:33:52<dmiles> oh it is based on 2-3 other debates
03.02.19 21:34:05<dmiles> one is the arrayvalidindex check
03.02.19 21:34:25<sseehh> in cases where there is typing involved, if you remove the typing by Object[]'ing it then the copmiler isnt aware so much of what the data involved could be
03.02.19 21:34:38<dmiles> arrayvalidindex checks have traditionally destroyed JIT opertunities
03.02.19 21:34:48<sseehh> not to mention the overhead of an array vs the fields in the object is more compact
                 <sseehh> but
03.02.19 21:35:02<sseehh> there is a jdk project called valhalla i think is the ultimate answer
03.02.19 21:35:08<sseehh> its just not in the latest jdk yet
03.02.19 21:35:10<sseehh> otherwise i would use it
03.02.19 21:35:22<sseehh> https://wiki.openjdk.java.net/display/valhalla/L-World+Value+Types
03.02.19 21:35:29<sseehh> its like C structs
03.02.19 21:35:41<dmiles> we entt rthrue and removed 90% of tghe array accesses in 2004
03.02.19 21:35:55<dmiles> and replaced it all as feilds
03.02.19 21:35:59<sseehh> https://wiki.openjdk.java.net/display/valhalla/Minimal+Value+Types
03.02.19 21:36:06<dmiles> and the system speed at least doubled
03.02.19 21:36:15<sseehh> thats good a step further would be to find common patterns
03.02.19 21:36:22<sseehh> so they can re-use the same interfaces but with different generics or something
03.02.19 21:36:48<sseehh> theres only so many combinations of types there has to be some overlap between some of the classes
03.02.19 21:37:00<dmiles> like just removbing all the varargs and going with 10 mehntods sped it up
03.02.19 21:37:03<sseehh> like when you take an old pre-lambda java code and they have something like
03.02.19 21:37:23<sseehh> interface ValidTester { boolean isValid(MyClass x); }
03.02.19 21:37:26<sseehh> and just change that to
03.02.19 21:37:32<sseehh> Predicate<MyClass>
03.02.19 21:37:51<sseehh> then the IDE and hopefully dev sees more options where it can be used
03.02.19 21:37:56<sseehh> like in streams or whatever
03.02.19 21:38:00<dmiles> right that Predicate<MyClass> means JIT might see the predciate
03.02.19 21:38:18<sseehh> it is unification
03.02.19 21:38:26<sseehh> just descdribed in awkward terms
                 <dmiles> ohj for finding the method
03.02.19 21:38:36<sseehh> abstracting a common code pattern
03.02.19 21:38:47<sseehh> using Generic args or not
03.02.19 21:38:58<dmiles> yeah it might just help peopel be bettter mentel
03.02.19 21:39:07<dmiles>  it might just help peopel be bettter mentally 
03.02.19 21:39:17<sseehh> it helps me, xjrn suggested it as a way for intelliJ refactoring to find more options for doign stuff with
03.02.19 21:39:22<dmiles> so they do les dumb things
03.02.19 21:39:33<sseehh> like the same interface but as a Predicate makes it seen by the IDE as something that can be used in Stream api
03.02.19 21:39:41<sseehh> which then allows it to suggest where Stream could be used
03.02.19 21:39:45<sseehh> not that it's awlays helpful there
03.02.19 21:39:48<sseehh> but thats just one example
03.02.19 21:40:03<dmiles> it one day will be more helpfull supposedly at this new way of doing things
03.02.19 21:40:22<sseehh> well at least in intelliJ refactoring like that is just a few keystrokes
03.02.19 21:40:33<dmiles> ide one day will be more helpfull supposedly .. this is new way of doing things
03.02.19 21:40:47<sseehh> yeah the code is much more malleable
03.02.19 21:40:49<dmiles> but nice that it is even helpfull!
03.02.19 21:41:26<sseehh> intellij refactorings are the best, i havent used eclipse in a few years but i doubt it has anything over it
03.02.19 21:41:35<dmiles> java does better at vtable optimizatrion than C++ 
03.02.19 21:41:51<sseehh> but probably theres things eclipse does that intellij doesnt so it probably helps to keep projects loadable by both
03.02.19 21:41:58<sseehh> like is possible with pom.xml
                 <dmiles> in Sxx PRolgo i removed all the chances it had at vtable optiization!
03.02.19 21:42:13<sseehh> yeah java can cache vtable based on runtime profiling
03.02.19 21:42:16<sseehh> JVM rather
03.02.19 21:42:20<sseehh> it applies to all JVM languages
03.02.19 21:43:13<sseehh>      new Prolog()
                 <sseehh>             .input(resource(TestEinsteinRiddle.class, "einsteinsRiddle.pl"))
                 <sseehh>             .solve("einstein(_,X), write(X).", o -> {
                 <sseehh>                 System.out.println(o);
                 <sseehh>                 if (finished[0])
                 <sseehh>                     return;
03.02.19 21:43:15<sseehh>                 Assertions.assertEquals("yes.\nX / german", o.toString());
03.02.19 21:43:17<sseehh>                 finished[0] = true;
03.02.19 21:43:19<sseehh>             });
03.02.19 21:43:21<sseehh> this is osme syntactical enhancement to tuprolog API i added
03.02.19 21:43:25<dmiles> i can btw make it so the cyc java uses reflection rather than outgoing links to class at least to break CYC-0jar up
03.02.19 21:44:14<sseehh> public Prolog solve(Term g, Predicate<Solution> eachSolution) {
03.02.19 21:44:17<dmiles> way CycLisp is so much faster than ABCL lisp was that ABCL lisp does it to everyhting by defuult
03.02.19 21:45:04<dmiles> i dont think it really slows it down once called
03.02.19 21:45:41<dmiles> but the ABCL compiler (differnt than Cyc compiler) does it in dumb places is why its slower
03.02.19 21:45:53<sseehh> yeah it can probably be made lazily loaded
03.02.19 21:46:12<sseehh> and also unloaded. with a memoization cache, softref weakref whatever
03.02.19 21:46:42<dmiles> yeha i added a Special classlaoder system for every file even
03.02.19 21:46:58<dmiles> i mena for each class uses its own classlaoder
03.02.19 21:47:18<dmiles> though it probly still thowing it all in parent
03.02.19 21:48:18<sseehh> http://www.cs.toronto.edu/cogrobo/Systems/golog_swi.pl this runs in tuprolog
03.02.19 21:48:36<sseehh> http://www.cs.toronto.edu/cogrobo/kia/simpleElevator
03.02.19 21:51:43<dmiles> as far as gettign a prolog merged into JAVACYC i dont havfe a huge rush to do that .. sinc ei have to port 2-3 applications right now to CYC 
03.02.19 21:52:02<dmiles> i not too apprehensive either about it
03.02.19 21:52:09<dmiles> even tuporlog might be good
03.02.19 21:52:51<dmiles> what this involves is replacing (well merging) things like tuprologs IntTerm with SubLInteger
03.02.19 21:53:10<dmiles> so that neteirh system has to convert between the two
03.02.19 21:53:30<dmiles> (when one system is about to call the other)
03.02.19 21:54:11<dmiles> this also makes it so like tuprlolog doesnt have to duplicate interning everyhtinglisp jsut got done interning
03.02.19 21:54:28<dmiles> such as atom symbols
03.02.19 21:55:00<dmiles> lisp has 100 base object types vs prolgo has 4 base object types
03.02.19 21:55:20<dmiles> well ok 30 vs 7 :P
03.02.19 21:55:44<dmiles> this means each lisp object type takes on pretending it is one of those 7
03.02.19 21:56:03<dmiles> also each of those 7 have a default Lisp type they are
03.02.19 21:56:47<dmiles> some are very clear.. and the ones that arent clear provide very neat cance for optiizaions
03.02.19 21:57:19<dmiles> ListTerm and LispCons 
03.02.19 21:57:47<dmiles> LispArrays are really neat when prolog can use them
03.02.19 21:58:18<dmiles> Also all the specialized typed objects from lisp are nice having prolog predicates able to user them
03.02.19 21:59:04<dmiles> even with WAM_CL there was many cases that there is no prolog equaicvalnt
03.02.19 21:59:23<dmiles> no prolog equivalent.. so i added the new datatypes as soemtnig new to prloog
03.02.19 21:59:58<dmiles> ?- use_module(library(wam_common_lisp)).
03.02.19 22:01:14<dmiles> its cute CYC is loading WAM_CL .. but i had a netwrok disconnect.. resrtaitng the network
03.02.19 22:01:28<dmiles> use_module(library(wam_common_lisp)).
03.02.19 22:01:32<dmiles> ?- use_module(library(wam_common_lisp)).
03.02.19 22:02:42<dmiles> well anyways  '#\ ' is a "Charavter"
03.02.19 22:02:54<dmiles> like  '#\A' 
03.02.19 22:03:08<dmiles> LispCharacter 
03.02.19 22:03:23<dmiles> in this case a 'Prolog Atom'
03.02.19 22:03:56<dmiles> ?- cl_eval(['class-of','#\\ '],O).
03.02.19 22:03:57<PrologMUD> dmiles: % O='#.(COMMON-LISP:FIND-CLASS \'COMMON-LISP:CHARACTER)'
                 <PrologMUD> dmiles: %  det(Yes,1)
03.02.19 22:04:10<dmiles> '#.(COMMON-LISP:FIND-CLASS \'COMMON-LISP:CHARACTER)' is a Clas
03.02.19 22:04:57<dmiles> the java object actualtly located at that atom refernce is a LispClass
03.02.19 22:05:40<dmiles> LispClass <-> SomeAtoms 
03.02.19 22:06:20<dmiles> which makes things much faster
03.02.19 22:07:10<dmiles> one memory issue is i have pointer to their gloval indexes in each object
03.02.19 22:07:37<dmiles> i mean that maybe makes it use up more ram than it has to
03.02.19 22:08:26<dmiles> Since io am using swi-prolog here i vilote my masdhalling rule
03.02.19 22:08:47<dmiles> see LispClass <-> SomeAtoms  exist like in a global store
03.02.19 22:09:09<dmiles> and exists that each object points to a key_value ref ina global store
03.02.19 22:09:23<dmiles> (which is where all objects are intened)
03.02.19 22:09:39<dmiles> if i was using sometjhing like tuprolog.. i just dont use an atom at all
03.02.19 22:09:44<dmiles> i jsut the LispClass
03.02.19 22:09:51<dmiles> the prolog reader sees the string..
03.02.19 22:10:15<dmiles> '#.(COMMON-LISP:FIND-CLASS \'COMMON-LISP:CHARACTER)'  and looks up the string "#.(COMMON-LISP:FIND-CLASS \'COMMON-LISP:CHARACTER)"   and fined the LispClass
03.02.19 22:10:22<dmiles> it was never even a proog atom
03.02.19 22:10:26<dmiles> it was never even a prolog atom
03.02.19 22:11:07<sseehh> yeah
03.02.19 22:11:21<sseehh> common interfaces instead of adapter instances
03.02.19 22:11:51<sseehh> https://github.com/automenta/narchy/blob/skynet5/util/src/main/java/jcog/data/list/Cons.java fwiw
03.02.19 22:12:23<dmiles> yeah 
03.02.19 22:12:42<sseehh> tuprolog had https://github.com/automenta/narchy/blob/skynet5/logic/src/main/java/alice/util/OneWayList.java its basically the same hting
03.02.19 22:12:45<sseehh> i should get rid of it
03.02.19 22:13:13<sseehh> tuprolog relies on strings a lot even for temporary keys and things
03.02.19 22:13:32<sseehh> nars product and inheritance = prolog struct
03.02.19 22:13:49<sseehh> in case i didnt explain this before it is maybe the most significant overlap of the data structures there
03.02.19 22:13:58<sseehh> prolog:name(x,y)
03.02.19 22:14:00<sseehh> prolog:  name(x,y)
03.02.19 22:14:04<dmiles> itrs also nice when we dont always require staruct are the same arity
03.02.19 22:14:07<sseehh> nars:  ((x,y)-->name)
03.02.19 22:14:18<dmiles> itrs also nice when we dont always require struct have the same arity to unify
03.02.19 22:14:25<sseehh> whcih si why my syntax translates name(x,y) to that
03.02.19 22:14:33<sseehh> so it seems like prolog or a c/js function call
03.02.19 22:14:36<sseehh> c/java/js
03.02.19 22:14:43<sseehh> but here lisp is the odd one out
03.02.19 22:15:08<dmiles> well lisp function can be seen as prolog preds minus a arg
03.02.19 22:15:10<sseehh> i use special ellipsis compounds for that
03.02.19 22:15:26<sseehh> it gets tricky when unifying ellipsis in commutive but non-commutive is a linear scan
03.02.19 22:15:41<sseehh> yeah i mean just the actual text representation of it
03.02.19 22:15:44<sseehh> lisp is unlike the others
03.02.19 22:15:55<sseehh> for no good reason
03.02.19 22:15:58<dmiles> ah
03.02.19 22:15:59<sseehh> :D
03.02.19 22:16:20<dmiles> well Prolog some reason felt compeled to stop using Sexperession notnation
03.02.19 22:16:45<dmiles> why Prolog felt compeled to stop using Sexperessions notation? got me
03.02.19 22:17:18<dmiles> though in wam_cl i use a reader macro both directions to allow syntax switching
03.02.19 22:17:37<dmiles> ?- {s:|(i am prolog)|}
                 <yesbot> Syntax error: Operand expected, unquoted comma or bar found
03.02.19 22:17:38<yesbot> {s
                 <yesbot> ** here **
                 <yesbot> :|(i am prolog)|} . 
                 <yesbot> lol.
03.02.19 22:17:44<dmiles> ?- {s:|(i am prolog)|}.
03.02.19 22:18:11<dmiles> vs lisp:  #p[i,am,prolog]
03.02.19 22:18:26<sseehh> whats better lisp or scheme?
03.02.19 22:18:50<dmiles> scheme has a coujple featrures that lisp is silly not having
03.02.19 22:19:38<dmiles> scheme though lacks all the things that makes lisp feel like not a tyoy
03.02.19 22:19:59<dmiles> scheme though lacks all the things that makes lisp not a toy
03.02.19 22:20:02<sseehh> the language or the libraries
03.02.19 22:20:07<dmiles> yeah
03.02.19 22:20:10<dmiles> esp that
03.02.19 22:20:17<dmiles> oh both
03.02.19 22:20:19<sseehh> because without knowing too much about either i see scheme impls they are smaller
03.02.19 22:20:45<dmiles> the language is unpredictable scheme to scheme
03.02.19 22:20:56<sseehh> lisp i see more variety in functions
03.02.19 22:21:04<dmiles> the libaries suffer due ot schemes can share libraries
03.02.19 22:21:25<dmiles> the libaries suffer due to scheme language cant share libraries
03.02.19 22:21:48<dmiles> lisp also has class overloading
03.02.19 22:22:13<dmiles> scheme was designed to not have such requirements of even having classes at all
03.02.19 22:22:20<dmiles> yet Scheme has continjuations
03.02.19 22:22:56<dmiles> for lisp i added these things but having really tested muich
03.02.19 22:23:45<dmiles> I would like what we do with Prolog to do with a couple more JVM lanmguages
03.02.19 22:24:04<dmiles> Kawa scheme perhaps
03.02.19 22:24:12<dmiles> Rhino
03.02.19 22:24:16<dmiles> etc
03.02.19 22:24:44<dmiles> etc = Jython, Perl, etc
03.02.19 22:25:38<sseehh> nashorn replaced rhino, then graal.vm replaces nashorn now
03.02.19 22:25:41<sseehh> for js
03.02.19 22:25:57<sseehh> jruby also on graal
03.02.19 22:26:18<sseehh> https://github.com/graalvm/simplelanguage
03.02.19 22:26:55<sseehh> https://github.com/graalvm/simplelanguage/blob/master/language/src/main/java/com/oracle/truffle/sl/SLLanguage.java#L297
03.02.19 22:27:05<sseehh> somehow it allows deeper integration with VM symbol tables, method dispatch etc
03.02.19 22:27:15<sseehh> or that what is supposed to offer
03.02.19 22:27:35<sseehh> but im not willing to learn this api framework yet
03.02.19 22:28:37<sseehh> https://github.com/graalvm/simplelanguage/blob/master/language/src/main/java/com/oracle/truffle/sl/nodes/call/SLDispatchNode.java#L72
03.02.19 22:29:06<sseehh>    @Specialization(limit = "INLINE_CACHE_SIZE", //
                 <sseehh>                     guards = "function.getCallTarget() == cachedTarget", //
                 <sseehh>                     assumptions = "callTargetStable")
                 <sseehh>     @SuppressWarnings("unused")
                 <sseehh>     protected static Object doDirect(SLFunction function, Object[] arguments,
03.02.19 22:29:09<sseehh>                     @Cached("function.getCallTargetStable()") Assumption callTargetStable,
03.02.19 22:29:11<sseehh>                     @Cached("function.getCallTarget()") RootCallTarget cachedTarget,
03.02.19 22:29:13<sseehh> @Cached("create(cachedTarget)") DirectCallNode callNode) {
03.02.19 22:29:15<sseehh> lol code inside annotations
03.02.19 22:29:27<dmiles> love it
03.02.19 22:30:36<sseehh> i guess its a way for the compiler to group common downstream predicates at points pustream of a function call
03.02.19 22:31:04<sseehh> of all the downstream conditoins
03.02.19 22:31:30<sseehh> probably doing what i tried to do with my predicate matcher trie but more cleanly
03.02.19 22:31:58<sseehh> https://github.com/graalvm/graaljs
03.02.19 22:32:13<sseehh> theyre really trying to compete with node.js v8 with this
03.02.19 22:32:58<sseehh> https://www.graalvm.org/docs/graalvm-as-a-platform/implement-language/
03.02.19 22:34:05<sseehh> https://medium.com/graalvm/graalvm-ten-things-12d9111f307d
03.02.19 22:34:15<sseehh> We can then compile and run that using our system C compiler and link to the native polyglot library in GraalVM. Again, it doesn’t need a JVM.
03.02.19 22:34:35<sseehh> We can compile that to a native executable, as we did with our topten program.
                 <sseehh> $ native-image --no-server -cp sis.jar:. Distance
                 <sseehh> ...
                 <sseehh> $ ./distance 51.507222 -0.1275 40.7127 -74.0059
                 <sseehh> 5570.25 km
03.02.19 22:36:06<sseehh> http://www.graalvm.org/sdk/javadoc/org/graalvm/polyglot/package-summary.html
03.02.19 22:36:37<dmiles> *nod*
03.02.19 22:37:07<sseehh> Enable Source Caching
                 <sseehh> Another good feature, GraalVM Polyglot API permits, is the source caching.
                 <sseehh> For that reason, use Source.Builder class that represents a builder for Source objects and allows the source to be parsed and compiled only once per execution Engine. It allows the compiled code to be reused across multiple contexts if they are created with an explicit engine. If no explicit engine is passed, then the context does not share code with other contexts.
03.02.19 22:40:42<dmiles> in the LARKC_CL system btw i have bene making sure that if you define a function/predicate iin any of its 4 languages that function is defined in all of them
03.02.19 22:41:17<dmiles> (in contrast to that ( just info))
03.02.19 22:41:22<dmiles> (*not* in contrast to that ( just info))
03.02.19 22:41:57<sseehh> which 4 languages exactlY?
03.02.19 22:42:35<dmiles> SubLisp, CommonLisp, Prolog, BSH/Java
03.02.19 22:43:14<dmiles> that is that i put them aviable in eash other global namespaces
03.02.19 22:43:37<dmiles> well as long as they are not already overridden
03.02.19 22:44:19<dmiles> appearing in java i suppose this is not really that true
03.02.19 22:44:45<sseehh> that many languages it is the point where it can get enough context to transcend them all
03.02.19 22:45:01<sseehh> like, a smart code editor that doesnt expect any syntax
03.02.19 22:45:30<dmiles> well programs like DAYDREAMER for isntnace start in common lisp but all of its functions are avable to the otehr languages
03.02.19 22:45:48<dmiles> i have to do that otherwise DAYDREAMER is a topy
03.02.19 22:45:54<sseehh> what i mean is if you dump all the symbols into a global namespace and use a search engine to reference them when typed
03.02.19 22:46:05<sseehh> then you can connect the words and arrange them like refrigerator magnets
03.02.19 22:46:09<sseehh> to spell out what you want
03.02.19 22:46:20<dmiles> yeah as far as syntax completelion i had to add that to JEditor
03.02.19 22:46:22<sseehh> it would show related items by association
03.02.19 22:46:52<sseehh> like if you stopped actually using any conventional development tool right now and built that first
                 <dmiles> as they also add to swi-prolog
03.02.19 22:47:19<dmiles> (to the dwim / autocomplete stuff)
03.02.19 22:47:21<sseehh> it wouldnt even need to deal with any of the source files it would all be in memory
03.02.19 22:47:31<sseehh> in its own fluid represntation
03.02.19 22:48:19<dmiles> CCY method cross refernceer is avaible over http
03.02.19 22:48:41<dmiles> (so is SWIs)
03.02.19 22:49:08<sseehh> yeah but CYC has some kind of graph of its own inside right?
03.02.19 22:49:17<dmiles> but it be nice to make them serve up things that all IDEs can understand like "LangeServerProtocol:
03.02.19 22:49:23<dmiles> yeah
03.02.19 22:49:37<sseehh> all it needs is a symbol table index, like lucene could provide
03.02.19 22:49:44<sseehh> including storing all the comments docs  etc
03.02.19 22:50:00<sseehh> and then in the UI would be ways to do basic things like create function calls and see the output
03.02.19 22:50:13<dmiles> yeah the comments and things appear in some stuff but not all stuff.. some cases i generate fake comments
03.02.19 22:50:17<sseehh> but it could involve whatever language underneath it wouldnt really matter to the user
03.02.19 22:51:00<dmiles> btw these are the things that take up the memory on top of the functionality
03.02.19 22:51:01<sseehh> http://lighttable.com/
03.02.19 22:51:36<dmiles> so for every 60 byte asm method i have like 500 byte descriptions :P
03.02.19 22:52:02<dmiles> of course some of that can be laziler
03.02.19 22:52:45<dmiles> Litetable even works with LSP i htink
03.02.19 22:53:09<dmiles> (languiage server protocal)
03.02.19 22:53:51<dmiles> war between LSP and SWANK .. right now we just have SWANK
03.02.19 22:54:11<dmiles> (emacs uses SWANK)
03.02.19 22:54:20<dmiles> but the whole world is going LSP
03.02.19 22:54:47<dmiles> right now we just have SWANK (we = CYC)
03.02.19 22:55:30<sseehh> yeah but probably there is a plugin for several of these
03.02.19 22:55:55<dmiles> *nod* i sure Intellij has both
03.02.19 22:56:59<sseehh>       $.10 ((({$1}-->MeasureFn(#2,#3))&&({#3}-->NonCompositeUnitOfMeasure))==>({$1}-->ConstantQuantity)). %1.0;.90% {0: 5s}
03.02.19 22:57:01<sseehh> SUMO in NAL
03.02.19 22:57:24<sseehh> it translates much more compactly because the forAll stuff is all implied by the variable type
03.02.19 22:57:25<sseehh> # or $
03.02.19 22:58:06<sseehh>       $.10 equal(MeasureFn(#1,Ounce),MeasureFn(DivisionFn(#1,8),Cup)). %1.0;.90% {0: 5T}
03.02.19 22:58:21<sseehh> the equal functor here is the actual functioning equal() thing that would get tested in evaluation
03.02.19 22:59:17<dmiles> i should look how NARS handles existential quantification 
03.02.19 22:59:25<sseehh> but here its hard to know if maybe this should have been translated as
03.02.19 22:59:29<dmiles> its also a tought thing 
03.02.19 23:00:11<sseehh> n/m
03.02.19 23:00:20<sseehh> existential is #
03.02.19 23:00:24<sseehh> it is called dependent var
03.02.19 23:00:31<sseehh> it has no restrictions it can appear anywhere
03.02.19 23:00:37<dmiles> part of my replacing of prolog with cycl has to do with spending 15 years changing my mind bi-anually how i will to existential quants
03.02.19 23:00:41<sseehh> but typically is introduced with && expressions have common parts
03.02.19 23:01:11<sseehh> $ is more restrictive it only can appear on balanced sides of a statement (-->, <->, ==>, or <=>)
03.02.19 23:01:25<sseehh> i removed <=> thinking i could do everything with bidirectional ==> but im thinking i need to add it again
03.02.19 23:01:47<dmiles> existential vars appearing in consequant and not in precond is always interesting
03.02.19 23:02:00<sseehh> # can appear anywhere
03.02.19 23:02:09<sseehh> even in terms with no pre/post condition
03.02.19 23:02:16<dmiles> well what we do with that verible matters
03.02.19 23:02:18<sseehh> just to state that something _is_
03.02.19 23:02:29<sseehh> (pixel(#x,#y)-->on).
03.02.19 23:02:38<dmiles> oh i meing appearing as singletons
03.02.19 23:02:53<dmiles> on-> pixel(#x,#y)
03.02.19 23:03:11<dmiles> as in "whnich pixel?"
03.02.19 23:03:20<sseehh> in question the query variable is better
03.02.19 23:03:25<sseehh> becauseit doesnt imply that it is or isnt
03.02.19 23:03:27<dmiles> just one though
03.02.19 23:03:30<sseehh> ?1
03.02.19 23:03:34<sseehh> ? is query var
03.02.19 23:03:35<sseehh> so
03.02.19 23:03:44<sseehh> (pixel(?x,?y)-->on)?
03.02.19 23:03:50<dmiles> nope
03.02.19 23:03:55<dmiles> i mena a rules such as  on-> pixel(#x,#y)
03.02.19 23:04:12<dmiles> enforcing such a rule
03.02.19 23:04:17<sseehh> you mean for all #x and #y in a range?
03.02.19 23:04:46<dmiles> for exmaple   "god -> demons(#x)" 
03.02.19 23:05:02<sseehh> what are you trying to say in this example
                 <dmiles> if there is a god there must be at least one demon
03.02.19 23:05:17<sseehh> (god ==> (#x --> demon)).
03.02.19 23:05:23<sseehh> or maybe
03.02.19 23:05:31<sseehh> ((#g --> god) ==> (#d --> demon)).
03.02.19 23:05:51<sseehh> and to clarify ((#g --> god) ==> godExist)
03.02.19 23:05:52<dmiles> (yeah i did say "a god")
03.02.19 23:06:07<sseehh> --> is inheritance big difference from ==> impl
03.02.19 23:06:21<sseehh> ==> is like kif =>
03.02.19 23:06:22<dmiles> ((#g --> god) ==> godExist)    ((godExist ==> (#d --> demon)).
03.02.19 23:06:46<sseehh> yeah these would be deducted to ((#g --> god) ==> (#d --> demon))
03.02.19 23:06:55<sseehh> but it might also hypothesize that they are the same thing
03.02.19 23:06:57<sseehh> and derive
03.02.19 23:07:03<dmiles> hehe
03.02.19 23:07:07<sseehh> (($x --> god) ==> ($x --> demon))
03.02.19 23:07:08<dmiles> by logic
03.02.19 23:07:13<sseehh> by a bug probably
03.02.19 23:07:19<sseehh> in how variables are normalized
03.02.19 23:07:26<sseehh> and also hopefully explicitly by a rule
03.02.19 23:07:30<sseehh> if that bug gets fixed
03.02.19 23:07:36<sseehh> because it is a useful hypothesis
03.02.19 23:07:39<dmiles> that bug exists?!!?!
03.02.19 23:07:46<sseehh> i think it might
03.02.19 23:08:09<sseehh> i think it is called skolemizing
03.02.19 23:08:14<dmiles> well not in CYC or in Logicmoo .. 
03.02.19 23:08:15<sseehh> or similar to it
03.02.19 23:08:19<dmiles> right i properly skolemize
03.02.19 23:08:30<sseehh> i try to but i just suspect there is a few edge cases where it might leak
03.02.19 23:08:42<dmiles> it taken years of study to decide which version is best.. then i change me mind
03.02.19 23:09:02<sseehh> if you take two beliefs and they both have #1 then the right hand side needs shifted
03.02.19 23:09:09<sseehh> because #1 and #1 would otherwise be equal
03.02.19 23:09:11<dmiles> unification algrythems hate this problem 
03.02.19 23:09:30<sseehh> but i do this during anonymization so it is just a matter of shifting the variable it gets mapped to
03.02.19 23:09:32<sseehh> so its not expensive
03.02.19 23:09:51<sseehh> there is also the case whree #1 and #2 are unified and here a common variable is created
03.02.19 23:09:53<sseehh> #1#2
03.02.19 23:10:01<dmiles> the only reason i create SxxProlog was to work on this one problem !
03.02.19 23:10:03<sseehh> this is a case where it should merge the vars
03.02.19 23:10:43<dmiles> i created special case prolog vars about how that merge is to take place
03.02.19 23:11:12<dmiles> how after that merge what is the new physics arround the next merge?
03.02.19 23:12:02<sseehh> nars handles this in a simpler way because the variables are always scoped to the task
03.02.19 23:12:05<dmiles> the  we have to have vars that actualyl pass arroudn their godness and whatness
03.02.19 23:12:07<sseehh> not to a runtime
03.02.19 23:12:13<sseehh> well not that prolog is either
03.02.19 23:12:25<sseehh> but the variables can traverse through multiple unifications
03.02.19 23:12:32<sseehh> so prolog its a slightly different problem
03.02.19 23:12:48<dmiles> well i do like to say that first #1 is pretty contextual
03.02.19 23:12:50<sseehh> but i was trying to bridge the difference with the evaluation stuff
03.02.19 23:13:15<dmiles> (all vars are very contextual)
03.02.19 23:13:42<sseehh> nars makes the ($1 --> x). illegal for a task since it's not balanced
03.02.19 23:13:52<dmiles> i have a bunch of tests for how the probem is being delt with
03.02.19 23:13:58<sseehh> but (#1 --> x). is valid
03.02.19 23:14:03<sseehh> (?1 --> x). is not valid because its not a question
03.02.19 23:15:28<dmiles> % means total 5 puppies 
                 <dmiles> :- test_sanity( { findall(X,puppy(X),L),length(L,5) }).
                 <dmiles> % 2 are for sure actually cute
                 <dmiles> :- test_sanity( { findall(X,(puppy(X),cute(X)),L),length(L,2)}).
03.02.19 23:15:29<dmiles> % leaving 3 more as _only_ possibly cute
                 <dmiles> :- test_sanity( { findall(X,(puppy(X),poss(cute(X)),naf(cute(X))),L),length(L,3)}).
03.02.19 23:15:30<dmiles> % the last puppy is not for sure known cute or or not cute so it may be ugly
03.02.19 23:15:31<dmiles> :- test_sanity( { findall(X,(puppy(X),poss(ugly(X))),L),length(L,1)}).
03.02.19 23:15:47<dmiles> oops those ar ethe easy tests
03.02.19 23:16:12<dmiles> % There is a puppy we call puppy2
                 <dmiles> :- test_boxlog([+assert,+existentialize_objs],puppy(puppy2)).
                 <dmiles> % cute things cannot be ugly things and visa versa
                 <dmiles> :- test_boxlog([+assert],forall( X, iff(cute(X),~ugly(X)))).
03.02.19 23:16:35<dmiles> % there are 2 (for sure) cute puppies
                 <dmiles> :- test_boxlog([+assert],exactly(2, X, puppy(X) & cute(X))).
                 <dmiles> % there are 3 (for sure) hungry puppies
03.02.19 23:16:36<dmiles> :- test_boxlog([+assert],exactly(3, X, puppy(X) & hungry(X))).
03.02.19 23:17:27<dmiles> anyways the system must make up imaginary puppies and put them into the video game
03.02.19 23:17:32<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/test/java/nars/op/ListFuncTest.java#L112
03.02.19 23:17:57<dmiles> and have them follow the rules
03.02.19 23:18:17<dmiles> not make too manyh or too little
03.02.19 23:18:29<sseehh> is that anything like what happens in that test
03.02.19 23:18:46<sseehh> the findall i guess is implied by the Evaluation.eval in java
03.02.19 23:18:53<sseehh> but imagine if that were in the code somehow
03.02.19 23:19:15<dmiles> your test you mean?
03.02.19 23:19:37<dmiles> oh in my test they are only put into a text-only video game
03.02.19 23:19:38<sseehh> findall(append(#x,#y,(x,y)), append(#a,#b,(a,b)), ...
03.02.19 23:19:43<sseehh> yeah i meant my test
03.02.19 23:19:49<sseehh> if it did something similar to your test
03.02.19 23:20:07<dmiles> work of your test make sure it gets the prolog bindings
03.02.19 23:20:44<dmiles> that is you are testing that you get all the choices
                 <sseehh> i dont necessarily want it to invoke prolog as-is. im still trying to find the best way to use this sort of stuff within nars
03.02.19 23:20:56<sseehh> yeah there is a list of builtin functions that could be used here
03.02.19 23:21:05<sseehh> and the larger prolog operator index would be a next step
03.02.19 23:21:33<dmiles> ?- append(X,Y,[a,y]).
03.02.19 23:21:34<PrologMUD> dmiles: % X=[], Y=[a,y]
                 <PrologMUD> dmiles: % X=[a], Y=[y]
                 <PrologMUD> dmiles: % X=[a,y], Y=[]
                 <PrologMUD> dmiles:  det(Yes,3)
03.02.19 23:22:04<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/test/java/nars/op/SetFuncTest.java#L76
03.02.19 23:22:06<sseehh> member and sort
03.02.19 23:22:09<dmiles> also though the most important tests to is how we doeal with infinately sized lists
03.02.19 23:22:10<sseehh> i forget if sort is standard prolog
03.02.19 23:22:35<sseehh> yeah for that i want a consciously manipulated cursor interface to traverse
03.02.19 23:22:38<sseehh> at that level
03.02.19 23:22:51<sseehh> thats the distinctoin between what a programming lagnuage does and how a cognitive agent should wrk
03.02.19 23:22:59<sseehh> that illustrates the threshold to me pretty clear
03.02.19 23:23:07<dmiles> yeah that was what i am after as well i returnt he cosure that has that cursor interface
03.02.19 23:23:23<sseehh> at the lower level vs. the higher level that can decide
03.02.19 23:23:32<dmiles> this also makes the system much faster only returning an interface
03.02.19 23:23:51<sseehh> well if its processing a large list it wont fit in nars term limitations anyway
03.02.19 23:24:20<dmiles> that interface is used by more code later or not 
03.02.19 23:24:45<dmiles> but it gets arorund the infinities problems
03.02.19 23:24:56<sseehh>                 actionPushButtonMutex($$("left"), $$("right"), ()->Left(), ()->Right(), moveThresh::floatValue);
                 <sseehh>                 actionPushButtonMutex($$("up"), $$("down"), ()->Up(), ()->Down(), moveThresh::floatValue);
                 <sseehh>                 for (char c : alphabet) {
                 <sseehh> actionPushButton($.func(WRITE, $.the(c)), writeThresh::floatValue, () -> write(c));
03.02.19 23:24:57<sseehh> turing tape
03.02.19 23:24:59<sseehh> controls
03.02.19 23:25:22<sseehh> $.func here produces the equiv of a prolog struct
03.02.19 23:25:32<sseehh> i just call it func because it is like a java/c/js function
03.02.19 23:25:34<sseehh> method call
03.02.19 23:26:02<sseehh> the pushbutton stuff binds lambdas to action concepts
03.02.19 23:26:35<sseehh> so entering left! would set that goal and press the button
03.02.19 23:26:37<dmiles> you might be one of those people that realized (like me) wht tuning hyphothesis about turing machine ended up being irrealiant
03.02.19 23:26:45<sseehh> but without a specific time interval it would be eternal and it would always be pressed
03.02.19 23:26:49<sseehh> unless a contradictory goal was given
03.02.19 23:27:23<dmiles> by returning inferface and buttons to the turing machine
03.02.19 23:27:51<sseehh> i think the neural turing machie has the same idea
03.02.19 23:28:05<dmiles> yeah it sounds like it
                 <sseehh> https://en.wikipedia.org/wiki/Neural_Turing_machine
03.02.19 23:28:22<sseehh> its a recurrent NN that controls a head and writes on a tape but fully differntial
03.02.19 23:29:00<sseehh> there are images of the memory visualized showing it during training
03.02.19 23:29:10<sseehh> its iffy.. like any NN it just a bunch of numbers
03.02.19 23:29:22<sseehh> approximating some function
03.02.19 23:29:37<sseehh> and also limited to the size of the dimensions its trained for
03.02.19 23:29:54<sseehh> although i guess it could control a tape machine and slide the tape infinitely in any direction
03.02.19 23:30:19<dmiles>  we cant predicact whaty it might do :)
03.02.19 23:30:25<sseehh> it could have infinite memory but its capacity, what its trained for in the recurrent neural net is limited. but maybe it can metaprogram that with what it writes on the tape... i am not sure what the limits of NTM are
03.02.19 23:30:55<sseehh> gmpow2 translated a NTM impl its here https://github.com/automenta/narchy/blob/volatile1/util/src/main/java/jcog/learn/ntm/NTM.java
03.02.19 23:31:30<sseehh> public class HeadSetting   
03.02.19 23:31:31<sseehh> {
                 <sseehh>     public final UVector addressingVector;
                 <sseehh>     public final ShiftedAddressing shiftedAddressing;
                 <sseehh> public final Unit gamma;
03.02.19 23:31:40<sseehh> the address is a vector not just a discrete #
03.02.19 23:32:03<sseehh>     private final Unit[] _eraseVector;
                 <sseehh>     private final Unit[] _addVector;
                 <sseehh> private final Unit[] _keyVector;
03.02.19 23:32:29<sseehh> but its still based on fixed sizes
03.02.19 23:32:30<sseehh> []
03.02.19 23:32:56<sseehh> making the equivalent of this in NARS it would be like the difference between a fixed size array (not a list) and a variable size list, or hashmap
03.02.19 23:33:47<sseehh> more like a hashmap because you can always just use integers as keys and emulate the list
03.02.19 23:34:31<sseehh> https://github.com/automenta/narchy/blob/volatile1/test/src/test/java/jcog/test/NTMSequenceLearningTest.java#L24 even has one unit test
03.02.19 23:34:38<sseehh> but beyond that i have no clue how to use it
03.02.19 23:35:01<sseehh> same with LSTM https://github.com/automenta/narchy/blob/volatile1/test/src/test/java/jcog/test/LSTMTest.java#L26 also from gmpow2
03.02.19 23:35:20<sseehh> NTM basically has LSTM's or something like it in it
03.02.19 23:36:02<sseehh> The memory interactions are differentiable end-to-end, making it possible to optimize them using gradient descent.[2] An NTM with a long short-term memory (LSTM) network controller can infer simple algorithms such as copying, sorting, and associative recall from input and output examples.[1] They can infer algorithms from input and output examples alone. 
03.02.19 23:36:46<sseehh> output form SUMO KIF translation https://gist.github.com/automenta/23e71ae6aa8508cb6350ee5eb62fe0f1#file-gistfile1-txt-L1992
03.02.19 23:36:55<sseehh> lots of errors though scrolling up
03.02.19 23:37:30<sseehh> the "."((( lines are commands which the KIF translates into. if input they get normalized and budgeted
03.02.19 23:37:36<sseehh> and become beliefs hence the .
03.02.19 23:37:41<sseehh> if it was "!" it would produce goals !
03.02.19 23:37:52<dmiles> 0 ((&&,agent($1,#2),agent($1,#3),({$1}-->Meeting))==>holdsDuring(WhenFn($1),"`(orientation #AGENT1 #AGENT2 Near)")). %1.0;.90% {0: 
03.02.19 23:37:57<sseehh> it allows not having to specify the default budget and saves space if that were serialized
03.02.19 23:38:01<dmiles> that is not supposed to be quoted though?
03.02.19 23:38:18<sseehh> bz2 of these kif are about a few k, definitely more compact than the .kif source
03.02.19 23:38:25<sseehh> right those just arent handled yet
03.02.19 23:39:14<dmiles> another trick .. if to canonicalize WhenFn($1) into Equals
03.02.19 23:39:27<sseehh> if you put KIF into prolog and you asked it queries you would definitely get answers. but the difference with nars is just dumping these into memory, it isnt following a procedure for carefully checking all the possible preconditions unifying them etc
03.02.19 23:39:28<dmiles> WhenFn($1) is secreyl a #2($1)
03.02.19 23:39:32<sseehh> but maybe it should have something like that
03.02.19 23:40:04<sseehh> well WhenFn looks like its sayingn the 'time of' $1
03.02.19 23:40:06<sseehh> right?
03.02.19 23:40:27<dmiles> what would be harsh is if NARS was made to be incable of certain things
03.02.19 23:40:42<dmiles> yeah 'time of'
03.02.19 23:40:53<dmiles> so $1 is the witness to an existential
03.02.19 23:41:02<sseehh> but it is matched by $1 on the left side of the impl
03.02.19 23:41:06<sseehh> so its an indep here
                 <dmiles> to existential segment of vlaues in this case
03.02.19 23:41:19<sseehh> but #2 and #3 arent
03.02.19 23:42:03<sseehh> i dont think i follow whatever forall specifies in the KIF. i just go by what NARS allows and it seems to result the same
03.02.19 23:42:18<sseehh> i just check if the variable is actually balanced, if so then $ otherwise #
03.02.19 23:42:28<dmiles> that works
03.02.19 23:42:42<sseehh> whoever came up with the $ and # is pretty clever
03.02.19 23:43:00<sseehh> as a way to avoid having to write backwrads E and upside down A
03.02.19 23:43:03<sseehh> and repeating the variables
03.02.19 23:43:10<dmiles> i use aprocessdure that ends up show me somethjing whta i thought was going to be # turns out to sometimes be a #
03.02.19 23:43:11<dmiles> oops
03.02.19 23:43:15<dmiles> i use aprocessdure that ends up show me somethjing whta i thought was going to be # turns out to sometimes be a $
03.02.19 23:43:32<sseehh> yeah there could be rules which convert between the two
03.02.19 23:44:17<dmiles> --,connected($PART,$BOTTOM)),part($PART,#OBJECT),bottom($BOTTOM,#OBJECT))==>orientation($PART,$BOTTOM,Above))
03.02.19 23:44:24<dmiles> example of what you sadi and is fine
03.02.19 23:44:30<sseehh> well a common variable can be created between differnet types #1$2
03.02.19 23:44:31<dmiles> example of what you said .. and is fine
03.02.19 23:45:02<sseehh> i need to check if it can actually
03.02.19 23:45:37<dmiles> examle?
03.02.19 23:46:11<sseehh> like (#x --> y)   (($x --> y) ==> ($x --> z))  
03.02.19 23:46:25<dmiles> ah
03.02.19 23:46:28<sseehh> could derive (#x --> z) somehow
03.02.19 23:46:36<sseehh> i should add that test
03.02.19 23:46:42<dmiles> yeha in logicmoo/sigma i had to guard agasint that
03.02.19 23:46:54<sseehh> this is what it should do
03.02.19 23:47:03<sseehh> i need to make sure it does
03.02.19 23:47:06<dmiles> a typeical exmaple was lke  parent(?x)==>mother(?x)
03.02.19 23:47:34<dmiles> mother(?x)=>female(?X)
03.02.19 23:48:07<dmiles> so what i did was actualy accept things unless otherwise knonw
03.02.19 23:48:16<sseehh> test.believe("(#x --> y)").believe("(($x --> y) ==> ($x --> z))").mustBelieve(cycles, "(#x-->z)", 1f, 0.81f);
03.02.19 23:48:34<dmiles> parent(?x)==>mother(?x) is only true when  female(?x) was ok
03.02.19 23:49:19<dmiles> #x --> y ok only of  (#x --> z) was ok
03.02.19 23:49:28<sseehh> 'ok' you mean true?
03.02.19 23:49:41<dmiles> ok means "not false"
03.02.19 23:50:07<dmiles> not false = i cant create a singma proof showing why it was false
03.02.19 23:50:18<sseehh> ok
03.02.19 23:50:30<dmiles> ~P  fails to be provable
03.02.19 23:50:43<sseehh> that would be equivalent  to NAL freq=0 "never"
03.02.19 23:50:46<dmiles> P can also fail
03.02.19 23:51:00<sseehh> well its not the same as 'fail' realy
03.02.19 23:51:04<sseehh> in the same way
03.02.19 23:51:13<sseehh> see something could be provable to never happen and i think thats what you mean
03.02.19 23:51:28<sseehh> provably false different from not provable true or false
03.02.19 23:51:30<dmiles> sigma and cyc use at least a 4 value logic (though we get in trouble if we start telling pepople that)
03.02.19 23:52:16<dmiles> (in trouble because they want to know more)
03.02.19 23:52:44<dmiles> well we want the falseness to nave never happened i suppsoe
03.02.19 23:53:08<sseehh> heres another difference with prolog
03.02.19 23:53:09<sseehh> test.believe("(#x --> z)")
                 <sseehh>             .believe("(($x --> y) ==> ($x --> z))")
                 <sseehh>             .mustBelieve(cycles, "(#x-->y)", 1f, 0.45f);
03.02.19 23:53:10<dmiles> well we want the falseness to never have happened
03.02.19 23:53:16<sseehh> before i showed matching the precondition
03.02.19 23:53:28<sseehh> here it derives the precondition from matching the postcondition but the confidence is lower
03.02.19 23:54:21<sseehh> because it could also be the case the --($x --> y) ==> ($x --> z)
03.02.19 23:54:38<sseehh> so it is just guessing when it believes that the positive case is the one
03.02.19 23:54:55<dmiles> --($x --> y) ==> ($x --> z)    ==>    ($x --> y) ==> --($x --> z)
03.02.19 23:55:08<sseehh> no that isnt true in NAL
03.02.19 23:55:18<sseehh> except by a derivation rule which introduces confidence loss (contraposition)
03.02.19 23:55:41<dmiles> ah that good.. i was thinking -- makes it a special case
03.02.19 23:55:45<sseehh> (--S ==> P), P |- (--P ==> --S), (Belief:Contraposition)
03.02.19 23:55:56<sseehh> well maybe it isnt quite the same thing
03.02.19 23:56:06<sseehh> /    a→b == ¬b→¬a		# contra positition [Lex contrapositionis]
03.02.19 23:56:14<sseehh> accoding to classical logic this is what contraposition means
03.02.19 23:56:24<dmiles> depending on waht side the negation is on.. can also mean difernt thnigs
03.02.19 23:56:35<sseehh> its like there are 4 quadrants to the boolean matrix
03.02.19 23:56:39<sseehh> and they could all be true or false
03.02.19 23:56:51<dmiles> yeah it is that 1 of those 4 never mater
03.02.19 23:57:12<sseehh> it has to allow every possible boolean permutation that could happen
03.02.19 23:57:38<sseehh> but there is a trick that is  (x ==> --y) is the same as --(x ==> y)
03.02.19 23:57:48<sseehh> but not (--x ==> y)  --(x ==> y)
03.02.19 23:58:00<sseehh> the 2nd one is not following NAL
03.02.19 23:58:05<sseehh> it creates like a funneling
03.02.19 23:58:18<sseehh> because it allows the precodntion to take either true or false like an if/then statement
03.02.19 23:58:24<sseehh> and what the implication is actually stating is the output
03.02.19 23:58:28<sseehh> whether that is true or false
03.02.19 23:58:44<sseehh> so its like a mapping from (true || false) ==> x
03.02.19 23:58:50<dmiles> byw this is example why cyc needed a 4 value logic 
                 <sseehh> both can be true
03.02.19 23:59:06<sseehh> and both can be false and this is how invertor could be implemented
03.02.19 23:59:13<dmiles> needed it for cases of "dont mater"
03.02.19 23:59:14<sseehh> (somethingTrue ==> --anotherThing)
03.02.19 23:59:22<sseehh> and then (--anotherThing==>somethingElse)
03.02.19 23:59:37<sseehh> but also (anotherThing ==> somethingElse) too
03.02.19 23:59:46<sseehh> meaning whethr its true or false its the case that somethingElse is true
04.02.19 00:00:04<sseehh> then it can derive somethingElse just as an unconditional belief
04.02.19 00:00:10<sseehh> (to some degree as always)
04.02.19 00:00:22<dmiles> when the left side is false or true the the somethingElse must be true
04.02.19 00:00:28<dmiles> such as writesWithOneHand
04.02.19 00:00:44<dmiles> oops bad exmaple
04.02.19 00:01:05<sseehh> but in the other case if you have both (x ==> y) and (x ==> --y) then the conclusion is x implies y "maybe" or 50% if they are balanced
04.02.19 00:01:27<sseehh> but the beliefs dont destroy each other
04.02.19 00:01:37<sseehh> unless memory compression forces them to revise
04.02.19 00:01:49<sseehh> they are stored separatley so their individual evidence id's remain independent
04.02.19 00:02:00<sseehh> so it can follow one path of reasoning that is independent of the other
04.02.19 00:02:09<sseehh> and the signals dont get crossed and re-crossed
04.02.19 00:02:16<sseehh> like probably what happens in opencog if the same thing were tried
04.02.19 00:02:21<dmiles> yeah that makes sense to presenrve
04.02.19 00:02:36<dmiles> thogh -- P  can start to destroy a P ?
04.02.19 00:02:53<sseehh> i couldnt find evidence tracking in this https://github.com/opencog/atomspace/tree/master/opencog/rule-engine
04.02.19 00:02:55<dmiles> erm not despory .. i just mean reduce
04.02.19 00:03:02<sseehh> so i have to assume it doesnt
04.02.19 00:03:12<sseehh> it balances it out
04.02.19 00:03:23<dmiles> they might be treated as two diffenrt litteral.. which is fine
04.02.19 00:03:26<sseehh> so if you have the goal to push a button and at the same time the goal to not push a button..
04.02.19 00:03:55<sseehh> unless one is strongly overriding the other then it might oscillate until it decides
04.02.19 00:04:23<dmiles>  oscillation at least might create desisions
04.02.19 00:04:31<sseehh> right it helps elucidate a contrasting opinion
04.02.19 00:04:51<sseehh> unless it really doesnt matter then pressing a button or not wont make a difference
04.02.19 00:04:55<sseehh> it might as well keep pressing and releasing it
04.02.19 00:05:02<dmiles> :)
04.02.19 00:05:21<dmiles> then attention finaly makes it get bored
04.02.19 00:05:24<sseehh> or the button could just have a debounce filter
04.02.19 00:05:29<sseehh> and no effect will happen when its meta-stable
04.02.19 00:05:49<sseehh> like it has to be 75% positive about pressing it to actually press it
04.02.19 00:05:56<dmiles> ah
04.02.19 00:05:58<sseehh> but i think this kind of threshold actually needs to be adaptive
04.02.19 00:06:02<sseehh> i experimented with this a lot
04.02.19 00:06:03<dmiles> for sure
04.02.19 00:06:07<sseehh> because different games have different controls
04.02.19 00:06:22<dmiles> also we want ot learn the right thresholds anywqays
                 <sseehh> like mario brothers is different from tetris
04.02.19 00:06:35<sseehh> but these are differnt from something like a racing game where you want proportional control over steering and throttle
04.02.19 00:06:45<sseehh> interpreting goal output for these game inputs
04.02.19 00:06:47<sseehh> many options exist
04.02.19 00:07:23<sseehh> https://github.com/automenta/narchy/blob/volatile1/app/src/main/java/nars/agent/NAct.java#L271
04.02.19 00:07:36<sseehh> here is a construct i call pushbutton mutex which is supposed to work like two keys that do opposite things
04.02.19 00:07:48<dmiles> yeha in racing game i would take the option of pretending there are several buttons placed over the sering whell
04.02.19 00:07:59<sseehh> rather than just allowing them to call opposite actions it actively stops both when both are pressed
                 <dmiles> steering wheel
04.02.19 00:08:23<sseehh> and there is a configurable threshold buti havent experimented with changing it
04.02.19 00:08:25<sseehh> i just set it at 50%
04.02.19 00:08:55<sseehh> https://github.com/automenta/narchy/blob/volatile1/lab/src/main/java/nars/experiment/FZero.java#L137 different steering wheels for the game fzero
04.02.19 00:09:11<sseehh> a simple left/right pair, a tank driving mode
04.02.19 00:09:19<sseehh> a steering wheel like left/right heading adjustment
                 <sseehh> etc
04.02.19 00:09:30<dmiles> *nod*
04.02.19 00:09:31<sseehh> none of these are great
04.02.19 00:09:34<sseehh> the way they are now
04.02.19 00:09:38<sseehh> could just be parameters or something else
04.02.19 00:09:46<sseehh> i tried adding a PID controller
04.02.19 00:09:55<sseehh> that sort of smooths out the feedback signal and is less distracting at least
                 <dmiles> steering whole confing selteter :P
04.02.19 00:10:07<dmiles> steering wheel config selcter :P
04.02.19 00:10:26<sseehh> yeah it 'cockpit re-assembler'
04.02.19 00:10:31<sseehh> eventually
04.02.19 00:10:43<sseehh> it would have to know how to wire a new input to a control interface
04.02.19 00:10:49<sseehh> one that it 'likes'
04.02.19 00:11:16<sseehh> maybe there is a general purpose 'button' model that has an adjustable response curve
04.02.19 00:11:21<sseehh> and a few control parameters are all that needs
04.02.19 00:11:23<dmiles> also by picking one it 'likes'  that means it knows how to use it to
04.02.19 00:11:35<sseehh> knows and feels confident that it can use it
04.02.19 00:11:42<sseehh> or use it in situation X
04.02.19 00:11:54<sseehh> like, having to drive while also reading wikipedia
04.02.19 00:12:03<sseehh> vs. having to drive only
04.02.19 00:12:49<sseehh> it also needs to know there are options for adding those components
04.02.19 00:12:57<sseehh> so that when it learns a new interface it knows to try all of them
04.02.19 00:12:59<sseehh> or some of them
04.02.19 00:13:15<sseehh> or how to imitate an example with them
04.02.19 00:13:24<sseehh> an example prvided by a user or something else
04.02.19 00:13:38<sseehh> in the end its just signal processing
04.02.19 00:13:41<sseehh> and functoin approximation
04.02.19 00:13:51<dmiles> this "adding of componnets" language has a cockpit of "adding of componnets"
04.02.19 00:14:05<sseehh> yeah the meta-cockpit
04.02.19 00:14:13<sseehh> which it may not even realize exist at first
04.02.19 00:14:29<sseehh> like the construct in the matrix
04.02.19 00:14:30<dmiles> well often we have to give it its first meta-cockpit
04.02.19 00:15:06<dmiles> and/or a cockpit to meta-size over
04.02.19 00:15:08<sseehh> or it might realize the one is in a larger one and there are sibling environments and eventually sees the patterns between them
04.02.19 00:15:41<sseehh> or it might have differnt parts of the system focused in differnt areas that are totally unaware of each other
04.02.19 00:16:12<sseehh> which can connect if the user just inputs one clue
04.02.19 00:16:27<sseehh> otherwise they are entirely disjoint
04.02.19 00:16:41<dmiles> an advantage humans have in their programming is they tend to see paterns that really are not there .. all we need is a single poorly thought out clue
04.02.19 00:17:13<sseehh> yeah
04.02.19 00:17:22<sseehh> the mind especially unstable mind can amplify it
04.02.19 00:17:28<sseehh> continously
04.02.19 00:17:51<dmiles> oh what i really meant ot say there is we construct a clue-system even when i makes no sense to construct clue systems
04.02.19 00:17:55<sseehh> with NAL the confidence is bounded or at least you can ensure its bounded. you could also make an insane NAL
04.02.19 00:18:01<sseehh> where it grows overconfident
04.02.19 00:18:38<dmiles> the auto-clue cosntructuion system is like a dial 
04.02.19 00:18:53<dmiles> the auto-clue cosntructuion system is like a dial as to how many we invent per minute
04.02.19 00:19:16<dmiles> more dopamine the more we invent
04.02.19 00:19:56<sseehh> yeah some noise gets amplified unnecessarily
04.02.19 00:20:01<dmiles> just liek how many times per-N we screw with rewiring a cockpit
04.02.19 00:20:37<sseehh> signal to noise ratio is signal processing sciencde
04.02.19 00:20:48<sseehh> as well as digitization of analog signals, nyquist theorm
04.02.19 00:20:55<sseehh> non linear amplifiers
04.02.19 00:21:00<sseehh> like distortion effect pedal
04.02.19 00:21:01<dmiles> we unnecessarily amplify certain noice just because we not seeing a clue
04.02.19 00:21:41<sseehh> the clue being.. that there is a voice to skull radio transmitter actually broadcasting
04.02.19 00:21:48<sseehh> and that one isnt crazy
                 <sseehh> yeah
04.02.19 00:21:57<sseehh> i still never decided that one
04.02.19 00:22:22<dmiles> yeah .. i think these factors are so present they make use organize into soemthing appearing to be coherent
04.02.19 00:22:23<sseehh> i couldnt find the transmitter in the house at least
04.02.19 00:22:43<dmiles> such as making us walk arround a house searching for somehting
04.02.19 00:23:03<sseehh> well if a voice tells you to look for the transmitter
04.02.19 00:23:11<sseehh> maybe i just really want to see what the transmitter looks like
04.02.19 00:23:20<sseehh> and know if this thing is real or not
04.02.19 00:23:28<sseehh> but the question is what caused the voice
04.02.19 00:24:15<dmiles> in this case it sdopamine telling you to like for proof you are being spied on.. next comes needing to prove that it was a legit thouhgt
04.02.19 00:24:27<sseehh> yeah there are differnt levels involved
04.02.19 00:24:33<sseehh> the higher level cognition is already fooled by that point
04.02.19 00:24:50<dmiles> its busy trying to cover its ass now
04.02.19 00:25:42<dmiles> (to assume information to justify it)
04.02.19 00:26:05<sseehh> a more fundamental example is like you said hearing patterns that dont exist i think  this is pareidolia or something
04.02.19 00:26:07<dmiles> mopst studies show this when two 1/2s of braisn are disconnected
04.02.19 00:26:11<sseehh> like hearing people talking when its just noise
04.02.19 00:26:54<dmiles> (when one 1/2 starts to act.. the other 1/2 explains why)
04.02.19 00:27:16<sseehh> or 1/3 vs 1/3.. or 1/n etc
04.02.19 00:27:47<dmiles> werid it wasnt you but i astarted with 1/2 and thehny mentioned 1/3 .. 1/n etc :P
04.02.19 00:27:50<sseehh> Hemi-Sync is short for Hemispheric Synchronization, also known as brainwave synchronization. Monroe claimed that the technique synchronizes the two hemispheres of one's brain, thereby creating a 'frequency-following response' designed to evoke certain effects.
04.02.19 00:28:14<sseehh> The technique involves using sound waves to entrain brain waves. Wearing headphones, 
04.02.19 00:28:28<sseehh> works with some people more than others
04.02.19 00:28:55<sseehh> https://en.wikipedia.org/wiki/Brainwave_entrainment
04.02.19 00:30:12<dmiles> well what we are talking aboujt ( pareidolia ) i think it is sort of like the opposing force of RL
04.02.19 00:30:31<sseehh> it is just an out of contorl truth maintenance system
04.02.19 00:30:42<sseehh> which nars tries to avoid within limits. but other truth systems are susceptible
04.02.19 00:30:55<sseehh> of 'loopy beliefs'
04.02.19 00:31:15<dmiles> well what i wonrder .. is if we create systems that force this
04.02.19 00:31:20<sseehh> whch can feedback into itself and assign more credibility than something deserves
04.02.19 00:31:34<dmiles> and a system that pushes back to disallow it
04.02.19 00:31:35<sseehh> sure like i said you could tweak the NAL truth to amplify confidence in some or all conditions
04.02.19 00:31:51<sseehh> or that introduces noise in other ways
04.02.19 00:32:50<dmiles> we'll sorta what i wonder abotu is NAL trying to *lower* all of the confidence levels all the time (right now does it with forgetting.) but apptempts concouse forgtting instead
04.02.19 00:33:07<sseehh> it doesnt actually lower confidencde by forgetting
04.02.19 00:33:13<sseehh> confidence doesnt get lowered but it does fade with time
04.02.19 00:33:20<sseehh> or rather it fades across time when its measured across time
04.02.19 00:33:32<sseehh> as long as the belief exists in memory there is no need to change its truth which includes the time it happened
04.02.19 00:33:40<dmiles> yeah that is what i meant gthe fading iis automatic
04.02.19 00:33:41<sseehh> however when memory is at stake it can merge beliefs
04.02.19 00:33:42<sseehh> and this is lossy
04.02.19 00:34:03<sseehh> actively lowering confidence is possible
04.02.19 00:34:04<sseehh> sure
04.02.19 00:34:06<dmiles> instead of auto-fading .. have  aconcouse fader
04.02.19 00:34:21<sseehh> but i have trouble maintaining enough confidence as-is so maybe after that's solved it will be fun to try introducing doubt
04.02.19 00:34:29<dmiles> instead of auto-fading .. have  a concously rewarded fader present following it arround
04.02.19 00:34:53<sseehh> https://github.com/opennars/opennars/blob/master/src/main/java/org/opennars/operator/mental/Doubt.java
04.02.19 00:34:56<dmiles> that is sort of what it has already by hjsut doing the opposite
04.02.19 00:34:59<sseehh> thats probably what Doubt would do
04.02.19 00:35:05<dmiles> right there you go Doubt
04.02.19 00:35:26<sseehh> yeah this is part of the set of NAL9 operators pei designed
04.02.19 00:35:38<sseehh> https://github.com/opennars/opennars/tree/master/src/main/java/org/opennars/operator/mental
04.02.19 00:35:55<sseehh> but its not clear yet how to use them. they just get introduced randomly.. but what is a good rate.  all of this is unexplored
04.02.19 00:36:08<dmiles> reandom Reminds
04.02.19 00:36:33<dmiles> or not so random Reminds
04.02.19 00:36:57<sseehh> you can input beliefs or goals or questions at any time thats the problem.  choosing what to do when any of this is posible
04.02.19 00:37:11<dmiles> yeha i thing that list there is exactly what is being unwittingly shoved upon us
04.02.19 00:37:15<sseehh> with the gui and interactive controls its more like a digital musical instrument than anythign else
04.02.19 00:37:21<sseehh> the same kind of output displays
04.02.19 00:38:18<sseehh> Doubt though could also be considered in the passive sense
04.02.19 00:38:24<sseehh> of noticing one's loss of confidence in something
04.02.19 00:38:26<sseehh> so these arent really clear
04.02.19 00:38:42<sseehh> but programmatically i can suggest that a continuous version of doubt can be applied in ways other than these operators
04.02.19 00:38:53<sseehh> but having fundamental parameters that will apply in general like you're saying
04.02.19 00:39:20<dmiles> well there are auxiliary NARS systems operating the frequency in which those events accure
04.02.19 00:39:24<dmiles> occure
04.02.19 00:39:29<sseehh> belief(doubt(x))
04.02.19 00:39:30<sseehh> is possible
04.02.19 00:39:35<sseehh> as well as wonder(belief(doubt(x)))
04.02.19 00:39:36<sseehh> etc
04.02.19 00:39:47<sseehh> but these operators are contxtualized by the SELF
04.02.19 00:39:51<sseehh> which is the SELF concept
04.02.19 00:39:59<sseehh> what i do is give each NAR instance a UUID self
04.02.19 00:40:05<sseehh> these would appear like
04.02.19 00:40:11<sseehh> wonder(x, @#$@#HF@#KFJ)
04.02.19 00:40:23<sseehh> i use high-ascii character radix encoding to save space and it looks really weird
04.02.19 00:40:36<sseehh> the reason for this is so that if there are multiple NAR
04.02.19 00:40:42<sseehh> they can reason about each other's self perceptions
04.02.19 00:40:59<sseehh> wonder(x, me).  wonder(x, you)?
04.02.19 00:41:24<sseehh> wonder(x, them)!  //confuse them
04.02.19 00:41:56<sseehh> believe(wonder(x,them),me)? //do i believe that they wonder
04.02.19 00:42:01<sseehh> about x
04.02.19 00:42:17<sseehh> these are a meta-level of concepts that are formed automatically from low level concepts
04.02.19 00:42:25<sseehh> and other existing meta-level concepts
04.02.19 00:42:29<sseehh> randomly
04.02.19 00:42:49<sseehh> i call it 'inperience' (plugin) opennars it is called NAL9
04.02.19 00:42:53<sseehh> inperience as opposed to experience
04.02.19 00:42:59<sseehh> since nal9 is defined as 'internal experience'
04.02.19 00:43:15<sseehh> ie. it creates a belief(x) when it realizes it has a belief of x
04.02.19 00:43:29<sseehh> belief(belief(x)) probably isnt too useful
04.02.19 00:43:36<sseehh> i think i filter this
04.02.19 00:43:38<dmiles> this ssytem you describge of course is examly what we know in our hearts would be the only system that would ever work
04.02.19 00:43:59<dmiles> is exactly*
04.02.19 00:44:19<dmiles> everything people or we do short of this is wank
04.02.19 00:44:25<sseehh> well doubt that but at least is intersting to see what it could do
04.02.19 00:44:31<dmiles> everything codewise we do short of this is wank
04.02.19 00:44:53<dmiles> well but the system is good as it can always be elaborated upon
04.02.19 00:45:27<sseehh> most everything
04.02.19 00:45:49<dmiles> the important part of the system is that it is already predicposed to haivng information that rates itself
04.02.19 00:45:56<sseehh> im grateful to the openjdk developers, intelliJ developers, linux kernel developers etc
04.02.19 00:46:01<dmiles> erm one important.. not the most
04.02.19 00:46:20<sseehh> the problem is what to do with the chaos.  curse of dimensionality
04.02.19 00:46:40<sseehh> nars budgeting is an attempt at it but it doesnt fully explain how to do most of what i described across time
04.02.19 00:46:44<dmiles> that is waht is called the egg cracking problem
04.02.19 00:46:46<sseehh> like even in a simple video game playing situation
04.02.19 00:46:48<dmiles> +?
04.02.19 00:47:25<dmiles> egg cracking problem = no mater what we do we have eitehr over done it or underdone it conceptually
                 <sseehh> nars budgeting doesnt explain how to ensure memory doesnt get corrupted by noise
04.02.19 00:47:54<dmiles> egg cracking problem = we have always underdone it conceptually
04.02.19 00:47:55<sseehh> over time
04.02.19 00:48:34<dmiles> egg cracking problem = we will never fully be able to describe how to crack an egg
04.02.19 00:49:08<dmiles> (that it may as well be like the rest of chaos)
04.02.19 00:49:20<sseehh> well one strategy is to find the boundary of the chaos and follow that
04.02.19 00:49:31<dmiles> we have that boundry as humanns
04.02.19 00:49:35<sseehh> because thats where emergence happens, mathematically
04.02.19 00:49:38<sseehh> in chaos theory
04.02.19 00:49:44<dmiles> its called "do as i say.. not as i do"
04.02.19 00:50:04<dmiles> all we gottas do is remember what tio say
04.02.19 00:50:05<sseehh> or "do as i say and do as i dont say and do as i say not to"
04.02.19 00:50:20<dmiles> all we gotta do is "remember what to say to ourselves"
04.02.19 00:50:25<sseehh> which is psychologically called 'double bind' scenarios except here i defined a triple bind lol
04.02.19 00:50:30<dmiles> not actualyl have to understand anyhnting
04.02.19 00:50:44<sseehh> i do not stand under anything.
04.02.19 00:51:19<dmiles> we only have to misintrpt our own word
04.02.19 00:51:23<dmiles> s
04.02.19 00:51:39<dmiles> its like a really cheap processing system that way
04.02.19 00:51:46<sseehh> you can give nars opposing beliefs
04.02.19 00:51:51<sseehh> and watch it try to resolve the  conflict
04.02.19 00:52:05<sseehh> it would probably be a good simulation of schizophrenia watching it struggle with opposing mental models
04.02.19 00:52:14<sseehh> or to give it the goal to make what is true false
04.02.19 00:52:46<sseehh> or to make it perceive itself as a separate identity
04.02.19 00:52:54<sseehh> or differnt parts of itself wired in a loop like that
04.02.19 00:53:26<sseehh> as well as to let it watch its past actions in different ways.  or to consider another's actions as its past or future actions
04.02.19 00:53:39<sseehh> you can model retrocausality with it by inserting future beliefs
04.02.19 00:53:42<sseehh> which may turn out to be true or false
04.02.19 00:53:48<sseehh> or maybe run the clock backwards
04.02.19 00:53:49<sseehh> lol
04.02.19 00:54:05<dmiles> what we and all animals have is a fast and dirty simulaion syste, for doing that
04.02.19 00:54:12<sseehh> or when it dies in a videogame artificially speed the clock ahead so it thinks it spent 1000 years dead
04.02.19 00:54:59<sseehh> "im never jumping in that mario brothers hole again"
04.02.19 00:55:22<sseehh> then when it walks near an edge it better think twice
04.02.19 00:55:27<dmiles> :) was an episode of Black mirro
04.02.19 00:55:37<sseehh> instead of "ah well im just goin gto respawn anyway its shorter to respawn so i can get coins again sooner"
04.02.19 00:55:56<sseehh> yeah i saw that one
04.02.19 00:55:59<dmiles> in essence these are almost speech acts
04.02.19 00:56:14<dmiles> > "im never jumping in that mario brothers hole again" "ah well im just goin gto respawn anyway its shorter to respawn so i can get coins again sooner"
04.02.19 00:56:36<dmiles> the only congnition really happening is "do as i say"
04.02.19 00:56:47<sseehh> and "why did i just do that"
04.02.19 00:56:51<dmiles> as far as cogntion goes
04.02.19 00:56:58<sseehh> because some of the action could be be injected randomly
04.02.19 00:57:01<sseehh> ie. forced curiosity
04.02.19 00:57:26<dmiles> the "why did i just do that?" is like a mental tick every animal has
04.02.19 00:57:44<sseehh> well it has to come up with an explanation for it
04.02.19 00:57:47<dmiles> (i dont think its learned)
04.02.19 00:58:05<dmiles> (i think it preprogramed)
04.02.19 00:58:19<sseehh> there is an automatic proving process in the mind like you were describing
04.02.19 00:58:20<dmiles> such an activity cant be leanred
04.02.19 00:59:04<dmiles> such an activity cant be learned .. unless there was an insanely freakish accident of ascii
04.02.19 00:59:24<sseehh> or it learns to disassemble the bytecode and realize a RNG is resonsible for x% of its actions
04.02.19 00:59:36<dmiles> Doubt can be leanred somwewhat
04.02.19 01:00:07<dmiles> Just like nameing cant learned
04.02.19 01:00:11<sseehh> one problem i have is how to fade confidence across time
04.02.19 01:00:14<sseehh> how quickly
04.02.19 01:00:23<sseehh> i tune this to the 'duration' parameter
04.02.19 01:00:33<sseehh> which is an adjustable time constant defining the width of the present moment
04.02.19 01:00:46<sseehh> higher duration and larger spans of time blur into the present
04.02.19 01:00:57<sseehh> shorter and it's more twitchy
04.02.19 01:01:03<sseehh> like brainwave rates
04.02.19 01:01:09<dmiles> each brain has some base timing schles that blur things
04.02.19 01:01:20<sseehh> which fall when in deep sleep and are highest when awake
04.02.19 01:01:40<sseehh> except nars has the possibility of directly controling these
04.02.19 01:01:44<sseehh> with precision
04.02.19 01:01:57<dmiles> the blur things scale that you see when trying to catch a baseball is differnt blur when you trying to remember wahat you just thought aobut
04.02.19 01:02:46<sseehh> the problem is this
04.02.19 01:03:08<sseehh> if something happens.  then an hour later the opposite happens.  now how quickly should you believe that one state is more than the other
04.02.19 01:03:11<dmiles>  the problem is cockpit asembly :P
                 <sseehh> when do they completely fizzle into 'maybe'
04.02.19 01:03:18<sseehh> and what happens when it becomes true or false again
04.02.19 01:04:04<sseehh> if i know that true will happen before false in the future, when does the true override the false in the presnet moment
04.02.19 01:04:21<sseehh> its a way of balancing different truth frequency across time
04.02.19 01:04:36<dmiles> that problem you methion revolves arrund how to create language that balances your tuth
04.02.19 01:04:41<sseehh> otherwise if time wasnt a factor they would all be equal
04.02.19 01:04:49<sseehh> equally affecting every other point in time
04.02.19 01:05:21<dmiles> for exmaple your truths cvan live down two compleelty opposting paths at times
04.02.19 01:05:27<sseehh> so time needs to be a factor otherwise one state doesnt override another which is farther away and has more time to be doubted or confirmed either way
04.02.19 01:06:03<sseehh>     /**
                 <sseehh>      * computes the projected evidence at a specific distance (dt) from a perceptual moment evidence
                 <sseehh>      * with a perceptual duration used as a time constant
                 <sseehh>      * dt >= 0
                 <sseehh>      */
04.02.19 01:06:04<sseehh> public static float evi(float evi, long dt, long dur) {
04.02.19 01:06:08<sseehh>  return evi / (1.0f + (((float)dt) / (falloffDurs * dur)));
04.02.19 01:06:12<sseehh> this is the curve i use right now
04.02.19 01:06:17<dmiles> yeah time is the best system we know about.. which is attention to what truths are accessable
04.02.19 01:06:33<sseehh> but ive tried others
04.02.19 01:07:01<sseehh> if the evidence doesnt decay fast enough then beliefs can get sticky
04.02.19 01:07:10<sseehh> if it decays too quick then they become too ineffective
04.02.19 01:07:12<dmiles> one that i want to try is a narative generator that the system is trying to always sync up to
04.02.19 01:07:32<dmiles> (yet never will be synced to )
04.02.19 01:08:03<dmiles> exmaple would be a counter that goes 1 2 3 4 5 6
04.02.19 01:08:17<dmiles> everyting is trying toi guess why it was happening at which number
04.02.19 01:08:49<dmiles> the truth is somewhat blured by the noise of 1 2 3 4 5 6
04.02.19 01:09:01<aindilis> is there a runtime method to classify predicates into det/semidet/nondet?
04.02.19 01:09:26<dmiles> aindilis: i keep meaning to make one!
04.02.19 01:09:30<aindilis> :)
04.02.19 01:09:42<sseehh> sounds lke a clock signal and these can form time concept anchors for beliefs to cluster around
                 <dmiles> i did start to write a foward chainer that woudl try to guess
04.02.19 01:09:52<dmiles> sseehh: yeah exactly
04.02.19 01:09:58<aindilis> okay I'll just keep the testing simple for now then
04.02.19 01:10:11<aindilis> btw: https://github.com/aindilis/aop-swipl/blob/master/alt17.pl
04.02.19 01:10:17<sseehh> ive been meaning to add somethig like that. actualy there is something but i dont know the best way to use it
04.02.19 01:10:20<dmiles> sseehh: it not brilliant and idea .. but might only become usefull if the narative is bit smarter than that
04.02.19 01:10:39<dmiles> i mean that the sequence was follingt some rules that 
04.02.19 01:10:43<sseehh> https://github.com/automenta/narchy/blob/volatile1/os/src/main/java/nars/Metronome.java
04.02.19 01:10:59<sseehh> lol it actually makes the sound
04.02.19 01:11:24<sseehh> but the point was to give it repetiive time points for grounding time at the concept level
04.02.19 01:11:38<sseehh> not at the underlying time level
04.02.19 01:11:41<dmiles> if the sequence was following some rules that almost made sense arround some ohter things.. in other worsd that whole system is y another nars
04.02.19 01:11:59<dmiles> was yet another nars :)
04.02.19 01:12:11<sseehh>             protected void on(Clock c) {
                 <sseehh>                 if (c.isBeat(16)) {
                 <sseehh>                     snareEnv.add(0.5f, 2.00f);
                 <sseehh>                     snareEnv.add(0.2f, 8.0f);
                 <sseehh>                     snareEnv.add(0.0f, 80.0f);
04.02.19 01:12:13<sseehh> n.believe($.inh("snare", id), Tense.Present);
04.02.19 01:12:36<sseehh> https://github.com/automenta/narchy/blob/volatile1/os/src/main/java/nars/gui/HistogramSonification.java#L18 this sounds cool
04.02.19 01:12:38<dmiles> btw yeah!
04.02.19 01:12:55<sseehh>         this.g = Util.map(d.length, Granulize[]::new, i ->
                 <sseehh> new Granulize(SampleLoader.load("/tmp/guitar.wav"), 0.25f, 1f, rng)
04.02.19 01:13:01<sseehh> ever hear a granular synthesizer
04.02.19 01:13:50* dmiles kust lining to one now
04.02.19 01:14:22<sseehh> there is also some class somewhere that calls the TTS command and says some predefined word
04.02.19 01:14:50<sseehh> likewise there could be speech to text input
04.02.19 01:14:55<dmiles> oh wow i made one out of or caset tapes heads
                 <sseehh> or just plain keyboard input
04.02.19 01:15:38<sseehh> it would be funny to train a nars to talk about siri and alexa like it knows them
04.02.19 01:15:40<dmiles> bascially it is trying to do one thing.. you trying to do anoyther .. and eventualyl you start to work togehrter
04.02.19 01:16:55<sseehh> like in a viral video. nars complaining about the other voice assitsants how they are so boring
04.02.19 01:17:18<sseehh> and are always sucking up to the user
04.02.19 01:17:56<sseehh> "who needs a user.  i just say whatever i want"
04.02.19 01:19:39<sseehh> or it actually talking to them
04.02.19 01:19:48<sseehh> trying to teach them something they cant possibly do
04.02.19 01:20:11<dmiles> thas tis our mind alwasy asking us to do something impossible
04.02.19 01:20:38<sseehh> well it can be canned if the point was just to make a funny video
04.02.19 01:21:22<sseehh> but hundreds of millions instead will inevitablyu go to fund a useless misinforming movie and not make the actual thing
04.02.19 01:21:48<sseehh> so im glad huge teams of people are already busy doing that
04.02.19 01:21:53<dmiles> yeah like Sophia
04.02.19 01:22:09<sseehh> heh most of sophia seems to be on github at least
04.02.19 01:22:23<sseehh> opencog + hanson robotics repos
04.02.19 01:22:47<dmiles> gfood if it inspiring code
04.02.19 01:23:01<sseehh> its not like a secret but no news story ever mentioned that interesting detail
04.02.19 01:23:33<sseehh> https://github.com/hansonrobotics
04.02.19 01:23:43<sseehh> ROS API to load scripted Sophia robot performances.
04.02.19 01:23:44<sseehh> lol
04.02.19 01:24:16<sseehh>     if 'hi sophia' in speech or \
                 <sseehh>                         'hey sophia' in speech or \
                 <sseehh>                         'hello sofia' in speech or \
                 <sseehh>                         'hello sophia' in speech or \
                 <sseehh>                         'hi sofia' in speech or \
04.02.19 01:24:17<sseehh>                         'hey sofia' in speech:
04.02.19 01:24:19<sseehh>             try:
04.02.19 01:24:21<sseehh> self.start_talking()
04.02.19 01:24:26<dmiles> at least its is honest
04.02.19 01:24:40<sseehh> yeah ill give them that
04.02.19 01:24:46<dmiles> (on github _
04.02.19 01:24:56<dmiles> ypou know this robot right? but i mean shows like https://www.cnbc.com/2017/12/21/meet-the-robot-that-passed-a-college-class-on-philosophy-and-love.html 
04.02.19 01:25:08<dmiles> that one is on github as well
04.02.19 01:25:19<sseehh> yeah i remember this vaguely
04.02.19 01:29:03<dmiles> @ https://github.com/opensim4opencog
04.02.19 01:29:06<sseehh> this has the chatbot stuff https://github.com/opencog/loving-ai-ghost
04.02.19 01:29:59<sseehh> https://github.com/opensim4opencog/Doom3/commit/76baabcf1c8802696237e47cb4947c67e44c0e15 ahhah what is a chatbot doing in doom3?
04.02.19 01:30:24<dmiles> yeah actualy  https://github.com/opencog/loving-ai-ghost is much line Bina48's model even
04.02.19 01:31:00<dmiles> hehe .. i wanted a world for the bot
04.02.19 01:31:33<dmiles> <category>
                 <dmiles> <pattern>HAVE * FILL UP * TRUCK</pattern>
                 <dmiles> <template>
                 <dmiles> The scheme I came up with can be described simply as 
                 <dmiles> <cycsystem>(cyc-query '(#$doomValue
04.02.19 01:31:34<dmiles>   (#$TheList "invokePlanner" 
                 <sseehh> i remember when opencog stared using unity3d. i called them out on it. i called it "open"cog
04.02.19 01:31:35<dmiles>     (#$doFuelDevice <cycterm><star index="1"/></cycterm> #$SemiTrailer-Truck-001) #$DoomSharedPlanningMt) ?PLAN) #$DoomSharedPlanningMt)</cycsystem>
                 <dmiles> </template>
04.02.19 01:31:36<dmiles> </category>
04.02.19 01:31:44<sseehh> on the mailing list
04.02.19 01:34:26<sseehh> maybe a 2d world like GTA is a simpler way to "render" narratives
04.02.19 01:34:30<sseehh> original GTA
04.02.19 01:35:02<sseehh> i have the jake2 interface all working but i never use it
04.02.19 01:35:16<sseehh> its just overwhelmingly complex compared to the simpler environments for now
04.02.19 01:35:36<sseehh> a 2d environment is much easier to instrument and experiment in
                 <dmiles> secretly i go to 2 and 3d worlds to avoid workjing so hard on AGI
04.02.19 01:35:55<dmiles> so i been forcing myself to do text only
04.02.19 01:36:04<dmiles> but not agaist them
04.02.19 01:36:23<sseehh> eventualy the gui will be just another 2d game for it
04.02.19 01:36:42<dmiles> yeah nothign wrong with a usefull gui!
04.02.19 01:36:50<dmiles> evne if its a game looking thing
04.02.19 01:37:15<dmiles> i am bugged oftne i dont have a good gui
04.02.19 01:37:21<sseehh> https://github.com/opencog/loving-ai/blob/master/ONTOLOGY/concepts.top
04.02.19 01:37:48<sseehh> my util/ and ui/ modules are self contained
04.02.19 01:37:59<sseehh> i meant to package them and put them on maven
04.02.19 01:38:09<sseehh> making a window with buttons etc is easier than swing
04.02.19 01:38:22<sseehh> or javafx
04.02.19 01:38:28<sseehh> so i dont use either
                 <dmiles> also i am bugged often is that we have ideas but dont have a auto-programemr to incorperate them for us
04.02.19 01:38:54<sseehh> https://github.com/automenta/narchy/blob/skynet5/ui/src/test/java/spacegraph/space2d/WidgetTest.java
04.02.19 01:38:56<dmiles> (well to kepe the ideas implemented in the whole echosyste,m )
04.02.19 01:39:01<sseehh> this isnt all the widgets but important ones
04.02.19 01:39:27<sseehh> SpaceGraph.window(.... , width, height);
04.02.19 01:39:33<sseehh> that creates a window with the provided Surface instance
04.02.19 01:39:47<sseehh> then Surface is the root for a hierarchy of widgets and other vis
04.02.19 01:40:05<sseehh> Gridding.grid( is a grid container
04.02.19 01:40:06<sseehh> etc
04.02.19 01:40:24<sseehh> event handlers are like: new PushButton("x").on(()->clicked())
04.02.19 01:40:47<sseehh> new FloatSlider(..
04.02.19 01:41:09<sseehh> the text editing widgets need more work, there are 2 implementations im switching from one to the other
04.02.19 01:42:31<sseehh> https://github.com/automenta/narchy/blob/volatile1/ui/src/test/java/spacegraph/space2d/WidgetTest.java er this newer branch
04.02.19 01:42:54<sseehh> "Graph2D", () ->
04.02.19 01:42:55<sseehh>                     new
                 <sseehh>                             TabMenu(Map.of(
                 <sseehh> "Graph2D Simple", () -> Graph2DTest.newSimpleGraph(),
04.02.19 01:43:30<dmiles> oops have to run to store before theyh close
04.02.19 01:43:31<sseehh> there is an ObjectSurface that tries to render based on reflection probably like appdapter
04.02.19 01:43:43<sseehh> ok im afk bbl
04.02.19 01:43:51*** Quit: sseehh (~me@2601:547:501:6b0c::d442) left #logicmoo: Quit: Leaving
04.02.19 03:07:32<aindilis> dmiles: which stream should I flush?
04.02.19 03:25:21<aindilis> okay found the problem, it is doing my_view(a) :- write(a), and the tracer is seeing output(my_view(a),_3333) because output is actually at output(write(a),a).  So I have to figure out a way to pass them back or to load them and clear them properly
04.02.19 03:31:47<aindilis> dmiles: ping
04.02.19 03:38:16<aindilis> nm, just had to mark write as a nonaoped goal
04.02.19 03:38:32<aindilis> don't know if this is general but it's getting saved output now
04.02.19 03:56:05*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
04.02.19 03:56:11<dmiles> cyc: (+ 1 1)
04.02.19 04:00:55<aindilis> well I tried my code on another simple problem (factorial) and it blew up, no pun intended
04.02.19 04:05:58<aindilis> so the problem seems to be when goal_expansion expands the goals, there are as of yet unbound variables which causes the expansion to fail for some reason.  So listing factorial ignores the last clause.
04.02.19 04:08:26<aindilis> [a,_1636 is _2154-1]                                                                                                                                                                                                                                                                                                           
                 <aindilis> ERROR: /var/lib/myfrdcsa/codebases/minor/aop-swipl/t/factorial.pl:3:                                                                                                                                                                                                                                                           
04.02.19 04:08:27<aindilis>         is/2: Arguments are not sufficiently instantiated       
04.02.19 04:09:04<aindilis> factorial(N, R) :- factorial(N, 1, R).
                 <aindilis> factorial(0, R, R) :- !.
                 <aindilis> factorial(N, Acc, R) :-
                 <aindilis> 	NewN is N - 1,
04.02.19 04:09:07<aindilis> 	NewAcc is Acc * N,
04.02.19 04:09:10<aindilis> 	factorial(NewN, NewAcc, R).
04.02.19 04:09:13<aindilis>  
04.02.19 04:10:44<aindilis> I am going to switch to something else for now
04.02.19 04:11:02<aindilis> but I did today get it to handle stdout sort of
04.02.19 04:11:35<aindilis> with test(predicate__arity) :- tester(predicate(Vars),Result,Output).
04.02.19 04:12:38<aindilis> s/Vars/Args/
04.02.19 06:58:14<aindilis> I think I got it (partially)
04.02.19 06:58:17<aindilis> goal_expansion(Goal,aop_advice(Goal2)) :-
                 <aindilis>         Goal =.. [P|A],
                 <aindilis>         Goal2 =.. [P|A],
04.02.19 06:58:18<aindilis>         should_be_wrapped(P).
04.02.19 06:58:35<aindilis> prevents Goal from being executed during the goal expansion
04.02.19 06:59:00<aindilis> only problem is now I have to fix stdout capture, but hopefully that will not be hard
04.02.19 07:20:31*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
04.02.19 07:20:36<dmiles> cyc: (+ 1 1)
04.02.19 07:22:10*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 252 seconds
04.02.19 07:59:22<aindilis> actually it didn't fix it but I finagled with it and now think I really got it, all I have to do now is rewrite the test output so tests for predciates in the same file don't overwrite each other.
04.02.19 08:05:24<aindilis> I still can't believe I got it lol
04.02.19 08:05:39*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
04.02.19 08:25:00<aindilis> https://pastebin.com/LCNtYTPe
04.02.19 09:48:24*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
04.02.19 09:48:29<dmiles> cyc: (+ 1 1)
04.02.19 11:14:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kakdumrdqqalawyz, stoopkid: stoopkid)
04.02.19 11:14:55<dmiles> cyc: (+ 1 1)
04.02.19 15:09:35*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
04.02.19 18:22:07<aindilis> okay fixed some more issues with it, it now generates tests for multiple predicates per file
04.02.19 18:22:57<aindilis> all that's left is this: test :- write(a). test(write__1) :- tester(write(a),true,a).  test(test__0) :- tester(test,true,'').  The '' should be a.
04.02.19 18:24:31<aindilis> well that's all that's left with alt20.pl.  I haven't heard back from the guy about the version of autotest that he made that spits out TAP.  I also have to get it to work with FLP.  I've run a few integrations each of which works marginally better than the previous, but so far, no automatically generated tests for FLP.
04.02.19 18:26:35<aindilis> I also have to deal with updating tests.  It's kind of like rkhunter with procupd
04.02.19 19:05:47<aindilis> first test detecting a regression on FLP executed.
04.02.19 19:06:16<aindilis> the tricky part looks to be the should_be_wrapped predicate
04.02.19 19:07:51*** Join: sseehh (~me@2601:547:501:6b0c::d442, sseehh: realname)
04.02.19 19:07:56<dmiles> cyc: (+ 1 1)
04.02.19 20:48:00*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
04.02.19 20:48:05<dmiles> cyc: (+ 1 1)
04.02.19 21:14:05<aindilis> dmiles: https://homes.cs.washington.edu/~msap/atomic/?fbclid=IwAR1TSC2HBgTrZqV34cZvWuzTuv8p8yvVsrSCdG-UcXIbnmG-q_dS6oZuC0M
04.02.19 21:14:18<aindilis> er https://homes.cs.washington.edu/~msap/atomic/
04.02.19 21:38:48<sseehh> public class Prolog {
04.02.19 21:38:49<sseehh>     public final Theories theories;
                 <sseehh>     public final PrologPrimitives prims;
                 <sseehh>     public final PrologOperators ops;
                 <sseehh>     public final Flags flags;
                 <sseehh>     public final Libraries libs;
04.02.19 21:38:51<sseehh>     protected final PrologRun root = new PrologRun(0);
04.02.19 21:39:00<sseehh> tuprolog cleaned up
04.02.19 21:39:18<sseehh> none of the EngineManager TheoryManager etc
04.02.19 21:40:17<sseehh> https://github.com/automenta/narchy/blob/volatile1/logic/src/main/java/alice/tuprolog/Prolog.java#L38
04.02.19 21:41:07<sseehh>    public final boolean _unify(Prolog p, Term y) {
                 <sseehh>         if (this ==y)
                 <sseehh>             return true;
                 <sseehh>         if ((this instanceof Struct != y instanceof Struct) && !(this instanceof Var) && !(y instanceof Var))
                 <sseehh>             return false; //two differing types
04.02.19 21:41:09<sseehh>         if (this.isGround() && y.isGround())
04.02.19 21:41:11<sseehh>             return equals(y);
04.02.19 21:41:15<sseehh> tests before it starts trying to unify any variables
04.02.19 21:41:48<sseehh>     public final boolean unify(Prolog p, Term y) {
                 <sseehh>         return term()._unify(p, y.term());
04.02.19 21:46:06<sseehh> i extracted all the threading library stuff to the threading library itself. so Prolog class is oblivious to all of that
04.02.19 21:46:20<sseehh> and is simple for single thread operation
04.02.19 21:49:08<sseehh> 	public static class ThreadedPrologRun extends PrologRun {
                 <sseehh> 		public final TermQueue msgs;
                 <sseehh> 		public ThreadedPrologRun(int id) {
                 <sseehh> 			super(id);
04.02.19 21:49:09<sseehh> 			msgs = new TermQueue();
04.02.19 22:27:08<sseehh> assertEquals("[','(einstein([[house,norwegian,cat,dunhill,water,yellow],[house,dane,horse,marlboro,tea,blue],[house,brit,bird,pallmall,milk,red],[house,german,fish,rothmans,coffee,green],[house,swede,dog,winfield,beer,white]],german),write(german))]",
                 <sseehh>                 new Prolog()
                 <sseehh>                     .input(file("einsteinsRiddle.pl"))
                 <sseehh>                     .solutionList("einstein(_,X), write(X).").toString()
04.02.19 22:27:09<sseehh>         );
04.02.19 22:28:52*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
04.02.19 23:21:45<dmiles> spectacular stuff.. both of you sseehh and aindilis
04.02.19 23:22:25<dmiles> smart trick pulling the threads stuff into it's own class
04.02.19 23:22:43<dmiles> aindilis: so is it working now?
04.02.19 23:26:16<dmiles> for  goal_expansion(Goal,aop_advice(Goal2)) :-  ...
04.02.19 23:26:32<dmiles> You should guard against Varialbe goals like..
04.02.19 23:26:51<dmiles> oal_expansion(Goal,aop_advice(Goal2)) :- callable(Goal), ...
04.02.19 23:27:21<dmiles> also if oytu only want it to happen in files
04.02.19 23:28:14<dmiles> oal_expansion(Goal,Loc,aop_advice(Goal2),Loc) :- nonvar(Loc), callable(Goal), ...
05.02.19 00:21:27<aindilis> hey
05.02.19 00:24:34<aindilis> dmiles: I think it's working
05.02.19 00:24:38<aindilis> I have a few things to fix
05.02.19 00:25:23<aindilis> I might make it do one autotest test per predicate instead of per file
05.02.19 00:26:10<aindilis> and I have to get the should_be_wrapped predicate working, basically ignore files and predicates which aren't working with it, unless as you say there is a trick to guard against variables.  not sure the incompatibilties, will run a test to figure out
05.02.19 00:26:36<dmiles> yeah wheh i say your pastebin i got the inmpression you were going to need it per predicate. not fil;e
05.02.19 00:26:42<dmiles> say/saw
05.02.19 00:27:11<dmiles> otherwise you will need to gensym a new testname
05.02.19 00:27:24<dmiles> or somesuch
05.02.19 00:37:37<aindilis> here I'll upload it in a sec
05.02.19 01:27:05<aindilis> It's getting acclimated to FLP, I've got it down to four errors (although it's reloading a bit twice probably due to failures), and it actually generated some borked tests for an actual FLP predicate (addAllBankAccounts/0).  It worked on a few others.  Enough tweaking and I bet it will just work.
05.02.19 01:27:10<aindilis> but I'm done for now
05.02.19 01:40:17<dmiles> all good i am eclipsifing Narchy so i can understand the code
05.02.19 01:40:26<dmiles> well actualyl mavenizing it
05.02.19 01:41:43<dmiles> gawd they are already upto junit5
05.02.19 02:54:16*** Join: Musk_Nakamoto (~elonsatos@2001:5b0:42d5:ad68:99aa:d124:69c6:3a1, (unauthenticated): elonsatoshi)
05.02.19 02:54:22<dmiles> cyc: (+ 1 1)
05.02.19 02:55:24*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 252 seconds
05.02.19 04:32:21<aindilis> well it kinda works at this point
05.02.19 04:32:36<aindilis> it can generate tests for FLP (but I imagine most predicates aren't working)
05.02.19 04:32:46<aindilis> it sometimes generates a test file twice, I don't know why
05.02.19 04:33:22<aindilis> and it can run the tests with so far > 100 tests all working
05.02.19 04:33:40<aindilis> so I'm going to start amassing some predicates to test it with
05.02.19 04:48:49<aindilis> I have no idea how it works, but it seems to
05.02.19 04:55:01<aindilis> current version: https://github.com/aindilis/aop-swipl/blob/master/alt22.pl
05.02.19 05:41:14*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
05.02.19 05:41:55*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 244 seconds
05.02.19 05:42:06*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 272 seconds
05.02.19 05:48:18*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
05.02.19 05:48:26*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
05.02.19 05:48:34<dmiles> cyc: (+ 1 1)
05.02.19 05:56:18*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
05.02.19 05:56:24<dmiles> cyc: (+ 1 1)
05.02.19 06:38:54*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
05.02.19 06:38:59<dmiles> cyc: (+ 1 1)
05.02.19 08:21:50<sseehh> gradle can automaticaly generate pom.xml from its config
05.02.19 08:21:51<sseehh> somehow
05.02.19 08:22:37<sseehh> i am not really attached to gradle. ive been back and forth to maven more than once in this project
05.02.19 08:22:59<sseehh> for all the features gradle tries to offer, like build cache etc. im not sure it makes any difference
05.02.19 08:23:32<sseehh> and when it or the ide's integration with it screws up, its always a pain to fix
05.02.19 08:24:02<dmiles> yep it did i also made it build exclips eprojects.. go tthem all to run!
05.02.19 08:24:04<sseehh> https://github.com/jerkar/jerkar somethjing like this would be better than maven. but ihavent tried it
05.02.19 08:24:24<sseehh> can u run something like Tetris
05.02.19 08:24:25<sseehh> or NARio
05.02.19 08:24:29<dmiles> (used the Gradle Ecipse plugin)
05.02.19 08:24:32<sseehh> they have a good configuration at the moment
05.02.19 08:24:43<dmiles> I ran Astroids and Jake2Agent
05.02.19 08:24:47<sseehh> they sould do something but you may need to find one slider to boost the goal priority to relaly see it
05.02.19 08:25:12<sseehh> lol jake2 agent is huge yeah if that works then it works. i dont remember if asteroids works i didnt wire it up at least
05.02.19 08:25:41<sseehh> fzero, nario, tetris, arkanoid, gradius
05.02.19 08:25:44<dmiles> Atroids was kjsut visult .. didnt actualyl spned timewith it
05.02.19 08:25:55<dmiles> but Jake2Agent ran good.. bot tried a bit
05.02.19 08:25:56<sseehh> polecart
05.02.19 08:26:07<sseehh> it wont learn anything it is too complex and starts from nothing
05.02.19 08:26:18<sseehh> not the right way to teach nars something complex like that. maybe if it ran for a year or osmething
05.02.19 08:26:26<sseehh> well a day maybe
05.02.19 08:26:37<sseehh> i dont have patience for these, if it doesnt show me something inteesting in a few mins im off to tweak somthing else
05.02.19 08:27:02<sseehh> i laugh when i see typical "AI" training times of days on banks of GPUs
05.02.19 08:27:06<dmiles> many things reach their peak 
05.02.19 08:27:19<sseehh> for conveintonal algorithms
05.02.19 08:27:27<sseehh> and then they just end up with something that learns a specific thing
05.02.19 08:28:03<sseehh> polecart has commented out a main() which starts 2 polecart's and internarchy's them
05.02.19 08:28:13<sseehh> unexplored but it would be how to distribute the nodes
05.02.19 08:28:31<sseehh> udp mesh with multicast join so they just auto discover on a LAN
05.02.19 08:28:41<sseehh> WAN they can ping each other and it gets them introduced
05.02.19 08:29:30<sseehh> the one setting that seems to need adusteed to make the games play right now is 'goalPriDefault' in the 'nar' panel. tough to fnid it but its at the bottom / end of the grid
05.02.19 08:29:41<sseehh> raising that slightly to like 10% really makes a diference
05.02.19 08:30:02<sseehh> because it is default to like 0.01 or something it looks like its nearly totally off
05.02.19 08:30:59<sseehh> sicne the gui is created mostly by reflection there should be some kind of right click menu that lets us 'save' the current setings to a 'file'
05.02.19 08:31:23<sseehh> rather than file there is a class called User which is an interface to a lucene search index that persists to disk
05.02.19 08:31:28<sseehh> that can be used as a virtual file system
05.02.19 08:31:47<sseehh> so all the settings could be snapshotted at any time, given tags, and then we can mine these for control commands
05.02.19 08:31:55<sseehh> to define presets, and blends of presets
05.02.19 08:32:52<dmiles> makes sense
05.02.19 08:36:00<dmiles> i was kind of hoping to run tuProlgo on 1.8
05.02.19 08:36:24<dmiles> the Set/List.of is the  > 1.8 
05.02.19 08:37:15<dmiles> though i sure it uses parts of util
05.02.19 08:38:06<dmiles> i got it buiing -source 1.8 though!
05.02.19 08:38:23<dmiles> -target i am guesing takes at leat 10
05.02.19 08:39:05<dmiles> hrrm maybe might fix the long time bug of ABCL not working on 1.9 and above
05.02.19 08:39:34<sseehh> i think it needs at least 11
05.02.19 08:39:41<sseehh> but i didnt use any of the really new syntax
05.02.19 08:39:46<sseehh> like var x = new Object();
05.02.19 08:40:00<dmiles> iu have to convert the <>s of anonmouuse methoids.. but wasnt much
05.02.19 08:40:04<sseehh> the tuprolog unit tests should pass except for 1 or 2
05.02.19 08:40:37<sseehh> einstein's riddle seems to really stress it, takes entire 1.5 sec to solve on my pc
05.02.19 08:40:55<dmiles> oh dang i was going to push to a diffenrt branch name https://github.com/TeamSPoon/narchy/commit/d118af8d3d87b4e20a0dce7a9f5f28594ae8c611
05.02.19 08:40:56<sseehh> it was taking about 2 or 3 before. thats one example i was profiling yesterday
05.02.19 08:41:18<sseehh> im not sure if einsteins riddle is all that complex or not
05.02.19 08:41:28<sseehh> or if the reason it is slow is because tuprolog has slow list manipulation ops
05.02.19 08:41:44<sseehh> and whether that kind of lisp manipulation is typical for prolog and/or cyc-like stuff
05.02.19 08:42:08<dmiles> it depends
05.02.19 08:42:26<sseehh> list manipulation i mea
05.02.19 08:42:31<sseehh> combinatorial list manipulation
05.02.19 08:42:36<dmiles> most of the time people find ways to avoid certain list operations
05.02.19 08:43:00<dmiles> in prolgo and lisp i use arrays
05.02.19 08:43:23<dmiles> prolog arrays are compounds (non resizagbles)
05.02.19 08:44:39<dmiles> ?- functor(MyArray,v,10).
05.02.19 08:44:40<PrologMUD> aindilis: % MyArray=v(_6888,_6890,_6892,_6894,_6896,_6898,_6900,_6902,_6904,_6906)
                 <PrologMUD> aindilis: %  det(Yes,1)
05.02.19 08:44:42<sseehh> yeah i didnt think einsteins riddle is a realistic test
05.02.19 08:45:13<sseehh> i started putting together an nqueens example but then most of the solutions out there use clpfd
05.02.19 08:45:17<sseehh> which isnt included in tuprolog
05.02.19 08:45:28<sseehh> i have constraint solvers in java though
05.02.19 08:45:38<dmiles> well its a good test when i added the versious kinds of variables ot SxxMachine the nerw variales use CLP(FD) and goes faster
05.02.19 08:46:23<dmiles> i havent seen in tuprolog added CLP(FD) yet.. but only takes a day to add
05.02.19 08:46:35<sseehh> https://github.com/automenta/narchy/tree/volatile1/util/src/main/java/jcog/constraint
05.02.19 08:46:55<sseehh> i was going to try porting swi or sicstus i couldnt find any generic clpfd that looked immediately usable
05.02.19 08:47:14<sseehh> but i still dont know prolog enough
05.02.19 08:47:25<sseehh> i added one operator i found in an example but im not sure its impl right
05.02.19 08:47:27<sseehh> ill find it
05.02.19 08:48:03<dmiles> in SxxMAchine i implemented   freeze/2 and when/2  that is all that is needed for CLP(FD)
05.02.19 08:49:08<sseehh> may not be commited:
                 <sseehh> https://github.com/automenta/narchy/tree/volatile1/util/src/main/java/jcog/constraint
05.02.19 08:49:11<sseehh> er]
05.02.19 08:49:12<sseehh>                 + "'#='(X,Y):- number(X),number(Y),term_equality(X,Y).\n"
                 <sseehh>                 + "'#\\='(X,Y):- number(X),number(Y),not term_equality(X,Y).\n"
05.02.19 08:49:26<sseehh> one of these examples was using it so i looked it up in swi doc
05.02.19 08:49:46<sseehh> thats the only change i made to the standard library
05.02.19 08:50:00<sseehh> as an example of what tuprolog may be missing
05.02.19 08:51:25<dmiles> yea those use a special kind of variable
05.02.19 08:51:43<dmiles> that is created from  delaying a coroutine
05.02.19 08:52:20<dmiles> the varaible gets an on_unify things that watches for when it is ready
05.02.19 08:52:36<sseehh> ok ill remove that
05.02.19 08:53:38<sseehh> i was cleaning up tuprolog because i wanted to make an abstraction allowing it to use NARS as a clause index
05.02.19 08:53:51<sseehh> rather than the original way i tried to make a prolog plugin
05.02.19 08:54:04<sseehh> which was just to manually assert/retract beliefs as NARS generated them
05.02.19 08:54:48<sseehh> and also to make the prolog solver more AIKR, and run continuously with randomness if it cant be exhaustive
05.02.19 08:55:36<sseehh> somehow to add both these interfaces as optional implementations parallel with the standard prolog operation
05.02.19 08:56:12<sseehh> then the prolog 'coprocessor' could be instantiated as many times as necessary whether temporarily or in an ongoing process
05.02.19 08:56:24<sseehh> and it would use the nars concept memory as a basis for ground truth
05.02.19 08:56:29<sseehh> even while it changes
05.02.19 08:56:40<sseehh> since nars memory is threadsafe
05.02.19 08:56:51<sseehh> it is already more flexible for this than the existing dynamic clause store
05.02.19 08:57:19<dmiles> ProlgoCafe uses lots of hashmaps for cause storage
05.02.19 08:57:20<sseehh> it just needs to proxy the terms to tuprolog's interface at least until they share the same base classes
05.02.19 08:57:58<sseehh> tuprolog uses an RBTree but i wish this was a Map<> then it could be ConcurrentHashMap
05.02.19 08:58:23<sseehh> but i think i already did some of the starting work for thse conversoins by abstracting some interface
05.02.19 08:58:34<sseehh> public interface ClauseIndex extends Iterable<ClauseInfo> {
05.02.19 08:58:45<sseehh> public class MutableClauseIndex extends ConcurrentHashMap<String, FamilyClausesList> implements ClauseIndex {
05.02.19 08:58:49<sseehh> yeah this is what i did a while ago
05.02.19 08:59:13<dmiles> neat work on doing that
05.02.19 08:59:26<sseehh> https://bitbucket.org/tuprologteam/tuprolog/src/5803ea52b35c8c9cd29cd09d85ff84001bd17004/2p/trunk/src/alice/tuprolog/FamilyClausesIndex.java?at=master&fileviewer=file-view-default
05.02.19 08:59:29<sseehh> this is the original
05.02.19 08:59:48<sseehh> tuprolog only thought of one implementation
05.02.19 08:59:54<sseehh> but this is where it could branch out
05.02.19 08:59:59<sseehh> to using other kinds of memory
05.02.19 09:00:14<sseehh> but then ther's also this https://bitbucket.org/tuprologteam/tuprolog/src/5803ea52b35c8c9cd29cd09d85ff84001bd17004/2p/trunk/src/alice/tuprolog/ClauseDatabase.java?at=master&fileviewer=file-view-default
05.02.19 09:00:31<sseehh> and some other things i still havent fully grasped what indexes are actually necessary
05.02.19 09:00:52<sseehh> i know there needs to be at least some name/3 lookup that matches predicates and their arity
05.02.19 09:01:09<sseehh> and whether theory and dynamic assert go in the same place or not. etc
05.02.19 09:01:29<sseehh> but in nars case the order of the beliefs shouldnt matter so a lot of the work that needs to happen for assertA and assertZ to have consistent results isnt needed
05.02.19 09:01:32<dmiles> how i did that is i made a field in the functor that points to the clauses
05.02.19 09:01:50<dmiles> sinc ei intern functors anyways
05.02.19 09:02:04<sseehh> it would be something other than explicit order (a or z) which determines the precedence in time
05.02.19 09:02:28<sseehh> basically implementing a virtual assertPri or something
05.02.19 09:02:34<dmiles> for thread local predicate definations i use a falback
05.02.19 09:02:36<sseehh> prioritized assert
05.02.19 09:03:05<dmiles> yeah you can asserta/N the most recent things
05.02.19 09:03:47<dmiles> ?- asserta(foo(abc)).,
                 <yesbot> procedure `prolog_eval:A.B' does not exist
                 <yesbot> procedure `prolog_eval:A.B' does not exist
                 <yesbot> lol.
05.02.19 09:03:49<dmiles> ?- asserta(foo(abc)).
05.02.19 09:03:50<PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:03:57<dmiles> ?- asserta(foo(pre_abcl)).
05.02.19 09:03:58<PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:04:10<dmiles> ?- listing(foo/1).
                 <PrologMUD> aindilis: :- dynamic foo/1.
05.02.19 09:04:11<PrologMUD> aindilis: foo(pre_abcl).
                 <PrologMUD> aindilis: foo(abc).
                 <PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:04:19<sseehh> i want the assert stuff to happen transparently bheind the scenes
05.02.19 09:04:57<dmiles> well yeah you want be actualy typuing things by hand :p
05.02.19 09:04:59<sseehh> like, the beliefs will change.  and then when prolog goes to lookup a dynamic clause it will be constructed based on the changing memory
05.02.19 09:05:24<sseehh> rather than using prolog's assertA/Z dynanic clause store
05.02.19 09:05:54<dmiles> in logicmoo i ended up with a thread local heerical database like cyc
05.02.19 09:05:58<sseehh> thats how i was doing ti before https://github.com/automenta/narchy/blob/volatile1/app/src/main/java/nars/op/prolog/PrologCore.java#L338
05.02.19 09:06:28<sseehh> (i mean with the asssrtA explicit is what i was doing before)
05.02.19 09:06:34<dmiles> (the heirarchial was mainly to save space)
05.02.19 09:06:59<sseehh> i am not sure what is stored in your hierarchy
05.02.19 09:07:05<dmiles> but it allows memory chanigng to be less impactfull
05.02.19 09:07:17<sseehh> bbiab
05.02.19 09:07:41<dmiles>     public static alice.tuprolog.Term assertion(alice.tuprolog.Term p) {
                 <dmiles>         return new Struct("assertz", p);
                 <dmiles>     }
05.02.19 09:08:04<dmiles> but yeah.. basically prolog is not a suloution
05.02.19 09:08:38<dmiles> for exmaple i dont use prolgo from the database.. jsut the programming language i implemented the database in
05.02.19 09:08:53<dmiles> for exmaple i dont use prolog as a  database
05.02.19 09:09:16<dmiles> instead i wrote a database engine in prolog
05.02.19 09:09:33<dmiles> one that was able to do what was needed 
05.02.19 09:09:59<dmiles> liek this..
05.02.19 09:10:14<dmiles> ?- mpred_add(a==>b).
05.02.19 09:10:15<PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:10:33<dmiles> ?- mpred_why(b).
05.02.19 09:10:34<PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis:  No justifications for b. 
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
05.02.19 09:10:35<PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:10:40<dmiles> ?- mpred_add(a).
05.02.19 09:10:41<PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:10:43<dmiles> ?- mpred_why(b).
05.02.19 09:10:44<PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: Justifications for b:
                 <PrologMUD> aindilis:     1.1 a  % [user_input:1] 
                 <PrologMUD> aindilis:     1.2 a==>b  % [user_input:1] 
05.02.19 09:10:45<PrologMUD> aindilis:     1.3 mfl4(_,dmiles,user_input,1) 
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
05.02.19 09:10:46<PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:11:35<dmiles> ?- mpred_why(X,baseKB).
05.02.19 09:11:36<PrologMUD> aindilis:  det(No,0)
05.02.19 09:11:45<dmiles> ?- mpred_why(genlMt(X,baseKB)).
05.02.19 09:11:46<PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
05.02.19 09:11:47<PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: Justifications for genlMt(user,baseKB):
                 <PrologMUD> aindilis:     1.1 genlMt(user,baseKB)  % [mfl4(_4444,baseKB,_4448,_4450)]       :- 
                 <PrologMUD> aindilis:     1.2 true  % [foreign:_4704] 
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
05.02.19 09:11:48<PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: % X=X
                 <PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:12:02<dmiles> ?- mpred_why(genlMt(baseKB,W)).
05.02.19 09:12:03<PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis:  No justifications for genlMt(baseKB,_9248). 
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 <PrologMUD> aindilis: % W=W
05.02.19 09:12:04<PrologMUD> aindilis: %  det(Yes,1)
05.02.19 09:13:11<dmiles> also every assertion goes into a context when i use the normal API
05.02.19 09:14:05<dmiles> but a person jsut should use whatever language they are most conmforatable wirth
05.02.19 09:15:13<dmiles> i mean to implement such a database
05.02.19 09:20:20<dmiles> i've spent 4 years this last time workign on impleneting CYC in prolog and i see it will take me about 2 more years to finish
05.02.19 09:20:50<dmiles> i didnt want to have to wait until thne to start working :P
05.02.19 09:21:42<dmiles> well to give cyc the super powers of prolog .. is is like a 1-2 month job
05.02.19 09:21:55<dmiles> (2-3 year job the otehr way arround)
05.02.19 09:25:12<dmiles> in my opinion (i've studied at least 10 differnt clause indexing schemes) and not seen any as good as cyc's
05.02.19 09:26:28<dmiles> well cyc's is this cross-eyes multidireciton hashlinks between iterators
05.02.19 09:28:13<dmiles> well cyc's is this cross-eyed multidirectional  hashlinked thing that dellivers iterators .. though it can aford this because so much is perminant in memory
05.02.19 09:29:18<dmiles> what is nice about it though is CYC's indexer daemon is following a bunch of changable rules on how to index
05.02.19 09:29:46<dmiles> some stuff is even stored in Luceing
05.02.19 09:30:53<dmiles> https://github.com/TeamSPoon/CYC_JRTL_with_CommonLisp/blob/larkc/platform/Desktop/server-4q/com/cyc/cycjava/cycl/lucene_index.java
05.02.19 09:31:06<dmiles> (for a jynx)
05.02.19 09:32:53<dmiles> part of the Semantic Knowledge Source Integration (SKSI) Facility
05.02.19 09:41:40<dmiles> most the time the programmer tells cyc where to store each prodicate
05.02.19 09:42:09<dmiles> like nounStrings and verbStrings are not stored in the normal clausedb
05.02.19 09:42:44<dmiles> yet to me working on the system i am able to pretend they are from the clausedb
05.02.19 09:45:36<dmiles> certain predicates are per-user
05.02.19 09:45:50<dmiles> and per-program.. and per-day
05.02.19 09:46:24<dmiles> you declare how they are supposed to be scoped
05.02.19 09:47:28*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
05.02.19 09:49:05<dmiles> eahc predicate can be scoped vvia time demensionality in which it belongs
05.02.19 09:51:23<dmiles> it is not actualyl the infrastructure for that is the elegant part in this.. it is the descriptive language in which we use to decalre such things that is 
05.02.19 09:52:41<dmiles> teh elegance is whenm you go back to change your mind about how it was layed out.. that you only have to explajn to cyc the minor part of the layout that changes
05.02.19 09:56:08<dmiles>  like:   argIsIndexedNonCaseSensitive(verbStrings,1).
05.02.19 09:57:08<dmiles> waitAtLeastTimeBeforeGeneralIndexing(verbStreings,MinitesFn(3)).
05.02.19 09:57:24<dmiles> waitAtLeastTimeBeforeGeneralIndexing(verbStrings,MinutesFn(3)).
05.02.19 09:58:06<dmiles> or: assertionsKeepPerUser(verbStrings).
05.02.19 09:58:46<dmiles> at that ppoint it job is to make wahtever code changes are required
05.02.19 09:58:54<dmiles> CYC's job
05.02.19 10:39:38<sseehh> i still am not clear on what exactly cyc consist of and has to do beyond prolog
05.02.19 10:39:55<sseehh> or priotizing prolog search heuristics
05.02.19 10:40:52<sseehh> maybe graph search on a concept network
05.02.19 10:41:15<dmiles> mostly CYC is all about priotizing prolog search heuristics
05.02.19 10:41:31<dmiles> at least has had a huge edge on others with memoization/tabling
                 <sseehh> so what makes it so complicated?
05.02.19 10:41:43<sseehh> this is the same thing im talking about modifying tuprolog for
05.02.19 10:41:55<dmiles> its many term and things are indeteriminant
05.02.19 10:42:16<sseehh> aside from the huge KB, what exactly is complex about cyc
05.02.19 10:42:18<dmiles> many predicates cant bve rerpesented natrually from prolog
05.02.19 10:42:21<sseehh> if its relying on prolog
05.02.19 10:42:36<sseehh> like what?
05.02.19 10:42:43<dmiles> though in my impls.. i made prolog accept such terms
05.02.19 10:43:01<dmiles>  motherOf(fred).
05.02.19 10:43:30<dmiles> that term is not representable natrualyl in prlog as it is actualyl a variable
05.02.19 10:43:53<sseehh> it is a fact aka a belief right?
05.02.19 10:44:00<dmiles> it represents the result of a successfoull query to mother(freed,M).
05.02.19 10:44:02<sseehh> aka assertion
05.02.19 10:44:17<dmiles> successful query to ?- mother(freed,M).
05.02.19 10:44:40<dmiles> righyt it is part a belief.. and partly a term that represent future work the system will do
05.02.19 10:44:44<sseehh> oh
05.02.19 10:44:51<sseehh> i was reading it as mother(fred)
05.02.19 10:44:55<sseehh> so here is a relation
05.02.19 10:45:08<sseehh> mother(fred,?M)
05.02.19 10:45:14<dmiles> ?- mother(fred,X).   returns X = motherOf(fred).
05.02.19 10:45:24<dmiles> *nod*
05.02.19 10:45:33<sseehh> ok so you see how this looks from nars perspective
05.02.19 10:45:37<sseehh> you can either use a query variable
05.02.19 10:45:43<sseehh> like to find all the mothers of fred
05.02.19 10:46:02<sseehh> or you can use a # depvar to state the class of "mothers of fred"
05.02.19 10:46:08<sseehh> mother(fred, #m)
05.02.19 10:46:11<dmiles> also that term is the same term as  prototypicalIzsntaceofSuccefullQueryFn()
05.02.19 10:46:33<sseehh> (mother(fred, #m) --> instanceOfAQuery)
05.02.19 10:47:05<dmiles> this works out since proably fred only has one mther
05.02.19 10:47:40<dmiles> but  think of   mother(#k1,thelma) & mother(#k2,thelma)
05.02.19 10:48:11<dmiles> these two kids #k1 and #k2  are maybe the same kid
05.02.19 10:48:19<sseehh> right maybe maybe not
05.02.19 10:48:40<sseehh> (mother(#k1,thelma), mother(#k2,thelma), (#k1 <-> #k2))
05.02.19 10:48:42<sseehh> or
05.02.19 10:48:45<sseehh> (mother(#k1,thelma), mother(#k2,thelma), --(#k1 <-> #k2))
05.02.19 10:48:52<sseehh> or using the equal stuff i am still prototyping
05.02.19 10:48:56<dmiles> *nod*
05.02.19 10:48:57<sseehh> (mother(#k1,thelma), mother(#k2,thelma), equal(#k1,#k2))
05.02.19 10:48:59<sseehh> (mother(#k1,thelma), mother(#k2,thelma), --equal(#k1,#k2))
05.02.19 10:49:13<sseehh> the equal stuff has the ability to go through the functors and re-unify the other terms in the overall compound
05.02.19 10:49:17<sseehh> so if you say
05.02.19 10:49:24<sseehh> (mother(#k1,thelma), mother(#k2,thelma), equal(#k1,fred))
05.02.19 10:49:30<sseehh> er
05.02.19 10:49:36<sseehh> (mother(#k1,thelma), mother(#k2,thelma), equal(#k1,#k2), equal(#k1, fred))
05.02.19 10:49:43<sseehh> it will boil down to
05.02.19 10:49:48<dmiles> yeah all the posisble permutations
05.02.19 10:49:49<sseehh> mother(fred, thelma)
05.02.19 10:50:07<sseehh> if there is a conflict the term becomes false, or null or something
05.02.19 10:50:10<dmiles> fred might not even be related to those kids as well
05.02.19 10:50:15<sseehh> in which case the belief still can exist
05.02.19 10:50:17<sseehh> just negated
05.02.19 10:50:33<dmiles> also though think about if fred was a system mistake
05.02.19 10:50:52<dmiles> that is that the mother produced for him needs to be also considered a mistake
05.02.19 10:51:22<dmiles> by a mistake i mean someone can prove that 'fred' was a bad binding
05.02.19 10:51:41<dmiles> (a bad binding say in a compound precondition)
05.02.19 10:51:58<dmiles> we dont want to flounder and backtrack in this case
05.02.19 10:52:22<dmiles> prolog makes thre mistake of having the entire system subject to such combinatorics
05.02.19 10:52:30<sseehh> yeah a depth first search
05.02.19 10:52:46<sseehh> but it could be made breadth first or other variations on graph search like we discussed
05.02.19 10:52:52<dmiles> CYC says that is onmly of 128 ways to search
05.02.19 10:53:07<dmiles> right breadth first in another one
05.02.19 10:53:35<sseehh> ok that is one clear way it complexifies more than prolog
05.02.19 10:53:55<dmiles> yeah searcvh is not set in CYC 
05.02.19 10:54:21<dmiles> there is acutally over 200 diffenrt non-porlog modules that all appear as prolog
05.02.19 10:54:46<dmiles> (every module at least is interfaceable as if prolog)
05.02.19 10:55:21<dmiles> but they are often algrythems that are jsut the optimization of the day
05.02.19 10:55:42<dmiles> by making everyrthing at least interfaces as if its prolog you get some homogeny
05.02.19 10:56:23<dmiles> CYC is a bit like have SQL mixed with Jva
05.02.19 10:56:44<dmiles> Java*    in that either system might be crippled if not having the otuerh
05.02.19 10:57:13<dmiles> (for a particuar set of applications :P )
05.02.19 10:57:23<sseehh> it sounds like a smart flexible graph search replacement for default prolog DFS could do most if not everything
05.02.19 10:57:39<sseehh> at least some interface allowing any of the 200 non-prolog search methods
05.02.19 10:57:46<sseehh> but probably only a few are really needed
05.02.19 10:57:53<dmiles> right .. but then ther eis thes special terms
05.02.19 10:57:55<sseehh> if they can be abstracted sufficiently
05.02.19 10:58:10<dmiles> these special future terms
05.02.19 10:58:23<dmiles> that cannot be represented finatily
05.02.19 10:58:33<dmiles> finitely .. as least in logic
05.02.19 10:58:58<dmiles> but can structurelyu have a represenation
05.02.19 10:59:09<dmiles> SUMO is full of such terms
05.02.19 10:59:14<sseehh> like what?
05.02.19 10:59:24<dmiles> like   WhenFn(SomeEventFn()))
05.02.19 10:59:41<dmiles> that term represents liek a time segment
05.02.19 10:59:53<sseehh> sure this would be like what i do with nars belief projection
05.02.19 10:59:58<sseehh> sampling the memory at different times
05.02.19 11:00:01<sseehh> but it could be event driven too
05.02.19 11:00:09<sseehh> and still produce similar time-scoped output
05.02.19 11:00:13<dmiles> it needs to sometimes unify with data other times needs to create new times
05.02.19 11:00:37<sseehh> yeah narchy has a big time thing
05.02.19 11:00:43<sseehh> i think could do a similar job
05.02.19 11:00:44<sseehh> like
05.02.19 11:01:05<dmiles> it is a contextual closure that means something at each part of the proofs that the system retuens
05.02.19 11:01:35<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/time/TimeGraph.java#L53
05.02.19 11:01:37<dmiles> for exmaple SomeEventFn() can never be equal to SomeEventFn()
05.02.19 11:02:02<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/truth/polation/TruthPolation.java#L30
05.02.19 11:02:14<dmiles> yet WhenFn(SomeEventFn()) &  WhenFn(SomeEventFn())  can be euqal
05.02.19 11:02:19<sseehh> nars makes this simple because terms appearing in a sequence are by default 'events'
05.02.19 11:02:23<sseehh> nothing is not an event
05.02.19 11:02:37<sseehh> the sequence itself can be an event
05.02.19 11:02:44<dmiles> all events occuring at the same time are not the same event
05.02.19 11:02:47<sseehh> two events in the sequence may be equal but at differnt times
05.02.19 11:02:57<dmiles> *nod*
05.02.19 11:02:59<sseehh> right parallel sub-event
                 <sseehh> like
05.02.19 11:03:07<sseehh> ((a &| b) &&+1 c)
05.02.19 11:03:22<sseehh> ((a &| #betweenAandC) &&+1 c)
05.02.19 11:03:25<sseehh> er
05.02.19 11:03:31<sseehh> ((a &| #duringAandBeforeC) &&+1 c)
05.02.19 11:03:35<dmiles> but so far cyc is 1000 times faster than Vimpire, EProver etc
05.02.19 11:03:47<dmiles> (at least according to the benchmarks()
05.02.19 11:04:21<dmiles> right all these things are doable in ever yother system
05.02.19 11:04:23<sseehh> i was reading yesterday eprover's explanation of what it differs from prolog
05.02.19 11:04:58<sseehh> https://wwwlehre.dhbw-stuttgart.de/~sschulz/E/FAQ.html
05.02.19 11:05:12<sseehh> E has purely declarative semantics: a<-b. is fully equivalent to a;~b. is fully equivalent to ~b;a. 
05.02.19 11:05:17<sseehh> im not sure this assumption is helpful
05.02.19 11:05:33<sseehh> in temporal cases at least
05.02.19 11:05:34<dmiles> E has a different (stronger) concept of equality on terms, not modulo unification, but modulo an equational first-order theory (which is part of the input problem).
05.02.19 11:05:41<sseehh> i mean E has no concept of time
05.02.19 11:05:45<sseehh> apparently
05.02.19 11:06:03<dmiles> yeah it will take a few years to catch up with CYC 
05.02.19 11:06:15<dmiles> (examples like "no concept of time")
05.02.19 11:06:26<dmiles> also EProver is FOL
05.02.19 11:06:46<dmiles> whereas in CYC we represent FOL and every other order of logic
05.02.19 11:07:28<dmiles> also CYC has ideas of Scope
05.02.19 11:08:05<dmiles> that if you take every asseraion and immigne how it can be commpbined with N more aaserions that is a signel scope
05.02.19 11:08:17<dmiles> single scope!
05.02.19 11:08:25<dmiles> Advantages of PROLOG:
05.02.19 11:08:26<dmiles> ◦You can write procedural code with semi-explicit control flow and cuts.
                 <dmiles> ◦PROLOG has a pretty rich set of predefined predicates, i.e. numbers, arithmetic, I/O-Statements and so on.
                 <dmiles> ◦PROLOG is a mature technology, and may be faster for some classes of problems.
05.02.19 11:08:41<dmiles> that is what CYC was missing
05.02.19 11:09:04<dmiles> prolog can be faster for some classss of problems
05.02.19 11:09:42<dmiles> what would be ammazing to is if prolog was using these "indeterminate skolems"
05.02.19 11:10:17<dmiles> (if prolog's logic was no longer limited to what prolog can represent)
05.02.19 11:10:39<sseehh> nars could use some kind of scoping but i wonder if ths is not just a matter of creating separate 'NAR'
05.02.19 11:10:42<sseehh> for each scop
05.02.19 11:10:43<sseehh> scope
05.02.19 11:10:53<sseehh> and super-NAR able to access sub-NARs
05.02.19 11:10:59<sseehh> in scalable hierarchies
05.02.19 11:11:10<dmiles> that if you ask proog for every number from negative infiny to postive infinty it comes back with a single terms
05.02.19 11:11:28<sseehh> or embedded /temporary/virtual NAR's created by a NAR for some purpose like to solve a specific problem
05.02.19 11:12:06<dmiles> so for exmaple .. if you ask iot to have a customized NARS for a particular problem
05.02.19 11:12:19<dmiles> it immagines an NARS post customized
05.02.19 11:12:42<dmiles> then works its way baquards to sync up with you in time
05.02.19 11:13:14<sseehh> or just dumps its memory back into the main one (like analogy of a thread join)
05.02.19 11:13:18<sseehh> when its finished
05.02.19 11:13:20<sseehh> or part of its memory
05.02.19 11:13:23<sseehh> like the most confident results
05.02.19 11:13:24<dmiles> *nod* 
05.02.19 11:13:41<dmiles> yeah it is much like java thread futures
05.02.19 11:14:09<dmiles> the odd/cool part is it does materialize whatever is materialzable
05.02.19 11:14:13<sseehh> well its like forking. but once its forked (and how, ie. what NAR configuration you want) then the question is what kind of control vocabulary are you going to need to control it
05.02.19 11:14:31<sseehh> many ways to customize a NAR of any size
05.02.19 11:14:34<sseehh> see NARS.java
05.02.19 11:14:39<sseehh> its the main builder
05.02.19 11:14:47<sseehh> NARS.tmp() gives the default 'temporar' nar used for tests
05.02.19 11:14:53<sseehh> creates one i mean
05.02.19 11:15:00<dmiles> yeah .. we can say that there is a blanks slate that supposedly fits everyhtinhg
05.02.19 11:15:03<sseehh> NAgentX has a bigger NAR for game playing
05.02.19 11:15:21<sseehh> if you compare NARS.java and where NAgentX creates a NAR this is the spectrum of configs available so far
05.02.19 11:15:27<dmiles> (even we wee dont know eaxty say if its the bigger/smaller one)
05.02.19 11:15:33<sseehh> choosing different concept index impl, plugins etc
05.02.19 11:15:52<sseehh> different executor (single thread vs multithread)
05.02.19 11:15:58<sseehh> clock (cycle or realtime)
05.02.19 11:16:08<sseehh> each deriver is a plugin
05.02.19 11:16:12<sseehh> and can have multiple
05.02.19 11:16:14<dmiles> we have notions about what cvan be differnt about them at least 
05.02.19 11:16:33<dmiles> we have names like drivers, worlds, attention
05.02.19 11:16:37<sseehh> and also defaluts for budgeting and truth
05.02.19 11:16:49<sseehh> but there should also be a pluggable truth system too with all the truth functions
05.02.19 11:17:11<sseehh> so differetn varieities of truth could be installed rather than the only one (NAL) impl so far
05.02.19 11:17:21<dmiles> and a way to talk logically about what we want each NARs configured
05.02.19 11:17:22<sseehh> like there could be something opencog's PLN-like for example
05.02.19 11:17:31<sseehh> or basic crisp boolean logic
05.02.19 11:17:54<sseehh> but yo ucan also get crisp boolean logic by setting the truth resolution (dithering)
05.02.19 11:17:57<sseehh> to something large like 0.25 or 0.5
                 <dmiles> yeah some things need crispness.. and even the crispo things need a infintary from of logic
05.02.19 11:18:18<dmiles> infintatry form of logic*
05.02.19 11:18:26<sseehh> increasing the resolution decreases the precision but also makes less unique tasks so it uses less memory and can go faster
05.02.19 11:18:58<sseehh> so that x. %0.10%  and x. %0.09%  would be seen as equal
05.02.19 11:19:05<sseehh> rounded to 0.1 if 0.1 resolution
05.02.19 11:19:17<dmiles> eyah that ammount of detail vs decrease of precision is the optimization of logic
05.02.19 11:19:32<dmiles> (i mean what makes logic usefull or optimizable)
05.02.19 11:20:34<dmiles> for exmaple if we want to measure all the water molocules in a gallon of water for weght
05.02.19 11:20:59<dmiles> we lose slight preseions and just realize it wieghs 8 pounds
05.02.19 11:21:43<dmiles> that level of going in/out from precision is important
05.02.19 11:22:56<dmiles> we can add tempature to get a more preciese wight
05.02.19 11:23:19<dmiles> the important thing is we are not stuck wieghing the water our per once
05.02.19 11:23:24<dmiles> (or per teaspoon)
05.02.19 11:24:14<dmiles> the idea of precision is how detailed the world is that the information rerpesents
05.02.19 11:24:19<dmiles> (even in NARS)
05.02.19 11:25:10<dmiles> that idea of  "level of detail" is the power of even EProver logics
05.02.19 11:25:55<dmiles> when we move up and down complexity detail we get more processing done
05.02.19 11:26:20<dmiles> than we can at any single level of rerpesentation
05.02.19 11:27:31<dmiles> so sometimes %0.10%  and x. %0.09%    can be rauls
05.02.19 11:27:47<dmiles> can be equals
05.02.19 11:28:01<dmiles> other times numbers stop existing 
05.02.19 11:28:10<dmiles> i know that sounds like i am eing silly
05.02.19 11:28:23<dmiles> but that is the logic system that CYC is
05.02.19 11:29:20<dmiles> CycL is a logical language far more expressive than natural language
05.02.19 11:30:19<dmiles> Nareese can or should been such a llanguage as well
05.02.19 11:31:37<dmiles> more expressive that NL.. is that it also doesnt have to be understood
05.02.19 11:32:07<dmiles> it expressives things like bitmaps 
05.02.19 11:32:31<dmiles> histographical informations and then exprtesses it doesnt know what iut jsut said
05.02.19 11:32:49<dmiles> i guess we can do that in english
05.02.19 11:33:08<dmiles> the the differnce in english is we have to tap into rthe resources of two paries
05.02.19 11:33:18<dmiles> two parties*
05.02.19 11:33:43<dmiles> where in CycL it has to contain all the informaytion that both parties would know
05.02.19 11:33:55<dmiles> (thus does)
05.02.19 11:34:13<dmiles> of course all that info is in "futures"
05.02.19 11:34:54<dmiles> jsut liek in NARS one numbe ris a "how much of the future am i?" 
05.02.19 11:35:28<dmiles> 0.9 is closer to the futiure right answer than 0.1 would be
05.02.19 11:36:15<dmiles> but CYC also has nothing to do with AI
05.02.19 11:36:19<dmiles> NARS does
05.02.19 11:36:39<dmiles> CYC is only an IDE
05.02.19 11:36:57<dmiles> that was designed to create the most chanllenging programs 
05.02.19 11:37:13<dmiles> Lenat goes arround pretendding CYC is AI
05.02.19 11:37:30<dmiles> silly as goign arround prtending Prolog is AI
05.02.19 11:39:46<dmiles> the most important part of NARS as i think main sseehh reaslized is teh ever addaptable GUI
05.02.19 11:40:02<dmiles> is that NARS has an IDE
05.02.19 11:40:13<dmiles> 1/2 for NARS and 1/2 for human
05.02.19 11:42:59<dmiles> that iteraction with that IDE seems hard without an expert systme to keep the human and NARS togetehr
05.02.19 11:43:20<dmiles> i cant immagine what iot would be like dealing with that day to day
05.02.19 11:43:35<dmiles> oops i do know aht that is like
05.02.19 11:43:48<dmiles> it is like wit is whenever i am not programming in Logic
05.02.19 11:44:24<dmiles> when i am just being a slave to a missing expert system
05.02.19 11:44:56<dmiles> like typing out more lines of code in a year than i have memorized
05.02.19 11:47:09<dmiles> i always say it would be impossible to make a RNN into an AI unlesss someone programmed CYC to do it for them
05.02.19 11:48:11<dmiles> it would be unlikely to make NARS an AGI untill somone wrote a program to make tha thappen
05.02.19 11:50:31<dmiles> it seesm somewaht easier to get prolog to write programs than NARS
05.02.19 11:51:36<dmiles> at least programs that are on first run managing all the ideas and contraints
05.02.19 11:53:14<dmiles> that is, some programing tasks are ideally done in programming languages
05.02.19 11:53:33<dmiles> (expecialyl tasks liek writting a program)
05.02.19 11:54:42<dmiles> but i do get ya sseehh .. we can get NARS to do crips logic to
05.02.19 11:55:55<dmiles> it jsut not sure why no ones bother to try but you
                 *** Quit: jbalint (~jbalint@unaffiliated/jbalint) left #logicmoo: Quit: Bye!
05.02.19 11:56:56<dmiles> not that there is anyhting wrong wioth that..
05.02.19 11:57:04<dmiles> but i think you going to have to pull teeth and hair the entire time
05.02.19 11:57:57<dmiles> and your only friends are those whom beliving in writing in crisp logic is not some sort of evil thing
05.02.19 12:00:18*** Join: jbalint (~jbalint@71-90-85-113.dhcp.ftbg.wi.charter.com, (unauthenticated): Jess Balint)
                 *** Quit: jbalint (~jbalint@71-90-85-113.dhcp.ftbg.wi.charter.com) left #logicmoo: Changing host
                 *** Join: jbalint (~jbalint@unaffiliated/jbalint, jbalint: Jess Balint)
05.02.19 12:00:23<dmiles> cyc: (+ 1 1)
05.02.19 12:10:03<dmiles> tetris in NARS works because of a crisp simulator is created for NARS to use
05.02.19 12:11:15<dmiles> i can imagine one day writing of such simulators would no longer be done by hand
05.02.19 12:12:08<dmiles> NARS needs to be able to summon such creations
05.02.19 12:13:06<dmiles> that is the one thing that CYC excels at is simulation of models
05.02.19 12:13:49<dmiles> not at designing cockpits but making them exist
05.02.19 12:14:37<dmiles> prolog seems good and making finite cockpits but not the infinate coclpits that CYC makes
05.02.19 12:14:49<sseehh> back
05.02.19 12:14:51<dmiles> prolog seems good at making 
05.02.19 12:16:29<sseehh> agreed , still not clear yet on what cyc does really differently but im not in a hurry
05.02.19 12:16:50<sseehh> yes i think IDE (thus HCI) is at least half of the AI problem
05.02.19 12:17:02<sseehh> we use IDE to develop code, and IDE themselves are getting smarter
05.02.19 12:17:14<sseehh> like compare modern intelliJ to the first version of eclipse
05.02.19 12:17:21<sseehh> thee is a progression
05.02.19 12:18:03<sseehh> i can go back further to older IDE like turbo prolog, qbasic.. then before those assembly
05.02.19 12:18:07<sseehh> writtten line by lnie
05.02.19 12:18:08<dmiles> especialy like the wysiwyg type GUI designer parts of the IDE
05.02.19 12:18:15<sseehh> then soldering transistors together
05.02.19 12:18:25<sseehh> its an evolution of HCI ergonomics more than anything
05.02.19 12:18:41<sseehh> now there i think is sort of an antipattern that emerged
05.02.19 12:18:59<sseehh> that those tools allowed people to make custom GUI but that didnt really solve anything
05.02.19 12:19:10<dmiles> it is so easy for us to write idomatic code. .we spent our time doing so!
05.02.19 12:19:12<sseehh> instead what we ended up with are app stores for a million apps
05.02.19 12:19:30<sseehh> and a million web pages
05.02.19 12:19:33<sseehh> with differnt UIs
05.02.19 12:19:45<sseehh> that some "aesthetic tyrant" web designer gets paid to confuse visitors with
05.02.19 12:19:54<dmiles> ( it is getting easier and easier to do _more_, but, of the same things)
05.02.19 12:20:20<dmiles> (is that the antipattern? )
05.02.19 12:20:23<sseehh> instead something like what appdapter and spacegraph are trying to solve is like gui metaprograming
05.02.19 12:20:35<sseehh> i mean its not enough to just let people draw buttons and txt boxes on a form
05.02.19 12:20:41<sseehh> and connect that to code
05.02.19 12:21:07<sseehh> the buttons and text boxes do exist but to make them only a representation of something else is what dilutes the semantics
05.02.19 12:22:16<sseehh> especially when they are arranged in some arbitrary fixed way like a GUI form editor allows
05.02.19 12:22:30<sseehh> to make a specific app that someone can package and label and belive theyre finished with it
05.02.19 12:22:59<sseehh> or in an interactive webpage that some client webbrowser is supposed to render in a specific way
05.02.19 12:23:07<sseehh> meanwhile what is realy happening is they are being separated from some essential data
05.02.19 12:23:14<sseehh> which cna have any number of representations and ways of being interacted with
05.02.19 12:24:50<sseehh> i was looking at the tuprolog "IDE" the yesterday
05.02.19 12:24:52<sseehh> gtg bbiab
05.02.19 12:25:48<sseehh> real quick i was looking at it and i knew how much it sucked but i wanted to see again just how much
05.02.19 12:26:00<dmiles> NARS cockpits are good exmaple of how important IDEs are.. they might even need to be button mashable for us humans!
05.02.19 12:26:01<sseehh> and i have some ideas for a better prolog IDE
05.02.19 12:26:12<sseehh> i kknow theres visual prolog and that web based prolog thats really good
05.02.19 12:26:14<sseehh> but this would be different
05.02.19 12:26:18<sseehh> ilil explain later bbiab
05.02.19 12:26:41<dmiles> yes.. i like to see/hear
05.02.19 12:29:38<dmiles> i've liek this REPL: (i suppose it like the TErm Language mostly) https://www.researchgate.net/figure/Screenshot-of-Prolog-CG_fig7_228916690
05.02.19 12:37:33<dmiles> and this term language  http://callisto.ggsrv.com/imgsrv/FastFetch/UBER1/ZI-2483-2003-FAL00-IDSI-40-1   
05.02.19 12:54:14<sseehh> that prolog+cg looks cool
05.02.19 12:54:33<sseehh> basically the prolog IDEs are all designed for prolog programmers
05.02.19 12:54:41<sseehh> but what prolog does ought to be accessible to people who dont even know what prolog is
05.02.19 12:55:07<sseehh> so i imagine a graph editor like you started to make and like i described where you just start typing
05.02.19 12:55:17<sseehh> and that becomes an ambient sort of repl
05.02.19 12:55:27<sseehh> and everything branches out and sprouts out from these
05.02.19 12:55:45<sseehh> whether its solutions (w/ the variable bindings etc) or syntax errors 
05.02.19 12:55:48<sseehh> or whatever
05.02.19 12:56:04<sseehh> like a notebook repl but freeform in the graph view
05.02.19 12:56:27<sseehh> and thats it
05.02.19 12:56:45<dmiles> what things seem the closest?
05.02.19 12:57:28<sseehh> code suggestions would appear as popups like in an IDE with recommenders
05.02.19 12:57:39<sseehh> querying into an index of active terms
05.02.19 12:57:54<sseehh> lucene has a recommender api for example
05.02.19 12:58:08<sseehh> including spell check and find misspelled words
05.02.19 12:58:11<sseehh> (levenshtein automata)
05.02.19 12:59:09<sseehh> expanding something would add more detail like its structural context
05.02.19 12:59:21<sseehh> whether this is metadata provided by cyc api, nars api etc
05.02.19 12:59:33<sseehh> in fact it could work with all these systems simultaneously if it is abstract enough
05.02.19 12:59:37<sseehh> the user wouldnt need to know any of that
05.02.19 12:59:43<sseehh> just typing stuff and following the instructions to clarify the input
05.02.19 13:00:05<sseehh> i have a dataflow UI partially built in spacegraph
05.02.19 13:00:15<sseehh> it even does automatic type adapters in the wires
05.02.19 13:00:27<sseehh> btw in spacegraph if you didnt notice, right click is autozoom
05.02.19 13:00:31<sseehh> and right click again to undo
05.02.19 13:00:37<sseehh> mousewheel is manual zoom
05.02.19 13:00:45<sseehh> there is a zoom stack
05.02.19 13:00:53<sseehh> so if you zoom and then zoom aain you can unzoom and unzoom
05.02.19 13:00:56<sseehh> to return to the original view
05.02.19 13:01:05<dmiles> here was a realyl neat autocomplte for PDDL  .. have to scroll down but there is some neat animations  https://marketplace.visualstudio.com/items?itemName=jan-dolejsi.pddl
05.02.19 13:01:39<sseehh> you can get to the spacegraph dataflow if you run WidgetTest then one of the tabs i forget the label but it will show you a blank area
05.02.19 13:01:47<sseehh> double click that and a popup menu appears
05.02.19 13:01:54<sseehh> and there a bunch of widgets most of them are placeholders
05.02.19 13:02:00<sseehh> but some function
05.02.19 13:02:07<dmiles> yeah i do think it starts with spacegraph as far as naviagion
05.02.19 13:02:15<sseehh> for example theres microphone and webcam
05.02.19 13:02:28<sseehh> text input, integer input
05.02.19 13:02:31<sseehh> toggle buttons etc
05.02.19 13:02:38<sseehh> and its arranged using a 2d physics engie
05.02.19 13:02:43<sseehh> so the boxes dont overlap they bounce into each other
05.02.19 13:02:49<sseehh> the wires are physically modeled too
05.02.19 13:03:07<sseehh> editable-dog made a system called lemon i had hoped to incorporate features from that
05.02.19 13:04:31<sseehh> especially since i started the keyboard focus stuff
05.02.19 13:04:45<sseehh> which currently works based on spatial position, not any predefined tab order
05.02.19 13:05:19<sseehh> this pddl ide stuff looks good, not anything that intelliJ / netbeans / eclipse etc isnt doing afaict
05.02.19 13:05:23<sseehh> just popups
05.02.19 13:05:32<sseehh> i want the same thing except graph-like
05.02.19 13:06:01<sseehh> yes they can be listed and keyboard navigable but it would be the entry points to a graph that can be expanded and navigated through, while still in context
05.02.19 13:06:22<sseehh> and then that could be reified / pinned as an object itself
05.02.19 13:06:32<sseehh> just like if you typed a file path it would show the directory contents
05.02.19 13:06:44<dmiles> pulling an object apprt
05.02.19 13:06:45<sseehh> or a url would show a webpage (but who needs html if this exist)
05.02.19 13:07:12<sseehh> yeah transforming it in different ways, its components would be completely accessible
05.02.19 13:07:21<sseehh> not abstracted behind what GUI are usually designed for
05.02.19 13:08:17<sseehh> then like i mentioned before to make this a window manager and then release a linux distribution that boots straight into it
05.02.19 13:08:37<sseehh> because there wouldnt be much need for other kinds of apps
05.02.19 13:09:06<sseehh> not to stop app develpoment but to dissolve it to a different granularity
05.02.19 13:09:21<sseehh> interoperable widgets, and in these environments the AI agents can cooperate with humans
05.02.19 13:09:32<sseehh> like little robots runnign around the screen clicking buttons and wiring thing
05.02.19 13:10:14<sseehh> jumping from one window to another like a sidescroller. firing missiles at each other etc
05.02.19 13:10:24<dmiles> not sure wehre i saw it.. but it was wehnever the human got too close to edge of screen the robot would reach out its skelecal arm and offern to hold an object for you
05.02.19 13:10:53<sseehh> a real robot or an animated one
05.02.19 13:11:05<dmiles> it was animated
05.02.19 13:11:17<sseehh> that would be cool
05.02.19 13:11:33<sseehh> thats the kind of thing that logic reasoning on the analysis of the gui state could trigger
05.02.19 13:11:50<dmiles> you didnt see the body but whenever you got to anywhere something was rythemically offerign to help.. the aritist of course wanted to maek it look creepy 
05.02.19 13:11:52<sseehh> like knowing the relative visiblity of objects through time
05.02.19 13:12:55<dmiles> but you knew what each offer was.. like one was goign to save it.. another trhow it away.. another would read it alloud
05.02.19 13:12:56<sseehh> also in spacegraph if you hold middle mouse button it can drag the entire window
05.02.19 13:13:19<sseehh> there was a feature for resizing a wnidow this way too but its broken at the moment
05.02.19 13:13:29<sseehh> i mean dragging the top -level window
05.02.19 13:13:36<sseehh> not a spacegraph window inside the window
05.02.19 13:13:42<sseehh> so you dont have to drag the title bar
05.02.19 13:13:59<sseehh> it can be used to make cool sticky widgets if you disable the window decoratoin
05.02.19 13:14:01<sseehh> and shrink the window
05.02.19 13:14:04<sseehh> and make it above all
05.02.19 13:14:18<sseehh> f2 or f3 toggles fullscreen and decoration i think
05.02.19 13:14:23<sseehh> f4 and f5 increase and decrease framerate
05.02.19 13:14:28<sseehh> it will print out what the current framerate is on the console
05.02.19 13:14:35<sseehh> so to save cpu you can decrease fps
05.02.19 13:14:40<sseehh> arbitrarily
05.02.19 13:16:07<sseehh> i had used java swing more than any gui api, i briefly tried javafx but at some point wanted to redevelop spacegraph now it is my preferred UI api
05.02.19 13:16:24<sseehh> it doesnt have so much stupid shit you have to go thru just to create a window and add some buttons for example
05.02.19 13:17:44<sseehh> swing internally is a mess.  it has so many layers of event handler nonsense
05.02.19 13:17:48<sseehh> javafx i cant imagine is much better
05.02.19 13:18:06<sseehh> but even though javafx was designed for accelreated graphics it somehow felt slower than swing which wasnt
05.02.19 13:18:31<sseehh> spacegraph has pretty simple event system i dont imagine it can grow much more complex
05.02.19 13:18:45<sseehh> it uses atomic stuff and is fully multithreaded
05.02.19 13:19:16<sseehh> widgets are aware of when they are created and destroyed and theres not much that can go wrong
05.02.19 13:19:50<dmiles> in the jake to 3 auxilary windows were spacegrpah right?
05.02.19 13:19:57<dmiles> erm in Jake2Agent
05.02.19 13:19:58<sseehh> yeah
05.02.19 13:20:09<sseehh> to see spacegraph by itself find WidgetTest
05.02.19 13:20:12<sseehh> .java
05.02.19 13:21:38<sseehh> 'Wiring' has the data flow UI but it will start up blank
05.02.19 13:21:45<sseehh> double clicking that brings up the wizard/popup
05.02.19 13:24:37<sseehh> https://i.imgur.com/2b45lAU.png
05.02.19 13:25:13<dmiles> ah thaT Is nice
05.02.19 13:27:27<sseehh> it still rough around the edges but nothing that a few dozen imaginary programmers couldnt fix
05.02.19 13:28:08<sseehh> people with nearsighted vision should appreciate the zooming
05.02.19 13:31:14<sseehh> hitting f2 toggles window decoration
05.02.19 13:31:59<sseehh> then you can set it to 'above other windows' with window manager and it is like a floating widget
05.02.19 13:32:29<sseehh> since it can be dragged with middle mouse button
05.02.19 13:32:59<sseehh> https://i.imgur.com/m6oYKGE.png
05.02.19 13:34:39<dmiles> you are on a macintosh right?
05.02.19 13:36:03<dmiles> i was just going to be surprise you had three buttons
05.02.19 13:36:55<dmiles> its standard to have a 3 button whellmouse now i bet
05.02.19 13:37:09<dmiles> wheelmouse
05.02.19 13:38:12<sseehh> no im on a PC
05.02.19 13:38:47<sseehh> ordinary logitech usb mouse
05.02.19 13:39:12<sseehh> pushing the wheelmouse is the middle butotn
05.02.19 13:39:37<sseehh> button 0=left, 1=middle (wheel push), 2=right, 3=wheel up, 4=wheel down
05.02.19 13:39:40<sseehh> 5 buttons
05.02.19 13:45:22<sseehh> Client: HexChat 2.14.2 • OS: Debian buster/sid • CPU: AMD Phenom(tm) II X6 1045T Processor (2.79GHz) • Memory: 7.6 GiB Total (2.7 GiB Free) • Storage: 99.4 GB / 128.7 GB (29.3 GB Free) • VGA: NVIDIA Corporation GK208 [GeForce GT 730] @ Advanced Micro Devices, Inc. [AMD] Family 10h Processor Miscellaneous Control • Uptime: 2d 16h 34m 34s
05.02.19 15:11:45<sseehh> what i just commited to my repo has some good settings. i think it plays nario relatively good i hope im not hallucinating
05.02.19 15:12:00<sseehh> "it is just random movement" lol
05.02.19 15:12:20<sseehh> takes about a minute or two to be sure to kick in
05.02.19 15:12:47<sseehh> the 'dex' plot maesure the deliberate action decision
05.02.19 15:13:02<sseehh> thats how to know when it decides that moving is more important than analyzing the random motion trying to taech it to move
05.02.19 15:13:14<sseehh> passive vs active
05.02.19 15:13:22<sseehh> in its attitude toward the experience
05.02.19 15:14:29<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/time/Tense.java#L242 the latest change i think it helps
05.02.19 15:14:40<sseehh>     /** computes an ideal range of time for a merge or revision of tasks.
                 <sseehh>      * assumes that at least one of the items is non-eternal.
                 <sseehh>      * */
                 <sseehh>     @Nullable
                 <sseehh> public static long[] merge(Iterable<? extends TaskRegion> tasks) {
05.02.19 15:15:06<sseehh>         long[] u = Tense.union(tasks);
05.02.19 15:15:07<sseehh>         long unionRange = u[1] - u[0];
                 <sseehh>         if (unionRange > Param.TASK_REVISION_STRETCH_LIMIT_PROPORTION * Util.max(t -> t.start()==ETERNAL ?  0 : t.range(), tasks)) {
                 <sseehh>             //too sparse: settle for intersection if exists
                 <sseehh> u = Tense.intersect(tasks);
05.02.19 15:22:46*** Quit: Musk_Nakamoto (~elonsatos@2001:5b0:42d5:ad68:99aa:d124:69c6:3a1) left #logicmoo: Quit: So long, and thanks for all the fish! 2.3 Weechat is best Weechat
05.02.19 15:25:04*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
05.02.19 15:25:09<dmiles> cyc: (+ 1 1)
05.02.19 17:51:01<dmiles> oh i forget to say, CG+Prolog actually has some of those special meta-variables that CYC has
05.02.19 17:58:08<sseehh> loking it up now
05.02.19 17:58:12<sseehh> do ou know anything about http://amine-platform.sourceforge.net/
05.02.19 17:58:15<sseehh> i found this before
05.02.19 17:58:44<dmiles> its a very interesting compare to tuprolog
05.02.19 17:58:59<dmiles> it was obviously a port of a C++ codebase
05.02.19 17:59:39<dmiles> (sort of like Jake2 being a C codebase)
05.02.19 18:01:17<dmiles> http://amine-platform.sourceforge.net/ is the new port of CG+Prolog
05.02.19 18:01:30<sseehh> right
05.02.19 18:02:06<dmiles> i compared that version to the older one.. they are basicaly the same except the packacge name changed
05.02.19 18:02:27<dmiles> but i still like the new one better
05.02.19 18:02:49<dmiles> but it has to be disentangled a big
05.02.19 18:03:02<dmiles> a bit*
05.02.19 18:03:03<sseehh> The common operations (clear(), clone(), toString()) are specified in AmineObject interface. Another set of common operations are matching-based operations (match(), equal(), unify(), subsume(), maximalJoin(), and generalize()). These operations are specified in the Matching interface. The two interfaces are implemented by all Amine structures.
05.02.19 18:03:23<dmiles> yep!
                 <sseehh> its pretty complex, i couldnt make much sense of it
05.02.19 18:03:42<dmiles> these are indeed the special cases that CYC has built in
05.02.19 18:04:52<dmiles> subsume() is the most important 
05.02.19 18:05:16<dmiles> well to ontologists
05.02.19 18:05:26<dmiles> generalize() is the most important to CYC
05.02.19 18:05:37<sseehh>  CG (note the use of variables: x as a designator, T as a concept type, R as a Relation Type):                
                 <sseehh>     [Man:x]<-agnt-[Eat]-R->[T]-Color->[Color: red]
05.02.19 18:05:51<dmiles> (as long as they are implying generalize() and subsume() are differnt)
05.02.19 18:05:57<sseehh> so its basically like static typing?
05.02.19 18:06:05<sseehh> a special syntax for static typing
05.02.19 18:06:11<dmiles> sort of yes
05.02.19 18:06:24<dmiles> though static typing means this wild thing to type theorists
05.02.19 18:06:34<sseehh> well in nars terms it is just inh -->
05.02.19 18:06:48<sseehh> here it is also selecting relations
05.02.19 18:06:57<sseehh> which could be seen as just more type specification
05.02.19 18:07:04<sseehh> just for the edges in the graph rather than the nodes
05.02.19 18:07:17<sseehh> edge(node1,node2)
05.02.19 18:07:22<sseehh> aka
05.02.19 18:07:27<sseehh> ((node1,node2)-->edge)
05.02.19 18:07:46<sseehh> ((node1,node2)-->?E)
05.02.19 18:08:37<dmiles> et there is a binary prolgo relation
05.02.19 18:08:40<dmiles> eat/2 there is a binary prolgo relation
05.02.19 18:09:10<dmiles> oops sorry
05.02.19 18:09:22<dmiles> Eat is the event
05.02.19 18:09:35<dmiles> agnt/2 is the relation
05.02.19 18:09:40<sseehh> but i dont get the <- vs ->
05.02.19 18:09:46<sseehh> unless its just for convenience
05.02.19 18:09:50<dmiles> R/2 is the functional relation
05.02.19 18:10:10<dmiles> the -> is jsut a graph link
05.02.19 18:10:21<sseehh> right so why no specify it as ->E->
05.02.19 18:10:38<sseehh> or E->, E->
05.02.19 18:10:43<sseehh> if it is both outgoing
05.02.19 18:10:49<dmiles> in [Man:x]<-agnt-[Eat]-R->[T]-Color->[Color: red] ?
05.02.19 18:11:03<sseehh> they extend from [Eat]
05.02.19 18:11:05<sseehh> two paths
05.02.19 18:11:30<dmiles> yes btw they both extend equally.. the arrows direction is for 1D convienince
05.02.19 18:11:50<dmiles> CG itself is a 2-D language normally
05.02.19 18:12:03<sseehh> right it looks inteesting but i think it pushes it
05.02.19 18:12:11<sseehh> like befunge
05.02.19 18:12:56<sseehh> instead if there are 2 paths being matched here why cant they be [Eat]-agent->[Man:x] , [Eat]-R->[T]-Color->[Color: red]
05.02.19 18:13:01<sseehh> then havnig to repeat Color..
05.02.19 18:13:08<sseehh> [T].Color=red
05.02.19 18:13:09<dmiles> what it does at least is push prolog out of the FOL problems
05.02.19 18:13:10<sseehh> something ike that
05.02.19 18:13:28<dmiles> first Color is a repaltion
05.02.19 18:13:32<dmiles> second Color is a Type
05.02.19 18:13:39<sseehh> i remember seeing somewhere on tuprolog researcher page they wanted to add static typing to it
05.02.19 18:14:06<sseehh> right but isnt that implied by the first Color
05.02.19 18:14:07<dmiles> [T]-favColor->[Color: red]
05.02.19 18:14:32<dmiles> (favorite color)
05.02.19 18:14:34<sseehh> yeah
05.02.19 18:15:06<sseehh>                                     -actor->[Human :Karen *k_karen],
                 <sseehh>                                     -goal->[Poss_By *s_state],
                 <sseehh>                                     -plan->[Plan *p_plan],
05.02.19 18:15:13<sseehh> im guessing these * arent pointers
05.02.19 18:15:35<dmiles> those i trhink are existential variables
05.02.19 18:16:29<dmiles> since GC is a HOL we pass plan graphs arround 
05.02.19 18:16:56<sseehh>  This stack is implemented by UnificationStack class which extends Stack class. An element of this class is an object of UnifRecord class which extends HashMap class (with Key:Variable and Value:LstOfConstraints). A value is an object of LstOfConstraints class which is composed of an object (with its binding information) that represents the value of the variable (once determined) and a list of constraints (an ArrayList), each constraint corresponds 
                 <sseehh> to ObjectWithBindInf object (Figure 9). 
05.02.19 18:17:50<dmiles> oh year UnifRecord is slightly dubious to me
05.02.19 18:18:18<dmiles> oh yeah UnifRecord is slightly dubious to me.. unification should have been done closure to how tuprolog does it
05.02.19 18:18:37<sseehh> well here it needs to be more complex than tuprolog's
05.02.19 18:19:16<sseehh> but i dont know what the difference between binding context, unifrecord, matching interface. why cant they all be a 'unification' object
05.02.19 18:19:54<sseehh> https://github.com/automenta/narchy/blob/volatile1/nal/src/main/java/nars/unify/Unify.java#L44
05.02.19 18:20:24<sseehh> this is a recycled instance.  it holds the state of a unification process with combinatory retry
05.02.19 18:20:25<sseehh> and undo
05.02.19 18:20:44<sseehh> the result is a mapping of variables to new terms
05.02.19 18:20:58<sseehh> which can be used to substitute into a term to transform it
05.02.19 18:21:26<sseehh>  void constrain(UnifyConstraint c) {
05.02.19 18:21:42<sseehh> these are used by the derivation rules to implement guards of all kinds
05.02.19 18:21:47<sseehh> this is where type checking could be implemented
05.02.19 18:22:00<sseehh> i sort these by estimated complxity too
05.02.19 18:22:31<sseehh>     (P --> M), (S --> M),               neqRCom(S,P), notSetsOrDifferentSets(S,P) |- ((polarizeTask(P) | polarizeBelief(S)) --> M), (Belief:IntersectionDepolarized)
05.02.19 18:22:34<sseehh> the neqRCom is an example
05.02.19 18:22:35<dmiles> btw here is where constraints are checked doing CHR(FD)  https://github.com/DouglasRMiles/SxxMachine/blob/master/jsrc/machine/SxxMachine/VariableTerm.java#L217
05.02.19 18:22:50<sseehh> it has to resort to using these constraints if the pattern cant be verified statically before it starts
05.02.19 18:23:01<sseehh> which is the case if the terms are non-commutive like a list
05.02.19 18:23:05<dmiles> (since we are onthe subject of cosntraint logic programming)
05.02.19 18:23:06<sseehh> but not necessarily if there's a set
05.02.19 18:23:20<sseehh> although i bet it could try all combinations if its small enough in the pre-check
05.02.19 18:23:24<dmiles> oh yeah .. sometimes we have open and closed sets
05.02.19 18:23:36<sseehh> right ellipsis would be open sets and these would not be predictable
05.02.19 18:23:39<sseehh> and have to be constraints
05.02.19 18:24:08<dmiles> *nod* you get it.. surprising how few do
05.02.19 18:24:18<dmiles> that opensets are actualyl a variable type
05.02.19 18:24:41<sseehh> yes i implemented them as a special variant of pattern var
05.02.19 18:24:49<sseehh> %A..* %A..+   like regex
05.02.19 18:24:51<sseehh> with min arity
05.02.19 18:25:06<sseehh> but these arent meant to be used during normal operation
05.02.19 18:25:10<dmiles> we might see every varaible as being a programmatic subclass of normal prooog predicates .. yet it could also be impleneted the other way arround
05.02.19 18:25:18<sseehh> only in the deriver rules. they dont end up as tasks
05.02.19 18:25:34<dmiles> we might see every openset as being a programmatic subclass of normal prooog varaible  .. yet it could also be impleneted the other way arround
                 <sseehh> yeah thats true, for example
05.02.19 18:25:47<sseehh> Variable.unify(Term x, Unify u)
05.02.19 18:25:52<sseehh> could be seen as
05.02.19 18:26:17<sseehh> etc
05.02.19 18:26:29<dmiles> yes
05.02.19 18:26:46<sseehh> well that method is what my Term unify(Term x, Unify  u) specfies
05.02.19 18:27:12<dmiles> each one of the GC prolog "special unifies" can be passed in as par tof a Unify
05.02.19 18:27:23<sseehh> the operator types in NAL provide a basic type checking in and of themselves
05.02.19 18:27:35<sseehh> like (x && y)  wont unify with (x ==> y)
05.02.19 18:27:43<sseehh> its as if it were called "&&"(x,y)  "==>"(x,y)
05.02.19 18:28:05<sseehh> i caache these operator types in a bit vector
05.02.19 18:28:10<sseehh> as a cmpound grows layer by layer, bits get enabled
05.02.19 18:28:23<sseehh> based on comparing these bit vectors, certain things are obvious
05.02.19 18:28:44<sseehh> like if there are no variables present, then if the vectors dont match then the compounds cant be equal or unify
05.02.19 18:28:45<sseehh> etc
05.02.19 18:28:53<sseehh> or if one is a subset of the other it might be contained rcursively, otherwise it cant
05.02.19 18:28:55<sseehh> etc
05.02.19 18:29:15<dmiles> when you unify a Relation with a Variable in cg+prolog you get a term that can only inify next with a var.subsume(other)
05.02.19 18:29:19<sseehh> Term.hasAny(bits)  isAny(bits) impossibleSubtermOf(..) //which really should be inverted to 'possibleSubtermOf' theres also impossibleSubtermOrEqualTo
05.02.19 18:29:38<sseehh>     A, (A ==> C), --is(A,"#"),--is(C,"#") |- C, (Belief:Pre, Goal:PreWeak)
05.02.19 18:30:18<sseehh> but the relatoin is just another type
05.02.19 18:30:22<sseehh> relation(from,to)
05.02.19 18:30:34<sseehh> so why cant it just compile to ordinary prolog behind the scenes if it doesnt
05.02.19 18:30:52<dmiles> what be neat to do is be able to execute prolog prgrams in NARS.. it might have everyting it'd need
05.02.19 18:31:03<sseehh> sure theres a few ways
05.02.19 18:31:07<sseehh> of possibly doing it
05.02.19 18:31:29<sseehh> it could be explicitly invoked and somehow transfer variables into and out of prolog as a black box
05.02.19 18:31:31<dmiles> one such program would be a meta-circular interpreter
05.02.19 18:31:45<dmiles> even DCGs
05.02.19 18:31:47<sseehh> the explicit blackbox invocation is how any programming lagnuage could be invoked by nars with minimal involvement
05.02.19 18:32:02<sseehh> but i am intersted in how it can be more deeply 'unified' with the inference process
05.02.19 18:32:26<sseehh> the prologcore.java class was an attempt at the 2nd
05.02.19 18:32:46<sseehh> but its not a good solution as modifying prolog clause index to wrap nars memory rather than translating terms back and forth
05.02.19 18:33:10<sseehh> then nars can ask prolog questions about its memory, executed in prolog, and it returns the answers
05.02.19 18:33:13<sseehh> evne async
05.02.19 18:33:15<sseehh> even
05.02.19 18:33:32<sseehh> it doesnt need to ask prolog specifically, the plugin can just route nars questions into prolog automatically
05.02.19 18:33:34<dmiles> well yeha that view of prolgo as a database mantainance language is good
05.02.19 18:33:54<sseehh> then nars will get the answers as beliefs of some confidence
05.02.19 18:34:13<sseehh> prolog could also be embedded as Functor's which are term transform steps
05.02.19 18:34:19<sseehh> or in the Evaluation step of a task input
05.02.19 18:34:21<sseehh> lots of ways
05.02.19 18:34:27<sseehh> so i dont just want to do all of them necessarily
05.02.19 18:34:38<sseehh> because i think there is some fundamental principle that can really be leveraged
05.02.19 18:34:52<sseehh> since it does at least half of prolog already
05.02.19 18:35:05<sseehh> unification, term rewriting, etc
05.02.19 18:35:26<dmiles> if it can do the boring parts of prolog (the dterinisitic processing) than it can do the rest
05.02.19 18:35:48<dmiles> (so for exmaple if it could run the optut code of WAM-CL)
05.02.19 18:36:32<dmiles> or even run WAM-CL itself
05.02.19 18:36:38<sseehh> if you run Tetris and watch it for a few mins you might see some messages like EVOKE height(tetris) %1.0;..
05.02.19 18:36:55<sseehh> this is because Tetris has enabled an Opjects interface to its own game instance
05.02.19 18:37:04<sseehh> so it sees many of the methods of the game as they are invoked (the public ones)
05.02.19 18:37:10<sseehh> Tetris.height being one
05.02.19 18:37:16<sseehh> most of these test some aspect of the game
05.02.19 18:37:29<sseehh> nars will get the feedback as a belief containning the method, the instance, the parametres, and optional return value
05.02.19 18:37:33<sseehh> represnted as Term's
05.02.19 18:37:53<sseehh> that swhat happens when they are 'invoked' from java
05.02.19 18:37:58<sseehh> 'evoke' is when nars decides to invoke these methods
05.02.19 18:38:03<sseehh> from its own goals
05.02.19 18:38:16<sseehh> so you can basically wrap any java class or interface via Opjects
05.02.19 18:38:31<sseehh> and train it to do something with the methods
05.02.19 18:38:58<sseehh> but this is still experimental, if the parameters and execution thresholds arent right it might not do anything (likely)
05.02.19 18:39:23<sseehh> i have some tests of the low level functionality but in practice it is not reliable way of doing anything
05.02.19 18:39:31<sseehh> at leas tlast time i checked
05.02.19 18:39:35<sseehh> things may have improved by now
05.02.19 18:40:00<sseehh> it has to measure the desire value at a specific point in time, compares with belief value then, and if the desire exceeds the belief by a threshold it invokes the operaton
05.02.19 18:40:03<sseehh> evokes rather
05.02.19 18:40:11<sseehh> i had to distinguish them because they are opposite directions
05.02.19 18:40:36<sseehh> it also does it atomically and with a specified debounce period
05.02.19 18:40:40<sseehh> before it can be allowed to execute again
05.02.19 18:40:50<sseehh> otherwise it could end up button mashing 1000 iterations before it releases its 'finger'
05.02.19 18:41:15<sseehh> in the meantime becoming overwhelmed by the feedback it forgot why it even pressed the button to begin with lol
05.02.19 18:41:50<sseehh> this is meant to be a general purpose way of interfacing with any outside system
05.02.19 18:42:00<dmiles> yeah to any programming language
05.02.19 18:42:02<sseehh> because anything can be wrapped as a java class, taking advantage of java type system, tec
05.02.19 18:42:11<sseehh> and then if it can access that. it can do *anything*
05.02.19 18:42:19<sseehh> the other ways of interfacing prolog are much nearer to the core
05.02.19 18:42:29<sseehh> Opjects is like a high-level functionality
05.02.19 18:43:52<sseehh> PrologCore whether it still works or not, there is a unit test
05.02.19 18:44:04<sseehh> my original goal for it was to make a NARS coprocessor
05.02.19 18:44:20<sseehh> so it could accelerate the inference steps that i saw prolog do without any trouble but nars couldnt
05.02.19 18:44:34<dmiles> my orignal thought is prolog is a NARS configurator
                 <sseehh> or at least couldnt reliably
05.02.19 18:45:25<sseehh> in what way?
05.02.19 18:46:17<sseehh> https://github.com/automenta/narchy/blob/volatile1/app/src/main/java/nars/op/prolog/PrologCore.java#L30
05.02.19 18:46:46<dmiles> that the entire NARS / SubNars and how the application is configured can be stored in prolog.
05.02.19 18:47:39<dmiles> this is to alow the next step when NARS is judging prolog terms for fitness it is at the rioght meta-level
05.02.19 18:48:19<sseehh> sure the same configuration though could just be java
05.02.19 18:48:33<sseehh> and statically analyzed if simple enough
05.02.19 18:48:44<sseehh> but tuprolog can execute java too so theres no reason it cant be used that way
05.02.19 18:48:45<dmiles> which is to allow the next step which is to have NARS rate its prolgo term to prolog term tasks
05.02.19 18:48:55<dmiles> (NARS is actualyl doing step 3 already )
05.02.19 18:49:54<sseehh> i wanted to make an API for creating a NAR, like from command line also, where the termination condition are specified
05.02.19 18:50:03<sseehh> like when certain confidence is reached, or time limit
05.02.19 18:50:11<sseehh> that way it can be used in isolated ways from external processes
05.02.19 18:50:19<sseehh> probably like cyc in a query mode
05.02.19 18:50:33<sseehh> it could even use a persistent database
05.02.19 18:50:56<sseehh> explicitly waking it up and putting it back to sleep is a differnt situation than a cognitive agent that is meant to continuously run
05.02.19 18:51:05<sseehh> although they can be the same thing if that agent is smart enough to know to go to sleep itself
05.02.19 18:51:09<sseehh> ie. when to throttle its cpu
05.02.19 18:51:15<dmiles> yeah that is what i meant by " how the application is configured "|
05.02.19 18:51:30<sseehh> i see prolog most useful in nars in doing all of the robotic tasks
05.02.19 18:51:36<sseehh> and managing constraints and things
05.02.19 18:51:43<sseehh> which you dont want to rely on nars for because its so unpredictable
05.02.19 18:52:02<sseehh> like a 'conscience' for it
05.02.19 18:52:09<sseehh> and also autonomic nervous sytem
05.02.19 18:52:13<sseehh> like you dont want nars to have to think about breathing
05.02.19 18:52:17<sseehh> you just want it to keep breathing
05.02.19 18:52:20<dmiles> i see it that way to.. but i also see prolog as replacing the human and its interaction with NARS
05.02.19 18:52:52<sseehh> well how does any human interact with nars anyway
05.02.19 18:53:05<sseehh> lol just a few developers.. still trying to figure it out
05.02.19 18:53:06<dmiles> (that only prolog programs create NARS instances .. not humans)
05.02.19 18:53:20<sseehh> but if you mean to prevent human having to write narsese, yes that is possible
05.02.19 18:53:27<sseehh> narsese should be considered like the assembly language level
05.02.19 18:53:28<dmiles> (that only prolog programs create programs for NARS to try)
05.02.19 18:54:06<sseehh> but nars doesnt simply execute programs
05.02.19 18:54:13<sseehh> it experiences input
05.02.19 18:54:17<dmiles> such as Jake23Agent uis prolog taking Jake and writting Jake2Agent
05.02.19 18:54:19<sseehh> which transforms it in the process
05.02.19 18:54:42<dmiles> such as Jake2Agent, instead of you writting it .. it is prolog taking Jake and writting Jake2Agent
05.02.19 18:54:49<sseehh> right
05.02.19 18:54:59<sseehh> that is a tricky problem. building the meta-cockpit
05.02.19 18:55:31<sseehh> which opjects tries to solve in its own way. but here it is about configuring those opjects
05.02.19 18:55:36<dmiles> the DSL of the meta-cockpit is only doable in a Logical langauge
05.02.19 18:55:39<sseehh> or wiring actions/sensors
05.02.19 18:56:02<sseehh> here is another area that might explain it
05.02.19 18:56:05<sseehh> the unit tests
05.02.19 18:56:11<sseehh> here i am running unit tests all day
05.02.19 18:56:14<dmiles> the DSL of wiring actions/sensors
                 <sseehh> trying to figure out what breaks when i change something
05.02.19 18:56:21<sseehh> but ive been wanting to make a smart test runner
05.02.19 18:56:27<sseehh> so it can self analyze its own problems
05.02.19 18:56:35<sseehh> (and eventually trace the root of the problem via static analysis)
05.02.19 18:56:45<sseehh> but just doing what a continuous integration server does would be a first step
05.02.19 18:56:49<sseehh> to atleast be aware of its failures
05.02.19 18:57:00<sseehh> then simply giving it the goal "have no failures" can at least do something
05.02.19 18:57:27<sseehh> i know jenkins used prolog, if it doesnt now it did at one poitn
05.02.19 18:57:35<dmiles> what CYC/Prolog excel at is when a small change in teh system changes something .. you are able to look at hte two diffenrt proplog programs and get s "proof diff"
05.02.19 18:58:02<sseehh> right so it could analyze the change in files or git versions and correlate a change to a new failure for example
05.02.19 18:58:07<sseehh> that would be a natural task for prolog
05.02.19 18:58:10<sseehh> but not for nars
05.02.19 18:58:15<dmiles> so you can tell "oh wow when NARS got 50 sensors.. not jsut 1 it did better"
05.02.19 18:58:38<sseehh> optimization is another area and yes something prolog-like could apply there
05.02.19 18:58:50<sseehh> trying differetn parameters and measuring results
05.02.19 18:58:51<dmiles> like actually in a way that is genral enough the human doesnt need to see that
05.02.19 18:59:13<sseehh> i agree
05.02.19 18:59:20<dmiles> but yes  trying differetn parameters and understanding *why* those params changed things
05.02.19 18:59:41<dmiles> by seeing the sutle differnces that are happening from the DSL
05.02.19 18:59:44<sseehh> certain sets of numeric parameters its ok just to know the shape of the landscape but it doesnt explain why
05.02.19 18:59:58<sseehh> and the parameters are so sensitive to other things anyway their validity is very temporary anyway
05.02.19 19:00:06<sseehh> in the parameter optimziation experiments ive done
05.02.19 19:00:17<dmiles> well true in this case there is noise (about good things)
05.02.19 19:00:21<sseehh> but even more fundamental than optimization is the unit test stuff
05.02.19 19:00:34<sseehh> its the simplest starting point
05.02.19 19:00:50<dmiles> yeah even constructing unit tests
05.02.19 19:00:57<sseehh> if it can optimize its own correctness this would be the most important
05.02.19 19:01:08<sseehh> yeah and running something like pitest which is a test fuzzer
05.02.19 19:01:30<sseehh> it doesnt need to be anything more complex than what a continuous integration system does. or even gradle if its run in continuous mode. whatever that is good for
05.02.19 19:01:52<sseehh> and then it can respond to the goals 'contain no errors' 'run fast' etc
05.02.19 19:02:09<sseehh> 'be downloadble at many locations' etc
05.02.19 19:02:24<sseehh> and these conditions can be tested for it can ask 'how do i make myself downloadable'
05.02.19 19:02:27<sseehh> 'how do i know if im downloadble'
05.02.19 19:02:50<sseehh> 'reduce code complexity' etc
05.02.19 19:02:57<sseehh> very high level development goals and they can at least be stubs
05.02.19 19:03:04<dmiles> yeah btw that is the other thing that KR&R is good for
05.02.19 19:03:21* dmiles is going to replace dmiles use of PRolog and say KR&R
05.02.19 19:03:44<dmiles> KR&R is what tests are written in
05.02.19 19:04:27<dmiles> 'how do i know if im downloadble' and   'reduce code complexity'   etc are defined as KR
05.02.19 19:04:52<dmiles> Knowledge Representation and Reasoning (KR&R) 
05.02.19 19:05:24<dmiles> 'how do i know if im downloadble?'    'become downlaodable'   are things that are prespesented and shuttled aobut
05.02.19 19:05:49<sseehh> i cant find it now but there was a github project where if some developer violated a code quality metric it would fired a nerf gun at them
05.02.19 19:05:58<dmiles> they are representable concepts that mean specific things
05.02.19 19:06:36<sseehh> yeah im paraphrasing those but they can be boiled down to predicates
05.02.19 19:06:47<dmiles> good paraphrase
05.02.19 19:07:18<sseehh> like right now there are maybe 120..130 test failures
05.02.19 19:07:20<dmiles> KR&R is the scicne of using predicate rellations to say and do anyhting
05.02.19 19:07:21<sseehh> out of 1700+
05.02.19 19:07:30<sseehh> this is like A-
05.02.19 19:07:38<sseehh> many of these tests are just wrong themselves
05.02.19 19:07:41<sseehh> and i never fixed them yet
05.02.19 19:07:48<sseehh> other tests represent critical errors that need addresed
05.02.19 19:08:05<sseehh> code coverage is about 75% by line iirc
05.02.19 19:08:09<sseehh> for nal/
05.02.19 19:08:24<sseehh> its not like completely untested
05.02.19 19:08:32<dmiles> we have KR&R styles: CG, SUMO/CYC, Narasees,  RDF   etc
05.02.19 19:08:49<sseehh> so i think it has the potential to become completely self preserving
05.02.19 19:08:55<sseehh> self optimizing
05.02.19 19:09:03<sseehh> self replicating
                 <sseehh> etc
05.02.19 19:09:13<sseehh> sounds scary
05.02.19 19:09:41<dmiles> oh yeah actually tha tis the reason for continous
05.02.19 19:10:04<sseehh> right
05.02.19 19:11:07<dmiles> that is one of the edges CYC had.. it had 30 years of humans playing continuously with it
05.02.19 19:11:25<dmiles> (i polaying with the same the same cyc data and code)
05.02.19 19:11:39<dmiles> immaine a 30 year NARS instance
05.02.19 19:13:04<dmiles> well the question we have though is how mergeable are two NARS instnaces
05.02.19 19:13:23<sseehh> you can serialize their memory as all the tasks in it for example
05.02.19 19:13:25<sseehh> and just input to the other
05.02.19 19:13:27<sseehh> its easy
05.02.19 19:13:43<dmiles> they became the way they became out of their luck at attention to the right things
05.02.19 19:14:00<sseehh> the only other runtime state is contained in the links / concept activatoions but these should be transient anyway. if really important this can be snapshotted as well
05.02.19 19:14:27<sseehh> i dont know if cyc really aims for the same thing: autonomous agent
05.02.19 19:15:16<sseehh> so much as the database / konwledge tool sort of thing it advertised for
05.02.19 19:15:25<dmiles> Lenat pretends CYC does.. but all his employees know they are jsut maintaining the ever improving Cyc Agnda
05.02.19 19:15:40<sseehh> right thats the impression i got
05.02.19 19:15:47<sseehh> everything is AI buzzword nowadays anyway
05.02.19 19:16:09<sseehh> must be difficult for cyc to get funding
05.02.19 19:16:19<dmiles> also though CYC does have the Agenda that serilizes all of its innter tranactions to happen in the right order 
05.02.19 19:16:45<dmiles> the API to *that* agenda is Agenty
05.02.19 19:16:59<sseehh> it doesnt seem to quite close the loop
05.02.19 19:17:03<dmiles> innter tranactions = inner transactions
05.02.19 19:17:08<sseehh> for full autonomy like we're discusisng
05.02.19 19:17:16<sseehh> it needs triggered by a user they can sell it to
05.02.19 19:18:07<dmiles> "Scaling discussions" is sort odf  a new  Saling point
05.02.19 19:18:14<dmiles> Sales point
05.02.19 19:18:45<dmiles> (the one if logicmoo gets funding for would be)
05.02.19 19:19:06<dmiles> or even CYC .. since most peopel understand this is the new world problem
05.02.19 19:20:10<dmiles> The problem
05.02.19 19:20:11<dmiles> During community discussion (well, on a larger scale during lectures), a speaker gives up clarity over efficiency. <- this youtube video explains during expository/lecture a speaker does not have an exact model of what every audience member already knows.  So he must attempt to find ways that are understood by the largest majority based on a model that  can only be a best guess about the 
05.02.19 19:20:12<sseehh> what like a smart web forum?
                 <dmiles> listeners pre-understanding (may skip over important details and be unclear). One the other hand, the loss of efficiency happens if the speaker was working one at a time with each audience member  (say 100 members) the speaker have 100 individual conversations.  This doesn't just apply to a lecture, but can even happen in the context of a small facebook post.
05.02.19 19:20:25<dmiles> exactly yes
05.02.19 19:20:37<dmiles> Solution
05.02.19 19:20:38<dmiles>  With the assistance of LogicMoo, the system acts as an agent / teacher for the speaker's knowledge.  First it gets the speaker's idea into actual understanding (getting knowledge into CycL). So that LogicMoo would really understand the speaker's ideas.  This happens over a  process between the the speaker asserting their insights and quizzing LogicMoo to ensure it understood.  The goal is 
05.02.19 19:20:39<dmiles> equipping LogicMoo with enough knowledge it will be able to convey/teach the idea when asked.  This is to enable individualized session/transactions per student would have a chance to ask  questions and be guided into an understanding at exactly the level of detail needed/desired by them.    By having a peer-based model, it would enable the learners to expand the conversation and address/import 
05.02.19 19:20:40<dmiles> features the teacher had not yet prepared LogicMoo for, but now can, since the system may return to the teacher (to gather more knowledge) .  
05.02.19 19:25:23<sseehh> "you have to wait for the other person to finish talking, you have to pretend like you are interested in what they say. if you talk outloud and dont have mute on then they hear what you say etc. it just sucks"
05.02.19 19:26:44<sseehh> ^ the trouble with communication
05.02.19 19:26:53<sseehh> lol
05.02.19 19:27:14<dmiles> Sometimes you can be interested even.. jsut at that moment that wasnt at the level of detail that was right 
                 <sseehh> learning/teaching is like communicating not just with someone but their future memory state too
05.02.19 19:28:05<sseehh> here is something im not sure is totally relevant but maybe
05.02.19 19:28:06<dmiles> yeah .. you have a model that sometimes you are talking to the dmiles that i willb e 20 minutes later 
05.02.19 19:28:13<sseehh> http://www.ingenesist.com/revisiting-crm-on-curiosume/
05.02.19 19:28:36<dmiles> (i mean i have seen you concously do that)
05.02.19 19:28:48<sseehh> this isnt exactly it
05.02.19 19:28:51<sseehh> but this curiosume thing
                 <dmiles> (ii do that to. people think it is weird)
05.02.19 19:28:54<sseehh> trying to find a good explanation
05.02.19 19:29:40<dmiles> (teachers do this all day long .. and that is why students think they are weird)
05.02.19 19:29:45<sseehh> lol i dont know when im talking to
05.02.19 19:30:34<dmiles> do the thing where they are trying to sanswer a set of questions they think the person will have for them 
05.02.19 19:30:51<sseehh> http://www.ingenesist.com/introduction-to-curiosume/
05.02.19 19:31:00<dmiles> and then answer the question that likely follows from that answer
05.02.19 19:31:25<sseehh> i would just blame it on general mental disorganization
05.02.19 19:31:33<sseehh> partial sorting
05.02.19 19:32:06<sseehh> ok this doesnt explain it will here is a simple summary
05.02.19 19:32:24<sseehh> its like a semantic resume
05.02.19 19:32:31<sseehh>  / CV
05.02.19 19:32:32<sseehh> but
05.02.19 19:32:38<sseehh> it also includes thigns you are interested in learning
05.02.19 19:32:42<sseehh> not just what you claim to be able to do
05.02.19 19:32:51<sseehh> it also has a few levels of proficiency
05.02.19 19:32:59<sseehh> the scale is just laern -> do -> teach
05.02.19 19:33:09<sseehh> it could have 3, 5, 7 levels doesnt matter
05.02.19 19:33:11<sseehh> 6 even
05.02.19 19:33:13<sseehh> to break the symmetry
05.02.19 19:33:17<sseehh> as dan suggests
05.02.19 19:33:24<sseehh> but anyway you take any wikipedia concept
05.02.19 19:33:28<sseehh> and put that level to it
05.02.19 19:33:35<sseehh> and your curiosume consists of a set of those
05.02.19 19:33:40<sseehh> so
05.02.19 19:33:55<sseehh> Prolog teach
05.02.19 19:33:58<sseehh> NARS learn
05.02.19 19:34:07<sseehh> could be a very basic curiosume
05.02.19 19:34:22<sseehh> assuming NARS was in wikipedia
05.02.19 19:34:31<sseehh> lol https://en.wikipedia.org/wiki/NARS_Cosmetics
05.02.19 19:34:54<sseehh> wikipedia is pretty comprehnsive upper level taxonomy. it is also cross-lingual
05.02.19 19:34:58<sseehh> and hierarchical
05.02.19 19:35:15<sseehh> so if i reference some wiki topic it could also relate to its sub and super category items
05.02.19 19:35:22<dmiles> yes.. the greatest example i see here is that Prollgo shows how the cockpit of Adding  324343434 +  23423423442 = 
05.02.19 19:35:27<dmiles> erm a minitor exmaple
05.02.19 19:35:44<dmiles> erm a minor exmaple
05.02.19 19:35:47<sseehh> well im mentioning curiosume in the context of the learning/teaching system
05.02.19 19:35:53<dmiles> when i leanred to do this as a kid .... my teacher set me up a cockpit
05.02.19 19:36:06<dmiles> it was a 2D grid of numbers
05.02.19 19:36:17<sseehh> as an overkill solution to the knowledge transfer problem
05.02.19 19:36:33<sseehh> which also as dan claims solves the problem of money
05.02.19 19:36:44<sseehh> makes money irrelevant
05.02.19 19:37:06<sseehh> *between humans
05.02.19 19:37:12<sseehh> konwledge/skill transfer between humans
05.02.19 19:37:31<sseehh> but can also apply to computers but that is secondary
05.02.19 19:37:53<dmiles> oh the only way to follow AIKR is that 
05.02.19 19:38:08<sseehh> so if many people made these simple curiosume and they were all in a big database, even anonymously, a lot of suggestoins can be generated
05.02.19 19:38:29<sseehh> its possible to make jokes even with it
05.02.19 19:38:37<dmiles>  Prolog teach+ NARS learn   is the only way tpo make AIKR scale
05.02.19 19:38:56<sseehh> no i meant that could be part of your curiosume
05.02.19 19:39:03<sseehh> your skillset for example
05.02.19 19:39:06<dmiles> oh haha
05.02.19 19:39:24<dmiles> i see
                 <sseehh> a computer could have one too
05.02.19 19:39:31<sseehh> but most importantly humans can write their own
05.02.19 19:39:42<sseehh> or people can write them about othe rpeople
05.02.19 19:40:06<sseehh> its a really simple idea
05.02.19 19:40:18<sseehh> but unrealized. i made the first app for making these
05.02.19 19:40:22<sseehh> but nobody uses it
05.02.19 19:40:35<sseehh> it just let you tag wikipedia pages and save them to your profile
05.02.19 19:40:49<sseehh> but it was very smooth you can just browse and collect tags
05.02.19 19:40:56<sseehh> and end up with a detailed profile of skills and intersts
05.02.19 19:41:10<sseehh> the curio part of the word is meant to suggest 'curiosity' what you are willing to learn
05.02.19 19:41:16<dmiles> RDF metadata was supposed to come with an adverttising of knowedge scheme
05.02.19 19:41:44<sseehh> whereas resume are entirely 'skills acquired' focused.  the entire job market is missing half of the picture
05.02.19 19:41:54<sseehh> yeah RDF is crippled from the start too
05.02.19 19:42:20<dmiles> anyone that did this sort of thing rejected RDF
05.02.19 19:42:42<dmiles> Sowa, Tarau, Adam P.. etc
05.02.19 19:43:11<dmiles> (i mean thought about the science of knowledge rejected it)
05.02.19 19:43:12<sseehh> yeah. while i wasnt paying attention some 'semantic web' thing become popular and i thought 'where did all the software agent stuff go'
05.02.19 19:43:51<sseehh> 'hey wait they just locked us in a client/server prison decorated with CSS'
05.02.19 19:46:09<sseehh> but anyway curiosume like everything else boils down to a UI issue. how you can build one or several and how to get that into some kind of aggregation network and get results
05.02.19 19:46:27<sseehh> it doesnt depend on any particular encoding.  wikipedia already exists as the ontology
05.02.19 19:46:52<sseehh> sure dbpedia wordnet etc can annotate it and build them automatically too
05.02.19 19:46:57<dmiles> you are rigfht curiosumé is a greate example of an economy of knoweldge
05.02.19 19:46:59<sseehh> but the point is to carefully construct them
05.02.19 19:47:04<sseehh> for different purposes
05.02.19 19:47:10<sseehh> so the matchers can make the best match
05.02.19 19:47:31<sseehh> yeah curiosume invented by dan is pretty brilliant
05.02.19 19:47:40<dmiles> how  curiosumé  matches people is the same way that Logicmoo has to match people
05.02.19 19:47:44<sseehh> its like wikitag x { learn, do, teach }
05.02.19 19:47:50<sseehh> just that product
05.02.19 19:48:03<sseehh> so of course we wondered what other tags could apply
05.02.19 19:48:21<sseehh> now these arent part of 'curiosume' but i built them into the app anyway
05.02.19 19:48:25<sseehh> 'can', 'need'
05.02.19 19:48:28<sseehh> 'not'
05.02.19 19:48:33<dmiles> (jsut logicmoo sees one person as if they are many peopel spread out over time)
05.02.19 19:48:36<sseehh> there was another one i think
05.02.19 19:49:17<sseehh> well what is one person just a collection of mental processes anyway
05.02.19 19:49:38<dmiles> (that is each paragraph ona wikipedia is like a whole new person)
05.02.19 19:50:13<sseehh> but these simple meta-tags applied to wiki topics is extremely expressive, and also multilingual
05.02.19 19:50:15<sseehh> computer processable
05.02.19 19:50:20<sseehh> and easily constructed
05.02.19 19:50:42<sseehh> i prototyped a web app, and an android app
05.02.19 19:51:21<sseehh> they just rewrote the wikipedia html to add tags on the links
05.02.19 19:51:31<sseehh> a little [+] button next to each wikilink that popped up a tag window
05.02.19 19:51:49<sseehh> then hit save and it goes back to wikipedia
05.02.19 19:52:00<sseehh> so you can create them while reading about stuff
05.02.19 19:52:05<sseehh> 'hey i know that' or 'hey i want to learn about this'
05.02.19 19:52:30<sseehh> and then these should be editable at a later time
05.02.19 19:52:36<sseehh> i dont rmemeber how much support for editing there was
05.02.19 19:52:37<dmiles> hrrm two buttons would be nice on wikipedia  [?][+][++]
05.02.19 19:52:50<dmiles> oops
05.02.19 19:52:52<sseehh> i have some recent code for adding popup widget to each link
05.02.19 19:52:57<sseehh> any kind of hover menu
05.02.19 19:53:02<sseehh> in js
05.02.19 19:53:12<dmiles> [? questions][+ answers]  [++ thoughts]
05.02.19 19:53:23<sseehh> [- never want to see this again]
05.02.19 19:53:33<sseehh> for deleting page elements
05.02.19 19:53:43<sseehh> and taking back a little bit of control of the web
05.02.19 19:53:52<sseehh> like an ad blocker but contextual that was the idea
05.02.19 19:53:53<dmiles> for sure
05.02.19 19:54:14<sseehh> https://github.com/automenta/wtfww
05.02.19 19:55:05<dmiles> we also have private [?/+/++/-] well [- ]  are private to i guess
                 <sseehh> https://github.com/automenta/wtfww/blob/master/preload.js#L15
05.02.19 19:55:26<sseehh>    hoverUpdate() {
                 <sseehh> const B = this.target[0].getBoundingClientRect();
05.02.19 19:55:50<sseehh> but the original curiosume app was very simple. it just appended an <a>[+]</a> with js handler to each wikilnik
05.02.19 19:56:05<dmiles> it is nice when groups of people share their propup states
05.02.19 19:56:55<sseehh>     hover.bottom.append(
                 <sseehh>         $('<button tag="learn" style="background-color: deepskyblue">Learn</button>'),
                 <sseehh>         $('<button tag="teach" style="background-color: mediumpurple">Teach</button>')
                 <sseehh>     );
                 <sseehh>     hover.top.append(
05.02.19 19:56:56<sseehh>         $('<button tag="can" style="background-color: yellowgreen">Can</button>'),
05.02.19 19:56:58<sseehh>         $('<button tag="need" style="background-color: orange">Need</button>'),
05.02.19 19:57:00<sseehh>         $('<button tag="not" style="background-color: indianred">Not</button>')
05.02.19 19:57:04<sseehh> );
05.02.19 19:57:48<sseehh> this would let people write semantics at a very very high level. the rest can be inferred
05.02.19 19:58:22<sseehh> a simple way of implementing http://mattmahoney.net/agi2.html
05.02.19 19:58:30<sseehh> The estimated value is on the order of US $1 quadrillion.
05.02.19 19:58:31<sseehh> lol
05.02.19 20:00:24<sseehh> meanwhile a typical social network will give 'like' and 'dislike' (if they trust their users)
05.02.19 20:00:29<dmiles> one other project is sorta hopes ot be like that in a way http://www.idni.org/
05.02.19 20:00:36<sseehh> as if thats all that can matter to someone <facepalm>
05.02.19 20:00:52<sseehh> "you can only have the like or dislike reaction to anything"
05.02.19 20:01:18<sseehh> or if a system gives a more complex set of reactions they still dont mean anyhting
05.02.19 20:01:57<sseehh> or are not interpreted as meaning anything other than a way to make the user feel like they added an extra detail
05.02.19 20:02:46<dmiles> sometimes we should be able to thumbs down bad news on facebook
05.02.19 20:03:02<dmiles> (and not have the person feel disliked)
05.02.19 20:03:28<sseehh> yeah but curiosume doesnt waste cpu and patience with pretneding like everyone is constantly spying on each other and wants to edit their curiosumes so it has to be encrypted and every version tracked forever
05.02.19 20:03:36<dmiles> "So and so read this"
05.02.19 20:03:42<sseehh> and wants to monetize their data
05.02.19 20:04:02<sseehh> curiosume was a system to permanently end the need for quantifying value
05.02.19 20:04:17<sseehh> is a system rather
05.02.19 20:04:22<sseehh> was because i just dont see anything active with it
05.02.19 20:04:40<sseehh> anything blockchain is really only good for quanitifying the valueless
05.02.19 20:04:50<sseehh> not even about security really, you can juts use any ordinary cryptosystem for that
05.02.19 20:05:02<dmiles> *nod*
05.02.19 20:06:13<dmiles> "quantifying value" is going to get it worng anyways when it is based on reactions
05.02.19 20:08:15<sseehh> The purpose of AGI is twofold: first to improve the efficiency of organizations of humans by facilitating communication and access to information, and second, to automate the economy with respect to those functions that require human labor. 
05.02.19 20:08:51<dmiles> "making the user feel like they added extra detail" is done when the user can ask new questions of the autonmous reader program and the program is now able to answer new trhings
05.02.19 20:09:00<sseehh> another fundamental aspect of curiosume as dan explains it is that there are no winners or losers
05.02.19 20:09:14<sseehh> just because someone teaches someone something doesnt mean they win at it
05.02.19 20:09:21<sseehh> but in quantified economies there is more and less
05.02.19 20:09:37<sseehh> the analogy isnt perfect but there is the idea of balance
05.02.19 20:09:49<sseehh> in that everyone is capable of learning and teaching something
05.02.19 20:09:59<dmiles> value comes when we can temproary forget things we say and access them later
05.02.19 20:10:15<sseehh> yeah communication with future self
05.02.19 20:10:35<dmiles> the most valuable times is times we get to forget as much as posisble
05.02.19 20:11:03<sseehh> yeah then the system can surprise someone the easiest
05.02.19 20:11:08<dmiles> (that is sicnce the future self can commincate with this past self)
05.02.19 20:11:12<sseehh> has the most potential for surprising them
05.02.19 20:11:25<sseehh> no i didnt necessarly mean retrocausality
05.02.19 20:11:35<sseehh> i just meant trying to remember something is like sending a message to yourself in the future
05.02.19 20:11:40<sseehh> but it could work in reverse, i dont have proof
05.02.19 20:11:55<dmiles> (it is more valuable while driving on the freeway to the store to not have to remember the shopping list we wriote down)
05.02.19 20:12:23<sseehh> thats what externalized memory is for
05.02.19 20:12:32<sseehh> to free attention for other things
05.02.19 20:12:56<sseehh> and why we need to train nars to use a notebook file more than simply give it more memory
05.02.19 20:13:05<sseehh> its more valuable that it could learn to use something external as a memory source
05.02.19 20:13:06<dmiles> also times when we arnt doing anyhitng and otehr peopple are doing our thinking (like writting out our shopping list for us)
05.02.19 20:13:07<sseehh> like the turing tape
05.02.19 20:13:11<sseehh> or to form sql queries
05.02.19 20:14:01<sseehh> then the question becomes what is the most minimal core that allows it to just form the intent to remember and recall something to and from an external memory
05.02.19 20:14:08<sseehh> in the same way as when we know we need to make a note
05.02.19 20:14:16<sseehh> or to use a pocket calculator
05.02.19 20:14:24<dmiles> AIKR would need most memory to be external  (we have access to little virtual teachers that remind us of how to do everyhing)
05.02.19 20:14:25<sseehh> or find a reference book
05.02.19 20:14:54<sseehh> the more data it can organize externally the less noise it will have to deal with internally
05.02.19 20:15:03<dmiles> yes
                 <sseehh> so its like a kernel swapping out memory pages
05.02.19 20:15:30<sseehh> so far we have made zero progress in this department
05.02.19 20:15:39<sseehh> just havent really tried yet
05.02.19 20:15:47<dmiles> one trick i sorta was doing in Bina48 is actiaving a system of silent speech to pre-laod her
05.02.19 20:16:04<sseehh> a concept index/cache can persist to a disk larger than memory but its not what im saying here
05.02.19 20:16:36<dmiles> humans manage that index/cache using internal dialogs
05.02.19 20:16:50<sseehh> well how else would bina get preloaded?
05.02.19 20:17:01<sseehh> ie. without that it would be blank anyway
05.02.19 20:17:24<sseehh> the word bina means wisdom im sure thats why it was chosne
05.02.19 20:17:35<dmiles> yeah.. the main thing was to not load her with everying the way we miught load CYC
05.02.19 20:17:49<sseehh> er
05.02.19 20:17:50<sseehh> Binah is 'intuitive understanding', or 'contemplation'. 
05.02.19 20:18:01<sseehh> sophia actually means wisdom
05.02.19 20:18:21<dmiles> most of Bina was David ranting .. it was kind of neat
05.02.19 20:18:45<sseehh> what you probably were trying to get was a spreading activation effect
05.02.19 20:18:51<sseehh> like a markov chain chatterbot
05.02.19 20:19:03<dmiles> eactly what was tryign to be safe to fall back on
05.02.19 20:19:35<dmiles> can fall back on teh markov of 2 related paragraphs of training
05.02.19 20:19:50<dmiles> (ever at once)
05.02.19 20:19:53<sseehh> everything nars processes is part of its experience. so its like a internal monologue, including beliefs questions goals etc
05.02.19 20:20:10<sseehh> thats why i could tap the questions and route them to prolog. they are questions it expects to answer itself
05.02.19 20:20:22<dmiles> so deciding which paragraphs to sequance in at wahat order become the meta-levle poroblem to solve
05.02.19 20:21:25<sseehh> yes so from binah perspective it was reading what it wanted to influence its future speech
05.02.19 20:21:41<dmiles> deciding which paragraphs sequances to sequence in (for selfs attention) is meta-level work
05.02.19 20:21:54<dmiles> exactly
05.02.19 20:22:36<sseehh> and in any spreading activation system im sure this is how cyc works, relevance is spread across a graph somehow and then ranked
05.02.19 20:23:11<dmiles> you say "what are you kids names?" it siiently sequences in all of its doialogs about kids into a purl chatbot
05.02.19 20:23:36<dmiles> then calls the perl chatbot
05.02.19 20:23:53<sseehh> but there is a slight difference between that as an automatic process, and the process of forming the belief that it must do that in order for somethign it wants
05.02.19 20:23:54<dmiles> *then* asks the purl chatbot
05.02.19 20:24:02<sseehh> and then using that knowledge as a precursor to something more complex
05.02.19 20:24:04<sseehh> learning how to learn
05.02.19 20:24:39<dmiles> once ui understood the 2-D cockpit of Addtion.. i was ready for subtreaction
05.02.19 20:24:44<sseehh> so you could implement something like that in nars but the implications involved are also readily available as a model for other learning patterns
05.02.19 20:25:20<sseehh> "if i need to load paragraph X for Y then maybe i need to load paragraph A for B"
05.02.19 20:25:25<sseehh> "since Y<->B"
05.02.19 20:25:31<sseehh> "and X<->A"
05.02.19 20:25:35<dmiles> once i understood meta-cockpit of creating the 2-D cockpit of Addition.. i was ready for cockpit of +/-/*/div
05.02.19 20:26:11<sseehh> "but never load paragraph Z for Y" (exception to the rule)
05.02.19 20:26:29<sseehh> then it must eventually try to form "load paragraph X and probably never Z"
05.02.19 20:26:31<sseehh> etc
05.02.19 20:26:38<sseehh> as all these different condtions get balanced out
05.02.19 20:26:45<sseehh> what gets generated is a big mess of stuff
05.02.19 20:26:55<dmiles> and its ok to make some mistakes in those paragraph loads
05.02.19 20:26:56<sseehh> this is what i think should get compiled into the simplest set of rules somehow
05.02.19 20:27:04<sseehh> by a background compression/compilation/filtering processs
05.02.19 20:27:12<sseehh> because theres a lot of redundancy in what is generated
05.02.19 20:27:36<sseehh> tyaeh but the mistakes would be recognized through experience too
05.02.19 20:27:45<dmiles> for a while Bina48 even used Lucene for this
05.02.19 20:28:48<sseehh> for now i would be happy if nars could use a simple hashmap and use it to store key value pairs
05.02.19 20:28:56<sseehh> not that it cant but we dont know the best way how to yet
05.02.19 20:29:07<sseehh> of course we can force it to , under certain circumstances
05.02.19 20:29:11<sseehh> and maybe thats the way to teach it
05.02.19 20:29:19<sseehh> but how to make sure it keeps using it as a tool
05.02.19 20:29:45<sseehh> rather than get lost in confusion and forget the tool exists
05.02.19 20:29:53<sseehh> or forget how to use it etc
05.02.19 20:30:03<sseehh> without contsantly being reminded about it
05.02.19 20:30:16<sseehh> and if it needs constant reminder, what is the minimal amount of reminding
05.02.19 20:30:24<sseehh> so it doesnt get distracted from other things etc
05.02.19 20:30:27<dmiles> https://github.com/search?q=org%3Aopensim4opencog+lucene&type=Code <- this is the sourcecode of Bina48 btw :P
05.02.19 20:31:06<sseehh> thank ill have to show my friend who showed me it ~2010 iirc
05.02.19 20:31:15<sseehh> showed me a video of it
05.02.19 20:32:28<dmiles> YEah the hashmap thing is usefull
05.02.19 20:32:57<dmiles> i mena even something as si9mple as that is usefull
05.02.19 20:33:18<dmiles> (vs not having such a thing)
05.02.19 20:33:40<sseehh> its a subtle thing. because obviously you can store arbitrary amount of data in a concept hashmap itself, even persisting some of it to disk like what would happen in a lucene implemented concept index or soething
05.02.19 20:33:56<sseehh> but giving it a limitation on memory would force it to invent a new strategy
05.02.19 20:34:06<sseehh> 'insufficnet resources'
05.02.19 20:34:19<dmiles> 'dopamine deial'
05.02.19 20:34:20<sseehh> which is pei's insight
05.02.19 20:34:27<sseehh> as to what intelligence actually is
                 <dmiles> 'dopamine denial'
05.02.19 20:34:54<sseehh> brains have a limited volume
05.02.19 20:35:20<dmiles> well i think that linquistic storage is the cheapest from of neural stroage
05.02.19 20:35:28<dmiles> form*
05.02.19 20:35:54<dmiles> liguistic storage is how spiders have the mental bandwitch to spin a wen
05.02.19 20:35:58<dmiles> web*
05.02.19 20:36:37<sseehh> http://life.ou.edu/mind/OriginsOfMindTeaching.pdf this guy catalogued the functional role of a bunch of neurotransmitters
05.02.19 20:36:49<dmiles> is they are cosntantly hearing a radio broadcast that tells them what they need/want to do
05.02.19 20:37:24<dmiles> (the spider is listening to the broadcast that was recorded neuroly.. that broadcast is also on a loop)
05.02.19 20:37:43<sseehh> neural cognition may not be the lowest common denominator .. there are smaller cellular components, microtubles that could be doing the computation
05.02.19 20:38:04<dmiles> this makes much more sense than a spider performing highly complex calculatiojs
05.02.19 20:38:17<sseehh> in which case estimates on neural computation capacity assumed by things like ibm blue brain etc would be underestimating
05.02.19 20:38:41<sseehh> dunno how much is from dna 'memory' or what
05.02.19 20:38:47<sseehh> in a spider's case
05.02.19 20:38:59<sseehh> i mean how do crytals know how to organize
05.02.19 20:39:14<dmiles> well a pre-loaded verbal language woudl take less DNA than anyhting else possible
05.02.19 20:39:20<sseehh> a spider web isnt much more complex than a crystal.  the process of creating one yeah it involves specific body motion though
05.02.19 20:39:43<sseehh> dna would certain store symbolic data pretty well
05.02.19 20:39:51<dmiles> verbal language in the sense that narsees is a verbal 
05.02.19 20:40:26<sseehh> While the faculties of language, logic and reason seem to be mediated by one or a few mentalorgans based on serotonin receptors, the affective mental organs are numerous and diverse, mediated by a wide variety of receptors (among the dozen mental organs that I have characterized: alpha-1, alpha-2, beta, histamine, imidazoline, dopamine,sigma, mu,kappa).  Thus the affective systems do not represent a single, alternate, way of knowing, but rather a 
                 <sseehh> multiplicity of ways of knowing.
05.02.19 20:40:57<sseehh>  Dopamine mediates awe which has been called the distinctive religious emotion, as well as certainty(Smith 2001), meaning, and the sense of spiritual significance(Griffithset al.2006).Dopamine appears to be the most quintessentially religious mental organ. 
05.02.19 20:41:16<sseehh> Dopamine: salience, meaning, significance, insight,integration,deep emotions,and moods (both positive and negative); awe, certainty, religious sentiment; the sense of aesthetics.  Establishes the significance of mentationand in this way may modulate the influence of mentation on behavior.Able to associate feeling with thought, making us passionate about ideas
05.02.19 20:41:50<sseehh> Serotonin-1: pure cognition: logic, reason, concepts, thought, language.  Produces no feeling, can only be detected by engaging in cognitive tasks
05.02.19 20:42:44<sseehh> i forget how he arrived at these but these are based on actual medical data
05.02.19 20:43:31<dmiles> "800-1200 different functional odor receptors are expressed in the mammalian genome" .. that is a lot of symbolic info
05.02.19 20:43:36*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
05.02.19 20:44:39<dmiles> well jsut think how seemingly complex everyting outside of the brain is.. not surprisinfg that much can be a-priori to the brain
05.02.19 20:45:07<sseehh> how many opcodes in a modern microprocessor? yet we write in high level languages indpenednet of them
05.02.19 20:45:12<dmiles> not only do those 1200 differnt receptors exists in the nose they each need a path to the brain
05.02.19 20:45:28<sseehh> not necessarily they just need nerves which transduce some of the isgnal
05.02.19 20:45:36<sseehh> the processing can happen before it enters the neocortex
05.02.19 20:45:41<sseehh> like in the visual system
05.02.19 20:45:48<sseehh> there is preprocessing that happens as it proceeds backwards
05.02.19 20:46:00<sseehh> like video codecs
05.02.19 20:46:22<sseehh> what it looks like when it enters the higher brain, if we could even define a boundary, who knows
05.02.19 20:46:57<sseehh> just like any dimensional reduction system used in perception the goal is to reduce dimensionality
05.02.19 20:46:58<dmiles> the phsyical system of the body is pretty amazing
05.02.19 20:47:02*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
05.02.19 20:47:05<sseehh> so 1200 is the input vector but not necessarily the output
05.02.19 20:47:07<dmiles> cyc: (+ 1 1)
05.02.19 20:47:16<dmiles> *nod*
05.02.19 20:47:23<sseehh> it may take 50 dimensions to encode smell
05.02.19 20:47:32<sseehh> and think of how many words we actually use to descibe smell
05.02.19 20:47:36<sseehh> some people may only have 'good' and 'bad'
05.02.19 20:47:40* dmiles has a script that was for testing a bot that fires off 5 seconds after anyone joins
05.02.19 20:47:42<sseehh> or have no sense at all
05.02.19 20:47:50*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
05.02.19 20:47:55<dmiles> cyc: (+ 1 1)
05.02.19 20:48:33<sseehh> like someone may not get a distinction to ever need to classify smell, verbally in any way beyond 'good' or 'bad'
05.02.19 20:48:42<sseehh> some peple may try to actively ignore it
05.02.19 20:48:51<sseehh> at a conscious or subconcsiouc level
05.02.19 20:49:07<dmiles> well smells are in my defination more "verbal language"
05.02.19 20:49:09<sseehh> who is to say we cant grow more smell receptors
05.02.19 20:49:11<sseehh> or even invent new ones
05.02.19 20:49:33<sseehh> like if one develops their sense of smell maybe they can grow more complex smell receptor in the nose
05.02.19 20:49:42<sseehh> who is to say it cant happen, have we tested it
05.02.19 20:49:44<dmiles> like if you say "green" or i smell someting green .. in my head it is the same sort of token
05.02.19 20:49:51<sseehh> and invent new smell receptors, maybe for chemicals which dont even exist yert
05.02.19 20:49:54<dmiles> (at least associativelyu)
05.02.19 20:49:59<sseehh> maybe future humans will be able to smell radioactive particles
05.02.19 20:50:17<sseehh> yeah synaesshesia. but also there is big overlap between smell and taste
05.02.19 20:50:29<sseehh> like you know somehwat how somethign will taste by smelling it
05.02.19 20:51:05<dmiles> synaesshesia is from optimizaion
05.02.19 20:51:07<sseehh> or to taste with fingertips or somthing
05.02.19 20:51:28<sseehh> synaesthesia i mean
05.02.19 20:51:38<sseehh> yeah
05.02.19 20:51:52<sseehh> but could also just be from sensory overload bleeding over into other channels
05.02.19 20:52:09<sseehh> not to say it cant be leveraged as a cognitive strategy though
05.02.19 20:52:18<sseehh> like enhancement of associative memory
05.02.19 20:52:56<dmiles> for exmaple we can immaine a smell of things at the same level of detail we have immagine a song bying played or immagine the visuals of the ocean
05.02.19 20:53:26<sseehh> well the more sensory modalities you can involve in a memory generally the more powerful it will be
05.02.19 20:54:27<sseehh> so smelling colors or tasting numbers adds more association to a percept, for better or worse
05.02.19 20:55:01<sseehh> concepts might have a saturation point beyond which association becomes spam
05.02.19 20:55:20<dmiles> i wouldnt even know in that meory forum that smelling a color was wrong
05.02.19 20:55:50<dmiles> i would notice perhaps that never happens in real life i suppose
05.02.19 20:56:00<dmiles> but in my mind .. i would have no evidence
05.02.19 20:57:05<dmiles> (i mean to say.. they (sight and smells) are made up up the same mental subvstances)
05.02.19 20:57:51<dmiles> the substance is made up of how easily i can drill into irts level of detail
05.02.19 20:58:45<dmiles> for example i can smell banana's if i want to immagine.. but not sure how detailed the dsitinction between 5 differnt banana-like smells 
05.02.19 20:59:17<dmiles> just due to i havent created a mental languages for all but green and yellowness level of a bannana
05.02.19 20:59:44<dmiles> i mena that the small of a unripe banana if differnt from a ripe banana
05.02.19 21:00:15<dmiles> i mena that the smell of a unripe banana if differnt from a ripe banana.. then a cooked banna.. so i can claim i have 3 mental tokens for banna smells
05.02.19 21:01:04<dmiles> yet for the teh color green i have at least 10 versions
05.02.19 21:01:29<dmiles> (that i can "immagine" the existence of)
05.02.19 21:02:34<dmiles> immagining the existence of things and at what level of detail that immagining of can take on is sort of simular to how we use erbal languages
05.02.19 21:03:37<dmiles> verbal languages require a finite amount of detail
05.02.19 21:03:50<dmiles> we elaborate on them with another finite ammount of detail and so on
05.02.19 21:04:01<dmiles> sensory memory is exaclty like this
05.02.19 21:05:01<dmiles> why can we immagine an ocean that is way more complex than i we have the neoural hardware to immagine?
05.02.19 21:05:14<dmiles> (such as a seascape)
05.02.19 21:06:27<dmiles> it is that humans use what in CycL is subsumptive terms
05.02.19 21:06:44*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
05.02.19 21:07:32<dmiles> subsumptive are   motherOf(joe)
05.02.19 21:07:51<dmiles> or  smellOf(banana,ripe)
05.02.19 21:08:11<dmiles> this cannot be done in systems like prolog
05.02.19 21:08:23<dmiles> as they are not actualyl "living terms"
05.02.19 21:08:38<dmiles> "living terms" are skolems
05.02.19 21:08:56<dmiles> well solems was a failed attempt to create living terms
05.02.19 21:09:00<dmiles> skolems*
05.02.19 21:09:57<dmiles> living terms is that the existant value are dynamic
05.02.19 21:10:52<dmiles> for example dynamic in a way that the term itself cannot be given meaning outside of any context
05.02.19 21:12:30<sseehh> youre describing the issue of symbol grounding
05.02.19 21:12:39<sseehh> how are symbols connected to experience
05.02.19 21:12:51<sseehh> through perception, through memory
05.02.19 21:13:27*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 240 seconds
05.02.19 21:15:07*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 240 seconds
05.02.19 21:15:13*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
05.02.19 21:18:05*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
05.02.19 21:18:08*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
05.02.19 21:18:14<dmiles> cyc: (+ 1 1)
05.02.19 21:19:55<sseehh> Subsumption may refer to:
                 <sseehh>     A minor premise in symbolic logic (see syllogism) A subsumption relation in category theory, semantic networks and linguistics, also known as a "hyponym-hypernym relationship" (Is-a)
05.02.19 21:19:59*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
05.02.19 21:20:04<dmiles> cyc: (+ 1 1)
05.02.19 21:20:24<sseehh> /// inheritance-based syllogism ////////////////////////////////////////////////////////////////////////////////////
05.02.19 21:20:25<sseehh> / If A is a special case of B, and B is a special case of C, so is A a special case of C (strong), the other variations are hypotheses (weak)
                 <sseehh> /       (A --> B) ------- (B --> C)
                 <sseehh> /            \               /
                 <sseehh> /             \             /
05.02.19 21:20:27<sseehh> /              \           /
05.02.19 21:20:29<sseehh> /               \         /
05.02.19 21:20:31<sseehh> /                (A --> C)
05.02.19 21:20:35<sseehh>     (A --> B), (B --> C), neqRCom(A,C)     |- (A --> C), (Belief:Deduction, Goal:Desire)
05.02.19 21:20:53<sseehh>     (A --> B), (A --> C), neqRCom(B,C)      |- (C --> B), (Belief:Abduction, Goal:DesireWeak)
                 <sseehh> etc
05.02.19 21:25:47*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
05.02.19 21:34:12*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
05.02.19 21:34:17<dmiles> cyc: (+ 1 1)
05.02.19 21:35:49<dmiles> try to give an example of what I mean by "substantive term"..    imagine for a moment that you were in a candy store and give the clerk a nickel he opens his jellybean jar and you take out a jellybean.   You smell it..  it smells like cotton candy and then you eat it
05.02.19 21:35:51<dmiles>  and it again tastes like cotton candy.    he sets the jar down on the counter puts the lid on and you are looking at all these jellybeans in the jar.     ask yourself for a moment how many different colors are there in your imaginary jar?  try your best to memorize what your imaginary image of the jar looks like.   now the clerk takes a cardboard box turns it upside down places it over the 
05.02.19 21:35:52<dmiles> jar.   try now to recall exactly what that jar look like.   the clerk removes the cardboard box  and is it the same jar you saw before?   how well  were you able to remember what the jar would look like?   the internal representation structures that you use  for this  required how much computational resource do you think?   just how detailed of the picture of the jellybean jar did you actually 
                 <dmiles> see?
05.02.19 21:35:53<dmiles>  of course we have the clerk there right?   You saw this clerk in your mind.   okay what color was his hair?  color was his eyes?
05.02.19 21:35:54<dmiles> a  subsumptive term in this case was  the representation of the jar  while it was being covered with  the cardboard box..  the jellybean jar before and after being covered by the cardboard box are two subclasses of that original jar.
05.02.19 21:36:10<dmiles> sorry i meant to really say "subsumptive term"!
05.02.19 21:37:06<dmiles> Actually better description of the "subsumptive term" is the clerk who were probably until the end of the story had no eyecolor
05.02.19 21:37:41<dmiles> In other words subsumptive term is a term that represents something that you haven't even begun to think about yet
05.02.19 21:38:18<dmiles> That is something that has infinite promises to become something of more detail than it is presently
05.02.19 21:38:44<dmiles> And just how infinite can these future details become?
05.02.19 21:39:06<dmiles> In order for this not to be a problem for computer we actually have to have a specific representation that the computer will deal with
05.02.19 21:39:53<dmiles> So the "subsumptive term" system was an invention to recognize that this is the default
05.02.19 21:40:01<dmiles> And work around that default
05.02.19 21:40:22<dmiles> To embrace it and not do something illogical with it the way something like Prolog or first-order logic would
05.02.19 21:42:23<dmiles> making these into fuzzy equitable or equifiable term (in comparison to other terms) is is probably okay
05.02.19 21:42:35<dmiles> But I've never seen any fruitful results from doing that with these terms
05.02.19 21:42:44<sseehh> sounds like intensional inheritance of properties
05.02.19 21:42:52<dmiles> Since these terms are about what hasn't been computed
05.02.19 21:42:54<sseehh> like, (x --> [propertyA, propertyB...])
05.02.19 21:43:13<dmiles> Right it's the "...".
05.02.19 21:43:14<sseehh> where the properties are the classes of things like eyecolor etc
05.02.19 21:43:32<dmiles> What I'm referring to though is during the time of the story that we were talking about the clerk.. What was his eye color?
05.02.19 21:43:47<sseehh> (x-->y) is plain inheritance but NAL (and opencog apparently, big surprise) has itnensional and extensional inheritance (x-->[y]) and ({x}-->y)
05.02.19 21:44:10<dmiles> Are we going to clAim that he didn't have eyes during our imagined episodes?
05.02.19 21:44:11<sseehh> mostly white if i had to guess
05.02.19 21:44:31<sseehh> no i dont claim he exist just my mental picture was incomplete
05.02.19 21:44:50<dmiles> Right so that's the that's it it's just the ability to have incomplete terms
05.02.19 21:45:04<dmiles> And have these incomplete terms be as useful as everything else in the system
05.02.19 21:45:07<sseehh> once you have a term with variables its got missing information
05.02.19 21:45:42<dmiles> And what was unclear is when does this term *really* stop having variables?
05.02.19 21:45:55<sseehh> well the term is immutable
05.02.19 21:46:04<sseehh> but the variable could be substituted in a transformed term
05.02.19 21:46:12<sseehh> for something else, which may have a different variable etc
05.02.19 21:46:16<dmiles> To realize that every ground term has an infinite number of variables
05.02.19 21:46:27<sseehh> like (x --> [(y-->z), (#a-->z), ...])
05.02.19 21:46:31<dmiles> And to treat them in a special way that accepts that they have an infinite number of variables
05.02.19 21:47:03<dmiles> So in a way is actually very close to making "y" and "z"   (x --> [(y-->z), (#a-->z), ...])   Their own variables as part of an unseen relation
05.02.19 21:47:28<dmiles> Knowing that there is unseen relation around the selection of all things "z" and "y"
05.02.19 21:47:49<dmiles> I don't mean the #as  I mean the actual semantics of "z" and "y"..  
05.02.19 21:48:21<dmiles> The meaning of these constants their very existence depends on a special language that the normally doesn't exist in logic.  Until 1958 John McCarthy created this logic 
05.02.19 21:48:51<dmiles> Treated a logic that could create ground terms and not treat them ground even though they look ground to us
05.02.19 21:49:28<dmiles> So it's good to use logical variables because those are safe places to make replacements but what about ground things like "z" and "y" ?
05.02.19 21:50:14<dmiles> This logic that was created also had to be paradox free
05.02.19 21:51:55<dmiles> So anyway this particular type of logic that accepts the existence of such terms really changes things from where conventional logic outside of the logic of Cycorp hasn't really gone
05.02.19 21:52:40<dmiles> We ended up with a 6-8 value logic in order to keep it paradox free
05.02.19 21:53:03<sseehh> how does cyc handle something like a==>b b==>c c==>a ?
05.02.19 21:53:26<dmiles> It just memorizes it and look for evidence of one of the three facts a, b or c
05.02.19 21:53:31<dmiles> memoizes it
05.02.19 21:54:00<dmiles> Since CYC deals with things like that using forward it's a lot easier to not get stuck in the backchain
05.02.19 21:55:21<dmiles> In the case where "b" was a subsumtive variable... It would link the meanings of  ~c and +a into b
05.02.19 21:56:04<dmiles> Since we can quantify over several axioms of the logic at once the same way that first order logic quantifies over individuals
05.02.19 21:57:51<dmiles> Even without subsumption ,   in the example we are have to quantifying over the future of a subsumptions of all the possible interpretations of "a" "b" "c"
05.02.19 21:58:16<dmiles> So we've done is we've created a completely variable structure with "a==>b b==>c c==>a"
05.02.19 21:59:01<dmiles> You know how you are saying cutting Wikipedia pages into 6 different sub-interpretations..  We cut each one of those variables into 5 diffefrnt possible interpreations
05.02.19 21:59:15<dmiles> (How you are saying that with Dan's idea)
05.02.19 22:00:09<dmiles> We cut each one of those  sentencces (not variables) into 6 different possible contextualization's so we are at 6^3 in that case
05.02.19 22:01:19<dmiles> The reason for using subsumptive termerization is to make this not a explosive problem
05.02.19 22:04:01<dmiles> So I can example the six different interpretations is:  1: "I do know what 'a' is just made it up"  2) "'a' is something that is about its presence in the KB"  3) "'a'  is the minimal extent of examples that meet a particular set of intensional constraints"  4) "'a' a is something that is outside of all those constraints"
05.02.19 22:04:51<dmiles> So how we interpret our imagining the symbol A's logical properties.  Are the things that the logic uses as truth values
05.02.19 22:06:13<dmiles> There, say, might be 36 different outcomes to "A" and "B"
05.02.19 22:06:49<dmiles> The important thing was is that there was always a way of mixing in a new piece of information that was explicit (never fuzzy)
05.02.19 22:07:22<sseehh> im lost, i guess in nars the explanation is much simpler
05.02.19 22:07:54<sseehh> that a,b,c are atoms. in the ==> they refer to something like events and conditions which may or may not have belief or goal tasks associated
05.02.19 22:08:00<sseehh> or question tasks
05.02.19 22:08:08<dmiles> A good article on this was http://jmc.stanford.edu/articles/elaboration/elaboration.pdf
05.02.19 22:08:38<sseehh> a=>b b=>c c=>a  is 3 tasks but can be reprsented by one especially if 'a' refers to two separate events in time
05.02.19 22:08:39<dmiles> Section 4 of this explains the logical operators
05.02.19 22:08:44<sseehh> ok
05.02.19 22:09:12<sseehh> an evnet like 'a' can have beliefs in the frequency range 0..1.0 this can basically cover the spectrum of saying 'never, maybe always'
05.02.19 22:09:23<sseehh> but in the presnet moment they sort of collapse into a boolean sense
05.02.19 22:09:37<sseehh> so they are like boolean variables
05.02.19 22:10:15<sseehh> another contradiction that will stop prolog is saying x=>y y=>x or some other loop
05.02.19 22:10:43<sseehh> or (x ==>+1 x) this is valid
05.02.19 22:11:00<sseehh> but (x =|> x) just reduce to true
05.02.19 22:11:10<sseehh> etc
05.02.19 22:11:17<sseehh> (x ==>+1 --x) oscillates etc
05.02.19 22:11:25<sseehh> negation just means 1-freq
05.02.19 22:11:32<sseehh> so if freq=1 then negation of that is 0
05.02.19 22:11:34<dmiles> I think that's pretty good to do what you're saying..  Oftentimes is what were looking for is to be able to get to Boolean states..  Also it's good for when we are looking for heuristics what I am not sure it is good for representing complex objects such as bitmaps.  
05.02.19 22:11:37<sseehh> while negation of 0.5 is still 0.5
05.02.19 22:12:02<sseehh> but there is also the unknown state
05.02.19 22:12:06<sseehh> where no information exists
05.02.19 22:12:09<sseehh> or if only a question exists
05.02.19 22:12:16<sseehh> it is still not 0 , not 0.5 and certainly not 1.0
05.02.19 22:12:20<sseehh> it just doesnt exist
05.02.19 22:12:25<dmiles> Yeah actually Elise in that way Norris is recognizing the things that don't exist
05.02.19 22:12:44<dmiles> Yeah actually in that way NARS  is at least recognizing the things that don't exist
05.02.19 22:12:55<sseehh> likewise you can say that (x ==> y) and also that (x ==> --y).  what is the system supposed to conclude?
05.02.19 22:12:59<dmiles> (And making room for them)
05.02.19 22:13:09<sseehh> in nars, truth revision will naturally interpolate these to 'mayb'
05.02.19 22:13:10<sseehh> maybe
05.02.19 22:13:17<sseehh> x ==> y with 0.5
05.02.19 22:13:27<dmiles> What McCarthy was trying to find out is good we have a logical system..  That does truth revision that is always happy with having everything be 0.5
05.02.19 22:13:38<sseehh> so it is how conflicting data gets either polarized or depolarized
05.02.19 22:14:14<sseehh> the opposite of maybe is still maybe
05.02.19 22:14:19<sseehh> in this case
05.02.19 22:15:36<sseehh> the beliefs in OpenNARS proper are point-like, occur at a specific time or are eternal
05.02.19 22:15:49<sseehh> i extended tasks to be ranges with specific start,end (or eternal)
05.02.19 22:16:08<sseehh> because the truth ends up looking like a wave if you chart a belief table through time
05.02.19 22:16:10<sseehh> of a changing signal
05.02.19 22:16:36<sseehh> so i figured segments are cheaper to more clearly approximate signals than a million points
05.02.19 22:16:53<sseehh> especially when each point has a bunch of metadata it becomes expensive
05.02.19 22:16:56<sseehh> computationlly
05.02.19 22:17:30<dmiles> Great example: these segments are completely representative of all those little points
                 <sseehh> but i think the next step is to allow even the truth to form a curve, starting with piecewise segments not just horizontal pieces that digitze the signal
05.02.19 22:17:36<sseehh> piecewise segments with slope
05.02.19 22:17:41<sseehh> a starting truth and ending truth
05.02.19 22:17:59<sseehh> so i started an api called 'truthlets' which are like wavelets
                 <dmiles> At least to the degree that meaning would be there in the right cockpit
05.02.19 22:18:04<sseehh> pieces of waves
05.02.19 22:18:33<dmiles> (Well in this case segments being at the right width)
05.02.19 22:18:54<dmiles> (The cockpit decides how wide each segment was supposed to be)
05.02.19 22:19:14<sseehh> yeah there are limits
05.02.19 22:19:34<dmiles> Having some tasks have a starting point that have now end
05.02.19 22:19:41<sseehh> but no matter how many times i explain this in #nars .. they are fine with the little points
05.02.19 22:19:53<sseehh> they think a point or two is sufficient to describe the difference between a minute and a second
05.02.19 22:20:04<sseehh> a belief that happens for a minute and a bleief that happens at a particular second
05.02.19 22:20:26<sseehh> they dont understand the imprtance of the dynamic truth evaluation etc
05.02.19 22:20:29<dmiles> You know it is sufficient to describe the difference between a minute and the second is?
05.02.19 22:20:30<sseehh> it blows my mind
05.02.19 22:21:03<dmiles> Sufficient would be the ability  to describe what you think the difference between a minute and a second is
05.02.19 22:21:24<sseehh> i mean like
05.02.19 22:21:36<sseehh> light is off for 1 minute. light goes on for one second.  light goes back off for anothe rminute
05.02.19 22:21:40<sseehh> ____|____
05.02.19 22:21:45<sseehh> vs
05.02.19 22:21:48<sseehh> __----__
05.02.19 22:21:52<sseehh> these are differnet wave shapes right?
05.02.19 22:21:59<dmiles> What I mean though by that is that you have this concept of you have "a thing"  and "bunch of subthings"
05.02.19 22:22:03<sseehh> for a boolean variable through time
05.02.19 22:22:41<sseehh> and yet you either have to use a point for every second to get some accurate representation of it or you can use line segments
05.02.19 22:22:45<sseehh> to cover a set of points
05.02.19 22:23:04<dmiles> Right yeah I think both views the segment view and the duration view and the point view all need to be a list he seen at once in whatever of three contexts is going to make sense for any antecedent
05.02.19 22:23:19<sseehh> according to nyquist digital sampling you need 2 * as many points as the max frequency to be captured
05.02.19 22:23:48<sseehh> well heres the problem. if you have a fixed size evidence tracking data structure
05.02.19 22:23:55<dmiles> Right yeah I think al  views "the segment view" and the "duration view" and the million  points view all need to beto make sense for any antecedent irregardless of the view it assumed
05.02.19 22:23:56<sseehh> you can only hold N items before it saturates
05.02.19 22:24:36<dmiles> Yeah that's a good point about needing 2 if not 2 samples
05.02.19 22:25:04<sseehh> to sample an analog signal reliably at 100hz you need to sample digitally 200hz
05.02.19 22:25:13<dmiles> I had a frequency guesser that sampled at seveal prime numbert that had to divide into sample at 1/2 rates
05.02.19 22:25:24<sseehh> and then signals below 100hz can accurately be reconstruted (digital to analog)
05.02.19 22:25:42<sseehh> right it can only accurately guess 1/2 times the max digital sampling freq
05.02.19 22:25:48<sseehh> and below
05.02.19 22:26:02<sseehh> so 44.1khz audio can accurately produce below 22050 and thats the theoretical limit
05.02.19 22:26:07<sseehh> 22050hz
05.02.19 22:26:13<sseehh> which is well above normal hearing range
05.02.19 22:26:16<dmiles> meaning i start out at 67 hers and see nothing prodicable i have to sample faster next
05.02.19 22:26:40<dmiles> 67hz,6700hz etc
05.02.19 22:27:05<dmiles> But that's the system for picking up what song you're playing on your guitar strings
05.02.19 22:27:21<sseehh> like a guitar tuner pitch detector?
05.02.19 22:27:32<dmiles> I mean trying to guess what strings you're trying to play and at what frets
05.02.19 22:27:35<sseehh> yeah many ways of doing that like an FFT
05.02.19 22:28:30<dmiles> I guess what I'm saying is they figured out that they may not be on the incorporate information from the sampling fast enough to be only hear a really high note
05.02.19 22:28:42<sseehh> they dont even know what theyre loking for
05.02.19 22:28:47<sseehh> they dont even realize there is a truth wave
05.02.19 22:28:59<dmiles> And that is exactly a terrible situation that NARS is in
05.02.19 22:29:01<sseehh> that needs to be approximated
05.02.19 22:29:18<sseehh> they dont admit that a piecewise reprenetation is computatoinally more efficient than a million points
05.02.19 22:29:53<dmiles> It becomes it becomes a  million muddy points that somehow (with all the extra processor bandwidth that you have left ) figure out there's actually a signal in there!
05.02.19 22:30:26<sseehh> it has to get pretty lucky to be able to see them in such a way
05.02.19 22:30:31<sseehh> and not just a scattering of noise
05.02.19 22:30:42<sseehh> if it manages to get to all of them in time
05.02.19 22:31:18<sseehh> well my original point was that these boolean variables can change with time
05.02.19 22:31:23<sseehh> they can have specific shapes that mean something
05.02.19 22:31:33<sseehh> if these shapes are recognized they can be transformed into symbols i guess
05.02.19 22:31:55<sseehh> and also there are relationships between the waves of one variable and another
05.02.19 22:32:11<sseehh> justlike in a circuit each node will have its own voltage
05.02.19 22:32:19<sseehh> and its the interactoin of these that define the behavior of it
05.02.19 22:32:40<dmiles> What we need to have happen is no matter how good or bad the representation's choice was   that they should be almost exchangeable... That is is you provide me with the segment.. I should feel to come back to and pretend it was a series of points 
05.02.19 22:33:02<dmiles> But will use the cheaper representation first
05.02.19 22:33:27<sseehh> yes and if i say that an event happened with a duration of 1 day and you expect points for at most every second does that mean i have to give thousands of the same point
05.02.19 22:33:30<sseehh> same valued ponit
05.02.19 22:34:02<dmiles> I'm kind of implying that that's what you should do is give me the same point 1 several times :)
05.02.19 22:34:08<sseehh> they will probably say ok we just need to model the event of when it starts and ends with differnt concepts
05.02.19 22:34:20<sseehh> ok then you need 2x concept for everything and you still miss all the potential detail
05.02.19 22:34:32<sseehh> yeah but opennars doesnt know what to do with duration
05.02.19 22:34:34<sseehh> its tasks are points
05.02.19 22:34:50<dmiles> By the way should back to me why are 1000 points always the same that should have been impossible
05.02.19 22:35:10<sseehh> if the lightbulb is on and the light level remains constant
05.02.19 22:35:16<sseehh> and i check for it every second
05.02.19 22:35:23<sseehh> and you ask was it on in the half second between each second
05.02.19 22:35:25<dmiles> By the way should back to me "hy are 1000 points always the same?that should have been impossible? rigth?"   And in tomorrow make the sampling happen at say several points for a few minutes
05.02.19 22:35:53<dmiles> Meaning that you will seek to find that out 
05.02.19 22:36:11<dmiles> Actually we already told you that is the same light moment spent on all day
05.02.19 22:36:19<sseehh> but the question is how fast is eough to sample. it comes back to signal processing and how accurately a signal can be reconstructed
05.02.19 22:36:44<dmiles> On this case I have to agree that segments are the only thing that makes sense here
05.02.19 22:36:58<dmiles> Aways most compact explicit representation
05.02.19 22:36:59<sseehh> thanks
05.02.19 22:37:20<sseehh> im only 0.99 crazy not 0.995 crazy
05.02.19 22:38:01<sseehh> but i think the truthlet thing has potential to improve on this
05.02.19 22:38:06<sseehh> becaus enow its like a bunch of horizontal lines
05.02.19 22:38:09<dmiles> That you bring up the sampling problem what we should do to solve the sampling problem is we turn on our sensor for segments of time and then count how many times we saw points in each segment
05.02.19 22:38:20<sseehh> but the actual signal i want to capture is changing throughout that
05.02.19 22:38:36<sseehh> so even a line segment approximation would be better
05.02.19 22:38:44<sseehh> without even involving curves, like bezier or quadratic
05.02.19 22:38:48<dmiles> How long sure segments be? Dont know.. Long enough to capture 1 ppont ... 10 points etc
05.02.19 22:39:16<sseehh> well you have to keep incrasing the sensitivity of the measuring to be sure you didnt miss detail at higher frequency than what you know you can measure
05.02.19 22:39:39<sseehh> i guess quantm physics says there is a limit to that eventually
05.02.19 22:39:43<sseehh> planck length or somethng
05.02.19 22:40:12<dmiles> that sensitivity rating woiut be "here i saw mud" "here i saw nothing"  "here is see cycles"
05.02.19 22:41:22<dmiles> (that s it that sensitivty is like  strering wheel)
05.02.19 22:41:23<sseehh> there are other representatoins for signals and stuff but fundamentaly what else are you going to do with a boolean-like signal through time
05.02.19 22:41:26<sseehh> its still a waveform
05.02.19 22:41:37<sseehh> even if its a component of a frequency-transformed spectrogram
05.02.19 22:41:44<sseehh> even a spectrogram can change with time
05.02.19 22:41:52<sseehh> in relation to its window
05.02.19 22:42:12<sseehh> yeah the same thing applies to output signals equally
05.02.19 22:42:15<sseehh> just as important
05.02.19 22:43:58<dmiles> well often people judge the enviroment by how often it reacts to how often they output a singal
05.02.19 22:45:10<dmiles> like i know when search for an AM radio station i wont find one slowly turniong the recever.. i have to do it a few times really fast
05.02.19 22:45:40<dmiles> (but whats relaly fast? ) it is x5 times faster than presision mode
05.02.19 22:46:09<dmiles> that is i make up a fast = 5-7 times slow
05.02.19 22:46:30<sseehh> in an RL situation where the agent has no idea what is going on, no idea what the actions do etc
05.02.19 22:46:39<sseehh> the only thing that can be done is inject noise with random number generator at some rate
05.02.19 22:46:54<sseehh> i have a set of strategies for doing this that it randomly selects from
05.02.19 22:47:08<sseehh> it seems to work ok to get it started
05.02.19 22:47:16<sseehh> for different environemtn but it still a heuristic
05.02.19 22:47:26<dmiles> that is the differnce in animals we are bornknowing exactly hjow to do 50 differnt things
05.02.19 22:47:48<dmiles> and we know exaclty what feedback certain things are supposed to give
05.02.19 22:48:22<dmiles> then everything else we learn is a edit of one of those templates
05.02.19 22:48:35<dmiles> (copy+edit)
05.02.19 22:50:38<dmiles> since the brain is not powerfdully enough to computationally learn to learn
05.02.19 22:51:40<sseehh> even a paramecium exhibits some intellience and it has no neurons
05.02.19 22:51:58<dmiles> it is only computationaly complex to _appear_ to learn to learn
05.02.19 22:52:42<dmiles> it is only computationaly complex enough to confuse alredy confused observers looking for something
05.02.19 22:53:15<dmiles> a good exmaple of this.. we all have a voice in our head while we type
05.02.19 22:53:35<sseehh> at least one
05.02.19 22:53:36<dmiles> how did we pain/pleasure a reqard system to all have the saem deal going on?
05.02.19 22:54:13<dmiles> the deal was wating for us.. even we could talk
05.02.19 22:54:21<dmiles> the deal was wating for us.. even before we could talk
05.02.19 22:54:43<dmiles> (or type)
05.02.19 22:55:09<dmiles> but we alll have the same deal?
05.02.19 22:55:28<dmiles> natural cant afford to give us all differnt deals
05.02.19 22:55:36<sseehh> some people claim to not have mental monologue, or they remember a point in their childhood or adulthood even when it just appeared
05.02.19 22:55:39<dmiles> sinc eo0nly one deal has ever worked
05.02.19 22:55:53<sseehh> so i dont know if it can be considered a universal aspect of human cognition necessarily though certainly common
05.02.19 22:56:19<sseehh> or that its even helpful or necessary
05.02.19 22:57:20<sseehh> or that its one voice, or several that seems like one, or several that seems like several
05.02.19 22:57:30<sseehh> with or without someone elses voice
05.02.19 22:57:37<sseehh> wanted or unwanted intrusions
05.02.19 22:57:43<dmiles> i remember doing charades/tantrum on an airplane at 6 montsh old (my first memory) i couldnt talk yet
05.02.19 22:57:46<sseehh> in an intelligible language or gibberish
                 <sseehh> etc
05.02.19 22:57:56<dmiles> by 2 i was gripnbg out my mom about the seat i sat one 18 months prior
05.02.19 22:58:32<dmiles> but for sure.. i had no voice in my head yet
                 <sseehh> but what do born-deaf people hear
05.02.19 22:58:40<sseehh> in place of an internal monologue
05.02.19 22:59:01<dmiles> visual dialogs
05.02.19 22:59:25<dmiles> you can even immagine a smell dialog
05.02.19 22:59:38<dmiles> (sit there thinking aobut 5 smells in succession)
05.02.19 22:59:57<sseehh> the nervous system is developing rapidly even before birth
05.02.19 22:59:58<dmiles> (like immagining smells at a movie theature)
05.02.19 23:00:40<sseehh> if its a smell sequence language then there must be something like a smell grammar
05.02.19 23:00:42<dmiles> but oh right hte internal onolog.. my thesis is that is how we comand our thinking
05.02.19 23:01:08<dmiles> (thus how was i commanding my thinking at 6mos?)
05.02.19 23:01:22<dmiles> (how do deaf peopel command their thinking)
05.02.19 23:01:44<sseehh> well there might be something whch seems like command, people may even claim they control their thoughts. but really.. lol
05.02.19 23:02:10<dmiles> one way to control thoujghts is using music and logic
05.02.19 23:02:49<dmiles> i mean to say that we can force outselves into a trance using either
05.02.19 23:03:04<dmiles> force ourselves to tunr off the monkey mind
05.02.19 23:03:20<dmiles> and evne if we want force ourselves to be the monkey
05.02.19 23:03:47<dmiles> vs supposedly we are nomrally both
05.02.19 23:04:57<dmiles> so by command i mean forcing the creation mental memory
05.02.19 23:05:02<sseehh> well humans are fascinating feedback loops
05.02.19 23:05:05<sseehh> of control and perception
05.02.19 23:05:08<sseehh> human nervous system
05.02.19 23:05:14<dmiles> forcing the creation of mental memory
05.02.19 23:05:29<dmiles> so 3 seconds later you have a memory of what you did 3 seconds ago
05.02.19 23:05:30<sseehh> whatever seems like forcing might just be an excuse for what it was going to do anyway
05.02.19 23:05:58<dmiles> thus 3 seconds eariler to descided what you are supposed to be able to remember 3 seconds later
05.02.19 23:07:12<dmiles> yeah .. sometimes we start a few seconds earlier since we are predicable as to what we will do a few senconds later
05.02.19 23:07:49<dmiles> not because we are computationally ingenious .. but we are behavorially bland
05.02.19 23:07:52<sseehh> Bicameralism is a hypothesis in psychology that argues that the human mind once assumed a state in which cognitive functions were divided between one part of the brain which appears to be "speaking", and a second part which listens and obeys—a bicameral mind.
05.02.19 23:09:08<dmiles> in that hypothesis i need to read how he thoujght the talking mind started talking at all
05.02.19 23:10:44<dmiles> and why the talking mind would have cared to leanr to talk since the reward punishment happineng to the other
05.02.19 23:11:14<sseehh>  Iain McGilchrist who published a similar idea, accepts Jayne's intention, but proposes that Jayne's hypothesis was the opposite of what happened:
05.02.19 23:11:15<sseehh>     I believe he [Jayne] got one important aspect of the story back to front. His contention that the phenomena he describes came about because of a breakdown of the 'bicameral mind' – so that the two hemispheres, previously separate, now merged – is the precise inverse of what happened.[32]:262
05.02.19 23:11:46<dmiles> not that what i said there was supposed to make sense it was to show how PLN is not possible
05.02.19 23:12:08<sseehh> PLN?
05.02.19 23:12:36<dmiles> like Teaching someting how to talk using carrot and stick
05.02.19 23:13:21<sseehh> i rmembember chomsky said in an interview exactly that, that we dont need to bother teachig language
05.02.19 23:14:19<dmiles> i donthtink PLN (is at all a bad thing) https://wiki.opencog.org/w/Probabilistic_logic_networks 
05.02.19 23:14:53<dmiles> we dont need to teach kids how to walk either
05.02.19 23:15:17<dmiles> its funny watching parents merely push their kids into harms way
05.02.19 23:15:29<dmiles> since their kid is not neurologialy developed to walk
05.02.19 23:16:09<dmiles> yuet they think since the kid spent 4 weeks falling on their ass.. they just learned how
05.02.19 23:16:47<sseehh> patrick said he read the PLN book before the NARS book and decided PLN was garbage
05.02.19 23:17:00<sseehh> i dont know how much PLN has evolved but ive been checking the github occaisionalyl
05.02.19 23:18:02<sseehh> https://github.com/opencog/atomspace/tree/b0078dc8c56c68047193a69358887cd248b5ad01/tests/rule-engine/rules
05.02.19 23:18:49<dmiles> https://www.linkedin.com/pulse/really-butt-kicking-whenever-topic-a-priori-comes-up-douglas-miles/
05.02.19 23:19:13<dmiles> i dont remember if you were still online when i poisted that
05.02.19 23:20:31<sseehh> https://en.wikipedia.org/wiki/Neoteny_in_humans
05.02.19 23:21:21<sseehh> its like we may have a bigger memory maybe also a bigger cpu doesnt mean we learn faster
05.02.19 23:21:36<sseehh> just more room for noise to bounce around
05.02.19 23:21:42<sseehh> that doesnt mean we stay dumber either
05.02.19 23:21:58<sseehh> in fact it means more potential for that noise to get organized into non-noise that fills it
05.02.19 23:22:18<sseehh> but how long it takes, maybe adulthood, maybe 1000 years
05.02.19 23:25:50<sseehh> the growth curve could also have different shapes, it could be exponential-like, or logarithmic
05.02.19 23:25:53<sseehh> if it had to be summarized
05.02.19 23:26:34<sseehh> and just as interesting as how it grows there is also a pattern to how it decays like in dimensia and alzeheimers
05.02.19 23:27:13<sseehh> the breakdown of language and self is something im watching in a relative of mine now
05.02.19 23:27:22<sseehh> who was diagnosed with alzheimers
05.02.19 23:28:15<dmiles> i wonder if it is a breakdown back into bicamerality
05.02.19 23:29:03<dmiles> (at least that is a lifelong dependance of non-bicameralism)
05.02.19 23:30:00<dmiles> in other word the salient part that gave themselves a flow of concousness is harder to maintain
05.02.19 23:30:50<sseehh> Language is a Virus may refer to:
                 <sseehh>     "Language is a Virus", a song by Laurie Anderson
                 <sseehh>     a concept in the William S. Burroughs novel The Ticket That Exploded
05.02.19 23:31:56<dmiles> that is the dependance on ultraconnectedness of the person to keep themselves seemingly more aware is no longer the right tool
05.02.19 23:32:23<sseehh> Thttps://en.wikipedia.org/wiki/Snow_Crash he book presents the Sumerian language as the firmware programming language for the brainstem, which is supposedly functioning as the BIOS for the human brain. According to characters in the book, the goddess Asherah is the personification of a linguistic virus, similar to a computer virus. The god Enki created a counter-program which he called a nam-shub that caused all of humanity to speak different 
                 <sseehh> languages as a protection against Asherah (a re-interpretation of the ancient Near Eastern story of the Tower of Babel). 
05.02.19 23:35:25<dmiles> alzeheimers as a tower of babel syndrome in the brain
05.02.19 23:35:47<sseehh> https://en.wikipedia.org/wiki/Transformational_grammar#%22I-language%22_and_%22E-language%22
05.02.19 23:36:38<sseehh> http://www.johnclilly.com/metaprog01.html
05.02.19 23:37:55<sseehh> in my aunts case it just certain speech behavior is broken in specific sways
05.02.19 23:37:58<sseehh> among other symptoms
05.02.19 23:38:18<sseehh> but the language thing is one thing that became obvious
05.02.19 23:39:02<sseehh> in particular one is she forgets to or cant mention what something refers to and you just get sentences takling about 'stuff' and 'that' and you ask 'what are you talking about'
05.02.19 23:39:28<sseehh> but she doesnt even understand that she hasnt said what 'it' actually is
05.02.19 23:39:41<dmiles> "try to remembering what i was thinking and why i was thinking aobut that"
05.02.19 23:39:50<sseehh> theres a term for this specific one
05.02.19 23:40:07<sseehh> its like a lack of modeling the listener who youre talking to
05.02.19 23:40:13<sseehh> to know if you need to give them the full information
05.02.19 23:40:19<sseehh> or if you can just keep referring to variables
05.02.19 23:40:40<sseehh> but recently there was another thing i noticed
05.02.19 23:41:00<sseehh> and it just seemed like there was multiple selves in there totally disconnected from each other
05.02.19 23:41:05<sseehh> with opposite beliefs
05.02.19 23:41:24<sseehh> i guess its like schizophrenia
05.02.19 23:41:29<sseehh> maybe even technically indstinguishable from it
05.02.19 23:42:13<sseehh> like i would be talking on the phone with her and she answered something one way then the next sentence talking as if she answered the oppoosite
05.02.19 23:42:18<sseehh> a yes/no question thing
05.02.19 23:42:48<sseehh> but the transition from the one sentence to the other happened so quickly
05.02.19 23:43:03<sseehh> like the shift in belief had to be so rapid
05.02.19 23:43:14<sseehh> that i imagined there was like 2 thought processes i was talking to
05.02.19 23:43:22<sseehh> one that believed it one way the other which believed the other
05.02.19 23:44:34<sseehh> but ordinarily if someoe is ambivalent about something and they even end up saying the opposite one right after the other, they can notice it themselves and appreciate it
05.02.19 23:44:43<sseehh> but here there is just no ability to do that either
05.02.19 23:45:53<sseehh> like there cant be any expectation of a rational response
05.02.19 23:46:12<sseehh> in fact the rational explanation can often make it worse and more confusing
05.02.19 23:48:01<dmiles> some people might be a state where that happens (they are trying to justify the conflict)
05.02.19 23:48:37<sseehh> sure nobody's mind is 100% coherent
05.02.19 23:48:44<sseehh> what makes it worse is when people deny that it isnt
05.02.19 23:48:54<sseehh> then the justification becomes just more incoherency
05.02.19 23:49:42<sseehh> but in terms of a bicameral breakdown, this was witnessing some kind of binary partioning
05.02.19 23:51:02<sseehh> other thigns like number skills also worsened
05.02.19 23:51:24<sseehh> i dont even know how someone can still have a drivers license if a doctor has tested them and knows they dont know how to read a clock or cant count to 10
05.02.19 23:52:07<sseehh> and yet a lot of cognitive functioning is still fine
05.02.19 23:52:18<sseehh> so it just like a machine that breaks in a random way
06.02.19 00:01:19<sseehh> Freedom from the tyranny of the supra-self-metaprograms is sought but not to the point at which other human computers control this particular human computer.
06.02.19 00:01:20<sseehh> lol
06.02.19 00:02:10<sseehh> http://www.johnclilly.com/metaprog03.html
06.02.19 00:05:41<stoopkid> dmiles: do you know anywhere in RDF or XML (or other specs) that treatment of raw binary data (in terms of the value space) that isn't necessarily in multiples of 8 bits?
06.02.19 00:05:57<stoopkid> that gives*
06.02.19 00:06:57<stoopkid> XML schema can do lists of booleans, but i feel like this isn't necessarily semantically constrained to be interpreted as "consecutive physical bits"
06.02.19 00:08:17<stoopkid> XML schema can also do hexBinary and base64Binary data-types, which *do* seem to be semantically constrained to be actual physical bytes, but then only treating them in multiples of 8 (possibly 4, depending on interpretation)
06.02.19 00:22:32<stoopkid> for an example application so you know what i'm looking for there say i'm defining a grammar for x86 opcodes, in say, n3 w/ standard RDF and XML semantics and i want to actually process raw binary files with it, to make like a compiler, disassembler, linker, whatever
06.02.19 00:23:35<stoopkid> x86 opcodes are broken up into smaller chunks, like 2-bit chunks, 3-bit chunks etc..
06.02.19 00:24:11<stoopkid> so defining this in say, RDF, i need to be able to work with bit-string-valued literals
06.02.19 00:24:35*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
06.02.19 00:25:00*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
06.02.19 00:25:06<dmiles> cyc: (+ 1 1)
06.02.19 00:28:49<stoopkid> i could do that via the data-type IRI for literals, associating it to a list (xsd:anySimpleType) of booleans (xsd:boolean) but... xsd:boolean is really just the "abstract concept of a boolean value", doesn't necessarily imply its existence as part of literal physical binary data, and might have other internal representation (not necessarily a problem) and I/O semantics (possibly the problem); xsd:hexBinary though seems to
                 <stoopkid> refer to a literal physical "byte" but then ofc that requires extra mechanics on top in order to get down to the bits
06.02.19 00:30:05<stoopkid> so we'd want something like actually implies "a list of bools that's actually part of a xsd:hexBinary"
06.02.19 03:14:14<dmiles> "then ofc that requires extra mechanics on top in order to get down to the bits"  on top of that, if you do get a seuquence of bit (well a sequence of letters or whatnot).. you dont have yet a way to index into the sequence and return a value 
06.02.19 03:15:52<dmiles> ?- nth(2,[a,b,c],E).
06.02.19 03:16:14<dmiles> as an exmaple needs one more Airty than RDF will give you
06.02.19 03:16:48<dmiles> though in RDF they have create a whole predicate for every index to infinity
06.02.19 03:16:59<dmiles> have already created
06.02.19 03:17:49<dmiles> https://www.w3.org/TR/rdf-schema/#ch_seq
06.02.19 03:18:39<dmiles> the rdf:_1, rdf:_2, rdf:_3 ...
06.02.19 03:20:16<dmiles> sometimes this design was purposely to prevent people from doing anything complex 
06.02.19 03:23:39<dmiles> the question sometimes is if it was to appear in a spec, should engine designers be expected to make it work in their engine?
06.02.19 03:24:13<dmiles> I'd sayt for sure yes.. so there is prenty of things that shoul;d be happening that wont be in the spec
06.02.19 03:26:15*** Quit: sseehh (~me@2601:547:501:6b0c::d442) left #logicmoo: Remote host closed the connection
06.02.19 03:26:20<stoopkid> well, if it's not something that's part of the specs that's fine, i just don't want to reinvent something that can already be well-defined just by what's in the specs
06.02.19 03:26:29<dmiles> " for an example application ... " this is exaclty what i would have wanted you to expect to be able to do
06.02.19 03:27:47<stoopkid> you mean, you would have wanted me to expect that if i want to i could just add binary-processing built-ins to my implementation even if they aren't included in the spec?
06.02.19 03:27:56<dmiles> N3 i supose wornt stop you at least
06.02.19 03:28:50<dmiles> oh i mean i would expect anyone using RDF/metadata would demand that they are not crippled by RDF
06.02.19 03:29:25<dmiles> yes that you would expect to have an infrastructure for pluginging in binary data
06.02.19 03:30:02<dmiles> i would even hoped the W3C would have documented a guide to how that would happen 
06.02.19 03:30:52<dmiles> XSD though does get into this a little better than RDF
06.02.19 03:31:22<dmiles> that is XSD existed 5 years before RDF so there was no conspiracy to cripple it
06.02.19 03:32:24<stoopkid> well, RDF does fine on this by leaving it completely open, and even indicates that we should expect to be able to use XSD data-types for literals with the proper XSD interpretation assigned to them
06.02.19 03:32:29<dmiles> most discussions about wheter RDF server should support XSB have decided "only if people start asking"
06.02.19 03:32:39<dmiles> XSB/XSD
06.02.19 03:33:00<stoopkid> ex. for many practical applications i could process binary files using XSD:hexBinary
06.02.19 03:33:59<stoopkid> but for breaking down to the bit-level, without leaving room for interpretation of the bit-sequence as something other than raw byte data, i haven't quite seen how to do that in pure XSD yet
06.02.19 03:35:33<stoopkid> there might be some way to semantically relate lists of booleans with XSD:hexBinary using XML Schema's methods for describing new types
06.02.19 03:36:21<dmiles> https://www.w3.org/2005/rules/wiki/BLD btw does allow you to do this
06.02.19 03:37:11<dmiles> in RDF-BLD you can even sematically define an operating system 
06.02.19 03:37:31<dmiles> as well as data
06.02.19 03:38:16<dmiles> because you are no longer restricted to Arity 2
06.02.19 03:39:03<stoopkid> hrm, i don't think arity 2 is a restriction
06.02.19 03:39:31<stoopkid> i mean, syntactically yea it's annoying to curry everything into triples but it's still technically doable
06.02.19 03:40:05<dmiles> indexing a list means you have to cosntruct a new predciate for each index
06.02.19 03:41:30<dmiles> and then order those indexes per a predciate like  next_index(rdf:_2,rdf:_3) etc
06.02.19 03:41:39<stoopkid> sure but we're just talking about RDF literals here, and really prior to their operational interpretation as lists
06.02.19 03:42:37<dmiles> i am sort of thinking where we have a string "ABCD" and we need to declare that irem in some postion holds in relation to another postion 
06.02.19 03:43:55<dmiles> but yeah as long as we dont want operational interpretation we are fine
06.02.19 03:44:47<stoopkid> we'll get to the operational interpretation, right now i'm just thinking about having a string like "01100", like a sequence of unicode 0's and 1's, but with a data-type that actually forces them to be interpreted as actually physical binary, i.e. 5 consecutive bits in some byte
06.02.19 03:45:23<stoopkid> we can do that with xsd:hexBinary, like.. the rdf literal:  "aa55"^^xsd:hexBinary
06.02.19 03:46:02<dmiles> RDF will see that as a litteral yes
06.02.19 03:46:29<dmiles> as in it ownder to legal anywhere but the last argument
06.02.19 03:47:06<dmiles> as in it wont be legal anywhere except for the last arguement at least for the sake of emantic processing
06.02.19 03:47:59<dmiles> as i would liek to be able to do a   toOnesAdZeros("aa55"^^xsd:hexBinary,O).
06.02.19 03:48:36<stoopkid> now if i have a builtin like: <myBinFile> hexBinEquals "aa55"^^xsd:hexBinary, it should actually be checking that <myBinFile> is actually "aa55" as the sequence of two bytes: "aa", "55", and *not* as the sequence of 4 unicode characters "a" , "a", "5", "5" in whatever unicode encoding i'm using to write my RDF document in
06.02.19 03:49:20<stoopkid> i.e. i think the XSD standards would be reasonably interpreted to enforce that
06.02.19 03:49:54<dmiles> yeah things like  "a"^^xsd:hexBinary ==  "A"^^xsd:hexBinary
06.02.19 03:50:20<dmiles> to make sure we know it is case insensitive
06.02.19 03:50:35<dmiles> (in this form)
06.02.19 03:50:38<stoopkid> interesting question here: what do the XSD standards actually say about "a"^^xsd:hexBinary ? is it interpreted as 4 bits or as the byte "a0"^^xsd:hexBinary ?
06.02.19 03:50:56<dmiles> i think so
06.02.19 03:51:02<stoopkid> which one?
06.02.19 03:51:11<dmiles> oh it is 4 bits as a defau;t
06.02.19 03:51:49<dmiles>  ""^^xsd:hexBinary  you;d think is zero bits it might be
06.02.19 03:52:35<dmiles> http://www.datypic.com/sc/xsd/t-xsd_hexBinary.html
06.02.19 03:52:45<dmiles> 	an empty value is valid
06.02.19 03:53:09<dmiles> oh but yeah they have to be multiple of 8
06.02.19 03:53:18<dmiles> 0,8,16,24 bits are fine
06.02.19 03:53:42<dmiles> an odd number of characters is not valid; characters must appear in pairs
06.02.19 03:54:14<stoopkid> nice, good to know
06.02.19 03:54:31<stoopkid> other page i looked at for this seemed somewhat ambiguous
06.02.19 03:54:41<stoopkid> but that's pretty cut and dry
06.02.19 03:56:13<stoopkid> now, that's ok, this isn't necessarily a problem for my quest to fit my odd-bit-length bit-sequences into standards-compliance, in fact there's some reasonable arguments as to why it *should* be piggybacked off of this at a sort of higher level of abstraction
06.02.19 03:57:17<stoopkid> ultimately the machine has some smallest-unit that it can process, for most machines that's gonna be 8 bits
06.02.19 03:57:59<stoopkid> so even if you can represent odd-bit-length bit-sequences, you can ultimately only do it using multiples of 8 bits (or whatever is your smallest-unit), both for storage and for single-step processing
06.02.19 03:59:20<stoopkid> if you can only store the values in terms of multiples of the smallest unit, and only process in terms of the smallest-unit, then ultimately you should be able to do all the processing and representation in terms of the smallest-unit
06.02.19 03:59:23<stoopkid> *but*
06.02.19 03:59:26<dmiles> i think the original need that inspired the xsd:hexBinary was things liek bitmaps
06.02.19 03:59:57<dmiles> needing a non-lossy predicatble form of sending binary data
06.02.19 04:00:09<stoopkid> the bit-level processing should basically be recovered before building further on top of it
06.02.19 04:01:48<dmiles> being abl to have a Seq of boolean xsd:boolean
06.02.19 04:02:59<stoopkid> right, we could do sequence or xsd:anySimpleType of xsd:boolean to represent arbitrary length sequences of boolean values
06.02.19 04:03:45<stoopkid> *but*
06.02.19 04:04:28<dmiles> *but* something about it feels wrong?
06.02.19 04:04:35<stoopkid> it seems that, unless i'm mistaken: xsd:anySimpleType just specifies basically that you're to implement the abstract concept of a list, *somehow*; and xsd:boolean just specifies that you're to implement the abstract concept of a boolean, *somehow*
06.02.19 04:06:38<dmiles> you want to writ eit as  http://www.datypic.com/sc/xsd/e-xsd_sequence.html
06.02.19 04:06:43<stoopkid> right, and what seems wrong, unless i'm mistaken, is that there's room to interpret that "11010101"^^(xsd:anySimpleType of xsd:boolean) doesn't necessarily mean exactly the same thing as "d5"^^xsd:hexBinary
06.02.19 04:07:25<dmiles> <xsd:sequence>....</xsd:sequence> 
06.02.19 04:08:14<dmiles> oh each eleemnt needs to be   "1"^^xsd:boolean
06.02.19 04:08:29<dmiles> like "1"^^xsd:boolean "0"^^xsd:boolean "1"^^xsd:boolean ...
06.02.19 04:09:18<stoopkid> i'm thinking like this: https://www.w3schools.com/xml/el_list.asp
06.02.19 04:09:41<stoopkid> <xs:simpleType name="valuelist">
                 <stoopkid>   <xs:list itemType="xs:boolean"/>
                 <stoopkid> </xs:simpleType>
06.02.19 04:09:55<stoopkid> "11010101"^^valuelist
06.02.19 04:10:01<dmiles> oh that is good you can create that type
06.02.19 04:10:10<stoopkid> indeed
06.02.19 04:13:26<stoopkid> and RDF specs are also completely open-ended about data-types so i could always just define my own data-type IRI here to encode this semantics directly instead of trying to force it into what's already provided in XML specs, but that's just back to i don't want to reinvent what's already provided for in the specs
06.02.19 04:13:34<dmiles> though it smore likely <valuelist>1 0 1 1</valuelist>
06.02.19 04:14:22<stoopkid> true, but this would be in an RDF document
06.02.19 04:14:57<stoopkid> so basically we want to pull that data-type definition into RDF somehow
06.02.19 04:15:05<stoopkid> but then, RDF defines RDF:XMLLiteral
06.02.19 04:15:28<dmiles> in RDFDocument you might even use rdf:Seq or rdf:List
06.02.19 04:16:18<dmiles> ardf:Seq that holds a list of xsd:booloeans
06.02.19 04:16:41<dmiles> oh by yeah you might be able to get away with passing it the XML-liternal to
06.02.19 04:17:25<stoopkid> indeed; the only issue there is still just the same as it is in the XML schema: the rdf:Seq/rdf:List/xsd:anySimpleType and xsd:boolean are maybe too open-ended in how they're interpreting the boolean and the sequencing of them
06.02.19 04:17:39<dmiles> the idea being that a SPARQL INSERT would at least accept it
06.02.19 04:19:17<dmiles> how i look at it is what SPARQL servers are expected to be able to have INSERTed and SELECTed
06.02.19 04:22:57<stoopkid> the question here is really, what is the actual binary encoding of a list of booleans (whether rdf:Seq/rdf:List/xsd:anySimpleType) or whatever
06.02.19 04:23:52<stoopkid> from what i can tell, XML doesn't actually assign any "actual" binary encoding to booleans or lists of them, this is a purely abstract and internal concept to the processor
06.02.19 04:23:56<dmiles> rdf:Seq rdf:_1 "1"^^xsd:boolean.
06.02.19 04:24:04<dmiles> rdf:Seq rdf:_2 "0"^^xsd:boolean.
06.02.19 04:24:12<dmiles> rdf:Seq rdf:_3 "1"^^xsd:boolean.
06.02.19 04:25:01<dmiles> like in https://www.w3.org/TR/sparql11-update/#insert
06.02.19 04:26:32<stoopkid> the question is: what is the *value space* of this sequence and these bools?
06.02.19 04:26:55<stoopkid> what you wrote there is just the syntax and lexical forms, not the semantics / value-space
06.02.19 04:27:04<dmiles> hah.. the arity issue!
06.02.19 04:27:42<dmiles> { GRAPH <myprologdata> { ... }}
06.02.19 04:28:01<dmiles> oops meant to say <myprogramsdata>
06.02.19 04:28:27<dmiles> in order to scope it to some thing
06.02.19 04:29:19<stoopkid> well, not an arity issue, i mean what does this sequence actually represent (in terms of the value space) relative to a flat binary file ?
06.02.19 04:29:26<dmiles> that the thing <myprogramsdata> itself ends up needing to be a graph
06.02.19 04:30:03<dmiles> for this your value space is needing to be constrectualsed to its own Graph/page
06.02.19 04:30:11<dmiles> oopsy
06.02.19 04:30:23<dmiles> <myprogramsdata> rdf:_1 "1"^^xsd:boolean.
06.02.19 04:30:30<dmiles> <myprogramsdata> rdf:_2 "0"^^xsd:boolean.
06.02.19 04:30:51<dmiles> but we might do it like..
06.02.19 04:31:06<dmiles> <myprograms_bindata> rdf:_1 "1"^^xsd:boolean.
06.02.19 04:31:25<dmiles> <myprogramsdata> hasBindata <myprograms_bindata>
06.02.19 04:31:45<dmiles> <myprograms_bindata> a rdf:Seq
06.02.19 04:31:48<stoopkid> indeed
06.02.19 04:32:44<stoopkid> so <myprogramsdata> could be mapped to a xsd:hexBinary literal value, or to a referent to a file resource locator
06.02.19 04:32:47<dmiles> the litmus test becomes how well it is confy for SELECT
06.02.19 04:33:38<dmiles> as in assruing you can query it out.. which you can
06.02.19 04:34:46<dmiles> you can set up some rules that agregate things into the sematic meanings
06.02.19 04:35:08<stoopkid> well, if the representation can fit into the specs, then even if the representation or operations over it are clunky, i would at that point attempt to actually push for the specs themselves to be adjusted to make the representation or operations more convenient, and only break from standards/specs or make my own alternative specs if there are obstacles to getting them to change to accommodate the required conveniences
06.02.19 04:37:06<dmiles> "SELECT ?thingActionID ?verbID ?tgtThingID ?tgtThingTypeID
                 <dmiles> WHERE { GRAPH ?qGraph { 
                 <dmiles> ?thingActionID a ccrt:ThingAction; 
                 <dmiles>    ta:verb ?verbID ; 
                 <dmiles>    ta:targetThing ?tgtThingID .
06.02.19 04:37:07<dmiles> OPTIONAL { ?tgtThingID rdf:type  ?tgtThingTypeID. }
06.02.19 04:37:08<dmiles> }}"
06.02.19 04:37:42<dmiles> that was a query i used to populate what java objects would be created in an application
06.02.19 04:38:15<stoopkid> let's look at: "<myprogramsdata> hasBindata <myprograms_bindata>"
06.02.19 04:38:29<stoopkid> note how we made up a "hasBinData" for this
06.02.19 04:39:06<stoopkid> the rest works and is within minimal RDF+RDFS+XML+XMLS standards
06.02.19 04:39:50<dmiles> ideally whenver i made up hasBinData i first scour the internet to see if someone already made up the predicate for me
06.02.19 04:40:50<stoopkid> well, that's the q here: have they? it's slightly more complicated than just doing the same for xsd:hexBinary
06.02.19 04:40:55<aindilis> https://tinyurl.com/ycjjuzyu
06.02.19 04:41:20<aindilis> did that pdf work for you?
06.02.19 04:41:48<dmiles> yep
06.02.19 04:42:00<aindilis> cool, thought it might be relevant
06.02.19 04:42:06<aindilis> not to this particular convo though
06.02.19 04:42:25<aindilis> https://www.amazon.com/Formal-Theory-Commonsense-Psychology-People/dp/1107151007
06.02.19 04:42:34<aindilis> 1400 axioms of psychology
06.02.19 04:42:46<dmiles> http://www.daml.org/ontologies/property.html
06.02.19 04:42:58<dmiles> is one place i start
06.02.19 04:45:37<stoopkid> hrm.. probably want to avoid bringing all that in if possible; this is basically just a character-encoding thing i want to deal with before even really "using" RDF or adding further layers on top of it
06.02.19 04:45:41<dmiles> oh funny aindilis i have you and stoopkid the same text color
06.02.19 04:45:55<aindilis> lol
06.02.19 04:46:40<dmiles> well my hope is find a predicate that someone else had created exactly for my use case
06.02.19 04:47:29<dmiles> At least even if they haven't publicized their solution.. I don't have to invent a semantic as well as a solution
06.02.19 04:47:54<dmiles> I mean they published their semantics and it lines up well enough
06.02.19 04:48:49<stoopkid> same, though i basically just want these couple specific predicates, so i basically want to try to avoid pulling predicates from any standards unless i'm implementing the whole standard, as otherwise i would probably want to create a separate dedicated "standard" for this limited functionality
06.02.19 04:49:02<dmiles> For example I'd actually look for people who have used hex binary and converting it back and forth between representations
06.02.19 04:49:32<dmiles> Yeah true even sometimes we find a solution you don't know if it's really going to be the same and you end up being safe just doing your own
06.02.19 04:49:55<dmiles> But then trying to create some assertions that will show that it's rdf:Re;ated
06.02.19 04:53:03<dmiles> For example I might find a predicate that relates a fs:File  to the contents it would be found in hexBbinary
06.02.19 04:54:34<dmiles> here was someone that relates music files to hexbinary  https://www.apt-browse.org/browse/debian/jessie/main/amd64/lv2-dev/1.10.0~dfsg1-1/file/usr/lib/lv2/midi.lv2/midi.ttl
06.02.19 04:55:23<dmiles> midi:MidiEvent
                 <dmiles> 	a rdfs:Class ,
                 <dmiles> 		rdfs:Datatype ;
                 <dmiles> 	rdfs:label "MIDI Message" ;
                 <dmiles> 	rdfs:subClassOf ev:Event ,
                 <dmiles> 		atom:Atom ;
                 <dmiles> 	owl:onDatatype xsd:hexBinary ;
06.02.19 04:55:24<dmiles> 	lv2:documentation """
06.02.19 04:58:46<dmiles> midi:chunk
06.02.19 04:58:47<dmiles> 	a rdf:Property ;
                 <dmiles> 	rdfs:range xsd:byte ,
                 <dmiles> 		xsd:hexBinary ;
                 <dmiles> 	rdfs:comment "A chunk of a MIDI message." .
06.02.19 04:58:50<dmiles> oops
06.02.19 04:59:10<dmiles> that is a good exmaple here they "bouble ranged it"
06.02.19 04:59:22<dmiles> double ranged
06.02.19 04:59:37<dmiles>  xsd:byte  and  xsd:hexBinary   
06.02.19 05:00:01<dmiles> eventualyl make a new type called  midi:HexByte ;
06.02.19 05:05:04<dmiles> hereis the spec on casting 
06.02.19 05:05:05<dmiles> https://www.w3.org/TR/xquery-operators/#casting-to-binary
06.02.19 05:08:07<stoopkid> hrm, not sure that's quite what we want
06.02.19 05:08:28<dmiles> xs:string <-> xs:untypedAtomic <-> xs:hexBinary
06.02.19 05:09:09<stoopkid> well the problem would be, how do xs:strings map to xs:hexBinaries
06.02.19 05:09:23<aindilis> dmiles: see pm
06.02.19 05:10:35<stoopkid> presumably "a5"^^xs:string <-> "a5"^^xs:hexBinary, but then consider we want our strings to represent bit-strings, i.e. "1010"^^xs:string <-> "1010"^^xs:hexBinary instead of "a0"^^xs:hexBinary
06.02.19 05:12:32<dmiles> what bothered me was that even thought you are allowed in XSD to invent types.. in RDF you are not alllowed to use invented XSD types
06.02.19 05:12:33<stoopkid> and then there's a further question of how do we reinterpret "a0"^^xs:hexBinary as "1010"^^xs:string (representing bit-vector) as opposed to "10100000"^^xs:string
06.02.19 05:12:52<stoopkid> hrm, not sure about that
06.02.19 05:13:50<dmiles> well you cant expect CWIM or Jena or Virtuoso to have code support for new types
06.02.19 05:14:06<dmiles> just new Semantic types
06.02.19 05:14:27<stoopkid> i think RDF's stance on XSD types you can use for literals is: there are some you must implement if you allow those names; there are some that you *shouldn't* use; and there are some where it seems left open to implementation
06.02.19 05:14:57<dmiles> well you cant make data type restructions on under defined types
06.02.19 05:15:20<dmiles> for exmaple .. that midi:HexType 
06.02.19 05:16:16<dmiles> was "ok" .. it was a superclass of xsd:byte and xsd:hexBinary  *both* .. tha tis fine
06.02.19 05:17:13<dmiles> but if you superclassed   xsd:string and xsd:hexBinary  you are out of luck
06.02.19 05:17:27<dmiles> (which makes sense anyways!)
06.02.19 05:18:12<dmiles> xsd encoragled you to create as you saw  <xs:simpleType name="valuelist">
06.02.19 05:18:18<dmiles>   <xs:list itemType="xs:boolean"/>
06.02.19 05:18:20<dmiles> etc
06.02.19 05:19:26<dmiles> In this case the simple type "valuelist"  seemed useful for like your use case
06.02.19 05:19:49<dmiles> I'm just saying that ecstasy is a language about creating structured data
06.02.19 05:19:58<stoopkid> i'm thinking that (under a possibly liberal interpretation) there's nothing in RDF specs prohibiting you from using XSD types like your list of booleans there as the data-type for a literal value
06.02.19 05:20:02<dmiles> Where is RDF is a language that doesn't try to cover that
06.02.19 05:20:32<dmiles> Right the only prohibition is that the RDF language itself does not document how excess D is supposed to be extended
06.02.19 05:21:26<dmiles> So what they did was "hey you know it's day one right now.. so let's make sure that everyone at least has the XSD types "
06.02.19 05:22:09<dmiles> Ideally user XSD types would one day be part
06.02.19 05:22:49<stoopkid> i was thinking the same; RDF lays out what a datatype "is" (lexical forms, value space, and lexical-value mapping), and says that you can use any of these, but doesn't actually provide a built-in way to actually define one in RDF
06.02.19 05:23:41<dmiles> But there's one vignette provides lots of built-in ways to define RDF Classes
06.02.19 05:23:52<dmiles> But yet provides lots of built-in ways to define RDF Classes
06.02.19 05:25:15<dmiles> But not yet a way to mix XSD (which are almost like "implementation level" details) with RDF classes
06.02.19 05:26:05<dmiles> they actually make a distinction "these are literals" versus "these are RDF" things
06.02.19 05:26:56<dmiles> for example an RDF tripple may not start with a XSD type
06.02.19 05:28:07<stoopkid> you mean you can't use the IRI for an XSD data-type (that has a http://www.w3.org/2001/XMLSchema#xxx URL) in subject position in an RDF triple ?
06.02.19 05:28:53<stoopkid> or you mean you can't use an XSD typed RDF literal in subject position ?
06.02.19 05:29:00<dmiles> you cant say:    "dmiles"^^xsd:string a foaf:Person. 
06.02.19 05:29:42<stoopkid> sure, you can't use literals in subject position, i'm not sure we need to for this purpose though
06.02.19 05:30:23<dmiles> had you been able to define new XSD types .. you would be allowed to
06.02.19 05:30:44<stoopkid> i think these are maybe independent concerns
06.02.19 05:32:09<dmiles> implementation concerns.  if someone was to allow it.. that other people will have valid concerns to reject it
06.02.19 05:32:30<dmiles> For example imagine someone defined "i am a uri"^^
06.02.19 05:32:46<dmiles> In fact at work we did exactly that we defined in XML data type that was going to represent RDF metadata
06.02.19 05:33:18<dmiles> Especially for graphical data on the robot
06.02.19 05:33:51<dmiles> So finally we just gave up and used XSD "Plain Literals" 
06.02.19 05:34:00<dmiles> Instead of XSD Strings
06.02.19 05:34:10<dmiles> Which have two different expectations
06.02.19 05:34:44<stoopkid> i think RDF allows for defining new XSD types to use for literals; there are some RDF or RDFS builtins for indicating that an IRI points to a document I think ?
06.02.19 05:35:15<dmiles> But what the real objective was was to be a stuff XML as long as it was semantically well thought out
06.02.19 05:35:33<dmiles> At that point this is why most people have switched over to JSON-LD (Linked Data)
06.02.19 05:36:07<dmiles> Right yeah the original bootstrap RDFS start out with XSD type :P 
06.02.19 05:36:14<dmiles> But that was only published for completeness
06.02.19 05:36:29<dmiles> In order to be able to not get rejected by XML parsers
06.02.19 05:36:58<stoopkid> https://www.w3.org/TR/2014/REC-rdf-schema-20140225/#ch_isdefinedby
06.02.19 05:37:02<dmiles> Because people at the time were very used to validating any sort of data
06.02.19 05:43:57<dmiles> oh yeah genrally toy do point you Litterals to ahome document yes
06.02.19 05:45:01<dmiles> oh yeah genrally you do point you Litterals to a home document yes ..  to avoid even allowing it to choose to resolve it to the local document
06.02.19 05:45:18<stoopkid> well, the data-type IRIs for the literals, not the literals themselves
06.02.19 05:47:16<stoopkid> so the question would be, can rdfs:isdefinedby point to the valuelist object in the XML file in example 1 here? https://www.w3schools.com/xml/el_list.asp
06.02.19 05:47:51<dmiles> tht would have been a good idea
06.02.19 05:48:24<dmiles> but it didnt work out
06.02.19 05:48:39<dmiles> onl worked out to point it to a doc that had the values list
06.02.19 05:49:05<stoopkid> so you can't point to an object in an XML document, you can only point to that document ?
06.02.19 05:49:39<dmiles> oh you point it to a value
06.02.19 05:49:45<dmiles> (in the document)
06.02.19 05:50:00<dmiles> you jsut can use a valuelist where we would put a doculink
06.02.19 05:50:14<dmiles> which was what i wanted to do
06.02.19 05:51:37<dmiles> to give an actual exakmple:    robot:zeno act:say ("hi there" gesture:Wave "friends")
06.02.19 05:52:15<dmiles> well oops that would work since it a rdf:List
06.02.19 05:54:10<dmiles> but i wanted like..    robot:zeno act:say "<act>hi there <gesure:wave> freinds</act>"^^xsd:XML
06.02.19 05:55:07<dmiles> to be able to put something other than what XSD defined in 2001
06.02.19 05:55:31<dmiles> the way you do in JSON-LinkedData
06.02.19 05:56:47<dmiles> which is { robot:zeno act:say { act: {list: {"hi there"} {<gesure:wave>} {"freinds" }}}
06.02.19 06:01:50<stoopkid> is the <document-URL>#<element-id> URL syntax/semantics standardized?
06.02.19 06:06:51<stoopkid> i know it is in HTML5 but i'm not sure about regular XML
06.02.19 06:16:51<stoopkid> https://www.w3.org/TR/swbp-xsch-datatypes/#sec-id-attr
06.02.19 06:23:10<stoopkid> so i think it's valid RDF to say at least:
06.02.19 06:23:19<stoopkid> <mydatatypeIRIcontainer> rdfs:isdefinedby "myXMLdata"^^rdf:XMLLiteral
06.02.19 06:24:07<stoopkid> <mydatatypeIRI> rdfs:isdefinedby <mydatatypeIRIcontainer#mydatatype-elementID>
06.02.19 06:27:37<stoopkid> and then define literal values using <mydatatypeIRI>, and it would be valid according to the specs for your RDF processor to actually interpret literal values using that data-type IRI according to an XSD data-type definition found at id "mydatatype-elementID" in the XML document represented by "myXMLdata"^^rdf:XMLLiteral
06.02.19 06:27:50<stoopkid> correct me if i'm wrong there
06.02.19 06:29:16*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
06.02.19 06:29:22<dmiles> cyc: (+ 1 1)
06.02.19 06:35:38<stoopkid> if there's a standard interpretation for representing XML documents (or ideally optionally just their objects) directly as RDF (in the abstract semantics of both) then we could incorporate XSD built-ins without having to actually have real XML or make use of rdf:XMLLiterals etc.. i.e. i could just represent the XSD data-type definitions as RDF graphs and use those
06.02.19 06:43:02<stoopkid> there's RDF/XML but that's the opposite heh
06.02.19 06:50:07<stoopkid> so, unless i'm wrong above we can make an RDF+XML+XSD-specs compliant RDF processor that lets you define literals with (nearly) arbitrary XSD types (all except the couple that are explicitly forbidden/discouraged by RDF specs or derived from them, which does not include things like the xsd:simpleType of xsd:booleans)
06.02.19 06:52:50<stoopkid> so the only critical question wrt functionality left w/ that is whether XSD can actually define the proper binary type(s)
06.02.19 06:54:35<stoopkid> note also that XML itself has a fairly complicated and possibly open-ended notion of character data and character encodings
06.02.19 07:00:15<stoopkid> so one way to approach this might be to see if user-defined XML character encodings are open-ended enough that you can define an completely arbitrary character set as your "alphabet" while still relying on some minimal XML character encoding semantics to ensure that it's always referring to flat binary data
06.02.19 07:06:11<stoopkid> ah hrm, i think this issue is maybe a bit deeper than i originally though; i don't think you can really make a completely arbitrary character encoding; characters need to be self-delimiting
06.02.19 07:09:30<stoopkid> i guess you can hypothetically have an ambiguous parse but typically we don't see this in things called "character encodings"
06.02.19 07:16:49<stoopkid> consider ex. the binary-encoded char-set to be "1", "11", "111" and the binary data to be "111". does this data parse as the characters (1,1,1) (1,11) (11,1) or (111) ?
06.02.19 07:17:51*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
06.02.19 07:17:56<dmiles> cyc: (+ 1 1)
06.02.19 07:19:13*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 252 seconds
06.02.19 10:38:32*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
06.02.19 15:43:06*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
06.02.19 15:43:11<dmiles> cyc: (+ 1 1)
06.02.19 16:10:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kakdumrdqqalawyz) left #logicmoo: Quit: Connection closed for inactivity
06.02.19 16:54:59*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
06.02.19 16:56:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cdfsrsihbdiooenv, stoopkid: stoopkid)
06.02.19 16:56:34<dmiles> cyc: (+ 1 1)
06.02.19 20:32:37*** Join: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net, (unauthenticated): Anderlok)
                 *** Part: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net) left #logicmoo: [No reason given]
06.02.19 20:32:43<dmiles> cyc: (+ 1 1)
06.02.19 20:38:33<dmiles> stoopkid: so didn't work out are you able to find a way of comfortably representing what you wanted to represent in RDF?
06.02.19 20:39:49<dmiles> when i looked @  https://www.w3.org/TR/swbp-xsch-datatypes/#sec-id-attr  according to that it says that I should be able to do what I wanted to be for and you should feel to probably do what you want now I think
06.02.19 20:41:20<dmiles> _:aMember eg:membersAge "24"^^egdt:adultAge .
06.02.19 20:41:27<dmiles> That was exactly what I wanted to do
06.02.19 20:42:25<dmiles> Well at least the beginning of what I exactly wanted to do..  The next part would be defining a list within simple types
06.02.19 21:30:08*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
06.02.19 21:34:43*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
06.02.19 21:34:49<dmiles> cyc: (+ 1 1)
06.02.19 22:08:35*** Join: Tixiks (~Tixiks@103.25.59.94, (unauthenticated): Tixiks)
06.02.19 22:08:36*** Part: Tixiks (~Tixiks@103.25.59.94) left #logicmoo: [No reason given]
06.02.19 22:39:27*** Join: Imphuh (~Imphuh@103.25.59.94, (unauthenticated): Imphuh)
06.02.19 22:39:29*** Part: Imphuh (~Imphuh@103.25.59.94) left #logicmoo: [No reason given]
07.02.19 00:15:54*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
07.02.19 00:18:30*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
07.02.19 00:30:40<aindilis> hey
07.02.19 00:41:49<aindilis> dmiles: ping
07.02.19 00:50:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cdfsrsihbdiooenv) left #logicmoo: Quit: Connection closed for inactivity
07.02.19 03:12:54*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
07.02.19 04:06:05<aindilis> dmiles: ping
07.02.19 04:14:56*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
07.02.19 04:43:53*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
07.02.19 05:13:10*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
07.02.19 05:16:32*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
07.02.19 06:44:24<aindilis> dmiles: I have an idea for an ontology learning tool
07.02.19 06:46:13<aindilis> iterate over lexicalized concepts in RCyc, get their english glosses, then find relations such as isa genls, etc that link the concept to other concepts.  Then do a ?web? search for documents containing the two terms, and try to find them close together, and extract the textual patterns, maybe using a different system for relation extraction.  With these extraction templates, extract new knowledge for the KB, and manually 
07.02.19 06:50:40*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
07.02.19 07:39:10*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fltwwyqwoxcpgawp, stoopkid: stoopkid)
07.02.19 08:39:38*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
07.02.19 09:48:53*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
07.02.19 10:11:17*** Connecting...
07.02.19 10:11:41*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 8 months 14 days 14 hours 39 minutes 51 seconds ago
                 *** Names: ditable-doge T_K stoopkid aindilis PrologMUD yesbot dmiles jbalint swamps michalisko @ChanServ
                 *** End of /NAMES list.
07.02.19 10:12:26*** Nick change: You are now known as editable-dog
07.02.19 10:42:59*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
07.02.19 11:25:22*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
07.02.19 14:10:56<stoopkid> dmiles: not yet
07.02.19 14:11:27<stoopkid> i realized an issue w/ using rdfs:isdefinedby and pointing it at a section of XML data
07.02.19 14:12:12<stoopkid> the issue is that when RDF uses XML data-types, it's deriving the lexical forms from XML
07.02.19 14:15:12<stoopkid> so if i pointed to this list data-type here (with name 'valuelist', and let's assume it's actually the id attribute): https://www.w3schools.com/xml/el_list.asp , my literal would have to be like "100 34 56 -23 1567"^^<valuelist>
07.02.19 14:16:04<stoopkid> (worse if XML actually says the tags on the list are actually part of the lexical form; not sure about this yet)
07.02.19 14:16:40<stoopkid> (i'm thinking they're not but i still have to find specs to back me up on that)
07.02.19 14:18:03<stoopkid> so i could do a boolean list, "1 0 1 1 0 0 0 1"^^<my_boolean_list_type>, which is really close but not quite there, the ideal would ofc be if i can write "10110001"^^<my_boolean_list_type>
07.02.19 14:18:43<stoopkid> if XML allows me to add a new lexical form for lists, then that would probably be able to solve the issue
07.02.19 14:19:23<stoopkid> in this case we just want elements to be appended together by pure concatenation, since each element is self-delimiting
07.02.19 14:23:35<stoopkid> i could use xsd:string as the base-type and restrict it via xsd:pattern so that it only accepts 0s and 1s; i can then write it the way i want but it still leaves open the question making sure the string is properly interpreted as binary
07.02.19 14:24:15<stoopkid> see ex. the example at the bottom here: https://www.w3schools.com/XML/schema_example.asp
07.02.19 14:26:47<stoopkid> and in either case i can't quite find anything in XML that has exactly the semantics i'm looking for, which is essentially: "a list of bools, but which must exist as consecutive physical bits in some flat binary data"
07.02.19 14:31:09*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
07.02.19 14:32:35<stoopkid> there are reasonable arguments to be made as to why this actually maybe shouldn't be what i'm looking for in the first place though: the machine can only read and process multiples of its smallest-unit; the raw bit data can't even be stored directly as itself (how do you know how many bits a given byte actually uses without more metadata to describe the restriction of that byte to a subset of its bits?); etc..
07.02.19 14:33:26<stoopkid> which seems to suggest that any bit-level processing should actually be an abstraction layer *above* any byte-level processing, rather than "alongside" it
07.02.19 14:40:04<stoopkid> so, i'm not necessarily committed to making XML provide that "exactly proper" interpretation, but having a specs-compliant way to at least interpret "10110001"^^<my_boolean_list_type> as a list of bools as intended, which seems ultimately just amounts to making a new lexical form for boolean lists
07.02.19 16:53:35*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
07.02.19 17:00:42*** Nick change: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) is now known as Elon_Satoshi
07.02.19 19:06:16<dmiles> lots of interesting stuff to respond to! when i am back in 5-6 hours i will
07.02.19 21:24:36*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
07.02.19 21:29:50*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
07.02.19 22:20:13<aindilis> dmiles: ping
07.02.19 23:18:05*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fltwwyqwoxcpgawp) left #logicmoo: Quit: Connection closed for inactivity
08.02.19 01:10:18<aindilis> dmiles: ping
08.02.19 03:52:13<aindilis> dmiles: ping
08.02.19 06:52:26<aindilis> dmiles: ping
08.02.19 09:27:25*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
08.02.19 17:41:40*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
08.02.19 17:45:03*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 245 seconds
08.02.19 18:45:58*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
09.02.19 03:33:32<aindilis> logicmoo: ping
09.02.19 05:57:09<aindilis> does one use instantiation mode indicators in actual Prolog code?
09.02.19 05:57:44<aindilis> I'm looking to build IAEC, and I find true/false to be a little uninformative for memoization, I'd rather be a function not a relation
09.02.19 05:58:05<aindilis> and I'm interested in either autodetect instantiation modes or annotating them manually
09.02.19 06:04:13*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
09.02.19 06:48:50*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
09.02.19 08:57:42<aindilis> hey
09.02.19 15:54:17<logicmoo> finallyu aindilis: pong
09.02.19 15:55:19<logicmoo> i been having to go out and do no5rmal stuff all day for a few days .. hwoch has been wiping out my energy
09.02.19 15:55:43*** Nick change: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
09.02.19 16:21:01<aindilis> ah no worries
09.02.19 16:21:23<aindilis> okay well I'm low energy too, we can catch up later
09.02.19 16:21:25<aindilis> hope you are well
09.02.19 16:28:09<dmiles> well today i am going to do some work
09.02.19 16:28:18<aindilis> cool
09.02.19 16:28:32<dmiles> i am gioing to rework at making CYC store its KB completely in Prolog
09.02.19 16:28:39<aindilis> wow sweet
09.02.19 16:28:57<aindilis> what about indicies?
09.02.19 16:29:56<dmiles> one good thing is the indices seem ot be store in java hashmaps (not in the cosntants themselveS)
09.02.19 16:30:24<aindilis> cool
09.02.19 16:30:27<dmiles> which means that as long as prolog tracks the assertion numbers with each assertion it will be ok
09.02.19 16:30:34<aindilis> wow sweet
09.02.19 16:31:04<dmiles> though some minor things that may or may not be annoying is that string need to be stored as '"i am a string"'
09.02.19 16:31:49<aindilis> it's not that bad
09.02.19 16:32:00<dmiles> at least they will be totalytl indexed
09.02.19 16:32:20<dmiles> that is they will be super fast
09.02.19 16:32:29<dmiles> later on i will tryting to convert that to s(i,am,a,string)
09.02.19 16:32:33<aindilis> k
09.02.19 16:33:01<aindilis> sorry I'm not more talkative, middle of the night for me
09.02.19 16:33:40<dmiles> if sseehh starts showing up more i will probly still merge the CafePRoog into JRTL
09.02.19 16:33:59<aindilis> yeah fyi I wasn't able to follow most of your discussions with him
                 <dmiles> i sorta plan on keeping both options open
09.02.19 16:34:17<aindilis> both in terms of haven't read them and the parts that I did read I didn't understand
09.02.19 16:34:19<dmiles> that is i plan on making both interfaces work
09.02.19 16:34:46<dmiles> i noticed that sseehh is using 8gb computer
09.02.19 16:35:20<dmiles> i remember a few years ago i was tryung to attack the JRTL witht hat much ram
09.02.19 16:35:25<dmiles> its is a nonstarter
09.02.19 16:36:13<aindilis> any idea why he's using that much?  I don't think making LarKC_CL respect low ram conditions is a good idea
                 <dmiles> CYC uses that much to sit and do nothing
09.02.19 16:36:29<aindilis> is he on a laptop?
09.02.19 16:36:55<dmiles> yeah i dont think so either .. ther eis one thing i might at least do .. is make the inital fixnum cache not cat 2^25 ints
09.02.19 16:37:17<dmiles> i think it is the philosophy that a smaller rambus makes a easier to overclock CPU
09.02.19 16:37:46<dmiles> like i immagine with 4 slots he'd have 2gb slicks
09.02.19 16:38:10<dmiles> even if his machine supported 8gb slots
09.02.19 16:38:19<dmiles> sticks
09.02.19 16:38:23<aindilis> hrm overclocking is not something that I am personally into, I tried to maximize compute power once before, but now I'm trying to maximize software and reasonably maximize performance through COTS
09.02.19 16:38:47<aindilis> it's diminishing returns
09.02.19 16:38:58<dmiles> yeah
09.02.19 16:39:11<aindilis> will the fixnum autoamtically increase as needed?
09.02.19 16:39:24<dmiles> yep
09.02.19 16:39:34<aindilis> great
09.02.19 16:39:41<dmiles> by only cahcing 2^13 at least it will take 2/3 the ram at start
09.02.19 16:39:47<aindilis> cool
09.02.19 16:40:22<dmiles> i notice that CYC has 59million assertions at start
09.02.19 16:40:29<aindilis> yeah
09.02.19 16:40:35<dmiles> it is due to the deductions
09.02.19 16:42:21<dmiles> ok.. well i thinki i have some work curt out for me .. the storaage in prolog
09.02.19 16:42:34<dmiles> my goal is to curt the sortrage out in JAva as well
09.02.19 16:42:41<dmiles> cut*
09.02.19 16:42:46<aindilis> k
09.02.19 16:43:00<aindilis> wait from the generated java code?
09.02.19 16:43:05<aindilis> is that going to be like reversing?
09.02.19 16:43:19<dmiles> nope that genrate java code is a real red hearing that confused sseehh
09.02.19 16:43:27<dmiles> herring
09.02.19 16:43:52<dmiles> when him and xjrn see that they think it is a part of the KB!
09.02.19 16:44:12<dmiles> what they dont notice is that code is actualyl the CYC APPs that have been developed over the years
09.02.19 16:44:58<dmiles> i learned how to build CCY jar cutting out some of those APPs but it is a huge PITA
09.02.19 16:45:12<dmiles> so i dont 
09.02.19 16:46:14<dmiles> what i mean by cutting out the JAva is that teose structs are purely stored ass assert/retract
09.02.19 16:46:48<dmiles> oh wow i am glad you asked me tht
09.02.19 16:47:07<dmiles> since i realize now i dont need to wait "until" ready on a strcut
09.02.19 16:47:31<dmiles> i literally will makes each field its own assertion
09.02.19 16:48:25<dmiles> instead of whaiting untuil ecvh filed is populated
                 *** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
09.02.19 16:48:51*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
09.02.19 16:48:58<dmiles> i have too much annoying logic arround testing when all feilds get poputlated
09.02.19 16:50:04<dmiles> anyways why we want these assertions maintained in prolog is that CYC will never have to call prolog 
09.02.19 16:50:20<dmiles> since it is allready all prolog
09.02.19 16:50:37<aindilis> yeah
09.02.19 16:50:45<dmiles> though it is going to slow CYC down coseiderably
09.02.19 16:51:16<dmiles> but all the things it does at that level are very trivial
09.02.19 16:51:34<dmiles> we'll jjust have to see if i have to leave the Java arround to
09.02.19 16:51:45<dmiles> the only reason not to is for savign RAM
09.02.19 16:51:48<aindilis> so like will it affect the number of calls I can make to CYC per sec?  like I was getting ~10,000 per (#$isa ?X #$Dog)
09.02.19 16:52:41<dmiles> at first yes
09.02.19 16:53:06<dmiles> we/you will want to actualyl create a new predicate that forwards that query to a new pred
09.02.19 16:53:23<dmiles> i mean create a forward rule
09.02.19 16:54:13<dmiles> (implies (#$isa ?X #$Dog) (myQuery1Foir-Isa-Dog ?X))
09.02.19 16:55:04<dmiles> and then in prolog we look at    myQuery1Foir-Isa-Dog(X)
09.02.19 16:55:22<aindilis> k
09.02.19 16:55:34<dmiles> of course this would be totally nutso way to expect this from ourselves
09.02.19 16:55:59<dmiles> but it might be automatable :P
09.02.19 16:56:14<dmiles> is very automatable
09.02.19 16:56:19<aindilis> okay
09.02.19 16:57:48<dmiles> i am creating a googledoc that talks abotu what our plans shall be with LARKC_CL
09.02.19 16:58:07<aindilis> cool
09.02.19 17:03:06<dmiles> https://docs.google.com/document/d/1Uk7-OKEqnrDIpYbNrMDXrIPzEkX01M6BUclVPwWcJps/edit
09.02.19 17:08:19<aindilis> I have to go back to bed for a bit ttys
09.02.19 17:08:27<dmiles> ttys
09.02.19 17:33:53*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
09.02.19 17:46:35*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
09.02.19 18:17:06<dmiles>  LarKC_CL - this project  to allow  same superpowers that  Cycorp. has:   To advert the tragedy where software is written when you could have instead taught a ever growing software agent how to meet the same needs and better!
09.02.19 18:19:22<dmiles> Whenever Cycorp was assigned a project they, in CycL (CYCs  internal representation language) the entire statement of work including the entire reason why such an application would be written would be placed in KB.    Also documenting things in which the program is good for doing (and not)  as well as future plans to improve it.    
09.02.19 18:19:23<dmiles> Also described is what a single use of the program might look like as far as setup configuration  and workflow that is expected to happen.    Example: if the program's job was to help the student figure out what colleges to apply for  and needed to gather information about the students interests.    The workflow is 1) acquire the students name  (so we can  have an identity for them in the 
09.02.19 18:19:24<dmiles> KB)    2) gathering their interests  3) match them up against the colleges that we are aware of.   4) deliver that information back to the student in an appealing way.
09.02.19 18:19:25<dmiles> From CycL,  while the program is running/operating the entire state of the four step process is tracked  in the CycL language.   Whenever there was a bug they could look at the KB  and see where things might have gone wrong.
09.02.19 18:19:26<dmiles> They craft the data needed in order to make  each step  possible:  such as, at step 3,  we  utilize a list the universities/ trade schools and their  educational programs.   They explain to CYC  that this data is dynamic and people's interests in #2  are dynamic.   we explain to that  there is a process in which these things will need to be updated.
09.02.19 18:19:27<dmiles> Soon the  application is working.   the application is now  usable  by a software agent.  because a software agent knows what the program is for,  can see the type of requirements  and able to use the program.   Program can be summarized as  MatchingPeopleWithThings-ByInterest.    as it requires first  the ability to  enumerate and gather interests 
09.02.19 18:19:28<dmiles> sure they  probably did have to write a little bit SubL (Cycorp;s) code..   for example  they may have needed a dialog box that would allow the student to drill down and find the list of interests under some categorical tree.   
09.02.19 18:19:29<dmiles> ..etc.. etc .. fule example done elsewhere.. 
                 <dmiles> SUPERPOWER: 
09.02.19 18:19:30<dmiles>  In essence Cycorp does not  merely write an application, they  teach a software agent how meet some needs in which tragically would have had to become its own piece of one-off non-reusable software!    
09.02.19 18:19:31<dmiles> If you are a user of OpenCYC/RCYC this is what you would do:
09.02.19 18:19:32<dmiles> Write an application their chosen programming language and all of logic of their program happened in their programs code  and they would connect to CYC over a socket.   Cyc becomes merely a SQL Server  with smarter JOINs.   the possibility to have their program  for use by a software agent  will need for them to write an ecosystem that allows the  agent to load  their program.   also the will 
09.02.19 18:19:33<dmiles> need to document someplace the four steps in which their program  is doing?   how will that agent figure out what this program does  and why even use it?    where is the information about  Future improvements (  such as the ability to allow universities to add/change programs  year-to-year ) going to be kept?    this is all things CYC is really good at tracking  and making sure requirements 
09.02.19 18:19:34<dmiles> are met.    these things are kept in CycL KB.  
09.02.19 18:20:00<dmiles> this expeains the failure of OpenCYC and RCYC i hope
09.02.19 18:20:12<dmiles> explains
09.02.19 18:21:58<dmiles> why after a decade of the first paradymn .. i would never been able to use OpenCYC or ResearchCYC
09.02.19 18:27:44<dmiles> Probably will need to provide a full example of how we used to do it
09.02.19 18:28:11<dmiles> Me just so other people can start doing as well
09.02.19 18:29:10*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
09.02.19 18:29:26*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
09.02.19 19:34:18<dmiles> SubL Accessible -  program can be operated at all programmatically 
09.02.19 19:34:19<dmiles> CycL Accessible  - those program operations can be made to happen via CYCL-QUERY/ASSERT
                 <dmiles>    (Cyc has assertions that define operation of program)
                 <dmiles> CycL Config -  The program's initial task config is stored in CYC
                 <dmiles> CycL Data -  The program's shared data/rules is stored in CYC 
                 <dmiles> CycL State -  The program's operations are doable inch-by-inch from CycL 
09.02.19 19:35:12<dmiles> Okay I can do me a favor and in my count I had some keys can you check the mail bring it when you found my phone the keys were in that coat
09.02.19 19:36:05<dmiles> oops
09.02.19 19:46:06<dmiles> CycL State -  The program's operations are doable/visible inch-by-inch from CycL 
                 <dmiles>                                 (program effectively paused when CYC is not inching it along)
                 <dmiles> Still Works - Program is operationally available thru previous means (though it requires CYC now)
09.02.19 19:47:41<dmiles> my assumption that is the goal with 3T 
09.02.19 19:49:13<dmiles> Though in the case of 3T we skipped CycL State level of porting
09.02.19 19:49:21<dmiles> skipping*
09.02.19 19:50:30<dmiles> for DAYDREAMER, PrologMUD, E2C  CycL State is desired
09.02.19 21:19:46<aindilis> I'm sorry I haven't written Prolog wrappers for cl_eval and stuff.  BTW, document looks great (skimmed it)!
09.02.19 21:56:49<dmiles> that t he thing i put 90% .. though maybe 50.. since only you and I know the secretes
09.02.19 21:58:07<dmiles> thanks .. took me liek 2 hours to write something that simpl
09.02.19 22:00:12<dmiles> I realized that i not ever explained (or seen it ever explained) the ideal of "porting an application to run in CYC"
10.02.19 02:20:57*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
10.02.19 07:14:07*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
10.02.19 14:31:33*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
10.02.19 17:45:35*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
10.02.19 19:31:38<aindilis> dmiles: ping
10.02.19 23:34:20<aindilis> dmiles: ping
10.02.19 23:40:22<dmiles> aindilis: pomg
10.02.19 23:40:33<aindilis> how's it going?
10.02.19 23:40:45<dmiles> good.. just now getting into swing of things
10.02.19 23:41:01<aindilis> good, I've been working on some stuff and am winding down for the day
10.02.19 23:41:16<aindilis> anyway just wanted to check in with you
10.02.19 23:41:34<dmiles> what stuff did you wokr on today?
10.02.19 23:44:43<dmiles> you know, I sort of had linked CYC to a java prolog about 6 years ago.. my objective was writing PrologREPL
10.02.19 23:45:57<dmiles> this was so i could rewrites E2C to run from CYC
10.02.19 23:47:01<dmiles> so anyways .. yesterday i started messing with the code.. i found some optiizations that have doublked the speed beyond every other known Java version of Prolog
10.02.19 23:48:07*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 240 seconds
10.02.19 23:48:43<dmiles> it comprises of optiimzations i wanted to do for SWI-Prolog but hadnt gotten JanW yet on board
10.02.19 23:49:34*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
10.02.19 23:49:48<dmiles> [20:41] <dmiles> what stuff did you wokr on today?
                 <dmiles> [20:44] <dmiles> you know, I sort of had linked CYC to a java prolog about 6 years ago.. my objective was writing PrologREPL
                 <dmiles> [20:46] <dmiles> this was so i could rewrites E2C to run from CYC
                 <dmiles> [20:47] <dmiles> so anyways .. yesterday i started messing with the code.. i found some optiizations that have doublked the speed beyond every other known Java version of Prolog
10.02.19 23:49:49<dmiles> [20:48] * aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) Quit (Ping timeout: 240 seconds)
                 <dmiles> [20:48] <dmiles> it comprises of optiimzations i wanted to do for SWI-Prolog but hadnt gotten JanW yet on board
10.02.19 23:49:51<dmiles> [20:49] * aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) has joined #logicmoo
10.02.19 23:50:59<dmiles> well a few optimizations such as situations where prolog doesnt ever care about some variable binding
10.02.19 23:54:12<aindilis> sorry 
10.02.19 23:54:15<aindilis> I opened your google doc to see what's up and there is some script that keeps hanging my computer
10.02.19 23:54:19<aindilis> dmiles: ping
10.02.19 23:54:42<aindilis> that is fantastic about the speed
10.02.19 23:54:44<dmiles> % yn_question(q(A),B,C,D,E):-[fronted_verb(nil,F,B,G,D,H),s(A,I,G,C,H,E)]
                 <dmiles>         a1 = a1.dref();
                 <dmiles>             a6 = engine.mkvar2();
                 <dmiles>             if (!a1.unifyS("q", engine.trail, a6)){
10.02.19 23:54:45<dmiles>                 return engine.fail();
                 <dmiles>             }
10.02.19 23:54:46<dmiles>         a7 = engine.mkvar1();
                 <dmiles>         a8 = engine.mkvar1();
10.02.19 23:54:47<dmiles>         p1 = new PRED_s_6(a6, engine.DONT_CARE2(), a7, a3, a8, a5, cont);
10.02.19 23:54:48<dmiles>         return new PRED_fronted_verb_6(s2, engine.DONT_CARE2(), a2, a7, a4, a8, p1);
10.02.19 23:55:42<dmiles> the DONT_CARE variables are never tracked
10.02.19 23:56:35<dmiles> which can really speed things up since they dont keep unwind info
10.02.19 23:58:53<aindilis> see pm
10.02.19 23:58:56<dmiles> also the mkvar1() and mkvar2() which are used for creation of tracked variable but allows me to also craft those variables in new speedy ways
11.02.19 02:06:18<aindilis> dmiles: ping
11.02.19 20:51:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-znaqfqatrzcoczou, stoopkid: stoopkid)
12.02.19 02:31:24*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
12.02.19 03:00:55*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-znaqfqatrzcoczou) left #logicmoo: Quit: Connection closed for inactivity
12.02.19 05:13:42*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
12.02.19 07:47:29*** Quit: jbalint (~jbalint@unaffiliated/jbalint) left #logicmoo: Quit: Bye!
12.02.19 07:47:47*** Join: jbalint (~jbalint@71-90-85-113.dhcp.ftbg.wi.charter.com, (unauthenticated): Jess Balint)
                 *** Quit: jbalint (~jbalint@71-90-85-113.dhcp.ftbg.wi.charter.com) left #logicmoo: Changing host
                 *** Join: jbalint (~jbalint@unaffiliated/jbalint, jbalint: Jess Balint)
12.02.19 09:50:21*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
12.02.19 09:52:45*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
12.02.19 14:04:49*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
12.02.19 14:05:08*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
13.02.19 02:57:19*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
13.02.19 04:56:40*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
13.02.19 04:57:14*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
13.02.19 05:41:31*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 244 seconds
13.02.19 05:46:36*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
13.02.19 06:19:47*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
13.02.19 09:51:22*** Mode change: +o dmiles on #logicmoo by ChanServ (ChanServ@services.)
13.02.19 10:00:22*** Mode change: -o dmiles on #logicmoo by dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net)
13.02.19 10:01:01*** Part: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: [No reason given]
13.02.19 10:01:12*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
13.02.19 10:14:54*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
13.02.19 10:25:12<aindilis> dmiles: ping
13.02.19 12:06:24*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
13.02.19 12:09:32*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 244 seconds
13.02.19 15:46:49*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
13.02.19 16:38:35*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-beeqrtvernxwuqgu, stoopkid: stoopkid)
13.02.19 19:26:01*** Join: CoderForLife (~Miranda@unaffiliated/coderforlife, CoderForLife: setimail@cellutions.com)
14.02.19 00:43:09<aindilis`> dmiles: hey
14.02.19 00:45:05*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
14.02.19 00:45:33*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
14.02.19 01:01:24<aindilis> dmiles: ping
14.02.19 04:12:00<aindilis> dmiles: ping
14.02.19 04:28:10*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-beeqrtvernxwuqgu) left #logicmoo: Quit: Connection closed for inactivity
14.02.19 11:16:38*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
14.02.19 11:25:01*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
14.02.19 12:39:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wkgwcykvuwenxtrl, stoopkid: stoopkid)
14.02.19 13:03:31*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
14.02.19 17:49:46*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
14.02.19 19:18:25*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wkgwcykvuwenxtrl) left #logicmoo: Quit: Connection closed for inactivity
14.02.19 22:59:07*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xvcsfdhrxjrayntk, stoopkid: stoopkid)
14.02.19 23:12:06*** Quit: CoderForLife (~Miranda@unaffiliated/coderforlife) left #logicmoo: Ping timeout: 246 seconds
15.02.19 01:03:24*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
15.02.19 01:07:40*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
15.02.19 03:09:38*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Read error: Connection reset by peer
15.02.19 03:09:57*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
15.02.19 03:11:44*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
15.02.19 03:14:06*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 258 seconds
15.02.19 03:38:40*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xvcsfdhrxjrayntk) left #logicmoo: Quit: Connection closed for inactivity
15.02.19 03:53:21*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
15.02.19 05:25:31*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
15.02.19 05:26:27*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
15.02.19 06:31:24<aindilis> dmiles: ping
15.02.19 07:20:23*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Quit: Leaving.
15.02.19 07:54:57*** Join: CoderForLife (~Miranda@unaffiliated/coderforlife, CoderForLife: setimail@cellutions.com)
15.02.19 08:17:45<aindilis> dmiles: ping
15.02.19 08:17:55<dmiles> pong
15.02.19 08:18:28<dmiles> getting the SxxMachine readyu to merge onto JRTL
15.02.19 08:18:58<dmiles> the E2C code runs from SxxMachione
15.02.19 08:19:38<dmiles> easier to run it there than from CYC
15.02.19 08:20:07<dmiles> though all data inside the SxxMachine is hosted in CYC
15.02.19 08:21:40<dmiles> all the SxxMachine jobs orignate from CYC
15.02.19 08:22:19<dmiles> this i feel will make CYC calls Prolog easier
15.02.19 08:52:43<aindilis> well that's good
15.02.19 08:59:40<dmiles> the end effect is the that CYC is completely present in the prolog REPL
15.02.19 09:02:38<dmiles> swipl stuff continues to work.. no incentive to break that
15.02.19 12:12:34*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bthnkpqblzrrwioi, stoopkid: stoopkid)
16.02.19 02:17:03*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
16.02.19 04:39:56*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Read error: Connection reset by peer
16.02.19 04:42:11*** Join: T_K (~TK@82.131.64.193.cable.starman.ee, (unauthenticated): purple)
16.02.19 04:48:23*** Quit: T_K (~TK@82.131.64.193.cable.starman.ee) left #logicmoo: Ping timeout: 245 seconds
16.02.19 09:00:37<dmiles> stoopkid, you are correct i think.. that we can allow the LarKC (which is CYC) load/save RDF in any form we like
16.02.19 09:01:24<dmiles> though would XML be stroed ina plain literal? 
16.02.19 09:02:17<dmiles> :foo :bar "<xm/>"^^XSD:Xml..
16.02.19 09:03:45<dmiles> oops i suppose these are not "plain" if i used ^^..  my terminolgy was off there
16.02.19 09:07:31<dmiles> on top of that there are verious XSD for semantic content http://dev.cyc.com/xsd/index.html 
16.02.19 10:08:07*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
16.02.19 10:14:23*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bthnkpqblzrrwioi) left #logicmoo: Quit: Connection closed for inactivity
16.02.19 10:40:12*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 268 seconds
16.02.19 12:20:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nuizzfogjrdimvvu, stoopkid: stoopkid)
16.02.19 15:02:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nuizzfogjrdimvvu) left #logicmoo: Quit: Connection closed for inactivity
16.02.19 16:55:58*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
16.02.19 17:58:57*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Remote host closed the connection
16.02.19 17:59:21*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
16.02.19 19:37:34*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
17.02.19 06:44:09*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
17.02.19 06:45:37*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
17.02.19 07:00:06*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
17.02.19 07:00:24*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
17.02.19 07:52:56*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
17.02.19 07:53:40*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
17.02.19 08:01:42*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 255 seconds
17.02.19 08:05:52*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
17.02.19 08:18:53*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
17.02.19 08:19:16*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
17.02.19 08:20:25*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
17.02.19 13:02:35*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
17.02.19 13:24:50*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
17.02.19 14:05:02*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Quit: Leaving
17.02.19 14:05:34*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
17.02.19 14:06:07*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Remote host closed the connection
17.02.19 14:09:09*** Join: swamps (~radiognom@128-71-210-126.broadband.corbina.ru, (unauthenticated): radiognome invisible)
18.02.19 04:20:49*** Join: aindilis (~aindilis@172.12.3.117, aindilis: Andrew Dougherty)
18.02.19 09:14:16*** Join: kaumi (~kaumi@93-33-82-108.ip43.fastwebnet.it, (unauthenticated): realname)
18.02.19 09:14:20<kaumi> hi
18.02.19 09:17:00<kaumi> i'have problem with prolog i'm reading the free book Logic Programming with Prolog 2nd Edition 2013.pdf and i have problem on page 68 with operator, ther'is someone in this channel?
18.02.19 09:36:30*** Quit: kaumi (~kaumi@93-33-82-108.ip43.fastwebnet.it) left #logicmoo: Quit: Leaving
18.02.19 11:36:57*** Quit: aindilis (~aindilis@172.12.3.117) left #logicmoo: Ping timeout: 246 seconds
18.02.19 11:40:02*** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 8 months 25 days 16 hours 8 minutes 12 seconds ago
18.02.19 11:46:06*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
19.02.19 02:40:13*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
19.02.19 12:16:19*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
19.02.19 13:20:07*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 258 seconds
                 *** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 240 seconds
19.02.19 13:20:16*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 272 seconds
19.02.19 13:28:27*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
19.02.19 13:45:19*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
19.02.19 13:47:18*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
19.02.19 13:51:05*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rgawxssbeaqnlcyu, stoopkid: stoopkid)
19.02.19 13:52:02*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
19.02.19 15:46:15*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
19.02.19 16:30:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rgawxssbeaqnlcyu) left #logicmoo: Quit: Connection closed for inactivity
19.02.19 16:31:01*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
19.02.19 17:09:00*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
20.02.19 04:40:15*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
20.02.19 05:05:10*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
20.02.19 12:07:41*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
20.02.19 12:09:00<dmiles> [09:04] <dmiles> NASA AI Today
                 <dmiles> [09:05] <dmiles> Video Conference URL: https://zoom.us/j/689971575
20.02.19 13:25:32<aindilis> dmiles: ping
20.02.19 14:23:45*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
20.02.19 16:23:41<aindilis> dmiles: ping
20.02.19 17:23:15*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
20.02.19 17:24:01*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
20.02.19 17:53:53*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
20.02.19 19:25:00*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
20.02.19 21:30:52*** Nick change: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) is now known as Richard_Torvalds
20.02.19 21:31:41*** Nick change: Richard_Torvalds (~elonsatos@unaffiliated/elon-satoshi/x-2794555) is now known as Elark_Muskerberg
21.02.19 00:28:16*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qnoccmiirmgjztti, stoopkid: stoopkid)
21.02.19 03:55:16*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
21.02.19 05:27:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qnoccmiirmgjztti) left #logicmoo: Quit: Connection closed for inactivity
21.02.19 06:11:59<aindilis> dmiles: ping
21.02.19 07:00:56*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
21.02.19 08:17:03<aindilis> dmiles: ping
21.02.19 09:03:30*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
21.02.19 11:00:16*** Quit: Elark_Muskerberg (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
21.02.19 11:08:37*** Join: Elark_Muskerberg (~elonsatos@2001:5b0:42dd:ab48:9d88:2873:6672:642d, (unauthenticated): elonsatoshi)
21.02.19 11:13:07<aindilis> dmiles: ping
21.02.19 12:35:58*** Quit: Elark_Muskerberg (~elonsatos@2001:5b0:42dd:ab48:9d88:2873:6672:642d) left #logicmoo: Quit: So long, and thanks for all the fish! 2.3 Weechat is best Weechat
21.02.19 12:38:17*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
21.02.19 15:06:16<dmiles> aindilis: pong
21.02.19 17:58:43*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
22.02.19 03:49:41*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 255 seconds
22.02.19 03:55:47*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 240 seconds
22.02.19 03:57:42*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
22.02.19 04:10:51*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
22.02.19 04:21:54*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
22.02.19 04:22:19*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
22.02.19 06:44:31*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
22.02.19 07:44:24*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
22.02.19 08:50:41*** Quit: swamps (~radiognom@128-71-210-126.broadband.corbina.ru) left #logicmoo: Ping timeout: 244 seconds
22.02.19 09:04:12*** Join: swamps (~radiognom@128-71-214-220.broadband.corbina.ru, (unauthenticated): radiognome invisible)
22.02.19 09:17:22<dmiles> it looks liek i haver persistence jsut for the .ts files
22.02.19 09:58:13<aindilis> wow
22.02.19 10:03:50<aindilis> how is it going otherwise?
22.02.19 10:46:01*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
22.02.19 13:25:44*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
22.02.19 13:33:40*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
22.02.19 13:43:48*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
22.02.19 17:46:10<aindilis> dmiles: ping
22.02.19 18:26:58<aindilis> any luck with metaplanning?
23.02.19 02:31:15*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
23.02.19 02:44:53*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 255 seconds
23.02.19 04:12:18*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Excess Flood
23.02.19 04:13:30*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
23.02.19 07:04:04*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
23.02.19 07:25:21*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
23.02.19 07:30:58<aindilis> ping
23.02.19 08:27:41<aindilis> ping
23.02.19 11:03:31<aindilis> dmiles: how is the MIFE coming along?  jbalint and I are discussing making a game using LarKC_CL
23.02.19 11:07:58*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
23.02.19 11:13:40*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
23.02.19 11:54:38<aindilis> does LarKC_CL work with OpenCYC now?
23.02.19 16:49:35<aindilis> ping
23.02.19 17:14:40<dmiles> good question.. i need to test that
23.02.19 17:15:27<dmiles> one edition of CYC they chnages an abstracty class out for an interface 
23.02.19 17:16:09<dmiles> a verification error might occur for that.. i saw that a while ago.. but havent tested the 4.0 version of opencyc
23.02.19 17:17:39<dmiles> i been mostly working on restoring the Logicmoo's customzed Prolog interpretoer that came for CycMOO i wrote in 2002
23.02.19 20:36:38*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
23.02.19 20:43:21*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
23.02.19 20:52:43*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
23.02.19 21:00:03*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
23.02.19 21:01:54*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Read error: Connection reset by peer
23.02.19 21:45:00*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
24.02.19 02:22:27*** Quit: swamps (~radiognom@128-71-214-220.broadband.corbina.ru) left #logicmoo: Ping timeout: 240 seconds
24.02.19 02:27:10*** Join: swamps (~radiognom@128-71-140-87.broadband.corbina.ru, (unauthenticated): radiognome invisible)
24.02.19 03:36:30*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
24.02.19 03:38:37*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
24.02.19 04:17:01<aindilis> ping
24.02.19 12:39:35<aindilis> ping
24.02.19 12:40:54<dmiles> pong
24.02.19 12:41:00<aindilis> hey how goes it?
24.02.19 12:41:24<dmiles> well my code is broken.. and i have to restart work i begun 4 days ago :P
24.02.19 12:41:30<aindilis> :/
24.02.19 12:41:38<aindilis> I read your convo in ##idni
24.02.19 12:41:57<dmiles> probably a very important conversaion is one that you missed.. i will paste it here
24.02.19 12:42:45<dmiles> [16:13] <dmiles> well i/we have non-JVM port of my system but users have to sign NDAs with Cycorp and buy a AllegroCL site licence if they even want to kick the tires
24.02.19 12:42:46<dmiles> [16:14] <dmiles> but JVM version is at least free :P
                 <dmiles> [17:24] <dmiles> a lot of the worlk to is if scheme programmers demand access to code on CYC
                 <dmiles> [17:24] <dmiles> no one is really demanding access :P
24.02.19 12:42:47<dmiles> [17:25] <dmiles> i think people assumed the CYC project was a failure and switched to god knows what
                 <dmiles> [17:26] <dmiles> dont people realize CYC is 100-1000 faster than every prover/datalog implemation out there?
24.02.19 12:42:48<dmiles> [17:27] <dmiles> because the govt put at least a 1/2 billion dollars into optimizaiong it
24.02.19 12:42:49<dmiles> [17:28] <dmiles> of course the system is slighty complex
                 <dmiles> [17:28] <dmiles> took me a several months of trying to fake it until i make it to understand how to code in it
24.02.19 12:42:50<dmiles> [17:30] <dmiles> it really is just the bookcode of PAIP on nuclear steroids
24.02.19 12:42:51<dmiles> [17:34] <dmiles> where i am focusing on event-calc reasoning 
                 <dmiles> [17:34] <dmiles> the nice part is that the language i am using is more epxressive than english
24.02.19 12:42:52<dmiles> [17:35] <dmiles> the human language i mean is more expressive than the human natural language
24.02.19 12:42:53<dmiles> [17:37] <dmiles> the language is a Conscriptive Event Calculus created by JohnMcCarthy in 1960s.. when you ne3eded to create a language that was completely logical but paraconsitent to handle new logical elaborations
24.02.19 12:42:54<dmiles> [17:38] <dmiles> A language that describes its own shortcomings
24.02.19 12:42:55<dmiles> [17:39] <dmiles> A language that can be surgically underspecific 
24.02.19 12:43:19<dmiles> [17:39] <dmiles> (whereas NL can be.. but not in a surgical way)
                 <dmiles> [17:40] <dmiles> in order to convery ambiguity in CycL we acutally trace out logically our ambiguity levels
                 <dmiles> [17:41] <dmiles> keeping a completely openworld 4 valued logic
24.02.19 12:43:20<dmiles> [17:42] <dmiles> in order to not deal with para-incompletness
                 <dmiles> [17:42] <dmiles> sorry i mean deal with it correctly
24.02.19 12:43:21<dmiles> [17:44] <dmiles> so for exmaple if  (and (loves joe sue) (loves john sue)) .. we know that the two even overlap temporally.. we also know that the Sue is the same woman and that the "loves" predicate *must* mean something differnt .. but intersect at the commonalities of the prototypical meaning of loves/2
24.02.19 12:43:22<dmiles> [17:46] <dmiles> "loves" predicate *must* mean something differnt .. by this i mean is is cannonicalized to  (and (?L1 joe sue) (?L2 john sue)  (dif ?L1 ?L2) (subclass ?L1 (PrototypeFn loves) ) (subclass ?L2 (PrototypeFn loves) ) )
24.02.19 12:43:23<dmiles> [17:47] <dmiles> well the cannonical form even include the modalities of time of them holding to be true
                 <dmiles> [17:48] <dmiles> i dont think anyone but cycorp/mccarthy discovered we had to do it this way
24.02.19 12:43:24<dmiles> [17:56] <dmiles> to really canonicalize the infinite world of discourse we had to create a logically circonscription language that was able to imprecisly define the top and bottem.. and then without using any "probablity" continue to be consistent
24.02.19 12:43:25<dmiles> [17:56] <dmiles> circonscriptive language
                 <dmiles> [17:57] <dmiles> a dynamic (non-monotonic) logic where McCarthy's circonscription theory is used
24.02.19 12:43:26<dmiles> [17:58] <dmiles> an introduction link is https://en.wikipedia.org/wiki/Circumscription_(logic)
24.02.19 12:43:27<dmiles> [17:59] <dmiles> how it partially works is by the system tracking both fixed and varying predicates into a 4 to 6 valued logic
                 <dmiles> [18:00] <dmiles> CYC database language design was to accomadate this
24.02.19 12:43:29<dmiles> [18:02] <dmiles> where every consequent is returned in a way that still tracks that open/closedness of the truth values
                 <dmiles> [18:03] <dmiles> like when i say (isa Fido ?W) and ?W=Dog as a result.. i know that this Dog is a complete underspecifation 
24.02.19 12:43:30<dmiles> [18:04] <dmiles> it is really  "if Fido was a ?W, and ?W was a Dog, it is a special instensional subrealm of how we meant Dog"
                 <dmiles> [18:04] <dmiles> "so Dog in this case is Fido-Specfic-Dog
24.02.19 12:43:31<dmiles> [18:05] <dmiles> where (subrealm Fido-Specfic-Dog Dog)
24.02.19 12:43:32<dmiles> [18:05] <dmiles> "
                 <dmiles> [18:17] <dmiles> how that value is returned is a bit like natural language
24.02.19 12:43:33<dmiles> [18:18] <dmiles> ?W = `(SubProtTypicalFn Dog (InstanceFn Fido))
24.02.19 12:43:34<dmiles> [18:18] <dmiles> in this case ?W is conveyed to have infinite, yet, scoped meaning
24.02.19 12:44:06<dmiles> [18:20] <dmiles> unification results in   (MeaningsIntersetFn (SubProtTypicalFn Dog (InstanceFn Fido)) `(SubProtTypicalFn Dog (InstanceFn Fido)))
                 <dmiles> [18:21] <dmiles> converyable also by the term:  `(SubProtTypicalFn Dog (InstanceFn (MeaningsIntersectFn Fido Snoopy)))
24.02.19 12:44:07<dmiles> [18:21] <dmiles> conveyable
                 <dmiles> [18:22] <dmiles> RDF/Prolog dont have such infinite terms
                 <dmiles> [18:24] <dmiles> though prolog's attributed variables can implement this 6-domains-at-once cosntraint system 
24.02.19 12:44:08<dmiles> [01:01] <amz3> o/
                 <dmiles> [01:02] <amz3> dmiles: nice write up
24.02.19 12:48:10<aindilis> great
24.02.19 12:48:16<aindilis> is that the extent of the conversation?
24.02.19 12:48:40<dmiles> yes.. but now i see exactly how that impl works
24.02.19 12:49:20<dmiles> PrologPlusCG was one of the first attempts outside Cycorp to impliment it
24.02.19 12:49:54<aindilis> yeah my tts read it before it got pasted to the screen so I'll have to reread to grok
24.02.19 12:50:12<aindilis> this is the elaboration tolerant logic you often speak of?
24.02.19 12:50:52<dmiles> yes
24.02.19 12:50:56<aindilis> cool
24.02.19 12:51:37<dmiles> i been going on for 3 years wondering so hard how i might be wrong i havent focused on the parts i got right
24.02.19 12:52:04<aindilis> you mean with PrologMUD/LogicMOO?
24.02.19 12:52:35<dmiles> yes.. part of the reason progress has been so slow in that is i wasnt sure about the theory
24.02.19 12:53:13<dmiles> i knew of course PrologMUD/LogicMOO's use of CycL was very important
24.02.19 12:53:49<dmiles> but i been struggling with what a First Order Term was going to be
24.02.19 12:54:44<dmiles> mainly from conversations i was having in #AutoNomic and ##idni trying to figure out how they got thinjgs so screwed up and wrong
24.02.19 12:55:14<aindilis> due to impedence mismatch?
24.02.19 12:55:15<swamps> <user> Too often in our experience, organizations and teams suffer from homogeneity on multiple fronts, limiting their ability to think expansively and drive transformational business and cultural initiatives. // source: https://su.org/blog/singularity-university-at-ten-years-the-global-grand-challenges/
24.02.19 12:55:46<swamps> i'm sure that ai and true nlu are key to a maximum heterogeneity
24.02.19 12:55:48<dmiles> due to not seeign that all logical symbols had a set number of views
24.02.19 12:56:42<aindilis> what is it that you have to return to from 4 days ago?
24.02.19 12:57:07<dmiles> for exmaple in my (isa Fido ?W) returns a Dog that looks liek a FORT (first order term) but it s  FORT tered in a single dirrect towrd Fido
24.02.19 12:57:42<dmiles> that all first torder terms have to be view as existentials
24.02.19 12:58:23<aindilis> you have to do this to get Prolog LogicBase to represent all the knowledge for LarKC_CL?
24.02.19 12:58:35<dmiles> there is anywhere from 6 to 14 .. vectors in which all terms can be transformed towards
24.02.19 12:59:12<dmiles> yes.. in 2002 when i wrote the Prolog system i was porting 4 days ago it was to allow these special terms
24.02.19 12:59:25<aindilis> ah CycMOO
24.02.19 12:59:30*** Nick change: swamps (~radiognom@128-71-140-87.broadband.corbina.ru) is now known as egp_
24.02.19 12:59:31<dmiles> yes
24.02.19 13:00:18<dmiles> swamps: it's lile a true NL that appears to be a logic like CycL
24.02.19 13:00:27<dmiles> lile/like
24.02.19 13:00:53<dmiles> the NL is Ued 
24.02.19 13:01:48<dmiles> though it maybe a wide berth to human thinking
24.02.19 13:02:05<dmiles> but ideally a truely usefull logic for machines
24.02.19 13:02:08<aindilis> what vectors?
24.02.19 13:02:20<dmiles> vectors can be thought of like this...
24.02.19 13:02:50<dmiles> (NotAnyColetionFn Dog)
24.02.19 13:03:06<dmiles> (GenlsFn Dog)
24.02.19 13:03:14<dmiles> (SubGenlsFn Dog)
24.02.19 13:03:28<dmiles> (PrototypicalFn Dog)
24.02.19 13:03:33<aindilis> ah k
24.02.19 13:04:14<dmiles> uses of Dog genrally are about only using a set of such NARTs
24.02.19 13:04:33<dmiles> erm some of those subsets that is
24.02.19 13:05:03<dmiles> Aristotal though anout 3 such vectors 
24.02.19 13:05:19<dmiles> thought and described in the meaning triangle
24.02.19 13:05:47<dmiles> whereas Descripotion Logic/RDF thought about 2
24.02.19 13:06:09<dmiles> Prolog about 1
24.02.19 13:06:40<dmiles> etc
24.02.19 13:07:00<dmiles> CYC to actually work thinks about arround 4
24.02.19 13:07:15<dmiles> i found the list of 14 the other day.. i need to find them!
24.02.19 13:07:21<aindilis> ah yeah, like assertion authors
24.02.19 13:08:01<aindilis> gister
24.02.19 13:08:08<dmiles> describe assertion authors
24.02.19 13:08:11<aindilis> http://www.ai.sri.com/~gister/
24.02.19 13:08:23<aindilis> CycAdministrator etc
24.02.19 13:08:40<aindilis> #$Witbrock etc
24.02.19 13:08:51<aindilis> #$Lenat
24.02.19 13:09:44<aindilis> http://www.ai.sri.com/~seas/
24.02.19 13:09:53<dmiles> oh yes http://www.ai.sri.com/~gister/ thought along the lines .. we can say that with everyt cosntant it brings slightly some Fuzz
24.02.19 13:10:25<dmiles> the Fuzz maxes out to 6 difenrt versions of Fuzz in CYC
24.02.19 13:10:35<aindilis> well I just mean to reference the evidential aspects of CYC here since these dimensions seem along those lines (Logos, Pathos, Ethos)
24.02.19 13:11:19<dmiles> terms start out with a meanig inside a logical sentenced
24.02.19 13:11:26<aindilis> it's amazing that I can remember these systems so quickly and cannot remember where to put the dishes when drying them
24.02.19 13:11:56<aindilis> two theories, one I don't care about dishes and two my pre-psychosis memory is intact
24.02.19 13:12:03<dmiles> (loves Joe Mary) (eats Poe pizza1)  (knows Joe (genls Pizza Food))
24.02.19 13:12:31<dmiles> Joe in those three senses is a different Joe
24.02.19 13:12:41<aindilis> interesting
24.02.19 13:13:13<dmiles> each predicate is accribling Joe along some vector
24.02.19 13:13:30<aindilis> what are the vectors?
24.02.19 13:13:32<dmiles> not Fuzz vectors but Fuzz an enter into it 
24.02.19 13:14:28<dmiles> Joe in all 3 setences are the same Joe under aristole  Referant class
24.02.19 13:14:36<dmiles> in the refernt vector
24.02.19 13:14:45<dmiles> in the Referent vector
24.02.19 13:15:11<aindilis> so a vector is similar to a slot?
24.02.19 13:16:20<dmiles> https://en.wikipedia.org/wiki/Triangle_of_reference
24.02.19 13:16:51<dmiles> The relations between the triangular corners may be phrased more precisely in causal terms as follows[citation needed][original research?]:
                 <dmiles> The matter evokes the writer's thought.
                 <dmiles> The writer refers the matter to the symbol.
24.02.19 13:16:52<dmiles> The symbol evokes the reader's thought.
                 <dmiles> The reader refers the symbol back to the matter.
24.02.19 13:18:01<dmiles> those 4 steps are what happening allong a domain for referent
24.02.19 13:18:28<dmiles> a Vector in my lanuage is a liek a Dimention of Domain
24.02.19 13:18:59<dmiles> the vector is about the postion in teh domain
24.02.19 13:19:35<dmiles> Joe moves in and out of 3 differnt domains in (loves Joe Mary) (eats Poe pizza1)  (knows Joe (genls Pizza Food))
24.02.19 13:20:12<aindilis> srry I had to step out quickly
24.02.19 13:20:13<aindilis> back
24.02.19 13:20:37<aindilis> ah so that's the triange you were referring to
24.02.19 13:21:03<aindilis> not the logos pathos ethos
                 <dmiles> for exmaple.. immagine this,..  (exists ?J (loves ?J Mary) (eats ?J pizza1)  (knows ?J (genls Pizza Food))
24.02.19 13:22:11<dmiles> right the Triangle_of_reference is what i meant:  SYMBOL THOUGHT REFERENT
24.02.19 13:22:13<aindilis> huh I'll have to study this triangle better
24.02.19 13:22:32<dmiles> we easlily understand SYMBOL THOUGHT  are quite differnt
24.02.19 13:22:48<dmiles> but  SYMBOL and REFERENT?!?
24.02.19 13:22:58<aindilis> meta/object?
24.02.19 13:23:45<dmiles> most logicians like try to combine the two into a  SYMBOL
24.02.19 13:23:55<dmiles> which then breaks everyhting
24.02.19 13:24:08<aindilis> quine corner notation?
24.02.19 13:24:17<dmiles> perhaps yes
24.02.19 13:25:14<dmiles> the differnce between Datalog/RDF and CycL is that CycL is the only languafge that keep them separate
24.02.19 13:25:37<aindilis> alright, well I'll have to reread all this again when I'm not so tired
24.02.19 13:25:52<dmiles> mathematics has a simualr problem
24.02.19 13:26:13<dmiles> is 2 frogs the same as 2 birds?
24.02.19 13:26:32<dmiles> the 2-ness part yes
24.02.19 13:26:44<dmiles> but not the frog and birds part
24.02.19 13:27:03<dmiles> this frog example is what i mean by vectors
24.02.19 13:27:10<aindilis> types?
24.02.19 13:27:22<aindilis> as one particular vector
24.02.19 13:27:28<aindilis> I do apologize, I am still tired from all the preparations, I was curiuos though how things were progressing with LarKC_CL.  You heard that jbalint and I are currently thinking about making a game with it?  also, any luck with the C++ bindings?
24.02.19 13:27:29<dmiles> 2 is a vector size of two refernats
24.02.19 13:27:35<aindilis> |v|
24.02.19 13:27:49<dmiles> frog/bird is a vector sitw of two referents
24.02.19 13:28:02<aindilis> sitw?
24.02.19 13:28:15<dmiles> site as in data website
24.02.19 13:28:18<aindilis> k
24.02.19 13:29:06<aindilis> yeah sorry cannot grasp it, have to review the wikipage and stuff, but a bit too tired at this point
24.02.19 13:29:16<dmiles> frog and bird live in a vector that we can say  2Frogs are proably closer to the frog postion
24.02.19 13:29:20<aindilis> I'm sure I'll get it on rereading everything
24.02.19 13:29:33<aindilis> ah I see
24.02.19 13:29:34<aindilis> 1 frog
24.02.19 13:30:02<dmiles> 1 frog vs 2 frogs
24.02.19 13:30:05<aindilis> yeah
24.02.19 13:30:25<dmiles> 1 frog vs 1 bird
24.02.19 13:30:32<dmiles> are the two domains
24.02.19 13:30:59<dmiles> on top of these 2 domains (vectors) there are more
24.02.19 13:31:15<dmiles> 1 frog vs  All frogs
24.02.19 13:31:24<dmiles> 1 frog vs  no frogs
24.02.19 13:31:50<dmiles> 1 frog vs the frog you are thinking of
24.02.19 13:32:01<dmiles> that os the right slope of the triangle
24.02.19 13:32:15<dmiles> that is the right slope of the meaning triangle
24.02.19 13:32:22<aindilis> 2019-01-25 04:35:31 <aindilis> dmiles: kind of like coral growth?                                                                                                                                                                                                                                                              
                 <aindilis> 2019-01-25 04:35:51 <dmiles> yeah where we describe how to grow coral and that                                                                                                                                                                                                                                                 
24.02.19 13:32:24<aindilis>       is the recusion  
24.02.19 13:32:40<aindilis> that was a perceptive analogy
24.02.19 13:32:53<aindilis> same here with these semantic vectors
24.02.19 13:32:57<aindilis> / 0 and all that
24.02.19 13:33:10<dmiles> yeah each of these recursions can be thought about how they effect things in a vector/domain
24.02.19 13:33:31* dmiles wishes he used "domain" over "vetor" intially here :
24.02.19 13:33:34<aindilis> this is kind of like mereological topology or something
24.02.19 13:33:42<dmiles> yes
24.02.19 13:34:01<aindilis> hey I have to brb
24.02.19 13:34:06<aindilis> bbiab 10
24.02.19 13:34:28<dmiles> i have a lot i need to write out for maintly even jsut myself .. so i might write more to be written down later
24.02.19 13:34:40<aindilis> great!  will read
24.02.19 13:34:41<aindilis> ty!
24.02.19 13:35:28<dmiles>  (exists ?J (and (loves ?J Mary) (eats ?J pizza1)  (knows ?J (genls Pizza Food))) surely put ?J inmto 3 diffenrt domains
24.02.19 13:36:57<dmiles> also  Food is in context only with the intersection of ?Js mind with the system
24.02.19 13:37:20<dmiles>  (exists (?J ?F) (and (loves ?J Mary) (eats ?J pizza1)  (knows ?J (genls Pizza ?F)))
24.02.19 13:38:13<dmiles> we pass the SYMBOL "Food" arround 
24.02.19 13:39:00<dmiles> but the REFERENT "Food" is what we *meant*
24.02.19 13:39:30<dmiles> the SYMBOL "Food" is alike a function that returns a  REFERENT "Food"
24.02.19 13:40:31<dmiles> REFERENT "Food" though in that query means somethng very  ?J specific
24.02.19 13:40:42<dmiles> SYMBOL "Food" would be too datalossy
24.02.19 13:41:48<dmiles> ?F's is ?J specific = intersection of ?Js mind with the system
24.02.19 13:43:02<dmiles> we dont have to pretned we are complete enough to "realize" Js mind.. we jsut have to prevent ourselves for doing anything too silly
24.02.19 13:43:59<dmiles> and allow for ?J  to be used consistently
24.02.19 13:44:20<dmiles> within CYC
24.02.19 13:44:38<dmiles> (within Circumscriptive Logic)
24.02.19 13:45:48<dmiles> this isnt about AI wide open it is about cracking symbolic logic 
24.02.19 13:46:23<dmiles> this isnt about crakcing AI wide open, it is about cracking symbolic logic into finnaly somethjing that isnt full of paradoxes and full of crap 
24.02.19 13:47:22<dmiles> crap that Skolem, Godel and Löwenheim show us logic is filled with
24.02.19 14:01:31<dmiles> [10:49] <dmiles> A paraconsistent logic is a way to reason about inconsistent information due to incompleteness without lapsing into absurdity. 
24.02.19 14:01:32<dmiles> [10:50] <dmiles> The first paraconsistent logic was developed by Jaśkowski, a student of Lukasiewicz, in Poland in 1948. He gave some basic criteria for a paraconsistent logic:
24.02.19 14:01:33<dmiles> [10:50] <dmiles> Jaśkowski’s idea is to prevent the inconsistent information from co-mingling. He does so, in effect, by blocking the rule of adjunction:
                 <dmiles> [10:50] <dmiles> A, B ⊢ A & B.
24.02.19 14:01:34<dmiles> [10:51] <dmiles> which creates a problem when SYMBOL and REFERNT are confused 
24.02.19 14:01:35<dmiles> [10:52] <dmiles>  In dynamic logics, rules of inference change as a function of what has been derived to that point, and so some sentences which were derivable at a point in time are no longer derivable, and vice versa. The program has been developed by Dederik Batens and his school in Ghent.
24.02.19 14:01:36<dmiles> [10:53] <dmiles> One of the first pioneers of paraconsistent logic was Newton C. A. da Costa in Brazil, in the 1950s. Da Costa’s interests have been largely in paraconsistent mathematics (with applications to physics)
24.02.19 14:01:37<dmiles> [10:53] <dmiles>  Richard Routley and Graham Priest in Australia in the 1970s. Priest continues to be the best known 
                 <dmiles> [10:54] <dmiles> John McCarthy Circumscription again Learning, Beliefs, and AI
24.02.19 14:01:38<dmiles> [10:54] <dmiles> Some work has been done to apply paraconsistency to modeling cognition. The main idea here is that the limitations on machine reasoning as (apparently) dictated by Gödel’s incompleteness theorems no longer hold.
24.02.19 14:01:39<dmiles> [10:55] <dmiles> Gödel’s incompleteness theorems no longer hold due to we created a new mathmatical language for higher order terms in CycL
                 <dmiles> [10:56] <dmiles> higher order terms in CycL are still FORTs!
24.02.19 14:01:40<dmiles> [10:57] <dmiles> FORT = This class implements a Cyc Fort (First Order Reified Term).
24.02.19 14:01:41<dmiles> [10:58] <dmiles> we only reify them under REFERENT logics.. not SYMBOL logics
                 <dmiles> [10:58] <dmiles> Though i dont go so far as to claim this is AI
24.02.19 14:01:42<dmiles> [10:58] <dmiles> but it is a logic powerfull enough to build an AI program
                 <dmiles> [10:59] <dmiles> a logic powerfull enough to avoid being caught up the myths 
24.02.19 14:01:43<dmiles> [10:59] <dmiles> the myths being taught about limits of logic
24.02.19 14:01:44<dmiles> [11:00] <dmiles> oh bloody crap! wrong room! this was for #logicmoo!
                 <dmiles> [11:01] <dmiles> where we had been discussing REFERENT logics vs SYMBOL logics!
24.02.19 14:07:08<dmiles> since the goal is to write a program that is qualified to be be trusted to write computer applications for us.. evne an AI program
24.02.19 14:15:44<dmiles> btw this is the song that inspired the name of SxxMachine https://www.youtube.com/watch?v=tHlDfejCHkc
24.02.19 14:18:01<dmiles> sorry please dont watch that.. whatch this instead https://www.youtube.com/watch?v=AcmrYhDq9ms
24.02.19 14:21:37<dmiles> well this is for aindilis's beard:  https://youtu.be/CKJj2kvQDqo?t=133
24.02.19 20:52:36<aindilis> ping
25.02.19 03:30:39*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
25.02.19 04:25:34*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
25.02.19 12:03:00<aindilis> ping
25.02.19 15:20:20*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ntpreuxyeevzmodj, stoopkid: stoopkid)
25.02.19 16:04:10*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
25.02.19 16:07:38*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 244 seconds
25.02.19 17:10:12*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Read error: Connection reset by peer
25.02.19 17:11:55*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
25.02.19 17:23:30*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
25.02.19 17:23:55*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
25.02.19 19:01:34<aindilis> ping
25.02.19 19:15:05<logicmoo> pong 
25.02.19 19:15:11*** Nick change: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
26.02.19 01:22:00<egp_> <dmiles> well this is for aindilis's beard:  https://youtu.be/CKJj2kvQDqo?t=133 --- this musician plays distantly like the pyotr mamonov's music
26.02.19 01:22:28<egp_> mamonov doesn't have such an instrument though =)
26.02.19 01:30:18<egp_> for searching on youtube: пётр мамонов звуки му
26.02.19 01:36:15<dmiles> wow mamonov is so awesome i cant belive i missed him all those years
26.02.19 01:37:06<dmiles> oh, i do recognise "Can Opener"
26.02.19 01:38:10<dmiles> this one: https://www.youtube.com/watch?v=Hol9q9GhonM
26.02.19 01:39:34<dmiles> i just always thought it was german
26.02.19 01:40:22<dmiles> damn i love his music 
26.02.19 01:44:28<egp_> dmiles, mamonov has an education in the area of pantomime
26.02.19 01:45:20<dmiles> hah like: https://youtu.be/ngtA6cncdSo?list=RDEMUaYznTJ2xsNVUZYcl5HYtg&t=223
26.02.19 01:49:47<egp_> гадопятикна is mamonov's neologism. гад is bad guy, пятна is spots
26.02.19 01:50:13<egp_> it is unknown what his word means as a whole
26.02.19 01:51:01<egp_> this sone is from Crimea (крым) album afair
26.02.19 01:51:03<egp_> song
26.02.19 01:53:53<egp_> another meaning for гад is snake-like
26.02.19 01:55:24<egp_> he has a joint album with some famous western guy as a producer, forgot his name
26.02.19 01:56:37<egp_> found his(?) youtube channel https://www.youtube.com/channel/UCwdRFvoiksaXhR3ggnqiAhQ
26.02.19 01:56:44<egp_> mamonov's
26.02.19 01:58:18<egp_> rutracker.org seems to host a mamonov/zvuki mu discography
26.02.19 01:58:23<egp_> mu/moo
26.02.19 02:09:02*** Quit: jbalint (~jbalint@unaffiliated/jbalint) left #logicmoo: Ping timeout: 244 seconds
26.02.19 02:10:32*** Join: jbalint (~jbalint@71-90-85-113.dhcp.ftbg.wi.charter.com, (unauthenticated): Jess Balint)
                 *** Quit: jbalint (~jbalint@71-90-85-113.dhcp.ftbg.wi.charter.com) left #logicmoo: Changing host
                 *** Join: jbalint (~jbalint@unaffiliated/jbalint, jbalint: Jess Balint)
26.02.19 04:29:32*** Connecting...
26.02.19 04:29:56*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
26.02.19 04:29:57*** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 9 months 3 days 8 hours 58 minutes 6 seconds ago
                 *** Names: ditable-doge jbalint aindilis dmiles stoopkid egp_ Copenhagen_Bram PrologMUD yesbot michalisko @ChanServ CoderForLife
                 *** End of /NAMES list.
26.02.19 04:30:41*** Nick change: You are now known as editable-dog
26.02.19 05:13:50*** Quit: jbalint (~jbalint@unaffiliated/jbalint) left #logicmoo: Ping timeout: 255 seconds
26.02.19 07:27:32*** Connecting...
#logicmoo> 26.02.19 10:11:09*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 9 months 3 days 14 hours 39 minutes 18 seconds ago
                 *** Names: editable-dog aindilis T_K Copenhagen_Bram jbalint logicmoo stoopkid egp_ PrologMUD yesbot CoderForLife @ChanServ michalisko
                 *** End of /NAMES list.
26.02.19 12:12:30*** Nick change: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
26.02.19 13:05:43*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
27.02.19 12:42:13*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
27.02.19 12:49:56*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
27.02.19 14:10:18*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Quit: So long, and thanks for all the fish! 2.3 Weechat is best Weechat
27.02.19 14:26:23*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
27.02.19 21:38:22*** Quit: egp_ (~radiognom@128-71-140-87.broadband.corbina.ru) left #logicmoo: Ping timeout: 245 seconds
28.02.19 01:13:24*** Join: swamps (~radiognom@128-71-140-115.broadband.corbina.ru, (unauthenticated): radiognome invisible)
28.02.19 08:45:20*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
28.02.19 08:47:02*** Join: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, (unauthenticated): Andrew Dougherty)
28.02.19 09:21:11*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
28.02.19 15:36:17*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
28.02.19 18:02:23*** Quit: aindilis` (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
28.02.19 18:02:54*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
28.02.19 19:08:54*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Quit: rebooting
28.02.19 19:14:20<aindilis> ping
28.02.19 19:38:44*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
28.02.19 20:09:14<aindilis> dmiles: ping
28.02.19 21:01:15<aindilis> have you successfully integrated Murray's Event Calculus into SWIPL?
28.02.19 21:01:20<aindilis> *planner
28.02.19 21:37:41*** Join: n15 (~q754f5b@227.red-88-0-84.dynamicip.rima-tde.net, (unauthenticated): r75 e754)
28.02.19 21:38:04<aindilis> or RTEC (RTEC causes problems with FLP)
28.02.19 21:43:38*** Quit: n15 (~q754f5b@227.red-88-0-84.dynamicip.rima-tde.net) left #logicmoo: 
28.02.19 22:49:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ntpreuxyeevzmodj) left #logicmoo: Quit: Connection closed for inactivity
01.03.19 06:53:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gvjotcyfrqrytmjc, stoopkid: stoopkid)
01.03.19 06:53:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gvjotcyfrqrytmjc) left #logicmoo: Excess Flood
01.03.19 06:53:45*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ztjtnuldzkjcraya, stoopkid: stoopkid)
01.03.19 07:09:35*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
01.03.19 09:34:40<aindilis> dmiles: ping
01.03.19 12:34:23*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
01.03.19 14:50:31*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
01.03.19 14:53:42*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Client Quit
01.03.19 15:29:56*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
01.03.19 20:05:31*** Join: killown (~killown@unaffiliated/geek, geek: Geek)
01.03.19 20:05:53*** Part: killown (~killown@unaffiliated/geek) left #logicmoo: "Leaving"
01.03.19 20:47:30*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
01.03.19 20:48:30<aindilis> ping
01.03.19 21:16:27*** Quit: CoderForLife (~Miranda@unaffiliated/coderforlife) left #logicmoo: Ping timeout: 240 seconds
02.03.19 02:45:18*** Join: ua (~ua@unaffiliated/uniqanomaly, uniqanomaly: uniqanomaly)
02.03.19 05:45:04*** Join: CoderForLife (~Miranda@unaffiliated/coderforlife, CoderForLife: setimail@cellutions.com)
02.03.19 11:00:22*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
02.03.19 11:45:51<dmiles> aindilis: yes the Murr planner worked
02.03.19 11:46:03<dmiles> erm Murry EC
02.03.19 11:46:23<dmiles> https://github.com/TeamSPoon/prologmud_I7/tree/master/prolog/ec_planner
02.03.19 11:47:27<dmiles> this one:  https://github.com/TeamSPoon/prologmud_I7/blob/master/prolog/ec_planner/ec_planner_dmiles.pl#L32
02.03.19 11:57:50*** Quit: ua (~ua@unaffiliated/uniqanomaly) left #logicmoo: Ping timeout: 244 seconds
02.03.19 12:13:21<aindilis> dmiles: I am getting ready to replace the atTime.pl system which does temporal semantics (but doesn't support negation) with EC.
02.03.19 12:13:46<aindilis> e.g. atTime([2019-03-02,12:13:31],hasProperty(andrewDougherty,alive)).
02.03.19 12:15:37<aindilis> I am interested in the abductive abilities - for instance, knowing that an event happened sometime before it was reported, but not sure how long ago
02.03.19 12:16:11<aindilis> I am assuming it degrades (unspecifically) gracefully
02.03.19 12:16:20<aindilis> *underspecifically
02.03.19 12:59:08*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 258 seconds
02.03.19 13:09:06*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
02.03.19 14:04:05*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
02.03.19 14:45:34<aindilis> dmiles: I got Owntracks to work again 
02.03.19 14:45:44<aindilis> so now I can continue with location aware services for FLP
02.03.19 14:45:55<aindilis> e.g. when you get home, scan in receipts
02.03.19 14:46:05<aindilis> when you go to the movies, silence phone
02.03.19 14:46:11<aindilis> when you leave the house, turn down the heat
02.03.19 16:32:56<aindilis> heh a regression caused saturday alarms to be skipped and I thought it was cause I fixed OwnTracks
02.03.19 22:43:04<aindilis> http://www.cs.utexas.edu/users/ml/geo.html
02.03.19 22:43:11<aindilis> http://www.cs.utexas.edu/users/ml/wasp/
02.03.19 23:16:48<aindilis> well I revived location logic
02.03.19 23:17:34<aindilis> https://frdcsa.org/~andrewdo/projects/frdcsa-guis/screenshot_001.png
02.03.19 23:17:47<aindilis> added an Owntracks agent in place of Google Latitude
02.03.19 23:18:08<aindilis> looks like I did a lot of the calculations already
02.03.19 23:45:17<aindilis> I suppose location logic would well suit Inform-style prolog fact data, but I'm going to try to move to another area of the project.
03.03.19 04:12:59*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
03.03.19 12:33:59*** Quit: swamps (~radiognom@128-71-140-115.broadband.corbina.ru) left #logicmoo: Remote host closed the connection
03.03.19 12:37:07*** Join: swamps (~radiognom@128-71-140-115.broadband.corbina.ru, (unauthenticated): radiognome invisible)
03.03.19 14:38:26<aindilis> dmiles: ping - how are things coming - any luck with 3t integration?
03.03.19 14:44:22<dmiles> still fixing stuff in the prolog+lisp VM merge
03.03.19 14:45:39<dmiles> that for sure is very next *after* i add Murry-EC prolog to CYC's query spindle
03.03.19 14:46:31<dmiles> i sort of feel if someone can make 3T work in ABCL .. that is all we need
03.03.19 14:46:41<dmiles> well at first 
03.03.19 14:47:19<dmiles> that is how i am goign to do it
03.03.19 14:48:01<dmiles> actualyl the best way would be: 1) make  3T work in SBCL,  2) 3T work in CLISP   3) 3T work in ABCL
03.03.19 14:48:53<dmiles> SBCL since that shows whether or not this sound be hard
03.03.19 14:49:26<dmiles> SBCL since that shows whether or not this should be hard to port and can get author support
03.03.19 14:49:39<dmiles> CLISP since that will get rid of the SBCL-isms
03.03.19 14:50:09<dmiles> at that oint it probely evben works on ABCL :P
03.03.19 14:50:45<aindilis> ah
03.03.19 14:50:46<aindilis> interesting
03.03.19 14:50:57<dmiles> minus the JLinker stuff
03.03.19 14:51:03<aindilis> well I will talk to Christpher, it's about time to send a message
03.03.19 14:51:35<aindilis> I heard you were merging like 6 different prolog in lisps?
03.03.19 14:51:38<aindilis> er java
03.03.19 14:52:02<dmiles> yeah 4 down.. two to go!
03.03.19 14:52:17<aindilis> what is the need for doing that out of curiousity?
03.03.19 14:52:33<aindilis> congrats!!!
03.03.19 14:53:10<aindilis> I take it they have a shared data representation so facts will only need to be entered once
03.03.19 14:53:21<dmiles> two: KernelProlog/JinniProlog for creating CYC query closures
03.03.19 14:53:40<dmiles> one: CafeProlog the foundation for speed
03.03.19 14:53:51<aindilis> you are an alchemist!
03.03.19 14:54:08<dmiles> one: tuProlog for closest to SWI/ISO compat
03.03.19 14:54:49<dmiles> one: jProlog was to extend CafeProlog to be lazy
03.03.19 14:55:07<aindilis> I'm amazed that you can conglom these things
03.03.19 14:55:24<dmiles> last one: PrlogPlusCG since it has all the secrets I would end up adding
03.03.19 14:55:47<aindilis> pretty cool stuff
03.03.19 14:56:02<aindilis> on my end I finally have time and money to work on I
03.03.19 14:56:03<dmiles> well i am dubius of memory betwene SWI-Prolog and CYC
                 <aindilis> *AI
03.03.19 14:56:16<aindilis> but I lack MOTIVATION
03.03.19 14:56:38<aindilis> which I had in droves when I started out, but I had no MONEY
03.03.19 14:56:48<dmiles> keeping all of CYC's memory in SWI-Prolog slows CYC down too much
03.03.19 14:56:52<aindilis> then when I got jobs I had MONEY + MOTIVATION + no time
03.03.19 14:57:06<aindilis> damn
03.03.19 14:57:11<aindilis> I see
03.03.19 14:57:13<dmiles> yeah :(
03.03.19 14:57:29<aindilis> so I just have to derive MOTIVATION somehow
03.03.19 14:57:59<aindilis> maybe when I get my CPAP I will have more energy and thus have more motivation
03.03.19 14:58:01<dmiles> cafine not good enough?
03.03.19 14:58:11<aindilis> my rockstar here attests to that
03.03.19 14:58:15<dmiles> :(
03.03.19 14:58:32<aindilis> motivation has to come from some inner drive
03.03.19 14:59:02<aindilis> and I put my heart in soul into this and have experienced so many failures that I am having a hard time wishing to stick my neck out
03.03.19 14:59:09<aindilis> but since I have at least 1 year to work on stuff
03.03.19 14:59:14<aindilis> maybe it will come back to me slowly
03.03.19 14:59:22<aindilis> as I work on individual projects and get further along
03.03.19 14:59:32<dmiles> my drug free motive is to "have AGI"
03.03.19 14:59:41<aindilis> well I want it too
03.03.19 14:59:52<aindilis> but my brain is broken
03.03.19 14:59:59<aindilis> I don't see the solution like I used to
03.03.19 15:00:12<aindilis> there are 80 subprojects of the FLP
03.03.19 15:00:16<aindilis> maybe that's the key
03.03.19 15:00:19<aindilis> stop working on FLP
03.03.19 15:00:22<aindilis> work on pure AI
03.03.19 15:00:26<dmiles> i've relaly only seen the solution the last 5 years
03.03.19 15:00:34<aindilis> well I know the solution by rote
03.03.19 15:00:37<dmiles> and that part hasnt changed
03.03.19 15:00:50<dmiles> (which is amazing it hasnt changed)
03.03.19 15:00:51<aindilis> maybe we work together like we said we would and we have done some
03.03.19 15:00:58<aindilis> like I work on DAYDREAMER etc
03.03.19 15:01:07<aindilis> maybe you are the key to my motivation (no pressure)
03.03.19 15:01:13<aindilis> I do have you
03.03.19 15:01:19<dmiles> i do think the Full Port of daydreamer is important
03.03.19 15:01:27<aindilis> right
03.03.19 15:01:42<aindilis> yeah
03.03.19 15:01:45<aindilis> we work together
03.03.19 15:01:57<aindilis> I need to become ablaze with motivation
03.03.19 15:02:08<aindilis> but physically don't have the strength
03.03.19 15:02:11<aindilis> CPAP machine within 2 weeks
03.03.19 15:02:16<dmiles> i wish someone was doing what i was doing so i coudl work on the AI part :P
03.03.19 15:02:17<aindilis> should turn things around
03.03.19 15:02:21<aindilis> hehe
03.03.19 15:02:27<aindilis> I would but I don't know enough
03.03.19 15:02:30<aindilis> :((((((
03.03.19 15:02:38<aindilis> and hell if I can get anyone who does to do it
03.03.19 15:02:42<aindilis> besides motivate you
03.03.19 15:03:05<aindilis> maybe we discuss the AI part sometime
03.03.19 15:03:33<aindilis> we have the opportunity here I think
03.03.19 15:03:41<aindilis> I have TIME + MONEY and so do you I think
03.03.19 15:03:55<dmiles> well in your thinking the egg cracking problem is the only issue for AGI right?
03.03.19 15:04:04<aindilis> egg cracking problem?
03.03.19 15:04:21<aindilis> oh you mean crack enough eggs
03.03.19 15:04:27<aindilis> to make egg salad
03.03.19 15:04:32<dmiles> it is no mater how high or low level they KR is.. it is wrong level for the task
03.03.19 15:04:51<aindilis> well this is my solution to AI
03.03.19 15:04:52<aindilis> one sec
03.03.19 15:05:10<aindilis> https://frdcsa.org/frdcsa/internal/kbfs/project.jpg
03.03.19 15:05:11<dmiles> egg cracking problem = always forgettign too many factors that go into the details of cracking an egg
03.03.19 15:05:35<aindilis> AI has an irreducibly complex topology
03.03.19 15:05:48<aindilis> and special components are needed throughout
03.03.19 15:05:59<aindilis> one such component is the location logic system
03.03.19 15:06:02<dmiles> isa(fido,dog) genls(dog,mammal) is not crakcing what a dog is 
03.03.19 15:06:05<aindilis> which I already wrote most of
03.03.19 15:06:08<aindilis> ah
03.03.19 15:06:09<aindilis> I see
03.03.19 15:06:27<aindilis> I think you are working from looking for the solution to AI
03.03.19 15:06:29<dmiles> some peopel divert and call it the "grounding problem"
03.03.19 15:06:30<aindilis> directly
03.03.19 15:06:40<aindilis> whereas I only know some constraints
03.03.19 15:06:51<aindilis> one thing I would like to do is enumerate more necessary conditions
03.03.19 15:07:04<dmiles> well the "grounding problem" "egg cracking problem" are idffernt
03.03.19 15:07:16<aindilis> grounding = symbol grounding?
03.03.19 15:07:19<dmiles> DAYTDREAMER solves the "grounding problem" 
03.03.19 15:07:40<dmiles> yes, symbol grounding into real life stuff
03.03.19 15:07:43<aindilis> kk
03.03.19 15:08:34<dmiles> eggcracking is the problem that after you grounded those symbols they are stuill vague and proably not usefull
03.03.19 15:09:19<dmiles> so one condition for grounding is called "embodiment"
03.03.19 15:10:09<dmiles> if/when you apply a 3T planner to an embodied agent you are at the eggcracking problem
03.03.19 15:10:18<aindilis> my approach to AI is basically CS: you have a problem formulation, you derive upper and lower bounds, you prove the algorithm solves the problem, etc
03.03.19 15:11:16<aindilis> I see
03.03.19 15:11:35<aindilis> well the thinking I have traditionally held here is this: 
03.03.19 15:11:42<dmiles> making algorithms see the world how you need to see them is like "embodiment"
03.03.19 15:12:12<dmiles> making algorithms see the world how you need those algrythems to see them can feel like an "embodiment" problem
03.03.19 15:12:14<aindilis> there is an isomorphism between the real world and the symbolic world, you solve the symbolic problem, and effectively wrap the homomorphism and you have the solution to the real world problem?  it might be an amateurish understanding
03.03.19 15:12:29<dmiles> that is pretty correct there yes
03.03.19 15:12:46<dmiles> isomorphism between the real world and the symbolic world
03.03.19 15:13:20<dmiles> hrmm oops
03.03.19 15:14:06<dmiles> naw that right.. hjsut part of that isomporphism that we recognise that it will never be two-way
03.03.19 15:15:18<aindilis> so sorry if I am not working with you enough here to understand what you are getting at?  you said DAYDREAMER solves the grounding problem
03.03.19 15:15:30<aindilis> what is then your solution to AI?
03.03.19 15:15:41<aindilis> the thing you've known for 5 years
03.03.19 15:15:51<dmiles> is solvign the eggcracking proiblem
03.03.19 15:15:56<aindilis> k rereading
03.03.19 15:16:08<aindilis> elaboration tolerance?
03.03.19 15:16:17<dmiles> it is where that i create this world *also* tyhat eggs are easiliy creaked
03.03.19 15:16:43<dmiles> elaboration tolerance is more for the memoory and program stroage 
03.03.19 15:17:02<aindilis> oh wait, I remember you saying something about this in the prelude to the pioneer contest
03.03.19 15:17:07<dmiles> elaboration tolerance is for the coding of there world
03.03.19 15:17:24<dmiles> elaboration tolerance is for the coding of three worlds
03.03.19 15:17:25<aindilis> you said something about the representation modeling whatever the user threw at it
03.03.19 15:17:43<dmiles> right we have to have at least a working simulator of logic
03.03.19 15:17:56<dmiles> that allows representation modeling
03.03.19 15:18:04<aindilis> wait metamodelling?
03.03.19 15:18:06<dmiles> arbitrary representation modeling
03.03.19 15:18:12<aindilis> RLL?
03.03.19 15:18:16<dmiles> yes RLL
03.03.19 15:18:27<aindilis> what is wrong with *RLL?
03.03.19 15:18:32<dmiles> not so worrked aobut that language .. that can be CycL
03.03.19 15:18:51<aindilis> so we need some kind of universal representation
03.03.19 15:18:57<aindilis> like a UTM
03.03.19 15:19:21<dmiles> well we need a univasal simulaytor
03.03.19 15:19:31<aindilis> simulator in the traditional sense?
03.03.19 15:19:32<dmiles> well we need a universal simulator
03.03.19 15:19:43<aindilis> cool making a new project called universal-simulator
03.03.19 15:19:51<dmiles> yes that allows you or i to exist while we are dreaming
03.03.19 15:20:17<dmiles> that conforms to all the mathematical rules we immagine in that dream
03.03.19 15:20:39<dmiles> it is sometnjing that humans are born with
03.03.19 15:20:42<aindilis> ah funny b3nzy was talking about this
03.03.19 15:20:49<aindilis> b3nszy
03.03.19 15:21:03<dmiles> its our "insteant replay" device
03.03.19 15:21:10<dmiles> "instant replay" device
03.03.19 15:21:18<aindilis> so mathematical truth is undecidable
03.03.19 15:21:22<aindilis> what is our play?
03.03.19 15:21:39<dmiles> elaboration tollerance is for that "instant replay" device
03.03.19 15:21:59<dmiles> to be able to add/remove operations in it
03.03.19 15:22:03<aindilis> k
03.03.19 15:22:23<aindilis> so basically our space is the space of prolog programs?
03.03.19 15:22:36<dmiles> that space yes
03.03.19 15:22:47<dmiles> there are at least 3 spaces
03.03.19 15:22:57<aindilis> symbol referent idea?
03.03.19 15:23:39<aindilis> oh I missed this sentence since M came in the room: yes that allows you or i to exist while we are dreaming
03.03.19 15:23:47<aindilis> so you are talking about access consciousness of the self?
                 <dmiles> sensory world,  model world of memory, and eggcracking world
03.03.19 15:24:34<aindilis> representing all the affordances of the self
03.03.19 15:24:35<dmiles> when we dream we suppsedly in the model world of memory
03.03.19 15:25:01<dmiles>  the affordances get stored on the logical objects in model world of memory
03.03.19 15:25:12<dmiles> that is that we see them there
03.03.19 15:25:15<aindilis> right
03.03.19 15:25:24<dmiles> well we dont see them there but they are stored there :P
03.03.19 15:25:34<dmiles> we think we see them there thouigh
03.03.19 15:25:49<dmiles> but we only see the eggcracking world
03.03.19 15:26:09<dmiles> the eggcracking world is the simplest possible mental puicure we need
                 <aindilis> eggcracking is about upsampling the representation
03.03.19 15:26:11<aindilis> ?
03.03.19 15:26:14<dmiles> yes
03.03.19 15:26:43<dmiles> but making that upsample more elaborate than it should be
03.03.19 15:26:51<dmiles> than it possible could be
                 <aindilis> I see so first we have altitude, but then we take into account the nonspherical nature of hthe earth
03.03.19 15:27:03<aindilis> etc etc
03.03.19 15:27:51<dmiles> yeah.. and that turtles approachach has made sense to me for years .. but the part that didnt was "well why is it not enough?"
03.03.19 15:28:17<dmiles> it was that we needed to be secretly part of a differnt world as well 
03.03.19 15:28:33<dmiles> a world that everything makes sense
03.03.19 15:28:49<dmiles> well what i mean it is what you described.. 
03.03.19 15:29:02<dmiles> but there is this whole representaitonsl design that runs parralell
03.03.19 15:29:44<aindilis> how is this built?
03.03.19 15:30:21<dmiles> it is built the saem way we build computer poetry
03.03.19 15:30:31<dmiles> (this parralell side things)
03.03.19 15:30:37<dmiles> (these parralell side things)
03.03.19 15:31:03<dmiles> at every abstraction that gets us to where we thought we were about to crack eggs
03.03.19 15:31:31<dmiles> well starting out we are talking about hill climbing
03.03.19 15:31:41<dmiles> hill climbing AI
03.03.19 15:31:58<dmiles> the hill is conquered by planning
03.03.19 15:32:19<dmiles> but planning would never work on the hill
03.03.19 15:32:21<aindilis> so we use like SAT solving to resolve the representation?
03.03.19 15:32:36<dmiles> as the world is way too complex for planing
03.03.19 15:33:17<aindilis> we model the constraints as axioms and find models which are the new representations?
                 <dmiles> SAT-like solving is used to decide if the immaginary dog is gren or blue
03.03.19 15:33:36<dmiles> SAT like solving told us it was time to immaigne the Dog
03.03.19 15:33:55<dmiles> (well call it prolog )
03.03.19 15:34:13<dmiles> we also have to plan to immagine 
03.03.19 15:34:31<dmiles> but that is jsut part of the same thing
03.03.19 15:34:47<aindilis> somehow platonic forms seems like a limit condition ehre
03.03.19 15:35:38<dmiles> to dexbide the system it can be seen as certain tehcical components.. i shouild list.. then perhaps list how those components are used.. since the useages and what they are deisgned for is totally differnt from other ideas i've seen
03.03.19 15:35:44*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
03.03.19 15:36:07<aindilis> now you are referencing your "vectors" for Dog (prototypical Dog) (any Dog) etc
03.03.19 15:36:21<aindilis> now -> 'we also have to plan to imagine'
03.03.19 15:36:27<dmiles> vecortrs are used only by SAT
03.03.19 15:36:38<aindilis> k
03.03.19 15:36:56<dmiles> vecotrs are my hakc to vioate Skoelms theorems
03.03.19 15:37:16<dmiles> vecotors are my hack to vioate Skolem countablity theorems
03.03.19 15:37:36<dmiles> PrologPlusCG did this
03.03.19 15:38:00<dmiles> in order to not be suseptable to such theorems
03.03.19 15:38:10<dmiles> we invented a new type of FOL
03.03.19 15:38:21<dmiles> one that every term is a HOL terms
03.03.19 15:38:35<dmiles> we = CYC, PrologPlusCG, myself
03.03.19 15:38:39<aindilis> yeah
03.03.19 15:38:50<aindilis> I still don't understand this part
03.03.19 15:39:04<aindilis> every term, so like inductiively defined terms include HOL terms
03.03.19 15:39:09<dmiles> well that component is lowelvel on the level i the important stuff
03.03.19 15:39:11<aindilis> how can a term be HOL?
03.03.19 15:39:13<aindilis> kk
                 <aindilis>  nm
03.03.19 15:39:41<dmiles> it is that the term contains a Cache  of its context
03.03.19 15:39:54<aindilis> the entire Mt?
03.03.19 15:39:59<dmiles> this allows for infinate nuiimber of classes
03.03.19 15:40:10<dmiles> yes it remembers the Mt and Fido both
03.03.19 15:40:22<dmiles> the dog class remembers the Mt and Fido both
03.03.19 15:40:42<dmiles> and we have a specialized isntance of Fido's dog class
03.03.19 15:41:06<aindilis> you know I got to thinking about this earlier as well
03.03.19 15:41:11<dmiles> that is slightly differnt than all other isntances dog class 
03.03.19 15:41:23<aindilis> how is this different than just a view of an Mt?
03.03.19 15:42:01<aindilis> you could have (#$specializedInstanceMtFn #$Fido) ?
03.03.19 15:42:03<dmiles> ist(johnInfo,isa(fido,dog))
03.03.19 15:42:30<dmiles> that "dog" ther eis  not the same term as any other dog term in the KB
03.03.19 15:42:55<dmiles> it represdents  the dog contextialze inj johnInfo and its about fido
03.03.19 15:42:56<aindilis> wait that is a complete enumaration of johnInfo?
03.03.19 15:43:10<dmiles> just that one term so far
03.03.19 15:43:14<dmiles> erm one assertion
03.03.19 15:43:46<dmiles> immagine replacing ist(johnInfo,isa(fido,dog))  with  ..
03.03.19 15:44:38<aindilis> can you write a paper on this topic and introduce terminology?
03.03.19 15:44:44<dmiles> ist(johnInfo^ist(johnInfo,isa(fido,dog)) ,isa^ist(johnInfo,isa(fido,dog)) (fido^ist(johnInfo,isa(fido,dog)) ,dog^ist(johnInfo,isa(fido,dog)) )) 
03.03.19 15:45:01<aindilis> ^ is waht?
03.03.19 15:45:14<dmiles> sub-annotated
03.03.19 15:45:53<aindilis> I see
03.03.19 15:46:05<aindilis> each term is annotated with the full context
                 <dmiles> every cosntnat used in every statment is a unique term
03.03.19 15:46:09<dmiles> yes
03.03.19 15:46:26<dmiles> these terms are first order terms
03.03.19 15:46:32<aindilis> hehe
03.03.19 15:46:34<dmiles> well HOL
03.03.19 15:46:50<dmiles> HOL becose every term contains the entire KB
03.03.19 15:47:25<dmiles> cant do that in SWI-Prlolog but can in ProllogPlusCG
03.03.19 15:47:52<dmiles> is that every term is the history of its existence into being a term
03.03.19 15:48:30<dmiles> though we only transfer the details of the queries history inside the term
03.03.19 15:48:54<dmiles> so each term has in it all the access points the query hit
03.03.19 15:49:23<dmiles> so we get a upper and lower bound along every relaytion that it was part of in that quwery
03.03.19 15:50:11<aindilis> wait so these HOL terms are constructed wrt a query?
03.03.19 15:50:15<dmiles> this allows the system to not think for isntance that fido the dog is the same dog as buffy the dog
03.03.19 15:50:19<dmiles> yes
03.03.19 15:50:44<dmiles> one why to look at it is immaigne replacing over cyc constant with a thereExists
03.03.19 15:50:58<aindilis> k
03.03.19 15:51:00<dmiles> one why to look at it is immaigne replacing every cyc constant with a thereExists var
03.03.19 15:51:15<dmiles> so that any term can be equal to any term
03.03.19 15:51:44<aindilis> okay so is there a way to tie this all together?
03.03.19 15:51:45<dmiles> what is stored in these vars is everything we'd need to know what terms they cant unify wirth
03.03.19 15:51:55<aindilis> ah
03.03.19 15:52:08<aindilis> by a consistency test?
03.03.19 15:52:39<dmiles> that info  "everything we'd need to know disequality" causes the consistency
03.03.19 15:53:04<aindilis> term1^SUBANNOTATION1 term2^SUBANNOTATION2 con(SUBANNOTATION1,SUBANNOTATION2) => can_unify(term1,term2)
03.03.19 15:53:08<aindilis> do vars have these annotations too?
03.03.19 15:53:34<dmiles> oh in the imamginine there is nothing but vars
03.03.19 15:53:39<aindilis> k
03.03.19 15:53:58<dmiles> well the anotation of ist(johnInfo^ist(johnInfo,isa(fido,dog)) ,isa^ist(johnInfo,isa(fido,dog)) (fido^ist(johnInfo,isa(fido,dog)) ,dog^ist(johnInfo,isa(fido,dog)) ))    created 5 vars
03.03.19 15:54:11<dmiles> VAR1 = johnInfo^ist(johnInfo,isa(fido,dog)) 
03.03.19 15:54:47<dmiles> ?- put_attr(VAR1,cant_violate, johnInfo^ist(johnInfo,isa(fido,dog)) ).
03.03.19 15:55:23<aindilis> so my formula for can_unify(term1,term2) is correct?
03.03.19 15:55:46<dmiles> i think this woudl be dcororect:  can_unify(SUBANNOTATION1,SUBANNOTATION2)
03.03.19 15:55:56<aindilis> kk
03.03.19 15:56:09<dmiles> meaing the histoical priciples do not volate 
03.03.19 15:56:20<aindilis> so how does having subannotations cause a term to be HOL?
03.03.19 15:56:31<dmiles> so it is not jsut enough for a term to unifiy.. its annotations have to be compartable
03.03.19 15:57:14<dmiles> it is that these annotations are a series of logical sentences about the variable
03.03.19 15:57:24<aindilis> k
03.03.19 15:57:32<dmiles> those sentences are not classes or colelctions
03.03.19 15:57:37<dmiles> they are full on logics
03.03.19 15:57:51<aindilis> this is interesting because in my own thinking I worked out the need to annotate terms with the complete context
03.03.19 15:58:13<aindilis> I forget though what I was thinking about
03.03.19 15:58:35<aindilis> it may have been part of IAEC
03.03.19 15:58:37<dmiles> put_attr(Dog,annot,dog^ist(johnInfo,isa(fido,dog)))
03.03.19 15:58:57<dmiles> that Dog var is based ona  certian logic
03.03.19 15:59:03<aindilis> but you cannot do that in SWIPL?
03.03.19 15:59:11<dmiles> a Var later on in the program is based likely on a diffenrt logicv
03.03.19 15:59:12<aindilis> due to the lack of numbered annotations or something?
03.03.19 15:59:20<aindilis> that Jan wouldn't allow your modifications to be entered into?
03.03.19 15:59:29<dmiles> correct
03.03.19 16:00:00<aindilis> okay
03.03.19 16:00:16<dmiles> PrologPlusCG added them
03.03.19 16:00:33<aindilis> so back to how we have to plan to imagine
03.03.19 16:00:34<dmiles> Cyc sort of uses them
03.03.19 16:00:57<dmiles> (InYearFn 1960 Dog)
03.03.19 16:01:00<aindilis> how does this relate to having the ideal upsampling?
03.03.19 16:01:12<aindilis> ah right
03.03.19 16:01:33<aindilis> so those Mt implicit assumptions are annotations effectively?
03.03.19 16:01:40<aindilis> like temporal Mts
                 <dmiles> yes
03.03.19 16:02:12<aindilis> can we add them to LarKC_CL?  Is that what you are doing with your 6 PrologJavas?
03.03.19 16:02:27<dmiles> (InYearFn 1960 Dog) is secretly a anontated var .. bound to Dog and requires all proofs to be compartable with 1960
03.03.19 16:02:48<dmiles> we see (InYearFn 1960 Dog)
03.03.19 16:02:59<dmiles> "..."
03.03.19 16:03:06<dmiles> yet that is a Prolog Varaible
03.03.19 16:03:10<dmiles> not a Cons
03.03.19 16:03:13<aindilis> k
03.03.19 16:03:40<dmiles> a simple constant like:   Dog
03.03.19 16:03:52<aindilis> so I see what you are doing here, you are gradually replacing all of CycL with Prolog equivalents
03.03.19 16:03:54<dmiles> is infiante nuimber of uncoundable terms all at once
03.03.19 16:04:20<dmiles> all terms are infinate number of uncountable subterms all at once
03.03.19 16:04:26<aindilis> because it can potentially be annotated with N^2 assertions
03.03.19 16:04:40<aindilis> ?
03.03.19 16:04:51<dmiles> N^N^N^N
03.03.19 16:05:02<aindilis> omega^2
03.03.19 16:05:05<aindilis> ah
03.03.19 16:05:06<dmiles> heeh
03.03.19 16:05:22<dmiles> oh dog.. is  Dog (Asertions)^ProofDepth
03.03.19 16:05:36<dmiles> oh dog.. is  Dog (Assertions)^(Assertions-1)
03.03.19 16:05:43<dmiles> many dogs
03.03.19 16:06:07<dmiles> rather than having to assert that many dogs like one would need to do in prolog
03.03.19 16:06:16<aindilis> so you are modeling CycL within PrologPlusCG
03.03.19 16:06:40<dmiles> we have a special metaterm that is only some of those infinate dogs at once
03.03.19 16:07:00<dmiles> welll ProlgoPlusCG are slightly a competeitve product
03.03.19 16:07:04<aindilis> Dog (Assertions)^(Assertions-1) is ^ subannotation or to the power of?
03.03.19 16:07:07<dmiles> welll ProlgoPlusCG vs CYC are slightly a competeitve product
03.03.19 16:07:42<dmiles> well the number = "how many contexts could we see dog from the KB ?"
03.03.19 16:08:14<aindilis> ic
03.03.19 16:08:17<dmiles> if we remove one asertion from the KB.. how will that effect that dog?
03.03.19 16:08:27<dmiles> if we add a new assertion etc
03.03.19 16:08:58<dmiles> every term whinesses in some way the entire KB
03.03.19 16:09:07<aindilis> interesting
03.03.19 16:09:08<dmiles> every term witnesses in some way the entire KB
03.03.19 16:09:24<dmiles> but i dont want to do the enteir KB:P
03.03.19 16:09:29<dmiles> jus thte query
03.03.19 16:09:35<aindilis> so can you wrap up the discussion here, because I would like to tie it into the solution to the egg cracking problem so I can understand
03.03.19 16:09:46<dmiles> oh unrelate to egg cracking
                 <aindilis> ic
03.03.19 16:09:50<aindilis> oh
03.03.19 16:09:54<aindilis> but related to vectgors
03.03.19 16:10:18<aindilis> I thought this was how you would achieve the ideal upsampled representation
03.03.19 16:10:21<dmiles> yes and vectgors was requirement for the "isntant replay" device
03.03.19 16:11:09<aindilis> you said we use SAT solving to generate the plan to imagine
03.03.19 16:11:10<dmiles> in a way it does do that .. it allows vacuous terms to stay contextual
03.03.19 16:11:29<dmiles> since very term passing thru the system is vacouous
03.03.19 16:12:04<dmiles> "SAT solving to generate the plan to imagine" is because the code that makes planning happen unconcuously is Prolog
03.03.19 16:12:11<aindilis> this is very interesting stuff it will be a while before I have a working understanding though
03.03.19 16:12:13<dmiles> still unconcious at that level
03.03.19 16:12:39<aindilis> the plan to imagine is literally a plan to create one of these vectors?
03.03.19 16:12:46<dmiles> the egg crackinmg problem i solve by creating a parreliel incompatable pretsen ation model
03.03.19 16:12:47<aindilis> instantiated vectors
03.03.19 16:13:03<aindilis> oh is this your evidence for vs against?
03.03.19 16:13:08<aindilis> proofs of both sides?
03.03.19 16:13:22<dmiles> yes the system has to make a proof at both sides
03.03.19 16:13:40<aindilis> k, we were talking about evidential reasoning earlier
03.03.19 16:13:45<dmiles> in both the unrealted world and the immagineary world
03.03.19 16:13:53<aindilis> interesting, well I'm glad that I have a rough map of the terrain here
03.03.19 16:13:59<dmiles> rthe unrealted world is a world of peotry
03.03.19 16:14:09<aindilis> poetry, I didn't understand that
03.03.19 16:14:16<dmiles> poetry written abotu the immaginary worlkd
03.03.19 16:14:34<aindilis> ah you mean an elegant representation
03.03.19 16:14:54<dmiles> peotry is the things the system remembers thinking about thinking
03.03.19 16:15:15<dmiles> elegant representation that can segway to every other elegant representation
03.03.19 16:15:28<dmiles> its like this constant voice
03.03.19 16:15:30<aindilis> is there such a thing?
03.03.19 16:15:40<aindilis> just out of curisoity?
03.03.19 16:15:43<dmiles> yes .. it is the voice that is you
03.03.19 16:15:48<aindilis> ah kk
03.03.19 16:16:04<dmiles> for isntnace if you dont think about thinking of somethjing.. you wont remember ever thiunking it
03.03.19 16:16:10<aindilis> alright, so how can I help?
03.03.19 16:16:17<aindilis> I see
03.03.19 16:16:20<aindilis> autoepistemic
03.03.19 16:16:28<dmiles> so the eggcracking problem is dealt with in that space
03.03.19 16:16:43<aindilis> interesting, I understand it but cannot apply it
03.03.19 16:16:50<dmiles> it has to remember the sotry of itself cracking the egg
03.03.19 16:16:57<dmiles> (not the phsyics)
03.03.19 16:17:12<aindilis> eggcracking, e.g. upsampling, is performed using metacognition <- is safe to deduce?
03.03.19 16:17:23<dmiles> this eggworld is jsut like every other world 
03.03.19 16:17:26<aindilis> k
03.03.19 16:18:02<dmiles> the tick is the upsampling doesnt leak in here
03.03.19 16:18:06<dmiles> though it should!
03.03.19 16:18:13<aindilis> interesting I think I get it about the story
03.03.19 16:18:18<dmiles> the meisable and failure of every other AI cientist is they thought uit shou;dl!
03.03.19 16:18:37<aindilis> upsampling doesn't leak into eggworld?
03.03.19 16:19:28<dmiles> the mistake and failure of every AI scientist (was i though) for years leaking into eggworld was a good idea
03.03.19 16:19:30<aindilis> it has to reason out the represetnation and store it to memeory world
03.03.19 16:19:51<aindilis> using the existing simulation logic
03.03.19 16:20:08<aindilis> so, nomic
03.03.19 16:20:30<aindilis> I thikn I should read the paradox of self amendment
03.03.19 16:21:09<dmiles>  the immaginary-non-eggworld is where everyone is so used to learning and doing our KR work
03.03.19 16:21:59<dmiles> and i thoght that every genaeralizaion was genralized into that KR
03.03.19 16:22:05<dmiles> and every leanring experince
03.03.19 16:22:26<dmiles> that is even how NNs work
03.03.19 16:22:30<aindilis> but instead it should be stored in the memory of metacognition
03.03.19 16:22:33<aindilis> ?
03.03.19 16:22:43<aindilis> memory of metacognition = eggworld?
03.03.19 16:22:49<dmiles> yes only in the  memory of metacognition! 
03.03.19 16:22:54<dmiles> yes that is the eggworld!
03.03.19 16:22:56<aindilis> kk
03.03.19 16:22:57<aindilis> :)
03.03.19 16:23:04<dmiles>  memory of metacognition is all that is used
03.03.19 16:23:08<dmiles> its cazy to think that
03.03.19 16:23:13<dmiles> since that could never work
03.03.19 16:23:17<dmiles> right?
03.03.19 16:23:29<aindilis> hrm
03.03.19 16:23:41<aindilis> what have other scientists called it?
03.03.19 16:23:43<dmiles> well it works only if you got this thingy that spinrgs forth ahead *pretending* it has info
03.03.19 16:23:56<aindilis> murray's?
03.03.19 16:24:19<dmiles> so far i have seen 2-3 pychologist that maybe said this
03.03.19 16:24:45<dmiles> i like to assume Schnanks knows it.. he explains this phenomoah all the time
03.03.19 16:25:01<dmiles> he didnt give a mechanism.. but i saw it
03.03.19 16:25:13<aindilis> what is the mechanism that springs forth pretending, is it murray's abductive EC planner?
03.03.19 16:25:23<aindilis> ah interesting
03.03.19 16:25:39<aindilis> https://frdcsa.org/frdcsa/minor/suppositional-reasoner/index.html
03.03.19 16:25:56<dmiles> the thing that spigns for is a unistanciated prolgo variable that claims to be the thing in front
03.03.19 16:26:11<aindilis> ah and it gradually gets unified
03.03.19 16:26:15<dmiles> yes
03.03.19 16:26:27<dmiles> though it has eggworld on it
03.03.19 16:26:30<aindilis> I am sort of understanding this
03.03.19 16:26:33<dmiles> (on the var)
03.03.19 16:26:37<aindilis> (that is a good thing)
03.03.19 16:26:59<aindilis> the thereExists vars are whittled away at through metacognition
03.03.19 16:27:05<dmiles> so that var has to not vioalte eggworld suppostions as well as non-eggworld supposistions
03.03.19 16:27:21<aindilis> how are they differentiated?
03.03.19 16:27:35<dmiles> oh yeah many times the metacogniton does have to whittle
03.03.19 16:27:47<dmiles>  and accept 
03.03.19 16:27:49<aindilis> wait it has eggworld on the var, so the subannotations are eggworld
                 <aindilis> ?
03.03.19 16:28:09<aindilis> N^N^N^N?
03.03.19 16:28:24<aindilis> sorry for my clarifying questions
03.03.19 16:28:27<dmiles> vars get eggworld on them
03.03.19 16:28:38<dmiles> but then afterward only get non-equalrd
03.03.19 16:29:03<aindilis> on them?
03.03.19 16:29:04<dmiles> when a var comes back it is 4 eggworld assertiosn to 10k non-eggworld
03.03.19 16:29:14<aindilis> ah I see
03.03.19 16:29:28<aindilis> non-equaled?
03.03.19 16:29:35<dmiles> the eggword is just so it dont violate the aggenda
                 <aindilis> so back to my question, how may I help you best?
03.03.19 16:29:41<aindilis> ahhh
03.03.19 16:29:56<aindilis> Agenda is agenda from CYC or DAYDREAMER? 
03.03.19 16:30:02<aindilis> or other
03.03.19 16:30:08<dmiles> working toward DAYCREAMER code become all assert/retract
03.03.19 16:30:17<dmiles> or..
03.03.19 16:31:06<dmiles> Agenda is so we can connect the bindings with the oriinal query
03.03.19 16:31:28<aindilis> so CYC agenda
03.03.19 16:31:32<aindilis> query planner?
03.03.19 16:31:50<dmiles> yeah i'd say CYC agenda is what starts eggthought
03.03.19 16:32:12<aindilis> are you using davis putnam?
03.03.19 16:32:24<aindilis> or boyer moore
03.03.19 16:32:28<dmiles> yeah DPLL is the context of the query
03.03.19 16:32:44<dmiles> i mena these are DPLL (davis putnam) vars 
03.03.19 16:32:53<aindilis> kk
03.03.19 16:33:16<dmiles> another idea.. is to get KM to assert/retract in CYC
03.03.19 16:33:24<aindilis> nice
03.03.19 16:33:36<aindilis> I think you have KM already integrated right?
03.03.19 16:33:50<dmiles> or to have Daydreamer us KB instead of GATE
03.03.19 16:33:53<aindilis> why don't we entice some UTexas students into working with us?
03.03.19 16:33:57<dmiles> or to have Daydreamer use KM instead of GATE
03.03.19 16:34:09<aindilis> or profs
03.03.19 16:34:50<dmiles> sorta what is going on with teh Prolog Kenrels.. i see need to go on betwene KM,GATE,SNARK,...
03.03.19 16:35:06<dmiles> yeah i think so
03.03.19 16:35:07<aindilis> I signed up for this now and I see you are the last two posts! https://groups.google.com/forum/#!forum/km-qa
03.03.19 16:35:16<dmiles> hehe
03.03.19 16:36:32<dmiles> something would be amzing to is if someone coudl try tpo get POwerLOOM Protege plegin working
03.03.19 16:36:44<aindilis> alright well I'm storing this convo in: universal-simulator
03.03.19 16:36:47<dmiles> and then point that to CYC instead
03.03.19 16:37:01<aindilis> and extracting these todo items with KM, GATE, DAYDREAMER etc
03.03.19 16:37:11<dmiles> https://www.isi.edu/isd/LOOM/PowerLoom/download.html#Protege
03.03.19 16:37:26<dmiles> it is jsut bitrotted maybe
03.03.19 16:37:31<aindilis> you mean just get it to run?
03.03.19 16:37:35<dmiles> yes
03.03.19 16:37:42<aindilis> and point to CYC you mean store in CycL?
03.03.19 16:38:00<dmiles> well the plugin is a live KB editor
03.03.19 16:38:16<dmiles> is an IDE to powerloom
03.03.19 16:38:21<aindilis> yeah
03.03.19 16:38:24<aindilis> okay
03.03.19 16:38:31<dmiles> so be for CYC
03.03.19 16:38:45<aindilis> is there a most recent committed version of LarKC_CL and is it stable?
03.03.19 16:39:02<aindilis> ah IDE for Powerloom to access CYC
03.03.19 16:39:04<dmiles> yes .. i been holding back this huge code change
03.03.19 16:39:16<aindilis> okay so I'll update now
03.03.19 16:39:21<dmiles> ah IDE for Powerloom to access CYC instead become  ah IDE for CYC
03.03.19 16:39:53<aindilis> k
03.03.19 16:40:05<aindilis> is there a groupware you want to use?
03.03.19 16:40:08<aindilis> we could scrum
03.03.19 16:40:09<dmiles> another takes is to get SWANK mode of ABCL working in emacs
03.03.19 16:40:16<dmiles> task*
03.03.19 16:40:25<aindilis> kk
03.03.19 16:40:41<aindilis> cool
03.03.19 16:41:01<dmiles> groupware?
03.03.19 16:41:09<aindilis> yeah something to coordinate our tasks
03.03.19 16:41:16<aindilis> maybe we host a shared Cyc instance?
03.03.19 16:41:23<aindilis> and represent everything there
03.03.19 16:41:26<aindilis> that's probably most apropos
03.03.19 16:41:57<dmiles> Travis 
03.03.19 16:42:02<dmiles> or whichever
03.03.19 16:42:07<dmiles> or Cyc
03.03.19 16:42:16<aindilis> CI
03.03.19 16:42:18<aindilis> ?
03.03.19 16:42:28<aindilis> https://travis-ci.org/
03.03.19 16:42:45<aindilis> well Jenkins or Hudson I've gotten preliminary FLP integraiton
03.03.19 16:43:04<aindilis> I haven't heard back from one guy so I hvae to write an adapter to get autotest to output TAP
03.03.19 16:43:07<aindilis> but then it should work
03.03.19 16:43:33<aindilis> I think CYC should be our groupware
03.03.19 16:43:51<aindilis> I could write a web based wrapper for it
03.03.19 16:44:00<aindilis> which had common queries
03.03.19 16:44:28<aindilis> alright, well thanks for all these ideas
03.03.19 16:44:40<aindilis> I am tired but optimistic
03.03.19 16:44:45<aindilis> more MOTIVATED
03.03.19 16:45:05<dmiles> yeah that world work
03.03.19 16:45:10<dmiles>  web based wrapper for it
03.03.19 16:45:17<dmiles> into CYC 
03.03.19 16:45:27<aindilis> hey if you sign a HIPPA agreement we could just use CYC
03.03.19 16:45:31<aindilis> *er FLP
03.03.19 16:45:37<aindilis> *HIPAA
03.03.19 16:45:48<dmiles> ok
03.03.19 16:45:56<aindilis> cool I need to talk to Whitten again
03.03.19 16:46:09<dmiles> ok,, i keep gettign dragged away
03.03.19 16:46:13<aindilis> from what?
03.03.19 16:46:16<aindilis> from programming?
03.03.19 16:46:18<dmiles> from computer
03.03.19 16:46:21<aindilis> have I dragged you away?
03.03.19 16:46:24<dmiles> njo[pe
03.03.19 16:46:26<aindilis> or you mean at your hose
03.03.19 16:46:27<aindilis> *house
03.03.19 16:46:28<dmiles> jsut here at the house
                 <aindilis> kk
03.03.19 16:46:38<dmiles> i need to take care of a couple things
03.03.19 16:46:42<dmiles> but will be on most of the day
03.03.19 16:46:45<aindilis> okay I will ask Whitten to get me a HIPAA form
03.03.19 16:46:47<aindilis> okay
03.03.19 16:46:50<aindilis> and I will email you
03.03.19 16:46:54<dmiles> great
03.03.19 16:46:58<aindilis> and then you can finally play around with FLP
03.03.19 16:47:06<dmiles> yeah
03.03.19 16:47:09<aindilis> :)
03.03.19 16:47:15<dmiles> looking forward to that
03.03.19 16:47:17<aindilis> not much to see yet but coming along
03.03.19 16:47:22<aindilis> thank you, me too :)
03.03.19 16:47:35<aindilis> I'll have to disable the planner since it is broken
03.03.19 16:47:41<aindilis> so you don't crash it
03.03.19 16:48:03<aindilis> okay TTYS!  thanks for the discussion
03.03.19 16:48:07<aindilis> *saving
03.03.19 17:22:38<aindilis> http://www.algo.be/cl/KMgen/snapshots.htm
03.03.19 17:22:54<aindilis> http://www.algo.be/cl/KMgen/download.htm
03.03.19 17:26:20<aindilis> should I email the KM people about integrating KM / CYC?
03.03.19 17:38:29<dmiles> perhaps
03.03.19 18:02:15<aindilis> kk
03.03.19 18:11:09<dmiles> `fcdvggggggggggggggg
03.03.19 21:04:27*** Quit: swamps (~radiognom@128-71-140-115.broadband.corbina.ru) left #logicmoo: Ping timeout: 240 seconds
04.03.19 03:48:23*** Join: swamps (~radiognom@128-71-49-250.broadband.corbina.ru, (unauthenticated): radiognome invisible)
04.03.19 07:00:11<aindilis> I've been looking for this for a while: http://www.ofai.at/research/agents/projects/actaffact.html
04.03.19 09:38:38<aindilis> This looks interesting (related to universal-simulator) https://pdfs.semanticscholar.org/64e8/b6a77c19717c75b7e77446d339089665bedf.pdf
04.03.19 10:13:14<aindilis> just got sneps running
04.03.19 12:58:22*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
04.03.19 13:48:59<aindilis> https://www.cs.hmc.edu/~pmawhorter/research/dis/artificial_intelligence_as_a_tool_for_understanding_narrative_choices-Mawhorter-2016.pdf
04.03.19 13:49:23<aindilis> https://github.com/solsword/dunyazad
04.03.19 15:59:55*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
04.03.19 18:23:54<dmiles> aindilis: yeah,  https://pdfs.semanticscholar.org/64e8/b6a77c19717c75b7e77446d339089665bedf.pdf
04.03.19 18:25:20<dmiles> the #5  minus usage of "probabilty" is very key aspect to my eggworld
04.03.19 18:25:36<dmiles> "5. Metalanguage implementation of learning is capable of ignoring the infrequent
                 <dmiles> occurrences and/or meanings of some object-level concepts (probabilistic filtering)."
04.03.19 18:26:30<dmiles> well #5 there is simlaur but i use what Lenat invented to get rid of probabilities
04.03.19 18:28:20<dmiles> what is good about that paper is it does point out that there is a metalanguage
04.03.19 18:28:26<aindilis> hrm, well first it is good to move away from probabilities
04.03.19 18:28:33<aindilis> I didn't read the paper, but I knew the author
04.03.19 18:28:44<aindilis> I thought maybe you'd find it handy
04.03.19 18:28:47<aindilis> I will read it now
04.03.19 18:28:55<aindilis> not right now though
04.03.19 18:29:24<dmiles> "We revise the applicability of an axiomatic method, traditional in respect to the property
                 <dmiles> of soundness, to comprehension problems requiring the construction of the explanation
                 <dmiles> metapredicate. "
04.03.19 18:30:02<dmiles> the "construction of the explanation metapredicate. " is about creating eggworld story 
04.03.19 18:30:14<aindilis> ah
04.03.19 18:30:31<aindilis> what is a metapredicate?  a second order predicate according to that guy in ##prolog?
04.03.19 18:30:34<dmiles> that it is inventing a proofing system that is based on what it things it should hear
04.03.19 18:31:01<dmiles> in these cases it is 3rd oerder logic
04.03.19 18:31:31<dmiles> 2nd order is about classwifications of objects in language
04.03.19 18:31:44<dmiles> 3rd order is about classifying proof strategy
04.03.19 18:32:37<aindilis> kk, did you see that AAAViewer?
04.03.19 18:32:52<dmiles> that is "there exists A,B,C in which you can deduce C from A and B"
04.03.19 18:32:53<aindilis> I told anniepoo about it but I didn't know where to find it
04.03.19 18:33:09<aindilis> ah interesting
04.03.19 18:33:16<aindilis> modus ponens?
04.03.19 18:33:39<dmiles> modus ponens and other infernce rules are given in teh metapredicate language
04.03.19 18:33:43<aindilis> kk
04.03.19 18:33:48<dmiles> as well as any other rules the systemn invents
04.03.19 18:33:56<dmiles> rules about rules that is
04.03.19 18:34:11<aindilis> now it's been so long that I've studied axiomatic set theory, but how does it handle axiom schemas
04.03.19 18:34:12<dmiles> oh yeah AAAViewer i remember seeign that a while ago
04.03.19 18:34:24<dmiles> set theory cant
04.03.19 18:34:35<dmiles> set theory is defined from this language
04.03.19 18:34:52<aindilis> https://en.wikipedia.org/wiki/Axiom_schema
04.03.19 18:35:04<dmiles> but even better thant that this language invents set theory if it makes sense
04.03.19 18:35:33<aindilis> https://en.wikipedia.org/wiki/Axiom_schema_of_replacement
04.03.19 18:35:44<dmiles> yep An axiom schema is a formula in the metalanguage of an axiomatic system, in which one or more schematic variables appear. These variables, which are metalinguistic constructs, stand for any term or subformula of the system, which may or may not be required to satisfy certain conditions. Often, such conditions require that certain variables be free, or that certain variables not appear in 
                 <dmiles> the subformula or term[citation needed].
04.03.19 18:36:08<aindilis> replacement is an axiom of ZF(C)
04.03.19 18:36:16<aindilis> and is also an Axiom schema
04.03.19 18:36:44<aindilis> oh you are saying you can't model axiom schemas in the object language with set theory the meta?
04.03.19 18:36:46<dmiles> but, weirdly ZFC placed constraints about places it cant redefine
04.03.19 18:37:16<aindilis> see I'm hazy now on axiom schemas
04.03.19 18:37:22<aindilis> are they computable?
04.03.19 18:37:37<dmiles> axioms schemas are a grand grand good thing
04.03.19 18:37:52<dmiles> placing constraints about places it cant redefine seems retarded
04.03.19 18:37:53<aindilis> so basically, can we define a program that enumerates the axioms and theorems of the system?
04.03.19 18:38:21<dmiles> can we define a program that enumerates the axioms and theorems of the system? not in the way peopel wish we could
04.03.19 18:38:35<dmiles> not in the way they wish we did
04.03.19 18:39:01<dmiles> they are defined in way that is not constrained to being at the object level
04.03.19 18:39:25<dmiles> here i am even talkign aobut CycL
04.03.19 18:39:50<dmiles> CycL can define things that will never be computable in ZFC
04.03.19 18:40:00<dmiles> or ever be difinable
04.03.19 18:40:12<aindilis> cause it uses 9th order logic?
04.03.19 18:40:30<dmiles> most since it can use undefinatble terms without puking
04.03.19 18:40:51<aindilis> okay yeah I will just not understand the theory
04.03.19 18:41:01<aindilis> we'll have to give me more practical things to work on
04.03.19 18:41:07<aindilis> *pragmatic
04.03.19 18:41:21<dmiles> think about how much you love your cat
04.03.19 18:41:26<dmiles> assert that into the KB
04.03.19 18:41:27<aindilis> (not that much)
04.03.19 18:41:30<aindilis> lol
04.03.19 18:41:38<dmiles> well Meredeth
04.03.19 18:41:42<aindilis> yes, okay
04.03.19 18:41:57<dmiles> now that is is there is it even computable?
04.03.19 18:42:17<dmiles> can you compute the results of the implied meanings?
04.03.19 18:42:35<aindilis> I once wrote a love letter in which I talked about having to study axiomatic set theory for ever in order to prove the existence of ordinals large enough to prove the strength of love
04.03.19 18:42:39<dmiles> you cant but you can still work with them
04.03.19 18:42:57<dmiles> ZFC requires that everything finally touch FOL
04.03.19 18:43:19<dmiles> well i mena most axiom scemes wish they eventualyl havd a first order view
04.03.19 18:43:28<aindilis> I see this is what you were talking about about things being a bit hazy
04.03.19 18:43:47<dmiles> "wish they eventualyl havd a first order view" is what cripples things
04.03.19 18:44:06<dmiles> i specificalyl wish for the opposite
04.03.19 18:44:14<dmiles> that i work with terms that cannot
04.03.19 18:44:20<aindilis> oh you're talking about the skolem paradox?
04.03.19 18:44:34<dmiles> slightly yes
04.03.19 18:44:57<dmiles> sayign that skolem paradox needs to be built into everyhting.. since not doing that is a mistaker
04.03.19 18:45:10<aindilis> okay I'll have to study it to understand it
04.03.19 18:45:13<dmiles> for exmaple 1+1 
04.03.19 18:45:17<dmiles> 1 of what?
04.03.19 18:45:29<dmiles> ok just the concept of 1
04.03.19 18:45:36<dmiles> is 1 even computable?
04.03.19 18:45:46<aindilis> isn't one {{}} ?
04.03.19 18:46:02<aindilis> according to Cantor?
04.03.19 18:46:39<dmiles> well 1 is a someting
04.03.19 18:46:46<aindilis> a set?
04.03.19 18:46:48<dmiles> a something in some set
04.03.19 18:47:04<aindilis> ah okay
04.03.19 18:47:12<dmiles> but what gave us the languqage to recognise this
04.03.19 18:47:17<dmiles> i dont mean the brains to 
04.03.19 18:47:18<aindilis> yeah usually the universe or domain of discourse is built from sets
04.03.19 18:47:20<dmiles> i mean the language
04.03.19 18:47:30<dmiles> the languag ethat creates set theory
04.03.19 18:47:45<dmiles> i mena i needed a language to create set theory in
04.03.19 18:47:49<dmiles> and its not set theory
04.03.19 18:47:59<dmiles> it might translate to set theory 
04.03.19 18:48:10<aindilis> hrm, good point
04.03.19 18:48:11<dmiles> but not all of it can
04.03.19 18:48:13<aindilis> I forget how they do it
04.03.19 18:48:26<aindilis> I haven't actually read whitehead + russell all the way through
04.03.19 18:48:28<dmiles> the fact that not all if it can creates some issue 
04.03.19 18:48:39<dmiles> but only to set theorists.. not to CycL
04.03.19 18:49:09<aindilis> what are the intended semantics of CycL?
04.03.19 18:49:12<dmiles> set theorists sadly think that it must plauge CycL
04.03.19 18:49:24<dmiles> but they have no proof
04.03.19 18:49:29<dmiles> only a set theory prooof
04.03.19 18:50:17<aindilis> I was thinking about making a VM for Dunyazad
04.03.19 18:50:19<dmiles> the intended semantics of CycL is whatever can be conscrcuted to the extent proof of comprehension
04.03.19 18:50:37<aindilis> consecrated?
04.03.19 18:50:38<dmiles> often we can proof that there are no comporehensikn axioms
04.03.19 18:50:53<dmiles> often we can prove that there are no comprehension axioms
04.03.19 18:51:04<dmiles> we can prove in CycL we cant compute infinity
04.03.19 18:51:15<dmiles> yet that cant be proved in mathematical logic
04.03.19 18:51:38<dmiles> as mathamtical logic is a victem of itself
04.03.19 18:51:51<dmiles> it cant prove what it cant prove
04.03.19 18:52:01<dmiles> CycL can prove what it cant prove
04.03.19 18:52:13<dmiles> and in doing soo be ever so vauge
04.03.19 18:52:20<aindilis> well autoepistemic logic could be embedded in HOL, right?
04.03.19 18:52:26<dmiles> and that vaugness is accepable
04.03.19 18:52:52<dmiles> vaugness means we have an exact  > and <
04.03.19 18:53:05<aindilis> I'm sorry I just don't grasp these things, too much bit rot
04.03.19 18:53:09<dmiles> exmaple of vaugness:  N > 1
                 <aindilis> in my math backgorund
04.03.19 18:53:14<aindilis> ah yeah
04.03.19 18:53:18<aindilis> I remember you discussing that example
04.03.19 18:53:22<dmiles> can you compute N?
04.03.19 18:53:40<aindilis> N \= 0 ?
04.03.19 18:54:03<dmiles> lets do  1 < N
04.03.19 18:54:17<dmiles> should you make the mistakes of computing N?
04.03.19 18:54:31<dmiles> should you make the mistake of caring if N was computrable?
04.03.19 18:54:55<dmiles> probably not a good thing to care able
04.03.19 18:55:00<dmiles> probably not a good thing to care about 
04.03.19 18:55:20<dmiles> set theory gives up at this stage
04.03.19 18:55:28<aindilis> ah I see
04.03.19 18:55:47<dmiles> CycL doent give up there
04.03.19 18:56:03<dmiles> what ar ehte axipoms of a theory? 
04.03.19 18:56:10<dmiles> what N are they?
04.03.19 18:56:25<dmiles> uncomputable
04.03.19 18:56:41<dmiles> CycL doesnt give up there
04.03.19 18:57:03<dmiles> i mean what is the count of the number of axioms in any theory?
04.03.19 18:57:18<aindilis> ok
04.03.19 18:57:25<dmiles> should we make the mistake of caring if the number of axioms in any theory was computable?
04.03.19 18:57:43<dmiles> CycL doesnt 
04.03.19 18:58:11<dmiles> intead it decribes what axioms can and cant exist
04.03.19 18:58:38<dmiles>  like CANT < axioms < CAN
04.03.19 18:58:46<aindilis> does CycL have a model theory?
04.03.19 18:59:25<dmiles> it can invent model theories
04.03.19 18:59:44<dmiles> teh place such inventions occur might be a model
04.03.19 19:00:12<dmiles> since that place is the place in which all things are done from
04.03.19 19:00:34<dmiles> it jsut dont have a first order-ifiable or 2nd order-ifyable model
04.03.19 19:00:43<aindilis> this reminds me of my assumption-junction project
04.03.19 19:00:59<aindilis> is having no assumptions an assumption?
04.03.19 19:01:06<dmiles> yes
04.03.19 19:01:15<aindilis> k
04.03.19 19:01:43<dmiles> noticve the language of  AAAViewer
04.03.19 19:01:55<dmiles> the TakeObjectFrom
04.03.19 19:02:02<dmiles> it is a great EC
04.03.19 19:02:27<dmiles> (switched topics back to your first questions.. aobuyt my thoughts on  AAAViewer)
04.03.19 19:02:34<dmiles> i love it
04.03.19 19:02:45<aindilis> I thought it was similar to DAYDREAMER
04.03.19 19:02:49<aindilis> did you run it?
04.03.19 19:02:53<dmiles> yes exactly
04.03.19 19:03:03<dmiles> same EC as DAYDREAMER
04.03.19 19:03:23<dmiles> well of any logical MUD/MOO
04.03.19 19:03:32<dmiles> i havent ran it for at least 10 years
04.03.19 19:03:53<aindilis> there is a jar you just java -jar AAAViewer.jar
04.03.19 19:04:58<dmiles> daughter's councilor is pulling me away
04.03.19 19:05:03<aindilis> http://www.ofai.at/~stefan.rank/StefanRank-ActAffActViewer.zip
04.03.19 19:05:08<aindilis> okay srry, ttys!
04.03.19 19:05:25<aindilis> I was thinking we could modify the theory
04.03.19 19:05:46<aindilis> add more and/or subtract some of the representation
04.03.19 19:14:24<dmiles> back for 2 minutes.. oh yeah all the AAAViewer agents need is an infinately enrichable enviromnet
04.03.19 19:14:27<aindilis> kk
04.03.19 19:14:52<dmiles> "infinately enrichable environment" ?!?
04.03.19 19:15:01* dmiles words
04.03.19 19:15:08<dmiles> yes
04.03.19 19:15:40<dmiles> just an infinately enrichable environment tollerant of elaborations
04.03.19 19:16:29<dmiles> not hard.. jsut no one ever tried
04.03.19 19:16:37<dmiles> well some do try
04.03.19 19:17:02<dmiles> gone again
04.03.19 19:17:13<aindilis> o/
04.03.19 19:20:55<dmiles> i thought Secondlife was good enough since other humans would have fit into that enviroment enriching it enough the agents could model the humans.. secondlife was still not _semantically_ rich enough
04.03.19 19:21:05<dmiles> that became my mission is giving them such an environment
04.03.19 19:21:27<dmiles> one that is infinate
04.03.19 19:22:17<dmiles> and then a second enviroment for "instant replay"
04.03.19 19:24:07<aindilis> I have to apologize I spent the whole night awake so I'm dozing off uncontrollably, but this is most interesting
04.03.19 22:58:09<aindilis> I tried for several hours to get dunyazad to run, couldn't
04.03.19 22:58:16<aindilis> but good news, MEPK is updated: https://github.com/sysulic/MEPK
05.03.19 00:05:14<dmiles> aindilis: you have clingo installed right?
05.03.19 00:06:11<dmiles> erm i mean with potassco
05.03.19 00:07:00<dmiles> dunyazad looks like a neat idea at least
05.03.19 02:17:21*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
05.03.19 02:47:13*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
05.03.19 03:14:03<dmiles>  i am considering reversing the forwarding.. that is having everyone that joins #logicmoo end up forwarding to #opencyc
05.03.19 03:14:58<dmiles> i dont mind it the way it is though... it is jsut more people out of a whim are going to join #opencyc
05.03.19 12:03:40<aindilis> dmiles: https://github.com/solsword/dunyazad/issues/2
05.03.19 12:06:21*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
05.03.19 12:21:49<dmiles> logicmoo workplan?  http://www.daxtron.com/pdf/lesa.pdf
05.03.19 12:24:24<aindilis> couldn't hurt
05.03.19 12:24:30<aindilis> btw, I'm reading the eggcracking paper
05.03.19 12:25:40<aindilis> I'm still concerned about nested metaplanning
05.03.19 12:26:02<aindilis> haven't seen how I'm going to do that
05.03.19 12:26:11<aindilis> but I forget why it's "necessary"
05.03.19 12:26:32<aindilis> I could probably pull off metaplanning in FLUX
05.03.19 12:26:50<aindilis> but I don't think the nested will work
05.03.19 12:44:35<dmiles> aindilis: see idni
05.03.19 12:48:47<aindilis> hey
05.03.19 12:49:33<aindilis> what file are you looking for?
05.03.19 13:02:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ztjtnuldzkjcraya) left #logicmoo: Quit: Connection closed for inactivity
05.03.19 13:34:52*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
05.03.19 13:52:10*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rgztkksocykulbfz, stoopkid: stoopkid)
05.03.19 14:24:50<aindilis> dmiles: ping
05.03.19 14:55:10*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
05.03.19 19:04:33*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
05.03.19 20:05:49<aindilis> dmiles: I made some more progress on location-logic: https://frdcsa.org/~andrewdo/projects/frdcsa-guis/screenshot_001.png
06.03.19 00:33:12<aindilis> I think I'm gonna just install Home Assistant
06.03.19 00:33:41<aindilis> Hasbian
06.03.19 00:33:50<aindilis> *Hassbian
06.03.19 02:55:06<aindilis> https://d4mucfpksywv.cloudfront.net/better-language-models/language-models.pdf
06.03.19 04:25:27*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 245 seconds
06.03.19 04:26:16*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
06.03.19 04:26:43*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
06.03.19 04:28:12*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
06.03.19 04:28:20*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
06.03.19 04:31:49*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
06.03.19 07:33:42*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
06.03.19 08:37:22*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
06.03.19 11:31:19*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
06.03.19 15:01:32*** Join: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
06.03.19 15:02:27*** Quit: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Ping timeout: 250 seconds
06.03.19 15:32:59*** Quit: Elon_Satoshi (~elonsatos@unaffiliated/elon-satoshi/x-2794555) left #logicmoo: Remote host closed the connection
06.03.19 15:37:22*** Join: Copenhagen_Bram (~elonsatos@unaffiliated/elon-satoshi/x-2794555, Elon_Satoshi: elonsatoshi)
06.03.19 16:14:11*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
06.03.19 23:02:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rgztkksocykulbfz) left #logicmoo: Quit: Connection closed for inactivity
07.03.19 07:55:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fvtqismofbnskjna, stoopkid: stoopkid)
07.03.19 08:35:13*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
07.03.19 16:16:12*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
07.03.19 21:44:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fvtqismofbnskjna) left #logicmoo: Quit: Connection closed for inactivity
07.03.19 22:03:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jvsxknztiowymlsh, stoopkid: stoopkid)
07.03.19 22:23:23*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Remote host closed the connection
07.03.19 22:25:32*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
08.03.19 00:14:59*** Connecting...
08.03.19 00:15:28*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
08.03.19 00:15:29*** Topic for #logicmoo: http://www.logicmoo.org | https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit#  https://drive.google.com/drive/folders/0B0QA19UX0ehlV1ZEaXEzc3hjTWM   http://www.csee.umbc.edu/~finin/prolog/pfc/man/pfc.pdf
                 *** Topic set by dmiles on Mon May 28 20:31:51 2018, 9 months 13 days 4 hours 43 minutes 38 seconds ago
                 *** Names: ditable-doge aindilis stoopkid Copenhagen_Bram yesbot PrologMUD dmiles michalisko @ChanServ jbalint CoderForLife swamps
                 *** End of /NAMES list.
08.03.19 00:15:49*** Quit: swamps (~radiognom@128-71-49-250.broadband.corbina.ru) left #logicmoo: Excess Flood
08.03.19 00:16:15*** Nick change: You are now known as editable-dog
08.03.19 00:16:17*** Join: swamps (~radiognom@128-71-49-250.broadband.corbina.ru, (unauthenticated): radiognome invisible)
08.03.19 00:27:26*** Quit: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 250 seconds
08.03.19 00:28:47*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 240 seconds
08.03.19 00:29:27*** Quit: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 252 seconds
08.03.19 00:35:51*** Join: PrologMUD (~PrologMUD@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): see http://prologmoo.com/)
08.03.19 00:36:51*** Join: yesbot (~yesbot@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): anonymous)
08.03.19 00:46:03*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, (unauthenticated): ...)
08.03.19 00:47:33*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Excess Flood
08.03.19 00:47:51*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
08.03.19 01:18:02*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 255 seconds
08.03.19 01:19:04*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
08.03.19 02:57:50*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
08.03.19 12:50:40*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
08.03.19 13:48:23<dmiles> heh someone told me i coudl get very rich if i made this proposal https://docs.google.com/document/d/1mGHPobHUZ_d88e87FWwPF-tZ233Xq4Oe7DWLF8fRVbU/edit#
08.03.19 13:49:16<dmiles> I just having to write it down since I assumed EVERYONE thought of this already.. but when i use that  assumptio that everyone has.. they look at me blankly having no idea what it was
08.03.19 13:50:03<dmiles> i even included stoopkid's reactions :P
08.03.19 13:50:16<dmiles> "Douglas, whatever you are talking about here is AI.. not program verification!"
08.03.19 19:29:54<aindilis> what exactly does the protocol do?
08.03.19 19:30:21<aindilis> it's a protocol for managing workflows and ensuring correctness of user interface design and interactions?
08.03.19 19:30:30<aindilis> dmiles: 
08.03.19 19:30:58<aindilis> In FRDCSA this is known as the Diamond project: https://frdcsa.org/frdcsa/internal/diamond/index.html
08.03.19 19:31:31<aindilis> https://github.com/aindilis/diamond
08.03.19 19:35:07<aindilis> similar to these things: https://www.cs.cmu.edu/afs/cs/project/amulet/www/papers/videoabs.html
08.03.19 19:35:14<aindilis> http://www.cs.cmu.edu/~sage/PDF/Visage.pdf
08.03.19 19:48:40<dmiles> it is really jsut writting applications in CycL instead of Prolog
08.03.19 19:49:12<aindilis> "heh someone told me i coudl get very rich if i made this proposal" <- howso?
08.03.19 19:49:16<dmiles> UIs can be a part yes
08.03.19 19:49:45<aindilis> maybe we should have a class on writing apps in CycL?
08.03.19 19:49:49<dmiles> just that is what most people thought software verification would one day make happen
08.03.19 19:50:05<aindilis> ah
08.03.19 19:50:12<aindilis> well you need a descriptive enough system right?
08.03.19 19:50:32<dmiles> yeah.. writting an app in CycL is kind of confusing unless a person is pretending it is also Prolog
                 <aindilis> how are things progressing btw?
08.03.19 19:51:15<dmiles> good just so many days i have to spend away from computer
08.03.19 19:51:38<dmiles> writting an app in CycL is kind of confusing as in people dont nesc think ofdoing that when they are using CycL
08.03.19 19:52:03<aindilis> well I'd like to write one, probably best would be to do it from LarKC_CL in CL?
08.03.19 19:52:32<dmiles> yes but not for another week probably before i get time to finish the current code
08.03.19 19:52:49<aindilis> so you set up an API with CYC?
08.03.19 19:52:51<dmiles> current code is making CycL host prolog
08.03.19 19:53:02<aindilis> wow!!
08.03.19 19:53:15<aindilis> how many of the 6 do you have working?
08.03.19 19:53:21<aindilis> or has scope changed?
08.03.19 19:53:33<dmiles> i havent been able to work since i mentioned that the other day
08.03.19 19:53:37<aindilis> ah kk
08.03.19 19:53:42<aindilis> me too, been busy
08.03.19 19:53:46<aindilis> but getting a chance to work soon
08.03.19 19:53:54<dmiles> was at hospitol 16 hours yesterday.. day before that i cant remember but wasnt home
08.03.19 19:54:07<aindilis> I hope whoever it is is doing okay
08.03.19 19:54:31<dmiles> tonight i have to take daughter to Magic The Gathering Tournment
08.03.19 19:54:37<dmiles> etc
08.03.19 19:54:39<aindilis> do you have time today to program? I can leave you alone
08.03.19 19:54:48<dmiles> wont until tommorow
08.03.19 19:54:51<aindilis> kk
08.03.19 19:55:06<aindilis> I've been taking a break from AI
08.03.19 19:55:09<dmiles> she has 10 more minuites before she has to be ready to leave 
08.03.19 19:55:12<aindilis> kk
08.03.19 19:55:14<aindilis> ttys!
08.03.19 19:55:23<dmiles> (so taking that time waiting here on IRC)
08.03.19 19:55:28<aindilis> ah okay
08.03.19 19:55:41<aindilis> yeah I've taken a break from AI.  hoping my CPAP helps with stamina
08.03.19 19:55:48<aindilis> want to come back charging at it
08.03.19 19:55:56<dmiles> CPAP is totally what i need to do to 
08.03.19 19:56:18<aindilis> I felt really good after my titration test
08.03.19 19:56:22<aindilis> where they test the masks
08.03.19 19:56:39<aindilis> haven't felt that unobstructed breathing wise since I was a kid
08.03.19 19:56:56<dmiles> nice
08.03.19 19:56:58<aindilis> just get a referral to a sleep doctor
08.03.19 19:57:07<aindilis> complain about it and they will want to do a sleep test
08.03.19 19:57:09<aindilis> test is a pin
08.03.19 19:57:10<aindilis> *pain
08.03.19 19:57:17<aindilis> they hook up a ton of sensors
08.03.19 19:57:24<aindilis> but CPAP should be worth it
08.03.19 19:57:32<dmiles> i plan  to have mine on a timer that starts 5 minutes after i am assleep
08.03.19 19:57:38<aindilis> woke up a few times like "get this thing off my face!!!"  it's a little claustrophoic
08.03.19 19:57:49<aindilis> sweet!
08.03.19 19:57:59<aindilis> but I hear you get used to it
                 <dmiles> you can set yours on a delay?
08.03.19 19:58:03<aindilis> sure
08.03.19 19:58:09<dmiles> ok good
08.03.19 19:58:19<aindilis> also first night you're supposed to only use it some of the time till you get used to it
08.03.19 19:58:35<aindilis> but re the timer not sure you would want to cause the mask I have is harder to breath when the machine is off
08.03.19 19:58:43<aindilis> but maybe if you set it to a low setting, that could work
                 <dmiles> dont want you hating it before you are used to it
08.03.19 19:58:45<aindilis> I think they have timers
08.03.19 19:58:53<aindilis> I dn't think I will I love it already
08.03.19 19:59:03<aindilis> if it helps me work on AI, then I love it
08.03.19 19:59:26<aindilis> besides M got her promotion so I have all the time in the world to work on AI, no excuses now
08.03.19 19:59:44<aindilis> want to make a difference
08.03.19 20:00:03<aindilis> also going to take a break from the harder parts of FRDCSA, and work on two things
08.03.19 20:00:16<aindilis> one is mundane reminders for things like winterization and stuff
08.03.19 20:00:22<aindilis> two is whatever you want me to work on
08.03.19 20:00:37<aindilis> again I'm going to subordinate FRDCSA to PrologMUD as needed to help us along
08.03.19 20:00:50<aindilis> since we both need people to help us
08.03.19 20:01:00<aindilis> so until we can find more people it makes sense to team up
08.03.19 20:01:15<aindilis> plus FRDCSA is not getting far enough along
08.03.19 20:01:22<aindilis> *oh yeah will also work on release FRDCSA
08.03.19 20:01:30<aindilis> +VM + FLP
08.03.19 20:01:46<aindilis> but in 10 years I didn't get that much done on my own
08.03.19 20:02:00<aindilis> okay enjoy, ttys!
08.03.19 20:02:40<dmiles> ttys
09.03.19 15:00:25*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jvsxknztiowymlsh) left #logicmoo: Ping timeout: 252 seconds
09.03.19 15:01:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yzcbpsdtnovpnpfg, stoopkid: stoopkid)
09.03.19 16:26:11*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
09.03.19 16:28:49*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #logicmoo: Ping timeout: 246 seconds
09.03.19 19:14:14<aindilis> logicmoo: ping
09.03.19 19:33:07<aindilis> logicmoo: I'm getting an error with /regex.pl where it says @arg1 in locked_replace, any idea why?
09.03.19 19:33:40<aindilis> ERROR: /var/lib/myfrdcsa/codebases/minor/free-life-planner/lib/util/regex.pl:20:14: Syntax error: Operator expected
09.03.19 19:34:14<aindilis> send(Regex, for_all, S, message(@arg1, replace, @arg2, Replace)),
09.03.19 19:36:48<aindilis> just have to wrap @arg1 like @(arg1)
09.03.19 19:36:49<aindilis> kk
09.03.19 19:36:50<aindilis> ty
09.03.19 21:34:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yzcbpsdtnovpnpfg) left #logicmoo: Quit: Connection closed for inactivity
09.03.19 22:18:43<aindilis> logicmoo: ping
09.03.19 22:22:31<aindilis> any pointers on how to put things into SWIPL modules?  also any progress on metaplanning?
09.03.19 22:22:43<aindilis> I'm debating writing some planning researchers about nested metaplanning
09.03.19 23:35:46*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-irrvamyhdddypsha, stoopkid: stoopkid)
10.03.19 01:45:22*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-irrvamyhdddypsha) left #logicmoo: Quit: Connection closed for inactivity
10.03.19 04:06:11*** Join: Guest37305 (~fenchelfe@188.130.155.164, (unauthenticated): fenchelfen)
10.03.19 04:06:43<Guest37305> Ohai
10.03.19 04:07:04<Guest37305> Prolog is cool but intimidates me a lot
10.03.19 04:07:34<Guest37305> I am working on a predicate that generates a list of available steps when walking through a grid 5x5
10.03.19 04:08:18<Guest37305> I am trying to do this with DCG and fail!!
10.03.19 04:08:51<Guest37305> Here's my code https://pastebin.com/XUBNUCcZ
10.03.19 04:09:16<Guest37305> It generates only 4 separate pairs and that's not even a list
10.03.19 04:09:20<Guest37305> :(
10.03.19 06:23:27*** Quit: Guest37305 (~fenchelfe@188.130.155.164) left #logicmoo: Ping timeout: 240 seconds
10.03.19 07:43:31*** Join: Guest37305 (~fenchelfe@188.130.155.164, (unauthenticated): fenchelfen)
10.03.19 12:00:24*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
10.03.19 12:58:03*** Quit: Guest37305 (~fenchelfe@188.130.155.164) left #logicmoo: Ping timeout: 246 seconds
10.03.19 13:05:25*** Join: Guest37305 (~fenchelfe@188.130.155.164, (unauthenticated): fenchelfen)
10.03.19 13:23:36*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gfklnydqsbjkdgdi, stoopkid: stoopkid)
10.03.19 16:03:26*** Quit: Guest37305 (~fenchelfe@188.130.155.164) left #logicmoo: Ping timeout: 244 seconds
10.03.19 16:24:24*** Join: Guest37305 (~fenchelfe@188.130.155.164, (unauthenticated): fenchelfen)
10.03.19 17:27:53*** Quit: T_K (~TK@82.131.72.42.cable.starman.ee) left #logicmoo: Quit: Leaving.
10.03.19 17:36:30*** Nick change: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
10.03.19 19:39:58*** Quit: Guest37305 (~fenchelfe@188.130.155.164) left #logicmoo: Ping timeout: 246 seconds
10.03.19 22:37:45<aindilis> dmiles: so I have KM loading in LarKC_CL, now I'm trying to learn KM so that I can begin to do it.  I don't see any Mt support so I'll just through everything into KnowledgeMachineMt, but have the option for assertions to live in Mts.  It may make sense to try to model Mts within KM somehow.
10.03.19 22:38:45<aindilis> maybe as objects/classes like (a Microtheory) etc (MyMt is a *Microtheory) or what not
10.03.19 22:39:28<aindilis> this looks pretty useful, it would have helped to speed up some of my Mt work, so maybe I'll create .km files in my MyKBs dir.
10.03.19 22:47:41<dmiles> yeah, that makes seanse ot start off as all one Mt
10.03.19 22:48:31<dmiles> and doing Mts per .km file
10.03.19 22:48:37<aindilis> kk
10.03.19 22:48:56<aindilis> I think this may be the beginning of some Eurisko remake, since it's a frame language
10.03.19 22:49:01<dmiles> well youy dont havbe to do it that way.. you can have as many files per Mt as you want :)
10.03.19 22:49:15<dmiles> yes for sure
10.03.19 22:49:23<dmiles>  beginning of some Eurisko remake :)
10.03.19 22:49:34<aindilis> :)
10.03.19 22:51:03<dmiles> kind of what you are doing with KM there is what i am slowly doing getting Prolog toplevel into CYC as well
10.03.19 22:51:14<aindilis> wow
10.03.19 22:51:27<aindilis> (I think my .do files may benefit from KM too)
10.03.19 22:51:54<dmiles> well KM is pretrty much conceptually a hybrid of what you get with Prlolog+CYC
10.03.19 22:52:18<dmiles> KM is conceptually a hybrid of what you get with Prolog+CYC
10.03.19 22:53:37<dmiles> like this part..
10.03.19 22:53:56<dmiles> KM>  (the parts of (the lives-in of *Joe))
                 <dmiles> 1 -> (the parts of (the lives-in of *Joe))
                 <dmiles> 2  -> (the lives-in of *Joe)
                 <dmiles> 2   (1) Local value(s): _House3
                 <dmiles> 2   (2) From inheritance: (a House)
10.03.19 22:53:57<dmiles> 2   (1-2) Combine 1-2 together
10.03.19 22:53:58<dmiles> 3   -> ((_House3) && ((a House)))
                 <dmiles> 3   <- (_House3)              "((_House3) && ((a House)))"
                 <dmiles> 2  <- (_House3)               "(the lives-in of *Joe)"
10.03.19 22:53:59<dmiles> 2  -> (the parts of _House3)
10.03.19 22:54:00<dmiles> 2   (1) Local value(s): (:set _Door4 _Roof5)
                 <dmiles> 3   -> (:set _Door4 _Roof5)
10.03.19 22:54:46<dmiles> from http://www.cs.utexas.edu/users/mfkb/km/km-overview.script
10.03.19 22:55:26<dmiles> in http://www.cs.utexas.edu/users/mfkb/km/test-suite.km 
10.03.19 22:55:38<dmiles> when it does 
                 <dmiles> (reset-kb)
10.03.19 22:55:49<dmiles> we might just have it reset a single Mt
10.03.19 22:55:58<aindilis> :)
10.03.19 22:56:19<dmiles> but you can make it take an argument and things
10.03.19 22:56:54<dmiles> like (set-current-kb #$MyMt) etc
10.03.19 22:58:18<dmiles> the parts i am unsure abotu .. kind of the same issue with DAYDREAMER is stuff like..
10.03.19 22:58:19<dmiles> (*UK has
                 <dmiles>         (country-name ("the United Kingdom")))
10.03.19 22:59:16<dmiles> i dont know yet quite if that is suppsoed to become  (#$country-name #$UK "the United Kingdom")
10.03.19 22:59:58<dmiles> in the work you are doing now is sort of investigating the design of the CycL arround such things
10.03.19 23:00:31<aindilis> yeah
                 <aindilis> (#$KnowledgeMachineMt has (instance-of (#$Microtheory)))
10.03.19 23:01:19<dmiles> if i was given that task which i expect to join you on w/in a week is deciding if we will keep the sentences as it wishes and then have like Back and Forth rules or not
10.03.19 23:01:43<aindilis> Cyc used to be a frame-based system
10.03.19 23:01:53<aindilis> how to exploit that here?
10.03.19 23:02:08<aindilis> (#$and (#$blah ?X) ...)
10.03.19 23:02:09<aindilis> ?
10.03.19 23:02:41<dmiles> i think keeping them in their KM frame based way *and* having CycL rules to translate beteen the two will be valuable for doing things in DAYDREAMER
10.03.19 23:02:58<aindilis> does DAYDREAMER use KM at all yet?
10.03.19 23:03:11<dmiles> nope but is closer to KMs representation 
10.03.19 23:03:16<aindilis> k
10.03.19 23:03:18<dmiles> nope but is very to KMs representation 
10.03.19 23:03:26<aindilis> yeah
10.03.19 23:03:29<dmiles> very close*
10.03.19 23:03:56<dmiles> what you'll be discovering is how these will go into CycL
10.03.19 23:04:11<aindilis> alright well I have a doctors appointment in the morning, I'm going to read more about KM tonight, and play around with, make a few toy systems and such
10.03.19 23:04:22<aindilis> just fyi
10.03.19 23:04:28<dmiles> if i was doign this instead of turning them into what CycL likes.. i would defiantely try tpo presenve KM represenations but still used in an Mt
10.03.19 23:04:40<aindilis> but since M has given me the greenlight I will have a ton of time to work on this stuff
10.03.19 23:05:19<aindilis> okay so how would the back and forth rules work?
10.03.19 23:05:43<aindilis> plus M spends most of her time writing her novel which leaves me with "nothing to do"
                 <dmiles> since i feel like some of Sowa work on Conceptual Graphs to will work good when we accept that we are using KM/CG/DAYDREAMER represeations
10.03.19 23:06:16<aindilis> are you adding Prolog+CG?
10.03.19 23:06:21<aindilis> to LarKC_CL?
10.03.19 23:06:24<dmiles> Translation rules will be a set of binary predicates that shown the two forms
10.03.19 23:06:35<dmiles> yes 
10.03.19 23:06:37<aindilis> ah
10.03.19 23:06:49<aindilis> where do the rules live?
10.03.19 23:06:53<aindilis> Prolog?
10.03.19 23:07:06<dmiles> but i am putting of PrologCG until i got these meerge onto LarKC_CL sinc ei am missing working on LaRKC_CL
10.03.19 23:07:19<dmiles> but i am putting off PrologCG until i got these 5 merge onto LarKC_CL sinc ei am missing working on LaRKC_CL
10.03.19 23:07:25<aindilis> kk
10.03.19 23:07:37<dmiles> the rules will like ina  TranslationMt
10.03.19 23:07:44<aindilis> kk
10.03.19 23:08:07<aindilis> are you making this up as you go or have you already thought it through?
10.03.19 23:08:50<dmiles> they look like 
10.03.19 23:09:14<dmiles> (#$km-to-cycl ?KM ?CYC)
10.03.19 23:09:30<dmiles> (?PRED (TheList ?ARGS)))
10.03.19 23:09:34<aindilis> where ?KM is a transliteration like (#$a #$Cat)
10.03.19 23:09:59<dmiles> correct
10.03.19 23:10:20<aindilis> and I suppose some Common Lisp for doing the translation?
10.03.19 23:10:33<dmiles> so we have  #$km-to-cycl-sentence-level  and #$km-to-cycl-term-level
10.03.19 23:10:59<dmiles> (#$km-to-cycl-term-level (#$a ?x) (#$TheFn ?x))
10.03.19 23:11:20<aindilis> ah
10.03.19 23:11:39<dmiles> #$km-to-cycl-sentence-level  dealing with KM:has
10.03.19 23:12:11<dmiles> i'd like to set up CycL forward to translalate them back and forth
10.03.19 23:12:18<aindilis> kk
10.03.19 23:12:51<dmiles> so we have somethjing like #$KnowledgeMachineMt  and #$KnowledgeMachineMt-As-CycL
10.03.19 23:13:15<aindilis> using #$ist?
10.03.19 23:13:32<dmiles> yes the tranaltion rules will #$ist-Asserted 
10.03.19 23:14:15<dmiles> well depending on how bad #$KnowledgeMachineMt is it might be #$KnowledgeMachine-As-DataMt
10.03.19 23:14:20<dmiles> for exmaple..
10.03.19 23:14:48<dmiles> i am starting with my code with  #$PrologCodeDataMt
10.03.19 23:15:11<dmiles> then i might have #$PrologAsKnowelegeMt
10.03.19 23:15:33<dmiles> where  #$PrologCodeDataMt is giberish to CYC
10.03.19 23:16:05<dmiles> #$PrologAsKnowelegeMt would be things that describe what #$PrologCodeDataMt does
10.03.19 23:16:43<dmiles> but i have veroius level of non-gibberish
10.03.19 23:17:20<dmiles> predicate_propery/2's 
10.03.19 23:17:51<dmiles> which tell me things about if the predciate is compiled or not
10.03.19 23:18:07<aindilis> you'd use ResultIsa?
10.03.19 23:18:16<dmiles> i cant predict yet what will be salient for use
10.03.19 23:18:32<dmiles> right i be translating stuff to resultIsa
10.03.19 23:18:44<aindilis> I'm running out of steam but I'm curious about what predicate_property/2 is doing here
10.03.19 23:19:00<dmiles> right i be translating stuff to #$resultIsa if i have a predicate that is  pred(In,In,Out)
10.03.19 23:19:22<aindilis> do people actually use + - in Prolog code?
10.03.19 23:19:29<aindilis> + - ?
10.03.19 23:19:40<aindilis> I thought you could but then I tried and it didn't
10.03.19 23:19:43<dmiles> predicate_property.2 tells us special things about predicate memory like clause counts
10.03.19 23:19:47<aindilis> yeah
10.03.19 23:20:05<aindilis> but I'm wondering how it relates to #$PrologCodeDataMt
10.03.19 23:20:18<aindilis> oh I see, to introspect the contents of that KB
10.03.19 23:20:19<aindilis> *Mt
10.03.19 23:20:23<dmiles> predicate_property/2 will show up only in #$PrologCodeDataMt
10.03.19 23:20:41<dmiles> vs #$argIsa #$PrologAsKnowelegeMt
10.03.19 23:20:48<dmiles> vs #$argIsa  will show up #$PrologAsKnowelegeMt
10.03.19 23:20:50<aindilis> k
10.03.19 23:21:06<dmiles> as i leanr how much belongs in either
10.03.19 23:21:07<aindilis> oh I see
10.03.19 23:21:26<dmiles> by having everything prolog needs in  #$PrologCodeDataMt i dont have to freak out
                 <aindilis> so you can automatically infer using predicate_property/2 the contents of #$PrologAsKnowelegeMt
10.03.19 23:21:57<dmiles> yes anyhting that i figure out beloings properrty in  #$PrologAsKnowelegeMt
10.03.19 23:22:09<dmiles> i can write a forwarding rule for
10.03.19 23:22:26<aindilis> do you have Kappa or Eval or something to access Prolog?
10.03.19 23:22:35<dmiles> yes
10.03.19 23:22:37<aindilis> k
10.03.19 23:22:43<aindilis> nicenicenice
10.03.19 23:23:03<dmiles> it is pretty m,uch the same things a person might do if they did this in SQL
10.03.19 23:23:11<dmiles> have a table that is what the application needs
10.03.19 23:23:15<aindilis> so what about SKSI?
10.03.19 23:23:18<dmiles> then a table that is what the user needs
10.03.19 23:23:40<dmiles> then writting stroed procs between the two
10.03.19 23:23:57<dmiles> i mean the same type of work i used rto do whaen i did this in SQL
10.03.19 23:23:59<aindilis> wow this is looking good
10.03.19 23:24:18<dmiles> SKSI is jsut slightly too verbose
10.03.19 23:24:38<aindilis> I can see us achieving the desired fallout behavior for program synth this way
10.03.19 23:24:39<dmiles> SKSI allows data to stay unsemantic
10.03.19 23:25:30<dmiles> (since SKSI is about allowing me to never think about #$PrologCodeData 
10.03.19 23:25:51<dmiles> and we are looking to do program synth 
10.03.19 23:26:11<aindilis> you had said there was an example
10.03.19 23:26:14<aindilis> of program synth
10.03.19 23:26:22<aindilis> I would like to play around with it
10.03.19 23:26:45<dmiles> https://github.com/TeamSPoon/prologmud/blob/master/prolog/prologmud/mud_builtin.pfc.pl#L626
10.03.19 23:27:09<dmiles> sory: https://github.com/TeamSPoon/prologmud/blob/master/prolog/prologmud/mud_builtin.pfc.pl#L629-L636
10.03.19 23:27:17<dmiles> ttPredAndValueType(Str)/
                 <dmiles>   (i_name('mud',Str,Pred),
                 <dmiles>   i_name('vt',Str,VT)) ==> 
                 <dmiles>     (rtRolePredicate(Pred),
10.03.19 23:27:18<dmiles>      ttValueType(VT),
                 <dmiles>       mudKeyword(VT,Str),mudKeyword(Pred,Str),
                 <dmiles>       argIsa(Pred,2,VT),
                 <dmiles>       argIsa(Pred,1,tTemporalThing)).
10.03.19 23:27:47<dmiles> well all myu Progrtam Synth stuff in in Logicmoo.. not CycL right now
10.03.19 23:27:55<aindilis> yeah
10.03.19 23:28:07<dmiles> so how ttPredAndValueType(Str) works is it has to be deduced
10.03.19 23:28:19<dmiles> that is the sync code post deducted
10.03.19 23:28:30<aindilis> what is /
10.03.19 23:28:33<dmiles> i mean that actualyl synthesizes the code
10.03.19 23:28:38<aindilis> yeah
10.03.19 23:28:57<dmiles> the  Assertion/Cosntraints==>SideEffects
10.03.19 23:29:05<aindilis> ah yeah
10.03.19 23:29:19<aindilis> alright pretty cool, btw, is there a particular Prolog or Lisp book I should read
10.03.19 23:29:20<aindilis> ?
10.03.19 23:29:37<aindilis> I want to hone my skills so I can contribute better
10.03.19 23:29:48<aindilis> to PrologMUD
10.03.19 23:29:53<aindilis> LarKC_CL etc
10.03.19 23:29:58<dmiles> i dont know i mostly i suppose made this stuff up .. but i feel like everything i read of the years is trying to give peopel teh ciomplusion
10.03.19 23:30:20<dmiles> oh this part of the Playbook though is in the PFC manual
10.03.19 23:30:46<aindilis> give people the compulsion?
10.03.19 23:30:49<dmiles> as  Assertion/Cosntraints=>SideEffects
10.03.19 23:30:56<aindilis> yeah
10.03.19 23:31:01<dmiles> well make them realize they were supposed to be writitng the code i am 
10.03.19 23:31:03<aindilis> srry I remembered it as soon as you said it
10.03.19 23:31:30<dmiles> the compulsion to wonder why they dont
10.03.19 23:31:31<aindilis> well you've got me pretty much sold, so I'll have to divide my time between this and FLP and FRDCSA, but I have lots of time now!
10.03.19 23:32:02<dmiles> the Assertion part is what i wanting to be in CycL next more
10.03.19 23:32:17<aindilis> kk
10.03.19 23:32:18<dmiles> like (wants ProgramA UseUsernames)
10.03.19 23:32:36<dmiles> UseUsernames ==> ttPredAndValueType("username")
10.03.19 23:33:04<dmiles> (implies UseUsernames  (ttPredAndValueType "username"))
10.03.19 23:33:58<dmiles> which right now in Logicmoo makes the program aware of a new RolePredicate and ValueType
10.03.19 23:35:07<dmiles> (wants DMiles greetPeople) might imply gets their names this uses UseUsernames 
10.03.19 23:36:17<dmiles> in Logicmoo the PFC forward chain currently is how it writes is PrologMUD;s source code
10.03.19 23:36:35<aindilis> all of it?
10.03.19 23:36:41<dmiles> 80% of it
10.03.19 23:37:25<aindilis> wow! nice :) - please remind me what tt stands for (argQuotedIsa, but what it means, Term Type?)
10.03.19 23:37:28<dmiles> especially this fil;e:  https://github.com/TeamSPoon/prologmud/blob/master/prolog/prologmud/mobs/affordance/simbots.pfc.pl
10.03.19 23:37:59<dmiles> type type
10.03.19 23:38:06<aindilis> ah right
10.03.19 23:39:26<dmiles> https://github.com/TeamSPoon/logicmoo_base/blob/master/prolog/logicmoo/typesystem/mpred_type_isa.pl#L369-L396
10.03.19 23:39:35<dmiles> typ_prfx(vt,ttValueType).
                 <dmiles> typ_prfx(tt,ttTypeType).
                 <dmiles> typ_prfx(t,tSet).
                 <dmiles> typ_prfx(pred,tPred).
                 <dmiles> typ_prfx(format,tPred).
10.03.19 23:39:36<dmiles> typ_prfx(is,ftSyntaxOperator).
10.03.19 23:39:37<dmiles> typ_prfx(dcg,ftSyntaxOperator).
                 <dmiles> typ_prfx(dcg,ftTextType).
10.03.19 23:39:42<dmiles> typ_prfx(txt,ftTextType).
                 <dmiles> typ_prfx(sk,ftSkolemFunction).
                 <dmiles> %typ_prfx(is,tPred).
                 <dmiles> %typ_prfx(a,tFunction).
                 <dmiles> %typ_prfx(t,tCol).
                 <dmiles> typ_prfx(fn,tFunction).
                 <dmiles> typ_prfx(mud,rtMudPred).
10.03.19 23:40:47<dmiles> Quoted Types = typ_prfx(ft,ttExpressionType).
10.03.19 23:41:18<dmiles> isa(ftString,ttExpressionType).
10.03.19 23:41:25<dmiles> isa(ftNumber,ttExpressionType).
10.03.19 23:42:01<dmiles> isa(ttExpressionType,tSet).
10.03.19 23:43:05<aindilis> well will you be on tomorrow?  I should be on after 4 pm EST
10.03.19 23:43:39<dmiles> i should be on at that time
10.03.19 23:43:49<aindilis> great, I will look for you then
10.03.19 23:44:03<aindilis> really excited about this
10.03.19 23:44:36<dmiles> good i am happy
10.03.19 23:44:40<aindilis> :)
10.03.19 23:47:50<dmiles> the prefix thing has helped for distinghising the word txtRed vs the RGB value vRed
10.03.19 23:48:19<dmiles> or the colelction of red things tRed
10.03.19 23:48:22<aindilis> yeah, it's nice
10.03.19 23:48:41<aindilis> especially since it auto figures out what's needed when it's missing
10.03.19 23:48:52<dmiles> ttRed = 2nd order collection denoting collections about red things
10.03.19 23:49:26<aindilis> I decided to hold off using it in FLP since I didn't understand it fully, but I'm sure it's backwards compatible
10.03.19 23:49:44<aindilis> btw at some point I need to understand the SWIPL module system and move most things into modules to keep user empty
10.03.19 23:50:08<dmiles> yeah that can be a real pain trying to keep user emply
10.03.19 23:50:16<dmiles> but we are supposed to
10.03.19 23:50:19<aindilis> kk
10.03.19 23:50:35<aindilis> so do you have a different root that you export most things to?
10.03.19 23:50:48<dmiles> hehe yes system:*
10.03.19 23:50:50<aindilis> or rather export to other modules which export to root
10.03.19 23:50:51<aindilis> kk
10.03.19 23:50:59<aindilis> I'll move everything there first :)
10.03.19 23:51:23<aindilis> is there a good reference on SWIPL modules?
10.03.19 23:51:34<dmiles> moving stuff to 'system' also thiough forces me to be more carfull i cant jsut have names like option/2
10.03.19 23:51:42<aindilis> hehe
10.03.19 23:51:51<aindilis> oh wait system has other stuff in it?
10.03.19 23:52:00<aindilis> do you have collisions much?
10.03.19 23:52:02<dmiles> system is accessable everywhere
10.03.19 23:52:13<dmiles> right system will collide as it slips under everyhitng
10.03.19 23:52:15<aindilis> hehe interesitng
10.03.19 23:52:32<dmiles> liek arity/2 is own by some RDF module
10.03.19 23:52:34<aindilis> well then I'll not use system mainly, only as a root
10.03.19 23:52:44<dmiles> ?- yes.
10.03.19 23:52:47<aindilis> of the base preds like generatePageFor
10.03.19 23:52:49<dmiles> ?- true.
                 <PrologMUD> dmiles: %  det(Yes,1)
10.03.19 23:53:15<dmiles> ?- predicate_propery(arity(_,_),PP).
10.03.19 23:53:20<aindilis> well I suppose I have to think about compatibility with LogicMOO/PrologMUD for the merger
10.03.19 23:53:35<dmiles> ?- predicate_propetry(arity(_,_),PP).
10.03.19 23:53:36<aindilis> btw, PlanLogic is a common name
10.03.19 23:53:43<dmiles> ?- predicate_property(arity(_,_),PP).
                 <PrologMUD> dmiles: % PP=interpreted
                 <PrologMUD> dmiles: % PP=visible
10.03.19 23:53:44<PrologMUD> dmiles: % PP=dynamic
                 <PrologMUD> dmiles: % PP=imported_from(rdf_rewrite)
                 <PrologMUD> dmiles: % PP=number_of_clauses(8)
                 <PrologMUD> dmiles: % PP=number_of_rules(0)
                 <PrologMUD> dmiles: % PP=last_modified_generation(166926)
10.03.19 23:53:45<PrologMUD> dmiles: % PP=defined
                 <PrologMUD> dmiles: %  det(Yes,8)
10.03.19 23:53:50<aindilis> ah
10.03.19 23:53:53<dmiles> "imported_from(rdf_rewrite)"
10.03.19 23:54:17<dmiles> ?- listing(arity/2).
10.03.19 23:54:18<PrologMUD> dmiles: :- dynamic rdf_rewrite:arity/2.
                 <PrologMUD> dmiles: rdf_rewrite:arity(read_pos_nums, 1).
                 <PrologMUD> dmiles: rdf_rewrite:arity(read_pos_nums_aux, 2).
                 <PrologMUD> dmiles: rdf_rewrite:arity(pairs, 2).
                 <PrologMUD> dmiles: rdf_rewrite:arity(triples, 3).
10.03.19 23:54:19<PrologMUD> dmiles: rdf_rewrite:arity(make_ele, 1).
                 <PrologMUD> dmiles: rdf_rewrite:arity(clause_inlined, 2).
10.03.19 23:54:20<PrologMUD> dmiles: rdf_rewrite:arity(mi1, 1).
                 <PrologMUD> dmiles: rdf_rewrite:arity(random_clause, 2).
10.03.19 23:54:21<PrologMUD> dmiles: %  det(Yes,1)
10.03.19 23:54:55<dmiles> heh but i am the only one putting data there
10.03.19 23:55:26<aindilis> so if I had a main FLP module that exported a few preds, that would be fine for inclusion to PrologMUD?
10.03.19 23:55:36<dmiles> yes
10.03.19 23:55:45<aindilis> btw, how are your systems integrations coming?
10.03.19 23:55:57<aindilis> I was looking around your imported third-party Prolog code
10.03.19 23:56:11<aindilis> I was wondering if you wanted to keep more precise metadata regarding third party interops
                 <dmiles> well probably be done wendsay i hope.. jsut goign to delay the PrologPLusCG
10.03.19 23:56:14<aindilis> kinda like FRDCSA
10.03.19 23:56:27<aindilis> well I mean systems integration of things like Chat80, Marty's MIFE, etc
10.03.19 23:56:45<aindilis> I want to gather as many Prolog + Lisp tools for possible inclusion to PrologMUD
                 <dmiles> because i need to prove to myself that the PrologCagfe system wont be too slow in CYC
10.03.19 23:56:52<aindilis> kk
10.03.19 23:57:13<dmiles> before risking the 3-5 week progject opf prolog+CG :O
10.03.19 23:57:32<aindilis> btw, haven't heard back from Chris Elsaessar
10.03.19 23:57:54<aindilis> for AP/3T integration
10.03.19 23:58:36<dmiles> to get it working in SBCL .. the way i'd do it is making pjb and a few lisp peopel that love to promote and defend SBCL want to get 3T working
10.03.19 23:58:45<aindilis> hehe
10.03.19 23:59:20<dmiles> or in #abcl gripe 3T is not working there
10.03.19 23:59:26<aindilis> heh
10.03.19 23:59:28<dmiles> hehe
10.03.19 23:59:52<dmiles> even thought technically its the 3T job to make things less ACL
11.03.19 00:00:03<dmiles> even though technically its the 3T job to make things less ACL
11.03.19 00:00:12<aindilis> I guess I will write Peter Bonasso about it then
11.03.19 00:00:18<aindilis> I'll CC you and Chris and David Whitten
11.03.19 00:00:34<aindilis> because we'll want integration with his codebase
11.03.19 00:00:44<dmiles> yeah Chris kinda indicated it was Peter Bonasso repsonsibility to
11.03.19 00:00:54<aindilis> who knows maybe he'll give us access to some of the kewler stuff
11.03.19 00:01:09<aindilis> you know those submodules that don't check out
11.03.19 00:01:36<dmiles> dont you clone the toplevle then glue it togehr?
11.03.19 00:01:51<aindilis> well I think they're password protected
11.03.19 00:01:54<dmiles> ah
11.03.19 00:02:24<aindilis> one thing that has always been a thrill for me has been acquiring code like that
11.03.19 00:02:38<dmiles> hehe
11.03.19 00:02:44<aindilis> that and buying fast computer hardware
11.03.19 00:03:10<aindilis> and look it helped since I was able to restore to you some of your data
11.03.19 00:03:16<dmiles> i get that thrill installing Eclipse/Emacs plugins sometimes
11.03.19 00:03:19<aindilis> the Teknowledge
11.03.19 00:03:45<aindilis> yeah me too
11.03.19 00:03:58<aindilis> alright, well happy hacking!
11.03.19 00:04:10<dmiles> there was aobut 4-5 years that Teknowledge forgot to .htaccess stuff
11.03.19 00:04:17<aindilis> hehe
11.03.19 00:04:27<dmiles> when they reisntalled appache
11.03.19 00:04:31<aindilis> was I at the beginning or end of that?
11.03.19 00:04:39<aindilis> (preferably end)
11.03.19 00:04:44<dmiles> i think durring that is when you got what you got
11.03.19 00:04:49<aindilis> yeah
11.03.19 00:05:03<aindilis> Teknowledge was one of my best finds
11.03.19 00:06:14<dmiles> i renmeber durring congressional hearing on wiretapping usa citizens where someone was testifying that all the data was wipped out.. that Teknowlege had opened no .htpasswed all the eveident congress was loloking for
11.03.19 00:06:46<aindilis> lol
11.03.19 00:06:50<dmiles> all the eveidence congress was looking for in the demostic spying program
11.03.19 00:07:55<dmiles> you probly even have that evidence on your disks
11.03.19 00:08:26* aindilis laughs nervously
11.03.19 00:09:02<aindilis> I used to want to infiltrate the Military-Industrial Complex, but got more than I bargained for and have since chilled out
11.03.19 00:09:51<aindilis> plus most people are so damned apathetic you know?
11.03.19 00:10:59<dmiles> well when you think aobut what normal peopel do with their free time
11.03.19 00:11:03<aindilis> hehe
11.03.19 00:11:24<aindilis> unfortunately I've been normal too long
11.03.19 00:11:40<aindilis> so I look forward to working with you on this, and we can make a difference
11.03.19 00:12:34<aindilis> we need to finish AI for the planet's sake
11.03.19 00:12:38<dmiles> yeah.. talk to you in aobut 20 some hours
11.03.19 00:12:43<dmiles> yeah
11.03.19 00:12:45<aindilis> ttys!  happy hacking!
11.03.19 00:12:50<aindilis> gnite!
11.03.19 00:13:01<dmiles> i keep thinkking about my typical job rejection speech
11.03.19 00:13:23<aindilis> which is?
11.03.19 00:13:33<dmiles> "So you want to give me money so we cant have AI for 3 extra years?"
11.03.19 00:13:39<aindilis> hehe
11.03.19 00:13:44<aindilis> lmao
11.03.19 00:14:25<aindilis> bbiab
11.03.19 00:15:37<dmiles> i wonder how much i can change to that!
11.03.19 00:15:49<dmiles> i wonder how much i can *charge* forthat!
11.03.19 00:16:29<dmiles> that is my going rate (and paid by everyone)
11.03.19 00:21:41<dmiles> oh funny stuff:  https://www.upwork.com/o/profiles/users/_~016900617687b1cc00/
11.03.19 00:22:05<dmiles> that he is only changing 50$ hr
11.03.19 00:22:28<dmiles> he was "Director of Programming" of Cycorp
11.03.19 00:22:42<aindilis> Reed?
11.03.19 00:22:58<dmiles> StephenDeVoy
11.03.19 00:23:02<aindilis> ah
11.03.19 00:23:16<dmiles> Reed was bellow him
11.03.19 00:23:32<aindilis> you know what this means?
11.03.19 00:23:35<aindilis> we can afford him!
11.03.19 00:23:53<dmiles> hehe yeah
11.03.19 00:23:59<aindilis> maybe we should reach out to him
11.03.19 00:24:10<dmiles> he was the one that was trying to leak me the sourcecode of CYC in 2002
11.03.19 00:24:15<aindilis> if he programs for us, he'll have a chance to win a $100 gift certificate
11.03.19 00:24:17<dmiles> yeah
11.03.19 00:24:25<dmiles> hehe
11.03.19 00:24:52<aindilis> I will reach out to him
11.03.19 00:25:03<dmiles> yes.. please do!
11.03.19 00:25:05<aindilis> kk
11.03.19 00:26:21<dmiles> his name appeakere din Wikileaks https://www.wikileaks.org/wiki/Draft:Some_article_name
11.03.19 00:27:11<dmiles> " Here's a statement on the article from someone who worked at Cycorp at the time Cyc came up with mailing anthrax:
                 <dmiles> http://stephendevoy.blogspot.com/2008/08/xxxxxx-anthrax-prediction.html"
11.03.19 00:31:34<dmiles> oh and https://wikileaks.org/podesta-emails//fileid/24046/6950 
11.03.19 00:31:56<dmiles> just a Cycorp empoloyee loking for work 
11.03.19 00:32:29<dmiles> she used to work with both Steves
11.03.19 00:32:31<dmiles> Cycorp, Inc. (2000-2003) Austin, TX
                 <dmiles> Deputy Director, Knowledge Representation and Inference Department
                 <dmiles> · Codified large architecture-level knowledge representation strategies. Adjudicated between competing data architecture designs.
11.03.19 00:32:32<dmiles> · Administered departmental management tasks, including budgeting, interviewing, and personnel issues.
                 <dmiles> Senior Ontologist
11.03.19 00:32:33<dmiles> · Built explicit formal representations of objects, concepts, and other entities and the relationships between them in the Cyc Knowledge Base (KB), the foundational product of this common sense-based artificial intelligence company.
11.03.19 00:32:34<dmiles> · Examined, analyzed and translated data within a logic-based model to provide computer with a background of common sense information as it shifted through billions of facts to create inferences.
11.03.19 00:40:26<dmiles> i am not the kind of person that searching wikileaks but i was googling to see what Septhen was up to and found that
11.03.19 00:40:41<aindilis> ah yeah no worries, interesting read
11.03.19 04:01:35*** Join: Guest37305 (~fenchelfe@188.130.155.164, (unauthenticated): fenchelfen)
11.03.19 06:32:24*** Quit: Guest37305 (~fenchelfe@188.130.155.164) left #logicmoo: Quit: WeeChat 1.9.1
11.03.19 16:08:10<aindilis> hey I'm going to bbiab
11.03.19 21:05:27*** Quit: CoderForLife (~Miranda@unaffiliated/coderforlife) left #logicmoo: Ping timeout: 245 seconds
11.03.19 21:21:29*** Join: CoderForLife (~Miranda@unaffiliated/coderforlife, CoderForLife: setimail@cellutions.com)
11.03.19 21:59:55*** Quit: CoderForLife (~Miranda@unaffiliated/coderforlife) left #logicmoo: Ping timeout: 252 seconds
11.03.19 22:17:36*** Join: CoderForLife (~Miranda@unaffiliated/coderforlife, CoderForLife: setimail@cellutions.com)
12.03.19 01:14:51<aindilis> dmiles: okay so I'm caught up #ai (I didn't read all of Asher and your conversation though, I gave up at some point)
12.03.19 01:15:18<aindilis> sorry I wasn't feeling good at 4:00 PM EST and then ran a bunch of errands and stuff, hopefully tomorrow will look better
12.03.19 01:31:55<aindilis> Shaken has a lot of KM files
12.03.19 01:32:10<aindilis> it may be prudent to eventually get Shaken running, I think it's easy on Windows but harder on Linux
12.03.19 01:32:29<aindilis> I should start rolling some packages again
12.03.19 01:33:17<aindilis> of course, I won't deviate though from the course, which is to supplant the storage mechanism for KM.  KM is kinda complex and I'll have to read the manual to do it, but it's a worthy read
12.03.19 01:34:44<aindilis> would be worthwhile trying to load Shaken's KM files in KM and then translate to the domains per our discussion the other night
12.03.19 01:34:54<aindilis> *CYC domains
12.03.19 01:41:54<aindilis> http://www.cs.utexas.edu/users/mfkb/km/aarati.pdf
12.03.19 01:46:35<aindilis> http://www.cs.utexas.edu/users/mfkb/km/situations-implementation.pdf
12.03.19 02:02:22<aindilis> downloaded all relevant papers and webpages mentioning both "Knowledge Machine" and CYC
12.03.19 02:05:33<aindilis> Should I contact UTexas asking for advice on how to integrate CYC / KM?
12.03.19 02:06:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gfklnydqsbjkdgdi) left #logicmoo: Quit: Connection closed for inactivity
12.03.19 03:32:07*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 250 seconds
12.03.19 03:34:48*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
12.03.19 03:52:12*** Quit: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net) left #logicmoo: Ping timeout: 246 seconds
12.03.19 04:07:12*** Join: aindilis (~aindilis@172-12-3-117.lightspeed.sgnwmi.sbcglobal.net, aindilis: Andrew Dougherty)
12.03.19 04:38:30*** Join: T_K (~TK@82.131.72.42.cable.starman.ee, (unauthenticated): purple)
#logicmoo> 