12/31 16:05:41*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #AutoNomic: Home of the AutoNomic block-chain project | Please ask anything | Wiki: http://167.88.171.233/AutoNomic/Main_Page | Log: https://matrix.to/#/#autonomic:matrix.org | https://ncatlab.org/nlab/show/computational+trinitarianism | http://www.rbjones.com/rbjpub/logic/cl/tlc001.htm | http://www.cse.chalmers.se/research/group/logic/book/book.pdf
              *** Topic set by stoopkid on Sun Dec 31 05:14:25 2017, 10 hours 51 minutes 17 seconds ago
              *** Names: editable-koo suiqiublockchain reffael daemoz Tamara_ dmiles lexxus[m] @stoopkid lexx_[m] deadhand[m] jibble_ cantora Deadhand tigertigertiger[ @ChanServ stoop[m] nilli[m] stoopkid[m] daemoz[m] genuinelyfx[m] koo5[m] HMCa lilpotato vbmithr
              *** End of /NAMES list.
12/31 17:04:20<HMCa> editable-koo: wb
12/31 21:20:22*** Quit: suiqiublockchain (~suiqiublo@180.162.33.49) left #AutoNomic: Remote host closed the connection
12/31 21:20:41*** Join: suiqiublockchain (~suiqiublo@180.162.33.49, (unauthenticated): realname)
01/01 04:07:17*** Quit: suiqiublockchain (~suiqiublo@180.162.33.49) left #AutoNomic: Remote host closed the connection
01/01 04:07:38*** Join: suiqiublockchain (~suiqiublo@180.162.33.49, (unauthenticated): realname)
01/01 08:28:05*** Quit: daemoz (~daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: K-Lined
01/01 08:28:48*** Join: daemoz (~daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/01 10:09:02*** Quit: daemoz (~daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/01 10:09:49*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/01 15:31:54*** Quit: suiqiublockchain (~suiqiublo@180.162.33.49) left #AutoNomic: Read error: Connection reset by peer
01/01 15:32:09*** Join: suiqiublockchain (~suiqiublo@180.162.33.49, (unauthenticated): realname)
01/01 22:30:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zyxyomrxtfawjndh) left #AutoNomic: Quit: Connection closed for inactivity
01/01 22:48:42*** Quit: suiqiublockchain (~suiqiublo@180.162.33.49) left #AutoNomic: Ping timeout: 264 seconds
01/02 00:19:12*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hvumrqjgqdeoxtvq, stoopkid: stoopkid)
01/02 02:30:09<HMCa> happy new year
01/02 02:30:43<stoopkid> bleh, hopefully :)
01/02 02:31:30<HMCa> just... be happy :-)
01/02 02:31:34<HMCa> don't worry
01/02 02:31:36<HMCa> ;-)
01/02 02:32:00*** Join: nilli (258eaefb@gateway/web/freenode/ip.37.142.174.251, (unauthenticated): 37.142.174.251 - http://webchat.freenode.net)
01/02 02:32:02<stoopkid> you know i can't help it :P
01/02 02:32:50<stoopkid> wb nilli
01/02 02:34:04<nilli> hello boys Happy new year.
01/02 02:35:13<nilli> im not really back at that point. as I say that is not where I can contribute any value right now.
01/02 02:35:26<HMCa> nilli: hello girl :-)
01/02 02:37:14<nilli> :)
01/02 02:37:45<HMCa> "back" implies having gone away, which I'd hope nilli never *actually* does
01/02 02:38:32<nilli> I never do, but I am able to distance myself when needed
01/02 02:38:41<HMCa> nilli: do you mind if i re: your last pm here?
01/02 02:42:57<nilli> well the reason that I did not put it here was first to have it your call , and then maybe since I was a bit concern with what Ohad's reaction. but that I can handle I guess if it will come to that.
01/02 02:43:24<nilli> So maybe let me put this down first
01/02 02:47:09<HMCa> well, I really only have 2 (simple) things to say on the matter
01/02 02:47:47<nilli> we are yet to realize which of the projects will be able to bring about the chain that we all agree is required for the realization of the idea we agree on
01/02 02:48:36<stoopkid> who is "we" lol
01/02 02:48:40<HMCa> one I've said before: really it is between you and them ;-)
01/02 02:50:38<stoopkid> (and no that's not an arrogant assumption that AutoNomic is "the right one", or assumption that Tau is the "wrong one", rather i see a full spectrum of possibilities and am not yet sure what to make of all of it)
01/02 02:52:13<HMCa> the other is something of a new concession: if it were me, I'd dole it out per project milestones of AN (with some considered already met) instead of per spot rates of agrs
01/02 02:52:48<nilli> stoop "we" is our communities of cells. they agree, on the way to our brain our self interpretation is different from one to the other. we are just looking to overcome that.
01/02 02:53:20<nilli> HMC I have thought of that too
01/02 02:53:39<HMCa> which could end up including a portion due to me, depending on how you choose your milestones, I guess, heh :-\
01/02 02:54:27<HMCa> which I'd ofc directly put back into AN somehow, heh
01/02 02:54:33<nilli> and in fact is the right way to do it but you guys have to set it up then
01/02 02:56:03<HMCa> our wiki is back up, it has an old list of milestones, "we" could start there
01/02 02:57:04<HMCa> that is what I would do in this hypothetical universe where I am you. :-)
01/02 02:58:12<nilli> I would ask then to add one section to the wiki explaining the rational split form the old tau and how all is part of the same effort
01/02 02:58:47<HMCa> there's another approach that I was on the fence about proposing: just join the project, declare yourself an AN treasurer of sorts, and give it to yourself. :-|
01/02 02:58:59<HMCa> we're meta like that
01/02 02:59:26<stoopkid> hrm, i would add such a section, but really the split wasn't "rational"
01/02 02:59:58<HMCa> half of it was. XD
01/02 03:00:34<stoopkid> ohad basically forced each of us out while at the same time going a different direction that HMC didn't think would work
01/02 03:01:01<HMCa> I still don't
              <nilli> it was.  stoopkid, sometime the most emotional reactions are most rational .
01/02 03:01:57<stoopkid> HMC has a rational disagreement with ohad, and while i know how to build the MLTT-TFPL stuff, i'm still working my way up to being able to tell what's what in regard to comparing different logical frameworks, and ultimately none of us left on the basis of these disagreements over the logic
01/02 03:02:09<stoopkid> but* ultimately
01/02 03:03:09<HMCa> *left only on
01/02 03:03:10<HMCa> heh
01/02 03:05:50<nilli> I think that the split had to come
              <stoopkid> but with HMC's help i'd certainly be happy to write up our research regarding the comparison MLTT-TFPL and the logical framework ohad has recently implemented
01/02 03:06:01<stoopkid> comparison of*
01/02 03:06:03<nilli> was a bit too from the emotional
01/02 03:07:06<stoopkid> yea, and i don't think i really see any good coming from bringing all that drama back up on the wiki heh
01/02 03:07:17<HMCa> anyway, wrt the wiki I think we should avoid getting bogged down in the externalities... if we specialize entries about why we are not agrs we'll be expected to specialize entries about why we are not tezos, xel, sonm, eth, etc etc... beyond "here is what we strip away from btc and then here is what we build on top of that"
01/02 03:07:35<HMCa> though I am happy to see comparisons of logical frameeorks in context
01/02 03:08:08<HMCa> *frameworks
01/02 03:08:42<stoopkid> right
01/02 03:10:10<nilli> I agree and putting the logical framework as the issue in question to be eventually realize by implementation is important.
01/02 03:10:12<stoopkid> and rather than just do specialized this vs. that comparisons, i was planning to just document my research on the whole spectrum of possible logics and try to provide some kind of organizational structure for making sense of it all
01/02 03:10:30<HMCa> right now what i have to say about the framework he has implemented is the same as what I've said already - as of the last time I looked his implementation has not changed
01/02 03:10:46<HMCa> and it doesn't fill a wiki page.
01/02 03:11:08<stoopkid> well
01/02 03:11:13<stoopkid> i'm a bit more verbose than you are :P
01/02 03:11:14<nilli> ok I think that we all agree.
01/02 03:11:33<stoopkid> so, we can have some pages there :)
01/02 03:11:43<stoopkid> (hypothetically)
              <HMCa> well, not the *whole* spectrum of *possible* logics
01/02 03:11:54<HMCa> that is too big for all wikis combined.
01/02 03:12:11<stoopkid> my research on them is not tho :P
01/02 03:15:17<stoopkid> ofc i can't document all properties of all possible logics, but, i can show everything i research in the same context of the descriptive complexity hierarchy
01/02 03:15:25<nilli> so wiki up with a short review of how we got here (maybe even include your prior to tau effeort) explaining the split from tau in terms of the logic dispute
01/02 03:15:26<HMCa> I meant more like... are we really researching the fractal lake yet, or just exploring and documenting species of wildlife that we encounter
01/02 03:17:06<HMCa> nilli: from our perspective the only significant history is that we changed our name because someone took ("is trying to take"?) the tau name. ;-)
01/02 03:18:19<HMCa> the "tau effort" is not actually "prior"
01/02 03:18:31<HMCa> this effort herr is the same effort that was then there
01/02 03:18:34<HMCa> *here
01/02 03:19:01<HMCa> we didn't stop/change/revert/redirect our effort
01/02 03:19:19<HMCa> we just keep marching along.
01/02 03:20:59<HMCa> in the same way:
01/02 03:21:39<HMCa> the efforts prior to ohad were only prior to ohad... not to this, same, effort
01/02 03:21:41<stoopkid> yea, like i said i didn't even have a "dispute" about the logic, ohad all of a sudden went a different direction, and i don't understand enough about that direction to refute it, so i'm just still working on the same plans because... i haven't seen any refutation of them yet
01/02 03:22:06<HMCa> this "effort" really predates btc. XD
01/02 03:24:21<nilli> no HMC that is form your perspective but from the point of view of all who joined you along the way (me included) is that once we merged we become part of a "ONE" that we created for a split second . there is no "original" there
01/02 03:26:08<stoopkid> that's not really how ohad saw it though, and if i'm being totally honest i might say this is the fundamental reason for the "split"
01/02 03:26:44<nilli> each of us is on a path of their own even if subjecting themselves to one's other path
01/02 03:28:33<HMCa> sure, this effort is not my efforts or your efforts, but our efforts - both together and alone.
01/02 03:28:40<HMCa> nature of the beast.
01/02 03:29:27<nilli> we may be orbiting different planets on the way but each planted is part of some galaxy ext...
01/02 03:31:09<HMCa> sure.  otoh there should only need be one stable genesis in the end.  It will have had one lineage, and everyone else will have been doing "something else"
01/02 03:31:23<HMCa> wasting time.
01/02 03:32:16<HMCa> but that is really getting beside the point, eh? ;-)
01/02 03:32:45<nilli> yes lets move on
01/02 03:32:54<nilli> with respect
01/02 03:33:34* HMCa nods
01/02 03:34:57<nilli> I think respect is one of the most powerful tools human device on a social level that we need to translate to our autonomic creation
01/02 03:35:14<daemoz> happy holidays all o/
01/02 03:35:24* daemoz is glad they're over
01/02 03:35:39* HMCa too :-\
01/02 03:35:58<HMCa> was far too hectic
01/02 03:36:09<daemoz> Indeed. Gives little space to think.
01/02 03:36:16<nilli> holidays are over , time to celebrate!
01/02 03:36:22<daemoz> by working! :D
01/02 03:36:35<daemoz> Well for me, studying.
01/02 03:36:54<daemoz> Glad the wiki is back up.
01/02 03:37:06<daemoz> Why did redfish bounce anyways?
01/02 03:37:16<HMCa> daemoz: how is that study going?
01/02 03:37:46<daemoz> It goes, I'm sludging my way through that blog post but it's mostly been me getting stuck on haskell things and math/logic symbols.
01/02 03:38:15<daemoz> basically half-way through the first of the blog posts but I do understand up to there.
01/02 03:38:32<HMCa> redfish broke quickly, it seems. also maybe forked?
01/02 03:38:59<daemoz> Hmm
01/02 03:39:04<HMCa> he said something about taking the concept to some CAs or something
01/02 03:39:20<HMCa> (inside-ish joke, sry)
01/02 03:39:23<stoopkid> nilli: i think we do in at least one way. engaging with people in decentralized rather than centralized settings carries a kind of implicit sign of respect between all of those involved, imo
01/02 03:40:36<daemoz> yeah looks like redfish is working on something as per his github, anyways~
01/02 03:42:11<stoopkid> i'll let redfish speak on that if he ever decides to
01/02 03:42:22<daemoz> thus the 'anyways'
01/02 03:42:23<nilli> can I send you guys to read something that I have come to think of as a result of my conversation with the Simpson guy whom i had pushed and that made me decide to keep it to myself from now on.?
01/02 03:42:26<daemoz> as in, moving on :P
01/02 03:44:13<nilli> its nonsense but a good one I think. ... as long as its on my own page somewhere in the web
01/02 03:44:24<daemoz> brb
01/02 03:44:27<stoopkid> sure
01/02 03:44:38<nilli> here I stick with the treasurer role
01/02 03:45:43<nilli> https://steemit.com/mathematics/@nili/the-definitions-of-0-and-1-as-symmetries-and-its-unification-with-physics-and-formal-logic-through-a-transformation
01/02 03:47:17<nilli> So HMC and stoop lets work out the milestones but with relation to the value of the agora coin value too
01/02 03:48:06<HMCa> if you just play a treasurer role, doesn't that relation sort of work itself out naturally? XD
01/02 03:48:55<nilli> Iol I guess that you are right HMC
01/02 03:50:58<HMCa> nilli: so I personally think that the first step of your original plan is still a good idea...
01/02 03:52:00<nilli> ok ill work out something and we will agree. meanwhile stoopkid I need you to contact me trough my email or on bitcoitalk forum and so is koo5
01/02 03:52:46<HMCa> nilli: they certainly deserve it, imo... and I don't think anyone would argue.
01/02 03:53:12<nilli> agree HMC will start with the first step
01/02 03:54:51<nilli> and then formulate the rest
01/02 03:55:09<stoopkid> hrm, sure, could you pm me your email?
01/02 03:56:03<HMCa> nilli: cool.  now wrt the second paragraph of your pm, heh...
01/02 03:56:41<HMCa> I'm reminded of the many meanings of the word "interest"
01/02 03:56:42<HMCa> heh
01/02 03:57:47*** Join: nilli_ (258eae44@gateway/web/freenode/ip.37.142.174.68, (unauthenticated): 37.142.174.68 - http://webchat.freenode.net)
01/02 03:58:04<HMCa> wb
01/02 03:58:08<nilli_> sorry got disconnected. what about the other part
01/02 03:58:42<nilli_> stoop my email is my name at gmail
01/02 03:59:25*** Quit: nilli (258eaefb@gateway/web/freenode/ip.37.142.174.251) left #AutoNomic: Ping timeout: 260 seconds
01/02 03:59:36<HMCa> :56 < HMCa> nilli: cool.  now wrt the second paragraph of your pm, heh...
              <HMCa> :56 < HMCa> I'm reminded of the many meanings of the word "interest"
01/02 03:59:37<HMCa> :56 < HMCa> heh
01/02 04:00:54<HMCa> in a sense, we must build a mechanism to .... "find why each is interesting"
01/02 04:01:14<HMCa> they turn away those refugees because they have no interest in them
01/02 04:03:59<HMCa> imo, to solve "this all" we must have a mechanism which breaks down that boundary, allows "interest without borders" (in more than one sense of the word, there)
01/02 04:04:26<nilli_> yes. I have been working with that notion for some years now. charity corrupted human in that respect
01/02 04:04:40<HMCa> not only allows it but promotes and fosters it "as a matter of course"
01/02 04:04:57<HMCa> "organizes and aligns it"
01/02 04:05:27<nilli_> when an individual will have a direct power to his belonging to a community it will be solved
01/02 04:05:53<HMCa> bleh, not *a* community...
01/02 04:06:00<HMCa> here we are each of many tribes!
01/02 04:06:29<nilli_> not a "a"
01/02 04:07:35<HMCa> dototd: a community of (nearly) unconstrained virtual communities
01/02 04:08:14<nilli_> "communities"  many "Individual" one "Identites" as many as serve the individual as connection to communities (but that the theory to implement on the net)
01/02 04:08:55<nilli_> the real  issue with the refugees is to create a value the them as individuals
01/02 04:09:46<nilli_> the piratically worth money in terms of the politics to we need to find a way to leverage it
01/02 04:10:42<nilli_> there is a lot of politics involved but for me to even start thinking of it I have to know that I have a source of incom
01/02 04:11:10<HMCa> no, the issue is to find the value that is already here, and find a value distribution within it that works optimally for all at the time
01/02 04:11:27<HMCa> and then to do that over and over and again.
01/02 04:11:29<nilli_> and there is the network effect of a refuge that can be capitalized on
01/02 04:11:55<nilli_> that is the value that is there
01/02 04:12:28<HMCa> there are many values there that can be "aligned"...
01/02 04:12:48<nilli_> they are spread across the glob but are connected as families
01/02 04:14:02<HMCa> any given person alive has skills and/or resources that someone else can utilize, the real problem is how to do so fairly
01/02 04:14:26<nilli_>  yes there are many values there. but to kick start it from the despair it so hard.
01/02 04:14:38<HMCa> how to soundly define "equitable"
01/02 04:15:54<HMCa> well, we're building something I call a giant "valuation machine"... it tries to organically grow a sound definition of ewuitable from a maximally fair seed.
01/02 04:16:13<HMCa> *equitable
01/02 04:16:55<nilli_>  guys I have to go now. will share with you both my treasurer ideas the refugee issues too. but first I need to know where exactly is standing now and what the involved people are doing
01/02 04:17:48<nilli_> I know them very well
01/02 04:18:27<nilli_> but had to distance myself from it in the past three years
01/02 04:19:36<nilli_> ok got to run
01/02 04:19:59<HMCa> no worries
01/02 04:20:46<stoopkid> catch ya later, will be probably fairly busy/afk the next 2 weeks though (work trip)
01/02 04:23:54*** Quit: nilli_ (258eae44@gateway/web/freenode/ip.37.142.174.68) left #AutoNomic: Ping timeout: 260 seconds
01/02 06:55:49*** Join: koom (~sirdancea@109.107.211.244, (unauthenticated): realname)
01/02 07:10:37*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Remote host closed the connection
01/02 07:25:37*** Join: koom (~sirdancea@109.107.211.244, (unauthenticated): realname)
01/02 14:07:11*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-gyxiplboihnyvmdc, (unauthenticated): kook)
01/02 16:16:22*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-gyxiplboihnyvmdc) left #AutoNomic: Quit: Connection closed for inactivity
01/02 16:20:06*** Join: Knutes02 (uid231536@gateway/web/irccloud.com/x-dmeptzytqzmhstab, (unauthenticated): Knutes02)
01/02 17:55:17*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/02 17:55:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/02 18:29:48*** Quit: Knutes02 (uid231536@gateway/web/irccloud.com/x-dmeptzytqzmhstab) left #AutoNomic: Quit: Connection closed for inactivity
01/02 20:11:41<daemoz> Is Weak-Head-Normal-Form where just the outer expression has no redexes? And NF is where there are no redexes including the inner expressions?
01/03 01:24:04-SaslServ- kook!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/03 01:24:11*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/03 01:25:30<editable-koo>#AutoNomic> 
01/03 01:25:38<editable-koo>err
01/03 01:26:19<editable-koo>was the old wiki content on 
              <editable-koo>#AutoNomic> 
01/03 01:26:24<editable-koo>err
01/03 01:27:08*** Unknown command: title
01/03 01:27:31<editable-koo>on http://167.88.171.233/AutoNomic/Main_Page
01/03 04:13:41*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
01/03 05:48:36*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hvumrqjgqdeoxtvq) left #AutoNomic: Quit: Connection closed for inactivity
01/03 11:13:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gjgbyyslswtxebcb, stoopkid: stoopkid)
01/03 11:14:42<stoopkid> editable-koo: no, old wiki content was kind of a mess so i'm putting it back up piece-by-piece and trying not to let it get disorganized
01/03 11:33:11*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 240 seconds
01/03 11:40:39<stoopkid> nice, figured out how to separate the namespacing with transparent prefixes
01/03 11:41:06<stoopkid> so now ../AutoNomic/Code will go to ../wiki/AutoNomic:Code but will just show up as "Code"
01/03 11:42:13<stoopkid> editable-koo: can you log #autonomic-dev too, probably wanna move the wiki discussion over there
01/03 11:51:16<stoopkid> daemoz: something like that, technically the outer expression contains all the inner expressions so if any of those are redexes then technically also is the outer expression, but yes its basically in whnf when its only reducible by reducing the inner expressions
01/03 15:12:02-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/03 15:12:08*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
#AutoNomic> 01/03 15:42:43*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #AutoNomic: Home of the AutoNomic block-chain project | Please ask anything | Wiki: http://167.88.171.233/AutoNomic/Main_Page | Log: https://matrix.to/#/#autonomic:matrix.org | https://ncatlab.org/nlab/show/computational+trinitarianism | http://www.rbjones.com/rbjpub/logic/cl/tlc001.htm | http://www.cse.chalmers.se/research/group/logic/book/book.pdf
              *** Topic set by stoopkid on Sun Dec 31 05:14:25 2017, 3 days 10 hours 28 minutes 18 seconds ago
              *** Names: editable-koo koom stoopkid daemoz reffael Tamara_ dmiles lexxus[m] lexx_[m] deadhand[m] jibble_ cantora Deadhand tigertigertiger[ @ChanServ stoop[m] nilli[m] stoopkid[m] daemoz[m] genuinelyfx[m] koo5[m] HMCa lilpotato vbmithr
              *** End of /NAMES list.
01/03 18:09:47*** Quit: dmiles (dmiles@24.20.102.245) left #AutoNomic: Ping timeout: 256 seconds
01/03 18:22:08<koo5[m]> i owe amazon 7 dollars, they have my name and address and an old card number. What does everyone think, pay?
01/03 18:41:52*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 255 seconds
01/03 19:32:34<daemoz> is it a big deal either way?
01/03 19:34:54<daemoz> by the way, this has been quite helpful to me in understanding lambda calc syntax. The examples helped solidify it too.
01/03 19:34:56<daemoz> http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/1.LAMBDA-CALCULUS.html
01/03 19:35:21<daemoz> Probably a good link to have for people, like me, who hadn't seen the formal syntax before.
01/03 20:12:49*** Quit: vbmithr (~vb@37.187.116.20) left #AutoNomic: Ping timeout: 260 seconds
01/03 20:12:58*** Join: vbmithr (~vb@luminar.eu.org, vbmithr: Vincent)
01/03 22:30:20*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/03 22:30:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/04 01:26:49*** Quit: jibble_ (uid48680@gateway/web/irccloud.com/x-oocooatudlbnqcbc) left #AutoNomic: Quit: Connection closed for inactivity
01/04 02:28:31*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/04 02:58:02<koo5[m]> hah its actually 60
01/04 02:58:37<koo5[m]> 15 for each month of the "free" ec2 instance before they killed it
01/04 03:41:07*** Join: suiqiublockchain (~suiqiublo@101.83.183.54, (unauthenticated): realname)
01/04 06:12:31*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gjgbyyslswtxebcb) left #AutoNomic: Quit: Connection closed for inactivity
01/04 10:17:42*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bmdazvbmtizvhdyc, stoopkid: stoopkid)
01/04 11:04:58<editable-koo>123
01/04 15:19:41*** Join: jibble_ (uid48680@gateway/web/irccloud.com/x-sgkuihilkftulbrh, jibble_: bacon)
01/04 15:32:14*** Quit: suiqiublockchain (~suiqiublo@101.83.183.54) left #AutoNomic: Read error: Connection reset by peer
01/04 15:32:15*** Join: suiqiu_ (~suiqiublo@101.83.183.54, (unauthenticated): realname)
01/04 16:00:49*** Join: suiqiu__ (~suiqiublo@101.83.183.54, (unauthenticated): realname)
01/04 16:03:03*** Quit: suiqiu_ (~suiqiublo@101.83.183.54) left #AutoNomic: Ping timeout: 252 seconds
01/04 19:51:58*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
01/04 21:18:46<daemoz> Ugh yeah I got hit with that too.
01/04 21:18:58<daemoz> Pretty sure I just complained in an e-mail.
01/05 00:01:04*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
01/05 00:48:43*** Quit: suiqiu__ (~suiqiublo@101.83.183.54) left #AutoNomic: Remote host closed the connection
01/05 00:49:07*** Join: suiqiu__ (~suiqiublo@101.83.183.54, (unauthenticated): realname)
01/05 01:35:52*** Mode change: +o stoopkid on #AutoNomic by ChanServ (ChanServ@services.)
01/05 01:36:16*** Topic change by uid137696@gateway/web/irccloud.com/x-bmdazvbmtizvhdyc: Home of the AutoNomic block-chain project | Please ask anything | Wiki: http://167.88.171.233/AutoNomic/Main_Page | AutoNomic | Log: https://matrix.to/#/#autonomic:matrix.org | https://ncatlab.org/nlab/show/computational+trinitarianism | http://www.rbjones.com/rbjpub/logic/cl/tlc001.htm | http://www.cse.chalmers.se/research/group/logic/book/book.pdf
01/05 05:13:52-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/05 05:14:04*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/05 05:27:30*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
01/05 06:24:45<editable-koo>i wonder if they might go after me legally? screw up my credit rating if theres such a thing?
01/05 08:34:07<stoopkid> it certainly wont help your rating(s) anyway
01/05 08:54:55*** Join: koom (~sirdancea@109.107.211.244, (unauthenticated): realname)
01/05 15:31:18*** Quit: suiqiu__ (~suiqiublo@101.83.183.54) left #AutoNomic: Remote host closed the connection
01/05 15:32:09*** Join: suiqiublockchain (~suiqiublo@101.83.183.54, (unauthenticated): realname)
01/05 18:41:42*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 260 seconds
01/05 19:59:42<koo5[m]> anyway?
01/05 20:16:12<stoopkid> hrm?
01/05 21:18:45*** Join: jibble__ (uid48680@gateway/web/irccloud.com/x-xwyzdmavcpbdzxqk, (unauthenticated): bacon)
01/05 21:19:46*** Join: stoopkid_ (uid137696@gateway/web/irccloud.com/x-rdctkfqdypwbgfop, stoopkid: stoopkid)
01/05 21:26:36*** Nick regain: stoopkid_ (uid137696@gateway/web/irccloud.com/x-rdctkfqdypwbgfop) is now known as stoopkid
01/05 21:26:37*** Nick regain: jibble__ (uid48680@gateway/web/irccloud.com/x-xwyzdmavcpbdzxqk) is now known as jibble_
01/05 23:26:08*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/05 23:26:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/05 23:31:28<stoopkid> daemoz: finally got a chance to read that lambda calc page you linked, does look like a good intro (though the church-rosser theorem proofs get a little beyond "intro" level), i'll stick it up on the wiki
01/06 02:07:51*** Join: suiqiu_ (~suiqiublo@101.83.179.3, (unauthenticated): realname)
01/06 02:11:09*** Quit: suiqiublockchain (~suiqiublo@101.83.183.54) left #AutoNomic: Ping timeout: 248 seconds
01/06 05:38:52<daemoz> Noice!
01/06 06:53:11*** Quit: stoop[m] (stoopmatri@gateway/shell/matrix.org/x-etglauqxmewhlfwo) left #AutoNomic: Quit: idle on matrix for more than 30 days
01/06 07:07:30*** Quit: stoopkid[m] (stoopkidma@gateway/shell/matrix.org/x-gyhmpcjwzafyovab) left #AutoNomic: Quit: idle on matrix for more than 30 days
01/06 07:38:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/06 07:39:15*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/06 15:31:46*** Quit: suiqiu_ (~suiqiublo@101.83.179.3) left #AutoNomic: Read error: Connection reset by peer
01/06 15:32:07*** Join: suiqiublockchain (~suiqiublo@101.83.179.3, (unauthenticated): realname)
01/06 17:08:51<HMCa> hi daemoz
01/06 17:28:24<daemoz> hey
01/06 19:15:52*** Quit: jibble_ (uid48680@gateway/web/irccloud.com/x-xwyzdmavcpbdzxqk) left #AutoNomic: Ping timeout: 252 seconds
01/06 19:16:13*** Netmerge: *.net *.split, split 19 hours 39 minutes 38 seconds ago (Use /WL to see who's still missing)
01/06 22:01:41*** Quit: suiqiublockchain (~suiqiublo@101.83.179.3) left #AutoNomic: Remote host closed the connection
01/06 22:02:06*** Join: suiqiublockchain (~suiqiublo@101.83.179.3, (unauthenticated): realname)
01/06 23:54:18*** Quit: jibble_ (uid48680@gateway/web/irccloud.com/x-wycerywjbyixbqeu) left #AutoNomic: Quit: Connection closed for inactivity
01/07 02:06:19*** Join: jibble_ (uid48680@gateway/web/irccloud.com/x-qfejutnriawlqsek, (unauthenticated): bacon)
01/07 03:42:38*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
01/07 04:26:13*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rdctkfqdypwbgfop) left #AutoNomic: Quit: Connection closed for inactivity
01/07 08:25:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/07 08:25:27*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/07 11:47:59*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jswrzncfqnccsfze, stoopkid: stoopkid)
01/07 15:31:16*** Quit: suiqiublockchain (~suiqiublo@101.83.179.3) left #AutoNomic: Remote host closed the connection
01/07 15:32:14*** Join: suiqiublockchain (~suiqiublo@101.83.179.3, (unauthenticated): realname)
01/07 16:03:41*** Netmerge: *.net *.split, split 4 hours 15 minutes 49 seconds ago (Use /WL to see who's still missing)
01/07 17:33:52*** Join: tigertigertiger (1f138280@gateway/web/freenode/ip.31.19.130.128, (unauthenticated): 31.19.130.128 - http://webchat.freenode.net)
01/07 17:38:52<tigertigertiger[> hey stoop hmca, how is progress going?
01/07 17:42:54<stoopkid> we're making a lot of progress in getting back to making progress :) trying to get some things straightened out in our personal lives so we can get back to working on the project full-time; almost there now
01/07 17:59:35<tigertigertiger> wow that sounds cool
01/07 18:03:45<tigertigertiger> was there any more talk about the results of ohad? i just saw something in the log that it was useless?
01/07 18:04:52*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/07 18:08:09<stoopkid> i still haven't had a chance to give it a thorough review, personally; HMC might be able to explain it for you (or, us :D) though
01/07 18:08:33<tigertigertiger> i think he said he proved that there was no decideability
01/07 18:10:57<tigertigertiger> btw are there any other crypto projects you find interesting at the moment? beside your own?
01/07 18:16:44<stoopkid> well, unfortunately same kinda thing, i'd probably be more interested in more of them if i spent more time thoroughly reviewing them rather than just working on AutoNomic and my day-job
01/07 18:23:47<tigertigertiger> last time i asked hmc this question he pointed me to huntercoin
01/07 18:23:59<tigertigertiger> its funny, but nothing more^^
01/07 18:28:12<stoopkid> if you like huntercoin you might also like motocoin :)
01/07 18:31:06<stoopkid> i really probably won't get back to studying other decentralized platforms in depth until we finish this one, unfortunately
01/07 18:32:08<stoopkid> except maybe ohad's since everyone's asking about it ofc
01/07 18:44:20<tigertigertiger> yeah motocoin he named me too
01/07 18:44:33<tigertigertiger> but this is nothing revolutionary like tau or autonomic^^
01/07 18:50:28<stoopkid> main crypto project besides ours that's struck my eye lately is qeditas, but this is not an endorsement, i haven't thoroughly reviewed the technical details :)
01/07 18:54:53*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
01/07 19:05:27*** Quit: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-hfcznmxbrgpaenix) left #AutoNomic: Remote host closed the connection
01/07 19:05:33*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-yjmjkwbjnwvigapv) left #AutoNomic: Read error: Connection reset by peer
01/07 19:05:35*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-koxhiutgaoeckbqu) left #AutoNomic: Read error: Connection reset by peer
01/07 19:05:37*** Quit: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-fxhrqbuiqlcueaxd) left #AutoNomic: Read error: Connection reset by peer
              *** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-saxkerswfxrjxooa) left #AutoNomic: Remote host closed the connection
01/07 19:05:38*** Quit: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-hcsiuzxdndegjblx) left #AutoNomic: Remote host closed the connection
01/07 19:05:39*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-ohoovvhnztvauzbs) left #AutoNomic: Read error: Connection reset by peer
              *** Quit: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-ikekokvmspbdxdww) left #AutoNomic: Remote host closed the connection
01/07 19:15:49*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-rgxkrtjbppxbgqti, (unauthenticated): @koo5:matrix.org)
01/07 19:20:37<tigertigertiger> thanks will look into it!
01/07 19:39:18*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-vkwemburiscokpdm, (unauthenticated): @genuinelyfx:matrix.org)
01/07 19:39:25*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-xhbsmwubqeetuwka, (unauthenticated): @nilli:matrix.org)
              *** Join: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-lozblvuotmfqegnr, (unauthenticated): @daemoz:matrix.org)
              *** Join: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-zfpqcffouawvuxuv, (unauthenticated): @deadhand:matrix.org)
              *** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-pcpeoxopkmthzrzz, (unauthenticated): @lexxus:matrix.org)
              *** Join: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-wkjhtfsbpsiadpsp, (unauthenticated): @lexx_:matrix.org)
01/07 19:39:26*** Join: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-ersppmfiynyevlws, (unauthenticated): @tigertigertig:matrix.org)
01/07 19:43:15*** Quit: tigertigertiger (1f138280@gateway/web/freenode/ip.31.19.130.128) left #AutoNomic: Quit: Page closed
01/07 22:05:02*** Join: dusix10 (~kdija@2a03:5a00:17:11f:dced:6bff:fe73:a761, (unauthenticated): ldettnel)
01/07 22:09:26*** Quit: dusix10 (~kdija@2a03:5a00:17:11f:dced:6bff:fe73:a761) left #AutoNomic: K-Lined
01/08 02:12:55*** Netsplit: *.net *.split (Use /WL to see who left)
01/08 02:14:05*** Netmerge: *.net *.split, split 6 hours 53 minutes 57 seconds ago (Use /WL to see who's still missing)
01/08 02:14:40*** Quit: suiqiublockchain (~suiqiublo@101.83.179.3) left #AutoNomic: Remote host closed the connection
01/08 02:15:08*** Join: suiqiublockchain (~suiqiublo@101.83.179.3, (unauthenticated): ralname)
01/08 04:22:32*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/08 04:27:08*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
01/08 05:42:18*** Join: koom (~sirdancea@109.107.211.244, (unauthenticated): realname)
01/08 05:44:21*** Join: kook (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/08 05:56:57*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Remote host closed the connection
01/08 06:19:12*** Quit: kook (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 264 seconds
01/08 07:56:40*** Quit: suiqiublockchain (~suiqiublo@101.83.179.3) left #AutoNomic: Remote host closed the connection
01/08 07:57:08*** Join: suiqiublockchain (~suiqiublo@101.83.179.3, (unauthenticated): realname)
01/08 14:37:49*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/08 15:02:15<editable-koo>queditas?
01/08 15:02:51*** Names: koom suiqiublockchain daemoz[m] tigertigertiger[ lexx_[m] lexxus[m] deadhand[m] nilli[m] genuinelyfx[m] koo5[m] stoopkid daemoz jibble_ vbmithr editable-koo reffael Tamara_ cantora Deadhand @ChanServ HMCa lilpotato
              *** End of /NAMES list.
01/08 15:03:36<stoopkid> i have no idea how to pronounce it heh
01/08 15:06:51<editable-koo>do you have a link?
01/08 15:07:13<stoopkid> http://qeditas.org/
01/08 15:23:18<editable-koo>mmm
01/08 16:22:25<koom> think you could sum up differences from tau?
01/08 16:23:02<stoopkid> between autonomic and tau?
01/08 16:56:40<editable-koo>between queditas and autonomic
01/08 16:58:03<stoopkid> there's a lot of differences, i'll go through at some point and compare/contrast them on specifics
01/08 17:10:52*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 265 seconds
01/08 19:07:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/08 20:42:03<stoopkid> HMCa: in the open-phase example of "ping me once an hour for 24 hours and i'll give you a coin", how does the network verify that the terms of the contract have / haven't been lived up to in these open-phase interactions? or does the network not verify this and my question is besides the point of the example?
01/08 21:15:15*** Quit: suiqiublockchain (~suiqiublo@101.83.179.3) left #AutoNomic: Read error: Connection reset by peer
01/08 21:33:38*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
01/08 21:55:31*** Join: octo_ (octo@c32-116.icpnet.pl, (unauthenticated): octo)
01/08 22:01:13*** Join: suiqiublockchain (~suiqiublo@101.83.179.3, suiqiublockchain: realname)
01/08 23:38:27*** Quit: octo_ (octo@c32-116.icpnet.pl) left #AutoNomic: Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]
01/09 02:08:38*** Join: suiqiu_ (~suiqiublo@180.162.45.183, (unauthenticated): realname)
01/09 02:12:21*** Quit: suiqiublockchain (~suiqiublo@101.83.179.3) left #AutoNomic: Ping timeout: 268 seconds
01/09 03:13:06*** Join: lexx_ (2590556f@gateway/web/freenode/ip.37.144.85.111, (unauthenticated): 37-144-85-111.broadband.corbina.ru/37.144.85.111)
01/09 03:13:30<lexx_> Hi again everyone, I wonder have you thought about strategy of dealing with issues Ethereum faced with bugs in smart contracts? I understand that it would be possible to prove certain properties of contacts, but what if, for example, because of the bug in Autonomic someone would be able to prove False/empty type?
01/09 03:14:10<lexx_>  Or let’s say one of the “contexts” has DAO-like problem? It would be great to have some sort of well-defined contingency strategy (which I think Ethereum does not have).
01/09 03:24:25*** Quit: lexx_ (2590556f@gateway/web/freenode/ip.37.144.85.111) left #AutoNomic: Quit: Page closed
01/09 03:50:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/09 06:08:07*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 255 seconds
01/09 06:19:17*** Join: Oihan (~AndChat68@158.227.184.69, (unauthenticated): AndChat685089)
01/09 07:28:28*** Quit: Oihan (~AndChat68@158.227.184.69) left #AutoNomic: Read error: Connection reset by peer
01/09 07:42:49*** Quit: suiqiu_ (~suiqiublo@180.162.45.183) left #AutoNomic: Remote host closed the connection
01/09 07:43:16*** Join: suiqiu_ (~suiqiublo@180.162.45.183, (unauthenticated): realname)
01/09 08:03:34*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/09 08:14:26*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 252 seconds
01/09 15:06:35*** Mode change: +o stoopkid on #AutoNomic by ChanServ (ChanServ@services.)
01/09 15:09:10*** Topic change by uid137696@gateway/web/irccloud.com/x-jswrzncfqnccsfze: Home of the AutoNomic block-chain project | Please ask anything | Wiki: http://167.88.171.233/AutoNomic | Log: https://matrix.to/#/#autonomic:matrix.org | https://167.88.171.233/logs/AutoNomic.log | ncatlab.org/nlab/show/computational+trinitarianism | http://www.rbjones.com/rbjpub/logic/cl/tlc001.htm | http://www.cse.chalmers.se/research/group/logic/book/book.pdf
01/09 15:13:21<stoopkid> @lexx_ if there's a flaw in the logic allowing an inconsistency then there wouldn't be much we could do about that except for prevent it; it would require a hard-fork to fix it
01/09 15:15:37<stoopkid> if the flaw is only in common implementations of the logic and not the logic itself, then as long as the buggy implementations control less than 50% of the network then the network should be resilient against this and will even demonstrate to users with buggy clients what the bugs are because they will prevent these users from participation
01/09 15:19:19<stoopkid> we believe the proofs of the logic's consistency to be extremely convincing, to say the least, so imo the big concern is to just make sure that no specific (phenotypic) implementation error makes its way into any collection of clients that control > 50% of the network
01/09 15:20:16<stoopkid> now, if a context has a DAO-like problem, the contingency plan here is to do defer conflict-resolution to the parent context
01/09 15:20:35<stoopkid> but ofc, this only works so long as there is still a parent context to defer the conflict-resolution to
01/09 15:20:50<stoopkid> i.e. it can't go any further than root
01/09 15:23:20<stoopkid> if we get a conflict in root that breaks the incentives towards eventual convergence, then, well, we get an irreversible fork
01/09 15:25:31<stoopkid> seems the best you can hope for here is that everybody relatively quickly gets on the same page and jumps to the same next thing like what happened in ethereum more or less
01/09 15:28:38<stoopkid> autonomic is a consensus structure, it's how we can agree. before we agree, we have to agree on how to agree, so a conflict in root will amount to a breakdown in our agreements on how to have further agreements
01/09 15:29:08<stoopkid> so, best course of action as far as we can tell here is, keep root conflict-free, hence no coin
01/09 15:30:55*** Quit: suiqiu_ (~suiqiublo@180.162.45.183) left #AutoNomic: Remote host closed the connection
01/09 15:32:15*** Join: suiqiublockchain (~suiqiublo@180.162.45.183, (unauthenticated): realname)
01/09 15:33:28<stoopkid> we would seek to defer conflicts down to the subcontexts under agreed-upon conflict-resolution strategies, so that root can simply perpetually continue to collect consensus
01/09 15:34:16<stoopkid> HMC can go into some more detail about all that
01/09 18:05:50<editable-koo>coinsensus?
01/09 19:31:24*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/09 19:31:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/09 19:35:49*** Quit: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-ersppmfiynyevlws) left #AutoNomic: Ping timeout: 276 seconds
01/09 19:36:11*** Join: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-wnnccxcbdlaypkea, (unauthenticated): @tigertigertig:matrix.org)
01/10 00:57:58*** Join: Knutes02 (uid231536@gateway/web/irccloud.com/x-gumjnoawolmsuupp, (unauthenticated): Knutes02)
01/10 01:27:39<stoopkid> nilli mentioned an interesting notion to me regarding the identity-binding problem; it doesn't solve the problem, but is one of the few things i've seen so far that even has any kind of effect on it whatsoever. the premise is pretty straightforward: incentivize the usage of addresses with deeper first appearance in the chain
01/10 01:30:03<stoopkid> then there's very high probability of having some cost associated to holding multiple identities rather than consolidating assets into the oldest address
01/10 01:32:11<stoopkid> but it doesn't solve the problem because, a) having an associated cost ofc doesn't necessarily imply that people won't pay that cost, b) the same entity can potentially get multiple identities at the same depth without any associated cost, c) it incentivizes address "inheritance", in order to try to get your hands on the oldest address you can
01/10 01:33:48<stoopkid> plus this solution would exacerbate the already naturally occurring problem of first-movers' advantage, and since it doesn't actually solve the identity problem, seems it has the potential to cause more harm than good
01/10 01:35:57<stoopkid> but i find the attempt interesting because it *does* actually demonstrate the existence of a link between virtual and real identities, and for all i know it could be the case that a few tweaks from here could actually solve the problem
01/10 01:38:13<stoopkid> look at btc; can't really work without these sociological & economic assumptions about how players will be incentivized
01/10 01:38:33<stoopkid> that's like a truly magic formula, you can search around pure math and physics for a lifetime and you won't stumble on that
01/10 01:39:44<stoopkid> but it works, and upon understanding the assumptions being used, and reflecting on whether these assumptions adequately represent reality, it even appears to make sense
01/10 01:42:12<stoopkid> like you once told me: where the basic math is like chemistry, these extra postulates are like nuclear reactions
01/10 01:44:13<stoopkid> so i'm still holding out hope that the identity-binding problem can at least be solved relative to incentivization structures & sociological models just as decentralized consensus is solved relative to this by btc
01/10 03:07:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 276 seconds
01/10 03:07:40*** Quit: Knutes02 (uid231536@gateway/web/irccloud.com/x-gumjnoawolmsuupp) left #AutoNomic: Quit: Connection closed for inactivity
01/10 03:09:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/10 03:19:53*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 248 seconds
01/10 03:24:05*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/10 07:08:44*** Join: Oihan (~AndChat68@158.227.184.161, (unauthenticated): AndChat685089)
01/10 09:42:21*** Quit: Oihan (~AndChat68@158.227.184.161) left #AutoNomic: Read error: Connection reset by peer
01/10 09:52:05*** Join: Oihan (~AndChat68@0-40-179-94.pool.ukrtel.net, (unauthenticated): AndChat685089)
01/10 09:54:32*** Join: Eguzki (~AndChat68@46-133-196-36.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/10 09:54:48*** Quit: Oihan (~AndChat68@0-40-179-94.pool.ukrtel.net) left #AutoNomic: Read error: Connection reset by peer
01/10 09:55:29*** Join: Oihan (~AndChat68@0-40-179-94.pool.ukrtel.net, (unauthenticated): AndChat685089)
01/10 09:56:38*** Join: Eguzkisua (~AndChat68@46-133-163-160.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/10 09:58:50*** Quit: Eguzki (~AndChat68@46-133-196-36.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 246 seconds
01/10 09:59:53*** Quit: Oihan (~AndChat68@0-40-179-94.pool.ukrtel.net) left #AutoNomic: Ping timeout: 246 seconds
01/10 10:06:58*** Join: Oihan (~AndChat68@176.122.120.26, (unauthenticated): AndChat685089)
01/10 10:09:50*** Quit: Eguzkisua (~AndChat68@46-133-163-160.dialup.umc.net.ua) left #AutoNomic: Read error: Connection reset by peer
01/10 10:43:49*** Quit: suiqiublockchain (~suiqiublo@180.162.45.183) left #AutoNomic: Remote host closed the connection
01/10 10:44:23*** Join: suiqiublockchain (~suiqiublo@180.162.45.183, (unauthenticated): realname)
01/10 11:13:49*** Quit: Oihan (~AndChat68@176.122.120.26) left #AutoNomic: Ping timeout: 240 seconds
01/10 11:14:07*** Join: Oihan (~AndChat68@158.227.184.94, (unauthenticated): AndChat685089)
01/10 15:32:14*** Join: suiqiu_ (~suiqiublo@180.162.45.183, (unauthenticated): realname)
01/10 15:33:42*** Quit: suiqiublockchain (~suiqiublo@180.162.45.183) left #AutoNomic: Ping timeout: 256 seconds
01/10 21:19:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/10 21:19:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/11 04:44:34*** Join: Bobthebuild (2f11ddb4@gateway/web/freenode/ip.47.17.221.180, (unauthenticated): ool-2f11ddb4.dyn.optonline.net/47.17.221.180)
01/11 05:13:23<Bobthebuild> Read the logs, kind of surprised you guys don't talk about the code released by ohad. I'm not a technical guy by any means, but I have been following both of these projects for a long time. Since stoop said he is not too sure about ohads code, perhaps HMC can shed some light. Based on what I read, it seems like you believe what ohad has posted is nothing more than information you already spoke to him about. Please elaborate, I
01/11 05:17:57*** Quit: Bobthebuild (2f11ddb4@gateway/web/freenode/ip.47.17.221.180) left #AutoNomic: Ping timeout: 260 seconds
01/11 07:17:21*** Quit: Oihan (~AndChat68@158.227.184.94) left #AutoNomic: Read error: Connection reset by peer
01/11 07:28:06*** Join: Oihan (~AndChat68@176.122.120.26, (unauthenticated): AndChat685089)
01/11 10:44:53*** Quit: Oihan (~AndChat68@176.122.120.26) left #AutoNomic: Ping timeout: 276 seconds
01/11 10:45:18*** Join: Oihan (~AndChat68@158.227.184.194, (unauthenticated): AndChat685089)
01/11 11:14:27<stoopkid> @Bobthebuild : you got cut off after "Please elaborate, I", but yea i haven't had much time to dig into his code yet, i'll try to get around to it soon
01/11 11:28:06*** Join: Eguzki (~AndChat68@46-133-30-69.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/11 11:28:28*** Quit: Oihan (~AndChat68@158.227.184.194) left #AutoNomic: Read error: Connection reset by peer
01/11 11:32:59*** Quit: Eguzki (~AndChat68@46-133-30-69.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 276 seconds
01/11 11:33:20*** Join: Oihan (~AndChat68@158.227.184.194, (unauthenticated): AndChat685089)
01/11 12:27:03*** Quit: Oihan (~AndChat68@158.227.184.194) left #AutoNomic: Ping timeout: 252 seconds
01/11 12:27:27*** Join: Oihan (~AndChat68@158.227.184.194, (unauthenticated): AndChat685089)
01/11 15:30:52*** Quit: suiqiu_ (~suiqiublo@180.162.45.183) left #AutoNomic: Remote host closed the connection
01/11 15:32:13*** Join: suiqiublockchain (~suiqiublo@180.162.45.183, (unauthenticated): realname)
01/11 16:20:51*** Join: lex_ (b246ab07@gateway/web/freenode/ip.178.70.171.7, (unauthenticated): 178.70.171.7 - http://webchat.freenode.net)
01/11 16:23:22<lex_> Hi all, "marpa_an.cpp" includes "marpa.h", and I think it is not in repository. Trying to build the project and run the test. It would be cool to have it. Thanks!
01/11 16:25:41<stoopkid> nice, thanks for trying to build & test! i'll try to get that fixed up
01/11 16:40:11<lex_> no problem, just trying to brush up my rusty cpp, i'll let you know if I find anything interesting
01/11 17:01:04*** Quit: lex_ (b246ab07@gateway/web/freenode/ip.178.70.171.7) left #AutoNomic: Quit: Page closed
01/11 17:10:12*** Quit: lilpotato (~potato@107.173.42.237) left #AutoNomic: Ping timeout: 240 seconds
01/11 18:30:44<koo5[m]> stoopkid: what does your repo build?
01/11 18:41:22*** Join: Thechosenson (d45c7a06@gateway/web/freenode/ip.212.92.122.6, (unauthenticated): 212.92.122.6 - http://webchat.freenode.net)
01/11 18:41:35*** Quit: Thechosenson (d45c7a06@gateway/web/freenode/ip.212.92.122.6) left #AutoNomic: Client Quit
01/11 18:45:30*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jswrzncfqnccsfze) left #AutoNomic: Quit: Connection closed for inactivity
01/11 21:14:08*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-puxdjdcfgaccgfmx, stoopkid: stoopkid)
01/11 22:41:05<stoopkid> koo5[m]: nothing functional; i'll have to dig through the git logs to whenever it was last working cause i can't remember what's been changed
01/12 00:47:48*** Quit: suiqiublockchain (~suiqiublo@180.162.45.183) left #AutoNomic: Remote host closed the connection
01/12 00:50:14*** Join: suiqiublockchain (~suiqiublo@180.162.45.183, (unauthenticated): realname)
01/12 00:52:55*** Quit: suiqiublockchain (~suiqiublo@180.162.45.183) left #AutoNomic: Remote host closed the connection
01/12 01:04:27*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/12 01:04:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/12 01:25:46*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-xhbsmwubqeetuwka) left #AutoNomic: Ping timeout: 264 seconds
01/12 01:26:15*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-nkbmyvxvstgairok, (unauthenticated): @nilli:matrix.org)
01/12 02:10:21*** Join: suiqiu_ (~suiqiublo@101.83.177.55, (unauthenticated): realname)
01/12 03:31:15*** Quit: suiqiu_ (~suiqiublo@101.83.177.55) left #AutoNomic: Quit: Leaving
01/12 03:34:36*** Join: suiqiublockchain (~suiqiublo@101.83.177.55, suiqiublockchain: realname)
01/12 08:15:55*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/12 08:16:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/12 10:39:48*** Quit: suiqiublockchain (~suiqiublo@101.83.177.55) left #AutoNomic: Remote host closed the connection
01/12 10:40:24*** Join: suiqiublockchain (~suiqiublo@101.83.177.55, (unauthenticated): realname)
01/12 14:03:35*** Quit: Oihan (~AndChat68@158.227.184.194) left #AutoNomic: Ping timeout: 248 seconds
01/12 14:25:19*** Join: Oihan (~AndChat68@158.227.184.194, (unauthenticated): AndChat685089)
01/12 15:31:00*** Quit: suiqiublockchain (~suiqiublo@101.83.177.55) left #AutoNomic: Remote host closed the connection
01/12 15:32:00*** Join: suiqiublockchain (~suiqiublo@101.83.177.55, (unauthenticated): realname)
01/12 18:56:22*** Quit: suiqiublockchain (~suiqiublo@101.83.177.55) left #AutoNomic: Remote host closed the connection
01/12 18:56:44*** Join: suiqiublockchain (~suiqiublo@101.83.177.55, (unauthenticated): realname)
01/12 20:26:07*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/12 20:27:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 264 seconds
01/12 20:27:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/12 20:30:50*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 276 seconds
01/12 22:00:20*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/12 22:00:40*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/13 03:56:53*** Join: Eguzki (~AndChat68@91.210.145.10, (unauthenticated): AndChat685089)
01/13 03:59:20*** Quit: Oihan (~AndChat68@158.227.184.194) left #AutoNomic: Read error: Connection reset by peer
01/13 05:03:42*** Quit: Eguzki (~AndChat68@91.210.145.10) left #AutoNomic: Ping timeout: 256 seconds
01/13 05:04:22*** Join: Eguzki (~AndChat68@158.227.184.146, (unauthenticated): AndChat685089)
01/13 06:36:16*** Join: nilli (50f68a4b@gateway/web/freenode/ip.80.246.138.75, (unauthenticated): 80.246.138.75 - http://webchat.freenode.net)
01/13 06:44:26*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 276 seconds
01/13 06:56:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/13 06:57:00*** Quit: nilli (50f68a4b@gateway/web/freenode/ip.80.246.138.75) left #AutoNomic: Ping timeout: 260 seconds
01/13 07:04:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 255 seconds
01/13 07:26:54*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/13 07:34:49*** Join: GMpow2 (~5@p2003005F6E018438ECB6FB19932F63F2.dip0.t-ipconnect.de, (unauthenticated): realname)
01/13 08:02:37*** Quit: Eguzki (~AndChat68@158.227.184.146) left #AutoNomic: Read error: Connection reset by peer
01/13 08:03:06*** Join: Oihan (~AndChat68@158.227.184.146, (unauthenticated): AndChat685089)
01/13 09:26:56*** Quit: Oihan (~AndChat68@158.227.184.146) left #AutoNomic: Ping timeout: 256 seconds
01/13 09:48:27*** Join: Oihan (~AndChat68@158.227.184.146, (unauthenticated): AndChat685089)
01/13 11:10:04*** Quit: GMpow2 (~5@p2003005F6E018438ECB6FB19932F63F2.dip0.t-ipconnect.de) left #AutoNomic: Read error: Connection reset by peer
01/13 13:03:12*** Quit: Oihan (~AndChat68@158.227.184.146) left #AutoNomic: Ping timeout: 256 seconds
01/13 13:29:34*** Join: Oihan (~AndChat68@46-133-197-96.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/13 15:07:42<stoopkid> HMCa: in lambda-auth, how does a verifier other than the data provider verify that the data they're accessing is actually of the required type, without downloading all the data in order to typecheck it?
01/13 15:31:32*** Quit: suiqiublockchain (~suiqiublo@101.83.177.55) left #AutoNomic: Read error: Connection reset by peer
01/13 15:32:15*** Join: suiqiublockchain (~suiqiublo@101.83.177.55, (unauthenticated): realname)
01/13 15:46:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/13 15:47:09*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/13 16:16:19*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/13 17:12:22*** Quit: Oihan (~AndChat68@46-133-197-96.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 248 seconds
01/13 17:12:44*** Join: Oihan (~AndChat68@158.227.184.172, (unauthenticated): AndChat685089)
01/13 19:43:17*** Join: GMpow2 (~5@2a02:810a:82c0:1c:451a:9d73:feee:f211, (unauthenticated): realname)
01/13 19:43:44*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:451a:9d73:feee:f211) left #AutoNomic: Remote host closed the connection
01/13 19:44:08*** Join: GMpow2 (~5@2a02:810a:82c0:1c:451a:9d73:feee:f211, (unauthenticated): realname)
01/13 19:44:49*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:451a:9d73:feee:f211) left #AutoNomic: Client Quit
01/13 19:48:22*** Join: GMpow2 (~5@2a02:810a:82c0:1c:451a:9d73:feee:f211, (unauthenticated): realname)
01/13 22:22:42*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
01/13 22:23:14*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:451a:9d73:feee:f211) left #AutoNomic: Read error: Connection reset by peer
01/14 00:03:38*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-puxdjdcfgaccgfmx) left #AutoNomic: Quit: Connection closed for inactivity
01/14 01:54:58*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-sqjjvshconnyxqnp, stoopkid: stoopkid)
01/14 02:11:35*** Join: Eguzki (~AndChat68@176.122.120.26, (unauthenticated): AndChat685089)
01/14 02:11:37*** Quit: Oihan (~AndChat68@158.227.184.172) left #AutoNomic: Read error: Connection reset by peer
01/14 02:55:57<HMCa> stoopkid: I'm not sure that I understand the question
01/14 02:56:38<HMCa> if the type is different then thr hashing scheme will be different, and if the hashing scheme is different then the hashes will not be correct...
01/14 02:56:57*** Join: nilli (258eabe3@gateway/web/freenode/ip.37.142.171.227, (unauthenticated): 37.142.171.227 - http://webchat.freenode.net)
01/14 02:57:28<nilli> hey there
01/14 03:00:38<HMCa> hi
01/14 03:00:46<nilli> did any of you guys follow what Charles hoskinson in doing with cardano? I though that I have heard some lines form the old tau blog
01/14 03:00:56<nilli> hi HMC
01/14 03:01:10<nilli> HMCa
01/14 03:05:07<HMCa> sure, we get compared to cardano/qeditas some
01/14 03:05:53<HMCa> but our plans are much "bigger picture"
01/14 03:06:00<nilli> I am asking that since on march 2015 I met him in nyc in a meetup , then he was talking about totally different things
01/14 03:06:52<nilli> in that meet up i trashed Etherume which at the time he was still a  part of
01/14 03:07:12<HMCa> :-)
01/14 03:08:13<nilli> then I told him about the tau and  send him the link to the bitcointalk tauchain
01/14 03:08:51<nilli> we actualy had quit a long talk but after sending him that I never heard from him
01/14 03:09:40<nilli> actualy not true
01/14 03:11:52*** Join: Mcnugget (2f11ddb4@gateway/web/freenode/ip.47.17.221.180, (unauthenticated): ool-2f11ddb4.dyn.optonline.net/47.17.221.180)
01/14 03:12:11*** Quit: Mcnugget (2f11ddb4@gateway/web/freenode/ip.47.17.221.180) left #AutoNomic: Client Quit
01/14 03:13:05<nilli> I have mett him again a few days later since someone in nyc was working on a project  and after that meet up he wanted to meet both of us. anyway after that I did met him or heard form him again
01/14 03:14:05<nilli> what is qeditas?
01/14 03:15:19<HMCa> another network he and his circle are involved with, also has some overlap with our construct in premise
01/14 03:16:01<nilli> When was that initiated?
01/14 03:16:18<nilli> also 2015?
01/14 03:16:38<HMCa> yes
01/14 03:16:58<nilli> I bet you it all came after he read all of the tauchain work
01/14 03:17:14<HMCa> heh
01/14 03:17:26<nilli> the things he was talking about before had nothing to do with what he do now
01/14 03:18:17<HMCa> sure
01/14 03:18:23<HMCa> I've seen it before
01/14 03:18:50<nilli> he was smart enough to see the porblems with etheruem then,
01/14 03:19:15<nilli> but was not talikng about fixing it in another project
01/14 03:19:40<nilli> HMCa you have seen him talk about that before you mean?
01/14 03:20:16<HMCa> no, just... with people who encountered our idea in the past
01/14 03:20:20<HMCa> the idea of our construct is infectiously compelling, once you understand even just a part of it...
01/14 03:20:51<HMCa> it's hard to not want to do nothibg but "things like it" for awhile...
01/14 03:21:12<HMCa> but that is just distraction from doing the actual thing, imo. ;-)
01/14 03:21:22*** Quit: Eguzki (~AndChat68@176.122.120.26) left #AutoNomic: Ping timeout: 276 seconds
01/14 03:21:30<HMCa> *nothing
01/14 03:21:44*** Join: Oihan (~AndChat68@158.227.184.10, (unauthenticated): AndChat685089)
01/14 03:22:26<nilli> I guess eventually it will be built in some form or another:)
01/14 03:24:21<nilli> so HMCa, regarding autonomic, are you speaking with stoopkid figuring out the milestones ?
01/14 03:31:19*** Quit: nilli (258eabe3@gateway/web/freenode/ip.37.142.171.227) left #AutoNomic: Ping timeout: 260 seconds
01/14 03:31:49<HMCa> it has come up in PMs, yes
01/14 03:34:43*** Join: nilli (50f682c4@gateway/web/freenode/ip.80.246.130.196, (unauthenticated): 80.246.130.196 - http://webchat.freenode.net)
01/14 03:44:21<HMCa> it has come up in PMs, yes
01/14 03:46:41<nilli> Ok so HMCa .... once milestons and timeline is set, am I done then you think?
01/14 03:55:32* HMCa shrugs
01/14 03:55:42<HMCa> what do you mean by "done"?
01/14 03:56:53<nilli> :D
01/14 04:15:39*** Quit: nilli (50f682c4@gateway/web/freenode/ip.80.246.130.196) left #AutoNomic: Ping timeout: 260 seconds
01/14 04:47:56*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/14 05:38:15<daemoz> ?
01/14 06:12:45*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 255 seconds
01/14 07:48:45*** Join: GMpow2 (~5@2a02:810a:82c0:1c:adea:ce75:ecef:465b, (unauthenticated): realname)
01/14 12:03:53<stoopkid> HMCa: i dont see how thats the case
01/14 12:07:45<stoopkid> You seem to be assuming that the data provider actually stored a value of the specified type to begin with
01/14 12:08:21<stoopkid> And then claiming that the prover wont be able to trick another verifier into accepting a value of a different type
01/14 12:09:38<stoopkid> Obviously thats the case, but what happens if the *data provider* just stores some arbitrary data on the prover, but then claims that its stored a value of some type T
01/14 12:11:50<stoopkid> Does the verifier think that there’s actually a value of type T there?
01/14 12:22:30*** Quit: Oihan (~AndChat68@158.227.184.10) left #AutoNomic: Read error: Connection reset by peer
01/14 12:36:47*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:adea:ce75:ecef:465b) left #AutoNomic: Read error: Connection reset by peer
01/14 12:37:11*** Join: GMpow2 (~5@2a02:810a:82c0:1c:adea:ce75:ecef:465b, (unauthenticated): realname)
01/14 12:37:57*** Join: GMpow2_2 (~5@ip4d16fcb9.dynamic.kabel-deutschland.de, (unauthenticated): realname)
01/14 12:37:58*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:adea:ce75:ecef:465b) left #AutoNomic: Read error: Connection reset by peer
01/14 12:42:41*** Nick regain: GMpow2_2 (~5@ip4d16fcb9.dynamic.kabel-deutschland.de) is now known as GMpow2
01/14 12:53:21*** Join: Oihan (~AndChat68@46-133-10-42.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/14 14:24:09*** Quit: Oihan (~AndChat68@46-133-10-42.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 255 seconds
01/14 14:24:27*** Join: Oihan (~AndChat68@158.227.184.172, (unauthenticated): AndChat685089)
01/14 14:29:34*** Quit: Oihan (~AndChat68@158.227.184.172) left #AutoNomic: Read error: Connection reset by peer
01/14 14:36:34*** Join: Oihan (~AndChat68@46-133-10-42.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/14 15:30:46*** Quit: suiqiublockchain (~suiqiublo@101.83.177.55) left #AutoNomic: Remote host closed the connection
01/14 15:32:13*** Join: suiqiublockchain (~suiqiublo@101.83.177.55, (unauthenticated): realname)
01/14 18:36:55*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/14 20:33:09*** Quit: Oihan (~AndChat68@46-133-10-42.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 255 seconds
01/14 20:33:32*** Join: Oihan (~AndChat68@158.227.184.14, (unauthenticated): AndChat685089)
01/14 21:48:52*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/14 21:52:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/14 22:21:29*** Quit: GMpow2 (~5@ip4d16fcb9.dynamic.kabel-deutschland.de) left #AutoNomic: Ping timeout: 256 seconds
01/14 23:21:56<stoopkid> Im currently thinking that im just confused and thats just not what lambda auth does
01/14 23:26:18<stoopkid> You can know prior to reading all the data that you wont be able To be fooled into accepting Data other than what the data provider originally published, but you won’t know whether the provider actually provided data of the correct type until you read it and type check it
01/14 23:27:48<stoopkid> As far as I can tell
01/14 23:31:54<stoopkid> So, what, Prover = full client, Verifier = light client?
01/14 23:35:14<stoopkid> (as a really rough approximation, ie imagine were just in btc world right now)
01/14 23:39:01<stoopkid> on autonomic ofc we would prefer to be able to act as either a full or light client for any given context we’re participating in
01/14 23:53:12<stoopkid> daemoz: how are your lambda calc studies coming along?
01/15 00:20:25<daemoz> slowly, but steadily. A little confused about how normal-order reduction ensures always reaching a normal form.
01/15 00:56:58<stoopkid> looks like i need to do some refresher on that proof as well
01/15 01:24:19<daemoz> Oh wait, it looks like this just ensures that you evaluate arguments before lambda bodies
01/15 01:24:26<daemoz> which makes sense I guess
01/15 01:33:10<stoopkid> isn't it the other way around?
01/15 01:33:19<stoopkid> i thought that was applicative order
01/15 02:10:23*** Join: suiqiu_ (~suiqiublo@180.162.43.224, (unauthenticated): realname)
01/15 02:12:49*** Quit: suiqiublockchain (~suiqiublo@101.83.177.55) left #AutoNomic: Ping timeout: 256 seconds
01/15 05:57:39*** Quit: Oihan (~AndChat68@158.227.184.14) left #AutoNomic: Read error: Connection reset by peer
01/15 06:05:21*** Join: Oihan (~AndChat68@158.227.184.14, (unauthenticated): AndChat685089)
01/15 06:40:02<koo5[m]> ah, so all the action is here now
01/15 06:48:30*** Quit: Oihan (~AndChat68@158.227.184.14) left #AutoNomic: Ping timeout: 264 seconds
01/15 06:49:03*** Join: Oihan (~AndChat68@158.227.184.14, (unauthenticated): AndChat685089)
01/15 08:32:43*** Quit: Oihan (~AndChat68@158.227.184.14) left #AutoNomic: Ping timeout: 260 seconds
01/15 08:42:39*** Join: Oihan (~AndChat68@158.227.184.14, (unauthenticated): AndChat685089)
01/15 08:49:57*** Quit: Oihan (~AndChat68@158.227.184.14) left #AutoNomic: Ping timeout: 248 seconds
01/15 08:56:05<daemoz> stoopkid: ah yes, you're right. normal-order reduction seems to be evaluating the parameter only when it is used.
01/15 09:17:18*** Join: Oihan (~AndChat68@158.227.184.14, (unauthenticated): AndChat685089)
01/15 09:24:40*** Quit: Oihan (~AndChat68@158.227.184.14) left #AutoNomic: Ping timeout: 268 seconds
01/15 09:27:17*** Join: GMpow2 (~5@2a02:810a:82c0:1c:7873:9b01:f0ca:d9a9, (unauthenticated): realname)
01/15 09:35:30*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 276 seconds
01/15 13:06:45*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/15 14:59:20*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:7873:9b01:f0ca:d9a9) left #AutoNomic: Read error: Connection reset by peer
01/15 14:59:42*** Join: GMpow2 (~5@2a02:810a:82c0:1c:7873:9b01:f0ca:d9a9, (unauthenticated): realname)
01/15 15:30:51*** Quit: suiqiu_ (~suiqiublo@180.162.43.224) left #AutoNomic: Remote host closed the connection
01/15 15:31:02*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:7873:9b01:f0ca:d9a9) left #AutoNomic: Read error: Connection reset by peer
01/15 15:31:26*** Join: GMpow2 (~5@2a02:810a:82c0:1c:7873:9b01:f0ca:d9a9, (unauthenticated): realname)
01/15 15:32:19*** Join: suiqiublockchain (~suiqiublo@180.162.43.224, (unauthenticated): realname)
01/15 15:43:15*** Quit: suiqiublockchain (~suiqiublo@180.162.43.224) left #AutoNomic: Remote host closed the connection
01/15 15:43:44*** Join: suiqiublockchain (~suiqiublo@180.162.43.224, (unauthenticated): realname)
01/15 16:29:16*** Quit: suiqiublockchain (~suiqiublo@180.162.43.224) left #AutoNomic: Remote host closed the connection
01/15 16:29:39*** Join: suiqiublockchain (~suiqiublo@180.162.43.224, (unauthenticated): realname)
01/15 17:57:16*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:7873:9b01:f0ca:d9a9) left #AutoNomic: Ping timeout: 256 seconds
01/15 18:17:11*** Join: GMpow2 (~5@p2003005F6E0184463828AD7496441ADD.dip0.t-ipconnect.de, (unauthenticated): realname)
01/15 19:34:11*** Quit: GMpow2 (~5@p2003005F6E0184463828AD7496441ADD.dip0.t-ipconnect.de) left #AutoNomic: Ping timeout: 255 seconds
01/15 20:06:52*** Join: shaowei (~textual@218.30.116.10, shaowei: Textual User)
01/15 20:08:04<shaowei> hello guys
01/15 20:08:44<stoopkid> howdy
01/15 20:09:44<shaowei> I am a regular learning block chain
01/15 20:14:52<stoopkid> cool, let us know if you've got any questions or comments about the project :)
01/15 20:25:30*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
01/15 22:04:58*** Quit: shaowei (~textual@218.30.116.10) left #AutoNomic: Quit: My MacBook has gone to sleep. ZZZzzz…
01/15 22:06:56*** Join: shaowei (~textual@220.181.171.94, (unauthenticated): Textual User)
01/15 22:48:32*** Quit: shaowei (~textual@220.181.171.94) left #AutoNomic: Ping timeout: 256 seconds
01/15 23:34:35<HMCa> shaowei: you are a blockchain?
01/15 23:35:00<stoopkid> :)
01/15 23:35:52<stoopkid> a *learning* blockchain; maybe autonomic communicating with us from the future? :)
01/15 23:36:03<stoopkid> oh wait, no comment
01/16 00:09:39<HMCa> stoopkid: still around?
01/16 00:09:47<stoopkid> yep
01/16 00:10:20<HMCa> let's try some of your lambda-auth questions
01/16 00:10:52<HMCa> (which I mostly still don't understand, so I think you might be confused on something fundamental-ish)
01/16 00:11:10<stoopkid> that's the conclusion i reached at least :)
01/16 00:12:52<HMCa> ok, so maybe try rephrasing the main question a third time for me? :-)
01/16 00:13:57<HMCa> in short I thought it was "how do we know that the data operated on is of the correct type" and my answer was "if it isn't, hashes don't match".... but... ?
01/16 00:14:54<stoopkid> but you're only seeing that those hash-matchings work out on the actual data stored once you start operating on it
01/16 00:15:14<HMCa> ?
01/16 00:15:42<HMCa> "operating on it"?
01/16 00:15:46<stoopkid> so, let's say i pick some server X, and throw some data up there, and take it's hash h, and then i give you h and say "here, this is a shallow projection of an object of type T"
01/16 00:16:01<HMCa> k
01/16 00:16:09<HMCa> authed type T
01/16 00:16:12<HMCa> i assume?
01/16 00:17:00<stoopkid> do you believe me that it's actually a shallow projection of an object of (auth'd, yes) type T until you download it (or some part of it) from X and type-check?
01/16 00:17:31<HMCa> sure, why shouldn't I?  What harm can come yet?
01/16 00:17:42<HMCa> maybe you tell me it is an authed red-black tree
01/16 00:17:54<HMCa> maybe you lie, maybe you don't... what do I care yet?
01/16 00:18:51<stoopkid> so you agree that lambda-auth itself doesn't give you this guarantee against me (the data provider) lying about whether the data i'm storing is actually of the type that i'm claiming it to be?
01/16 00:19:35<HMCa> i agree that it does not in just the example as given so far... sure
01/16 00:19:42<HMCa> but why should it?
01/16 00:20:06<HMCa> what good would that be at this juncture in the example?
01/16 00:20:15<stoopkid> i'm not saying this is a flaw i'm just trying to make sure i'm actually understanding what it does / does not do
01/16 00:20:20<HMCa> if it is/isn't of that type is not meaningful at all in the example *yet*
01/16 00:21:09<stoopkid> so, where might we care:
01/16 00:22:24<HMCa> lambda-auth is not really for hashing data, sha2 does that just fine... it is for authenticating functiinal operations *over* data!
01/16 00:22:35<HMCa> *functional
01/16 00:23:41<HMCa> it is never really meaningful to talk about some authed data in terms of one hash - all you get then is content-addressable retrieval which you can already have from simple hashing...
01/16 00:23:59<HMCa> cons hash schemes are always about relationships of 2+ hashes!
01/16 00:24:39<HMCa> (btc is meaningful as a cons hash scheme, relates block hash and prior hash under the mining work function!)
01/16 00:25:19<stoopkid> hrm, well i'm thinking of this in terms of the full nodes vs. light/thin/spv nodes and trying to make sure i've got the right idea about what it does and does not allow in terms of "skipping verifications"
01/16 00:25:21<HMCa> (and, inversely, blockverify)
01/16 00:27:25<stoopkid> ic, but then on btc we've got full nodes that have to actually verify every transaction, and the network relies on these nodes, afaiu?
01/16 00:27:58<HMCa> yes, they know the entire dataset
01/16 00:28:39<stoopkid> similarly on autonomic with lambda-auth i'd presume there would be full nodes that have to actually know the entire dataset and that it all typechecks
01/16 00:29:01<HMCa> when a light node retrieves blocks header-only, they are trusting the tx structure as verified by the network (a light node should never trust just one full node, HEH)
01/16 00:29:38<HMCa> well, we will probably end up with something like 2 kinds of light nodes..
01/16 00:29:39<stoopkid> so, given that, it almost seems at first like "well what's the point of the auth then besides for the chain-link/work hashes", but then, the point is just thinking ahead for supporting the light nodes (at least that's what it appears from section 8 of btc pdf anyway?)
01/16 00:32:21<HMCa> well, that is one aspect of it, but it is really a little more broad then just that...
01/16 00:33:07<HMCa> there was actually a "fully general" design for the construct before lambda-auth, but it was infeasible and (believe it or not) significantly more complicated
01/16 00:33:10<HMCa> heh
01/16 00:34:42<HMCa> lambda-auth removed a ton of "jumping through hoops" w/ stuff like staged programming to get the generality
01/16 00:34:58<stoopkid> hrm, ok then i am missing something fundamental (unless you're just talking about how the hashes can be used for keying a DHT, or just lambda-auth's generality of authing)
01/16 00:35:05<stoopkid> generality/flexibility
01/16 00:35:49<HMCa> just lambda-auth's generality of authing, more or less...
01/16 00:37:09<stoopkid> ok cool, then i think i am on the same page and was just confusing myself earlier about whether there was "some other purpose" for it
01/16 00:40:11<stoopkid> ok so back to another thing that was confusing us a bit: historically you've mentioned auth'd execution & auth'd proof traces, and i want to make sure we're on the same page about this
01/16 00:42:21<stoopkid> so i'm assuming that taking these (currently informal, for me, in this discussion anyway) auth'd execution and auth'd proof traces together, it's about the "it is for authenticating functiinal operations *over* data!" along with the fact that proof traces are like objects in inductive types, and hence we auth those objects, as per... well, that's just exactly what lambda-auth says to do afaict
01/16 00:42:46<stoopkid> with some overlap because, well, data is code and code is data
01/16 00:44:36<stoopkid> am i on the right track there? can we make all that more precise so i can make sure i've got everything about the auth nicely packaged into a box that i can carry away from this convo and start hacking on?
01/16 00:47:22<stoopkid> like i'm pretty sure i know what to build but then koo keeps bringing up "well what about HMC's auth'd execution & auth'd proof traces" and i'm like... hrm... i can think of like 10 different interpretations of these phrases, 9 of them would be impossible and the one that's left is already what i'm doing, but that doesn't necessarily mean there wasn't an 11th possibility out there... if that makes sense
01/16 00:48:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/16 00:51:04<stoopkid> well actually only half of those i've ruled out for impossibility, the others maybe ruled out for inability to see the utility
01/16 00:51:44<stoopkid> example: storing a trace of every step of an inferencing process, including all the failed search paths
01/16 00:53:47<stoopkid> we can do it, but idk what the utility of that will be yet, especially if we don't have some way to trim the failed searches & redundant results out of the inferencing trace while maintaining verifiability
01/16 00:55:54<stoopkid> this doesn't appear to come built-in to lambda-auth, so, i'm not sure if you were intending for a feature like that to be added, and if so, why, since all full nodes can verify directly based on the data itself rather compressions of it
01/16 00:56:51<stoopkid> a similar kind of thing could be done for auth'd execution as in... authing all the steps of normalizing lambdas/proofs, again, could do it, but i don't see the utility
01/16 00:57:24<stoopkid> massive storage overhead, and full nodes still have to run the function to verify, and walking through a trace of its execution would be the least efficient way to do that
01/16 00:57:52<stoopkid> and then the light nodes don't care about that trace, they only care about whether the full nodes agree on its result
01/16 00:58:54<stoopkid> and can provide them authenticated access to that result
01/16 01:00:11<stoopkid> to what extent would any of this authenticated access rely on keeping around authenticated execution traces? idk, but i've been interpreting this "auth'd execution" thing to mean what you said about authenticated functional operations over data
01/16 01:01:16<stoopkid> and the auth'd proof traces thing just meaning to auth a value of an auth'd type
01/16 01:03:20<stoopkid> this seems to me to just be interpreting these vague phrases as exactly the only things they could correspond to per the lambda-auth PDF, but, let me know if i'm confused about anything there
01/16 01:25:34<daemoz> What's the link to information about lambda-auth again? That's a dark area I'd like to light up.
01/16 01:25:48<stoopkid> http://soc1024.ece.illinois.edu/gpads/gpads-full.pdf
01/16 01:25:52<daemoz> thanks
01/16 01:26:05<stoopkid> oops, full site: http://amiller.github.io/lambda-auth/
01/16 03:46:36*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
01/16 04:38:03*** Join: Bot-o-Nomic (Bot-o-Nomi@gateway/service/github.com/x-seifyacxaogrmfbx, (unauthenticated): GitHub IRCBot - sto0pkid/CategoryTheory)
              <Bot-o-Nomic> [CategoryTheory] sto0pkid pushed 1 new commit to master: https://git.io/vNl3e
              <Bot-o-Nomic> CategoryTheory/master 3f60d42 stoopkid: proving stuff about lambda calc in Agda; rough draft
              *** Part: Bot-o-Nomic (Bot-o-Nomi@gateway/service/github.com/x-seifyacxaogrmfbx) left #AutoNomic: [No reason given]
01/16 05:52:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/16 06:03:46*** Join: GMpow2 (~5@p2003005F6E018446C4D152D98958BD75.dip0.t-ipconnect.de, (unauthenticated): realname)
01/16 10:08:49<koo5[m]> anyone thinks agr will go up soon? btc rebound?
01/16 10:28:58*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
01/16 15:31:26*** Quit: suiqiublockchain (~suiqiublo@180.162.43.224) left #AutoNomic: Read error: Connection reset by peer
01/16 15:32:14*** Join: suiqiublockchain (~suiqiublo@180.162.43.224, (unauthenticated): realname)
01/16 16:28:03*** Quit: GMpow2 (~5@p2003005F6E018446C4D152D98958BD75.dip0.t-ipconnect.de) left #AutoNomic: Remote host closed the connection
01/16 16:28:31*** Join: GMpow2 (~5@p2003005F6E018446C4D152D98958BD75.dip0.t-ipconnect.de, (unauthenticated): realname)
01/16 18:46:56*** Join: GMpow2_2 (~5@p2003005F6E018460C4D152D98958BD75.dip0.t-ipconnect.de, (unauthenticated): realname)
01/16 18:50:25*** Quit: GMpow2 (~5@p2003005F6E018446C4D152D98958BD75.dip0.t-ipconnect.de) left #AutoNomic: Ping timeout: 276 seconds
01/16 19:16:19*** Quit: GMpow2_2 (~5@p2003005F6E018460C4D152D98958BD75.dip0.t-ipconnect.de) left #AutoNomic: Ping timeout: 276 seconds
01/16 22:00:15*** Quit: suiqiublockchain (~suiqiublo@180.162.43.224) left #AutoNomic: Ping timeout: 256 seconds
01/16 23:56:58*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 255 seconds
01/17 00:13:48*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/17 02:35:31*** Join: GMpow2 (~5@p2003005F6E01846034204B29F7DCA2F7.dip0.t-ipconnect.de, (unauthenticated): realname)
01/17 02:41:39*** Quit: GMpow2 (~5@p2003005F6E01846034204B29F7DCA2F7.dip0.t-ipconnect.de) left #AutoNomic: Ping timeout: 276 seconds
01/17 04:32:56*** Join: suiqiublockchain (~suiqiublo@180.162.43.224, (unauthenticated): realname)
01/17 10:15:39*** Join: GMpow2 (~5@p2003005F6E01846005DC6C32D35E9052.dip0.t-ipconnect.de, (unauthenticated): realname)
01/17 13:01:54*** Quit: GMpow2 (~5@p2003005F6E01846005DC6C32D35E9052.dip0.t-ipconnect.de) left #AutoNomic: Read error: Connection reset by peer
01/17 15:31:31*** Quit: suiqiublockchain (~suiqiublo@180.162.43.224) left #AutoNomic: Read error: Connection reset by peer
01/17 15:32:14*** Join: suiqiublockchain (~suiqiublo@180.162.43.224, (unauthenticated): realname)
01/17 20:54:46*** Netsplit: *.net *.split (Use /WL to see who left)
01/17 21:25:24*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/17 21:25:42*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/17 22:32:01*** Netmerge: *.net *.split, split 1 minute 8 seconds ago (Use /WL to see who's still missing)
01/18 01:10:38*** Join: suiqiu_ (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/18 01:11:58*** Quit: suiqiublockchain (~suiqiublo@180.162.43.224) left #AutoNomic: Read error: Connection reset by peer
01/18 02:09:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/18 02:09:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/18 03:18:02*** Join: suiqiu__ (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/18 03:18:18*** Quit: suiqiu_ (~suiqiublo@180.162.43.72) left #AutoNomic: Read error: Connection reset by peer
01/18 08:18:48*** Join: Oihan (~AndChat68@46-133-193-132.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/18 14:24:27*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/18 15:31:33*** Quit: suiqiu__ (~suiqiublo@180.162.43.72) left #AutoNomic: Read error: Connection reset by peer
01/18 15:32:10*** Join: suiqiublockchain (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/18 15:40:22*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
01/18 15:50:19*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/18 18:08:03*** Quit: Oihan (~AndChat68@46-133-193-132.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 256 seconds
01/18 18:15:25*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
01/18 21:28:45<suiqiublockchain> https://paritytech.github.io/wiki/Chain-specification
01/18 21:31:02<suiqiublockchain> well, sent to a wrong place.
01/18 21:31:16<suiqiublockchain> awkward. please ignore the link
01/18 21:31:53<stoopkid> lol np
01/19 01:35:25*** Join: shaowei (~textual@218.30.116.4, (unauthenticated): Textual User)
01/19 02:04:39*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/19 03:27:37*** Quit: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-wnnccxcbdlaypkea) left #AutoNomic: Ping timeout: 248 seconds
01/19 03:40:54*** Join: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-eofeqcdojyapekwx, (unauthenticated): @tigertigertig:matrix.org)
01/19 03:50:42*** Quit: suiqiublockchain (~suiqiublo@180.162.43.72) left #AutoNomic: Remote host closed the connection
01/19 03:51:06*** Join: suiqiublockchain (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/19 05:43:20*** Join: octo_ (octo@c0-155.icpnet.pl, (unauthenticated): octo)
01/19 06:13:23*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
01/19 06:20:01*** Quit: shaowei (~textual@218.30.116.4) left #AutoNomic: Ping timeout: 248 seconds
01/19 07:12:33*** Quit: octo_ (octo@c0-155.icpnet.pl) left #AutoNomic: Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]
01/19 09:22:12*** Quit: suiqiublockchain (~suiqiublo@180.162.43.72) left #AutoNomic: Remote host closed the connection
01/19 09:22:43*** Join: suiqiublockchain (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/19 10:39:44*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/19 12:47:09*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 268 seconds
01/19 13:34:35*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/19 13:54:31*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 260 seconds
01/19 14:38:00<stoopkid> HMCa: do you know any resources on the relationship between type theory & information theory? i had kinda expected such work to be easier to locate than i'm finding it to be, considering, for example, how involved kolmogorov and martin-lof were in the development of both intuitionistic logic / type theory as well as algorithmic information theory
01/19 14:39:47<stoopkid> and also, for example, considering how it seems it actually is related together in various ways:
01/19 14:41:11<stoopkid> information theory <-> measure theory <-> topological spaces <-> stone(ish) spaces <-> algebras <-> logic <-> type theory
01/19 14:41:22<stoopkid> and that's just along one "axis"
01/19 14:43:23<stoopkid> then under BHK interpretation, types are problems. we know from information theory that problems contain information. finding a solution to that problem P, from some starting point X, means finding all the rest of the information contained in P that's not contained in X (at the very *least*, anyway)
01/19 14:45:27<stoopkid> then there's the whole logical harmony thing
01/19 14:46:19<stoopkid> decisions about what constitutes appropriate sets of constructive/intuitionistic inference rules, based ultimately on information-theoretic concepts: "do the eliminators eliminate all information provided by the constructors"
01/19 14:47:08<stoopkid> "do we only get out the information that we put in"
01/19 14:49:46<stoopkid> then we have that whole descriptive complexity hierarchy thing. which seems to be *the* thing, as in, it pretty much describes what constitutes a "major design decision", as far as the computer is concerned
01/19 14:51:59<stoopkid> so, types "describe" things, they should (and do) contain some of this "descriptive complexity", which is nearly just back to the BHK interpretation where types are problems, along with the interpretation that problems contain information
01/19 14:54:54<stoopkid> theres some problems i don't know how to frame as a "search" in order to figure out what the information content is though
01/19 14:55:53<stoopkid> even when i know how to perform some sort of analog of the same kind of complexity analysis
01/19 14:58:57<stoopkid> example: we might try to simulate certain lambda calc expressions using SK combinator expressions
01/19 14:59:45<stoopkid> in order to repeat an object, you must apply the S combinator to three arguments where the 3rd argument contains that object
01/19 15:01:05<stoopkid> you can at most double the number of occurrences of that object by doing this, so, if we want to have that object repeated 8 times, then any successful SK expression that could perform this 8-fold repetition will have at least 3 evaluations of the S combinator where that object appears in the 3rd argument
01/19 15:05:39<stoopkid> so, this is the same kinda thing. you have a problem: repeating an object N times. under the descriptive framework of information theory, we'd think, this problem should maybe contain some information, and this "repeating a term twice" operation should maybe be "partially revealing" that information
01/19 15:06:17<stoopkid> but since it's not framed as a search, i'm not sure what the search space, so can't quantify it's size, and so can't say how many bits of information are contained in the problem.
01/19 15:08:41<stoopkid> hrm, i guess the correct answer here is the search space is size 1 and so there's 0 bits.
01/19 15:09:14<stoopkid> we already know the answer beforehand, and so there's no information to be revealed
01/19 15:10:10<stoopkid> let's contrast this with a slightly different problem: let's say we want an object to be repeated 8 times, and we don't already know how many times it occurs in the input
01/19 15:10:51<stoopkid> now we have a search: in order to solve the problem, we have to at the very least figure out how many times the object occurs in the input
01/19 15:12:03<stoopkid> and then we can analyze our available operations to see how much information each one can reveal, and then get basic lower-bounds on the complexity of this problem
01/19 15:16:43<stoopkid> but, that's where it sort of breaks down, this interpretation of information theory (which may very well just be my own naive interpretation) is not capable of revealing the inherent complexity in something where the answer is already known and you're just trying to get there from a known starting point, like "start with an object, and repeat it 8 times"
01/19 15:17:54<stoopkid> seems to me there should be something that is the generalization of both sides of this, and that might just be measure theory itself, i'm not entirely sure yet.
01/19 15:30:41*** Quit: suiqiublockchain (~suiqiublo@180.162.43.72) left #AutoNomic: Remote host closed the connection
01/19 15:32:03*** Join: suiqiublockchain (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/19 17:38:40*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/19 17:38:59*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/19 19:33:26*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/19 21:16:01*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 248 seconds
01/20 00:12:18*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 05:26:40*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 248 seconds
01/20 06:32:36*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 08:53:04*** Join: Marulong (de45c754@gateway/web/cgi-irc/kiwiirc.com/ip.222.69.199.84, (unauthenticated): Marulong)
01/20 09:00:37*** Quit: Marulong (de45c754@gateway/web/cgi-irc/kiwiirc.com/ip.222.69.199.84) left #AutoNomic: Quit: http://www.kiwiirc.com/ - A hand crafted IRC client
01/20 09:06:00*** Join: kook (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 09:06:34*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
01/20 09:53:46*** Quit: kook (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 268 seconds
01/20 10:17:45*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 10:22:59*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 260 seconds
01/20 12:39:21*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/20 12:52:32*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 248 seconds
01/20 15:30:41*** Quit: suiqiublockchain (~suiqiublo@180.162.43.72) left #AutoNomic: Remote host closed the connection
01/20 15:32:01*** Join: suiqiublockchain (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/20 17:05:07*** Netsplit: *.net *.split (Use /WL to see who left)
01/20 17:08:56*** Netmerge: *.net *.split, split 1 minute 45 seconds ago (Use /WL to see who's still missing)
01/20 18:01:03*** Quit: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-zfpqcffouawvuxuv) left #AutoNomic: Ping timeout: 246 seconds
              *** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-pcpeoxopkmthzrzz) left #AutoNomic: Ping timeout: 246 seconds
01/20 18:01:59*** Join: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-somqhpzecxcjvkdj, (unauthenticated): @deadhand:matrix.org)
01/20 18:03:46*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-oivopeyhwjrldjpo, (unauthenticated): @lexxus:matrix.org)
01/21 01:20:26*** Quit: HMCa (~root@37.153.110.58) left #AutoNomic: Ping timeout: 240 seconds
01/21 03:48:37*** Join: nilli (8de207db@gateway/web/freenode/ip.141.226.7.219, (unauthenticated): 141.226.7.219 - http://webchat.freenode.net)
01/21 03:50:22<nilli> hi stoopkid. are you around?
01/21 03:50:47<stoopkid> sorta, i'm about to pass out
01/21 03:51:02<stoopkid> what's up though?
01/21 03:51:23<nilli> I lost the link to the log and I see its not here too.
01/21 03:51:31<nilli> where is HMC?
01/21 03:52:40<stoopkid> 167.88.171.233/logs/AutoNomic.log
01/21 03:53:02<stoopkid> idk :/ i hope he's alright
01/21 03:53:24<nilli> how long have you not spoken with him?
01/21 03:54:16<stoopkid> talked to him for a bit last night
01/21 03:55:45<nilli> haa that is very recent  then.
01/21 03:56:34<nilli> So are you all good moving forward?
01/21 03:57:39<stoopkid> yea me and koo have been making some pretty good progress, still gotta work a couple things out before we can lay out the milestones more precisely though
01/21 03:58:55<stoopkid> how bout you, are you good on moving forward? :)
01/21 04:01:02<nilli> yes I am. I have confronted Ohad regarding his accusation , I have to accept the fact that he will see me as an enemy, which might have been the hardest thing for me to do
01/21 04:02:00<nilli> but I can change that. So I will move forward with what I believe to be best for all
01/21 04:02:37<nilli> cant
01/21 04:03:44<nilli> do you think that I should wait for the milestones to publish something or can I start allready?
01/21 04:08:14<stoopkid> hrm, just when we need HMC around. well, first, for future i would move all of this discussion to a new channel, idk what, koo could make one though. second, my main concern there would be overshadowing autonomic itself with the association to this planned app, since we don't do any advertising of our own
01/21 04:09:58<stoopkid> we have the milestones roughly figured out we're mostly trying to estimate timeframes at this point
01/21 04:12:22<stoopkid> and we keep getting sidetracked from time-frames in favor of just working on it heh
01/21 04:13:22<nilli> its fine , figuring out the milestones and the time line is a big job.
01/21 04:13:57<nilli> regarding to where we should move the conversation
01/21 04:15:35<nilli> I guess that since HMC is part of the conversation it must then be on the IRC anyway  while the  progress as a whole can be sum up on the wiki very so often
01/21 04:16:25<nilli> actualy also on bitcoin talk HMC has a profile and can communicate there if he like that we start a thread there
01/21 04:16:45<stoopkid> hrm
01/21 04:16:48<stoopkid> well
01/21 04:17:31<nilli> However I think that I should mention it on the tauchain thread first
01/21 04:18:35<stoopkid> i don't think HMC is planning to be part of those conversations, except *maybe* on something like btctalk, but, mmmm....
01/21 04:18:40<stoopkid> hrmm..
01/21 04:20:15<stoopkid> "don't be surprised" ? i really don't think HMC is quite so supportive of this as you might think :/
01/21 04:22:41<stoopkid> so.... technically it doesn't have to be on IRC?
01/21 04:23:30<nilli> which conversations? regarding the development of  autonoimc?
01/21 04:24:04<stoopkid> hrm. maybe we're thinking of different conversations. no those can stay here heh
01/21 04:25:52<stoopkid> i just mean anything agoras-related
01/21 04:26:41<nilli> I dont want to promote or deal much with any coin related conversation in terms of value and such. I just want to explain the logic (plain logic) of such. the rest will take care of itself
01/21 04:30:27<stoopkid> well, sure, that's all fine, and i mean, you can publish whatever you want, just wanted to state my concern there. i don't wanna end up with like a tau/agoras situation or something
01/21 04:34:12<stoopkid> we don't have any other planned apps yet that are publishing about it and so a coin app all by itself makes it seem like its "the" coin app, or, that's what i'm worrying about anyway
01/21 04:37:25<stoopkid> sorry if i'm making this seem overcomplicated, long story short: sure, you can publish, and if you wanna run your drafts by me first, even better :)
01/21 04:43:03<stoopkid> side-note: not sure what ohad's upset about since i thought he already agreed to more or less the same thing already & you've just kind of formalized it
01/21 04:52:36<nilli> yes in some point he said that he will build agora on which ever root that will work out
01/21 04:52:46<nilli> but that was a long time ago
01/21 04:57:19<stoopkid> well, none of my business really, i'm just a coder :)
01/21 05:06:14<nilli> well. that is what Ohad used to say (I am just a technocrat)
01/21 05:06:48<nilli> however once you participate in what you believe in it all change
01/21 05:07:47<nilli> it become an artwork
01/21 05:08:26<nilli> anyway dont mind that at this point. do the codeing
01/21 05:10:58<stoopkid> heh, alright. well, i gotta head to bed, will be back around tomorrow. catch ya  later :)
01/21 05:24:07<nilli> good night
01/21 06:14:58*** Join: HMCa (~root2@37.153.110.58, (unauthenticated): root2)
01/21 06:23:13<nilli> hi HMCa
01/21 06:32:45<editable-koo>theres already #autonomic and -dev and a matrix channel between me and stoop and then keeping tabs on what stoop does on the vps
01/21 06:33:34<editable-koo>lately its the irc channels that i tend to forget about until i feel nothing't been going on for several days and i wonder where all the action perhaps is
01/21 06:33:56<editable-koo>hi nilli
01/21 06:35:56<nilli> hi editable-koo
01/21 06:40:21<nilli> I guess once agora investors will realize the on going connection autonomic more of them might be interested follow up on the development, but they will find you guys if they are looking for it
01/21 06:40:40<nilli> agoras
01/21 06:41:38<nilli> connection with autonomic
01/21 06:49:23<editable-koo>we can try to entertain them here i guess
01/21 06:49:44<editable-koo>i imagine we put in a year of work and then there will be something to show and write about
01/21 06:50:00<editable-koo>at least some pieces of future autonomic
01/21 06:50:25<editable-koo>and then we're gonna feel like making it presentable 
01/21 06:50:35<nilli> yes. lol . so can I say that you are working on it full time now?
01/21 06:53:55<editable-koo>well, i only ever worked my job part-time, and im still only on vacation, but thats the plan, yea
01/21 07:15:23<nilli> you dont need to clock in :)  your time, your value, and so is for all of us (each one choose the value which is valuable for him/her)
01/21 07:28:04<nilli> editable-koo> what do you think of using HMCa reply to give the latest information: (will paste  here the content)
01/21 07:28:26<nilli> [quote author=HunterMinerCrafter link=topic=950309.msg21417794#msg21417794 date=1504286259] [quote author=vcvitiko link=topic=950309.msg21399429#msg21399429 date=1504241289] - u guys have any funding?  [/quote]
01/21 07:28:59<nilli> We are an open, voluntary collaboration.  We do not generally seek funding or offer any vestment vehicle, as we find it antithetical to the aims of the project.  (You are of course welcome and encouraged to support the project in other ways, including funding individual developers directly at your discretion - we just don't promise any sort of monetary ROI from the project on such.)
01/21 07:29:26<nilli> *that was HMC reply
01/21 07:29:49<nilli> so this is what I think of writing now:
01/21 07:31:29<editable-koo>i think the guy asked if we have any funding and hmc answered if we accept any funding
01/21 07:32:19<nilli> This brunch (of the tauchian split) s now supported by the Agoras tokens as well.  The main developers of the original Tauchain Ohad and HMC have always been fully engaged with the project, however that engagement resulted in harsh disagreements which led to the split. The other two developers of the original tauchian, Koo and stoopkid  guided by HMC are now working on the autonomic branch drafting the milestones and estimated timel
01/21 07:32:55<nilli> that is what I think to write on the thread
01/21 07:35:16<nilli> its quite suggestive and mild , might not get much attention which is fine for now.
01/21 07:35:51<nilli> what do you think of it editable-koo ?
01/21 07:40:00<editable-koo>i have my reservations wrt being able to estimate milestones and time on autonomic
01/21 07:40:09<editable-koo>but i think you can write it like that anyway
01/21 07:42:03<editable-koo>we are working on it, thats for sure
01/21 07:44:54<nilli> ok I think that should be fine
01/21 07:50:26<editable-koo>yeah
01/21 07:50:46<editable-koo>loled @ 01/15 20:09:44<shaowei> I am a regular learning block chain
01/21 07:53:30<nilli> https://bitcointalk.org/index.php?topic=950309.3000
01/21 07:54:40<nilli> hope it will go smoothly
01/21 07:58:03<editable-koo>*thumbs up*
01/21 07:59:04<nilli> :) not sure anyone else will think that way. but at list you do
01/21 08:01:25<nilli> https://bitcointalk.org/index.php?topic=950309.new#new
01/21 08:01:35<nilli> did not take long
01/21 08:06:11<editable-koo>sigh
01/21 08:29:14<nilli> ok I think Im taking a walk now ,been in the cafe for too long .:)
01/21 08:33:57*** Quit: nilli (8de207db@gateway/web/freenode/ip.141.226.7.219) left #AutoNomic: Ping timeout: 260 seconds
01/21 08:36:11<editable-koo>o/







01/21 08:39:14*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/21 08:39:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/21 08:44:13*** Join: drm (918177e9@gateway/web/freenode/session, (unauthenticated): 145.129.119.233 - http://webchat.freenode.net)
01/21 08:45:20*** Quit: drm (918177e9@gateway/web/freenode/session) left #AutoNomic: Changing host
              *** Join: drm (918177e9@gateway/web/freenode/ip.145.129.119.233, (unauthenticated): 145.129.119.233 - http://webchat.freenode.net)
01/21 09:16:07*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/21 09:27:28<editable-koo>offtopic, ive taken apart a fairly new led lightbulb, and things have been simplified fairly, since the last one i opened
01/21 09:28:28<editable-koo>one board with a rectifier and a cap
01/21 09:29:10<editable-koo>second board with leds and 01/21 08:33:57*** Quit: nilli (8de207db@gateway/web/freenode/ip.141.226.7.219) lef
SM2082D
pdf.dzsc.com/99999/2016111142730107.pdf
01/21 09:29:45<editable-koo>with leds and SM2082D
01/21 09:29:55<editable-koo> pdf.dzsc.com/99999/2016111142730107.pdf
01/21 09:30:46<editable-koo>and a resistor that sets the current output of this chip
01/21 09:31:42<editable-koo>seems like wireless brightness controll will be cheap with this
01/21 09:33:25<editable-koo>anyway the best part, the failure mode of this lightbulb is that the connector between the two boards is flaky and loses contact, just pop off the difussing cover and poke at it
01/21 09:34:23<editable-koo>or i think thats what it was, after i broke it down into pieces and connected, it worked
01/21 09:35:34<editable-koo>so, where are the stocks of the company thats gonna produce the next gen wireless lightbulbs?
01/21 10:16:22<stoopkid> oy well i guess we're back to the drama again
01/21 10:17:42<stoopkid> "autonomic ppl pulling the strings from backstage again"
01/21 10:19:23<stoopkid> lol i don't even know where to start with that
01/21 10:37:59*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Remote host closed the connection
01/21 12:42:36*** Quit: drm (918177e9@gateway/web/freenode/ip.145.129.119.233) left #AutoNomic: Quit: Page closed
01/21 15:31:27*** Quit: suiqiublockchain (~suiqiublo@180.162.43.72) left #AutoNomic: Read error: Connection reset by peer
01/21 15:32:01*** Join: suiqiublockchain (~suiqiublo@180.162.43.72, (unauthenticated): realname)
#AutoNomic> 01/21 18:40:16*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #AutoNomic: Home of the AutoNomic block-chain project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
              *** Topic set by stoopkid on Tue Jan  9 15:09:31 2018, 12 days 3 hours 30 minutes 45 seconds ago
              *** Names: editable-koo suiqiublockchain daemoz HMCa lexxus[m] deadhand[m] tigertigertiger[ lexx_[m] daemoz[m] Tamara_ nilli[m] reffael cantora stoopkid genuinelyfx[m] koo5[m] jibble_ vbmithr Deadhand @ChanServ
              *** End of /NAMES list.
01/21 18:42:05<editable-koo>ok everything installed
01/21 21:06:43*** Quit: suiqiublockchain (~suiqiublo@180.162.43.72) left #AutoNomic: Remote host closed the connection
01/21 21:12:57*** Join: suiqiublockchain (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/21 22:35:34*** Quit: suiqiublockchain (~suiqiublo@180.162.43.72) left #AutoNomic: Ping timeout: 240 seconds
01/22 01:01:03*** Join: suiqiublockchain (~suiqiublo@180.162.43.72, (unauthenticated): realname)
01/22 02:38:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/22 02:39:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/22 03:15:21*** Join: nilli (258eab9c@gateway/web/freenode/ip.37.142.171.156, (unauthenticated): 37.142.171.156 - http://webchat.freenode.net)
01/22 03:15:52<nilli> hi
01/22 03:16:24<stoopkid> hey nili
01/22 03:16:52<nilli> stoopkid I think that the drama is over and we can now just work
01/22 03:17:36<stoopkid> hopefully :)
01/22 03:17:47<nilli> everyone is aware of everything and anyone can make of it what they want.
01/22 03:19:08<nilli> I had a long chat with the guy who work closely with Ohad, explained to him how it can only benefit the investors
01/22 03:20:32<nilli> which was his main concern in terms of the trust they put in Ohad.
01/22 03:22:13<nilli> its amazing who difficult it is for people to see that a split dose not means competition
01/22 03:22:53<stoopkid> well, i think that assumption might be predicated on a couple details that you didn't really make explicit in your post
01/22 03:25:18<nilli> i think that it is a much deeper mindset rooted in our economics.
01/22 03:26:29<nilli> anyway what do you think was missing there in  the post in terms of explaining the connection?
01/22 03:28:06<nilli> I know it was very brief but I tried to avoid getting into any details, just wanted to acknowledge it in public
01/22 03:28:07<stoopkid> well, actually, reading over the post again, you didn't even mention your later plans with agoras, you just said you were funding us to build autonomic, now i'm even more confused as to what they're upset about XD
01/22 03:31:16<stoopkid> well, anyway, what i was thinking only really applied to that, so, i guess it doesn't apply
01/22 03:32:32<nilli> and yes I did not say anything about funding the app not to confuse things at that point
01/22 03:35:22<nilli> it was important for me to focus the attention to the fact that the agoras funds are being used to the development attempts  made by all parts of the original team.
01/22 03:40:19<nilli> what it means is a bit too fundamental and subtle for most to realize
01/22 03:41:11<nilli> anyway now I feel that we can move on with the work in the open
01/22 03:44:36<nilli> by the way all that made me think a lot about the DNA double helix structure
01/22 03:46:44<nilli> the root of the chain must somehow replicate that
01/22 03:47:19<stoopkid> hrm. why that?
01/22 03:48:39<nilli> I'll try to describe the connotations that sparked that in my mind,
01/22 03:49:52<nilli> but first its interesting to realize that we may reach it as a default
01/22 03:52:56<nilli> when one look at the explanation for the DNA structure it is  matter and 3D behavior that is given as part of the explanation.
01/22 03:55:01<nilli> but if one exchange matter with forces and thus balance as a dynamic balance of  forces it can be translated to any structure that is not spacial
01/22 03:55:35<nilli> including interests and incentives
01/22 03:56:41<nilli> the other reason for that structure is the multiplication process
01/22 03:59:29<nilli> its too early in the development to realize what is it that we are going to do but I assume that naturally it will evolve in that direction
01/22 04:01:23<nilli> also its not right to really try and understand it , as the big picture since if its true it must evolve that way without  designing it to be that.
01/22 04:04:11<nilli> the design is in the essence of the functions we do
01/22 04:04:48<nilli> we just need to be true to ourselves in order to get there
01/22 04:08:53<nilli> maybe I write a nice philosophical entry to post as a reply on the thread. can be a fun thing to do while you guys keep coding :)
01/22 04:10:39<stoopkid> hrm, yea i can't make much concrete out of this yet, but, biological concepts do serve as reasonable analogies for different aspects of the system, i'll be interested to see what you can elaborate on this if you do write up that post :)
01/22 04:35:26*** Quit: suiqiublockchain (~suiqiublo@180.162.43.72) left #AutoNomic: Ping timeout: 268 seconds
01/22 04:48:22<nilli> be interesting to see if I can actualy do that. :) ok talk to you later
01/22 04:53:07*** Quit: nilli (258eab9c@gateway/web/freenode/ip.37.142.171.156) left #AutoNomic: Ping timeout: 260 seconds
01/22 11:12:06*** Join: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87, (unauthenticated): 77.139.88.87 - http://webchat.freenode.net)
01/22 13:16:56*** Join: GMpow2 (~5@2a02:810a:82c0:1c:88e6:1005:cc60:32c8, (unauthenticated): realname)
01/22 17:23:16*** Quit: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87) left #AutoNomic: Ping timeout: 260 seconds
01/22 18:02:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/22 18:05:37*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/22 18:29:01<editable-koo>http://ceptr.org/whitepapers/mutual-credit
01/22 19:12:05*** Quit: reffael (uid237291@gateway/web/irccloud.com/x-lkhgszdrfdcswqdg) left #AutoNomic: Ping timeout: 256 seconds
01/22 19:57:39*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:88e6:1005:cc60:32c8) left #AutoNomic: Ping timeout: 265 seconds
01/22 21:12:27*** Join: reffael (uid237291@gateway/web/irccloud.com/x-rhdjwbonkcbtdgqn, (unauthenticated): reffael)
01/23 00:13:30*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-sqjjvshconnyxqnp) left #AutoNomic: Quit: Connection closed for inactivity
01/23 02:25:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 248 seconds
01/23 02:37:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/23 02:58:36*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/23 03:18:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/23 06:05:09<koo5[m]> https://m.youtube.com/watch?v=1B2BdBK1fy4&feature=youtu.be
01/23 06:54:32-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/23 06:54:38*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/23 07:00:45-SaslServ- kook!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/23 07:01:04*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/23 07:03:33*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
01/23 09:01:23*** Join: GMpow2 (~5@2a02:810a:82c0:1c:58bf:5c7d:4602:d49c, (unauthenticated): realname)
01/23 09:29:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wborcpznpdwjlspa, stoopkid: stoopkid)
01/23 10:16:21*** Join: GMpow2_2 (~5@2a02:810a:82c0:1c:58bf:5c7d:4602:d49c, (unauthenticated): realname)
01/23 10:16:45*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:58bf:5c7d:4602:d49c) left #AutoNomic: Read error: Connection reset by peer
01/23 10:17:22*** Quit: GMpow2_2 (~5@2a02:810a:82c0:1c:58bf:5c7d:4602:d49c) left #AutoNomic: Read error: Connection reset by peer
01/23 10:17:46*** Join: GMpow2_2 (~5@2a02:810a:82c0:1c:58bf:5c7d:4602:d49c, (unauthenticated): realname)
01/23 10:18:31*** Quit: GMpow2_2 (~5@2a02:810a:82c0:1c:58bf:5c7d:4602:d49c) left #AutoNomic: Read error: Connection reset by peer
01/23 11:57:42*** Join: GMpow2 (~5@2a02:810a:82c0:1c:d802:7c94:c81d:bffd, (unauthenticated): realname)
01/23 12:03:57*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:d802:7c94:c81d:bffd) left #AutoNomic: Read error: Connection reset by peer
01/23 12:04:22*** Join: GMpow2 (~5@2a02:810a:82c0:1c:d802:7c94:c81d:bffd, (unauthenticated): realname)
01/23 12:07:17*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
01/23 12:52:13-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/23 12:52:19*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/23 16:57:35*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:d802:7c94:c81d:bffd) left #AutoNomic: Read error: Connection reset by peer
01/23 16:57:56*** Join: GMpow2 (~5@ip4d16fc82.dynamic.kabel-deutschland.de, (unauthenticated): realname)
01/23 18:12:39*** Quit: GMpow2 (~5@ip4d16fc82.dynamic.kabel-deutschland.de) left #AutoNomic: Read error: Connection reset by peer
01/23 18:12:56*** Join: GMpow2 (~5@ip4d16fc82.dynamic.kabel-deutschland.de, (unauthenticated): realname)
01/23 18:26:46*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
01/23 22:04:13*** Quit: GMpow2 (~5@ip4d16fc82.dynamic.kabel-deutschland.de) left #AutoNomic: Ping timeout: 268 seconds
01/24 04:23:24*** Join: nilli_ (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
01/24 04:23:40<nilli_>  https://bitcointalk.org/index.php?topic=950309.msg28808416#msg28808416
01/24 04:30:50*** Quit: nilli_ (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
01/24 06:23:36*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/24 06:49:46*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
01/24 10:17:47*** Join: GMpow2 (~5@ip4d16fc82.dynamic.kabel-deutschland.de, (unauthenticated): realname)
01/24 10:24:53*** Quit: GMpow2 (~5@ip4d16fc82.dynamic.kabel-deutschland.de) left #AutoNomic: Ping timeout: 240 seconds
01/24 12:39:43<HMCa> that timeline is a little bit incorrect
01/24 12:40:05<HMCa> the ico tokens came well after the tau project was underway
01/24 13:19:44*** Join: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87, (unauthenticated): 77.139.88.87 - http://webchat.freenode.net)
01/24 13:25:33<nilli> HMCa as much as I remember there where already investors in the zennet phase and a presel of the tokens Re: [PRE-ANN][ZEN][Pre-sale] Zennet: Decentralized Supercomputer - Official Thread
01/24 13:27:04<nilli>  https://bitcointalk.org/index.php?topic=736447.msg10403838#msg10403838
01/24 13:28:28<nilli> "So we do not sell Zennet coins anymore, and all previous buyers will get Agora, offering no less but much more technological and economical features".
01/24 13:30:13<nilli> I also remember that : "I'm glad I was lucky enough to meet HunterMinerCrafter and by this to have opportunity to bring so much more value and utility to the world. It is also a great pleasure and honor to be HMC’s student."
01/24 13:35:23<nilli> I wonder how come there was no comment on my post. (it took me three days to write it , and that without actualy a maticluse proof reading , I could not look at it anymore.)
01/24 13:37:02<nilli> I still think that people do not really get it.   is it me or the rest of the world???!!!!! :)
01/24 13:39:27<stoopkid> well, has anyone ever done this before, prior to you? :)
01/24 13:39:49<nilli> nature do it all the time :)
01/24 13:40:37<stoopkid> yea, i mean as a crypto project lol
01/24 13:41:38<nilli> no, which means that I will have to explain many times and with great details
01/24 13:51:40<stoopkid> well, looks like you got one commentor, who brings up a good point :P
01/24 13:59:36<nilli> I had a chat with one of the guys who work with ohad and eventually he got it. his question was how would it technically work having the same coin for two different apps,
01/24 14:00:54<stoopkid> i'm kinda wondering the same :) i figured you were intending to just have a backup plan in case tau failed not intending to launch something with the possibility of two apps with the same coin
01/24 14:01:54<nilli> I explained that at first each token holder would be able to choose to which app to exchange the token one to one but eventualy it will be in the interest of all investors to have some mechanics that will ensure the ability to exchange one to one all along
01/24 14:02:47<nilli> kind of an extension to the app itself
01/24 14:03:57<nilli> that extension in a way is s "unifier"
01/24 14:04:09<nilli> a defork
01/24 14:05:50<stoopkid> seems more like da fork :P but, idk, what does the agoras community want
              <nilli> anyway technically one day when and if we get there it would be an easy task compere to all the that need to be done to get ther
01/24 14:06:33<nilli> You get the economic rational right?
01/24 14:06:56<nilli> the community will act according to what will give them the most value
01/24 14:07:24<nilli> and that is what gives most value
01/24 14:07:45<nilli> at list for the initial investors.
01/24 14:09:22<stoopkid> but aren't you just kinda throwing a new agreement at the community that they didn't originally sign up for, and are still uncertain about, and don't seem to have much control over?
01/24 14:10:36<stoopkid> which further is coming from outside the project, purportedly from "vandalist enemies"
01/24 14:17:24<nilli> if we put the zennet a side for a moment (since is to complicate things too much) , then the investors agreement was with the two developers to deliver a system,
01/24 14:18:25<nilli>  since the developers cant agree which way will bring  about the system then the original agreement is now split between the two
01/24 14:18:47<nilli> and both are still working to reach that same goal the investors invest in
01/24 14:19:47<nilli> in fact being forced to decide on one developer team over the other is the change of agreement, not the other way
01/24 14:22:23<nilli> its a bit like a child for divorced parents, yes it may not be the best solution to live in two houses ,yet is the deal that he sign in for. having two parents taking care of him
01/24 14:25:37<nilli> an frankly if the parents  would not fight and each will start a new family that love and care for the child that child have a better deal :) (assuring all the risks of life)
01/24 14:29:52* stoopkid shrugs
01/24 14:30:20<stoopkid> i don't think either tau nor autonomic consider the other to be working towards the same goal anymore
01/24 14:30:24<stoopkid> and not just at a matter of implementation detail
01/24 14:30:28<nilli> lol did not realize that there was a comment form ohad.
01/24 14:32:31<stoopkid> well, no surprises there i guess :)
01/24 14:36:34<nilli> it makes me sad to see how being hurt blinds him like that. I really really really do not want to hurt him by any means. but he did not keep his promises and commitment regarding HMC
01/24 14:36:58<nilli> even if he totally disagree with him
01/24 14:41:56<stoopkid> idk i didn't think anybody was still concerned about those promises/commitments
01/24 14:48:13<stoopkid> i'd love to work on a more collaborative basis since obviously we still have so much overlapping research material even if we're not working towards the design goals, but... y'know how it is :)
01/24 14:48:35<stoopkid> towards the same*
01/24 14:54:10<nilli> I think if we all concentrate on the work it will eventually work itself out. im not going to comment on anything that is not concrete .
01/24 14:54:59<stoopkid> well, i do have plenty of abstract data types worth commenting on :P
01/24 15:00:54<nilli> what do you mean?
01/24 15:01:49<stoopkid> just a bad programming joke
01/24 15:06:36<stoopkid> you still studying truth tables and all that? :)
01/24 15:46:43<nilli> well, I actualy could, but im not sure where to pick up and what the point other then it being interesting.
01/24 15:58:20<stoopkid> well, if you know the logic you know the system
01/24 16:01:50<stoopkid> i like how nobody actually holds us accountable to anything because they don't touch the logic haha (jk, mostly)
01/24 16:10:34<stoopkid> speaking of which, @ lexx: sorry i haven't fixed up the euler code yet, we've been working on some other code based on standard type theory and lambda calc, along with various proof-of-correctness stuff in Agda, i'm hoping that by starting from the more familiar setting of typed lambda calc i'll either be able to see more clearly how to translate that into N3 inferencing, or just figuring out how to progress
              <stoopkid> without it, so, we're somewhat on the fence about what we're even gonna be doing with that code. we'll start publishing bits and pieces of that as we get it more refined.. next few days - a week probably; not long
01/24 16:10:53<stoopkid> just figure*
01/24 16:15:13<stoopkid> we're working our way up through various things lik e translations between different systems of computing, hopefully we'll be able to use some of this research for designing the compiler, but, it's mainly so that we can go through the fully detailed steps of verification of system as we go along building it, rather than falling into a situation of either a) building a whole implementation and then backtracking to
              <stoopkid> try to verify it, or b) verifying some abstract design and then backtracking to try to realize it as an implementation
01/24 16:17:42<stoopkid> ultimately this is leading up to an extension of MLTT with authenticated data structures, which hasn't been done yet (as far as we're still aware?), which is one the main reasons it's crucial for us to go through all these incremental proofs and translations along the way so that we can even make sure the abstract design is correct / secure there, let alone the implementations of it
01/24 16:20:13<stoopkid> the rest should be fairly smooth sailing after that point
01/24 16:20:36<stoopkid> nothing else really even approaches the complexity of this step
01/24 17:35:06*** Join: lex_ (2590556f@gateway/web/freenode/ip.37.144.85.111, (unauthenticated): 37-144-85-111.broadband.corbina.ru/37.144.85.111)
01/24 17:35:53<lex_> @stoopkid thanks for the update. later on I can set up a continuous integration server, which will regularly perform builds (on push) and notify if something gets broken. anyway, there is still an extremely steep learning curve to go before I can start looking into your code.
01/24 17:36:29<lex_> As for now, I’m currently enjoying pierce’s types and programming languages book, and trying to look into modern toolkits of parsers/compilers/vm. I’ve never worked in this area so I don’t really know what is out there. Apart from “obvious” things like LLVM, I plan to look at jetbrains mps - a dsl workbench with non-textual notation. It looks quite cool.
01/24 17:37:52*** Quit: lex_ (2590556f@gateway/web/freenode/ip.37.144.85.111) left #AutoNomic: Client Quit
01/24 18:11:38<lexxus[m]> Хорошо когда дъэ
01/24 20:01:14*** Quit: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87) left #AutoNomic: Ping timeout: 260 seconds
01/25 00:18:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wborcpznpdwjlspa) left #AutoNomic: Quit: Connection closed for inactivity
01/25 04:44:59*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/25 04:45:13*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-candkqtntfukshmk, stoopkid: stoopkid)
01/25 05:57:22<koo5[m]> been looking into mps as well, but not too deef
01/25 05:57:24<koo5[m]> deep
01/25 05:59:39<koo5[m]> so actually i tried writing a projectional editor and a parser around libmarpa, lexx_
01/25 06:00:46<koo5[m]> and not sure what the question was wrt fixing, euler or univar or ? But i have plans for that
01/25 06:35:41*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 252 seconds
01/25 07:07:55*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/25 08:28:47*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/25 08:29:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/25 09:15:21<stoopkid> univar
01/25 09:16:02<stoopkid> which should just require backtracking the git repo but i keep getting sidetracked by our lambdas stuff
01/25 09:17:14<stoopkid> but we should probably just use your repo anyway since you've got the latest working revisions
01/25 10:14:25<koom> yea
01/25 10:39:20<koom> im looking forward to messing with pyin and kbdbg and everything, but i guess i should put in some work into what we're doing now first
01/25 17:33:56*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
01/25 17:34:10-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/25 17:34:16*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/25 21:25:20*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
01/26 03:02:39*** Join: nilli (50f68890@gateway/web/freenode/ip.80.246.136.144, (unauthenticated): 80.246.136.144 - http://webchat.freenode.net)
01/26 03:02:46<nilli> hi
01/26 03:04:04<nilli> So is koo5 back? where are you guys standing in terms of the milestones  and time line plans?
01/26 03:04:39<stoopkid> hey nilli
01/26 03:04:59<nilli> hey stoopkid
01/26 03:06:04<nilli> what do you think should be the forum to communicate about the developments in the project?
01/26 03:06:32<stoopkid> well, still working some things out, it's hard to estimate time-lines since what we're thinking to be the first milestone is so research-focused
01/26 03:06:58<stoopkid> we were gonna publish things on the wiki, but i'm open to suggestions there
01/26 03:10:56<nilli> regarding the timeline I think that we can be more creative in terms of stating it, I think that the research stage need to be understood very well in terms of the goals need to reach and also maybe broken down to its marking points
01/26 03:12:42<nilli> I see a great problem in both branches of that project in terms of being able to form the actual theoretical/research stages required to reach a working system
01/26 03:13:49<stoopkid> i can agree with that
01/26 03:14:18<nilli> the major setback here is that the code to run the root  can not be fixed , which means that all the work have to be done prior to it
01/26 03:14:59<nilli> its almost like you do not have a way to test anyting
01/26 03:16:18<nilli> thus I would think that a test-root kind of approach should be taken
01/26 03:17:05<nilli> so to run a code as test to see the problems and use that as part of the research
01/26 03:19:09<stoopkid> we probably should start on some test-net experimentation while we're sorting out the details with the logic for efficiency's sake
01/26 03:19:40<nilli> what I mean here that we should get off the sketch pad and onto the "medium" of our expression .make it as easy as to test every stupid idea
01/26 03:20:17<nilli> yes what you just said
01/26 03:21:50<nilli> I think that this approach expressed in the  milestone and time line is what we need
01/26 03:23:11<nilli> we should define the parameters which will be needed to be reached in order to assume the move to the actual rootchian
01/26 03:23:47<nilli> and maybe run a few test nets with some different designs which are in quastion
01/26 03:25:11<nilli> stoopkid I think that for you personally it will be a huge step in the right direction
01/26 03:25:22<nilli> make things concrete
01/26 03:26:51<stoopkid> well, you're not wrong, and we should be able to test the functionality of the system without the authenticated data structures, we'll just need that for the final release
01/26 03:29:32<nilli> The one thing that I keep having problem to understand is the gap between what HMCa present as a system that he allready designed and run and the problem that you have to reconstruct it
01/26 03:29:59<nilli> why can't we start right there?
01/26 03:30:10<nilli> run his original code
01/26 03:30:31<stoopkid> idk but i figured if we could we'd already be doing that? :D
01/26 03:31:51<nilli> well you need at least to get form him the parts that he had .
01/26 03:32:12<nilli> did he ever give you or ohad any piece of code
01/26 03:32:47<stoopkid> not for tau/autonomic directly, the agreement was always he provides the design and we code it
01/26 03:33:17<stoopkid> which is better than him not providing the design and us not coding it, so, i'll take it i guess :)
01/26 03:33:23*** Join: suiqiublockchain (~suiqiublo@116.225.46.56, (unauthenticated): realname)
01/26 03:33:42<nilli> what the difference between a design and the code, I seem to need to understand that better
01/26 03:35:02<stoopkid> more or less the design is when you can make another person get the idea, code is when you can make the rest of our machines get the idea
01/26 03:35:09<stoopkid> design is like code for humans
01/26 03:35:27<nilli> if the design is detailed enough all one need is to reconstruct it not envent anything
01/26 03:35:55<nilli> let me give you an example form my filed
01/26 03:36:19<nilli> so you can the explain me how it work in coding
01/26 03:36:59<stoopkid> well, before that i should note that this is not exactly how it usually works in coding :)
01/26 03:38:13<stoopkid> afaict HMC is specifically intending that we "reinvent it"
01/26 03:38:35<nilli> when a set designer give me  his vision for the set he can use words to describe it but the chances he get what he vision is very slim
01/26 03:39:06<nilli> he can give me a picture which is a mach better way to express his idea
01/26 03:39:09<stoopkid> ah, in programming they call that agaile dev
01/26 03:39:13<stoopkid> agile*
01/26 03:39:53<nilli> but he can also give me detailed draft with all the sizes and the materials to be used
01/26 03:41:11<nilli> if I get all that and we are both professional, I as the painter, and he as the designer we can get exactly what he want
01/26 03:41:58<stoopkid> yes (and woops i spoke too soon wrt agile dev)
01/26 03:42:19<nilli> however my way to execute it would be something he could never think off since he is not a painter
01/26 03:42:56<nilli> now HMCa is a painter (programmer) so I think we all understood
01/26 03:44:15<nilli> that is then like me as a painter know also everything a designer need to know and then act as the designer communicating to other painters what do do
01/26 03:45:20<nilli> such a designer is in a position to be able to make others do exactly what  she wants but not have to do it herself
01/26 03:46:30<nilli> unlike the non painter designer that have to relay on the painter to know his craft very well
01/26 03:47:52<stoopkid> or like in our case there's a really good painter who's basically having... "some random person off the street" do the painting :)
01/26 03:48:58<nilli> in other words as a painter-designer I can get my design executed by anyone who is good with materials and have a good eye and ability to paint
01/26 03:49:22*** Quit: suiqiublockchain (~suiqiublo@116.225.46.56) left #AutoNomic: Quit: Leaving
01/26 03:49:26<nilli> as a designer only ,I need a good scenic painter
01/26 03:50:40<nilli> and yes in your case as a programmer and a computer scientist HMC should be able to have you construct it if you are smart  enough to get the math and logic needed
01/26 03:51:49<stoopkid> (and the regular old-fashioned coding)
01/26 03:53:43<nilli> now the problem with Ohad was that he was a "scenic" that disagreed with the "painter-designer" breakdown of how to get the job done
01/26 03:55:41<nilli> it's like me being a really good and experienced scenic painter saying to him that he did not paint for a while and thus is not aware to some new and better ways to reach that same goal
01/26 03:55:47*** Join: suiqiublockchain (~suiqiublo@116.225.46.56, (unauthenticated): realname)
01/26 03:58:55<nilli> and thus the new tau is like me eventually going off to make the design based on what I know and have it a better option in my mind while HMC continue with some painters off the street
01/26 04:01:36<nilli> so now we have two designers and two executing teams to make that same set for our movie :) after all the director just need a set and dont care how it is made (the "director" being the investor in this story)
01/26 04:02:10<nilli> there is a point for going into all  that analogy details
01/26 04:05:43<nilli> are you still here stoopkid?
01/26 04:05:54<stoopkid> yep
01/26 04:06:20<nilli> let me ask you then the hard quastion
01/26 04:09:14<nilli> at what point would you (as a painter for the street)  know if HMCa actualy know what he is talking about and is not an impostor (as the "experienced scenic" Ohad in our story, now think
01/26 04:10:14<nilli> it is well known that imposers are very smart people usually
01/26 04:10:21<stoopkid> i already know that HMC knows what he's talking about wrt 99% of it
01/26 04:11:55<nilli> ok that is one very important factor
01/26 04:12:48<nilli> if it is so and you and koo can code and understand the math and logic then you can do it as trail and eror
01/26 04:13:43<nilli> you need to start executing it, then both you an him can see if it work
01/26 04:14:42<nilli> then he can help you fix it using the actual details of what you have done
01/26 04:16:21<stoopkid> hopefully shouldn't need too much fixing once we set it up
01/26 04:17:29<nilli> So for your research stage I want you and koo to break it down to some actual test code you can check for working
01/26 04:18:06<nilli> it that make sense to do?
01/26 04:19:20<stoopkid> well, that is pretty much what we're doing, just currently that's been restricted to the logic side of things
01/26 04:20:58<nilli> how can you test the logic?
01/26 04:23:22<stoopkid> implement it, run it, make sure your examples pass, then prove (like with math) that the implementation correctly captures the semantics of the logic
01/26 04:25:05<stoopkid> and also like literally "put the logic to the test" like make sure it can do all the different kinds of things we need to do
01/26 04:25:50<stoopkid> in case you're wondering if MLTT can, yes, any further Agda code i write to demonstrate this is beating a dead horse at this point :)
01/26 04:27:21<nilli> ok sound good. can this be broken to miletones time line each such demonstrating phase. as your work until now, regard your proofs, where can it bee seen?
01/26 04:28:22<nilli> I need you to run a blog on the wiki in which you post every such stage you complete
01/26 04:29:07<nilli> I guess its on the github as well , is it?
01/26 04:34:18<nilli> in terms of communicating that , I am not going to get into it further on the tauchian thread unless have people ask about the overall concept of the coin being funding the autonomic effort as well
01/26 04:35:09<stoopkid> we've got it sort of broken down into steps, most of my proofs aren't on github or the wiki, i'm still trying to figure out how to refine it all to make it presentable rather than just a big mess of information and then i'd be putting it on the wiki, and i guess i can set up something like a blog to make it easier to keep track of when there's updates; the new code isn't on github yet either but will be as soon as
              <stoopkid> we make some more progress with it, we've detoured a bit in order to give koo (and now daemoz) a full overview of how the logic works so that they know exactly what we're building here
01/26 04:35:10<nilli> I guess the concept is difficult to comprehend
01/26 04:36:26<nilli> the concept of not having to choose a side since both sides are of the same coin :)
01/26 04:36:53<stoopkid> well
01/26 04:37:39<stoopkid> planned apps on both systems are for the same coin, anyway?
01/26 04:38:40<nilli> however the information of the efforts and how development is progressing is important to communicate
01/26 04:38:58<stoopkid> also, wrt investors being the directors, they aren't investors in autonomic per se, and so maybe better to consider them more like audience in this context?
01/26 04:44:27<nilli> on our outlet (wiki is fine along side with the IRC and ofc github ) since anyway the discussion is not a marketing one at this point, only mostly for developers and some crypto anomalies like me.
01/26 04:47:07<nilli> investors are the ones who are most interested in the product to use for their need (make profit most of them) in this regard they are like a director not in terms of deciding anything/
01/26 04:48:41<stoopkid> idk imo it's a discussion for everybody
01/26 04:50:21<nilli> if so we need to get a whatever is now working (telegram or slack or a thread on bitcointalk)
01/26 04:50:55<nilli> and then it means that you and koo will have to communicate there too
01/26 04:52:56<stoopkid> i'll obsessively-compulsively communicate wherever anybody's talking about logic :)
01/26 04:57:03<nilli> which forum would you prefer? also HMCa . I think bitcointalk or reddit  since hmc have a profile in both (I think), and both such the same way. I am good with bitcoin talk since been there for a while/
01/26 05:03:33<nilli> ok I need to go now. could you and koo talk about the breaking down the first stage of research to its milestone? and the forum in which to comunicate
01/26 05:05:03<stoopkid> hrm, looks like bitcointalk doesn't technically have a subforum  for this project, since it says Alternative Crypto"currencies"
01/26 05:05:57<stoopkid> and yea we'll go over that
01/26 05:08:03*** Quit: nilli (50f68890@gateway/web/freenode/ip.80.246.136.144) left #AutoNomic: Ping timeout: 260 seconds
01/26 05:50:48*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/26 07:10:32<koom> nilli[m], heres some inspiration by nature that i like: https://medium.com/holochain/beyond-blockchain-simple-scalable-cryptocurrencies-1eb7aebac6ae#.q7tqxi61o
01/26 07:11:30<koom> https://www.youtube.com/watch?v=1B2BdBK1fy4
01/26 07:14:13<koom> im totally for building prototypes, so i can see the design top-to-bottom
01/26 07:15:50<koom> stoopkid's just teaching us some math stuff now, so he isnt left alone in it
01/26 07:19:31<koom> and i need to figure out what the new design without a reasoner really means. I sure never had the big picture back when we were going rdf, but hmc always knew what comes next
01/26 07:19:51<koom> now i dont know if we're on the same page, HMCa?
01/26 07:39:16<stoopkid> i'm pretty sure we're on the same page
01/26 07:40:13<stoopkid> but, HMCa can clarify if we're missing anything
01/26 07:43:42<stoopkid> afaict the only constraint is that *if* we have automated inferencing being directed by the rules of the network such that it then gets auth'd, then we need to ensure that  everybody follows the same ordinality of inferencing so that proof traces come out the same
01/26 07:44:04<stoopkid> such that the proof-traces from this automated inferencing then get auth'd**
01/26 07:44:27<stoopkid> same order of applying the inference rules
01/26 07:54:13<stoopkid> i can't tell yet where this would need to come up though
01/26 08:47:12*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
01/26 12:16:17*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/26 12:26:59<editable-koo>anyone wants to fix up the permissions on the web server?
01/26 12:35:25<editable-koo>going thru old logs to help me answer some of nillis questions...
01/26 13:10:28*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
01/26 14:23:46-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
01/26 14:23:53*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/26 14:52:00<stoopkid> editable-koo: mm, maybe, what needs to be fixed up about them
01/26 14:52:59<koo5[m]> so, http://autonomic.now.im -> index.html, alright
01/26 14:55:23<stoopkid> hrm yea i need to think about what to do with that
01/26 14:55:31<koo5[m]> hmm it seems to work at least somewhat, now
01/26 14:55:59<koo5[m]> its just case sensitive, like, http://autonomic.now.im/autonomic is 404
01/26 14:56:17<stoopkid> ah, yes
01/26 14:56:29<stoopkid> that can be fixed
01/26 14:56:33<koo5[m]> and when you finally get it right, it redirects you to the ip-based url
01/26 14:56:49<stoopkid> yes
01/26 14:58:29<stoopkid> so originally i put those namespaces in there and then that made the URLs redundant like autonomic.now.im/autonomic, or orange.now.im/orange
01/26 14:58:43<stoopkid> so i figured we'd move them all under a generic domain
01/26 14:59:25<stoopkid> but, now i know how to do way more manipulations based on the URL, so we might even be able to switch it up to something like autonomic.now.im/{article}
01/26 15:02:01<koo5[m]> ok, my original problem was, i try http://167.88.171.233/workspace/ and get permission denied
01/26 15:02:46<stoopkid> what is "workspace"
01/26 15:02:48<koo5[m]> ah thats just directory listing
01/26 15:03:07<stoopkid> ah yea it doesnt list directories right now, we could turn that permission o
01/26 15:03:09<stoopkid> on*
01/26 15:03:36<koo5[m]> 167.88.171.233/workspace/resources.txt
01/26 15:04:29<koo5[m]> can we turn it on per directory, with .htaccess, or is nginx different than appache in this?
01/26 15:05:06* stoopkid makinig some coffee then will look into it
01/26 15:07:55<koo5[m]> whenever you feel like it, hey
01/26 15:08:35<stoopkid> wtf google stop spying on me
01/26 15:08:47<stoopkid> anyway: http://167.88.171.233/workspace/
01/26 15:12:57<koo5[m]> cool, how did you do it?
01/26 15:13:25<stoopkid> "autoindex on;" inside a location directive for the directory
01/26 15:15:45<stoopkid> so why is it that i when i go type "nginx" into google it autocompletes to "nginx allow directory listing"?
01/26 15:16:52<koo5[m]> ah thx
01/26 15:17:36<koo5[m]> nobody knows
01/26 15:17:55<stoopkid> so, some hidden key/cache logger on my system is trying to be construed as a "feature", great
01/26 15:18:32<stoopkid> that's the next-gen features i'm looking for
01/26 15:30:41*** Quit: suiqiublockchain (~suiqiublo@116.225.46.56) left #AutoNomic: Remote host closed the connection
01/26 15:32:03*** Join: suiqiublockchain (~suiqiublo@116.225.46.56, (unauthenticated): realname)
01/26 16:40:55<koo5[m]> are you taking care of backups of the mysql? if theres a command line i can run to dump it into a file, ill then back it up along with all the other stuff
01/26 16:41:31<stoopkid> postgres, yea if you're backing everything up lemme find that command for you real quick
01/26 16:42:12<koo5[m]> ah so i can disable the mysql?
01/26 16:42:42<stoopkid> ah, probably, we're not using it for the wiki
01/26 16:43:02<stoopkid> unless i screwed something up worse than i can possibly imagine :)
01/26 16:53:47<koo5[m]> heh
01/26 16:54:06<koo5[m]> so, ive symlinked the interesting dirs: http://autonomic.now.im/workspace/
01/26 17:05:46<koom> can we add  | #AutoNomic-dev to topic?
01/26 17:08:18*** Mode change: +o stoopkid on #AutoNomic by ChanServ (ChanServ@services.)
01/26 17:10:10*** Topic change by uid137696@gateway/web/irccloud.com/x-candkqtntfukshmk: Home of the AutoNomic block-chain project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
01/26 17:12:09<stoopkid> http://autonomic.now.im/workspace/notes/PG_backup
01/26 17:13:44<stoopkid> works afaict
01/26 17:18:20<stoopkid> do you want old_logs to download as a bin file or render as plain-text in the browser? use "default_type text/plain" in the location directive if the latter
01/26 17:19:34<stoopkid> so what do we do with backup files, put them in a git repo or something?
01/26 17:20:55<stoopkid> seems inefficient because git is file-based right? like it only optimizes with diffs on a per-file basis
01/26 17:21:25<stoopkid> deltas*
01/26 17:23:36<stoopkid> also seems like overkill because mediawiki already keeps track of relevant history internally, and (theoretically) prevents from doing anything that would permanently screw up the wiki
01/26 17:25:30<stoopkid> but, actually that's not true, a) we are modifying the codebase and b) even if we weren't, all our namespace manipulations can render things inaccessible (like the history we might want to recover in the first place), so, would be good to have finer granularity on the restores at the database level
01/26 17:34:33<stoopkid> woops i tried to make a symbolic link to the old_logs directory and accidentally turned the old_logs directory into a symbolic link, do you know how to fix that, or, alternatively can you stick the old logs back up there?
01/26 17:35:22<stoopkid> "ls: cannot access '../old_logs/old_logs': Too many levels of symbolic links" :)
01/26 17:48:26*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
01/26 18:25:56<koo5[m]> plain text
01/26 18:26:34<koo5[m]> >do you want old_logs to download
01/26 18:35:12<koo5[m]> >so what do we do with backup files
01/26 18:35:44<koo5[m]> putting them to ~ is fine, since it is gitted and i copy it over to my machine occasionaly
01/26 18:35:54<koo5[m]> also, that default pg_dump format is sql
01/26 18:39:06<koo5[m]> seems you solved it
01/26 18:39:31* koo5[m] sent a long message: koo5[m]_2018-01-26_23:40:07.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/sLsWmaoMBHFdHJzEKZZOhCUh>
01/26 18:40:56<koo5[m]> time for bed
01/26 18:41:38<koo5[m]> no agda today :|
01/26 18:55:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/26 18:55:48*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/26 20:18:28*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 268 seconds
01/26 20:34:49*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/27 01:13:03*** Join: suiqiu_ (~suiqiublo@116.225.37.108, (unauthenticated): realname)
01/27 01:15:28*** Quit: suiqiublockchain (~suiqiublo@116.225.46.56) left #AutoNomic: Ping timeout: 240 seconds
01/27 07:07:02*** Join: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87, (unauthenticated): 77.139.88.87 - http://webchat.freenode.net)
01/27 08:25:40<editable-koo>hi nilli
01/27 08:35:27<nilli> hi editable-koo
01/27 08:35:51<nilli> got you r mail from yestarday
01/27 08:43:32<nilli> lets get into the details of the roadmap and try to understand the time frame of that
01/27 08:57:05<nilli> I understand the issue of going onto uncharted territories but also know the need to set some limits of time,
01/27 08:59:22<nilli> 1. Finalization of the mathematical foundations * choice of logic * proofs of consistency * proofs of decidability * demonstration of sufficient expressive capacity   * critical piece is demonstration of capacity to constrain computational complexity of on-chain execution * consistent hashing scheme for the authenticated data structures * implementation of all this as a local (i.e. non-networked) client prototype (yes, it turns out t
01/27 09:00:37<nilli> let me paste again the first stage:
01/27 09:00:59<nilli> Finalization of the mathematical foundations
01/27 09:01:12<nilli> * choice of logic
01/27 09:01:23<nilli>  * proofs of consistency
01/27 09:01:37<nilli> * proofs of decidability
01/27 09:02:06<nilli> * demonstration of sufficient expressive capacity
01/27 09:03:07<nilli>  * critical piece is demonstration of capacity to constrain computational complexity of on-chain execution
01/27 09:03:32<nilli>  * consistent hashing scheme for the authenticated data structures
01/27 09:04:55<nilli> * implementation of all this as a local (i.e. non-networked) client prototype (yes, it turns out that we're not finding there to be
01/27 09:11:39<nilli> ok stoopkid koo and HMCa, once any of you is back on the channel lets speak of these points and how we organize the research
01/27 09:12:02<nilli> also communicate it
01/27 11:42:42<nilli> choice of logic : 1. my understanding is that HMCa made that choice from the beginning and is standing by that choice
01/27 11:44:12<nilli> 2. that choice is the foundation of all that come after, thus it cant be different unless everything is chainging
01/27 11:44:50<nilli> 3. that choice of logic was the cause to the split from Ohad
01/27 11:46:51<nilli> proof of consistency : 1. Is that proof not already existed in the literature?
01/27 11:47:41<nilli> 2. if not how come you even begin working based on that logic
01/27 11:49:46<nilli> 3. since I dont know how you prove a consistency of logic, my question is if its possible to do other than by building the program that run on it.
01/27 11:54:55<nilli> prove decidability : 1. to my understanding this is also a choice determined by the choice of logic, meaning once you chose a logic you get the level of decidability that comes with it
01/27 11:58:29<nilli> 2. do you still need to prove it have it been proven by others already, which in my mind is what made that logic be the choice for the construction.
01/27 12:00:07<nilli> 3. same as 3 of consistency
01/27 12:01:22<nilli> demonstration of sufficient expressive capacity: 1. what it means to demonstrate that?
01/27 12:04:22<nilli> 2. this sound more like running a program already, not a matter of a theoretical proof like the first two might be.
01/27 13:24:39<koo5[m]> i think stoop probably meant our implementation rather than the theory
01/27 13:26:26<stoopkid> hey nilli
01/27 13:28:46<stoopkid> yea when i said "choice of logic" we're talking about more finely-grained implementation detail, not a whole different plan
01/27 13:31:02<stoopkid> proofs of consistency & decidability are in the literature, i've gone through them, understood them, etc..
01/27 13:32:18<stoopkid> but we basically have to reprove the results for our implementation, or alternatively just not make any guarantees whatsoever
01/27 13:33:59<stoopkid> and yea, you can prove consistency/decidability without doing "test runs"
01/27 13:35:55<stoopkid> wrt sufficient expressive capacity, yea, that's more about test-runs. i have lots of code in Agda that demonstrate what kinds of mathematical/logical statements is capable of expressing and proving
01/27 13:36:19<stoopkid> it's* capable of
01/27 13:38:59<stoopkid> now, on the other hand...
01/27 13:40:13<stoopkid> while i've gone through proofs of consistency/soundness/decidability of MLTT in the literature, these are not proofs about MLTT-extended-with-authenticated-data-structures
01/27 13:42:19<stoopkid> there's a simpler system than MLTT called "simply typed lambda calc", or STLC for short
01/27 13:43:48<stoopkid> in the literature there are "proofs" for STLC-extended-with-authenticated-data-structures
01/27 13:46:37<stoopkid> this is the "lambda-auth" thing. we're still trying to verify these proofs ourselves, with the idea that this will put us in a position to verify the more sophisticated MLTT version
01/27 13:47:50<stoopkid> "do you still need to prove it have it been proven by others already, which in my mind is what made that logic be the choice for the construction."
01/27 13:49:49<stoopkid> yes, "MLTT-auth" is a new thing. HMC has given me a high-level overview of how its correctness would be demonstrated but i don't know of anywhere that a complete & rigorous proof of MLTT-auth is laid out. i don't even know of anywhere that a complete & rigorous *description* is laid out
01/27 13:55:06<stoopkid> i'm generally of a mindset opposite to "do we still need to prove it if it's already been proven by others"
01/27 13:55:35<stoopkid> first, if we haven't proven it, then do we actually know it was even proven by others in the first place?
01/27 13:56:10<stoopkid> i catch mistakes in academic literature on a fairly regular basis (actually disturbingly frequently considering that i'm not even "in" academia)
01/27 13:56:54<stoopkid> i've caught mistakes in HMC's designs, i've caught mistakes in the very literature we were supposed to be using as reference, and in every code-base we were supposed to use as reference
01/27 13:58:59<stoopkid> and this is just at the level of "is the code even pretending to do the thing we're intending it to be doing", not even touching the issues of whether the specific implementation represents a consistent/sound/decidable/cryptographically-secure system
01/27 14:02:49<nilli> hey stoopkid
01/27 14:03:35<nilli> sound like a lot of work that already been done by you
01/27 14:05:15<stoopkid> well, i do spend a lot of time on it but the point was more that the math & verification is important, don't trust the academics to not have glossed over some details or gotten things wrong :)
01/27 14:06:13<nilli>  which makes it a lot of work
01/27 14:06:18<stoopkid> like i tend to think, not only should we be proving it, we should be presenting the academic results such that they're easily understood by anybody not just academics
01/27 14:08:01<nilli> you do need to organize all that work into some repository of the project
01/27 14:09:08<nilli> so people can start following that and contribute as well
01/27 14:09:09<stoopkid> you can check out various notes in 167.88.171.233/workspace
01/27 14:09:36<stoopkid> basically a staging area while we're refining them to be presentable on the wiki
01/27 14:10:17<stoopkid> http://167.88.171.233/AutoNomic/Resources  has a link to that
01/27 14:12:35<nilli> ok .so that is being done (just trying to understand where we stand)
01/27 14:12:36<stoopkid> for contributions there's the wiki and at some point maybe we'll put these notes into their own git repo for people who might want to add to them without having to use the centralized wiki in order to do so
01/27 14:13:25<stoopkid> we haven't had people knocking down our doors to give us their lambda calc notes though lol
01/27 14:15:52<nilli> people need to know of it
01/27 14:19:30<stoopkid> yea, we don't really advertise it much, every time i think to do it i just end up working on the math instead of doing it :)
01/27 14:22:39<stoopkid> i figure if i try to advertise it i should have the research & plan more well-organized and presentable, and then i start trying to organize it all, and then at some point i realize i'm just back to doing math research again :)
01/27 14:31:29<stoopkid> wrt bitcointalk, if this was gonna be advertised it should probably be outside the context of cryptocurrencies if possible
01/27 14:31:45<stoopkid> like, in a comp sci forum
01/27 14:33:38<nilli> lol, I understand you better then you think. lucky for you doing math is not making things that you then have to carry with you when ever you move .
01/27 14:35:14<stoopkid> this is true, also the materials are pretty cheap :)
01/27 14:43:47<nilli> ok so that is something that we need to work out and have someone else do it. (did redfish took care of these things back then before he left)
01/27 14:43:59<stoopkid> maybe you could help me some with the artistic side of the presentation, the foundations of the system are actually pretty straightforward to understand but i'm only really good at explaining it directly to somebody in a conversation when i can base it off what they already know, but i have trouble structuring the material to like present on the wiki
01/27 14:45:46<stoopkid> redfish was hosting the wiki & also a blog before, but idk if he ever did any advertising in other places (i'm not aware of it anyway)
01/27 15:03:29<nilli> it would be interesting for me to try and construct some presentation
01/27 15:04:15<nilli> but im not sure that the level of my understanding would be enough for that
01/27 15:05:40<stoopkid> you might be surprised
01/27 15:13:01<nilli> on the link to the wiki that you gave me there is a lot of materials  I dont know even where to begin.
01/27 15:18:50<stoopkid> ah sure, i mean i would point you where to start and go over it with you, i have to write up a bit about that first though
01/27 15:30:37*** Quit: suiqiu_ (~suiqiublo@116.225.37.108) left #AutoNomic: Remote host closed the connection
01/27 15:32:04*** Join: suiqiublockchain (~suiqiublo@116.225.37.108, (unauthenticated): realname)
01/27 15:43:59<koo5[m]> What link to the wiki?
01/27 15:44:38<stoopkid> {ip}/AutoNomic/Resources
01/27 15:53:31<stoopkid> nilli: http://167.88.171.233/workspace/notes/CH_universal_quantification.html
01/27 16:15:39<stoopkid> most of the foundations are pretty simple they're just very specific and build on each other
01/27 16:30:31<HMCa> never forget that any tetnet must be done with great care
01/27 16:30:44<HMCa> naive tau could easily become *dangerous*
01/27 16:31:55<HMCa> stoopkid talking to nilli now often sounds much like me talking to stoopkid many yers ago... XD
01/27 16:32:26<HMCa> yes, not much sense in PR, better to just build the damned thing and let it do its' own PR... etc... ;-)
01/27 16:32:50<HMCa> yes, mltt is proven (despite ohad)
01/27 16:34:19<stoopkid> yep and once you get down to the details of it can hardly even be called "proven" as much as just a "basic observation of basic facts"
01/27 16:34:20<HMCa> the consistency *is* decidable.  typecheck *is* decidable.  Ohad *is* confused and states conclusions contrary to fact.
01/27 16:34:32<HMCa> yes
01/27 16:34:33<HMCa> basic
01/27 16:35:03<stoopkid> btw, heya HMC
01/27 16:35:18<HMCa> did I not say it would one day all seem too obvious in rettospect?
01/27 16:35:40<HMCa> *retro
01/27 16:35:45<HMCa> and, heya!
01/27 16:39:01<stoopkid> where ohad's confused is when he says things like "just to get from MLTT to MLTT-TFPL would take infinite time"
01/27 16:39:32*** Quit: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87) left #AutoNomic: Ping timeout: 260 seconds
01/27 16:40:09<stoopkid> under his interpretation of what that means, he's correct, but, it would take infinite time to solve the halting problem and accurately termination-check every program, but, that's what we specifically claimed to not be doing in the first place
01/27 16:40:41<stoopkid> hence the false-positives.., hence why it can actually be a TFPL, ofc...
01/27 16:42:06<stoopkid> s/but, it would/it would/
01/27 16:43:39<stoopkid> where he's not incorrect/confused is on the undecidability of automated theorem proving, that's where we differ in opinion about what's beneficial
01/27 16:43:44<stoopkid> woops she left
01/27 16:44:31<stoopkid> anyway, HMCa glad to have you around, how are things going
01/27 17:45:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 264 seconds
01/27 18:02:09*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/27 18:03:27*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/27 18:05:36*** Join: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87, (unauthenticated): 77.139.88.87 - http://webchat.freenode.net)
01/27 18:06:20*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 240 seconds
01/27 18:07:09<nilli> hey back
01/27 18:07:20*** Join: Oihan (~AndChat68@46-133-192-127.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/27 18:07:33<nilli> well , HMCa I agree about the PR, its not for that its for getting it moving. and make other be able to join. but might be a wrong approach
01/27 18:08:06<stoopkid> wb
01/27 18:08:56<nilli> 01/27 16:32:26<HMCa> yes, not much sense in PR, better to just build the damned thing and let it do its' own PR... etc... ;-)
01/27 18:09:02*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 256 seconds
01/27 18:09:21<nilli> agree but why is it not getting built for so long???!!!!!
01/27 18:09:39<stoopkid> the approach i'm trying to take now is to just write up all the research as we go along and make it presentable so that others could have an entry-point to participation, and also just cause it's good to keep well-organized notes of everything and keep everybody on the same page
01/27 18:09:43<stoopkid> well
01/27 18:11:01<stoopkid> cause i wasn't the right person for the job i had to spend a lot of time to work to become somebody who's barely even not the wrong person for the job
01/27 18:11:21<nilli> HMCa you know what? , we all seem to play along your little game, what ever it is
01/27 18:11:30<stoopkid> i didn't know type theory or that you could even formally verify programs when i first started up with tau
01/27 18:11:43<stoopkid> or cryptography let alone how to prove things in these fields
01/27 18:11:55<nilli> we all seem for some reason to believe that you know what you are talking about
01/27 18:12:13<stoopkid> nor was i that great a coder i was just good at abstract algebra and so can work my way into any field with enough effort
01/27 18:13:04<stoopkid> plus i've got personal issues, didn't have money til recently and then when i did get money it was sucking up all my time away from the project (until much more recently :)
01/27 18:16:36<stoopkid> so, the amount of time it's taking is not really representative of what i think it probably would take if somebody who already knew all these things & was an experienced (and not out-of-practice) coder was doing it
01/27 18:19:09<nilli> stoopkid, I was not refering to you regarding the time it takes I was talking to HMCa. its talking all that time since he decided to try do it in some way that is not working so well
01/27 18:20:23<nilli> I really tried to think of ways to make it easier on you , since I wanted to see this happeneing
01/27 18:24:02<nilli> at this point frankly I pretty much made all possible wrong turns, so there in nothing else I can damage, for myself or anyone around in this project.
01/27 18:24:23<stoopkid> well, HMC seems to be under some constraint that he can't deliver the product himself or even provide the description down to the level of implementation detail (which is really not unusual, though maybe the reasons for why it's happening in this project are unusual, i can't say for sure i know all the reasons) but tbh i've never understood why he's spent so much time going over it with me rather than more
01/27 18:24:24<stoopkid> actively seeking out experienced researchers & developers
01/27 18:25:52<stoopkid> i don't really know other researchers & developers, like i said, "random person off the street" who just happens to be a math & education & decentralization enthusiast, and the ones i talk to i don't have a lot of pull with (again cause, "random person off the street")
01/27 18:26:31<stoopkid> so i haven't been able to get much more support from professional researchers than just "sounds cool, good luck with it"
01/27 18:27:00<stoopkid> not sure what you mean wrt "made all possible wrong turns"
01/27 18:28:32<stoopkid> not sure how you've damaged anything in this situation, besides for maybe upsetting ohad
01/27 18:29:34<nilli> I understand to some degree why HMCa is not writing the code and it makes sense to some degree, but not to the extent that it have been taken
01/27 18:30:28* stoopkid shrugs
01/27 18:30:32<stoopkid> i maybe tend to agree, but
01/27 18:31:48<nilli> I did my best to play along. anyway I dont think that there is anything else that I can do other then send you guys the money according to what you come to agree.
01/27 18:31:50<stoopkid> the code's not there, so, i don't question it so much anymore i just figure i gotta make the code be there one way or another
01/27 18:32:45<nilli> not going to try and contribute anything else
01/27 18:34:19<nilli> stoopkid, do you want to keep working on the project?
01/27 18:34:42<stoopkid> sure, np. we're not expecting that you have to participate in any kind of way other than however you would want to
01/27 18:34:48<stoopkid> well
01/27 18:36:07<stoopkid> i hope i've made it rather obvious at this point that i favor working on autonomic over everything else like a monkey favors crack over food
01/27 18:38:08<stoopkid> i would never stop working on this project, for any reason
01/27 18:40:15<nilli> so keep working on it, and figure out with HMCa and koo what do , just send me mail for every payment due date once you get there
01/27 18:44:30<stoopkid> well, we've got it rolling along now, i mean, what would you like to see from us
01/27 18:46:02<nilli> I dont need to see anything from you , its HMCa who might need to see anything. its all between him and you
01/27 18:47:32<stoopkid> not sure what you mean, we'll ofc be passing everything we build over to HMC to verify / point us in the right direction
01/27 18:49:46<stoopkid> i feel i've maybe misconstrued something about the situation somewhere? i certainly don't feel as though this is some kind of mess with the devs/designers not being on the same page
01/27 18:53:39<stoopkid> it took a long time before because i was new to the stuff and really didn't understand a lot of what HMC was trying to tell us to do, and i had to do a whole lot of independent research in order to understand the theory behind it, but now that i've done that i now independently understand & agree with at least 80% of HMC's design, and know enough to know that he's not wrong about another solid 15% of it, and the
              <stoopkid> questions are moving increasingly further from theory and into implementation detail
01/27 18:55:20<nilli> stoopkid, its very simple, its all between you and HMC, I have no side in it, I made a small mistake thinking to help get it in the right direction faster. but it was not something I can do.
01/27 18:57:51<stoopkid> well, i'm not so sure that's the case but like i said we're not expecting you to participate in any kind of way besides however you want to, and..
              <nilli> Also at this point I dont need to justify anything to Ohad since anyway he see that as funds being used against him and his project
01/27 18:59:02<stoopkid> "its all between you and HMC" ultimately i don't look at it that way, this is between everybody and what they want for their future
01/27 18:59:12<nilli> also trying to explain that to his investors seem to be like talking to the walls, noone seem to get it anyway
01/27 19:00:17<nilli> basically where ever I turn its better to just shut up and let all to their work
01/27 19:02:13<stoopkid> well, not here, the topic literally says "Please ask anything"
01/27 19:02:16<nilli> so that is  what it is: just make your agreement with HMCa and send me a mail whenever its time to send you the coins, how much and to what address
01/27 19:04:56<stoopkid> well, i would kinda rather address the issue of people feeling like they don't have meaningful ways to participate, at least partly because that's one of the sources of the problem of it taking so long in the first place
01/27 19:10:40<stoopkid> but, i mean, it's whatever you wanna do, if you just want us to mail you periodically when we feel we've completed some milestones we can do that, not sure how koo would feel about quitting his dayjob to work on the project if it seems like you have reservations about the plan though, but, luckily he hasn't finalized anything there
01/27 19:17:50<stoopkid> there *are* things you can help with "well , HMCa I agree about the PR, its not for that its for getting it moving. and make other be able to join. but might be a wrong approach", i'm on the same page with you there, and i *don't* think it's the wrong approach
01/27 19:18:38<stoopkid> afaict for efficiency's sake it's necessarily the right approach, as long as doing the PR doesn't mean "not doing the code & research"
01/27 19:19:52<stoopkid> i have to research things so i can verify things, i have to explain things to keep everybody on the same page as well as to get feedback, i have to take notes on all this in order to keep track of it
01/27 19:20:16<stoopkid> those notes should be public but i've just spent more time making them than i have publicizing them, or refining them to be presentable
01/27 19:20:35<stoopkid> those notes can lead directly into code, along with proofs of the correctness of the code
01/27 19:21:35<stoopkid> along with explanations of it all
01/27 19:22:57<stoopkid> so, that can be both the PR and the actual work, and that's one thing in particular you could help me out with
01/27 19:26:38<stoopkid> https://proofwiki.org/wiki/Main_Page
01/27 19:28:00<nilli> Stoopkid I need to go now, talk with koo and see what you guys need in order to feel that you can work on the project. see with HMCa that he agree with that, and I will follow that.
01/27 19:31:02<stoopkid> hrm, i still feel like i've misconstrued something if there's question of whether i think i have what i need in order to feel that i can work on the project, and afaict HMC "agrees" with what i just described, i mean, it's what we were sort of trying to do on the previous wiki
01/27 19:34:09<nilli> "need" in terms of spacing the payments per milestone that is in reach for that time frame
01/27 19:35:24<stoopkid> ah, sure, well, alright then i'll talk it over with koo & HMC and we'll figure it out
01/27 19:36:30<nilli> (in term of the value of the coins, all the theory is based on the fact that the investors will realize what you do but boy... it seems that this world is a few year behind ... and most people are just way to stupid about money
01/27 19:37:48<stoopkid> nah i think you're maybe reaching the wrong conclusions based on these *initial* reactions
01/27 19:38:06<stoopkid> people's default is "no"
01/27 19:39:09<stoopkid> takes people time to think something over and say "ok maybe", and then a lot of people might not even do that (wrt the tech or theory) they just wait to see what the market does with the idea
01/27 19:41:06<nilli> ill just sit in the dark for a while :) (well not really sit and not really dark , only for them it  may seem that way)
01/27 19:41:52<nilli> you guys keep up the work. all good eventually.
01/27 19:42:36<stoopkid> alright, i'll shoot you message to let you know what we discuss, catch ya later then
01/27 19:44:30*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/27 19:53:47*** Quit: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87) left #AutoNomic: Ping timeout: 260 seconds
01/27 20:15:08<daemoz_> Hey all.
01/27 20:15:59<stoopkid> hey daemoz_
01/27 20:29:38*** Nick change: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) is now known as daemoz
01/28 00:33:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Read error: Connection reset by peer
01/28 00:34:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/28 06:44:26*** Quit: Oihan (~AndChat68@46-133-192-127.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 256 seconds
01/28 06:44:44*** Join: Oihan (~AndChat68@46-133-192-127.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/28 11:03:00* koo5[m] sent a long message: koo5[m]_2018-01-28_16:03:37.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/GeVtfnsWlVfOpfOccyDZwUMi>
01/28 11:03:15<koo5[m]> Just still dunno how it used
01/28 11:04:12<stoopkid> do you see how "implies False" represents negation?
01/28 11:09:20<stoopkid> it's maybe easier to see it if you interpret "False" as "there exists a contradiction"
01/28 11:11:10<stoopkid> so, the negation of a statement A is such that if A and its negation are both true then this is a contradiction
01/28 11:11:38<stoopkid> that's pretty much what the definition of logical negation is
01/28 11:12:14<stoopkid> so, what would be contradictory with the statement "A", what about "A implies a contradiction"
01/28 11:12:24<stoopkid> or, "A implies False"
01/28 11:15:05<stoopkid> now, if you have an implication "A -> B", and A is false, then what does the truth table for implication in propositional logic say about this?
01/28 11:15:56<stoopkid> if A is false then A -> B is true, this is basically propositional logic's version of the principle of explosion, which is what that definition of False essentially is
01/28 11:18:08<stoopkid> so, you use that for skipping impossible cases in your function definitions
01/28 11:18:19<stoopkid> for the most part; that's its main utility
01/28 11:30:48<stoopkid> check out the function "x+y==0-implies-x==0&y==0"
01/28 11:31:14<stoopkid> and also "x+y==y-implies-x==0"
01/28 11:33:05<stoopkid> also "Nat-eq-implies-Eq"
01/28 11:33:10<stoopkid> also "process-of-elimination"
01/28 11:38:53<stoopkid> i think process-of-elimination makes it very clear what the role of the False/omega thing is in all this
01/28 11:41:40<stoopkid> and, actually, its type pretty much defines what that role is:
01/28 11:42:39<stoopkid> "(A B : Set) -> A OR B -> not(A) -> B"
01/28 11:43:37<stoopkid> a type is basically like an OR over all its cases, like case1 OR {rest of cases}
01/28 11:44:47<stoopkid> well, sort of, more like a "Maybe Or", since it might be empty
01/28 11:47:15<stoopkid> but when you case-match over a type, and one of its cases is impossible, then, you get to "eliminate"/skip that case
01/28 11:49:01<stoopkid> which can sort of be interpreted as saying, "by process of elimination, if it's not case1, it must be one of the {rest of cases} and therefore it's sufficient to define the function just on those cases and skip case1"
01/28 11:49:28<stoopkid> there's several interpretations that all say more or less the same thing
01/28 11:51:30<stoopkid> whether this is actually philosophically well-motivated or is just kind of a "logical hack" is certainly debatable, but in Agda and "standard" type theory frameworks under the CH correspondence it's a critical piece for making things work
01/28 11:52:29<stoopkid> i have to sort of stretch my imagine in order to interpret the principle of explosion as being constructively/intuitionistically/"harmonically" justified
01/28 11:53:28<stoopkid> or just even 'logically' justified at all, beyond just a pragmatic "it 'works' and i don't get the wrong answers from it"
01/28 11:56:18<stoopkid> in order for it to all be "coherent" to me i have to interpret type-theory product as some kind of mix between set-theoretic intersection and set-theoretic product
01/28 11:56:43<stoopkid> s/set-theoretic product/cartesian product/
01/28 11:58:04<stoopkid> the type-theory product of two statements A and B under this interpretation would be the intersection of all "worlds" (models) that satisfy A and also satisfy B
01/28 11:59:48<stoopkid> so, it behaves as both an intersection and cartesian product, the cartesian product A * B can be extracted from the intersection of the worlds where A is satisfied and the worlds where B is satisfied
01/28 12:01:20<stoopkid> if i have a world where both A and B are satisfied, this is certainly in the intersection of worlds where A is satisfied and worlds where B is satisfied, and then i can provide a pair of a demonstration that A is satisfied in this world and a demonstration that B is satisfied in this world, and that gives me an element of the cartesian product A * B
01/28 12:02:32<stoopkid> so, given a statement A, the set of worlds where the statement "not(A)" is satisfied is obviously the complement of the set of worlds where A is satisfied
01/28 12:02:48<stoopkid> so A & not(A) corresponds to an empty set of worlds, the intersection of any set and its complement is empty
01/28 12:03:35<stoopkid> *but*, if you were able to somehow inhabit this intersection of worlds satisfying A and worlds satisfying not(A), then you would be able to give a demonstration that A is satisfied in that world and a demonstration that not(A) is satisfied in that world
01/28 12:03:49<stoopkid> so, back to "False"
01/28 12:04:25<stoopkid> for the principle of explosion to follow from this interpretation that i've laid out so far, "False" would be interpreted as the type-theory product of every statement in the logic
01/28 12:05:21<stoopkid> it corresponds to the set of worlds where every statement is satisfied, and thus every statement would be derivable from it
01/28 12:06:25<stoopkid> well, actually this only sort of corresponds to a sort of weak form of the principle of explosion
01/28 12:06:49<stoopkid> the strong/standard form is that from *any* contradiction, you can derive *everything* else
01/28 12:07:12<stoopkid> actually wait i'm confusing myself, they become equivalent when you interpret negation as "implies False"
01/28 12:07:42<stoopkid> but there's room to question whether *that's* justified as well, or, at least, how to more properly justify it
01/28 12:09:33<stoopkid> hopefully that all makes sense, i tend to think of this stuff as fairly common-sense / intuitive, but, it's not like a cut-and-dry "here's the one true answer about it", any explanation of this stuff that's actually gonna "explain" anything is gonna be a fairly abstract discussion of philosophy
01/28 12:10:31<stoopkid> the alternative is just saying "ok, implies False is negation, and contradictions in assumptions can be used for skipping cases and doing process of elimination"
01/28 12:11:46<stoopkid> and basically treating it like the imaginary numbers (prior to understanding the deep theory behind imaginary numbers), it's just a symbol manipulation tool that seems to magically "work" somehow
01/28 12:13:04<stoopkid> btw if anybody's reading this and has any deeper insight than this into the motivations behind these definitions of False & negation & the principle of explosion, please let me know, this is what i gather about it so far
01/28 12:28:25<stoopkid> so, i think we can kind of side-step the problem of having to come up with a full solution for doing computational-complexity bounding of MLTT within MLTT, while still maintaining essentially full generality as well as room to expand into an eventual full/non-hack solution to the problem
01/28 12:29:24<stoopkid> so, consider this block-validity check
01/28 12:31:17<stoopkid> it has to be a problem hard enough to solve to constitute a proof of work, but not so difficult that it takes way longer than "necessary", and certainly can't be an undecidable question or such a difficult problem that people simply can't find a solution, or else this stalls the chain
01/28 12:34:25<stoopkid> now, we sort of have two options in how to do a block-validity check, 1) use types to characterize what constitutes a valid "next block", so that to get a block onto the chain you provide the block-data along with a proof that it satisfies the block-validity criteria, and use the type-checker to accept/reject blocks on this basis; 2) use functions that run on the block data and output true if it satisfies the
              <stoopkid> criteria and false otherwise, and accept/reject blocks on this basis
01/28 12:35:47<stoopkid> h/o brb 5-10 mins
01/28 12:57:46<stoopkid> so, if we use a function to do it, how do we constrain the complexity of this function, if MLTT can't differentiate functions on the basis of anything other than extensional inequality?
01/28 12:59:00<stoopkid> so, using a function to do it seems somewhat problematic in MLTT
01/28 12:59:13<stoopkid> now, let's note something else, just to note it
01/28 13:01:33<stoopkid> in a dependent type system, (1) can be used to simulate (2), because functions may be evaluated during type-checking, so, in some sense we really only need to consider the case of (1) and then examine its implementation detail
01/28 13:02:42<stoopkid> first thing to see here is because functions can be evaluated during type-checking, the same problem that happens in the case of using just functions also happens in the case of using "just types"
01/28 13:07:27<stoopkid> now, while MLTT can't prove things about the complexity of its functions directly, what it can prove is results about upper bounds on complexity of solving problems, based on proofs about complexity in *models* of computation
01/28 13:11:18<stoopkid> this doesn't fully solve the problem, because in order to run the modeled computations they need to be interpreted by MLTT functions, but we can make a bit of headway here by being able to assign at least some kind of complexity measure to things
01/28 13:14:03<stoopkid> if we consider types as problems, we can consider what is the computational complexity of solving those problems, in our models of computation
01/28 13:19:57*** Quit: Oihan (~AndChat68@46-133-192-127.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 240 seconds
01/28 13:21:08<stoopkid> now, if we consider the type-system to be correct, then our results about computational complexity in our models of computation will be correct, so, if we have a type that's demonstrated to encode the problem of boolean satisfiability, and we have proofs in our models of computation that boolean-satisfiability is NP-complete, then we can say that the underlying complexity of the type that encodes the set of
01/28 13:21:09<stoopkid> boolean satisfiability problems along with their solutions, is also NP-complete
01/28 13:21:23*** Join: Oihan (~AndChat68@46-133-192-127.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/28 13:23:48<stoopkid> we can do the same thing with functions that are demonstrated to represent verifiers for a problem (decision functions that verify whether proposed solutions are actually solutions)
01/28 13:28:39<stoopkid> but with types we potentially have more flexibility to constrain complexity because there's more things to work with besides "just functions", like, if A and B are problems of known complexity then A * B has known complexity
01/28 13:33:08<stoopkid> the complexity of type-checking a system of equalities is going to be basically linear in the complexity of the proofs provided, and if we can defer the complexity into the proofs provided, that's a good step
01/28 13:34:54<stoopkid> because clients can reject proofs that take too long to type-check and wait for shorter proofs, and the complexity is not inherent to the type-checking itself
01/28 13:38:36<stoopkid> so, if this could be done for the block-verify constraints, then the complexity of block-verification could be deferred to the size of the proofs provided
01/28 13:41:49<stoopkid> the clients would be theoretically incentivized to find the proofs that type-check the fastest, and due to the assumptions of the complexity of these problems in models of computation, along with some way to constrain type-checking complexity in a correct-by-construction way, we would be able to assume that the network will bound its own complexity
01/28 13:44:38<stoopkid> that's still kinda hackish, and still relies on some undemonstrated assumptions in order to work, but, it's a start
01/28 13:55:03*** Quit: Oihan (~AndChat68@46-133-192-127.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 256 seconds
01/28 13:55:31*** Join: Oihan (~AndChat68@46-133-192-127.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/28 14:30:51<koo5[m]> Hmm had disabled notifications herr
01/28 14:49:31<HMCa> stoopkid: this gets "tricky"...
01/28 14:50:02<HMCa> the "is blockverify type or function" thing
01/28 14:51:42<koo5[m]> Wheres "x+y==0-implies-x==0&y==0"?
01/28 14:51:48<koo5[m]> Hi hmc
01/28 14:52:29<HMCa> remember that at the very exact boundary between the i/o ring and the chain logic there is a fixed signature... but...
01/28 14:52:34<HMCa> koo5[m]: heya
01/28 14:52:39<stoopkid> koo5[m]: subst.lagda
01/28 14:52:50<stoopkid> hey HMC
01/28 14:53:31<stoopkid> koo5[m]: look at "process-of-elimination" though
01/28 14:53:39<stoopkid> its more enlightening
01/28 14:54:45<stoopkid> HMCa: well, "fixed signature" is a pretty flexible thing in a dependently typed language
01/28 14:55:09<stoopkid> a "fixed" signature in MLTT can incorporate nearly arbitrary other signatures
01/28 14:57:48<HMCa> right, hence the "but"... and especially true in our case where we have a sort of reflective mutability.. a "repl on chain" in a sense...
01/28 14:58:52<HMCa> this goes back to the old question of "does core call chain or does chain call core" and why the answer is kinda "both"...
01/28 14:59:18<HMCa> there's a "partial theory" there is that fixed signature...
01/28 14:59:22<HMCa> *in
01/28 15:00:31<HMCa> some hole parts/partials get filled in by core, some by chain logic (which is which is set out by the "fixed-ness" of the signature...)
01/28 15:02:40<HMCa> there's a fixed set of "guard" control flow and calls in both directions in the "i/o ring", and then a "potential loop" between the two sides in message processing/handling
01/28 15:03:18<HMCa> brb
01/28 15:31:03*** Quit: suiqiublockchain (~suiqiublo@116.225.37.108) left #AutoNomic: Read error: Connection reset by peer
01/28 15:32:05*** Join: suiqiublockchain (~suiqiublo@116.225.37.108, (unauthenticated): realname)
01/28 17:01:23*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/28 18:40:31*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
01/28 19:03:05*** Quit: Oihan (~AndChat68@46-133-192-127.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 248 seconds
01/28 19:59:58*** Join: Gawajn (2e54c8dc@gateway/web/freenode/ip.46.84.200.220, (unauthenticated): p2E54C8DC.dip0.t-ipconnect.de/46.84.200.220)
01/28 20:08:18*** Quit: suiqiublockchain (~suiqiublo@116.225.37.108) left #AutoNomic: Ping timeout: 256 seconds
01/28 21:01:45*** Quit: Gawajn (2e54c8dc@gateway/web/freenode/ip.46.84.200.220) left #AutoNomic: Quit: Page closed
01/29 00:35:29*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/29 00:35:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/29 01:26:27*** Join: suiqiublockchain (~suiqiublo@116.225.37.108, (unauthenticated): realname)
01/29 01:27:50*** Quit: suiqiublockchain (~suiqiublo@116.225.37.108) left #AutoNomic: Client Quit
01/29 01:28:07*** Join: suiqiublockchain (~suiqiublo@116.225.37.108, (unauthenticated): realname)
01/29 05:01:09*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/29 05:01:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/29 07:40:44*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/29 07:56:56*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 248 seconds
01/29 08:09:17*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/29 09:02:44*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 264 seconds
01/29 09:07:42*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/29 09:29:49*** Join: kook (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/29 09:33:07*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 276 seconds
01/29 11:43:31*** Quit: kook (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 240 seconds
01/29 12:58:14*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
01/29 14:06:30<koo5[m]> our subst.lagda
01/29 14:06:31<koo5[m]> md is breaking chrome renderer and crashing firefox
01/29 14:10:43<koo5[m]> Set (i ⊔ j) where
01/29 14:11:06<koo5[m]> Is ⊔ defined somewhere?
01/29 15:53:51<stoopkid> koo5[m]: Agda.Primitive
01/29 15:54:27<stoopkid> it's \lub for least-upper-bound aka "max"
01/29 15:54:53<stoopkid> sorry been with a security tech all day trying to get our alarm fixed
01/29 15:55:01*** Join: kook (~sirdancea@85.70.152.236, sirdancealot: koo5)
01/29 15:56:45*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 268 seconds
01/29 16:17:49<koo5[m]> Ah thx
01/29 16:18:27<koo5[m]> Cool, i want a place worth alarm-ing
01/29 16:19:42*** Quit: kook (~sirdancea@85.70.152.236) left #AutoNomic: Ping timeout: 256 seconds
01/29 16:41:53<koo5[m]> process-of-elimination (inl a) ¬A
01/29 16:41:56<koo5[m]> Where did we get a?
01/29 16:44:37<koo5[m]> process-of-elimination (inl a) ¬A = ...
01/29 16:45:02<stoopkid> case-matching on A OR B
01/29 16:45:05<stoopkid> this is the A case
01/29 16:45:46<stoopkid> more precisely, the case for the constructor 'inl'
01/29 16:45:59<stoopkid> which has type A -> A OR B
01/29 16:46:12<stoopkid> so when we case match we have (inl a) where a : A
01/29 16:48:29<stoopkid> does that make sense?
01/29 17:05:40<koo5[m]> Nope, does a appear in any declaration literally?
01/29 17:05:59<koo5[m]> Is it just a random letter?
01/29 17:06:36<stoopkid> it's a variable
01/29 17:07:08<stoopkid> like if i do "id : Nat -> Nat; id x = x", where does x come from? it's an input variable
01/29 17:07:33<stoopkid> if i case-match on Nat and do:
01/29 17:07:36<stoopkid> id z = z
01/29 17:07:40<stoopkid> id (suc n) = (suc n)
01/29 17:08:03<stoopkid> s/z/zero/
01/29 17:08:47<koo5[m]> Alright, so, inl : A -> A ∨ B
01/29 17:08:48<koo5[m]> inr : B -> A ∨ B
01/29 17:09:03<koo5[m]> Its somehow a hidden parameter of inl?
01/29 17:09:15<stoopkid> "hidden"?
01/29 17:09:36<koo5[m]> I dont know
01/29 17:09:51<koo5[m]> Does inl have members?
01/29 17:10:10<stoopkid> look at it's type, "A -> "
01/29 17:10:22<stoopkid> it's a function, taking an object of type A, and returning an object of type A OR B
01/29 17:10:51<stoopkid> when you case match on A OR B, each of your cases is gonna have type A OR B, right?
01/29 17:10:57<stoopkid> does "inl" have type A OR B?
01/29 17:12:03<stoopkid> no but "inl a" where "a" is some variable of type A does
01/29 17:13:49<koo5[m]> Ah, do its a function taking A, how does this function use B if it doesnt take it though?
01/29 17:14:26<stoopkid> it doesn't, because "using B" would be the other case of the OR, right?
01/29 17:15:23<koo5[m]> Well, what the shit
01/29 17:15:59<stoopkid> inl = if you give me an A, then i give you back an A OR B
01/29 17:16:07<stoopkid> inr = if you give me a B, then i give you back an A OR B
01/29 17:18:03<stoopkid> if i want to prove to you that i have "a dog OR a cat", then, if i give you a dog, that should prove it
01/29 17:18:06<stoopkid> that's the inl case
01/29 17:18:15<stoopkid> but also if i give you a cat, that should prove it too
01/29 17:18:20<stoopkid> the inr case
01/29 17:19:00<stoopkid> i don't have to use *both* a cat and a dog at any point
01/29 17:19:47<stoopkid> there's two cases to consider, either i give you a dog, and we don't have to talk about the cat, or i give you a cat, and we don't have to talk about the dog
01/29 17:20:16<stoopkid> so if i want to case-match over "a dog OR a cat" then i'd get
01/29 17:20:21<stoopkid> (inl some_dog)
01/29 17:20:31<stoopkid> (inr some_cat)
01/29 17:24:00<stoopkid> idk, does that make sense? this is literally absolutely no different than the pattern-matching stuff in the subst functions etc...
01/29 17:24:21<stoopkid> (App t s), where did "t" and "s" come from? what's the type-signature for the App constructor?
01/29 17:24:42<stoopkid> what's our cases for matching over LambdaTerms?
01/29 17:25:10<stoopkid> what's our cases for matching over A ∨ B? it's all the same thing
01/29 18:29:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/29 18:38:00*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
01/29 18:40:41<editable-koo>ok, it makes sense
01/29 18:42:30-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/29 18:42:36*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/29 18:50:28*** Netmerge: *.net *.split, split 7 days 8 hours 5 minutes 27 seconds ago (Use /WL to see who's still missing)
01/29 18:57:00<stoopkid> editable-koo: "process-of-elimination" or just the case-matching thing?
01/29 19:00:03<koo5[m]> everything
01/29 19:01:32<stoopkid> so you see the whole thing with the False type and its constructor and the relationship to the principle of explosion and what you actually use that for in the system now?
01/29 19:01:47<stoopkid> s/constructor/eliminator/omega/
01/29 19:02:51<stoopkid> i.e. skipping impossible/contradictory cases
01/29 19:03:06<koo5[m]> no, still not sure about the principle of explosion, does the explosuon rule have a special meaning for agda?
01/29 19:04:13<stoopkid> hrm, idk, depends what you mean by "special meaning" maybe
01/29 19:04:56<koo5[m]> i dont know, if it doesnt, then i still dont see the point
01/29 19:05:35<stoopkid> do you see how you use it to skip impossible/contradictory cases in case-matchings?
01/29 19:06:12<koo5[m]> would the "all instances of all types" stand on the side of hypothetical inputs to "process-of-elimination (inl a) ¬A"?
01/29 19:07:55<koo5[m]> i guess that didnt make sense
01/29 19:08:32<stoopkid> you need to produce an object of type B as the return value but you don't have one available, until you apply the principle of explosion to the contradiction you're able to derive from the assumptions "(inl a)" and "¬A"
01/29 19:09:06<stoopkid> derive a contradiction, i.e. False by applying ¬A to a
01/29 19:09:35<koo5[m]> where do i need to produce a B?
01/29 19:10:01<stoopkid> are you in tmux?
01/29 19:10:17<koo5[m]> yea in "subst"
01/29 19:10:42<koo5[m]> ah
01/29 19:11:01<stoopkid> so first, do you see what "process-of-elimination" is saying as a proposition?
01/29 19:11:53<koo5[m]> that if A V B is proven and A is false, then B is proven
01/29 19:12:13<stoopkid> right, process of elimination
01/29 19:12:28<stoopkid> it's either A or its B, and it's not A, therefore it's B
01/29 19:15:50<koo5[m]> the second definition of process-of-elimination catches both A V B and B V A, because theres a rule that V is commutative or something, right?
01/29 19:16:33<stoopkid> second definition? you mean the "inr b" case of that one definition of it?
01/29 19:16:41<koo5[m]> yeah
01/29 19:18:16<stoopkid> no, it doesn't catch both, but you can prove commutativity of V and then from there prove a version of process-of-elimination that works for the B V A version
01/29 19:18:48<stoopkid> (inr b) : A V B
01/29 19:21:19<stoopkid> try proving commutativity of V
01/29 19:21:43<koo5[m]> why didnt you add a case for (inl a) not B?
01/29 19:22:35<stoopkid> because the proposition is if "if A V B and *not A*, then B"
01/29 19:23:02<koo5[m]> ah
01/29 19:38:49<tigertigertiger[> hey there, anybody here? stoop?
01/29 19:45:22<stoopkid> tigertigertiger[: howdy
01/29 19:45:28<koo5[m]> hi
01/29 19:46:43<tigertigertiger[> just doing my monthly checkup, how is the project going? scrolled a bit in the chat, seems like there was some drama :D
01/29 19:48:29<tigertigertiger[> btw why is ohad giving 0.5% of agoras to hmc when he reveals his identity
01/29 19:48:36<tigertigertiger[> hahaha
01/29 19:50:02<koo5[m]> mm, fellow matrix dweller
01/29 19:50:12<stoopkid> going alright, i'm finally back to working on it full-time and looks like koo might be soon as well
01/29 19:53:10<tigertigertiger[> that sounds very good
01/29 19:53:49<tigertigertiger[> seems you got some funding which is nice
01/29 19:54:35<tigertigertiger[> is hmc still advisor only?
01/29 19:55:22<stoopkid> yep
01/29 20:10:54<tigertigertiger[> man i will never get this. So much potential and all the guiding he could probably coded it alone in this time :D
01/29 20:11:06<tigertigertiger[> hes so mysterious
01/29 20:13:19<stoopkid> probably, or i presume so anyway
01/29 20:15:41<tigertigertiger[> he has probably some dark secrets
01/29 20:15:46<tigertigertiger[> just joking
01/29 20:22:13<tigertigertiger[> btw i liked the old txt chatlog more, you could just search for keywords. cant find this on this super slow matrix app
01/29 20:22:35<stoopkid> ah check topic
01/29 20:24:14*** Join: tigertigertiger2 (1f138280@gateway/web/freenode/ip.31.19.130.128, (unauthenticated): 31.19.130.128 - http://webchat.freenode.net)
01/29 20:24:52<tigertigertiger2> aaaah its finally working again. didnt even bothering to try it anymore
              <tigertigertiger2> nice
01/29 20:36:19<tigertigertiger2> okay well, i guess i will come around next month :D
01/29 20:36:35<tigertigertiger2> #slowestprojectever
01/29 20:36:41<tigertigertiger2> ;)
01/29 20:36:42<stoopkid> hehe alright cya around :)
01/29 20:37:17*** Quit: tigertigertiger2 (1f138280@gateway/web/freenode/ip.31.19.130.128) left #AutoNomic: Quit: Page closed
01/29 20:44:46<stoopkid> koo5[m]: btw you can just type "\or" for that symbol
01/29 20:52:30<koo5[m]> if you have something like suc-inj : (n m : Nat) -> (suc n) == (suc m) -> n == m, are there some guidelines for how to read it? some parentheses we could throw around to make it not seem like line noise?
01/29 20:53:25<koo5[m]> i just see chunks of something with -> and == between
01/29 20:54:39<stoopkid> you should instead see "->"s with chunks of something between
01/29 20:59:49*** Join: suiqiu_ (~suiqiublo@116.225.37.108, (unauthenticated): realname)
01/29 21:00:03<koo5[m]> predecessor of z is z?
01/29 21:01:31<koo5[m]> night
01/29 21:02:01*** Quit: suiqiublockchain (~suiqiublo@116.225.37.108) left #AutoNomic: Ping timeout: 240 seconds
01/29 21:06:54*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
01/29 21:12:49<stoopkid> koo5[m]: well
01/29 21:14:16<stoopkid> z doesn't have a predecessor, nothing comes before z in the Nats, but functions are total so you have to return something there
01/29 21:14:44<stoopkid> this function is really only there to help prove that successor is an injective function
01/29 21:17:24<stoopkid> if it was pred : Int -> Int we'd put pred z = -1
01/29 21:18:41<stoopkid> a better version of pred might be:
01/29 21:19:42<stoopkid> pred : (x : Nat) -> x =/= 0 -> Nat
01/29 21:20:20<stoopkid> pred z p = omega (p refl)
01/29 21:20:38<stoopkid> pred (suc n) p = n
01/30 01:13:26*** Join: suiqiu__ (~suiqiublo@101.83.188.232, (unauthenticated): realname)
01/30 01:14:19*** Quit: suiqiu_ (~suiqiublo@116.225.37.108) left #AutoNomic: Read error: Connection reset by peer
01/30 02:08:39*** Quit: cantora (sid147800@gateway/web/irccloud.com/x-tzfzekffjueirvar) left #AutoNomic: Ping timeout: 265 seconds
01/30 02:09:06*** Join: cantora (sid147800@gateway/web/irccloud.com/x-htapxontsprggqbk, cantora: cantora)
01/30 03:30:52<koo5[m]> p?
01/30 03:32:37<stoopkid> you can pick a different variable if you like :P
01/30 03:33:28<koo5[m]> What goes in it?
01/30 03:33:42<stoopkid> proof of x =/= 0
01/30 03:34:33<koo5[m]> Ah
01/30 03:44:24-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/30 03:44:32*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/30 03:59:42<koo5[m]> did you break subst.lagda.md or i did?
01/30 04:00:36<stoopkid> you just did with your (lack of) indentation when you were messing around with 'proof' up there, it tells you in the buffer underneath :P
01/30 04:02:15<stoopkid> many of the proofs in there are incomplete though in case you're trying to compile rather than "load" (C-c C-l) it
01/30 04:04:31<koo5[m]> i think theres a stray "proof" there?
01/30 04:05:59<stoopkid> that's what i mean by "incomplete proofs", that puts the term "proof" into scope of the function so you don't get a "not in scope" error and you can partially type-check everything as you go along
01/30 04:07:33<koo5[m]> alright
01/30 04:07:37<stoopkid> nice
01/30 04:07:50<koo5[m]> gotta run
01/30 04:08:07<stoopkid> catch ya later
01/30 04:21:32*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
01/30 04:40:02<koo5[m]> Did i get it right?
01/30 04:40:34<stoopkid> yep
01/30 05:58:02-SaslServ- koom!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
01/30 05:58:08*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/30 08:05:29*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 248 seconds
01/30 08:06:18-SaslServ- koom!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
01/30 08:06:24*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
01/30 08:07:30<koom> fucked up hah
01/30 08:07:34<koom> gzipped /etc
01/30 08:29:51<koom> You Have Been Blacklisted - Contact Support
01/30 08:29:55<koom> getting better and better
01/30 08:31:51<koom> ill try later from home
01/30 08:31:59<koom> we're probably due for a reinstall
01/30 08:32:26<koom> unless i can magically rescue it from the admin interface
01/30 08:40:17<koom> then i went and gzipped html/wiki too?
01/30 08:40:21<koom> what the fucking shit
01/30 08:41:20<koom> alright at least didnt delete the originals this tim
01/30 08:41:22<koom> e
01/30 10:14:38*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 240 seconds
01/30 10:42:19*** Join: Oihan (~AndChat68@46-133-218-186.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/30 10:42:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/30 10:43:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/30 13:16:55*** Quit: Oihan (~AndChat68@46-133-218-186.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 268 seconds
01/30 13:17:26*** Join: Oihan (~AndChat68@46-133-218-186.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/30 14:11:05*** Quit: Oihan (~AndChat68@46-133-218-186.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 264 seconds
01/30 14:12:27*** Join: Oihan (~AndChat68@46-133-218-186.dialup.umc.net.ua, (unauthenticated): AndChat685089)
01/30 14:13:20<daemoz> Hey all. Can't log into vps?
01/30 14:14:12<stoopkid> yea seems koo accidentally gzipped the /etc directory and broke it :)
01/30 14:14:23<daemoz> hehhe
01/30 14:15:52<stoopkid> although can't be broken *that* badly, i'm still logged in
01/30 14:16:05<daemoz> very strange!
01/30 14:16:12<daemoz> Can you make a backup?
01/30 14:17:25<stoopkid> yea i'll see what i can do there, and i'll try and figure out why you can't log in
01/30 14:18:33<daemoz> unzipping etc and putting it back in place should work? Configurations are stored in that directory so I wonder if it'll be that easy.
01/30 14:19:15<stoopkid> logs are good
01/30 14:19:25<stoopkid> autonomic wiki is experiencing technical difficulties :)
01/30 14:20:43<daemoz> Guess this gives me an excuse to focus on my actual school classes <_<
01/30 14:20:57* daemoz reluctantly opens his textbook "Introduction to Geography" T_T
01/30 14:21:33<stoopkid> heh
01/30 14:22:20<stoopkid> geography's cool i wouldn't mind a break from comp sci to look at some maps and stuff :)
01/30 14:23:10<stoopkid> so i guess an ssh session can maintain itself even if the authorized keys gets clobbered, you just won't be able to log in next time
01/30 14:23:28<daemoz> It's cool in a "well that's kinda neat" way. Certainly less interesting than this!
01/30 14:23:34<daemoz> Yeah that's what I'd figure too.
01/30 14:23:42<stoopkid> trying to log in from another terminal fails "ssh_exchange identification: connection closed by remote host"
01/30 14:23:50<daemoz> same error when I try.
01/30 14:28:42<koo5[m]> Yea i didnt have root logged in anywhere, so i cant ungzip  it all back
01/30 14:28:57<koo5[m]> cant even make a new postgres dump, so i hope what we have is recent enough
01/30 14:29:32<stoopkid> it is
01/30 14:29:52<koo5[m]> I have copied everything to my pc but if you do as well before i wipe it out, it wont hurt
01/30 14:30:33<koo5[m]> I had a sshfs session running
01/30 14:30:53<koo5[m]> But i think i got everything i could
01/30 14:31:35<koo5[m]> So, ill try to log into the admin console sometime tonight and reinstall
01/30 14:37:02<stoopkid> well, scp doesn't work either :) how does the sshfs work, do i need to do the copying from my session that's still logged in?
01/30 14:39:21<daemoz> scp uses ssh so it might not work. Have you tried scping out of your logged in sessions?
01/30 14:56:53<koo5[m]> You cant do the copying from an existing ssh session
01/30 14:56:57<koo5[m]> You can netcat
01/30 14:57:37<koo5[m]> Or use python SimpleWebServer maybe, or how its called
01/30 14:58:54<koo5[m]> or download some standalone file transfer program
01/30 14:59:18<koo5[m]> dont bother with it
01/30 14:59:51<koo5[m]> Only root could save us now
01/30 15:00:12<koo5[m]> Maybe ill be able to boot into rescue?
01/30 15:00:37<koo5[m]> Still its probably faster to reinstall
01/30 15:03:16<stoopkid> well, if you got everything then a reinstall would be fine, let's see, nginx configs, /var/www/html/wiki, and home dir
01/30 15:04:14<stoopkid> you said you had some of it under git would cloning the repo work?
01/30 15:06:20<koo5[m]> You gotta either have the .git accessible by http or locally or have git daemon running so no
01/30 15:31:32*** Quit: suiqiu__ (~suiqiublo@101.83.188.232) left #AutoNomic: Read error: Connection reset by peer
01/30 15:31:45*** Join: suiqiublockchain (~suiqiublo@101.83.188.232, (unauthenticated): realname)
01/30 18:20:04<koo5[m]> looking good!
01/30 18:22:21<stoopkid> nice
01/30 18:28:06<daemoz> hell yeah
01/30 18:29:10<koo5[m]> saved you from geography?
01/30 18:29:40<daemoz> Oh no, don't worry I was saved from that hours ago by the allure of some lisp
01/30 18:29:49<daemoz> but now I know about solar insolation!
01/30 18:31:47<koo5[m]> funny word
01/30 18:33:23<daemoz> true
01/30 21:51:07<stoopkid> HMCa: so logic above propositional logic is where we start getting undecidability as we start running into infinitely large propositions about infinite spaces
01/30 21:52:04<stoopkid> you need state in order to compute over arbitarily large inputs
01/30 21:53:02<stoopkid> you need abstract "causal feedback" in order to have "state"
01/30 21:53:46<stoopkid> feedback seems to necessarily come along with associated metastabilities
01/30 21:54:40<stoopkid> forks in the road where buridan's donkey gets stuck
01/30 21:56:27<stoopkid> informally it seems like these metastable points in the circuit should correspond to statements that aren't decidable by the logic associated to the circuit? idk. got any thoughts on that?
01/31 04:19:46* stoopkid is back to wondering about HoTT
01/31 04:20:18<stoopkid> pretty neat trick with Agda though you can use postulates to describe the higher identities
01/31 04:20:39<stoopkid> so you can simulate HoTT to some limited extent
01/31 04:21:17<stoopkid> probably at least enough for testing out its basic notions
01/31 04:22:21<stoopkid> i'm pretty sure this came up before but was still a bit too over my head at the time to see the picture clearly
01/31 04:23:01<stoopkid> so, quotient types and HITs and whatever else we wanna play with pretty much
01/31 04:23:45<stoopkid> idk why i resisted the postulates for so long, i guess i was still so wowed by what the built-in axiom schemas were already capable of
01/31 04:24:50<stoopkid> HMCa: btw koo and daemoz are both picking up MLTT well so far, got them both proving stuff now
01/31 04:25:50<stoopkid> like making-agda-pass-type-check proving stuff
01/31 04:27:02<stoopkid> i've kinda come around to the "burn brains" notion
01/31 04:30:48<stoopkid> you're right about not needing PR except for the fact that the available brains burn out too quickly on the actual problem and need to slow-and-steady their way through all the logic that went into figuring out the designs in the first place
01/31 04:32:59<stoopkid> starting with a complete reorientation of their minds into mechanized-formal-logic-land
01/31 04:34:04<koo5[m]> youre scaring me
01/31 04:35:05<stoopkid> :)
01/31 04:39:18<stoopkid> what i'm saying is that just slow-and-steady laying groundwork until we get there is probably better than just burning our brains out on a problem
01/31 04:44:33<stoopkid> i'd really like to just rush for the goal but it doesn't make sense to me to do so, in any way other than exactly how we're doing so now, with maybe slightly more PR to start pulling others into the research and dev
01/31 04:46:47* stoopkid thinks there's an error on page 3, second (full) paragraph of this paper: http://www.loa.istc.cnr.it/workshops/epinon2017/papers/JOWO_2017_paper_32.pdf
01/31 09:32:40*** Quit: Oihan (~AndChat68@46-133-218-186.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 264 seconds
01/31 09:33:00*** Join: Oihan (~AndChat68@158.227.184.53, (unauthenticated): AndChat685089)
01/31 15:54:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01/31 15:55:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01/31 17:57:34*** Quit: Oihan (~AndChat68@158.227.184.53) left #AutoNomic: Read error: Connection reset by peer
01/31 18:04:59-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
01/31 18:05:05*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01/31 19:51:43*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
02/01 04:27:47-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/01 04:27:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/01 09:12:13*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-vesijciwoylrqcyy) left #AutoNomic: Ping timeout: 248 seconds
02/01 09:12:47*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-hvksqytragtrfijd, (unauthenticated): @genuinelyfx:matrix.org)
02/01 12:29:04*** Join: lex_ (b246aa41@gateway/web/freenode/ip.178.70.170.65, (unauthenticated): 178.70.170.65 - http://webchat.freenode.net)
02/01 12:32:13<lex_> hi everyone. i frequently read about agda here. do you guys use it to prove properties of auntonomic MLTT-auth language? if yes, is it conceptually different from conventional pen and paper proofs?
02/01 12:35:51<lex_> i just wonder what roles agda-written proofs play in the overall development? is agda used just to simplify proving things or it does more than that (e.g. allowing to perform code generation for mltt core)?
02/01 12:36:33<lex_> and more down to earth question - do I need to learn agda (apart from MLTT) to understand what's going on? ))
02/01 12:38:03<koo5[m]> id say we're quite far from doing code generation from agda, if it's ever gonna happen
02/01 12:39:05<koo5[m]> stoop said he wouldnt have dived back into agda if it wasnt for my and daemoz's interest
02/01 12:39:25<koo5[m]> he wanted to do the lambda auth proofs on paper
02/01 12:40:36<koo5[m]> is it conceptually different? guess not conceptually, but definitely in the technicalities
02/01 12:40:44<lex_> code gen was was just (most probably very stupid) example. i haven't seen how computer assisted proofs are used in the real life. so i just wonder what role it plays here.
02/01 12:41:15<koo5[m]> not stupid example at all
02/01 12:42:03<koo5[m]> for me at least, the most important role is that its mltt
02/01 12:44:48<lex_> well, i theoretically know that it shouldn't be different from traditional theorem proving. btw, writing autonomic's core mechanics in agda/idris would be cool since it would almost proper bootstrapping. but this would definitely be an overkill to do so for the very first version.
02/01 12:47:32<lex_> afair i remember redfish was trying to build something for a test purpose using idris. like restricted idris+simple blockchain. though im not sure if he planned to do it fully in idris (most probably not).
02/01 12:49:47<koo5[m]> i think he was trying to strip down idris to a core he could wire up to a blockchain? i wasnt following too closely at that time
02/01 12:56:06*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
02/01 14:49:26<stoopkid> "we're quite far from doing code generation from agda"
02/01 14:49:39<stoopkid> quite far is quite an overstatement, imo
02/01 14:51:06<stoopkid> i've already got code generation in agda
02/01 14:52:01<koo5[m]> ah true, i was rather meaning to say that i think you havent been planning it, and we dont really need it now, but it may happen somewhere down the line
02/01 14:53:47<stoopkid> yea, it's probably unlikely that we'd use code-generation to actually generate the autonomic client code or something like that
02/01 14:54:02<stoopkid> but then again, only probably
02/01 14:56:19<stoopkid> "do I need to learn agda (apart from MLTT) to understand what's going on?"
02/01 14:56:23<stoopkid> no
02/01 14:57:32<stoopkid> even for us the Agda work is only temporary until we've got our own MLTT implementation and then we'd do all proofs in there
02/01 15:07:35-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/01 15:07:41*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/01 15:30:54*** Quit: suiqiublockchain (~suiqiublo@101.83.188.232) left #AutoNomic: Remote host closed the connection
02/01 15:31:48*** Join: suiqiublockchain (~suiqiublo@101.83.188.232, (unauthenticated): realname)
02/01 15:33:23<lex_> thanks! i'll skip agda then and focus on theory.
02/01 16:29:57<stoopkid> lex_: i will say though that the theory is somewhat easier when you're working with some concrete implementation of it, or at least that's been my experience
02/01 16:31:40<stoopkid> but, might ultimately be better to work with a pure natural deduction / sequent calculus system rather than Agda
02/01 16:34:57<stoopkid> i started in Agda way long ago back when i was just trying to figure out what was what and now it's just my comfortable go-to lang for messing around with MLTT stuff, but, honestly in hindsight it gave me kind of a rigid / incomplete understanding of what MLTT was "supposed to be" because its a layer of abstraction or two above the natural deduction / sequent calc stuff that really runs the show
02/01 16:36:31<stoopkid> daemoz koo5[m] btw its still easier for me to show you two how it works in Agda since i'm working one-on-one with you guys on it
02/01 16:37:52<koo5[m]> what is?
02/01 16:41:18<stoopkid> its easier for me to show you how proving works in Agda and then explain how it relates to natural deduction / sequent calculus rather than to try to have you work your way up from pure natural deduction
02/01 16:42:36<stoopkid> mostly because i don't have a go-to concrete implementation of a natural deduction that i'm experienced enough with to use as a teaching tool
02/01 17:08:36<koo5[m]> agda is higher order logic?
02/01 17:09:14<stoopkid> constructive higher order logic yea
02/01 17:14:49<stoopkid> well, actually MLTT's kinda weird in that regard, still haven't worked out exactly how it relates/differs from "standard" higher order logic
02/01 17:16:26<stoopkid> it can quantify over n-ary relations and then relations on relations, (as opposed to just like, quantifying over Nat) so, it's at least higher-order-logic-ish
02/01 17:17:33<koo5[m]> quantifying over nat would be second order?
02/01 17:18:12<stoopkid> first-order
02/01 17:18:42<stoopkid> so, imagine we're talking about node-edge graphs, first-order quantifies over nodes
02/01 17:19:33<stoopkid> edges represent binary relations, if you can quantify over binary relations, you're second order
02/01 17:19:35<koo5[m]> "all Nats are positive"?
02/01 17:20:25<stoopkid> right that would be a statement in the language of FOL in a signature for Nat
02/01 17:21:45<stoopkid> "every Nat in every set of Nats is positive"
02/01 17:22:33<stoopkid> quantifying over sets (unary relations), it's second order (technically monadic second order)
02/01 17:23:07<stoopkid> quantify over n-ary relations, you get the rest of second order
02/01 17:23:37<stoopkid> turns out you can simulate unary relations and n-ary relations with binary relations, so, binary second-order == second-order in terms of expressiveness
02/01 17:24:31<stoopkid> and then if you can quantify over sets of sets, sets of sets of sets, relations between relations, relations between relations between relations, you get higher-order logic
02/01 17:24:51<stoopkid> you only need binary n-th order logic at any order n
02/01 17:25:41<stoopkid> and then it turns out that you can simulate nth order logic in 2nd order logic so apparently this variety of logic (if there's any other?) maxes out in expressiveness at binary 2nd order logic
02/01 17:26:08<stoopkid> (though it's a been a while i kinda need to refresh my memory on the details of that simulation, though iirc it wasn't particularly complicated)
02/01 17:27:26<stoopkid> Agda lets you do all these quantifications, so, at first glance it would seem to have the same expressiveness as higher-order-logic
02/01 17:27:41<stoopkid> but, that kinda depends on the details of the interpretation of the quantifications
02/01 17:30:52<stoopkid> in the sense of, we could think that since it looks like it's quantifying over sets and sets of sets and relations between relations that it's full higher-order logic but, do the axioms/inference rules actually prove things that are validities relative to the interpretation of quantification in full higher order logic or do they only prove things that are validities under more restricted interpretations of the
              <stoopkid> quantifications? i don't know exactly
02/01 17:36:21<stoopkid> https://lists.chalmers.se/pipermail/agda/2015/008138.html
02/01 17:41:49<koo5[m]> https://i.redd.it/1pd8s12l4md01.jpg
02/01 17:42:41<stoopkid> :)
02/01 18:46:45*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
02/01 18:48:23-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/01 18:48:29*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/01 20:15:47*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 276 seconds
02/01 20:18:52*** Quit: lex_ (b246aa41@gateway/web/freenode/ip.178.70.170.65) left #AutoNomic: Quit: Page closed
02/02 01:13:45*** Join: suiqiu_ (~suiqiublo@101.83.177.159, (unauthenticated): realname)
02/02 01:16:28*** Quit: suiqiublockchain (~suiqiublo@101.83.188.232) left #AutoNomic: Ping timeout: 240 seconds
02/02 05:37:40-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/02 05:37:46*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/02 05:57:00<koo5[m]> so, last day of dayjob work, maybe
02/02 05:58:02<stoopkid> nice, how do you feel about that? :)
02/02 05:58:58<koo5[m]> very uncertainly
02/02 05:59:54<koo5[m]> not as in second guessing the decision, i feel i have to do this
02/02 06:02:32<stoopkid> well, lemme know what you need to see in order to make you more certain
02/02 06:03:38<stoopkid> (that is the point, after all, to have a plan/design that we're all certain of)
02/02 06:04:13<stoopkid> be demanding about your autonomic :)
02/02 06:07:35<stoopkid> in related news: i've made some more conceptual progress with how to possibly bound complexity without breaking the rest of the theory, and am getting back to putting everything more concretely into natural deduction in preparation for implementing it in an inferencer
02/02 06:09:07<koo5[m]> agrs mooning. It's some bit of uncertainity of my role in the project, and some uncertainity about the money supply. But now that i think of it, just being prepared for looking for freelance gigs should/might solve both
02/02 06:09:26<koo5[m]> you mean ep? back to mltt over univar, basically?
02/02 06:12:16<stoopkid> well, some kind of natural deduction inferencer. i don't want to speak too soon about what the implementation is gonna look like in particular, i'm just gonna keep working out the MLTT over natural deduction on paper (well, in ~/notes) until i have a complete handle on the mechanics of it at that level of abstraction and then start looking at various transformations from there, like we're doing with the lambda/ski
02/02 06:12:17<stoopkid> stuff
02/02 06:12:40<koo5[m]> sure
02/02 06:13:13<stoopkid> hopefully we can get it down to the thing HMC wants in particular? no promises though
02/02 06:13:19<koo5[m]> i'll check it out...soon
02/02 06:13:21<koo5[m]> hopefully
02/02 06:16:37<stoopkid> wrt your role in the project, i'm not sure what you're uncertain about
02/02 06:16:55<stoopkid> you're here, working on it, do you want a more specific role? :)
02/02 06:19:54*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 246 seconds
02/02 06:29:26<stoopkid> i'll get the design down to where we have something concrete to implement, i'll keep teaching you agda & proofs, and when i have the concrete design i assume you'll help me to implement that, and then develop libs and tools in the MLTT and attach the block-chain protocol, and i assume you'll keep helping me with side stuff like wiki / VPS / logs / etc..., there's visualization stuff i wanna work on, there's my
              <stoopkid> coins i still haven't traded that you could help me with, that we're only expecting to maybe get more of at all because of your agreement to nilli's agoras thing, and yea keeping an eye out for more secure sources of income couldn't hurt
02/02 06:35:52<stoopkid> so, wrt complexity, we'd like to at least not be inconsistent with the principle of function extensionality, but, that kinda hurts our ability to talk about any behavior of functions besides for their I/O relations
02/02 06:37:21<stoopkid> like if functions that have the same I/O relations are equal (as in the Identity type), and we can substitute equals for equals, but we can make propositions about functions that will answer differently depending on the internal behaviors of those functions, then we'll wind up with an inconsistent system
02/02 06:41:47<stoopkid> interestingly though, this Identity type relation kind of encapsulates where exactly the complexity is actually occurring, because it encapsulates the notion of things being equal if they compute to the same term  (at least in standard MLTT, not talking about univalence/HoTT here, yet?)
02/02 06:45:57<stoopkid> so, you can imagine all the equal terms in a type, like a graph, with the one-step beta-reductions/expansions as the edges, and propositional identity is some sense "generated" from this
02/02 06:47:49<stoopkid> so let's say you've got a function f applied to some argument x, when you normalize it, it recurses some number of steps, following one of these edges each step
02/02 06:50:11<stoopkid> general propositional equality (without univalence/HoTT) essentially encapsulates all the *paths* in this graph, chained up by reflexivity, symmetry, and transitivity rules for equality
02/02 06:53:58<stoopkid> J-rule says that if we have a proposition about an equality, P : Id a b -> Set, then if p : Id a b, to prove P(a,b,p) it suffices to prove P(a,a,refl)
02/02 06:55:13<stoopkid> not necessarily a good rule, seems it should make every proof of Id a b satisfy exactly the same properties
02/02 06:55:58<stoopkid> what if we drop the J-rule, then a proof of Id a a doesn't really have any implication on a proof of Id a b, let alone Id b c
02/02 07:00:17<stoopkid> so, why would we do this? well, the complexity is not actually in the function itself (like, in the text / syntactic description of it), but rather in the system of equalities that the beta-reduction follows in order to describe how this function normalizes when applied to terms
02/02 07:01:24<stoopkid> two functions that compute the same I/O relation but differ in their internal behavior can be seen as following two different paths through "identity space"
02/02 07:43:26*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/02 07:44:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/02 08:54:35-SaslServ- koom!~sirdancea@91.219.246.42 has just authenticated as you (sirdancealot)
02/02 08:54:42*** Join: koom (~sirdancea@91.219.246.42, sirdancealot: koo5)
02/02 09:39:37<koo5[m]> haha, didnt notice the orange in the logo before, thanks
02/02 09:40:16<koo5[m]> wrt my role, no thats fine, i just can imagine that things get too mathy for my taste at some point
02/02 09:49:51<koo5[m]> hrrm
02/02 09:59:10<koo5[m]> i can imagine that would be relevant on the type system level, not sure how it would affect the prover itself
02/02 09:59:33<koo5[m]> in python, you have "==" and "is" :)
02/02 10:09:42*** Quit: koom (~sirdancea@91.219.246.42) left #AutoNomic: Ping timeout: 248 seconds
02/02 10:25:03*** Join: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87, (unauthenticated): 77.139.88.87 - http://webchat.freenode.net)
02/02 10:27:57-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/02 10:28:02<koo5[m]> hi nilli
02/02 10:28:04*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/02 10:28:18<nilli> hi koo
02/02 10:29:10<nilli> so are you all exited about starting to really work on autonomic?
02/02 10:30:01<koo5[m]> i am
02/02 10:30:58<nilli> I have squared off things with HMCa so  I think that we can all work together again in good terms
02/02 10:34:16<nilli> now for myself, not for any PR just in order to understand who you guys work, what actualy you plan to do and what  stoop is doing
02/02 10:34:22<nilli> how
02/02 10:38:50<koo5[m]> yea?
02/02 10:53:08<nilli> so first of all, is anything that Ohad did until the split is relevant?
02/02 10:54:03<koo5[m]> you mean is there any code that ohad wrote that we intend to use?
02/02 10:54:17<nilli> yes
02/02 10:58:18<nilli> if i remember right , sometime before the split, when I tried to understand what is problem Ohad said that it is about how to build the compiler and that its not such a huge difference
02/02 11:00:16<koo5[m]> dunno what ohad had in mind. We have univar which uses support code from ohad. If we end up continuing with univar, then we will be using it with that support code, until we decide to rewrite it
02/02 11:05:05*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
02/02 11:06:05<nilli> whats univar (I should know by now but I actually not sure what exactly it mean)
02/02 11:11:17<koo5[m]> The reasoner we worked on
02/02 11:18:06<koo5[m]> if youre asking about his new mso stuff, well...
02/02 11:29:32-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/02 11:29:38*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/02 11:33:03<koo5[m]> i can say i have no clue about that, but its safe to say that his work cant be significantly relevant for our work and vice versa
02/02 11:33:42<koo5[m]> and if youre hoping for some grand unification, thats more of a topic for stuff that me and stoop discuss that we consider out of the scope of autonomic
02/02 11:38:14<koo5[m]> my new_shit is a prototype of a language for defining other languages, and me and stoop have  same ideas on how type systems and other constraints should be dealt with in some hypothetical grand new (meta) language, and then we could have a place for any logic, including mltt and ohad's mso's
02/02 12:18:54<nilli> actualy i dont think at all in terms of unification on the language or logic level. at this point just getting one language working with the logic is a big enough task
02/02 12:25:49<nilli> koo5, isn't the meta language defined by the logic? and isn't that the mltt the you need to use for that if agree on the logic structure (the one that is not mso
02/02 12:29:54<koo5[m]> not sure what "defined" means here, but it might be mltt, but im leaning towards a simpler bootstrapping language
02/02 13:06:03<nilli> that sound good "simpler bootstrapping language"
02/02 13:10:06<stoopkid> hey nilli
02/02 13:20:32<stoopkid> well, to be perfectly precise such a meta-language system was gonna be *outside* the context of autonomic, mostly for the purposes of being able to conveniently switch out the logic for testing, the final autonomic system would still end up with a single logic, almost surely to be some variant of MLTT
02/02 13:21:46<stoopkid> but i'm still unsure about the details of how to set that up yet, will have some more insight into it after i work up this natural deduction MLTT stuff
02/02 13:26:33<stoopkid> "i can imagine that would be relevant on the type system level, not sure how it would affect the prover itself" you talking about the complexity thing or the visualizations
02/02 13:26:39<stoopkid> @ koo5[m]
02/02 13:28:19<stoopkid> ha i didn't even finish my thought there wrt the complexity: so, equal functions but different path spaces, now, if we can talk about these path-spaces as being inequal without talking about the functions being inequal, then we'd be a step-closer to talking about complexity internally
02/02 13:30:29<stoopkid> can we talk about length of paths? possibly, what if we make explicit constructors for symmetry & transitivity of Identity types so that we can case-match over the structure of paths?
02/02 13:31:21<koo5[m]> complexity thing
02/02 13:31:37<koo5[m]> what visualizations do you have in mind?
02/02 13:32:51<stoopkid> the things you have available to work with while you're right a proof and the relations between them
02/02 13:32:58<stoopkid> you're writing*
02/02 13:33:06* stoopkid 's brain is still turning on
02/02 13:34:27<stoopkid> would start off something kinda like unison and then would turn into something closer to AutoCAD
02/02 13:35:56<stoopkid> so i have a term x : A, x has some associated syntax tree, the layers of abstraction of the visualization kinda start there
02/02 13:36:33<stoopkid> the next most important thing, next layer of abstraction, is the proofs of equality (Identity types) between terms
02/02 13:37:11<stoopkid> so i've got x y z : A with x == y and y == z, and i sit there and i look at it for a while and i think "aha i have x == y and y == z, and i can apply transitivity of equality to get x == z"
02/02 13:38:13<stoopkid> i would instead display a node-edge graph of some sort showing the various equalities you have available
02/02 13:38:55<stoopkid> nodes are terms, equalities are edges, draw a path, you get another equality by chaining up the edges via symmetry and transitivity
02/02 13:39:43<stoopkid> various things along these lines to simplify the proving process
02/02 13:40:58<stoopkid> so now take all the terms of type A that you're working, and consider this graph of equalities between them
02/02 13:41:45<stoopkid> connected components of this graph really kinda just represent a single term
02/02 13:43:02<stoopkid> if x == y then f(x) == f(y), so, functions f : A -> B can sort of be seen as operating on these connected components, mapping connected components in A to connected components in B
02/02 13:49:58<koo5[m]> "x has some associated syntax tree"...
02/02 13:50:42<stoopkid> proof-tree*
02/02 13:51:13<koo5[m]> alright
02/02 14:30:26<koo5[m]> so, first we need a way to describe agda ast in rdf..:)
02/02 15:30:53*** Quit: suiqiu_ (~suiqiublo@101.83.177.159) left #AutoNomic: Remote host closed the connection
02/02 15:31:42*** Join: suiqiublockchain (~suiqiublo@101.83.177.159, (unauthenticated): realname)
02/02 16:54:57*** Quit: nilli (4d8b5857@gateway/web/freenode/ip.77.139.88.87) left #AutoNomic: Ping timeout: 260 seconds
02/02 17:21:23<stoopkid> koo5[m]: we can do that that's never been the problem, the problem is making them such that euler correctly inferences over them
02/02 17:22:09<koo5[m]> i was talking about the visualizations
02/02 17:23:07<stoopkid> right, representing some syntax trees for MLTT in RDF is no problem
02/02 17:23:40<stoopkid> i assume its RDF because you've been working with tools that do visualization of RDF graphs?
02/02 17:24:06<koo5[m]> not yet, but i plan to
02/02 17:24:21<koo5[m]> its just still the only format that makes sense
02/02 17:24:30<koo5[m]> or seems to
02/02 17:25:21<koo5[m]> or w/e
02/02 17:26:14<stoopkid> yea RDF makes sense most of the visualization is graph-based and we're hoping to maybe use RDF inferencing for it anyway, if we can figure out how to make it tick
02/02 17:28:17<stoopkid> we've built an ad hoc dtlc typechecker (and autoprover!), we can build an ad hoc natural deduction engine the same sort of way and just output RDF syntax trees for the viz
02/02 17:31:58<stoopkid> remember we figured out a lot of the typechecking mechanics by looking at the natural deduction rulesets? we basically implemented those rulesets (though only the rules surrounding implication / dependent function types)
02/02 17:33:10<koo5[m]> not sure what you mean
02/02 17:33:27<koo5[m]> the p63 thing?
02/02 17:34:00<stoopkid> https://en.wikipedia.org/wiki/Calculus_of_constructions#Inference_rules_for_the_calculus_of_constructions
02/02 17:34:49<stoopkid> we basically implemented an inferencer hardcoded for rules 2-4
02/02 17:36:13<stoopkid> we implemented that "G |-" context-passing mechanics
02/02 17:37:26<stoopkid> which you see in rules 2 and 3, rule 3 is where a lambda puts its (<input> , <input type>) pair into the context during type-checking, rule 2 is where type-checking does a lookup in the context
02/02 17:37:46<stoopkid> rule 4 is how we typecheck an application
02/02 17:38:35<stoopkid> and its application of *dependent* functions, so we had to implement most of the mechanics that handle those dependencies during type-checking
02/02 17:39:33<stoopkid> so most of what we've already done there generalizes pretty well to most of the rest of the MLTT rules
02/02 17:40:45<stoopkid> (we also implemented beta-reduction/computation/equality rules, though didn't provide a system for Identity types)
02/02 17:41:55<stoopkid> so generalizing a bit on what we did in new-shit-lambdas we can get a generic natural deduction engine that'll do inferencing over arbitrary ND rulesets like this
02/02 17:45:28<stoopkid> we don't need to use p63, p63 only gives an extremely partial description of how it should work anyway
02/02 17:46:22<stoopkid> its got a couple rules for building up descriptions of pi-types and sigma-types and DRTs, but then passes everything off to Coq to actually run it
02/02 17:47:20<stoopkid> same thing with kdtt
02/02 17:49:07<stoopkid> so, *not* p63, we're just trying to figure out how to make inferencing work, we can try to think about how to make it more convenient for the sem-web community *after* that, if we think it's a priority
02/02 18:21:43<stoopkid> koo5[m]: http://purelytheoretical.com/papers/ATCHC.pdf
02/02 18:40:24<koo5[m]> https://github.com/silicon-heaven/libshv/pull/1
02/02 18:41:03<koo5[m]> dayjob == finished (?!?)
02/02 18:41:42<stoopkid> wow, nice :)
02/02 19:11:57<koo5[m]> ok, maybe i vaguely remember staring into those equations
02/02 19:33:07<stoopkid> yea i have a bit of work to do wrt figuring out what the concrete mechanics of it need to be
02/02 19:38:52<stoopkid> http://167.88.171.233/workspace/notes/ND_conjunction
02/02 20:48:38*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 248 seconds
02/02 23:37:44<stoopkid> HMCa: well now i understand the point of ABTs
02/03 03:03:44*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/03 03:04:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/03 03:10:51-SaslServ- koom!~sirdancea@236.152.broadband3.iol.cz has just authenticated as you (sirdancealot)
02/03 03:10:57*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/03 03:20:25*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
02/03 19:51:10<stoopkid> HMCa: could you review these rulesets if you get a chance: http://167.88.171.233/workspace/notes/ND_rules_v1
02/03 21:31:59<stoopkid> here's a version without set-levels if it's easier to work with: http://167.88.171.233/workspace/notes/ND_rules_simple
02/03 22:25:16<daemoz> hah, thanks
02/04 00:20:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/04 00:21:27*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/04 01:31:27<stoopkid> http://167.88.171.233/workspace/notes/ND_rules_simple_harmony
02/04 01:31:58<stoopkid> beta/eta reductions derived from local soundness/completeness proofs (resp.) for most of the rulesets there
02/04 02:45:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/04 02:45:57*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/04 04:21:22<koo5[m]> What is this all about?
02/04 04:23:39<koo5[m]> G is ground?
02/04 04:24:00<koo5[m]> |- is implication, right?
02/04 04:52:12<koo5[m]> Should i interpret this in terms of n3 reasoning?
02/04 04:53:47<koo5[m]> or this should be mltt in nd i guess?
02/04 04:54:41<koo5[m]> Isnt mltt just the type theory?
02/04 04:55:08<koo5[m]> Whats the 'runtime' part called, just lambda calculus?
02/04 05:09:36<koo5[m]> |- b[x\a] : B[x\a]
02/04 05:10:04<koo5[m]> Does seem like trying to describe what goes on in an n3 rule
02/04 05:10:31<koo5[m]> But seems like its failing?
02/04 06:38:28<koo5[m]> i mean..the substitution thing b[x\a] : B[x\a]
02/04 06:39:14<koo5[m]> just doesnt seem to fit
02/04 09:30:55<stoopkid> koo5[m]: http://purelytheoretical.com/papers/ATCHC.pdf
02/04 09:33:35<stoopkid> what doesn't fit about the substitution rule?
02/04 10:11:09<koo5[m]> ah, nvm
02/04 11:29:46<stoopkid> koo5[m]: are the rules making any more sense? lemme know if there's anything else i should clarify
02/04 11:34:58<stoopkid> before we move on to implementation i'll need to make the syntax & inferencing rules more precise, abstract out the patterns for defining these rule-sets, and demonstrate normalization, consistency & decidability
02/04 11:36:24* stoopkid is kinda using his intuitions about MLTT to gauge whether or not he's getting the ND inferencing semantics correct
02/04 11:38:56<stoopkid> i still don't have a great idea of how to eulerize it, i had dmiles helping with that but then he disappeared, hope everything's alright with him
02/04 11:57:47<koo5[m]> you mean it should become clearer after reading the tutorial?
02/04 11:58:16<stoopkid> that pdf? yea
02/04 11:58:53<koo5[m]> ok, it seems i gotta start with understanding classical logic, for a start
02/04 11:59:15<stoopkid> hrm, why?
02/04 11:59:41<stoopkid> classical logic = constructive logic + more rules & less info
02/04 11:59:42<koo5[m]> because anytime i try to read anything, i try to understand what its even about and turns out its about intuitionistic logic which turns out to be defined in terms of classical logic
02/04 12:00:14<koo5[m]> then theres prepositional logic and calculus of this and that
02/04 12:00:43<stoopkid> you don't have to know any of that for this pdf it literally doesn't talk about any of that :)
02/04 12:01:44<koo5[m]> "starting with the
              <koo5[m]> Natural Deduction proof system for Intuitionistic Propositional Logic"
02/04 12:01:52<stoopkid> it's about how to interpret the ND rules & proof-trees and then how to get lambdas out of that and then where the beta-reduction rules come from
02/04 12:02:07<stoopkid> you don't need to have an a priori knowledge of what IPL is
02/04 12:02:31<stoopkid> pretend it says "natural deduction proof system for some random rules & axioms"
02/04 12:03:17<koo5[m]> mkay, i can try
02/04 14:32:15-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/04 14:32:17*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/04 19:07:47*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
02/05 01:14:17*** Join: suiqiu_ (~suiqiublo@101.83.163.136, (unauthenticated): realname)
02/05 01:17:53*** Quit: suiqiublockchain (~suiqiublo@101.83.177.159) left #AutoNomic: Ping timeout: 276 seconds
02/05 01:50:12<stoopkid> alright, getting closer to making my rulesets precise, abstracting out the inferencing patterns & demonstrating the consistency & decidability of typechecking
02/05 01:51:49<stoopkid> next steps after that could be either try to continue translating from here into N3, extend the rules with auth'ing, or just try to implement this style of rules to get some concrete testing in
02/05 01:55:45<stoopkid> i guess we should do the 3rd before the 2nd, and then only do the 2nd if we still don't see the picture with N3 by then
02/05 02:02:45<stoopkid> HMCa: any thoughts on that?
02/05 03:03:46*** Quit: suiqiu_ (~suiqiublo@101.83.163.136) left #AutoNomic: Remote host closed the connection
02/05 03:04:10*** Join: suiqiu_ (~suiqiublo@101.83.163.136, (unauthenticated): realname)
02/05 06:18:29-SaslServ- koom!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
02/05 06:18:36*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
02/05 07:34:50*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 240 seconds
02/05 08:55:36-SaslServ- koom!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
02/05 08:55:42*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
02/05 09:12:48*** Join: nilli (545eca87@gateway/web/freenode/ip.84.94.202.135, (unauthenticated): 84.94.202.135.cable.012.net.il/84.94.202.135)
02/05 09:13:09<nilli> hi
02/05 09:16:56*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 240 seconds
02/05 09:18:11<stoopkid> nilli: good morning
02/05 09:23:47-SaslServ- koom!~sirdancea@109.107.211.244 has just authenticated as you (sirdancealot)
02/05 09:23:53*** Join: koom (~sirdancea@109.107.211.244, sirdancealot: koo5)
02/05 09:29:08<nilli> hey stoopkid. how are you? whats new?
02/05 09:29:31<stoopkid> doing well, how bout you?
02/05 09:29:48<nilli> well as well :)
02/05 09:30:49<stoopkid> i think i'm getting closer to having the logic issues sorted out than i ever have been previously
02/05 09:32:10<stoopkid> up above i posted some draft rulesets. at first i was unsure of most of it but i've got folks in ##dependent helping me work through the details and turns out i was mostly on the right track all along
02/05 09:32:37<nilli> that is good.  can you describe what was the issues needed to sort out (im totaly confused with all the history regarding the issue of logic in this project)
02/05 09:34:21<nilli> sorting means proving certain things?
02/05 09:36:26<stoopkid> at this stage basically just making a certain set of rules precise and proving *those* rules to be consistent/decidable/etc (as opposed to just following the literature and agreeing that some abstract system should be consistent/decidable/etc) and making sure we all agree on how they're laid out, and abstracting out the patterns in order to move it into implementation
02/05 09:36:46<stoopkid> there's other issues that need to get sorted out but this one's more primary
02/05 09:39:32<stoopkid> ideally would translate from these rulesets into the sem-web system HMC was originally aiming for
02/05 09:42:13<stoopkid> and either way we still need to extend it with authenticated data structures (generalized merkle trees) to support light clients, which unfortunately will probably be somewhat more of a challenge for me because cryptographic security isn't my strong suit, i just have to hope i have enough math skill to push through it in a timely fashion
02/05 09:51:26<stoopkid> it's interesting, consistency of this system is so trivial to demonstrate that i almost wonder if we're asking too weak a question about it :)
02/05 09:52:46<nilli> could yo explain this in  more details, its sound interesting
02/05 09:53:24<stoopkid> wrt consistency you mean?
02/05 09:56:24<nilli> well maybe we need to start with what is "the system" you refer to. is it the "set of rules"?
02/05 09:56:43<stoopkid> right
02/05 09:57:30<nilli> and these sets of rules are the formal logic rules?
02/05 09:57:58<stoopkid> right (as opposed to like nomic rules or something)
02/05 09:58:52<nilli> how many rules form the system?
02/05 09:59:16<nilli> as you have been able to define so far
02/05 10:00:40<stoopkid> well, i'm starting with a system that contains, hrm, 30-40 rules defining basic logical connectives (True, False, AND, OR, NOT, IMPLIES, EXISTS, FORALL, EQUALS) and some basic data-types (Bools, Nats)
02/05 10:00:59<stoopkid> the actual system though, in a sense, will contain arbitrarily many rules
02/05 10:01:25<stoopkid> (all constrained to certain patterns of inferencing)
02/05 10:03:48<stoopkid> MLTT is inherently extensible like this, within these constraints
02/05 10:07:56<stoopkid> you'd think this might collapse into a tower of babel but it doesn't, i was coding all kinds of things in Agda for like a year before i realized that this kind of extensible rules framework was actually running things behind the scenes
02/05 10:08:38<nilli> So I dont understand something here, if you where to use the logic rules of MLTT was'nt that be the full logic system that you would need?
02/05 10:09:26<stoopkid> *almost*, the authenticated data structures are an extension to the underlying logic, not above it
02/05 10:12:45<nilli> and you need the authenticated data structures  to not be an extension?  (what is authenticated data structures ? :) )
02/05 10:13:09<stoopkid> actually maybe misinterpreted you there, do you mean why not just use this set of 30-40 rules that define maybe what we'll call "core MLTT" rather than using a system with "arbitrarily many rules"?
02/05 10:16:42<stoopkid> authenticated data structures let you store data on an untrusted server and allow you to call upon the server to perform operations on that data without being able to fool you with an "incorrect" result
02/05 10:18:25<stoopkid> it's built into the logic level so that this can be done with the entire logic (or, as much of it as possible anyway, not sure if/where limitations of the concept will arise)
02/05 10:19:45<stoopkid> analogously like building it into a programming language so that every data-type you define in that programming language can already be made authenticated in a standard way, rather than having to use an unauthenticated language to define authenticated data structures and then only have them partially apply to the language
02/05 10:21:15<stoopkid> consider, the block-chain will store rule-sets, and these are what need to get merkle-ized in order to support light clients
              <nilli> ok so when you say "built in" you in fact mean that it act like a logic rule .
02/05 10:21:31<stoopkid> right
02/05 10:22:03<nilli> it sound like you need then to come up with a new rule :)
02/05 10:24:16<stoopkid> sort of, the idea is already come up with, that's what "lambda auth" is about, but, it was made for a simpler system than MLTT, so we basically have to generalize this existing rule (if necessary) to make it handle all of MLTT, and then demonstrate the correctness of what we've come up with
02/05 10:25:01<nilli> if I understand right ,its almost like you need a rule to connect between data and logic itself
02/05 10:25:52<stoopkid> hrm, more like between logic and cryptographic authentication of data, but sort of
02/05 10:26:12<stoopkid> there are already incredibly strong connections between the unauthenticated logic and unauthenticated data
02/05 10:26:30<stoopkid> that's what the curry-howard stuff is all about
02/05 10:26:46<stoopkid> propositions as datatypes, proofs as programs, etc...
02/05 10:27:23<nilli> data being an actual manifestation of a rule expressed in "reality"
02/05 10:28:06<stoopkid> sort of yea
02/05 10:28:31<stoopkid> data in a datatype serves as "real-world" witness to the truth of the proposition corresponding to the data-type
02/05 10:29:44<nilli> that is a metaphysical issue , the point where theory become real
02/05 10:30:05<nilli> let me explain myself better
02/05 10:32:13<nilli>  the rules of stating "I am walking" and the rules of me actualy walking are a different language. the first is words , the other is the physical function of a walk
02/05 10:32:56<nilli> one can only describe the other. the are parallel to each other
02/05 10:33:05<nilli> they
02/05 10:34:57<nilli> so is your authenticated data structures system and logic system
02/05 10:38:35<nilli> now this is a very crucial issue in all of our conceptual setups
02/05 10:39:37<nilli> in order to express one conceptual setup with in the other system's conceptual setup you need an transformation agent
02/05 10:39:40<stoopkid> sorry had to get up for a bit (working from home == everybody thinks you're "available", apparently)
02/05 10:40:12<nilli> it give me time to think :)
02/05 10:41:08<nilli> that transformation agent is the key for a complex and consistent system
02/05 10:41:46<nilli> in other word consistency is a matter of transformation
02/05 10:42:50<nilli> and it can be checked using symmetry.
02/05 10:43:02<stoopkid> so, it doesn't authenticate real-world objects/processes, current theory can still only bridge the divide between virtual & real in very few places (and even then, it might just be a misinterpretation and just be virtual verifying virtual)
02/05 10:44:01<stoopkid> what it can authenticate is patterns, bit-strings, "data", "virtual" operations on data, etc..
02/05 10:46:43<stoopkid> even *science* doesn't take the standpoint that we can actually "know" the real, just to give a sense of how wide the theoretical divide is :)
02/05 10:49:19<nilli> the issue is not 'know" but "verify". since "verify" means that we can come to the same conclusion from two different starting point. which means  that we can agree on that something.
02/05 10:49:30<nilli> and that is what we need
02/05 10:52:15<nilli> it just like  being able to agree on time once you set up the units of time then the time zone line and measured the difference in these units using say the rise of the first star.
02/05 10:52:47<stoopkid> ah
02/05 10:53:53<nilli> in other words it dose not matter how real, real is as long as we all agree that it is real
02/05 10:55:34<stoopkid> so basically what you're saying is, i should be able to use the logic to describe my model of reality, and you should be able to use the logic to describe *your* model of reality, and then we should be able to determine whether or not they're compatible and adjust/generalize/abstract until they are compatible?
02/05 10:55:57<nilli> that process for agreeing on it being real is the underline of what give you the consistency  in your statement
02/05 10:56:58<nilli> ok lets brake down your statement above
02/05 10:57:03<nilli> break
02/05 10:59:49<stoopkid> so like, i might have some model of this concept of "distance", and you might have a different model of the same concept
02/05 11:00:20<stoopkid> maybe mine is framed in a model of newtonian physics, and yours is framed in a model of special/general relativity
02/05 11:00:54<stoopkid> further i might express my units of distance in "feet", while you express yours in "meters"
02/05 11:02:47<stoopkid> but we should be able to show how the two models relate to each other and come to agreements on the "meanings" of all these things, relative to each other?
02/05 11:03:38<nilli> well that is the opposite of what I have described
02/05 11:04:35<stoopkid> ah so like in this example what you described would be analogous to everybody using the framework to reach consensus on a single theory of physics?
02/05 11:05:24<nilli> first we need to agree on units
02/05 11:07:30<nilli> thus we use something physical we both experience the same
02/05 11:08:13<nilli> using the physical experience we have determined a theoretical property
02/05 11:08:39<nilli> that was the first transformation between physical and theoretical
02/05 11:09:27<nilli> then we use that theoretical property of a unit in order to agree on more complex physical properties
02/05 11:09:45<stoopkid> might be tough, i'm basically saying the same thing as you but what i described is how i imagine that would actually play out in practice, since people will create & commit to different models prior to everybody agreeing on a single model, and then they'll start trying to figure out logical relations between their models and iteratively develop better models
02/05 11:10:34<nilli> yes that is true
02/05 11:11:07<nilli> I assume also that we can reach the same result form both ends
02/05 11:12:09<nilli> so lets try to go back to the issue you are dealing with regarding making the extension a rule
02/05 11:14:14<nilli> you need to create an agent of transformation that can transform every object in the extension to the language of rules
02/05 11:15:35<stoopkid> well, i haven't even run into any specific issues yet, i've just been working my way up through the unauthenticated formal logic to even start trying to tackle the authentication
02/05 11:16:15<stoopkid> but yes that's the idea basically
02/05 11:18:01<stoopkid> there's "intuitive" (maybe i should just say "informal") semantics associated to the authentication, certain objects/data associated to it, and the descriptions of how to create & use these objects must be translated/transformed into a set/schema of rules
02/05 11:20:33<nilli> set of rules as logic rules? or just some set of rules
02/05 11:22:14<nilli> to get back to where we started :are we basically trying to transform authenticated data structures to a logic rules
02/05 11:24:05<stoopkid> well, there's a couple additional logic rules, basically a rule to take a data-structure/object/proof and turn it into a merklized/authenticated data structure, and another rule for extracting the regular data structure back out of this (along with a couple more rules to describe the types that the authenticated versions of the data structures belong to), but the major extension actually happens in the way the
              <stoopkid> logic gets compiled
02/05 11:26:38<stoopkid> "client" node and "server" node take the same program, and compile it two different ways, such that the client is able to work with only small "digests" of the data (think like light clients in bitcoin) while the prover keeps all the data and generates proofs that it correctly executes the operations the client requests
02/05 11:27:28<stoopkid> (like full clients in bitcoin)
02/05 11:32:51<nilli> ok but that is something that have been resolved, isnt it?
02/05 11:34:36<stoopkid> not all the way for MLTT, no, the lambda-auth paper describes it only for a simpler fragment, but claims it should be able to generalize, i'm about to actually start trying to attempt to the generalization, that's part of what my recent work has been leading up to
02/05 11:35:54<stoopkid> HMCa apparently has a mechanism to make it work but i don't understand it well enough
02/05 11:38:46<nilli> ok so that :  to begin with we allready apply some logic rules in order to create that authenticated data structures but we kind of looking for a meta rule?
02/05 11:43:35<stoopkid> hrm, kinda, but again, more like looking for how to *extend* an existing meta rule
02/05 11:43:56<nilli> kind if trying to go back to connect all the dots
02/05 11:44:22<nilli> of our conversation today
02/05 11:44:44<nilli> kind of
02/05 11:45:46<stoopkid> so lambda-auth has this whole picture worked out already, but it's basically only for a fragment of MLTT, not the full thing, so we're basically tasked with working the other parts of MLTT into that same picture
02/05 11:49:38<nilli> ok so now we can go back to  the symmetry as a meta solution
02/05 11:51:32<nilli> if we can define the symmetry that we use in the transformation, we can then apply it to any sets of objects/rules
02/05 11:54:48<stoopkid> i think i see what you mean now, sure
02/05 11:55:02<nilli> symmetry is a code of itself. when I say symmetry it can even mean the constant in physics
02/05 11:56:58<stoopkid> so when you say symmetry, you mean like, the properties/behaviors exhibited by every object in some collection?
02/05 11:58:07<nilli> maybe the best way to explain symmetry is  as the operation one take to transform one thing to another. and the symmetry itself is a product of applying the operation
02/05 11:58:55<nilli> so its not the property that it exhibit, its the cause for these property to be
02/05 11:59:13<nilli> it determine the properties
02/05 11:59:42<nilli> that is why we can use it as a prover
02/05 12:00:04<stoopkid> so, you mean like a square (with corners and sides unlabeled/unoriented) has 90 degree rotational symmetry because the operation of rotation by 90 degrees transforms the square back into itself?
02/05 12:00:57<nilli> yes
02/05 12:01:10<nilli> its a bit of a mind fuck but it works :)
02/05 12:02:13<stoopkid> nah it's sensible (this is a lot of what group theory is about btw)
02/05 12:03:34<stoopkid> not all operations represent/witness this kind of symmetry of the object they're operating on though
02/05 12:04:06<nilli> in fact  I guess one can prove any axiom setup using that same technique
02/05 12:04:40<stoopkid> rotating a square 45 degrees, for example, or transforming an object into an object of a completely different type, like transforming a square into a circle
02/05 12:04:44<nilli> well the trick is to find the symmetry/ all eventually can be define by a symmetry
02/05 12:05:40<stoopkid> well, we can default to "everything has the symmetry of being an 'object'"
02/05 12:06:29<nilli> one can define the prime numbers of the ultimate infinite symmetry
02/05 12:06:43<nilli> as the
02/05 12:07:32<stoopkid> because all natural numbers can be decomposed into products of primes?
02/05 12:07:47<stoopkid> (uniquely, too)
02/05 12:08:39<nilli> yes and because the next prime is random.
02/05 12:09:29<stoopkid> but we can devise an algorithm to list out all primes
02/05 12:10:18<nilli> we dont have the formula to the next prime up
02/05 12:12:01<stoopkid> you mean we don't have an efficient program to compute the next prime up, given only the "current" prime as input?
02/05 12:12:38<nilli> yes,
02/05 12:12:49<stoopkid> cause i can just run my prime generator and give you the first prime that's greater than the one you gave me
02/05 12:13:45<stoopkid> so, maybe "cryptographically hard" but not really "random", and certainly not "algorithmically random"
02/05 12:18:36<nilli> ok I confused here between some things
02/05 12:19:18<nilli> what is the thing that you cant prove about primes?
02/05 12:21:06<nilli> anyway anything that can be formulated into an algorithm do represent a symmetry
02/05 12:21:34<stoopkid> not what you're referring to there, there's various relevant things that people just haven't been able to prove/refute yet
02/05 12:22:57<stoopkid> not sure what*
02/05 12:24:04<stoopkid> wrt symmetry, possibly, there's various interpretations of what you might mean there
02/05 12:24:46<stoopkid> like an algorithm can be said to perform a "similar" transformation on any given input, and thus there's some kind of symmetry there
02/05 12:26:16<nilli> well algorithm as symmetry allow for very very complex symmetries most people will never name a symmetry
02/05 12:26:46<nilli> but is important to realize as such
02/05 12:28:14<stoopkid> well, there is some sort of relation here to the "logical harmony" stuff
02/05 12:29:26<nilli> in language we also apply these very complex symmetries to achieve expressiveness
02/05 12:30:04<stoopkid> basically constructing an object / proof / whatever is "information preserving", whatever you put into something, should be able to get back out, and starting with an arbitrary object, you should be able to decompose it and put it back together
02/05 12:30:43<nilli> exactly
02/05 12:30:50<stoopkid> all the logic rules are devised around this principle and their associated computational properties are essentially derived from this
02/05 12:30:58<nilli> and that is the holygrail
02/05 12:31:23<stoopkid> well i guess you came to the right place? XD
02/05 12:32:46<stoopkid> this is actually what i've just mostly finished proving recently, that my rulesets actually satisfy this information-preserving property
02/05 12:36:35<nilli> ok, so maybe  you are missing the property of a symmetry between  two systems, not two objects
02/05 12:37:05<nilli> im not totally sure what is it that I try to say here
02/05 12:37:54<nilli> but there is some form we use that is very simplfy
02/05 12:39:45<nilli> is limited , yet allow for the extensive form to be form
02/05 12:40:13<nilli> that simple form is a binary form
02/05 12:40:16<stoopkid> in these terms i guess you could say we're missing the symmetry between the version of the logic for the server/full nodes and the version for client/light nodes
02/05 12:41:06<stoopkid> it's there in lambda-auth, but we have to extend that "symmetry" into the rest of MLTT
02/05 12:42:34<nilli> in order to extend that you must formulate a missing part in MLTT,
02/05 12:43:24<nilli> something must be missing there in MLTT
02/05 12:44:44<stoopkid> right, these auth/unauth rules (as applied to MLTT's dependent types & meta-levels) and the two different versions of compilation
02/05 12:45:13<stoopkid> (technically 3 versions but the 3rd is just regular MLTT)
02/05 12:49:31<nilli>  I think that in theory I understand better what you try to do. it might be too big of a task to actualy achieve so maybe you need to frame it to a more restricted ground
02/05 12:51:23<nilli> but I guess that this restricted part is what you already have :) so we are back to point A :(
02/05 12:53:29<nilli> you need to explain yourself how to go about it
02/05 12:53:53<stoopkid> well, i'm not sure one way or the other about it yet, i've had to make this restricted version precise and make sure i could reason about it rigorously before i tried to tackle the extensions directly, but that's what i've now got so i'm about to try to push forward into the authentication extensions and hopefully HMCa will help out with that
02/05 12:54:37<nilli> was that the reason Ohad eventually reason against MLTT?
02/05 12:55:01<stoopkid> not even related afaik
02/05 12:55:37<nilli> I hope so since i dont wish to end up the same way :)
02/05 12:56:19<stoopkid> his concern(?) was about the undecidability of theorem proving, i.e. that our logic is general enough to express arithmetic, and about the fact that the logic is constructive rather than classical or... other?
02/05 12:57:20<stoopkid> he also seemed to have some misconceptions and think that proof-checking was also undecidable in MLTT-TFPL, not sure if he still thinks that (it's not the case :)
02/05 12:57:34<nilli> anyway must go now. and will think about it all  more later
02/05 12:57:58<stoopkid> alright, take care, talk to you later
02/05 12:58:32<nilli> thanks , have fun
02/05 13:02:54*** Quit: nilli (545eca87@gateway/web/freenode/ip.84.94.202.135) left #AutoNomic: Ping timeout: 260 seconds
02/05 14:50:30<stoopkid> ok maybe MLTT-auth won't be so bad it's just its proofs of correctness & security that are gonna be tough
02/05 14:52:51<stoopkid> polymorphism and dependent types don't really change anything except for deferring the question of what type of tree is getting auth'd/unauth'd until they're actually called
02/05 14:55:17*** Quit: jibble_ (uid48680@gateway/web/irccloud.com/x-qfejutnriawlqsek) left #AutoNomic: Quit: Connection closed for inactivity
02/05 15:05:07*** Quit: koom (~sirdancea@109.107.211.244) left #AutoNomic: Ping timeout: 256 seconds
02/05 15:08:16<stoopkid> heh, now i'm less concerned about MLTT-auth itself and more about whether the rules are devised well enough to internally prove security properties about authenticated operations, but i guess we won't know until we prototype and test it
02/05 15:10:19<stoopkid> well, hrm, alright, i'd say modulo a few details we're pretty much ready for MLTT-auth implementation and i'll try to solidify its proofs as we go along
02/05 15:27:10<stoopkid> HMCa: if you want to walk me through how to translate from my natural deduction rules into N3 then i'd prefer to implement it that way and try to keep us all on the same page, and so that we can possibly just fix up univar code and keep going from where we left off, and so that we can use the hashing scheme you've already devised
02/05 15:30:36<stoopkid> i guess in the meantime i'll just work on trying to make the MLTT-auth rules precise and demonstrating their correctness/security, though hypothetically we could kill two birds with one stone if we do what i just suggested
02/05 17:17:08<stoopkid> heh, yea i'm having trouble finding anywhere that actually needs a change, i'm kind of wondering if you can just add the auth/unauth rules to any "reasonable" logic and it just works
02/05 17:24:54<stoopkid> presumably no if we need HMCa's one special invention to make the hashing scheme work?
02/05 17:29:56<stoopkid> i think it has something to do with this? https://en.wikipedia.org/wiki/Randomness_extractor
02/05 17:37:32<stoopkid> hrm yea assuming the cryptographic auth/unauth primitives are secure then we should be able to use the MLTT to prove that an authenticated operation actually performs correctly and generates an auth'd value corresponding to the correct result, that's pretty neat
02/05 17:40:53<stoopkid> this might not even be necessary we might get the guarantee for free modulo assumption of correctness of the operation in the ideal mode, i'm not entirely sure yet
02/05 17:48:56<stoopkid> so, modulo HMC's one special invention, this appears to be what we do:
02/05 17:50:19<stoopkid> take the lambda auth typing and type-formation rules and switch them out with our MLTT rules, leaving the ones for auth/unauth in place
02/05 17:51:17<stoopkid> that's figure 6 here http://soc1024.ece.illinois.edu/gpads/gpads-full.pdf
02/05 17:51:48<stoopkid> figure 7 "standard single-step and multi-step operational rules"
02/05 17:52:02<stoopkid> switch that out with our "standard"
02/05 17:52:39<stoopkid> figure 8 "operational rules for authenticated values"
02/05 17:52:46<stoopkid> keep that pretty much exactly the same
02/05 17:53:10<stoopkid> figure 9, shallow projection rules
02/05 17:53:50<stoopkid> follows a pretty straightforward pattern, and we're actually already abstracting out this pattern in our standard MLTT, so that's just "apply the same pattern"
02/05 17:54:58<stoopkid> figure 10 agreement relation, same thing, follows a pattern that we're already abstracting
02/05 17:55:36<stoopkid> (note that these rules internalize the agreements so they can be reasoned about from within the logic)
02/05 17:58:25<stoopkid> yea i need to get this implemented and actually start testing it..
02/05 18:02:30<stoopkid> so... lambda closure combinators powering inferencing.... i mostly remember how that works, though i probably need to brush up on a couple low-level details here and there
02/05 18:07:07<stoopkid> N3/extended euler... idk though, still a dead end for me unfortunately, still not entirely sure how you want that to work
02/05 18:08:53<stoopkid> @ nilli so i guess we're not really back to point A after all, pretty well beyond it actually, though still not quite all the way there yet, lots of testing/tweaking/proving left to do still
02/05 18:40:44-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/05 18:40:52*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/05 18:45:39*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Read error: No route to host
02/05 18:45:57-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
              *** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/05 19:02:20*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
02/05 19:43:23<stoopkid> yep just rewatched the lambda auth video and he explains at the end that the only reason they didn't extend their implementation to closures & polymorphism was because they basically implemented the shallow projections as a hack in the compiler that generated the shallow projection functions for a given concrete type at compile-time and substituted them in, but this wouldn't work for polymorphic & dependent types
02/05 19:44:00<stoopkid> that need to generate/access these shallow projection functions on demand during both type-check & run-time
02/05 20:20:24<stoopkid> HMCa: so i take it unauth is what actually directs the message-passing between verifier and prover?
02/05 20:21:29<stoopkid> i.e. verifier tries to run some operation on an authenticated value t_V. t_V is actually just a hash of the (shallow projection of) the actual value, so, in order to run the operation its gonna have to query the prover
02/05 20:22:19<stoopkid> then prover runs its version of the operation, generates a proof-stream while it does *its* unauths, sends this back to the verifier, which then completes its operation using the proof-stream
02/05 21:03:19<stoopkid> seems so, or at least, functions that operate on authenticated values and end up unauthing them direct the message-passing, the verifier's gotta get the proof-stream there somehow
02/05 21:04:52<stoopkid> and it does seem indeed that the prover cannot trick the verifier due to this requiring a hash-collision to be found, no matter what the function is
02/05 21:10:26<stoopkid> because basically the verifier is repeating all the computation steps, all it's not doing is saving the large input data structure, the proof stream is basically the execution stream the prover follows, giving the verifier just as much as it need to authenticate up to that point of execution, and then continue execution one more step
02/05 21:11:04<stoopkid> pretty wild
02/05 21:19:21<stoopkid> so yea afaict there is essentially no change to be made regarding the authentication, all this would work just as well if using polymorphism or dependent types, seems if all this was implemented directly as the natural deduction rulesets they specified (switched out with our MLTT-TFPL "standard") then we would avoid all the compiler hacks and basically get authentication for free just by adding these rules
02/05 21:19:40<stoopkid> well, + HMC's one new invention, to maintain the cryptographic security
02/05 21:22:34<stoopkid> although we can see that it would already be incredibly difficult to fool a verifier by *any* means
02/05 21:26:54<stoopkid> even if cryptographic security was somehow weakened by clever choices of data/identifiers/names/structure/whatever by the users, not only do they have to weaken the security to the point where its feasible to find hash-collisions, they have to weaken it to the point that it's feasible to find hash-collisions *at every recursive call to the function* after its divergence from correctness, and we can make it even
02/05 21:26:55<stoopkid> harder by having the verifier actually partially type-check the values in the proof-stream as it reads them off, i.e. typecheck Bin(h1,h2) as being a valid object of type Tree (from the fetch example in lambda auth paper), under the assumption that h1 and h2 are the hashes of valid objects of type Tree
02/05 21:27:31<stoopkid> so then not only do they have to find a hash-collision at every computation step past the point of divergence from correctness, every hash-collision they find must still type-check!
02/05 21:29:20<stoopkid> this doesn't seem to be any serious overhead, its generally assumed that all incoming data from remote sources is "cleansed" (basically meaning: "type-checked") before anything else is done with it
02/05 21:31:16<stoopkid> so, that also answers my question about whether we need to make specific proofs of correctness/security internally in MLTT in specific contexts: no, we *do* get it for free, in *all* cases, with just a few simple rules, amazing
02/05 21:32:34<stoopkid> almost sounds impossible but then it's so simple; amazing
02/05 21:38:51<stoopkid> somebody in the audience in the youtube lecture mentioned something about using monads to generate the verifier and prover modes out of the ideal mode, and the lecturer (mike hicks i think?) mentioned that "the student andrew" (presumably amiller?) had worked on some agda code along those lines and had gotten pretty far along with proofs of correctness/security. it sounded interesting but i still don't really have
02/05 21:38:56<stoopkid> a great idea of how to use monads like that nor can i find amiller's agda code that he referenced
02/05 21:41:04<stoopkid> i should check monads out some more. i remember you can use monads & kleisli composition to do all kinds of interesting "whole program" transformations and that's probably what's being referred to there, i'm assuming
02/05 21:43:01<stoopkid> so, anyway, i'm noticing an inherent inefficiency here, but, inherent is the keyword there, i don't think we have a way to avoid it for any kind of authenticated data-structure
02/05 21:43:52<stoopkid> it's one thing to have the verifier repeat all steps of computation, but, on top of that these execution traces have to be passed over the network
02/05 21:44:24<stoopkid> so, it really only makes sense for "small program, large data"
02/05 21:45:35<stoopkid> but, the latter seems reasonable, large data is the only data we need to store remotely on potentially untrusted servers, the former is somewhat limiting though..
02/05 21:46:01<stoopkid> but hey, who am i to complain about limitations when half of this still seemed like magic earlier today XD
02/05 21:51:15<stoopkid> i guess you have to weigh the space complexity of the execution traces your function can generate against the size of the data being operated over, for some operations it might make more sense to just bulk download all the data, unauthenticated (but you still have the hash, and now you have supposedly all the data so you should be able to recompute the hash to verify that data, so, actually it is still
              <stoopkid> "authenticated" in some sense), run your operations, rehash it all and then send the new datastructure back to the server
02/05 21:53:22<stoopkid> trivial example: any operation that's gonna run over every piece of data in the data-structure; then you might as well just be downloading all of it and running it yourself, saving time & network space
02/05 21:55:12<stoopkid> but then, with how simple & built-in these rules are, we should just be able to mix & match wherever to do just about whatever kind of time/space/network-usage tradeoffs we want, fairly straightforwardly
02/05 21:55:43*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/05 21:56:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/05 21:58:41<stoopkid> koo5[m]: after you finish up with ATCHC then run through the fetch & update examples in lambda auth and you'll see what i'm talking about (in ~/notes/ND_auth i list out all the steps of fetch example, if you need to reference)
02/05 21:59:09<stoopkid> daemoz: how's everything with you btw?
02/05 22:06:05<stoopkid> hrm, it does seem that all the critical CRUD database access operations are O(log the # of leaves in the tree being operated over)
02/05 22:06:32<stoopkid> at least for operations on a single object in the tree
02/05 22:08:10<stoopkid> HMCa: well, now i see why order of inferencing is so critical
02/05 22:18:37<stoopkid> the only big issue with lambda-auth is that it kind of leaves open the question of what the verifier & prover are actually going to do with the output of the functions they compute
02/05 22:19:33<stoopkid> on the fetch example, the prover can just drop the output value and return the proof stream to the verifier
02/05 22:20:20<stoopkid> on the update examples, the idea would presumably be for the prover to actually update the data-structures it's storing
02/05 22:22:53<stoopkid> all of that seems to be left up to implicit side agreements between prover & verifier
02/05 22:34:18<stoopkid> alright, well, that doesn't seem to be a big deal
02/05 22:36:10<stoopkid> i guess all that's fairly straightforward after all, i guess what i'll work on now is moving my ND rulesets into some kind of abstract unification-based resolution procedure in preparation for implementation
02/05 22:39:18<HMCa>  <@stoopkid> even if cryptographic security was somehow weakened by clever choices of
02/05 22:39:21<HMCa>              data/identifiers/names/structure/whatever by the users, not only do they have to weaken the security
02/05 22:39:24<HMCa>              to the point where its feasible to find hash-collisions, they have to weaken it to the point that
02/05 22:39:28<HMCa>              it's feasible to find hash-collisions *at every recursive call to the function* after its divergence
02/05 22:39:30<HMCa>              from correctness, and we can make it even
02/05 22:41:14<stoopkid> heya! :) was starting to worry about you :P
02/05 22:41:23<HMCa> right, the one new invention precludes explicitly making recursion structures with weakened context-level hashes, on purpose by brute force, with any more efficiency than trying to do the same in uniform recursion spaces
02/05 22:42:57<HMCa> we do this by just a salting, which is even generally accepted practice in crypto :-)
02/05 22:43:17<HMCa> we'll just be the first ones salting hashes of universes, and that is kinda special
02/05 22:44:32<stoopkid> can you elaborate on this? why are universes in particular what gets salted and how exactly is the salting occurring?
02/05 22:46:21<HMCa> sec, still reading
02/05 22:48:20<HMCa>  <@stoopkid> a great idea of how to use monads like that nor can i find amiller's agda code that he referenced
02/05 22:48:37<HMCa> it should be on his github iirc
02/05 22:48:45<HMCa> on a branch iirc (?)
02/05 22:48:49<stoopkid> hrm ill check again
02/05 22:49:27<HMCa> stoopkid> so, anyway, i'm noticing an inherent inefficiency here, but, inherent is the keyword there, i don't think we have a way to avoid it for any kind of authenticated data-structure
02/05 22:49:39<HMCa> there are a few, heh
02/05 22:50:55<HMCa> in particular, sometimes cuts can be introduced by the verifier, given certain constraints (which for us could be carried in signature...)
02/05 22:51:03<stoopkid> a few ways to avoid the inefficiencies you mean?
02/05 22:51:10<HMCa> both
02/05 22:51:18<HMCa> a few inefficiencies...
02/05 22:51:26<HMCa> and, for some, a few ways to avoid
02/05 22:51:33<stoopkid> gotcha
02/05 22:51:58<HMCa> and some that I'm not as sure about avoiding, heh
02/05 22:53:03<HMCa> 2 <@stoopkid> i guess you have to weigh the space complexity of the execution traces your function can generate
02/05 22:53:30<HMCa> right, this is why it kinda gets that "return to mainframe" feel...
02/05 22:54:57<HMCa> we're building one computer with massive data and kb warehousing, with epic amounts of really tiny programs coordinating around it, in a sense
02/05 22:59:00<stoopkid> i see what you mean there now
02/05 22:59:25<stoopkid> thought i did before, now i really do XD
02/05 23:00:16<HMCa> heh
02/05 23:08:35<stoopkid> uh, https://en.wikibooks.org/wiki/Haskell/Zippers
02/05 23:09:12<stoopkid> went there thinking this might be a useful way to optimize certain operations on the ADSs, didn't expect to find most of the article explaining how zippers == derivatives lol
02/05 23:12:41<stoopkid> i guess i should stop prematurely optimizing :)
02/05 23:12:56<HMCa> brb
02/05 23:23:07<stoopkid> so you agree with my notion that if we formulate the MLTT implementation directly as natural deduction rules, then we can (almost trivially) extend it to MLTT-auth by just adding those exact same couple auth rules to standard MLTT rules augmented with proof-stream info?
02/05 23:24:57<stoopkid> i haven't run through an example that uses polymorphism or dependent types yet but, going over it in my head i can't see how it would ever be doing anything really different than what lambda-auth already does, at least as far as the actual authentication goes
02/05 23:29:44<stoopkid> it wouldn't be.. it's all just exactly the same thing it would be executing in ideal mode, but basically delayed behind matching hashes to the proof-stream..
02/05 23:30:42<stoopkid> and for prover it's all just exactly the same thing it would be executing in ideal mode, undelayed but generating the proof-stream as it goes..
02/05 23:33:20<stoopkid> so one good/clean optimization would be caching by the verifiers, i.e. keeping the top of the tree down to some reasonable depth and then selectively keeping around lower parts of the tree that are frequently used
02/05 23:34:11<stoopkid> then the verifier just computes as if it's in ideal mode until it hits an auth'd value (hash that it doesn't have the actual value for) and then it queries the prover
02/05 23:34:25<stoopkid> and now i can just say queries "the network"
02/05 23:36:04<stoopkid> and every verifier/light-client node could do this selective caching independently of the other clients, just using the same on-chain code
02/05 23:38:43<stoopkid> and i guess that's why literally everything on-chain must be auth'd, while not losing anything in terms of efficiency really
02/05 23:40:20<stoopkid> it might even be the case that any attempt to force it to be more efficient by restricting what gets auth'd and when would actually make it *less* efficient by reducing possible generality & flexibility
02/06 00:37:21* stoopkid reading about lambda prolog again
02/06 01:05:29<stoopkid> HMCa: so, how closely is your planned inferencer related to lambda prolog?
02/06 05:25:31*** Join: nilli (258e29ae@gateway/web/freenode/ip.37.142.41.174, (unauthenticated): 37.142.41.174 - http://webchat.freenode.net)
02/06 05:27:24<nilli> hi stoopkid, its looks like you understand something in a different way no so it allow you to move forward, could not follow what it is.
02/06 05:27:52<nilli> So when you got the time you may be able to walk me through it
02/06 05:30:20<nilli> I realize that in order to really understand I will need to learn much more then I was whiling to so far. maybe I will now :)
02/06 06:01:45*** Join: shaowei (~textual@218.30.116.183, (unauthenticated): Textual User)
02/06 06:33:29*** Quit: nilli (258e29ae@gateway/web/freenode/ip.37.142.41.174) left #AutoNomic: Ping timeout: 260 seconds
02/06 07:01:41*** Quit: shaowei (~textual@218.30.116.183) left #AutoNomic: Quit: My MacBook has gone to sleep. ZZZzzz…
02/06 07:22:51*** Join: shaowei (~textual@218.30.116.3, (unauthenticated): Textual User)
02/06 07:23:29*** Quit: shaowei (~textual@218.30.116.3) left #AutoNomic: Read error: Connection reset by peer
02/06 08:46:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-candkqtntfukshmk) left #AutoNomic: Quit: Connection closed for inactivity
02/06 09:11:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kydhztsficmycdof, stoopkid: stoopkid)
02/06 09:27:35*** Join: GMpow2 (~5@ip4d16fca7.dynamic.kabel-deutschland.de, (unauthenticated): realname)
02/06 11:37:21<stoopkid> hrm, lambda-prolog might be tough; this is a huge theory
02/06 11:37:33<stoopkid> huge body of research, i mean
02/06 11:38:24<stoopkid> and somewhat outside of what i've been working on in MLTT so far
02/06 11:39:05<stoopkid> apparently higher-order unification is a huge topic
02/06 11:39:57<stoopkid> but hrm, how much higher-order unification do we even need to do here, it's fairly well beyond what i thought we had in mind for inferencing
02/06 15:19:21<stoopkid> so, inferencing based on higher-order unification must be constrained due to undecidability, i'm gather that much
02/06 15:19:42<stoopkid> or i should say, higher-order unification *itself* must be constrained due to undecidability...
02/06 15:19:59<stoopkid> so, it's quite obviously well beyond what we need for proof-checking..
02/06 15:20:16<stoopkid> during open-phase though maybe there's no reason not to allow it
02/06 15:45:25-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/06 15:45:31*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/06 18:08:35*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
02/06 18:20:51<stoopkid> here's a simple fix to eliminate our biggest complexity issue: don't allow normalization during type-checking, afaict it's only a convenience?
02/06 18:55:17<stoopkid> http://www.seas.upenn.edu/~sweirich/papers/congruence-extended.pdf
02/06 18:56:07<stoopkid> here's a dependent type system where automatic beta-reduction doesn't happen during type-checking
02/06 18:58:54<stoopkid> so, if we eliminate automatic beta-reduction and only keep the one-step equalities between LHS/RHS of the function definitions, then we don't lose anything except for "convenience" (which for us is probably more of an inconvenience)
02/06 19:01:27<stoopkid> we can use the one-step equalities to rederive the multi-step equalities, and use congruence & type-coercion based on these equalities to get them to type-check correctly without having to do beta-reduction, so then complexity of type-checking is simply linear in the size of the proof
02/06 19:01:43<stoopkid> (afaict?)
02/06 19:04:29<stoopkid> you can sort of simulate this in Agda using the `abstract` keyword
02/06 19:12:26*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-grogwngjkhzkopkh) left #AutoNomic: Ping timeout: 255 seconds
02/06 19:12:34*** Quit: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-dlwdbvbepashyeko) left #AutoNomic: Ping timeout: 252 seconds
02/06 19:12:38*** Quit: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-somqhpzecxcjvkdj) left #AutoNomic: Ping timeout: 256 seconds
02/06 19:12:52*** Quit: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-lezwbvpuofueihex) left #AutoNomic: Ping timeout: 255 seconds
02/06 19:12:53*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-rgxkrtjbppxbgqti) left #AutoNomic: Ping timeout: 255 seconds
02/06 19:12:56*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-wosikuzgmxiffqke) left #AutoNomic: Ping timeout: 252 seconds
02/06 19:13:10*** Quit: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-jargsnggdakbfaij) left #AutoNomic: Ping timeout: 255 seconds
02/06 19:13:22*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-hvksqytragtrfijd) left #AutoNomic: Ping timeout: 252 seconds
02/06 19:47:15*** Join: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-hgxovxerrohziafj, (unauthenticated): @lexx_:matrix.org)
02/06 20:13:33*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-drqjdamoonrlvwuz, (unauthenticated): @koo5:matrix.org)
02/06 20:13:34*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-purcgkagzoqvidep, (unauthenticated): @genuinelyfx:matrix.org)
02/06 20:13:39*** Join: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-ycjcppbmorfdrlhz, (unauthenticated): @daemoz:matrix.org)
02/06 20:13:40*** Join: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-fcycxyicttfrvvsv, (unauthenticated): @tigertigertig:matrix.org)
02/06 20:13:41*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-acyptbbhugmmuwlb, (unauthenticated): @nilli:matrix.org)
              *** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-ymdvklzfhgwecpae, (unauthenticated): @lexxus:matrix.org)
              *** Join: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-cjsdgobjwlgdleiu, (unauthenticated): @deadhand:matrix.org)
02/06 20:29:07*** Quit: GMpow2 (~5@ip4d16fca7.dynamic.kabel-deutschland.de) left #AutoNomic: Ping timeout: 268 seconds
02/06 20:38:13<stoopkid> http://167.88.171.233/workspace/a/subst/Abstract.agda
02/06 20:39:38<stoopkid> so, yea, it's just a convenience
02/06 20:39:44<stoopkid>  / inconvenience
02/06 20:40:33<stoopkid> these proofs are better than having it automatically normalize anyway
02/06 20:42:37<stoopkid> so, if block-verification was entirely constrained to type-checking, this eliminates all complexity issues until we get to actually running the functions
02/06 20:44:35<stoopkid> correct me if i'm wrong but, everything you can prove by having the type-checker do automatic normalization can be done without the automatic normalization, with only the one-step definitional equalities available
02/06 20:46:20<stoopkid> i've mentioned the notion before but i'd never been able to test it out until i discovered agda's `abstract` keyword
02/06 21:01:39*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/06 21:01:57*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/06 21:53:44*** Quit: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-hgxovxerrohziafj) left #AutoNomic: Ping timeout: 248 seconds
02/06 21:54:01*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-drqjdamoonrlvwuz) left #AutoNomic: Ping timeout: 260 seconds
02/06 21:54:17*** Quit: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-ycjcppbmorfdrlhz) left #AutoNomic: Ping timeout: 255 seconds
              *** Quit: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-cjsdgobjwlgdleiu) left #AutoNomic: Ping timeout: 248 seconds
              *** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-acyptbbhugmmuwlb) left #AutoNomic: Ping timeout: 252 seconds
              *** Quit: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-fcycxyicttfrvvsv) left #AutoNomic: Ping timeout: 252 seconds
02/06 21:54:19*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-purcgkagzoqvidep) left #AutoNomic: Ping timeout: 248 seconds
02/06 21:54:25*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-ymdvklzfhgwecpae) left #AutoNomic: Ping timeout: 255 seconds
02/07 00:45:08*** Join: GMpow2 (~5@2a02:810a:82c0:1c:59f5:3f48:1fa8:7269, (unauthenticated): realname)
02/07 00:59:58*** Join: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-wxlhkgixgxepccli, (unauthenticated): @deadhand:matrix.org)
              *** Join: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-zmlcgrjbezrxzoee, (unauthenticated): @daemoz:matrix.org)
02/07 01:17:26*** Join: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-flgrffwwutuprcqh, (unauthenticated): @lexx_:matrix.org)
02/07 01:19:41*** Join: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-mdluoxuuskftenft, (unauthenticated): @tigertigertig:matrix.org)
02/07 01:22:07*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-kkdxzgdnqhijcsot, (unauthenticated): @lexxus:matrix.org)
02/07 01:23:12*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-tydlellionnihcwb, (unauthenticated): @genuinelyfx:matrix.org)
02/07 01:24:08*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-kafhkvghlzwbnsgd, (unauthenticated): @koo5:matrix.org)
02/07 01:26:11*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-tpmhfvwjszdzyslm, (unauthenticated): @nilli:matrix.org)
02/07 04:10:00<stoopkid> yea that's the best solution i can come up with so far: disable automatic reduction during closed-phase and just use code as static proofs that can distribute more code that can run during open-phase, along with the type for constraining the next block (or any deltas to it)
02/07 04:24:31<stoopkid> so, all closed-phase would be able to do is sit there, listen for queries, validate them for well-formedness, if they're well-formed, type-check them, if they type-check, then direct open-phase to run w/e functions are contained
02/07 04:50:37<stoopkid> yea if i were gonna go through and highlight everything i thought represented open-phase in the description of bitcoin, it would be literally everything but block-verification
02/07 04:51:45<stoopkid> well, almost, i guess there's other RPCs besides for getting a new block, and these would filter through closed-phase
02/07 05:22:42<stoopkid> hrm, the main place that this would be more than an inconvenience is the work-verification part of block-verification
02/07 05:23:27<stoopkid> under the assumption that work-verification is mutable but... i thought we determined that the work is actually not mutable once a chain begins
02/07 05:38:14-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
02/07 05:38:19*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/07 06:23:30*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
02/07 06:37:23*** Join: nilli_ (258e29ae@gateway/web/freenode/ip.37.142.41.174, (unauthenticated): 37.142.41.174 - http://webchat.freenode.net)
02/07 06:46:25<nilli_> stoopkid for a moment there I had the desire to understand things in a more concrete way. I agree that its much too much for me to deal with. :)
02/07 06:49:53<nilli_> every once in a while I feel like  I need to learn much more in order to actualy add anything valuable to your work and that all my talk is on an abstract level of concepts that do not contribute anything of value
02/07 06:51:33<nilli_> So feel free to direct me onto anything that you think I should do if any. (I was resisting much of it in the past for different reasons , but now things changed)
02/07 06:56:11<nilli_> anyway on a related subject last night I spend a few hours on a what felt like as battlefield with a hacker that gained access to one of my email accounts that is connected to an exchange
02/07 06:59:37<nilli_> I think that I was able block his access to my email, but he manged to get into the exchange account. Im quite sure that in order to withdrawal anything he must gain accsess back to my email
02/07 07:02:29<nilli_> but still not sure how I can recover access to the exchange account. hope to get some info from support soon
02/07 07:04:59<nilli_> anyway really made me feel the problem of this new world where each individual as inexperience with tech as most are, still have to be the sole guard of all his knowledge and assets
02/07 07:12:07<nilli_> one other great though that I had after all this experience last night, is that having debts is much safer then having assets, no one try to steal your debts and your debt is secured by others
02/07 07:14:49<nilli_> also made me realize how much more secure one is if have the capacity to produce something other then accumulate assets (well other then real estate maybe with is something easy to store, in times of peace though)
02/07 07:15:52<nilli_> so the best store of value is still our ability to produce.. have skills and knowledge.
02/07 07:18:20<nilli_> ok talk to you later .
02/07 07:22:43*** Quit: nilli_ (258e29ae@gateway/web/freenode/ip.37.142.41.174) left #AutoNomic: Ping timeout: 260 seconds
02/07 08:57:10*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 264 seconds
02/07 08:57:14*** Quit: GMpow2 (~5@2a02:810a:82c0:1c:59f5:3f48:1fa8:7269) left #AutoNomic: Read error: Connection reset by peer
02/07 09:49:54*** Join: Deadhand (~deadhand@99.246.2.68, (unauthenticated): deadhand)
02/07 09:57:53*** Quit: Deadhand (~deadhand@99.246.2.68) left #AutoNomic: Ping timeout: 248 seconds
02/07 10:00:55*** Join: Deadhand (~deadhand@99.246.2.68, (unauthenticated): deadhand)
02/07 10:12:03-SaslServ- koom!~sirdancea@80.188.30.113 has just authenticated as you (sirdancealot)
02/07 10:12:09*** Join: koom (~sirdancea@80.188.30.113, sirdancealot: koo5)
02/07 10:14:29-SaslServ- kook!~sirdancea@80.188.30.113 has just authenticated as you (sirdancealot)
02/07 10:14:35*** Join: kook (~sirdancea@80.188.30.113, sirdancealot: koo5)
02/07 10:17:08*** Quit: koom (~sirdancea@80.188.30.113) left #AutoNomic: Ping timeout: 256 seconds
02/07 10:17:20*** Part: editable-koo (~user@167.88.171.233) left #mycroft: "Using Circe, the loveliest of all IRC clients"
02/07 10:20:37*** Quit: kook (~sirdancea@80.188.30.113) left #AutoNomic: Ping timeout: 256 seconds
02/07 11:09:09*** Quit: Deadhand (~deadhand@99.246.2.68) left #AutoNomic: Ping timeout: 265 seconds
02/07 11:53:01*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
02/07 14:37:26<stoopkid> "I agree that its much too much for me to deal with. :)" not sure i ever said that so not sure who you're agreeing with there :) it's my personal mission to make this material easier to deal with
02/07 14:37:38<stoopkid> wrt this hacker, yikes, good luck :/
02/07 17:40:40*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/07 20:40:10*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
02/08 01:14:57*** Join: suiqiu__ (~suiqiublo@116.225.36.201, (unauthenticated): realname)
              *** Quit: suiqiu_ (~suiqiublo@101.83.163.136) left #AutoNomic: Read error: Connection reset by peer
02/08 02:28:24*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 256 seconds
02/08 02:40:38*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
02/08 07:00:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/08 08:52:42*** Quit: suiqiu__ (~suiqiublo@116.225.36.201) left #AutoNomic: Read error: Connection reset by peer
02/08 08:53:14*** Join: suiqiu__ (~suiqiublo@116.225.36.201, (unauthenticated): realname)
02/08 14:24:22*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kydhztsficmycdof) left #AutoNomic: Ping timeout: 240 seconds
02/08 14:28:07*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-anmlbxksnjbwheqw, stoopkid: stoopkid)
02/08 15:30:22*** Quit: suiqiu__ (~suiqiublo@116.225.36.201) left #AutoNomic: Read error: Connection reset by peer
02/08 15:31:36*** Join: suiqiublockchain (~suiqiublo@116.225.36.201, (unauthenticated): realname)
02/08 15:56:29*** Netsplit: *.net *.split (Use /WL to see who left)
02/08 16:29:54*** Netmerge: *.net *.split, split 2 days 22 hours 26 minutes 25 seconds ago (Use /WL to see who's still missing)
02/08 16:29:55*** Mode change: +o ChanServ    on #AutoNomic by cherryh.freenode.net (server)
02/08 19:57:20*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
02/09 02:04:40*** Quit: suiqiublockchain (~suiqiublo@116.225.36.201) left #AutoNomic: Remote host closed the connection
02/09 04:18:14*** Join: jenny896 (~jteokkyh@108.61.171.144, (unauthenticated): twdogepw)
02/09 04:18:20<jenny896> ██╗██████╗  ██████╗   ███████╗██╗   ██╗██████╗ ███████╗██████╗ ███╗   ██╗███████╗████████╗███████╗    ██████╗ ██████╗  ██████╗
              <jenny896> ██║██╔══██╗██╔════╝   ██╔════╝██║   ██║██╔══██╗██╔════╝██╔══██╗████╗  ██║██╔════╝╚══██╔══╝██╔════╝   ██╔═══██╗██╔══██╗██╔════╝
              <jenny896> ██║██████╔╝██║        ███████╗██║   ██║██████╔╝█████╗  ██████╔╝██╔██╗ ██║█████╗     ██║   ███████╗   ██║   ██║██████╔╝██║  ███╗
              *** Quit: jenny896 (~jteokkyh@108.61.171.144) left #AutoNomic: Remote host closed the connection
02/09 04:18:47<stoopkid> the internet: it's a series of tubes
02/09 04:25:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/09 04:26:37*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/09 04:39:56<stoopkid> oh i see, i'm supposed to zoom out, and they're supposed to not flood XD
02/09 04:50:57*** Join: nilli (50f68b58@gateway/web/freenode/ip.80.246.139.88, (unauthenticated): 80.246.139.88 - http://webchat.freenode.net)
02/09 05:07:21*** Quit: nilli (50f68b58@gateway/web/freenode/ip.80.246.139.88) left #AutoNomic: Ping timeout: 260 seconds
02/09 08:47:54*** Quit: cantora (sid147800@gateway/web/irccloud.com/x-htapxontsprggqbk) left #AutoNomic: 
02/09 08:48:11*** Join: cantora (sid147800@gateway/web/irccloud.com/x-lebyhemagcdhycwc, cantora: cantora)
02/09 13:39:40*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 240 seconds
02/09 13:39:53*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/09 16:55:12*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/09 16:55:39*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/09 17:33:59*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-anmlbxksnjbwheqw) left #AutoNomic: 
02/09 17:34:46*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tjwuwcnjjnutrfey, stoopkid: stoopkid)
02/10 01:47:48*** Join: biscuit_ (8bc12ac3@gateway/web/freenode/ip.139.193.42.195, (unauthenticated): 139.193.42.195 - http://webchat.freenode.net)
02/10 02:43:04*** Quit: biscuit_ (8bc12ac3@gateway/web/freenode/ip.139.193.42.195) left #AutoNomic: Quit: Page closed
02/10 16:39:58*** Quit: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-mdluoxuuskftenft) left #AutoNomic: Ping timeout: 240 seconds
02/10 16:41:23*** Netmerge: *.net *.split, split 1 day 6 hours 50 minutes 42 seconds ago (Use /WL to see who's still missing)
              *** Mode change: +o ChanServ    on #AutoNomic by cherryh.freenode.net (server)
02/10 16:44:21*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-tpmhfvwjszdzyslm) left #AutoNomic: Ping timeout: 252 seconds
02/10 16:44:31*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-kafhkvghlzwbnsgd) left #AutoNomic: Ping timeout: 240 seconds
02/10 16:44:44*** Quit: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-zmlcgrjbezrxzoee) left #AutoNomic: Ping timeout: 256 seconds
02/10 16:45:18*** Quit: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-wxlhkgixgxepccli) left #AutoNomic: Ping timeout: 256 seconds
02/10 16:45:21*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-kkdxzgdnqhijcsot) left #AutoNomic: Ping timeout: 240 seconds
02/10 16:45:44*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-tydlellionnihcwb) left #AutoNomic: Ping timeout: 256 seconds
02/10 16:45:47*** Quit: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-flgrffwwutuprcqh) left #AutoNomic: Ping timeout: 260 seconds
02/10 18:07:55*** Join: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-optbnzpaajwvzlsl, (unauthenticated): @lexx_:matrix.org)
02/10 18:33:55*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-svczgsevsusndmeh, (unauthenticated): @koo5:matrix.org)
              *** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-ruuyhxpyxfpgshkl, (unauthenticated): @genuinelyfx:matrix.org)
02/10 18:34:00*** Join: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-mgudmhycqycranaf, (unauthenticated): @daemoz:matrix.org)
              *** Join: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-jmiqjimubbkmwqwi, (unauthenticated): @tigertigertig:matrix.org)
02/10 18:34:01*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-zzikhwelxoxugveh, (unauthenticated): @lexxus:matrix.org)
              *** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-yslnbmrtkvkkimps, (unauthenticated): @nilli:matrix.org)
02/10 18:34:02*** Join: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-tuucranqonmxitey, (unauthenticated): @deadhand:matrix.org)
02/11 20:00:10*** Nick change: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) is now known as daemoz
02/12 14:32:53*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/12 14:33:18*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/12 16:01:49*** Quit: ChanServ (ChanServ@services.) left #AutoNomic: shutting down
02/12 16:10:21*** Join: ChanServ (ChanServ@services., (unauthenticated): Channel Services)
              *** Mode change: +o ChanServ    on #AutoNomic by cherryh.freenode.net (server)
02/12 16:46:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Quit: WeeChat 1.9.1
02/12 17:17:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/12 20:08:29<stoopkid> HMCa: any thoughts on cubical lately?
02/12 20:12:04<stoopkid> if it's a viable option i think it would be preferable to standard MLTT-TFPL, even if it's not the end-all-be-all
02/12 20:14:33<stoopkid> standard MLTT-TFPL seems to be at a crossroads of "should we be able to talk about intensional properties or should we only be able to consider structural equivalence", and choosing neither and so getting benefits of neither, if we can get the benefits of HITs, univalence & funext from cubical i think that would be preferable to not doing so
02/12 20:16:49<stoopkid> most of my notions as to how to bound complexity in a "clean" way end up throwing me back into HoTT stuff (somewhat ironically, considering that HoTT is what specifically rejects talking about intensional properties)
02/12 20:20:19<stoopkid> mostly because i don't see why we should have to reject HoTT principles in order to achieve this
02/12 20:23:12<stoopkid> my take on what the issue is is our treatment of intensional vs. extensional properties and their relationship to propositional equality and substitution of equals for equals
02/12 20:23:53<stoopkid> functions in type theory are ofc actually proof-trees; proofs for the implication connective
02/12 20:24:23<stoopkid> we're given a way to use them: application, as an algebraic signature we basically have:
02/12 20:24:36<stoopkid> <implication_proofs, modus_ponens>
02/12 20:25:10<stoopkid> isomorphism in this signature would effectively correspond to extensional equality of functions
02/12 20:26:18<stoopkid> essentially the rest of the signature reveals or hides structure on the carrier set
02/12 20:27:37<stoopkid> when we substitute functions for each other based on function extensionality, we should only be able to do so under this signature that justifies it by the nature of its isomorphisms
02/12 20:35:07<stoopkid> we could perhaps have other signatures which provide ways to use the implication_proofs in order to get at their intensional properties in ways that allow us to internally reason about their complexity, without necessarily breaking compatibility with univalence / funext
02/12 20:37:10<stoopkid> i'm trying to find other places this comes up besides for just with intensional vs. extensional properties of functions
02/12 20:38:15<stoopkid> informally, what i'm thinking of is like Nat vs. ChurchNat
02/12 20:40:46<stoopkid> we've got an isomorphism between the signatures <Nat,0,suc,add,mult> and <ChurchNat, Church-zero, Church-suc, Church-add, Church-mult>
02/12 20:48:20<stoopkid> now, for ChurchNats, we can make propositions like, "forall (f : ChurchNat A), (x : A) -> exists y : ((A -> A) -> A) , f x == y
02/12 20:52:27<stoopkid> does that make sense for Nat, not really, you can't apply a Nat like a function, but a ChurchNat is a function f : A -> (A -> A) -> A, so, you can apply it to an argument of type A, so Nats and ChurchNats aren't really all the way isomorphic, they differ in some of their lower-level implementation details and can only be considered equivalent under signatures that only make certain operations available on the Nats
              <stoopkid> and ChurchNats and have an isomorphism between these signatures in the traditional abstract algebraic sense
02/12 20:54:57<stoopkid> structure preserved by isomorphisms between these signatures determines the notion of structural equivalence under these signatures, and then that seems to me to be exactly the boundary between intensional vs. extensional; extensional properties relative to a signature make use of only what's provided by the signature, intensional properties relative to a signature make use of arbitrary properties of the carrier
              <stoopkid> set not necessarily provided for in the signature
02/12 23:31:21<stoopkid> here's a better example, Nat vs. BinNat
02/12 23:32:21<stoopkid> one of the go-to examples for the power of univalence is that you can substitute programs implemented with the more efficient BinNat in place of programs implemented with the less efficient Nat, based on the isomorphism between Nat and BinNat
02/12 23:33:50<stoopkid> which is fantastic, that's exactly what you want, but then
02/12 23:35:10<stoopkid> because Nat and BinNat are structurally equivalent and there's only a single notion of structural equivalence, i.e. one signature, fixed globally, and it's this particular signature in which Nat == BinNat, you can't prove that BinNat is a smaller/more-efficient representation to use in the first place!
02/12 23:37:50<stoopkid> we use one level of abstraction in order to substitute structurally equivalent things for each other, but we rely on intensional properties relative to this level of abstraction to make any kind of distinction about which concrete instance is most preferable to use in practice
02/12 23:56:57<stoopkid> so, assuming cubicaltt is viable (it's got a paper proving canonicity, but, i guess that's not everything), then to manage complexity in the manner i've described so far would require modifying the cubicaltt to restrict the applicability of univalence  relative to the signature
02/12 23:59:21<stoopkid> this to me, however, seems like a perfectly natural thing to do, for many reasons besides for just the fact that it would potentially allow for dealing with complexity without breaking the natural system of funext & univalence
02/13 00:02:20<stoopkid> univalence lets you prove some things that are pretty counterintuitive if you don't understand them in this context
02/13 00:02:59<stoopkid> like, because you can't prove that BinNat is a smaller & more efficient representation than Nat, then you must not be able to define propositions that ask about the size of BinNats and Nats, but this isn't the case
02/13 00:03:24<stoopkid> you can make a function "length : BinNat -> Nat"
02/13 00:04:30<stoopkid> you can make a proposition that ostensibly asks what the length of BinNats are, and it will select (BinNat,length)
02/13 00:04:46<stoopkid> and it will also select (Nat, ceil.log_2)
02/13 00:06:44<stoopkid> because there's an isomorphism between BinNat and Nat, so when you path-transport into the statement that BinNats have length `length`, this (Nat, ceil.log_2) is really saying that given n : Nat, the BinNat that corresponds to n under the isomorphism has length ceil.log_2
02/13 00:07:02<stoopkid> (ceil.log_2) n **
02/13 00:07:33<stoopkid> and then similarly vice-versa if you'd defined your length function as "length : Nat -> Nat", then BinNat would give you the "weird" answer
02/13 00:09:54<stoopkid> in order to make a selection between the two structures, their structural equivalence must eventually break down so that you can make a proposition that's true for one structure and false for the other in order to distinguish them
02/13 06:08:15*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/13 06:08:40*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/13 09:13:23*** Quit: reffael (uid237291@gateway/web/irccloud.com/x-rhdjwbonkcbtdgqn) left #AutoNomic: 
02/13 09:13:36*** Join: reffael (sid237291@gateway/web/irccloud.com/x-twmddhjyrezzsqqg, (unauthenticated): reffael)
02/13 09:18:09*** Quit: Tamara_ (sid238709@gateway/web/irccloud.com/x-loapvfqisuvtvale) left #AutoNomic: 
02/13 09:18:21*** Join: Tamara_ (sid238709@gateway/web/irccloud.com/x-nwivgdtgmfbsdgnj, (unauthenticated): Tamara)
02/13 12:12:45*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/13 14:15:12<daemoz> hey all
02/13 15:24:34<koom> hey
02/13 15:24:38<koom> hi nilli[m]
02/13 15:50:43*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/13 15:51:09*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/13 17:54:04*** Join: Bot-o-Nomic (Bot-o-Nomi@gateway/service/github.com/x-nxyimthyuqdewepd, (unauthenticated): GitHub IRCBot - sto0pkid/AutoNomic)
              <Bot-o-Nomic> [AutoNomic] koo5 pushed 1 new commit to master: https://git.io/vA3Ny
              <Bot-o-Nomic> AutoNomic/master 275e058 Your Name: "notes"
              *** Part: Bot-o-Nomic (Bot-o-Nomi@gateway/service/github.com/x-nxyimthyuqdewepd) left #AutoNomic: [No reason given]
02/13 18:41:36*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
02/13 18:44:26*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/13 18:57:57*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 265 seconds
02/14 02:01:57*** Join: salvad (76569b77@gateway/web/freenode/ip.118.86.155.119, (unauthenticated): 118-86-155-119.kakt.j-cnet.jp/118.86.155.119)
02/14 04:32:35*** Quit: salvad (76569b77@gateway/web/freenode/ip.118.86.155.119) left #AutoNomic: Quit: Page closed
02/14 06:28:27*** Join: nilli (258e29ae@gateway/web/freenode/ip.37.142.41.174, (unauthenticated): 37.142.41.174 - http://webchat.freenode.net)
02/14 06:28:45<nilli> hi Koo5 and the rest here
02/14 06:28:59<stoopkid> nilli: heya
02/14 06:29:11<nilli> hey stoop long time
02/14 06:29:33<nilli> how are you? did HMC got back to you?
02/14 06:31:01<stoopkid> pretty good how bout yourself? not except for what's been in public chat here
02/14 06:31:36<nilli> is HMCa going to stay around till genesis or he leave it in your hands now?
02/14 06:32:32<stoopkid> well, i hope & have assumed the former, but, i can't really speak for him on that
02/14 06:32:49<nilli> im good but still not sure about my bittrex account. so dam heard to deal with people only online once you need to figure out something critical
02/14 06:33:47<stoopkid> so what exactly is the situation with your bittrex? (you can pm if you'd prefer)
02/14 06:34:49<nilli> I changed my email address for the account and they approved (after verification process with my ID ) said that will take 72 hours.
02/14 06:36:51<stoopkid> i haven't used bittrex before, how did the hacker gain potential access exactly?
02/14 06:39:51<nilli> never send me instruction what to other than sending a ticket. the ticket that I send to them from that address is gone. so now i cant even communicate from the new address
02/14 06:41:00<stoopkid> not sure what you mean, what tickets?
02/14 06:47:07<nilli> ticket is for the support (had to learn all about it while fighting the hacker)
02/14 06:48:42<nilli> the hacker send me a link from plonix from which I was waiting for something. it was while I was on line with you on the IRC
02/14 06:49:18<nilli> I did not pay much attention and put in my email password
02/14 06:49:26<nilli> it was a phishing thing
02/14 06:50:29<stoopkid> gotcha, so they phished your email password, then how did that relate to your bittrex account?
              <nilli> then he change my password and added his phone and mail as recovery (which i found only later on)
02/14 06:51:49<nilli> I mannaged to get his contacts off but only after he changed the bittrex password (I did not have 2FA since was about to change my phone and was not sure about how to deal with that app)
02/14 06:52:06<nilli> always to many things to learn
02/14 06:52:07<nilli> too
02/14 06:54:21<nilli> I think that I was able to disabled my account before because I realized that something was going but I know that he was able to log in to see whats there and once he realize that he got very motivated
02/14 06:54:45<nilli> anyway I feel like a real idiot,
02/14 06:55:24<stoopkid> were you reusing the same password for your bittrex account that you were for your email? i'm trying to figure out how the hacker got from one to the other
02/14 07:04:30<nilli> he could ask to change password and once had access to my email could verify it
02/14 07:05:59<stoopkid> ah, yea good point, ouch that sucks, do you have to have one of these email-based accounts in order to use bittrex? seems email's quite vulnerable to phishing and then once they're in there they can probably find all kinds of clues to check out bittrex etc...
02/14 07:06:15<nilli> just then I disabled the account since did not know what was going on and how to kick him off my email
02/14 07:07:58<nilli> at some point he send me a link form the email provider (yahoo) saying that there is something going on in the account and I should change the password. once I got into it and changed it he got it . was also a pishing link
02/14 07:08:06<nilli> I just realized that one day later.
02/14 07:09:55<nilli> anyway back to you. how are we doing?
02/14 07:10:50<nilli> would love to send your funds to HMC and have him deal with it :)
02/14 07:11:01<stoopkid> well, i've pretty much run out of fiat so i gotta start exchanging some of this agoras you sent me, been looking into that, your bittrex issues didn't give me a lot of confidence heh
02/14 07:12:16<nilli> yes its a whole different world making a platform then dealing with the actual value it creat
02/14 07:12:52<nilli> it suck these exchanges . you cant even make an account on bittrex now
02/14 07:13:29<nilli> and agora only trade there and on some oriental exchange, so I think
02/14 07:15:21<stoopkid> i've been trying to work out a mechanism for trustless exchange between omni <-> btc without 3rd parties or new experimental features
02/14 07:16:55<nilli> the thing is that some people are very good at dealing with all that trading shit just like some are good at programming and some are just good at friendship  but now one have to be good at the tech of trade
02/14 07:17:23<stoopkid> afaict i've pretty much got it worked out, but, would ideally have it reviewed & tested before i'd start trying to use it for actual exchange
02/14 07:18:32<nilli> well on onmi there is an exchange but you can change for omni  or other omni wallet tokens. you would still need to exchange for bitcoin to get fiat
02/14 07:19:55<stoopkid> right i was looking at the omni dex thing; doesn't seem entirely necessary for either omni<->omni or omni<->btc exchange
02/14 07:20:26<stoopkid> like afaict you should be able to do it with nothing more fancy than 2FA
02/14 07:21:45<stoopkid> have you ever dissected a btc/omni tx to see how it works? it's interesting
02/14 07:23:10<nilli> no. I was not really . I just took a quick look and did not want to exchange for omni token only to bitcoin
02/14 07:23:28<nilli> koo sold a lot. ask him what he did
02/14 07:24:42<stoopkid> he went through bittrex and said he wasn't all that comfortable about it
02/14 07:32:00<stoopkid> i'll probably try to use this trustless exchange mechanism if it passes my tests
02/14 07:36:47<nilli> let me know who it works for you. I might need to use it too soon
02/14 07:37:50<stoopkid> should work, but will see; will hopefully be testing it today or tomorrow
02/14 07:41:12<nilli> OK good luck will talk to you later
02/14 07:41:26<stoopkid> catch ya later
02/14 07:45:57*** Quit: nilli (258e29ae@gateway/web/freenode/ip.37.142.41.174) left #AutoNomic: Ping timeout: 260 seconds
02/14 07:50:53<koo5[m]> Yea i looked into one or two japanese or something exchanges,one was zaif. Neither really worked, but i could recheck at some.point
02/14 07:51:12<koo5[m]> The dex thing sounds interestimg
02/14 07:51:33<koo5[m]> Change to something that changes on some more trustworthy place
02/14 14:36:54*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/14 15:23:17*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
02/15 04:33:41*** Join: ak3e121 (76569b77@gateway/web/freenode/ip.118.86.155.119, (unauthenticated): 118-86-155-119.kakt.j-cnet.jp/118.86.155.119)
02/15 06:44:21*** Quit: ak3e121 (76569b77@gateway/web/freenode/ip.118.86.155.119) left #AutoNomic: Ping timeout: 260 seconds
02/15 09:49:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/15 11:44:40*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
02/15 11:45:05*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/15 11:52:05*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
02/16 01:16:39*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/16 01:17:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/16 07:37:48*** Join: cmpl (b534416b@gateway/web/freenode/ip.181.52.65.107, (unauthenticated): 181.52.65.107 - http://webchat.freenode.net)
02/16 07:38:32*** Quit: cmpl (b534416b@gateway/web/freenode/ip.181.52.65.107) left #AutoNomic: Client Quit
02/16 08:16:34*** Join: Axiomatic (2f11ddb4@gateway/web/freenode/ip.47.17.221.180, (unauthenticated): ool-2f11ddb4.dyn.optonline.net/47.17.221.180)
02/16 08:37:12*** Quit: Axiomatic (2f11ddb4@gateway/web/freenode/ip.47.17.221.180) left #AutoNomic: Ping timeout: 260 seconds
02/16 09:25:20*** Join: nilli (4d7d8e3a@gateway/web/freenode/ip.77.125.142.58, (unauthenticated): 77.125.142.58 - http://webchat.freenode.net)
02/16 09:25:31<nilli> hi
02/16 09:30:21<koo5[m]> Hi
02/16 09:36:52<nilli> hey koo5  are you going forward with your plan to leave work and spend time developing autonomic?
02/16 09:44:26<koo5[m]> Absolutely, ive signed the papers and im using up my vacation days now
02/16 09:45:54<koo5[m]> http://167.88.171.233/AutoNomic/Blog
02/16 09:45:59<koo5[m]> Its a start...
02/16 09:47:10<koo5[m]> How are you?
02/16 10:05:26<nilli> this is great that you run a blog on wiki.
02/16 10:06:23<nilli> what is that omni thing you are trying to do? don they have a decentralized exchange already?
02/16 14:32:07<stoopkid> nilli: yea i saw something about omni dex, i'm just trying to see if i can do a trustless exchange with something as simple as 2FA and purely standard btc tx's, just since it's simple and i understand it through & through and it might have some utility for somebody somewhere. after i finish up i'll start trying to figure out how omni dex works too
02/16 14:37:43<stoopkid> don't worry i'm not really getting sidetracked, i'm using the little side-project as a chance to practice some low-level coding and study some crypto theory and examine some prior art
02/16 15:51:48*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/16 16:13:02*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
02/16 16:15:17*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/16 16:23:56*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
02/16 16:49:40*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 276 seconds
02/16 17:19:27*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/16 18:43:49*** Quit: nilli (4d7d8e3a@gateway/web/freenode/ip.77.125.142.58) left #AutoNomic: Ping timeout: 260 seconds
02/17 01:55:04*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
02/17 02:23:58*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tjwuwcnjjnutrfey) left #AutoNomic: Quit: Connection closed for inactivity
02/17 03:10:25<HMCa> welcome year of dog
02/17 04:30:21*** Join: niilli (50f68809@gateway/web/freenode/ip.80.246.136.9, (unauthenticated): 80.246.136.9 - http://webchat.freenode.net)
02/17 05:00:24*** Quit: niilli (50f68809@gateway/web/freenode/ip.80.246.136.9) left #AutoNomic: Ping timeout: 260 seconds
02/17 06:17:28<koo5[m]> Arf arf
02/17 07:02:41*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
02/17 09:27:45*** Join: nilli (4d7d8e3a@gateway/web/freenode/ip.77.125.142.58, (unauthenticated): 77.125.142.58 - http://webchat.freenode.net)
02/17 09:40:22<nilli> hi stoopkid any luck exchanging agrs on omni dex? can you get the same exchange rate as in bittrex?
02/17 09:41:12<nilli> hi HMCa are you still around??
02/17 10:12:35*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/17 10:13:02*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/17 10:59:23*** Join: jfjfidsfsj (76569b77@gateway/web/freenode/ip.118.86.155.119, (unauthenticated): 118-86-155-119.kakt.j-cnet.jp/118.86.155.119)
02/17 11:22:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dvbjamgcimlgxfry, stoopkid: stoopkid)
02/17 14:35:38*** Quit: jfjfidsfsj (76569b77@gateway/web/freenode/ip.118.86.155.119) left #AutoNomic: Quit: Page closed
02/17 15:01:04*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/17 17:41:39*** Quit: nilli (4d7d8e3a@gateway/web/freenode/ip.77.125.142.58) left #AutoNomic: Ping timeout: 260 seconds
02/17 19:49:08*** Join: jibble_ (uid48680@gateway/web/irccloud.com/x-guswputmxrkgwamj, (unauthenticated): bacon)
02/17 22:46:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dvbjamgcimlgxfry) left #AutoNomic: Quit: Connection closed for inactivity
02/18 01:58:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ubgzvnyiibcxolur, stoopkid: stoopkid)
02/18 02:24:25*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
02/18 13:11:34*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/18 14:22:12*** Join: nilli (4d7d8e3a@gateway/web/freenode/ip.77.125.142.58, (unauthenticated): 77.125.142.58 - http://webchat.freenode.net)
02/18 17:26:24*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
02/19 00:12:42*** Quit: nilli (4d7d8e3a@gateway/web/freenode/ip.77.125.142.58) left #AutoNomic: Ping timeout: 260 seconds
02/19 06:49:08*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/19 07:22:26*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 265 seconds
02/19 08:59:03*** Join: koom (~sirdancea@236.152.broadband3.iol.cz, sirdancealot: koo5)
02/19 09:46:38*** Quit: koom (~sirdancea@236.152.broadband3.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
02/19 10:32:57*** Quit: jibble_ (uid48680@gateway/web/irccloud.com/x-guswputmxrkgwamj) left #AutoNomic: Quit: Connection closed for inactivity
02/19 13:49:26*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/19 16:18:07<stoopkid> HMCa: https://www.doc.ic.ac.uk/~sgc/teaching/pre2012/v231/lecture8.html
02/19 16:18:11<stoopkid> something like this?
02/19 16:27:49<stoopkid> so, i remember you always talking to ohad about "not just consistency but *decidable* consistency"
02/19 16:28:30<stoopkid> i don't think any of us understood what you meant exactly, but, you were referring to refutation completeness of first-order resolution?
02/19 16:40:19<stoopkid> so i mean, this looks reasonable for first-order logic inferencing, and first-order logic expressions correspond to the types in non-polymorphic dependent type theory, and polymorphism is all wrapped up in universe-levels and needs its own special treatment so we can leave that to the side for the moment
02/19 16:40:56<stoopkid> the proof trees for these first-order logic expressions would correspond to the lambda-terms of the correspond non-polymorphic dependent types
02/19 16:40:57<stoopkid> but
02/19 16:42:25<stoopkid> type theory is about taking this logic and internalizing the references to these proofs and the contexts under which they're derived into the inferencing framework, i'm not sure i see how/where we're supposed to be doing that (... if we're supposed to be doing that?)
02/19 16:48:44<stoopkid> hrm, maybe i'm starting to see the picture; these aren't actually the proof trees themselves just internalized lambda tokens that represent them
02/19 16:49:18<stoopkid> and then these are connected to the types by the `a` predicate, which may or may not need built-in semantic, not including for RDFS conformance? can't tell yet
02/19 16:51:21<stoopkid> so, like `S-expr-for-lambda a S-expr-for-type`... hrm
02/19 16:53:43<stoopkid> almost, not quite though
02/19 19:49:34*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 252 seconds
02/19 21:09:25*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
02/20 04:27:25*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/20 04:42:07*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
02/20 07:44:54*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/20 07:45:19*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/20 09:08:30*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/20 12:02:14*** Join: nilli (4d7d8e3a@gateway/web/freenode/ip.77.125.142.58, (unauthenticated): 77.125.142.58 - http://webchat.freenode.net)
02/20 12:51:16*** Quit: nilli (4d7d8e3a@gateway/web/freenode/ip.77.125.142.58) left #AutoNomic: Ping timeout: 260 seconds
02/20 19:57:36*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
02/21 00:24:30*** Join: Block11 (~b3nszy@2601:580:c100:c812:1dd2:5eba:6d4b:2a24, b3nszy: B3nszy)
02/21 00:56:18*** Quit: Block11 (~b3nszy@2601:580:c100:c812:1dd2:5eba:6d4b:2a24) left #AutoNomic: Remote host closed the connection
02/21 01:56:37*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/21 03:00:36*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 248 seconds
02/21 10:51:48*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
02/21 18:18:20*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
              *** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
02/21 18:18:37*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/21 20:20:19*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
02/21 21:10:45*** Join: shaowei (~textual@218.30.116.4, (unauthenticated): Textual User)
02/21 22:04:56*** Quit: shaowei (~textual@218.30.116.4) left #AutoNomic: Read error: Connection reset by peer
02/22 00:02:14*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 248 seconds
02/22 00:14:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/22 04:11:50*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/22 05:33:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 260 seconds
02/22 05:43:10*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
02/22 05:50:25*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/22 05:57:11*** Join: vbmithr_ (~vb@37.187.116.20, (unauthenticated): Vincent)
02/22 05:58:24*** Quit: vbmithr (~vb@luminar.eu.org) left #AutoNomic: Ping timeout: 264 seconds
02/22 07:53:24*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ubgzvnyiibcxolur) left #AutoNomic: Ping timeout: 240 seconds
02/22 07:56:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wdtddadzwvuzpuil, stoopkid: stoopkid)
02/22 08:45:53*** Quit: cantora (sid147800@gateway/web/irccloud.com/x-lebyhemagcdhycwc) left #AutoNomic: Ping timeout: 240 seconds
02/22 08:46:03*** Join: cantora (sid147800@gateway/web/irccloud.com/x-bgfszikqforhejhe, cantora: cantora)
02/22 10:35:52*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/22 17:24:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 240 seconds
02/22 18:56:08*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wdtddadzwvuzpuil) left #AutoNomic: Quit: Connection closed for inactivity
02/22 20:26:24*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/22 22:30:27*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Quit: WeeChat 2.0.1
02/22 22:30:44*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/22 23:29:23*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
02/23 02:52:21*** Netmerge: *.net *.split, split 3 days 22 hours 42 minutes 1 second ago (Use /WL to see who's still missing)
02/23 02:56:34*** Netmerge: *.net *.split, split 4 minutes 11 seconds ago (Use /WL to see who's still missing)
02/23 02:58:48*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-zzikhwelxoxugveh) left #AutoNomic: Ping timeout: 240 seconds
02/23 02:59:03*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-svczgsevsusndmeh) left #AutoNomic: Ping timeout: 248 seconds
02/23 02:59:08*** Quit: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-mgudmhycqycranaf) left #AutoNomic: Ping timeout: 255 seconds
02/23 02:59:11*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-yslnbmrtkvkkimps) left #AutoNomic: Ping timeout: 256 seconds
              *** Quit: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-jmiqjimubbkmwqwi) left #AutoNomic: Ping timeout: 256 seconds
02/23 02:59:12*** Quit: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-optbnzpaajwvzlsl) left #AutoNomic: Ping timeout: 256 seconds
02/23 02:59:20*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-ruuyhxpyxfpgshkl) left #AutoNomic: Ping timeout: 252 seconds
02/23 02:59:50*** Quit: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-tuucranqonmxitey) left #AutoNomic: Ping timeout: 276 seconds
02/23 03:21:26*** Netmerge: *.net *.split, split 24 minutes 51 seconds ago (Use /WL to see who's still missing)
02/23 03:34:02*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/23 04:02:52*** Join: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-mrgytbcllaoimusc, (unauthenticated): @lexx_:matrix.org)
02/23 04:34:15*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vzkzuzwrznrnxkaf, (unauthenticated): @koo5:matrix.org)
              *** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-pralevbpjqxtowrl, (unauthenticated): @genuinelyfx:matrix.org)
02/23 04:34:21*** Join: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-wxjgaoiftmitoawx, (unauthenticated): @daemoz:matrix.org)
              *** Join: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-nwrqpqqgpzczqtpo, (unauthenticated): @tigertigertig:matrix.org)
              *** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-szvspfxirhbhhzgw, (unauthenticated): @nilli:matrix.org)
02/23 04:34:22*** Join: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-xlzmqywkgztpyaou, (unauthenticated): @deadhand:matrix.org)
02/23 04:34:23*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-vyolqhrgithaowog, (unauthenticated): @lexxus:matrix.org)
02/23 06:20:27*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
02/23 07:42:57*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dfnmlzzspuofrhhb, stoopkid: stoopkid)
02/23 13:36:26*** Join: cantora_ (sid147800@gateway/web/irccloud.com/x-erxhfpckmcprsrip, cantora: cantora)
02/23 13:43:52*** Netsplit: *.net *.split (Use /WL to see who left)
02/23 13:43:53*** Nick regain: cantora_ (sid147800@gateway/web/irccloud.com/x-erxhfpckmcprsrip) is now known as cantora
02/24 02:34:48*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/24 02:35:08*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/24 15:20:52*** Join: octo_ (octo@c2-254.icpnet.pl, (unauthenticated): octo)
02/24 16:03:13*** Quit: octo_ (octo@c2-254.icpnet.pl) left #AutoNomic: Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]
02/25 04:35:47*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dfnmlzzspuofrhhb, stoopkid: stoopkid)
02/25 04:47:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/25 04:47:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/25 08:06:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/25 08:07:12*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/25 13:45:25*** Join: jibble__ (uid48680@gateway/web/irccloud.com/x-uyfptwotyerjucoh, (unauthenticated): bacon)
02/25 17:25:09*** Join: nilli (54e50ca4@gateway/web/freenode/ip.84.229.12.164, (unauthenticated): IGLD-84-229-12-164.inter.net.il/84.229.12.164)
02/25 17:32:21<nilli> Hey there, was realy busy for a few days and did not check out on anything here. Just saw the news about agora. not very good for us too. :)
02/25 17:34:16<nilli> maybe we should have made more information about autonomic development available on the tauchain forum after all.
02/25 17:35:12<koo5[m]> hey
02/25 17:36:48<nilli> hey koo.
02/25 17:38:21<nilli> how are you guys doing?
02/25 17:38:40<koo5[m]> im good
02/25 17:39:41<koo5[m]> maybe driving stoop crazy with not understanding basic stuff:)
02/25 17:41:05<nilli> how do you feel about the agora bittrex development? are you concern?
02/25 17:41:57<koo5[m]> im optimistic
02/25 17:42:19<nilli> :) good
02/25 17:43:47<koo5[m]> stoop was the last of us three to "fuck up"
02/25 17:44:01<nilli> so you and stoopkid are working , is HMCa anywhere around or stoopkid know enough to get you through what is need?
02/25 17:44:08<koo5[m]> its easy to fuck up with cryptos, and its easy to feel youve fucked up when you hardly did
02/25 17:44:37<nilli> how did he fucked up?
02/25 17:47:13<koo5[m]> well stoop definitely knows enough to keep answering my questions, im still catching up with the basics. Stoop just said he has a backlog of unanswered questions for hmc. I think we have enough and are equipped enough to work out some answers on our own
02/25 17:47:22<koo5[m]> by not selling earlier
02/25 17:47:44<koo5[m]> since he needs the money now
02/25 17:51:46<nilli> "my hacker" sold the 4000 agora I had on bittrex,  for a really good rate :)
02/25 17:54:04<nilli> but was not able to take anything out so now I have that in bitcoin (once I will get back my access to my account im in the process fo moving it to different email address)
02/25 17:54:49<koo5[m]> funny
02/25 17:55:13<koo5[m]> hope you get it out
02/25 17:56:09<nilli> first they said that it will take 72 hours. then a week later when not getting any respond or information from them I thought that somehow the hacker must have done something. well its just bittrex
02/25 17:56:38<nilli> they finally got back to me saying again that it will take 72 hours
02/25 17:57:01<nilli> anyway eventually I will take it out
02/25 17:59:22<nilli> I can give stoop this bitcoin as his next agora payment (just this time) since he fucked up and I did also but it might just worked out good for me
02/25 18:11:35<koo5[m]> i think that would definitely cheer him up
02/25 18:39:05<nilli> the crypto learning curve is tough...we speak of money which buy your food and shelter now, not just knowledge and shared information which  buy it in the future  ....
02/25 18:50:22<nilli> ok. time to sleep.
02/25 18:50:47<koo5[m]> alright, tc
02/25 23:53:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 245 seconds
02/26 00:17:16*** Quit: nilli (54e50ca4@gateway/web/freenode/ip.84.229.12.164) left #AutoNomic: Ping timeout: 260 seconds
02/26 00:33:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/26 08:49:56<stoopkid> @ nilli heh, glad to see this hacker situation ended up working out in your favor :)
02/27 04:32:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/27 04:32:44*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 04:43:11*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02/27 04:43:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 06:12:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dfnmlzzspuofrhhb) left #AutoNomic: Quit: Connection closed for inactivity
02/27 06:43:15*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 260 seconds
02/27 06:56:02*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 07:03:33*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 268 seconds
02/27 07:20:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 08:33:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 240 seconds
02/27 08:49:34*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02/27 09:01:59*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02/27 12:04:44*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bdvyedxninobbpeq, stoopkid: stoopkid)

stoopkid> yet at least
3:05 PM anybody in the US providing anything like an ICO is potentially at risk of SEC meddling
3:15 PM "but the fact that the coin is not the actual token that will be the utility token" yep, but, that's ultimately kind of bullshit if the pre-sale token is capable of functioning as a currency. they act like it's to prevent fraud, but, if that's really how they feel than they're just further hurting those who've already been "defrauded"
3:15 PM idk whether their actions are malicious or just ignorant. wouldn't be surprised at either under the current regime
8:37 PM ↔ daemoz nipped out  
11:11 PM Connection closed unexpectedly
11:17 PM → stoopkid and cantora joined  •  Channel mode: +cnt  
Friday, March 2nd, 2018
12:08 AM 
<HMCa> root2 seems to me to be some of each
12:09 AM but, hey, our project is immune from such!
12:10 AM so add this to this list of reasons... ;-)
12:11 AM our utility must come before any tokens representing it, heh
12:14 AM 
<stoopkid> HMCa: heya
12:14 AM how goes
12:15 AM 
<HMCa> root2 I pity whatever poor sec guy gets tasked with trying to figure our chain out... XD
12:17 AM 
<stoopkid> oy
12:17 AM i need to get a lawyer don't i
12:18 AM 
<HMCa> root2 "I dunno, they said it shouldnt be regulated because `it is a regulator.`  They called it a `valuation machine` whatever that is, and said it offers no direct investment vehicle, but they said I was welcome to donate.  They told me to ask questions... in fact encouraged it forcefully enough to scare people.  I asked a few, but only got more confused...."
12:20 AM ^everyone's first day in the tau discussion? ;-)
12:23 AM hrmm, maybe we need a "dototd for regulators"
12:24 AM 
<stoopkid> i get the feeling that more than just the SEC will be tasked with examining our chain
12:25 AM 
<HMCa> root2 may God or any Gods have mercy...
12:26 AM I'm still not even sure "if car or bomb" some days, ofc ;-)
12:26 AM 
<stoopkid> this is generally determined by the driver
12:26 AM 
<HMCa> root2 (shoutout to amiller, I hope still watching)
12:27 AM some motocoin people are apparently upset(ish) w/ me?
12:27 AM heh
12:28 AM 
<stoopkid> what'd you do? :P
12:28 AM 
<HMCa> root2 I wonder if they are unhappy about silly agrs things
12:29 AM all I did was nothing
12:30 AM sat back and watch someone else pwn the mining (in a benign way)
12:30 AM 
<stoopkid> well, haven't you been saying all along that all somebody has to do to pwn the mining is.. mine?
12:31 AM 
<HMCa> root2 well, mining motocoin is hard
12:31 AM heh
12:32 AM really they just want to see a code update
12:33 AM and I can't blame them, I do too, I even have what I'd call about half of one, since years ago, heh
12:33 AM but
12:33 AM 
— HMCa stands by his plans, here
12:33 AM 
<HMCa> root2 heh
12:33 AM 
<stoopkid> tell them to help me figure out the remaining details of autonomic's resolution inferencing and i'll build them a moto-context
12:34 AM 
<HMCa> root2 right, we need motonomic... ;-)
12:36 AM 
<stoopkid> "we live by the rules of the road B-[( "
12:36 AM 
<HMCa> root2 and the more years that go by, the larger the sketch of motonomic ia becoming, hehe
12:37 AM 
<stoopkid> ha, well, i guess your users should thank me for giving you pleeennnty of time to perfect your art XD
12:40 AM 
<HMCa> root2 are they my users, or the 51% attacking miner's users?
12:41 AM who pwns who here?
12:44 AM 
<stoopkid> well, they can pwn the chain but can't necessarily change the protocol, so, at least in that sense they're still your users as long as they only fork on your command
12:46 AM 
<HMCa> root2 what if I say one thing, and the miner says another, and they go do a third? :-)
12:48 AM the implicit vote strikes again... try explaining that one to regulators. :-)
12:48 AM 
<stoopkid> i guess you'd call that some kind of revolution (not unrelated to my feeling that i should get a lawyer)
12:49 AM 
<HMCa> root2 "well, mr regulatory guy... it's like a betting pool that is free to buy into but you can only bet on yourself, but the winnings are real, but also... it is democracy."
12:51 AM 
— stoopkid begins mentally preparing for a life-time of meetings with mr. regulatory guy
12:51 AM 
<HMCa> root2 when old nomics meet new nomics
12:52 AM probably just prepare for a lifetime of meetings, generally...
12:52 AM XD
12:53 AM 
<stoopkid> heh
12:53 AM 
<HMCa> root2 this is one of the reasons it would be crazy to actually build it, right?
12:53 AM this is...
12:53 AM a lifetime deal
12:54 AM it'll be worse than it was for, say, Linus... probably by quite a lot...
12:54 AM heh
12:55 AM when I say it'll make you a slave to it, you know I only half joke. ;-)
12:56 AM 
<stoopkid> well
12:57 AM Linus could choose not to attend most of those meetings, in theory
12:57 AM 
<HMCa> root2 otoh, people will be lining up for those meetings, and offering virtually anything to get them. :-P
12:57 AM 
<stoopkid> lol
12:57 AM "anything"
12:58 AM we'll see about that
12:58 AM for the vast majority of those folks, the things i would demand would be in direct opposition to the reasons they would want to have the meeting in the first place
12:59 AM people aren't gonna like me much :)
12:59 AM (well, some people will)
12:59 AM 
<HMCa> root2 I'll only agree to meet on-chain.  :-)
1:00 AM before we can agree to meet, we must first agree as to how to agree to meet...
1:01 AM 
<stoopkid> y'know, most people really don't have that problem :P
1:02 AM 
<HMCa> root2 most just aren't quite as meta as me
1:05 AM 
<stoopkid> unfortunately i doubt that very few people that i would actually want to meet with would even attempt to contact me
1:05 AM "learned helplessness" etc..
1:05 AM unfortunately i think*
1:06 AM unfortunately i doubt*
1:06 AM oy too much reading about this trump investigation, i can barely think anymore XD
1:07 AM unfortunately i doubt that very many***
1:07 AM 
<HMCa> root2 :-)
1:07 AM so enough about the old nomics... let's talk about the new nomics
1:08 AM 
<stoopkid> i imagine mostly just mr. regulatory guys and mr. corporate shills
1:08 AM yes, let's do that :)
1:08 AM 
<HMCa> root2 provingground is cool, but I like the sort of work done by goog (iirc) on the magic cards
1:10 AM they trained an AI to implement semantics of magic cards (playable, working, and even mostly correct) from prose copies of card text (minus flavor iirc)
1:10 AM being able to focus a domain like that seems powerfull :-)
1:11 AM feed in a set description, get a playable ccg videogame out...
1:12 AM 
<stoopkid> hrm, i'm rather impressed at the "playable, working, and even mostly correct" part, would've figured this would require a decent amount of human curation
1:12 AM 
<HMCa> root2 well, rnn these days...
1:13 AM they don't do things like bad grammars and synte^rrors.;.anymore.;.
1:14 AM these days they can even pretty reasonably mimic inflection and tone of specific authors, even training just letter by letter
1:17 AM 
<stoopkid> the only reason i don't find that frightening is because of the existence of dependent type theory :)
1:18 AM 
<HMCa> root2 well, one thing is scary...
1:19 AM some companies have big, advanced forms of this stuff... and most people have virtually 0 access to any of it. :-\
1:19 AM heh
1:22 AM 
<stoopkid> well, you know my thoughts on that
1:23 AM that's only as scary as everybody else's unwillingness to just go and unplug their machines..
1:23 AM (we're not quite at the stage of "inability to just go and unplug their machines", hopefully we don't reach that stage :)
1:26 AM obviously an autonomic would make that easier, but, i don't think a lack thereof makes it impossible
1:30 AM so anyway, that whole "agreeing on how to agree" thing..
1:30 AM 
<HMCa> root2 then I think you underestimate how much bigger and more advanced ;-)
1:31 AM 
<stoopkid> nah
1:31 AM well, maybe
1:32 AM but it doesn't really matter because hardly anybody would be trying to do it anyway
1:32 AM if people wanted to take down these AIs, and it required an autonomic, then we'd have an autonomic by now
1:32 AM but nobody cares, so we go shopping instead
1:33 AM 
<HMCa> root2 hrmm
1:33 AM 
<stoopkid> (based on what the AIs suggest might make our lives slightly less unbearable)
1:34 AM 
<HMCa> root2 otoh... at the moment there are at least 4 groups researching (or at least claiming to) a tau or tau-like, so... maybe just too few cared before :-)
1:35 AM 
<stoopkid> well, there's tau, autonomic... what are the other 2
1:36 AM and whether tau should even be included in the list is debatable at this point
1:37 AM i think when ohad proudly announced that the new design would be "non-nomic" is when i stopped listening entirely
1:39 AM 
<HMCa> root2 well there's the tezos/cardano and similar, there's maybe redfish, and there's still at least one other stealth mode project (though I suspect that they might never actually try to launch it...)
1:39 AM I did say "tau like"  :-)
1:39 AM 
<stoopkid> although in that same post he ironically went on to describe a nomic system, and only described it as "non-nomic" because it wasn't exactly the same as the initial ruleset of suber's "Nomic", which seems to be missing the entire point of what a "nomic" is
1:40 AM 
<HMCa> root2 depending upon how much we broaden that definition we could net quite a few naivetau projects, really
1:40 AM 
<stoopkid> ah, cardano i don't think is even nomic, also is proof-of-stake, no side-chains system, etc..
1:43 AM last i spoke with redfish he said he wasn't sure if he was even gonna keep pursuing his plans, because of cardano
1:43 AM 
<HMCa> root2 lol
1:43 AM 
<stoopkid> and last i checked his github he hadn't really worked on it since then
1:43 AM 
<HMCa> root2 so, is that more or less tau-like than idni?
1:44 AM :-)
1:44 AM 
<stoopkid> seems equally un-tau-like to me
1:44 AM tezos though, i guess that should still be included
1:46 AM i haven't checked what they're up to lately, tezos has been kind of a moving target and i've been waiting for them to settle down a single idea before i start really digging into it further
1:49 AM also, code on tezos only "facilitates" formal verification
1:50 AM i.e. their formal verification system isn't on-chain, but hypothetically their programming language is more convenient for external static analysis
1:52 AM 
<HMCa> root2 sure, but my point stands... some people are caring enough to try, even if what they're building misses the mark. ;-)
1:53 AM anyway I gtr
1:53 AM 
<stoopkid> i don't think any of tezos tau or cardano are thinking about destroying the big bad AIs
1:53 AM not sure that's a thing on their radars
1:54 AM anyway, catch you later, next time you're around let's discuss that "agreeing on how to agree" thing
1:57 AM i've got several questions about our resolution inferencing which, if answered, will allow me to complete your intended client
1:58 AM i don't yet understand how you intend to provably bound complexity, even with AoP, but, if i build an MLTT (or possibly cubicaltt) client, and you can show me how the complexity-bounding works, then we're done
1:58 AM minus genesis
1:59 AM i assume i'll be able to answer these q's for myself over the next couple months, but, i figure you could speed that process up a bit
2:00 AM question #1: i understand how classical first-order robinson resolution works, but we're constructive, so, what, if anything, needs to change from the classical FOL resolution mechanism to account for this
2:01 AM question #2: i only understand how *first* order resolution works, but we're higher-order
2:01 AM i understand that we are to somehow achieve this by iterated first-order resolution, but, how?
2:03 AM question #3: if you still want that in N3, then, do you have a preferred representation, and if so, what?
2:04 AM and you can skip question 3 if you're fine with NuPRL-style ABTs
2:05 AM or "whatever N3 representation stoopkid happens to come up with"
2:06 AM dmilez_ might be able to help me answer these q's as well
2:25 AM ah nvm
2:25 AM wrt part of question 1
2:26 AM resolution rule is constructively valid
2:33 AM there's still some things that need to be accounted for though
2:33 AM https://en.wikipedia.org/wiki/Resolution_%28logic%29#A_resolution_technique
2:33 AM "This resolution technique uses proof by contradiction"
2:35 AM conjoin the negation of the query with rules, and prove the refutation of the negation via resolution
2:35 AM essentially, the method presented there proves double-negations of constructive tautologies
2:36 AM that seems like more of a formality than anything though, unless i'm missing some deep properties of the resolution method
2:37 AM it's just a really simple way to frame the query, without having to introduce any new mechanics, if you're working in classical logic
7:26 AM 
<dmilez_> c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245 right you can use both classical and intuistionistic logic at once
7:27 AM constructuctive*
7:28 AM you can encode both into either
7:31 AM myself i encode to robinsons resolution ... i wont claim this is me being classical.. but i can claim such aspects you point out are proven sane from classical logic
7:40 AM you know stoopkid how a question that even after 2 decades of designing FOL/HOL inference/query engines.. is i've never considered tehm HOL or FOL.. i consider them KR
7:41 AM if your KR makes sense, the resolution method can be fair HOL
7:42 AM everyone smart enough to design a resolution method will still call it FOL
7:43 AM if they called it HOL .. someone would com ealong and prove it FOL
7:44 AM by uttering this "but you used the same technique as used in FOL!"
7:44 AM by/also
7:44 AM 
<stoopkid> hrmm
7:46 AM 
<dmilez_> c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245 also btw the resultation meath is suppose to be weak ever so slightly
7:47 AM also btw the resolution method is suppose to be weak ever so slightly.. it counts on the CNF conversion to make what it does strong as possible
7:49 AM some people will even do the whole technique interleaving some conversions to happen as transforations at query time
7:51 AM query\ time/resolution\ time
7:54 AM "seems like more of a formality"  it is .. i actually do the same thing in some code just to keep the mechanism easier to maintian
7:55 AM https://github.com/TeamSPoon/logicmoo_base/blob/master/prolog/logicmoo/common_logic/common_logic_snark.pl#L1308-L1314
7:57 AM 
<stoopkid> hrm, wrt the order, it doesn't seem the "technique" has anything to do with it, per se, seems it's rather about the interpretation of what's being inferenced
7:57 AM 
<dmilez_> c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245 oh why we do it is so the query is fully canonized as if it was an "Anteceeddant" to a truth
7:59 AM canonicalized in the same manner so we interpret it the same we interpreted the posits
7:59 AM posits = knowledge and rule that we are speciationg agaisnt
8:00 AM rules* plural
8:01 AM when my supervisor suggested doing so .. he specifically said "I know this works .. this is actualyl from classical logic"
8:05 AM but the "asserting the query" wasnt just so we could be backwards compatible.. it was to ensure we visited the same interpretive transformations.. it only began making sense when queries got *extremely* complex
8:07 AM "When we consider what Fox news said about Berrack, does Opera feel that Michele Obama is not being given the same respect as her husband?"
8:09 AM 
<stoopkid> lol
8:10 AM 
— stoopkid gets the feeling that dmiles participated in building some of those AIs that HMC mentioned :P
8:11 AM 
<stoopkid> i'm looking over skolemization again and trying to interpret it into the context of what you're saying here
8:13 AM 
<dmilez_> c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245 yes exactly, skolemization indeed is needed in just 'posing' the query
8:14 AM  E x A y ( p(x) => q(y) )
8:15 AM so to perform such a query..   We assert   "  E x A y (( p(x) => q(y) )  =>  query666(x,y))
8:15 AM then ask query666(x,y)
8:16 AM afterwards when we are done getting the answers.  we retract  the 'posing'
8:17 AM the 'posed' assertion end up going thru the same process (thru NNF->SNF->CNF)
8:18 AM though it does sometimes seem overkill  if queries are simple
8:21 AM but even something simple as if the user asked  "E x (happy(x))"   ..   I might convert that to    "E x (happy(x)) => say(yes).    ~E x (happy(x)) => say(no)"
8:22 AM some cases they may need to tell me about  LEM upon happy/1    so i can decide if the 2nd part of the 'posing' was actualyl   " E x (~ happy(x)) => say(no)"
8:23 AM 
<stoopkid> hrm, the correctness of the skolemization translation seems to depend further on the classical axiom of choice
8:24 AM 
<dmilez_> c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245 it does.. though i only recently came to understanding the  implemention of aoc and skolems
8:25 AM https://github.com/TeamSPoon/logicmoo_base/blob/master/prolog/logicmoo/common_logic/common_logic_exists.pl#L581-L594  <- look for "aoc"
8:26 AM numbering these  with       must((once((add_cond(Y,aoc(SkV,Which)))))),
8:27 AM seemed First order.. but i also realized no laws of the universe told me  'Which'  had to be a number or even an ordered quality
8:28 AM it just had to be a 'Term' that I could track
8:28 AM 
<stoopkid> well, yea, FOL doesn't imply that your objects are "numbers" or "ordered"
8:29 AM it just implies that they're objects, as opposed to sets/functions/relations on objects
8:30 AM 
<dmilez_> c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245 yeah that is a good way of saying it..  for isntnace some cases Which was a timeSlice
8:30 AM timeSlice is an object and not  sets/functions/relations
8:31 AM 
<stoopkid> and the objects could even be sets/functions/relations, but, that's where it gets back to that the order is about the interpretation, not the inference technique
8:32 AM 
<dmilez_> c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245 right .. often the skolem itself was intended to deplict a hypothetical set/function/relation
8:34 AM oh btw what that code is about is making sure a skolem that gets produced which will be about several domains .. can be distinqueished from its peer skolems
8:35 AM for instance: a man with blue eye and red hair is not the man with blue eyes and brown hair
8:36 AM since parts of the engine only understands eye color and not hair color.. i have to guard that part of the engine from mistakes
8:37 AM by ensure all axiom of choice  level information is accounted for
8:38 AM what i ended up with is not just bivaliance but  N-valiances
8:41 AM oops the word categfory theorists use is something that has "bi*"
8:43 AM what the system is doing is constructing all possible permutations of every way existentials can unify (or not) with other existentials
8:43 AM AoC was the only way i could keep that mananged
8:44 AM and post-unification I has a new thing that was slightly more constrained that it started out as
8:45 AM so my skolemizaion method has to support making that less CPU intensive
8:45 AM has/had
8:47 AM anyhow i've changed my internal skolem representation at least 10 times over the years but only recently did I understand AoC is not the enemy
8:47 AM however it is the enemy of search
8:48 AM but not for unification
8:52 AM skolemization is mostly evil and makes things that slow the system down.. so one day i forced myself to rewrite the engine that every time the user used a constant like 'Opera'  or 'respect'  I would treat that as:  Exists a Person named "Opera" there exists an ScaluarInval over the a relation and there exists a relation that is a subproperty of 'respect'
8:55 AM That produces three skolems
8:55 AM and had to still make it as efficient as if the user just use constants
8:56 AM (i mean if i had has just seen that as constants)
8:57 AM it was very eye opening .. it was what is used in thearapy called "flooding"
8:58 AM if the guy is afraid of heights, take him bungy jumping
8:59 AM the result was my worst nightmare came true and i had to finally come up with an impl and AoC was a weird and unexpected guest
10:30 AM → nilli joined  ↔ cantora nipped out  
4:25 PM 
<nilli> IGLD-84-229-137-125.inter.net.il/84.229.137.125 hi stoopkid I think that the log is not working again.
4:26 PM 
<stoopkid> hey nilli yea i think koo's trying to fix something with the I/O last i heard
4:29 PM 
<nilli> IGLD-84-229-137-125.inter.net.il/84.229.137.125 ok :)  HMC? have you talked to him?
4:30 PM 
<stoopkid> he was here ait ago, we caught up on some things but didn't get much into the implementation detail unfortunately
4:48 PM → koom joined (~sirdancea@79.98.72.195)
5:10 PM 
<koo5[m]> @koo5:matrix.org i forgot to start the logger ed
5:10 PM *eh
5:10 PM *, eh
5:13 PM → editable-koo joined (~user@167.88.171.233)
5:19 PM 
<koom> koo5 hrm , riot.im isnt good for copying history from
5:22 PM 
<HMCa> root2 i'm semi-around
5:23 PM hi nilli
5:24 PM 
— koom looks around for the invisible nilli everyone seems to be hallucinating
5:24 PM 
<HMCa> root2 sorry to hear about your hacker woes, and agrs delist... sounds like bittrex has been nothing but troubles for you lately
5:24 PM koom: ?
5:25 PM 
<koom> koo5 idk, i missed to what was stoop replying
5:26 PM 
<HMCa> root2 ah
5:26 PM 
<koom> koo5 and you as well

#AutoNomic> 03/02 17:12:26*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
              *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 1 month 5 days 1 minute 39 seconds ago
              *** Names: editable-koo koom nilli cantora stoopkid reffael Tamara_ jibble__ daemoz dmilez_ HMCa Deadhand @ChanServ vbmithr_ lexx_[m] koo5[m] genuinelyfx[m] daemoz[m] tigertigertiger[ nilli[m] lexxus[m] deadhand[m]
              *** End of /NAMES list.
03/02 17:19:06<koom> hrm , riot.im isnt good for copying history from
03/02 17:21:49<HMCa> i'm semi-around
03/02 17:22:19<HMCa> hi nilli
03/02 17:23:15* koom looks around for the invisible nilli everyone seems to be hallucinating
03/02 17:23:31<HMCa> sorry to hear about your hacker woes, and agrs delist... sounds like bittrex has been nothing but troubles for you lately
03/02 17:23:55<HMCa> koom: ?
03/02 17:24:41<koom> idk, i missed to what was stoop replying
03/02 17:24:52<HMCa> ah
03/02 17:25:13<koom> and you as well
03/02 17:27:13<HMCa> well I'll have to run again soon, but let me give a brief start to an answer to stoop's question
03/02 17:28:05<HMCa> the very short answer: we could work exactly like nuprl, wrt establishing arbitrary order
03/02 17:28:35<nilli> hi HMCa
03/02 17:28:51<HMCa> and what I'd always had in mind was more or less just that less the ABTs
03/02 17:29:39<stoopkid> what rolls down stairs, alone or in pairs and over your neighbors dog; it fits on your back, it's great for a snack it's log log log: https://pastebin.com/BR2uZTdn
03/02 17:30:10<HMCa> (to answer your side question, i'd have no reason to mind ABTs in our impl, and we indeed need *some* structural pattern... could be ABTs, or p63, or k-dtt, or stoops-own-made-up-thing... doesn't really matter.)
03/02 17:31:09<stoopkid> alright i'll check out what nuprl does there
03/02 17:33:06<HMCa> it is just first order rewrites, in a loop over a redex state, but with unbounded recursive application of instances (a la e:findall)
03/02 17:33:50<stoopkid> "instances", of that same first-order inferencing you mean?
03/02 17:35:38<HMCa> well, i meant instances of redex rewrite rules, but with the same first-order rewrites yes
03/02 17:37:35<HMCa> so if you take the mltt away from nuprl, you're left with just a general second order rewrite engine over ABTs
03/02 17:39:40<HMCa> it's a first order search which can hit preds which invoke the same sort of first order search which can hit preds which....
03/02 17:40:18* HMCa gtr
03/02 17:41:14<stoopkid> thanks i'll check it out, catch you later
03/02 17:50:35<stoopkid> dmilez_: btw, not ignoring, i've gotta catch up on a bit of background research in order to continue discussing that further
03/02 18:21:31*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 276 seconds
03/02 18:40:59<dmilez_> oh stoopkid this system..  https://www.isi.edu/isd/LOOM/PowerLoom/features.html  btw is using the same  Robinson Resolution method
03/02 18:42:33<dmilez_> and can handle n3 as long as you represent n3 in KIF
03/02 18:43:17<dmilez_> "PowerLoom uses a natural deduction system to answer queries but also has a large number of specialized reasoning procedures to efficiently handle concept and relation hierarchies, sets, frame predicates, search control, etc. The specialist architecture is extensible to allow users to plug-in their own reasoners or computed predicates. PowerLoom also supports hypothetical reasoning, equality reasoning, arithmetic and reasoning wit
03/02 18:43:57<dmilez_> "owerLoom can explain its reasoning by recording inference trees and then rendering those into human-understandable explanations. PowerLoom also has an experimental "WhyNot" facility to explain inference failures where no successful proof tree was found."
03/02 18:45:08<dmilez_> also in that Why-not situation it can explain the difference between missing understandings and negations
03/02 18:45:23*** Quit: nilli (54e5897d@gateway/web/freenode/ip.84.229.137.125) left #AutoNomic: Ping timeout: 260 seconds
03/02 18:46:18<dmilez_> Logicmoo, Cyc and Powerloom all use the same system of logic
03/02 18:48:46<dmilez_> By default, they all make an open-world assumption and returns unknown if it cannot prove or disprove a question. Also all three can prove differences between Unknown and False
03/02 18:49:47<dmilez_> even when working from KBs that where initially unknown
03/02 18:57:11<dmilez_> . The goal of all three systems was to provide the most expressive representation language possible, since all project failures are due to programmer trying to limit their KR:  "we could not express X in language L"  this is why we used a language with no limits to what it can represented wether that be in programs in x86 or in English/Inform7 we still convert it all to the same CNF
03/03 01:34:21*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/03 01:59:01<daemoz> Is it reasonable to say that the root chain will contain operations like "add rule" or something like that?
03/03 02:00:10<stoopkid> yea, add/retract
03/03 02:01:37<stoopkid> i guess adds/retracts of axioms/rules is something like the basic "transaction" on autonomic
03/03 02:05:04<stoopkid> it doesn't need to be like an explicit add/retract though
03/03 02:05:36<stoopkid> like, instead of "add rule", you can just add "rule"
03/03 02:09:15<stoopkid> otoh, to retract, it can't just be "the absence of the rule", unless we're limited to having the entire ruleset on every block
03/03 02:10:14<stoopkid> but, we can basically just do something like signal the retract with the addition of "not(rule)"
03/03 02:13:06<stoopkid> so basically "not(rule)" would override the previous "rule", thereby retracting it
03/03 02:18:10<stoopkid> hrm
03/03 02:18:12<stoopkid> https://en.wikipedia.org/wiki/Closed-world_assumption
03/03 02:18:36<stoopkid> ^ @ dmilez_ probably relevant to our discussions on constructiveness
03/03 03:55:43<daemoz> Hmm, I see
03/03 05:33:15*** Join: tigertigertiger4 (tigertiger@gateway/shell/matrix.org/x-ymiaffxhteveufmm, (unauthenticated): @tigertigertig:matrix.org)
03/03 05:36:01*** Quit: tigertigertiger[ (tigertiger@gateway/shell/matrix.org/x-nwrqpqqgpzczqtpo) left #AutoNomic: Ping timeout: 256 seconds
03/03 06:49:49*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
03/03 09:43:04*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/03 10:02:58<dmilez_> oh neat https://en.wikipedia.org/wiki/Closed-world_assumption#Formalization_in_logic
03/03 10:03:24<dmilez_> I been trying to explain why CWA is almost always inconsistent
03/03 10:03:55<dmilez_> " In other words, this formalization of the closed-world assumption sometimes turns a consistent knowledge base into an inconsistent one."
03/03 10:05:03<dmilez_> I suppose my use of "almost always" sounds awefull.. but when most worlds i use have 1000-4 million rules it tends to happen :P
03/03 10:06:37<dmilez_> anyhow most KR system allow each relation to use CWA vs OWA
03/03 10:06:50<dmilez_> (selectively)
03/03 10:07:20<dmilez_> also though when i use terms that still contain variables.. I pretend it is CWA
03/03 10:07:53<dmilez_> for example    loves(A,motherFn(A)).
03/03 10:08:34<dmilez_> better example..    loves(dmiles,motherFn(_)).
03/03 10:08:51<dmilez_> means i love peoples mothers
03/03 10:09:30<dmilez_> i may not be able to enumerate them.. but i can already tell you the negations truth
03/03 10:09:57<dmilez_> which would in this case have to be false
03/03 13:12:08<stoopkid> " but when most worlds i use have 1000-4 million rules it tends to happen :P" heh
03/03 13:12:53<stoopkid> well, but in FOL we've got this refutation completeness property, yea?
03/03 13:13:15<stoopkid> meaning you can query for "False", and if it's provable you've got an inconsistency
03/03 13:14:47<stoopkid> s/it's provable/robinson resolution search finds a proof/
03/03 17:42:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/03 17:43:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/03 20:48:13*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Quit: Leaving
03/03 21:38:16*** Quit: dmilez_ (181466f5@gateway/web/freenode/ip.24.20.102.245) left #AutoNomic: Ping timeout: 260 seconds
03/03 21:38:25*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/03 21:40:33*** Join: dmilez_ (181466f5@gateway/web/freenode/ip.24.20.102.245, dmiles: c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245)
03/04 03:21:07<stoopkid> i'm starting to like the name `cwn` more than `autonomic`, especially if we end up using cubical
03/04 03:21:51<stoopkid> closed-world nomic, or cw-nomic in the sense cw complexes https://en.wikipedia.org/wiki/CW_complex
03/04 03:22:15<stoopkid> also shorter
03/04 03:23:00<stoopkid> and possibly more distinct than AN (and can stand uncapitalized)
03/04 03:24:08<stoopkid> HMCa: had you suggested that before? can't remember. if so, some of the reason for it might've been lost on me at the time
03/04 03:30:45*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/04 04:25:26*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 252 seconds
03/04 04:47:36<koo5[m]> Yea its i good name, i especially like the connection to cwm
03/04 04:48:03<koo5[m]> Just maybe a bit too similar?
03/04 04:48:47<stoopkid> depends how interested berners-lee is, i guess?
03/04 04:49:57<koo5[m]> it really brings out the intent to reuse n3 rulebases
03/04 04:51:51<stoopkid> it's still potentially on the table, moreso now that i understand how this FOL <-> propositional translation, consistency check, etc.. can work, or, getting there anyway
03/04 04:51:52<koo5[m]> So...about the funds...
03/04 04:55:25<stoopkid> seems apparently up to HMC?
03/04 04:56:58<stoopkid> i'm not sure whether this is just for security of the funds or if she's just trying to wash her hands of the situation / dispute with ohad
03/04 05:03:29<koo5[m]> Idk, i take her word at face value, she says she's tired of everything
03/04 05:04:32<koo5[m]> Which is cool with me, now how do we secure the funds from ourselves?
03/04 05:07:25<stoopkid> be so unrealistically paranoid about touching them that you never touch them
03/04 05:15:48<koo5[m]> I dont have a single idea that id really like
03/04 05:19:21<stoopkid> what ideas do you not like
03/04 05:23:19*** Quit: dmilez_ (181466f5@gateway/web/freenode/ip.24.20.102.245) left #AutoNomic: Quit: Page closed
03/04 05:31:07<koo5[m]> 2 of 3 multisig with hmc, or 2 of 4 with nilli, because us two could just split it
03/04 05:32:56<koo5[m]> 2) actually using the legal systems, like, a real-world notary could secure the funds for us with some arbitrary schemas or conditions
03/04 05:35:12<stoopkid> there's 3 of 5
03/04 05:35:49<koo5[m]> 3) i dont like 3-of-4 with nilli either because the bus factor still seems rather high, like when anyone of us just silently decides to take a time off the internet, the others should immediately start moving the funds to a new wallet resillient to another disappearance
03/04 05:36:34<koo5[m]> who do we make the fifth o
              <koo5[m]> ne?
03/04 05:37:46<stoopkid> nilli?
03/04 05:38:20<koo5[m]> and the others?
03/04 05:38:57<stoopkid> idk, i mean, what are the components of the goal here
03/04 05:39:34<stoopkid> we can fulfill nilli's specific request at least with some random pubkey HMC sends us
03/04 05:40:48<stoopkid> so, beyond that, what introduces the need for multisig scheme in the first place
03/04 05:41:44<koo5[m]> increasing the bus factor is one objective for sure. And maybe this will be enough for nilli to agree to being a part of the scheme
03/04 05:42:15<koo5[m]> If not, then the objective would be to decide how to hold the funds without her
03/04 05:42:26<stoopkid> well
03/04 05:45:18<koo5[m]> idk, i think we should secure it against the two of us just splitting it, but if everyone thinks it not necessary, i'd be in. Then we dont have a need for a multisig scheme and can just trust in our sense of responsibility or something
03/04 05:46:18<stoopkid> i would agree that we should secure it against that; just thinking through various schemes and what the limitations are
03/04 05:48:12<koo5[m]> i like the idea of 3-of-5, with, say, dmiles or daemoz. Although, i think this wouldnt provide nilli and hmc with any assurance whatsoever that we dont just split it, this time between "us 3"
03/04 05:48:32<koo5[m]> yea me as well, im just being a bit chaotic about it
03/04 05:49:03<koo5[m]> so how about 4-of-6 where nilli and hmc each hold 2 keys?
03/04 05:51:27<koo5[m]> bus factor still sucks, would be nice if we could, at the same time, set up some kind of timed release, like, if the holder of the key doesnt "check in"for some time, the key stops being necessary
03/04 05:51:43<koo5[m]> would be sweet
03/04 05:52:06<stoopkid> right, that's the issue i'm more thinking of
03/04 05:52:40<stoopkid> what happens if/when everybody's silently been taking time away from the internet but us
03/04 05:54:46<stoopkid> i bet you could already do a check-in thing like that on btc
03/04 05:54:58<stoopkid> and, by implication, probably omni as well
03/04 05:57:14<stoopkid> we can check through what op-codes are available, and if they have any available that would allow us to compare some data with a block-time / depth / whatever, then you could probably make a p2sh contract for it
03/04 05:59:45<stoopkid> a (necessary) downside of that would be that it would require "upkeep", i.e. everybody in the contract has to actually check-in (& not miss check-ins) or else it "does what it's supposed to do"
03/04 06:03:47<stoopkid> a notary service or something could do the job, in theory, but, that's based on many layers of assumptions of "possibly probably trustable 3rd parties", doesn't really address any of the fundamental issues themselves, and, if those are to be addressed then the 3rd party notary becomes irrelevant anyway
03/04 06:04:14<koo5[m]> im thinking like once a year would work
03/04 06:04:50<koo5[m]> to me the only downside is that you'd spend time developing this instead of an(or should i say cwn)
03/04 06:04:51<stoopkid> right, low frequency especially with expected tx fee rates
03/04 06:05:15<stoopkid> well
03/04 06:05:32<stoopkid> i don't look at it quite like that
03/04 06:06:40<stoopkid> i look at it like we have to know both, one because we're building it, the other because our current income is on it
03/04 06:09:50<stoopkid> its not like building cwn (yea way more convenient to type than autonomic and more easily readable than an, we can at least run with the pun for a while though let's not go changing links & official titles or anything just yet) automatically puts the value of our agoras/btc/usd/czk onto cwn
03/04 06:14:12<stoopkid> obviously no scheme in terms of usd/czk is gonna fulfill the kinds of security assumptions you'd be expecting with an on-chain multi-sig scheme? so, that's right out, even just as a matter of principle in the context of what we're doing here, really
03/04 06:14:30*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/04 06:16:52<stoopkid> obviously to fulfill nilli's goals with it, it's all agoras, except for what she's donated for a milestone
03/04 06:17:19<stoopkid> though, increasingly this is looking like it may be a one-milestone project
03/04 06:20:29<stoopkid> once i've got all my current funds ready so i can spend them securely-enoughly, and gotten all the rest of nilli's funds secure for later, i figure once i get down to focusing 100% on cwn we're not even gonna be worrying about the intermediate milestone donations (don't worry though i still know what those milestones are if we do happen to get stuck after that point)
03/04 07:13:05* koo5[m] buries head in sand
03/04 07:13:08<koo5[m]> *pdfs
03/04 07:16:32<koo5[m]> or, until we have a better scheme, HMCa: you in for holding a 2-or-4 key? If yes i'll ask nilli if she is too
03/04 07:17:38<stoopkid> have you looked into how the tx's are structured?
03/04 07:18:36<koo5[m]> nope, tbh it still feels like one too many things to study
03/04 07:19:41<koo5[m]> and im not so 100% sure it will be relevant when i actually get to implementing agrs
03/04 07:21:05<koo5[m]> it would just be a zillionth-oneth thing id just be catching up with you
03/04 07:21:41<stoopkid> i would personally not worry about MLTT & future agrs before seeing how things are already done on bitcoin/omni
03/04 07:28:45*** Join: lex__ (5f1b2cef@gateway/web/freenode/ip.95.27.44.239, (unauthenticated): 95-27-44-239.broadband.corbina.ru/95.27.44.239)
03/04 07:29:15<koo5[m]> im curious about https://medium.com/holochain/beyond-blockchain-simple-scalable-cryptocurrencies-1eb7aebac6ae and similar
03/04 07:31:19<stoopkid> nilli's agoras isn't on a beyond a blockchain tho
03/04 07:34:30<stoopkid> but so basically you're curious about decentralization  without "wasted" PoW?
03/04 07:35:41<koom> im not concerned about pow
03/04 07:37:03<koom> these balancebook systems just seem so much more human-ish
03/04 07:37:39<stoopkid> elaborate on "balancebook systems"?
              <koom> dunno, been a while since i thought about it
03/04 07:38:53<koom> each person has his own balance book where he keeps how much he owes to whom and who owes to him
03/04 07:41:41<stoopkid> how does exchange happen?
03/04 07:42:13<koom> "As described in the Mutual Credit section, at the time of transaction each party audits the counterparty’s transaction chain. This is when they confirm the initial 10 vouches and also validate that their counterparty’s balance(s) are in good standing — that they make good on their debts and are not too far indebted to want to transact with."
03/04 07:42:47<stoopkid> hrm
03/04 07:43:03<koom> then they just sign a new entry both in their own and the counter party's book
              <stoopkid> could work, for a currency anyway
03/04 07:43:24<lex__> isn't the "balance book" system already implemented in ripple/stellar?
03/04 07:43:35<koom> dunno
03/04 07:44:15<koom> i know raiblocks/nano
03/04 07:44:26<lex__> it sounds very close to what they describe in the article
03/04 07:46:18<lex__> they just call these Hawaladars "gateways", these gateways can issue IOU notes and establish trust lines to other getways
03/04 07:47:10<lex__> ripple can also automatically convert these IOUs and find paths between gateways which are not connected directly
03/04 07:47:59<lex__> (well, it is better to say "automatically find fx market makers to convert")
03/04 07:48:05<koom> i see
03/04 07:48:32<stoopkid> couldn't you basically do this with side-chains and establish the root of trust from root-chain
03/04 07:49:49<koom> what kind of trust?
03/04 07:49:53* stoopkid is a bit tired and might not be following the technical details fully
03/04 07:52:04<lex__> before you can accept a certain IOU you should explicitly trust the gateway issuing those IOU
03/04 07:52:05<stoopkid> idk, depends on your trust model? i haven't really started thinking about currency much in particular until nilli came to us with her plans
03/04 07:53:05<lex__> you can also set your limit - how much of the gateways debt you are willing to take on.
03/04 07:56:12<lex__> only native currencies of Ripple(XRP) and Stellar (LUM?? don't remember how they are called) can be send to anyone and don't require any trust. but I guess I have to re-read this article as I don't see why no one mentions ripple or stellar, probably I miss something crucial in their design that sets it apart
03/04 07:58:13<lex__> probably this holochain is different because it drops the requirement of global consensus
03/04 08:07:49<koom> no fees and no waiting ...
03/04 08:11:17<stoopkid> so how does it work exactly? where does "original" money come from here and how exactly do you spend it?
03/04 08:11:30<lex__> well, ripple requires to destroy 0.00001 XRP per transaction (0 USD) and confirmation time is around 3.5 seconds
03/04 08:12:56<lex__> "original money" comes from people who give them to a gateway, e.g. a local shop on the corner or a bank branch
03/04 08:13:54<lex__> in return they get debt notes from that gateway
03/04 08:14:40<lex__> basically, it's a system that provides a ledger for debts
03/04 08:16:30<stoopkid> so like, i bring the shop some apples, i get XRP debt notes?
03/04 08:17:12<lex__> usually, you bring to the shop some USD, and get MYSHOP_USD notes in return
03/04 08:17:23<lex__> XRP is not debt
03/04 08:17:50<lex__> it's the only thing in Ripple which is not debt. it's pre-mined native currency used to prevent spam.
03/04 08:18:03<lex__> well, and make money for the company behind Ripple ofc
03/04 08:18:09<stoopkid> alright, making a bit more sense
03/04 08:18:51<stoopkid> so basically i bring to user X some commodity Y, and get X_Y debt notes in return
03/04 08:19:33<lex__> yes, and the value of X_Y is slightly less than the value of commodity Y
03/04 08:20:06<lex__> due to the counterparty risk (you hold debt denominated in Y, but not Y itself)
03/04 08:21:26<stoopkid> idk, some people pay to have certain commodities taken off their hands but remain as 'debt' to them
03/04 08:22:39<lex__> well, I would say almost everyone does it, e.g. take the case of a bank accout/deposit. 100$ in a bank do not have the same value as 100$ in cash
03/04 08:24:31<stoopkid> i guess i'm probably not properly differentiating long-term price (or.. probably cost is the word i'm looking for here) of "physically" holding/maintaining the actual asset vs. "value" of trading that asset in an exchange
03/04 08:25:59<lex__> yes, the ability to transfer or trade also has a value. people pay for "digitalization" of their commodity - now, when your USD are in Ripple in form of MYSHOP_USD, you can transfer them globaly and exchange them with at a very low cost.
03/04 08:29:06<lex__> it's like having a debit card - you store your money in a bank, pay for annual service fee, and get convinience of using a card rather than cash in return (debit cards are not common in the US and other countries, but they better exemplify the idea)
03/04 08:31:25<stoopkid> so how do you become a MYSHOP, and how auditable is this really?
03/04 08:34:07<stoopkid> is it just, node1 gets commodity from node2 and writes up a node1_commodity_node2 transaction, for any given nodes? i.e. anybody can be a MYSHOP?
03/04 08:34:55<lex__> you can become MYSHOP at will. nothing stops you. and if you are trusted by many, then you can operate as a bank. afaik there are no means to make you operate on "full reserver" basis, meaning that you can issue more MYSHOP_USD than USD you have.
03/04 08:35:09<lex__> * "full reserve"
03/04 08:35:37<stoopkid> hrm
03/04 08:35:42<lex__> there are certain KYC/AML/other restriction things Ripple implements, but I haven't studied them in detail
03/04 08:36:13<lex__> basically, the only thing you need is trust of other users.
03/04 08:40:03<stoopkid> alright, so, what do other users need to trust you, the MYSHOP, for? that their IOUs they give you are / will continue to be valued by other people in exchanges due to their having the value backed by whatever it is you gave them in exchange for the IOU?
03/04 08:40:26<stoopkid> that they gave you in exchange for the IOU*
03/04 08:42:15<stoopkid> i.e. at some point somebody can call up MYSHOP and say "hey i've got this IOU for a toaster do you have that still?"
03/04 08:48:02<lex__> in Ripple there are trust lines. these lines have currencies (e.g. "MYSHOP_USD"), balances (positive or negative) and limits (in both directions, each side setting the limit of what the other side can owe them).
03/04 08:48:56<lex__> before being able to accept gateway's (MYSHOP's) debt obligation you should establish a trust line to it
03/04 08:50:15<stoopkid> i guess MYSHOP is basically just trusted to be doing a good enough of job at maintaining the value of the assets exchanged to it for IOUs such that it can provide at least *something* of approximately equivalent value, adjusted for market changes, with reasonable liquidity, at whatever would be the time that it would be called upon to do so, whether by you (like with a savings account / safety deposit box
              <stoopkid> situation) or somebody down the line (like an exchange for cash situation), that kinda standard "being a bank" stuff?
03/04 08:50:44<stoopkid> or i should maybe say MYSHOP_cash
03/04 08:52:14<lex__> yes, apart from the technical conecpt of "trust lines", there is just trust i.e. trust that a gateway/bank will not collapse. so yes, this trust is just standard bank stuff.
03/04 08:54:04<lex__> but actuall "trust lines" in Ripple are more involved because they are used to find paths when you make a payment in MYSHOP_USD to somebody who wants to receive OTHERSHOP_USD
03/04 08:55:10<lex__> the business of being a gateway do not differ much from a regular banking though
03/04 08:55:29<stoopkid> so essentially a web of trust of a ledger of commodity-debt-value with maybe some "circumstantial" hierarchalization in trust lines due to some being better equipped to "be banks", or be "bigger banks" than others
03/04 08:56:58<lex__> yes, a bigger bank's usd would be more valuable than myshop's usd
03/04 08:57:44<koom> ok, sounds like three functions stuffed into one system
03/04 08:58:16<koom> backing of value, exchanging, and ledgering/transfering
03/04 08:59:00<stoopkid> so presumably if somebody wanted myshop to take their usd in exchange for something, myshop would be expecting a fee to cover the cost of their relative to position in the market of <shop>_usd's?
03/04 08:59:15<stoopkid> relative position*
03/04 09:00:49<stoopkid> or i guess they can also hedge based on relative value in different markets, i guess there's a range of options and business models there
03/04 09:01:21*** Quit: lex__ (5f1b2cef@gateway/web/freenode/ip.95.27.44.239) left #AutoNomic: Ping timeout: 260 seconds
03/04 09:01:54<stoopkid> koom: seems it's mostly just the latter two functions as the first is handled completely externally it sounds like
03/04 09:02:24<stoopkid> now i'm curious about how that part works, how does it actually hold the ledger and how do you actually craft an exchange
03/04 09:05:19<koom> its hard enough for me to think of the simplest case as in raiblocks and holo, no exchanges, no MYSHOP_USD, nothing bank-like
03/04 09:06:06<stoopkid> well
03/04 09:06:15<stoopkid> bank-like kinda simplifies the picture in theory
03/04 09:10:33<stoopkid> or i mean, it's already the "default thing" besides for bitcoin-style crypto, so it's just basically that on a new ledger format
03/04 09:11:27<stoopkid> now that "just" might contain a lot of improvements over the default banking design, so, i'm curious about the details
03/04 09:12:10<koo5[m]> sure
03/04 09:12:19<koo5[m]> https://raiblocks.net/media/RaiBlocks_Whitepaper__English.pdf
03/04 09:17:44<stoopkid> so the question for me is basically how do you audit a DAG, or at least, those within the DAG that you're transacting with?
03/04 09:19:31<koo5[m]> by cross-checking with those that the one youre transacting with transacted with
03/04 09:20:52<stoopkid> hrm
03/04 09:21:21<koom> "what do you mean, no central authority?":)
03/04 09:44:49<stoopkid> so basically if the system starts out with some amount of coins, and that's exactly how many coins there will always be on the system, then you can always verify whether you have a "complete" ledger and then it's just a matter of making sure you have a complete and accurate ledger?
03/04 09:58:26<koo5[m]> hmm
03/04 09:58:35<koo5[m]> is that in regards to raiblocks?
03/04 09:59:04<stoopkid> yea
03/04 10:09:18<koo5[m]> idrk
03/04 10:28:14<stoopkid> so raiblocks is nano now, or..?
03/04 10:31:42<koo5[m]> yea just a rename afaik
03/04 10:31:44<koo5[m]> im sure
03/04 10:33:30<stoopkid> hrm
03/04 10:33:49<stoopkid> voting mechanism seems possibly problematic
03/04 10:34:07<stoopkid> basically turns it into a sort of proof-of-stake
03/04 10:40:26<stoopkid> ah nvm
03/04 10:41:14<koo5[m]> the voting mechanism did seem like just covering something
03/04 10:41:15<stoopkid> so basically nobody can spend your coins because of digital signature, so the worst they could do is double-spend their own coins, but that's prevented by conflict detection
03/04 10:41:37<koo5[m]> sounds right
03/04 10:42:15<stoopkid> so i guess, it doesn't prevent double-spend except on the global scale
03/04 10:42:34<stoopkid> but then, neither does btc anyway so
03/04 10:46:32<stoopkid> bitcoin sort of has a time-window on when its even remotely computationally feasible to double-spend though, raiblocks/nano so far i haven't seen how the risk of a double-spend that could invalidate your received funds isn't a permanent risk
03/04 10:47:29<stoopkid> consider a very wealthy sender with very wealthy representatives, and a very poor recipient, with very poor representatives
03/04 10:48:45<stoopkid> i guess the more you spend them, the less risky they are
03/04 10:50:24<stoopkid> for example, you might be able to tilt the voting scales with wealthy representatives against my poor representatives, but you might not be able to tilt the voting scales against another wealthy person that i go buy something from, and then you have to be able to manipulate the game against them
03/04 10:56:48<stoopkid> "all  decentralized  cryptocurrencies,  may  be attacked  by  malicious  parties  for  attempted  financial  gain  or system  demise" is that really true, without beating elliptic curve signatures?
03/04 10:58:26<stoopkid> raiblocks is on the right track sort of, or at least, what i've seen of it that makes sense to me so far anyway
03/04 11:00:22<stoopkid> elliptic curve signatures / sha256/512 hashes or w/e
03/04 11:03:21<stoopkid> let's think about what the problem here in raiblocks is that requires the voting thing: auditing a block-chain tied only to somebody's public-key, solely under that public-key's control, doesn't audit all the transactions that public-key has made, at least not in this model
03/04 11:03:40<stoopkid> it audits all the transactions that they claim they've made
03/04 11:03:47<stoopkid> all the sends, i mean
03/04 11:04:19<koo5[m]> Yea
03/04 11:05:12<stoopkid> nobody can claim a receive without having the send, which can only be released by digital signature and having the amount available, so, you can pretty much all receives, it's only the sends that are left subject to scrutiny
03/04 11:11:04<stoopkid> basically what you need is that your further transactions with that money would be somehow dependent on the validity of mine
03/04 11:25:09<stoopkid> now, to what extent can you really back-track on the chain, if you don't have the priv-key to release the original funds from genesis block?
03/04 11:25:28<stoopkid> on the lattice/ledger, i guess i should say
03/04 11:29:20<stoopkid> we can say for sure you could only back-track as far back as you got the funds in the first pace
03/04 11:31:14<stoopkid> your receipt is dependent on all the sends that went into it, back to the trusted genesis block
03/04 11:33:56<koo5[m]> Back-track as in roll-back?
03/04 11:34:16<stoopkid> right, to double-spend
03/04 11:35:09<stoopkid> you can only double-spend/roll-back as far as your first receive, if everybody knows what the universally agreed genesis block is
03/04 11:36:51<koo5[m]> And, its up to each nodes due dilligence to decide how soon to trust your send
03/04 11:37:12<stoopkid> essentially what's being exchanged here is a (maybe) cryptographically-secure "trust-line" back to the genesis block, made exchangeable by... geometry/topology stuff (i'm tired i'll get into that later; short version: putting a number to it)
03/04 11:37:27<koo5[m]> Am i suddenly only communicating with a half of the network? Seems fishy
03/04 11:38:27<koo5[m]> Alright
03/04 11:39:24<koo5[m]> Yea this isnt the balance-book system, now i realize
03/04 11:39:48<stoopkid> what's the balance-book system as opposed to this?
03/04 11:40:20<koo5[m]> Holochain
03/04 11:40:32<koo5[m]> //Ceptr
03/04 11:40:46<stoopkid> like what lex was describing with ripple "myshops"?
03/04 11:41:22<koo5[m]> Maybe but simpler
03/04 11:43:13<stoopkid> yea it's a whole different kind of money entirely, despite looking similar on some technical angles (everybody keeps their own change, does their own tx's, audits by individual, etc..)
03/04 11:45:52<stoopkid> raiblocks is (or, is supposed to be, iiuc) closer to an actual physical resource, like, gold, like bitcoin, whereas holochain / ripple myshops stuff is basically debt
03/04 11:47:13<stoopkid> IOUs for some actual resource like XRP, nanocoin, btc, gold, coconuts, other people's IOUs, payment of taxes etc..
03/04 11:48:02<stoopkid> i have no personal judgement on whether that's a bad thing or a good thing though i have assumptions about where it would lead some people in some cases
03/04 11:50:37<stoopkid> debt systems are fragile as we're... pretty well aware by now, but, to be fair to the concept of debt we do manage our debt systems ridiculously unwisely, at a societal level
03/04 11:52:11<stoopkid> trading IOUs for bets on failures of industries and trading debt and possibly irresponsible levels of fractional reserve lending and govt manipulation and ..
03/04 11:53:27<koo5[m]> Hrm
03/04 11:55:20<stoopkid> if mechanisms were built into the framework that just had some kind of, idk, basic common sense applied to what was allowed to pass audits, maybe debt could work, or, at the very least, could work in the way that it's supposed to without trivially destroying itself
03/04 12:05:20<lexxus[m]> As far as I see it, raiblocks is trying to maintain global consensus as bitocoin does, but in a more scalable manner by replacing chain with a Dag. Holochain stipulates that global consensus is excessive and hinders scalability (If Alice and Bob agrees about a certain status quo, they don't really care whether Carol agrees to it).
03/04 12:07:26<lexxus[m]> BTW you can have a bitcoin gateway with audits through digital signatures.
03/04 12:09:22<stoopkid> good point there, i'll have to think about how that can tie into it, though, relying on bitcoin for an audit trail would just be going back to the bitcoin model, + other stuff, or would at least be incorporating the bitcoin model directly or indirectly into the decentralized consensus model
03/04 12:12:12<stoopkid> so basically the enemy in a network of mostly honest nodes here is network partitions
03/04 12:26:15*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
03/04 14:15:23<HMCa> :52 < koo5[m]> bus factor still sucks, would be nice if we could, at the same time, set up some kind of timed release, like, if the holder of the key doesnt "check in"for some time, the key stops being necessary
03/04 14:15:27<HMCa> :52 < koo5[m]> would be sweet
03/04 14:15:48<HMCa> look at what gmaxwell has been working on lately
03/04 14:39:50<koo5[m]> Abandoned UTXO should be forgotten and become unspendable.?
03/04 15:58:29* koo5[m] sent a long message: koo5[m]_2018-03-04_20:59:37.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/ackWKVTHcNlebuCuGlXxvnel>
03/04 16:00:17<koo5[m]> HMCa: you in for a 2-of-3 or 2-of-4 multisig with us, for now?
03/04 16:00:44<koo5[m]> lexx_: thanks
03/04 16:12:20<koo5[m]> good point about mutual credit being essentially debt though, i have to think about it
03/04 16:38:05*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/04 17:55:38*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 276 seconds
03/04 21:56:20<stoopkid> koo5[m]: well, the way i look at it (modulo more specific technical details) is that it's neither a good nor bad thing it's just a different kind of financial instrument that, at least at first glance and even after some basic analysis, does have (at least ostensibly) legitimate utility
03/04 21:57:07<stoopkid> it's just, the utility of a debt-based economy won't be exactly the same thing as utility of an asset-based economy
03/04 21:58:17<stoopkid> but i don't think we need to think of the goal as being like, for example, trying to smash all the different possibilities for what financial instruments can be into the same asset
03/04 21:59:23<stoopkid> depending on how you smash them together, it may just be diluting the meaning and utility of each presumed function of the instrument
03/04 22:03:38<stoopkid> some people want to issue credit, some people want to assume debt, this is just a thing that happens, and in any situation where the debt was repaid, and was not assumed in the first place due to exploitation, and the players involved are "economically rational actors", it's a win-win for creditor & debtor
03/04 22:07:33<stoopkid> the concept breaks down in two particular places that i recognize (not counting obviously-risky behavior like fractional reserve lending): 1) debt/credit-pooling, or essentially anything that contributes to a general practice of abstracting your decisions about the economic value of the debt-notes away from the assets that are fundamentally assumed to back them, and 2) asymmetric circumstantial conditions of
              <stoopkid> players in regards to their ability to operate with "full agency" within the system
03/04 22:10:41<stoopkid> one of the biggest problems i think with, say, the US credit-economy system is that the very nature of the financial instruments you acquire is essentially entirely open-ended by default
03/04 22:12:07<stoopkid> like, the whole thing with "collateralized debt obligations"
03/04 22:14:36<stoopkid> collateralized debt obligations is basically like if you take literally every "thing you shouldn't do with a credit/debt market" that i've mentioned so far and packaged them all up into a single financial instrument from hell
03/04 22:14:40<stoopkid> apparently
03/04 22:20:00<stoopkid> but if you look at say the 07-08 financial collapse, the only reason these instruments were able to have such a large effect on the global economy is because of just how open-ended the assumed backing of *everybody's* debt instruments were that *everybody* was all tied up in each other's mis-steps
03/04 22:22:03<stoopkid> separate things out, your financial instruments should have very isolated concerns as to their backing
03/04 22:22:56<stoopkid> it should be straightforward to audit the quality of an instance of the instrument, otherwise, honestly, you maybe should be already thinking that the very design of the instrument itself has failed audit
03/04 22:27:38<stoopkid> the easiest it will ever be to audit the quality of a financial instrument whose value is based on some asset is when that instrument is that asset itself, so, in abstracting away from that for liquidity we should be thinking in very conservative, closed-world steps
03/04 22:32:24<stoopkid> and, rather than making steps by adjusting the nature of the instruments in place, adjust by introduction of new financial instruments
03/04 22:34:01*** Join: suiqiu_ (~suiqiublo@101.83.186.91, (unauthenticated): realname)
03/04 22:37:14<stoopkid> ripple seems a much less conservative step than, say, nano/raiblocks, and far more open-ended in terms of backing of the credit/debt network, if i understand this "myshops" thing correctly, and also seems way less straight-forward to audit
03/04 22:39:12<stoopkid> nano/raiblocks you've actually got the asset itself "guaranteed", it's not a credit system, you can audit the quality with 100% certainty, under the assumption that it won't be double-spent out from under you or that the whole system won't fall apart due to maybe not actually being able to prevent that
03/04 22:41:21<stoopkid> idk, seems like there would maybe be some kind of attack you could pull against a network like that
03/04 22:42:08<stoopkid> especially with the voting thing as it is
03/04 22:44:29<stoopkid> like i'm basically wondering how strong is its eventual convergence guarantee
03/04 22:52:47<stoopkid> so, let's just look at what raiblocks is aiming for rather than how it's getting there: basically trying to collect consensus on global arrow of time based on a collection of local arrows of time
03/04 22:52:58<stoopkid> for as cheap as possible
03/04 23:08:51<stoopkid> the ideal would be, the recipient adds a valid send to their own personal ledger, and it is immediately globally irreversible, for no extra cost
03/04 23:14:59<stoopkid> seems probably impossible
03/04 23:19:44<stoopkid> so, the goal for an individual recipient is confirmation of global replication of the transaction
03/04 23:48:58<stoopkid> so, what is "confirmation" really, what would make one assured that what they've actually received is "confirmation"?
03/04 23:50:34<stoopkid> i would say you've got "confirmation" when the validity of everybody else's future transactions necessarily (perhaps modulo some cryptographic hardness) depends on the validity of your "confirmed" transaction
03/04 23:51:00<stoopkid> btc satisfies this, modulo cryptographic hardness, particularly with the PoW-based eventual convergence
03/04 23:52:35<stoopkid> the assumption being, it becomes exponentially more difficult to perform the double-spend as time progresses
03/04 23:55:51<stoopkid> hrm
03/04 23:57:54<stoopkid> i wonder if there's something more like public-key / digital signature that can address the double-spend
03/04 23:59:32<stoopkid> i.e. a transaction to you is such that you, and only you, can claim not just that transaction but any double-spent transaction of the same funds
03/05 00:04:45<stoopkid> well, more like veto, but... this isn't quite right, somebody could make tx to themselves and then double-spend it to you
03/05 00:10:13<stoopkid> hrm, i feel like this should maybe be combined with actual physical/virtual network topology
03/05 00:13:27<stoopkid> basically a big p2p conglomeration of physical/virtual subnetworks that can be relatively assured of fast assured 100% data replication
03/05 00:13:47<stoopkid> (each subnetwork, that is)
03/05 00:25:40<stoopkid> basically what you want to know is that the *entire* *active* economy has acknowledged your transaction by making further transactions whose validity depends on the validity of yours, until the possibility of changing it sufficiently buried by everybody's ledgers and their desire to maintain the value of what's in them
03/05 00:32:30<stoopkid> hrm
03/05 00:33:39<stoopkid> so it may help to differentiate between the active, exchange component of this economy, and the passive, storage component
03/05 00:34:05<stoopkid> in bitcoin, nodes that are just storing don't have to do anything but wait for some sufficient block-depth
03/05 00:35:14<stoopkid> they wait for the exchange component to bury their transaction
03/05 00:38:14<stoopkid> so let's say some passive storage node has been waiting a while and wants to come along and double-spend
03/05 00:38:36<stoopkid> well, no
03/05 00:41:08<stoopkid> if the active component of the economy has been being honest, then the basic continued functioning of that economy should be dependent on that long-ago transaction not being double-spent
03/05 00:49:30<stoopkid> rather than sync yourself to a passive block-chain that is being actively extended, you sync yourself to *the* active network, which is built to ensure that its own continued functioning as a stable economy is dependent upon its acceptance of your own local personal ledger
03/05 00:52:24<stoopkid> so, how do you coordinate this; you basically need a way to register what "the" active network is, at any given time
03/05 00:56:12<stoopkid> bitcoin is.... "extremist" maybe in its solution to the problem; in some ways it's overkill, in other ways it's too purist, and, like koo rightly pointed out "inhuman"
03/05 00:56:55<stoopkid> autonomic root-chain is a different kind of story; different kind of game entirely
03/05 00:57:34<stoopkid> an economy, well, we have some basic assumptions about what that economy represents otherwise we wouldn't be participating in it in the first place
03/05 00:59:55<stoopkid> we can certainly say "longest chain found gets confirmation of everybody on the planet", sure, we can also say, at least with a market economy that's operation is based on being forced to actively continue to reaffirm itself during exchanges, "confirmation of everybody active in exchange on the planet is confirmation of everybody active in exchange on the planet"
03/05 01:00:38*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/05 01:00:40<stoopkid> this is maybe not fantastic on the anonymity angle? idk i guess i'm fairly privileged in regards to not needing to be anonymous in things maybe?
03/05 01:01:44<stoopkid> but also this is sort of an example of something i say about logics: you get out of them what you put into them
03/05 01:02:30<stoopkid> you can only get so much out of an economy if you have unrealistically solipsistic expectations of your participation in it
03/05 01:04:18<stoopkid> or unrealistically paranoid expectations about apocalyptic situations that cause global-scale network/economic collapse
03/05 01:04:59<stoopkid> not unrealistically paranoid in that they won't happen, but, unrealistically paranoid in terms of, you've probably got way bigger problems at that point
03/05 01:08:55<stoopkid> so, it seems like it can potentially work under the assumption that you have an actual active economy with it
03/05 01:20:28<stoopkid> like, if you can get enough value into that currency, over a large enough assumed on-average mutually-disinterested network of participants, with a known / trusted register of the active network at any given time, such that the active network can give confirmation of your transaction by making its continued functioning dependent on continued (passive) confirmation of your transaction, then it seems like you can
              <stoopkid> get, basically instead of eventual guaranteed convergence under assumption of no 51% attack, active guaranteed convergence
03/05 01:20:57<stoopkid> so, let's look at one of things causing a problem here: CAP theorem
03/05 01:21:12<stoopkid> can't have consistency, availability and partition-tolerance simultaneously
03/05 01:22:14<stoopkid> one view: there is no partition-tolerance, so have to take consistency & availability
03/05 01:24:02<stoopkid> well, eventual consistency; can't have availability and (global) consistency, because of the possibility of network partitions
03/05 01:26:41<stoopkid> i'm thinking more like: we want availability, and we want consistency, so because of the possibility of network partitions, we're investing all this energy into PoW rather than better / more trusted networks / economies based off them
03/05 01:30:53<stoopkid> we want availability and we want global confirmation, what limitations are willing to tolerate on that, relative to the possibility of network partitions?
03/05 01:33:37<stoopkid> we don't want any limitations on the confirmation of course, it should be 100% confirmation relative to the assumption that the asset's market stays active right, so, it's more a question of, what limitations on availability are we willing to tolerate?
03/05 01:34:37<stoopkid> idk, what are you willing to tolerate out of your markets, in general?
03/05 01:37:12<stoopkid> we build all this tech that's supposed to protect against network partitions... probably because we have a tendency to destroy networks / not help ones that are being destroyed
03/05 01:43:03<stoopkid> if an entire subnetwork that was involved in providing confirmed high-speed transaction suddenly blacks out on the exchange radar (or literally, or by govt. shutdown, or by war, hurricane, tidal wave, etc..), is it ok to wait 5 minutes for your exchange to be "globally verified" ? is confirmation from the entire network that you're still connected to not enough? not sure what we're expecting
03/05 01:44:36<stoopkid> they'll probably confirm your transactions if you go fix their networks
03/05 02:05:40<stoopkid> so, there's this high-speed global verification going on there; who's doing this? a bunch of peers in a network. divided into a collection of subnetworks; now, what's the point of the subnetworks here:
03/05 02:10:11<stoopkid> rather than taking bitcoin's stance of blindly trudging through network partitions, we explicitly declare the networks beforehand (not hard-code into the design but can be formed with "full agency" on a p2p basis)
03/05 02:10:29<stoopkid> and actively monitor the status of our connectivity with them
03/05 02:15:23<stoopkid> so, basically you'd have staged confirmation based on participant subnetworks; generally i'd think one would strive to organize the virtual subnetwork divisions based on where/how network partition is most likely to occur
03/05 02:46:23<stoopkid> so, confirmation, at any stage, essentially consists of a 100% "replication", by some subnetwork
03/05 02:53:03<stoopkid> we don't actually need "replication", per se, of course the point is for everybody to be able to  / have to store their own ledgers & not need all that PoW or transaction cost or long transaction times or etc.., what you need is for everybody else's further transactions to become immediately dependent on yours
03/05 02:59:11<stoopkid> so, part of the point of joining into a subnetwork, probably geographically-oriented, would be to ensure as high-speed confirmation by as much of the economy as possible, i.e. you want as much of the economy to be dependent on your transaction as possible, as fast as possible
03/05 03:07:37<stoopkid> so, to ensure that you connections / confirmations are actually gonna be fast, you're gonna pick somebody to connect with such that you've got as fast of a connection as possible with, with as little likelihood of network partition as possible, because to exchange you would need to participate in an explicitly stated collection of networks that's gonna be part of what everybody's referencing in audits
03/05 03:18:45<koo5[m]>   idk
03/05 03:19:42<stoopkid> don't know what
03/05 03:21:01<koo5[m]> isnt the only way to ensure that the network doesnt eventually vote  to invalidate some tx that you received, to make sure that the "whole" network accepts it? i dont see the point of this pow-ish stacking idea
03/05 03:21:29<stoopkid> yes
03/05 03:21:37<stoopkid> the point is to make sure the whole network accepts it
03/05 03:22:18<koo5[m]> so, you broadcast it, you wait until a huge majority of the network echoes it, and youre good to go
03/05 03:22:21<stoopkid> "whole", but, whole is really just, enough of the whole to somehow "bury" any potential invalidation
03/05 03:23:20<stoopkid> not just echoes it but specifically makes their own further transactions dependent on not invalidating yours
03/05 03:24:00<stoopkid> the problem is, how do you know when you've got a huge majority accepting it or not, and whether it will somehow be invalidated in the future?
03/05 03:24:31<stoopkid> what's your personal confirmation of global confirmation?
03/05 03:28:25<stoopkid> that's part of the reason for the "stacking" thing, to know what you're expecting confirmation from, when you can reasonably expect confirmation / what kind of availability of confirmation you should be able to assume from different parts of the network, separating concerns of parts of the network, etc..
03/05 03:30:34<koo5[m]> idk, if you fail to define what "huge majority" is, whats the use of "not huge majority"'s history stacking on yours?
03/05 03:31:21<stoopkid> well, i'm wondering if that should just be left up to personal decision about what constitutes a healthy network / economy
03/05 03:33:01<koo5[m]> yea well it all should be
03/05 03:34:48<koo5[m]> and checkpointing into bitcoin blockchain and whatnot
03/05 03:37:13<koo5[m]> and this always comes down to cnl's
03/05 03:42:48<stoopkid> what i'm sort of trying to do with this is make the freedom (in terms of tx price / time) and functioning of the economy be based on high-speed connectivity and sort of proof-of-stake and semi-voluntary cooperation such that it actively incentivizes basically just "building better / faster networks" in place of what PoW does
03/05 03:43:03<koo5[m]> because you just cant have a gui with an options dialog with a tab with a checkbox "dont trust chinese nodes because the government has just taken control of them" and another checkbox "trust joe next door after 5 seconds because i know where he lives" ..
03/05 03:44:52<koo5[m]> and another "increase the default confirmation wait time when the bitcoin checkpointing gateway is out of order"..
03/05 03:46:06<stoopkid> well, i'm thinking it should be a simpler / less open-ended model than that
03/05 03:46:34<stoopkid> "dont trust chinese nodes because the government has just taken control of them"
03/05 03:46:42<stoopkid> hrm
03/05 03:47:05<stoopkid> "trust" with what?
03/05 03:50:50<koo5[m]> "ignore any traffic from them", maybe
03/05 03:52:44<stoopkid> hrm
03/05 03:54:23<stoopkid> well, it should be like raiblocks in that they can only spend what they have, at worst it should just temporarily not get spent
03/05 03:54:41<stoopkid> i mean like
03/05 03:57:49<stoopkid> it's a currency, like bitcoin  or like cash, if the chinese govt got them, they got them
03/05 03:58:31<stoopkid> can they actually manipulate the functioning of the network this way? in bitcoin maybe by controlling massive amounts of mining power
03/05 04:05:06<stoopkid> i mean, the model here is sort of that it's not about majority, it's about 100% or continual, active, near-100% consensus, constantly
03/05 04:10:21<stoopkid> it should be partition-tolerant, but the model should be that partitions should be expected to small and anomalous not large-scale and the norm
03/05 04:10:46<stoopkid> otherwise you've already got problems with your basic assumption of "fast global confirmation"
03/05 04:19:33<koo5[m]> idk, still better to blacklist 10% and then another 40% that wait for them to become a 50%
03/05 04:22:08<koo5[m]> i mean the attack is still a 51%, even if not of computing power but of "somehow trusted nodes"
03/05 04:22:53<stoopkid> hrm
03/05 04:23:32<koo5[m]> sure, me blacklisting them doesnt protect me from others interactions with them
03/05 04:24:02<koo5[m]> idk
03/05 04:35:23<stoopkid> so, the idea is basically that, since it's a DAG, we want high-speed transactions, and no double-spend... all nodes basically have to cooperate in the sense that when any node wants to make a transaction, every other node that is aware of the transaction is going to taking it into account in all their future transactions until it's taken into account in at least the entire "active" market
03/05 04:41:54<stoopkid> you want your personal confirmation of global confirmation to be assurance that the global economy itself would have to revert in order to invalidate your transaction
03/05 04:50:09<stoopkid> basically, you wanna see that the audit trail for enough of other people's funds is dependent on your transaction
03/05 04:52:12<stoopkid> kind of like PoS but, what you really wanna be seeing is that the network has essentially put "100% of its stake" into your transaction
03/05 05:23:21*** Quit: suiqiu_ (~suiqiublo@101.83.186.91) left #AutoNomic: Quit: Leaving
03/05 05:24:01<koo5[m]> im not convinced this is a good schema, but ill keep an eye out if it comes up somewhere
03/05 05:25:07<koo5[m]> or rather, not convinced it can stand on its own
03/05 06:28:49*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Quit: Leaving
03/05 09:59:25*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
03/05 10:02:49<koo5[m]> https://groups.google.com/forum/message/raw?msg=comp.lang.ada/E9bNCvDQ12k/1tezW24ZxdAJ
03/05 10:58:29*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
03/05 10:58:56<nilli> hi all
03/05 11:08:24<nilli> I never had my name mentioned so many times on the IRC since the day i first enter the tauchain
03/05 11:09:04<nilli> personalty I think that a bit of trust goes a long way
03/05 11:09:14<nilli> as long as you trust yourself as well
03/05 11:11:17<nilli> it is interesting to see how much effort is required to secure a trustless system
03/05 11:11:50<nilli> guess what? this is why nature is using trust big time
03/05 11:12:07<nilli> well intertwined with the right incentives
03/05 11:13:33<nilli> so as much as I appreciate that tech in terms of "trustless", multisig ,6 keys.. time dependent ext
03/05 11:16:01<nilli> it really think that we should never forget that its not where it all started. its start with your value and your value is something that you need to worry about and foster, not your money
03/05 11:17:14<nilli> ofc too often in our world it is one and the same. but this is what we came to resolve among many other things
03/05 11:18:46<nilli> ..... in a way that liitle bomb I send you regarding the fund was a nice little exercise... but I did not do it for the exercise
03/05 11:20:12<nilli> I think that we all should give ohad a lot of credit for handling funds and dealing with all the shit that go with that in a very honest way
03/05 11:22:10<nilli> HMC distanced himself from any actual (physical) touch in the project. I am waiting to see his reply regarding the key issue
03/05 11:24:21<nilli> and will be really surprise if he will agree to it.
03/05 11:30:39<nilli> however its his money which he have thanks to Ohad and that have value partially thanks to HMC work and a bit from our contribution as well.
03/05 11:34:19<nilli> its his money (since I stand behind my word ) and so its up to him to decide how he want it to get to you so you will have some funds hopefully to complete his project
03/05 11:38:20<nilli> regarding the value of agoras. yes its almost like a game. fun game . I put much of my chips in that "game" following my logical assessment (could be an Etheren millioner if was not listening to Ohad and HMC argument back then
03/05 11:40:14*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/05 11:41:00<nilli> I still believe they were right though
03/05 11:45:30*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
03/05 12:30:52<HMCa> wrt the dag networks...
03/05 12:32:21<HMCa> if I send you some coins and then no further coins are sent anywhere on the network, does your coin still become more secure in your posession over time?
03/05 12:34:56<HMCa> I won't even bother wrt their being (worse than classical) PoS models... (I've beaten that to death already in the past...)
03/05 12:35:42<HMCa> btc works because *everyone* gets added security *all* of the time, even when nothing else occurs...
03/05 12:37:02<HMCa> on dags, you only get security added on after you have already sent away to someone else what is being secured, and even then only occasionally...?
03/05 12:38:53<HMCa> so looking at any one btc tx, security should always grow exponentially over time
03/05 12:40:15<HMCa> looking at one dag tx, security would seem to grow sublinearly, intermittently, and always dependent upon other subsequent economic activity (instead of only dependent upon the continuing operation of the network itself)
03/05 12:41:21<HMCa> anyway, dag silliness aside, what problem are you trying to solve exactly?  What is your percieved downside to classic PoW again?
03/05 14:27:02<koo5[m]> i think my coin only becomes secure over time, i dont really get this pseudo-pow idea that it becomes secure by subsequent transactions
03/05 14:29:58* koo5[m] isnt trying to solve anything, just showing stoop why i dont think btc tx format will necessary be relevant once/when i get to building agrs over tau
03/05 14:31:45<koo5[m]> percieved downsides are confirmation time,
03/05 14:31:56<koo5[m]> is that even a property of pow?
03/05 16:18:37<stoopkid> if you send me some coins and then no coins are sent anywhere on the network again, then your economy already broke anyway
03/05 16:28:12<stoopkid> “What problems are you trying to solve anyway” long tx time, high tx fees, centralization of mining power, “wasted” work
03/05 16:30:28<stoopkid> Wrt PoS youve only beaten that to death in the context of autonomic, not sure what it necessarily has to do with some random currency instrument
03/05 16:39:01<stoopkid> "always dependent upon other subsequent economic activity"
03/05 16:39:13<stoopkid> this is true in bitcoin as well though
03/05 16:39:34<stoopkid> passive storage nodes aren't burying other peoples' blocks into the chain, active exchanging nodes are
03/05 16:43:56<stoopkid> koo5[m]: btc tx format is relevant for current agoras tokens and bitcoins and relevant for "prior art" and relevant for testing my omni<-> btc exchange mechanism
03/05 16:45:03<stoopkid> and, how are your funds being secured "over time", what is "time"?
03/05 16:46:48<stoopkid> your funds are secured by *irreversibility* of the transactions that sent them to you
03/05 16:47:01<stoopkid> how do you measure the irreversibility of your tx?
03/05 16:48:12<stoopkid> in bitcoin it's measured by actual work, and assumptions about the economy that's doing that work
03/05 16:49:41<stoopkid> mostly just assumptions about what capacity for work players in the network have, i.e. "does anybody control 51% of mining power"
03/05 16:52:40<lexxus[m]> well, one can always add empty PoW blocks to the Dag. They can serve as a mean of initial distribution of coins and as checkpoints to secure network over time if no transactions occur. As far as I understand, long confirmation time has little to do with PoW itselft, it is more about ability to  propagate blocks fast enough. If we set block time too low (i.e. Pow complexity is too low), the network would end up with lots
03/05 16:52:41<lexxus[m]> of orphans and oscillate between chains. It would be nice to run a few simulation
03/05 16:54:25<stoopkid> well, but right, block-propagation speed is limited by the need for high-complexity PoW, and then everybody's competing to get onto the same linear chain
03/05 17:03:08<stoopkid> PoW serves a couple of purposes simultaneously it seems like; preventing spam; giving eventual convergence; and giving a way for an individual to determine the state of convergence
03/05 17:03:37<lexxus[m]> As I see it, pow is just a way to organize of distributed lottery/leader election mechanism. The winner get a right to issue a block. If we assume that we have an infinitely fast network (all node become immediate aware of a new block), than we should be able pick arbitrary simple pow, and as a result achieve zero confirmation time, right? I mean - all we want is to randomly pick a node and make it a leader, so it can
03/05 17:03:38<lexxus[m]> issue a new block. Then repeat this process indefinitely, randomly picking nodes one at a time.
03/05 17:06:05<stoopkid> how do you pick the nodes "randomly"? and what happens if the randomly chosen node doesnt issue a new block?
03/05 17:09:02<lexxus[m]> bitcoin "randomly" picks nodes using pow - guessing a seed ("lucky number") in pow is almost random, to the extent that it is proportional to computational resources you have ("the number of lottery tickets you buy").
03/05 17:09:54<lexxus[m]> If a node is doing nothing, another node is elected. Afaik this is exact how PoS works
03/05 17:10:58<lexxus[m]> (in pos they also usually punish the  node which does not issue a block when elected)
03/05 17:13:22<stoopkid> this is part of why i've started trying to explicitly distinguish between the passive storage vs. active exchange component of the network; if you have an "explicitly registered" active component, then you know what nodes you can maybe expect some kind of active participation from, while simultaneously freeing up other nodes to not have to be called upon to do so
03/05 17:18:31<stoopkid> but once i start making that distinction, it seems like  if what you aim for is global confirmation of your transaction, just within the active component of the network, then global confirmation by the active component will force the hand of the passive component, down the line
03/05 17:19:38<stoopkid> i.e. if the economy is sufficiently "flat" / mutually disinterested, then once the active component of the network has made a decision and stuck with it, then passive nodes are also stuck with that decision as well unless they are able to reverse the entire economy somehow
03/05 17:21:50<stoopkid> wrt bitcoin's random choice, sure, but, it's making that choice explicitly through the rate-limiting factor of PoW
03/05 17:25:37<stoopkid> and with something else like, say, using a RNG or PRNG or something like that to actually explicitly choose a node that then must actively take some action has the problem that people can flood the network with their own IDs and get a disproportionate share of the voting, or might need to be "punished" for not taking an action
03/05 17:28:55<stoopkid>  note bitcoin also implicitly defers the choice into the active component (computationally active at least, even if not "financially" active; how distinguishable are the two though, in a game that is "just a currency"?), i.e. nodes choose themselves, by actually actively doing the work faster than anybody else did the work
03/05 17:33:24<stoopkid> one benefit of bitcoin's PoW is that it gives anybody ability to enter the market, from outside of it, without necessarily having to ask somebody for permission to enter the market (i.e. "can i buy some btc from you?")
03/05 17:34:45<stoopkid> throw more computational power at mining, and you can eventually enter the market
03/05 17:38:58<lexxus[m]> yes, so the question is where from does this need to limit pow rate comes? Why it should be 10 min, but not say 10 sec? I haven't come up with any explanation but network propagation time. Yes, you can run sybil attack and flood network with fake ids, but in the same way you can achieve disproportional share of pow network by pouring in computational power. It's only the matter of choice which resource is more evenly
03/05 17:39:00<lexxus[m]> distributed. You can have for instance proof of storage (afaik  some coins did that already). So I don't see how pow is fundamentaly different from "distributed random leader election". Well, apart from the fact that pow exists and works fine, and my imaginary "lottery" does not.
03/05 17:40:56<lexxus[m]> The distinction between active and inactive part is an interesting concept, and does not seem to depend much on the choice of particular consensus mechanism.
03/05 17:44:23<stoopkid> well, i guess it has to do with how PoW's got several overloaded functions; like, a leader is randomly chosen, by doing their own work, which creates a non-negligible computational obstruction to somebody else getting to elect themselves leader that round
03/05 17:50:16<stoopkid> i mean, i guess the reason for rate-limiting is basically to ensure that these computational obstructions can actually be large enough
03/05 17:51:17<stoopkid> how to determine 10 mins as a good number for that is far beyond my capabilities currently haha
03/05 17:52:07<stoopkid> 10 mins, 10 secs, idk, the computer's doing like 10 billion operations a second... what kind of intuition do i have for "time" lol
03/05 17:58:08<stoopkid> so where i'm sort of trying to go with the active vs inactive distinction is thinking a) the active component is the part that "buries" transactions; b) the active part can be assumed to actively participate; c) the active part can be assumed to have higher speed and less likelihood of network partition; d) the active part can actively monitor the state of connectivity of the active part, if it knows what the
              <stoopkid> "whole" of the active part is supposed to be
03/05 18:01:50<stoopkid> i guess with bitcoin ultimately it's the same kind of thing; you have to trust your knowledge about certain aspects of the bitcoin economy relative to reality
03/05 18:02:51<stoopkid> if you audit the current bitcoin block-chain you can see that an incredible amount of "work" has gone into it
03/05 18:03:27<stoopkid> if you're an average person at least, way way way more "work" than you'll ever hope to be able to replicate
03/05 18:04:25<stoopkid> but not everybody's equally average in this regard, so, you have to know things about what kinds of total computational capacity the world has
03/05 18:10:03<stoopkid> or alternatively, you can make assumptions about it based on known identities of certain bitcoin users, their geographic distribution, likelihood of mutual disinterest, likely relative distribution of computational capacity etc etc.. i.e. economic assumptions
03/05 18:12:10<stoopkid> and that's part of the reason we choose to participate in it in the first place; it's not just that it's "technically sound", because even the technical specs claim it's capable of toppling over and failing if there's not a healthy vibrant, relatively horizontal and mutually disinsterested "human" economy "backing it up"
03/05 18:18:25<stoopkid> so, especially if we're talking about high-speed *global* confirmations, i figure there's more that can be done the more assumptions about the "healthiness" of the economy that you're willing to put into your models
03/05 18:18:42*** Join: nilli (54e5897d@gateway/web/freenode/ip.84.229.137.125, (unauthenticated): IGLD-84-229-137-125.inter.net.il/84.229.137.125)
03/05 18:19:03<stoopkid> hey nilli
03/05 18:19:23<nilli> hi
03/05 18:21:54<nilli> any conclusions?
03/05 18:23:30<stoopkid> well, still waiting for HMC i guess; i'm just sort of rambling about DAG-chain / high-speed / low-cost / no-PoW transaction stuff
03/05 18:28:14<stoopkid> oh woops, i thought i'd PM'd him your email but maybe i was having network troubles at the time as it seems it didn't send
03/05 18:30:34<stoopkid> well, sent now; my mistake
03/05 18:37:17<stoopkid> wrt whether he'll agree to it, idk, he did the multi-sig scheme with me koo and redfish before so maybe
03/05 18:39:37<nilli> on what did you multisig?
03/05 18:40:31<stoopkid> we set up a donation address for the project. never ended up using it for some reason
03/05 18:43:13<nilli> so I guess it will be fine with him . that the best for your project i think
03/05 18:44:48<stoopkid> so, why do you want HMC to hold the funds rather than yourself? trying to prompt him into a more active role or something?
03/05 18:47:38<nilli> no, I just want to end my role :)
03/05 18:49:42<stoopkid> i see. well, fair enough. can i ask why?
03/05 18:50:34<nilli> I realize that I cant contribute anything but the fund's distribution, and its not something I care for
03/05 18:53:54<stoopkid> hrm, yea i can certainly understand that; i still disagree with the first part but this project is on volunteer basis anyway so that's all just a matter of if/how you would want to participate in other ways
03/05 18:59:28<nilli> by the way im not trying to prompt HMC into a more active role, i understand his motivation and agree with it in theory.
03/05 18:59:53<nilli> in practice its up to him to make it work
03/05 19:01:59<stoopkid> well, imo he is "making it work" by not needing to accept donations / trying to live off donations already accepted and it's mostly just me and koo who are needing / trying to "make something work" in this regard
03/05 19:05:29<nilli> why are you calling it donations?
03/05 19:06:26<stoopkid> but, from a purely technical angle this possibly makes most sense for satisfying *his* particular aims it?
03/05 19:06:30<nilli> you worked for it and will work for the rest of it . and your work should add to the value
03/05 19:10:13<stoopkid> well, because for me, they are donations, to koo they may be investments for future agoras work but i personally can only agree at this stage to keep working on autonomic like i have been
03/05 19:14:22<stoopkid> in the sense that, autonomic is still 100% neutral and any funds i accept for working on autonomic must be for keeping autonomic 100% neutral, otherwise your agoras-over-autonomic plans wouldn't actually be agoras-over-autonomic, they'd be agoras-over-some-agoras-influenced/controlled-nomic-system
03/05 19:19:55<stoopkid> "obviously" the fact that the only source of funding i have for just working on autonomic is this agoras, and the fact that koo and i are generally implicitly/explicitly committed to continue working with each other, and the fact that koo has explicitly agreed to build agoras once autonomic is created, means that there's a pretty solid chance that i'll be working on that too, *after* autonomic is built
03/05 19:23:43<stoopkid> but we still have to keep a formal distinction between what is autonomic, what is agoras, we have to be explicit about what commitments there are for which developments, basically
03/05 19:24:52<nilli> for now lets just get autonomic built. dont bother with agora . these funds I will keep  for when the rootchian is up and running.
03/05 19:25:26<nilli> dont bother or get it to cnfuse you stoopkid
03/05 19:26:01<nilli> call it donation if it makes more sense for you
03/05 19:26:59<nilli> * "these funds" I mean the third part
03/05 19:28:52<stoopkid> well, really i don't know what makes sense; sometimes i feel like i'm just grasping for some kind of proper legalese to euphemize an obvious conflict of interest in my taking agoras funds for working on autonomic, with or without explicit agreement to then work to build agoras after autonomic is built
03/05 19:32:35<stoopkid> ironically this is one of those places where PR could help a bit..
03/05 19:32:57<nilli> listen, part of the funds are due to HMC work on tauchain. he keep working on the same project  which we all assume to be important. so all good a fair
03/05 19:36:03<stoopkid> if we didn't have too few, too agoras-invested participants on the autonomic part of it, none of this would really a problem or needed discussion
03/05 19:36:06<nilli> ok you know what? this is maybe where I do step in and decide that I rather have both teams working on it then only Ohad's
03/05 19:36:24<nilli> it not for the money and never was for the money
03/05 19:37:04<nilli> its for what I believe in
03/05 19:39:03<stoopkid> sure, i know what your intentions are; same as mine. does the world though? that's really the question / HMC's major concern (if i understand him correctly, anyway). it's not like "alternative finance" is historically known for its benevolence really..
03/05 19:42:00<stoopkid> like i said, i think this is one of those places where PR could help
03/05 19:42:49<stoopkid> the problem is if the world is misled to some assumption that the whole thing is about agoras, or that agoras is gonna be "the thing"
03/05 19:43:17<stoopkid> "there's gonna be this autonomic platform, and agoras is gonna be 'the killer finiancial app'"
03/05 19:44:59<stoopkid> i mean certainly its fine for the collection of people who are interested in the agoras app (ohad's camp of people) to think that agoras, whatever that may be, would be a killer app, whatever computational platform it was on, whatever that may mean, the problem would be if autonomic is immediately associated to agoras
03/05 19:46:20<stoopkid> agoras -> autonomic is a fine association; autonomic -> agoras is not, basically
03/05 19:47:14<stoopkid> or at least, there can't be unique association from autonomic to some specific context on autonomic, pre-genesis, that's the big issue
03/05 19:47:43<nilli> stoopkid, dont bother with what anyone else think ,do what you think is right and so will everyone else. if its true it will agree with each other without a need to coordinate
03/05 19:48:36<stoopkid> but, ironically, the only reason that the uniqueness of that association wouldn't just be immediately recognized as an obvious *joke*, would be due to lack of PR about what autonomic *itself* is, does and represents
03/05 19:49:46<stoopkid> it would be like saying "the world is wisconsin"
03/05 19:54:06<stoopkid> nilli, well, it's not just about me though, HMC and i have mutual promises with each other about the development of this project
03/05 19:56:35<stoopkid> koo is also roped into it now basically cause he believed in me / HMC / the plan / you / hypothetical future or current agoras / agoras-like apps enough to quit his job to devote to working on it
03/05 20:04:50<stoopkid> imo everybody who's investing in *ohad*'s agoras is, primarily, investing in the *current* agoras presale on omni over bitcoin, and secondarily investing in *ohad*'s planned agoras design, over *ohad*'s planned crypto platform, and you basically have koo on retainer to build a backup agoras, with agreement of the *agoras* investor community, over autonomic if we have that if/when ohad's crypto-platform and/or
              <stoopkid> agoras on it fails or has been determined *by consensus of the agoras community* to have failed to materialize
03/05 20:06:32<stoopkid> ohad is designing a specific crypto-platform, and a specific financial platform on it. his (serious) investors will be looking at the detailed specs, they want to know exactly what is the nature, technical & economic, of the financial instrument they are planning to get their hands on
03/05 20:07:11<stoopkid> they are then shaping their plans, designs, and desires around *ohad*'s designs
03/05 20:10:18<stoopkid> a "backup" over autonomic will be a non-trivial thing to, first and foremost, even specify what the objective is. you would have to first collect consensus from the serious technical and economically minded participants of ohad's camp to reconstruct a description of what the goal even was, and relate that to your new dev team that would be able to translate those desires onto something equivalent on the autonomic
              <stoopkid> crypto-platform
03/05 20:12:42<stoopkid> you've basically got koo here studying and preparing to take on that role of collecting that consensus and performing that translation, if/when it becomes necessary, and helping me with stuff in autonomic dev along the way
03/05 20:51:08*** Join: suiqiublockchain (~suiqiublo@101.83.186.91, (unauthenticated): realname)
03/05 21:51:38*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/05 21:52:05*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/05 22:20:27*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 248 seconds
03/05 22:37:27*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/05 23:53:20<HMCa>  < stoopkid> “What problems are you trying to solve anyway” long tx time, high tx fees,
03/05 23:53:23<HMCa>              centralization of mining power, “wasted” work
03/05 23:53:48<HMCa> none of these are provlems, though
03/05 23:54:02<HMCa> let's take them one by one
03/05 23:54:12<stoopkid> sure
              <HMCa> "long tx tine"
03/05 23:54:17<HMCa> *time
03/05 23:54:29<HMCa> this isn't a problem, this is "the point"... heh
03/05 23:54:58<HMCa> I've always said: the only real function of bitcoin is to mark the passage of an hour
03/05 23:55:17<HMCa> (on average, ofc)
03/05 23:55:31<stoopkid> why is this what's needed, in the specific context of bitcoin though?
03/05 23:55:50<HMCa> ?
03/05 23:56:01<HMCa> because that was the problem statement:
03/05 23:56:24<HMCa> measure the passage of an hour in a trustless, decentralized setting.
03/05 23:56:57<stoopkid> the function of bitcoin is to support an electronically exchangeable currency, trustlessly, in a decentralized setting
03/05 23:57:20<HMCa> s/bitcoin/satoshi's blockchain/ :-)
03/05 23:57:34*** Quit: nilli (54e5897d@gateway/web/freenode/ip.84.229.137.125) left #AutoNomic: Ping timeout: 260 seconds
03/05 23:57:52<stoopkid> sure
03/05 23:58:53<stoopkid> so, the question is basically, if all you need is to support an electronically exchangeable currency, trustlessly, in a decentralized setting, do you need satoshi's block-chain
03/05 23:59:28<HMCa> hrmm...
03/06 00:00:40<HMCa> "so far" it would seem so.  heh. :-D
03/06 00:02:40<stoopkid> all the attempts i've seen have seemed dubious to me, but i would also say that everywhere i saw dubious things i also saw potential for improvement on the basic concepts (and also that i haven't thoroughly gone through all the designs and therefore am not necessarily justified in my dismissal of some of them)
03/06 00:03:21<HMCa> I have gone over a *lot* of the designs, as you've seen over the years, and still do... and...
03/06 00:03:24<HMCa> well
03/06 00:04:21<HMCa> let's just say "bleak" doesn't even begin to cut it. ;-)
03/06 00:04:32<stoopkid> raiblocks seems suspect to me, i'd like to a demonstration of how exactly a malicious attack could be pulled on or against it / why it would fail to be able to operate trustlessly though
03/06 00:04:34<stoopkid> well
03/06 00:04:43<stoopkid> "theoretical" demonstration ofc :P
03/06 00:05:11* HMCa shrugs
03/06 00:05:26<stoopkid> yea i'm not sure what's the proper protocol for responsibly discussing possible attacks on / against other people's stuff :)
03/06 00:05:35<HMCa> it should not be hard to see how it dilutes the security, at best... heh
03/06 00:06:10<HMCa> security should grow exp with time... because attackers' resource will (moore's law...)
03/06 00:06:43<HMCa> if you grow subexp or (luls) sublinear.... eeesh gl.
03/06 00:07:43<HMCa> your hashrate (generally security resource alloc) curve should look like bitcoin's, not like most altcoins'
03/06 00:08:57<stoopkid> well, depends. to what extent does the mechanism for trustless operation need to depend on work at all, in a setting where the mission statement is limited entirely to providing a currency
03/06 00:09:02<HMCa> and certainly not like any multi-tip dags, (again luls... it's just lulstastic.  btc is linear chain for reasons.  that work progress % in your btc client log *means* a thing.  an important thing.)
03/06 00:09:55<HMCa> if the currency is to be reversible it can't be trustless...
03/06 00:10:14<HMCa> you must implicitly trust whoever gets to hold the erasers, right?
03/06 00:10:24<HMCa> they has godmode
03/06 00:11:13<HMCa> so work to secure from reversion *must* occur, else we *must* *trust*...
03/06 00:11:50<stoopkid> sure, so, who gets to hold the erasers though, and what is the mechanism for erasing, and how is erasing prevented; we know how this works with satoshi's block-chain, the question is whether it can work with anything else, in a setting where the only thing we're doing is providing a currency
03/06 00:12:23<HMCa> well, it needs to work both in theory and in practice
03/06 00:13:11<stoopkid> is work the only thing that can secure from reversion? what about the dependency of the validity of everybody in the economy's transactions on the validity of everybody else's transactions?
03/06 00:13:44<HMCa> the secondd question is like asking if btc can work without PoW
03/06 00:13:52<HMCa> and... no, not really :-)
03/06 00:14:46<stoopkid> well, bitcoin has the property that the validity of everybody's transactions is made to be dependent on the validity of everybody else's
03/06 00:15:15<stoopkid> whether this is coincidental or necessary, idk, but, seems like this dependency is essentially the indication of global confirmation
03/06 00:16:37<stoopkid> what i can say for sure: there are at least 10-20 more specific qualitative/quantitative things that can be discussed about what is necessary for providing a trustless, decentralized, electronically exchangeable currency before we reach the conclusion "it's PoW and only PoW"
03/06 00:16:45<HMCa> work (of some form) *is* the only thing that can secure from reversion, without a defer to a CA anyway... ;-)
03/06 00:16:56<HMCa> PoS (done "just right" so as to be soubd at all, anyway) makes tradeoffs, but beyond that...
03/06 00:17:00<HMCa> *sound
03/06 00:17:34<HMCa> everything else that I've seen seems to have some-or-other fatal oversight...
03/06 00:20:37<HMCa> so far, we basically still only have satoshi's solution as "obviously sound"... and a couple of simple variants in the "maybe" category :-)
03/06 00:21:31<HMCa> most everything else turns out to be snake oil :-\
03/06 00:22:21<HMCa> you really do need to just mark the hour, and bury under exp complexity growth as the network scales
03/06 00:24:41*** Join: nilli (54e5897d@gateway/web/freenode/ip.84.229.137.125, (unauthenticated): IGLD-84-229-137-125.inter.net.il/84.229.137.125)
03/06 00:24:54<stoopkid> so basically: it's possible but don't blindly trust snake oil
03/06 00:25:08<stoopkid> or i should say: not necessarily not possible
03/06 00:25:22<stoopkid> or not known to be impossible, but not proven
03/06 00:25:37<HMCa> it's possible, and maybe even possibke in nee ways, but let me know if you see one because I really have not yet :-D
03/06 00:25:42<HMCa> *possible in new
03/06 00:26:19<HMCa> ok, so back to "faster tx"
03/06 00:26:22<HMCa> nonsense...
03/06 00:26:27<HMCa> an hour is an hour.
03/06 00:26:29<HMCa> :-D
03/06 00:26:37<stoopkid> lol
03/06 00:27:12<HMCa> if you have 2 min blocktimes that just means you're waiting 30 instead of 6, and have lower latencies with higher resorce overhead for it...
03/06 00:27:31<stoopkid> well, i understand that concept
03/06 00:27:46<HMCa> if we really ever need to, we can change these params in btc, but... why?
03/06 00:27:53<HMCa> an hour is still an hour
03/06 00:28:20<nilli> (*all you want is the "work" to be something needed , like data recall for AI ( brain POW). )
03/06 00:28:44<HMCa> *maybe* network aspects could end up pushed to some extremes that might make such a change make sense...
03/06 00:28:56<HMCa> but if so, we're a long way from seeing any such
03/06 00:29:07<stoopkid> well, we somehow need "instant" transactions, seems to be the semi-tangential mission statement of the day
03/06 00:29:09<HMCa> which kinda leads to the second thing... tx fee
03/06 00:29:15* HMCa checks mempool
03/06 00:29:19<HMCa> yah, erm
03/06 00:29:23<HMCa> what tx fee?
03/06 00:29:27<HMCa> XD
03/06 00:29:52<stoopkid> idk i've heard it's expensive to get people to work these days
03/06 00:29:53<HMCa> tx fee is a market
03/06 00:30:04<HMCa> just like btc/usd or eth/cad
03/06 00:30:14<HMCa> sometimes it gets pumped
03/06 00:30:21<HMCa> sometimes it gets dumped
03/06 00:31:21<HMCa> and nothing we;ve seen so far can be called "natural free market action" yet because there is actually still virtually always 0 demand relatuve to supply, because subsidies...)
03/06 00:31:28<stoopkid> "*maybe* network aspects could end up pushed to some extremes that might make such a change make sense..." this is more along the lines of what i'm thinking
03/06 00:32:37<HMCa> as long as block rewards are around and huge, the tx fee market is just a silly side-experiment of btc, heh
03/06 00:33:17<HMCa> we don't actually get to know much about its' real dynamics for many years yet
03/06 00:33:21<stoopkid> "long way from seeing such", right, so, in my analyses, i'm trying to take into account exactly what the network faults are, and how they are accounted for
03/06 00:34:20<HMCa> well, you could have perpetual subsidy instead of tx fees, but then you lose fixed supply
03/06 00:34:23<HMCa> but
03/06 00:34:37<HMCa> that all sounds like contextual matters ;-)
03/06 00:35:04<stoopkid> it's interesting that so far everything that my analyses have concluded to be necessary for this kind of currency, have been demonstrated as aspects of bitcoin, even when presented in entirely different terms than bitcoin normally is, but the only part of my analyses so far that has concluded that "work" is necessary is for weeding out spam by making it expensive
03/06 00:35:39<HMCa> what is important for our discussion is that work does just have to be rewarded *somehow*... and perpetually.
03/06 00:35:44<stoopkid> maybe* necessary, i should say
03/06 00:36:03<HMCa> "spam"
03/06 00:36:07<HMCa> ? :-)
03/06 00:37:25<HMCa> what work makes expensive is *conflict* from *inconsistencies*
03/06 00:37:59<HMCa> to disagree with decided commitment is the thing which must cost! :-D
03/06 00:38:25<stoopkid> well, even if you solve the "instant, free, no PoW, no-double-spend, auditable tx's" problem, that introduces a problem  that instant, free, no PoW tx's means everybody can just pile on tx's, making the ledger huge
03/06 00:38:33<HMCa> every tx in every block is very real, just as real as any other.
03/06 00:38:34<stoopkid> and forcing lots of verification
03/06 00:38:49<HMCa> no tx is more or less real than any other tx
03/06 00:39:25<HMCa> forcing lots of verification is a problem why?  as long as they pay, and pay they must...
03/06 00:39:39<HMCa> this is what the network do, after all
03/06 00:40:33<stoopkid> sure (not sure about paying, except possibly for "network itself" (as opposed to "work itself")) the question just becomes how to manage all that ledger size; the answer seems to be verifiable pruning somehow, but, still trying to work that out
03/06 00:41:51<HMCa> ehhhh, that is a different question, heh
03/06 00:42:24<HMCa> maybe some new deep crypto magics could solve that one for currencies
03/06 00:42:28<HMCa> but I dunno
03/06 00:42:41<stoopkid> well, that's the question :P
03/06 00:42:54<HMCa> luckily, that is a *very* contextual problem to have :-P
03/06 00:43:09<stoopkid> or really i should just say "a" question, cause it's not "the" anything i'm just rambling about the concept since koo brought it up
03/06 00:43:21<HMCa> not all contexts will need 100% retentions abd replications
03/06 00:43:28<HMCa> *and
03/06 00:43:33<HMCa> I gtr soon
03/06 00:43:57<HMCa> so let's talk avout bitcoin's other non-problems real quick, heh
03/06 00:44:02<HMCa> *about
03/06 00:44:34<HMCa> "cebtralization of mining" you might need to clarify a bit...
03/06 00:44:46<HMCa> do you mean lije wrt large pools?
03/06 00:44:55<HMCa> *like
03/06 00:46:00<stoopkid> well, before that, let's talk about nilli 's problems and whether you agree to her request about the agoras, if that's still her plan with it
03/06 00:47:24<nilli> yes still is
03/06 00:47:43<nilli> I need an address to send it too
03/06 00:47:49<HMCa> I'll give a pubkey again so long as I'm never to be called upon to apply it.  IOW whatever signing you come up with for it should assume I might be dead or uncooperative :-)
03/06 00:48:50<stoopkid> so, basically: no
03/06 00:49:22<HMCa> if you need my signature to release anything you'll probably just be burning coins... assume I'll get hit by a bus eventually, or something
03/06 00:49:26<nilli> lets assume uncooperative :)
03/06 00:50:18<nilli> should they get it all now hmc?
03/06 00:50:40<HMCa> again, gmaxwel work on fancy stealthy conditional keying probably applies.
03/06 00:52:07<nilli> if assuming that the work done (invested) is worth itself only upon more work (at least as much work)
03/06 00:52:33<nilli> *you tx issue
03/06 00:53:46<HMCa> that work only holds value if an earlier fork never catches up
03/06 00:53:49<nilli> lol, sorry just had to... actualy did not follow all that talk
03/06 00:54:34<HMCa> any work done on a lost fork drops to 0 value rather quickly. :-)
03/06 00:55:00<stoopkid> yep
03/06 00:56:12<HMCa> actually drops to a net negative if you weren't also mining on the winning side
03/06 00:56:19<HMCa> because opportunity loss
03/06 00:56:29<stoopkid> which fork is that btw
03/06 00:56:38<HMCa> ?
03/06 00:57:29<stoopkid> wait, wait
03/06 00:57:55* stoopkid missed the joke and thought you were talking about another tau-like project
03/06 00:57:57<nilli> well the question I have is that: is risk a part of healthy economy? and how much of it
03/06 00:58:10<HMCa> joke?
03/06 00:59:17<HMCa> nilli: risk is a funny thing, like luck it only exists in the past, retroactively after the fact
03/06 00:59:18<nilli> some work must be lost i think
03/06 01:00:06<HMCa> you will not be lucky or unlucky, you are not lucky or unlucky, but you may have been lucky or unlucky!
03/06 01:00:42<HMCa> you can't actually measure risk until after it no longer applies...
03/06 01:00:56<nilli>  well it need to be calculated in order to be sustainable. in bitcoin it is calculate
03/06 01:01:10<HMCa> no, you can only speculate on it. :-)
03/06 01:01:47<HMCa> you can't actually know hashrate capacity directly! :-D
03/06 01:01:53<nilli> speculate as probabilities
03/06 01:02:04<stoopkid> lol
03/06 01:02:42<HMCa> someone might have giant qbit array farms that could mine out the rest of the bootstrap suvsidy for themselves tomorrow, thus destrying it all...
03/06 01:03:01<stoopkid> well
03/06 01:03:03<stoopkid> true
03/06 01:03:18<HMCa> I think most of us assume that this is not likely the case
03/06 01:03:19<HMCa> but
03/06 01:03:23<HMCa> speculatively.
03/06 01:03:25<HMCa> :-)
03/06 01:04:06<nilli> anyway I need a resolution regarding the funds
03/06 01:05:27<HMCa> stoopkid: look into gmaxwell's stuff on the multisig and see if one of his toys can make something work?
03/06 01:05:33* HMCa gtg
03/06 01:06:42*** Quit: nilli (54e5897d@gateway/web/freenode/ip.84.229.137.125) left #AutoNomic: Quit: Page closed
03/06 01:07:15<stoopkid> alright, catch ya guys later
03/06 01:08:57*** Join: nilli (54e5897d@gateway/web/freenode/ip.84.229.137.125, (unauthenticated): IGLD-84-229-137-125.inter.net.il/84.229.137.125)
03/06 01:09:07<nilli> sorry lost you for a moment there
03/06 01:09:24<stoopkid> np
03/06 01:10:07<nilli> any one can be gone just as HMC
03/06 01:13:38<nilli> its when the choice is given regarding managing the risk itself that it become real problem. before you could choose to trust me to fulfill my promise or not trust me.
03/06 01:15:32<nilli> one way or another you need to agree to trust something.
03/06 01:16:56<stoopkid> well, nothing has really changed on our part anyway, if you hold onto the coins, we fully trust you to do however you see fit with them, it was never about whether we trust you or trust HMC
03/06 01:17:58<stoopkid> me and koo were just talking about multisig options in case HMC would want to do it that way if he accepted your agreement
03/06 01:18:12<nilli> when HMCa say dont trust me (to be around) Its like saying that you can never take the chance on anything
03/06 01:20:44<stoopkid> i don't recall HMC saying that? maybe it wasn't here, idk
03/06 01:21:39<stoopkid> oh the "getting hit by a bus" thing?
03/06 01:23:19<nilli> 03/06 00:47:49<HMCa> I'll give a pubkey again so long as I'm never to be called upon to apply it.  IOW whatever signing you come up with for it should assume I might be dead or uncooperative :-)
03/06 01:24:51<stoopkid> idk i interpreted that as a creative way of saying "no, leave me out of it", i could be wrong
03/06 01:26:17<nilli> would you take a chance on him being around?
03/06 01:28:25<stoopkid> sure, kind of?
03/06 01:28:46<stoopkid> i mean, i would take a chance on him being around, in ways that have absolutely nothing to do with this agoras
03/06 01:29:57<stoopkid> and in regards to the agoras, they're not mine to say what to do with them anyway, according to you technically they're owed to him, so..
03/06 01:31:04<nilli> he should be trusted with it more then anyone else since he want the project done
03/06 01:32:11<nilli> and for whatever reason need you to do it other then himself
03/06 01:32:34<nilli> I an the one least to be trusted on that whole deal
03/06 01:33:24<stoopkid> well, i think i'm the one least to be trusted on the whole deal, which is the cause of concern :)
03/06 01:33:34<nilli> if im whiling to give it all to you now you should take it :)
03/06 01:33:47<nilli> why are you to be least trusted?
03/06 01:35:16<stoopkid> well, because i guess if anybody would be slipping something through the cracks in the design to favor agoras, i would hypothetically be the one actually executing that
03/06 01:35:42<stoopkid> but the whole thing is really ridiculous imo, just an unfortunate holdover paranoia from tau days
03/06 01:36:28<nilli> what thing is ridiculous?
03/06 01:37:16<stoopkid> the whole thing about concern about who's to be trusted about what moneys and why and how and etc.. in concern to whether this could in any way bias what i am building here
03/06 01:40:44<stoopkid> i feel like the existence of the concern in the first place means i've somehow failed along the way in my own personal PR to HMC about what i'm doing here. and maybe i have, idk.
03/06 01:41:07<nilli> it the core of everything you do . we just dont get to the root of it. if you where to think of it as the system you design you would never say its ridiculous
03/06 01:42:39<nilli> in a regular group of people that would never be an issue they will multisig
03/06 01:43:46<nilli> but we question that in a  fundamental way
03/06 01:43:50<nilli> anyway need to go soon
03/06 01:45:16<nilli> maybe all you need is you and koo multisig assuming that you feel a commitment to your agreement with HMC
03/06 01:48:16<stoopkid> well, idk, that's more a matter of you / HMC trusting us with it :) hopefully i've demonstrated that the only thing i do is work on autonomic & surrounding work but this is all a matter of what you want to do ultimately
03/06 01:50:24<nilli> trust, as I suggest, is in all after all.  but what is trust other then an intricate incentives structure?
03/06 01:52:09<nilli> as I always say bad people are just stupid people. (other then the one that are traumatized which a whole other ball game)
03/06 01:52:48<stoopkid> well, me and koo will do / not do whatever you want with these funds, aside from biasing or giving appearance of bias to autonomic, but, i can fix that concern with some (i guess much needed) documentation about what autonomic is
03/06 01:54:12<nilli> I could tell you right from the beginning that its the only real option. ( I know HMC well enough for that)
03/06 01:55:18<nilli> by having me keep the last third I take of your shoulders the need to worry about the agoras app
03/06 01:56:30<nilli> so you need only to make the rootchain.  then who ever want to do the agoras app will be fundded by that last third
03/06 01:57:23<nilli> you and koo should multisig the funds. thats all . get the address and ill send it to you here
03/06 01:58:38<nilli> ok. see with HMC if he agree (im sure he will) then do it
03/06 02:00:04<stoopkid> alright we'll work it out
03/06 02:03:34*** Quit: nilli (54e5897d@gateway/web/freenode/ip.84.229.137.125) left #AutoNomic: Ping timeout: 260 seconds
03/06 09:41:17*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
03/06 09:54:19*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/06 10:54:23<koo5[m]> stoopkid: wanna take care of creating the multisig? it looks fairly involved
03/06 10:57:24<koo5[m]> lets ask nilli for a pubkey and try to do 2-of-4
03/06 11:05:54<stoopkid> sure
03/06 11:06:59<stoopkid> well, after we talk to HMC about it, anyway
03/06 11:12:04<koo5[m]> have you figured out what hmc meant re timed release?
03/06 11:13:56<stoopkid> probably some p2sh bitcoin opcode stuff
03/06 11:44:42<HMCa> .g gmaxwell bitcoin-dev taproot graftroot
03/06 11:45:36<HMCa> taproot with nlocktime and superceding transaction replacement can be used together to do some pretty crazy powerful stuff
03/06 11:50:55<stoopkid> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015614.html this?
03/06 12:03:43<HMCa> and the subsequent work
03/06 15:15:03*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/06 15:30:26*** Quit: suiqiublockchain (~suiqiublo@101.83.186.91) left #AutoNomic: Remote host closed the connection
03/06 15:31:16*** Join: suiqiublockchain (~suiqiublo@101.83.186.91, (unauthenticated): realname)
03/06 16:24:44<stoopkid> TFW you've got your bootloader all customized with nice fonts and graphics and color-schemes and then you use it to boot into black/white monospace shell prompt with no graphics support
03/06 16:28:35<stoopkid> ah, right, only weird people like me do weird things like that
03/06 16:36:09* stoopkid figuring out how to add an installation ISO to grub menu so that I can install OS's without having to deal with external media since i don't always have DVDs available (and tend to let them get scratched up when i do) and am often stuck with old hardware that doesn't always do things like USB boot
03/06 17:03:59<HMCa> isostick ftw
03/06 17:13:29<stoopkid> interesting
03/06 17:15:36<stoopkid> idk whether my pc would even support that tho, gotta learn some more about how floppy booting vs. CD/DVD booting vs USB booting vs. different kinds of USB booting actually works; apparently there's a lot going on there sometimes
03/06 18:35:13* koo5[m] sent a long message: koo5[m]_2018-03-06_23:36:23.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/GiFlAMIsGILawWeFniwfSQls>
03/06 18:51:18<stoopkid> alright
03/06 19:21:49*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
03/06 22:10:25<stoopkid> i feel like linux needs a generalized CRUD interface
03/06 22:11:22<stoopkid> so that you don't have to memorize a million different little instances of CRUD commands, and can make some of them more interoperable
03/06 22:12:36<stoopkid> pretty much every command is some sort of ETL, or, perhaps more generally "read transform write"
03/06 22:14:46<stoopkid> stdin stdout stderr is a POSIX thing right? that's a good start with it, kind of, or at least, it's on the right track of abstracting/generalizing on the structure of an ETL
03/06 22:16:38<stoopkid> it falls over when it comes to composability; there's pipes and such but, these only allow you take the commands you already have available, as black-boxes, and compose their I/O
03/06 22:17:07<stoopkid> what you need more is composability *within* a single ETL command
03/06 22:17:56<stoopkid> where am i reading from, how am i reading it, how am i transforming it, where am i writing it to, and how am i writing it
03/06 22:19:52<stoopkid> all the instances of this for different kind of data in different places that needs to be accessed in different ways should have their access interface abstracted away; linux already does this pretty well with the whole "everything's a file, devices are files, etc.." it's mainly just the user's interface via terminal commands that is a bit lacking on the abstraction & composability
03/06 22:20:59<stoopkid> so i guess this is more of a statement about shells than it is about linux itself
03/06 22:22:09<stoopkid> one could probably make a shell that provides this kind of interface using just functionality that linux already provides
03/06 23:03:57*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/06 23:04:21*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/06 23:23:23<HMCa> stoopkid: you seem to be confusing linux (the kernel) with gnu's posix userspace
03/06 23:23:31<HMCa> common mistake
03/06 23:33:55<stoopkid> quite possible, still trying to sort out what subsystems provide what functionality
03/06 23:58:16<HMCa> strictly speaking "Linux" is just the os itself
03/06 23:58:24<HMCa> the kernel and its' modules
03/06 23:58:44<HMCa> (drivers and protocols and such)
03/07 00:02:58<HMCa> if you really want an idea of what *linux* is, see https://www.kernel.org/doc/htmldocs/kernel-api/
03/07 00:19:10<stoopkid> alright, i've at least managed to add the iso as a grub menu-entry and boot into the install, let's see if it actually works or if it runs into trouble; i notice the installation is prompting with a lot of things i've never been asked in an install before, like various things are for some reason mounted and it wants to unmount them. i guess this has something to do with going through grub before starting the
              <stoopkid> installation
03/07 00:21:44<stoopkid> i kinda wonder if it needed some of those things to stay mounted in order to do the install; seems it might be stuck on some "Detecting file systems..." step, but maybe just taking a while idk
03/07 03:52:28*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/07 04:27:09<stoopkid> muahaha, success
03/07 04:27:20<stoopkid> not quite as clean of a success as i'd like, but, it's a start
03/07 04:27:49<stoopkid> unfortunately i wasn't thinking about it and i just overwrote all my nice grub configs with the new os
03/07 04:31:02<stoopkid> i guess now i need to start looking at preseeding and automating all my various configs
03/07 05:38:06<stoopkid> well, spoke too soon, was still having some issues
03/07 05:39:13<stoopkid> i think i maybe got it mostly sorted out, OS seems to install and boot just fine; i'm getting some issues with the swap directory that i still need to figure out; not sure why that's happening
03/07 05:41:25<stoopkid> i'm realizing now that some of my previous issues that caused me to want to install a fresh OS is actually just vi behavior that was confusing to me because of vim expectations
03/07 05:42:29<stoopkid> seems the one major thing left to address on this machine before i'm comfortable continuing with the wallet setup is this pollack inconsistency i'm experiencing..
03/07 05:43:28<stoopkid> characters aren't appearing correctly on my screen, i.e. sometimes a completely different character shows where i know for certain that a certain character should be
03/07 05:44:53<stoopkid> this will make it inconvenient (possibly even irresponsible) to follow glacier protocol's paper storage...
03/07 05:45:21<stoopkid> man, i'm already jumping through so many hoops with this machine in order to satisfy glacier protocol..
03/07 05:45:42<stoopkid> i need to rewrite that entire protocol into... reality
03/07 05:50:02<stoopkid> koo5[m]: alright i gotta sleep, hopefully i'll be able to finish debugging this last problem and then i'll get the multisig set up for us
03/07 05:51:41<stoopkid> i thought i had already solved this by getting the right NVIDIA drivers... guess not though cause i was still experiencing the problem before the fresh install
03/07 05:52:31<stoopkid> well, i guess i better start with that at least
03/07 07:20:52*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 252 seconds
03/07 07:29:12*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/07 09:52:36*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
03/07 10:07:53*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/07 10:50:47<HMCa> swap is a partition (more generally a block device) not a directory
03/07 10:51:27<HMCa> if chars are getting jumbled on console check locale settings and available codepages, etc
03/07 10:51:53<HMCa> wrt nvidia driver... can't help you therr, its just all terrible. XD
03/07 10:52:21<HMCa> nouveau can be painful, but the nvidia binary blobs are scary
03/07 11:43:34*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
03/07 14:58:34*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
03/07 15:10:33<stoopkid> thanks checking that out
03/07 15:15:38*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/07 15:30:33<stoopkid> not sure what i should be looking for with these locales / codepages, seems i've got the en_US.UTF8 as expected
03/07 16:12:38<stoopkid> hrm, doesn't seem like this is the source of the problem; i'm looking at other examples of where locale/codepage settings were causing somebody's characters to get jumbled on the console, and it looks rather different
03/07 16:13:26<stoopkid> i.e. when somebody's got the wrong locale settings, it's systemic, and every instance of a char gets garbled to something else; that's not what i've got happening here
03/07 16:17:57<stoopkid> like, looking at my screen right now, i've got an "_" changed to an upside-down solid triangle; i've got a "." changed to a pink ".", i've got a "-" changed to a "%"
03/07 16:19:21<stoopkid> sometimes the correct character appears at first, and then it's like the screen does a refresh and the char changes
03/07 16:20:44<stoopkid> the monitor doesn't appear to be the problem (that would actually be extremely surprising if it was, considering the problem is on a char-by-char not pixel-by-pixel basis)
03/07 16:22:42<stoopkid> well, maybe, i don't actually have any idea of what this monitor's doing. for all i know it could operate directly with chars when the OS is running in console mode
03/07 16:23:40<stoopkid> the reason i don't think it's the monitor is because when i issue more commands at the console, the previous output on the screen moves up the screen, but the garbled characters stay garbled, in exactly the way they were originally garbled
03/07 16:24:31<stoopkid> so, the problems seems to be a matter of what data is getting stuck into whatever buffers the monitor reads its display from
03/07 16:26:22<stoopkid> unfortunately i have one monitor, one PC to use as offline signing machine, and currently only one way to connect the two together: this NVIDIA graphics card
03/07 17:33:19<koo5[m]> Sounds like your gpu is a bit beyond its prime time
03/07 17:34:02<stoopkid> quite possible
03/07 17:35:17<stoopkid> this PC is from 2006 apparently
03/07 17:54:45<koo5[m]> Its alright if you want to learn this way
03/07 17:58:12<koo5[m]> If not, just gtfo and get yourself a machine worth your time
03/07 18:01:44<stoopkid> well, i want to learn what's going on and practice controlling / troubleshooting my computers, or at least, since i've already been down digging around with all this stuff i want to at least get a complete learning experience out of it if nothing else
03/07 18:02:29<stoopkid> what i don't want is to run into the same kind of problems down the road and not be in any better position to solve them
03/07 18:04:08<stoopkid> so, it's possible it's just my gpu; if so i want to figure out how to diagnose that, and if not, i want to actually solve the problem
03/07 18:08:53<stoopkid> if it's not the gpu, then i've got here a PC that after 12 years is still running fine. i like that; if it's the case, then it is worth my time to keep maintaining it, i figure, especially if the principles for maintaining it are gonna be pretty much the same no matter what PC i'm using
03/07 18:09:36<stoopkid> after i transfer some funds out, i'll be stocking up on all kinds of hw that's perhaps more conventionally worth my time
03/07 18:11:28<stoopkid> honestly i'm slightly grateful for this out-dated machine for forcing me to learn more about how PCs work, which i would've just not ever done if i just went out and got some machine that had "all appearances of working without hiccups"
03/07 18:14:34<daemoz> does your machine have an onboard graphics card at all?
03/07 18:16:54<stoopkid> yea, asustek nagami2 motherboard, onboard nvidia graphics
03/07 18:24:55<stoopkid> currently i'm trying to figure out how the data is being transferred from the PC to the monitor, to see if i can figure out the first place it goes wrong
03/07 18:33:42<daemoz> What kind of cable are you using to connect your card and your monitor?
03/07 18:34:31<stoopkid> DVI-D
03/07 18:34:46<daemoz> don't think that's anything other than just pixel data then
03/07 18:36:04<daemoz> might give the nouveau driver a shot. kinda sounds like something happening around there.
03/07 18:36:15<daemoz> or like a missing font or something
03/07 18:37:01<stoopkid> i think that's actually the driver i'm currently using, one sec need to remember the command to check that
03/07 18:37:23<daemoz> what os are you on
03/07 18:37:46<stoopkid> ubuntu 16.04
03/07 19:29:22*** Join: avis (~ident@pdpc/supporter/student/avis, pokpok: icanhavepizza !! -- JEW)
03/07 19:35:49*** Quit: avis (~ident@pdpc/supporter/student/avis) left #AutoNomic: Quit: https://www.youtube.com/watch?v=xwBhCsaZR3w https://www.youtube.com/watch?v=8bbSgn5-zUI https://www.youtube.com/watch?v=0PLBXAcKyDw
03/07 20:38:46<stoopkid> koo5[m]: alright progress, lemme finish up going through the glacier protocol stuff and then we'll set up the multisig
03/07 21:17:15<stoopkid> so, i'm thinking, when you store a lot of funds at some public key, and you use various different computational mediums for accessing your funds there, your private key is accumulating the risks associated with each computational platform you run your cryptographic operations on
03/07 21:21:13<stoopkid> the big issue with that isn't so much the potential decrease in security from that itself (although there is quite a potential, especially if any of those machines are attached to non-quarantined network), the bigger issue is it obscures the source of the problem if there ever is one, both on a personal scale and on a societal scale
03/07 21:22:28<stoopkid> now, given any particular computational platform, unless we built the whole thing, we probably don't really know whether it's all as secure as it would maybe seem it "should" be, given what it's ostensibly "supposed" to be doing
03/07 21:24:27<stoopkid> we're basically just holding out on a closed-world assumption: it's "secure enough" as long as nobody's proven it to be insecure by stealing money out of it. but of course that closed-world assumption can become inconsistent with the open-world reality surrounding your wallet.
03/07 21:25:34<stoopkid> so at the very least, if funds ever *did* get stolen from your wallet, you wanna be able to assign blame properly
03/07 21:26:53<stoopkid> now, if all your funds were stolen out of that wallet, blame game doesn't really matter too much anymore, your funds are still evaporated
03/07 21:29:03<stoopkid> so to me it kind of makes sense (in theory) to distribute large amounts of funds over lots of private keys, such that for each private key, you use one and only one method of access (out of whatever collection can still be reasonably presumed secure), and for each private key you use a *different* method of access
03/07 21:29:12<stoopkid> (than you do for all the other ones)
03/07 21:32:16<stoopkid> that way, if any of your methods of access prove insecure, you know which one it is, and hypothetically maybe a breach in this method won't imply a breach in the other ones, so best case scenario you only lost a portion of your funds
03/07 21:37:54<stoopkid> distributing funds this way also makes each individual address a less profitable target for attack; if we apply some economic assumptions relative to the assumed technical difficulty of successful attack, then we can call this an added layer of security
03/07 21:39:34<stoopkid> glacier protocol does all this exactly right but, perhaps understandably, is not distributing the "research" over many different methods of access
03/07 21:40:17<stoopkid> it's got all its eggs in the ubuntu / bitcoincore / glacier-scripts basket, so to speak
03/07 21:42:08<stoopkid> obviously the method of access can only be as secure as the crypto protocol itself, but, i think bitcoin protocol at least has a pretty good track record of satisfying closed-world assumption security while holding billions of dollars worth of value
03/07 21:46:42<stoopkid> i'm sure glacier protocol is well aware of this; but, still, given the state that our crowd-sourcing abilities are still in, they've gotta do their best to provide a "single solution" so that they can still at least satisfy the first part of "using just one method of access at a time" so that they know what to assign blame to, even if ultimately if that's the only method of access that glacier protocol calls for,
              <stoopkid> then necessarily that blame must fall on glacier protocol itself as well. and then they accept that responsibility, and iterate, like good devs.
03/07 21:50:21<stoopkid> unfortunately this isn't the most convenient situation for anybody. it probably works perfectly if you follow exactly their specs with exactly their hardware or as close to equivalent as possible, but if you don't necessarily have that on hand, you might be jumping through some more hoops in order to get it to work the way they say, and even if it "works fine", you're still diverging in at least some regards from
              <stoopkid> the specific method of access they call for
03/07 21:56:19<stoopkid> that's all well and good, no fault to them, they've done the good deed of providing *some* specific method of access (as specifically as they could anyway, not sure how much control they have over what a hw manufacturer sends you), the burden is more on society to extend from there. a diffused responsibility. often times the most immediate problem people are able to point out with diffused responsibility is the
03/07 21:56:20<stoopkid> anomalous situations where nobody's actually personally accepting any of that responsibility. here that's not at all the case though
03/07 21:59:07<stoopkid> everybody who does the work to run "some equivalent of the glacier protocol" on any machine that diverges from their specific specs (even potentially their specific personal machines that they personally tested with in person), and doesn't have it in their mind to keep the solutions private, is taking on a portion of that responsibility, and adding to the collective pool of knowledge / solutions to the problem
03/07 22:03:30<stoopkid> bitcoin is kind of amazing just in terms of what it can do for security research, via what most people call the.. "unfortunate" byproduct of everybody constantly trying to figure out how to steal your moneys
03/07 22:05:18<stoopkid> prior to bitcoin, afaict, there wasn't really such a thing as "stealing" e-currency (maybe some alternative e-currency systems that i haven't heard of? correct me if i'm wrong), since, e-currency was basically just numbers that people write in databases, and give you receipts for, and maintain on basis of trust and (usually hopefully) enforcement by law
03/07 22:06:24<stoopkid> they can arbitrarily "seize" your funds, they can arbitrarily "give them back to you", they can arbitrarily freeze the funds where-ever they've been sent to.
03/07 22:07:23<stoopkid> works... "good"... most of the time... when "the responsible people" aren't being "bad".... i think?
03/07 22:10:18<stoopkid> the person who ends up getting "stolen" from isn't usually the "individual" who got them "hacked", it's either the bank "eats" the loss and "returns you your funds" (assuming you can demonstrate to them that it was their fault), or banks/govts seize funds from wherever they got "double spent" to, and those banks or their clients eat the loss. it's a whole ordeal
03/07 22:11:07<stoopkid> but ultimately in this system there's not really any such thing as "stealing" e-currency, only such a thing as spending "fraudulent" e-currency
03/07 22:11:50<stoopkid> the only person you can consider to be "stealing" the e-currency itself is the banks, if/when they "seize" it from you
03/07 22:12:38<stoopkid> the hacker probably more likely "used fraudulent e-currency" to buy hard cash or a car or something
03/07 22:15:21<stoopkid> it's kind of a high-risk game, *because* of how much of an ordeal it is for "the responsible people" in this system (bankers, govts, etc..). you ran off with hard cash or a car by "e-forging" within *their* currency system and their whole thing is (and is usually "supposed to be") that "they don't take that kinda crap"
03/07 22:16:10<stoopkid> bitcoin on the other hand, nobody cares if somebody takes your bitcoins lol, "sucks to be you, etc.."
03/07 22:16:28<stoopkid> you can actually "steal" the e-currency that is bitcoin
03/07 22:19:22<stoopkid> it's pretty awesome, makes me wanna just stick a bunch of bitcoins behind different computers, publicize the addresses along with all the details about the methods of access being used (hw, sw, transfers, human factors, etc..), and see if / how they get hacked
03/07 22:20:24<stoopkid> and then hooray, if somebody hacks them and takes the money... good! that's what i'm "paying them for"
03/07 22:20:39<stoopkid> now they can go eat or buy drugs or w/e it is they were working for
03/07 22:22:27<stoopkid> https://huntexpired.com/domain/hackthiscoin.com
03/07 23:57:46<HMCa> stoopkid: sounds like bad ram somewhere
03/07 23:58:07<HMCa> or bad support circuit for ram
03/07 23:58:51<HMCa> with kit that old the first place to look is probably capacitors
03/07 23:59:03<stoopkid> seems it was the graphics card; after taking that out and using onboard graphics the problem seems to go away
03/07 23:59:17<stoopkid> or at least, something related to delivering graphics through that card
03/07 23:59:21<HMCa> ok, check the caps on the gpu card
03/07 23:59:42<HMCa> are any bulging, cracked, burnt, or have residue?
03/08 00:01:30<HMCa> ground fluctation from bad decoupling caps can lead to all sorts of fascinating noise effects
03/08 00:05:20* HMCa reading about the new mtgox dramas
03/08 00:06:21<HMCa> so, is the rational thing now for mtgox loss sufferers to do to go buy up coin to raise price as he sells, so they can hope to get more on their claim? XD
03/08 00:06:28<HMCa> (ofc jk)
03/08 00:10:56<stoopkid> hadn't heard about it
03/08 00:13:04<stoopkid> what's going on there exactly? mt gox owes people money or something?
03/08 00:16:36<HMCa> something :-)
03/08 00:16:49<HMCa> it is complicated
03/08 00:18:59<HMCa> the funds which were able to be recovered must, per law, be sold to return to the users who had coins there (but at the rate at the time of the original loss, <$500/coin....)
03/08 00:19:41<HMCa> when it is all said and done, people will probably get <$100/coin, heh :-\
              <stoopkid> ouch
03/08 00:20:58<HMCa> they now have enough cash to cover everyone at the rate, and have only sold off a small portion of the recovered coins so far
03/08 00:21:33<HMCa> they still have >100,000 coins.
03/08 00:23:26<stoopkid> and they're just pocketing that?
03/08 00:29:53<HMCa> well, this is where things get complicated
03/08 00:30:11<HMCa> the answer is basically "who knows" so far :-)
03/08 00:30:34<stoopkid> lol
03/08 00:31:09<stoopkid> why did people have so much money stored in an exchange
03/08 00:33:14<HMCa> greed?
03/08 00:33:20* HMCa shrugs
03/08 00:34:46<stoopkid> seems they could've stood to be a bit greedier :)
03/08 00:50:39<stoopkid> nope can't see any bulging/cracking/burning/residue on any of the capacitors
03/08 01:41:21<stoopkid> linux top-level fs is silly (or, whatever subsystem is providing this top-level fs)
03/08 01:42:20<stoopkid> it forces an hierarchical organizational structure, ontology i guess, that doesn't have all that much to do with the actual "structure" of the data its organizing
03/08 01:43:29<stoopkid> like, /var has nothing to do with the organizational structure of the data within it nor its relationship with the rest of the computing environment; /usr has slightly more relation perhaps, but ultimately not much
03/08 01:45:22<stoopkid>  /etc kind of makes sense to have a single place for system configuration files, but, as the name indicates, originally this was just a directory for "extra" data that seemingly had nowhere else to be put.. literally the "et cetera" directory
03/08 01:46:59<stoopkid> the fact that that /etc directory even had to be created in the first place is symptomatic of the problems associated with trying to cram general graphs into tree data structures while keeping them intuitive & useful to navigate
03/08 01:48:18<stoopkid> but this root fs for linux on PCs is actually one place where a hierarchical organizational structure actually could make good sense, if it was actually oriented around *structure* rather than "privilege"/"usage"
03/08 01:49:37<stoopkid> or, if the interface *is* gonna be centered around privilege/usage, there are better ways to handle that
03/08 01:52:58<daemoz>  now you're getting into areas that are arranged as such for efficiency :) all lists underneath it all right hahaha
03/08 01:52:59<stoopkid> rather than having specific directories associated to data/programs that have certain privileges/usages, make those privileges/usages first-class. i.e. "show me all the mountable, static, shared files that aren't essential for booting" etc..
03/08 01:54:03<stoopkid> "all lists underneath it all right" what do you mean
03/08 01:54:14<daemoz> I mean, it represents the structure well enough, edit a directory and you can see what it is
03/08 01:54:29<daemoz> Directories are just that, lists of files that are said to be 'contained'
03/08 01:57:36<stoopkid> well, this might very well just be my lack of intuition about what's actually going on behind the scenes, or rather, what of that "structure" is still left after you follow all symlinks
03/08 02:01:19<stoopkid> one thing that seems unintuitive to me is that data for applications is split up all over the place, like i might need to look in /etc, /usr, /var
03/08 02:01:49<stoopkid> is this part of the "arranged as such for efficiency"? idk in particular how efficiency is impacted by these arrangements
03/08 02:06:10<stoopkid> i guess i can see where it could come up, like if you want to do operations on "all the variable data", or "all the system configuration data" like, move it from one disk/partition to another or something, then having it all logically under the same directory is at least convenient, and perhaps more efficient without retooling everything
03/08 02:08:00<dmiles> i used to be bothered that /usr/lib  /usr/local/lib wer enot symlinked
03/08 02:08:36<dmiles> now i am bothered that they are
03/08 02:09:27<stoopkid> can you elaborate on what you find bothersome here?
03/08 02:10:10<dmiles> was /usr/local/lib was supposed to be machne specific whereas /usr/lib was distrobution specific
03/08 02:13:22<dmiles> perhaps /usr/local/  bin,games,include,lib,sbin,share,src   made sense
03/08 02:14:09<dmiles> oops we even used to have an etc there
03/08 02:14:59<dmiles> perhaps /usr  bin,etc,lib,sbin    made sense
03/08 02:15:11<stoopkid> none of this makes sense to me as a user's interface lol
03/08 02:15:26<dmiles> well what basically was the problem is they both had bin and lib whiuch seemed redundant
03/08 02:16:11<dmiles> but now that they got merge about 10 years ago.. into a symlink.. having what they have doesnt seem to apply to the old and new meanigs
03/08 02:18:33<dmiles> i was unhappy when they were separate dirs because i used to have to copy programs or maintain symlinks into both
03/08 02:19:06<dmiles> now i am unhappy that it is no longer easy to create a large applicaiton that stays in 'local'
03/08 02:19:21<dmiles> (it was made to be impossible that is)
03/08 02:20:01<stoopkid> why do you want your application to go into /usr/local in particular
03/08 02:20:35<dmiles> that dir used to be mounted readwrite and /usr/ not
03/08 02:21:05<stoopkid> don't you hypothetically want it in /var then?
03/08 02:21:06<dmiles> for example /usr/bin was shared accrossed 100s of machines on a network drive
03/08 02:21:54<dmiles> and /usr/local/bin was for a single machine
03/08 02:22:39<dmiles> well /var is supposed to be anyhting that you can lose data on and your machine will still be able to recover (all your apps will still run)
03/08 02:23:23<dmiles> but you';; probly piss a few users off
03/08 02:23:25<dmiles> such as losing their emails
03/08 02:23:59<stoopkid> what kind of application are you trying to put in /usr/local , is it essentially for system operation?
03/08 02:24:15<stoopkid> essential*
03/08 02:24:54<dmiles> usually a particualr version of a compiler that  i dont want to force everyone in the organization to use
03/08 02:25:04<dmiles> (jsut the users on tha tmachine )
03/08 02:25:37<stoopkid> hrm
03/08 02:25:54<dmiles> or perhaps a git-server in /usr/local that only that machine uses .. but then its data is stored in /var
03/08 02:27:33<stoopkid> that makes more sense to me, sort of
03/08 02:27:45<stoopkid> it makes more sense to me in the context of the linux root filesystem at least
03/08 02:28:22<dmiles> so i might have .. http:///usr/local/bin/mycompiler.bin /usr/local/etc/mycompiler.conf  /var/log/mycompiler.log   /var/tmp/
03/08 02:28:23<dmiles> oops
              <stoopkid> variable data going into /var, static host-specific data going in /usr/local
03/08 02:28:30<dmiles> have  /usr/local/bin/mycompiler.bin /usr/local/etc/mycompiler.conf  /var/log/mycompiler.log   /var/tmp/
03/08 02:28:56<dmiles> temp outpouts to  /var/tmp/fsfsf.mycomp
03/08 02:29:14<dmiles> right
03/08 02:29:38<stoopkid> why not put temp outputs into /tmp ?
03/08 02:30:23<dmiles> so /usr/local/bin/ is only writable by root on the system  /usr/bin/ is for the network admin whom controls those 100s of machines
03/08 02:30:54<stoopkid> that makes sense to me, in the context of the linux filesystem
03/08 02:31:14<dmiles> each /tmp /var/tmp  has a cetain amount of reserved diskspace
03/08 02:32:05<dmiles> everyone can write to /tmp .. and i used to guess the names of dirs that a program would make there and make it before that user could
03/08 02:32:28<dmiles> before the program could make that dir
03/08 02:32:47<dmiles> as a take down techniuque
03/08 02:33:04<stoopkid> i see
03/08 02:33:10<daemoz> neat
03/08 02:34:03<dmiles> in /var/tmp/yourprogram/  already  is built when you set uip your program
03/08 02:35:01<dmiles> before you run your program
03/08 02:35:34<dmiles> you cant do tha tin /tmp since it can be deleted when the machine roobts
03/08 02:36:03<dmiles> it really is all about securing 4 differnt users.. nowadays we only have 2 users
03/08 02:36:07<stoopkid> gotcha, was wondering what made the difference
03/08 02:38:27<dmiles> vagrants and virtualization software and cheap hardware means we no longer need to secure things as well
03/08 02:39:11<dmiles> no longer need to secure the filesystems at least
03/08 02:39:53<dmiles> instead you make a VM that you can roll back and forward
03/08 02:40:55<stoopkid> well, you're probably not wrong there, but, let's not tell the filesystems developers that
03/08 02:42:18<dmiles> nowadays i would not run nay user facing machine on real hardware.. just VMs
03/08 02:42:25<dmiles> nay/any
03/08 02:42:46<stoopkid> so, it seems like you made all your decisions about the actual structure of your program based on access-control
03/08 02:43:15<dmiles> definately
03/08 02:45:38<stoopkid> you did this basically by piggy-backing off of existing access-control structures in the linux top-level filesystem, which i guess is convenient, but now your program is split up across the system. do you provide a "top-level" interface for your application through which all these things are accessible?
03/08 02:46:23<dmiles> for the fist 8 years of doing *nix (for me) there was no such thing as vmware .. so one manages  damages that can be inflicted by apps and users
03/08 02:47:27<dmiles> right .. one can do sweeping updates by having all that orginazaion
03/08 02:47:34<dmiles> zero cost updates even
03/08 02:47:50<stoopkid> what do you mean?
03/08 02:48:24<dmiles> that is when a network shared ./bin/ directory is updated and all the machines now have the best version
03/08 02:49:31<dmiles> so every machine using that network drive jsut has the update
03/08 02:49:45<stoopkid> i see, alright that makes sense, in the context of linux fs
03/08 02:51:14<stoopkid> seems that's more a matter of access-control, sharing, and selecting where you want to retrieve the resource associated with a particular identifier from, rather than anything to do with "actual structure"
03/08 02:51:21<stoopkid> except in this context of the linux fs where structure itself seems to be organized directly around access-control
03/08 02:53:41<stoopkid> but alright, it seems like there's a lot of stuff set up by linux itself to make it preferable to piggy-back off of this organizational structure wherever possible, but, do you provide some kind of top-level interface for your application through which all these different pieces of the application are accessible?
03/08 02:54:29<stoopkid> if that's a thing that can be done, it seems like most applications i encounter don't do it
03/08 02:56:44<stoopkid> i regularly find myself scouring documentation to figure out where certain things are stored, and it's not always consistent the way different developers choose to piggy-back their access-control and logical separations off the linux fs, so it's not always just a matter of learning "the common intuition"
03/08 03:19:23<stoopkid> i guess it's not that i have a problem with the linux fs drilling down into the system based on access-control, it's that there's no secondary interface for drilling down based on structure where access-control is treated as attributes of data rather than the organizational structure of that data (i could be wrong about the non-existence of this interface, i'm obviously not an expert power-user lol)
03/08 03:22:09<dmiles> alot of that arganization to comes from how much disk space you wanted to alot towards each part
03/08 03:22:27<dmiles> also which disk parts were mounted readonly
03/08 03:23:18<dmiles> since access control can fail fails anyways one does it from hardware
03/08 03:23:55<dmiles> the goal being to mount much of your FS as hardware readonly
03/08 03:24:51<stoopkid> sure, for controlling system-wide settings efficiently and conveniently, i can see why it would make sense to break up the low-level storage based on these kind of considerations as opposed to "logical structure of some particular application"
03/08 03:26:27<stoopkid> then system-wide control would have to take each application on a case-by-case basis (potentially; at least without a fundamental redesign of all these subsystems)
03/08 03:31:09<stoopkid> but, that doesn't prevent the existence of a secondary interface that lets you drill down into this based on logical structure of the systems that have their pieces spread out across this low-level access-control-based organizational structure
03/08 03:34:34<stoopkid> it might very well be the case that the responsibility for providing such an interface "should" be deferred to the applications that actually need it, but, i would argue 1) that this is all applications and subsystems of the OS, 2) if there is an acknowledged responsibility for this being deferred to applications devs, it doesn't seem that they are actually taking on that responsibility, but 3) judging by the fact
              <stoopkid> that even essential system programs are like this, i take it that there is no such acknowledged responsibility for providing any such interfaces
03/08 03:37:28<stoopkid> and any applications devs that do provide such a top-level interface for their applications are "going the extra mile", relative to the de facto standard expectations
03/08 03:43:31<stoopkid> well i guess i know what my next side-projects are
03/08 03:49:27<stoopkid> glacier protocol wants me to rename /var/cache/app-info/xapian/default to /var/cache/app-info/xapian/default_old, and then rename it back..
03/08 03:50:11<stoopkid> (immediately, as the very next step)
03/08 03:52:05<stoopkid> "Xapian is an open source probabilistic information retrieval library... It is a full text search engine library for programmers."
03/08 06:12:32<stoopkid> well, i'm supposedly set up, now to test the thing
03/08 06:18:34<stoopkid> it's order of operations doesn't make a lot of sense to me; it makes such a big deal about doing your cryptographic operations on the offline machine(s) but it has you do all the gpg verification while you're on the online machine
03/08 06:19:41<stoopkid> i want to eventually extract everything from this protocol and package it up so that it can just be installed and have the installation verified entirely offline in the future
03/08 06:46:17<stoopkid> "Exception: Timeout while starting bitcoin server"
03/08 06:47:11<stoopkid> lol why does it need to start a server
03/08 06:48:54<stoopkid> "because we didn't wanna rewrite crypto algorithms"
03/08 06:58:36<stoopkid> i see, i'm missing a package file
03/08 07:08:03<stoopkid> seems it assumes you're in a DE so that you can copy-paste between different terminal / text-editor windows
03/08 07:08:45<stoopkid> not sure why it would do that, you'd think it would aim to be able to run in as minimal of an environment as possible
03/08 07:24:13<stoopkid> alright, got multisig wallets generated, but, so far this appears to be a single-player activity
03/08 07:25:55<stoopkid> oy, looks like we'll have to do some of this manually in order to make it multi-player
03/08 07:44:34<stoopkid> alright i'll get to that; time to test deposits & withdrawals
03/08 08:21:20<koo5[m]> > no longer need to secure the filesystems at least
03/08 08:21:21<koo5[m]> And where youre your own admin, on a desktop, you just cant
03/08 09:23:37<HMCa> stoopkid: seems you are again confusing linux (the kernel) with the gnu userpace
03/08 09:23:41<HMCa> common mistake
03/08 09:24:04<HMCa> the linux filesystem hierarchy is "just one option"...
03/08 09:24:19<HMCa> the kernel itself doesn't care how your fs is laid out
03/08 09:24:49<HMCa> (see for example gobolinux or nixos layouts)
03/08 09:25:31<HMCa> the kernel doesn't even really care if there *is* an fs layout at all
03/08 09:26:11<HMCa> as long as it can load and run an init process *somehow* from *somewhere*... it doesn't much care how or where
03/08 09:45:22<koo5[m]> Are you driven, independent and enthusiastic Head Loss Prevention specialist interested in joining the team of our client, an LNG operating company in Qatar.
03/08 09:55:58<stoopkid> i'd be rather surprised if the only relationship those mercenaries had with "Head Loss" was "Prevention of it"
03/08 09:56:34<stoopkid> HMCa: i do commonly make this mistake don't i :)
03/08 10:15:43<stoopkid> i love when poems about the holocaust apply to my own country... MAGA: "Make America Germany Again"
03/08 10:16:39<stoopkid> historically they came for the leftists first; i guess the dreamers are an easier target this time around (maybe there was no meaningful equivalent in pre-ww2 germany)
03/08 10:17:37<stoopkid> guess i better keep up with the news, and get that passport ready :)
03/08 10:22:24<stoopkid> oh nope, all kinds of other groups being targeted first, guess i just got that good privilege and am now playing the part of the narrator of that poem
03/08 10:25:26<stoopkid> alright enough reality, back to solipsism and PCs
03/08 10:32:50*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/08 10:42:35<HMCa> stoopkid: it's ok, you're not alone in confusing what is linux itself with gnu posix mess.  in my line of work I get to watch some very smart people have the same confusions almost everyday
03/08 12:55:49*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/08 12:56:14*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/08 18:11:36<stoopkid> alright, trying to strip out the necessary pieces of glacier (key creation, signing, etc..)
03/08 22:23:14*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
03/08 23:18:40*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
03/08 23:32:42*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/09 03:07:27*** Quit: suiqiublockchain (~suiqiublo@101.83.186.91) left #AutoNomic: Read error: Connection reset by peer
03/09 03:07:56*** Join: suiqiublockchain (~suiqiublo@101.83.186.91, (unauthenticated): realname)
03/09 04:15:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/09 05:08:35*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 256 seconds
03/09 05:21:32*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/09 05:39:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 256 seconds
03/09 05:56:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/09 06:41:12<stoopkid> or i guess it's the unnecessary pieces that one strips out.. idk.. minor progress though
03/09 07:34:21<stoopkid> hrm, seems like bitcoincore software already comes with some tools to work with omni
03/09 08:25:40*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
03/09 10:16:15<stoopkid> pretty cool how the XOR of two bit vectors is as random as the most random out of those two bit-vectors, as long as they're independently random variables
03/09 10:17:39<stoopkid> there must be some limitations on that though. like if i keep XOR'ing different "random" bit-vectors together, eventually they must end up correlated by some pidgeonhole principle
03/09 10:23:10<stoopkid> later i'll try to figure out how to put some numbers to that
03/09 10:30:18<stoopkid> looks like i won't even be using glacier anymore by the time i'm done with this. i guess i need to start creating my own protocol doc
03/09 11:25:51<stoopkid> some glacier code:
03/09 11:26:04<stoopkid> " # line below is unneeded now, right?
              <stoopkid>     # label = random.randint(0, 2**128)"
03/09 11:26:19<stoopkid> well, it better be, i guess XD
03/09 12:16:00<stoopkid> koo5[m]: wanna mess around with the testnet to confirm the method before we send any actual money to a multisig?
03/09 12:43:05<koo5[m]> In two hours?
03/09 12:44:03<stoopkid> sure i might be finished up looking over everything by then
03/09 12:48:37<stoopkid> kind of silly that you have to start the bitcoind server in order to get help messages for the RPCs
03/09 12:49:26<stoopkid> glacier is using deprecated multisig command "createmultisig", apparently people are supposed to transition to using "addmultisigaddress" instead
03/09 14:55:46<koo5[m]> Hows it going, should i pull out the pc or can i continue sleeping?
03/09 14:56:57<stoopkid> you can probably keep sleeping
03/09 14:57:23<stoopkid> maybe next time you wake up i'll be done getting it ready
03/09 16:49:16<stoopkid> wow i hate everything about every computer
03/09 16:49:21<stoopkid> bbl
03/09 17:22:13<stoopkid> ah... numeric types
03/09 17:22:26<stoopkid> always a headache with these numeric types
03/09 17:26:36<stoopkid> alright progress
03/09 18:26:03<stoopkid> alright, successfully generating private keys, transforming them to base58check encoding, importing them with bitcoin-cli, generating public keys from these, and exporting the wallet data
03/09 18:27:46<stoopkid> now i need to make sure i can generate and sign transactions, and then do the same with a multisig, and then we can get on the testnet for a sanity check
03/09 18:28:36<stoopkid> then there's omni layer stuff to deal with
03/09 18:51:23<stoopkid> https://bitcoin.org/en/developer-reference#createrawtransaction
03/09 18:51:52<stoopkid> new file: tx_example; contents: https://pastebin.com/8dp5xKdf
03/09 18:52:10<stoopkid> > `cat tx_example`
03/09 18:52:29<stoopkid> error: Error parsing JSON:'''
03/09 18:53:00<stoopkid> great example they picked
03/09 18:53:10<stoopkid> brilliant
03/09 19:26:18*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
03/09 19:35:08*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 260 seconds
03/09 20:09:54*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
03/09 21:33:45*** Join: fhdhdvvvvccv (2d3f7b6b@gateway/web/freenode/ip.45.63.123.107, (unauthenticated): 45.63.123.107 - http://webchat.freenode.net)
03/09 21:43:11*** Quit: fhdhdvvvvccv (2d3f7b6b@gateway/web/freenode/ip.45.63.123.107) left #AutoNomic: Ping timeout: 260 seconds
03/10 04:32:27*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
03/10 08:22:03*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
03/10 09:50:40*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/10 09:51:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/10 11:14:40*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
03/10 13:15:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kgtjqazfogekvckc) left #AutoNomic: Ping timeout: 240 seconds
03/10 13:16:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tvpmgbohkoqkwfvc, stoopkid: stoopkid)
03/10 15:10:43*** Quit: tigertigertiger4 (tigertiger@gateway/shell/matrix.org/x-ymiaffxhteveufmm) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
03/10 15:29:13*** Quit: daemoz[m] (daemozmatr@gateway/shell/matrix.org/x-wxjgaoiftmitoawx) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
03/10 15:29:48*** Quit: suiqiublockchain (~suiqiublo@101.83.186.91) left #AutoNomic: Read error: Connection reset by peer
03/10 15:31:17*** Join: suiqiublockchain (~suiqiublo@101.83.186.91, (unauthenticated): realname)
03/10 15:55:14*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-szvspfxirhbhhzgw) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
03/10 16:12:05*** Quit: lexx_[m] (lexxmatrix@gateway/shell/matrix.org/x-mrgytbcllaoimusc) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
03/10 16:14:34*** Quit: deadhand[m] (deadhandma@gateway/shell/matrix.org/x-sofnceltnmgmgbzg) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
03/10 16:51:24*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/10 17:42:43*** Quit: vbmithr_ (~vb@37.187.116.20) left #AutoNomic: Ping timeout: 240 seconds
03/10 17:42:50*** Join: vbmithr (~vb@luminar.eu.org, vbmithr: Vincent)
03/10 18:29:54*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
03/10 18:38:59*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/11 03:55:34*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 248 seconds
03/11 04:16:46*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/11 10:17:02*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
03/11 11:14:00<stoopkid> if anybody's ever looking for good video lectures on bitcoin stuff, andreas antonopoulos has some good ones
03/11 13:06:28*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Read error: Connection reset by peer
03/11 13:10:54*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/11 16:29:59*** Quit: suiqiublockchain (~suiqiublo@101.83.186.91) left #AutoNomic: Read error: Connection reset by peer
03/11 16:31:13*** Join: suiqiublockchain (~suiqiublo@101.83.186.91, (unauthenticated): realname)
03/11 18:31:39-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/11 18:31:45*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/11 18:38:50*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
03/12 02:36:46*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 256 seconds
03/12 02:40:18*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-ssvmimrroeozhxrc, (unauthenticated): @koo5:matrix.org)
03/12 03:21:48*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/12 04:31:34-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
03/12 04:31:39*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
03/12 10:30:40*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Quit: Leaving
03/12 11:40:04*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/12 11:40:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/12 16:31:08*** Join: suiqiu_ (~suiqiublo@101.83.186.91, (unauthenticated): realname)
03/12 16:31:09*** Quit: suiqiublockchain (~suiqiublo@101.83.186.91) left #AutoNomic: Read error: Connection reset by peer
03/12 16:41:57<koo5[m]> str
03/12 16:43:49* koo5[m] sent a long message: koo5[m]_2018-03-12_20:45:05.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/RRNXodmbiwrJXIjWJGriRqHZ>
03/12 16:44:21<koo5[m]> is this way of representing nats explained somewhere?
03/12 16:44:45<stoopkid> not quite Nats, Nats not including 0
03/12 16:48:41<koo5[m]> yea
03/12 16:49:45<koo5[m]> still, why does the dude writing the tutorial just pull this out of his ass without a single word?
03/12 16:52:03<stoopkid> yea i haven't seen it before and am not sure how to prove that each object in this datatype corresponds uniquely to a Nat (under the interpretation into Nats that we would expect for this structure), though it seems to be working out after walking through the first couple Nats; seems to be related to binary representation of Nats
03/12 16:52:20<stoopkid> start with the doubles of 1:
03/12 16:52:27<stoopkid> 1 2 4 8 16 ...
03/12 16:53:13<koo5[m]> stop right there, my problem is that i dont see the interpretation that you all would expect
03/12 16:53:48<stoopkid> one ---> 1
03/12 16:53:57<stoopkid> double x ---> 2*x
03/12 16:54:01<stoopkid> double+1 x ---> 2*x + 1
03/12 16:55:07<stoopkid> or maybe i should say:
              <stoopkid> interpretation(one) = 1
              <stoopkid> interpretation(double x) = 2*(interpretation(x))
              <stoopkid> interpretation(double+1 x) = 2*(interpretation(x)) + 1
03/12 16:55:08<koo5[m]> ahh
03/12 16:57:42<stoopkid> so, then you would just need to show that each Nat (not including 0) is represented *uniquely* by an object in this ℕ⁺
03/12 16:58:05<stoopkid> i.e. that you don't miss numbers (besides 0) or duplicate some numbers
03/12 16:58:44<koo5[m]> " Soon we will prove in Agda that ℕ and ℕ₂ are isomorphic"
03/12 17:00:10<stoopkid> yep, that's what that is
03/12 17:02:19<stoopkid> how it actually works out might be related somehow to cantor's pairing function: https://en.wikipedia.org/wiki/Pairing_function#Cantor_pairing_function
03/12 17:03:29<stoopkid> actually nvm, but, that same sort of pattern in the picture is what i'm seeing when i calculate out the first few Nats with this
03/12 17:04:14<stoopkid> start with the doubles of 1: 1 2 4 8 16... then, if you double anything in this list it's already something in the list
03/12 17:05:31<stoopkid> so then we can take double+1 of things in this list and we get 3 5 9 17, none of which are in the previous list
03/12 17:06:40<stoopkid> if we double the numbers in that list, we get 6 10 18... , none of which are in any of the previous lists
03/12 17:07:46<stoopkid> and if we double+1 the 3 5 9 17 list we get 7 11 19..., again, none of which are in any of the previous lists
03/12 17:14:23<stoopkid> https://pastebin.com/vqr6TNhi
03/12 17:18:33<stoopkid> alright yea and then you can see the infinite tree defining the data type laid out over this sequence
03/12 17:20:25<stoopkid> consider it a bin-tree, rooted at 1, where the root has depth 1, and left is double and right is double+1, then the nodes at depth N are the numbers between 2^(N-1) and 2^N, arranged "left to right", including 2^(N-1) but not including 2^N
03/12 17:24:16<stoopkid> now, if you consider your interpretation to subtract 1 at the end, then you get the regular Nats back
03/12 17:53:02*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
03/12 18:19:01*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/12 23:10:21<HMCa> fun with hypernats?
03/13 06:00:10*** Quit: suiqiu_ (~suiqiublo@101.83.186.91) left #AutoNomic: Read error: Connection reset by peer
03/13 09:48:38*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/13 09:49:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/13 17:34:31*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 268 seconds
03/13 17:42:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/13 18:46:25* stoopkid still waiting to receive some test omni from dexx7 to test out some transactions before we set up this multisig
03/13 18:51:26<stoopkid> HMCa: wrt bitcoin's main function being to measure time, it's interesting that we already seem to be able to coordinate time just fine, to much higher precision, via atomic clocks, and everybody seems to agree on the accuracy of the atomic clocks pretty well. any thoughts as to what kinds of differences between the applications allow for the coordinated atomic clocks solution to seem to work out fine when the only
03/13 18:51:27<stoopkid> thing that needs to be done is keep track of what "time" it currently is now? (i mean, in some sense it can't due to relativity but, you know, we do a reasonably good job at coordinating a flat approximation)
03/13 23:47:51<HMCa> synchronizing atomic clocks requires trust
03/13 23:48:33<stoopkid> hrm
03/13 23:48:47<HMCa> (remotely, that is)
03/13 23:49:14<stoopkid> seems like there's a lot of people who don't trust each managing to roughly agree on the time
03/13 23:49:18<stoopkid> each other*
03/13 23:49:43<HMCa> obviously if we can both just observe both clocks there'd be no need for trust, but otherwise...
03/13 23:51:34<HMCa> and yes, the problems of relative time and entropy are interesting
03/13 23:52:38<HMCa> some places can literally be faster than others... and some places naturally more/less chaotic
03/13 23:54:11<HMCa> hard to trust that we can sync our timings when we flat out know that the universe doesn't even allow for it... ;-)
03/13 23:56:01<HMCa> to what degree *should* we trust any given approximation of sync?  Hard to say, but i'm pretty confident in that btc 10min interval at least. :-)
03/13 23:56:45<HMCa> (ironic, considering it has rarely actually averaged 10 minutes yet? heh)
03/13 23:59:42<stoopkid> so everything within 10 light-minutes would see the current block before the next block comes, on average, in theory
03/14 00:02:55<stoopkid> well, nvm, i'll think about relativistic scale block-chain after we've got some working non-relativistic scale ones working heh
03/14 00:04:53<stoopkid> hamburg tbtc faucet is much faster than dexx7's tomni moneyqman.. faucet
03/14 00:12:32<HMCa> are you really complaining about free money services? :-P
03/14 00:12:55<stoopkid> no i'm mainly just wondering if i didn't do it right or something / how it's working on the back-end
03/14 00:14:29<HMCa> ah
03/14 00:17:54<HMCa> were you affected by this big vote there?
03/14 00:18:13<HMCa> state house election
03/14 00:18:32<HMCa> or is that a different part of your state?
03/14 00:18:35<stoopkid> Conor Lamb?
03/14 00:18:43<HMCa> yah
03/14 00:18:51<HMCa> you are in PA right?
03/14 00:19:04<HMCa> or am I thinking of someone else right now... XD
03/14 00:19:05<stoopkid> idk, pittsburgh's not all that big and no i'm in baltimore MD
03/14 00:19:13<HMCa> MD thats right
03/14 00:19:15<HMCa> XD
03/14 00:20:11<HMCa> yah, sry... momentarily confused where you lived w/ where someone else that I used to work with lived :-)
03/14 00:21:03<stoopkid> np lol
03/14 00:21:28<stoopkid> not the first time either, might not be the last XD
03/14 00:21:58<HMCa> have I accused you of living in PA before? Seems like something I could do :-)
03/14 00:22:36<HMCa> I mix states up all of the time, heh
03/14 00:23:29<HMCa> I remember cities better... I was actually picturing baltimore, I just put it in PA somehow. XD
03/14 00:25:21<stoopkid> on second thought apparently congressmen from random districts of states can affect the entire country in random absurd ways it seems, so, maybe it's not as small as pittsburgh really
03/14 00:31:36<stoopkid> i've decided i'll support whatever is the first party to provide me an auditable & legally-binding git repository of all their data & plans (very broad subject), open-sourced / copy-lefted / w/e with a well-defined pull-request procedure for proposals / more data
03/14 00:35:17<stoopkid> that's probably not the ultimate technical solution to our problems but, if they can't do something along those lines at least enough to get *something* out there so that the community auditing & extensions can start, then, they aren't even trying
03/14 01:45:04<HMCa> sounds like a good use case for a context on our construct
03/14 01:46:57<stoopkid> well
03/14 01:48:20<stoopkid> yea, it's like "the" context use-case that turned me into an autonomic dev
03/14 02:44:05*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
03/14 03:49:00*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/14 05:32:52*** Join: nilli (d5393958@gateway/web/freenode/ip.213.57.57.88, (unauthenticated): 213.57.57.88 - http://webchat.freenode.net)
03/14 05:34:03<nilli> 03/13 23:47:51<HMCa> synchronizing atomic clocks requires trust
03/14 05:35:30<nilli> it is funny how we use nature in order to construct out truth as if it is independent from how each of us observe that.
03/14 05:36:12<nilli> this clock example is may be the best one
03/14 05:37:18<nilli> it also pin point the real  breakthrough of bitcoin
03/14 05:38:29<nilli> truth an trust are very closely attached
03/14 05:40:17<nilli> we use truth as a trust agent . its the most effective agent, that is why we are so obsess with "the truth"
03/14 05:44:30<nilli> however the blockchain managed to shift the trust from "the truth" to "the agreement"
03/14 05:45:03<nilli> it found a better mechanism than truth itself
03/14 05:47:01<nilli> but time is only one parameter the other is "place"
03/14 05:47:52<nilli> they must go together  the time and the position (location) of a coin
03/14 05:48:50<nilli> anyway are we ever going to get this chain moving???!!! or are we just going to keep talking about it?
03/14 05:49:15<nilli> is anyone building it?
03/14 06:00:33<nilli> still waiting to an address to send the funds :)
03/14 06:08:53<nilli> Also started working on some interesting project http://www.veritychain.io/
03/14 06:10:30<nilli> ofc this is a centralized currency. the decentralization is in the freedom of choice and the fact the the transaction layer can be decentralized
03/14 06:11:08<nilli> that is you job to provide that  layer
03/14 06:11:35<nilli> meanwhile ill be dealing with monetary policy and distribution structure
03/14 06:12:06<nilli> sathoshi had to do both a transaction chain and a token
03/14 06:12:26<nilli> you now need and can do the transaction chain
03/14 06:12:34<nilli> the tokens are in good hands
03/14 06:12:48<nilli> the token scheme I mean
03/14 06:13:34<nilli> but the that basic chain , the rootchian layer, no one understand other then us here and maybe a few more
03/14 06:16:03<nilli> the rule making chain.
03/14 06:18:14<nilli> rules to agree on time and location
03/14 06:27:39<nilli> http://www.idni.org/blog/agoras-to-tml
03/14 06:28:01<nilli> the problem with Ohads aproche as I see it is that it deal with content other then structure
03/14 06:28:39<nilli> stoopkid you have a tendency to go on that path too I think
03/14 06:29:51<nilli> content do not matter and so is meaning. only structure matters
03/14 06:30:17<nilli> agreement is a matter of structure not content
03/14 06:30:56<nilli> its content based but the structure gives it the real meaning
03/14 06:32:25<nilli> maybe its better to see it as a "structure of choice" other then agreement
03/14 06:33:10<nilli> Logic is a structure for choice
03/14 06:34:23<nilli> the meaning of a or b are not an issue
03/14 06:36:01<nilli> only the constituting rules of the connectives and and the basic axiomatic rule that  that A is not B
03/14 06:40:06<nilli> ok I'll stop here since that is the only level I do know things. as far as bringing it to computers you got HMCa theory and practical koo's approch
03/14 07:38:27*** Quit: nilli (d5393958@gateway/web/freenode/ip.213.57.57.88) left #AutoNomic: Ping timeout: 260 seconds
03/14 10:13:46*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
03/14 10:36:24*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/14 11:17:17<stoopkid> @ nilli i'm not sure what you... "mean" (no pun lol) wrt the content vs meaning vs structure thing and my approach
03/14 11:23:03<stoopkid> idk my approach is i wake up in the morning (or middle of the night) and i figure out what's gonna be my approach of the day :)
03/14 11:23:54*** Join: nilli (6d4012f0@gateway/web/freenode/ip.109.64.18.240, (unauthenticated): bzq-109-64-18-240.red.bezeqint.net/109.64.18.240)
03/14 11:24:47<stoopkid> hey
03/14 11:26:11<stoopkid> wrt the address, i'm just waiting to receive some tomni coins on the testnet so that i can test out omni transations with multisig addresses and then we'll be good to go
03/14 11:26:23<nilli> ok this next thing might be the stupidest thing ever since I still did not learn the bitcoin whitepaper properly but. ..
03/14 11:30:20<nilli> have the protocols act as a transaction as if only a transaction reconstitution it and each change is like a token attached to the transaction
03/14 11:31:31<stoopkid> can you elaborate
03/14 11:33:40<nilli> think of the protocol as data that is encrypted and each address as an identity
03/14 11:34:22<stoopkid> why encrypted?
03/14 11:35:15<nilli> since identity matters
03/14 11:35:25<nilli> and identity is private key
03/14 11:38:09<nilli> the tokens are protocol data and a change can be communicated only by using that token of the protocol adding to the blockchain as a transaction
03/14 11:38:27<nilli> ok im making a big salad here
03/14 11:38:42<stoopkid> hrm, well let's start with the address = identity = private key
03/14 11:39:42<nilli> a crypto  transaction need all three to be considered as such
03/14 11:39:57<stoopkid> addresses are the public keys, and public keys are "identities" in the sense of being an identifier that the public references
03/14 11:40:18<nilli>  and it need to be crypto since crypt blockchain since it solved the no cloning issue
03/14 11:40:47<stoopkid> hrm, i'd agree there needs to be a correspondence but i'm not sure that correspondence is best represented as an equality
03/14 11:42:12<nilli> you need each 'vote" to be counted as one and for that you need no cloning resolution if you want to be decentralized
03/14 11:42:41<nilli> satoshi figured all that out allready
03/14 11:43:37<nilli> the only thing missing is how to get read of the token as extra and how to make the protocol an organic part of it (not on the github)
03/14 11:44:13<nilli> so the solution make the protocol act as a token
03/14 11:44:27<nilli> the solution is
03/14 11:46:53<stoopkid> hrm, act like a token in what sense? as in.. "be data"?
03/14 11:48:19<nilli> in terms of a recorded transaction
03/14 11:49:26<stoopkid> you mean, update the rules via transactions that contain the "patches" and store these on the chain?
03/14 11:49:51<nilli> something like that
03/14 11:51:43<stoopkid> well, yea, that's exactly what autonomic is
03/14 11:51:51<nilli> you get read of the value issue of the tokens as a store of value by having unlimited numbers of tokens
03/14 11:52:44<nilli> yet each token have a history of transaction, which is what matters
03/14 11:53:08<nilli> get rid
03/14 11:53:57<stoopkid> well, we can just get rid of tokens altogether and just keep identities (digital signature schemes), history, and protocol updates
03/14 11:54:00<nilli> the incentive to mine is to have power over the rules of the chain, not the token value
03/14 11:54:42<nilli> well you need a transaction to not be dabble spend
03/14 11:54:56<nilli> double spend
03/14 11:55:30<nilli> to make sure that each vote is a single vote
03/14 11:55:31<stoopkid> that's determined by the rules of the game not the mechanism that keeps track of a game that's following the rules
03/14 11:55:47<stoopkid> ah no, voting is complicated
03/14 11:56:43<stoopkid> on bitcoin it's done mainly with computational power
03/14 11:59:20<stoopkid> no double-spend is just a matter of having no-double-spend encoded into your rule-set, and then keeping track of the state of an arbitrary game
03/14 12:00:10<stoopkid> "people only get to vote once, reject tx's where somebody's trying to double-vote"
03/14 12:01:01<stoopkid> you don't even need a token for that, you really just want voters to digitally sign for their choice
03/14 12:02:41<stoopkid> why it's complicated is because we still don't have a mechanism for trustless identity<->entity relation guarantees, which is hypothetically why people still have to go to voting booths and show a picture ID and voter registration card (that they had to get by showing up to some govt office and showing picture IDs, which they could only get at another govt office with a birth certificate etc... etc..)
03/14 12:03:04<stoopkid> and then even all that doesn't seem to work perfectly either
03/14 12:03:25<nilli> I guess. what ever work . I see everything as a token since its that "somthing" we need to have .
03/14 12:04:22<nilli> the blockchain is a trustless identity that is an adress
03/14 12:04:52<nilli> that is why we need tokens fir trustless identity move
03/14 12:07:01<nilli> but as I say i dont know what im tallking about :)
03/14 12:07:44<nilli> i need to read more before say anything
03/14 12:07:45<stoopkid> i guess i'm thinking of tokens as in bitcoins / omni coins / agoras presale tokens / whatevercoins but i guess taken more literally it can be a way more general concept, like "a token of appreciation" etc..
03/14 12:08:05<nilli> yes
03/14 12:08:39<stoopkid> some object symbolizing some value , commitment, process, authorization, etc..
03/14 12:09:07<nilli> a token is a single thing its being that "thing' that matters. it can be a number but in is an "it"
03/14 12:09:41<stoopkid> right, ok i think i see more of what you're saying now
03/14 12:09:44<nilli> in terms of logic a token is "is" maybe
03/14 12:09:58<nilli> a is
03/14 12:10:02<nilli> b is
03/14 12:10:04<nilli> ext.
03/14 12:10:25<stoopkid> so maybe i could rephrase what you're saying as: powers vested to entities participating in the game shouldn't be able to be "double-spent"
03/14 12:12:00<nilli> int not power its actualy the registration of the "move" . power is in potential "move" is actualization of the potential
03/14 12:12:05<nilli> and is what matters
03/14 12:12:36<nilli> like the difference between "think" and "do"
03/14 12:12:49<stoopkid> sure
03/14 12:14:05<stoopkid> it seems people are generally incentivized pretty well not to share access to their powers but instead play gate-keeper to those powers and at most use those powers to do favors for other people who have other powers
03/14 12:15:07<stoopkid> no-double-spend is still all a matter of the rules of the game, but, in this case it's a bit trickier because we have way more general kinds of games
03/14 12:15:21<nilli> but since you need something to be publicly sheard it cant be the power but the action
03/14 12:15:29<nilli> shared
03/14 12:16:28<nilli> ok  will catch up later . the cafe is closing and i need to leave
03/14 12:17:20<stoopkid> so, there's only one specific problem i'm really foreseeing from this, and that's if there's supposed to be a specific privilege that's supposed to only be utilized by one specific person, i don't know what's to stop that person from sharing the necessary privkeys or w/e to access that privilege
03/14 12:18:12<stoopkid> but, my solution to that would be to not design your nomic such that it's dependent on a specific identity<->entity relationship like that
03/14 12:18:43<stoopkid> ok cya later
03/14 12:21:22*** Quit: nilli (6d4012f0@gateway/web/freenode/ip.109.64.18.240) left #AutoNomic: Ping timeout: 260 seconds
03/14 12:25:02<stoopkid> with voting: we already "trust" the election board / state govts / whatever to manage voter registrations and keeping track of the current set of eligible voters & the parties they're registered with & how to identify them at the voting booth etc.. and then we further trust them to manage the actual elections privately and then after all that we pretty much hand the rights to voting over to an electoral college,
              <stoopkid> where not all the members of the electoral college are even pledged to cast their vote according to the results of the popular vote in their district, and then once elected the legislators are almost entirely out of our control and vote "on our behalf" except don't and then don't even seem to even manage to vote *on their own behalf*, cf. ghost-voting, and i'm like literally just getting started
03/14 12:25:05<stoopkid> so..
03/14 12:26:27<stoopkid> whatever arguments somebody like HMC might have against the merit / legitimacy of on-chain elections based on trusted identity<->entity relationships managed by state & federal govts... it can be no worse than what the US does :)
03/14 12:31:13<stoopkid> not saying we should tolerate these kinds of tradeoffs on autonomic root-chain but for like a US voting subcontext, sure why not, would be at least better than what we do now
03/14 12:34:02<stoopkid> at the very least, you could assure that your own vote was counted, you could assure that your friends votes have been counted, if you meet somebody in person and they can sign for an address used in the vote, you can ensure their vote's been counted
03/14 12:35:38<stoopkid> with some homomorphic encryption maybe the vote could even be constructed such that somebody could verify to you that their vote's been counted (and accurately), without revealing who/what they voted for
03/14 12:41:34<stoopkid> this ends up getting back to some of my things about how we can get more out of a context the more we put into it, i.e. assumptions about how people will / would / could / should / won't / wouldn't / couldn't / shouldn't behave
03/14 12:45:36<stoopkid> the cryptocommunity is very progressive & innovative with breaking social barriers / barriers-to-entry etc.. but also kind of.. "solipsistic", like, we have a problem of network partitions, the cryptocommunity's solutions revolve around how to work around network partitions, and sort of avoid addressing the issue of network partitions themselves
03/14 12:48:29<stoopkid> similarly you'll have problems with voting, like, accurate counting, the primary issue being to make sure that everybody who wants to vote and is eligible to vote, gets to vote, the secondary issue being to make sure that nobody who's not eligible to vote got to vote. third issue is vote-stealing which just has to be tolerated as a risk or there has to be a mechanism for individuals to dispute the vote
03/14 12:50:45<stoopkid> so, the first is tricky, and you probably can't have a real solution to it without bringing the other things into the picture. you want everybody who's eligible to vote, and who wants to vote, to be able to vote
03/14 12:52:04<stoopkid> if they can get their block onto the chain and sign their vote with their private key, then, they're good, they've voted and they've got auditable proof that their vote has been accounted for
03/14 12:53:18<stoopkid> we get into the problem that they can then deny that that was actually them, i.e. claim vote-stealing, but, that's back to the disputing the vote issue
03/14 12:54:40<stoopkid> but, a more immediate problem is, what if somebody for some reason can't get their vote onto the chain at all?
03/14 12:55:45<stoopkid> how do you differentiate between an eligible voter who's freely exercising the choice not to vote, and an eligible voter who's being obstructed from casting their vote in some way or another?
03/14 12:59:09<stoopkid> and yet another category of non-voters: people who've died or become incapacitated in between registering to vote and the time of the actual vote, but the registry hasn't been updated to account for this yet (perhaps because nobody knows!)
03/14 13:02:59<stoopkid> so, part of the way i approach this is to take these different situations on a case-by-case basis
03/14 13:07:45<stoopkid> layer up specific mechanisms to filter out as many of the "problem cases" as possible: registered voters who aren't planning to vote, make a more specific per-vote registration, with enough time leading up to the vote to account for everybody to register, which can be done on-chain at that point since the first registration already established the identity<->entity relationships that everybody's going to be
              <stoopkid> trusting
03/14 13:09:49<stoopkid> that should weed out the majority of the voters who aren't intending to vote, since it requires action on the part of the voter to get them registered for that specific vote
03/14 13:11:35<stoopkid> the same kinds of problems can arise during that registration phase, but, there's more time given to dealing with that & the voters haven't yet committed to anything they're just registering to vote on what they're going to commit to
03/14 13:15:28<stoopkid> we can also weed out "spam" disputes by having consequences for them, such as losing your vote for that specific vote or your eligibility to vote entirely, depending on the severity of your obstructions of the expediency of the voting process
03/14 13:20:17<stoopkid> what i imagine is that by layering up specific filtering protocols like this, nobody gets filtered except for who legitimately should have been filtered, and then if there's non-participation from a participant after all the filtering has been done, that should be *cause for concern* and reason enough to hold the vote until further information on the status of the inactive participant
03/14 13:26:06<stoopkid> it's very similar to the CAP theorem in networking, but for voting, it's essentially the same thing, if you look at "non-voters" like parts of the network that have become in some way 'partitioned' from the part that the "central voter eligibility and vote disputes management authority" resides in
03/14 14:27:38<stoopkid> koo5[m]: are you synced up with omni testnet?
03/14 16:37:32<koo5[m]> Probably not yet, but it should be quite close
03/14 16:37:59<koo5[m]> Ill check when i get home
03/14 18:19:11*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 276 seconds
03/14 18:44:47<koo5[m]> 28 weeks behind
03/14 19:07:34<stoopkid> i've synced about 1/6th of it
03/14 19:29:23*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/14 19:38:33*** Quit: jibble__ (uid48680@gateway/web/irccloud.com/x-nynoxsgwvjujitmh) left #AutoNomic: Quit: Connection closed for inactivity
03/14 20:12:51<stoopkid> HMCa: probably better than any particular political party making it or any non-government entities (not-for-profit or otherwise): https://github.com/usgpo
03/14 20:22:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/14 20:23:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/14 23:42:57<HMCa> heh
03/14 23:43:32<HMCa> no comment. ;-)
03/14 23:47:21<stoopkid> hrm, i don't think i'm anywhere near "no-comment list" territory with that but i can understand your non-commenting
03/14 23:53:50<HMCa> heh
03/14 23:55:39<HMCa> so today I spent much time explaining to someone why if you deliver your server's x509 cert, it's root trust chain certs, and a client cert... to a client... together at the same time... in plaintext...
03/14 23:55:55<HMCa> they would be better off not even trying to do crypto.
03/14 23:56:56<stoopkid> nice
03/14 23:58:06<HMCa> it was funny to see how much work they did for end to end encryption and client authentication... and thennhow they did almost as much work to entirely defeat it themselves and enable full MitM attack
03/15 00:00:43<HMCa> some digging in revision history indicated it was a "left hand didnt know what right hand was doing" situation..
03/15 00:01:56<HMCa> some smart team implemented the security, and then another not-so-smart team took that and implemented all off the convenience featurs sales&marketing teams asked for
03/15 00:02:47<HMCa> (incl semantics which happened to *directly* defeat *each* security assumption)
03/15 00:03:23<stoopkid> they maybe should've passed it to the security team after instead of before
03/15 00:03:39<HMCa> or, at least passed it *back* right? ;-)
03/15 00:03:53<stoopkid> or that
03/15 00:04:23<HMCa> I guess that contract was probably up by then, or over budget, or something
03/15 00:04:33<HMCa> there's always an excuse
03/15 00:04:50<HMCa> "well, we back-burnered security concerns because joe got fired"
03/15 00:05:29<HMCa> there is no sound justifcation, yet I hear constant attempts to explain away eschewing basic security methodology
03/15 00:07:25<stoopkid> well, the justification is that they don't know how to do it, or even how to assess that it's actually a major issue
03/15 00:10:00<HMCa> a frightening trend along those lines which I've been noticing a lot lately in the west...
03/15 00:10:11<stoopkid> statistically speaking most of them probably grew up with a windows mentality of "viruses just happen so you have to put basically another virus on there to fight them / let them in"
03/15 00:10:23<HMCa> is outsourcing security concerns to bundled MSPs
03/15 00:11:02<HMCa> I've been challenging some of my clients lately... I ask them to chase down the answer to a simple question:
03/15 00:11:30<HMCa> "what ids rules are you using, from where, and updated when?"
03/15 00:11:35<HMCa> ids/ips
03/15 00:12:22<HMCa> I've yet to have a client that could find their answer... but I do have some clients that have cancelled some services. :-)
03/15 00:12:34<stoopkid> :)
03/15 00:12:53<HMCa> (clients that outsource their edge protection, that is)
03/15 00:14:20<HMCa> one client managed to get a partial ecplanation from cisco/meraki wrt "when" but not what/where, and getting the answer took weeks and bounced through five third-party companies.
03/15 00:14:28<HMCa> *explanation
03/15 00:15:20<HMCa> (side note, in a pen test that particular MSP had less than 5% visibility over ingress attempts)
03/15 00:17:19<stoopkid> so iow >95% of different kinds of attempts you tried for breaching their edge protection succeeded?
03/15 00:17:38<HMCa> no, just went unnoticed
03/15 00:17:51<stoopkid> gotcha
03/15 00:18:25<HMCa> so had we excluded that 5% specifically, we could've been invisible entirely
03/15 00:18:30<HMCa> <5% heh
03/15 00:23:46<HMCa> moral of the story: probably the more your security is re-sold, the less of it you will end up with. :-)
03/15 00:25:39<stoopkid> its the marketing that does it. most americans don't verify at any level they go with whatever's marketed to them most successfully
03/15 00:27:11<HMCa> extrapolate such behaviors into the "post-truth era" and some big problems arise, eh?
03/15 00:28:24<HMCa> the amount of security being resold along the way to you might even fluctuate between negative and positive... XD
03/15 00:30:30<HMCa> anyway, how are things coming along?
03/15 00:31:13<HMCa> are we starting to swing the pendulum back toward total confusion yet? :-)
03/15 00:31:43<HMCa> or are we ready for testnet... can build it in a weekend now... ?
03/15 00:32:50<stoopkid> going alright, been mostly focused on omni/btc stuff recently, still haven't transferred anything out to USD yet so that's my main priority at the moment
03/15 00:33:45<HMCa> what is agrs price these days? :-D
03/15 00:33:49<HMCa> XD
03/15 00:33:55<stoopkid> once i get this taken care of yea i'll be back full-time on autonomic, specifically getting down to code
03/15 00:34:26<HMCa> $1.36? $2? $0.60-$0.80? $0?
03/15 00:34:39<HMCa> $moon?
03/15 00:35:35<stoopkid> $1.25 at the moment it seems
03/15 00:35:40<HMCa> oh the games we will play!
              <HMCa> "seems"?
03/15 00:36:09<stoopkid> according to coingecko anyway
03/15 00:36:20<HMCa> and they get that number from...?
03/15 00:36:25<HMCa> you trust it... why?
03/15 00:36:49<stoopkid> i have no idea, hence "seems"
03/15 00:37:09<stoopkid> maybe "ostensibly" would've been a better word there :)
03/15 00:37:40<HMCa> maybe... trust, but verify?
03/15 00:37:58<HMCa> how many can you sell at that price *right* *now*? :-)
03/15 00:38:51<HMCa> (and for bonus points... what is gamma on that play?)
03/15 00:39:13<HMCa> (how much do you shake the market by even just trying to sell..?)
03/15 00:39:56<stoopkid> i'll get to that shortly
03/15 00:40:01<HMCa> let's start simpler...
03/15 00:40:44<HMCa> how many have sold at that price recently, for any definitiin of "recently" up to when the bittrex book went 404
03/15 00:40:53<HMCa> at/around
03/15 00:51:44<HMCa> dototd: ico stands for "initial context offering"
03/15 00:57:16<daemoz> hahaha
03/15 01:00:53<HMCa> heya daemoz
03/15 01:01:11<daemoz> heya
03/15 01:01:14<daemoz> how goes?
03/15 01:02:44<HMCa> well enough.  you?
03/15 01:04:28<daemoz> can't complain.
03/15 01:10:13<HMCa> stoop and I are in PM speculating about ways the genesis rulemaking might go in the future :-)
03/15 01:10:52<HMCa> it should be interesting, in any case, heh
03/15 01:11:00<HMCa> daemoz: so what do you think agrs price is right now?
03/15 01:11:18<daemoz> Yeah that does sound interesting~
03/15 01:11:24<daemoz> Umm, I do not have any idea.
03/15 01:12:04<stoopkid> https://www.coinhills.com/market/agrs/upbit/
              <HMCa> what about btc price?
03/15 01:12:07<stoopkid> 0 ?
03/15 01:15:51<daemoz> How many rules do you think will be in genesis?
03/15 01:16:32<stoopkid> https://coinmarketcap.com/exchanges/upbit/
03/15 01:17:05<HMCa> stoopkid: have a link to the book?  What is top of book? (best bid and ask)  How much is listed at those prices?
03/15 01:17:24* HMCa can't read korean btw
03/15 01:17:42* stoopkid neither
03/15 01:19:43<HMCa> I'm asking a friend who can for a favor. XD
03/15 01:19:54* HMCa brb
03/15 01:21:09<stoopkid> daemoz: not sure, that will be up to whoever participates in making genesis
03/15 01:21:49<HMCa> daemoz: I also dunno, but I hope for (and assume) just "as few as is necessary to be stable"
03/15 01:22:20<HMCa> stoopkid: seems upbit indeed delisted at the same time as bittrex
03/15 01:22:40<stoopkid> lol
03/15 01:22:48<daemoz> Rad, that'll be a fun process I bet. And yeah genesis should be nice and near
03/15 01:23:02<daemoz> s/near/neat
03/15 01:23:08<HMCa> so that number is not actual, I'd imagine
03/15 01:23:58<HMCa> so... how much are those tokens worth right now?  what is in our coffers in btc or usd denomination? XD
03/15 01:24:01<stoopkid> seems to be approximately what it was trading for when it was delisted
03/15 01:24:20<HMCa> where's our treasurer when we need her ;-)
03/15 01:24:59<stoopkid> 0 i guess. maybe we'll get some more attention if i demonstrate this omni<->btc exchange thing to work
03/15 01:32:03*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 264 seconds
03/15 01:44:07*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 01:46:26<HMCa> is that "on chain swaps"? heh
03/15 01:47:36<HMCa> trading a single colored satoshi for $1.36 worth of BTCs... what will they think of next
03/15 01:48:41<stoopkid> i guess; both parties send to a multisig that they've got presigned "refund tx's" to return to them whatever they sent there, and then use a single tx with multiple outputs to actually do the exchange
03/15 01:49:19<stoopkid> so if the exchange goes through it invalidates the refunds, and if the refunds go through it invalidates the exchange, and no party has risk of losing funds to a multisig black-hole because they have the refund tx's presigned before sending
03/15 01:49:36<stoopkid> and yea, it should work because it's basically just trading BTC for BTC
03/15 01:52:58<HMCa> lightning network with 0 duration channel bonds... and correspondingly 0 network to route over.
03/15 01:53:21<HMCa> so it is just lightning.  :-)
03/15 02:00:54*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 264 seconds
03/15 02:13:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 02:36:55<koo5[m]> 18...
03/15 02:38:01<koo5[m]> stoopkid: so, you think you got all the rules worked out?
03/15 02:38:40<stoopkid> for omni<->btc exchange thing?
03/15 02:39:50<koo5[m]> for cwn
03/15 02:40:09<stoopkid> ah type theory rules
03/15 02:40:48<stoopkid> pretty much
03/15 02:42:09<koo5[m]> something i can check out?
03/15 02:43:47<koo5[m]> maybe i can connect more dots now
03/15 02:46:21<stoopkid> check these out and see if they make sense http://167.88.171.233/workspace/AutoNomic/notes/natural_deduction/ND_rules_simple
03/15 02:47:23<stoopkid> i gotta get some sleep though, so i'll answer any q's when i get back
03/15 02:47:40<koo5[m]> cool
03/15 03:07:41<daemoz> What does the vertical bar in ATCHC mean? https://i.imgur.com/IT9Btsb.png
03/15 03:07:51<daemoz> I'm talking about the symbol getting discharged along with 'p'.
03/15 07:18:47*** Join: reffael_ (sid237291@gateway/web/irccloud.com/session, (unauthenticated): reffael)
03/15 07:21:15*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 264 seconds
03/15 07:23:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 07:24:02*** Join: Deadhandd (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/15 07:25:03*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 276 seconds
03/15 07:26:02*** Nick regain: reffael_ (sid237291@gateway/web/irccloud.com/session) is now known as reffael
03/15 07:27:36*** Quit: reffael (sid237291@gateway/web/irccloud.com/session) left #AutoNomic: Changing host
              *** Netmerge: *.net *.split, split 48 years 10 months 25 days 11 hours 27 minutes 36 seconds ago (Use /WL to see who's still missing)
03/15 07:36:55<koo5[m]> Thats an I for introduction
03/15 07:37:18<koo5[m]> Of =>
03/15 07:45:01<daemoz> Hmmm, so the introduction of the => uhh operator?
03/15 07:45:22<daemoz> oh so "=>" is just another thing that's discharged?
03/15 08:06:02*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/15 08:57:25<stoopkid> daemoz: "=>" is a connective (implication)
03/15 08:57:50<stoopkid> hypothesis/variables (like p) are what gets discharged
03/15 08:57:58<stoopkid> hypotheses*
03/15 09:01:03<stoopkid> so the "=> I p" line is saying you're gonna introduce an instance of * => *, in this case (A ^ B) => (B ^ A), under the assumption of having a proof p of (A ^ B) available
03/15 11:13:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/15 11:13:46*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 11:27:38*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/15 11:28:00*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/15 11:52:20*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 245 seconds
03/15 12:19:58*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/15 12:40:09*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
03/15 14:40:33*** Join: jibble__ (uid48680@gateway/web/irccloud.com/x-cyayihuyuviahtso, (unauthenticated): bacon)
03/15 19:08:35*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/15 22:31:55*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 260 seconds
03/15 22:48:14*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/16 04:22:01*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Quit: WeeChat 2.0.1
03/16 04:22:14*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/16 04:51:37*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tvpmgbohkoqkwfvc) left #AutoNomic: Quit: Connection closed for inactivity
03/16 06:29:16*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
03/16 06:48:38*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/16 07:14:58*** Join: sifar (~sifar@117.202.187.124, (unauthenticated): sifar)
              *** Quit: sifar (~sifar@117.202.187.124) left #AutoNomic: Changing host
              *** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
03/16 07:17:58*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Client Quit
03/16 08:38:53*** Join: harriet (~hawgozk@200.37.253.138, (unauthenticated): bkfgnde)
03/16 08:38:55*** Quit: harriet (~hawgozk@200.37.253.138) left #AutoNomic: Client Quit
03/16 08:46:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lrmoacazsbmqxxdw, stoopkid: stoopkid)
03/16 11:25:26*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lrmoacazsbmqxxdw) left #AutoNomic: Quit: Connection closed for inactivity
03/16 11:59:12*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
03/16 12:03:12*** Netmerge: *.net *.split, split 7 hours 51 minutes 30 seconds ago (Use /WL to see who's still missing)
03/16 12:43:12*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/16 18:06:34*** Netmerge: *.net *.split, split 5 hours 46 minutes 57 seconds ago (Use /WL to see who's still missing)
03/16 18:12:39*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
03/16 18:41:08*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/17 00:02:01*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
03/17 00:21:43*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/17 02:01:24*** Join: dmiles[m] (181466f5@gateway/web/freenode/ip.24.20.102.245, dmiles: c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245)
03/17 02:29:26<HMCa> "SEC has confirmed that it is working on 12 probes into crypto business"
03/17 02:30:29<HMCa> good thing that we have never been, and will never be, any sort of "business" :-)
03/17 02:32:04<HMCa> easy to conclude that we can not possibly be cheating investors out of money: we don't accept any of it. XD
03/17 03:38:01*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 265 seconds
03/17 03:41:48*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 05:37:32<koo5[m]>  http://cilichili.cz/clanky/2012-02/muzeum-nesmyslu/lopatosedak.jpg
03/17 05:38:24<koo5[m]> Please check that your computer's date and time are correct! If your clock is wrong, Omni Core will not work properly.
03/17 05:38:57<koo5[m]> yea it doesnt
03/17 07:08:02*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 256 seconds
03/17 07:20:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 07:50:24*** Join: GMpow2 (~5@ip4d16fcbb.dynamic.kabel-deutschland.de, (unauthenticated): realname)
03/17 10:14:40*** Quit: GMpow2 (~5@ip4d16fcbb.dynamic.kabel-deutschland.de) left #AutoNomic: Read error: Connection reset by peer
03/17 12:37:57*** Join: GMpow2 (~5@p5481C1E1.dip0.t-ipconnect.de, (unauthenticated): realname)
03/17 12:41:42*** Join: HappyLoaf2L9I10 (~iahrgiih@27.76.6.127, (unauthenticated): gghhew)
03/17 12:41:45*** Quit: HappyLoaf2L9I10 (~iahrgiih@27.76.6.127) left #AutoNomic: Client Quit
03/17 13:31:50*** Quit: GMpow2 (~5@p5481C1E1.dip0.t-ipconnect.de) left #AutoNomic: Quit: Leaving
03/17 13:38:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/17 13:39:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 14:39:49*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
03/17 14:54:46*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/17 17:04:33*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 260 seconds
03/17 17:21:01*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 17:56:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 240 seconds
03/17 18:13:18*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/17 18:28:36*** Join: dmiles[m]_ (181466f5@gateway/web/freenode/ip.24.20.102.245, dmiles: c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245)
03/17 18:31:24*** Quit: dmiles[m] (181466f5@gateway/web/freenode/ip.24.20.102.245) left #AutoNomic: Ping timeout: 260 seconds
03/17 18:40:20*** Quit: dmiles[m]_ (181466f5@gateway/web/freenode/ip.24.20.102.245) left #AutoNomic: Ping timeout: 260 seconds
03/17 21:10:13*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-thmeuvykiwlfrpax, stoopkid: stoopkid)
03/17 21:14:07<stoopkid> alright got my node sync'd to testnet and got my tomni; koo5[m] you free tomorrow for testing stuff?
03/17 21:16:14<stoopkid> HMCa: well i accepted nilli's agoras but yea completely different, tho IANAL, which maybe can be shortened to INAL, but then again who doesn't these days
03/17 21:33:44<stoopkid> omnicore-cli  -testnet getinfo: "errors": "Warning: unknown new rules activated (versionbit 28)"
03/17 21:35:30<stoopkid> so what i'm basically getting is that omni's trying to ride bitcoin like a horse, and could hypothetically get thrown off at the horse's discretion
03/17 23:09:51*** Join: dmiles[m] (181466f5@gateway/web/freenode/ip.24.20.102.245, dmiles: c-24-20-102-245.hsd1.wa.comcast.net/24.20.102.245)
03/17 23:42:31*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
#AutoNomic> 03/22 14:47:55*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
              *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 1 month 24 days 20 hours 37 minutes 8 seconds ago
              *** Names: editable-koo dmilez_ dmiles lexxus[m] daemoz stoopkid jibble__ @ChanServ genuinelyfx[m] Tamara_ cantora vbmithr koo5[m] reffael Deadhand HMCa
              *** End of /NAMES list.
03/22 16:08:24<dmiles> lo
03/22 16:30:35*** Quit: dmilez_ (181466f5@gateway/web/freenode/ip.24.20.102.245) left #AutoNomic: Ping timeout: 260 seconds
03/22 16:41:09*** Join: sifar_ (~sifar@117.206.7.127, (unauthenticated): sifar)
03/22 16:43:34*** Nick change: sifar_ (~sifar@117.206.7.127) is now known as sifar
03/22 17:00:54*** Quit: sifar (~sifar@117.206.7.127) left #AutoNomic: Quit: Leaving
03/22 17:03:22*** Join: sifar (~sifar@2405:204:d302:9836:c20c:f3ad:82ee:5ab9, (unauthenticated): sifar)
              *** Quit: sifar (~sifar@2405:204:d302:9836:c20c:f3ad:82ee:5ab9) left #AutoNomic: Changing host
              *** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
03/22 17:04:49*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Client Quit
03/22 17:29:52<koo5[m]> lo dmiles
03/22 20:02:43*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/22 20:26:23*** Nick regain: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) is now known as dmilez_
03/22 20:26:37*** Nick change: dmilez_ (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) is now known as dmiles[m]
03/22 21:13:05*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
03/22 23:41:30*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/22 23:44:54*** Quit: dmiles[m] (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
03/23 00:23:36*** Join: dmiles[m] (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/23 01:57:07*** Join: sifar (~sifar@2405:204:d302:9836:c20c:f3ad:82ee:5ab9, (unauthenticated): sifar)
03/23 01:57:10*** Quit: sifar (~sifar@2405:204:d302:9836:c20c:f3ad:82ee:5ab9) left #AutoNomic: Changing host
              *** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
03/23 02:12:19*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Ping timeout: 276 seconds
03/23 20:08:19*** Quit: jibble__ (uid48680@gateway/web/irccloud.com/x-cyayihuyuviahtso) left #AutoNomic: Quit: Connection closed for inactivity
03/24 02:27:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vrgtnpsxtcjxkeju) left #AutoNomic: Quit: Connection closed for inactivity
03/24 02:53:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/24 02:54:10*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/24 11:27:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-meiqmnqfrkrelqbv, stoopkid: stoopkid)
03/24 14:16:20*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-meiqmnqfrkrelqbv) left #AutoNomic: Quit: Connection closed for inactivity
03/24 14:17:31*** Join: jibble__ (uid48680@gateway/web/irccloud.com/x-nsqrqlfssogxzqyo, (unauthenticated): bacon)
03/25 03:54:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/25 03:54:29*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/25 04:59:56*** Join: jb01 (uid289576@gateway/web/irccloud.com/x-duovrjjdhuelpqzm, (unauthenticated): jb01)
03/26 17:42:04*** Disconnected
              *** Connecting...
03/26 17:42:19*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
              *** Topic set by stoopkid on Fri Jan 26 17:10:50 2018, 1 month 28 days 23 hours 31 minutes 30 seconds ago
              *** Names: editable-koo stoopkid daemoz dmiles jb01 jibble__ dmiles[m] lexxus[m] HMCa Deadhand reffael koo5[m] vbmithr cantora Tamara_ genuinelyfx[m] @ChanServ
              *** End of /NAMES list.
03/26 18:24:16*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/26 18:24:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/26 19:33:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/26 19:33:25*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/26 23:11:54*** Nick change: stoopkid (uid137696@gateway/web/irccloud.com/x-dkaqyfhcfgpumjgx) is now known as stoopbob
03/27 11:26:15<HMCa> hrmm
03/27 11:27:02<stoopbob> hrm?
03/27 13:04:18<HMCa> not sure how I feel about the new nick :-P
03/27 13:05:36*** Nick change: stoopbob (uid137696@gateway/web/irccloud.com/x-dkaqyfhcfgpumjgx) is now known as stoopkid
03/27 13:05:56<stoopkid> Dont wanna go down that road again lol
03/27 13:10:50<HMCa> XD
03/27 13:10:54<HMCa> heh, I didn't mean it quite like that :-P
03/27 13:10:58<HMCa> anyway
03/27 13:11:00<HMCa> so
03/27 13:11:36<HMCa> does anyone remember my talking about ethereums "self-perpetuating death spiral"?
03/27 13:12:12<HMCa> which could be invoked by a particularly structured contract to kill off the network - or would inevitavky happen naturally over time anyway
03/27 13:12:17<HMCa> *inevitably
03/27 13:12:19<HMCa> ?
03/27 13:12:37<stoopkid> sure, not the details but the general concept
03/27 13:12:58<HMCa> well, it appears likely that the eth network has now entered the first phase of the natural form of the phenomenon!
03/27 13:13:54<HMCa> the developers (incl vitalik) are proposing adding rents to mitigate...
03/27 13:14:16<stoopkid> “rents”?
03/27 13:14:17<HMCa> but (as they even admit) this is only mitigation
03/27 13:14:30<HMCa> additiinal and higher network fees
03/27 13:14:55<HMCa> but this is not a solution
03/27 13:15:40<HMCa> it will only stave off the network's destiny for a short time
03/27 13:15:48<HMCa> then the death spiral will go on
03/27 13:16:38<HMCa> to quote one of their own devs (Johnson) - "The current system as it stands is unsustainable"
03/27 13:16:41<HMCa> (!)
03/27 13:16:48<HMCa> gee, that sounds familiar...
03/27 13:16:50<HMCa> ;-)
03/27 13:16:53<stoopkid> https://www.google.com/amp/s/www.coindesk.com/vitalik-wants-pay-stop-ethereums-runaway-growth/amp/
03/27 13:17:19<stoopkid> really google cmon
03/27 13:17:49<stoopkid> https://www.coindesk.com/vitalik-wants-pay-stop-ethereums-runaway-growth/amp/
03/27 13:19:06<stoopkid> is it familiar? I guess im lacking some historical context
03/27 13:24:09<HMCa> you can think of it like this:
03/27 13:26:34<HMCa> eth is a very large turing machine, with a resource cost for both additional tape and each tape move... the network incentivizes processing tape moves, but not extending tape size... which only works for so long as the subsidies can cover the difference....
03/27 13:28:34<HMCa> once the cost for added tape exceeds the profit margin of moving tape, the security model breaks down because the incentive turns net negative - it costs too much to continue to mine (move tape) and creates loss
03/27 13:30:12<HMCa> if they cap the size of the tape then they also cap capacity of the machine (making their TC machine finite) - which in turn caps network growth - ehich in turn caps incentive on security, creating a ceiling in possible adoption
03/27 13:30:31<HMCa> any more adoption beyond that and thr network can't securely process...
03/27 13:30:54<HMCa> so presumably to continue growth amd added security, they'll need to move the ceiling up - extending the tape...
03/27 13:31:33<HMCa> but of they can't just do so perpetually or it is the same as not having the ceiling in the first place!
03/27 13:31:46<HMCa> *ofc
03/27 13:33:11<HMCa> the network can't be *both* capacity controlled *and* scalable...
03/27 13:34:10<HMCa> if it isn't scalable then it can't support adoption.... but if it isn't capacity controlled then it chokes itself out and stalls (as it is beginning to do right now, today)
03/27 13:35:01<HMCa> either way it hits a wall on its' growth curve.... and stalls. :-|
03/27 13:37:25<HMCa> its' rice's th playing out in a funny and novel way ;-)
03/27 13:37:37* HMCa gtr for a bit, maybe an hour or so
03/27 13:41:49<stoopkid> interesting, and somewhat daunting; what does autonomic need to do / not do in order to avoid this death spiral?
03/27 14:20:59<lexxus[m]> Few naive ideas:
03/27 14:21:04<lexxus[m]> 1. Allow for off chain storage of data, e.g. give an option for authenticated centralized storage of data (via lambda auth)
03/27 14:21:26<lexxus[m]> 2. Have in-built decentralized storage platform similar to sia, storj, maidsafe OR offer integration with one (or, better, several) such decentralized storage platforms
03/27 14:21:31<lexxus[m]> 3. Allow for selective execution of contracts and selective storage of data - only nodes that are stakeholders of a certain contract are required to actually execute its code and store its data
03/27 14:23:18<lexxus[m]> 4. Allow for some DHT/torrent like storage system with proper economic incentives (should be equivalent to #2)
03/27 14:50:24<stoopkid> hrm, we'll have some things like that. lambda-auth is available so we can do (1); side-chains so we can do (3), and we'll be incorporating DHT so we can do (4). i'm still working through a lot of details of how managing all this should actually work though
03/27 14:50:48<HMCa> right, the root of the problem is that eth allows arbitrarily complex processes over a single, *global* logical context state
03/27 14:51:40<HMCa> which is expected to self-provision, manage its' own resource allocations, and do so consistently... which is paradox!
03/27 14:52:17<HMCa> there's a "physician heal thyself"/"who shall guard the guards themselves" problem
03/27 14:52:44<HMCa> this is why it can be exploited as *attack* on eth...
03/27 14:53:01<HMCa> incentivize the guards to starve the network of tape.
03/27 14:53:24<HMCa> (or "the rest of the network" I guess, heh)
03/27 14:55:13<HMCa> AN uses lexxus' #3 approach as a part of its' design to address these concerns... but we also offer facilities for 1, 2, and 4 as *options* for contexts
03/27 14:56:18<HMCa> but #3 is sort of "mandatory" in the design... a context can't really make a choice *not* to be in a silo and yet still remain a part of (and interacting with) the broader network.
03/27 14:58:02<HMCa> (meaning that to even *be* a valid context on AN you have to be structured such that everyone else can safely *ignore* everything about you except your shared-ancestor peggings.)
03/27 15:00:27<stoopkid> i'll have to work through a demonstration of how the death spiral arises and how side-chains avoid it. i get the basic idea but i'll have to do some work to make my understanding concrete
03/27 15:04:22<HMCa> it is nontrivial, for sure
03/27 15:04:24<HMCa> heh
03/27 17:19:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dkaqyfhcfgpumjgx) left #AutoNomic: Quit: Connection closed for inactivity
03/27 17:39:36*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mmcoarnqfkzyqgzc, stoopkid: stoopkid)
03/27 18:54:40*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 264 seconds
03/27 18:59:50*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/27 19:49:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mmcoarnqfkzyqgzc) left #AutoNomic: Quit: Connection closed for inactivity
03/27 23:11:50*** Nick change: dmiles[m] (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) is now known as dmiles_m
03/28 03:52:12*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
03/28 03:53:29*** Quit: dmiles_m (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 256 seconds
03/28 04:29:55*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/28 04:39:07*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/28 05:46:13*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 246 seconds
              *** Quit: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 246 seconds
03/28 06:03:38*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/28 06:06:00*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/28 08:44:46*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nqnyzhayjsycbytt, stoopkid: stoopkid)
03/28 14:08:03*** Quit: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
03/28 14:21:04*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/28 14:50:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nqnyzhayjsycbytt) left #AutoNomic: Quit: Connection closed for inactivity
03/28 15:27:17*** Join: nilli (415858b4@gateway/web/freenode/ip.65.88.88.180, (unauthenticated): 65.88.88.180 - http://webchat.freenode.net)
03/28 15:47:28*** Quit: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
03/28 15:55:14*** Quit: nilli (415858b4@gateway/web/freenode/ip.65.88.88.180) left #AutoNomic: Ping timeout: 260 seconds
03/28 15:59:32*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/28 18:13:05*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03/28 18:13:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/28 18:59:00*** Join: typlian5 (~PircBotX@185.185.69.118, (unauthenticated): adequatt)
03/28 21:37:17*** Quit: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
03/28 21:54:46*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/28 23:10:32*** Join: nilli (60f604ee@gateway/web/freenode/ip.96.246.4.238, (unauthenticated): 96.246.4.238 - http://webchat.freenode.net)
03/28 23:51:57*** Quit: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
03/29 00:09:31*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/29 00:25:54*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 265 seconds
03/29 01:05:07*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
03/29 01:26:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Quit: WeeChat 2.0.1
03/29 01:29:44*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03/29 01:49:04*** Quit: nilli (60f604ee@gateway/web/freenode/ip.96.246.4.238) left #AutoNomic: Ping timeout: 260 seconds
03/29 02:27:00*** Quit: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
03/29 02:41:06*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/29 11:32:43*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rutmxiepfpaxdkqc, stoopkid: stoopkid)
03/29 12:08:17*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
03/29 12:47:56*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Remote host closed the connection
03/29 14:54:32*** Join: mnkk (~mnkk@ip5f5bf075.dynamic.kabel-deutschland.de, (unauthenticated): ...)
03/29 16:33:16*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 256 seconds
03/29 17:00:02*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03/29 17:52:09*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rutmxiepfpaxdkqc) left #AutoNomic: Quit: Connection closed for inactivity
03/29 18:06:34<HMCa> wtf is going on with okcoin? XD
03/29 18:11:31<HMCa> someone just dropped $10mil against btcusd3m?
03/29 18:59:47<koo5[m]> 3m?
03/29 19:01:51<koo5[m]> have to be logged in i guess
04/07 06:16:39<editable-koo>222
              *** [read:errno=104 from nil] 
              *** Disconnected
              *** Connecting...
04/07 06:16:41-Server Notice- *** Looking up your hostname...
              -Server Notice- *** Checking Ident
              -Server Notice- *** No Ident response
              -Server Notice- *** Couldn't look up your hostname
04/07 06:16:47*** [sasl.login from editable-koo (user@167.88.171.233)] sirdancealot
              *** SASL: You are now logged in as sirdancealot.
              *** SASL authentication successful
04/07 06:16:50*** Mode change: +Zi on editable-koo by editable-koo (server)
04/07 06:17:28*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
              *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
              *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 2 months 10 days 12 hours 6 minutes 42 seconds ago
              *** Names: editable-koo koom daemoz jibble__ stoopkid dmiles koo5[m] lexxus[m] Deadhand reffael Tamara_ genuinelyfx[m] cantora HMCa vbmithr @ChanServ
              *** End of /NAMES list.
              <koom> still the same, running, but silently disconnected
04/07 06:17:29-ChanServ- [#mycroft] "Artificial intelligence for everyone"
04/07 06:18:27<koom> while im at it, daemoz, you mind if i invite random other people to the server?
04/07 06:18:59<koom> i want to practice haskell with some guy from reddit
04/07 06:23:02<koom> alright looks like theres a plugin to solve this
#AutoNomic> 07.04.18 07:21:20*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 2 months 10 days 13 hours 10 minutes 33 seconds ago
                 *** Names: editable-koo koom daemoz jibble__ stoopkid dmiles koo5[m] lexxus[m] Deadhand cantora @ChanServ vbmithr HMCa genuinelyfx[m] Tamara_ reffael
                 *** End of /NAMES list.
07.04.18 11:54:56*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
07.04.18 12:24:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
07.04.18 12:30:19*** Join: nilli (944bf7ea@gateway/web/freenode/ip.148.75.247.234, (unauthenticated): ool-944bf7ea.dyn.optonline.net/148.75.247.234)
07.04.18 12:37:58<editable-koo>hi
07.04.18 12:39:04<editable-koo>so, who knows, maybe log is fixed this time.....
07.04.18 12:52:30<nilli> hi editable-koo who fix it?  what are you guys working on ? are you working on this project ? did you left your work eventualy?
07.04.18 12:53:37<nilli> I cant really get a sense of anything that is going on.
07.04.18 12:56:05<nilli> is anyone in crypto world is doing anything real or is it all marketing and there is no real development happening anywhere
07.04.18 12:58:43<nilli> ....sorry been in some events that made me feel that way. .
07.04.18 13:07:58<editable-koo>sorry, we definitely should be more loud
07.04.18 13:08:15<editable-koo>but then, im still just learning the basics, so there is nothing to talk about
07.04.18 13:08:40<editable-koo>hopefully i fixed the logger now:)
07.04.18 13:09:34<editable-koo>as on stoop, we gotta ask him, i guess he could be taking a few days off after all the work?
07.04.18 13:11:50<editable-koo>yes i left it, practically two months back, oficially one month back (+ one week)
07.04.18 13:12:14<editable-koo>i know it seems like a lot of time for nothing to show
07.04.18 13:13:41<editable-koo>im still picking up haskell, agda, formal logic
07.04.18 13:14:17<editable-koo>all with the goal that i'll be able to be on the same page with stoop about what we'll build
07.04.18 13:14:59<editable-koo>and just , learning to really speak these languages
07.04.18 13:16:16<editable-koo>stoop has been, besides dissecting bitcoin data structures, and messing with omni, diving into cryptographic primitives
07.04.18 13:16:49<editable-koo>thats a big area of its own, that will be needed for the final implementation
07.04.18 13:17:24<editable-koo>ive barely ever scratched the surface of that by using aes in one project
07.04.18 13:22:34<editable-koo>ive been pretty much staying at home last two months, and ive finally decided ive had enough of that and im gonna start trying to work in one of those coworking spaces
07.04.18 13:23:33<editable-koo>admittedly i could work with more focus, so hopefully this will help
07.04.18 13:24:41<editable-koo>wanna tell us about the events? hehe
07.04.18 13:38:36<stoopkid> hey nilli
07.04.18 13:38:39<nilli> no need to waste time on it (telling about it) ill just keep a low profile for a while hoping to see anything happaned
07.04.18 13:39:19<nilli> these days I feel like I know nothing about anything.
07.04.18 13:39:31<nilli> hi stoopkid
07.04.18 13:40:16<stoopkid> since we don't really do any marketing at all i don't think you could say we fall into the "all marketing" category heh
07.04.18 13:40:29<editable-koo>lol
07.04.18 13:42:30<nilli> yes you are right. but also I have been waiting to see something coming out of this project since 2014.... I know you are not to be balme but I just wonder of it is at all possible to do
07.04.18 13:46:04<editable-koo>yesterday i took a bit of time to google if anyone writes anything about https://en.wikipedia.org/wiki/Diaspora_(social_network)
07.04.18 13:46:11<nilli> anyway its much worse these marketing campaigns before any real work is done than just keep quiet and work . So what you do it better
07.04.18 13:49:14<nilli> by the way this project I become involve in regarding certification of products and seemed so great is all lies., it have all the ingredients to be so good and such a great use case, but its not real most of it
07.04.18 13:49:16<stoopkid> wrt the slow development, the lack of marketing is related; we're basically like an international startup with no incubator operating over the internet and trying to be basically like something along the lines of a cooperative non-profit and rejecting ways to invest, but up until recently that meant we were spending 90%+ of our time focused on stuff like our day-jobs etc.. and not even considering things like "being
                 <stoopkid> professional" when it comes to AutoNomic it was just "get w/e code/research you can get out whenever you can get it out"
07.04.18 13:50:54<editable-koo>whats "being professional"?
                 <nilli> stoopkid you could apply for an incubator. there are many opportunities out there. you should take advantage of it.
07.04.18 13:52:46<editable-koo>no business plan means no money, except, now that i think about it, i should do another round of research on this, because here in EU, this grants thing is pretty crazy
07.04.18 13:53:23<nilli> i have to go no' hopefully the log is fixed so ill be able to catch up on what is going on.
07.04.18 13:53:24<stoopkid> schedules, educational resources, basic PR, following a sw-dev life-cycle plan, more communication in team, etc..
07.04.18 13:53:55<editable-koo>alright
07.04.18 13:54:44<editable-koo>re educational resources, another good one: https://www.youtube.com/watch?v=E8I19uA-wGY
07.04.18 13:55:07<nilli> just one thing about the incubator. if you can show real programming and a plan and have some money im sure  that you can get into one. they need you no less then you may benefit from therm
07.04.18 13:56:39<nilli> can be nice for you to work together in some supportive environment. though I dont think that HMC will like it. too many  people will start ask too many question about him
07.04.18 13:57:08<stoopkid> and he'll start to ask too many questions about us heh
07.04.18 13:57:50<nilli> take care see you later
07.04.18 13:57:56<editable-koo>tc
07.04.18 13:58:02<stoopkid> catch ya later
07.04.18 14:02:42*** Quit: nilli (944bf7ea@gateway/web/freenode/ip.148.75.247.234) left #AutoNomic: Ping timeout: 260 seconds
07.04.18 14:02:48<stoopkid> bleh functional programming
07.04.18 14:10:49<HMCa> yay functional programming! :-)
07.04.18 14:18:19<koo5[m]> yaybleh programming
07.04.18 14:20:06<stoopkid> pretty good lecture so far though
07.04.18 17:54:03<editable-koo>today is tabs cleaning day
07.04.18 19:09:47*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
07.04.18 19:10:10*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.04.18 20:13:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
07.04.18 20:13:42*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.04.18 21:30:47*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 265 seconds
07.04.18 22:49:07<daemoz> editable-koo: I'd prefer to keep it AN but if you're planning on doing that a lot maybe I can make a shared user for that purpose.
07.04.18 22:49:50<daemoz> Been wrapping up my alpha release these past few weeks. Hopefully will have some more time after that to get some more learning done.
08.04.18 03:25:47-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
08.04.18 03:25:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
08.04.18 03:58:47*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
08.04.18 04:21:53*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
08.04.18 05:22:46*** Quit: vbmithr (~vb@luminar.eu.org) left #AutoNomic: Quit: leaving
08.04.18 05:22:57*** Join: vbmithr (~vb@luminar.eu.org, vbmithr: Vincent)
08.04.18 05:42:07*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
08.04.18 09:19:35<stoopkid> seems this positive vs. negative distinction is important for the intensional vs. extensional thing; a relationship between structure & behavior
08.04.18 09:20:45<stoopkid> negative formulation of a type gives an extensional perspective on that type
08.04.18 09:22:10<stoopkid> we start with the elim rule, i.e. we know how to *use* an object of the type, and then we construct intro rules to match, i.e. rules which tell us how to construct an object that could be used that way
08.04.18 09:22:59<stoopkid> functions/lambdas, for example. we start with "i know how to *use* a function, function application, i.e. modus ponens, so my elim rule is modus ponens"
08.04.18 09:25:52<stoopkid> then we construct an intro rule to match, it tells us how to construct one of these so-called "functions" that the elim rule is asking for, it's defined so as to capture all the things that the elim could ever apply to (no pun)
08.04.18 09:26:34<koo5[m]> Punny nonetheless
08.04.18 09:27:05<stoopkid> it's similar to a "greatest fixed-point", and it probably actually is one if interpreted properly (see the stuff with inductive types as least fixed-points)
08.04.18 09:28:06<stoopkid> contrast this with a positive formulation of conjunction: i know an "A and B" needs an A, and also a B
08.04.18 09:29:26<stoopkid> so if you give me an A, and also a B, i can construct for you an "A and B", i.e. i've got an intro rule for "and", telling me how to construct its objects
08.04.18 09:35:18<stoopkid> then i go craft the elim rule to match; "how can i use 'A and B'", from this i can prove C if C is provable from whatever information i can assume i've got available based on what the intro rule can apply to, which is an A, along with a B
08.04.18 09:38:16<stoopkid> contrast this with a negative formulation of conjunction: given an "A and B", i can use it to get an A (projection 1) or use it to get a B (projection 2)
08.04.18 10:13:55<koo5[m]> daemoz: ok, i will spin up another vps
08.04.18 10:37:54*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
08.04.18 10:38:24*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
08.04.18 11:46:29-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
08.04.18 11:47:04*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
08.04.18 13:40:55*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
08.04.18 14:28:08<stoopkid> https://math.stackexchange.com/questions/1028795/why-are-truth-conjunction-and-implication-called-negative-fragments-of-ipl/1040081#1040081
08.04.18 14:28:42<stoopkid> negative types: start with elim rules, and intro rules are uniquely defined by the elim rules; opposite case for positive types
08.04.18 14:31:33<stoopkid> so, i'm wondering a couple things here: 1) can functions be presented as a positive type, and if so, what would that look like; 2) is this related to equality between functions and function extensionality
08.04.18 14:40:08-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
08.04.18 14:40:14*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
08.04.18 14:53:17*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
08.04.18 22:39:39<stoopkid> HMCa: do you have any particular reason for "yay functional programming", or rather, do you mean this with the seemingly standard connotations that "functional programming is the only way programming should be done" (or perhaps some restricted subset of FP like MLTT-TFPL)?
08.04.18 22:50:08<stoopkid> maybe a more precise question: in theory do you have a reason to objectively prefer lambda calculus over x86 machine code that doesn't have to do with the complexity of the x86 instruction set(s)? alternatively, lambda calculus vs. subleq
08.04.18 23:03:35<stoopkid> obv functions have "nice properties", like, whereas machine code makes concatenable units of execution, functions make *composable* units of execution; cleaner, nicer, make injection attack a lot harder by default, etc.. but.. 1) when we look at this in the context of abstract algebra, this isn't really "special", in the sense of, if you have a backdrop of abstract algebra to work with, there's no reason you have to impose
                 <stoopkid> pure (possibly total) functional programming as the sole available paradigm, because within that conceptual framework even if you're working with subleq code you'll prove things about it and how to make it into / use it as some kind of more well-behaved, composable unit of execution
08.04.18 23:11:17<stoopkid> iow, it's basically an abstract algebraic framework that you can apply to anything, you can find some real-world thing or some model of some abstract world, and point out an instance of a function in it
08.04.18 23:12:37<stoopkid> that's actually how we get from machine code to functional programming in the first place, which brings me to my second point:
08.04.18 23:13:01<stoopkid> 2) we actually have to get from machine code to functional programming in the first place
08.04.18 23:14:51<stoopkid> and it seems this goes deeper than just coincidence that our machines use "imperative"/"sequential" machine code
08.04.18 23:19:55<stoopkid> we drive computation by iterating the laws of physics, as if on a main loop; this is the basis for all the operations of our machines: while(electrons pumping through){ compute }
08.04.18 23:24:15<stoopkid> this comes up even more when we take into account our *experience* of the computations of these machines, like, you might say "it adds 1 + 2 and halts with 3 as output"
08.04.18 23:25:53<stoopkid> if the intention is that the user sees this output, then this actually means "it adds 1 + 2 and then loops forever with 3 displayed"
08.04.18 23:37:21<stoopkid> at the basis of it, the entire functional programming paradigm is just an abstract conceptual framework in which to organize real-world computation, *however it maybe occurring* into generically composable units of computation, just as any other abstract data structure is an attempt to organize real-world "bits" of state into some, often highly composable (JSON, XML, etc..), conceptual framework for interpretation; taming
                 <stoopkid> the real-world
08.04.18 23:44:47<stoopkid> my issue with FP paradigm isn't that it's "bad", it's that there's a general "lack of acknowledgement" by most of its proponents of both the processes that must be occurring underneath the surface to allow for their paradigm to even have been manifested into reality in the first place, as well as the more immediate & more compelling justification of FP paradigm for the role of TFPL as constructive proof under curry-howard,
08.04.18 23:44:48<stoopkid> but even there the situation is not "everything is just functions, it's, we have functions available in our math, therefore, technically, it's a functional programming lang, and given some 'compiler thing', you can execute it"
08.04.18 23:46:38<stoopkid> what is the 'compiler thing', it's what takes your abstractions & manifests them into the real-world, it's what keeps available composable pieces of reality to produce a physical model (in the sense of model theory) of your abstractions
08.04.18 23:50:20<stoopkid> yay static types & dependent types, right? that's where we get our representation of predicate logic, that's where we get our direct translation of logical thought onto the machine, and get coherent, consistent, arbitrarily fine-grained abstractions that *anything* can fit into, as long as it constitutes a model of that abstraction, and from there, interoperability, etc..
08.04.18 23:51:26<stoopkid> FP paradigm fits into place here as the necessary proof framework given that we impose constructivism
08.04.18 23:54:37<stoopkid> but that's just it, a *proof* framework; proofs about what though? can be anything, can be C++ or subleq
08.04.18 23:57:04<stoopkid> like, this is the issue with the "FP paradigm", using that video lecture koo pasted as an example
08.04.18 23:58:09<stoopkid> functional programming was presented as an ivory tower; haskell programmers at the top, deciding who can/can't ascend the tower, and lisp programmers even "higher", like off on their own moon colony
08.04.18 23:59:15<stoopkid> then justifications for all the haskellisms start coming up and we get into monads and monoids and such, and they're going on and on about how "nice" these data structures are, all that "nice properties" stuff etc..
09.04.18 00:00:17<stoopkid> meanwhile, haskell actually can't type-check for "is-a-monoid" and surely not "is-a-monad"
09.04.18 00:00:55<stoopkid> just can't do it
09.04.18 00:08:23<stoopkid> so, they harp on and on and on about the nice properties of composability etc.. and even get into the abstract algebra behind it, but... they're focused on the functions instead of the types
09.04.18 00:09:59<dmiles> stoopkid: i came to that conclusion as well "they are focused on the functions instead of the types" .. though they think of Types as Functions
09.04.18 00:10:28<dmiles> oops..  They make each Function into a Type
09.04.18 00:10:48<dmiles> This way they can analyse Function equivancy
09.04.18 00:11:57<dmiles> and then a proof become a call stack showing functions use each other in some approve manner
09.04.18 00:12:57<dmiles> and then a proof become a call trace showing functions usage of each other in some approved manner
09.04.18 00:13:26<stoopkid> what do you get with dep. types? what makes it actually relevant to a programmer's tool-kit and not just mathematical abstraction hand-waving or looking for errors in regular mathematical proof? here's what it is, in a nutshell: fine-grained typing on your data & algorithms according to arbitrary logical constraints allows for placing arbitrary constraints on ways to *compose* these units of data/computation, thus allowing
                 <stoopkid> to more easily compose systems from smaller working pieces without having the composition be "broken"
09.04.18 00:15:00<stoopkid> we're great at writing code-snippets that work fine in isolation, we're not so great at making all the code-snippets we've written composable & interoperable
09.04.18 00:15:25<dmiles> on dep. types.. this might be more opinion:  dep. types genrally exist to save a compiler from getting tricked into overboxing
09.04.18 00:15:35<stoopkid> overboxing?
09.04.18 00:15:55<stoopkid> dep. types exist to represent universal and existential quantifications
09.04.18 00:16:05<dmiles> they supply also enough sematic information we can approve things easier
09.04.18 00:16:54<dmiles> overboxing is when you have an structure that you care mostly about one member
09.04.18 00:17:03<stoopkid> ah
09.04.18 00:17:09<dmiles> yet you are affraid to extract that member and pass it arround
09.04.18 00:17:34<dmiles> so you leave that member in the original record.. and keep passing arround the record
09.04.18 00:18:06<dmiles> even though it proably could have been extracted very early
09.04.18 00:18:29<stoopkid> well, dep. types is mainly just about, that's what the interpretation of universal & existential quantification is in constructive logic
09.04.18 00:19:03<dmiles> an existential type that is keyed from a universal type existence depands on the universal right?
09.04.18 00:19:32<stoopkid> not sure what you're asking
09.04.18 00:20:00<dmiles> for all human_bodies there exists a head
09.04.18 00:21:09<dmiles> oops human_head..  now if i have a function that is meant to compare human heads for equality
09.04.18 00:21:38<dmiles> those heads are going to be vetted from the human_human bodies
09.04.18 00:21:59<dmiles> those heads are going to be vetted from the human_bodies.  vetted means dependant upon the management system
09.04.18 00:22:17<dmiles> as in Head<HumanBody>
09.04.18 00:22:49<dmiles> lets say Head<HumanBody>
09.04.18 00:23:15<dmiles> sorrly lets have a constructire  Head<HumanBody> Head(HumanBody body);
09.04.18 00:24:24<dmiles> lets say we have no way to ever constuct it without a HumanBody.. and never may use the same human body twice in the constructor
09.04.18 00:25:24<dmiles> this means that any Head<> in this systme is basically a box arround the body
09.04.18 00:25:57<stoopkid> data Head (X : Species) : Set where
09.04.18 00:26:16<dmiles> so if you want to compare two isntnances  Head1.getBody() = Head2.getBody()
09.04.18 00:26:17<stoopkid>  cons : X -> Head X
09.04.18 00:27:44<dmiles> so the idea i am converying here is if you set up your dep types well enough we wont need to wrap things physically in a smartHead
09.04.18 00:28:51<dmiles> so the idea is you will very likely relaize that no code really cares about the Head and they all just mess with the body
09.04.18 00:30:19<dmiles> for all Integers there exists an intValue
09.04.18 00:30:33<dmiles> or forall intValues there exists an Integer
09.04.18 00:31:39<dmiles> Integer has real cool methods for doing integer arithmetic
09.04.18 00:31:44<dmiles> intValue is a machine type
09.04.18 00:32:25<dmiles> overboxing would be if the compiler passed around Integer to math functions
09.04.18 00:32:32<stoopkid> i see
09.04.18 00:32:42<dmiles> it should be passing only little intValue
09.04.18 00:33:02<stoopkid> sure
09.04.18 00:33:56<stoopkid> well, what it "should" be doing is "whatever the programmer tells it to do"
09.04.18 00:34:12<dmiles> (my last example is what ussualy people think of as "boxing") .. but some years ago peopel say that this was true of all types
09.04.18 00:35:36<dmiles> that types can be split or joined in more interesting ways
09.04.18 00:37:03<stoopkid> types are composable in general, yea
                 <dmiles> i comming at this form a OOP perspective.. but soon people might wonder if your funcitons are also types.. what are the new opertunities
09.04.18 00:37:56<stoopkid> well, the functions have static types, and can do dynamic type-checking
09.04.18 00:39:10<dmiles> dynamic type-checking ?
09.04.18 00:39:27<dmiles> (you mean off their arguments that got passed in?)
09.04.18 00:39:44<stoopkid> during run-time yea
09.04.18 00:40:18<stoopkid> the notable types are existential and universal quantification
09.04.18 00:42:06<stoopkid> so, new opportunities are mainly formal verification of correctness/safety/etc.. and extreme advancements in the capabilities for safe *composable* abstraction
09.04.18 00:42:19<dmiles> and thats it.. no more
09.04.18 00:42:43<stoopkid> there's a lot packed into that
09.04.18 00:42:54<dmiles> i mean basically all some compile time sanity checking and soem possible optimizaions
09.04.18 00:43:28<stoopkid> not just optimizations but potential for optimization is part of it
09.04.18 00:43:54<stoopkid> it's about coherence/composability/interoperability
09.04.18 00:44:01<dmiles> extreme advancements in the capabilities for safe *composable* abstraction <- well it means that you can sanity check avancements that came separately
09.04.18 00:45:48<dmiles> i am saying that "you can now recognized poor compositions"
09.04.18 00:46:13<dmiles> you are saying "at least we recognised compostions are neat"
09.04.18 00:46:59<dmiles> (like the fact "compositions" got added to the vocabulary of software)
09.04.18 00:47:11<stoopkid> you know like, this "tower of babel" of programming languages & data structures & interpreters & compilers & operating systems & machines & random programs & formats & online services & etc.. ?
09.04.18 00:47:56<dmiles> i am saying i completely agree with you.. but i am also wondering outside of verification if anyhting else has come to fruition
09.04.18 00:48:46<stoopkid> well, i don't see enough emphasis in the type theory community on that second point (related to lack of emphasis on the "bad ass record types" thing)
09.04.18 00:50:06<stoopkid> well, at least, whatever work is going on to that effect, literally none of the hype is about it
09.04.18 00:50:30<dmiles> can the world really be that upside down?
09.04.18 00:51:31<stoopkid> my assessment is that it's more "overspecialized"
09.04.18 00:52:46<stoopkid> you can study FP paradigm forever and maybe not even encounter dep. types and thus never even encounter the concepts of having predicate logic available in your type-system, or actually machine-check predicate logic proofs, and everything that follows from those basic capabilities
09.04.18 00:53:45<stoopkid> you can study dep. types forever in hopes of just keeping up as much as you can with the new floors being added to the top of the ivory tower, and never think about things like user-interface
09.04.18 00:55:01<dmiles> i have a really hard time accepting that such a perverse reality can take place.. but it does seem to
09.04.18 00:55:04<stoopkid> and then when you have to get "back to reality", well, the tried and true standards like C++, Java, python, etc.. are awaiting your return
09.04.18 00:56:26<stoopkid> the thing about dep. types is that it provides the capability to essentially topple that tower of babel
09.04.18 00:57:12-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
09.04.18 00:57:19<stoopkid> and topple it into something more secure and better than the original
09.04.18 00:57:26<dmiles> one issue that bugs me much is the "types <-> propostions" it seems like they cant have both
09.04.18 00:57:43<stoopkid> why?
09.04.18 00:58:24<dmiles> well miektek explaing one day that only 6 of the 8 postions of the lambda cube worked in that manner
09.04.18 00:58:38<dmiles> well that there are several blank spots i think
09.04.18 00:59:19<stoopkid> idk what that means really (i know the lambda cube but not what you mean by "work in that manner" or "blank spots")
09.04.18 00:59:45<stoopkid> and we're only focused on one position in the lambda cube anyway :P
09.04.18 01:00:12<dmiles> well all types can be converted to propositions .. but not all propositioons cvan find a type that has the capabilities of the logical poposition
09.04.18 01:00:42<stoopkid> i'd be quicker to argue the opposite
09.04.18 01:01:15<stoopkid> show me a proposition with no corresponding type
09.04.18 01:01:16<dmiles> oh .. ok modal propostions with free mixes of universal and existential variables
09.04.18 01:01:36* dmiles gets one out of Cyc
09.04.18 01:04:39<dmiles> (all ?PERSON1 (knows (BackOfMindFn (BrainOf ?PERSON1)) (implies (isa ?PERSON1 Person) (exists ?PERSON2 (and (isa ?PERSON2 Person) (loves ?PERSON1 ?PERSON2)))))
                 <stoopkid> so why do you say these have no corresponding type (i only know a bit of modal logic)
09.04.18 01:06:08<dmiles> says "Every persons knows in the back of there mind that they must at least love someone"
09.04.18 01:07:12<dmiles> we'll have to hit up mietek to explain what he meant about the lambda cube is only partly covered
09.04.18 01:08:14<dmiles> he found this explained well ina  couple of his favorate papers
09.04.18 01:09:52<stoopkid> well, the only ones that are really of relevance are extensions of the calculus of constructions, i.e., the opposite corner from the simply typed lambda calculus
09.04.18 01:10:48<dmiles> really of relevance are the things that work
09.04.18 01:11:01<dmiles> so that is why i say it is imballanced
09.04.18 01:11:24<stoopkid> not sure what you mean by imbalanced
09.04.18 01:13:38<dmiles> that the array of logics that have propositions can be fit into Types
09.04.18 01:14:17<dmiles> yet i find Types can be fit into many (but not all Propostional logics)
09.04.18 01:14:38<dmiles> yet i find Types can be fit into many (but not all) logical propostions
09.04.18 01:15:02<dmiles> yet i find Types can be fit into many (but not all) logical systems via their  propostions
09.04.18 01:15:53<dmiles> it also seems like Types would expect some specific system of logic in which they can become propostions
09.04.18 01:17:06<dmiles> the focus area seems to be only where it works out as ballanced.. everything else becomes irrealivant
09.04.18 01:19:17<dmiles> balance to me means while converting propostions to types and back that and back and back that the propostions would mean the same things
09.04.18 01:20:04<dmiles> i knows someone explained that they are not "converted"
09.04.18 01:20:32<dmiles> but to me if i want to use both at the saem time rather than only one of the other.. then i need at least a conversion
09.04.18 01:22:12<dmiles> i've have the most experience with languages that let me use both
09.04.18 01:22:24<stoopkid> well, the main point for me outside the context of autonomic is just that we have a consistent & constructive predicate logic available within a programming / knowledge-representation framework, whether or not the grand scheme of "propositions as types" is truly a philosophically/logically universal phenomenon is not a huge concern for me
09.04.18 01:23:13<stoopkid> like, you've got regular data-structures like unions & structs, and then predicate logic to apply constraints, possibly fully abstracted away from any particular concrete union/struct classes
09.04.18 01:23:46<stoopkid> via polymorphism
09.04.18 01:25:25<stoopkid> so, that's how you can defeat the tower of babel: exactly the way the mathematicians have been doing it for over 200 years
09.04.18 01:27:14<dmiles> i speculate people will use Common Logic for programming in 100 years since the language will not matter
09.04.18 01:27:34<dmiles> so perhaps that is the saem thing as the logic 200 years ago
09.04.18 01:27:36<stoopkid> check C++ for example, often times we're working with a null-terminated character array for strings
09.04.18 01:28:49<stoopkid> the functions (if they even are "functions") that operate on this will usually just be "return-type my_func(string x){... do stuff ... }"
09.04.18 01:30:47<stoopkid> a lot of functions will just be bad functions (actually not really functions except in the context of the operating environment to limit their execution) that just start iterating the pointer into the array looking for a null-terminator
09.04.18 01:33:27<stoopkid> but if it's not there, bad behavior when used in arbitrary compositions with other code that would all pass through the C++ type-checker due to lack of fine-grained constraints in the static types; at best you've got the function checking to make sure the bytes are in a certain range (like ASCII "A-Za-z1-9<puncuation>..") and failing if it's out of range, and the operating environment cutting it short if it tries
                 <stoopkid> reading/writing outside of some bounds
09.04.18 01:36:59<stoopkid> usually when we're actually working with null-terminated strings, we're not even gonna be dynamically checking during the operation unless we have specific known constraints on the length of the strings, a lot of the time what we're actually going to be doing is trying to ensure that we know that all the strings that will ever be passed to that function are actually null-terminated
09.04.18 01:40:00<dmiles> yeah verification is pretty important.. i suppose wheterh or not they are null permiated is that fact they all get lost at char*
09.04.18 01:40:29<dmiles> yeah verification is pretty important.. i suppose wheterh or not they are null termiated is that fact they all got lost at char* or char[255]  .. we have no idea
09.04.18 01:41:00<dmiles> that type information is lost on the data and its lost at the function level
09.04.18 01:41:51<dmiles> (in most languages)
09.04.18 01:42:13<stoopkid> yea consistent fine-grained expressibility of constraints along with verification of their satisfaction is critical to pushing composability/interoperability to its full potential
09.04.18 01:42:31<stoopkid> they go hand-in-hand
09.04.18 01:43:05<dmiles> the way and i suppose most dealt with this issue was  {length,null terminated char*}
09.04.18 01:43:20<dmiles> the we most of us dealt with it
09.04.18 01:44:31<dmiles> it jsut makes strings take up a little more space
09.04.18 01:44:44<dmiles> more speace than the two common representations
09.04.18 01:45:46<stoopkid> yea if you have null-terminated strings, you don't need the length argument but you have to ensure you never pass anything but null-terminated strings, and you can pass the length argument, but then you take up more space, etc..
09.04.18 01:46:33<stoopkid> if you pass the length-argument, you don't need your strings to be null-terminated, which saves space in storing strings, but then it takes up more space passing arguments & saving length values at run-time potentially**
09.04.18 01:47:58<stoopkid> depends what tradeoffs you need to make maybe, the point is we want to be able to write our code however we *think* about the concepts, but then be able to compile that code into *whatever* it needs to be to run "wherever"
09.04.18 01:48:48<dmiles> oh yeah the 3rd represention in SQL, a varchar(128) the null termination has to happen only if iuts less than 128 chars
09.04.18 01:50:00<dmiles> in Pascal i used to deal with this all the time
09.04.18 01:50:18<dmiles> (when assembly code called pascal or visa versa)
09.04.18 01:50:50<stoopkid> the formal verifications aren't necessarily just static things that sit there like "yay we verified it, it's secure, and maybe we can compose some stuff", many things are & will be useful transformations between different data-structures, proofs of functional equivalence between difference algorithms (i.e. two different algorithms computing the same values), etc...
09.04.18 01:51:01<dmiles> the problem i have is many that i've never seen a request for a propostional (rule based) expert system that any of it's work could be done at compile time .. this even applies to expert systems based compiler
09.04.18 01:51:19<dmiles> oops
09.04.18 01:51:46<dmiles> the problem i have is that i've not had a request for a propostional (rule based) expert system that any of it's work could be done at compile time
09.04.18 01:54:17<stoopkid> you're talking automated-theorem-prover-style stuff right?
09.04.18 01:54:59<dmiles> well even in my wam-cl (Lisp) compiler .. there is very little work i can do at compile time
09.04.18 01:55:09<dmiles> (at my own compile time)
09.04.18 01:55:29<dmiles> i guess i am speaking of a class of programs that react to language
09.04.18 01:56:12<dmiles> wether that language be a logical rules or Lisp code
09.04.18 01:56:21<dmiles> or even an thml document
09.04.18 01:56:26<dmiles> html*
09.04.18 01:57:45<dmiles> or even reacting to events that took place like when reasing a transaction log
09.04.18 01:58:10<dmiles> when reading a history log trying to decide which chanin belongs where
09.04.18 01:58:36<stoopkid> so like AI stuff
09.04.18 01:58:57<stoopkid> NLP/AI/automated-reasoning/whatever-along-those-lines
09.04.18 01:59:10<dmiles> well even operating system stuff like disk drivers
09.04.18 01:59:45<dmiles> which basically hoave very little wiggle room
09.04.18 02:00:46<dmiles> well bad example.. actualy a better example is a linux system
09.04.18 02:01:35<dmiles> there are many situations that people would rather spec out proactices
09.04.18 02:02:00<dmiles> i guess my example was still based on non-deterministic domains
09.04.18 02:02:03<stoopkid> how about, an aircraft navigation system
09.04.18 02:02:30<dmiles> right same thing.. it has to work nondeterministcally in order to be safe
09.04.18 02:02:50<dmiles> you cant precompute the logic
09.04.18 02:03:07<dmiles> since there will always be a problem that you havent simulated
09.04.18 02:03:58<dmiles> so you have to work based on the varations of language that the sensors are speaking
09.04.18 02:05:15<dmiles> as in you have to be able to detect when the sensor is lying
09.04.18 02:05:37<dmiles> (well just putting out garbage)
09.04.18 02:07:21<stoopkid> well, let's just assume it's a dumb thing, like an altimeter that knows the no-fly altitudes for all the different airspaces and alerts if you go above or below, or alerts if you stray more than some deviation away from the altitude you want to fly at, and doesn't have to be in charge of control etc..
09.04.18 02:09:09<stoopkid> even there, if i understand what you're saying, a lot of "programmer" work is & likely always will be centered around making things that are checking things at run-time, possibly non-deterministically, and that types are basically just a compile-time packaging for this run-time "meat"?
09.04.18 02:12:12<dmiles> you got it.. types have very little to do with any problems i've ever worked on
09.04.18 02:13:43<dmiles> though types can be about precomputing some runtime descisions
09.04.18 02:14:24<dmiles> and when people do that there is a celebrated victory
09.04.18 02:15:05<dmiles> FlyAtRestrictAltitude -> BeepAtUser
09.04.18 02:15:13<stoopkid> right, cause types in the programmer's toolkit is less about real-world applications themselves and more about "glue logic" that holds together bits of data & algorithm snippets that power those real-world applications, with some degree of coherence (the more fine-grained & generic typing you use, the more coherence & ease of interoperability you get)
09.04.18 02:18:03<stoopkid> you've got some problem X, you need to solve it, so you write some algorithm, that's the standard programming process, the end, nothing more to it
09.04.18 02:18:31<stoopkid> types come into play the *next* time you want to use that algorithm
09.04.18 02:18:53<stoopkid> especially if you want to use it "anywhere except exactly where/how you used it originally"
09.04.18 02:19:50<dmiles> 100 years from now this is how we write the the program to your alarm  (or how cyc did i 30 years ago):  forall Navigation thereexists Altitude; thereExistsMany 2DLatLongs; forall 2DLatLongs exists  AltitudeRanges
09.04.18 02:20:12<stoopkid> sure maybe
09.04.18 02:20:29<stoopkid> maybe even 10 years from now who knows
09.04.18 02:20:40<dmiles> i hope i can make it happen that soon!
09.04.18 02:20:43<stoopkid> or 30 years ago i guess lol
09.04.18 02:21:32<stoopkid> so, what you describe right there i put in a slightly different category
09.04.18 02:22:05<stoopkid> that's like, "common language after defeating the tower of babel"
09.04.18 02:22:44<dmiles> the program that LogicMOO/CYC writes doesnt need verified as it cant produce code that is not a proof
09.04.18 02:23:13<stoopkid> but, defeating the tower of babel is separate, rather than having a specific way to write things it's about describing the functional/structural interrelations between all the existing things, so that all of it can work interoperably, *in place*; seamless transition, no fixed "standard" except for constructive predicate logic itself
09.04.18 02:23:42<dmiles> and the program tha tit constructs to run cant do anything at any point unless it follows the datas version of what the rule under proof looks like
09.04.18 02:24:26<stoopkid> wrt  "cant produce code that is not a proof" yea correct-by-construction is a big part of this
09.04.18 02:25:24<stoopkid> plays into composability a bit, basically once you verify the pieces, then the compositions are already verified (as long as your constraints only depend on it being a composition of those kinds of pieces and not something more specific)
09.04.18 02:25:45<dmiles> well still only as correct as what the knowedge engineers said was anbd wasnt
09.04.18 02:26:14<dmiles> (i mean the constraint writers)
                 <stoopkid> depends, if they're talking about math/code, this can be self-authenticating
09.04.18 02:26:36<stoopkid> talking about real-world concepts otoh, that's a fun subject lol
09.04.18 02:27:29<dmiles> Correct is in the situation would be allowing for an airline to call you on the radio and inform you of restriction updates
09.04.18 02:28:16<dmiles> that is what CYC/Logicmoo is for
09.04.18 02:28:33<dmiles> allowing small little integrations
09.04.18 02:28:56<dmiles> without comprimising any previous rules
09.04.18 02:29:45<stoopkid> well it's a similar concept really, you've got predicate logic of some form available to specify compositions/integrations with very fine-grained detail
09.04.18 02:30:48<dmiles> yes.. the most amzing things about predicate logic is the subsumptive levels of fine-grained details that can be very exact or very gneralized
09.04.18 02:31:16<stoopkid> where the logic-programming paradigm maybe starts going wrong imo is trying to make too many things into rules of the logic
09.04.18 02:32:03<dmiles> hehe what would be funny is if logic-programmers started gettign in trouble because they also were producing the machine code like the FL programmers
09.04.18 02:32:08<dmiles> FL/FP
09.04.18 02:32:48<stoopkid> not sure exactly how it works in CYC/Logicmoo but i mean like prolog with no constraints or framework/scaffolding for how the rules should behave, great example {?x a man} => {?x a mortal}
09.04.18 02:33:21<stoopkid> as soon as you try to make any kind of real-world concept into an axiom/rule like this you start getting into trouble as you extend your knowledge-base
09.04.18 02:33:31<stoopkid> hence the need for all your work on defeasibility/extensibility and etc..
09.04.18 02:34:27<dmiles> well what i am after is very low level even borring things being written semantically
09.04.18 02:34:47<dmiles> even how to initlaize an array
09.04.18 02:35:15<dmiles> or how to decide if there is enough resources to load a program
09.04.18 02:35:37<dmiles> to writ ethis logically
09.04.18 02:36:20<dmiles> or how to decide if a diskcopy to a remote server was complete enough
09.04.18 02:36:55<dmiles> (for instance logically it might be required to try to copy it back locally and compare)
09.04.18 02:37:01<dmiles> (worse case that is)
09.04.18 02:37:59<dmiles> or might be ensuring that before a computer reboots that no active users are going to have issues
09.04.18 02:38:53<dmiles> (that is about as AI we had gotten .. the OS I was building .. made sure that every user got a notice before some planned actuion was taken)
09.04.18 02:40:04<dmiles> example:  https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/smart2520spaces.doc
09.04.18 02:41:00<stoopkid> even for that kind of stuff, in general i've seemed to have most success when i avoid as much as possible trying to make anything into axioms/rules aside from the basic predicate logic rules and rules for the formation of various data-types (which follow certain patterns which ensure their coherence)
09.04.18 02:42:19<stoopkid> like if i'm adding a rule/axiom outside these patterns, it's like "a major modification", adding rules/axioms outside these patterns isn't like the standard practice it's like the equivalent of getting a new programming language, like, adding univalence axiom to MLTT
09.04.18 02:43:02<dmiles> I see, now i realized 9 out of 10 times I will take existing logical KBs that does somehting simular to what i need and clone iot and rename it to my task
09.04.18 02:43:05<stoopkid> you avoid all the issues with coherence and things like the need for built-in defeasibility/extensibility/paraconsistency etc.. by deferring all that into "bad ass record types" within the consistent framework
09.04.18 02:45:22<stoopkid> so, all your axioms/rules etc.. they make a consistent foundation for describing & using nearly-arbitrary "structure" (and this is "nearly-arbitrary" by the standards & precision of mathematics, so..), all your knowledge is deferred into "bad ass record types", placed on top of scaffolding built & proven-correct within the consistent foundations
09.04.18 02:45:25<dmiles> like the InformAboutReboot task is the same as InformAbout(Reboot,AllThePros,AllTheConsLikeSaveWorkPlease)
09.04.18 02:47:44<stoopkid> so, when you make an adjustment to the logic at the level of axioms/rules, you're ideally not just trying to add some piece of data or some knowledge-snippet, it's rather like adding a programming-language feature
09.04.18 02:48:11<dmiles> yes.. that is what is happening
                 <dmiles> the language evolves constantly
09.04.18 02:48:52<dmiles> not alwasy ina good way.. but in a reversable way when not good
09.04.18 02:49:10<stoopkid> right ideally we have a language that evolves never because it never needs to
09.04.18 02:49:21<stoopkid> or rarely and only for very good reasons
09.04.18 02:50:10<dmiles> well the languages that some of the Cyc/Logicmoo system do not actualyl changes
09.04.18 02:50:24<dmiles> some of the system uses do not change
09.04.18 02:51:19<dmiles> that way it stays easy to target and retraget the compilers descripotuion
09.04.18 02:52:22<dmiles> but that systme is easy enough to make inferneces about to.. so one can show the system how to detect flawas
09.04.18 02:53:12<stoopkid> right, you need some kind of buffer between "everything always changing" and "needs to fit a rigid mold for some standard"
09.04.18 02:55:55<stoopkid> so, the thing about dep. type theory / predicate logic, it's not like "some programming framework", it's not like C++/ python / whatever, it's more like... math
09.04.18 02:56:30<stoopkid> it exists independently of our machines, we're not relying on some standard, it doesn't need maintenance, ever
09.04.18 02:58:52<stoopkid> if it ever gets maintenance, that means some extension to the foundations of mathematics, i.e. a major thing, but, independent of any standard, think self-authentication here; axioms are supposed to be: an arbitrary observer looks at this axiom and thinks it to be self-evidently true
09.04.18 02:59:43<stoopkid> this is pretty much nothing "real-world" beyond "i think therefore i am"
09.04.18 02:59:44<dmiles> also though this is a newly funded thing that the funding will shift in about 3 years
09.04.18 03:00:06<dmiles> shift away from formal varification
09.04.18 03:00:56<dmiles> i think this fad started arround 7 years ago.
09.04.18 03:02:19<stoopkid> everything real-world, we don't have access to it directly, we model it, and test models against observation **and logic**
09.04.18 03:02:38<dmiles> it'll probly go where it wnet in 1993 when formal verifiers fell out of fad before
09.04.18 03:03:54<stoopkid> we model it with abstract data structures that we can mentally manipulate directly, and which happen to be representable on machines (i guess thanks to information theory), and we apply predicate logic
09.04.18 03:04:38<dmiles> it'll be nice when we start to program that way
09.04.18 03:04:58<dmiles> right now that is what FP is selling with types they think
                 <stoopkid> now, i can get more into how this relates to AI stuff, but, that gets away from the main thing in this discussion here which is its purpose in the traditional sw-dev toolkit
09.04.18 03:06:14<dmiles> FP selling "model it with abstract data structures that we can mentally manipulate directly, and which happen to be representable on machines " tellling peopel to encode this logic in types since they are like propostions
09.04.18 03:07:07<dmiles> LP selling "model your logic in rules"
09.04.18 03:07:14<stoopkid> type theory community maybe sells that, not FP community per se, but, only a very few in either camp
09.04.18 03:07:28<dmiles> LP selling "model your logic with logic!"
09.04.18 03:08:17<stoopkid> well, model your logic with logic yes, but, it's about layering
09.04.18 03:10:53<stoopkid> that was part of the purpose of my TPTP work, to demonstrate how straight-forwardly you could model the whole situation in the problem (up to the amount of detail provided), and then prove things about the model
09.04.18 03:11:08<stoopkid> without changing the rules of the logic
09.04.18 03:12:26<stoopkid> so, if you're working with some logic rules, and i'm working with some different logic rules, we're incompatible right
09.04.18 03:12:35<stoopkid> tower of babel all over again
09.04.18 03:13:26<dmiles> yeah there is a whole set of practices to prevent that.. but everyone has to sign up for the practices
09.04.18 03:15:17<dmiles> every once in a while the commitees make progress in formalizing the practives.. but not enough or fast enough
09.04.18 03:16:16<stoopkid> well, one practice to prevent that is to just agree on standard predicate logic or, if necessary, constructive predicate logic, as a shared foundation, as the addition of predicate logic into our software development environment is what allows for the specification of the fine-grained constraints that allow for arbitrarily precise description of structure/behavior, and is already beyond-de-facto standard system for the
                 <stoopkid> entire global mathematical community
09.04.18 03:16:26<dmiles> like for instance we need people to declare every constant/uri they create into at least 4 upper level genral ontologies.. that look at things very differntly
09.04.18 03:17:56<dmiles> also evey logic such as S5 and S4 need round tripping trasnformers
                 <stoopkid> right, that's the problem, we need something agreeable enough that everybody would be like "yea ok i could hypothetically build my stuff over that" and expressive enough (in terms of logic/math) that it can actually describe the logical relations between all the different stuff
09.04.18 03:19:41<stoopkid> now, there's a solution here, you don't need everybody to rewrite all their C++ code in terms of dep type theory / predicate logic, you need to give a description of C++ itself within dep type theory / predicate logic
09.04.18 03:19:53<dmiles> Yeah that is why expressiveness (even more expressive than NL!) is important
09.04.18 03:20:12<dmiles> we should be able to describe for insance things that can never happen on a computer
09.04.18 03:20:31<dmiles> (well things that we dont want to happen)
09.04.18 03:20:55<stoopkid> where the useful "advanced math" would come in is in proving things about translations between C++, proving things about program complexity, verification & glue logic stuff
09.04.18 03:20:56<dmiles> right decribe everytihng in predicate logic
                 <stoopkid> sure
                 <stoopkid> exactly
09.04.18 03:22:17<dmiles> well for sure everyone would need to write a bunch of N3/RuleML/LIF/CYCL to explaion why and how their function worked
09.04.18 03:22:30<dmiles> functions worked
09.04.18 03:22:52<dmiles> rather than rewritting it
09.04.18 03:23:24<dmiles> the computer can check their description and see if it would work
09.04.18 03:24:11<stoopkid> that's the idea, more or less, but, something more like N3/RuleML/LIF/CYCL translated into constructive predicate logic
09.04.18 03:24:48<stoopkid> standard* constructive predicate logic
09.04.18 03:26:01<stoopkid> we need a universal homogenizer, we've had it for thousands of years, we've formalized its mechanisms for abstraction since 200+ years ago, and we've had it usable on machines since a couple decades now
09.04.18 03:28:15<dmiles> WEll if all those things convert to prolog code.. at least we can convert prolog code to standard* constructive predicate logic
09.04.18 03:28:56<dmiles> at least we can convert prolog code to standard* constructive predicate logic ?
09.04.18 03:30:41<stoopkid> i'd have to examine prolog in more detail to tell you exactly what / where / how stuff can be converted
09.04.18 03:32:34<stoopkid> so far you haven't shown me any prolog code that i wouldn't have just put inside one of these fancy record types instead
09.04.18 03:35:07<stoopkid> multiple reasons for doing that; more flexibility when i want to extend this, won't be worried about adding contradicting rules, that's the idea, prolog is down at the level of "this is the way things are", these fancy record types are up at the level of "what about an idea like this, can anybody show that one exists, can you make it?"
09.04.18 03:35:48<stoopkid> when you have a contradiction in the former case, you have an actual contradiction, and all the consequences of contradiction, which is either explosion or paraconsistency, necessarily
09.04.18 03:37:38<stoopkid> when you have a contradiction in the latter case you're just like "oh well, guess the structure i described was actually impossible", but, you haven't modified your language/logic or interoperability with other people, there wasn't need to adopt practices for maintaining interoperability under evolution of the language/logic, because there was no evolution and no need for it
09.04.18 03:38:58<dmiles> I generally use Carl Hewitt's Logical System (yes finally a guy who publishes!)
09.04.18 03:39:52<stoopkid> so instead of being these things that "break systems", your contradictions are sandboxed away as unsatisfiable constraints instead, and the contradiction can be universally understood cause everything's homogenized by the description in terms of predicate logic
09.04.18 03:40:19<dmiles> Yes
09.04.18 03:40:33<stoopkid> so, let's look at another situation, you go and make your own dep type theory formulation of the dreadbury mansion problem
09.04.18 03:40:48<stoopkid> and you use slightly different interpretation than me, and very different encoding
09.04.18 03:41:19<dmiles> yet our actual logic would be the same effectively?
09.04.18 03:41:58<dmiles> (actualy it would be.. we just picked a differnt way to encode it)
09.04.18 03:42:07<dmiles> (go on)
09.04.18 03:42:13<stoopkid> well, that's the question, not necessarily, we have to find out whether we're using the same logic in describing the real-world phenomenon before we can agree on conclusions being stated about that phenomenon
09.04.18 03:42:45<dmiles> right
09.04.18 03:43:07<dmiles> our specification would be intially the same
09.04.18 03:44:49<stoopkid> so, deferring everything from rules into records, you have your interpretation as a record, i have my interpretation as a record, the things we have proven about our interpretations are true by way of the truth of constructive predicate logic, and one of the things we can prove is relations between our interpretations
09.04.18 03:45:28<stoopkid> we match up "this in interpretation A corresponds to that in interpretation B"
09.04.18 03:46:46<stoopkid> we make various assertions about these associations, and then prove whether or not those assertions lead to contradiction
09.04.18 03:47:37<stoopkid> when they don't, the relations we demonstrate provide the means to translate between the two interpretations
09.04.18 03:49:17<stoopkid> so, when we have the same interpretation, but different encoding, we get a means to translate between the two interpretations
09.04.18 03:49:58<stoopkid> between the two encodings*
09.04.18 03:50:59<dmiles> well at least each encoding is sentence by sentence
09.04.18 03:51:15<dmiles> (if it was us two)
09.04.18 03:55:08<stoopkid> that's the ideal, though, i work on the sentence-by-sentence stuff mainly for working towards some CNL / NLP related stuff
09.04.18 03:56:43<stoopkid> the point with this tower of babel stuff is more to make it so that any representation would do just fine, and be fully interoperable (related to compilation, takes us back to the beginning like when to use int64 vs. Integer etc..)
09.04.18 04:00:43<stoopkid> so, modeling of a real-world object, you try to get down to the right ontology, the right basis for your knowledge of this object, there is none (well, there is some but that's another discussion)
09.04.18 04:01:24<stoopkid> it's just like trapped and doomed to be an abstract object with only sort of vague interpretation as being that real-world concept, when *you* interpret it that way
09.04.18 04:02:08<stoopkid> the way abstract models taken on association to real-world concepts is through the network of relations to all other models and their respective associations to real-world concepts
09.04.18 04:02:22<dmiles> yes many objects are  doomed to be an abstract object
09.04.18 04:02:24<stoopkid> take** on
09.04.18 04:03:12<stoopkid> so, the abstract stuff, we can hold it "logically accountable", like, we can imagine exactly what a vertex-edge graph is and talk about its logical properties: how many nodes does it have, does it have any cycles, etc..
09.04.18 04:03:49<stoopkid> we can only do this in a universally agreed upon way if everybody's sharing the same consistent logic
09.04.18 04:04:36<stoopkid> the real-world stuff otoh, we have some work to do before we can even actually make the association
09.04.18 04:05:42<dmiles> well i'd say if we are sharing the saem knowledge representaiton
09.04.18 04:06:13<stoopkid> we make labels & models, but, on their own these are basically just graphs (like vertex-edge graphs, modeling your possible "worlds"/structures basically) and constraint sets, encodings only have a sort of fleeting attachment to the things they encode
09.04.18 04:06:34<stoopkid> right, the same knowledge representation
09.04.18 04:08:35<stoopkid> so, abstract encodings get their "life" out of their interrelations to all the other abstract encodings, and their respective relations back into the real world, like, via electric signals & such
09.04.18 04:08:37<dmiles> btw here is teh way i'd express Agatha problem.. http://www.lsv.fr/~goubault/H1.dist/H1.1/Doc/butler-puzzle.p
09.04.18 04:08:53<stoopkid> we need a shared knowledge representation to describe those interrelations in the first place
09.04.18 04:09:30<dmiles> oops i lied.. here is what Cyc/Logicmooo uses:  http://www.rpi.edu/locker/41/001041/OTTER/dread.in
09.04.18 04:10:38<stoopkid> right that's what i'd call the wrong/prolog way to do it
09.04.18 04:13:19<stoopkid> basically it needs package-management, the entire rule-set here should be packaged into a hypothetical, like, "can you demonstrate me a world/structure matching these criteria, if so, what's the answer to this question in this collection of worlds that match the criteria"
09.04.18 04:13:49<stoopkid> that's more or less the function of putting all the rules into a record type
09.04.18 04:14:32<stoopkid> if you look at my agda code, you can see that what i have in the portion that actually specifies the record type is essentially exactly what you've got in that prolog snippet
09.04.18 04:14:37<dmiles> some might be hard to do  such as this one:  http://www.rpi.edu/locker/41/001041/OTTER/stinger4.in
09.04.18 04:15:43<stoopkid> doubtful that it would be conceptually more difficult
09.04.18 04:15:57<stoopkid> or conceptually any different really
                 <dmiles> nope just more time consuming
09.04.18 04:16:08<stoopkid> yes, that i can imagine
09.04.18 04:16:16<dmiles> hard as in finding a good reason to convert :P
09.04.18 04:17:36<dmiles> of course gettign the problems covert to logic like that didnt happen for free either
09.04.18 04:17:50<dmiles> converted*
09.04.18 04:19:36<stoopkid> sure, that's why i'm pushing towards simpler CNL/GUI for all this and to eventually get away from the hackerish programming paradigm to make it more accessible (composability/interoperability is relevant in this again.. it all ties together heh)
09.04.18 04:20:40<stoopkid> anyway, i gotta go work on some stuff soon
09.04.18 04:21:35* dmiles is building a GUI this week to get the CNL -> CNF -> PFC workflow interceptable from users.. I take the textual descriptions of each room in hte MUD can convert them to CNF
09.04.18 04:22:03<dmiles> basically like Inform7
09.04.18 04:24:55<dmiles> building an IDE / UI is the annoying part
09.04.18 04:25:24<dmiles> yet the most important
09.04.18 04:27:26<dmiles> this stuff.. https://a.fsdn.com/con/app/proj/gnome-inform7/screenshots/map-story.png/1
09.04.18 06:19:15<daemoz> dmiles: that's cool, I played around on a MUD about a year ago but couldn't figure a lot of things out.
09.04.18 06:19:41<daemoz> Funny enough I'm about to be working on an IDE-style interface to a program.
09.04.18 06:23:15<daemoz> Reading through the conversation above helped click some things into place for me that I was having trouble finding the questions to ask. The thing as a whole is a bit less blurry. Worlds(is this term correct here) being able to be compared as structurally equivelant and how that could play into a hardware-agnostic lower-layer is really cool and it just seems like it will just work??
09.04.18 06:23:58<daemoz> Feeling that with the base logic being expressive enough to describe all of these structures one major thing is writing out sections of knowledge in the logic.
09.04.18 06:24:33<daemoz> Hopefully a std lib or something would cut down that cost by providing highly composable tools.
09.04.18 06:25:23<daemoz> I can already see how in many cases it would be very much like describing a structure in natural language, albeit more terse.
09.04.18 06:25:24<daemoz> but then sometimes maybe it's less terse
                 <daemoz> given that generality can be expressed.
09.04.18 06:26:20<daemoz> The World's Biggest Typechecker
09.04.18 06:28:54<daemoz> I am a bit confused about how triples play into it all (it was a year or so ago that I first started coming here, and the talk was very centered around rdf at the time) how does that fit back into this again?
09.04.18 06:47:51<koo5[m]> the million dollar question
09.04.18 08:49:28*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
09.04.18 08:59:44*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
09.04.18 09:20:23-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
09.04.18 09:20:37*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.04.18 09:27:26<koo5[m]> dmiles: what's PCF?
09.04.18 10:32:49*** Quit: reffael (sid237291@gateway/web/irccloud.com/x-josyyprwalfxsimq) left #AutoNomic: Quit: Connection closed for inactivity
09.04.18 11:25:53<HMCa> daemoz/koo: triples is just our chosen representation... our talk could just as well be very centered around lisp s-expressions or fexprs or nuprl style ABTs or etc etc etc...
09.04.18 11:32:53<HMCa> (triples (really rdf/n3) chosen for reasons particular to the goal, aims, and ideals specific to our project... simplicity of retaining easily assertable mathematical properties; consumption of existing (esp "l.o.d.") data; alignments with natlang, graph/complexity theory; strong consideration for unicode/i18n; homoiconicity with sacrificing structural richness; well(ish) defined rewrite semantics, etc etc
09.04.18 11:32:59<HMCa>  )
09.04.18 11:33:14<HMCa> *without sacrificing
09.04.18 13:59:07<stoopkid> "l.o.d" ?
09.04.18 13:59:52<koo5[m]> linked open data
09.04.18 13:59:55<stoopkid> ah
09.04.18 14:05:49<stoopkid> hrm, so it seems the main reason we need any fixed syntax in the first place is because we can't build self-interpreters
09.04.18 14:07:03<stoopkid> but, idk to what extent this is a real issue because we don't solve anything like that in traditional software dev anyway
09.04.18 14:07:35<stoopkid> so, i've got my syntax A, you've got your syntax B, these are syntaxes *of* the type theory itself
09.04.18 14:08:25<stoopkid> i've got my interpreter A.interpreter, and you've got your interpreter B.interpreter
09.04.18 14:10:04<stoopkid> now we want to share some type theory stuff, i've got some knowledge, X, in format A that i can interpret with A.interpreter, and you want to use that knowledge in your KB
09.04.18 14:11:21<stoopkid> so, either i need to translate X to format B, and then send that to you, or i need to send X to you, and you need to translate it to format B
09.04.18 14:12:10<stoopkid> somebody's gotta have this translate function available, now, who delivers that translation function, and how?
09.04.18 14:14:47<stoopkid> ideally it would be functions in type theory framework, so that they can be passed around & composed with all the safeguards that type theory is supposed to offer, but, it seems pretty much the main focus of formal logic in the 20th century has been proving that there are strict limitations on what could be accomplished in this regard
09.04.18 14:16:36<stoopkid> tarski's undefinability is relevant here, it seems to indicate that the approach of "make a self-interpreter that translates strings in format A to a semantic description of the logic encoded by those strings, and then based on these semantics translate to format B"
09.04.18 14:16:50<stoopkid> won't work
09.04.18 14:17:57<stoopkid> this works for domain-specific languages/knowledge that you create within type theory, the problems start popping up when you reflect type theory back on itself and have to interpret the semantics of type theory from within itself
09.04.18 14:19:03<stoopkid> paradoxes/undecidabilities/undefinabilities/incompletenesses due to the limitations surrounding consistency & self-reference
09.04.18 14:21:00<stoopkid> otoh, if you could describe your translations purely mechanically, just in terms of string-manipulations, i.e. "{" and "}" become "<" and ">", you can do translations like this and leave it up to the meta-theory to say that it's a valid translation as long as the proper string-manipulations are encoded
09.04.18 14:23:02<stoopkid> and you can also describe a UTM and self-interpreter for the type-theory as a program for that UTM, but, you can't prove that what you have is actually a self-interpreter
09.04.18 14:25:04<stoopkid> whether or not you could potentially demonstrate it to be a total function and run it seems to be an open question with seemingly some success in the direction of making that happen (cf. brown-palsberg stuff)
09.04.18 14:28:37<stoopkid> so, it seems that any logic that attempts self-reference is gonna run into issues if it doesn't properly account for meta-levels (hence universe-hierarchies)
09.04.18 14:37:52<stoopkid> so, you want my data from format A into your format B so that you can interpret it with your B.interpreter, so, you write some translator function
09.04.18 14:38:12<stoopkid> you're the one writing it, and you want it to actually work, so, it works
09.04.18 14:39:09<stoopkid> like i was discussing with dmiles though, the real problem is with the *next* time you want to use it: how does somebody else (possibly yourself 3 months from now) know that this is a valid translator?
09.04.18 14:41:17<stoopkid> usually the solution to this is "good documentation", and in that context, the type system together with all the types you've specified is basically mechanical documentation
09.04.18 14:42:29<stoopkid> mechanically self-authenticating documentation<->implementation pair
09.04.18 14:44:23<stoopkid> fantastic for things like domain-specific langs/knowledge built within the type theory: fails when it comes to self-reference, so, we get this sort of leftover, "extralogical" stuff surrounding self-reference, updates to the logic, standard interpretations of a fixed syntax, etc..
09.04.18 14:46:24<stoopkid> can't handle self-interpretation, self-translation, self-compilation, self-representation, self-amendment in a self-authenticating fashion
09.04.18 14:49:08<stoopkid> suber's work is relevant here https://dash.harvard.edu/bitstream/handle/1/23674879/Suber%20-%20Paradox%20of%20Self-Amendment%202.pdf?sequence=1
09.04.18 14:50:54<stoopkid> lots of work related to the construction/interpretation of logic in the presence of self-reference & self-amendment and the apparent deficiencies in our standard frameworks of logic for dealing with this stuff
09.04.18 14:53:05<stoopkid> in some sections  we've basically taken pieces of autonomic design directly from the text (cf. relation between block-chain and immutable history stuff in 'Paradox of Self-Amendment')
09.04.18 14:57:17<stoopkid> so, all of this basically paints a picture that the "self" is pretty much something like a giant hole in the standard frameworks of logic
09.04.18 14:57:38<stoopkid> like a missing piece, that's problematic when you try to definitively fill it in
09.04.18 15:02:50<stoopkid> pollack consistency & flagg-resolution stuff seem to be relevant here: http://www.cs.ru.nl/~freek/pubs/rap.pdf ; i won't link kaufmann's flagg resolution paper because it's pretty terrible by academic standards (like in some sections it practically reads like a religious text) even though it carries an interesting idea
09.04.18 15:04:35<stoopkid> in the flagg resolution basically instead of having single, static truth values, the truth-values of statements in the logic correspond to infinite streams of regular truth-values
09.04.18 15:05:31<stoopkid> so statement X would be an infinite stream of true/false, statement Y would be an infinite stream of true/false, and X ^ Y would be essentially a bit-wise & across these streams
09.04.18 15:07:46<stoopkid> self-reference basically corresponds to pointers with relative-addressing from a stream back into itself, the most obvious set-up being "truth-value n is computed from truth-value n-1"
09.04.18 15:09:07<stoopkid> this is related to curry-howard interpretation of self-reference as recursion
09.04.18 15:09:46<stoopkid> liar paradox: "this sentence is false"; A = "A is false"; A := not(A)
09.04.18 15:11:26<stoopkid> it's an inverter with its output fed back into its input on a feedback loop, just flip-flopping between 0 and 1 in an infinite stream ...01010101..
09.04.18 15:12:12<stoopkid> so, whereas before it was a paradox, now it's just a statement whose truth-value changes over some notion of time, laid out as this infinite stream
09.04.18 15:14:42<stoopkid> and it's just a (general) recursive function (in the sense of general recursive functions), and, we know these exist, like, if inconsistency means "can't exist / can't have models", then these generally recursive functions that normally lead to "inconsistency" in the curry-howard interpretation certainly aren't inconsistent in the sense of "not being able to exist", in fact we see examples of them all over the place
09.04.18 15:15:37<stoopkid> universal turing-machines power the world; inverters on feedback loops drive their clock-cycling, and self-amendment is one of the primary functions of law
09.04.18 15:21:10<stoopkid> so, if self-reference is what points from one location in the stream to the previous location, then the stream from kauffman's flagg-resolution thing is a meta-level hierarchy
09.04.18 15:24:21<stoopkid> the expansion of a recursive function is also a meta-level hierarchy
09.04.18 15:24:55<stoopkid> the universe-hierarchy is also a meta-level hierarchy, for dealing with polymorphism
09.04.18 15:26:37<stoopkid> the notion of meta-level hierarchy also comes up in the descriptive complexity hierarchy
09.04.18 15:28:17*** Join: octo_ (octo@c32-57.icpnet.pl, (unauthenticated): octo)
09.04.18 15:28:37<stoopkid> the easiest method of separation of complexity classes being simulation of one system by an at least as complex system, and lack of ability of the former system to simulate the latter system
09.04.18 15:29:28<stoopkid> this can be reframed as "can system A be 'meta' to system B"
09.04.18 15:31:04<stoopkid> hi octo_ , if you have any questions feel free to ask
09.04.18 15:33:20<octo_> thanks, my irc client logged me automatically here but I need go now to work on night shift. :c
                 <stoopkid> so, what all this indicates to me is that these various meta-level hierarchies are just different views on the same thing, just one generic meta-level hierarchy, based around self-reference
09.04.18 15:34:15<stoopkid> np, we'll be around
09.04.18 15:35:14*** Quit: octo_ (octo@c32-57.icpnet.pl) left #AutoNomic: Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805]
09.04.18 15:39:44<stoopkid> based on the ways the paradoxes and such arise indirectly (godel's incompleteness, undecidability of the halting problem, russell's paradox or more notably in this regard the burali-forti paradox & especially girard's paradox), the framework for describing self-reference needs to include this indirect self-reference as part of it
09.04.18 15:47:43<stoopkid> it all seems to be relatively homogenized by circuit logic, self-reference is just feedback loops in the circuit elements; indirect self-reference is just long & winding feedback loops
09.04.18 15:48:08<stoopkid> kauffman stream is just the time-steps in the execution of this circuit
09.04.18 15:52:06<stoopkid> so, imagine taking every state in the execution stream of a circuit, and collapsing it to one state, it doesn't work, because then you have a superposition of 0s and 1s, just like in a paradox, and this is essentially exactly what's happening in a paradox in the standard frameworks of logic that collapse every state in the kauffman stream to a single definitive truth-value for every statement
09.04.18 15:54:47<stoopkid> so, in any discussion of computational interpretation of self-reference, we also have to take into account how it can be manifested in reality, but, we have that here already: feedback loops over time / infinite "execution stream"
09.04.18 15:56:25<stoopkid> this gets back to that thing about how not all self-reference is bad even from the standpoint of logic, how do we differentiate what's the good self-reference and what's the bad self-reference, from the perspective of standard formal logic?
09.04.18 15:57:11<stoopkid> autological vs. heterological
09.04.18 15:57:44<stoopkid> something is autological if it describes itself
09.04.18 15:58:05<stoopkid> assume autological is autological, then, it does indeed describe itself and so it actually is autological
09.04.18 15:58:30<stoopkid> assume autological is not autological, then, it doesn't describe itself and so it's actually not autological
09.04.18 15:59:35<stoopkid> something is heterological if it doesn't describe itself
09.04.18 16:00:11<stoopkid> assume heterological is heterological, then, since it describes itself that means it's actually autological, not heterological, contradiction
09.04.18 16:00:48<stoopkid> assume heterological is not heterological, then, since it doesn't describe itself that means it actually is heterological, contradiction
09.04.18 16:02:23<stoopkid> so, self-reference works out in the case of autological, but not in the case of heterological, we get contradictions no matter how we try to assign a truth-value
09.04.18 16:04:53<stoopkid> in the context of feedback loops though, we can see that in the case of autological, we're getting stable feedback loops, and in the case of heterological we're getting unstable feedback loops
09.04.18 16:06:16<stoopkid> stable meaning, holds the same value over time, like a memory cell
09.04.18 16:06:48<stoopkid> unstable meaning, doesn't hold the same value, changes over time like an inverter fed back into itself
09.04.18 16:11:38<stoopkid> stable feedback loops are fine in the context of standard formal logic, because a fixed, stable truth-value is the first thing it's looking for in its assumptions of what is/isn't "logical"
09.04.18 16:14:55<stoopkid> unstable feedback loops aren't fine because they represent self-contradictory definitions when all the states of this feedback loop over time are collapsed to a single instant; standard formal logic is essentially the logic of single instants at a time
09.04.18 16:22:56<stoopkid> this is related to temporal logic but i think that gives too narrow of a perspective on it, essentially time is related into it by the fact that the state at a given moment of time is defined in terms of previous moments in time, but, in the context of the logic of self-reference here, that's specifically what we should be looking at: a given moment of time is *defined in terms of* previous moments in time, we have
                 <stoopkid> something defined *in terms of* something else, it goes a meta-level higher
09.04.18 16:31:11<stoopkid> so, universe-hierarchy, we separate out Type:Type into Type0:Type1:Type2:..., we avoid self-referential quantifications
09.04.18 16:31:47<stoopkid> one approach (Agda approach) is explicit labeling of universe-levels, and then doing universe-polymorphism over all this in some kind of set-omega
09.04.18 16:32:01<stoopkid> probably the wrong approach, at least the way they do it
09.04.18 16:34:02<stoopkid> looking at this in terms of feedback loops / self-referential definitions, the natural thing is *relative* meta-levels, i.e. something more like typical ambiguity, but, possibly without a well-defined "bottom-level" (where's the bottom meta-level in the liar paradox? it's liars all the way down)
09.04.18 16:36:19<stoopkid> you don't take a feedback loop in a black-box and, without any further knowledge about it, expect to answer the question of what the current state is
09.04.18 16:39:04<stoopkid> you can calculate the current state given a starting state and the number of time-steps that have elapsed, i.e. it doesn't hold a specific truth value "out of context", but will hold some specific truth value, at some specific time, when placed into a context that assigns it some truth value at some starting time
09.04.18 17:28:35<daemoz> can you explain what you mean by good self-reference and bad self-reference?
09.04.18 17:32:33<daemoz> Flagg resolution is pretty interesting. It certainly seems like a viable solution to the issue, it even feels like an acurate representation since it reflects the nature of truth value results from systems can change, over time. Would this mean that everytime there is a new state for some object, it would have a level added? so everything has this infinite heirarchy? just trying to click it into place.
09.04.18 18:17:06<stoopkid> daemoz: bad self-reference leads to inconsistency/paradox, good self-reference (or really just "not bad") doesn't
09.04.18 18:18:12<stoopkid> "Would this mean that everytime there is a new state for some object, it would have a level added?" more or less, but this might just be in the same sense that every time there's a new state for some object there's an associated execution/interpretation step that brought it to that state
09.04.18 18:22:52<stoopkid> self-referential interpretation steps necessary move "up" the meta-level hierarchy, or, more precisely, a definition is always at least one meta-level higher than the recursive calls to itself
09.04.18 18:25:09<stoopkid> thinking in terms of the descriptive complexity hierarchy, a definition A in terms of a definition B is always at least a step higher in the hierarchy than B because the definition of A needs at least all the information from the definition of B available
09.04.18 18:26:32<daemoz> And then if after that point B needed the information in A it would then be a step higher than the previous highest?
09.04.18 18:27:38<stoopkid> right if A and B are mutually recursive
09.04.18 18:28:05<daemoz> does evaluation play a part in creating new levels?
09.04.18 18:28:34<daemoz> like if there's t his mutually recursive definition of A in B and also B in A, and I like eval(A), eval(A)
09.04.18 18:28:45<daemoz> would that create two levels or is all of this heirarchy static
09.04.18 18:29:22<daemoz> maybe eval is too ambiguous.
09.04.18 18:29:37<daemoz> do you understand what I'm trying to say?
09.04.18 18:29:48<stoopkid> not quite
09.04.18 18:30:08<daemoz> If I needed the definition of A, twice
09.04.18 18:30:22<daemoz> or if after I needed a definition of A I needed one of B
09.04.18 18:30:49<daemoz> does that create levels or do the levels only get created in a static compile-time fashion?
09.04.18 18:33:50<stoopkid> thinking of it in terms of recursive functions, there's basically a level for each recursive call, i.e. height of hierarchy == depth of recursion, or, # of cycles in a feedback loop
09.04.18 18:35:10<daemoz> so the more you call something like this, the higher the hierarchy
                 <stoopkid> so, the hierarchy is essentially relative, you've got a pattern, like, you know A depends on B which depends on A again, and this pattern is replayed over and over across the stream
09.04.18 18:36:04<stoopkid> right, deeper and deeper in self-reference
09.04.18 18:36:15<daemoz> represented as streams?
09.04.18 18:36:53<daemoz> I assume this is all of the Level stuff I was seeing in agda?
                 <daemoz> Or at least related.
09.04.18 18:37:03<stoopkid> related
09.04.18 18:38:54<stoopkid> right stream/hierarchy they're not much different
09.04.18 18:39:11<stoopkid> especially if you just have a linear hierarchy, like in agda and such
09.04.18 18:43:23<stoopkid> so, there's different kinds of recursion and you mainly see the relation to meta-levels when you look at unbounded / non-productive inflooping recursions like the one you get from the liar paradox (which has the help of being a direct translation of a self-referential / meta-level-breaking paradox in normal logic)
09.04.18 18:46:03<stoopkid> when you look at terminating, substructural recursion, you can think of it like"oh, this is just proof by induction", "each recursive call actually isn't self-referential, like 6! is defined in terms of 5!, not in terms of 6!", and you can basically get rid of the meta-level breaking
09.04.18 18:47:10<stoopkid> when you look at general recursion like A := not(A), you don't have anything well-founded, terminating, etc.. and when interpreted logically it appears self-contradictory, unless you interpret it as spanning meta-levels / time
09.04.18 18:49:28<daemoz> What needs to be there in order to make a system with meta-levels consistent? (maybe it already is?) It just seems to me that there could be a lot of breakdown of the logic that could possibly create inconsistencies.
09.04.18 18:49:45<daemoz> When introducing this whole area of possibilities.
09.04.18 18:52:10<stoopkid> basically just this kauffman stream separation, but some of the issue is also in how to even provide full access to what we consider to be meta-levels (i.e. what we get from self-interpreters, etc..)
09.04.18 18:53:33<daemoz> what's the relationship between meta-levels and self-interpreters?
09.04.18 18:53:57<daemoz> And by 'full access' are you refering to providing users with the ability to use the meta-levels?
09.04.18 18:56:08<stoopkid> right, how to provide proper semantics to the notion of meta-levels and their relation to the rest of the logic, and what rules/axioms/behavior they satisfy for logicians/users to use the concepts in their constructions/derivations and/or reason about the concepts themselves
09.04.18 18:57:54<stoopkid> wrt self-interpreters, you're transitioning from running the code directly to looking at the code and interpreting it, basically going up a meta-level from the code
09.04.18 18:59:47<daemoz> Interesting, it's hard to see how that would work in my head.
09.04.18 19:01:24<stoopkid> yea, same :)
09.04.18 19:01:48<daemoz> xD that's a relief.
09.04.18 19:05:25<daemoz> meta-levels is in this case a solution to russels?
09.04.18 19:05:43<daemoz> a dynamically expanding logic hah
09.04.18 19:06:23<stoopkid> yea, accounting for meta-levels with a universe-hierarchy is essentially exactly how russell removed the paradox from his formula that was paradoxical when interpreted under cantor's naive set theory
09.04.18 19:07:06<daemoz> are meta-levels the same thing as universes in 'universe-hierarchy'?
09.04.18 19:07:09<stoopkid> set1's are basically set0's the next meta-level up
09.04.18 19:07:10<stoopkid> well
09.04.18 19:07:33<stoopkid> that's sort of a matter of interpretation
09.04.18 19:09:18<stoopkid> i.e. you can just look at it as a hierarchical graph structure that avoids inconsistencies, and say that "meta-levels" is just a human-level interpretation of it, and i think this might be a common perspective on it, if not the default perspective on it (actually default perspective might not even include any relationship to meta-levels)
09.04.18 19:12:11<stoopkid> so, i sort of try to force the interpretation, because to me it seems they're the same thing, but, in some sense that only really matters in the context of me trying to add more structure into the logic based on the conflation of these various hierarchies, whereas if you're not trying to do this, you can use the universe hierarchy "just fine" without ever interpreting it as a hierarchy of meta-levels
09.04.18 19:13:08<stoopkid> like, just treat universes and the hierarchy of them as worthy of being their own concept, and as a valid solution to the russell/girard paradox problems without having to interpret them as meta-levels
09.04.18 19:14:09<stoopkid> i don't do this, to me, universes and the hierarchy of them seems unnatural without justification in terms of the human intuition that motivated their existence in the first place
09.04.18 19:15:13<stoopkid> and looking at russell, this actually literally was a separation of meta-levels
09.04.18 19:15:18<daemoz> Alright, well I'm okay with it basically meaning meta-levels at least in this context they seem relatively synonymous
09.04.18 19:15:49<stoopkid> i guess the other common interpretation people have tried to force is a hierarchy of size
09.04.18 19:15:56<daemoz> size/
09.04.18 19:15:57<daemoz> *?
09.04.18 19:16:02<stoopkid> like set0 is small sets and set1 is sets that are some how "larger"
09.04.18 19:16:12<stoopkid> similar stuff in category theory
09.04.18 19:19:13<stoopkid> looking at it as "larger" instead of "a meta-level higher" isn't necessarily wrong, since if set1 contains set0 it should be somehow "larger" than set0, but, i think meta-levels provide better intuition to this
09.04.18 19:19:56<daemoz> I'm inclined to agree, but maybe that's just because this is the only way it's been explained to me.
09.04.18 19:19:58<stoopkid> set1 contains set0 i.e. is defined in terms of it, meta-level higher; set0 can't contain itself without breaking meta-levels
09.04.18 19:30:43<stoopkid> we'll get back to this, i need to organize the concepts and get some other work done first
09.04.18 19:31:05*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
09.04.18 19:33:47<daemoz> Okay. Thanks
09.04.18 19:47:09<dmiles> PFC = Prolog extended with forward chaining.. inference rules are Prolog terms which are asserted as clauses into the regular Prolog database. When new facts or forward reasoning rules are added to the Prolog database (via a special predicate add/1, forward reasoning is triggered and additional facts that can be deduced via the application of the forward chaining rules are also added to the
09.04.18 19:47:10<dmiles> database. A simple justification-based truth-maintenance system is provided as well as simple predicates to explore the resulting proof trees.
09.04.18 19:48:45<dmiles> to koo5[m]
09.04.18 19:49:58<dmiles> https://github.com/finin/pfc/raw/master/man/pfc.pdf
09.04.18 19:55:09<dmiles> in order to handle infloops, sound unification/equality and still treat skolemization fairly, if was easier to maintain my datastate using PFC
09.04.18 19:59:08<dmiles> i extended Tim Finnin's version with module based ihheritance according to John McCarthy which allows the systm to explore "possible worlds" in a non infectious manner
09.04.18 20:10:04<dmiles> daemoz: *nod* i decided to go wiuth a MUD/MMORPG since it requires the most expressive of all possible logics
09.04.18 20:10:36<dmiles> and one can see and experience with the Nomics go wrong
09.04.18 20:10:52<dmiles> with/when
09.04.18 20:14:13<dmiles> Carl Hewitt papers explain how Godel's theorems do not affect logic or proof systems like PrologMUD/Logicmoo/Cyc
09.04.18 20:25:27<dmiles> arround page 32 it gets into that:  https://arxiv.org/ftp/arxiv/papers/0812/0812.4852.pdf
09.04.18 20:31:01<dmiles> Which is usefull to create Inconsistency-robust Natural Deduction that doesn’t require artifices such as indices (labels) on propositions or restrictions on reiteration.
09.04.18 20:33:49<dmiles> In addition, Direct Logic (Carl Hewitt's discovery) is a minimal fix to Classical Logic without the rule of Classical Proof by Contradiction.   Same as CYC and LogicMOO
09.04.18 20:35:03<dmiles> I have never thought btw these logics have anyhting to do with how humans things.. (we are not that lucky!) but are a natual language that automated actors use
09.04.18 22:07:25*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Excess Flood
09.04.18 22:07:39*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
10.04.18 03:33:11*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 256 seconds
10.04.18 03:38:21*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
10.04.18 06:24:14*** Join: koom (~sirdancea@nat-simple11.techlib.cz, sirdancealot: koo5)
10.04.18 08:21:25<koo5[m]> i see, thanks
10.04.18 09:48:30*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 265 seconds
10.04.18 09:49:29*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
10.04.18 10:10:40*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 260 seconds
10.04.18 10:12:22*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
10.04.18 10:31:24*** Quit: koom (~sirdancea@nat-simple11.techlib.cz) left #AutoNomic: Ping timeout: 240 seconds
10.04.18 10:45:05<HMCa> golem launched?
10.04.18 10:45:07<HMCa> lols
10.04.18 11:49:06<lexxus[m]> Hi all, do you know any good white papers on sidechains protocol design (not necessarily for bitcoin)? I know about blockstream's papers and that there is Lisk but they don't seem to have any good description of their sidechain architecture.
10.04.18 12:27:27<HMCa> well, what sort of sidechains in particular?
10.04.18 12:28:01<HMCa> iirc there was a pretty good writeup about treechains a couple of years ago
10.04.18 12:28:06<HMCa> maybe by mr Todd?
10.04.18 12:30:11<lexxus[m]> Any actually. I just want to see what is already there in the wild. Thanks, I  will look for it.
10.04.18 12:53:37<HMCa> you'll probably be able to find more about merge mining and pegging, more generally, than about sidechain bonding specifically
10.04.18 12:54:48<HMCa> (although side bonds get all the hype and media coverage, the actual "magic" there is just application of basic cross-pegging stuff
10.04.18 12:54:52<HMCa> )
10.04.18 13:10:19<lexxus[m]> Thanks. I'll google this.
10.04.18 14:13:25*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
10.04.18 17:10:12*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 265 seconds
11.04.18 03:00:17<HMCa> golem already has malicious nodes circumventing work verification on their testnet. :-|
11.04.18 03:00:43<stoopkid> ouch
11.04.18 03:01:17<HMCa> one person published their technique... thy're injecting ads for elastic into peoples' render jobs
11.04.18 03:01:38<HMCa> speaking of elastic... they're also heading toward a testnet
11.04.18 03:01:47<HMCa> it also will be broken. ;-)
11.04.18 03:01:58* HMCa gtr again :-)
11.04.18 06:04:08*** Join: koom (~sirdancea@95.46.32.147, sirdancealot: koo5)
11.04.18 06:45:09*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
11.04.18 06:45:33*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
11.04.18 06:45:34*** Quit: koom (~sirdancea@95.46.32.147) left #AutoNomic: Ping timeout: 245 seconds
11.04.18 06:56:02*** Join: koom (~sirdancea@95.46.32.147, sirdancealot: koo5)
11.04.18 07:46:21*** Quit: koom (~sirdancea@95.46.32.147) left #AutoNomic: Ping timeout: 260 seconds
11.04.18 17:51:54*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
11.04.18 18:42:50*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 265 seconds
12.04.18 05:35:28*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
12.04.18 06:11:03*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
12.04.18 09:58:46<dmiles> golem ?
12.04.18 09:59:49<dmiles>  GOLEM = Goal-Oriented LEarning Meta-Architecture ?
12.04.18 11:44:11*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
12.04.18 12:03:27<HMCa> dmiles: no
12.04.18 12:04:13<HMCa> golem as in GNT
12.04.18 12:07:11*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
12.04.18 13:41:23*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
12.04.18 15:41:07*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
12.04.18 15:57:02*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
12.04.18 16:08:50*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
12.04.18 23:56:10*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
13.04.18 03:20:50*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
13.04.18 04:48:36*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
13.04.18 04:50:07*** Quit: koom (~sirdancea@193.86.78.254) left #AutoNomic: Remote host closed the connection
13.04.18 04:50:35*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
13.04.18 05:17:35*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
13.04.18 05:17:58*** Nick change: kook (~sirdancea@193.86.78.254) is now known as Guest26157
13.04.18 05:20:22*** Quit: koom (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 256 seconds
13.04.18 07:05:51*** Quit: Guest26157 (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 240 seconds
13.04.18 07:39:36*** Join: Guest26157 (~sirdancea@193.86.78.254, sirdancealot: koo5)
13.04.18 07:59:12*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 265 seconds
13.04.18 08:15:15*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
13.04.18 10:54:42*** Quit: Guest26157 (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 265 seconds
13.04.18 14:05:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
14.04.18 04:18:38*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 265 seconds
14.04.18 06:02:56*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vqsgvetjyoffbnre) left #AutoNomic: Quit: Connection closed for inactivity
14.04.18 09:37:47*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lwjyehlvdyzvexjd, stoopkid: stoopkid)
14.04.18 12:53:52*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
14.04.18 12:54:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
14.04.18 13:13:49*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
14.04.18 17:17:20*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
15.04.18 19:57:00*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Read error: Connection reset by peer
15.04.18 19:59:18*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
15.04.18 21:47:41*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
15.04.18 22:00:19*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
16.04.18 07:17:56*** Join: koom (~sirdancea@94.230.153.108, sirdancealot: koo5)
16.04.18 07:18:15*** Quit: koom (~sirdancea@94.230.153.108) left #AutoNomic: Remote host closed the connection
16.04.18 07:18:41*** Join: koom (~sirdancea@94.230.153.108, sirdancealot: koo5)
16.04.18 07:28:10*** Join: kook (~sirdancea@94.230.153.108, sirdancealot: koo5)
16.04.18 07:28:34*** Nick change: kook (~sirdancea@94.230.153.108) is now known as Guest82185
16.04.18 07:30:18*** Quit: koom (~sirdancea@94.230.153.108) left #AutoNomic: Ping timeout: 240 seconds
16.04.18 08:38:11*** Quit: Guest82185 (~sirdancea@94.230.153.108) left #AutoNomic: Ping timeout: 264 seconds
16.04.18 09:56:26*** Join: koom (~sirdancea@94.230.153.108, sirdancealot: koo5)
16.04.18 10:55:10*** Quit: koom (~sirdancea@94.230.153.108) left #AutoNomic: Ping timeout: 240 seconds
16.04.18 11:25:22*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
16.04.18 11:25:47*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
16.04.18 11:56:47*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 264 seconds
16.04.18 12:06:00*** Join: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com, (unauthenticated): deadhand)
16.04.18 20:07:59*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-nvmtsvpcgbfocxpk) left #AutoNomic: Ping timeout: 256 seconds
16.04.18 20:08:00*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-nxgldvjloabjqmve) left #AutoNomic: Ping timeout: 256 seconds
                 *** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-eovdispndclfupsg) left #AutoNomic: Ping timeout: 256 seconds
17.04.18 00:01:08*** Join: Tamara___ (sid238709@gateway/web/irccloud.com/x-senkioatlbkykyij, (unauthenticated): Tamara)
17.04.18 00:01:21*** Quit: Tamara_ (sid238709@gateway/web/irccloud.com/x-igejqknwthyryvhg) left #AutoNomic: Ping timeout: 256 seconds
17.04.18 00:01:22*** Nick regain: Tamara___ (sid238709@gateway/web/irccloud.com/x-senkioatlbkykyij) is now known as Tamara_
17.04.18 01:26:46*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-bqlgshhrtuczkxbn, (unauthenticated): @lexxus:matrix.org)
17.04.18 01:26:48*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-iultrmnfbbgogrxm, (unauthenticated): @genuinelyfx:matrix.org)
17.04.18 01:40:45*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hlyhauvzatfjname, (unauthenticated): @koo5:matrix.org)
17.04.18 07:58:41*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
17.04.18 08:07:36*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
17.04.18 17:25:41*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
17.04.18 17:26:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.04.18 18:44:13*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
17.04.18 22:14:45*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
18.04.18 03:56:12*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
18.04.18 04:47:45*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
18.04.18 05:14:50*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
18.04.18 05:23:22*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
18.04.18 05:35:17*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
18.04.18 06:37:39*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 265 seconds
18.04.18 08:35:31<HMCa> stoopkid: so I'd been trying to think of a good example for you of a homoiconic language where the "fundamental structure" is somewhat more unique/distinct than "nested lists of symbols" a la lisp/asm, or graph a la rdf/n3...
18.04.18 08:35:48<HMCa> just now it hit me: the nix language
18.04.18 08:50:30<stoopkid> hrm
18.04.18 08:50:41<stoopkid> well, there's backticks in bash
18.04.18 08:51:03<stoopkid> i use them more often than i should XD
18.04.18 15:27:09*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lwjyehlvdyzvexjd) left #AutoNomic: Quit: Connection closed for inactivity
18.04.18 17:19:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-itlpnyuittfkekau, stoopkid: stoopkid)
18.04.18 19:47:09*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-itlpnyuittfkekau) left #AutoNomic: Quit: Connection closed for inactivity
18.04.18 21:56:11*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
18.04.18 21:56:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
18.04.18 22:13:15*** Join: chump (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
18.04.18 22:14:52<chump> hello?
18.04.18 22:40:14<daemoz> chump: allo
18.04.18 22:40:25<chump> hello daemoz
18.04.18 22:40:56<chump> ive havent been here in awhile
                 <chump> but i was discardedes
                 <chump> just checking in
                 <daemoz> I think I remember that username
                 <chump> how are you
18.04.18 22:41:00<chump> :-)
18.04.18 22:41:11<chump> im f*cking nutz... so maybe
18.04.18 22:41:16<daemoz> I'm good, I think stoop and koo5 have been working really hard lately.
18.04.18 22:41:17<chump> :-D
18.04.18 22:41:18<daemoz> Haha, word
18.04.18 22:41:40<chump> awesome!
18.04.18 22:42:46<chump> have you worked with them at all?
18.04.18 22:43:21<chump> if i recall, they sign in together and sortof share a workstation
18.04.18 22:55:00<daemoz> A little bit, unfortunately my life is a little busy right now so not much lately.
18.04.18 22:55:16<daemoz> Yeah, they'll share sessions and hack on logic stuff together
18.04.18 22:55:40<daemoz> I believe they're currently focused on aspects of blockchain protocols
18.04.18 22:55:54<chump> that sounds a great way to go
18.04.18 22:56:01<chump> ok
18.04.18 22:56:14<chump> i want to study blockchain myself havent gotten round yet
18.04.18 22:57:05<daemoz> I'm sure they could point you to resources they've been using.
18.04.18 22:57:31<chump> i know
18.04.18 22:57:46<chump> im slow.... till im fast
18.04.18 22:57:47<chump> its a quirk
18.04.18 22:57:52<daemoz> haha
18.04.18 22:57:59<daemoz> that sounds relatable
18.04.18 22:58:01<chump> :-)
18.04.18 22:58:11<daemoz> structured sprints are usually what works best for me
18.04.18 22:58:32<chump> yea.... just backup wirk
18.04.18 22:58:41<chump> overload
18.04.18 22:58:48<chump> i have to do EVERYTHING
18.04.18 22:58:50<chump> apparently
18.04.18 22:58:51<daemoz> yeah
18.04.18 22:58:54<chump> haha
18.04.18 22:59:01<chump> i can share some pro tips sometime
18.04.18 22:59:02<daemoz> and taking the right amount of breaks is really important xD
18.04.18 22:59:04<chump> :-D
18.04.18 22:59:19<daemoz> hahaha, sure
18.04.18 22:59:35<chump> ive made important progress into the .... f*ck it, just be awesome at everything way
18.04.18 22:59:40<chump> :-D
18.04.18 23:00:11<daemoz> sounds like a good way to be
18.04.18 23:00:26<chump> haha
18.04.18 23:00:32<chump> the insane way
18.04.18 23:00:54<chump> the.... thats a f*cking crazy person way
18.04.18 23:01:16<chump> but im cool with it
18.04.18 23:01:24<chump> we can talk about it some time
18.04.18 23:02:01<daemoz> I'm down with it, neurodiversity is important
18.04.18 23:02:37<chump> yeah.... i think its import to see the large to see the small
18.04.18 23:02:47<chump> because the small fits into this bigger thing
18.04.18 23:03:04<chump> so the sense of the bigger thing is like a VR sense of where you are
18.04.18 23:03:08<chump> that type of thing
18.04.18 23:03:28<daemoz> sure I agree with that line of thought
18.04.18 23:03:54<daemoz> It's important to see how things interact on a larger scale
18.04.18 23:09:19<chump> how often the peeps come around?
18.04.18 23:09:24<chump> guess its late night now for stoop
18.04.18 23:09:35<chump> we both live east coast US
18.04.18 23:14:32<chump> daemoz: bump
18.04.18 23:17:15<daemoz> Not particularly sure, I would say at least once a day.
18.04.18 23:17:37<chump> ok... tanks
18.04.18 23:17:52<chump> so daemoz, you have any particular interests or expertise?
18.04.18 23:21:32<daemoz> Language design is interesting to me and that's what initially got me interested in this project. After hanging out here a while I'm definitely now very interested in type theory and logic in general.
18.04.18 23:21:55<chump> ok.
18.04.18 23:22:00<daemoz> As for expertise, I am a decent coder.
18.04.18 23:22:09<chump> what are you comfortable with?
18.04.18 23:22:36<daemoz> c++, rust, or CL I am most comfortable with.
18.04.18 23:23:40<chump> CL.... :-D
18.04.18 23:23:54<chump> Common Lisp, right?
18.04.18 23:23:57<daemoz> Yea
18.04.18 23:24:34<daemoz> CL is like sanskrit, old and obtuse, but containing great wisdom xD
18.04.18 23:25:18<chump> i LOVE CL!!!
18.04.18 23:25:37<daemoz> Awesome!
18.04.18 23:25:38<chump> scheme, these bracketed dialects
18.04.18 23:25:56<chump> old and obtuse? not in my book!
18.04.18 23:26:00<chump> some things are timeless!
18.04.18 23:26:02<daemoz> Haha, it's more of a forewarning
18.04.18 23:26:05<daemoz> I agree
18.04.18 23:26:14<chump> ^^^
18.04.18 23:26:16<chump> :D
18.04.18 23:26:54<chump> so basically your... keeping the trade secret under the rug! :D
                 <daemoz> there was a branch of humanities timeline where we went lisp style instead of of fortran style, and I have a belief that that timeline is doing better than us xD
18.04.18 23:27:01<daemoz> Gatekeeping!!
18.04.18 23:27:05<chump> ;-)
18.04.18 23:27:07<chump> :D
18.04.18 23:27:22* chump zips mouth shut!
18.04.18 23:28:03<daemoz> excellent, now we will make millions off of our free online lisp textbooks
18.04.18 23:28:04<daemoz> muahah
18.04.18 23:28:24<chump> haha.... thats just to spread the word!
18.04.18 23:28:51<chump> also like great wisdom, great language perpetuates itself
18.04.18 23:28:57<daemoz> have you seen http://landoflisp.com/
18.04.18 23:29:02<chump> yeah
18.04.18 23:29:05<chump> what do you think?
18.04.18 23:29:12<chump> ive heard of it
18.04.18 23:29:13<daemoz> Just checking xD
18.04.18 23:29:40<daemoz> What do you mean by 'perpetuates itself'
18.04.18 23:30:19<chump> ohhh... it spreads by virtue of its awesomeness
18.04.18 23:30:24<daemoz> oh, yeah
18.04.18 23:30:36<daemoz> the old channels haha
18.04.18 23:30:51<chump> so even though no money in great wisdom, it effects everyone
18.04.18 23:31:01<chump> and thus a source of great power
18.04.18 23:31:12<daemoz> very true
18.04.18 23:31:23<chump> :-2
18.04.18 23:31:27<chump> :-)
18.04.18 23:31:31* chump typo
19.04.18 00:12:27*** Quit: chump (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
19.04.18 00:23:47<HMCa> ah, I just missed him
19.04.18 00:23:50<HMCa> :-\
19.04.18 00:23:59<HMCa> all well, maybe next time
19.04.18 03:12:40*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
19.04.18 03:52:39*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
19.04.18 03:55:37*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
19.04.18 03:57:17*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
19.04.18 03:57:41*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
19.04.18 04:23:16*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
19.04.18 09:40:05*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
19.04.18 09:51:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hzzbkecqdlpivhvm, stoopkid: stoopkid)
19.04.18 11:55:46<HMCa> hi stoopkid
19.04.18 11:56:07<stoopkid> heya
19.04.18 12:17:08<HMCa> how goes?
19.04.18 12:17:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
19.04.18 12:17:42*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
19.04.18 12:18:33<stoopkid> alright, how bout yourself?
19.04.18 13:05:14<HMCa> so/so
19.04.18 13:05:55<HMCa> "Bitcoin right now is, I believe, doomed." -Karpeles
20.04.18 00:21:14<HMCa> http://nymag.com/selectall/2018/04/richard-stallman-rms-on-privacy-data-and-free-software.html
20.04.18 00:22:38<HMCa> (very worth the long read)
20.04.18 02:11:50<dmiles> probably the best paper on the relation to mathematics and logic i have ever seen :)  https://docs.google.com/file/d/0B79uetkQ_hCKbkFpbFJQVFhvdU0/edit
20.04.18 02:15:56<HMCa> dmiles: do you happen to have a link to a non-gdrive version?
20.04.18 02:18:21<HMCa> tezos in trouble again, heh
20.04.18 02:21:56<dmiles> that was the authors personal drive but here is a non-draft version  https://arxiv.org/ftp/arxiv/papers/0907/0907.3330.pdf
20.04.18 02:23:53<dmiles> i like it becauw it was the same things i personally belived obvious that 99% of the world disagrees with
20.04.18 02:25:59<dmiles> Cycorp just replaces “Classical Direct Logic” with CycL
20.04.18 09:38:48<stoopkid> https://github.com/josd/eye
20.04.18 09:38:55<stoopkid> https://github.com/josd
20.04.18 09:39:07<stoopkid> "R&D engineer at Agfa HealthCare and developer of Euler open source."
20.04.18 09:39:40<stoopkid> https://en.wikipedia.org/wiki/Agfa-Gevaert
20.04.18 09:40:03<stoopkid> https://en.wikipedia.org/wiki/IG_Farben
20.04.18 09:40:41<stoopkid> "Successor: 	AGFA Gevaert, BASF, Bayer, Sanofi..."
20.04.18 09:40:51* stoopkid sighs
20.04.18 09:41:40<stoopkid> but don't pay any attention to stoopkid he's just "extreme" or something
20.04.18 09:49:43<stoopkid> https://en.wikipedia.org/wiki/IG_Farben#IG_Farben_Trial
20.04.18 09:50:39<stoopkid> "The United States of America vs. Carl Krauch, et al., also known as the IG Farben Trial, was the sixth of the twelve trials for war crimes ... after the end of World War II, against leading industrialists of Nazi Germany for their conduct during the Nazi regime. The defendants in this case had all been directors of IG Farben. Of the 24 defendants arraigned, 13 were found guilty. ... All defendants who were sentenced to
                 <stoopkid> prison received early release. Most were quickly restored to their directorships, and some were awarded the Federal Cross of Merit."
20.04.18 09:53:23*** Quit: jibble__ (uid48680@gateway/web/irccloud.com/x-vnvedguouilfldxs) left #AutoNomic: 
20.04.18 09:53:45*** Join: jibble__ (uid48680@gateway/web/irccloud.com/x-lxpljaycjoyksnde, (unauthenticated): bacon)
20.04.18 09:58:22<stoopkid> https://en.wikipedia.org/wiki/Alfred_Nobel
20.04.18 09:59:18<stoopkid> namesake of the Nobel Peace prizes was an arms dealer/manufacturer
20.04.18 09:59:37<stoopkid> https://en.wikipedia.org/wiki/Joseph_Pulitzer
20.04.18 10:01:26<stoopkid> namesake of the Pulitzer Prize was basically just a turn-of-the-century tabloid publisher
20.04.18 10:02:00<stoopkid> https://en.wikipedia.org/wiki/Natural_deduction
20.04.18 10:03:01<stoopkid> https://en.wikipedia.org/wiki/Gerhard_Gentzen
20.04.18 18:38:51*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
20.04.18 18:39:42*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.04.18 18:51:25*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 246 seconds
20.04.18 20:00:29*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hzzbkecqdlpivhvm) left #AutoNomic: Quit: Connection closed for inactivity
21.04.18 05:02:41*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
21.04.18 05:13:19*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
21.04.18 06:42:14*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
21.04.18 07:55:28<HMCa> it is kinda funny to me how frequent blockchain ico exit scams have become... and here we still are...
21.04.18 08:50:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nikduzljgdppdewf, stoopkid: stoopkid)
21.04.18 09:25:06*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 248 seconds
21.04.18 11:03:24*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
21.04.18 11:10:25*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
21.04.18 12:18:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nikduzljgdppdewf) left #AutoNomic: Quit: Connection closed for inactivity
21.04.18 12:19:23<lexxus[m]> Hi all. I have a question. Can the task of making Autonomics (or any similar platform) be decomposed in 2 completely independent subtasks - development of a protocol for a secure, distributed consensus on arbitrary state machine AND development of expressive, secure, etc. MLTT/RDF-powered contract programming language?
21.04.18 12:19:33<lexxus[m]> Or the the design of contract programming language influences the design consensus protocol?
21.04.18 12:19:44<lexxus[m]> Somebody if I recall correctly has mentioned that00 consensus algorithm won’t be predefined in Autonomic. Does this mean that the task of creating MLTT-based contract language can be completely decoupled from consensus/networking part of the project?
21.04.18 12:34:36*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-drtqvysxdnnxxdwh, stoopkid: stoopkid)
21.04.18 12:36:51<stoopkid> lexxus[m]: idk how independent they can really be, more like two layers, like you need some kind of contract language in order to express the things that consensus would be reached about
21.04.18 12:39:22<stoopkid> you could certainly design the nomics semi-independently of the MLTT-based contract language but, making that machine-interpretable is a different q and then we're back to the MLTT-based contract lang
21.04.18 12:44:29<stoopkid> and then the two aren't gonna be fully independent because, for example, if you're planning on having an MLTT-based framework then you won't be able to rely on nomic rule-sets that require law of excluded middle and other non-constructive axioms, or set-theoretic axioms, or etc..
21.04.18 12:52:24<stoopkid> this used to worry me so i spent a decent amount of time researching into the possibilities beyond MLTT but,  not so much anymore, possibly because the work of gregory chaitin taught me that logic is basically non-perfectible
21.04.18 12:55:12<stoopkid> it's easy to see too, like, take the halting problem for turing machines
21.04.18 12:58:13<stoopkid> what consistent machine-implementable logic will be able to answer the question of haltingness correctly for every turing machine? there isn't one but there's a essentially a hierarchy (more like DAG) of increasingly powerful logics that will answer the question correctly for increasingly many of the turing-machines
21.04.18 12:59:53<stoopkid> and then it goes beyond turing-machines too, its interesting that you can find all this happening just in first-order logic which is a very weak fragment of logic (I/O relation of a universal turing-machine is definable in robinson arithmetic, for example)
21.04.18 13:01:47<stoopkid> in that sense the entire field of computability represents "almost none" of logic (in the sense of https://en.wikipedia.org/wiki/Almost_everywhere)
21.04.18 13:08:38<stoopkid> so there really is a whole lot of very diverse stuff one can ask for in their logics, both in terms of what can be expressed and what methods are available for proving/disproving/"realizing" those expressions
21.04.18 13:12:31<stoopkid> so i tend to assume that MLTT is not necessarily the end-all-be-all, but at the same time such an end-all-be-all seems to be inherently unachievable, so, i'm now looking at this like "just deliver the MLTT product as planned and then iterate as necessary".. *if* necessary...
21.04.18 13:18:59<stoopkid> i've found several different deficiencies in vanilla MLTT, or, at least what i would call deficiencies, like.. lack of means to consider objects equivalent for the purposes of being able to substitute one for the other based on structural equivalence rather than syntactic equivalence (ex. univalence); lack of contextual separation for different "views" of the same objects, i.e. binary natural numbers and unary natural
                 <stoopkid> numbers can only be considered structurally equivalent when we can only consider them based on how they behave under arithmetic, and can't be considered structurally equivalent when we can ask questions about finer details of their representation, like, string-length
21.04.18 13:23:14<stoopkid> but, none of the deficiencies i've found so far actually pose a problem for the functioning of autonomic, at worst inconvenience, and even then only for apps that are really trying to "push the limits"
21.04.18 13:33:09<stoopkid> so, it's at least viable to start with vanilla MLTT and then design the nomics/consensus mechanism relative to that...
21.04.18 13:33:56<stoopkid> now.. where *can* they be independent of each other..
21.04.18 13:35:25<stoopkid> tentatively i would say, in theory any part of the game that won't be able to be changed during the game could be separated out from the logic
21.04.18 13:37:16<stoopkid> except for like, things that are so directly related to the logic that they're basically intrinsically inseparable from it
21.04.18 13:37:24<stoopkid> trivial example: the implement of the logic
21.04.18 13:37:48<stoopkid> the implementation*
21.04.18 13:39:09<stoopkid> so, we could have like some... abstract DHT framework, abstract block-chain framework
21.04.18 13:41:17<lexxus[m]> so it is not possible to factor out a part of the game called consensus, i.e. the part which is responsible for making participants agree on a certain state of the world? i just wonder how futile can be attempts to have abstract block-chain framework which would know nothing about underlying contract programming language.
21.04.18 13:43:04<lexxus[m]> it should be in theory strictly worse than a block-chain framework that is capable of using knowledge of what's going on inside, at least in term of various optimizations.
21.04.18 13:44:50<lexxus[m]> an example of such an attempt - https://github.com/ScorexFoundation/Scorex   though i believe it is not meant to be used for smart contracts chains
21.04.18 13:45:35<stoopkid> hrm, well, part of the motivation for autonomic is that we don't necessarily know the optimal consensus mechanism and so we try to leave that as open-ended as possible, or, basically to give the users maximal configurability
21.04.18 13:48:27<stoopkid> so, basically what participants agree on is a framework for expressing and interpreting "worlds", and then they agree on the initial state, and from there boot-strap into specific mechanisms for consensus
21.04.18 13:48:53<lexxus[m]> well, i have just realized that probably consensus mechanism is a part  and nomic mechanism.  or not really...
21.04.18 13:50:31<lexxus[m]> do we need to have consensus to play a nomic game? i mean on a paper, in one room
21.04.18 13:51:28<stoopkid> depends, we need 100% consensus on the interpretation of the structure & rules of the game
21.04.18 13:52:01<stoopkid> but a change to the rules doesn't necessarily require 100% consensus, that depends on the rules of the game
21.04.18 13:56:49<stoopkid> abstract block-chain basically just provides the structure of a sequence of game-states (maybe in some kind of tree/DAG of sub-games), so, you could factor that out of just about any game; it probably would be useful to do so, mainly for us as the devs though, for the purposes of experimenting with different logics without having to redo work on the networking & basic game-structure side of things
21.04.18 13:57:40<stoopkid> i was checking out scorex a while ago i'm actually still considering it at least for prototyping
21.04.18 14:00:06<lexxus[m]> yeap, now the question is abstract structure of a sequence of game-states better can be as good as a tailor made? for instance, autonomic leaves for a user to find and program optimal consensus mechanism. how much better it can be than the abstract one? (and will it be better at all)
21.04.18 14:01:33<stoopkid> well, the abstract structure of a sequence of game-states isn't providing a consensus mechanism, it's providing a place to put a consensus mechanism
21.04.18 14:01:52<stoopkid> like, are the states evolving based on PoW, proof-of-stake, something else or what
21.04.18 14:02:01<lexxus[m]> ok, it seems that what is called "democratic voting" in classic nomic game is more or less "consensus". i should start reading something more comprehensive that wiki articles)
21.04.18 14:02:05<lexxus[m]> *than
21.04.18 14:02:44<stoopkid> yea consensus is somewhat vague until we specify consensus about what in particular
21.04.18 14:06:26<stoopkid> so, the goal is generally something along the lines of democratic voting, i mean that's basically what decentralized consensus is about, approximately, but, there's a huge range of potential variation on the implementation detail there, that can make or break a nomic, and that's the main reason we need so much configurability which is why it's hard to separate it from the logic because the logic is the language for
                 <stoopkid> expressing the configurations & rules to begin with
21.04.18 14:07:24<lexxus[m]> yes, for example, PoW+1 linear chain, or PoS+DaG, or Tendermint BFT+Whatever. is it possible to exploit that inside the "messages"/"blocks" we have some specific structure (mltt/rdf/predicates...) to improve on these consensus schemes?
21.04.18 14:08:28<lexxus[m]> ok, it makes sense.
21.04.18 14:12:26<stoopkid> i don't yet have any specific improvements on specific consensus protocols, i'm still learning a lot in that area; i haven't experimented with any representations in MLTT yet either, i've experimented with representations of some more basic stuff (and some more complex stuff; mostly just testing the limitations of MLTT to make sure it'll be able to express whatever we need, and.. so far so good) but i've been saving most
                 <stoopkid> of the work on designing actual games for at least until we finish a client prototype
21.04.18 14:15:07<stoopkid> although a basic description of something like PoW in Agda or something shouldn't be difficult, so, i'll see if i can work up an example of that
21.04.18 17:56:05*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
22.04.18 00:36:27*** Nick change: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) is now known as dmiles
22.04.18 03:06:47-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
22.04.18 03:06:53*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
22.04.18 04:19:21*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
22.04.18 06:28:15*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
22.04.18 09:42:02-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
22.04.18 09:42:08*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
22.04.18 10:05:37*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 248 seconds
22.04.18 12:20:33-SaslServ- koom!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
22.04.18 12:20:49*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
22.04.18 12:23:36*** Netmerge: *.net *.split, split 22 minutes 34 seconds ago (Use /WL to see who's still missing)
22.04.18 12:27:19*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hlyhauvzatfjname) left #AutoNomic: Ping timeout: 258 seconds
22.04.18 12:27:38*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-bqlgshhrtuczkxbn) left #AutoNomic: Ping timeout: 256 seconds
22.04.18 12:27:50*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-iultrmnfbbgogrxm) left #AutoNomic: Ping timeout: 255 seconds
22.04.18 13:34:42*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
22.04.18 14:31:44-SaslServ- koom!~sirdancea@37-48-48-55.tmcz.cz has just authenticated as you (sirdancealot)
22.04.18 14:31:53*** Join: koom (~sirdancea@37-48-48-55.tmcz.cz, sirdancealot: koo5)
22.04.18 14:32:26*** Quit: koom (~sirdancea@37-48-48-55.tmcz.cz) left #AutoNomic: Client Quit
22.04.18 15:34:04*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-bmarglbdserlvsrl, (unauthenticated): @koo5:matrix.org)
22.04.18 16:08:25*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-wqelsspybbrgajzg, (unauthenticated): @genuinelyfx:matrix.org)
22.04.18 16:08:33*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-poimwpzmlhmlhflh, (unauthenticated): @lexxus:matrix.org)
22.04.18 22:41:08*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
22.04.18 22:41:54*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
23.04.18 01:46:58*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
23.04.18 01:47:17*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.04.18 00:02:47<HMCa> btc will probably be >$10k again soon
24.04.18 04:18:32*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-drtqvysxdnnxxdwh) left #AutoNomic: Quit: Connection closed for inactivity
24.04.18 07:07:26*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 256 seconds
24.04.18 07:09:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.04.18 10:04:18*** Quit: Tamara_ (sid238709@gateway/web/irccloud.com/x-senkioatlbkykyij) left #AutoNomic: 
24.04.18 10:04:32*** Join: Tamara_ (sid238709@gateway/web/irccloud.com/x-jyzrczgbtsfafapk, (unauthenticated): Tamara)
24.04.18 10:52:42*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wdcomuaenfulkmjy, stoopkid: stoopkid)
24.04.18 11:05:03-SaslServ- koom!~sirdancea@nat-simple11.techlib.cz has just authenticated as you (sirdancealot)
24.04.18 11:05:09*** Join: koom (~sirdancea@nat-simple11.techlib.cz, sirdancealot: koo5)
24.04.18 12:17:45*** Quit: koom (~sirdancea@nat-simple11.techlib.cz) left #AutoNomic: Ping timeout: 264 seconds
24.04.18 17:08:01<HMCa> so, I've done a disservice to the project by having so much pm time with stoopkid instead of talking here publicly, heh
24.04.18 17:08:33<HMCa> some of what we've covered privately probably would've been better to put here publicly
24.04.18 17:08:37* HMCa shrugs
24.04.18 17:08:43<HMCa> all well, sorry. :-)
24.04.18 17:09:22<HMCa> we'll work on moving more of those threads of discussion back to here :-)
24.04.18 17:32:59<koo5[m]> Copy&paste
24.04.18 18:23:55<HMCa> we'll just rehash as necessary
24.04.18 19:28:43*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.04.18 19:28:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 256 seconds
25.04.18 00:26:43<stoopkid> koo5[m]: where can i find the code for editable-koo, i'm trying to gather our various resources together
25.04.18 00:39:54<HMCa> so, we should make another bot to yell "fin" at or something
25.04.18 00:40:36<stoopkid> sounds fun
25.04.18 00:50:31<stoopkid> is there a way to configure a git repo to operate more like an "archive", i.e. append-only with enforced non-duplication?
25.04.18 00:58:43<stoopkid> well, i guess this goes beyond just "configuring it" but i guess i could hash the files and use that for file-names and then symlink to them with human-readable names
25.04.18 01:01:33<HMCa> heh
25.04.18 01:01:51<HMCa> this is something i've found myself discussing with a great many people
25.04.18 01:02:07<HMCa> git is *not* made with such security in mind
25.04.18 01:04:29<HMCa> you would have to start by changing a lot of the hashing
25.04.18 01:04:44<HMCa> and I don't just mean ditching the sha1
25.04.18 01:05:49<HMCa> second, you would have to pretty much entirely change what git even is... heh
25.04.18 01:06:16<HMCa> your commit hash only authenticates the commit, not its' history
25.04.18 01:07:16<HMCa> and git actually makes no assumption that any participants will have the same histories, it only relies upon having some common ancestor to start zipping a merge against
25.04.18 01:11:59<stoopkid> well, basically i'm trying to keep track of publications, PDFs and such, so the first thing i think is just stick them in a git repo, but then the use-case is slightly different from "version"-control cause there's only supposed to be one version, and ideally just one of that version
25.04.18 01:15:05<HMCa> yah, git is for controlling many versions. If you want "ideally just one of that version" and you want it in a distributed setting, you maybe want something else
25.04.18 01:15:15<HMCa> like
25.04.18 01:15:23<HMCa> a blockchain or something
25.04.18 01:15:28<HMCa> :-P
25.04.18 01:16:21<HMCa> git can do that, but it is not really made for it, esp if you want anything like a secure CA-less repo...
25.04.18 01:16:56<HMCa> if you just want a secure CA repo it can do that too... but also not really what it is intended for
25.04.18 01:18:21<HMCa> git is good at branching and managing really complex dag changes/interactions, in a trusted or semi-trusted setting (*some* trust can be eliminated w/ signed commits/tags)
25.04.18 01:24:58<stoopkid> hrm, this doesn't really need block-chain, for the reason that i don't really care what anybody else does with their own fork of the repo, if they wanna lose files and store duplicates that's fine with me as long as it doesn't affect my own repo / ability to publish that repo
25.04.18 01:30:00<stoopkid> later i'll care, when i get to the stage of wanting to take this library and put it under secure distributed control. at this stage this is just for me and our trusty team here to provide a secure CA repo of educational material for the project
25.04.18 01:40:41<HMCa> sounds like just the wiki :-P
25.04.18 01:41:17<HMCa> boo @ being a CA. ;-)
25.04.18 01:41:52<stoopkid> well, sort of, the wiki is a wiki this is a directory of PDFs that i want to be able to move around independently of the wiki
25.04.18 01:45:20<HMCa> hrmm
25.04.18 01:45:24<stoopkid> i guess normally people just use arxiv when they want to "preserve a PDF", but, that's still CA, and the point isn't just preserving the PDFs but actually keeping track of them all, as well as having local copies to work with, ideally in a nice packaging for sharing it all, like git provides
25.04.18 01:46:30<HMCa> some people do that "awesome" list in readme.md in github repo thing
25.04.18 01:46:32<stoopkid> maybe if you have an account on arxiv it keeps track of everything you've uploaded as that user, but, that's not better really
25.04.18 01:47:10<HMCa> which to me just seems like a roundabout way of giving github your wiki
25.04.18 01:48:06<HMCa> really if I were you i'd just find a better wiki, if your wiki is not up to that task, heh
25.04.18 01:48:31<HMCa> or maybe what you want is a "cms"...
25.04.18 01:49:05<HMCa> which imo is basically just what "enterprise" people call their weird wiki systems. XD
25.04.18 01:50:19<stoopkid> nothing wrong with using github's free storage for backups
25.04.18 01:54:29<stoopkid> well, i'm just sticking things that are independent of each other into different repos and i noticed that a library/archive of 3rd-party PDFs fits a somewhat different model than what git is specifically designed for, but, rethinking it git still serves the main purpose which is preserving the originals and allowing distributed work-flow
25.04.18 01:55:05<stoopkid> it just leaves some other tasks like non-duplication / non-cluttering for manual maintenance, no big deal
25.04.18 03:06:04<koo5[m]> editable-log is .emacs on the vps, theres my nickserv password in that file, so i didnt publish it
25.04.18 03:07:30<koo5[m]> Ill have to play with git sometime to see what hmc's talking about
25.04.18 03:10:12<koo5[m]> Also you dont really want to put on github copyrighted stuff
25.04.18 03:10:57<koo5[m]> Ive tried syncthing lately, glitchy but not terrible
25.04.18 03:11:06<koo5[m]> Resillio is almost glitch-free though
25.04.18 03:12:13<koo5[m]> Syncthing is opensource AND doesnt store a hidden duplicate of all your data, git-style
25.04.18 03:14:23<koo5[m]> At the end of the day though, a git repo in /www will do
25.04.18 03:48:02<koo5[m]> As on the wiki...id be more comfortable with one where the storage model are just files
25.04.18 04:07:48<stoopkid> same, i'll look around and see what's available
25.04.18 04:38:23<koo5[m]> well, github wiki is one
25.04.18 04:38:41<koo5[m]> i'd think
25.04.18 04:46:14<koo5[m]> sigh, should have bought at the bottom
25.04.18 04:55:01<daemoz_> reddit honestly isn't the worst place for a community like this, they have a built in wiki feature
25.04.18 04:55:34<daemoz_> can search the subreddit, etc
25.04.18 06:41:02*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
25.04.18 06:41:27*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
25.04.18 06:44:48* koo5[m] sent a long message: koo5[m]_2018-04-25_10:44:48.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/FsegvSXqBxrYtrfoXUOyjlaV>
25.04.18 06:45:00<koo5[m]> prove a theorem by going into an infinite loop?
25.04.18 10:39:57<HMCa> sure, any impredicativity always corresponds to an infloop
25.04.18 10:44:50<HMCa> if we were to allow such you could put bottom for B in your example and then prove false
25.04.18 11:01:48*** Mode change: +o ChanServ    on #AutoNomic by orwell.freenode.net (server)
25.04.18 11:04:48*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-poimwpzmlhmlhflh) left #AutoNomic: Ping timeout: 245 seconds
25.04.18 11:05:09*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-wqelsspybbrgajzg) left #AutoNomic: Ping timeout: 268 seconds
25.04.18 11:05:20*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-bmarglbdserlvsrl) left #AutoNomic: Ping timeout: 256 seconds
25.04.18 12:17:37*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-ogepxrlrwzwotazg, (unauthenticated): @koo5:matrix.org)
25.04.18 12:52:29*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-genyefaxzmsubgii, (unauthenticated): @genuinelyfx:matrix.org)
25.04.18 12:52:35*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-kdvvzaxifyegavvz, (unauthenticated): @lexxus:matrix.org)
25.04.18 12:57:16<HMCa> oh, look, another major ethereum bug, screws over *every* erc20 token... XD
25.04.18 12:58:48<HMCa> well, ok, I guess not "every" now that I'm looking in more detail
25.04.18 12:58:53<HMCa> just most. XD
25.04.18 22:12:13<HMCa> funny that exchanges locked down eth tokens that didnt have the bug too
25.04.18 22:13:43*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-ogepxrlrwzwotazg) left #AutoNomic: Ping timeout: 256 seconds
25.04.18 22:17:09*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-genyefaxzmsubgii) left #AutoNomic: Ping timeout: 240 seconds
25.04.18 22:17:42*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-kdvvzaxifyegavvz) left #AutoNomic: Ping timeout: 260 seconds
26.04.18 04:50:04*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hyqawgwvgpjsfxyw, (unauthenticated): @koo5:matrix.org)
26.04.18 05:24:09*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-cxicvjvqvaobarle, (unauthenticated): @genuinelyfx:matrix.org)
26.04.18 05:24:16*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-qmphojdewjqwznxc, (unauthenticated): @lexxus:matrix.org)
26.04.18 05:39:58*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-qmphojdewjqwznxc) left #AutoNomic: Ping timeout: 256 seconds
                 *** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-cxicvjvqvaobarle) left #AutoNomic: Ping timeout: 256 seconds
26.04.18 05:40:22*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hyqawgwvgpjsfxyw) left #AutoNomic: Ping timeout: 240 seconds
26.04.18 06:20:17*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-edvfudthftrqfoky, (unauthenticated): @koo5:matrix.org)
26.04.18 06:56:29*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-aurjidjdnmrwzoud, (unauthenticated): @genuinelyfx:matrix.org)
26.04.18 06:56:38*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-fcfsdjxkaqamoyyt, (unauthenticated): @lexxus:matrix.org)
26.04.18 11:27:11*** Nick change: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) is now known as daemoz
26.04.18 13:31:51*** Join: fart (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
26.04.18 13:36:10<fart> hello?
26.04.18 13:37:50<stoopkid> hi
26.04.18 13:38:12<fart> hey stoopkid
26.04.18 13:38:14<fart> its discard
26.04.18 13:38:47<fart> -edes
26.04.18 13:38:56<stoopkid> heya how ya been
26.04.18 13:39:07<fart> hmmm..... good and bad
26.04.18 13:39:19<fart> pretty intense mix i guess
26.04.18 13:39:22<fart> great and awful
26.04.18 13:39:23<fart> :-D
26.04.18 13:39:25<fart> you?
26.04.18 13:39:48<stoopkid> sorry to hear about the bad & awful parts; ive been alright
26.04.18 13:40:27<fart> ok... yeah.... it is what it is
26.04.18 13:40:36<stoopkid> still studying logic and everything?
26.04.18 13:40:54<fart> hmmm..... i have a new master plan as of late
26.04.18 13:41:09<fart> i want logic to integrate, but im not sure how things will fall together
26.04.18 13:41:51<stoopkid> what do you mean integrate, like from calculus or like with sw integrations
26.04.18 13:42:19<fart> no... dictionary definition
26.04.18 13:43:05<fart> im thinking of the nececity of what i am thinking of as concept weaves
26.04.18 13:43:17<fart> im thinking of the nececity of what i am *calling* concept weaves
26.04.18 13:43:38<stoopkid> “combine one thing with another so that they become  a whole”?
26.04.18 13:43:40<fart> which is the lateral weaving of linear subjects
26.04.18 13:43:45<fart> exactly
26.04.18 13:46:06<stoopkid> can you give an example?
26.04.18 13:47:14<fart> take two books and alternate reading them in small sections
26.04.18 13:47:35<fart> or wiki articles, websites, whatever
26.04.18 13:48:07<fart> work in conceptually integrating them, of weaving them into a whole
26.04.18 13:48:53<stoopkid> gotcha, so, what do you mean when you say you want logic to do this, or maybe do you have an example of “failure to handle this” in logic?
26.04.18 13:49:35<fart> i mean linear subjects within logic are game
26.04.18 13:49:47<fart>  or... linear frameworks
26.04.18 13:52:10<stoopkid> idk im thinking that sort of depends on how you model the subjects
26.04.18 13:52:48<fart> well... you have your own ideas apparently?
26.04.18 13:53:12<stoopkid> is the logic contained within the book linear or is it just the presentation of that logic in book format that’s linear
26.04.18 13:53:39<fart> to be more precise, the path is linear, from a,b,c...
26.04.18 13:54:07<fart> a1,b1,c1 and a2,b2,c2  ->  a1,a2,b1,b2....
26.04.18 13:54:31<fart> linear_A linear_B -> weave
26.04.18 13:55:22<fart> linear_A and linear_B -> weave
26.04.18 13:57:40<stoopkid> so each of ai bi ci would be one of the sections of a book from your example, and the result of combining the two linear sequences into a weave is a sequence that alternates between the two sequences?
26.04.18 13:58:01<fart> yes
26.04.18 14:01:45<stoopkid> so, why like this? i mean, im thinking you wouldnt be doing this for completely arbitrary linear subjects, like, the hobbit and a calculus textbook, so, im imagining you have some particular context for this in mind?
26.04.18 14:02:19<fart> you could try it... it depends what you think
26.04.18 14:04:17* stoopkid tries it
26.04.18 14:04:31<fart> ok
26.04.18 14:05:56<stoopkid> im not seeing the appeal of alternating back and forth between the books, at least not *arbitrarily*
26.04.18 14:06:20<stoopkid> sentence-by-sentence alternation for example
26.04.18 14:06:21<fart> did you read a section of each of them?
26.04.18 14:06:28<fart> no... a section
26.04.18 14:06:42<fart> something that you cluster together into a thing
26.04.18 14:11:08<stoopkid> works better, now its more or less similar to normal human-level time-management and task-switching between learning resources (like say a college student with several textbooks and other books they need to read a bit of each night)
26.04.18 14:12:53<fart> yeah... i think that it might be better designed for how we can learn
26.04.18 14:13:15<fart> and i can also relate it to an overarching philisophical orientatio
26.04.18 14:13:17<fart> n
26.04.18 14:13:45<fart> on how we learn, i think we run out of focus reserves on any linear task
26.04.18 14:14:20<fart> so by switching between linear tasks, we can work for long periods of time with maximum reserves
26.04.18 14:14:42<fart> switching a task is like refilling the gas tank
26.04.18 14:14:47<fart> its something new and interesting
26.04.18 14:14:59<fart> and its something to compare the other thing to
26.04.18 14:15:23<fart> like fairytale vs. mathbook or whatever
                 <stoopkid> sure
26.04.18 14:15:30<fart> the overarching linear thing....
26.04.18 14:15:44<fart> the overarching *philisophical thing....
26.04.18 14:16:00<fart> we want to have an idea of what we should be doing
26.04.18 14:16:16<fart> of how we fit into the bigger picture of what is happening
26.04.18 14:16:38<fart> and the tool is to have a map of the way things are in general
26.04.18 14:16:53<fart> ... enter the grand conceptual weave
26.04.18 14:18:02<fart> building up the interelationships between strongly correlated things (linear thinking) and weaker correlated things (latteral thinking)
26.04.18 14:18:28<fart> then we can better see where we fit in according to how things seem to be
26.04.18 14:20:31<stoopkid> seems reasonable
26.04.18 14:20:55<fart> thats my current orientation
26.04.18 14:21:15<fart> remember the "academy"?
26.04.18 14:22:35<stoopkid> so do you really need to represent them as an alternating sequence or could you just represent them as linear sequences with pointers between them that can be used to define the sections/interrelations/etc and compose a “weaved reading schedule” on the fly?
26.04.18 14:22:54<stoopkid> sure, actually was thinking a decent bit about that recently
26.04.18 14:22:55<fart> yes
26.04.18 14:22:58<fart> you could
26.04.18 14:23:24<fart> my plan is no work on somithng like this on the computer
26.04.18 14:23:28<fart> but extend also beyond reading
26.04.18 14:23:36<fart> have project weaves
26.04.18 14:23:57<stoopkid> no work is my favorite plan :P
26.04.18 14:24:17<fart> haha.... rewarding work is the mana of life!  :D
26.04.18 14:25:39<stoopkid> sounds cool though, are you planning to use a machine-logic framework to actually represent the subjects and the nature of their interrelations?
26.04.18 14:26:30<fart> my brain is the core... the computer is the cybernetic extension
26.04.18 14:29:19<stoopkid> but like, what kind of cybernetic extension, like a queryable knowledgebase?
26.04.18 14:30:49<fart> whatever it wants to be insofar as working towards maximizing integration
26.04.18 14:32:12<fart> think of your innerbrain as a monkey brain, your neo-cortex as an AI, and the monkeybrain and the neo-cortex can feel as if one thing because they can be well integrated, even though it is also a monkey brain using an AI.
26.04.18 14:34:46<stoopkid> so what you really wanna do hear is maximize the integration of the user and the machine?
26.04.18 14:34:52<stoopkid> here*
26.04.18 14:38:36<fart> hmmm.... but the interweaving seems like an even bigger idea here
26.04.18 14:38:54<fart> so its more like the integration for the purpose of creating the weave
26.04.18 14:39:57<fart> or augmenting the capacity to generate grand weaves which in turn inform one on one's place in reality which in turn inform one's actions
26.04.18 14:40:44<fart> thats sort of the point of intelligence i would say
26.04.18 14:42:08<stoopkid> hrm, seems like the opposite to me, these alternating sequences of bits of linear subjects seem to be just a semi-coincidental facet of how humans absorb information
26.04.18 14:43:25<stoopkid> so, id at least agree about the part about “capacity to generate these”
26.04.18 14:45:00<fart> is it REALLY coincidental points of contact? Or perhaps, something more dynamic?
26.04.18 14:45:09<fart> i go with the latter
26.04.18 14:45:30<fart> like generating the conditions for which problem solving occures
26.04.18 14:46:45<stoopkid> well, maybe i should say instead that neither the linear presentation nor the alternating presentation of the content are actually part of the logical structure of the content itself, these dont arise until the “presentation phase”
26.04.18 14:47:05<stoopkid> like, in sql terms its like a view rather than a table
26.04.18 14:50:40<fart> to go up a level in abstraction, the representations are experiences however, these can be contrasted, and the contrasts have potential.
26.04.18 14:50:57<fart> to go up a level in abstraction, the representations are experienced however, these can be contrasted, and the contrasts have potential.
26.04.18 14:51:41<stoopkid> like, its not *really* coincidental that a reasoning agent with only one dimension of time, operating under time-constraints, will have to task-switch between different resources, so that this will be a necessary structure for presentation, but this structure that includes the specific manner of task-switching between the different subjects isnt really part of the logical structure of those subjects
26.04.18 14:53:47<stoopkid> so it seems like a lot of what this really consists of is breaking down linear resources into collections of linked atomic resources that can be recomposed into the presentation of the user’s preference?
26.04.18 14:57:43<fart> the purposeful interweaving influences the experienced representation. my claim is that the weaves are themselves important.
26.04.18 14:58:27<fart> but not in a right vs. wrong sense of important
26.04.18 14:59:31<fart> more that the correct thing is to be purposeful in interweaving, but this has no bearing on the "correctness" of any specific inteweave
26.04.18 15:01:52<stoopkid> ok i can more or less agree with that, so, back to my other question, what does this have to do with.. “logic”?
26.04.18 15:05:47<fart> it can be embedded
26.04.18 15:06:10<fart> further, this can be embedded into it to the extent that it can be
26.04.18 15:06:36<fart> but i wouldnt limit embedding this into some kind of formal logic
26.04.18 15:06:41<fart> to me, that misses the point
26.04.18 15:07:20<stoopkid> oh i think misinterpreted earlier, so you were saying you want to apply this concept to the study of logic (as opposed to applying some machine-logic framework to this concept)?
26.04.18 15:14:48<fart> yes but not exclusively
26.04.18 15:15:28<stoopkid> right (unless we just cheat and call everything logic :)
26.04.18 15:15:48<fart> haha
26.04.18 15:16:18<fart> so you might have a bunch of books you want to work through on logic, you might inteweave them into one big logic project, or you might interweave some of them into other projects
26.04.18 15:23:35<stoopkid> well, i have to interweave another task into this for a bit but ill be back a little later, good to see you around
26.04.18 15:25:32<fart> ok same.... on both counts... seeya
26.04.18 16:00:23<editable-koo>still alive
26.04.18 16:00:37<fart> hey editable-koo
26.04.18 16:02:10<editable-koo>hey
26.04.18 16:02:22<fart> been busy i suppose?
26.04.18 16:03:04<editable-koo>well, been overwhelmed, rather
26.04.18 16:03:36<editable-koo>i have to admit im taking ample amounts of free time between trying to "work"
26.04.18 16:04:09<fart> what do you do in "free" time?
26.04.18 16:04:49<editable-koo>hiking, playing with kids, playing bomberman
26.04.18 16:05:20<fart> oh.... sounds fun
26.04.18 16:05:22<fart> :)
26.04.18 16:05:37<editable-koo>doing errands, getting new glasses, for example, today
26.04.18 16:05:59<fart> yeah..... sounds pleasently normal i guess...
26.04.18 16:06:00<fart> :)
26.04.18 16:06:15<editable-koo>sounds like youve had a rough time:)
26.04.18 16:06:25<fart> haha.....
26.04.18 16:06:45<fart> i guess i like the pressure
26.04.18 16:06:46<fart> :-O
26.04.18 16:07:09<editable-koo>:)
26.04.18 16:07:26<fart> i guess the idea is, when faced with insanity, i guess embrace it
26.04.18 16:07:36<fart> alot of things seem to be shifting simultaneously
26.04.18 16:07:46<fart> not much solid ground to stand on from my perspective
26.04.18 16:08:04<fart> so..... i try to invent something different
26.04.18 16:08:21<fart> a new kind of technique
26.04.18 16:09:03<fart> that way, when i get hit on the head and mugged at point A, i still gave points B...Z to work with
26.04.18 16:09:13<fart> that way, when i get hit on the head and mugged at point A, i still have* points B...Z to work with
26.04.18 16:12:18<fart> editable-koo: reading about git at the moment
26.04.18 16:15:47<editable-koo>the only insanity is our culture
26.04.18 16:16:13<editable-koo>but then...its easy to damage yourself when you get free
26.04.18 16:16:50<editable-koo>this culture doesnt teach kids how to move anywhere beyond the one fixed and enforced point
26.04.18 16:17:01<fart> ^^^
26.04.18 16:17:04<editable-koo>and there are dangers there
26.04.18 16:17:48<editable-koo>hey, i found that the riot irc bridge has been misbehaving, let me try to paste some missing pieces
26.04.18 16:17:55<fart> we dont learn to solve problems.... we learn to OBEY
26.04.18 16:18:23<fart> and we OBEY stupid people
26.04.18 16:18:28<fart> gonna be problems....
26.04.18 16:18:30<fart> :-O
26.04.18 16:20:08<fart> something that dovetails ALL of our conversations, from what me and stoopkid talked to what you and me talk....
26.04.18 16:20:25<fart> systems of proper re-educatation
26.04.18 16:20:46<fart> if we cant control the education system, maybe we should consider re-education systems
26.04.18 16:23:12<koo5[m]> so, after <HMCa> if we were to allow such you could put bottom for B in your example and then prove false     , i asked: How do you go on to prove something if youre stuck in an infiloop?
26.04.18 16:23:28<koo5[m]> oops, didnt mean to post it just yet, but nvm
26.04.18 16:23:44* koo5[m] sent a long message: koo5[m]_2018-04-26_20:23:43.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/rfAnTrvxdRHKZTUEXjmmgYzW>
26.04.18 16:27:21<editable-koo>of proper re-educatation
                 <editable-koo>|
                 <editable-koo>26.04.18 16:20:46<fart> if we cant control the education system, maybe we should consider re-education systems
                 <editable-koo>|
                 <editable-koo>26.04.18 16:23:12<koo5[m]> so, after <HMCa> if we were to allow such you could put bottom for B in your example and then prove false     , i asked: How do you go on to prove something if youre stuck in an infiloop?
                 <editable-koo>|
26.04.18 16:27:22<editable-koo>26.04.18 16:23:28<koo5[m]> oops, didnt mean to post it just yet, but nvm
                 <editable-koo>|
26.04.18 16:28:05<editable-koo>of proper re-educatation
                 <editable-koo>|
                 <editable-koo>26.04.18 16:20:46<fart> if we cant control the education system, maybe we should consider re-education systems
                 <editable-koo>|
                 <editable-koo>26.04.18 16:23:12<koo5[m]> so, after <HMCa> if we were to allow such you could put bottom for B in your example and then prove false     , i asked: How do you go on to prove something if youre stuck in an infiloop?
                 <editable-koo>|
26.04.18 16:28:06<editable-koo>26.04.18 16:23:28<koo5[m]> oops, didnt mean to post it just yet, but nvm
                 <editable-koo>|
26.04.18 16:28:12<editable-koo>26.04.18 13:36:10<fart> hello?
                 <editable-koo>|
26.04.18 16:28:13<editable-koo>26.04.18 13:37:50<stoopkid> hi
                 <editable-koo>|
                 <editable-koo>26.04.18 13:38:12<fart> hey stoopkid
                 <editable-koo>|
                 <editable-koo>26.04.18 13:38:14<fart> its discard
                 <editable-koo>|
                 <editable-koo>26.04.18 13:38:47<fart> -edes
                 <editable-koo>|
                 <editable-koo>26.04.18 13:38:56<stoopkid> heya how ya been
                 <editable-koo>|
                 <editable-koo>26.04.18 13:39:07<fart> hmmm..... good and bad
                 <editable-koo>|
26.04.18 16:28:14<editable-koo>26.04.18 13:39:19<fart> pretty intense mix i guess
                 <editable-koo>|
                 <editable-koo>26.04.18 13:39:22<fart> great and awful
                 <editable-koo>|
                 <editable-koo>26.04.18 13:39:23<fart> :-D
                 <editable-koo>|
                 <editable-koo>26.04.18 13:39:25<fart> you?
                 <editable-koo>|
                 <editable-koo>26.04.18 13:39:48<stoopkid> sorry to hear about the bad & awful parts; ive been alright
                 <editable-koo>|
26.04.18 16:28:15<editable-koo>26.04.18 13:40:27<fart> ok... yeah.... it is what it is
                 <editable-koo>|
                 <editable-koo>26.04.18 13:40:36<stoopkid> still studying logic and everything?
                 <editable-koo>|
                 <editable-koo>26.04.18 13:40:54<fart> hmmm..... i have a new master plan as of late
                 <editable-koo>|
                 <editable-koo>26.04.18 13:41:09<fart> i want logic to integrate, but im not sure how things will fall together
                 <editable-koo>|
                 <editable-koo>26.04.18 13:41:51<stoopkid> what do you mean integrate, like from calculus or like with sw integrations
                 <editable-koo>|
                 <editable-koo>26.04.18 13:42:19<fart> no... dictionary definition
                 <editable-koo>|
26.04.18 16:28:16<editable-koo>26.04.18 13:43:05<fart> im thinking of the nececity of what i am thinking of as concept weaves
                 <editable-koo>|
                 <editable-koo>26.04.18 13:43:17<fart> im thinking of the nececity of what i am *calling* concept weaves
                 <editable-koo>|
                 <editable-koo>26.04.18 13:43:38<stoopkid> “combine one thing with another so that they become  a whole”?
                 <editable-koo>|
                 <editable-koo>26.04.18 13:43:40<fart> which is the lateral weaving of linear subjects
                 <editable-koo>|
                 <editable-koo>26.04.18 13:43:45<fart> exactly
                 <editable-koo>|
26.04.18 16:28:17<editable-koo>26.04.18 13:46:06<stoopkid> can you give an example?
                 <editable-koo>|
                 <editable-koo>26.04.18 13:47:14<fart> take two books and alternate reading them in small sections
                 <editable-koo>|
                 <editable-koo>26.04.18 13:47:35<fart> or wiki articles, websites, whatever
                 <editable-koo>|
                 <editable-koo>26.04.18 13:48:07<fart> work in conceptually integrating them, of weaving them into a whole
                 <editable-koo>|
                 <editable-koo>26.04.18 13:48:53<stoopkid> gotcha, so, what do you mean when you say you want logic to do this, or maybe do you have an example of “failure to handle this” in logic?
                 <editable-koo>|
26.04.18 16:28:18<editable-koo>26.04.18 13:49:35<fart> i mean linear subjects within logic are game
                 <editable-koo>|
                 <editable-koo>26.04.18 13:49:47<fart>  or... linear frameworks
                 <editable-koo>|
                 <editable-koo>26.04.18 13:52:10<stoopkid> idk im thinking that sort of depends on how you model the subjects
                 <editable-koo>|
                 <editable-koo>26.04.18 13:52:48<fart> well... you have your own ideas apparently?
                 <editable-koo>|
                 <editable-koo>26.04.18 13:53:12<stoopkid> is the logic contained within the book linear or is it just the presentation of that logic in book format that’s linear
                 <editable-koo>|
26.04.18 16:28:19<editable-koo>26.04.18 13:53:39<fart> to be more precise, the path is linear, from a,b,c...
                 <editable-koo>|
                 <editable-koo>26.04.18 13:54:07<fart> a1,b1,c1 and a2,b2,c2  ->  a1,a2,b1,b2....
                 <editable-koo>|
                 <editable-koo>26.04.18 13:54:31<fart> linear_A linear_B -> weave
                 <editable-koo>|
                 <editable-koo>26.04.18 13:55:22<fart> linear_A and linear_B -> weave
                 <editable-koo>|
                 <editable-koo>26.04.18 13:57:40<stoopkid> so each of ai bi ci would be one of the sections of a book from your example, and the result of combining the two linear sequences into a weave is a sequence that alternates between the two sequences?
                 <editable-koo>|
26.04.18 16:28:20<editable-koo>26.04.18 13:58:01<fart> yes
                 <editable-koo>|
                 <editable-koo>26.04.18 14:01:45<stoopkid> so, why like this? i mean, im thinking you wouldnt be doing this for completely arbitrary linear subjects, like, the hobbit and a calculus textbook, so, im imagining you have some particular context for this in mind?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:02:19<fart> you could try it... it depends what you think
                 <editable-koo>|
                 <editable-koo>26.04.18 14:04:17* stoopkid tries it
                 <editable-koo>|
                 <editable-koo>26.04.18 14:04:31<fart> ok
                 <editable-koo>|
26.04.18 16:28:21<editable-koo>26.04.18 14:05:56<stoopkid> im not seeing the appeal of alternating back and forth between the books, at least not *arbitrarily*
                 <editable-koo>|
                 <editable-koo>26.04.18 14:06:20<stoopkid> sentence-by-sentence alternation for example
                 <editable-koo>04.18 14:06:21<fart> did you read a section of each of them?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:06:28<fart> no... a section
                 <editable-koo>|
                 <editable-koo>26.04.18 14:06:42<fart> something that you cluster together into a thing
                 <editable-koo>|
26.04.18 16:28:22<editable-koo>26.04.18 14:11:08<stoopkid> works better, now its more or less similar to normal human-level time-management and task-switching between learning resources (like say a college student with several textbooks and other books they need to read a bit of each night)
                 <editable-koo>|
                 <editable-koo>26.04.18 14:12:53<fart> yeah... i think that it might be better designed for how we can lea
                 <editable-koo>|
                 <editable-koo>26.04.18 14:13:15<fart> and i can also relate it to an overarching philisophical orientatio
                 <editable-koo>|
                 <editable-koo>26.04.18 14:13:17<fart> n
                 <editable-koo>|
                 <editable-koo>26.04.18 14:13:45<fart> on how we learn, i think we run out of focus reserves on any linear task
                 <editable-koo>|
26.04.18 16:28:23<editable-koo>26.04.18 14:14:20<fart> so by switching between linear tasks, we can work for long periods of time with maximum reserves
                 <editable-koo>|
                 <editable-koo>26.04.18 14:14:42<fart> switching a task is like refilling the gas tank
                 <editable-koo>|
                 <editable-koo>26.04.18 14:14:47<fart> its something new and interesting
                 <editable-koo>|
                 <editable-koo>26.04.18 14:14:59<fart> and its something to compare the other thing to
                 <editable-koo>|
                 <editable-koo>26.04.18 14:15:23<fart> like fairytale vs. mathbook or whatever
                 <editable-koo>|
26.04.18 16:28:24<editable-koo>                 <stoopkid> sure
                 <editable-koo>                 |
                 <editable-koo>26.04.18 14:15:30<fart> the overarching linear thing....
                 <editable-koo>|
                 <editable-koo>26.04.18 14:15:44<fart> the overarching *philisophical thing....
                 <editable-koo>|
                 <editable-koo>26.04.18 14:16:00<fart> we want to have an idea of what we should be doing
                 <editable-koo>|
                 <editable-koo>26.04.18 14:16:16<fart> of how we fit into the bigger picture of what is happening
                 <editable-koo>|
26.04.18 16:28:25<editable-koo>26.04.18 14:16:38<fart> and the tool is to have a map of the way things are in general
                 <editable-koo>|
                 <editable-koo>26.04.18 14:16:53<fart> ... enter the grand conceptual weave
                 <editable-koo>|
                 <editable-koo>26.04.18 14:18:02<fart> building up the interelationships between strongly correlated things (linear thinking) and weaker correlated things (latteral thinking)
                 <editable-koo>|
                 <editable-koo>26.04.18 14:18:28<fart> then we can better see where we fit in according to how things seem to be
                 <editable-koo>|
                 <editable-koo>26.04.18 14:20:31<stoopkid> seems reasonable
                 <editable-koo>|
26.04.18 16:28:26<editable-koo>26.04.18 14:20:55<fart> thats my current orientation
                 <editable-koo>|
                 <editable-koo>26.04.18 14:21:15<fart> remember the "academy"?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:22:35<stoopkid> so do you really need to represent them as an alternating sequence or could you just represent them as linear sequences with pointers between them that can be used to define the sections/interrelations/etc and compose a “weaved reading schedule” on the fly?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:22:54<stoopkid> sure, actually was thinking a decent bit about that recently
                 <editable-koo>|
                 <editable-koo>26.04.18 14:22:55<fart> yes
                 <editable-koo>|
26.04.18 16:28:27<editable-koo>26.04.18 14:22:58<fart> you could
                 <editable-koo>|
                 <editable-koo>26.04.18 14:23:24<fart> my plan is no work on somithng like this on the computer
                 <editable-koo>|
                 <editable-koo>26.04.18 14:23:28<fart> but extend also beyond reading
                 <editable-koo>|
                 <editable-koo>26.04.18 14:23:36<fart> have project weaves
                 <editable-koo>|
                 <editable-koo>26.04.18 14:23:57<stoopkid> no work is my favorite plan :P
                 <editable-koo>|
26.04.18 16:28:28<editable-koo>26.04.18 14:24:17<fart> haha.... rewarding work is the mana of life!  :D
                 <editable-koo>|
                 <editable-koo>26.04.18 14:25:39<stoopkid> sounds cool though, are you planning to use a machine-logic framework to actually represent the subjects and the nature of their interrelations?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:26:30<fart> my brain is the core... the computer is the cybernetic extension
                 <editable-koo>|
                 <editable-koo>26.04.18 14:29:19<stoopkid> but like, what kind of cybernetic extension, like a queryable knowledgebase?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:30:49<fart> whatever it wants to be insofar as working towards maximizing integration
                 <editable-koo>|
                 <editable-koo>26.04.18 14:32:12<fart> think of your innerbrain as a monkey brain, your neo-cortex as an AI, and the monkeybrain and the neo-cortex can feel as if one thing because they can be well integrated, even though it is also a monkey brain using an AI.
26.04.18 16:28:29<editable-koo>|
                 <editable-koo>26.04.18 14:34:46<stoopkid> so what you really wanna do hear is maximize the integration of the user and the machine?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:34:52<stoopkid> here*
                 <editable-koo>|
                 <editable-koo>26.04.18 14:38:36<fart> hmmm.... but the interweaving seems like an even bigger idea here
                 <editable-koo>|
                 <editable-koo>26.04.18 14:38:54<fart> so its more like the integration for the purpose of creating the weave
                 <editable-koo>|
26.04.18 16:28:30<editable-koo>26.04.18 14:39:57<fart> or augmenting the capacity to generate grand weaves which in turn inform one on one's place in reality which in turn inform one's actions
                 <editable-koo>|
                 <editable-koo>26.04.18 14:40:44<fart> thats sort of the point of intelligence i would say
                 <editable-koo>|
                 <editable-koo>26.04.18 14:42:08<stoopkid> hrm, seems like theite to me, these alternating sequences of bits of linear subjects seem to be just a semi-coincidental facet of how humans absorb information
                 <editable-koo>|
                 <editable-koo>26.04.18 14:43:25<stoopkid> so, id at least agree about the part about “capacity to generate these”
                 <editable-koo>|
                 <editable-koo>26.04.18 14:45:00<fart> is it REALLY coincidental points of contact? Or perhaps, something more dynamic?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:45:09<fart> i go with the latter
                 <editable-koo>|
26.04.18 16:28:31<editable-koo>26.04.18 14:45:30<fart> like generating the conditions for which problem solving occures
                 <editable-koo>|
                 <editable-koo>26.04.18 14:46:45<stoopkid> well, maybe i should say instead that neither the linear presentation nor the alternating presentation of the content are actually part of the logical structure of the content itself, these dont arise until the “presentation phase”
                 <editable-koo>|
                 <editable-koo>26.04.18 14:47:05<stoopkid> like, in sql terms its like a view rather than a table
                 <editable-koo>|
                 <editable-koo>26.04.18 14:50:40<fart> to go up a level in abstraction, the representations are experiences however, these can be contrasted, and the contrasts have potential.
                 <editable-koo>|
                 <editable-koo>26.04.18 14:50:57<fart> to go up a level in abstraction, the representations are experienced however, these can be contrasted, and the contrasts have potential.
                 <editable-koo>|
26.04.18 16:28:32<editable-koo>26.04.18 14:51:41<stoopkid> like, its not *really* coincidental that a reasoning agent with only one dimension of time, operating under time-constraints, will have to task-switch between different resources, so that this will be a necessary structure for presentation, but this structure that includes the specific manner of task-switching between the different subjects isnt really part of the logical structure of those subjects
                 <editable-koo>|
                 <editable-koo>26.04.18 14:53:47<stoopkid> so it seems like a lot of what this really consists of is breaking down linear resources into collections of linked atomic resources that can be recomposed into the presentation of the user’s preference?
                 <editable-koo>|
                 <editable-koo>26.04.18 14:57:43<fart> the purposeful interweaving influences the experienced representation. my claim is that the weaves are themselves important.
                 <editable-koo>|
                 <editable-koo>26.04.18 14:58:27<fart> but not in a right vs. wrong sense of important
                 <editable-koo>|
                 <editable-koo>26.04.18 14:59:31<fart> more that the correct thing is to be purposeful in interweaving, but this has no bearing on the "correctness" of any specific inteweave
                 <editable-koo>|
26.04.18 16:28:33<editable-koo>26.04.18 15:01:52<stoopkid> ok i can more or less agree with that, so, back to my other question, what does this have to do with.. “logic”?
                 <editable-koo>|
                 <editable-koo>26.04.18 15:05:47<fart> it can be embedded
                 <editable-koo>|
                 <editable-koo>26.04.18 15:06:10<fart> further, this can be embedded into it to the extent that it can be
                 <editable-koo>|
                 <editable-koo>26.04.18 15:06:36<fart> but i wouldnt limit embedding this into some kind of formal logic
                 <editable-koo>|
                 <editable-koo>26.04.18 15:06:41<fart> to me, that misses the point
                 <editable-koo>|
26.04.18 16:28:34<editable-koo>26.04.18 15:07:20<stoopkid> oh i think misinterpreted earlier, so you were saying you want to apply this concept to the study of logic (as opposed to applying some machine-logic framework to this concept)?
                 <editable-koo>|
                 <editable-koo>26.04.18 15:14:48<fart> yes but not exclusively
                 <editable-koo>|
                 <editable-koo>26.04.18 15:15:28<stoopkid> right (unless we just cheat and call everything logic :)
                 <editable-koo>|
                 <editable-koo>26.04.18 15:15:48<fart> haha
                 <editable-koo>|
                 <editable-koo>26.04.18 15:16:18<fart> so you might have a bunch of books you want to work through on logic, you might inteweave them into one big logic project, or you might interweave some of them into other projects
26.04.18 16:28:35<editable-koo>|
                 <editable-koo>26.04.18 15:23:35<stoopkid> well, i have to interweave another task into this for a bit but ill be back a little later, good to see you around
                 <editable-koo>|
                 <editable-koo>26.04.18 15:25:32<fart> ok same.... on both counts... seeya
                 <editable-koo>|
                 <editable-koo>26.04.18 16:00:23<editable-koo>still alive
                 <editable-koo>|
                 <editable-koo>26.04.18 16:00:37<fart> hey editable-koo
                 <editable-koo>|
                 <editable-koo>26.04.18 16:02:10<editable-koo>hey
26.04.18 16:28:36<editable-koo>|
                 <editable-koo>26.04.18 16:02:22<fart> been busy i suppose?
                 <editable-koo>|
                 <editable-koo>26.04.18 16:03:04<editable-koo>well, been overwhelmed, rather
                 <editable-koo>|
                 <editable-koo>26.04.18 16:03:36<editable-koo>i have to admit im taking ample amounts of free time between trying to "work"
                 <editable-koo>|
                 <editable-koo>26.04.18 16:04:09<fart> what do you do in "free" time?
                 <editable-koo>|
                 <editable-koo>26.04.18 16:04:49<editable-koo>hiking, playing with kids, playing bomberman
26.04.18 16:28:37<editable-koo>|
                 <editable-koo>26.04.18 16:05:20<fart> oh.... sounds fun
                 <editable-koo>|
                 <editable-koo>26.04.18 16:05:22<fart> :)
                 <editable-koo>|
                 <editable-koo>26.04.18 16:05:37<editable-koo>doing errands, getting new glasses, for example, today
                 <editable-koo>|
                 <editable-koo>26.04.18 16:05:59<fart> yeah..... sounds pleasently normal i guess...
                 <editable-koo>|
                 <editable-koo>26.04.18 16:06:00<fart> :)
                 <editable-koo>|
26.04.18 16:28:38<editable-koo>26.04.18 16:06:15<editable-koo>sounds like youve had a rough time:)
                 <editable-koo>|
                 <editable-koo>26.04.18 16:06:25<fart> haha.....
                 <editable-koo>04.18 16:06:45<fart> i guess i like the pressure
                 <editable-koo>|
                 <editable-koo>26.04.18 16:06:46<fart> :-O
                 <editable-koo>|
                 <editable-koo>26.04.18 16:07:09<editable-koo>:)
                 <editable-koo>|
26.04.18 16:28:39<editable-koo>26.04.18 16:07:26<fart> i guess the idea is, when faced with insanity, i guess embrace it
                 <editable-koo>|
                 <editable-koo>26.04.18 16:07:36<fart> alot of things seem to be shifting simultaneously
                 <editable-koo>|
                 <editable-koo>26.04.18 16:07:46<fart> not much solid ground to stand on from my perspective
                 <editable-koo>|
                 <editable-koo>26.04.18 16:08:04<fart> so..... i try to invent something different
                 <editable-koo>|
                 <editable-koo>26.04.18 16:08:21<fart> a new kind of technique
                 <editable-koo>|
26.04.18 16:28:40<editable-koo>26.04.18 16:09:03<fart> that way, when i get hit on the head and mugged at point A, i still gave points B...Z to work with
                 <editable-koo>|
                 <editable-koo>26.04.18 16:09:13<fart> that way, when i get hit on the head and mugged at point A, i still have* points B...Z to work with
                 <editable-koo>|
                 <editable-koo>26.04.18 16:12:18<fart> editable-koo: reading about git at the moment
                 <editable-koo>|
                 <editable-koo>26.04.18 16:15:47<editable-koo>the only insanity is our culture
                 <editable-koo>|
                 <editable-koo>26.04.18 16:16:13<editable-koo>but then...its easy to damage yourself when you get free
                 <editable-koo>|
26.04.18 16:28:41<editable-koo>26.04.18 16:16:50<editable-koo>this culture doesnt teach kids how to move anywhere beyond the one fixed and enforced point
                 <editable-koo>|
                 <editable-koo>26.04.18 16:17:01<fart> ^^^
                 <editable-koo>|
                 <editable-koo>26.04.18 16:17:04<editable-koo>and there are dangers there
                 <editable-koo>|
                 <editable-koo>26.04.18 16:17:48<editable-koo>hey, i found that the riot irc bridge has been misbehaving, let me try to paste some missing pieces
                 <editable-koo>|
                 <editable-koo>26.04.18 16:17:55<fart> we dont learn to solve problems.... we learn to OBEY
                 <editable-koo>|
                 <editable-koo>26.04.18 16:18:23<fart> and we OBEY stupid people
26.04.18 16:28:42<editable-koo>|
                 <editable-koo>26.04.18 16:18:28<fart> gonna be problems....
                 <editable-koo>|
                 <editable-koo>26.04.18 16:18:30<fart> :-O
                 <editable-koo>|
                 <editable-koo>26.04.18 16:20:08<fart> something that dovetails ALL of our conversations, from what me and stoopkid talked to what you and me talk....
                 <editable-koo>|
                 <editable-koo>26.04.18 16:20:25<fart> systems of proper re-educatation
                 <editable-koo>|
26.04.18 16:28:43<editable-koo>26.04.18 16:20:46<fart> if we cant control the education system, maybe we should consider re-education systems
                 <editable-koo>|
                 <editable-koo>26.04.18 16:23:12<koo5[m]> so, after <HMCa> if we were to allow such you could put bottom for B in your example and then prove false     , i asked: How do you go on to prove something if youre stuck in an infiloop?
                 <editable-koo>|
                 <editable-koo>26.04.18 16:23:28<koo5[m]> oops, didnt mean to post it just yet, but nvm
                 <editable-koo>|
                 <editable-koo>26.04.18 16:23:44* koo5[m] sent a long message: koo5[m]_2018-04-26_20:23:43.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/rfAnTrvxdRHKZTUEXjmmgYzW>
                 <editable-koo>|
26.04.18 16:29:59<editable-koo>sorry for the interruption
26.04.18 16:30:37<editable-koo>still trying to paste yours and stoops convo into matrix, because parts are missing there
26.04.18 16:31:09* koo5[m] posted a file: lost_log (155KB) <https://matrix.org/_matrix/media/v1/download/matrix.org/GubHYooPdhFTmobRKmXQLnti>
26.04.18 16:32:15<editable-koo>and the four lines from hmc that i now pasted didnt make it through into matrix
26.04.18 16:32:32<editable-koo>and my question didnt make it from matrix to irc
26.04.18 16:33:18<koo5[m]> 26.04.18 16:32:15<editable-koo>and the four lines from hmc that i now pasted didnt make it through into matrix
                 <koo5[m]> 26.04.18 16:32:32<editable-koo>and my question didnt make it from matrix to irc
26.04.18 16:34:28<editable-koo>i suggest we all stick to irc until this blows over
26.04.18 16:41:06<editable-koo>so, re-education? how do you envision this?:)
26.04.18 16:44:50<fart> developing institutions that require re-education
26.04.18 16:45:01<fart> new kinds of degrees
26.04.18 16:45:21<fart> than open the doors no new kinds of jobs and such
26.04.18 16:45:51<fart> or that open new opportunities
26.04.18 16:46:31<fart> so you graduate school and you can go to colledge and waist a bunch of money to further learn how to properly obey, or you can take a different path
26.04.18 16:47:52<fart> something systematic that builds on itself and the interactions of communities of people
26.04.18 16:54:34<fart> editable-koo: you see my text?
26.04.18 17:15:47*** Quit: fart (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Read error: Connection reset by peer
26.04.18 17:16:02*** Join: fart (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
26.04.18 17:37:39<editable-koo>i do, fart
26.04.18 17:38:49<fart> <fart> editable-koo: the idea is that things can be constructed bottom up that
                 <fart>        can do useful things and have political leverage, and we can call these
                 <fart>        things institutions. These can have barriers to entry that are aligned
                 <fart>        to the goals of the enterprise.				        [13:07]
26.04.18 17:38:52<fart> <fart> this i think much more clearly expresses the orientation i am
26.04.18 17:38:55<fart>        considering						        [13:09]
26.04.18 17:38:59<fart>  
26.04.18 17:39:19<editable-koo>i didnt see that part
26.04.18 17:39:26<fart> netsplit i guess?
26.04.18 17:40:23<editable-koo>hmm
26.04.18 17:41:20<editable-koo>netsplits look different
26.04.18 17:41:32<fart> i just reconneted to all channels
26.04.18 17:41:36<fart> might have been just me?
26.04.18 17:41:37<fart> dunno
26.04.18 17:41:51<fart> erc autoreconnected
26.04.18 17:42:25<editable-koo>26.04.18 16:47:52<fart> something systematic that builds on itself and the interactions of communities of people
                 <editable-koo>26.04.18 16:54:34<fart> editable-koo: you see my text?
                 <editable-koo>26.04.18 17:15:47*** Quit: fart (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Read error: Connection reset by peer
                 <editable-koo>26.04.18 17:16:02*** Join: fart (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
                 <editable-koo>26.04.18 17:37:39<editable-koo>i do, fart
                 <editable-koo>26.04.18 17:38:49<fart> <fart> editable-koo: the idea is that things can be constructed bottom up that
26.04.18 17:44:07<editable-koo>maybe its freenode thats having problems and not matrix?
26.04.18 17:44:46-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
26.04.18 17:44:52*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
26.04.18 17:44:53<fart> at least for me there was some issue
26.04.18 17:45:05*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
26.04.18 17:47:51<editable-koo>testing testing 132
26.04.18 17:47:58<editable-koo>*123
26.04.18 17:48:07<fart> i see
26.04.18 17:48:39<koom> we too
26.04.18 17:50:27<fart> a simple idea i just had is to have a community recommendation aggregator.
26.04.18 17:50:49<fart> recommends media
26.04.18 17:51:06<fart> maybe just use a social media site, like minds.com or something
26.04.18 17:51:48<fart> but im not sure how to aggregate community recomendations under one account
26.04.18 17:51:59<fart> maybe just using an irc bot?
26.04.18 17:52:15<fart> and agregate it into a text file and upload to social media?
26.04.18 17:54:51<fart> i do like the idea of something like a federated accound anywho....
26.04.18 17:54:58<fart> account*
26.04.18 19:19:21*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
26.04.18 19:20:17*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
26.04.18 20:45:34*** Quit: fart (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
27.04.18 03:15:52-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
27.04.18 03:15:58*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
27.04.18 03:16:38*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
27.04.18 03:51:05<koom_> http://i.imgur.com/nkR2AoN.png
27.04.18 03:51:09<koom_> wat
27.04.18 04:01:22<koom_> maybe a lobotomy would make this more approachable?
27.04.18 05:08:05*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
27.04.18 05:17:39*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
27.04.18 05:34:19*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 265 seconds
27.04.18 05:34:33*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
27.04.18 11:37:50<HMCa> sometimes proofs can feel lobotomizing...
27.04.18 13:07:05<stoopkid> koo5[m]: i agree that isnt a great notation
27.04.18 13:09:01<stoopkid> if you’re just trying to read it though, notice how each vertical line leads down to an implication
27.04.18 13:10:47<stoopkid> everything directly to the right of that line is everything (relevant) that you can prove just with the premises of that implication and the premises from the lines to the left
27.04.18 13:12:26<stoopkid> then remember your elim rule for OR; {p | q, p -> c, q -> c} => c
 27.04.18 13:12:46<stoopkid> with q for c
27.04.18 13:13:20<stoopkid> the whole proof here is just the same process-of-elimination proof we did in agda
27.04.18 13:13:50<stoopkid> maybe with some classical logic thrown in at some point for no reason
27.04.18 13:14:28<stoopkid> line 11, double negation elimination
27.04.18 13:15:37<stoopkid> so we start with the premises p | q, ~p, and we derive the premises of the OR-elim rule with q for c, an from there we can prove q by applying OR-elim at the end
27.04.18 13:16:33<stoopkid> just look at the Premises on the furthest left line, and then read it bottom-to-top from that point on and its just like natural deduction
27.04.18 13:22:45<stoopkid> or, at the very bottom, stick “16. (p | q)-> ~p -> q          Implication Introduction 1, 2, 15” and then just read it bottom-to-top
27.04.18 14:00:54*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
27.04.18 14:01:18*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
27.04.18 15:39:13*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
27.04.18 15:56:03*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
27.04.18 15:59:09*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 264 seconds
27.04.18 16:09:47*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
28.04.18 01:23:51<HMCa> so I just finished a couple of reads of the mosaic whitepaper...
28.04.18 02:35:01<HMCa> ok, so I read it another time too, now
28.04.18 02:38:08<HMCa> I'm a little shocked by some aspects... and I'm a little shocked that we get compared to this
28.04.18 04:17:11*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
28.04.18 07:04:00<koo5[m]> youre easily shocked
28.04.18 07:22:37*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
28.04.18 08:32:44*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
28.04.18 09:14:09*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
28.04.18 09:20:38<stoopkid> HMCa: this is the first ive heard of either mosaic or the comparison
28.04.18 12:27:02*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
28.04.18 12:27:55-SaslServ- kook!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
28.04.18 12:28:02*** Join: kook (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
28.04.18 12:58:18-SaslServ- koom__!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
28.04.18 12:58:24*** Join: koom__ (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
28.04.18 13:00:57*** Quit: kook (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 264 seconds
28.04.18 16:21:53*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 248 seconds
28.04.18 16:22:27*** Quit: koom__ (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
28.04.18 17:15:16*** Join: BurtPretzles (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
28.04.18 17:42:20<BurtPretzles> anybody?
28.04.18 18:36:04<stoopkid> BurtPretzles: hi
28.04.18 18:36:51<BurtPretzles> hey stoopkid
28.04.18 18:36:55<BurtPretzles> its discard
28.04.18 18:37:04<stoopkid> heya
28.04.18 18:37:23<BurtPretzles> whats the good word?
28.04.18 18:38:42<stoopkid> for which topic heh
28.04.18 18:38:53<BurtPretzles> just in general
28.04.18 18:38:56<BurtPretzles> whatever interests
28.04.18 18:40:07<stoopkid> busy heh, nothing im working on at the moment is very interesting :)
28.04.18 18:40:53<BurtPretzles> nothing interesting
28.04.18 18:40:54<BurtPretzles> ffs
28.04.18 18:40:58<BurtPretzles> how do you deal with it?
28.04.18 18:41:01<BurtPretzles> :-O
28.04.18 18:41:36<stoopkid> im constantly wasted
28.04.18 18:41:49<BurtPretzles> ohhh.....
28.04.18 18:41:56<BurtPretzles> alchohol?
28.04.18 18:42:29<stoopkid> jk heh h/o gotta do something for a bit, 10-15 mins or so
28.04.18 18:42:53<BurtPretzles> ok
28.04.18 19:38:40*** Quit: BurtPretzles (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
29.04.18 00:24:07*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 00:24:09-SaslServ- kook!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
29.04.18 00:24:17*** Join: kook (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
29.04.18 01:13:14*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Remote host closed the connection
29.04.18 01:13:39*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 01:37:19*** Quit: kook (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Remote host closed the connection
29.04.18 01:37:20*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Remote host closed the connection
29.04.18 01:37:33-SaslServ- kook!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
29.04.18 01:37:37*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 01:37:39*** Join: kook (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
29.04.18 03:38:07-SaslServ- koom__!~sirdancea@132.154.broadband.iol.cz has just authenticated as you (sirdancealot)
29.04.18 03:38:13*** Join: koom__ (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
29.04.18 03:38:18*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 03:39:21*** Quit: kook (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
29.04.18 03:39:55*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 268 seconds
29.04.18 03:47:05*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
29.04.18 03:47:42*** Quit: koom__ (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
29.04.18 08:22:23*** Join: vepsilip (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
29.04.18 08:22:33<vepsilip> hello...?
29.04.18 08:37:49*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
29.04.18 08:48:21*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 264 seconds
29.04.18 09:21:13<HMCa> vepsilip: hi
29.04.18 09:21:28<vepsilip> hey HMCa
29.04.18 09:21:50<vepsilip> any thing interesting going on now a days?
29.04.18 09:21:54<vepsilip> im discardedes
29.04.18 09:21:58<vepsilip> adam789654123
29.04.18 09:22:09<vepsilip> lost my last password
29.04.18 09:22:19<vepsilip> so ive just been making up new names every day now
29.04.18 10:07:57*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
29.04.18 10:19:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
29.04.18 10:19:55*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
29.04.18 10:45:52<HMCa> thats fun
29.04.18 10:50:13<vepsilip> :-2
29.04.18 10:50:15<vepsilip> :-)
29.04.18 11:20:59-SaslServ- kook!~sirdancea@193.86.78.254 has just authenticated as you (sirdancealot)
29.04.18 11:21:05*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
29.04.18 11:51:44*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wdcomuaenfulkmjy) left #AutoNomic: Quit: Connection closed for inactivity
29.04.18 12:20:50<editable-koo>still alive!
29.04.18 12:21:47<editable-koo>oh, you actually replied to my lobotomy remark
29.04.18 12:21:57<editable-koo>i forgot to not trust matrix
29.04.18 12:25:35<vepsilip> hey editable-koo
29.04.18 12:25:59<kook> hey
29.04.18 12:26:10<kook> hows it going?
29.04.18 12:26:18<vepsilip> pretty good maybe?
29.04.18 12:26:21<vepsilip> dunn
29.04.18 12:26:22<vepsilip> o
29.04.18 12:26:27<vepsilip> try to focus on the positive
29.04.18 12:26:38<vepsilip> you?
29.04.18 12:27:26<kook> if you dont know, then its probably not so good, but you have hope..:)
29.04.18 12:27:32<kook> quite alright
29.04.18 12:28:02<kook> my biggest problem right now is sticky sweaty skin
29.04.18 12:28:15<kook> and no spare clothes
29.04.18 12:28:26<vepsilip> hmmm.... you dont need stickems
29.04.18 12:28:29<kook> oh and a misbehaving bluetooth keyboard
                 <vepsilip> eh?
29.04.18 12:28:50<vepsilip> hardware issues..... ughhhh
29.04.18 12:29:53<kook> if youre into keyboards, and youve seen those new bluetooth thinkpad keyboards...theyre not worth it i think
29.04.18 12:30:50<kook> my number one issue...it seems you cant really use any kind of wireless keyboard if you type on two keyboards simultaneously like i do
29.04.18 12:30:57<vepsilip> i went to a bestbuy like 10 years ago and tried a keyboard and thought, wow! i really like this.
29.04.18 12:30:58<kook> the random delays screw it up
29.04.18 12:31:03<vepsilip> nothing since then though
29.04.18 12:31:11<kook> nice
29.04.18 12:31:27<vepsilip> it was an ergonomic logitec
29.04.18 12:31:38<vepsilip> and the action on the keys was AMAZING
29.04.18 12:31:47<vepsilip> it felt and typed really nicely imo
29.04.18 12:32:08<vepsilip> didnt want to fork the hundred bucks though
29.04.18 12:32:57<vepsilip> do you use simultaneous hotkeys or something?
29.04.18 12:33:54<kook> no, just typing on roughly a half of each, and the little delays make my letters out of order
29.04.18 12:34:04<vepsilip> oh
29.04.18 12:34:18<vepsilip> i did work on a simultaneous hotkey project in the past
29.04.18 12:34:33<vepsilip> actually really opens up the field of what is convenient on the keyboard
29.04.18 12:34:48<vepsilip> but its tricky because its not a standard technique
29.04.18 12:34:56<vepsilip> so on emacs, although i basically got it to work, it broke other stuff
29.04.18 12:35:05<vepsilip> like keyboard macros
29.04.18 12:35:14<kook> sounds intriguing
29.04.18 12:35:37<vepsilip> yeah.... it was pretty f*cking awsome imo
29.04.18 12:35:56<vepsilip> havent been doing much programming in the past year, but that was one thing that i worked on for like a month or so
29.04.18 12:36:07<vepsilip> and i really liked it
29.04.18 12:36:35<vepsilip> so for example, you might press left and right simultaneously and that hotkeys to change how the keyboard interacts with the arrow keys
29.04.18 12:36:51<vepsilip> how the program interacts with the arrow keys
29.04.18 12:36:56<vepsilip> its easier than the keychords
29.04.18 12:37:08<vepsilip> i like the idea more than the keychords
29.04.18 12:37:30<vepsilip> but you cant do it on letters because the tolerance is too small
29.04.18 12:37:53<vepsilip> if you type fast, it can read consecutive keys as simultaneous
29.04.18 12:38:04<vepsilip> but some things are safe
29.04.18 12:38:06<vepsilip> like arrow keys
29.04.18 12:39:25<vepsilip> "simultaneous" is really just a small tolerance for the time
29.04.18 12:40:28<kook> ic
29.04.18 13:06:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cpjijgfedeuajgbp, stoopkid: stoopkid)
29.04.18 13:25:49<editable-koo>ok, that fitch proof makes a little bit of sense now, thx
29.04.18 13:55:52<editable-koo>just scored a microsoft natural wireless in the unwanted stuff bin
29.04.18 13:56:12<editable-koo>and a dirty mouse that goes along with it i guess
29.04.18 13:57:43<vepsilip> huh
29.04.18 13:58:22<editable-koo>uhuh?
29.04.18 13:59:07<vepsilip> like a grunt
29.04.18 13:59:11<vepsilip> like... oh
29.04.18 13:59:18<vepsilip> an acknowledgement
29.04.18 14:01:43<editable-koo>i c
29.04.18 14:02:24<vepsilip> :)
29.04.18 14:07:38*** Quit: kook (~sirdancea@193.86.78.254) left #AutoNomic: Remote host closed the connection
29.04.18 14:08:19*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
29.04.18 14:12:11<stoopkid> editable-koo: cool glad that helped, and now i know what those proofs are called heh
29.04.18 14:32:08*** Quit: kook (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 256 seconds
                 *** Quit: koom (~koom@193.86.78.254) left #AutoNomic: Ping timeout: 256 seconds
29.04.18 15:46:16*** Quit: vepsilip (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
29.04.18 19:02:45*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cpjijgfedeuajgbp) left #AutoNomic: Quit: Connection closed for inactivity
29.04.18 19:08:31*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-zefdmeaxlltddtll, stoopkid: stoopkid)
29.04.18 23:52:45*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zefdmeaxlltddtll) left #AutoNomic: Quit: Connection closed for inactivity
30.04.18 03:20:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 264 seconds
30.04.18 03:32:53*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
30.04.18 04:27:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 268 seconds
30.04.18 04:44:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
30.04.18 07:31:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bmjnncpnvcqtxabe, stoopkid: stoopkid)
30.04.18 10:37:31*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
30.04.18 10:42:48*** Quit: koom (~koom@193.86.78.254) left #AutoNomic: Ping timeout: 255 seconds
30.04.18 11:01:17*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bmjnncpnvcqtxabe) left #AutoNomic: Quit: Connection closed for inactivity
30.04.18 11:07:57*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
30.04.18 11:36:52*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-miemwdpbefuljopy, stoopkid: stoopkid)
30.04.18 11:40:58*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
30.04.18 11:41:20*** Quit: kook (~sirdancea@193.86.78.254) left #AutoNomic: Remote host closed the connection
30.04.18 11:41:48*** Join: kook (~sirdancea@193.86.78.254, sirdancealot: koo5)
30.04.18 12:06:46*** Join: koom__ (~sirdancea@193.86.78.254, sirdancealot: koo5)
30.04.18 12:09:45*** Quit: kook (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 256 seconds
30.04.18 13:13:05*** Quit: koom__ (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 248 seconds
30.04.18 13:13:31*** Quit: koom (~koom@193.86.78.254) left #AutoNomic: Ping timeout: 265 seconds
01.05.18 01:10:23*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01.05.18 01:10:49*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01.05.18 02:33:49*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
01.05.18 08:20:35*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
01.05.18 09:38:30*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
01.05.18 10:06:48*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Remote host closed the connection
01.05.18 10:07:01*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
01.05.18 11:54:48<HMCa> the "eltoo" protocol paper is interesting... reminds me of domob's approach for sidechannel games
#AutoNomic> 01.05.18 15:09:29*** Join: editable-koo (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 3 months 4 days 20 hours 58 minutes 43 seconds ago
                 *** Names: editable-koo kook koom daemoz stoopkid dmiles lexxus[m] genuinelyfx[m] koo5[m] @ChanServ HMCa Tamara_ jibble__ Deadhand vbmithr cantora
                 *** End of /NAMES list.
01.05.18 15:28:53*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Remote host closed the connection
#AutoNomic> 01.05.18 17:32:38*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 3 months 4 days 23 hours 21 minutes 52 seconds ago
                 *** Names: editable-koo kook daemoz stoopkid dmiles lexxus[m] genuinelyfx[m] koo5[m] @ChanServ HMCa Tamara_ jibble__ Deadhand vbmithr cantora
                 *** End of /NAMES list.
01.05.18 19:05:18*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
02.05.18 01:28:01<HMCa> :14 <HMCa> well, sure
02.05.18 01:28:02<HMCa> :15 <HMCa> it'll work, or kill us all, or fail and we'll die anyway.  Car or bomb or inconsequential?
02.05.18 01:28:04<HMCa> :16 <HMCa> I think you know it at least is almost mindbendingly unlikely to do nothing at all...
02.05.18 01:28:07<HMCa> :16 <HMCa> that leaves car or bomb.
02.05.18 01:28:10<HMCa> :17 <HMCa> it shoukd be obviously less likely (by far) to be bomb than newtau, or mosaic, or cardano, or.... probably anything else anyone will think up which outsiders will conflate?
02.05.18 01:28:14<HMCa> :18 <HMCa> so, most likely it is a car... and certainly it is most likely to be a car out of what we see today?
02.05.18 01:28:17<HMCa> :18 <HMCa> we can never show it to be a car
02.05.18 01:28:19<HMCa> :18 <HMCa> we can never show it to not be a bomb
02.05.18 01:28:24<HMCa> :19 <HMCa> these are impossible except on basically some total horizon of time, right?
02.05.18 01:28:43<HMCa> I haven't done this particular PSA in awhile, heh
02.05.18 01:28:56<HMCa> disclaimer: autonomic may be hazardous to your health
02.05.18 04:25:24*** Join: suiqiublockchain (~suiqiublo@180.162.45.230, (unauthenticated): realname)
02.05.18 04:45:11*** Join: suiqiu_ (~suiqiublo@180.162.45.230, (unauthenticated): realname)
02.05.18 04:47:35*** Quit: suiqiublockchain (~suiqiublo@180.162.45.230) left #AutoNomic: Ping timeout: 240 seconds
02.05.18 05:09:10*** Quit: suiqiu_ (~suiqiublo@180.162.45.230) left #AutoNomic: Remote host closed the connection
02.05.18 05:09:35*** Join: suiqiu_ (~suiqiublo@180.162.45.230, (unauthenticated): realname)
02.05.18 05:28:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02.05.18 05:28:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.05.18 05:46:48*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
02.05.18 05:47:15*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
02.05.18 06:34:07*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
02.05.18 07:09:34*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
02.05.18 07:24:49*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
                 *** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
02.05.18 07:25:21*** Quit: suiqiu_ (~suiqiublo@180.162.45.230) left #AutoNomic: Ping timeout: 248 seconds
02.05.18 07:27:14*** Join: suiqiublockchain (~suiqiublo@180.162.45.230, (unauthenticated): realname)
02.05.18 07:31:44*** Quit: suiqiublockchain (~suiqiublo@180.162.45.230) left #AutoNomic: Remote host closed the connection
02.05.18 07:32:04*** Join: suiqiublockchain (~suiqiublo@180.162.45.230, (unauthenticated): realname)
02.05.18 07:44:44*** Quit: suiqiublockchain (~suiqiublo@180.162.45.230) left #AutoNomic: Remote host closed the connection
02.05.18 07:45:04*** Join: suiqiublockchain (~suiqiublo@180.162.45.230, (unauthenticated): realname)
02.05.18 09:50:05*** Join: koom (~koom@37-48-5-160.tmcz.cz, (unauthenticated): realname)
02.05.18 10:04:59*** Quit: koom (~koom@37-48-5-160.tmcz.cz) left #AutoNomic: Read error: Connection reset by peer
02.05.18 10:05:18*** Join: koom (~koom@37-48-5-160.tmcz.cz, (unauthenticated): realname)
02.05.18 10:19:33*** Quit: koom (~koom@37-48-5-160.tmcz.cz) left #AutoNomic: Ping timeout: 264 seconds
02.05.18 10:45:37*** Join: koom (~koom@37-48-5-160.tmcz.cz, (unauthenticated): realname)
02.05.18 11:15:48*** Quit: koom (~koom@37-48-5-160.tmcz.cz) left #AutoNomic: Ping timeout: 256 seconds
02.05.18 11:19:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02.05.18 11:19:54*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.05.18 11:24:55*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02.05.18 11:25:22*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.05.18 15:20:33*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
02.05.18 15:30:33*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
02.05.18 18:44:19*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
                 *** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
02.05.18 20:47:27*** Connecting...
#AutoNomic> 03.05.18 10:29:24*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 3 months 6 days 16 hours 18 minutes 37 seconds ago
                 *** Names: editable-koo koom suiqiu_ daemoz stoopkid dmiles lexxus[m] genuinelyfx[m] koo5[m] @ChanServ HMCa Tamara_ jibble__ Deadhand vbmithr cantora
                 *** End of /NAMES list.
03.05.18 11:16:33*** Connecting...
03.05.18 11:16:59*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 3 months 6 days 17 hours 6 minutes 13 seconds ago
                 *** Names: editable-koo koom suiqiu_ daemoz stoopkid dmiles lexxus[m] genuinelyfx[m] koo5[m] @ChanServ HMCa Tamara_ jibble__ Deadhand vbmithr cantora
                 *** End of /NAMES list.
03.05.18 11:58:12*** Join: editable-stoopki (~stoopkid@unaffiliated/stoopkid, stoopkid: stoopkid)
03.05.18 11:59:02*** Quit: editable-stoopki (~stoopkid@unaffiliated/stoopkid) left #AutoNomic: Client Quit
03.05.18 13:38:48*** Join: editable-stoopki (~stoopkid@unaffiliated/stoopkid, stoopkid: stoopkid)
03.05.18 13:51:48<editable-stoopki> test3
03.05.18 14:44:05*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
03.05.18 14:54:51*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
03.05.18 15:30:53<editable-koo>all tests passed!
03.05.18 18:49:37*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
04.05.18 02:39:45*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
04.05.18 02:40:10*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.05.18 05:48:38<dmiles> here are the test my logic engine has to pass https://github.com/TeamSPoon/logicmoo_base/tree/master/t/inference_test/cyc
04.05.18 05:49:14<dmiles> it might be fun to try autonomic on them
04.05.18 05:50:18<dmiles> the tests treat file lines as assertions until it reaches the line (query ...)
04.05.18 05:50:54<dmiles> then that is what is queried.. then all the lines after should be (answer ..) which show the expected testign results
04.05.18 05:55:33<dmiles> the company i worked for got a 2 million dollar grant to pass them
04.05.18 07:01:07*** Quit: suiqiu_ (~suiqiublo@180.162.46.103) left #AutoNomic: Remote host closed the connection
04.05.18 07:01:32*** Join: suiqiu_ (~suiqiublo@180.162.46.103, (unauthenticated): realname)
04.05.18 07:31:13*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 248 seconds
04.05.18 07:45:27*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
04.05.18 11:59:15*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
04.05.18 12:12:53*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
04.05.18 14:42:16<stoopkid> dmiles: from who
04.05.18 14:43:30<stoopkid> looks like some military AI stuff
04.05.18 14:47:22<dmiles> office of disruptive techology
04.05.18 14:49:39<stoopkid> looks like they're located right near me
04.05.18 14:51:17<dmiles> DTO, IAO (Information Awareness Office) supported Teknowledge and Cycorp
04.05.18 14:51:28<dmiles> (that project was DTO)
04.05.18 14:53:10<dmiles> Logicmoo is a completely fresh recreation/implementation of what i created back then
04.05.18 14:53:34<dmiles> by accident someone forgot to secure a few servers
04.05.18 14:53:47<stoopkid> lol
04.05.18 14:54:02<dmiles> and much of our work reposiory leaked out in 2006
04.05.18 14:54:53<dmiles> it was simply they forgot to passwrd protect the cgi-bin that served up the CVS
04.05.18 14:54:54<stoopkid> i guess all those queries about middle eastern oil are just an arbitrary hypothetical example problem? XD
04.05.18 14:55:27<dmiles> yes. most if not all data was manufatured
04.05.18 14:55:35<dmiles> was made up for the project
04.05.18 14:56:05<stoopkid> well, made up maybe, but, they seem to have a general theme in mind.. heh
04.05.18 14:57:32<stoopkid> they probably should've obfuscated the problems, it would be better to do so for testing anyway so that you can't use domain-specific knowledge in the reasoner impl.
04.05.18 14:57:41<stoopkid> i.e. can't cheat based on understanding of the domain
04.05.18 14:59:16<stoopkid> maybe we can come up with a more neutral problem set based on nutrition and farming or something lol
04.05.18 14:59:43<dmiles> yeah jsut ssome global fiund/replace and it can work out pretty nicely
04.05.18 15:01:06<stoopkid> s/PetroleumProduct/Tomato/g, s/TerroristAct/Friendship/g, XD
04.05.18 15:01:53<dmiles> hehe
04.05.18 15:03:21<stoopkid> so.. does solving these problems correctly require use of domain-specific knowledge, or is the intention for the reasoner to be able to get the correct answers without making any assumptions about the meanings of individual labels?
04.05.18 15:03:39<dmiles> or  Petrollium  DanceMoves      TerroristAttack  HouseParty
04.05.18 15:05:13<dmiles> well there are some larger KB content that it is aligned with
04.05.18 15:05:36<stoopkid> gotcha, like a background context?
04.05.18 15:05:37<dmiles> that it can also load to supplicmant its knowledge
04.05.18 15:06:02<dmiles> well here is the thing .. the assertion list was actually the Proofs :P
04.05.18 15:06:28<dmiles> and the background was stored elwhere
04.05.18 15:06:44<dmiles> so to cheat the guy worked before me saved off Cyc's proofs and made it his input
04.05.18 15:07:08<dmiles> so the only data i'd see is exactly what was needed for proof
04.05.18 15:07:51<dmiles> if done right one would take all the test assertions and thrrow them into a file
04.05.18 15:08:07<dmiles> and then run the queries
04.05.18 15:08:35<dmiles> oops osrry tha ti still cheating...
04.05.18 15:09:24<dmiles> here is the background files.. http://logicmoo.org/docs/tekn/www/FASIT/project/KBs/
04.05.18 15:09:56<dmiles> mostly this one http://logicmoo.org/docs/tekn/www/FASIT/project/KBs/HPKBCrisis_Context.kif
04.05.18 15:12:00<dmiles> the main important aspect was to predict future behavour based on past intell
04.05.18 15:12:35<dmiles> and construct strategies that would cause diffrernt outcomes
04.05.18 15:12:51<dmiles> we'd (the US) had been making up wargames for about 10 years involving Afganistan, Iraq, Israel, SA, Kuwait and Iran .. mainly because the gulf war intel gave us a good example of what US forces migh tlook like there.. Also russian intell about Afgan helped
04.05.18 15:14:43<dmiles> sometimes i jokingly think congress and generals have seen so many powerpoints about AI warfighting they started forget after a few years this was all just cooked up to test our software systems
04.05.18 15:15:25<dmiles> some documents even have Iran and Iraq forming a coalition against
04.05.18 15:19:07<stoopkid> doesn't sound much like a joke heh, wouldn't surprise me at all
04.05.18 15:19:14<dmiles> like https://www.globalsecurity.org/military/library/report/2001/Reference.pdf
04.05.18 15:19:35<dmiles> all of that is tottaly fake and fake news
04.05.18 15:20:14<dmiles> like..
04.05.18 15:20:16<dmiles> JUNE 20XX
                 <dmiles> · Third violent incident occurs in Mecca.
                 <dmiles> · Saudi Arabia bans Iranian and Iraqi pilgrims
                 <dmiles> from the Holy Cities
04.05.18 15:20:49<dmiles> Iran threatens a Jihad to wrest control of the Holy Cities; Iraq announces its support.
                 <dmiles> · Iraq meets secretly with Iran to form a coalition (IIC).
04.05.18 15:21:33<dmiles> at leasat the last two sentences are completely unrealistic
04.05.18 15:21:57<dmiles> we even have docs with Sadam Hussais with WMDs :P
04.05.18 15:22:17<stoopkid> 316 pages, somebody put a lot of work into this storyline heh
04.05.18 15:23:18<dmiles> i sometiems actualyl wonder if we decided to roll ahead and see what would happen if we played it all out
04.05.18 15:25:36<dmiles> basicalyl the prover system is a huge logical Nomic
04.05.18 15:26:05<stoopkid> what do you mean "play it all out"? as a simulation or IRL?
04.05.18 15:26:28<dmiles> play out IRL the simulation ythat had been brewing for over a decare
04.05.18 15:26:37<dmiles> decade*
04.05.18 15:26:57<stoopkid> hrm
04.05.18 15:27:29<dmiles> it was a decade long Nomic game
04.05.18 15:27:39<dmiles> decade long game of DnD
04.05.18 15:29:34<stoopkid> hrm, in what sense is it a nomic? they're basically passing around this storyline and people just keep adding to it based on some protocol?
04.05.18 15:31:27<dmiles> yes.. passing around this storyline and people just keep adding expert opinions to make new rules about why somehting can and can happen a certain way
04.05.18 15:31:56<dmiles> the idea is the simulation will become more and more realistic this way
04.05.18 15:32:47<dmiles> someone will realize that it takes 22 minuntes to perform and actuion instead of 20
04.05.18 15:33:04<dmiles> to perform some actuion
04.05.18 15:34:34<dmiles> or some expert will inform others that SA would react differntly .. and all of our proof data over the rule making was looking at the wroing thigs
04.05.18 15:35:25<dmiles> for isntnace a country might actualyl "allow" an attack instead of defend from it
04.05.18 15:35:56<dmiles> the rules of the Nomic game are logical results and logical intents
04.05.18 15:37:07<dmiles> arround the dynanics and the physics
04.05.18 15:37:28<dmiles> in order to make the most realistic simulation
04.05.18 15:37:56<dmiles> on very high and low levels at the same time
04.05.18 15:39:20<dmiles> rules compete at at any level the same ways
04.05.18 15:39:45<stoopkid> looks like they've been reasonably successful with that; if it weren't for knowing which of the material was fake, or the line at the beginning "This  appendix  paints  a  “revisionist  history”  of
04.05.18 15:39:46<stoopkid> events  that  occurred  from  the  end  of  DESERT
                 <stoopkid> STORM  (1991)  to  June  20XX ", it would be easy to mistake this for a real intel report
04.05.18 15:42:25<dmiles> you can immagine hyow much work gettign 1000s of commanders for over 10 years to play out this scenario on pen and paper
04.05.18 15:43:02<dmiles> (the rulemakers)
04.05.18 15:43:37<dmiles> the commanders are rulemakers and they had to have an agreed storyline so they dont get totlaly lost
04.05.18 15:44:13<dmiles> RedTeam/BlueTeam was so much easier in the 50-80s
04.05.18 15:44:33<dmiles> it was always the russians
04.05.18 15:45:30<stoopkid> heh
                 <dmiles> once the most recent war became the persian golf in 1991.. everyone started training on a new tabletop game
04.05.18 15:46:17<dmiles> littlerly billions of dollars every year went into playing it out.. printing out more detiled manuscripts
04.05.18 15:46:36<dmiles> and excersizes for navy, airfforce etc
04.05.18 15:47:13<dmiles> based on all the experts playing this DnD game
04.05.18 15:48:03<dmiles> to keep coheasion with the billions sunk into the storyline last year and the year before
04.05.18 15:48:33<dmiles> lawmakers even got to sit in on these role-play discussions
04.05.18 15:48:58<dmiles> oh and pretend they were lawmakers durring the crisis
04.05.18 15:49:19<dmiles> giving rules of realisim on how lawmakers would react
04.05.18 15:50:06<dmiles> knowing they were mock votes whether ot authorize this or that operation
04.05.18 15:50:34<dmiles> we needed the entire millary complex to play
04.05.18 15:51:06<stoopkid> makes sense
04.05.18 15:51:15<dmiles> then in 1998 peopel wondered if we could turn this into a computer game
04.05.18 15:51:23<stoopkid> still staggering to imagine the scope & complexity of this, but, makes sense
04.05.18 15:51:40<dmiles> maybe a computer would help us keep keep track of the mess
04.05.18 15:53:19<dmiles> at least the funding i worked on .. it was a bit older than that
04.05.18 15:54:24<dmiles> i mean that i can only speak to 1998 and beyond.. i am sure cycorp had been working on it berfofre then.. since heck i got a cdrom
04.05.18 15:54:52<dmiles> of a bunch of test results of their software simulaion
04.05.18 15:55:30<dmiles> the job was to do jsut as well as they had but make it run faster
04.05.18 15:56:30<dmiles> since like the system needed to operate in real time
04.05.18 15:56:46<dmiles> not 5 hours to get a query result back from the KB
04.05.18 15:57:37<dmiles> so i had to come up with new and fast ways to deduce proofs
04.05.18 15:58:12<dmiles> while new rules were getting added to the system
04.05.18 15:58:21<dmiles> and new facts
04.05.18 16:13:23<stoopkid> hrm
04.05.18 16:15:02<stoopkid> i'm starting to see how the pieces fit together, pretty wild stuff
04.05.18 16:16:11<stoopkid> i wonder if this is what HMC was referring to a while back, he said something along the lines of "it would probably freak you out if i told you who was running basically a secret version of the same kind of thing we're trying to build"
04.05.18 16:20:07<stoopkid> anyway, i would be interested in trying to apply MLTT-reasoning to this, via some basic extensions to my approach on that TPTP problem
04.05.18 16:21:39<stoopkid> well, not "this" exactly, but, some real-world reasoning problems of similar complexity
04.05.18 16:26:37<stoopkid> this is where HMC would usually pop in to say something like "sounds like a great use-case for an autonomic context!"
04.05.18 16:30:01<dmiles> you can see why I assumed in 2001 the whle reason that us congress was funding the semantic web was to work on this sort of a problem .. by first, giving the world the tools to write in this logical form.. then next lettign the world work on the prolbem
04.05.18 16:30:41<dmiles> but the enterprise went south and we got RDF/OWL instead
04.05.18 16:31:46<dmiles> i've talked to some people in the room for that big debate that went wrong.. it was the w3c promised the world could still write in our language
04.05.18 16:32:21<dmiles> RDF was jsut a format.. not a logic
04.05.18 16:34:09<dmiles> i took jobs over the next decare afterwards where employers demanded i redesigned my system to run from SPARQL
04.05.18 16:34:22<dmiles> decade*
04.05.18 16:35:07<dmiles> i finally stopped theiving their money in 2012
04.05.18 16:35:26<stoopkid> heh
04.05.18 16:35:40<dmiles> as an act of conciounce
04.05.18 16:37:09<dmiles> what would happen is the designers would try to convey things like the Robot's intent in RDF and query SPARQL
04.05.18 16:37:41<dmiles> which was too impossibly simplistic compared to CycL
04.05.18 16:37:57<stoopkid> well.. technically RDF is a logic, it comes equipped with a model theory and everything, but yea this is quite different from, say, n3logic or MLTT
04.05.18 16:39:10<dmiles> n3logic came pretty close at times.. but it much harder to write in than CycL
04.05.18 16:39:41<dmiles> in CycL i probly have to rewrite things about 5 times to even work
04.05.18 16:40:10<dmiles> just to get it to load and do what i want
04.05.18 16:40:18<dmiles> N3 that is 50 times
04.05.18 16:40:51<dmiles> only because i am translating the CycL mentally
04.05.18 16:41:18<dmiles> had i not started with mental idea of the CycL i doubt i'd ever guess how i'd want to write the N3
04.05.18 16:41:39<dmiles> that is what scared me the most
04.05.18 16:42:47<dmiles> expecting others to just somehow accidently or secretly emerge the CycL language in their heads and never talk about it
04.05.18 16:45:07<dmiles> once they had that going on in their head, and even if they had their error rate want better than my own 50 mental-debug-rewrites per rule authorship
04.05.18 16:45:17<dmiles> want/wasnt
04.05.18 16:46:15<dmiles> at my error rate i would never been able to even phrase anything well enough to be anything bu ta failure
04.05.18 16:47:05<dmiles> this is exactly liek giving someone ASM and asking them to build microsoft office
04.05.18 16:47:48<dmiles> and it is all based on the language we allowed them to use... not the problem domain
04.05.18 16:48:35<dmiles> they cmain "if i can just build hello world, i promise the next release will be MSWord"
04.05.18 16:49:58<dmiles> ususaly they are smart people to so they will be meanly writing in FORTH
04.05.18 16:50:25<dmiles> still it doesnt ge tthem to C++ levels of abstractions they might need
04.05.18 16:50:33<stoopkid> heh, yea i can see how that would be
04.05.18 16:51:49<dmiles> someone in eulergui told me once.. hey just embed CycL in RDF lists and play dumb when people gripe at you
04.05.18 16:52:18<stoopkid> that is actually what i would've recommended as well heh
04.05.18 16:52:43<dmiles> i started to do that and even had one of the compmaines robot animators doing it
04.05.18 16:53:39<dmiles> but .. the problem was how am was going to trick everyone who was already uise RDF and SPARQL to make the options menus
04.05.18 16:54:15<dmiles> oh i forgot to say we were a Scala and JAva shop only
04.05.18 16:54:43<dmiles> so i would have had to recode all my systems in Scala/Java
04.05.18 16:54:49<dmiles> and i started to
04.05.18 16:54:55<stoopkid> i actually didn't have much trouble formulating that TPTP problem in Agda. basically only 2 rewrites, and the 1st rewrite got it doing the right thing and the 2nd rewrite was basically just to remove a bunch of unnecessary stuff and make it more readable. otoh though, it would take some more work in order to automate the reasoning process, that's why "solving the problem" in Agda required manual proofs
04.05.18 16:55:20<dmiles> but it was amazing how horrible and boring it was and buggy me trying to do this secretly
04.05.18 16:55:55<stoopkid> it's amazing to me that they would've even had you doing that in the first place rather than deferring to your judgement on it
04.05.18 16:56:48<dmiles> it was all sunk-costs arguments
04.05.18 16:56:59<dmiles> (agaist defering to my juegment)
04.05.18 16:57:27<stoopkid> so their solution was to keep sinking? XD
04.05.18 16:57:28<dmiles> sunk costs is how much time and money the company had already put into the huge software stacks
04.05.18 16:58:01<dmiles> yep :( .. since we were already manufaturing the robots
04.05.18 16:58:32<dmiles> they had built a facotry and everyhting in china
04.05.18 16:59:13<stoopkid> what are these robots btw? i'm not sure if you've told me about that work before
04.05.18 16:59:45<dmiles> https://robots4autism.com/milo/
04.05.18 17:01:21<dmiles> they are at least all RDF driven
04.05.18 17:02:17<dmiles> i mean we used RDF for exactgly what it was good at
04.05.18 17:02:47<dmiles> persisting and loading and saving animatronics
04.05.18 17:05:18<dmiles> configuring what animatronic dependancies were needed to be used and what java classes were loaded.. the entire stack could be specific RDF-wise
04.05.18 17:06:23<dmiles> even could save the name of the child and the textbook content in RDF strings to be shipped arround
04.05.18 17:07:02<dmiles> so in that way RDF was ideal.. it was a content/configuation language
04.05.18 17:08:13<stoopkid> interesting project, im looking further into it, quite the contrast to the military AI stuff lol
04.05.18 17:08:45<dmiles> i had written BINA48 for them and they didnt know how it worked .. so they trusted my skills
04.05.18 17:09:49<dmiles> they wanted me to port the behavior language of Bina48 to RDF
04.05.18 17:11:04<dmiles> oh god, i had atried before they hired me and had just arleady wasted time on that
04.05.18 17:15:08<dmiles> https://github.com/opensim4opencog/trunk-chatbot/tree/master/sources/chatbot/LogicalParticleFilter  <- thats that code
04.05.18 17:17:03<dmiles> the problem is i just could no longer grok how to write in my language once it was RDF
04.05.18 17:17:41<dmiles> i mena how to hold all the things you hold in your brain while you code
04.05.18 17:18:00<dmiles> obviously i should use a "convertor"
04.05.18 17:18:46<dmiles> sure.. i thankfully wasnt totaly dumb.. but i could not make a single sailient SPARQL query
04.05.18 17:19:05<dmiles> that had anyhitng to do with anyhting
04.05.18 17:19:31<dmiles> that was like asking me to code MSWord in 'sed'
04.05.18 17:20:14<dmiles> i mean MSWord with menus and tooltips
04.05.18 17:20:57<dmiles> i can at least how visualize writitng the spell checker
04.05.18 17:21:15<dmiles> but not sure how to load the document to spell check
04.05.18 17:22:09<dmiles> the intial question is already insanely hard anyways.. "How should i form a query that asks the robot what the next lesson plan will be?"
04.05.18 17:23:38<dmiles> "How should i sparql insert that the users favorite color is blue when fred asks him but green with matha asks?"
04.05.18 17:24:04<dmiles> should i make a graph for the type of answers that come from 3each human?
04.05.18 17:24:26<dmiles> should i make a graph per human he meets
04.05.18 17:25:00<dmiles> what should the sparql transations be?
04.05.18 17:26:16<dmiles> it feels liek trying to implment AGI in MySQL only
04.05.18 17:27:20<dmiles> when i cant even implement grand theft auto level AI in mySQL INSERT, SELECT
04.05.18 17:27:58<dmiles> yet this is very easy to do in SNARK, POWERLOOM, LOGICMOO, CYC etc
04.05.18 17:32:51<dmiles> ok not very easy.. but hard as it should be
04.05.18 17:32:53<dmiles> (not harder)
04.05.18 17:52:51<stoopkid> wow bina48 sounds like it came straight out of black mirror lol
04.05.18 17:58:30<dmiles> she was commisioned in 2009 for when the real human passes away
04.05.18 17:59:15<dmiles> though i only see it as a love peice.. like on black mirror
04.05.18 18:00:13<dmiles> not an escape capsual which if you read too much the commisioners like to talk about
04.05.18 18:02:29<dmiles> (not a spiritual escape pod for the lifenaught project)
04.05.18 18:03:11<dmiles> what i came up with was a system that reads what you have to say and figures out how to replace you after you are gone
04.05.18 18:03:58<dmiles> i know that sounds very hard.. but it wasnt!
04.05.18 18:05:14<stoopkid> the “mind files” thing?
04.05.18 18:05:56<dmiles> right .. i donjt think i feel safe belifing my life was ever in a mind file
04.05.18 18:06:23<dmiles> what my system does is arranges the texts you've said into this sort of echo chamber that makes sens irregardless of the order the text was put in
04.05.18 18:07:04<dmiles> it makes up small diatribes based on when a HSPG parser's logical form starts to make sense
04.05.18 18:08:16<dmiles> exmkaple:  I TELL YOU I AM BINA, I ASK YOU WHO YOU ARE,  I TELL YOU SOMETHING YOU WANT TO HEAR,  YOU ACTIVELY LISTEN
04.05.18 18:08:26<stoopkid> https://en.m.wikipedia.org/wiki/Head-driven_phrase_structure_grammar ?
04.05.18 18:08:41<dmiles> exmkaple:  I TELL YOU I AM BINA, I ASK YOU WHO YOU ARE, I GATHER AND SAVE YOUR NAME,  I TELL YOU SOMETHING YOU WANT TO HEAR,  YOU ACTIVELY LISTEN
04.05.18 18:08:58<dmiles> yes .. buit instead of words.. each word is anj entire sentence
04.05.18 18:09:24<dmiles> so i contract a valid line of sentences instead valid line of words
04.05.18 18:09:53<dmiles> the sentences have to make contextual sense from left to right
04.05.18 18:10:16<dmiles> i dont mean the words of the sentences though .. i mena the meaning the sentences are supposed to create
04.05.18 18:10:45<dmiles> I TELL YOU X, I ASK YOU SIMULAR TOPIC TO X
04.05.18 18:11:23<dmiles> this arround the text into no mater what she says the sentences in.. they seem to make sense
04.05.18 18:11:40<dmiles> however she is not allowed to say them
04.05.18 18:11:57<dmiles> she only hers herself think them
04.05.18 18:13:07<dmiles> at this point she is not a chatbot.. she is just a program that has a stream of 1/2 baked texual thought that dont seem to conflict with the orignal
04.05.18 18:14:27<dmiles> that by itself is a thinking device
04.05.18 18:15:22<dmiles> even though it is not at all begun any interaction with the world
04.05.18 18:15:40<dmiles> making that part was most important
04.05.18 18:16:19<dmiles> the next device is a dump infobot device
04.05.18 18:16:48<dmiles> the next device is a dumb infobot device.. that listens and regarly forets this nonsense
04.05.18 18:17:26<dmiles> it is strong enough to field qustions liek "What did i just think about?"
04.05.18 18:17:47<dmiles> or "WHAT WAS I SAYING AGAIN?"
04.05.18 18:18:17<dmiles> the next device is the terrets device
04.05.18 18:18:42<dmiles> it lets things come out of the moth using the same limtmus of the first device.. but ionly in boken stages
04.05.18 18:19:39<dmiles> so the ligic of device (tha ti menathined the HSPG about) says  S1 S2 S3 S4 S% S^
04.05.18 18:20:26<dmiles> this device might say S1 but not allowed to say S2 ... mingt say S4 .. whuich you as a listener conclude she must have just thought S2 and S3
04.05.18 18:20:42<dmiles> and she really did!
04.05.18 18:21:17<dmiles> it might taked soemtimes until S33 to make a valid thought again
04.05.18 18:21:23<dmiles> all you hear is S1 S4 S33
04.05.18 18:22:35<dmiles> you then wonder how she got to S33 .. you ask her something related to S20 .. . and the "strong enough to field qustions" answers becaue it recently heard S20 when Bina48 thought about it
04.05.18 18:23:30<dmiles> and you become impress it just said it liked your shoes, because it remembmered you hat ethem
04.05.18 18:23:42<dmiles> and you become impress it just said it liked your shoes, because it remembmered you hated them
04.05.18 18:24:35<dmiles> i fouind that I could let the bina48 be programmed by the oringal by playing an association game
04.05.18 18:25:29<dmiles> also by orignal saying "I BOUGHT HIM SHOES"  "HE HATED THEM"
04.05.18 18:26:00<dmiles> bina says "HE HATED THEM"  orig: "YES HE HATED EVERYTHING I EVER GAVE HIM"
04.05.18 18:26:58<dmiles> stage one then has avaible   "I BOUGHT HIM SHOES"  "HE HATED THEM"  "YES HE HATED EVERYTHING I EVER GAVE HIM"
04.05.18 18:27:27<dmiles> it is very un likely that the last two phrase are apropriate
04.05.18 18:28:18<dmiles> i mean hopefull the woman was not abused to the level she attaches those last two phrases everywhere
04.05.18 18:29:12<dmiles> i know success is reached when peopel start locking their robot heads in the basement
04.05.18 18:29:28<dmiles> well of the dead realitives
04.05.18 18:29:57<dmiles> i think many jewish months will like to buy these for their deadbeat useless children
04.05.18 18:30:07<dmiles> months/mothers
04.05.18 18:31:31<dmiles> "WHAT SECRET WHO ONLY MY DAUGHTER AND ME KNOW?" "...."   "WHAT KIND OF FISH DID WE CATCH ON OUR ONTERIO VACATION?" "WE CAUGHT NONE"
04.05.18 18:32:21<dmiles> ok one more secret before i run off..
04.05.18 18:32:34<dmiles> https://docs.google.com/document/d/1rdI_f-2YnX0e2RD6rGAY57YAqzLj2xHsk36m5HT6SoM/edit
04.05.18 18:33:51* dmiles makes it a pdf
04.05.18 18:35:01<dmiles> http://logicmoo.org/docs/666E2C.pdf
04.05.18 18:35:23<dmiles> the sentennce go thru a round tripper
04.05.18 18:36:49<dmiles> os i can parphase (and logically verify)  "WE CAUGHT NO FISH IN ON THE ONTERIO FISHING TRIP" into   "WHAT DID WAS CATCH ON ONTERIO TRIP?" "WE CAUGHT NO FISH"
04.05.18 18:37:41<dmiles> here is the srccode https://github.com/logicmoo/opencyc/blob/master/swi_interface/english_parser/e2c.pl
04.05.18 18:38:26<dmiles> jsut for the E2C
04.05.18 18:39:06<dmiles> another trick i like to do is translate the oringals text to a diffenrt language...  then translate it back
04.05.18 18:39:51<dmiles> this allows the 2ce tranlated text to have a more idiomatic vocabular
04.05.18 18:40:21<dmiles> which has allowed the code to remain even simpler
04.05.18 18:41:05<dmiles> "ITS RAINING CATS AND DOGS"  becomes "THE RAIN IS HEAVY"
04.05.18 18:41:31<dmiles> the two stage translation of google translate is not that much disimular to how we do it
04.05.18 18:44:47<dmiles> if consider only  what i said before "WHAT SECRET WHO ONLY MY DAUGHTER AND ME KNOW?"  .. youd relaize that technique i decribe is not noly ideal for creating internal dialogs it is also ideal for creating music
04.05.18 18:45:23<dmiles> and even allows the program tro decide if it appreciates music
04.05.18 18:45:57<dmiles> well it appreciates secretly what it might have composed on its own
04.05.18 18:47:03<dmiles> that why i call bina48 method of thinking  "peotic reasoniung" or "musical resoning"
04.05.18 18:47:20<dmiles> is it does not use the logic of cycl
04.05.18 18:47:29<dmiles> it doent even use logic
04.05.18 18:47:38<dmiles> it uses peotic tastes
04.05.18 18:47:58<dmiles> but i constructed the "system" framework in cycL language
04.05.18 18:48:29<dmiles> since it is such a complex system.. you have to have pretty smart language to maintain this complex of a program state
04.05.18 18:49:03<dmiles> and when i add to the code it needs to be Nomic
04.05.18 18:49:29<dmiles> menaing it doesnt require me to rewrit ethe entire system just becaus ei alrter the design (even drastically)
04.05.18 20:36:00<stoopkid> “6:29 PM <dmiles> i think many jewish months will like to buy these for their deadbeat useless children”
04.05.18 20:36:03<stoopkid> huh?
04.05.18 20:38:22<stoopkid> am i missing a joke or something?
04.05.18 21:23:12*** Quit: suiqiu_ (~suiqiublo@180.162.46.103) left #AutoNomic: Remote host closed the connection
04.05.18 21:23:43*** Join: suiqiu_ (~suiqiublo@180.162.46.103, (unauthenticated): realname)
04.05.18 22:08:10<daemoz> https://wenkokke.github.io/sf/
04.05.18 22:41:33<stoopkid> interesting that they cover isomorphism before covering connectives, negation, quantifiers & lists
05.05.18 00:20:29<daemoz> this code first style though, i appreciate it
05.05.18 02:53:58<dmiles> "<dmiles> i think many jewish mothers will like to buy these for their deadbeat useless children"  sorry, i sure dont give  much context, i am thinking of a weekly radio skit https://www.youtube.com/watch?v=qUyeZg0wMCU
05.05.18 03:02:40<dmiles> That character is going to be the next Bina48!
05.05.18 03:34:55<dmiles> what is neat is every episode she talks about her impending death https://youtu.be/OwD36vUqlmw?t=150
05.05.18 03:39:33<dmiles> the skit actualyl doesnt imply jewishness.. but i have a jewish mother that gets on my case every week/month now for over 25 years about when will i publish AGI and finally make her famous
05.05.18 03:40:17<dmiles> or at least have two nickels to rub together .. or instead of letting everyone else take credit
05.05.18 05:43:59*** Quit: editable-stoopki (~stoopkid@unaffiliated/stoopkid) left #AutoNomic: Ping timeout: 268 seconds
05.05.18 07:00:15*** Quit: suiqiu_ (~suiqiublo@180.162.46.103) left #AutoNomic: Remote host closed the connection
05.05.18 07:00:40*** Join: suiqiu_ (~suiqiublo@180.162.46.103, (unauthenticated): realname)
05.05.18 07:12:35*** Join: suiqiu__ (~suiqiublo@180.162.46.103, (unauthenticated): realname)
05.05.18 07:12:36*** Quit: suiqiu_ (~suiqiublo@180.162.46.103) left #AutoNomic: Read error: Connection reset by peer
05.05.18 07:28:43*** Quit: suiqiu__ (~suiqiublo@180.162.46.103) left #AutoNomic: Remote host closed the connection
05.05.18 07:29:01*** Join: suiqiu__ (~suiqiublo@180.162.46.103, (unauthenticated): realname)
05.05.18 09:36:04*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
05.05.18 10:12:44*** Join: editable-stoopki (~stoopkid@unaffiliated/stoopkid, stoopkid: stoopkid)
05.05.18 10:43:45*** Quit: koom (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 248 seconds
05.05.18 11:46:10*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
05.05.18 12:05:06<stoopkid> dmiles: yea context tends to help a bit heh :P
05.05.18 12:51:18*** Quit: koom (~sirdancea@193.86.78.254) left #AutoNomic: Quit: Leaving
05.05.18 14:57:36*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
05.05.18 14:58:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.05.18 01:39:27<dmiles> omg, i found a dead scientist who described exactly how bina48 works
06.05.18 01:39:42<dmiles> Julian Jaynes
06.05.18 04:06:08*** Join: suiqiu_ (~suiqiublo@101.83.190.17, (unauthenticated): realname)
06.05.18 04:09:05*** Quit: suiqiu__ (~suiqiublo@180.162.46.103) left #AutoNomic: Ping timeout: 248 seconds
06.05.18 04:20:12*** Quit: suiqiu_ (~suiqiublo@101.83.190.17) left #AutoNomic: Remote host closed the connection
06.05.18 04:21:12*** Join: suiqiu_ (~suiqiublo@101.83.190.17, (unauthenticated): realname)
06.05.18 04:21:35*** Quit: suiqiu_ (~suiqiublo@101.83.190.17) left #AutoNomic: Remote host closed the connection
06.05.18 04:23:11*** Join: suiqiu_ (~suiqiublo@101.83.190.17, (unauthenticated): realname)
06.05.18 05:09:57*** Join: suiqiu__ (~suiqiublo@101.83.190.17, (unauthenticated): realname)
                 *** Quit: suiqiu_ (~suiqiublo@101.83.190.17) left #AutoNomic: Read error: Connection reset by peer
06.05.18 07:28:47*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-miemwdpbefuljopy) left #AutoNomic: 
                 *** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
06.05.18 07:29:20*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kjsnubxnptgxtiej, stoopkid: stoopkid)
06.05.18 09:59:59*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
06.05.18 11:26:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
06.05.18 11:26:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.05.18 12:58:46*** Quit: cantora (sid147800@gateway/web/irccloud.com/x-dsgqamwjkexmmlyu) left #AutoNomic: 
06.05.18 12:59:03*** Join: cantora (sid147800@gateway/web/irccloud.com/x-dllajausxmxsoocl, cantora: cantora)
06.05.18 13:03:05*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
06.05.18 15:05:09*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
06.05.18 17:48:08*** Connecting...
06.05.18 17:48:28*** Join: ditable-kooe (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 3 months 9 days 23 hours 37 minutes 42 seconds ago
                 *** Names: ditable-kooe cantora daemoz stoopkid suiqiu__ editable-stoopki dmiles editable-koo lexxus[m] genuinelyfx[m] koo5[m] @ChanServ HMCa Tamara_ jibble__ Deadhand vbmithr
                 *** End of /NAMES list.
06.05.18 21:08:42*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 260 seconds
06.05.18 21:35:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.05.18 00:11:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 256 seconds
07.05.18 00:23:45*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.05.18 01:00:27*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
07.05.18 01:36:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 260 seconds
07.05.18 01:53:15*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.05.18 02:27:59*** Join: suiqiu_ (~suiqiublo@101.83.190.17, (unauthenticated): realname)
07.05.18 02:30:30*** Quit: suiqiu__ (~suiqiublo@101.83.190.17) left #AutoNomic: Ping timeout: 255 seconds
07.05.18 02:43:09*** Quit: suiqiu_ (~suiqiublo@101.83.190.17) left #AutoNomic: Remote host closed the connection
07.05.18 03:31:20*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
07.05.18 04:10:27*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
07.05.18 04:10:49*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
07.05.18 09:05:42*** Join: HMCa_ (~root2@37.153.110.58, (unauthenticated): root2)
07.05.18 13:47:51*** Join: koom (~koom@37-48-50-154.tmcz.cz, (unauthenticated): realname)
                 *** Quit: koom (~koom@37-48-50-154.tmcz.cz) left #AutoNomic: Read error: Connection reset by peer
07.05.18 13:50:51*** Join: koom (~koom@37-48-50-154.tmcz.cz, (unauthenticated): realname)
07.05.18 14:03:49*** Quit: koom (~koom@37-48-50-154.tmcz.cz) left #AutoNomic: Ping timeout: 260 seconds
07.05.18 15:03:51*** Join: koom (~koom@37-48-50-154.tmcz.cz, (unauthenticated): realname)
07.05.18 15:13:38*** Quit: koom (~koom@37-48-50-154.tmcz.cz) left #AutoNomic: Remote host closed the connection
07.05.18 15:13:56*** Join: koom (~koom@37-48-50-154.tmcz.cz, (unauthenticated): realname)
07.05.18 15:32:17*** Quit: koom (~koom@37-48-50-154.tmcz.cz) left #AutoNomic: Ping timeout: 248 seconds
07.05.18 16:45:10*** Join: cantora_ (sid147800@gateway/web/irccloud.com/x-zmdjhepviigvxnnz, cantora: cantora)
07.05.18 16:45:31*** Join: Tamara___ (sid238709@gateway/web/irccloud.com/x-rgbzvpysoacqxwlp, (unauthenticated): Tamara)
07.05.18 16:51:04*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
07.05.18 16:53:24*** Nick regain: cantora_ (sid147800@gateway/web/irccloud.com/x-zmdjhepviigvxnnz) is now known as cantora
07.05.18 16:53:34*** Nick regain: Tamara___ (sid238709@gateway/web/irccloud.com/x-rgbzvpysoacqxwlp) is now known as Tamara_
07.05.18 17:25:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
07.05.18 17:26:10*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
07.05.18 18:36:21*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
07.05.18 22:12:01*** Quit: editable-stoopki (~stoopkid@unaffiliated/stoopkid) left #AutoNomic: Ping timeout: 256 seconds
07.05.18 23:13:38*** Join: editable-stoopki (~stoopkid@unaffiliated/stoopkid, stoopkid: stoopkid)
08.05.18 03:34:41*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
08.05.18 04:12:34*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
08.05.18 11:01:25<HMCa_> anyone who refers to eos as "the longest running ico" shoukd take a look at newtau. XD
08.05.18 11:01:48<HMCa_> (it is especially hilarious to me to see the phrase from media who have covered tau...)
08.05.18 11:02:36<HMCa_> ((coindesk, I'm looking at you...))
08.05.18 12:42:34*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
08.05.18 13:06:50*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
08.05.18 13:26:19*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Remote host closed the connection
08.05.18 13:26:46*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
08.05.18 20:57:24*** Join: kastar (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
08.05.18 21:07:40*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 250 seconds
08.05.18 21:08:09*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
09.05.18 00:14:28*** Quit: editable-stoopki (~stoopkid@unaffiliated/stoopkid) left #AutoNomic: Read error: Connection reset by peer
09.05.18 02:19:28*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 02:19:29*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 02:48:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kjsnubxnptgxtiej) left #AutoNomic: Quit: Connection closed for inactivity
09.05.18 03:45:53*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 246 seconds
09.05.18 03:46:33*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
09.05.18 03:59:52-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
09.05.18 03:59:55*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 03:59:57*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 04:32:04*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
09.05.18 04:32:29*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
09.05.18 05:44:53*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 246 seconds
09.05.18 05:44:54*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 255 seconds
09.05.18 05:56:49-SaslServ- koom!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
09.05.18 05:56:53*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 05:56:55*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 08:44:54*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 250 seconds
09.05.18 08:45:13*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
09.05.18 09:10:43*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nadtopgdxwlzfldx, stoopkid: stoopkid)
09.05.18 10:36:16*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 10:36:38-SaslServ- kook!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
09.05.18 10:36:53*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 12:03:13*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
09.05.18 12:03:34*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
09.05.18 17:20:41*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
09.05.18 17:20:50-SaslServ- kook!~sirdancea@79.98.72.195 has just authenticated as you (sirdancealot)
09.05.18 17:20:51*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
09.05.18 17:57:57*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 255 seconds
09.05.18 19:00:04*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
09.05.18 20:15:22*** Quit: jibble__ (uid48680@gateway/web/irccloud.com/x-lxpljaycjoyksnde) left #AutoNomic: Quit: Connection closed for inactivity
10.05.18 03:35:21*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
10.05.18 04:14:20<koo5[m]> fart: https://github.com/koo5/group_action_ontology
10.05.18 04:28:53*** Netmerge: *.net *.split, split 1 day 6 hours 25 minutes 45 seconds ago (Use /WL to see who's still missing)
10.05.18 04:35:59*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-kjvszpauqysvfuzd) left #AutoNomic: Ping timeout: 240 seconds
10.05.18 04:36:01*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-fcfsdjxkaqamoyyt) left #AutoNomic: Ping timeout: 240 seconds
10.05.18 04:41:40*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-edvfudthftrqfoky) left #AutoNomic: Ping timeout: 276 seconds
10.05.18 05:31:53*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-zkjdabesazcmnwgn, (unauthenticated): @koo5:matrix.org)
10.05.18 06:07:32*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-sxrazzfktcqqxyml, (unauthenticated): @genuinelyfx:matrix.org)
10.05.18 06:07:41*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-mjdxxakgpoeetsrs, (unauthenticated): @lexxus:matrix.org)
10.05.18 06:50:36*** Quit: koom (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 255 seconds
10.05.18 11:08:00<kastar> koo5[m]: huh....
10.05.18 11:12:59<kastar> its interesting such that i want to think about how i would go about it
10.05.18 11:13:36<kastar> im going to give it thought and get back with some basic ideas that come to mind
10.05.18 11:14:28<kastar> I appreciate this. thanks.  :-2
10.05.18 11:14:31<kastar> :-)
10.05.18 11:25:01*** Nick change: kastar (~user@75.97.112.182.res-cmts.brd4.ptd.net) is now known as LennyCrawfish
10.05.18 11:27:14<LennyCrawfish> Feel free to hit me up to talk more about it koo5[m]
10.05.18 11:27:24<LennyCrawfish> who knows what will shake loose
10.05.18 11:27:25<LennyCrawfish> :)
10.05.18 12:33:17*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nadtopgdxwlzfldx) left #AutoNomic: Quit: Connection closed for inactivity
10.05.18 12:40:48*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lxqakzanbscclgzg, stoopkid: stoopkid)
10.05.18 12:57:34*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
10.05.18 13:22:38*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 250 seconds
10.05.18 14:10:26*** Join: koom (~sirdancea@79.98.72.195, sirdancealot: koo5)
10.05.18 14:16:51*** Join: kook (~sirdancea@79.98.72.195, sirdancealot: koo5)
10.05.18 14:19:44*** Quit: koom (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
10.05.18 17:07:20*** Quit: kook (~sirdancea@79.98.72.195) left #AutoNomic: Ping timeout: 255 seconds
10.05.18 17:33:17*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lxqakzanbscclgzg) left #AutoNomic: Quit: Connection closed for inactivity
11.05.18 00:37:40<HMCa_> if only it could be that simple in practice
11.05.18 01:06:21<koo5[m]> Yea
11.05.18 04:18:20*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
11.05.18 06:59:34*** Quit: koom (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 260 seconds
11.05.18 07:56:35*** Join: koom (~sirdancea@193.86.78.254, sirdancealot: koo5)
11.05.18 09:16:53*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yxleyfwxvfmtdjcr, stoopkid: stoopkid)
11.05.18 09:24:40*** Quit: koom (~sirdancea@193.86.78.254) left #AutoNomic: Ping timeout: 256 seconds
11.05.18 13:10:41*** Join: koom (~sirdancea@89.24.57.234, sirdancealot: koo5)
11.05.18 13:19:31*** Quit: koom (~sirdancea@89.24.57.234) left #AutoNomic: Ping timeout: 256 seconds
11.05.18 13:24:04*** Join: koom (~sirdancea@89.24.57.234, sirdancealot: koo5)
11.05.18 13:41:21*** Quit: koom (~sirdancea@89.24.57.234) left #AutoNomic: Ping timeout: 248 seconds
11.05.18 14:44:39*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
11.05.18 19:26:10*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 264 seconds
11.05.18 22:45:33*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
11.05.18 22:45:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
11.05.18 23:47:56<stoopkid> HMCa_: hrm, so iiuc, we basically want combinatorial circuits per block, sequential logic over many blocks?
11.05.18 23:54:39<stoopkid> seems like we should be able to describe the protocol via a 'paradoxical' self-referential proposition
11.05.18 23:55:49<stoopkid> liar paradox is like a simple inverter chain
11.05.18 23:56:33<stoopkid> start with a genesis state that assumes it'strue, next state it's false, then true, false, true, false..
11.05.18 23:57:51<stoopkid> then make the  computation of the next state dependent on proof-of-work / whatever other constraints, and you've got a block-chain protocol
12.05.18 00:01:18<stoopkid> standard logics that reject the paradoxes lack the computational phenomena of time, state, feedback, unbounded computations, and turing-completeness
12.05.18 00:01:46<stoopkid> seems like the missing ingredient that gives rise to the paradoxes is self-reference
12.05.18 00:03:15<stoopkid> the self-reference gives rise to feedback loops, which gives rise to state and a notion of time over which the system is in different of these states, and which is seemingly unbounded for it to continue 'computing' 'forever' over, and can add turing-completeness (modulo your storage capacity)
12.05.18 00:12:29<stoopkid> and ofc that's why you have to get rid of it in "standard" logic because standard logic basically superimposes all these states that are inconsistent with each other, but which are consistent when considered in isolation
12.05.18 00:16:08<stoopkid> when you do it with russell's/girard's paradox, the states unfold as the universe hierarchy, and when you want to capture all that into your logic at a single moment of "logic time", you make them explicit, basically adding a time-stamp / "universe-level" to each universe
12.05.18 00:18:37<stoopkid> interesting when you try to apply this line of reasoning to the halting problem, cause it's not just saying something about truth/falseness or flipping some bit of state, the hypothetical turing-machine solver still flip-flops it's decision when played out over "logic time"
12.05.18 00:24:31<stoopkid> this is all distinct from codata even though you can use codata for many (all?) of the same purposes
12.05.18 00:27:47<stoopkid> codata lets you claim that some value == the "greatest fixed point" of some operation on some base-value (roughly). even though you can use "unbounded self-reference" to specify that value syntactically, that self-reference is guarded in such a way as to ensure that it does inevitably reach "one single specific value"
12.05.18 00:32:12<stoopkid> like, x == 1 + x, encoding "countable(?) infinity"; or, x == 1 :: x; encoding a countably(?) infinite list of 1's
12.05.18 00:34:05<stoopkid> general self-reference does not necessarily end at a single specific value: x == not x
12.05.18 00:36:21<stoopkid> doesn't ever converge to anything, there's no way to choose whether it's an 'x' or a 'not x'
12.05.18 00:37:05<stoopkid> flagg resolution makes that simple: the state-changing operation is global for the reasoning context, but standard logic can't account for this
12.05.18 00:37:34<stoopkid> when we advance a block, state-changing operation is global for the reasoning context, same thing
12.05.18 00:42:04<stoopkid> what's a bit more interesting about all this, especially under curry-howard computational interpretations, is how our universe actually seems to have these computational phenomena that standard logic completely lacks & rejects
12.05.18 00:45:16<stoopkid> @ dmiles this is sort of what i meant about how when you actually look at total functional programming languages as logic/math frameworks rather than programming frameworks, you see that it's not even so much about "fear" of infloops, and state, and turing-completeness, and etc.. they're literally just missing from *logic* ("standard" logic), as long as you're doing standard logic, you'll never miss these things
12.05.18 00:46:39<stoopkid> now when you want those things, different story, we can't accommodate (well, they can but i think we're all familiar that this is a somewhat painful process?)
12.05.18 00:50:49<stoopkid> then there's sort of this, "which one is the right one?" debate, like, standard programmers with standard programming tasks can't figure out how to fit themselves into these frameworks and even the experts seem somewhat dissatisfied with the existing solutions, especially as far as the logic goes, but by and large everybody seems to find no direction to budge with the logic that really addresses the issue, because they
12.05.18 00:50:50<stoopkid> seem to just be directly incompatible
12.05.18 00:51:15<stoopkid> general self-reference --> state-change --> paradox --> inconsistency --> explosion
12.05.18 00:53:11<stoopkid> "general self-reference --> state-change --> paradox" is just a fact
12.05.18 00:53:37<stoopkid> regardless of whether "inconsistency --> explosion", any inconsistency seems bad
12.05.18 00:54:29<stoopkid> and if we have this link "paradox --> inconsistency", we arrive at inconsistency no matter what other logical tricks we pull
12.05.18 00:57:28<stoopkid> drop this link via flagg resolution, inconsistency disappears and all of our computational phenomena are admitted into the picture as the paradoxes that we originally rejected
12.05.18 01:22:50<HMCa_> closed phase logic within a block is combinatorial, yes
12.05.18 01:22:56<HMCa_> pure functions
12.05.18 01:26:48<HMCa_> so you might've guessed that I'll bring up metastability here
12.05.18 01:27:13<stoopkid> :)
12.05.18 01:28:06<HMCa_> what we really do is propose an entirely different take on "the impurity"
12.05.18 01:28:42<stoopkid> the impurity being the metastable intermediate state?
12.05.18 01:29:17<stoopkid> ah the state
12.05.18 01:29:24<HMCa_> sequentiality aka side effect aka state aka....
12.05.18 01:29:49<stoopkid> right
12.05.18 01:30:36<HMCa_> dototd: a machine that defines and redefines itself with statements of "side effects may include..." about itself.
12.05.18 01:31:02<HMCa_> psa:warning, the taus may cause nausia, dizziness
12.05.18 01:31:12<HMCa_> heh
12.05.18 01:32:02<HMCa_> so we have closed phase
12.05.18 01:33:09<HMCa_> genesis bootstrap resync entry-point thing that core makes the first "magic" call to, for example, kicks the thing off in a closed phase evaluation
12.05.18 01:36:14<HMCa_> this is a set of definitions of a bunch of pure functions... and an entrypoint that probably does little more but return to core what some initial (closed and open) phase state looks like
12.05.18 01:37:07<HMCa_> which probably includes some definitions of some open phase theory aka program
12.05.18 01:38:09<HMCa_> we don't have any notion of state here yet... the first state starts next, when core enters the first open phase
12.05.18 01:38:34<HMCa_> and makes it's first set of "magic" calls into that open phase logic
12.05.18 01:39:41<HMCa_> here, though, state is all transient
12.05.18 01:40:20<HMCa_> the world is "happening" but it is in a bottle, and might be thrown out as invalidated, and redone
12.05.18 01:41:17<HMCa_> these programs might make calls back into some closed phase logic along the way
12.05.18 01:41:41<HMCa_> remember open phase can call closed phase, but closed phase can not really call open phase?
12.05.18 01:42:27<stoopkid> sure
12.05.18 01:43:00<stoopkid> only via these "magic" calls into where the impurity lives
12.05.18 01:43:35<HMCa_> eventually, open phase "madness" results in some particular state event (defined between core and closed logic) triggers to core that a new closed phase state is.... "ready"
12.05.18 01:43:41<HMCa_> "stable"
12.05.18 01:44:04<HMCa_> maybe much other unstable open phase state gets thrown out because of it
12.05.18 01:44:32<HMCa_> maybe it gets thrown out moments later because something else winds up... "more ready"? :-)
12.05.18 01:44:40<HMCa_> but that id all just reorg
12.05.18 01:44:43<HMCa_> regardless
12.05.18 01:45:41<HMCa_> when that new closed state is ready, and accepted from open phase by both core and closed phase logic ("some pred" related to "blockverify")
12.05.18 01:45:59<HMCa_> the cycle is finished, and we rinse, repeat.
12.05.18 01:47:17<HMCa_> so we keep a set of stable states (closed phase, proven) and a set of unstable states (general open phase sideband comms as the churn happens)
12.05.18 01:47:44<HMCa_> ... intertwined in this funny way. ;-)
12.05.18 01:48:05<HMCa_> follow?
12.05.18 01:49:24<stoopkid> mostly, i'm still not really understanding fully how the open phase fits in though
12.05.18 01:49:50<stoopkid> each block defines a new closed phase state?
12.05.18 01:50:36<HMCa_> well, sure, but that might just be "here's the prior state but with one more empty block so a new hash"
12.05.18 01:51:28<stoopkid> so when is a state "ready"? 6 blocks deep or something like that?
12.05.18 01:51:48<stoopkid> "depends on how ready you think it is?"
12.05.18 01:51:56<HMCa_> iow maybe nothing happens in a cycle except someone ends the cycle, by introducing the next block
12.05.18 01:53:09<HMCa_> a state is ready when open phase can point core to a new block which passes the closed predicate(s) that make up blockverify/reorg
12.05.18 01:54:09<HMCa_> so let's say we have btc rules in a context
12.05.18 01:54:46<HMCa_> genesis block sets up the btc rules, incl "wallet and miner" open phase semantics
12.05.18 01:55:29<HMCa_> and incl "blockverify" closed phase semantics
12.05.18 01:55:52<HMCa_> now we can mine in open phase, or yell txs at eachother
12.05.18 01:56:09<HMCa_> maybe that ends up "mattering" later, maybe it doesn't
12.05.18 01:56:28<HMCa_> but we can also find a block and yell that
12.05.18 01:58:53<HMCa_> when open phase gets a block from mining or having a blockannounce yelled at it, it tells core about it, and if core (by asking closed state theory) finds it valid, it includes it in any reorg considerations
12.05.18 01:59:33<HMCa_> maybe that means a new closed phase state, or maybe it is a stale block on an old short fork, or something...
12.05.18 02:00:21<HMCa_> (in which case the phase end effectively just "didn't actually happen back then" unless that fork catches up)
12.05.18 02:01:06<stoopkid> alright
12.05.18 02:02:21<HMCa_> so we have a tree (set) of closed phase states called "the chain"
12.05.18 02:04:35<HMCa_> and a set of real world hashtable-message-routing states, related to it, in open phase
12.05.18 02:04:59<HMCa_> these states.... define eachother "as they go"
12.05.18 02:06:37<HMCa_> does that all make sense?
12.05.18 02:07:16<stoopkid> so far yea
12.05.18 02:08:59<HMCa_> ok, so why metastability?  The "did it or didn't it" thing... heh
12.05.18 02:09:13<HMCa_> is the ball balanced on the tip of the pin.... or not.
12.05.18 02:10:12<HMCa_> we wrap all of the state impurities up under a specific combination of one soft failure case (reorg) and one hard failure case (chain stall death)
12.05.18 02:12:02<HMCa_> reorg is easy, but contexts will have to work (pun, but true in all senses) to not hit that chain stall death thing. :-)
12.05.18 02:13:12<stoopkid> so basically autonomic rides in the metastable point of that feedback loop
12.05.18 02:13:50<HMCa_> well, rides back and forth between stable and unstable operation, as a machine
12.05.18 02:14:15<stoopkid> i see
12.05.18 02:14:36<HMCa_> it is a deterministic computer but only over time and "only probably"
12.05.18 02:16:35<HMCa_> just as bitcoin transaction is only final over time, and "only probably"
12.05.18 02:20:41<HMCa_> ok, that really just leaves out one other significant handling if state, which we should mention
12.05.18 02:20:50<HMCa_> that is subcontexts
12.05.18 02:21:57<HMCa_> similarly to finding a block "per closed phase's rules" the open phase can "find a new chain"... again per closed's rules
12.05.18 02:23:22<HMCa_> ofc whether or not this new closed/open state pair will come to matter (and acrually exist subsequently) depends upon its' open phase state also progressing its' closed phase state in a way that will keep reference to the new chain's existence...
12.05.18 02:23:31<HMCa_> *actually
12.05.18 02:24:09<HMCa_> (here "its'" referes to the creating parent's open phase)
12.05.18 02:24:29<HMCa_> *refers
12.05.18 02:24:55<HMCa_> all good so far?
12.05.18 02:25:05<stoopkid> yes
12.05.18 02:25:13<HMCa_> cool
12.05.18 02:25:29<HMCa_> because everything else to say is more or less just details, from there
12.05.18 02:25:30<HMCa_> heh
12.05.18 02:26:17<HMCa_> so was that helpful, or too little more than a recap?
12.05.18 02:27:34<stoopkid> helpful, though there's a couple "details" i'm still confused about
12.05.18 02:27:51<HMCa_> ok, what in particular?
12.05.18 02:30:08<stoopkid> the relationship between reasoning contexts & subcontexts; in between peggings they aren't bound to each other on a per-block basis so i'm unsure how we know how to line up blocks between peggings in order to ensure everybody's using the same combinations of subcontext-chain-tip / parent-chain-tip for defining their reasoning context
12.05.18 02:30:45<stoopkid> or how alternatively we can get away with not lining them up on a per-block basis
12.05.18 02:31:33<HMCa_> well, a short answer if that in one sense, we don't necessarily
12.05.18 02:31:40<HMCa_> *is
12.05.18 02:32:56<HMCa_> you might be a porly connected, slow, high latency node stuck 3 blocks behind in the child context, but... so what?
12.05.18 02:33:03<HMCa_> *poorly
12.05.18 02:33:53<HMCa_> all this really means is that you might make what others would consider "silly, invalid" transactions there until you catch up
12.05.18 02:35:54<HMCa_> but either you will eventually catch up, or you will outpace and ecentually everyone will catch up to you...
12.05.18 02:36:13<HMCa_> *eventually
12.05.18 02:37:45<stoopkid> well, but what about for when you're syncing and validating the history fresh; if, in between peggings, some action in the parent context allows some action in the subcontext that was not previously allowed, and the subcontext then takes this action, how does the syncing node know how to line up the blocks so that they're not using the new subcontext blocks that use the action with old parent-context-blocks that don't
12.05.18 02:37:46<stoopkid> allow the action?
12.05.18 02:38:36<HMCa_> the same way your slow node catches up... it follows the longest chain rule in each context
12.05.18 02:39:30<HMCa_> it can only see actions that occured in closed phase state anyway, if it "wasn't there for them" when they were open phase events...
12.05.18 02:40:04<stoopkid> ok so it doesn't even have to look at how they're matched up, it just takes the longest chains of both and then uses that as its closed phase context?
12.05.18 02:41:20<HMCa_> right, and maybe it will turn out to have been correct... or maybe it reorgs to something else in a moment when more open phase (that you *do* see, participate in) happens
12.05.18 09:25:22*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-sxrazzfktcqqxyml) left #AutoNomic: Ping timeout: 240 seconds
12.05.18 09:25:39*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-zkjdabesazcmnwgn) left #AutoNomic: Ping timeout: 250 seconds
12.05.18 09:26:29*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-mjdxxakgpoeetsrs) left #AutoNomic: Ping timeout: 276 seconds
12.05.18 09:45:54*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-auouqypntwacmfki, (unauthenticated): @koo5:matrix.org)
12.05.18 10:19:09*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-otbetfdmftfjhdav, (unauthenticated): @genuinelyfx:matrix.org)
12.05.18 10:19:17*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-dzxopmbocvdqxivq, (unauthenticated): @lexxus:matrix.org)
12.05.18 12:58:30<stoopkid> ok so
12.05.18 12:58:58<stoopkid> all of that seems consistent with what i was saying before about self-reference & flagg resolution
12.05.18 13:27:19<stoopkid> so, we know that an infinite looping self-referential program can't serve as a constructive proof of implication, because we expect to be able to run the given program and get a term of the return-type as the output, in finite time/space
12.05.18 13:28:07<stoopkid> what about identity types though? "x = not x" is a definitional equality
12.05.18 13:30:01<stoopkid> if every substitution across equalities is global, then we don't run into inconsistency. modifying the exist subst routines to account for that would be straightforward
12.05.18 13:30:04<stoopkid> existing*
12.05.18 13:41:29<stoopkid> so, it seems like the way we're setting this up with the deterministic state only advancing when a new block passes the block-verify checks.. we don't really have to worry about complexity of type-checking because blocks that are complex to type-check will just lose
12.05.18 14:00:26<stoopkid> now, even though it's not a problem for autonomic, it's still interesting: the only reason we worry about complexity of type-checking and whether type-checking infloops or not is because we actually try to run the functions during type-checking
12.05.18 14:01:37<stoopkid> if we weren't trying to actually run the functions, then the complexity would be ~linear in the size of the proof, afaict
12.05.18 14:02:52<stoopkid> afaict, "running functions during type-checking" is just UI/syntax-sugar for chaining together a series of definitional equalities by transitivity of equality & induction
12.05.18 15:48:50*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
12.05.18 16:01:53*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Remote host closed the connection
12.05.18 16:02:19*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
12.05.18 17:20:58<dmiles> "run the functions" VS "find the proofs" and how differnt the complexity it is between this two things is why i dont accept Turing machines or Godel having much relivance to logic or compuation !
12.05.18 18:50:07*** Quit: LennyCrawfish (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
12.05.18 19:42:52<HMCa_> dmiles: stoopkid seems to mean "check" not "find" proofs... also, running arbitrary functions and finding arvitrary proofs are not different conplexities at all, in fact they are the same: "arbitrarily complex"
12.05.18 20:07:30<stoopkid> dmiles: that’s the thing, both seem quite relevant to both
12.05.18 20:14:06<dmiles> i think they seem more relevant than they are
12.05.18 20:15:18<dmiles> what i mean is one has simple levels of complexity and the other does not that the other may be as if it had simple complexity
12.05.18 20:35:17<dmiles> in other words, if we weren't trying to actually run the functions, then the complexity would be ~linear in the size of the proof
12.05.18 20:41:21<dmiles> if we were trying to actually run the functions, then the complexity would be a problem
12.05.18 21:19:29*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 248 seconds
13.05.18 01:19:18*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
13.05.18 02:05:55*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
13.05.18 02:42:23*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
13.05.18 03:55:07*** Join: koom (~sirdancea@132.154.broadband.iol.cz, sirdancealot: koo5)
13.05.18 04:53:27*** Quit: koom (~sirdancea@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 240 seconds
13.05.18 04:54:26*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 276 seconds
13.05.18 11:03:20*** Join: herodust (258ea370@gateway/web/freenode/ip.37.142.163.112, (unauthenticated): 37.142.163.112 - http://webchat.freenode.net)
13.05.18 11:03:29<herodust> Hello
13.05.18 11:07:47<HMCa_> hi
13.05.18 11:24:44*** Quit: herodust (258ea370@gateway/web/freenode/ip.37.142.163.112) left #AutoNomic: Ping timeout: 260 seconds
13.05.18 12:05:26<HMCa_> bye
13.05.18 12:47:30*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
13.05.18 13:51:48*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 255 seconds
13.05.18 16:09:36*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
13.05.18 16:10:02*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
13.05.18 18:36:41*** Join: herodust (4d7e50e3@gateway/web/freenode/ip.77.126.80.227, (unauthenticated): 77.126.80.227 - http://webchat.freenode.net)
13.05.18 18:38:13<herodust> i was sent here to assist you with taochain
13.05.18 18:39:21<herodust> please specify a specific task every time. but only things that you haven't succeeded yourself and have no idea how to
13.05.18 18:42:13<herodust> if there's nothing like that, it will be concluded that the setbacks in this project are caused by laziness
13.05.18 18:42:14<herodust> ;)
13.05.18 19:06:10<herodust> otherwise, please send the request through nili
13.05.18 19:07:43<stoopkid> hello
13.05.18 19:08:57<stoopkid> so nili sent you to help us out? cool :)
13.05.18 19:11:31*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Read error: Connection reset by peer
13.05.18 19:11:37*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
13.05.18 19:11:57<stoopkid> it’s mother’s day so ill be kind of scarce for a while, do you know C++?
13.05.18 19:14:00<herodust> among the others
13.05.18 19:21:55<stoopkid> so are you familiar with our n3 inferencer work and how we’re attempting to implement MLTT over n3 inferencing?
13.05.18 19:25:24*** Quit: herodust (4d7e50e3@gateway/web/freenode/ip.77.126.80.227) left #AutoNomic: Ping timeout: 260 seconds
13.05.18 20:22:57<HMCa_> herodust: your first specific task is... to stick around. XD
13.05.18 22:29:25<HMCa_> so if I were to call out for a specific "next task" building upon what exists publicly now, that I would say has not succeeded fully yet, it would be a structure for mltt (maybe nuprl like) in n3logic...
13.05.18 22:29:40<HMCa_> the "p63 or k-dtt or whatever" thing
13.05.18 22:32:17<HMCa_> from stoopkid's question, I guess he was probably headed in that direction
13.05.18 22:35:11<HMCa_> there are really only 3 things to build before genesis... the language, core's i/o ring, and the fixed signature portion of the interfaces between the chain logic and core
14.05.18 00:45:55*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yxleyfwxvfmtdjcr) left #AutoNomic: Quit: Connection closed for inactivity
14.05.18 03:23:34*** Join: herodust (4d7e50e3@gateway/web/freenode/ip.77.126.80.227, (unauthenticated): 77.126.80.227 - http://webchat.freenode.net)
14.05.18 03:28:29*** Quit: herodust (4d7e50e3@gateway/web/freenode/ip.77.126.80.227) left #AutoNomic: Quit: Page closed
14.05.18 05:02:02*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
14.05.18 05:06:25<nilli> hi, Im such an idiot, actuality everyone else is, and my problem is not realizing that right away so I guess I am the idiot after all :) and let me explain
14.05.18 05:07:39<nilli> when tauchain started it was the one thing that can not fail ever, since anything that will follow will be a part of it
14.05.18 05:11:28<nilli> this is the basic design. but without the Agora tokens it would have been a theory only and each branch would be a separate one
14.05.18 05:13:04<nilli> once I apply the Agoras tokens to the autonomic brunch I bring both together, right?
14.05.18 05:30:33*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
14.05.18 05:49:04<nilli> So ..... cut the story short. herodust worked with me on something, few steps ahead of where most stand today with regards to the understanding of the blockchain
14.05.18 05:50:10<nilli> ofc he think that he is smarter then anyone else our there (sound familiar?)
14.05.18 05:51:33<nilli> so I challenged him to step in eventually in order to build the app that will use agoras on autonomic (did I allready said that I am an idiot? )
14.05.18 05:52:46<nilli> then I can fund his development (assuming you are somehow part of it)
14.05.18 05:54:48<nilli> basically have him getting involve. that way you are testing each other while I stand on the side watching (since I cant evaluate what you do)
14.05.18 05:59:32<nilli> brilliant right? ,,, well wrong since I forgot to pay attention to the fact that he is good friends with some of Ohads people so instead of solving a problem Im creating one .
14.05.18 06:01:53<nilli> bottom line : 13.05.18 20:22:57<HMCa_> herodust: your first specific task is... to stick around. XD ----> most likely it will fail here already.
14.05.18 06:25:09*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
14.05.18 06:28:06*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 255 seconds
14.05.18 06:28:20*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
14.05.18 06:44:45*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nsnmxlpnowastada, stoopkid: stoopkid)
14.05.18 07:19:08*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
14.05.18 08:41:56*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
14.05.18 08:42:20*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
14.05.18 08:55:50<HMCa_> nilli: it is a shame. :-|
14.05.18 08:57:43<HMCa_> here we were all excited about having some new participation
14.05.18 08:59:48<stoopkid> heya
14.05.18 08:59:59<stoopkid> "from stoopkid's question, I guess he was probably headed in that direction" yep, exactly that direction
14.05.18 09:03:17<stoopkid> "core's i/o ring, and the fixed signature portion.." hrm
14.05.18 09:23:21<stoopkid> when we say that closed-phase uses combinatorial circuits, what about functions like `_++ : Nat -> Nat`, needs an infinite number of input registers & output registers
14.05.18 09:25:16<stoopkid> or do we just say it corresponds to some *family* of combinatorial circuits
14.05.18 10:19:09<stoopkid> https://en.wikipedia.org/wiki/Combinational_logic
14.05.18 10:19:32<stoopkid> "An alternate term is combinatorial logic,[2] though this usage may be considered controversial.[3]" interesting
14.05.18 10:22:29<stoopkid> maybe not so controversial, every combinational circuit should be effectively equivalent to some lambda combinator (when applied to a sequence of at least two distinct free variables), and every lambda combinator (when assumed to just be applied to sequences of free variables), should be equivalent to some combinational circuit
14.05.18 10:28:52<stoopkid> ah nvm, combinational circuits are more powerful, with combinators all you get is constants & projections
14.05.18 10:32:14<stoopkid> what i was *actually* thinking was that there should be expressions in combinatory logic that perform the job of each combinational circuit by being applied to some sequence of free-variables representing the input, just the same as you can make SKI combinator expressions that simulate every lambda combinator
14.05.18 10:32:51<stoopkid> but then, that doesn't really seem to have anything to do with whether they should be called combinatorial, so.. maybe i'm just using the wrong term XD
14.05.18 14:01:27<stoopkid> interesting, the alternating depth-first vs. breadth-first search on euler lets it make progress on all search-paths even if some are inflooping
14.05.18 14:02:06<stoopkid> or, "could" anyway, i'll have to verify whether its actually used that way or not
14.05.18 15:15:53*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
14.05.18 18:56:01*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 248 seconds
15.05.18 01:00:58*** Join: jb01 (uid289576@gateway/web/irccloud.com/x-opklgoqpqmollmql, (unauthenticated): jb01)
15.05.18 03:10:09*** Quit: jb01 (uid289576@gateway/web/irccloud.com/x-opklgoqpqmollmql) left #AutoNomic: Quit: Connection closed for inactivity
15.05.18 04:34:32*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 04:57:37*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
15.05.18 05:54:17*** Join: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109, (unauthenticated): 5.29.152.109 - http://webchat.freenode.net)
15.05.18 06:00:11<nilli> So guys , herodust message to me was that he would work on things if it ill be specified to him, or that I will communicate it to him  I dont think its an option .but if you can see it differently let me know
15.05.18 06:00:23<nilli> will be
15.05.18 06:03:00<nilli> his last project was that https://www.frostbytewallet.io/ after for my news project he head to work with etherume.
15.05.18 06:10:19<nilli> The product that that we worked on in the embassy hakathon has to do with retrieving information from a monitoring device (like a camera) using AI analysis of the feed to ask questions
15.05.18 06:11:34<nilli> that by using the blockchain as the communication infrastructure , thus not having any third party who get the feed
15.05.18 06:15:52<nilli> the monitoring device is connected to a wallet address and so is the permitted remote device that ask the question as a transaction and by permission get the answers as a transaction
15.05.18 06:17:43<nilli> So I wanted him to keep working on that as the app to deploy on autonomic
15.05.18 06:19:24<nilli> assuming the if not you nither Ohad will finish a the development, we can deploy it on bitcoin or other blockchain meanwhile.
15.05.18 06:20:36<nilli> but he need to speak with you in order to do that.....
15.05.18 06:22:52<nilli> by now he already have more ideas regarding that but im not totally flowing
15.05.18 06:29:40<stoopkid> hey nilli
15.05.18 06:30:11*** Quit: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109) left #AutoNomic: Ping timeout: 260 seconds
15.05.18 06:31:48<stoopkid> i guess i'll just add my responses to my email responses
15.05.18 06:44:55*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 07:25:29*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 255 seconds
15.05.18 09:26:19<HMCa_> nilli: we would love to have him work with us, but we can only work with someone who is around to be worked with...
15.05.18 09:32:58*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
15.05.18 11:06:09*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
15.05.18 11:07:45*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 248 seconds
15.05.18 11:45:19*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 260 seconds
15.05.18 12:52:46*** Join: koom (~koom@89.24.51.221, (unauthenticated): realname)
15.05.18 13:01:53*** Quit: koom (~koom@89.24.51.221) left #AutoNomic: Ping timeout: 248 seconds
15.05.18 13:10:27*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 14:01:24*** Join: jibble__ (uid48680@gateway/web/irccloud.com/x-httyklsdeegmewlg, (unauthenticated): bacon)
15.05.18 15:33:21*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
15.05.18 16:10:23*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 18:08:41*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
15.05.18 18:26:56*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
15.05.18 19:40:42*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
16.05.18 04:01:43*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
16.05.18 04:02:08*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
16.05.18 04:23:57*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
16.05.18 04:48:26*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 255 seconds
16.05.18 07:03:55*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
16.05.18 08:25:33*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
16.05.18 14:22:21*** Quit: jibble__ (uid48680@gateway/web/irccloud.com/x-httyklsdeegmewlg) left #AutoNomic: Quit: Connection closed for inactivity
16.05.18 15:12:50*** Quit: Deadhand (~deadhand@CPE6038e0be3871-CMf0f249a14e40.cpe.net.cable.rogers.com) left #AutoNomic: Ping timeout: 256 seconds
16.05.18 20:37:13*** Join: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-98-138.dsl.bell.ca, (unauthenticated): deadhand)
16.05.18 20:41:46*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-98-138.dsl.bell.ca) left #AutoNomic: Ping timeout: 264 seconds
16.05.18 22:58:15*** Join: Deadhand (~deadhand@kntaon1614w-lp130-04-174-92-68-231.dsl.bell.ca, (unauthenticated): deadhand)
16.05.18 23:39:27*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-04-174-92-68-231.dsl.bell.ca) left #AutoNomic: Ping timeout: 265 seconds
16.05.18 23:45:00*** Join: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-98-67.dsl.bell.ca, (unauthenticated): deadhand)
17.05.18 00:31:27*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-98-67.dsl.bell.ca) left #AutoNomic: Ping timeout: 240 seconds
17.05.18 00:37:04*** Join: Deadhand (~deadhand@kntaon1614w-lp130-01-70-50-133-132.dsl.bell.ca, (unauthenticated): deadhand)
17.05.18 00:41:18*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 01:00:57*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-01-70-50-133-132.dsl.bell.ca) left #AutoNomic: Ping timeout: 240 seconds
17.05.18 01:06:36*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca, (unauthenticated): deadhand)
17.05.18 01:14:09*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca) left #AutoNomic: Ping timeout: 248 seconds
17.05.18 01:18:12*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca, (unauthenticated): deadhand)
17.05.18 02:42:18*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
17.05.18 03:10:21*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 03:34:34*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
17.05.18 03:45:17*** Join: cogito (4d8af8e9@gateway/web/freenode/ip.77.138.248.233, (unauthenticated): 77.138.248.233 - http://webchat.freenode.net)
17.05.18 03:49:00*** Quit: cogito (4d8af8e9@gateway/web/freenode/ip.77.138.248.233) left #AutoNomic: Client Quit
17.05.18 06:13:51*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
17.05.18 06:14:15*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.05.18 08:47:41*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 09:58:54*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
17.05.18 10:09:45*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 10:10:49*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Remote host closed the connection
17.05.18 10:11:03*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 11:57:46*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Remote host closed the connection
17.05.18 11:58:03*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 12:34:02*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
17.05.18 15:46:16*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
17.05.18 18:33:29*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 260 seconds
18.05.18 00:12:26<HMCa_> LET'S BE BIRDS
18.05.18 00:39:28<daemoz_> WHY
18.05.18 00:40:07<HMCa_> sorry, don't mind me, just messing around
18.05.18 00:40:12<HMCa_> sup daemoz_ ?
18.05.18 00:43:52<daemoz_> Oh you know, same old.
18.05.18 00:45:15<HMCa_> I don't know, my "same old" consists of basically something new and random every few days/weeks, heh
18.05.18 00:48:38<HMCa_> like right now I'm basically just watching people who are watching people disconnect from a network
18.05.18 00:48:56<HMCa_> and drinking a rum
18.05.18 00:49:02<HMCa_> for some reason someone is paying me to do these things
18.05.18 00:49:09<HMCa_> I only sort of understand it.
18.05.18 01:14:13*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nsnmxlpnowastada) left #AutoNomic: Quit: Connection closed for inactivity
18.05.18 01:53:14<daemoz_> Sounds alright to get paid to do that xD Does seem puzzling..
18.05.18 01:58:22<HMCa_> I'm not sure if it is really all right or not, tbh.  Symptomatic, imo.
18.05.18 01:58:25* HMCa_ shrugs
18.05.18 01:59:48<HMCa_> done there now, "unwinding" at a bar that I got dragged to, though oddly it has me more wound up than at the job site, heh
18.05.18 02:00:16<HMCa_> not really my kind of thing
18.05.18 02:15:53*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 03:50:02<daemoz_> Those situations can give me anxiety lol
18.05.18 03:50:06<daemoz_> And symptomatic of what?
18.05.18 03:51:22*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 264 seconds
18.05.18 03:52:53*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 05:00:26*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 05:03:33*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
18.05.18 05:52:05*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 240 seconds
18.05.18 06:04:32*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 06:35:56*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 268 seconds
18.05.18 07:07:05*** Join: koom_ (~koom@79.98.72.195, (unauthenticated): realname)
18.05.18 08:33:54*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gcsrsaakwphypxpd, stoopkid: stoopkid)
18.05.18 09:34:52*** Quit: koom_ (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 256 seconds
18.05.18 16:34:49*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
18.05.18 17:15:12*** Quit: koom (~koom@193.86.78.254) left #AutoNomic: Ping timeout: 255 seconds
18.05.18 17:19:24*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
18.05.18 18:56:33*** Quit: koom (~koom@193.86.78.254) left #AutoNomic: Ping timeout: 248 seconds
18.05.18 19:04:46*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
18.05.18 19:44:01*** Quit: koom (~koom@193.86.78.254) left #AutoNomic: Ping timeout: 248 seconds
18.05.18 20:51:20<HMCa_> daemoz_: I'm not entirely sure what to call it
18.05.18 20:52:55<HMCa_> maybe just more problems for the taus to try and solve
18.05.18 21:32:14*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 276 seconds
18.05.18 21:45:52*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
18.05.18 22:03:57*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 240 seconds
18.05.18 22:21:06*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
19.05.18 09:57:18*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gcsrsaakwphypxpd) left #AutoNomic: Ping timeout: 256 seconds
19.05.18 09:59:08*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rkyufcoypygeccxj, stoopkid: stoopkid)
19.05.18 10:04:01*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rkyufcoypygeccxj) left #AutoNomic: Max SendQ exceeded
19.05.18 10:04:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jjxnwjuvjjwablre, stoopkid: stoopkid)
19.05.18 10:41:57*** Quit: cantora (sid147800@gateway/web/irccloud.com/x-zmdjhepviigvxnnz) left #AutoNomic: Ping timeout: 256 seconds
19.05.18 10:42:16*** Netmerge: *.net *.split, split 2 days 16 hours 12 minutes 6 seconds ago (Use /WL to see who's still missing)
19.05.18 10:52:01*** Join: koom (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
19.05.18 11:12:00*** Join: koom_ (~koom@132.154.broadband.iol.cz, (unauthenticated): realname)
19.05.18 11:12:33*** Quit: koom (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 256 seconds
19.05.18 11:33:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jjxnwjuvjjwablre) left #AutoNomic: Remote host closed the connection
19.05.18 11:39:48*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ffrivdoeagyfqpnf, stoopkid: stoopkid)
19.05.18 11:41:28<stoopkid> HMCa_ koo5[m] daemoz_ dmiles: thoughts? https://pastebin.com/YT54eCGk
19.05.18 11:42:44<stoopkid> woops that natural-deduction True-elim should have C[x\p] in the conclusion not C[x\t]
19.05.18 11:44:52<stoopkid> things that are currently confusing me for the N3 representation: contexts and how they should be passed around, turnstiles, MLTT substitution, and binding trees (like {}.c)
19.05.18 11:47:25<stoopkid> i guess the "(unit ?c) true-rec ?y." in the True-comp rule should be moved into the premises
19.05.18 11:50:38<stoopkid> currently proofs-under-assumption, like what's indicated by `G, x : True |- C : Set` are causing me to add rules as premises in some of the rules, like `{?x a True} => {?C : Set}.` in the body of True-elim and True-comp
19.05.18 11:51:44<stoopkid> basically i'm using => for both the horizontal line as well as the turnstile |-
19.05.18 11:53:26*** Quit: koom_ (~koom@132.154.broadband.iol.cz) left #AutoNomic: Ping timeout: 268 seconds
19.05.18 11:53:59<stoopkid> the way natural deduction works would indicate that G should be referenced explicitly within the N3 rules? it certainly is in the ND rules anyway
19.05.18 14:17:44<HMCa_> e:findall
19.05.18 14:17:53<HMCa_> level breaking
19.05.18 14:22:35<HMCa_> stoopkid: instead of a second order deduction with gamma we can use a subquery search in first order with managed contexts
19.05.18 14:32:42<HMCa_> with an esplicitly referenced gamma, the ND form is two levels and so the implications are high order, we can "undo that" in the translation to n3 with level breaking, to end up at a simulation of nested first order implications instead of something "actually high order"
19.05.18 14:59:31<stoopkid> hrm
19.05.18 15:00:27<stoopkid> so we'd basically add the contents of gamma as triples to the graph and then subquery over that with e:findall?
19.05.18 15:09:24<stoopkid> so you'd say that my True-elim and True-comp are "actually second order" because they make use of explicit nested first-order implications?
19.05.18 15:26:31<HMCa_> no, I'm saying the ND is "actually second(+) order"...
19.05.18 15:27:59<stoopkid> via pred-vars / quantification over sets/relations?
19.05.18 15:29:01<HMCa_> generally nested implications, yes
19.05.18 15:31:03<HMCa_> keep in mind that e:findall doesn't have to operate over "the graph" but can search a specified subset of it (a scope)
19.05.18 15:31:19<HMCa_> in a sense the scope "is a gamma"
19.05.18 15:32:06<HMCa_> our background is a hypergraph... :-)
19.05.18 15:32:57<HMCa_> any limited scope within that hypergraph is also a hypergraph, and can be treated as background for a subquery
19.05.18 15:34:02<HMCa_> so we can leave first order in controlled ways, and avoid explosion when we break levels.
19.05.18 15:35:15<HMCa_> so "should G be referenced explicitlt by the n3" is sort of too specific a question, heh...
19.05.18 15:36:51<HMCa_> G (or, more appropriately, "the Gs") will be referenced explicitly in the n3, yes, but that sort of misses the point... :-)
19.05.18 15:38:11<HMCa_> it won't be referenced in the way that I think you're probably thinking it would, heh
19.05.18 15:38:59<HMCa_> maybe we need a new nomenclature here...
19.05.18 15:39:09<HMCa_> "temporary reasoning contexts" or something :-)
19.05.18 15:55:21<stoopkid> hrm, ok i need to think about what's the relationship between nested implications & predvars/higher-order logic
19.05.18 16:13:47<koo5[m]> ¯_(ツ)_/¯
19.05.18 16:14:33<koo5[m]> Are we giving types to n3 or modeling agda in n3?
19.05.18 16:16:13<koo5[m]> And as usual, i dont know what many of these single-letter variables and half-word identifiers mean
19.05.18 16:17:45<stoopkid> they don't mean anything, they're just syntactic labels
19.05.18 16:18:09<stoopkid> their meaning is given by the rules
19.05.18 16:19:16<stoopkid> the idea i'm going with is that we're using n3 as a natural deduction engine directly
19.05.18 16:21:09<stoopkid> the only labels that would have their own independent meanings here would be "a" and "subst"
19.05.18 16:21:35<stoopkid> hrm, i should probably rewrite my n3 rule-sets with "<="
19.05.18 17:21:56<stoopkid> HMCa_: hypergraph or just graph? we only have binary relations here
20.05.18 01:37:34*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
20.05.18 01:38:25*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 02:43:28<HMCa_> dototd: a collective performance art with an assertable, productive meaning
20.05.18 02:44:06<HMCa_> psa: taus can be dangerous
20.05.18 08:52:34*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
20.05.18 09:19:56*** Quit: koom (~koom@193.86.78.254) left #AutoNomic: Remote host closed the connection
20.05.18 09:20:26*** Join: koom (~koom@193.86.78.254, (unauthenticated): realname)
20.05.18 12:56:54*** Quit: koom (~koom@193.86.78.254) left #AutoNomic: Ping timeout: 255 seconds
20.05.18 13:34:05*** Join: koom (~koom@89.24.54.189, (unauthenticated): realname)
20.05.18 13:42:55*** Quit: koom (~koom@89.24.54.189) left #AutoNomic: Read error: Connection reset by peer
20.05.18 13:44:32*** Join: koom (~koom@89.24.54.189, (unauthenticated): realname)
20.05.18 13:56:34*** Join: koom_ (~koom@37-48-49-5.tmcz.cz, (unauthenticated): realname)
20.05.18 13:58:57*** Quit: koom (~koom@89.24.54.189) left #AutoNomic: Ping timeout: 240 seconds
20.05.18 14:01:58*** Quit: koom_ (~koom@37-48-49-5.tmcz.cz) left #AutoNomic: Ping timeout: 276 seconds
20.05.18 14:39:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ffrivdoeagyfqpnf) left #AutoNomic: Quit: Connection closed for inactivity
20.05.18 15:01:43*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
20.05.18 16:02:48*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
20.05.18 16:03:12*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 16:40:07*** Quit: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Quit: WeeChat 2.1
20.05.18 16:45:45*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 21:04:21*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
20.05.18 21:04:45*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 21:48:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
20.05.18 21:49:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.05.18 22:02:10*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xfiujrtrjhnyolgm, stoopkid: stoopkid)
20.05.18 22:19:22<stoopkid> https://en.wikibooks.org/wiki/Prolog/Bagof,_Setof_and_Findall
20.05.18 22:25:22<stoopkid> so the idea i'm getting is that the relationship between findall and higher-order-logic is that it gives us a way to talk about sets/structures composed of objects in the domain, as opposed to just the objects
20.05.18 22:25:29<stoopkid> although i still only have a fuzzy picture about it
20.05.18 22:48:40<stoopkid> dmiles: i wonder if resolution algorithm still works if you get rid of principle of explosion / False-elim
20.05.18 22:52:30<stoopkid> https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-825-techniques-in-artificial-intelligence-sma-5504-fall-2002/lecture-notes/Lecture7FinalPart1.pdf
20.05.18 22:52:40<stoopkid> page 25
20.05.18 22:52:59<stoopkid> interesting, resolution principle implies principle of explosion
20.05.18 22:57:14<stoopkid> and then interestingly enough it goes on to talk about how PoE makes strict logic "brittle", or "not robust in the presence of 'noise'", but then instead of going a paraconsistent direction with it they go a probabilistic direction
20.05.18 23:02:54<stoopkid> koo5[m]: that pdf describes the "how" of resolution by refutation pretty well but only sort of goes into the "why"; the answers here seem to go a bit more into the "why", but, needs to be supplemented with other material to explain the answers more fully: https://cs.stackexchange.com/a/9096
20.05.18 23:07:32<stoopkid> dmiles: afaict resolution rule is only derivable in MLTT / constructive logic if principle of explosion is allowed
20.05.18 23:08:26<dmiles> stoopkid, well for a while I like to distinguish two types of higher order types for resolution.. one type is partial first order terms and the 2nd type ius 2nd order terms
20.05.18 23:08:58<dmiles> exmaple of a partial firtst order term might be   exists(X, X>0).
20.05.18 23:09:11<dmiles> or evenm more losselyu
20.05.18 23:09:32<dmiles> or even more loosely    all(X, X>0).
20.05.18 23:10:07<dmiles> this is a partial term tha tis defined intensionally
20.05.18 23:11:05<dmiles> exists(X, X>0), integer(X), X<2).
20.05.18 23:11:34<dmiles> is this last expression still partial?
20.05.18 23:12:41<dmiles> where i was going anyways is that there are "values" that possibly partial (under some defination)
20.05.18 23:13:05<dmiles> these type of special terms violate everything we'd like to call first ordeer
20.05.18 23:13:39<dmiles> yet we can still use them very natrually in resolution
20.05.18 23:14:07<dmiles> in fact w/o resolution semantics we cant even talk about the meaing of such terms
20.05.18 23:15:06<dmiles> (as these special terms are only interesting because of they way they overload and manipulate how resolution works)
20.05.18 23:15:34<stoopkid> i'm not sure what's meant by "partial" first order term here
20.05.18 23:15:41<dmiles> anyways where i was going to go next is such expressive terms may or may not be able to be translated to nomral logics
20.05.18 23:16:06<dmiles> yet work stellar in resolution
20.05.18 23:16:32<dmiles> a partial first order term in Prolo wuld be..   dif(X,1).
20.05.18 23:16:47<dmiles> a partial first order term in Prolog would be.. ?-  dif(X,1).
20.05.18 23:16:57<dmiles> this X esists as any term wich is not 1
20.05.18 23:17:14<dmiles> its only partly bound
20.05.18 23:18:45<stoopkid> btw here's a demonstration of why constructive logic would need principle of explosion in order to derive resolution rule: https://pastebin.com/bXUVhPHB
20.05.18 23:19:16<dmiles> so a question we might have can we define a St in which *that* X is from?
20.05.18 23:19:22<dmiles> so a question we might have can we define a Se\t in which *that* X is from?
20.05.18 23:20:02<stoopkid> a Set such that X is an element of that set?
20.05.18 23:20:27<dmiles> defined a Set based on values that are possible for that X
20.05.18 23:20:40<stoopkid> gotcha
20.05.18 23:21:22<dmiles> oh by the way there are two types of resolution here SLD-Resolution and Propositionaly resultion
20.05.18 23:22:00<dmiles> for some reasoning i was thinking you meant https://en.wikipedia.org/wiki/SLD_resolution
20.05.18 23:22:43<dmiles> oops that wikipedia page makes them about the same thing.. grr
20.05.18 23:23:13<dmiles> actualyl it does ecxplain how they are differnt .. just not in any diagrams
20.05.18 23:23:33<stoopkid> ah, yea i'm seeing a lot of overlap in concepts with this page https://en.wikipedia.org/wiki/Resolution_%28logic%29
20.05.18 23:24:20<dmiles> SLD resolution implicitly defines a search tree of alternative computations .. what my ?- dif(1,X) was about is that particualr X makes a few extra branches
20.05.18 23:25:11<dmiles> ?- X = 1.       will make 0 or 1 branch but no extras
20.05.18 23:25:59<stoopkid> ok i think i see the difference between SLD-resolution and "the resolution rule":
20.05.18 23:26:01<stoopkid> https://en.wikipedia.org/wiki/Resolution_%28logic%29#A_resolution_technique
20.05.18 23:26:18<stoopkid> "When coupled with a complete search algorithm, the resolution rule yields a sound and complete algorithm for deciding the satisfiability of a propositional formula, and, by extension, the validity of a sentence under a set of axioms."
20.05.18 23:26:52<stoopkid> so resolution rule by itself doesn't give an inferencing/search algorithm, it gives the atomic steps that an inferencing/search algorithm could use
20.05.18 23:27:37<stoopkid> "SLD resolution (Selective Linear Definite clause resolution) is the basic inference rule used in logic programming. It is a refinement of resolution, which is both sound and refutation complete for Horn clauses."
20.05.18 23:28:18<dmiles> And soemtimes we use DLPP for SLD resolution
20.05.18 23:28:26<dmiles> sorry DPLL
20.05.18 23:28:42<dmiles> "One instance of this algorithm is the original Davis–Putnam algorithm that was later refined into the DPLL algorithm that removed the need for explicit representation of the resolvents."
20.05.18 23:28:55<stoopkid> so SLD is basically a more specific version of the resolution rule, that gets it closer to describing an actual inferencing/search algorithm
20.05.18 23:29:15<dmiles> "m that removed the need for explicit representation of the resolvents"  <- this is what i mean that we can create special terms normally unlogically representable
20.05.18 23:29:53<dmiles> such as my so called "proof carrying terms" :P
20.05.18 23:30:45<dmiles> i use special witnessing terms that carry within them meta-information that completely change the vaslid resolution stractegies for unificatio
20.05.18 23:30:47<dmiles> n
20.05.18 23:31:55<dmiles> not to make this sound complex.. i can explain them very easilly
20.05.18 23:32:25<dmiles> imagine a woman that is my grreat grand mother and whom is your aunt
20.05.18 23:33:09<dmiles> we dont know her name.. nor do we care.. but every binding this variable takes on.. will carry the axioms about being my grandmother and your aunt
20.05.18 23:33:49<dmiles> this term may unify with various women.. but it will not unify as either one of our mothers
20.05.18 23:34:13<dmiles> this term carries with it everything we know is true about this term
20.05.18 23:35:04<dmiles> so everything we can prove so far up to this chain that is true and false is proven by this term by its mere existence
20.05.18 23:35:28<dmiles> this terms is nort only a binding but carries a proof
20.05.18 23:35:46<dmiles> ?-  dif(X,1).
20.05.18 23:36:01<dmiles> is a proof carirying term .. that can only proof that it is differnt than 1
20.05.18 23:36:39<dmiles> this means everywhere below in Resolution must obey .. but nothing above
20.05.18 23:37:23<stoopkid> hrm, you mean X carries with it a proof that it's different than 1, and that proof would be dif(X,1) ?
20.05.18 23:37:48<dmiles> it carries that contraint therefore we can know we have proved it already"
20.05.18 23:37:56<dmiles> it carries that contsraint therefore we can know we "have proved it already"
20.05.18 23:38:15<stoopkid> gotcha
20.05.18 23:38:33<dmiles> so if X became 3 we dont have to work too hard to prove it is not =1
20.05.18 23:38:48<stoopkid> right
20.05.18 23:38:51<dmiles> as it cant even become 3 unless it didnt violate resolution
20.05.18 23:38:56<dmiles> *nod*
20.05.18 23:39:14<dmiles> just like before the aleged woman being my grandmother whom also becomes your aunt
20.05.18 23:39:36<dmiles> carries that constraint
20.05.18 23:39:48<dmiles> thus the proof becomes implicit
20.05.18 23:40:07<dmiles> (for skolemizations of entiries)
20.05.18 23:40:14<dmiles> not biggy yet
20.05.18 23:40:26<dmiles> now lets see how this effects how sets can be defined
20.05.18 23:40:44<dmiles> we can define woman whom are not my granmother
20.05.18 23:40:51<dmiles> we can define women whom are not my granmother
20.05.18 23:41:50<dmiles> we can have sets that have constraints
20.05.18 23:42:06<dmiles> and thoise constraints come and go durring resolutiuon
20.05.18 23:42:37<dmiles> based on how many back chains from the top the DPLL/SLD is
20.05.18 23:43:59<dmiles> one needed to have a language that that has differnent expressivity and semantics durring certain phases of resoluitons
20.05.18 23:44:21<dmiles> durring certain phases of resoluiton and none during other times
20.05.18 23:45:21<dmiles> at least to be able to express certain things
20.05.18 23:46:20<dmiles> reading https://pastebin.com/bXUVhPHB   I assume littel 'a's to be closures of Big 'A's
20.05.18 23:47:12<stoopkid> little a's would be proofs of big A's / little a's would be objects of type big A
20.05.18 23:47:25<dmiles> "my mom likes asian food" muight be Big A..   .. where little 'a' is  "EileenR lives pot stickers"
20.05.18 23:47:37<dmiles>  "EileenR loves pot stickers"
20.05.18 23:49:01<stoopkid> if the former is a proposition and the latter is an axiom witnessing its truth, sure
20.05.18 23:49:12<dmiles> ok.. that works "a's would be proofs of big A's "  even in my interpretation
20.05.18 23:49:49<stoopkid> and then (_ , _) packages up the two components of a conjunction, and left/right select one of the two components of a disjunction
20.05.18 23:51:06<stoopkid> so (left a, left ~b) is a proof of ((A v B) ^ (~B v C)) when we use the A case for A v B and the ~B case for ~B v C
20.05.18 23:52:29<dmiles> ok i get what you mean now with the B,~B yes that does create a implicative natured thing
20.05.18 23:52:54<dmiles> creates aspecial relationship between A and C in this case
20.05.18 23:53:44<stoopkid> well, in constructive logic a better interpretation is that there was never even a B, ~B case to begin with because it's impossible/contradictory
20.05.18 23:53:55<dmiles> using the "fear of the "  principle of explosion
20.05.18 23:54:33<dmiles> (nothing wrong with this good dose of fear)
20.05.18 23:54:54<stoopkid> but when we enumerate over all syntactically well-formed cases for ((A v B) ^ (~B v C)), we end up with 4 cases, and one of them includes the impossible B,~B case
20.05.18 23:55:15<stoopkid> principle of explosion basically lets us use the contradiction to remove that case from consideration
20.05.18 23:55:24<dmiles> yes.. .. interesting that we have to consider syntactics.. i think that we do as well
20.05.18 23:56:08<stoopkid> right, if we were just looking at the semantics, we mentally toss out the impossible case, and then we can be perfectly constructive on the rest of the cases without resorting to principle of explosion
20.05.18 23:57:00<dmiles> well i'd need to hear what "resorting to the principle of explosion" was.. i noever seen that done
20.05.18 23:58:09<stoopkid> like if i replaced the "???" on the B,~B case with "i get this case for free because anything follows from a contradiction, and 'anything' includes A v C, and i have a contradiction in B,~B"
20.05.18 23:58:27<dmiles> i've only seen systems like logicmoo that dont catch on fire but intead do the right thing when that problem is e3ncounter
20.05.18 23:59:00<stoopkid> well, there's no "do" here really
20.05.18 23:59:10<stoopkid> there's no search algorithm involved at this level of looking at type theory
20.05.18 23:59:31<dmiles> ah.. so a system that needs a type theory that has been finalized?
21.05.18 00:00:42<stoopkid> not sure what you mean
21.05.18 00:00:48<dmiles> in contrast to many systems that have not been able to get a finnalized description of a program or type theory
21.05.18 00:01:48<dmiles> probably for non-partial programs where a type theory is closed unders some assumption they can get a ~B , B
21.05.18 00:02:33<dmiles> theyd claim  B, ~B was  the same as  ~b, b
21.05.18 00:02:45<dmiles> theyd claim  B, ~B was  the same as  b, ~b
21.05.18 00:02:55<dmiles> (I didnt mean to switch argument order the first time)
21.05.18 00:03:23<dmiles> well i am conflating our problem to be bigger here .. sorrey :P
21.05.18 00:03:42<dmiles> that we dont always have the luxury of a complete or total programs
21.05.18 00:04:02<dmiles> had we that luxury, i agree everrything you've said is true
21.05.18 00:04:10<stoopkid> still not quite sure what you mean
21.05.18 00:04:34<stoopkid> but generally in type theory we'll provide ourselves that luxury
21.05.18 00:05:14<stoopkid> (at least none of the constructions/programs given as proofs of implications A -> B will be non-total)
21.05.18 00:07:38<stoopkid> so if i want to prove A -> B, i'm gonna provide a total function f : A -> B, in haskell syntax i can write it like f a = b
21.05.18 00:08:33<stoopkid> `a` is a variable representing a proof of A, b is a term of type B that may contain `a`
21.05.18 00:09:28<stoopkid> if A is a complex term like A v C, we can still do the same thing, like, f : (A v C) -> B, f a = b, although now `a` is representing a proof of A v C
21.05.18 00:09:33<dmiles> ah.. i suppose that works out.. yeah i had to hear myself actualy "conflate"
21.05.18 00:11:32<stoopkid> A -> B is like " all x : A, B", and if we can partition the domain A into subsets that cover the domain, then we can prove it by enumerating over each of those subsets
21.05.18 00:11:37<dmiles> so pretty much 'A' is decidable and not some fragment of <>A
21.05.18 00:12:51<stoopkid> so if we had "all x : {1,2,3,4} , B", we can provide a proof like: f 1 = b_1, f 2 = b_2, f 3 = b_3, f 4 = b_4
21.05.18 00:13:35<dmiles> " <>A \/ ~[]B "
21.05.18 00:13:39<stoopkid> (that's all one proof, just covering each different case of x)
21.05.18 00:13:46<dmiles> (so you dotn dealk with such terms as that)
21.05.18 00:14:46* dmiles is just thinking about the subsets of logic that Curry-Howard breaks down on
21.05.18 00:15:50<stoopkid> i'm increasingly suspecting that there aren't any and instead there's just subsets of logic that logicians (including myself) break down on when trying to wrap their minds around the Curry-Howard interpretation of it
21.05.18 00:16:12<dmiles> that would be nice.. since i have no problem converting such logics to Horn clauses
21.05.18 00:16:17<dmiles> i mean i tend to agree
21.05.18 00:17:02<dmiles> it is just there are many Horn clause programs that it would be too much of a pain in the butt to try to convert them to Haskell
21.05.18 00:17:39<dmiles> "Horn clause programs " though are a special case of programs that mostly Prolog programmers write .. not typical of other programmers
21.05.18 00:18:17<dmiles> since such programs are Partial Programs and cannot be specific in other languages
21.05.18 00:18:50<dmiles> yet programs in other languages can be expressed in horn clauses
21.05.18 00:18:57<dmiles> (as non partial programs)
21.05.18 00:19:06<stoopkid> i tend to think that direct conversion from <whatever system> into type theory is the wrong approach, and not just for the reason you mentioned that there's too many to convert
21.05.18 00:19:20<stoopkid> i tend to think it's the wrong approach because there are *any* programs in <whatever system> at all
21.05.18 00:19:40<dmiles> This is probably why curry horard existed-- is to explain the amzing rationship between what can be done in programmable logic like prolog
21.05.18 00:20:05<stoopkid> the fact that there's even a single program in <whatever system> means that <whatever system> is actually a worthy object of study in its own right, so one would probably instead want to translate <whatever system> as a whole into a description within type theory
21.05.18 00:21:07<dmiles> well yes a partial program ii n prolog represents an infinate numbder of programs in other languages
21.05.18 00:21:44<dmiles> since the depth of partiality is not even computable
21.05.18 00:24:07<stoopkid> well, i have trouble figuring out how exactly my approach to things maps to more standard ways of approaching it (from either the type theory side or the standard logic programming side)
21.05.18 00:24:24<stoopkid> most of what other people have in their programs i have instead in the *types* of my programs
21.05.18 00:26:23<stoopkid> and then most of the "programming" that logic programmers would normally do in that context is search-algorithms to find the proofs which are the programs that type-theorists are writing
21.05.18 00:27:57<dmiles> well i am looking at this from two ways .. i might be moving goal posts wherever i swtich the two ways.. I think of Types as is logical propostion.. for isntance     dif(X,1) -> d(X).
21.05.18 00:29:27<dmiles> then i think of types are things we derive in logic is a    dif(X,1) -> isa(X,d).
21.05.18 00:30:13<dmiles> but what is probly making me confused is i dont know know why someone would write a program in non logic
21.05.18 00:30:24<dmiles> like in a language other than Prolog
21.05.18 00:30:52<dmiles> but i know that people still do.. i just dont know why
21.05.18 00:31:48<dmiles> like why Curry-Howard is even a thing
21.05.18 00:32:10<dmiles> i assume it is that people are still forced to use legacy lagbuages :P
21.05.18 00:32:22<stoopkid> curry-howard is a thing even in the context of prolog
21.05.18 00:34:23<stoopkid> i think "traditional" programmers have an easier time following an explicitly defined, deterministic step-by-step algorithm, rather than a more general search-strategy over a more general rule-set
21.05.18 00:34:33<dmiles> i find this stuff interesting is when it has to do with partial programs
21.05.18 00:35:25<dmiles> in prolog i avoid search be creating lazy partial syntaxes
21.05.18 00:35:41<stoopkid> and i think type-theory-style logicians just take comfort in some particularly well-tested & well-studied & philosophically-well-motivated rule-sets
21.05.18 00:36:22<dmiles> if i had to leave my syntax to go into another system.. i ma not sure the other system would preserve the syntaxtic hacks
21.05.18 00:37:06<dmiles> (though i am sure the other systems could be disigned to)
21.05.18 00:37:36<stoopkid> what the curry-howard/type-theory-style logicians are looking for is to have the semantics of the proposition be witnessed directly in the constructions that count as a proof of it
21.05.18 00:38:08<stoopkid> you don't get this property necessarily in arbitrary rule-sets
21.05.18 00:38:50<stoopkid> like if we have rule-sets talking about aunts and grandmothers, your syntactic proof trees don't witness anything at all about aunt-hood or grand-mother-hood, those are real-world concepts that our logics can never fully capture
21.05.18 00:39:34<dmiles> ah .. see a logic not strong enough for such simplistic logic (grandmother-hood) sounds dangerous
21.05.18 00:39:38<stoopkid> contrast this with stuff that's purely about abstract structure, like, disjunction/unions, conjunctions/records, etc..
21.05.18 00:40:08<stoopkid> grandmother-hood is not just "non-simplistic", it's literally impossible
21.05.18 00:40:24<stoopkid> (for a proof-tree to be an actual witness of grandmother-hood)
21.05.18 00:40:36<dmiles> grandmother-hood logic fully captured under disjuction and negation
21.05.18 00:40:55<dmiles> just not under non-negation and conjuction
21.05.18 00:41:36<stoopkid> no, it can capture some abstract structure that *you* (as a human) interpret as a representation of the real-world concept of grandmotherhood
21.05.18 00:41:51<stoopkid> a constructive proof of grandmotherhood would be more like... your grandmother
21.05.18 00:41:57<stoopkid> like her, directly
21.05.18 00:42:17<stoopkid> along with some DNA tests or something, and even then..
21.05.18 00:42:29<dmiles> we cant capture any semanics of the grandmother.. jsut whoim she is not
21.05.18 00:42:58<dmiles> meaing we cannot decide whom she is
21.05.18 00:43:07<dmiles> we can decide whom she is not
21.05.18 00:43:32<stoopkid> what you prove in logic is more like... a family-tree *drawn on paper*, not the actual family themselves
21.05.18 00:44:19<dmiles> well grandmother in this case would be a program needed constraint
21.05.18 00:44:32<dmiles> another such contraint seems more practicale such as  "non-mispelled word"
21.05.18 00:45:02<dmiles>  "non-mispelled word" is the same proof carrying term
21.05.18 00:45:19<dmiles> "or fully formatted document"
21.05.18 00:46:03<dmiles> there is really no such thing
21.05.18 00:46:53<dmiles> its is an oppinions between the programmer and the user
21.05.18 00:47:08<dmiles> its is maybe a differnce in the oppinions between the programmer and the user
21.05.18 00:47:39<stoopkid> well, the point is that the curry-howard-style logicians basically take the interpretation that you can only prove what you can provide direct witness of
21.05.18 00:48:29<stoopkid> you can capture the "logic of family-trees", but they can already do this by just talking about trees
21.05.18 00:50:18<dmiles> "you can only prove what you can provide direct witness of" <- yeah.. i guess my point was going to be that
21.05.18 00:50:33<dmiles> whatever the user of the program and programmer agreed upon
21.05.18 00:51:13<stoopkid> not sure what you mean there, i just mean that "ah .. see a logic not strong enough for such simplistic logic (grandmother-hood) sounds dangerous" <-- it's not lacking in strength for representing such simplistic logic, it can do that just fine
21.05.18 00:51:18<dmiles> if they want to agree to capture the logic of family trees i guess they will agree at least so far
21.05.18 00:51:55<dmiles> why i say weak.. how do you represent posiblity?
21.05.18 00:52:36<stoopkid> i don't even know what "possibly" and "necessarily" mean outside of a specified  context
21.05.18 00:52:59<dmiles> or even express "not nescisarily A"?
21.05.18 00:53:13<dmiles>  "not nescisarily a non-mispelled word"
21.05.18 00:53:25<stoopkid> in Agda i'd make a record type representing a collection of worlds, and within that collection of worlds i can talk about possibility and necessity
21.05.18 00:54:07<dmiles> yeah.. i thjink what you'd do in agda is right
21.05.18 00:54:24<dmiles> just not sure how to verify that
21.05.18 00:54:50<stoopkid> i.e. 'A is possible in these worlds'  == 'exists some world satisfying the constraints such that A is true in that world'
21.05.18 00:55:10<dmiles> if i verify that some record type is possibly not some other requord type.. thne what tyype is it?
21.05.18 00:55:12<stoopkid> 'A is necessary in these worlds' == 'forall of the worlds satisfying the constraints, A is true in those worlds'
21.05.18 00:56:02<dmiles> lke if i prove that A is not positive or negative.. have i proved it an string?
21.05.18 00:56:29<dmiles> are all the datatypes in a computer even enumerable?
21.05.18 00:57:13<stoopkid> i'm not sure how to interpret the question; i'm really incapable of interpreting possibility & necessity except as model-theoretic satisfiability & validity (which is essentially what i'm doing there with the collections-of-worlds)
21.05.18 00:57:59* HMCa_ eats popcorn and watches dmiles begin to see the light... :-)
21.05.18 00:58:18<HMCa_> 46 < dmiles> there is really no such thing
                 <HMCa_> 46 < dmiles> its is an oppinions between the programmer and the user
21.05.18 00:58:22<HMCa_> 47 < dmiles> its is maybe a differnce in the oppinions between the programmer and the user
21.05.18 00:58:30<HMCa_> this, too, is why we build
21.05.18 00:59:50<HMCa_> let's admit it: they arr bother users and both programmers, and these days often there are some N of them. :-|
21.05.18 00:59:57<HMCa_> *both
21.05.18 01:00:54<HMCa_> the programmer is a using the system(s) too, and the user is programing the system(s) too...
21.05.18 01:01:07<dmiles> what i am theorizing is it is often easier to deal with the logic of the user directly
21.05.18 01:01:55<dmiles> than to go thru the trouble of converting the users logic into types
21.05.18 01:02:05<HMCa_> sure, so let's deal with the logic of all of the users together, directly... (programmers included)
21.05.18 01:02:07<stoopkid> not sure if we'd consider all the data-types representable on a computer to be enumerable; we can certainly enumerate all the programs in a turing-complete system, and every program that decides membership in some data-type would be represented. can we enumerate *just* those decision programs though? i'm not sure, i'd predict not
21.05.18 01:03:38<stoopkid> (and even that is only addressing part of the question)
21.05.18 01:05:43<dmiles> perhaps i see dependent types are much better behaved than the propostional types
21.05.18 01:06:21<dmiles> sometimes propostional types are very unbehaving
21.05.18 01:06:51<stoopkid> taking it from a different angle, you can enumerate all the types in, say, Agda, and that gives you (at least a reference to) every class of structures describable in higher-order-logic
21.05.18 01:08:11<stoopkid> which may or may not be representative of all classes of structures; i was reading a bit earlier that there's still some open questions there
21.05.18 01:08:16<dmiles> yeah i agree we can enumerate all the types a particular program will need.. and that is usefull .. i was axtualyl conflating the issue beyond that
                 <HMCa_> and certainly every structure in some kb in your ram, even (usually) efficiently
21.05.18 01:09:15<HMCa_> oh it can also make nice systems programming, even look imperative, too...
21.05.18 01:09:23<HMCa_> heh
21.05.18 01:11:04<stoopkid> the problem with asking about "all data-structures" is that even when we think we've got them all, we don't know for sure whether we just haven't been imaginative enough, we can only sort of philosophize about it and tell you about the structures we *do* know about :)
21.05.18 01:11:58<HMCa_> welllllll
21.05.18 01:12:00<HMCa_> also...
21.05.18 01:12:30<HMCa_> I could just give you a sort of "fractal data structure generator"...
21.05.18 01:12:51<HMCa_> literally like "map mandelbrot to type descriptions"...
21.05.18 01:13:00<dmiles> one ideal is that a program that is "partial" (has logical holes in it) becomes a sort of "fractal data structure generator"
21.05.18 01:13:27<HMCa_> only sometimes
21.05.18 01:13:34<stoopkid> "just" heh
21.05.18 01:13:58<HMCa_> and we can pretty trivially just not work with those cases, because our types are well behaved...
21.05.18 01:15:41<stoopkid> https://en.wikipedia.org/wiki/Second-order_logic#Relation_to_computational_complexity   "PH is the set of languages definable by second-order formulas." https://en.wikipedia.org/wiki/PH_(complexity)   "However, there is some evidence that BQP, the class of problems solvable in polynomial time by a quantum computer, is not contained in PH.[2]"
21.05.18 01:17:16<HMCa_> quantum is another ballgame, "off into the fractal lake"
21.05.18 01:17:24<dmiles> i think probably there are many ways we are on the same page :)  I think what i say that makes me at odds is i think that that the Curry-Howard divide requires a  specific sort of contructive logic on the logic side
21.05.18 01:18:30<HMCa_> the meanings interp can give you whichever constructive logic you please on the logic side...
21.05.18 01:18:38<dmiles> that specific sort of constructive logic on the logic side is not always tghe most powerfull logic ever
21.05.18 01:19:16<dmiles> meaning i fear for what happens when that logic needs a little more umph
21.05.18 01:19:30<HMCa_> show me where agda/cubical lack? :-)
21.05.18 01:19:51<HMCa_> show me math that isn't hott.  XD
21.05.18 01:20:32<HMCa_> iow, we can assert that we "have all the umph"...
21.05.18 01:21:21<dmiles> mietek in ##dependant explained the missing parts of the lambda cube.. it sounded like only 2 or 3 parts out of it
21.05.18 01:21:40<HMCa_> i mean cubicalTT
21.05.18 01:21:53<dmiles> i'll have to dig thru my disk logs to see if i can capture his arguement
21.05.18 01:22:16<stoopkid> dmiles: remember, anything you make as a prolog rule-set i can make as a record in agda/cubical
21.05.18 01:22:32<stoopkid> records describing collections of worlds is basically my type-theory version of your "proof-carrying terms" thing
21.05.18 01:22:34<HMCa_> and then some. XD
21.05.18 01:23:50<dmiles> stoopkid: yeah.. i think what you are saying is true.. i just trying to guage if at some point you are hacking arround some missing feature you assumed you could once take for granted
21.05.18 01:24:36<dmiles> stoopkid: *feature you assumed you should have taken for granted, but are smart an forgiving of agda and made it work anyways
21.05.18 01:25:45<dmiles> that you are still able (in non-typical ways) to make even hypthetioc possiblity work.. but it was by no means a gift of the TT
21.05.18 01:26:05<stoopkid> hrm..
21.05.18 01:26:32<stoopkid> yes/no
21.05.18 01:26:36<dmiles> whereas i *thought* this was supposed to all be gotten from Curry-Howard
21.05.18 01:26:54<stoopkid> not sure what you mean, i still get everything from curry-howard :)
21.05.18 01:26:59<dmiles> (not from being a agda hacker)
21.05.18 01:27:18<dmiles> i'd want the logic to "round trip"
21.05.18 01:27:41<dmiles> that means that from either side of curry-howard the sematics are visible
21.05.18 01:27:56<HMCa_> idris is cool
21.05.18 01:28:00<dmiles> that it is a automatable process
21.05.18 01:28:31<dmiles> a round trip, atomatable process that can be done by computers as well as stoopkids
21.05.18 01:29:39<dmiles> in some ways the Agda compiler claims it is doing that maybe
21.05.18 01:29:56<HMCa_> idris moreso, imo
21.05.18 01:30:14<dmiles> at least it is coverting one-way and sanity checking the converted version
21.05.18 01:30:36<HMCa_> the idris elaborator and meta-reflective stuff is significantly further along, imo. :-)
21.05.18 01:31:03<stoopkid> hrm, as far as i'm aware there's no effective, sound & complete deduction system for higher-order logic, that's the issue, that's why it's not fully automatable
21.05.18 01:31:27<stoopkid> well, not by any single deterministic search strategy, that is
21.05.18 01:31:29<dmiles> it be interestign to see if a language could be created to make such a thing automatable
21.05.18 01:32:24<dmiles> i'd certainly work harder as a programmert to writ ein it
21.05.18 01:32:26<HMCa_> but it is automatable for any cases you can actually care about, anyway... XD
21.05.18 01:33:19<HMCa_> iow as long as you *don't* hand it a fractal type generator to chew on until segfault, you're going to be just fine...
21.05.18 01:33:53<stoopkid> hrm, not sure
21.05.18 01:34:18<dmiles> (i'd certainly work harder as a programmer to write in whatever language that was)
21.05.18 01:34:23<stoopkid> what i do know is that within agda, i can formulate unsolved problems of mathematics; presumably all the unsolved problems
21.05.18 01:34:48<stoopkid> if we had an automated procedure for solving these problems, they'd be solved :)
21.05.18 01:35:28<HMCa_> stoopkid: in a sense many of them are and all we need is infeasible scale... ;-)
21.05.18 01:35:44<HMCa_> but that is semi-tangental
21.05.18 01:38:13<HMCa_> my point is that unless you are working on an unsolved problem for math, there's nothing to fear because you can just encode the solution to the solved problem... and many of what are commonly considered unsolved or only partly solved problems in computing actually *are* solved because they are solved in math (and so we *can* encode for the machine the solution, and "skip the hard search")
21.05.18 01:38:52<stoopkid> exactly
21.05.18 01:39:01<HMCa_> "don't write to the wrong address in memory" is considered a semi-open problem for most companies today... XD
21.05.18 01:40:20<stoopkid> dmiles: so it's not that it lacks/rejects automation, it's that it's more of a "bring your own automation" kind of situation
21.05.18 01:40:30<HMCa_> "don't route this sort of tcp traffic"...
21.05.18 01:41:13<HMCa_> "don't give the file to users who are X and aren't Y"
21.05.18 01:41:45<dmiles> right at the "users level"
21.05.18 01:41:49<dmiles> http://www.cyc.com/wp-content/uploads/2015/04/CycSecure2001-1.pdf
21.05.18 01:42:00<HMCa_> at *any* level!
21.05.18 01:42:02<HMCa_> heh
21.05.18 01:42:08<dmiles> is simplier thna at the programmer level
21.05.18 01:42:18<HMCa_> not really :-)
21.05.18 01:42:42<HMCa_> it is an ebtirely artificial distinction to begin with, user and programmer...
21.05.18 01:42:46<HMCa_> why not just:
21.05.18 01:42:55<HMCa_> people making agreements? :-)
21.05.18 01:45:13<dmiles> right that is what rules got put into cycSecure.. what people could discover and agree on
21.05.18 01:45:25<dmiles> at least to explain the physics of the system
21.05.18 01:45:44<dmiles> and then even some people agreeing on a few nomral attacks
21.05.18 01:46:02<stoopkid> dependent type theory eliminates a lot of the *need* for distinguishing between users & programmers; the main reason this is done afaict is to make sure the user isn't given enough power over the program to break the program
21.05.18 01:46:48<stoopkid> within dependent type theory we can describe the constraints that we take as representing "non-brokenness", so we can then give all users "full power"
21.05.18 01:47:32<dmiles> in CycSecure the user owns a business he/she wants prottected and explains logically how he wants the compnay protected
21.05.18 01:48:23<dmiles> then Cyc theorizes (plans out) various attacks that would jepordize those protections
21.05.18 01:50:04<dmiles> then tries to automate various fixes until such time it migh tneed the owner to set up special equipmnet (like set up VPNs for remote mail users)
21.05.18 01:50:40<dmiles> anyhow it was easier to solve the problem at the logcal levels of physics
21.05.18 01:51:07<dmiles> " logcal levels of physics"  meaning the system hypothesizes varous worlds
21.05.18 01:51:53<dmiles> there doesnt seem like such a program is easy or practical in Agda
21.05.18 01:52:16<dmiles> or the birthday planner used at my wifes work
21.05.18 01:52:51<dmiles> they have to figure out which employees can decorate which cubicals for what empoyees for their birthday
21.05.18 01:53:36<stoopkid> hrm; hard to say there, that's sort of dependent on what kinds of stuff you've already built up in Agda
21.05.18 01:53:48<stoopkid> it's amazing how many things are "surprisingly easy in x86" :)
21.05.18 01:54:24<dmiles> there are at least 20 rules written in that the birthday planner has to follow.. also the birthday planner program has to guess what corperate databases it needs access to
21.05.18 01:54:59<dmiles> for instnace it needs geographical data to ensure that the employees work in the same city
21.05.18 01:56:42<dmiles> it probably really is the types of problems people are trying to solve with their systems
21.05.18 01:57:03<stoopkid> not sure what difficulties would be present in Agda/type-theory that wouldn't also be present in other frameworks
21.05.18 01:57:31<HMCa_> maybe even less... agda type-providers are goofy fun, for example
21.05.18 01:58:15<dmiles> it is also the logical rules that need to be added into the system long after programmers are gone
21.05.18 01:58:51<dmiles> for instnace my wife was given the same birthday target two years in a row
21.05.18 01:59:03<stoopkid> i certainly don't see any theoretical problem posed by these examples so far, even if there would be a slight convenience issue, needing to build up some background theory describing geographic data-types etc.. (but that just falls into the "problems that would be present in other frameworks" category)
21.05.18 01:59:08<dmiles> making sure that doesnt happen again
21.05.18 02:00:21<dmiles> or the system for instance does not send an email reminder 2 days in advance to remind the person how they need to decorate their cubical
21.05.18 02:00:36<dmiles> (someone decides that behavour is needed)
21.05.18 02:01:22<dmiles> these are the types of problems solkved by rule based logic system like DRools
21.05.18 02:01:27<dmiles> Drools/JESS/CYC/Logicmoo
21.05.18 02:01:38<stoopkid> hrm..
21.05.18 02:02:03<stoopkid> in what sense are they "solving" that problem?
21.05.18 02:02:19<stoopkid> i can't imagine any fully general solution that doesn't involve every user becoming a programmer
21.05.18 02:02:55<dmiles> well these cases the programming language i enoyugh like logic users can see and understand system proofs
21.05.18 02:03:08<stoopkid> well
21.05.18 02:03:25<dmiles> well these cases the programming languages are enough like logic ..  users undergo minimal training can see and understand system proofs
21.05.18 02:03:27<stoopkid> same with agda/type-theory though
21.05.18 02:04:21<dmiles> do you see people with masters in social work programming in Agda or Jess?
21.05.18 02:04:31<dmiles> (more likely Jess)
21.05.18 02:05:07<stoopkid> no but i tend to blame that on the type-theory community rather than type-theory itself
21.05.18 02:06:10<stoopkid> i can certainly write things in Agda that could be understandable to a social worker who was capable of understanding those other frameworks
21.05.18 02:06:14<dmiles>  (defrule 10%-volume-discount  "Give a 10% discount to everybody who spends more than $100."  ?o <-(Order {total > 100})  =>  (add (new Offer "10% volume discount" (/ ?o.total 10))))
21.05.18 02:06:36<dmiles> to give exmple of Jess rule^
21.05.18 02:07:10<stoopkid> is that supposed to be an example of social-worker-readable or non-social-worker-readable?
21.05.18 02:07:22<dmiles> hehe
21.05.18 02:08:18<dmiles> well when they can email he helpdesk and the herlpdesk can email that back to them
21.05.18 02:09:06<stoopkid> well if we have a help-desk that can write & explain the programs then all the programs are back on the table :P
                 <dmiles> then they pop it in the  JESS> repl
21.05.18 02:09:17<dmiles> and now everyones happy
21.05.18 02:09:49<dmiles> no recompilation
21.05.18 02:10:00<HMCa_> we can give social work masters type people a comfortable DSL... that is still mltt.
21.05.18 02:10:24<HMCa_> no helpdesk necessary
21.05.18 02:11:20<stoopkid> and i don't even think it's a far stretch to teach those same people full MLTT
21.05.18 02:11:55<dmiles> i may not have the skills fo convert most of my programs to MLTT :(
21.05.18 02:11:58<HMCa_> we can give frontend ui developers a comfortable DSL that is javascript... that is still mltt.  no retraining necessary
21.05.18 02:12:27<dmiles> like the lisp compiler i wrote this year
21.05.18 02:12:49<dmiles> i not sure how long it take me to rewrite it from prolog to MLTT .. a couple years:>
21.05.18 02:13:03<HMCa_> why rewrite it?
21.05.18 02:13:19<dmiles> it cant be verified if its in prolog?
21.05.18 02:13:30<dmiles> it needs to be in agda or idris?
21.05.18 02:13:43<dmiles> or haskell
21.05.18 02:13:44<dmiles> ?
21.05.18 02:13:58<HMCa_> er, i mean... why not give yourself prolog as the dsl?
21.05.18 02:14:00<HMCa_> :-)
21.05.18 02:14:41<stoopkid> ^ and if you do that there's not even a huge amount of translation to do
21.05.18 02:15:12<stoopkid>  --> "remember, anything you make as a prolog rule-set i can make as a record in agda/cubical"
21.05.18 02:16:51<stoopkid> wait i'm confusing myself / conflating things now
21.05.18 02:17:46<stoopkid> what i meant to say was that you could do quite a bit of direct translation before you'd even have to simulate prolog as a DSL, although ofc simulating prolog as a DSL is the ultimate
21.05.18 02:19:30<stoopkid> https://github.com/sto0pkid/CategoryTheory/blob/master/Agatha2.agda#L96
21.05.18 02:19:33<dmiles>  what is special about it is that i improve it one horn clause line at a time
21.05.18 02:19:42<stoopkid> fairly readable, imo, and i wasn't even going for readability there
21.05.18 02:20:03<stoopkid> i was just going for capturing the semantics of the problem correctly
21.05.18 02:20:17<stoopkid> but ofc, my opinion is biased :)
21.05.18 02:20:27<dmiles> i'd be hoping there is an automatic translation for each horn clause
21.05.18 02:21:16<dmiles> once it translated a few for me i suppose i can do those in my head
21.05.18 02:21:42<dmiles> my propositons can maybe become types
21.05.18 02:21:59<dmiles> right now there are 1000s of propostions
21.05.18 02:23:21<dmiles> exmaple : https://github.com/TeamSPoon/wam_common_lisp/blob/master/prolog/wam_cl/block.pl#L167-L175
21.05.18 02:24:21<stoopkid> https://en.wikipedia.org/wiki/Horn_clause#Logic_programming
21.05.18 02:24:23<dmiles> if that case fails it moves on to the next logical rule
21.05.18 02:24:45<stoopkid> so a horn-clause is just a disjunction with at most one non-negated literal right
21.05.18 02:24:58<dmiles> mostly,  yeah
21.05.18 02:25:30<stoopkid> so you have prolog rules like
21.05.18 02:25:59<stoopkid> conclusion :- premise1, ..., premiseN.
21.05.18 02:26:52<stoopkid> in Agda i'd put that in a record as a field like "my_rule : (premise1 ^ ... ^ premiseN) -> conclusion"
21.05.18 02:27:08<dmiles> most of the time yes ...    sometimes though you might write     complex_process:- step1, step2, step3..
21.05.18 02:28:08<dmiles> the second typer sthough i can write  complex_process: {)  {step1; step2; step3 }
21.05.18 02:29:56<HMCa_> i'd use something more like logicT
21.05.18 02:30:06<dmiles> my paste "debug_var('GoBlockResult',GoResult), "  means find the refernce to "GoResult' in the code and give it a name if the user was using the debugger
21.05.18 02:30:32<HMCa_> which gives you both direct encoding and interleaved sequencing choices
21.05.18 02:30:54<dmiles> (just mentioning sometimes i am mixinging imperitive code with conditional code)
21.05.18 02:31:11<HMCa_> see "backtracking, interleaving, and terminating monad transformers"
21.05.18 02:32:16<dmiles> i suppose it can be done
21.05.18 02:32:23<stoopkid> non-terminating (or not-easily-shown-to-be-terminating) code is what's gonna be tricky part of your translations (like unrestricted imperative code)
21.05.18 02:32:54<stoopkid> but it's not so much that it's tricky, you just have to do it somewhat differently
21.05.18 02:33:42<dmiles> lots of stuff like predicates would translate probly very eaisily
21.05.18 02:33:43<stoopkid> type theory doesn't offer you the same luxury of just being able to conflate logic rules and non-terminating imperative-style code like that (or any other style of non-terminating code, for that matter)
21.05.18 02:34:46<HMCa_> but you can "pretend"... a lot of idris code can look like imperative code.  You can type most of C with mltt (lll types)
21.05.18 02:35:00<stoopkid> well, actually i'm being slightly misleading there, it actually can but it won't run the non-terminating programs for you directly
21.05.18 02:35:01<HMCa_> logicT monad for prolog
21.05.18 02:35:17<HMCa_> haskell almost just drop in sometimes, hehe
21.05.18 02:35:18<HMCa_> almost
21.05.18 02:35:21<HMCa_> :-)
21.05.18 02:35:58<dmiles> some code i bet is easy like:  https://github.com/TeamSPoon/wam_common_lisp/blob/master/prolog/wam_cl/mizepro.pl#L115-L118
21.05.18 02:36:03<stoopkid> but the thing about prolog is, the majority of the algorithmics there are actually a search-strategy over the axioms/rules, not the same thing that type-theorists are usually calling "a program"
21.05.18 02:36:30<stoopkid> what type-theorists call programs are the grounded search-paths that your proof-search-strategy would find
21.05.18 02:36:36<dmiles> yeah in many ways i make things into search that were never search related
21.05.18 02:37:11<HMCa_> dmiles will do a lot of programming/usering at compile phase, I suspect. XD
                 <dmiles> always_true(G):- \+ ground(G),!, fail. always_true(true). always_true(t\==[]). always_true([]\==t).
21.05.18 02:38:09<dmiles> (that just looks for three differnt lisp code idioms that i made the compiler over produce so i can blast them away is a swipe)
21.05.18 02:38:40<stoopkid> what type-theorists call "running one of these programs/proofs" is just normalizing the proof
21.05.18 02:40:48<dmiles> well what i want.. i think is what everyone wants.. we want logic programmer and type theorists hats yto not conflict
21.05.18 02:41:43<stoopkid> i don't really see much of a conflict, personally
21.05.18 02:42:05<dmiles> that is that the times imperative and declaritive parts work together and we actualyl get milliage from types and get miliage from propostions
21.05.18 02:42:11<dmiles> adn we want them to not conflict
21.05.18 02:42:30<stoopkid> most of the conflicts that arise between the communities just seem to be due to conflating things that probably shouldn't be conflated
21.05.18 02:42:36<dmiles> (the curry-howard isomopism to not create a conflict that is)
21.05.18 02:43:04<stoopkid> like conflating proof-normalization with writing imperative code with running proof-search with ...
21.05.18 02:44:12<stoopkid> like, even when you can get the same job done with each of them, that doesn't make them all the same thing
21.05.18 02:44:47<dmiles> (why i created that wam_common_lisp btw is that there was too many stylistic differnces in my lisp code and my prolog code.. i wanted a single compiler that would make them work in new ways together)
21.05.18 02:45:04<HMCa_> let's not actually write imperative code ourselves at all, plz, let's just trick ourselves into thinking that is what we're doing.
21.05.18 02:45:21<HMCa_> humans are actually bad at it. ;-)
21.05.18 02:48:45<stoopkid> hrm
21.05.18 02:48:56<stoopkid> well, afaict still, we live in an imperative world
21.05.18 02:49:33<stoopkid> you need an entirely different world-model than i think the vast majority of people are working with in order to be able to completely reject imperative programming
21.05.18 02:49:53<stoopkid> and i'm not sure that actually simplifies anything for most people
21.05.18 02:50:26<HMCa_> well, let me put that another way...
21.05.18 02:52:21<HMCa_> we should only ever acctually model the imperative programs that we want as impertive programs, we should model them as functional semantic descriptions and let a machine actually construct them.  :-)
21.05.18 02:52:43<HMCa_> *should never
21.05.18 02:53:14<HMCa_> iow we should program in lllt not c, ecen if 99% of the time the source files would be identical...
21.05.18 02:53:57<stoopkid> hrm
21.05.18 02:55:35<stoopkid> so, if i model the c language and its imperative semantics and its compilation to x86 in Agda, and then outside of Agda i take those x86 programs and run them directly with my machine, is that all well and good by your standards?
21.05.18 02:56:15<HMCa_> well, beyond, for my point here, heh
21.05.18 02:57:47<HMCa_> but going beyond in that way makes a further point - there's nothing in most common conputing envs (like x86 land) that couldn't be "brought into the fold"...
21.05.18 02:58:18<HMCa_> x86 *could* be your DSL...
21.05.18 02:58:25<stoopkid> hrm
21.05.18 02:58:35<stoopkid> yes/no
21.05.18 02:58:43<HMCa_> heh, sure...
21.05.18 02:59:53<stoopkid> this is why i usually say "programs actually aren't always (acceptable) proofs"
21.05.18 03:00:29<HMCa_> well sure, your x86 descriptions will reject a lot of machine states...
21.05.18 03:00:42<HMCa_> you won't run windows on it... ;-)
21.05.18 03:01:21<HMCa_> but I say that is... kinda the point, eh?
                 <stoopkid> you mean to say, you won't be able to simulate windows via the normalization of any (acceptable) proof
21.05.18 03:01:30<HMCa_> right, as an example
21.05.18 03:02:02<stoopkid> otoh, you could simulate these things via codata
21.05.18 03:02:11<HMCa_> maybe...
21.05.18 03:02:18<HMCa_> in this case.... well...
21.05.18 03:02:35<HMCa_> I'm pretty sure wibdows has lots of undefined semantics. ;-)
21.05.18 03:02:42<HMCa_> *windows
21.05.18 03:02:52<stoopkid> :)
21.05.18 03:03:17<stoopkid> so maybe package that codata up into a flexible record type that allows you to account for undefined semantics
21.05.18 03:03:55<stoopkid> a collection of possible codata structures, one for each possible interpretation of the semantics
21.05.18 03:04:00<HMCa_> and add one state called "hosed and halted in unknown ways" that everything bails to. XD
21.05.18 03:04:10<stoopkid> sure
21.05.18 03:04:33<HMCa_> ofc this machibe suddenly behaves not exactly like a real x86 machine
21.05.18 03:04:34<HMCa_> but
21.05.18 03:04:38<HMCa_> again
21.05.18 03:04:50<HMCa_> I say that is... kinda the point.
21.05.18 03:05:05* HMCa_ gtg
21.05.18 03:07:30<dmiles> thx.. i have to run as well
21.05.18 03:07:39<dmiles> ttyal
21.05.18 03:08:19<dmiles> but i like the dirrection your thiniking stoopkid, " so maybe package that codata up into a flexible record type that allows you to account for undefined semantics"
21.05.18 03:11:34<stoopkid> HMCa_: i don't assign any particular point to it; if the machine is physically capable of behaving a certain way that's legitimate enough for me
21.05.18 03:11:45<stoopkid> way, *
21.05.18 03:12:13<stoopkid> if it can infloop, then i can model it inflooping; if it's turing-complete, i can model its turing-completeness; if it's imperative, i can model that
21.05.18 03:14:18<stoopkid> do i have any reason to run these programs? not necessarily, but, if i want to, i've modeled them, so i could execute them (i just won't conflate that with "proof normalization" when i do so), and if i don't want to run them, i can model the constraints that prevent me from doing so
21.05.18 03:14:30<stoopkid> i get to have and eat all the cakes
21.05.18 03:17:56<stoopkid> besides: sometimes we aren't just after a DSL that closely corresponds to a well-behaved subset of the target language, we want to reason about arbitrary programs of the target language
21.05.18 03:18:19<stoopkid> including their bad behaviors
21.05.18 03:21:44<stoopkid> i mean, obv if there's some undefined semantics of the machine, we won't be able to compute beyond the point of hitting those undefined semantics, but..
21.05.18 03:22:31<stoopkid> i wouldn't call that "the point" either i'd just call it a natural/inevitable consequence of incomplete information
21.05.18 03:25:05<stoopkid> like if the machine has states with undefined state-transition, you won't be able to assign a program that ever enters that state deterministic execution semantics without 'and add one state called "hosed and halted in unknown ways" that everything bails to. XD'
21.05.18 03:27:45<stoopkid> the "point" for me here is that we have the expressive capacity to model *all* of these things and then verify things about them
21.05.18 03:28:50<stoopkid> that you can place all the given description of the machine into some record and then demonstrate that some of the semantics actually are undefined in the first place
21.05.18 03:29:16<stoopkid> and then come up with a strategy for dealing with that, and then verify things about that strategy, etc..
21.05.18 03:36:45<stoopkid> dmiles: well, that's just the same old idea, no different from the approach i took with representing the dreadbury mansion TPTP problem, but now it's just representing our knowledge of a machine instead of our knowledge the events that took place at dreadbury mansion
21.05.18 03:37:58<stoopkid> of* the events..
21.05.18 03:38:36<stoopkid> i gotta head out too tho, laterz
21.05.18 03:45:16*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
21.05.18 03:48:05<nilli> Hi guys , HMCa and stoopkid I have a few questions to you. maybe not really questions but more like thinking aloud with you on some matters related but not directly being autonomic
21.05.18 03:50:39<nilli> HMCa remember Avishay the physicist  mathematician who tried to work with Ohad on one of his idea regarding P/NP so not that but him. :)
21.05.18 03:56:08<nilli> We are meeting  kind of regularly in a cafe once every few weeks talking about quantum issues and some basic issues as what is 1 or a circle.as 1.
21.05.18 03:59:40<nilli> but also about the connection between relativity and freewill. freewill is becoming a  major factor in physics.
21.05.18 04:03:00<nilli>  (the term being represented something that can be reduced to simple functions in my opinion)
21.05.18 04:07:12<nilli> Anyway we already agreed that we are not trying to achieve any specific goals and are acting as not having to reach any goal.
21.05.18 04:07:45<nilli> which is ofc against anything anyone have to do for a living.
21.05.18 04:08:44<nilli> even as a researcher.
21.05.18 04:21:03<nilli> A few weeks ago avishay met with this guy https://en.wikipedia.org/wiki/Yakir_Aharonov who is a very prominent quantum theorist and is the one defined  freewill as a required factor to explain QM
21.05.18 04:25:37<nilli> ...through out much of our conversations I see often close ties to conversations I had with you here at some times, but its not easy to express it precisely.
21.05.18 04:27:28<nilli> so this may not, be a very coherent conversation but I think I will be able to express the important things and ask the important questions
21.05.18 04:30:24<nilli> So the basic issue that we are trying to investigate is "Intelligence" being represents by the wave-function while "Information" is the collapse of the wave function
21.05.18 04:31:24<nilli> Intelligence being the state of the system before is processed as information
21.05.18 04:34:33<nilli> I see here ties to the state of a network before and after each individual (individual as a localized manifestation) observe a change in the state and transmit it
21.05.18 04:35:20<nilli> so now I get into the parts that I would need your help. Logic
21.05.18 04:42:32<nilli> I feel that I can use logic as a a medium that can express and define intelligence and information and the difference between them
21.05.18 04:47:18<nilli> or ruther  language as the  medium and logic as .... and logic as the apparatus that create language
21.05.18 04:53:38<nilli> So intelligence is observed through logic being the "measuring" device to create "information" as the result.  that information is a "story'  and have the same characteristic of light as information
21.05.18 04:55:29<nilli> language maybe being the pattern created by logic
21.05.18 04:56:32<nilli> A pattern represent a state of a closed system which is the definition of a network in terms of information
21.05.18 04:57:38<nilli> So now im reaching my first question to you after going into the logic lessons given to me by HMCa
21.05.18 05:00:55<nilli> [21:24] <HMCa_> ok, so let's begin at the *very* beginning... with "just what is a language/logic anyway? how *do* things communicate knowledge... there are two aspects: syntax and semantics [21:26] <HMCa_> 'syntax' is "how expressions in the language can be formed" - grammar . 'semantics' is "how exprrssions in the language are interpreted" - meaning
21.05.18 05:08:16<nilli> So first of all there are two functions here, one that form information and one the interpret it  Syntax and Semantics . Grammar and meaning
21.05.18 05:12:37<nilli> grammar represent the reduction process. Meaning represent the transformation back to the abstract inclusive state of intelegence
21.05.18 05:17:16<nilli> The difference between a computer that runs based on truing complete language and an "intelligence"  is that it can not form a syntex thus a new level of meaning. it is always bound to the existing syntax
21.05.18 05:21:20<nilli> what if we apply the wave function to a turing complete language? can we then not predict but actualy create the out come of any individual transaction to an accuracy that is the maximum permitted by tne laws of nature?
21.05.18 05:23:00<nilli> in physics we use that to predict outcomes. but if apply to computer language we can create such reality that will mimic life.
21.05.18 05:31:41<nilli> So we keep the same logic keep the expressiveness of the language  but apply the wave function to the possible results thus achieve a quantum state of decidability which in actual gives us a finite state for any quarry
21.05.18 05:34:22*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 245 seconds
21.05.18 05:38:44<nilli> I just start asking about the logic issues here that I wanted some help with but got into more assumptions that makes me have to think again of what I wanted to ask you.
21.05.18 05:40:41<nilli> By the way HMCa I know why carycary is a bad example for a name . that is since it represent a pattern. and as such in not a name cary is but not carycary.
21.05.18 05:45:29*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
21.05.18 05:59:19* koo5[m] waves
21.05.18 07:11:02* stoopkid functions
21.05.18 07:12:00<stoopkid> @ nilli you’ll probably have to elaborate on all that i only have an extremely fuzzy idea of what you’re trying to express there
21.05.18 10:57:08*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
21.05.18 11:14:12*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
21.05.18 11:20:40<nilli> yes stoopkid it will need to be much more defined to have you able to answer to any of my questions. Im trying to work through it already here assuming you will know if and once I will stir in the right direction.
21.05.18 11:22:42<nilli> I also will repeat things once I think they are important. just react to things that ring a bell :) im not taking any offence and it is not work related directly to autonomic. more general .
21.05.18 11:22:54<stoopkid> well, heh, might be giving me a bit too much credit there, from what little i can tell about your questions they're beyond what i'd consider myself to have any expertise in
21.05.18 11:24:06<stoopkid> my experience is much more restricted in focus and only goes a very little bit into the meaning/nature of "intelligence", and not at all into quantum logic
21.05.18 11:29:59<stoopkid> from the logic side all i can say is that this is maybe too strong of an assumption / too weak a definition of what a turing-complete language/system can be: 'The difference between a computer that runs based on truing complete language and an "intelligence"  is that it can not form a syntex thus a new level of meaning. it is always bound to the existing syntax'
21.05.18 11:31:36<stoopkid> if the intelligence can think about all the turing-machines and simulate their behaviors for "indefinitely long" then your intelligence is turing-complete too
21.05.18 11:32:43<stoopkid> maybe you're thinking of the distinction between deterministic and non-deterministic computing?
21.05.18 11:33:18<nilli>  regarding your first commen: I was trying to give the background to what might come. eventually my questions will be regarding logic that is used in programming on its most fundamental level and that is what you do understand
21.05.18 11:35:31<nilli> defining things as deterministic or nondeterministic is wrong since once we can quantesize the non deterministic state we make it deterministic, as a state
21.05.18 11:36:20<nilli> eventually any measurement is a state
21.05.18 11:37:02<nilli> and all of physics is thus about recording a state"
21.05.18 11:37:42<nilli> that "state" I think is what we try to understand
21.05.18 11:39:17<nilli> since recording the state by measuring it create that state as a result. before  that measuring that state is a wave fuction
21.05.18 11:40:25<nilli> function
21.05.18 11:44:04<nilli> now what draw my attention first is that : Once constructing the way for computer to interact with us we need to think of this two sides: that of grammar to express and that of meaning.
21.05.18 11:44:45<nilli> what is that gap ????
21.05.18 11:46:25<nilli> we think of it so naturally but its not. it represent the brake of conciseness between observing and "recording"
21.05.18 11:50:20<stoopkid> seems consistent with formal logic perspective on things so far at least
21.05.18 11:50:45<nilli> it is the "recording"  that create the need for a "translation" to a move from a state of oneness (nonlocolized) to the state of two (localized)
21.05.18 11:51:45<stoopkid> hrm
21.05.18 11:53:04<nilli> you can then ask how the communication between two intelligent entities (like two humans) differ from the communication between you and a computer
21.05.18 11:53:32<stoopkid> non-localized == uncollapsed wave-form? or am i misinterpreting
21.05.18 11:54:40<nilli> right
21.05.18 11:56:58<stoopkid> the notable difference i've found with communication there is that the human/"intelligent" entities use the information by *reflecting* on both the syntax and its semantic interpretation, whereas with computers we just expect them to "be" the semantic interpretation
21.05.18 11:57:50<nilli> Right!
21.05.18 11:59:36<nilli> so now what is it this "reflection" ? what is it that we do ?
21.05.18 12:00:57<nilli> do we eventually create new syntax or new semantics
21.05.18 12:02:24<stoopkid> hard to say, partly because our "understanding" of things is an active process of *thinking*, not just a static recording of "knowledge"
21.05.18 12:03:46<nilli> this :active process is what we need to understand it have a mechanism .
21.05.18 12:04:46<nilli> Thinking in terms of computers is gathering all exiting information
21.05.18 12:05:46<nilli> existing
21.05.18 12:07:23<nilli> in an order set by the program
21.05.18 12:08:02<stoopkid> well, from the logic side of things, something you might be interested in here is quines
21.05.18 12:09:10<nilli> is it possible that thinking in terms of humans is changing orders of things, not based on timestamped order, but the order created by logic
21.05.18 12:10:01<stoopkid> not sure what you mean by changing the orders of things here
21.05.18 12:11:40<nilli> so we use the same syntax but are changing the order of meanings that we got (im not sure myself just trying some directions)
21.05.18 12:12:56<HMCa_> there seems to be an assumption here that our brains do something which a computer could not, which I can not accept...
21.05.18 12:13:16<nilli> its somewhere in there .... there a few orders or organisations to reach a state of knowledge
21.05.18 12:13:23<nilli> hi HMCa
21.05.18 12:13:38<stoopkid> hrm, i don't think that's the assumption here
21.05.18 12:14:07<nilli> I dont , either HMCa, that is what im trying to get to
21.05.18 12:14:21<HMCa_> then
21.05.18 12:14:30<HMCa_> 3 < nilli> you can then ask how the communication between two intelligent entities (like two humans) differ from the communication between you and a computer
21.05.18 12:14:44<HMCa_> the only possible answer is "none at all"?
21.05.18 12:14:52<nilli> our brain a only program to do something we yet to be able to program computers to do
21.05.18 12:15:10<HMCa_> I wouldn't even say that much, nilli
21.05.18 12:15:54<nilli> what would you say then?
21.05.18 12:17:06<HMCa_> I would not draw any distinction but scale... and even that is a temporary discrepency, which surely will very soon be overcome
21.05.18 12:18:35<nilli> OMG I was looking all day yesterday into your PM on bitcoin talk about scale, thinking there is something in that.... (totaly forgot that)
21.05.18 12:19:32<HMCa_> heh
21.05.18 12:19:53<HMCa_> ot: nilli, is herodust ever coming back? or was that just a tease? :-)
21.05.18 12:19:54<nilli> remember that long description? every once in a while I would go there telling myself im missing something ....(that im not sure you understand fully but know its there)
21.05.18 12:20:44<HMCa_> yes, ofc I remember, it is a description that I give *someone* approx once a year or so. :-)
21.05.18 12:21:28<HMCa_> (and I still stand by the claim it makes...)
21.05.18 12:22:53<stoopkid> there is distinction to be drawn though, it's not about the difference between humans and computers, it's about the distinction between reflection on the semantics of syntax rather than just non-reflectively "being" the semantics
21.05.18 12:24:53<HMCa_> stoopkid: sure, I understand and agree with that distinctiin being extant, but I also argue that both our brains and computers can/do operate in both ways.
21.05.18 12:24:55<nilli> whne looking at it yestarday i did not have that syntax/semantic duality in my mind yet that clearly. had to come back to it today. now i need to put the conversation form before with that scale/complexity view of yours
21.05.18 12:25:52<stoopkid> computers *can* yes, but that's not always how we're specifically using them
21.05.18 12:26:36<HMCa_> sure, i'd say currently even "most often not" ("unfortunately"?)
21.05.18 12:28:55<stoopkid> whether the rest of intelligence is just a matter of scale/complexity beyond this distinction, idk
21.05.18 12:29:31<nilli> what if we add to our considerations here consumption of energy. In some point complexity requires more energy that size can provide
21.05.18 12:30:12<HMCa_> stoopkid: would you at least agree that we *could* construct a computer to do anything that we find a brain to be doing (even if that just means "just synthesizing a brain")?
21.05.18 12:30:55<stoopkid> i don't know of anything in particular that would rule out the possibility
21.05.18 12:31:16<stoopkid> seems we reproduce all the time and we assume it works, so..
21.05.18 12:31:30<HMCa_> nilli: most computers are *terribly* inefficient compared to us brains... computers eat ridiculous energy compared tobrains...
21.05.18 12:33:11<nilli> its the balance between size and complexity that create energy
21.05.18 12:33:52<stoopkid> well, we only observe that relative inefficiency when we put them towards the kinds of "intelligent" tasks we do as humans
21.05.18 12:33:53<nilli> well not create but transform to be used
21.05.18 12:34:47<stoopkid> when we just want them to do a million addition/multiplication operations, they're obv way more efficient than we are
21.05.18 12:35:04<HMCa_> stoopkid: errrr, no...
21.05.18 12:35:41<HMCa_> stoopkid: you're simply wrong there... even on "add 2 and 2 to get 4" and ecen with all of our "distraction and noise" going on internally....
21.05.18 12:36:03<HMCa_> we smash synthetic processing by orders of magnitude on energy efficiency
21.05.18 12:36:21<nilli> our brain can transform information to energy in an efficient way by activating our body that consumes less than that activity of learning takes.
21.05.18 12:36:46<HMCa_> the disparity does become more significant at higher levels, yes, but... our advantage really is still end-to-end
21.05.18 12:38:11* HMCa_ gtr again
21.05.18 12:38:16<nilli> energy is part of the equation of inteligence
21.05.18 12:38:47<stoopkid> most of our computations with machines external to our brains have to be factored into our own energy expenditures if they're critical to our survival i.e. continued functioning as intelligent brains
21.05.18 12:38:53<nilli> POW iis requires to create intelligence
21.05.18 12:41:17<stoopkid> afaict we could only be more energy efficient in our computations of a million specified addition/multiplication operations when you account for the fact that we're lazy and don't actually do them we just store a note telling us to do them whenever an actual value actually gets demanded
21.05.18 12:41:51<nilli> I need to go as well. nice talking to you again. regarding herodust, he asked if you guys do santology or programing LOL
21.05.18 12:42:57<stoopkid> santology? the study of santa? :) alright catch ya later
21.05.18 12:43:14<nilli> I sent him stoopkid respond regarding giving him specific tasks. he might go with that.
21.05.18 12:43:40<nilli> syinotlgy (have no clue how to spell it lol)
21.05.18 12:44:04<stoopkid> oh scientology? lol
21.05.18 12:45:34<nilli> but he is a difficult one to work with. anyway we can try. maybe after doing something specific he will be open for more talking
21.05.18 12:46:09<stoopkid> cool
21.05.18 12:47:22<nilli> ok talk to you later
21.05.18 12:47:24<stoopkid> yea i've got some rough ideas for some tasks but i still need to think about it some more, don't necessarily want to have him work on something that we don't end up using because i made a mistake in the specifications of the task
21.05.18 12:47:43<stoopkid> ok sounds good
21.05.18 12:51:54*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
21.05.18 12:56:28<HMCa_> we are certainly not doing scientology... that stuff is nonsense...
21.05.18 12:57:36<HMCa_> but "programming" is certainly not the only thing that we do, either...
21.05.18 12:59:21<HMCa_> in any case, if he wants to work with us, then we're happy to have him, but he will need to work *with* us... and we can't work with someone who isn't around to be worked with.
21.05.18 13:05:15<stoopkid> https://en.wikibooks.org/wiki/Prolog/Higher_Order_Programming
21.05.18 13:31:30*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 245 seconds
21.05.18 13:43:22*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
21.05.18 14:01:27*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Remote host closed the connection
21.05.18 14:01:44*** Join: koom (~koom@79.98.72.195, (unauthenticated): realname)
21.05.18 15:06:01*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
21.05.18 15:06:30*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
21.05.18 21:44:26<dmiles> RE: https://en.wikibooks.org/wiki/Prolog/Higher_Order_Programming  yeah the power of prolog is the higher order programming
22.05.18 03:07:40*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
22.05.18 03:09:33<nilli> hey, im thinking aloud: just react to whatever vibrate in your own mind.
22.05.18 03:11:24<nilli> HMCa im reading these first logic lessons you gave me :
22.05.18 03:11:42<nilli> [22:16] < nilli_ > foo?   [22:17] <HMCa_> "bar and baz are related in the foo way" [22:17] < nilli_ > ok [22:18] <nilli_> go on makeing sense without a meaning ;)
22.05.18 03:15:28<nilli> what strikes me here is that once we establish a syntax we can construct a story without a meaning
22.05.18 03:17:43<nilli> yet if tested by our computers any "fact" that we add will be able to be defined as true or false
22.05.18 03:18:27<nilli> ofc this seem natural in terms of logic but its phenomenal
22.05.18 03:20:08<nilli> that is since our experience as a living being is that truth represent a "real" thing and false is a "fake" thing
22.05.18 03:23:20<nilli> the language of hieroglyphs represent I think the idea that a story is constructed our of MEANING .  fragmented meanings put together to create larger meanings
22.05.18 03:25:04<nilli> but the language of computers is permeating a meaningless story .
22.05.18 03:27:17<nilli> The logic at that level do not enforce an agreement on meaning.
22.05.18 03:32:37<nilli> you talked about extension for names of objects and later started dealing with the more complex meanings of how one object relate to the other.
22.05.18 03:33:55<nilli> yet we can still construct a full plot that have no meaning .
22.05.18 03:36:25<nilli> in fact if we let our computer to construct a very complex nonsense story that is logically sound, we would be able to give a meaning to every expression without having to agree on a single name
22.05.18 03:39:51<nilli> in other words, the more complex a structure is the less  communication is needed in order to agree on all its parts.
22.05.18 03:41:28<nilli> basically agreeing based on names is the hardest agreement to reach.
22.05.18 03:42:49<nilli> "meaning" is agreeing on names
22.05.18 03:47:06<nilli> Algebra stand on the other end. no meaning to any object just sytax
22.05.18 03:52:19<nilli> as an artist I can tell you that the process of creating is made of assuming nonsense as terms (no meaning or arbitrary meaning) and creating a syntax as pattern than using these terms (names) in orders defined by the syntax giving it a meaning
22.05.18 03:54:26<nilli> or in other words a pattern made of some objects (names) become a syntax that can give meaning to these objects
22.05.18 03:55:23<nilli> pattern is a logic
22.05.18 03:56:57<nilli> it allows for new rules to emerge based on one single rule
22.05.18 03:57:44<nilli> thus cary is a name but carycary is a story with a meaning
22.05.18 04:01:31<nilli> just like algebra allow to say things without naming. patterns allow to create a story without logic as rules.
22.05.18 04:06:16<nilli> ----  by all means do not feel that I expect any of you to answer or comment on any of that. somehow it makes me think better if I think that I speak to you and not only to myself.
22.05.18 04:10:39*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
22.05.18 04:16:50*** Join: suiqiublockchain (~suiqiublo@180.162.59.124, (unauthenticated): realname)
22.05.18 04:20:22*** Quit: suiqiublockchain (~suiqiublo@180.162.59.124) left #AutoNomic: Remote host closed the connection
22.05.18 04:52:17*** Quit: koom (~koom@79.98.72.195) left #AutoNomic: Ping timeout: 245 seconds
22.05.18 05:52:47* koo5[m] quacks
22.05.18 11:01:39<stoopkid> https://www.youtube.com/watch?v=Vr6q8jiK28s
22.05.18 14:02:27*** Quit: HMCa_ (~root2@37.153.110.58) left #AutoNomic: Remote host closed the connection
22.05.18 14:29:55*** Join: Basilisk_of_roko (~root@37.153.110.58, (unauthenticated): root)
22.05.18 14:30:41*** Nick change: Basilisk_of_roko (~root@37.153.110.58) is now known as HunterMinerCraft
23.05.18 03:06:37*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xfiujrtrjhnyolgm) left #AutoNomic: Quit: Connection closed for inactivity
23.05.18 03:37:30*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
23.05.18 03:44:43<nilli> hey guys. that was very helpful. really even that last one which got no comment. just having the forum here to talk some nonsense around sense and logic makes new realizations to surface.
23.05.18 03:50:08<koo5[m]> http://www.businessinsider.com/hp-has-a-puzzling-strategy-with-webos-on-pcs-2011-3
23.05.18 03:53:26<nilli> hey koo5
23.05.18 03:53:38<koo5[m]> Hey
23.05.18 03:54:07<nilli> what is that link?
23.05.18 03:54:32<nilli> is related to anything I said?
23.05.18 03:54:39<koo5[m]> Just some curious tech fun
23.05.18 03:54:41<koo5[m]> No
23.05.18 03:55:09<nilli> ok just making sure im not missing a hint here
23.05.18 03:55:22<nilli> how are you anyway?
23.05.18 03:55:23<koo5[m]> No, sorry
23.05.18 03:55:32<nilli> mastering logic?
23.05.18 03:55:43<koo5[m]> Doing alright i think
23.05.18 03:55:54<koo5[m]> Yeah, mostly
23.05.18 03:56:28<nilli> did you realize what I was talking about yeastarday?
23.05.18 03:57:04<koo5[m]> not really, i have no idea about quantum mechanics
23.05.18 03:57:52<nilli> The fact that you can start with a meaningless objects and end up with a story that make sense is absolutely incredible.
23.05.18 03:58:14<koo5[m]> If you ask about AGI, ill point you to NARS
23.05.18 03:58:18<koo5[m]> Maybe theres your wave function in there
                 <nilli> its not quantum its life and consciousness
23.05.18 03:58:21<nilli> and mostly intelegence
23.05.18 03:58:57<koo5[m]> Yea, we're incredible like that
23.05.18 03:59:06<nilli> Ok lets ask about AGI
23.05.18 03:59:37<nilli> what I saw so far is trying to relate it to human intelligence which is the wrong direction
23.05.18 04:00:30<nilli> while in fact we need to go to a more fundamental level
23.05.18 04:01:38<nilli> Intelligence is the starting point
23.05.18 04:02:21<nilli> broken into information as going a localized transformation
23.05.18 04:03:56<nilli> but is much harder to define it at that abstract level
23.05.18 04:04:56<koo5[m]> 50 years ago, things that we just call algorithms today, were regarded as intelligent
23.05.18 04:05:47<koo5[m]> imagine first machine that could sort a list of numbers
23.05.18 04:05:58<koo5[m]> Nothing like that happened in nature before
23.05.18 04:07:15<nilli> eventually I think that it will be a vast (decentralized) network  of computers that will provide the proof to anything physics is theorizing today
23.05.18 04:07:23<koo5[m]> Anyway
23.05.18 04:08:50<nilli> in fact our brain is doing that binary number thing but at a much more complex level spiting out meanings
23.05.18 04:12:32<koo5[m]> dunno
23.05.18 04:13:29<koo5[m]> But youre giving me an idea too
23.05.18 04:17:50<nilli> in other words 1 is the biggest nonsense of all and so is all of math yet explain anything in nature
23.05.18 04:18:23<nilli> there is only logic there that create the meaning
23.05.18 04:20:00<nilli> so what logic actualy do?
23.05.18 04:20:09<nilli> asking myself
23.05.18 04:21:19<nilli> it create order
23.05.18 04:22:56<nilli> or in a broader way it create COMPOSITION.
23.05.18 04:23:23<nilli> that composition is eventually the meaning
23.05.18 04:24:49<nilli> [11:13] <koo5[m]> But youre giving me an idea too <---- what idea?
23.05.18 04:41:21<koo5[m]> I have a theory that intelligence is evolved from visual imagination
23.05.18 04:44:10<koo5[m]> Like, you are a predator fish, and you see a small fish hanging around a hole. If youre able to judge if it can fit into the hole, youre doing imagination
23.05.18 04:45:43<koo5[m]> Neural nets abstract things, so from there, lets say its one step to a more geometric imagination
23.05.18 04:47:44<koo5[m]> Idk, it just seems to me that this, working with visual patterns, could be a better basis for an agi than temporal patterns, as nars does i think
23.05.18 04:48:04<koo5[m]> Or maybe you need multiple modalities
23.05.18 04:49:08<nilli> yes I think it the right direction, intelligence is making order in the mass of input
23.05.18 04:50:16<nilli> and that order is not linear like logic, its an image
23.05.18 04:51:23<nilli> actualy not sure that its right to say that logic is linear
23.05.18 04:52:37<koo5[m]> Well, how we represent logic is verbally, which serializes into linear
23.05.18 04:53:14<nilli> but patterns and composition is a key factor for intelligence to emerge, logic is one form of such composition
23.05.18 04:53:49<nilli> from to create a composition.
23.05.18 04:54:04<nilli> the composition ended up being the meaning
23.05.18 04:54:29<nilli> and a pattern represent that state
23.05.18 04:54:38<nilli> of reaching a meaning
23.05.18 05:00:36<nilli> ok back to earth now :) how is autonomic going? are we getting anywhere yet?
23.05.18 05:01:17<koo5[m]> i dont know:)
23.05.18 05:01:38<nilli> do you know what you are doing?
23.05.18 05:03:14<koo5[m]> yesterday ive been goofing off with newshit and haskell, so that wasnt entirely autonomic related
23.05.18 05:05:17<koo5[m]> Im probably gonna work on univar etc
23.05.18 05:05:47<koo5[m]> Since that is within my reach and hmc thinks its useful:)
23.05.18 05:08:57<koo5[m]> Idk, some days you know what youre doing, and some days you dont
23.05.18 05:09:48<nilli> I would love it if any of you would be able to describe what you do now in regards to what you try to get to  :) in a way that I could explain others.
23.05.18 05:12:56<nilli> ok need to go now will talk to you later.
23.05.18 05:13:08<koo5[m]> Well, thats easy wrt the n3logic inferencer
23.05.18 05:13:10<koo5[m]> Ok
23.05.18 05:15:19<koo5[m]> Im gonna build a second version of my query run visualizer, and some other stuff, so i can debug and compare our various inferencers
23.05.18 05:15:54<koo5[m]> Then i hope to sort out how rdf lists should work
23.05.18 05:16:51<koo5[m]> Then maybe i can add more rdfs builtins
23.05.18 05:17:24*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
23.05.18 05:17:51<koo5[m]> maybe rewrite everything once or twice inbetween
23.05.18 05:21:22<koo5[m]> and maybe by then, stoop figures out what is hmcs idea of typing n3 with mltt
23.05.18 05:21:28<koo5[m]> Or hmc figures it out
23.05.18 06:36:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-chafcrajplhikhst, stoopkid: stoopkid)
23.05.18 06:59:36<stoopkid> @ nilli : to be honest, hieroglyphics appear totally meaningless to me when i look at them :P
23.05.18 07:02:32<stoopkid> so im not sure if there’s really a distinction to be drawn between hieroglyphs and bitstrings (the language of computers), at least regarding their abilities to denote “meanings”
23.05.18 07:04:29<stoopkid> especially if you consider https://en.m.wikipedia.org/wiki/Egyptian_Hieroglyphs_(Unicode_block)
23.05.18 08:17:52*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
23.05.18 08:18:17*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.05.18 02:26:39*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
24.05.18 02:27:36<nilli> 23.05.18 06:59:36<stoopkid> @ nilli : to be honest, hieroglyphics appear totally meaningless to me when i look at them
24.05.18 02:31:14<HunterMinerCraft> hi nilli
24.05.18 02:32:39<nilli> That is the point exactly :) for you it have no meaning since you have to be told the meaning. not so in mathematics. once you know the rules the meaning is being constructed  out of it.
24.05.18 02:32:59<HunterMinerCraft> hrmm
24.05.18 02:33:08<nilli> hi Hunterminercrafter how are you?
24.05.18 02:33:26<nilli> I missed that name
24.05.18 02:33:44<HunterMinerCraft> busy, tired, crazy, sore, excited, angry, thankful.
24.05.18 02:34:01<HunterMinerCraft> in about that order from most to less most
24.05.18 02:34:04<HunterMinerCraft> heh
24.05.18 02:34:35<nilli> well the order is the key hehehe
24.05.18 02:35:05<HunterMinerCraft> logic arranges many orders. XD
24.05.18 02:35:06<HunterMinerCraft> but
24.05.18 02:35:14<HunterMinerCraft> there's a catch
24.05.18 02:36:23<HunterMinerCraft> we can, in a sense, only seem to ever be able to capture wrong meanings with it
24.05.18 02:36:31<HunterMinerCraft> at beat imprecise
24.05.18 02:36:34<HunterMinerCraft> *best
24.05.18 02:36:40<nilli> tired because  too busy which results in feeling crazy and sore, however is excited and thankful even if at time feel engry
24.05.18 02:36:58<HunterMinerCraft> (or maybe one of those subcobcious not-typos, heh_
24.05.18 02:37:51<nilli> I was looking at other orders in order to understand where logic stand in that order
24.05.18 02:38:32<nilli> yes my celebrated typos.....
24.05.18 02:39:24<HunterMinerCraft> I have a strange but serious question for you...
24.05.18 02:40:09<nilli> go ahead cant even think  what you are going to ask
24.05.18 02:40:54<HunterMinerCraft> do you think that our universe.... perhaps "screws with" us? :-)
24.05.18 02:41:02<HunterMinerCraft> I mean:
24.05.18 02:41:44<HunterMinerCraft> does it arrange itself in some approximation toward maximally inconvenient ways "on purpose"?
24.05.18 02:41:58<nilli> ofc
24.05.18 02:42:12<HunterMinerCraft> ok, follow up question...
24.05.18 02:42:45<HunterMinerCraft> do you think that it is aware that it is doing this contorting of our reality?
24.05.18 02:46:22<nilli> I would go as far as to say that "awareness" is a lower state of intelligence thus I have to rephrase the question but Ill do it as part of an answer
24.05.18 02:47:08<nilli> the universe is intelligence at its whole state
24.05.18 02:47:52* HunterMinerCraft nods
24.05.18 02:48:00<HunterMinerCraft> I'm with you so far...
24.05.18 02:48:20<nilli> however is expending form whole of nothingness to whole off many
24.05.18 02:48:50<HunterMinerCraft> but is it meta-reflective, as we partly are?  We are obviously "of its' thought"... but does it know that it is thinking us?
24.05.18 02:49:05<HunterMinerCraft> heh
24.05.18 02:50:09<nilli> let me first complete the basic state of the expansion and then see how we and awareness fit into that
24.05.18 02:50:58<HunterMinerCraft> we are obviously not directly/immediately aware of our thoughtas being a part of its' thought... is it...?
24.05.18 02:51:50<nilli> in order to expend it is going through a process of reduction
24.05.18 02:52:13<HunterMinerCraft> sure
24.05.18 02:52:21* HunterMinerCraft agrees strongly
24.05.18 02:53:01<nilli> localization and information are a result of that reduction.
24.05.18 02:53:47<HunterMinerCraft> hrmm, well, what we experience as localization, as the set of information we can experience...
24.05.18 02:53:51<HunterMinerCraft> but, yes.
24.05.18 02:56:49<nilli> the question is then how this create expansion.
24.05.18 02:56:54<HunterMinerCraft> (imagine living life as a positron, what would your logic look like?  What would your language express?)
24.05.18 02:58:17<HunterMinerCraft> as i see it, the universe seems to function by way of scrubs and edits....
24.05.18 02:58:25<nilli> funny but its exactly what I was describing yestarday
24.05.18 02:58:46<nilli> (the positron issue)
24.05.18 02:59:23<nilli> the least complex state of order is symmetry
24.05.18 02:59:28<HunterMinerCraft> it scrolls back and forth through the film, rewriting our history and future "together"...
24.05.18 02:59:39<HunterMinerCraft> "at once"
24.05.18 02:59:54<nilli> in a particle and its antiparticle is such example
24.05.18 03:00:52<HunterMinerCraft> it seems to have *some* "story" in mind, or mayve it's just a "know it when it sees it" sort of thing....
24.05.18 03:01:10<HunterMinerCraft> but regardless, here we are, being "shaped"
24.05.18 03:01:15<nilli> let kepp time as we used it in terms of past and future aside since is complicated "matters" :)
24.05.18 03:02:14<HunterMinerCraft> now, I posit that it doesn't *necessarily* need to be aware that it is doing this thing, or understand the plot of the film...
24.05.18 03:02:52<HunterMinerCraft> and it could still complete its' task and "find the thing"
24.05.18 03:03:14<HunterMinerCraft> now, otoh...
24.05.18 03:03:39<HunterMinerCraft> here we are, kinda sorta understanding the plot...
24.05.18 03:03:59<HunterMinerCraft> and kibda sorta aware that it is doing this thing...
24.05.18 03:04:03<HunterMinerCraft> *kinda
24.05.18 03:04:21<nilli> Logic is a linear thing and thus is time sensitive as is a story
24.05.18 03:04:40<HunterMinerCraft> so it must be said that, on some level, it must be at least "kinda sorta aware"?
24.05.18 03:05:34<HunterMinerCraft> on the gripping hand, that is only per our tiny meaning of "aware"... ;-)
24.05.18 03:07:17<nilli>  symmetry is an order that is not required time arrow. time I suspect is a level of order requires awareness
24.05.18 03:07:18<HunterMinerCraft> so it expands by elimination... ever more material hitting the cutting room floor
24.05.18 03:08:01<HunterMinerCraft> ever more "meaning" (here defined as some proximity to... what it'll know when it sees it) into the work
24.05.18 03:08:43<nilli> [10:07] <HunterMinerCraft> so it expands by elimination... ever more material hitting the cutting room floor<---- yes
24.05.18 03:12:17<nilli> the process of reduction into "matter" (localized information ) have to end at an order that make it's part absolute ( not needed anymore)
24.05.18 03:12:42<HunterMinerCraft> and what does this say of free will?  We have it, except for when we don't, but only if it isn't aware otherwise we totally don't?
24.05.18 03:13:11<HunterMinerCraft> aware meaning...
24.05.18 03:13:30<HunterMinerCraft> aware of it's contorting process which screws with us. :-)
24.05.18 03:13:37<HunterMinerCraft> *its'
24.05.18 03:15:18<nilli> free will is a very important thing we need to define. (much of physics is now looking at this at the only left explanation) but need a better definition as I see it.
24.05.18 03:15:52<nilli> let look at that from the artist point of view
24.05.18 03:16:58<nilli> you start by braking all rules (order)  of some matter and use it to create new order
24.05.18 03:17:35<nilli> even if you scalp in stone, you brake the rules by which nature form it shape
24.05.18 03:17:44<nilli> sculpt
24.05.18 03:18:50<HunterMinerCraft> ah, but art also goes both directions... both destroy to create *and* create to destroy
24.05.18 03:20:25<nilli> i would not call it destroy. it change coarse (direction, order)
24.05.18 03:20:34<HunterMinerCraft> related: it can be said that all art is natural, like trees and atomic weapons. :-|
24.05.18 03:21:33<nilli> indeed it is but the creator is a sub creation of the mighty nature
24.05.18 03:22:00<nilli> it demonstrate the expansion we talked about
24.05.18 03:22:19<HunterMinerCraft> which comes back to free will... has the sculptor chosen the stone, or the stone chosen the sculptor? :-)
24.05.18 03:24:10<nilli> well... the stone is its own uniqueness that the sculpture see as fit, the chooser is the active party
24.05.18 03:24:48<HunterMinerCraft> hrmm
24.05.18 03:25:14<HunterMinerCraft> define "active"?
24.05.18 03:25:40<nilli> you can equalize both forces, that of the chooser and the being if you take away time as a factor
24.05.18 03:25:51<nilli> and that what active means
24.05.18 03:26:24<HunterMinerCraft> so you mentioned "observation" earlier...
24.05.18 03:26:47<nilli> active=faster ?? maybe
24.05.18 03:26:54<HunterMinerCraft> here is something that I find most people seem to "miss" about QM
24.05.18 03:27:09<HunterMinerCraft> eww@faster, that implies time ;-)
24.05.18 03:27:11<nilli> ok observation
24.05.18 03:27:29<HunterMinerCraft> so we put a cat in a box...
24.05.18 03:27:53<HunterMinerCraft> most people seem to thibk closing the lid and loking away is "enough"
24.05.18 03:28:01<HunterMinerCraft> for that magic to happen
24.05.18 03:28:05<HunterMinerCraft> it isn't
24.05.18 03:28:31<nilli> (faster means that time is the order that is the one being processed, I guess)
24.05.18 03:28:40<HunterMinerCraft> the problem is that we are not particularly "special" as observers...
24.05.18 03:29:10<HunterMinerCraft> *any* observation of the state of the cat *or* *any* *implication* from the state of the cat... will do
24.05.18 03:29:33<HunterMinerCraft> and collapse the cat.
24.05.18 03:31:35<HunterMinerCraft> so the slightest change in temperature felt 1000 miles away as an indirect consequence (the cart farts and then a butterfly gets startled and flaps it's wings and moves some air and....)
24.05.18 03:32:06<nilli> I think that the cat example was one of the worst diversion in QM . everything in that example is wrong since is based on so many complex assumptions.
24.05.18 03:32:44<HunterMinerCraft> the golden gate bridge is "observing" (or not) the cat in belgium just as much as we are (or not)
24.05.18 03:34:26<HunterMinerCraft> the only way to not have the cat observed would be to isolate every dynamic...
24.05.18 03:34:51<nilli> a cat is a an entity so much more complex then a particle .live or dead is crazy complex.
24.05.18 03:35:17<HunterMinerCraft> ok, so a coin flipper, or a 1 bit register... w/e...
24.05.18 03:35:43<nilli> much better
24.05.18 03:36:05<HunterMinerCraft> the system itself doesn't matter.. it is about the *coupling* of dynamics
24.05.18 03:36:20<HunterMinerCraft> "what-implies-what"
24.05.18 03:37:20<HunterMinerCraft> to "isolate that system from ourselves" into the juxtapose we have to entirely isolate it from all field interaction with us...
24.05.18 03:37:34<nilli> I know but if we have 1 and 0 without a meaning we can now ask that quastion on the most fundamental level
24.05.18 03:37:47<HunterMinerCraft> we need to, in effect, move the thing outside of our local universe...
24.05.18 03:38:49<HunterMinerCraft> the box has to be so impenetrable that no information can be exchanged, no interactions between inside and outside
24.05.18 03:39:13<HunterMinerCraft> "cutting the narrative"
24.05.18 03:40:07<nilli> so look at black holes. they show us that this is never the case, information is always out.
24.05.18 03:40:32<nilli> at the event horizon.
24.05.18 03:40:49<HunterMinerCraft> (side note: quantum computers "work faster" because they don't "do" the work "here", heh)
24.05.18 03:41:19<nilli> however information itself is not the whole "story"
24.05.18 03:41:27<HunterMinerCraft> hrmmmm
24.05.18 03:41:52<HunterMinerCraft> black holes are a bit red herring.... heh
24.05.18 03:42:13<HunterMinerCraft> white hole inversion is where the action is at... but I get ahead of myself there. :-)
24.05.18 03:43:02<HunterMinerCraft> the event horizon is proving to be not quite what we expected, yknow... heh
24.05.18 03:43:25<nilli> the interesttidng part here is that whaever happend in the black box is not simply infinite, it follows what the wave function defines
24.05.18 03:43:51<nilli> interesting
24.05.18 03:44:31<HunterMinerCraft> sure, the cat in the box is still the same cat we put in, on the same trajectory, even after we both close the lid and send it off to another universe... heh...
24.05.18 03:45:00<HunterMinerCraft> despite this, it still ends up alive-or-dead in *some* non-whole proportion
24.05.18 03:45:09<HunterMinerCraft> alive-and-dea
24.05.18 03:45:12<nilli> what ever can become out of it is  limited in a way we can actualy predict it in such high accuracy
24.05.18 03:45:18<HunterMinerCraft> 0,1
24.05.18 03:46:33<nilli> the reason we can do that explains the beginning of this conversation
24.05.18 03:46:51<HunterMinerCraft> go on
24.05.18 03:50:28<nilli> 0 or1 are not 50-50 chances it have the uncertainty factor. that factor can exist only when we reach as close as we can to 50-50 .
24.05.18 03:50:54<nilli> so getting as close to 50-50 create the most stable system
24.05.18 03:51:27<nilli> with highest accuracy of prediction.
24.05.18 03:52:42<nilli> the more intelligence life is the better it become in terms of prediction
24.05.18 03:53:18<HunterMinerCraft> i would say "modeling" instead of "predicting"... heh
24.05.18 03:54:11<nilli> modeling is a very good expression
24.05.18 03:54:19<HunterMinerCraft> yes
24.05.18 03:54:37<HunterMinerCraft> is what logic is really all about, imo! :-D
24.05.18 03:55:09<HunterMinerCraft> capturing, with a precision, what we know we could never capture precisely.
24.05.18 03:55:17<nilli> since i was just about to talk about time as an organizer when we call it prediction, but modeling expend it to other organization forms such as space
24.05.18 03:55:27<HunterMinerCraft> yes
24.05.18 03:55:29<HunterMinerCraft> !
24.05.18 03:55:31<HunterMinerCraft> exactly
24.05.18 03:55:39<HunterMinerCraft> it isn't about time
24.05.18 03:55:52<HunterMinerCraft> it is about scale and complexity! ;-)
24.05.18 03:55:57<nilli> do you see logic as linear ?
24.05.18 03:56:04<nilli>  im not sure about that
24.05.18 03:56:21<HunterMinerCraft> i see *some* logics as linear. :-)
24.05.18 03:56:49<HunterMinerCraft> logic in the general and the logic of the "real and actual" are both *fractal*
24.05.18 03:57:17<nilli> mathematical logic is. maybe once we build meaning it create a space.
24.05.18 03:57:37<nilli> as fractals yes
24.05.18 03:58:14<HunterMinerCraft> i'm not sure what you distinguish as "mathematical" logic
24.05.18 03:58:20<HunterMinerCraft> all logic is mathematical logic. :-)
24.05.18 03:58:33<HunterMinerCraft> linear or otherwise
24.05.18 03:59:31<nilli> well.... let me say that not all is mathematical some is intelligence.
24.05.18 03:59:36<nilli> that is the difference
24.05.18 04:00:24<nilli> a fractal structure is showing the mathematical expression of intelligence
24.05.18 04:00:50<nilli> but its not intelligence itself
24.05.18 04:01:12<HunterMinerCraft> intelligence is mathematical
24.05.18 04:01:46<HunterMinerCraft> i argue that the rock choosing the sculptor has *some* intelligence
24.05.18 04:01:54<HunterMinerCraft> as does the bridge observing the cat
24.05.18 04:02:44<nilli> intelligence is the limit of mathematics it brings you from one level to the other but at each level it is not math its free will"
24.05.18 04:03:19<nilli> mathematics brings you from one level to the other
24.05.18 04:03:33<HunterMinerCraft> not sure what you mean there
24.05.18 04:03:38<nilli> its the path not the essence
24.05.18 04:04:43* HunterMinerCraft will have to go soon
24.05.18 04:06:55<nilli> good since I would too, and would have a hard time going  :)
24.05.18 04:07:37<HunterMinerCraft> hehe
24.05.18 04:07:51<nilli> the  rock is also choosing the artist once we look at the universe as a whole
24.05.18 04:08:47<nilli> when we are one with the univers we can feel that the rock chose us it that state of almost 50-50
24.05.18 04:08:53<HunterMinerCraft> in some sense, the rock creates and destroys the sculptor. ;-)
24.05.18 04:09:21<HunterMinerCraft> the bridge, too, is doing art.
24.05.18 04:09:44<nilli> yes....thus back to the question at the begining
24.05.18 04:09:53<HunterMinerCraft> :-)
24.05.18 04:10:16<HunterMinerCraft> is the universe fucking with us... and does it know? :-)
24.05.18 04:10:18<nilli> it have to feel like play with us,
24.05.18 04:10:35<HunterMinerCraft> is the very presence of these questions... a part of that? :-D
24.05.18 04:12:10<nilli> yes getting us closer to 50-50 . but insanity get us beyond . and the trick it to avoid that
24.05.18 04:13:06<nilli> you cant be one with the universe, you will then become one of some other one (like the loin that will eat you)
24.05.18 04:13:16<HunterMinerCraft> I'm not entirely convinced wrt that... but we'll come back to that another time...
24.05.18 04:14:14<nilli> the closet state to be one with anything else is love. lol cant get around that
24.05.18 04:15:34<HunterMinerCraft> consider what we rrally do when we close the box and isolate it off...
24.05.18 04:16:39<HunterMinerCraft> we create an irrationality.
24.05.18 04:17:48<nilli> (but love have to be equal to be true. (that is the most brilliant intensive design of life))  back to safety of the black  box  now..
24.05.18 04:18:13* HunterMinerCraft gtr
24.05.18 04:18:40<nilli> ok talk to you later. was a fun one/.
24.05.18 04:24:06<nilli> and find a way to be less busy. very very important but also very hard to achieve without  feeling like you are wasting your potential in life.
24.05.18 04:28:39*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
24.05.18 05:24:24*** Join: tigertigertiger (1f138280@gateway/web/freenode/ip.31.19.130.128, (unauthenticated): 31.19.130.128 - http://webchat.freenode.net)
24.05.18 05:24:35<tigertigertiger> Hey ho
24.05.18 05:24:52<tigertigertiger> how is it going?
24.05.18 05:25:04<tigertigertiger> i noticed a lot of activity in the log the last month
24.05.18 06:09:09*** Quit: tigertigertiger (1f138280@gateway/web/freenode/ip.31.19.130.128) left #AutoNomic: Quit: Page closed
24.05.18 07:31:51<stoopkid> the universe is totally screwing with us, and we call that phenomenon "HMC" :P
24.05.18 15:07:29*** Quit: ChanServ (ChanServ@services.) left #AutoNomic: shutting down
24.05.18 15:12:57*** Join: ChanServ (ChanServ@services., (unauthenticated): Channel Services)
                 *** Mode change: +o ChanServ    on #AutoNomic by wolfe.freenode.net (server)
24.05.18 15:21:36*** Quit: ChanServ (ChanServ@services.) left #AutoNomic: shutting down
24.05.18 15:30:56*** Join: ChanServ (ChanServ@services., (unauthenticated): Channel Services)
                 *** Mode change: +o ChanServ    on #AutoNomic by wolfe.freenode.net (server)
24.05.18 15:36:53*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 255 seconds
24.05.18 15:46:51*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
25.05.18 03:06:27*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
25.05.18 03:06:40<nilli> 24.05.18 04:16:39<HunterMinerCraft> we create an irrationality.
25.05.18 03:07:32<nilli> yes. I think it a good way to look at that state of a black box
25.05.18 03:08:12<nilli> but we can also say more about it
25.05.18 03:08:26<nilli> much more
25.05.18 03:09:40<nilli> we know that anything rational coming out of it will have to follow the some form/function we cal the wave function.
25.05.18 03:12:07<nilli> and thus we also have  great abilities to predict the the results in great precision.
25.05.18 03:13:14<nilli> the wave function models reality
25.05.18 03:13:33<nilli> and that reality is rational and mathematical
25.05.18 03:15:00<nilli> aka our arguments about everything being mathematical, yes everything rational is mathematical but not what's in the black box or the blackhole
25.05.18 03:17:38<nilli> now i would say that intelligence is that which reside between the black box and the rational outcome is what we call intelligence.- thus is the wave function.
25.05.18 03:19:22<nilli> the wave function is a precise description of what intelligence is.
25.05.18 03:19:43<nilli> observation is an act of intelligence
25.05.18 03:19:45<HunterMinerCraft> hrmm
25.05.18 03:20:01<nilli> hey you :)
25.05.18 03:20:12<HunterMinerCraft> i agree that reality is mathematical, but I am not convinced that it is rational...
25.05.18 03:21:21<HunterMinerCraft> hey
25.05.18 03:21:26<nilli> llet me ask you a specific question
25.05.18 03:21:43<HunterMinerCraft> i'm semi-afk, so might be slow to respond, but ok
25.05.18 03:22:23<nilli> would you say that your a computer can act as an observer?
25.05.18 03:24:27<nilli> sorry typo again
25.05.18 03:25:05<nilli> would you say that  a computer can act as an observer?
25.05.18 03:25:52<nilli> if not yours to see the outcome
25.05.18 03:28:10<nilli> [10:20] <HunterMinerCraft> i agree that reality is mathematical, but I am not convinced that it is rational...
25.05.18 03:28:58<nilli> so is there mathematics that is not rational?
25.05.18 03:32:41<HunterMinerCraft> a computer can act as an observer
25.05.18 03:35:49<HunterMinerCraft> and yes, there are mathematics which are not rational (strangely, imo, those are mostly the ones that we try to program computers with...)
25.05.18 03:37:05<nilli> can you give me an example of a non rational mathematics phrase?
25.05.18 03:37:33<HunterMinerCraft> (and i don't just mean rational/irrational in the sense of a numeric tower... i mean rational in the sense of rational types)
25.05.18 03:37:49<nilli> also would you say that any measuring device is an observer?
25.05.18 03:37:53<HunterMinerCraft> (thouh these two are interestingly related)
25.05.18 03:39:30<HunterMinerCraft> i don't like the notion of 'measuring device' much at all, i much prefer to say "anything that draws an implication"
25.05.18 03:40:12<HunterMinerCraft> as this, imo, better fits the notion of "model" and leaves questions of temporality out of this aspect
25.05.18 03:40:59<nilli> is modeling rational?
25.05.18 03:41:14<HunterMinerCraft> not necessarily, no...
25.05.18 03:42:30<HunterMinerCraft> most of your software actually constitute "irrational models"... which is one of the fundamental concerns of AN...
25.05.18 03:42:37<nilli> I agree. names are irrational prime numbers represent names
25.05.18 03:43:19<HunterMinerCraft> well
25.05.18 03:44:23<HunterMinerCraft> that gets tricky... the "primes themselves" are "nameless" things... but they certainly have a fundamental, distinct identity
25.05.18 03:44:39<HunterMinerCraft> sec
25.05.18 03:46:25<nilli> rational is ratio is constructed of two at (least) and what ever is between them that is the "ratio"
25.05.18 03:47:12<nilli> I mean rational derived form ratio
25.05.18 03:48:40<HunterMinerCraft> ok, so I assume that you are familiar with ulam's spiral, and similar?
25.05.18 03:49:14<nilli> its funny, yes primes are nameless as all numbers are, but its not the name that makes the name be a name :)
25.05.18 03:49:35<nilli> not sure let me google it
25.05.18 03:53:18<nilli> no I am not. it rings a bell  but I guess i never internalized it . ill read it now
25.05.18 03:59:45<nilli> ok read it.
25.05.18 04:00:47<HunterMinerCraft> ok, now are you also familiar with euler's work on the probability of primes?
                 <nilli> the hunt for patterns of irational  lol
25.05.18 04:16:16<HunterMinerCraft> the primes, pi, and the zeta are all deeply connected, and when you consider resolution numerically you find an interesting relationship between the universality of zeta and the positioning of the primes... almost as if it is the particular distribution of primes that occurs which determines what is rationally true or not ("where the zeros end up")
25.05.18 04:17:20<HunterMinerCraft> (zeros meaning solution points from resolution over numerical encoding of your logic)
25.05.18 04:18:21<HunterMinerCraft> (shockingly, imo, this relation seems to exist for any sound encoding... heh)
25.05.18 04:19:12<HunterMinerCraft> also from zeta we can see that the particular distribution of primes that does occur is derived from pi
25.05.18 04:21:53<nilli> I did not understand  this" (zeros meaning solution points from resolution over numerical encoding of your logic) " can you explain in other words
25.05.18 04:22:09<HunterMinerCraft> so, in a sense, all rational logical universes and all irrational logical universes (and some strange "map between them, too") are represented in zeta
25.05.18 04:22:17<HunterMinerCraft> "already"
25.05.18 04:24:28<HunterMinerCraft> well, the stuff in parens is kinda geared toward a different audience... ;-)
25.05.18 04:24:36<HunterMinerCraft> but, i'll try
25.05.18 04:28:02<HunterMinerCraft> let's say we have some logic L and some method of answering questions in the logic.  Regardless of thr logic and method, we can describe them both numerically, and "expect consistent behavior"...
25.05.18 04:28:17<HunterMinerCraft> this is sort of fundamental to abstract algebra
25.05.18 04:29:01<nilli> ok
25.05.18 04:29:18<HunterMinerCraft> so we can use this to assert existence of some root-finding-problem equivalent to any question-problem for any logic...
25.05.18 04:29:30<HunterMinerCraft> root finding as in newtonian root finding
25.05.18 04:29:41<HunterMinerCraft> "solve for 0"
25.05.18 04:30:17<HunterMinerCraft> aka "optimization"/"minimization"
25.05.18 04:30:52<nilli> ok
25.05.18 04:31:26<HunterMinerCraft> this is kind of akin to pointing out that, for rational logics, one can always "guess and check" partial solutions
25.05.18 04:32:01<HunterMinerCraft> and will finish the resolution (locate zero, answer the question) in finite time
25.05.18 04:32:42<HunterMinerCraft> anyway, that is slightly tangental...
25.05.18 04:33:22<HunterMinerCraft> what isninteresting is how this relates to zeta, as a fractal... and how *that* relates logics geberally to pi and the prines
25.05.18 04:33:47<HunterMinerCraft> *is interesting *generally *primes
25.05.18 04:35:54<nilli> ok. how?
25.05.18 04:36:19* HunterMinerCraft shrugs
25.05.18 04:36:20<HunterMinerCraft> heh
25.05.18 04:36:54<HunterMinerCraft> if I really knew that I could solve riemann
25.05.18 04:36:57<HunterMinerCraft> ;-)
25.05.18 04:37:55<HunterMinerCraft> the riemann hypothesis is sort of a "missing link" in our understanding of these connections, end-to-end...
25.05.18 04:38:35<HunterMinerCraft> we can see them happening, observe that if we change pi or the set of primes that the relationships to numerical resolution of logic do break...
25.05.18 04:39:18<HunterMinerCraft> but to explain "how" this happens... is, so far, beyond me.... and apparently everyone.
25.05.18 04:43:49<nilli> may years ago I was reading this book about zeta and the whole prime numbers issue, and made many notes , (would be interesting to look at them) anyway lets be stupid as I love to be
25.05.18 04:44:52<nilli> (thankfully I dont have to stand up for "smart" to anyone )
25.05.18 04:47:05<nilli> Logic, Pi, Primes, Zeta, fractals, - Zeta  to Logic, Pi, Prime, Fractals
25.05.18 04:59:38<nilli>  Zeta is such a complex concept compare to the other four. I cant grasp it intuitively. it is too mathematical
25.05.18 05:00:20<nilli> I can understand words that have meaning
25.05.18 05:03:36<nilli> lets start with numbers, we where talking about it as meaningless , but its that meaningless meaning that makes it meaningful in the big scheme of our language
25.05.18 05:06:24<nilli> Logic is also a concept logical of itself and easy to be contained in our understanding like the meaning of meaningless
25.05.18 05:06:57<nilli> fractals is the shape of both
25.05.18 05:07:21<nilli> and prime is the base of all
25.05.18 05:08:42<nilli> Zeta???? I cant fit it to this very basic story line but I may be able to explain why (simply)
25.05.18 05:10:10<nilli> hold on I forgat pi
25.05.18 05:11:19<nilli> pi is a modelling logic
25.05.18 05:13:49<nilli> Zeta try to be a modeling logic like pi is but it try to explain primes which are a complete state and are not made of two like pi is (two shapes that relate to one another)
25.05.18 05:15:57<nilli> it then have to assume a finite number of numbers.
25.05.18 05:16:59<nilli> which at the most reduced form of it will bring us to two objects
25.05.18 05:17:35<nilli> thus back to pi
25.05.18 05:17:52<nilli> or fractals
25.05.18 05:20:07<nilli> while primes are itself the logic of infinity as the object it produce.
25.05.18 05:25:29<nilli> So basically without having the education to understand zeta  I sense the built in contradiction (which education solves by being non-logical/irrational)
25.05.18 05:26:25<nilli> .... but that was quite a detour
25.05.18 05:27:36<nilli> guess will be even to much to comment on. :)
25.05.18 05:29:40<nilli> So what is it that we to solve here? where are we going? what are we asking?
25.05.18 05:34:03<nilli> 24.05.18 02:40:54<HunterMinerCraft> do you think that our universe.... perhaps "screws with" us?  I mean: does it arrange itself in some approximation toward maximally inconvenient ways "on purpose"?
25.05.18 05:47:14<nilli> lets look at pi and ask that same question assuming we are the circle and the universe is the diameter.  now imagine that diameter being a circle in a perpendicular dimension. as such is of least "convenient" in terms of representing the state we imagine (circle to a strait  line)  yet keep the pi as a ratio
25.05.18 05:51:39<nilli> dont have time to look at all the terms but all but zeta assert that  the "universe" and us are competing on the same "spot" and is most convenient when reduced to a "dead" state not existed .
25.05.18 05:53:18<nilli> in other word we are the universe so we have to get to be be as inconvenient as can be to be reflecting of us as it can be.
25.05.18 05:55:08<nilli> and you can probably use Zeta to prove that we are competing on the same spot thus prove that 1/2 thingi :) (what ever it is)
25.05.18 05:59:54*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
25.05.18 07:09:03*** Join: nilli (4d7f37ec@gateway/web/freenode/ip.77.127.55.236, (unauthenticated): 77.127.55.236 - http://webchat.freenode.net)
25.05.18 07:11:33<nilli> just checked back in to say: pleas  disregard all my nonsense. I should have stopped a few lines before.. keep the good work that have a meaning and I'll stay out of it
25.05.18 10:43:59*** Quit: nilli (4d7f37ec@gateway/web/freenode/ip.77.127.55.236) left #AutoNomic: Ping timeout: 260 seconds
25.05.18 15:21:02*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 245 seconds
25.05.18 15:41:52*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
25.05.18 19:07:43*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
25.05.18 20:00:23*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
26.05.18 05:01:37*** Join: Oihan (~AndChat68@46-133-109-41.dialup.umc.net.ua, (unauthenticated): AndChat685089)
26.05.18 05:05:28*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-chafcrajplhikhst) left #AutoNomic: Quit: Connection closed for inactivity
26.05.18 08:37:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
26.05.18 08:37:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
26.05.18 11:48:56*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-genwsrhaxrkrhwix, stoopkid: stoopkid)
26.05.18 12:41:35<stoopkid> HunterMinerCraft: i think i'm starting to get it
26.05.18 13:19:41<HunterMinerCraft> stoopkid: ?
26.05.18 13:21:11<stoopkid> the resolution/root-finding/fractal-zeta stuff
26.05.18 13:33:07<HunterMinerCraft> ah, cool
26.05.18 13:33:58<HunterMinerCraft> I'm still only just "starting to get it" myself, heh ;-)
26.05.18 13:34:12<HunterMinerCraft> it is a bit mindbending, to say the least :-)
26.05.18 14:00:43*** Join: Eguzki (~AndChat68@46-133-204-114.dialup.umc.net.ua, (unauthenticated): AndChat685089)
26.05.18 14:02:27*** Quit: Oihan (~AndChat68@46-133-109-41.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 240 seconds
26.05.18 14:36:47*** Quit: Eguzki (~AndChat68@46-133-204-114.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 256 seconds
26.05.18 14:37:11*** Join: Oihan (~AndChat68@46-133-204-114.dialup.umc.net.ua, (unauthenticated): AndChat685089)
26.05.18 16:47:13*** Join: Eguzki (~AndChat68@46-133-209-34.dialup.umc.net.ua, (unauthenticated): AndChat685089)
26.05.18 16:49:50*** Quit: Oihan (~AndChat68@46-133-204-114.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 256 seconds
26.05.18 17:50:52<stoopkid> i'm trying to get a more exact idea of how to set up the logical resolution problem as a newton root-finding problem
26.05.18 17:52:57<stoopkid> so, any term containing variables, you can look at it like a multi-dimensional function in those variables
26.05.18 17:53:16<stoopkid> (potentially multi-; if it contains more than one variable, that is)
26.05.18 17:54:56<stoopkid> for every substitution of the variables in the term for constant terms, you get a constant term
26.05.18 17:56:35<stoopkid> that constant term has some numeric godel-encoding, which we can say is represented by some (let's say potentially infinite) binary number in the range [0,1]
26.05.18 18:01:04<stoopkid> the term containing variables should also have a godel-encoding as some constant term, but for now i'm looking at the interpretation of the variable-containing term as a curve that passes through each of its constant instantiations
26.05.18 18:03:06<stoopkid> i'm not sure if this is exactly what we need to set up the resolution problem as a newton root-finding problem but this is something of a warm-up exercise while i refresh my memory on some of this stuff
26.05.18 18:05:24<stoopkid> in order to set up the resolution problem as a newton root-finding problem, we need to present the problem being solved as a "differentiable" curve whose zeroes represent the solutions to the problem
26.05.18 18:11:12<stoopkid> if the problem can be set up as an equation between numeric terms, f(X) = g(X), then it can be transformed into a zero-finding problem in the standard way: f(X) - g(X) = 0
26.05.18 18:12:47<stoopkid> this is related to unification ofc because unification == "solving equations"
26.05.18 18:13:39<stoopkid> so that brings the zero-finding problem closer to a resolution problem, but, not all the way there yet
26.05.18 18:15:19<stoopkid> the other thing to address is how to move from the discrete setting of the logical resolution problem to a continuous setting of differentiable curves, and what the derivative relates to in the resolution problem
26.05.18 18:16:13<stoopkid> seems potentially related to brzozowski derivatives and the generalization to derivatives of automata
26.05.18 18:16:51<stoopkid> unfortunately i'm a bit weak on the exact theory & methods of that generalization
26.05.18 18:18:46<stoopkid> this also seems related to prodcos: gives us a differentiable curve representing a discrete logic problem
26.05.18 18:20:13<stoopkid> that's about all i can extract from my own intuitions, so... i'll move this over to lit. crit. / Q&A
26.05.18 18:20:53<stoopkid> "and yes, there are mathematics which are not rational (strangely, imo, those are mostly the ones that we try to program computers with...)"
26.05.18 18:21:36<stoopkid> "most of your software actually constitute "irrational models"... which is one of the fundamental concerns of AN..."
26.05.18 18:24:28<stoopkid> you may be talking about something more general than turing-completeness / "behaviors of turing-complete machines", but it seems safe to say that turing-complete machines or their behaviors are at least included in this
26.05.18 18:25:28<stoopkid> this leads us back to binary numbers in the range [0,1]
26.05.18 18:26:55<stoopkid> all the halting machines have rational numbers as their outputs; actually rational numbers where the denominator is a power of 2
26.05.18 18:28:02<stoopkid> the machine starts with a finite number of 1s on the tape; if the machine halts in finite time, then it will only have been able to write a finite number of 1s onto the tape so we end up with a finite number of 1s
26.05.18 18:28:56<stoopkid> there will be some greatest index i such that cell i on the tape is a 1; all tape-indices j > i will be 0
26.05.18 18:29:40<stoopkid> the output can be represented as a rational number k / 2^i, k < 2^i
26.05.18 18:31:57<stoopkid> interesting that number theory would equate the tapes 0.10000... and 0.011111...
26.05.18 18:32:06<stoopkid> but computer science would leave them distinct
26.05.18 18:33:14<stoopkid> i'll get back to that; let's look at the machines that loop forever but just repeat the same pattern onto the tape...
26.05.18 18:33:37<stoopkid> 0.0101010101...
26.05.18 18:35:09<stoopkid> this is the rational number 1/3 represented as a bit-string
26.05.18 18:36:16<stoopkid> every machine that loops forever repeating the same (non-zero) pattern onto the tape corresponds to a rational number whose denominator has a prime factor other than 2
26.05.18 18:39:45<stoopkid> and finally the machines that loop forever, writing an infinite number of 1s, in a non-repeating pattern, correspond to the irrational numbers
26.05.18 18:41:15<stoopkid> (it's easy to see the relation between the repeating non-zero sequences and formal power series; i'll get back to that as well)
26.05.18 18:44:06<stoopkid> ok so, question: what do you mean by "numeric towers" and by "rational types"
26.05.18 18:46:54<stoopkid> pi, primes, ulam, euler, zeta, optimization/minimization... i'll have to think a bit more on that
26.05.18 18:47:55<stoopkid> so i think i sort of see where you're going with this, though i'm still trying to see "where you've already ended up"; am i on the right track so far?
26.05.18 19:04:44<stoopkid> https://en.wikipedia.org/wiki/Numerical_tower
26.05.18 19:17:32<stoopkid> alright, i see what you mean by numeric tower there; still not sure what you mean by rational types though, unless you just mean "data types that can faithfully be interpreted as rational numbers"
26.05.18 19:19:20<stoopkid> ok so, "changing the value of pi"
26.05.18 19:20:07<stoopkid> means changing the value of the ratio of the circumference of a circle / diameter of that circle
26.05.18 19:21:51<stoopkid> changing the set of primes requires changing the notion of products
26.05.18 19:24:35<stoopkid> in at least the case of changing the value of pi, we're changing the metric on the space to something non-euclidean
26.05.18 23:55:24*** Quit: Eguzki (~AndChat68@46-133-209-34.dialup.umc.net.ua) left #AutoNomic: Ping timeout: 256 seconds
27.05.18 05:01:41*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
27.05.18 05:11:28*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
28.05.18 02:53:24<HunterMinerCraft> stoopkid: yah, you seem to be going in the correct directions
28.05.18 11:14:37<stoopkid> http://www.idni.org/blog/art-of-self-ref
28.05.18 11:57:52<stoopkid> he seems to be slightly off about the orders thing
28.05.18 11:58:11<stoopkid> well, or maybe we're making different assumptions
28.05.18 11:59:33<stoopkid> it's slightly vague anyway though
28.05.18 11:59:41<stoopkid> "As it looks, we will need infinitely many orders of laws, therefore infinitely many laws, just in order not to leave the law completely unprotected: if there are no laws of changing the laws (second order laws), then there's absolutly nothing preventing from changing first order laws in any case."
28.05.18 12:04:02<stoopkid> i look at this and think more along the lines of "there's nothing *allowing* changing first order laws"
28.05.18 12:04:38<stoopkid> but... it's all a bit vague and lots of different ways of looking at the picture are left unaddressed
28.05.18 12:08:14<stoopkid> his approach of "everything's allowed that isn't explicitly disallowed" isn't wrong, per se, or at least.. i don't have any assumptions off-hand that would necessarily rule out the possibility of doing it that way..
28.05.18 12:08:39<stoopkid> on the other hand it does seem like even he's facing some complications by taking that assumption
28.05.18 12:08:49<stoopkid> "we will need infinitely many orders of laws, therefore infinitely many laws, just in order not to leave the law completely unprotected"
28.05.18 12:10:38<stoopkid> ^ i'm not sure "therefore" was the word he was looking for there, i think what he meant was something more along the lines of "..., and infinitely many laws (at least one per order), ..."
28.05.18 12:14:44<stoopkid> and it gets even more complicated: "In technical terms, it means that no high order logic would be enough"
28.05.18 12:15:05<stoopkid> "as any order of formula will still be finite, and the maximum order of a formula will correspond to the maximum order of a law, which would then be completely unprotected against modification, as above."
28.05.18 12:15:46<stoopkid> this does indeed follow from his prior assumptions
28.05.18 12:16:24<stoopkid> so higher-order's not enough, he needs "infinite order": "infinite order rules, as shown, are a necessity of everyday life."
28.05.18 12:17:44<stoopkid> and then from there he gets into fixed-point logics..
28.05.18 12:18:36<stoopkid> ok at least i understand the thought process behind this
28.05.18 12:21:09<stoopkid> unfortunately i don't have a complete response to this yet as a lot of this stuff touches on the things that i'm currently in the middle of figuring out myself
28.05.18 12:43:29<dmiles> he and I have be syncing our theories a little
28.05.18 12:44:26<dmiles> but "infinate order rules" can you think of an example?
28.05.18 12:50:17<HunterMinerCraft> yay more nonsense
28.05.18 13:07:38<stoopkid> dmiles: assume `o` is our set of 0th order objects
28.05.18 13:08:02<stoopkid> o -> o is a 1st order function, it can take 0th order objects, and return 0th order objects
28.05.18 13:08:45<stoopkid> (o -> o) -> (o -> o) is a 2nd order function, it can take a 1st order function (o -> o) as input and return another 1st-order function (o -> o) as output
28.05.18 13:10:28<stoopkid> an n-ary function has n inputs and one output; the i'th input has order `ord[in_i]`, the output has order `ord[out]`
28.05.18 13:10:43<HunterMinerCraft> ohad seems to confuse orders and universe levels, still
28.05.18 13:10:51* HunterMinerCraft shouldn't be surprised
28.05.18 13:11:06<stoopkid> and the function has order `max{ord[in_1],...,ord[in_n],ord[out]}`
28.05.18 13:11:08<stoopkid> + 1
28.05.18 13:11:23<stoopkid> `max{ord[in_1],...,ord[in_n],ord[out]} + 1` that is, sorry typo
28.05.18 13:12:30<stoopkid> so if the function is `f`, we have `ord[f] > ord[in_i]` forall i
28.05.18 13:13:22<stoopkid> actually, sorry, not `>`
28.05.18 13:13:37<HunterMinerCraft> well, despite what he seems to think... we have an omega order logic with arbitrary universe polymorphism, so whatever limitation he seems to see must be artificial. XD
28.05.18 13:14:21<stoopkid> this is where fixed-points come in; assume you can apply a function to itself, what would the order have to be
28.05.18 13:15:35<stoopkid> the order would have to be a fixed-point of the +1 operation, i.e. countable infinity
28.05.18 13:16:35<stoopkid> so functions that can be applied to themselves have "infinite order" in the sense of "higher order functions"
28.05.18 13:17:25<stoopkid> this seems to be distinct from "higher order logics", but i'm not sure whether there's a relation between them
28.05.18 13:18:01<stoopkid> and both of those are distinct from universe-levels, but again i'm not 100% on the relations between them
28.05.18 13:20:08<stoopkid> ohad is specifically talking about higher-order functions
28.05.18 13:20:40<stoopkid> or, "infinite order functions" when assuming they're self-applicative
28.05.18 13:21:06<stoopkid> but again, i'm not 100% sure on how ohad is relating this to higher-order logic and/or universe-levels (if at all)
28.05.18 13:24:20<stoopkid> we say A -> (A -> B) -> B is the type of a higher-order function, but this fits entirely within 0th order logic
28.05.18 13:24:55<stoopkid> we say you need an infinite order function to have self-application, but you can have indirect self-reference via logical quines just in 1st order logic
28.05.18 13:25:10<stoopkid> (that's the meat of godel's incompleteness)
28.05.18 13:26:25<stoopkid> i'm personally not perceptive enough to distinguish between logical order (as opposed to function order) and universe-level
28.05.18 13:28:07<stoopkid> but universe-levels might just be like the sorts in a many-sorted first-order-logic
28.05.18 13:45:20<dmiles> stoopkid: i get what you are saying .. ok good!
28.05.18 13:48:24<dmiles> also though i should say Ohad is speaking towards relational machinery (like RDF) and not at all towards functionan machines
28.05.18 13:48:41<dmiles> which makes stoopkid explkaination continue to make sense
28.05.18 13:51:27<stoopkid> check out the convo in ##dependent , they're clearing up some of my confusion on the relation between orders & universe-levels
28.05.18 13:52:09<dmiles> oh neat
28.05.18 22:05:07*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
28.05.18 22:13:07*** Join: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
28.05.18 22:37:32*** Netmerge: *.net *.split, split 16 hours 26 minutes 47 seconds ago (Use /WL to see who's still missing)
28.05.18 22:40:28*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-dzxopmbocvdqxivq) left #AutoNomic: Ping timeout: 240 seconds
28.05.18 22:41:40*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-auouqypntwacmfki) left #AutoNomic: Ping timeout: 240 seconds
28.05.18 22:41:41*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-qhdxlbstzjzuursa) left #AutoNomic: Ping timeout: 255 seconds
28.05.18 22:50:28*** Netmerge: *.net *.split, split 2 minutes 16 seconds ago (Use /WL to see who's still missing)
28.05.18 22:55:28*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
28.05.18 22:55:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
28.05.18 23:18:34*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-ktrusiyswukyvesc, (unauthenticated): @lexxus:matrix.org)
29.05.18 00:00:53*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-exzfkgorirwzqght, (unauthenticated): @koo5:matrix.org)
29.05.18 00:00:54*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-qrylwflstzxurfwd, (unauthenticated): @genuinelyfx:matrix.org)
29.05.18 04:56:33<HunterMinerCraft> dmiles: there's a difference?
29.05.18 04:56:57<HunterMinerCraft> stoopkid: anything particularly interesting?  Or point me to a log?
29.05.18 05:10:54<logicmoo> functional machine representation requires determinism and models
29.05.18 05:11:29<logicmoo> relational machine representation allows determinism and models but does not require them to operated
29.05.18 05:11:51<logicmoo> does not require them to operate*  for instance relational models allow non-determinism
29.05.18 05:12:47<logicmoo> also allows indeterminate values that can be represent with non-skolems
29.05.18 05:13:57<logicmoo> most of the time programmers are used to having models and determinable values so they can use function machines just fine
29.05.18 05:16:12<logicmoo> but relational machine programming allows a much more expressive model than functional machine programing
29.05.18 05:20:05<logicmoo> once a person does relational machine programming for over 20 years the way i have, it would be hard to revert back to functional machine programming
29.05.18 05:24:03<logicmoo> for instance .. successor functions can be defined using fixed point co-induction
29.05.18 05:25:25<logicmoo> yet cannot be treated as complete in a non-relational  deterministic model
29.05.18 05:26:02<logicmoo> well no fixed point coinduction is possible anyone without a relatinal model :)
29.05.18 05:26:13<logicmoo> well no fixed point coinduction is possible anyways without a relatinal model :)
29.05.18 05:27:20<logicmoo> yet are the essense of recursion for relational machine programming
29.05.18 05:27:49<logicmoo> yet fixed point coinduction is the very essense of recursion for relational machine programming
29.05.18 05:30:06<logicmoo> why such things that get statically typed language programmers hot and excited are because they have hope of finnaly doing logic programming
29.05.18 05:31:46<logicmoo> yet relational machine programmers (logic programmers) would had not considered much of this very noteworthy
29.05.18 05:32:59<logicmoo> which has been part of why I never studied or cared about this stuff until the last 3 years
29.05.18 05:34:52<logicmoo> as an example: i devleoped at least two apps that did prepositional algrebra that include the successor function.. yet i never needed to learn about Peano
29.05.18 05:36:19<logicmoo> (prepositional algrebra is a system for computing pathways in arbitrarily complex maps)
29.05.18 05:36:24<logicmoo> one use for it
29.05.18 05:37:42<logicmoo> then again those that study math proably don't compute pathways in arbitrarily complex maps
29.05.18 05:41:06<logicmoo> functional machine representation also tend to not like infinate datastructures
29.05.18 05:41:28<logicmoo> in relational machine representation infinate datastructures arte the norm
29.05.18 05:42:18<logicmoo> though whenever one gets a finite datastructure in relational machine representation, we are just as happy
29.05.18 05:48:12<logicmoo> to give a concrete exmple.. the member/2 predicate works on infinate datastructes in prolog
29.05.18 05:48:51<logicmoo> same with append/3
29.05.18 05:49:29<logicmoo> ?- append([],_,List).   creates a list of infinate length
29.05.18 05:50:09<logicmoo> so does  ?- List=_.
29.05.18 05:51:51<logicmoo> so does  ?- List1=_, List2=_, List1\==List2.  succeeds because the two infinate lists are not the same lists
29.05.18 05:58:28<logicmoo> hah and i was scared i had invented the term https://www.google.com/search?q=prepositional+algebra
29.05.18 06:00:36<logicmoo> still notice the applications of such research is AI, not mathematics
29.05.18 06:03:57<logicmoo> relational programming may also not be very usefull for those trying to study non-AI related programming
29.05.18 06:04:28<logicmoo> even though *I* enjoy making non-AI programs in it such as WAM-CL
29.05.18 06:05:07<logicmoo> WAM-CL works by guessing how a Prolog programmer would rewrite a CommonLisp program
29.05.18 06:05:31<logicmoo> (so maybe there is a little bit of AI in it)
29.05.18 06:05:52<logicmoo> but i dont see it as AI.. i see it as purely logic
29.05.18 10:29:39<stoopkid> HunterMinerCraft: https://pastebin.com/t9qXw3eG
29.05.18 14:48:34*** Join: Basilisk_of_roko (~root@37.153.110.58, (unauthenticated): root)
29.05.18 20:33:56*** Join: ChanServ (ChanServ@services., (unauthenticated): Channel Services)
                 *** Mode change: +o ChanServ    on #AutoNomic by wolfe.freenode.net (server)
29.05.18 20:37:40*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-qrylwflstzxurfwd) left #AutoNomic: Ping timeout: 256 seconds
29.05.18 20:37:57*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-ktrusiyswukyvesc) left #AutoNomic: Ping timeout: 255 seconds
                 *** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-exzfkgorirwzqght) left #AutoNomic: Ping timeout: 255 seconds
29.05.18 21:05:12*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-inwpivhqrkbvshkw, (unauthenticated): @lexxus:matrix.org)
29.05.18 21:42:37*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-iuczagofakxwbacz, (unauthenticated): @genuinelyfx:matrix.org)
                 *** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-kxrhoddldcgtmabk, (unauthenticated): @koo5:matrix.org)
30.05.18 00:01:35*** Nick change: Basilisk_of_roko (~root@37.153.110.58) is now known as HMCa
30.05.18 00:36:02<HMCa> logicmoo: I don't really understand what you're trying to say on either point
30.05.18 00:37:22<HMCa> functional machines don't require determinism, and either type of machine necessitates a model
30.05.18 00:38:43<HMCa> as i see it, it is simple... any functional machine can be transformed to a relational machine trivially... and any relational machine can be transformed to a functional machine monadically
30.05.18 00:41:59<HMCa> so, there can be no such distinction.... machines are just machines, generally
30.05.18 00:43:29<HMCa> and this shouldn't be too surprising, imo, esp given that they share the one complexity hierarchy
30.05.18 00:43:32<HMCa> heh
30.05.18 00:45:19<HMCa> stoopkid: interesting log.  He clarifies orders vs levels better than I have ever been able to put it heh :-)
30.05.18 00:47:50<stoopkid> definitely cleared up most of my confusion; i get the general idea now but i'm still working through a few details
30.05.18 00:48:07<HMCa> it is one of those tricky things... there is a clear distinction, and it is not that hard to distinguish in almost every case, but it can sometimes be hard to explain how to distinguish in general :-)
30.05.18 01:13:48<logicmoo> HMCa: the differnce between FM and RM is not the machines
30.05.18 01:14:06<logicmoo> the "machine" part is misleading i suppse
30.05.18 01:14:53<logicmoo> what it has to do with is the default meaning of a uninitialize pointer
30.05.18 01:15:14<logicmoo> an unbound pointer ina relational machine is a variabel.. an existential
30.05.18 01:15:37<logicmoo> in a functional machine it is a future location that will be populated by a value
30.05.18 01:15:52<logicmoo> it is simple as that
30.05.18 01:18:34<HMCa> stoopkid: maybe you can translate for me? XD
30.05.18 01:18:57<logicmoo> but yes, you can implement either in either .. that isnt the point it is actualy what you get done that maters
30.05.18 01:19:30<logicmoo> if FM implements RM .. than all if good.. it can do RM based things
30.05.18 01:19:47<HMCa> not "implement in" but directly transform the machine
30.05.18 01:21:17<stoopkid> not sure, i'm not really understanding this discussion
30.05.18 01:21:30<stoopkid> what's a functional machine and what's a relational machine? :)
30.05.18 01:21:32<logicmoo> yes but to transform many relational model into a ground terms would cause infinate numnber of terms
30.05.18 01:21:53<logicmoo> reational machine uses fixed points based on coinduction
30.05.18 01:22:20<logicmoo> functional machines  fixed points are based on termination
30.05.18 01:22:42<stoopkid> still not sure
30.05.18 01:22:55<stoopkid> "uses" is a vague word
30.05.18 01:23:09<logicmoo> it makes more sense if one replaces every occurance of "machine" i've used with "model"
30.05.18 01:24:10<stoopkid> still makes the same amount of sense to me heh
30.05.18 01:24:24<logicmoo> a good example is representing infinity using successor relations
30.05.18 01:24:40<HMCa> well at least I'm not the only one who is lost :-)
30.05.18 01:24:46<logicmoo> that uses fixed points based on coinduction
30.05.18 01:25:17<HMCa> you can do such representation with either type of machine, no?
30.05.18 01:25:33<logicmoo> yes.. but then it would be the other machine model
30.05.18 01:25:58<stoopkid> sounds like you're not distinguishing between machine models sounds like you're distinguishing between data & codata
30.05.18 01:26:30<logicmoo> data models
30.05.18 01:26:46<HMCa> logicmoo: huh?
30.05.18 01:26:51<logicmoo> realtional data representation vs  non-relational data representations
30.05.18 01:27:50<logicmoo> in "functional model" the goal is to covert everything to a non-relational data representation
30.05.18 01:28:00<HMCa> who's goal?
30.05.18 01:28:17<logicmoo> the goal of the compiler
30.05.18 01:28:32<stoopkid> who's compiler? XD
30.05.18 01:28:35<HMCa> er
30.05.18 01:28:41* HMCa is extra lost now
30.05.18 01:29:07<logicmoo> the compiler for instance that is targeting a non WAM system
30.05.18 01:30:08<logicmoo> implied here the Warren Abstract Machine Model is a relational machine model
30.05.18 01:32:09<logicmoo> so for example a C compiler is expecting that infinity is a special value
30.05.18 01:32:46<logicmoo> a WAM compiler is expecting that infinity is a special successor predicate trick
30.05.18 01:35:51<logicmoo> how the data is modeled effects how the program counter is expected to operate in WAM
30.05.18 01:35:55<logicmoo> (litterally)
30.05.18 01:36:19<logicmoo> what i mean is the Program Counter has to walk over the data
30.05.18 01:36:28<HMCa> a compiler is a transformer between two machines
30.05.18 01:36:33<HMCa> yes?
30.05.18 01:36:43<logicmoo> in C type macjine the program counter calls things like copy that segment to this other segment
30.05.18 01:37:27<logicmoo> WAM2C transformer creates a relational interpreter inside a non-WAM machine sure
30.05.18 01:37:55<HMCa> *any* compiler is a transform between machines, yes?
30.05.18 01:38:35<logicmoo> i dont think so
30.05.18 01:39:10<logicmoo> most compilers have langauges that are designed for the end machine type
30.05.18 01:39:32<HMCa> ok, so we don't seem to have the same definition for "compiler" to begin with
30.05.18 01:39:39<HMCa> so maybe we should avoid that word
30.05.18 01:40:22<HMCa> can you explain what you see as the difference without referencing "compilers"?
30.05.18 01:41:05<logicmoo> i would say i've conflated "optimal machine data strcutures" with the machines themselves.. or simpler is to see the datastructures as somehting and nt even look at the machines or models the machines use
30.05.18 01:42:10<logicmoo> i too quickly jump to the architectures.. which really the architectures now will not be the architectures 100 years from now.. bu tthe dat amodels will be the same 100 years from now
30.05.18 01:42:40<HMCa> let's stick with talking just about machines?
30.05.18 01:43:03<HMCa> you seem to be wanting to drag in a lot of unrelated and circumstantial detail
                 <logicmoo> the machines as i said was still a conflation
30.05.18 01:43:29<logicmoo> i undert stand your point.. about sure x86 can compile a prolog program
30.05.18 01:43:40<HMCa> er
30.05.18 01:43:42<logicmoo> tha tis your point , correct>?
30.05.18 01:43:45<HMCa> no?
30.05.18 01:44:04<logicmoo> jsut like an x86 can run a SPARQL server
30.05.18 01:44:15<logicmoo> so you are right the machine has nothing to do with it
30.05.18 01:44:36<HMCa> my point is that there can be no difference between relational machines and functional machines because we can transform any relational machine to a functional machine, and vice versa
30.05.18 01:44:44<logicmoo> eventualyl though you just might make hardware tha tis optimized for SPARQL
30.05.18 01:45:02<HMCa> for every relational machine there is an equivalent functional machine.
30.05.18 01:45:16<HMCa> for every functional machine therr is an ewuivalent relational machine
30.05.18 01:45:21<HMCa> we can prove this
30.05.18 01:45:37<logicmoo> sure but *not* the datatypes used on those machines
30.05.18 01:46:10<HMCa> I don't know what you mean by "datatypes used on those machines"
30.05.18 01:46:15<HMCa> bits are bits, also.
30.05.18 01:46:16<logicmoo> thjose machines are designed and built to deal with a certain datatypes
30.05.18 01:46:37<logicmoo> relation machines do not use bits
30.05.18 01:46:51<HMCa> all machines use bits! XD
30.05.18 01:47:05<logicmoo> read Warrens paper on his relationmal machine
30.05.18 01:47:19* logicmoo finds a link
30.05.18 01:47:22<HMCa> i've read it.  It uses bits.
30.05.18 01:47:49<logicmoo> it uses 3 stacks and 4 refernce types
30.05.18 01:48:01<logicmoo> bits are not one of the 4
30.05.18 01:48:21* HMCa thinks you miss some basic information theory, here
30.05.18 01:48:23<HMCa> :-P
30.05.18 01:49:09<HMCa> to say something functions without bits is nonsense, imo. :-|
30.05.18 01:49:11<logicmoo> i understnad that all binary machines use bits
30.05.18 01:49:22<logicmoo> but what do these machines have to do with hardware?
30.05.18 01:49:45<HMCa> ... huh?
30.05.18 01:50:01<logicmoo> show me where WAM uses bits
30.05.18 01:50:21<logicmoo> or evern the JVM
30.05.18 01:50:39<logicmoo> or the BEAM
30.05.18 01:50:46<HMCa> how about "any control flow whatsoever"?
30.05.18 01:51:31<logicmoo> so you are saying IF (bit) THEN jmpo type things?
30.05.18 01:51:41<logicmoo> so you are saying they use a boolean desision
30.05.18 01:51:57<HMCa> no, i am saying any control flow, generally, distinguishes bits
30.05.18 01:52:13<HMCa> it cannot be otherwise - it is definitional
30.05.18 01:52:25<logicmoo> sur eht eConditionCodesRegisters of most CPUs i programmed over the years did use a CC register
30.05.18 01:52:31<HMCa> it is what control flow *is*
30.05.18 01:52:50<logicmoo> but WAM uses no CC register nor does JVM
30.05.18 01:53:16<logicmoo> (the CC register is the bitmask of the results of comparison operatiions)
30.05.18 01:53:37<HMCa> so jvm has no control flow at all?
30.05.18 01:54:29<logicmoo> has flow control but how is that related to bits?
30.05.18 01:54:52<HMCa> how can you have control flow without distinguishing bits?
30.05.18 01:55:04<logicmoo> ok i can see that one can say tha ta branch is a yes/no operation
30.05.18 01:55:43<logicmoo> but i've never heard r seen that operation encoded in a bits for the JVM
30.05.18 01:56:09<HMCa> ok... and?
30.05.18 01:56:23<logicmoo> https://www.artima.com/underthehood/flowP.html
30.05.18 01:56:33<HMCa> I still don't know what you mean by "datatypes used on those machines" any better :-)
30.05.18 01:57:36<logicmoo> the datatypes for instanc etha trepresents infinity
30.05.18 01:58:07<logicmoo> the datatype that represents a future value
30.05.18 01:58:29<logicmoo> the datatype that represents a value that is know to be imposisble to compute
30.05.18 01:58:57<logicmoo> the datatype that represents a cyclic tree vs a acyclic tree
30.05.18 01:59:35<HMCa> ok, so we know we can transform any such representation, too, as implied by the fact that we can transform *any* machine instance
30.05.18 01:59:38<HMCa> so
30.05.18 01:59:59<HMCa> any datatype that you can represent on a functional machine must also be representable on a relational machine
30.05.18 02:00:03<HMCa> and vice versa
30.05.18 02:01:41<HMCa> that is not to say that some particular datatype represented by some paeticular functional machine will be representable by *any* given relational machine, only that *some* ewuivalent relational machine does (must!) exist
30.05.18 02:02:08<logicmoo> that i agree with.. that is my premis
30.05.18 02:02:19<logicmoo> but it does not work that way in reverse
30.05.18 02:02:23<HMCa> what is your premise?
30.05.18 02:02:30<HMCa> and what doesn't work in reverse?
30.05.18 02:02:49<HMCa> we can go both directions... relational->functional and functional->relational
30.05.18 02:03:09<HMCa> 45 < HMCa> for every relational machine there is an equivalent functional machine.
30.05.18 02:03:11<logicmoo> deterministic <-> nondetermistic ?
30.05.18 02:03:12<HMCa> 45 < HMCa> for every functional machine therr is an ewuivalent relational machine
30.05.18 02:03:15<HMCa> 45 < HMCa> we can prove this
30.05.18 02:03:26<logicmoo> you must prove deterministic <-> nondetermistic
30.05.18 02:03:30<HMCa> huh?
30.05.18 02:03:31<logicmoo> (first)
30.05.18 02:03:47<HMCa> why? XD
30.05.18 02:03:58<HMCa> 37 < HMCa> functional machines don't require determinism, and either type of machine necessitates a model
30.05.18 02:04:24<logicmoo> yes but that statment was  incorrect
30.05.18 02:04:47<logicmoo> function machines require cardinatility of 1 .. not 0 or 2
30.05.18 02:04:54<HMCa> er... no?
30.05.18 02:05:01<HMCa> says who?
30.05.18 02:05:18<logicmoo> says IBM
30.05.18 02:05:31<logicmoo> or says the return value of a function
30.05.18 02:05:45<HMCa> ... huh?
30.05.18 02:05:51<logicmoo> a function that never teurns but is infinate has a cardinality of 0
30.05.18 02:06:24* HMCa extra extra lost now
30.05.18 02:06:46<logicmoo> i know it is like we are from two differnt techinlogy stacks :)
30.05.18 02:07:40<HMCa> IBM is no authority on reason, and nothing in logic precludes functions from multiple returns... not that that would seem to have anything to do with anythig, anyway...
                 <logicmoo> ok what is the cardinaility of a   a function like addition?
30.05.18 02:08:24<logicmoo> the reason i used IBM as an exmaple is that they like their processors to not stop
30.05.18 02:08:45<logicmoo> to always treate all  JSRs as if they will one day return
30.05.18 02:08:59<HMCa> what addition, in particular?
30.05.18 02:09:13<logicmoo> say the value of  1+1
30.05.18 02:09:41<logicmoo> (has a cardinality of 1 )
30.05.18 02:09:43<HMCa> oooh, I know that one... it is == 0+1+1!
30.05.18 02:10:01<logicmoo> so how long would it take to compute infinity?
30.05.18 02:10:15<logicmoo> (switching from cardinality for the moment)
30.05.18 02:10:16<HMCa> depends on the machine?
30.05.18 02:10:34<HMCa> specific machines are specific.
30.05.18 02:10:37<HMCa> XD
30.05.18 02:10:38<logicmoo> it depnds on the data representnaion
30.05.18 02:10:54<logicmoo> and if the machine is designed to at the low level use that data representation
30.05.18 02:11:27<HMCa> you still haven't even explained what "data representation" is to mean... all I know of data wrt general machines is that we can assert that it will always consist of bits.
30.05.18 02:11:57<HMCa> beyond that, you no longer speak about general machines, but some-or-other specific machine, it seems
30.05.18 02:12:01<logicmoo> well your premis is that all machine are jsut bits.. my premis is that WAM and JVM are not just bits
30.05.18 02:12:21<logicmoo> so you say that all things like infinaity just converts yto bits and it doesnt matter
30.05.18 02:12:28<logicmoo> right?
30.05.18 02:13:13<HMCa> I say only one thing over and over... relational machines and functional machines are not different, they are equivalent
30.05.18 02:13:28<logicmoo> can you show me proof?
30.05.18 02:13:33<HMCa> I already did?
30.05.18 02:14:12<HMCa> do you agree that any functional machine can be trivially converted to a relational machine?
30.05.18 02:14:18<logicmoo> just stating it doesnt make it so
30.05.18 02:14:24<logicmoo> yes
30.05.18 02:14:34<HMCa> cool, we'rr halfway there already
30.05.18 02:14:42<HMCa> *we're
30.05.18 02:15:01<logicmoo> so show me how to represent Peano Infinity in bits please
30.05.18 02:15:25<HMCa> next, do you agree that any relational machine can be monadically converted to an equivalent functional machine?
30.05.18 02:16:08<logicmoo> not quite.. but in a sense as long as that function machine is a meta-interpretor
30.05.18 02:16:17<logicmoo> sure
30.05.18 02:16:40<HMCa> no "interpreters" here
30.05.18 02:16:52<HMCa> maybe you should re-read that LogicT paper...
30.05.18 02:17:14<logicmoo> so you are saying you can monadically represent infinity as a determinant?
30.05.18 02:17:47<logicmoo> if so, how about infinity minus 1 ?
30.05.18 02:18:38<logicmoo> are you saying all numbers could just come with a  Peano Monad?
30.05.18 02:19:04<logicmoo> (if so.. that modad is an interpreter)
30.05.18 02:19:18<HMCa> no, I am saying you can monadically encode any relational machinewhich calculates infinity as an equivalent functional machine which computes infinity
30.05.18 02:19:54<logicmoo> sure, but that would really suck and not be useable
30.05.18 02:20:01<logicmoo> as it might actualy get called
30.05.18 02:20:07<logicmoo> then the show is over
30.05.18 02:20:14<HMCa> "really suck"?  "not be useable"?
30.05.18 02:20:27<logicmoo> there is no fixed point calculation that will terminate
30.05.18 02:20:29<HMCa> only if the original machinr "really sucked" and "wasn't usable"
30.05.18 02:20:45<HMCa> neither machine will terminate in finite time. :-|
30.05.18 02:20:56<logicmoo>  "really suck"?   no fixed point calculation  "not be useable"? never terminate
30.05.18 02:21:14<HMCa> the machines are *equivalent*
30.05.18 02:21:24<HMCa> either they both terminate or neither does
30.05.18 02:21:35<logicmoo> i disagree
30.05.18 02:21:48<HMCa> 16 < HMCa> maybe you should re-read that LogicT paper...
30.05.18 02:21:54<logicmoo> one machine cacluates inf .. the otehr machine never calculates it.. it only "represented it"
30.05.18 02:22:22<HMCa> if the original machine only "represents it" then the transformed machine will only "represent it"
30.05.18 02:22:36<HMCa>  < HMCa> no, I am saying you can monadically encode any relational machinewhich calculates         infinity as an equivalent functional machine which computes infinity
30.05.18 02:22:45<logicmoo> cacluating stuff that is incalculatable is a "bad idea"
30.05.18 02:22:56<HMCa> if the original machine actually *calculates* it then so will the transformed machine
30.05.18 02:23:14<logicmoo> would  arelational machine calculate it?
30.05.18 02:23:33<HMCa> stoopkid: I think I suddenly realized the problem here
30.05.18 02:24:01<logicmoo> would a relational machine calculate it ?
30.05.18 02:24:07<HMCa> logicmoo: would *which* relational machine calculate it?
30.05.18 02:24:12<logicmoo> i think you think it would or should
30.05.18 02:24:40<HMCa> the relational machine that calculates it would calculate it, certainly
30.05.18 02:24:44<logicmoo> but why would it? it already has a fixed point and has encoded the coinduction as part of the data
30.05.18 02:25:34<HMCa> stoopkid: he seems to not understand what I mean by "machine" in the first place.
30.05.18 02:26:13<HMCa> here, i'll demonstrate
30.05.18 02:26:36<HMCa> logicmoo: would you consider "WAM" to be "a machine"?
30.05.18 02:27:57<logicmoo> yes
30.05.18 02:27:58<HMCa> see, there is the problem here. :-)
                 <HMCa> when i say "a machine" I mean a specific machine, not a family of describable machines (as WAM is)
30.05.18 02:29:02<HMCa> WAM is not "a machine"... but a representation for a paeticular (infinite) family of possible machines
30.05.18 02:31:41<stoopkid> one of the defining features of a function is that for each element of the domain, the set of objects in the codomain that it is related to has cardinality 1, dmiles has that right at least
30.05.18 02:32:35<stoopkid> thats the extent of my relevant knowledge for this discussion so far :)
30.05.18 02:33:47<HMCa> sure, hence why we must monadically transform... this is covered in the logict paper iirc
30.05.18 02:34:16<stoopkid> no idea what that really means
30.05.18 02:34:40<stoopkid> probably cause i need to read that paper :)
30.05.18 02:35:04<HMCa> stoopkid: I've only been saying that for *years* now, no? :-P
30.05.18 02:37:22<logicmoo> http://okmij.org/ftp/papers/LogicT.pdf  is about the building non-determinism into a monad
30.05.18 02:37:48<HMCa> into a monad *transformer*
30.05.18 02:38:07<logicmoo> into an "interpreter" :)
30.05.18 02:39:03<logicmoo> though without the 'interpretive overhead'
30.05.18 02:39:53<HMCa> er, no?
30.05.18 02:39:56<HMCa> XD
30.05.18 02:40:01<logicmoo> " It is the result of CPS-transforming a direct-style implementation that runs deterministic code “at full speed”—that is, without any interpretive overhead"
30.05.18 02:40:11<HMCa> yes... and?
30.05.18 02:40:20<logicmoo> however what about non-deterministic code?
30.05.18 02:40:50<HMCa> did you just ctrl+f for "interpreter", copypasta, and pray that it formed an argument?
30.05.18 02:40:55<HMCa> I think I'm done here, for now. :-|
30.05.18 02:41:00<logicmoo> sorta of but .. yes it did
30.05.18 02:41:08<HMCa> it didn't.  sorry.
30.05.18 02:41:38<HMCa> anyway I've already wasted too much time on this nonsense.  There is not difference.  If you can't see that, I'm out of time available atm to try to show it to you.
30.05.18 02:41:51<logicmoo> read section 6
30.05.18 02:43:06<stoopkid> ill see if i can make sense of it tomorrow; a bit too late for me to dive into this pdf tonight
30.05.18 02:44:29<HMCa> stoopkid: np, I've waited years already what is one more day? :-P
30.05.18 02:44:34<HMCa> XD
30.05.18 02:45:09<HMCa> I'm nothing if not patient ;-)
30.05.18 02:46:39<HMCa> (I'm only impatient wrt that one thing (tau genesis) ofc, but I also accept that it will only emerge on its' terms, too... so my impatience there is ofc in vain anyway)
30.05.18 02:47:00<HMCa> The Gods, Themselves. :-|
30.05.18 02:49:18<logicmoo> if you want to understand how relational machines operate LogicT is a good paer btw
30.05.18 02:49:22<logicmoo> to stoopkid
30.05.18 02:50:33<logicmoo> but i will continue to say that LogicT is merely WAM2Haskell
30.05.18 02:51:32<logicmoo> and of course that is just surrounding all WAM code with haskell code inlined instead of over a 3-stack model
30.05.18 02:52:19<logicmoo> and of course that is just surrounding all WAM code with haskell "interpretor" inlined that emulates the 3-stack model
30.05.18 02:52:46<logicmoo> study WAM2C .. its the same thing
30.05.18 02:53:20<logicmoo> (By Paul Tauru)
30.05.18 02:54:20<logicmoo> if HMCa is right about anything it is that one can ahead of time run WAM2C and proclam it is no loger relational
30.05.18 02:55:15<logicmoo> even though it has all the identical moving parts
30.05.18 02:56:39<logicmoo> its like rubbing peanut butter all over ones naked body
30.05.18 02:56:47<logicmoo> proclaiming they are no longer human but infact simply peanut butter
30.05.18 02:59:25<logicmoo> a much closer analogy would be feces
30.05.18 02:59:44<logicmoo> see, with feces, they can bend over and prove it was internal as well
30.05.18 05:47:56*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-genwsrhaxrkrhwix) left #AutoNomic: Quit: Connection closed for inactivity
30.05.18 09:12:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jrfdtyvcbsallypg, stoopkid: stoopkid)
30.05.18 09:45:19<koo5[m]> You broke matrix
30.05.18 11:35:52<ditable-kooe>also, lol about the feces part
30.05.18 14:28:19<HMCa> my understanding of binprolog/pl2c/wam2c is that they leave the relational machine as-is
30.05.18 14:28:43<HMCa> and simulate on an imperative machine
30.05.18 14:28:51<HMCa> hence an interpretive overhead
30.05.18 14:29:01<HMCa> that is not much like logict
30.05.18 14:29:25<HMCa> your "argument" found by ctrl+f was actually an argument against yourself...
30.05.18 14:29:54<HMCa> "no interpretive overhead" means no interpretation is occuring
30.05.18 14:30:10<HMCa> any interpreter will always have an overhead, from indirection
30.05.18 14:30:27<HMCa> (this is something ohad never seemed to be able to grasp either)
30.05.18 14:51:32<HMCa> stoopkid: and did you get through the logict paper (yes, i'm splitting our chat between 2 places, sry, hehe)
30.05.18 14:52:13<stoopkid> not yet
30.05.18 14:53:19<HMCa> ok
30.05.18 14:54:01<stoopkid> https://pastebin.com/LcdnEVMd
30.05.18 16:36:10*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
30.05.18 16:36:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
30.05.18 20:22:03*** Nick change: logicmoo (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) is now known as dmiles
31.05.18 05:51:28*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jrfdtyvcbsallypg) left #AutoNomic: Quit: Connection closed for inactivity
31.05.18 08:47:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gyyjvkhwyrzreqqg, stoopkid: stoopkid)
31.05.18 09:35:51<stoopkid> https://pastebin.com/RXYxxjyV
31.05.18 11:05:35<stoopkid> https://pastebin.com/tGiHYeYN
31.05.18 11:05:50<stoopkid> https://blog.openledger.info/2018/04/10/omni-usdt-agrs-eurt-amp-and-maid-gateways-are-temporarily-disabled/
31.05.18 11:14:00<stoopkid> https://blog.openledger.info/2018/05/16/maintenance-works-are-finished-gateways-work-in-operational-mode-3/
31.05.18 12:04:07<HMCa> right, but that's nothing to do with bitshares itself
31.05.18 12:12:04<HMCa> ah, i get it, it is a counterparty issuance model... open.agrs is actually not the same token as agrs...
31.05.18 12:12:08<HMCa> what a scam
31.05.18 12:13:18* HMCa wonders how many agrs holders know that the "you can still trade it on bitshares" claim is a lie... XD
31.05.18 12:13:43<HMCa> where's nilli? :-)
31.05.18 12:29:25<HMCa> probably someone should correct the false claims of such on the bitcointalk thread, heh
31.05.18 12:30:16<HMCa> well, half false... I suppose one could still trade there if they can find some sucker to trade their open.agrs for your agrs I guess
31.05.18 12:30:46<HMCa> therr's always a greater fool... until you happen to be the greatest. :-\
31.05.18 13:10:42<stoopkid> oh well at least i know what's going on now
31.05.18 13:14:25<HMCa> I'm messaging nilli, hopefully she will be willing to clarify the situation in the agrs thread, where the lie is still being pushed
31.05.18 13:14:40<HMCa> I'm sure if you or I tried it would not go over well. XD
31.05.18 13:17:14<stoopkid> panzer88 on btctalk: "But never forget that O had is a jew , they are not used to part away with their $."
31.05.18 13:17:20* stoopkid sighs
31.05.18 13:19:34<HMCa> yah, seems like someone brought a bunch of redpill people into bitcointalk over the past year :-(
31.05.18 13:19:37<HMCa> heh
31.05.18 13:19:49<HMCa> I see a lot of that sort of noise there anymore
31.05.18 13:22:04<HMCa> so we're back to "only agrs liquidity is otc below $0.50" situatiin after all... the openledger ~$1.70 price everyone refers to is an illusion.... a >300% markup mirage.
31.05.18 13:22:37* HMCa wonders if some of the agrs people intentionally misled me
31.05.18 13:23:43<HMCa> also, openledger's "technical reasons" claim is obv suspect
31.05.18 13:23:47<HMCa> (IMO)
31.05.18 13:23:58<stoopkid> so iiuc the market works but only for people who already hold open.agrs or are buying it directly with something else on bitshares?
31.05.18 13:24:07<HMCa> right
31.05.18 13:24:20<HMCa> it is a closed market
31.05.18 13:24:40<HMCa> (no outside capital flows)
31.05.18 13:25:50<stoopkid> so now they're basically pushing open.agrs instead of omni agrs?
31.05.18 13:26:15<HMCa> sometimes called a "bottle market"... similar to a "bucket shop" but even worse... heh
31.05.18 13:26:57<HMCa> right, the newtau camp is shilling a whole new token, basically
31.05.18 13:27:20<HMCa> still think there is a chance that this *isn't* just fraud? ;-)
31.05.18 13:27:21<stoopkid> kinda goes both ways, if there's no "gateway" back to omni agrs, then are people even investing in "agoras"?
31.05.18 13:27:39<HMCa> nope
                 <stoopkid> (people who buy open agrs)
31.05.18 13:27:45<HMCa> whole new token
31.05.18 13:27:53<HMCa> ohad's third
31.05.18 13:27:55<HMCa> XD
31.05.18 13:29:04<HMCa> if this isn't misrepresentation of an asset then I don't know what is.... ;-)
31.05.18 13:29:38<stoopkid> well
31.05.18 13:29:49<stoopkid> i certainly don't feel that my understanding of the situation matches the representation? :)
31.05.18 13:30:23<HMCa> now you see why people are crying foul?
31.05.18 13:30:25<HMCa> heh
31.05.18 13:32:05<stoopkid> is there econ theory to predict what the value might actually be if a gateway was opened back up 1:1 omni.agrs <-> open.agrs?
31.05.18 13:33:07<stoopkid> what it might settle to, i guess, since i guess it's a difference there's an arbitrage factor
31.05.18 13:33:30<HMCa> well... yes, but the illiquidity would complicate it.... most theory assumes currency is common and liquid
31.05.18 13:33:35<HMCa> this case is neither
31.05.18 13:34:15<HMCa> probably as soon as gateway opens, bagholders try to make exits, and wipe out the buy side of the books
31.05.18 13:34:41<HMCa> so it becomes a question of if otc liquidity competes
31.05.18 13:35:14<HMCa> if so, assume they'll take a margin and buy below current otc, probably around... let's see...
31.05.18 13:35:27* HMCa does a quick napkin calc
31.05.18 13:37:06<HMCa> assuming the otc buyers are serious, and market makers behave consistently and also don't exit themselves, price shouldn't go below ~$0.17 upon reopen
31.05.18 13:37:34<HMCa> (all else being equal... meaning no additional lost-faith from the drama itself)
31.05.18 13:38:14<HMCa> (which is probably a terrible assumption)
31.05.18 13:39:08<HMCa> now to really assert that we'd need a futures market to look at, and adjust for hedging
31.05.18 13:39:51<HMCa> but black-scholes can't help us here, because no futures market to play in
31.05.18 13:39:53<HMCa> so
31.05.18 13:40:00<HMCa> long story short
31.05.18 13:40:19<HMCa> otc market makers have the ball, can set price as they please really
31.05.18 13:40:38* HMCa WTB AGRS $0.01 per...
31.05.18 13:40:41<HMCa> XD
31.05.18 13:41:10<stoopkid> hrm
31.05.18 13:44:50<stoopkid> i'm not really seeing why it wouldn't balance out somewhere in the middle (assuming no lost-faith)
31.05.18 13:45:18<HMCa> "the middle" of what?
31.05.18 13:45:41<HMCa> only the otc prices are actual
31.05.18 13:45:47<stoopkid> otc-price <-> open.agrs price
31.05.18 13:46:04<HMCa> they aren't the same asset
31.05.18 13:46:08<HMCa> it is a triangle
31.05.18 13:46:14<HMCa> not a 2 way arbitrage
31.05.18 13:46:36<HMCa> it would be like arguing usd and btc shoukd meet in some middle ;-)
31.05.18 13:47:47<stoopkid> except i thought open.agrs was supposed to let you withdraw 1 omni.agrs for each 1 open.agrs you hold
                 <HMCa> so the real questions here are:
31.05.18 13:48:11<HMCa> 1) how much otc liquidity is real, and with what pricing
31.05.18 13:48:59<HMCa> 2) how will openledger themselves value the token on their iou claims (iow will they actually honor their 1:1 bond)
31.05.18 13:49:37<HMCa> 3) will market makers still make the open.agrs market upon reoen, or will they exit
31.05.18 13:49:43<HMCa> *reopen
31.05.18 13:50:41<HMCa> realistically, I'd expect only a small portion of otc liquidity is real, openledger will not take the risk, and market makers will exit
31.05.18 13:50:44<HMCa> so...
31.05.18 13:50:48<HMCa> hrmmm
31.05.18 13:50:50* HMCa revises
31.05.18 13:51:06* HMCa WTB AGRS $0.0001 per
31.05.18 13:51:08<HMCa> XD
31.05.18 13:51:50<HMCa> consider fundamentals as well and there is a good argument that I'd still be overspending.
31.05.18 13:52:05<HMCa> agrs price may very well seek $0.
31.05.18 13:53:11<HMCa> his github repo takes steps backwards lately... all he has there now is a very basic fwd chainer (and still it is broken, luls)
31.05.18 13:53:14<HMCa> iow
31.05.18 13:53:38<HMCa> the "hello world" of automated reasoning is being hawked as the next revolution. :-|
31.05.18 13:54:23<HMCa> and it actually only prints "hello wor"... XD
31.05.18 13:54:45<stoopkid> well, if openledger doesn't take "the risk", then i'd say that's also a misrepresentation on their part?
31.05.18 13:55:50<HMCa> hrmmm, dunno... what are their terms on the iou?  How (or even "can they"?) would they be enforced?
31.05.18 13:56:05<HMCa> in who's jurisdiction?
31.05.18 13:56:18<HMCa> counterparty risk is real.
31.05.18 13:56:53<HMCa> the rational play on their part is probably just to keep the market bottled forever....
31.05.18 13:57:12<HMCa> because they can, and then they never have to consider a risk adjustment
31.05.18 13:57:26<HMCa> it is like absconding without going anywhere. XD
31.05.18 13:58:19<HMCa> (and this is part of why I never bought into the BTS nonsense, btw)
31.05.18 13:59:31<HMCa> (also because trading on fully transparent books is insane, so they're basically fundamebtally flawed as a dex design independent of the fiat gateway concern)
31.05.18 14:00:25* HMCa stands by the claim that there is *no* soundly functioning dex to date.
31.05.18 14:03:43<stoopkid> i mean, shouldn't they basically be holding 1 omni.agrs for each 1 open.agrs they claim you have?
31.05.18 14:03:57<stoopkid> right, terms
31.05.18 14:05:12<HMCa> i dunno, some might argue that they "should" practice fractional reserve and reinvest elsewhere, too...
31.05.18 14:05:41<HMCa> what they actually *do* is up to them.
31.05.18 14:05:48* HMCa shrugs
31.05.18 14:05:50<stoopkid> oh wow
31.05.18 14:05:55<HMCa> counterparty risk is real.
31.05.18 14:06:17<stoopkid> so they might not even be holding omni.agrs
31.05.18 14:06:36<HMCa> I wouldn't be. :-|
31.05.18 14:06:39<HMCa> ...
31.05.18 14:06:49<stoopkid> erm
31.05.18 14:07:16<stoopkid> but then that's doing a different thing then the thing claimed to be... uhh.. idk :/
31.05.18 14:07:32<HMCa> I mean if I were them I would do the rational thing: bottle the market forever and dump my holdings for btc
31.05.18 14:07:38<HMCa> because, well... why not?
31.05.18 14:08:16<HMCa> "bitshares' design lets me."
31.05.18 14:10:38<HMCa> this, too... is why we build... ;-)
31.05.18 14:12:18<HMCa> see, the only jurisdictional enforcement possible is "bitshares' codified rules"... which don't actually hold the fiat gateways to much of anything, it seems
31.05.18 14:12:30<HMCa> hence my:
31.05.18 14:12:48<HMCa> :12 < HMCa> ah, i get it, it is a counterparty issuance model... open.agrs is actually not the same token as agrs...
31.05.18 14:12:50<stoopkid> and i guess for people holding open.agrs and not expecting to exchange back to omni.agrs, it's fine?
31.05.18 14:12:51<HMCa> :12 < HMCa> what a scam
31.05.18 14:13:08<HMCa> well, fine "for now"
31.05.18 14:13:37<HMCa> until the buy side of open.agrs gets wiped out, and they are stuck bagholding also
31.05.18 14:13:43<HMCa> so
31.05.18 14:13:44<HMCa> yah
31.05.18 14:14:04<HMCa> we now have 2 distinct sets of agrs bagholders, and soon 3
31.05.18 14:14:26<HMCa> who wants to make a bet on if there'll be a 4th round? XD
31.05.18 14:15:01<HMCa> ready to join in calling what ohad does "fraud" yet?
31.05.18 14:15:18<HMCa> or... still somehow not convinced?
31.05.18 14:16:55<stoopkid> who are the first round of bagholders? i guess that was before i was paying attention to his ico
31.05.18 14:17:22<stoopkid> 2nd round is omni.agrs, 3rd round is open.agrs right?
31.05.18 14:17:40<HMCa> anyone who failed to swap his original token for his second token before his deadline, after the "hack"
31.05.18 14:18:11<HMCa> i put quotes because it was no hack, by any usual definition
31.05.18 14:18:24<HMCa> he just claimed he was S.E.'ed
31.05.18 14:18:31<HMCa> "woops"
31.05.18 14:18:39<stoopkid> what "hack", you mean when he accidentally gave half the tokens to somebody claiming to be an exchange?
31.05.18 14:18:45<HMCa> yes
31.05.18 14:18:49<HMCa> that "hack"
31.05.18 14:19:15<HMCa> ...seeing the big picture yet?
31.05.18 14:19:19<HMCa> LONG CON
31.05.18 14:23:26<stoopkid> so he accidentally gives half the tokens to somebody claiming to be an exchange, they start selling them on the market, and then that's basically somebody getting half of all money in that market counterfeit for free and then buying other things with it at the current market price, right
31.05.18 14:25:03<stoopkid> did they ever track down the "hacker"?
31.05.18 14:27:29<stoopkid> why would you even be giving half the tokens to somebody that you didn't already know you could track down
31.05.18 14:31:26* HMCa shrugs... can we even know that he didn't send to himself?
31.05.18 14:32:25<HMCa> was there a "hacker" at all?
31.05.18 14:32:27<stoopkid> so really there's agoras tokens omni #35 (the one he gave to the "hacker"), idni.agrs omni #58 (the one that now doesn't have an exchange), and now there's open.agrs
31.05.18 14:35:42<HMCa> which is bottled
31.05.18 14:37:44<stoopkid> funny, he's got 3 we've got none XD
31.05.18 14:38:30<HMCa> money or ethics? ;-)
31.05.18 14:39:38<stoopkid> that's sad
31.05.18 14:40:27<HMCa> this is why we build. :-|
31.05.18 14:41:06<HMCa> we *can* fix society...
31.05.18 17:43:39*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
31.05.18 18:02:20*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
31.05.18 22:16:11*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
31.05.18 22:16:35*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01.06.18 11:53:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jljddrgzkjaqcnxi, stoopkid: stoopkid)
01.06.18 12:17:37<stoopkid> oh wow i just found out about agda's absurd pattern "()"
01.06.18 12:19:37<stoopkid> so you can use false-elim / principle-of-explosion to eliminate impossible cases, and you can use the absurd pattern () / principle-of-explosion when there aren't any cases to begin with (like pattern-matching on Fin 0)
01.06.18 12:20:22<stoopkid> Fin0-is-empty : Fin 0 -> _|_
01.06.18 12:20:27<stoopkid> Fin0-is-empty ()
01.06.18 13:44:35<HMCa> stoopkid: I'm sure that must have come up before
01.06.18 13:48:07<stoopkid> "()" has come up before but i don't think i ever learned that this is what it did
01.06.18 14:21:46*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
01.06.18 14:22:11*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
01.06.18 15:55:51*** Join: typlian5 (~PircBotX@185.185.69.118, (unauthenticated): adequatt)
01.06.18 16:05:48* HMCa looking over more recent redprl development
01.06.18 16:06:06<HMCa> looks almost ready for primetime, heh
02.06.18 02:14:48*** Join: randee (~textual@112.209.246.99, (unauthenticated): Textual User)
02.06.18 03:07:42*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
02.06.18 03:08:41<nilli> OK guys I fucken got it!  Obsession
02.06.18 03:09:49<nilli> the key is understanding obsession behavior
02.06.18 03:10:16<nilli> The mathematics of it then the logic
02.06.18 03:13:21<nilli> *obsession* is the key mechanism that allow for expressive language to exist on top a deterministic foundation
02.06.18 03:13:47<nilli> it is a correction mechanism
02.06.18 03:15:05<nilli> one fucken expensive method but the only one left as last resort to find the fix in the semantics
02.06.18 03:17:48<nilli> it also allow to bridge the gap between syntax and semantics, rules the the meaning it conveys
02.06.18 03:18:29<nilli> and it all start with axioms
02.06.18 03:20:58<nilli> axioms are a way to name the most fundamental objects using a rule. the simplest rule is equal (=)
02.06.18 03:21:30<nilli> in logic it will be *is* as naming
02.06.18 03:26:56<nilli> [21:45] <HMCa_> if i say "fwompermim." there probably is no a priori meaning to this [21:45] <nilli_> but is in our new world [21:46] <nilli_> have meaning I mean [21:46] <HMCa_> we call this an intent... contrast with if i say "ohad." and beforehand we agree that in our new lang this particular name refers to the real person we both know [21:46] <HMCa_> the latter is called an extension
02.06.18 03:27:39<nilli> [21:45] <HMCa_> if i say "fwompermim." there probably is no a priori meaning to this
02.06.18 03:28:44<nilli>  [21:45] <nilli_> but is in our new world [21:46] <nilli_> have meaning I mean [21:46] <HMCa_> we call this an intent... contrast with if i say "ohad." and beforehand we agree that in our new lang this particular name refers to the real person we both know [21:46] <HMCa_> the latter is called an extension
02.06.18 03:30:43<nilli> *I made a bit of a mess of the reference so let me make it beautiful again.
02.06.18 03:31:01<nilli>  [21:45] <HMCa_> if i say "fwompermim." there probably is no a priori meaning to this
02.06.18 03:31:38<nilli>  [21:45] <nilli_> but is in our new world [21:46] <nilli_> have meaning I mean [21:46]
02.06.18 03:32:12<nilli> [21:46] <HMCa_> we call this an intent... contrast with if i say "ohad." and beforehand we agree that in our new lang this particular name refers to the real person we both know
02.06.18 03:32:38<nilli> [21:46] <HMCa_> the latter is called an extension
02.06.18 03:32:46<nilli> ok!!! now
02.06.18 03:33:56<nilli> everything for me as nilli have a meaning as I experience it and am aware to it.
02.06.18 03:35:35*** Quit: randee (~textual@112.209.246.99) left #AutoNomic: Quit: Textual IRC Client: www.textualapp.com
02.06.18 03:38:34<nilli> but even that internal possess of what we call awareness requires referencing to past experiences
02.06.18 03:41:28<nilli> This "Extention" is a must to be able to construct any meaning to my consciousness. This "extension" is a state required to form awareness
02.06.18 03:44:37<nilli> our mathematics get around it by allowing and "axiomatic state of mind" When we do math know that we started it with some axiomatic terms and move on to form the full structure based on that.
02.06.18 03:45:05<nilli> In math we know what are the axioms the lay in the foundation of our structure
02.06.18 03:45:13<nilli> not so in life!!!!!!!
02.06.18 03:45:19<nilli>  and that is the key
02.06.18 03:48:36<nilli> we act mathematically, our brain is mathematical , awareness is mathematical but existence as a whole is not, we cant capture it and create its meaning by knowing the rules.
02.06.18 03:50:02<nilli> (by the way that is the proof the " world as out there" is not mathematical . but im not going to get into it now)
02.06.18 03:53:10<nilli> The process of building meaning involve creating axiomatic synonyms ....many at a very young age ...but also along the way
02.06.18 03:55:29<nilli> however >>>>>>> and that is the big "however" that explains it all : We Can Not be aware to these axioms as we create them.
02.06.18 03:56:03<nilli> unlike math in which we are an ousider
02.06.18 03:57:41<nilli> when we create our own meanings we do it as the same entity
02.06.18 03:58:04<nilli> we can not be aware to it since we are creating the foundation for awarness
02.06.18 03:58:18<nilli> the way around it is this
02.06.18 03:59:11<nilli> assuming the axioms as what we need to figure out of the complete structure
02.06.18 03:59:55<nilli> our existing mathematics are also lucking right here on the same point
02.06.18 04:00:52<nilli> and that was something I just figured out last week
02.06.18 04:00:58<nilli> what is 1
02.06.18 04:04:04<nilli> and then how the notion of 1 revers entropy which explains black holes and other things
02.06.18 04:04:21<nilli> but to our matter here....
02.06.18 04:05:40<nilli> awareness require repeating that process
02.06.18 04:06:21*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-169.dsl.bell.ca) left #AutoNomic: Ping timeout: 264 seconds
02.06.18 04:06:42<nilli> which survival , thus life requires too
02.06.18 04:08:48<nilli> and let me conclude that session (since I have to go) ,by saying the a modification of units of account to a means of living (money) is where the gap between mathematics and awareness materialized
02.06.18 04:09:23<nilli> Money express and thus teach us everything about our awareness.
02.06.18 04:09:53<nilli> and the path to artificial life and goes through the understanding of money
02.06.18 04:11:40*** Join: Deadhand (~deadhand@kntaon1614w-lp130-06-76-66-96-180.dsl.bell.ca, (unauthenticated): deadhand)
02.06.18 04:11:53<nilli> Satosh's missing link is rooted at understanding obsession. The logic of obsession.
02.06.18 04:12:30<nilli> we here at autonomic and the taus as as a whole have to do that too
02.06.18 04:13:07<nilli> and i will elaborate on that more very soon
02.06.18 04:16:21<nilli> *by the way regarding mathematics 1 is constructed out of 2 objects which in returns create the phrase 1 . thus 1 is actualy 1 square. if we want to express it on the number line... funny but true.
02.06.18 04:55:59*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
02.06.18 05:43:56*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jljddrgzkjaqcnxi) left #AutoNomic: Quit: Connection closed for inactivity
02.06.18 10:31:11*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ibgkixyxoksuddpf, stoopkid: stoopkid)
02.06.18 10:34:23<stoopkid> "<nilli> In math we know what are the axioms the lay in the foundation of our structure"
02.06.18 10:34:42<stoopkid> you'd think so, but it turns out to not actually be the case
02.06.18 10:35:47<stoopkid> iow, it seems math actually has more "life-like" aspects than you seem to be attributing to it
02.06.18 10:50:17<stoopkid> it's interesting that all that's needed to run every halting (program,input) pair is integer division
02.06.18 10:53:07<stoopkid> meaning, given any halting (program,input) pair, there exists integers k1, k2 (k2 != 0) such that the binary expansion of k1/k2 is the final value on the tape when program(input) halts
02.06.18 14:07:14<HMCa> "rational realization"
02.06.18 15:00:22<HMCa>  < stoopkid> iow, it seems math actually has more "life-like" aspects than you seem to be
02.06.18 15:00:25<HMCa>              attributing to it
02.06.18 15:01:27<HMCa> I would almost say: for any amount of "life-like attributes" that one can attribute, math actually has more such aspects
02.06.18 15:01:45<HMCa> ^ almost seems an extension of godel diag, HEH
02.06.18 15:04:03<HMCa> indeed it seems there must be more complex "life-like attributes" than we could even account for
02.06.18 15:06:43<HMCa> (particularly given that we, so far, exist and conceptualize only in a very small anthropic band which is very cold and very sparse compared to the majority of the information theoretic space in which our realty(/realities?) reside?)
02.06.18 15:07:00<HMCa> *reality
02.06.18 15:38:14<stoopkid> hrm...
02.06.18 15:38:51<stoopkid> i'm confused about something then; we can solve the halting problem in this restricted setting
02.06.18 15:40:54<stoopkid> iow: given two integers k1, k2, such that k2 !=0, we can determine whether or not the binary expansion is terminating or repeating
02.06.18 15:42:08<stoopkid> factor k1 & k2, cancel out common factors on top & bottom, check if k2 is a power of 2, if so it's halting
02.06.18 15:47:35<stoopkid> so this would imply that there's no turing-machine which computes the pair <k1,k2> (when it exists) from a given <program,input> pair without having either infinite loops or incorrect results for some inputs
03.06.18 01:32:25<HMCa> hrmm, not sure if i follow...
03.06.18 11:35:08<stoopkid> being able to translate arbitrary <turing-machine , input> pairs to pairs of integers <k1,k2> such that the binary expansion of k1/k2 matches the output tape of turing-machine(input), when such integers k1 & k2 exist, would imply a computable solution to the halting problem for turing-machines
03.06.18 11:35:56<stoopkid> for every halting <turing-machine, input> pair, there exists a pair of integers <k1,k2> such that the binary expansion of k1/k2 matches the output tape of turing-machine(input)
03.06.18 11:36:00*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03.06.18 11:36:24*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03.06.18 11:36:54<stoopkid> given an arbitrary pair of integers <k1,k2> we can compute, in finite time, whether the binary expansion of k1/k2 will be repeating or non-repeating (and thus halting)
03.06.18 11:43:27<stoopkid> so if we have a program P that takes pairs <M,x> as input where M is a description of a turing-machine, and x is a description of its input, and returns Just <k1,k2> if the binary expansion of k1/k2 matches the output of M(x), and Nothing otherwise, then for every pair <M,x> such that M(x) halts, P(<M,x>) would return Just <k1,k2> for some k1/k2 where the binary expansion of k1/k2 matches M(x), and by normalizing k1/k2
                 <stoopkid> (factoring out common terms in numerator and denominator) we could determine in finite time that the binary expansion is non-repeating i.e. halting (check if denominator is a power of 2; the smallest power that will work is the size of the output)
03.06.18 11:45:28<stoopkid> thus, the existence of any such program/machine P would (constructively) imply a solution to the halting problem for Turing-machines
03.06.18 11:47:03<stoopkid> so i conclude that P does not exist, unless we've all been fooled about the turing-computability of the turing-halting-problem somehow
03.06.18 11:49:07<stoopkid> (one thing i need to pay better attention to is that there's actually two distinct versions of the halting problem: 1) does M halt on x; 2) does M halt on all x )
03.06.18 11:50:34<stoopkid> (the standard uncomputability-of-halting-problem result is on version 1, so the 2nd version is "at least as uncomputable")
03.06.18 11:51:47<stoopkid> what's interesting about the binary expansions of rationals though is that all halting programs are actually represented, we only lose non-halting programs
03.06.18 12:03:13<stoopkid> but hrm, this is close to just saying "here's infinite bits of memory; all your halting programs are actually represented here, you just have to write the output bits into the memory"
03.06.18 14:03:21*** Join: cristian_ (558407ba@gateway/web/freenode/ip.85.132.7.186, (unauthenticated): 85.132.7.186 - http://webchat.freenode.net)
03.06.18 14:03:50<cristian_> hello
03.06.18 14:04:26<stoopkid> hi
03.06.18 14:05:59*** Quit: cristian_ (558407ba@gateway/web/freenode/ip.85.132.7.186) left #AutoNomic: Client Quit
03.06.18 14:06:33*** Join: gouyty (558407ba@gateway/web/freenode/ip.85.132.7.186, (unauthenticated): 85.132.7.186 - http://webchat.freenode.net)
03.06.18 14:06:51<gouyty> rt
03.06.18 14:07:02<gouyty> 'cgyh
03.06.18 14:07:11<gouyty> hoiyu::$%
03.06.18 14:11:34*** Quit: gouyty (558407ba@gateway/web/freenode/ip.85.132.7.186) left #AutoNomic: Ping timeout: 260 seconds
03.06.18 14:18:21<HMCa> cat walking on keyboard?
03.06.18 16:48:51<HMCa> stoopkid: redprl's extraction is fascinating fun
03.06.18 16:55:52<HMCa> let's just make a nice backend, rdfize redml, and build our tau on redprl. XD
03.06.18 16:56:56<HMCa> the more I learn about cubical the more I think we should adopt it, heh
03.06.18 16:57:19<stoopkid> https://blog.openledger.info/2018/06/
03.06.18 16:57:47<stoopkid> cubical works for me
03.06.18 16:59:25<HMCa> openledger drama, who would've thought
03.06.18 16:59:32<HMCa> heh heh
03.06.18 17:00:22<stoopkid> https://openledger.io/asset/RMBPAY/
03.06.18 17:00:55<stoopkid> this is the only asset that seems to have deposit/withdraw currently
03.06.18 17:00:58<HMCa> 404
03.06.18 17:12:06<HMCa> I want every programming language to have circle types now... XD
03.06.18 19:15:48*** Join: jibble__ (uid48680@gateway/web/irccloud.com/x-hewvgcfevofmczbb, (unauthenticated): bacon)
03.06.18 23:56:11*** Join: asaas (2eeb9b7d@gateway/web/freenode/ip.46.235.155.125, (unauthenticated): 46.235.155.125 - http://webchat.freenode.net)
04.06.18 00:18:38*** Quit: asaas (2eeb9b7d@gateway/web/freenode/ip.46.235.155.125) left #AutoNomic: Quit: Page closed
04.06.18 01:35:19*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
04.06.18 01:35:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.06.18 06:19:39*** Join: Deadhandd (~deadhand@kntaon1614w-lp130-06-76-66-96-180.dsl.bell.ca, (unauthenticated): deadhand)
04.06.18 06:20:33*** Netsplit: *.net *.split (Use /WL to see who left)
04.06.18 22:05:25*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Write error: Connection reset by peer
05.06.18 00:50:16<HMCa> kartaba's post is both hilarious and sad :-\
05.06.18 00:51:02<HMCa> openledger gave more details of the hack, they lost control of their godaddy account
05.06.18 00:51:37<HMCa> all "open." assets are now temporarily frozen entirely
05.06.18 00:52:03<HMCa> (so for agrs, little has changed, heh)
05.06.18 00:55:41<stoopkid> oh wow
05.06.18 01:00:04<stoopkid> you know what he's referring to with "market manipulation" ?
05.06.18 01:00:39<HMCa> what ohad refers to?
05.06.18 01:01:30<stoopkid> what kartaba is referring to "him" (presumably ohad) referring to
05.06.18 01:01:51<HMCa> do yoy know the cliche "pot, kettle"?
05.06.18 01:01:54<HMCa> HEH
05.06.18 01:03:23<stoopkid> yea but idk what pot is accusing what kettle of what
05.06.18 01:03:55<HMCa> ohad talked about the rampant fraudulent ICOs based on nothing but hype and frontmen since the day I met him
05.06.18 01:04:21<stoopkid> ah
05.06.18 01:04:33<HMCa> ... oh the cast irony
05.06.18 01:04:47<HMCa> (see, its a pot/kettle pun)
05.06.18 01:04:56<stoopkid> :)
05.06.18 01:05:12<HMCa> :-)
05.06.18 01:05:17<HMCa> anyway
05.06.18 01:05:22<HMCa> how's it going?
                 <stoopkid> ah i see, so he says that about EOS?
05.06.18 01:05:46<HMCa> yes, and also almost everything.
05.06.18 01:06:57<stoopkid> i'm doing ok, a bit out of it lately so i'm trying to learn about these things called "nutrients"
05.06.18 01:08:10<stoopkid> makes me realize i need to hurry up with my reasoners :)
05.06.18 01:08:41<HMCa> I'm also known to be pretty harsh on alt chains, but... at least I do research and can back my positions with justifications in facts
05.06.18 01:09:11<HMCa> where ohad just defaults to naysaying and expects someone else to prove otherwise (somehow?)
05.06.18 01:10:31<HMCa> yah, over the past year especially I've come to realize what a mess "nutrition science" has become
05.06.18 01:11:00<HMCa> almost more disinformation campaigning there than in contemporary western politics... XD
05.06.18 01:12:03<stoopkid> apparently i'm prediabetic and so is like pretty much everybody i know
05.06.18 01:13:00<HMCa> oh, hey, I'm monitored for that now... its' a risk w/ all my fun new autoimmune BS, apparently... :-\
05.06.18 01:13:29<HMCa> *it's
05.06.18 01:13:53<HMCa> (the process makes me feel old... heh)
05.06.18 01:14:26<stoopkid> apparently i just need to not constantly eat sugar and it'll improve
05.06.18 01:14:53<HMCa> lucky... apparently I'm probably just doomed. :-|
05.06.18 01:16:22<stoopkid> hopefully not; have you cut out simple carbs?
05.06.18 01:18:45<HMCa> mostly, but in my case that will only slow the development
05.06.18 01:20:56<HMCa> apparently if I live long enough I just *will* be type 1 eventually
05.06.18 01:22:09<stoopkid> sorry to hear that :/
05.06.18 01:22:17<HMCa> and am at a significantly increased risk to become type 2
05.06.18 01:22:54<HMCa> there's a whole list of "eventually"s and "possibly"s that they'll be watching me for
05.06.18 01:23:16<stoopkid> so the autoimmune disorder is affecting your pancreatic beta-cells?
05.06.18 01:23:46<HMCa> interestingly, there's ongoing debate about which list cancer actually belongs on. :-\
05.06.18 01:24:59<HMCa> yes, in fact there's direct overlap in the relevent genetics that determine those pathway interactions
05.06.18 01:26:12<HMCa> interestingly it seems to be linked both ways, 10% of type 1 diabetics later develop wheat responses
05.06.18 01:49:33<HMCa> so, yah, at this point it will probably be food that does me in.  More irony.
05.06.18 01:53:51<HMCa> in less depressing news... I'm playing with DRTs in redprl some
05.06.18 01:56:05<HMCa> the interplay of higher dimensional types and DRTs is kinda fascinating... I find myself actually caring about the universe hierarchy instead of just defaulting everything to polymorphism, heh
05.06.18 01:57:34<HMCa> I'm also still increasingly impressed with the extraction, I've yet to find any real caveats with it
05.06.18 01:58:02<HMCa> (but then again I guess that is kinda "the point" wrt computational cubical tt, in the first place?)
05.06.18 01:58:27<HMCa> ("constructive univalence for free")
05.06.18 02:00:49<HMCa> I think I also finally have a proper understanding of contractible path equalities, and why univalence implies funext out of it
05.06.18 02:04:49<HMCa> working in the language itself feels somehow like either the best of coq and idris, together... or the worst od coq and idris together, from moment to moment... XD
05.06.18 02:06:46<stoopkid> hrm, i still don't know enough about this
05.06.18 02:06:53* stoopkid installing redprl
05.06.18 02:07:00<HMCa> if i had to pick a top "wishlist" item for it, it'd either be more of idris' systemsy stuff, more of coq's interactivity and ui/ux... or less of idris' verbosity/tedium or less of coq-like "scripty" proof style... XD
05.06.18 02:07:50<HMCa> (although iirc you really took well to galina stuffs, so maybe it'll hit a sweet spot for you? heh)
05.06.18 02:08:14<HMCa> install the vim plugins!!!
05.06.18 02:08:57<HMCa> and I'd read the examples under tests dir before the examples under examples dir, heh...
05.06.18 02:10:46<HMCa> (I hear they're planning more improvements to docs, which'll be good because i'm often finding myself digging through the sml code for details on syntax, term handling, etc... heh)
05.06.18 02:12:39<HMCa> the syntax is impressively "lightweight" imo
05.06.18 02:13:57<HMCa> makes the agda parser impl seem downright cruel. :-D
05.06.18 02:14:29<stoopkid> hrm, having trouble installing mlton
05.06.18 02:15:04<HMCa> from source or distro package?
05.06.18 02:15:38<stoopkid> source
05.06.18 02:15:52<HMCa> hrmm, where does it fail?
05.06.18 02:15:53<HMCa> brb
05.06.18 02:28:46<stoopkid> ah im missing the gmp
05.06.18 02:30:17<HMCa> back
05.06.18 02:37:07<HMCa> any luck?
05.06.18 03:34:24<stoopkid> yep got it installed
05.06.18 03:36:24*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
05.06.18 03:37:58<HMCa> stoopkid: awesome
05.06.18 03:38:32<HMCa> you probably have questions, I can probably only answer some
05.06.18 03:38:34<HMCa> heh
05.06.18 03:40:56<nilli> hey,  I came to ask about some tau-like thing that I saw and get into that conversation ....you guys..... I need to talk to you now about things I really know.. health issues.
05.06.18 03:41:31<nilli> anyway HMC how do I respond on pm its not letting me
05.06.18 03:42:08<HMCa> "not letting you"?
05.06.18 03:42:51<HMCa> software shoukd only ever do what we agree to let it... certainly not the other way around :-)
05.06.18 03:43:10<HMCa> where's dmiles when we need him?  Again, some irony.  :-)
05.06.18 03:44:20<HMCa> stoopkid: probably one of the first things that will jump out is the extra argument option for the universe constructor
05.06.18 03:45:36<nilli> OK I am not a good friend with software they drive me insane. all seems personal with  on my end (kind of the world is turning against me. every time the smallest thing is not working)
05.06.18 03:46:49<HMCa> this basically constrains how the object's cube diagram composes, like if it is just pointwise (default) or kan complete, etc
05.06.18 03:47:05<nilli> I go to message and type. when "enter" I get that[ 10:38] Can't use this command in this window
05.06.18 03:47:22<HMCa> what irc client?
05.06.18 03:47:42<HMCa> you can always type /msg hmca whatever
05.06.18 03:47:45<HMCa> each time
05.06.18 03:47:54<HMCa> but it gets tedious
05.06.18 03:47:56<nilli> yes, do I have to open a new tab?
05.06.18 03:48:28<HMCa> should be able to type that anywhere in any sane irc client, imo. :-)
05.06.18 03:49:04<HMCa> i gtg in about 10 min
05.06.18 03:53:27<nilli> HMCa did you see me messages in bitcointalk?
05.06.18 03:54:09<HMCa> I saw that you sent messages, but not yet the messages
05.06.18 04:49:40<nilli> https://www.youtube.com/watch?v=84e03z2MYVw&feature=youtu.be is that rea;ly another tau-like efforts as Danna Edwards think?
05.06.18 05:29:24*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
05.06.18 06:16:06*** Join: nilli (4d7c11e4@gateway/web/freenode/ip.77.124.17.228, (unauthenticated): 77.124.17.228 - http://webchat.freenode.net)
05.06.18 08:43:04*** Quit: nilli (4d7c11e4@gateway/web/freenode/ip.77.124.17.228) left #AutoNomic: Ping timeout: 260 seconds
05.06.18 09:37:00*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
05.06.18 10:58:24*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
05.06.18 13:38:06<HMCa> nilli: what exactly is supposed to be "tau like" about it?
05.06.18 14:28:09<HMCa> I'm learning a bit more about the redprl refiner scripting now
05.06.18 14:29:01<HMCa> being able to just "print blah;" anywhere mid-script is proving handy, I wish idris had similar but understand why it would be kinda problematic there, heh
05.06.18 14:29:45<HMCa> otoh, i miss agda/idris' repls a lot, heh
05.06.18 16:40:02*** Join: nilli (4d7c11e4@gateway/web/freenode/ip.77.124.17.228, (unauthenticated): 77.124.17.228 - http://webchat.freenode.net)
05.06.18 16:44:35<HMCa> :38 < HMCa> nilli: what exactly is supposed to be "tau like" about it?
05.06.18 16:50:35<nilli> I was wondering too , if its the fact that is using human language enough to make it like tau... I dont think they say anything about  the protocol changing rules being on the blockchain
05.06.18 16:51:14<nilli> lol ... just wondering about the competition
05.06.18 16:53:01<nilli> HMCa I had a long hangout chat with  stoopkid.... . :)
05.06.18 17:00:08<HMCa> he mentioned it
05.06.18 17:07:04*** Quit: nilli (4d7c11e4@gateway/web/freenode/ip.77.124.17.228) left #AutoNomic: Ping timeout: 260 seconds
05.06.18 17:07:07<HMCa> so these sparky guys basically show you the catch(es) right up front
05.06.18 17:07:28*** Join: nilli (57465f0e@gateway/web/freenode/ip.87.70.95.14, (unauthenticated): 87.70.95.14 - http://webchat.freenode.net)
05.06.18 17:07:39<HMCa> :07 -!- nilli [4d7c11e4@gateway/web/freenode/ip.77.124.17.228] has quit [Ping timeout: 260 seconds]
05.06.18 17:07:42<HMCa> :07 < HMCa> so these sparky guys basically show you the catch(es) right up front
05.06.18 17:07:45<HMCa> :07 -!- nilli [57465f0e@gateway/web/freenode/ip.87.70.95.14] has joined #AutoNomic
05.06.18 17:08:08<HMCa> at the bottom of their ann post, it basically reads "Hi, we'd like to be your friendly neighborhood CA."
05.06.18 17:08:41<HMCa> and in the video he all but says "yah we're just ripple with a gimmick or two"
05.06.18 17:08:51<HMCa> "just natlang" is not interesting
05.06.18 17:09:10<HMCa> i can give you a plain english programming language on top of eth or btc, too
05.06.18 17:09:24<HMCa> "surface syntax" is always red herring
05.06.18 17:12:17<nilli> ok
05.06.18 17:12:41<nilli> what you think of cardano?
05.06.18 17:16:02<HMCa> well, which aspect?
05.06.18 17:17:47<HMCa> last i saw it was still not one comprehensive system... do thy have any useful implementation of any of their theory yet?  Can you point me to code for a live nipopow chain or something yet?
05.06.18 17:20:02<HMCa> kinda "feels" maidsafeish in some ways, heh... they have most of a useful theory but not enough of that is made functional enough to be very useful
05.06.18 17:20:13<HMCa> (sounds familiar?)
05.06.18 17:20:36<nilli> well...can i point you out to a code of tau or autonomic
05.06.18 17:20:54<nilli> working
05.06.18 17:21:01<nilli> code
05.06.18 17:22:12<HMCa> as one comprehensive system? ofc not, only our reasoner prototype and our research work
05.06.18 17:22:44<HMCa> but otoh we don't have some ico token thing going
05.06.18 17:24:12<nilli> which also means that you (we) dont have millions to work with in order to reach our goal
05.06.18 17:24:45<HMCa> we don't claim any utility or even any promise of utility, esp in exchange for money. :-|
05.06.18 17:24:47<HMCa> heh
05.06.18 17:25:22<HMCa> we only claim to agree to work to build, as a gift.
05.06.18 17:26:20<HMCa> we offer no investment vehicle, no returns, no particular promise of ultimate outcomes
05.06.18 17:26:46<nilli> but can you "afford" it. working as a gift. is it at all possible or even right in terms of the economics?
05.06.18 17:27:41<HMCa> me, personally?
05.06.18 17:27:48<HMCa> apparently, so far. :-)
05.06.18 17:28:46<nilli> I dont do it as a gift....I dont think humanity earned it form me
05.06.18 17:29:34<HMCa> to "build te right thing" it *must* be built as a gift. :-|
05.06.18 17:30:24<HMCa> this is more or less the "initial premise" of the thing
05.06.18 17:30:55<nilli> personally I would only gift people on a very personal level. and even then I  do the accounting (only that I know to account for things others takes for grunted)
05.06.18 17:31:08<HMCa> its' creation must be observable as being maximally unbiased
05.06.18 17:31:14<nilli> I would do things if they interest me enough as my art do
05.06.18 17:32:04<nilli> do feel that you gift someone by making you art? I dont! I do it for myself to survive
05.06.18 17:32:48<nilli> not financially
05.06.18 17:33:00<HMCa> I do more art than just this.  This particular art simply has to be done this particular way - it is a criteria of the performance itself
05.06.18 17:33:13<HMCa> first stage direction in the thing, even. ;-)
05.06.18 17:35:01<nilli> that the thing, I can see the effort as an artistic effort , which includes communicating it, but not giving as a gift
05.06.18 17:35:47<HMCa> stoopkid: side note, mostly o.t. - maybe nilli should learn redprl with us?
05.06.18 17:36:03<HMCa> heh
05.06.18 17:36:37<HMCa> nilli: to communicate the right thing means to do the communicatiin as a gift. :-|
05.06.18 17:36:49<HMCa> *communication
05.06.18 17:37:52<HMCa> if we were to, for example, ICO it up, or accept corporate sponsors, or even "form a pre-genesis panel" we would suddenly be building something *else*
05.06.18 17:38:32<HMCa> doing a different performance, and leaving behind a different artifact
05.06.18 17:41:43<nilli> I get your thing about involving a token in the creation of aotonomic but lets take it apart for a moment
05.06.18 17:41:59<HMCa> I'll generalize:
05.06.18 17:42:05<nilli> eventually you see the chain evolving based on POW
05.06.18 17:42:12<nilli> no tokens but work
05.06.18 17:42:28<nilli> and incetives other then tokens
05.06.18 17:43:11<nilli> incentives
                 <HMCa> at genesis it should be the case that anyone who studies it and comes to understand it can also more or less "just know" by having come to understand it that it is "obviously the right thing constructed in the right way"
05.06.18 17:43:46<HMCa> iow there should be virtually no objections to even possibly be able to be raised
05.06.18 17:44:58<HMCa> anyone who "fully looks at it" should be able to find no reason for concern of adopting it, participating...
05.06.18 17:45:52<HMCa> it should be "obviously fair at the core"
05.06.18 17:46:06<HMCa> "maximally unbiased"
05.06.18 17:46:25<HMCa> both in what it is, and in how it came to be
05.06.18 17:46:46<nilli> but adopting it means investing in it, (runing the code)
05.06.18 17:46:52<HMCa> sure
05.06.18 17:46:57<HMCa> exactly why...
05.06.18 17:46:58<nilli> where is the reword then?
05.06.18 17:47:16<nilli> being part of the cool guys? :)
05.06.18 17:47:59<nilli> its a reword but is it enough?
05.06.18 17:48:01<HMCa> we cannot say because we cannot know yet
05.06.18 17:48:06<HMCa> 6 < HMCa> we offer no investment vehicle, no returns, no particular promise of ultimate outcomes
05.06.18 17:48:23<HMCa> we can only assert that there will be outcomes.
05.06.18 17:49:09<HMCa> (productivity+totality+selfincentivization.... it *will* cover *some* search space of outcome reward models)
05.06.18 17:49:47<HMCa> (we can only assert that it will be a nomic game with potebtial prize, not what nomic in particular it will be.)
05.06.18 17:49:54<HMCa> *potential
05.06.18 17:51:18<HMCa> we could theorize some, but we mostly just don't - also so as to minimize potential bias
05.06.18 17:55:00<nilli> we sell the means to create your own reality  through convincing others that it is the truth
05.06.18 17:55:50<nilli> in other words you are investing in creating and communicating your reality
05.06.18 17:56:29<nilli> that worth a lot .
05.06.18 17:58:30<nilli> I dont know how fair it is. fair need to be insentevised
05.06.18 17:58:58<HMCa> well, we don't "sell" anything at all
05.06.18 17:59:48<HMCa> all we do is refine a protocol proposal
05.06.18 18:01:59*** Join: nilli_ (4d7e382d@gateway/web/freenode/ip.77.126.56.45, (unauthenticated): 77.126.56.45 - http://webchat.freenode.net)
05.06.18 18:03:04*** Quit: nilli (57465f0e@gateway/web/freenode/ip.87.70.95.14) left #AutoNomic: Ping timeout: 260 seconds
05.06.18 18:03:19<nilli_> but if someone have to learn it an run it its like buying in terms of investement
05.06.18 18:04:16<nilli_> way to run autonomic if I can run a protocol that reword me with tokens?
05.06.18 18:04:22<nilli_> why
05.06.18 18:05:32<HMCa> mostly what people will be "learning and running" (/"investing in") will be different particular contexts
05.06.18 18:07:08<HMCa> not as much so the core of the system itself (esp wrt learning it - far more will simply run it... for a parallel how many btc users do you know who can explain btc's particular packed bignum representation?)
05.06.18 18:18:28<nilli_> you think that bitcoin would have survived as a decentralized messaging system without the tokens?
05.06.18 18:23:06<nilli_> in a way what you suggest for autonomic is a decentralized game system (decentelized nomic game) . you want to play then pay for it
05.06.18 18:26:22<nilli_> it is really really funny put that way....in summer 2012 I was asked how the next revolution will look like and I said that we will play it as a game,
05.06.18 18:27:16<nilli_> once we agree in the games rules we will then be able to agree that these rules are the new rules we will use in real life
05.06.18 18:28:46<nilli_> (it was 1 year before I found out about bitcoin)
05.06.18 18:31:58<HMCa> i do not think that bitcoin would have survived with *some* incentivization of contribution of security resources
05.06.18 18:32:24<HMCa> *without
05.06.18 18:35:44<nilli_> https://www.youtube.com/watch?v=iFSv-YO70SU this is me explaining it ,how you do revolution in the age of democracy. play games on the internet and test new rules there to apply in real life .
05.06.18 18:37:03<nilli_> democracy I realized then is really a problem for revolution... but then came bitcoin
05.06.18 18:43:12<nilli_> So HMCa. why you think autonomic can survive without incentivization (assuming it can be built based on good will), how is it better then bitcoin?
05.06.18 18:55:03<nilli_> anyway being more practical I was thinking of a way to get the agoras token work for us, but I dont think that its actualy possible, not if you want to make your point realy clear
05.06.18 18:56:28<nilli_> the fact that its going to be used by an app on the blockchain is not going to be clear enough
05.06.18 18:57:49<nilli_> I had some ideas regarding that but it will only make the connection between the token and the platform stronger . even of its not used to fuel the platform only the app
05.06.18 19:02:26<HMCa> I've never said that I think it can survive without incentivization... much the opposite
05.06.18 19:04:46<HMCa> I assert that it *must* self-incentivize.  However that does not necessitate a "direct token" model.  Satoshi's example was just one particular specific example, and it happens to be a direct token.
05.06.18 19:14:13<nilli_> HMCa regarding the development, do you want to figure out a way to do it in terms of the agora tokens or you want to count on it developed as a gift. ?
05.06.18 19:14:35<nilli_> since right now they cant be used as as
05.06.18 19:14:47<nilli_> the agora tokens I mean
05.06.18 19:15:09<HMCa> as i understand it, right now they cannot really even be priced
05.06.18 19:15:22<HMCa> so what good are they to anyone?
05.06.18 19:16:34<HMCa> as I understand t there are now three distinct kinds of agrs tokens, and none of them can be said to have any value...
05.06.18 19:16:45<HMCa> am I incorrect?
05.06.18 19:17:33* HMCa brb
05.06.18 19:18:43<HMCa> maybe 15-20 min
05.06.18 19:20:48<nilli_> not totaly correct.. the fact that they are not traded is a problem but if the developer is going to do the development it will be worth something real
05.06.18 19:23:22<HMCa> but what is it worth right now, if we don't make any random assumptions about the future potential behaviors of a single man?
05.06.18 19:24:21* HMCa stil afk, heh
05.06.18 19:24:24<nilli_> the thing to ask is what it worth for us now if we need it now
05.06.18 19:24:38<HMCa> $0 it seems
05.06.18 19:24:57<nilli_> and the answer is "the community"
05.06.18 19:27:45<nilli_> the community of agoras investors can benefit from autonomic and autonomic can benefit from being able to trade the agoras tokens on the omni dex
05.06.18 19:30:13<nilli_> but its involving taking some more active actions.. I explained it in general to stoopkid and thought to write it more clear in email to him so he can talk it over with you.
05.06.18 20:09:14<HMCa> "the omni dex"?
05.06.18 20:09:31<HMCa> what is the agrs spot price there right now?
05.06.18 20:09:32<HMCa> XD
05.06.18 20:13:33<HMCa> let's not bank on hypotheticals and "could-be"s
05.06.18 20:14:04<HMCa> the cold fact is that you cannot get actual monies for agrs tokens right now
05.06.18 20:14:50<HMCa> iow they are apparently valueless, and a valueless currency is of no use to anyone.
05.06.18 21:32:40<stoopkid> nilli_: unfortunately i mostly agree with HMCa on this
05.06.18 21:33:44<stoopkid> omni metadex did come back online today but idk if any agoras have ever traded there at all, or what the limitations are, if any
05.06.18 21:36:33<stoopkid> if the value is the exchange rate then it's effectively $0 right now, and i'm not aware of any reason to assume (as opposed to just hope) that this will change
05.06.18 21:38:16<stoopkid> there's the option you talked about with making another omni token and allowing to exchange 1:1 for people who want to exit the tau/agoras venture but recover whatever they can regarding exchange value, potential future value, and community, but..
05.06.18 21:39:27<stoopkid> i'm not sure we'd be able to recover exchange value without giving some promise of potential future value, and these days apparently that would be called fraud according to the SEC or something, so..
05.06.18 21:51:10<HMCa> I'm still unclear on why we should even really want to
05.06.18 21:55:38<stoopkid> "want to" do which aspect of it: decouple the token from ohad? keep whatever's left of the agoras community from getting disillusioned? get a token backed by a community using it back onto exchanges so that they can actually have exchange value?  back up the value of that token with promises of hypothetical future better tokens?
05.06.18 21:55:43<stoopkid> all of the above?
05.06.18 21:59:04<stoopkid> nilli_: the ideal would be that we just make autonomic and then we have autonomic
05.06.18 21:59:44<stoopkid> unfortunately i'm still a few research steps away from that.. and many more development steps
05.06.18 22:04:05<stoopkid> side-note, wrt ohad's choices of proof framework: show me any math/programming he's ever done in any of them
05.06.18 22:09:44<HMCa> ^ this
05.06.18 22:10:03<HMCa> what was invested in?
05.06.18 22:10:07<HMCa> and why?
05.06.18 22:10:33<HMCa> ohads ico was always about ohad
05.06.18 22:10:42<HMCa> never about our work
05.06.18 22:13:20<stoopkid> it's ironic cause afaict this is the easiest predictor of a problematic financial asset: its definition changes arbitrarily
05.06.18 22:15:53<HMCa> our definition of the construct is still the same oldtau. XD
05.06.18 22:17:36<stoopkid> mostly anyway, but even if we had changed plans in any major way we're not changing the definition of some financial asset that people are invested in along with it
05.06.18 22:19:19*** Join: suiqiublockchain (~suiqiublo@180.162.47.135, (unauthenticated): realname)
05.06.18 22:42:33<HMCa> suiqiublockchain: wb
05.06.18 22:49:15<stoopkid> http://eulergui.sourceforge.net/n3_rules_good_practices.html
05.06.18 22:49:35<stoopkid> "?SCOPE, ?SPAN ??????????????????????"
05.06.18 22:56:28<stoopkid> so, solution-list basically represents a second-order variable
05.06.18 23:04:46<HMCa> sort of, it isn't really a true second order though
05.06.18 23:08:17<stoopkid> hrm, what is it then exactly
05.06.18 23:08:32<stoopkid> https://www2.cs.arizona.edu/~collberg/Teaching/372/2007/Html/Html-26/index.html
05.06.18 23:23:51*** Quit: jibble__ (uid48680@gateway/web/irccloud.com/x-hewvgcfevofmczbb) left #AutoNomic: Quit: Connection closed for inactivity
05.06.18 23:49:07<stoopkid> hrm, i just realized we can pass around a query-formula list and give it to findall..,
05.06.18 23:49:40<stoopkid> so that's how we pass it functions to run and get higher-order functions
05.06.18 23:49:54<stoopkid> functions to run / triple-lists to query
05.06.18 23:51:06<stoopkid> hrm..
06.06.18 00:12:21<nilli_>  [04:59] <stoopkid> nilli_: the ideal would be that we just make autonomic and then we have autonomic
06.06.18 00:15:47<nilli_> ok lets just do that. forget agoras and the oldtau for now.
06.06.18 00:23:41<stoopkid> alright. i've been stuck on some of the representation of MLTT in RDF, this is kinda what's holding me up in getting any concrete tasks for herodust to work on, we've got the collection of things that have been done and the collection of things that i don't yet know exactly how to do :)
06.06.18 00:34:06<stoopkid> so, MLTT is usually expressed in either what's called natural deduction or sequent calculus
06.06.18 00:34:17<stoopkid> https://en.wikipedia.org/wiki/Natural_deduction
06.06.18 00:34:53<stoopkid> (that page is actually a good place to start for learning logic, especially the kind of logic we do for autonomic)
06.06.18 00:36:20<stoopkid> n3logic is the RDF-based semantic-web framework that's supposed to give an inferencing system that can be used to implement natural-deduction proof-search
06.06.18 00:37:40<stoopkid> this is where we have the triples & inferencing stuff like "Socrates a man. {?x a man} => {?x a mortal}"
06.06.18 00:38:22<stoopkid> these are basically axioms & inference rules like they talk about on that page on natural deduction
06.06.18 00:39:51<stoopkid> MLTT is expressed with these axioms & inference rules also (they have a whole section about type theory on that wiki page), so like:
06.06.18 00:40:15<stoopkid> {?A. ?B} => {?A AND ?B}
06.06.18 00:40:21<stoopkid> {?A} => {?A OR ?B}
06.06.18 00:40:32<stoopkid> {?B} => {?A OR ?B}
06.06.18 00:44:58<stoopkid> i haven't succeeded in understanding all the aspects of the translation yet though
06.06.18 01:07:09*** Quit: nilli_ (4d7e382d@gateway/web/freenode/ip.77.126.56.45) left #AutoNomic: Ping timeout: 260 seconds
06.06.18 02:13:07*** Quit: suiqiublockchain (~suiqiublo@180.162.47.135) left #AutoNomic: Quit: Leaving
06.06.18 03:31:35*** Join: suiqiublockchain (~suiqiublo@180.162.47.135, (unauthenticated): realname)
06.06.18 04:23:16*** Quit: suiqiublockchain (~suiqiublo@180.162.47.135) left #AutoNomic: Quit: Leaving
06.06.18 10:10:51*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
06.06.18 10:11:18*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.06.18 11:55:09*** Connecting...
06.06.18 11:55:19-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
06.06.18 11:55:25*** [sasl.login from editable-koo (user@167.88.171.233)] sirdancealot
                 *** SASL: You are now logged in as sirdancealot.
                 *** SASL authentication successful
06.06.18 11:55:28*** Mode change: +Zi on editable-koo by editable-koo (server)
06.06.18 11:55:39*** Join: editable-koo (~user@167.88.171.233, sirdancealot: user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 4 months 10 days 17 hours 44 minutes 53 seconds ago
06.06.18 11:55:40*** Names: editable-koo daemoz Deadhandd stoopkid typlian5 koo5[m] genuinelyfx[m] lexxus[m] @ChanServ HMCa cantora Tamara_ vbmithr
                 *** End of /NAMES list.
06.06.18 11:55:51-ChanServ- [#mycroft] "Artificial intelligence for everyone"
07.06.18 00:24:32<HMCa> stoopkid: it is an extralogical level breaker, so it "can" behave much like (henkin) second order, but doesn't always
07.06.18 00:24:58<HMCa> esp when you consider scope/span which can constrain the subquery search
07.06.18 00:26:53<HMCa> :34 < stoopkid> so, MLTT is usually expressed in either what's called natural deduction or sequent calculus
07.06.18 00:27:19<HMCa> or in the (unusual?) case of redprl, apparently both... heh
07.06.18 00:27:52<HMCa> they formalize with deduction but implement with sequents
07.06.18 00:30:09<HMCa> so I'm getting an itch to port a bunch of the cubicaltt prelude/examples to redprl
07.06.18 00:31:08<HMCa> I'm not sure which itch to scratch first - that or a backend extracts compiler
07.06.18 03:17:32*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
07.06.18 06:19:10*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
07.06.18 06:20:39<nilli> https://bitcointalk.org/index.php?topic=950309.new#new
07.06.18 06:21:59<nilli> stoopkid, im still reading your mail. very interesting but got to stop and to the above. will get back to you in details later on
07.06.18 06:22:57<nilli> and do
07.06.18 06:27:40*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
07.06.18 11:36:54*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
07.06.18 11:37:42<nilli> https://bitcointalk.org/index.php?topic=950309.msg39572695#msg39572695
07.06.18 11:42:09<stoopkid> yep
07.06.18 11:42:20<stoopkid> i like how Eventine's response has absolutely nothing to do with the problem
07.06.18 11:44:18<stoopkid> https://openledger.io/asset/AGRS/
07.06.18 11:44:53<stoopkid> https://openledger.io/deposit-withdraw/
07.06.18 11:46:21<stoopkid> "The maintenance lately have affected most of the coins on there, especially the OMNI assets (which AGRS is one of) and have nothing to do with Ohad or the team. It is entirely related to the exchange itself."
07.06.18 11:46:43<stoopkid> mhm
07.06.18 11:47:34<stoopkid> so why exactly are we being instructed to use openledger's version of the asset when it's been ~2 months since you could deposit/withdraw from the exchange?
07.06.18 11:47:57<stoopkid> "AGRS has been traded on Openledger since 2016. Ohad certainly didn't just create another token."
07.06.18 11:48:08<stoopkid> might not be his intention but it's effectively the result
07.06.18 11:48:56<stoopkid> when Openledger shut down their exchange gateway and the Tau team kept pushing Openledger's version of Agoras, then... effectively that's creating another token
07.06.18 11:49:27<stoopkid> either they're scamming or they don't even know what their asset "is"
07.06.18 11:49:33<stoopkid> neither alternative is very good...
07.06.18 11:53:15<stoopkid> Eventine on June 6th: Openledger recently faced a DNS attack, please only use https://wallet.bitshares.org to trade AGRS and not any other gateways
07.06.18 11:53:25<stoopkid> ok let's try it: https://wallet.bitshares.org/#/explorer/assets
07.06.18 11:53:48<stoopkid> appears under User Issued Assets as "OPEN.AGRS" oh wait that's the same openledger asset that doesn't work
07.06.18 11:55:01<stoopkid> SimpleMan on June 1st: "Also keep in mind that Openledger is actually not fully decentralized due to their redeemable OPEN tokens and coins. Same counterparty risk as with other exchanges."
07.06.18 11:55:07<stoopkid> actually not redeemable
07.06.18 11:55:53<stoopkid> Foerster: "Well, Agoras is being traded on Openledger (https://cryptofresh.com/a/OPEN.AGRS) "
07.06.18 11:56:02<stoopkid> right, open.agrs is
07.06.18 11:56:46<stoopkid> (or was, apparently even that's having problems now)
07.06.18 11:57:49<stoopkid> Foerster: May 14th "It's possible to buy on Openledger decentralized exchange, but the current markets there are rather shallow:
                 <stoopkid> Here an overview: https://cryptofresh.com/a/OPEN.AGRS_BTS
                 <stoopkid> And here the exchange: https://openledger.io"
07.06.18 11:58:57<stoopkid> bronepoezd April 30: "Hello! Where can I trade Agoras? What exchange?"
07.06.18 11:59:28<stoopkid> logan4444 later that day "hello,,in openledger...https://openledger.io/market/AGRS_BTC ..or https://openledger.io/market/OPEN.AGRS_BTS ...."
07.06.18 12:00:30<stoopkid> oh wait: https://blog.openledger.info/2018/04/10/omni-usdt-agrs-eurt-amp-and-maid-gateways-are-temporarily-disabled/
07.06.18 12:01:11<stoopkid> turns out everything they say about buying agrs on openledger/bitshares has been false since April 10th
07.06.18 12:02:11<stoopkid> so, ever since April 10th they've been completely misrepresenting their asset (actually misrepresenting both IDNI Agoras #58 as well as the openledger asset OPEN.AGRS)
07.06.18 12:02:46<stoopkid> either they're doing it on purpose, aka fraud, or they're doing it by accident, aka incompetence
07.06.18 12:08:31<stoopkid> here's a question: based on the information they've provided you, are you able to buy/sell OMNI #58 IDNI Agoras on bitshares or any other market?
07.06.18 12:16:48<HMCa> eventine is correct that ohad did not himself (as far as we know, anyway?) have involvement to create the third token
07.06.18 12:16:57<HMCa> (he might've, tho, heh)
07.06.18 12:17:14<HMCa> but basically everything else in his post is incorrect. :-|
07.06.18 12:18:56<HMCa> and given that ohad and his "team" (I use the word *loosely* here) pushed (and push) open.agrs as an equivalence to the omni token, I am not sure if it is really meaningful if they created the third token or not... they are certainly *representing* that third token as the backed asset
07.06.18 12:19:47<HMCa> I am really amazed that anyone could understand the situation and *not* percieve it as fraud. :-|
07.06.18 12:20:16<HMCa> *perceive
07.06.18 12:23:18<HMCa> as a side note, I am pretty sure the agrs token was actually made non-transferrable with the open.agrs token well before april
07.06.18 12:24:44<HMCa> but can't (atm) seem to find any sort of official information on that (anyone know how to walk bitshares blockchain history for such data?  I don't even recall if such details get authenticated into their ledger, offhand)
07.06.18 12:28:13<HMCa> anyway... in other news, I've decided to go ahead with porting some cubicaltt stuff (etc) into redprl
07.06.18 12:28:41<HMCa> so far just some very basic stuff (lists, the maybe monad, etc)
07.06.18 12:29:45<HMCa> it has made me *really* want a more interactive interface, like a repl or gui frontend
07.06.18 12:34:13<HMCa> but I must say many of the linguistic choices are (imo) quite excellent... the 3 distinct simple languages and the clever use of s-expr for the object language make learning what is actually going on in the refiner a breeze compare to working in agda/idris/coq/etc
07.06.18 12:34:32<nilli> hey just noticed you are here
07.06.18 12:34:38<HMCa> hi nilli
07.06.18 12:34:47<nilli> stoopkid i send you a full reply
07.06.18 12:39:06<HMCa> nilli: I am quite happy that you changed your mind and decided to make a post
07.06.18 12:39:20<HMCa> and an (imo) excellently put post, at that!
07.06.18 12:39:53<HMCa> now I only hope that it does not just fall on deaf ears. :-|
07.06.18 12:40:56<nilli> thanks HMCa. its a beginning . such thing will required a process for a few reasons
07.06.18 12:41:39<HMCa> sure
07.06.18 12:41:53<nilli> first of all most peole do not understand how exhanges or DEX ectualy workd (as far as I know maybe only counterparty is areal DEX
07.06.18 12:42:23<HMCa> afaik there is no "pragmatically useful" dex at *all* yet, heh ;-)
07.06.18 12:43:08<nilli> Yes , maybe the first thing to actually to on Autonomic
07.06.18 12:43:21<HMCa> at least not any that aren't just otc matching/crossing
07.06.18 12:44:06<HMCa> nilli: well there's a good reason that it is our go-to example use case when explaining cross-context interaction (like how root mining is incentivized)
                 <nilli> But at list counterparty dose not requires  and intermediate asset
07.06.18 12:45:14<nilli> I just got that description from stoop in the mail and was very impresed. not sure I understood that before.
07.06.18 12:45:25<HMCa> it is an obvious application of our mechanism, and one of the earliest motivators for the design in the first place
07.06.18 12:46:40<HMCa> iirc it was one of the first use cases discussed back in the 2009/2010 conversations, after the "meta-burnt-coin" toys
07.06.18 12:47:47<nilli> maybe then will be the first application to spend my agoras on then to build a second up to utilize the new token exchangable with omni #58 asset
07.06.18 12:48:59<nilli> In fact I can even take any working app on any other blockchain (like the cryptokitty or even just the ERC20 ) and deploy on our chain using our token as the ether  is used on ethereum. so for creating a kitty you will have to pay with "Nili.Agoras" .
07.06.18 12:49:48<nilli> So even making the second app that use the exchanged Agoras #58 can be done really easy
07.06.18 12:50:01<HMCa> sure, one could implement all of ethereum as a context (though I'd question the wisdom of doing so - see my prior "eth is doomed" discussions, heh)
07.06.18 12:50:53<nilli> The only thing that I do as the backer of the token is coupling Nili.Agora with AGORA #58  and have it as the only way for my coins to enter the market. (which means that I don not accept any other token including bitcoin for it. This is in fact the most direct way to transfer value from one coin to the other)
07.06.18 12:52:33<nilli> but as I say people are so stupid it will take some time to make it clear
07.06.18 12:53:09<nilli> and make them realize that I expend the value of their token not work against it
07.06.18 12:53:19<HMCa> there's something appealing to me in the idea of burning agrs into oldtau tokens ;-)
07.06.18 12:53:20<nilli> increase the value
07.06.18 12:54:03<nilli> it realy is appealing it can be the new replacement practice for ICO
07.06.18 12:54:43<nilli> this way you gain the community without having to build it from scratch.
07.06.18 12:54:44<HMCa> well, more like the old practice... XD
07.06.18 12:55:09<HMCa> coin-burn buy-in was comon before the ico madness
07.06.18 12:55:15<HMCa> *common
07.06.18 12:56:57<nilli> it makes sense once enough value is created in coins and community but not enough in term of product
07.06.18 12:57:10<nilli> its like having too much credit in the market
07.06.18 12:58:29<nilli> however in the early days it would have stifled the market  since there as no enough new credit available (all was POW , which means had some value all ready other then being credit)
07.06.18 12:59:46<nilli> the ICO is a true credit market and is truly important, but at the moment is redicualss (like cardano or ripple and such.) its credit with now product
07.06.18 13:00:49<nilli> anywa dont have me started on the topic ...
07.06.18 13:03:09<nilli> HMCa it is not really burning. since the #58 asset that I will accept will be used on ohads platform (once and if he get it done) so it will retain a value  there. I actualy expend the value.
07.06.18 13:04:22<nilli> the only thing that I am obligated to do is not buying my own asset Nili.Agoras with the agoras #58 that I get from the sale of my tokens
07.06.18 13:05:22<nilli> As long as I use it on ohads chain only I do not reduce the value of either.
07.06.18 13:05:57<nilli> and that is really the "miracle" here.
07.06.18 13:06:49<nilli> for the original investors it means that they can choose to use the token for which ever chain that give them more value for it.
07.06.18 13:07:07<nilli> and that is much more choice than any other token out there.
07.06.18 13:07:40<nilli> anyway I will work on explaining it once we agree on it between us.
07.06.18 13:08:56<nilli> ok need to go now. will talk to you later
07.06.18 13:13:39*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
07.06.18 13:33:23<stoopkid> well, i finally understand the translation from FOL -> CNF
07.06.18 13:33:42<stoopkid> not sure why it was stumping me; i guess i was burned out
07.06.18 13:38:32<stoopkid> so {A. B} => {C. D} is really like {A . B} => {C v D} which translates to ~(A ^ B) v (C v D) which translates to (~A v ~B) v (C v D)
07.06.18 13:40:19<stoopkid> and then in clause form this would be {~A, ~B, C, D}
07.06.18 13:40:42<stoopkid> and our kb is a set of such clauses
07.06.18 13:41:15<stoopkid> and then we can inference over it using robinson's resolution
07.06.18 13:41:57<stoopkid> all well and good so far..
07.06.18 13:45:17<stoopkid> and then robinson's resolution is refutation-complete so we can do our consistency check over any such set of clauses
07.06.18 13:45:29<stoopkid> ok
07.06.18 13:46:21<stoopkid> i'm still stumped on the higher-order / level-breaker / findall stuff though, and the rest of the translation of MLTT -> N3
07.06.18 13:47:47<stoopkid> http://www.cs.miami.edu/home/geoff/Courses/COMP6210-10M/Content/FOFToCNF.shtml
07.06.18 13:48:44<stoopkid> so at least for the propositional & first-order fragment, our N3 KBs are basically sets of horn clauses written in kowalski form
07.06.18 13:49:54<stoopkid> it's interesting, only the direction from clause-form --> kowalski form is constructive
07.06.18 13:50:23<stoopkid> it's actually non-constructive to replace A -> B with ~A v B
07.06.18 13:51:03<stoopkid> this is easy to see too; if (A -> B) -> (~A v B) then (A -> A) -> (~A v A)
07.06.18 13:51:31<stoopkid> but ofc (A -> A) holds for all A, so therefore (~A v A) would hold for all A, and that's LEM
07.06.18 13:52:48<stoopkid> the conversion to CNF also depends on double-negation elimination to convert ~~A to A and eliminate "extra" negations
07.06.18 13:56:06<stoopkid> and actually it uses a 3rd non-constructive equivalence: ~(A ^ B) -> (~A v ~B)
07.06.18 13:57:09<HMCa> < stoopkid> i'm still stumped on the higher-order / level-breaker / findall stuff though, and            the rest of the translation of MLTT -> N3
07.06.18 13:57:15<stoopkid> the only constructive equivalence it uses is the other De Morgan's equivalence: ~(A v B) -> (~A ^ ~B)
07.06.18 13:57:26<HMCa> I still say to take it in two parts
07.06.18 13:57:52<HMCa> implement a second order operator syntax (abt?) first
07.06.18 13:58:43<HMCa> then the deductions can just be written directly in that
07.06.18 14:00:46<stoopkid> not exactly sure what you mean by a second order operator syntax
07.06.18 14:01:33<HMCa> like nuprl's uniform syntax, for example
07.06.18 14:03:18<HMCa> a generic second order structure to embed the redex table into
07.06.18 14:03:33<HMCa> or there's always p63/k-dtt too... ;-)
07.06.18 14:03:55<HMCa> but I think nuprl's uniform syntax would be an easier sell? XD
07.06.18 14:04:00<stoopkid> i think i need to start by understanding what is second order about it
07.06.18 14:04:17<HMCa> afaict I'm the only one who ever actually liked p63/k-dtt
07.06.18 14:04:18<HMCa> heh
07.06.18 14:04:51<stoopkid> afaict you're the only one who ever understood it :P
07.06.18 14:05:34<HMCa> well, the same could be said atm for nuprl uniform, too? :-P
07.06.18 14:06:08<HMCa> but nuprl uniform is probably significantly easier to wrap one's head around
07.06.18 14:06:57<stoopkid> well, i assume there are people outside the autonomic project who understand nuprl uniform syntax, and i wasn't totally stumped by it either last time i looked at it
07.06.18 14:07:10<HMCa> (and ultimately probably will be easier to implement typecheck etc with, too?)
07.06.18 14:07:49<HMCa> (esp considering we have multiple reference impls available, compared to p63/k-dtt's 0 implementations published...)
07.06.18 14:08:00<HMCa> anyway i gtr for a few
07.06.18 14:08:44<stoopkid> http://nuprl.org/html/02cucs-NuprlManual-appendixA.pdf
07.06.18 14:15:23<stoopkid> ok i get the basic idea but i'm somewhat i confused about the parameters
07.06.18 14:15:45<stoopkid> the section explaining parameters doesn't really give me any insight
07.06.18 14:18:30<stoopkid> ah i get it; the parameters let you use arguments of different built-in kinds: variable, natural, token, string, level-expression
07.06.18 15:39:54<stoopkid> http://nuprl.org/html/02cucs-NuprlManual-05term-editor.pdf
07.06.18 15:40:08<stoopkid> goes more in depth explaining terms
07.06.18 15:43:59<stoopkid> not as in-depth as i would've liked...
07.06.18 16:45:24<stoopkid> http://nuprl.org/html/02cucs-NuprlManual-07definition.pdf
07.06.18 16:51:20<stoopkid> section 7.1.1 discusses second-order stuff, but i'm not understanding it
07.06.18 16:55:17<stoopkid> i guess i need to start by understanding this statement fully: "First-order matching and substitution are inadequate for handling terms with binding structure, since they consider variables to be independent from each other and thus cannot express the dependency between x and P[x]."
07.06.18 16:57:09<stoopkid> so that's what you're getting at with "a second order operator syntax (abt?)"
07.06.18 18:34:44<editable-koo>whats redml?
07.06.18 22:52:19<HMCa> editable-koo: redprl is made up of 3 distinct languages... redml is the "outer" metalogical language where theorems, definitions, and datatypes are managed
07.06.18 22:53:21<HMCa> then there is also the redprl operator language, in which those things are expressed
07.06.18 22:53:57<HMCa> ^ this one is the second order abt language, a la nuprl uniform
07.06.18 22:55:15<HMCa> and the third is the redprl object language, which are the first order, s-expression terms over which the refiner/extraction actually operate
07.06.18 22:56:58<HMCa> so redml instructs the proof system, redprl operators express the high dimensional types, and redprl objects express the programs themselves
07.06.18 22:58:43<HMCa> (more or less, heh... there are some blurred lines, for example records are (distinctly) in both redprl parts, but not really in redml afaict so far)
07.06.18 22:59:47<HMCa> stoopkid: you can think of abt as being similar to a templating mechanism
07.06.18 23:00:09<HMCa> i.e. a kind of "macros"
07.06.18 23:01:10<HMCa> consider that a second order expression defines a constrained family of first order expressions
08.06.18 03:50:03<HMCa> oh no, karov figured me out... I don't exist!
08.06.18 03:50:26<HMCa> I'm all just in your imaginations
08.06.18 03:50:57<HMCa> stoopkid: i guess our base assumption that we do exist in a shared reality was no good.  Back to the drawing board we go!
08.06.18 03:51:02<HMCa> XD
08.06.18 04:09:17<koo5[m]> I see
08.06.18 04:09:19<koo5[m]> Heh
08.06.18 06:02:54*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
08.06.18 06:03:03<nilli> https://bitcointalk.org/index.php?topic=950309.msg39635320#msg39635320
08.06.18 06:27:01<nilli> and LOL also this https://bitcointalk.org/index.php?topic=950309.msg39637244#msg39637244
08.06.18 06:28:05<nilli> when and how you identity HMCa,  became such an issue for Ohad and the team. I somehow missed that I guess.
08.06.18 06:45:00<nilli> and on a whole other subject https://en.wikipedia.org/wiki/Magma_(algebra)
08.06.18 06:56:01<nilli> just came across that but more important is that:
08.06.18 06:57:33<nilli> quantum gravity is cumming to the same realization that consensus is all and bootstrapping is how it works
08.06.18 06:58:21<nilli> https://www.quantamagazine.org/using-the-bootstrap-physicists-uncover-geometry-of-theory-space-20170223/
08.06.18 06:59:23<nilli> “Nature is as it is because this is the only possible nature consistent with itself,"
08.06.18 06:59:47<nilli> that means that nature is a logic system!!!!!
08.06.18 07:06:59*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
08.06.18 10:08:35<stoopkid> wow
08.06.18 10:28:33<stoopkid> if they want they can talk to me; where is ohad btw?
08.06.18 12:34:47<editable-koo>karov really is a dumbass
08.06.18 12:55:40<HMCa> I would happily cryptographically sign a message for nilli with te same key by which I identified to Ohad...
08.06.18 12:56:13<HMCa> ofc then the problem just becomes trusting ohad to confirm the key fingerprint, which is at least as problematic...
08.06.18 12:56:58<HMCa> the same key could also be checked against a message signed to ronfkingswanson, but same problem - it just defers the trust problem to him
08.06.18 12:58:23<HMCa> this key is, however, also registered with gribble on bitcoin-otc, so could be used to link my current identity to a prior identity... but I'm not sure that changes anything anyway...
08.06.18 12:58:27<HMCa> so
08.06.18 12:58:29* HMCa shrugs
08.06.18 12:58:40<HMCa> what does karov really want? :-)
08.06.18 12:59:26<HMCa> for all intents and purposes, my most reliable identity wrt my work here is probably just my irc vps ip. XD
08.06.18 13:00:20<HMCa> so he can /whois me here and see that I am as much me as I have ever been (non-cryptographically, as if that matters - my key is old and couldve been compromised over the years, right?)
08.06.18 13:00:54<HMCa> so what will convince him of whatever it is exactly he is questioning?  I dunno... I don't really understand what he is questioning...
08.06.18 13:02:13<HMCa> I've always said if you want to know if someone claiming to be me is really me, the bet way is to just have a conversation... if you really knew me at all in the first place you should likely be able to discern any imposter trivially....
08.06.18 13:02:20<HMCa> *bet
08.06.18 13:02:52<HMCa> ofc karov never knew me in the first place, at all, so that can work for nilli but not him, eh?
08.06.18 13:02:55* HMCa shrugs
08.06.18 13:03:25<HMCa> even if I offered up my name and location, how does that change anything?
08.06.18 13:04:38<HMCa> ok, so I am John Rase from Sweden. (I'm not, ofc, just a hypothetical) Does this change anything?  no.  It is still far more relevant, in context, that i identify as hmc/alpha.
08.06.18 13:05:58<HMCa> as an aside, does ohad offer this much?  No.  He offers a name, but no location.  Is his name being ohad any more "real" than my name being hmc, or john, or sally, or whatever it may be?
08.06.18 13:06:05<HMCa> no.
08.06.18 13:10:43*** Nick change: stoopkid (uid137696@gateway/web/irccloud.com/x-ibgkixyxoksuddpf) is now known as HMCb
08.06.18 13:10:58<HMCb> nonsense!
08.06.18 13:11:13<HMCb> if you want to know the real me, then answer me these questions three! ;-)
08.06.18 13:11:25*** Nick change: HMCb (uid137696@gateway/web/irccloud.com/x-ibgkixyxoksuddpf) is now known as stoopkid
08.06.18 13:11:27<stoopkid> jk :P
08.06.18 13:15:06*** Join: koom (~koom@37-48-52-201.tmcz.cz, (unauthenticated): realname)
08.06.18 13:16:19*** Quit: koom (~koom@37-48-52-201.tmcz.cz) left #AutoNomic: Remote host closed the connection
08.06.18 13:16:41*** Join: koom (~koom@37-48-52-201.tmcz.cz, (unauthenticated): realname)
08.06.18 13:21:28*** Quit: koom (~koom@37-48-52-201.tmcz.cz) left #AutoNomic: Remote host closed the connection
08.06.18 13:21:48*** Join: koom (~koom@37-48-52-201.tmcz.cz, (unauthenticated): realname)
08.06.18 13:29:49*** Join: koom_ (~koom@89.24.57.175, (unauthenticated): realname)
08.06.18 13:32:45*** Quit: koom (~koom@37-48-52-201.tmcz.cz) left #AutoNomic: Ping timeout: 260 seconds
08.06.18 13:40:46<HMCa> stoopkid: the real HMC/Betao is a fat, old asshole, you don't want to be him... XD
08.06.18 13:41:28<HMCa> and balding, can't forget that....
08.06.18 13:42:15<HMCa> hehe (I only say this because I know he might be reading it eventually
08.06.18 13:47:39<HMCa> @nilli btw am I correct in understanding that "ohad asor" is ("at best") an anglicization of his actual name, anyway?  So just what's in a name?
08.06.18 13:47:51<HMCa> A rose...
08.06.18 14:06:20*** Quit: koom_ (~koom@89.24.57.175) left #AutoNomic: Ping timeout: 256 seconds
08.06.18 14:13:10*** Join: koom_ (~koom@89.24.57.175, (unauthenticated): realname)
08.06.18 14:47:14*** Quit: koom_ (~koom@89.24.57.175) left #AutoNomic: Ping timeout: 260 seconds
08.06.18 21:04:13*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 256 seconds
08.06.18 21:54:37*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
09.06.18 00:30:37*** Quit: Deadhandd (~deadhand@kntaon1614w-lp130-06-76-66-96-180.dsl.bell.ca) left #AutoNomic: Ping timeout: 265 seconds
09.06.18 00:33:49*** Netmerge: *.net *.split, split 18 hours 20 minutes 13 seconds ago (Use /WL to see who's still missing)
09.06.18 01:13:35*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 01:34:16<koom> 18 hour split?..
09.06.18 01:42:22<HMCa> koom: ?
09.06.18 01:42:35<HMCa> no netsplit notices here...
09.06.18 01:42:47<koom> 09.06.18 00:33:49*** Netmerge: *.net *.split, split 18 hours 20 minutes 13 seconds ago (Use /WL to see who's still missing)
09.06.18 01:57:48*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
09.06.18 01:58:13*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
09.06.18 03:05:09*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Ping timeout: 264 seconds
09.06.18 04:17:51*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
09.06.18 04:19:28<HMCa> nilli: I'm just finishing a pm to you
09.06.18 04:20:47<HMCa> now I'm starting another ;-)
09.06.18 04:21:55<nilli> ok. :)  ill read it and get back to you. I have realized a proposed economic for autonomic and need to check out with you here
09.06.18 04:29:26<HMCa> imo autonomic *is* a proposed economic construct ;-)
09.06.18 04:29:39<HMCa> dototd?
09.06.18 04:34:37<nilli> in terms of the economic: yes i just wanted to clear one point regarding that which should solve all the conflicts we about tokenizing.
09.06.18 04:37:05<nilli> regarding your PM. its only emphasize that direction ofc.  but my comments here will regards the practical actual materialistic end of it while your asperations are far more "spiritual"
09.06.18 04:39:04<nilli> spiritual in a sense of greater and more inclusive concepts of consciousnesses existence
09.06.18 04:43:10<nilli> HMCa I also need to understand from you how you feel regarding forming any spacial ties to AGRS on top of autonomic and expressing that to the public before genesis.
09.06.18 04:43:21<nilli> but first let me explain which ties
09.06.18 04:45:52<nilli> and make a star note that after reading your PM im am inclined to let AGRS issue go away and reconsider the notions "gift"
09.06.18 04:48:13<nilli> I depth and with all the  soul searching it inclined
09.06.18 04:50:02<nilli> So regarding the economy of the chain : "autonomic *is* a proposed economic construct"
09.06.18 04:51:56<nilli> I start with the mechanism and will the go back to the more fundamental meaning of that description : "autonomic *is* a proposed economic construct"
09.06.18 04:55:27<nilli> assuming the root chain is a time machine, such that allow all observers*    to agree on the time , (* interesting is that religions use the term "observers" as well in order to describe folowers)
09.06.18 04:55:38<HMCa> wrt agrs-on-autonomic, I put it in the category of speculating on what might happen post-genesis... which I mostly just don't do, since afaict it can't be more than a waste of time
09.06.18 04:56:06<HMCa> we can't know how people will actually use it
09.06.18 04:56:23<HMCa> maybe "token" is not the interesting structure
09.06.18 04:56:40* HMCa shrugs
09.06.18 04:58:10<nilli> In fact a time machine such as a blockchain can be that by recording actions (transactions of exchange)
09.06.18 04:59:02<nilli> meaning that the exchange is what constitute the means that create time
09.06.18 04:59:26<nilli> and the time is in fact order of events
09.06.18 04:59:42<nilli> in other words there is no time if there are no events
09.06.18 05:00:09<nilli> and the events an on a blockchain is exchange
09.06.18 05:00:35<nilli> like a measurement is an event in physics
09.06.18 05:01:05<nilli> this is very crucial to the understanding of tokenization.
09.06.18 05:02:23<nilli> There must exist a motivation behind spending energy on some sort of exchanege vs. another
09.06.18 05:03:02<nilli> ofc this motivation can be of what we consider a greater social motivation
09.06.18 05:03:22<nilli> (which in my understanding "gifting" is a part of it)
09.06.18 05:05:10<nilli> but I would argue the the innovation of money as a unit of account that is exchangeable and  thus used as a store of value allow us to express any social  motivation in it most simplified form
09.06.18 05:05:27<nilli> we can count it in units
09.06.18 05:06:35<HMCa> not exchange, more general - transaction
09.06.18 05:06:50<nilli> money as we know it have been used to monetize greed and abuse but was not able to monetize gifting and love
09.06.18 05:06:58<HMCa> you are specializing unnecessarily ;-)
09.06.18 05:07:22<nilli> and both need to be monetized
09.06.18 05:07:43<HMCa> we can count *anything* virtual in units
09.06.18 05:07:59<nilli> in order for individuals to be able to act in order to expend love and gifting
09.06.18 05:08:25<HMCa> we don't need any *particular* specific structure
09.06.18 05:09:01<nilli> if we look at "gift" in terms of physics it would translate to an exchange in an open system
09.06.18 05:09:49<HMCa> that is a limited view, imo
09.06.18 05:09:52<nilli>  in a known closed system the conservation laws do not allow any giftings
09.06.18 05:10:15<nilli> only exchange
09.06.18 05:11:15<nilli> and I agree with you regarding it being a limited view
09.06.18 05:12:06<nilli> just as the laws of conservation are a limited view
09.06.18 05:12:54<HMCa> right, so why limit? ;-)
09.06.18 05:14:30<nilli> because its a dance between limit and braking that limit. otherwise it will be infinity and nothingness
09.06.18 05:14:38<nilli> and we would not be too
09.06.18 05:14:56<nilli> our being required the dance
09.06.18 05:15:40<nilli> and all that we try to do is imitate it using our made up technologies
09.06.18 05:15:47<HMCa> ah, but that is the post-genesis "dance"
09.06.18 05:16:06<nilli> yes
09.06.18 05:16:14<HMCa> whe "we" try to do, now, is just make a fully general platform, pre-genesis
09.06.18 05:16:52<HMCa> on which "they" can then explore the full space of transactional dancing
09.06.18 05:17:07<nilli> yes, we are operating now within the 'blackhole"
09.06.18 05:17:08<HMCa> of which "token models" are just a tiny part
09.06.18 05:17:46<nilli> the token modle have to be understood as something that can be instituted on the new chane
09.06.18 05:18:27<HMCa> sure, if it were not we could not say we'd given a platform for a full exploration
09.06.18 05:18:35<nilli> only after that another type of organization can be conceptualized
09.06.18 05:18:42<HMCa> no
09.06.18 05:18:46<HMCa> I disagree :-)
09.06.18 05:19:04<HMCa> there is no particular order that the space must be searched in
09.06.18 05:19:53<nilli> ok I agree but in must be started somewhere arbitrary
09.06.18 05:20:00<nilli> it
09.06.18 05:20:08<HMCa> not arbitrary either
09.06.18 05:20:13<HMCa> heh
09.06.18 05:20:31<nilli> define it then
09.06.18 05:21:14<HMCa> there are points we could not start at, and subsequent points where if we were to explore in particular orders we would find ourself stuck - dance forced to change or end
09.06.18 05:23:49<nilli> it follows some rules . that of the wavefunction which is that of intelligence (but i include far too meany things here) . basically I agree
09.06.18 05:25:44<HMCa> right, there are some obvious criteria for initial stability and some nonbvious ones... and some obvious criteria for perpetual operation and some non-obvious ones....
09.06.18 05:27:45<HMCa> but none of that is "pre-genesis concerns"
09.06.18 05:28:13<nilli> we are now really expending this conversation to the limits of theories (while I started it promising to be concrete and materialistic)
09.06.18 05:28:42<nilli> but is really what I work on in all fronts :)
09.06.18 05:29:16<nilli> The notion of bootstraping have to do with consensus
09.06.18 05:29:32<HMCa> yes
09.06.18 05:29:59<nilli> while logic aims to stand on its "own"
09.06.18 05:30:21<nilli> in the link I left to you there are some mentions of that
09.06.18 05:30:49<nilli> current studies of QM deals now with bootstraping
09.06.18 05:30:52<HMCa> logic always "stands on its own"... that is kinda what makes it "logic."
09.06.18 05:31:02<nilli> right
09.06.18 05:31:26<nilli> but how logic relates to bootstraping is what interest us
09.06.18 05:31:39<HMCa> not exactly
09.06.18 05:31:50<HMCa> that is what interests the genesis authors
09.06.18 05:32:01<HMCa> but not "us" as the pre-genesis core devs
09.06.18 05:32:32<HMCa> the core itself is indifferent to such matters
09.06.18 05:33:19<nilli> core do not concern with bootstraping
09.06.18 05:33:24<nilli> right?
09.06.18 05:33:27<nilli> only logic
09.06.18 05:34:01<nilli> but the reason you do it the way you are all have to do with bootstrapint
09.06.18 05:34:04<HMCa> we just give a mechanism for sharing a universe hierarchy, what universes get stacked up in what ways by who is all outside of core
09.06.18 05:34:40<nilli> HMCa "we" is par  of bootsraping
09.06.18 05:34:44<nilli> part
09.06.18 05:35:00<HMCa> core is just the the mechanism to share, stack, and speak the protocols defined in those universes
09.06.18 05:35:13<HMCa> no, there are 3 distinct groups
                 <nilli> in fact even communicating it is bootstraping
09.06.18 05:35:28<HMCa> "us, now, pre-genesis" who build core
09.06.18 05:35:54<HMCa> "genesis authors" who bootstrap root
09.06.18 05:36:06<HMCa> and then "everyone, post-genesis"
09.06.18 05:36:32<HMCa> ofc therr may be overlaps
09.06.18 05:36:38<HMCa> or there may not be
09.06.18 05:36:41* HMCa shrugs
09.06.18 05:39:09<nilli> am I a part of the first group by participating in this conversation? or is that an outside activity
09.06.18 05:41:41<nilli> where would you place the "gifters" thous who would help in funding or in cheering?
09.06.18 05:43:04<nilli> would you then place me among the gifters to the core and not the core builders?
09.06.18 05:43:10<HMCa> "the gift" is core+genesis, anyone who helps to build them is contributing to the gift
09.06.18 05:43:55<nilli> but there are two different classes of gifters
09.06.18 05:44:21<nilli> those how contribute something "new" and thous who recycle
09.06.18 05:44:27<HMCa> no
09.06.18 05:44:48*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 05:44:53<HMCa> those who contribute to the core and those who "do the bootstrap"
09.06.18 05:46:27<HMCa> the construction of core must be complete before the bootstrap can be done, and the bootstrap must be done before it can be said to exist.
09.06.18 05:47:06<HMCa> once it exists, we are all just users like any other
09.06.18 05:52:54<nilli> <3
09.06.18 05:53:44<nilli> ok that is the right place to go back to where we started this conversation
09.06.18 05:56:30<nilli> once genesis *is* and the rootchain is runing than we can implement any existing token application on it
09.06.18 05:56:42<nilli> let take etherume for example
09.06.18 05:56:58<nilli> we can run the etehreum code on it
09.06.18 05:57:58<nilli> but then .... we can also decide which token will act as "ether"
09.06.18 05:59:05<nilli> we (who ever will wish to implement the ethereme code on the root ) can decide with tokens to charge
09.06.18 05:59:32<nilli> they can be ether, but they can be any other include a new native token
09.06.18 05:59:39* HMCa shrugs
09.06.18 05:59:49<HMCa> sure we *could* do lots of things
09.06.18 06:00:26<HMCa> but I don't think such speculation is interesting or even really meaningful
09.06.18 06:02:12<HMCa> *root* should "do" as little as possible, beyond that there is not much to say yet about anything "done" post-genesis
09.06.18 06:02:26<nilli> can be meaningful if we wish to create some funds (as gifts or investments  ) expend the gift givers of the project
09.06.18 06:03:01<HMCa> "create" pre-genesis, like now?
09.06.18 06:03:17<HMCa> why should we want to do that?
09.06.18 06:03:18<nilli> now the development is asking stoopkid and koo to gift above thier ability
09.06.18 06:03:32*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Ping timeout: 245 seconds
09.06.18 06:04:47<HMCa> if we were to put such semantics into core, we would have built the wrong construct
09.06.18 06:05:08<HMCa> biased it
09.06.18 06:05:18<HMCa> specialized it
09.06.18 06:05:21<nilli> you are such a purist.
09.06.18 06:05:33<nilli> but what if in fact is what we do?
09.06.18 06:05:47<HMCa> if ee specialize it, how can we claim it to be maximally general?
09.06.18 06:05:59<HMCa> we'll have restricted the search space
09.06.18 06:06:15<nilli> should I not send anymore funds to any of them?
09.06.18 06:06:30<HMCa> that is between you and them :-)
09.06.18 06:06:35<nilli> it is general at the root level
09.06.18 06:06:55<HMCa> at genesis, root is all that can exist
09.06.18 06:07:21<nilli> the commitment  is given for whatever will sit a top the rood
09.06.18 06:07:47<nilli> we can talk about anything else but the root?
09.06.18 06:08:14<nilli> can express goals beyond root?
09.06.18 06:08:20<nilli> cant
09.06.18 06:08:37<nilli> for both I meant cant
09.06.18 06:08:40<nilli> lol
09.06.18 06:08:58<nilli> smae meaning though ... more lol
09.06.18 06:09:04<nilli> same
09.06.18 06:12:01<HMCa> wrt core we can't even really meaningfully talk about root, except in general terms
09.06.18 06:12:03<nilli> ok I just realized you have more PM to me so will read it now.. al the above is said before reading
09.06.18 06:12:13<HMCa> root's definition comes at genesis
09.06.18 06:13:47<nilli> at list genesis resolve the problem physicists and mathematicians  have with "mindfuck"
09.06.18 06:14:19<nilli> in terms of defining something logicaly
09.06.18 06:15:05<nilli> genesis is like an axiom,but unlike axion is actualy is as a proof of itself beeing
09.06.18 06:29:08<HMCa> yes, this is why i say it is emergent, and why "comes to us by its' own terms" is something of a pun also
09.06.18 06:29:11<HMCa> heh
09.06.18 06:29:24<HMCa> anyway I gtr
09.06.18 06:40:43<nilli> me too  see you later
09.06.18 06:40:52<nilli> check you PM
09.06.18 06:45:39*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
09.06.18 06:50:55*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 07:32:01*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Read error: Connection reset by peer
09.06.18 07:35:49*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 07:52:34*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Ping timeout: 264 seconds
09.06.18 07:55:57*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 08:50:32*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Remote host closed the connection
09.06.18 08:50:56*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 09:36:18*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Ping timeout: 265 seconds
09.06.18 09:40:06*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
09.06.18 11:00:35*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Ping timeout: 240 seconds
09.06.18 14:06:42*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-iuczagofakxwbacz) left #AutoNomic: Ping timeout: 256 seconds
09.06.18 14:06:50*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-inwpivhqrkbvshkw) left #AutoNomic: Ping timeout: 256 seconds
09.06.18 14:06:52*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-kxrhoddldcgtmabk) left #AutoNomic: Ping timeout: 240 seconds
09.06.18 15:12:17*** Join: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45, (unauthenticated): 77.126.56.45 - http://webchat.freenode.net)
09.06.18 15:12:25<nilli> https://bitcointalk.org/index.php?topic=950309.msg39714374#msg39714374
09.06.18 15:14:58<nilli> what the fuck is their problem with HMC being just HMC? It just amazed with how far they went with it.
09.06.18 15:17:03<nilli> all the time I was  trying to smooth this thing out really believing in some simple basic commonsense. but i give up
09.06.18 15:17:51<nilli> such an idiotic behavior leaves me speechless
09.06.18 15:18:18<nilli> and more so just really makes me walk away
09.06.18 15:22:46<HMCa> frankly I'm surprised that you're still surprised. :-|
09.06.18 15:22:51<HMCa> HEH
09.06.18 15:23:00<HMCa> also karov again misses a key point...
09.06.18 15:23:08<nilli> so..... I let go ....put all my efforts to rest . im out!  dont want to be a part of that community anymore .cut the ties and going to send back all the agoras I still have
09.06.18 15:23:10<HMCa> I *do* refuse the donation. ;-)
09.06.18 15:23:40<nilli> I am surprised HMCa.
09.06.18 15:24:59<HMCa> nilli: imo you should not be. :-|
09.06.18 15:25:15<nilli> in fact I am very disappointment . I don't believe the idea of the tau can live on
09.06.18 15:26:02<HMCa> the idea of (old)tau is immortal.  Not only can it live on, it necessarily must...
09.06.18 15:26:20<HMCa> this, too, is a part of that "trap"
09.06.18 15:26:32<nilli> it can live by killing everyone involve :)
09.06.18 15:26:49<HMCa> for some definition of killing, yes. :-)
09.06.18 15:27:05<nilli> but im ready to give even that a chance...
09.06.18 15:27:16<HMCa> anything that lives does so by killing.
09.06.18 15:27:32<HMCa> anything that is immortal kills in perpetuity
09.06.18 15:28:02<HMCa> kill rationally.  invest accordingly.
09.06.18 15:28:32<HMCa> side effects may include: ...
09.06.18 15:30:19<HMCa> dototd: kinda like democracy but moreso, the worst scary thing except for every possible alternative.
09.06.18 16:34:09*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-cklqrmbsarnnrbdd, (unauthenticated): @lexxus:matrix.org)
09.06.18 16:50:01<nilli> https://bitcointalk.org/index.php?topic=950309.msg39746035#msg39746035
09.06.18 16:50:18<nilli> I actualy have nothing more to add to that
09.06.18 16:50:39<nilli> game over
09.06.18 16:51:18<nilli> for me I mean
09.06.18 16:52:43<nilli> in terms of the tau
09.06.18 16:54:53<stoopkid> it really is disappointing..
09.06.18 16:57:11<nilli> I dont even think there is a dototd that I can effect anymore. (well  I could keep fighting for it, but not really for myself. im fine with it what ever it will be)
09.06.18 16:57:26<nilli> hi stoopkid
09.06.18 16:57:55<stoopkid> heya
09.06.18 16:58:13<nilli> Im not going to try do anything about AGRS anymore
09.06.18 16:59:34<stoopkid> idrk what you even could do short of making a new coin to replace/fork agrs
09.06.18 17:00:56<nilli> No there was a lot I could do, but im not interested in it anymore
09.06.18 17:02:41<nilli> if any of the original investors would have asked for it I would have tried, but no one seems to do that.
09.06.18 17:03:11<nilli> for some reason I felt some responsibility to the project
09.06.18 17:03:28<nilli> and once got the AGRS felt that way even more
09.06.18 17:03:57<stoopkid> idk there seems to be at least a few people besides us voicing concern about the situation
09.06.18 17:05:17<nilli> I think to return whatever I got left of the AGRS to Ohad (which is most of it)
09.06.18 17:06:10<nilli> that will seal the deal!!!
09.06.18 17:06:27<stoopkid> well, i still have the agrs you sent me i can send that back to you if you want to return it all to him
09.06.18 17:10:05*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-dkipgjwhuhjvzodj, (unauthenticated): @koo5:matrix.org)
                 *** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-txtpeiwisapzchnr, (unauthenticated): @genuinelyfx:matrix.org)
09.06.18 17:14:16<stoopkid> imo still the best option here for saving the agoras community would be to build autonomic
09.06.18 17:15:26<nilli> yes but they should be more involve in expressing that and supporting it too
09.06.18 17:15:48<nilli> should have been
09.06.18 17:16:54<nilli> if we are no holding any AGRS we dont have anymore any interest in having the token work in an app we implement
09.06.18 17:17:47<nilli> we can invite any other community to join
09.06.18 17:18:57<nilli> (as I explained in the morning)
09.06.18 17:19:16<stoopkid> thats both a good thing as well as not necessarily true, one might have interest in implementing it basically for its own sake, but also maybe not, but also something else that happens on autonomic might obsolete everything we were even expecting from “agoras”
09.06.18 17:20:22<nilli> basically let forget AGRS . gone with the wind
09.06.18 17:22:19<stoopkid> so far that seems to be the case anyway :)
09.06.18 17:25:02<stoopkid> nilli: so the thing is... afaict autonomic would probably be done if there was anybody working on it besides hmc who was even remotely competent in the formal logic stuff including how to implement
09.06.18 17:25:55<stoopkid> everything ive learned thats part of it is basically... “standard”
09.06.18 17:26:30<stoopkid> stuff that anybody who had, say.. a masters or phd in the relevant fields would already just know
09.06.18 17:32:06<stoopkid> so basically i figure that if a bunch of reasonably intelligent people got together and scaled up the r&d, like say disgruntled members of the agoras community who’re actually interested in the project for its own sake, it wouldnt necessarily take that long to finish
09.06.18 17:33:00<stoopkid> especially since we’ve got hmc here to check off on anything produced and provide high-level instruction
09.06.18 17:40:37<stoopkid> like... the dev-team / community dichotomy is the wrong way to look at it, because this isnt anything like a standard software project or even standard crypto project... that’s like...
09.06.18 17:40:50<stoopkid> representative democracy
09.06.18 17:48:16<stoopkid> basically the way for everybody to get something out of this game is by playing it
09.06.18 17:49:37<stoopkid> the design is actually such that that’s pretty much the only way to get anything out of it
09.06.18 17:55:55<stoopkid> the obvious incentive for participation at this stage is first-mover’s advantage, i.e. being the most ready to play the game when it starts
09.06.18 19:21:39*** Quit: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45) left #AutoNomic: Ping timeout: 260 seconds
10.06.18 02:06:43<HMCa> people are freaking out about mit's norman ai
10.06.18 03:23:26*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
10.06.18 03:32:06<nilli> Im trying to put some order in my mind ...and boy....im so confused
10.06.18 03:34:44<HMCa> hi
10.06.18 03:35:16<nilli> HMCa. you have been really strongly pushing to move away from anything have to do with the Agora tau
10.06.18 03:36:10<nilli> but if I would put aside everything personal , then the only ties is AGRS. which is way money is what it is
10.06.18 03:36:42<nilli> it can express all social values
10.06.18 03:37:08<nilli> But. and that is where I get really confused.....
10.06.18 03:37:40<HMCa> it is not the only possible expression with that particular generality
10.06.18 03:38:37<HMCa> there are many transactional structures by which we could do so
10.06.18 03:39:00<nilli> you yourself are not letting go of anything related to that part of that voyage
10.06.18 03:39:34<nilli> and you use the most basic form of emotional expressions
10.06.18 03:40:05<HMCa> not sure what you mean... I explicitly avoided holding any relation to agrs/newtau
10.06.18 03:40:11<nilli> you keep relating to what Ohad and his team are doing
10.06.18 03:41:22<HMCa> ah, you mean that things which I say relate to (reference) them
10.06.18 03:41:35<HMCa> that is a subtle and important distinction
10.06.18 03:42:37<nilli> I mean to how you react to what you see as fraudulent
10.06.18 03:44:18<nilli> if its is only because I got your team involve with the agora I can get it ,but you did that before and im sure that you will go on with that
10.06.18 03:45:33<nilli> Let me try to be more clear here
10.06.18 03:47:12<nilli> my notion was that if we have a common interest , that form by a coin, then despite being in disagreement te  and even personal competition , we will all cooperate on one goal. that of creating real value
10.06.18 03:50:56<nilli> All my actions related to the AGRS was motivated by that notion of only good can come out of it, since it force us all to do our best as we understand it , even if in totally disagree with each other
10.06.18 03:51:58<HMCa> ok, two things...
10.06.18 03:52:36<nilli> I understand your initial concept relating to the root not being tokenized, but im looking at everything else around that
10.06.18 03:52:51<HMCa> first, I react the same to anything I view as active, ongoing fraud, really... agrs is not special
10.06.18 03:53:39<nilli> ok
10.06.18 03:53:51<HMCa> second, we cannot possibly have any common interest in agrs because I hold no interest in it, and will not.
10.06.18 03:55:14<nilli> but it part of your team hold it then it become your interest too, right?
10.06.18 03:55:24<HMCa> no
10.06.18 03:55:31<nilli> how so?
10.06.18 03:55:56<HMCa> why should it?
10.06.18 03:56:14<HMCa> *how* should it
10.06.18 03:56:44<HMCa> ....?  At most they could just throw it into the gift
10.06.18 03:57:00<nilli> because they then have interest in it
10.06.18 03:57:18<HMCa> if they hodl it, they do, sure
10.06.18 03:57:25<nilli> in order to gift, one need to have the means to
10.06.18 03:57:50<HMCa> but that does not impart interest to me
10.06.18 03:58:18<HMCa> now you might say "but you do have interest eith them, and so..."
10.06.18 03:58:41<HMCa> but the cold hard is that you'd again be wrong...
10.06.18 03:59:02<nilli> let start at the starting point: look at yourself, you keep your job in order to gift to the creation of autonomic, right?
10.06.18 03:59:16<HMCa> "my job"?
10.06.18 03:59:31<HMCa> not sure exactly what you refer to here
10.06.18 04:00:40<nilli> you work for to pay your rent? (food ext.)
10.06.18 04:00:47<HMCa> remember that I am not in the traditional rat race?
10.06.18 04:00:59<HMCa> I'm sitting up on a wall of a maze
10.06.18 04:01:05<nilli> no need to be in the race only to be house and fed
10.06.18 04:01:33<HMCa> I don't, in any traditional sense, apparently...
10.06.18 04:01:56<nilli> for some reason your starting point is leaving the race behind. what if I never got into it to begin with
10.06.18 04:02:17<HMCa> you assume *I* ever really ran in it?
10.06.18 04:02:54<nilli> you asserting that anyone is
10.06.18 04:02:57<HMCa> I've jumpped down off of the wall once or twice to observe or goof around in jest
10.06.18 04:03:02<nilli> everyone
10.06.18 04:05:28<HMCa> anyone can choose how to approach the maze for themselves... "race" is not the only option...
10.06.18 04:05:49<nilli> I think that there is something rooted in that.
10.06.18 04:06:07<HMCa> sure
10.06.18 04:06:35<nilli> you see , money represent the race as a race. that its whats wrong with our money
10.06.18 04:06:48<nilli> its the pile of money that counts
10.06.18 04:07:08<nilli> the bigger your pile is the better you are
10.06.18 04:07:23<HMCa> a race to *what* though... we don't even know if the maze has any end or exit yet
10.06.18 04:07:40<nilli> and the initiate the rate race
10.06.18 04:08:05<nilli> yes we created a goal, pile to money. and show off of that
10.06.18 04:08:33<nilli> while the goal is survivng the maze
10.06.18 04:08:35<HMCa> and ecen if you're goig to have races while we explore, why pretend that there must just be "just one race to win or lose"
10.06.18 04:08:46<HMCa> *even *going
10.06.18 04:10:42<nilli> let go back to gifting
10.06.18 04:11:22<HMCa> and then why not admit "races of races" as well... if we're going to play silly nomics while stuck traversing a maze let's try something(s) more interesting than just "monies+derivs"
10.06.18 04:11:34<nilli> the meaning of survive shape the meaning of gifting
10.06.18 04:11:55<HMCa> and scoring on some flawed variant of "millionaire's problem"
10.06.18 04:12:49<HMCa> (esp given that we now have math to actually solve proper millionaire's problems, etc (h.e.))
10.06.18 04:14:55<nilli> you can gift when you are at a state of securing your own survival  for to moment . while assessing what is secured and what is the length of that moment is different for everyone
10.06.18 04:15:28<nilli> what is the millionaire problem?
10.06.18 04:15:45<nilli> ill google it
10.06.18 04:16:21<HMCa> Yao's
10.06.18 04:19:01<nilli> I dont quite see how it is related to what we talk about
10.06.18 04:21:24<HMCa> we're talking about alternatives to "money" as we know it today
10.06.18 04:22:52<HMCa> "money" as we know it today is predicated on some pretty bad assumptions, like "we can't know which of us N people is richer without all knowing how much we each of us have
10.06.18 04:23:01<HMCa> "
10.06.18 04:23:31<HMCa> today, that assumption is unsound...
10.06.18 04:23:53<HMCa> so, today, "money" as we know it is unsound
10.06.18 04:24:49<nilli> Hmc I think that we need to go one step before money for example : assuming you would realize that you need to invest more time in the creation of autonomic then allow you to sustain you life would you still do it?
10.06.18 04:24:59<nilli> than
10.06.18 04:25:05<HMCa> (this is just one simple example)
10.06.18 04:25:30<HMCa> i don't think it would be possible to "realize that"
10.06.18 04:25:55<HMCa> I can't know if it will fully imerge in a year, in 100, or tonorrow, or...
10.06.18 04:26:08<HMCa> it will do that on its' own terms. :-|
10.06.18 04:26:17<HMCa> *emerge
10.06.18 04:26:21<HMCa> *tomorrow
10.06.18 04:26:49<nilli> OK so you in a way set it differently...
10.06.18 04:27:33<nilli> you say I exist and do what need to exist , then I also contribute to the creation of what ever is more then my own survivle
10.06.18 04:28:13<nilli> what ever I need to do in order to exist then....
10.06.18 04:28:40<nilli> that is one crucial difference between you us
10.06.18 04:29:27<nilli> my set up is such that I will do more than my survival allows me to do
10.06.18 04:29:47<HMCa> I don't claim anyone in particular actually exists, I only ever ask if we can assume it together from time to time. :-)
10.06.18 04:30:58<HMCa> I'm pretty sure that I exist, and that you seem to exist right now.  Beyond that...
10.06.18 04:31:01* HMCa shrugs
10.06.18 04:31:18<nilli> HMCa. I do think that our starting point is very different and that what make us disagree or ruther misunderstand eachother
10.06.18 04:31:39<HMCa> well, this is my starting point!
10.06.18 04:31:40<HMCa> heh
10.06.18 04:31:49<HMCa> you just went through it
10.06.18 04:31:52<HMCa> w/ karov
10.06.18 04:32:21<HMCa> my starting point is always "can we begin by together assuming that we do probably exist in some shared reality?"
10.06.18 04:32:47<nilli> I dont know if I can express i on the irc right. but ill just do it in general
10.06.18 04:33:10<HMCa> imo, this is the only sound first step in "trying to agree to agree"
10.06.18 04:33:44<nilli> yes :)
10.06.18 04:33:52<HMCa> first we agree to agree, then we agree how to agree, and only then can we actually ever go about agreeing(/understanding)
10.06.18 04:34:41<nilli> my basic experience was that things where taken from me without me giving the
10.06.18 04:34:47<HMCa> all of this transaction we do now does not faithfully transport any agreement or understanding
10.06.18 04:35:20<HMCa> it only seems to, and only even "mostly"
10.06.18 04:36:11<nilli> yet I was able to then give it despite it risking my life and welling
10.06.18 04:36:32<HMCa> bitcoin does transport agreement and understanding, but only about a very specific money
10.06.18 04:38:41<HMCa> all we do is generalize the structures that it can transport agreements/understandings about
10.06.18 04:50:28<nilli> I think I finally get something :
10.06.18 04:51:53<nilli> The way both Ohad and myself were acting and structuring our work  by creating a dependency in the means we attached to our work
10.06.18 04:52:47<nilli> which means that we are making the project a necessity for us to sustain a living
10.06.18 04:53:06<nilli> then attaching a coin to it makes a lot of sense
10.06.18 04:54:05<nilli> it makes your survival interest aliened  with your project.
10.06.18 04:54:22<nilli> and force you to put most of your energy into the project
10.06.18 04:55:15<nilli> that is also the way I view the incentive mechanism of a token
10.06.18 04:56:20<nilli> why
10.06.18 04:56:37<nilli> way
10.06.18 04:57:57<nilli> now assuming it is detached from the basic necessity
10.06.18 04:58:53<nilli> then I realy can let it develop to eternity. way past my own lifetime
10.06.18 05:01:30<nilli> maybe worse.... I have to never let it materialized since then I lost the meaning of my life
10.06.18 05:05:52<nilli> in short HMCa. I dont think that you can allow autonomic to ever get to genesis
10.06.18 05:08:25<nilli> that may sound very harsh. and would have been so, but you found a way around it by having others doing it and by being HMCa who is only a part of some other being.
10.06.18 05:09:57<nilli> I can all of a sudden also understand the obsession that Ohad developed regarding your identity
10.06.18 05:10:39<nilli> in a way your commitment is not really there if you retain your anonymity
10.06.18 05:13:07<nilli> If I thought that your basic disagreement revolve around some logic arguments, I just realized that it is rooted in how you both experience commitment.
10.06.18 05:17:09<HMCa> I deny name and he denies location?
10.06.18 05:17:11<HMCa> XD
10.06.18 05:18:12<nilli> he denies location only because of past problems
10.06.18 05:18:51<HMCa> the reason doesn't matter
                 <nilli> you deny name in principal
10.06.18 05:19:34<nilli> well his location is known to quiet a few. its not such a big deal
10.06.18 05:23:36<nilli> HMCa I have a question for you: do you think accounting is needed, and if so what for?
10.06.18 05:24:52<nilli> or ruther do thin gifting involve accounting. or it makes accounting absolute.
10.06.18 05:25:01<nilli> think
10.06.18 05:26:29<HMCa> not sure what you really ask
10.06.18 05:27:02<HMCa> i think accounting is necessary sometimes, in general, ofc
10.06.18 05:27:48<nilli> double spend is all about accounting, it seems that accounting is the basic form needed for exchange and agreement
10.06.18 05:28:41<nilli> can life be sustainable without accounting?
10.06.18 05:29:53<nilli> gifting denies accounting as a fundamental law
10.06.18 05:30:17<nilli> accounting is a conservation law
10.06.18 05:30:53<nilli> so in a way gifting denies conservation laws
10.06.18 05:32:05<nilli> so assuming that is possible and true what laws shape gifting?
10.06.18 05:32:32<nilli> (we covered it on other angle yesterday)
10.06.18 05:34:00<nilli> it can be done with in some limits set by "nature"
10.06.18 05:34:31<nilli> the same limits that expressed by the wave function
10.06.18 05:35:46<nilli> what am I getting to here is a quest to formalized accounting in a different way
10.06.18 05:36:08<nilli> gifting is a different sort of accounting
10.06.18 05:36:47<nilli> its the QM formulation of accounting
10.06.18 05:36:59<HMCa> sounds like a lot of contextual detail
10.06.18 05:37:30<nilli> yes
10.06.18 05:37:47<HMCa> any contextual detail is post-genesis concerns
10.06.18 05:37:53<nilli> its loaded with thigs I deal with on many levles
10.06.18 05:38:34<nilli> from mathematics to  and personal
10.06.18 05:39:49<nilli> its about the connection between accounting and consensus
10.06.18 05:40:29<nilli> bitcoin represent a direct link but one that can not allow for double spend
10.06.18 05:41:07<nilli> autonomic is about allowing it in agreement
10.06.18 05:41:54<nilli> so what it does is using accounting  to set a state on which we can agree or agree to change
10.06.18 05:42:04<nilli> and that is the crucial point
10.06.18 05:44:28<nilli> [11:36] <HMCa> bitcoin does transport agreement and understanding, but only about a very specific money
10.06.18 05:45:34<nilli> [11:38] <HMCa> all we do is generalize the structures that it can transport agreements/understandings about
10.06.18 05:46:50<HMCa> nilli: not all contexts will "account" though... some contexts could be stalled from their first block, for an example
10.06.18 05:49:08<nilli> you see that is the point. context is to complex for accounting, but if we have accounting above it ,it can resolve the dependability problem
10.06.18 05:49:36<nilli> decididability
10.06.18 05:50:17<nilli> context can not be sum up to units of accounts
10.06.18 05:50:27<HMCa> we don't have a decidability problem to be solved
10.06.18 05:51:07<nilli> life do
10.06.18 05:51:47<HMCa> that is between the users and their lives, as post-genesis concerns
10.06.18 05:52:09<HMCa> in core, we have no such concern to resolve
10.06.18 05:58:13<nilli> it is at the bootstrap levle and as we said both evolve hand in hand
10.06.18 05:58:47<nilli> you for some reason leave yourself out of bootstrapping so it seems
10.06.18 05:59:04<nilli> I need to go soon
10.06.18 06:01:51<nilli> talk to you later. :)
10.06.18 06:03:56<HMCa> they do not evolve hand in hand
10.06.18 06:04:14<HMCa> core necessarily comes first
10.06.18 06:06:14*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
10.06.18 19:37:45<stoopkid> derivative of a CFG looks a lot simpler when you put it in greibach normal form
11.06.18 02:24:44<HMCa> I would imagine so
11.06.18 02:24:59<HMCa> no left recursion, heh
11.06.18 03:21:46*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
11.06.18 03:22:54*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Remote host closed the connection
11.06.18 03:23:18*** Join: koom (~koom@89.24.57.175, (unauthenticated): realname)
11.06.18 03:26:40*** Quit: koom (~koom@89.24.57.175) left #AutoNomic: Remote host closed the connection
11.06.18 10:49:55*** Join: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109, (unauthenticated): 5.29.152.109 - http://webchat.freenode.net)
11.06.18 10:50:01<nilli> hi
11.06.18 10:50:58<nilli> Just want to let you know that I am returning Ohad all the
11.06.18 10:51:18<nilli> AGRS tokens
11.06.18 10:52:32<stoopkid> good morning
11.06.18 10:53:17<nilli> as far as I am concerns from this point on Autonomic is a separate project with not ties to the tau
11.06.18 10:53:23<nilli> hi stoopkid
11.06.18 10:54:33<nilli> Also regarding my last conversation with HMCa, im not sure that autonomic have any better chances to get to genesis then NewTau
11.06.18 10:55:26<nilli> So in a way its a good thing to be left with not commitment to anyone
11.06.18 10:56:47<stoopkid> i think we at least have better chances than NewTau? XD
11.06.18 10:58:56<nilli> :)
11.06.18 11:03:40<nilli> we are yet to see. which ever it is I am still convinced that both teams are doing their  best to reach genesis in a way they believe in. I dont think anyone can ask for more
11.06.18 11:06:51<stoopkid> hm, you still believe that about NewTau?
11.06.18 11:09:29<stoopkid> on AutoNomic side we're not even trying to hold on to the idea or the development like its "ours", so.. people can ask for w/e they want really
11.06.18 11:10:36<stoopkid> be demanding about your nomics :)
11.06.18 11:13:57<stoopkid> the way people should participate in it is by playing the nomic, both pre- & post-genesis
11.06.18 11:14:28<nilli> well it might take ohad a long time to get to what he see as good enough and he might even change some major parts again if we will see that is not doing what he things it should do
11.06.18 11:15:00<nilli> he will
11.06.18 11:15:42<stoopkid> i don't have a problem with him taking a long time or changing his plan in major ways, but i have a hard time even believing that he's operating in good faith
11.06.18 11:15:59<nilli> but also HMC is at it (his project) for years. much longer then ohad :)
11.06.18 11:17:05<stoopkid> sure we'd be kind of hypocritical to complain about the duration of his dev-work
11.06.18 11:17:40<nilli> he is operating in good faith. I am cretin of that
11.06.18 11:18:23<nilli> but from this point on its not my concern anymore
11.06.18 11:19:09<nilli> I have no obligations left to his project or him
11.06.18 11:19:18<nilli> and i have nothing to lose or gain
11.06.18 11:20:15<stoopkid> well, that's probably a relief :)
11.06.18 11:20:23<nilli> yes
11.06.18 11:20:30<stoopkid> so the question is really: what do you want now?
11.06.18 11:22:55<nilli> lol.... for myself..... its the best question you could ask
11.06.18 11:28:01<nilli> I guess pretty much do the same in terms of flowing up and  questions all sort of things. maybe learn a few things along the way, but all that without feeling that I need to prove anyone anything
11.06.18 11:31:41<stoopkid> well, if you're learning proof theory you might need to do a couple proofs along the way :P
11.06.18 11:31:52<nilli> lol
11.06.18 11:34:50<stoopkid> anyway i'm gonna work on some stuff but yea as always feel free to ask anything about the project
11.06.18 11:35:43<nilli> I am actualy dealing with one proof which prove that bootstrapping in the one fundamental proof for all the tower of logic based proof we build on top of it
11.06.18 11:37:24<stoopkid> hm
11.06.18 11:38:13<nilli> its really interesting .
11.06.18 11:39:16<nilli> I was pointed to these most contemporary thinking in QM  that view physics it self as a logic system
11.06.18 11:40:48<nilli> thus, my conclusion is that the only concrete "being" of anything is the parallel to what an axiom is in mathematics
11.06.18 11:42:25<nilli> but that axiom unlike mathematics have to be set in consensus which activate the communication infrastructure which transfer information
11.06.18 11:42:40<nilli> in sort it have to be a working system
11.06.18 11:44:24<nilli> it have to "prove" it self as true by become bootstrapped.
11.06.18 11:45:07<nilli> now ofc a "centralized" quality of being can be forced
11.06.18 11:45:27<nilli> but the whole test for "real" is free choice
11.06.18 11:45:45<nilli> which means decentralized
11.06.18 11:46:10<stoopkid> hrm.. i'm not following exactly; let's take a concrete example like... my cup of coffee here for instance
11.06.18 11:46:57<stoopkid> it appears to me to have a concrete "being"; not sure whether i'd consider this to be parallel to "what axioms are in mathematics"
11.06.18 11:47:07<nilli> free choice by the way is another result of QM . contemporary researcher come to conclusion that  "free choice" constitute our reality
11.06.18 11:48:05<nilli> you cup of coffee is like any *is* of your program . it a name
11.06.18 11:48:44<nilli> it create meaning as a history
11.06.18 11:49:22<nilli> now you could say that there is something and that something is not virtual
11.06.18 11:50:26<nilli> however in order to share that experience of something we have to form a way for us to communicate and agree
11.06.18 11:51:57<nilli> that is since you are a local expression of the universe and so am I. you and I are not one. thus we do not experience things together the same
11.06.18 11:55:57<stoopkid> "we have to form a way for us to communicate and agree" from what i can tell we actually need to already have a built-in means of communication, and what we "form" is just more complex abstractions on top of that
11.06.18 11:56:25<nilli> this separation between the ones is constituting existence of *is* that is not infinite one
11.06.18 11:57:10<nilli> and that is the one first meaning we need to have of *one* that is not infinite
11.06.18 11:59:07<nilli> I have to acknowledged you and you have to knowledge me in order to communicate and agree. and aknowledgin itself is the first act of communication and agreement
11.06.18 11:59:33<nilli> that mutual act is a bootstrapping act
11.06.18 12:00:13<stoopkid> seems reasonable
11.06.18 12:03:36<nilli> now if you are able to translate it to a program then you will create a proof that any state of your chain will eventually reach and agree. the most complex logical context will be resolved at acknowledgment
11.06.18 12:04:05<nilli> (in a way I dont really understand what I  just said)
11.06.18 12:05:42<nilli> but eventualy if a look at it in terms of smart contract , contradiction  will result in both parties having to acknowledged each other
11.06.18 12:06:07<nilli> and reconstitute the agreement
11.06.18 12:06:21<nilli> they will not be able to run away with one side wining
11.06.18 12:07:18<stoopkid> ideally people won't even be able to make contradictory smart-contracts in the first place
11.06.18 12:11:09<nilli> .... yes I guess that is what you premise is. but I wonder if it can be achieved only by being set on such fundamental structure as I describe (again not really sure what im saying)
11.06.18 12:11:19<nilli> anyway back to earth
11.06.18 12:11:46<HMCa> hi
11.06.18 12:12:06<nilli> hello HMCa
11.06.18 12:12:42<nilli> what do you think?
11.06.18 12:12:50<HMCa> about which?
11.06.18 12:13:01<nilli> you choose
11.06.18 12:13:27<stoopkid> nilli: well, there's something related that you can do within type theory that i can go over with you; basically you can describe a theory without *asserting* that theory
11.06.18 12:13:49<HMCa> I think it is "easy to make people believe a lie, and hard to undo that work again"
11.06.18 12:13:58<HMCa> (--Mark Twain)
11.06.18 12:14:30<stoopkid> we only want consistent *assertions*, but we can package our theories under hypotheticals and then we don't care if they contradict other hypotheticals we just adjust the hypotheticals
11.06.18 12:15:32<HMCa> I think we should distinguish between "a self-contradictory contract" and "contradictory contracts" - this is important given the structure of AN
11.06.18 12:15:33<stoopkid> that's basically how both science & natural lang interpretation work, really, and why they break down when you try to assert their theories as axiomatic
11.06.18 12:15:54<nilli> HMCa. we favor trust since it allow to jump start a system. and yes fixing is expensive
11.06.18 12:15:57<HMCa> I think I shoukd refuse to return to any planets and rrmain free floating in space
11.06.18 12:16:09<nilli> stoopkid interesting
11.06.18 12:17:16<nilli> HMCa if you could only do that.....
11.06.18 12:19:43<HMCa> self-contradiction should be "unexpressible in the first place" within any context of the construct
11.06.18 12:19:51<nilli> there, (between planets) even thinking is doing
11.06.18 12:20:23<HMCa> thinking is a form of doing, even on planets
11.06.18 12:21:03<stoopkid> i need to do another TPTP problem it's getting embarrassing linking the same example over and over XD https://github.com/sto0pkid/CategoryTheory/blob/master/Agatha2.agda#L96
11.06.18 12:22:34<stoopkid> between lines 96-155 i've described basically a very crude "scientific theory"
11.06.18 12:22:37<HMCa> contradictory contracts may arise between 2+ contexts, but the contradiction should never be able to pervade the system - some shared ancestor should always assert a winner (even if only via the great coinflip at root hash)
11.06.18 12:23:46<stoopkid> HMCa: contradictory contracts between 2+ contexts or contradictory contracts between 2+ branches of the same context?
11.06.18 12:24:04<nilli> yes...eventualy we get to coinflip
11.06.18 12:25:12<HMCa> stoopkid: within one context only one-or-the-other branch "eventually ends up expressed"... I do mean expressions between 2+ contexts.
11.06.18 12:25:36<nilli> thus the root is coinflip based which means it is arbitrary
11.06.18 12:26:08<HMCa> not entirely arbitrary, exactly
11.06.18 12:26:33<stoopkid> how would distinct contexts contradict each other?
11.06.18 12:27:24<stoopkid> (in any way that needs to be "resolved", that is)
11.06.18 12:27:26<nilli> not arbitrary but randumness
11.06.18 12:27:49<nilli> randomness is the proof for consciousness being
11.06.18 12:27:59<stoopkid> not random either, more like semi-disinterested majority vote
11.06.18 12:28:37<stoopkid> which might sometimes just appear as though it might as well be a random coin-flip
11.06.18 12:29:23<stoopkid> (all the moreso because of PoW)
11.06.18 12:29:57<nilli> Randomness can not be proven.  you can define randomness only relative to something else. Randomness is relative not absolute. counterfactual The determinism of randomness
11.06.18 12:30:52<nilli> all are statement that we realized from QM
11.06.18 12:31:32<HMCa> stoopkid: viewed entirely within the framework, they wouldn't... but before an ancestor does arbitrate the dispite they may contradict when viewed extralogically
11.06.18 12:31:56<HMCa> iow users will sometimes "need to *wait* for truth to be established"
11.06.18 12:32:08<HMCa> *dispute
11.06.18 12:32:31<HMCa> which is true of btc as well ofc
11.06.18 12:32:43<HMCa> "0 confirm tx" is always a lie
11.06.18 12:32:56<stoopkid> what can they even dispute over? they can't contradict their parent contexts at all, and they're basically isolated from sibling contexts
11.06.18 12:33:17<stoopkid> well, in btc it's what i was saying: there's only contradiction between branches of a single context
11.06.18 12:35:27<stoopkid> nilli: true, i guess i should say "not any more or less random than crowd-sourced user input"
11.06.18 12:36:42<HMCa> imagine a context A defines apples, a context B refines "all apples are red" and a context B refines "some apples are green"... and imagine A is structured to combine theories of B and C... before it does this combination, the system is inconsistent when viewed extralogically.  After combining, one or the other of B and C is only partially propogated into A, in order for A to remain consistent
11.06.18 12:36:57<HMCa> *context C refines "some..."
11.06.18 12:38:34<stoopkid> why is the system inconsistent?
11.06.18 12:40:38<stoopkid> i guess i see what you mean that a parent context can make itself inconsistent with a subcontext, effectively making that subcontext disappear
11.06.18 12:41:12<HMCa> possibly but not necessarily making the subcontext disappear
11.06.18 12:41:22<nilli> ok that is the latest sentance in my conversation regarding our ability to prove any logical based proof which get us into  a loop (assuming what I just wrote above).
11.06.18 12:42:54<HMCa> A could either decide to "invalidate" B/C, or it may merge what C says directly and merge an amended B which includes "only when reasoning within B, but not C, do only red apples exist"
11.06.18 12:43:05<HMCa> etc
11.06.18 12:43:06<nilli> " we need to bring in a dependency in context in order to get out the loop we get in using logic alone"
11.06.18 12:43:14<HMCa> A has options. :-)
11.06.18 12:43:32<stoopkid> HMCa: gotcha
11.06.18 12:44:28<HMCa> the key point, however, is that A, B, C are each, at any given moment, when viewed either internally or externally, are *self*-consistent
11.06.18 12:46:19<HMCa> meaning A never has to "guess at" the meanings of either B or C
11.06.18 12:47:08<HMCa> B is consistent with B under A, and C is consistent with C under A, and B is consistent with A, and C is consistent with A... the whole time
11.06.18 12:48:02<HMCa> they all agree that apples exist, and A can never choose to have apples be both only red and also sometimes green.
11.06.18 12:48:56<HMCa> the most it can do is defer the question to *its'* parent.
11.06.18 12:49:34<HMCa> whig eventually may result in deferance to root, which does the hashlotterycoinflip resolution
11.06.18 12:50:39<nilli> So the contradicting B and C are the one that are more fundamental eventualy. not A
11.06.18 12:51:30<nilli> you have to drag them to the root
11.06.18 12:51:45<HMCa> you don't *have* to...
11.06.18 12:52:27<HMCa> again, A has options... and even B/C have options, they may have mechanism to resolve their inconsistency before A steps in to do the merge
11.06.18 12:52:29<nilli> as long as they do not put together
11.06.18 12:52:37<stoopkid> it's fine for B and C to contradict each other if they're distinct subcontexts and one is not the ancestor of the other
11.06.18 12:52:46<HMCa> ^right
11.06.18 12:53:02<nilli> ok
11.06.18 12:53:09<nilli> but they may not
11.06.18 12:53:35<nilli> they can reach a point of disagreement
11.06.18 12:53:46<nilli> contradiciton
11.06.18 12:54:07<HMCa> right, they may or may not have pre-existing structure to resolve "amongst themselves" before A steps in
11.06.18 12:54:43<HMCa> children fight, and sometimes the parent must seperate them and other times the parent never even becomes aware that there was ever dispute
11.06.18 12:54:45<nilli> so in fact A is the one that force them to root?
11.06.18 12:55:22<nilli> if they make it to A then they must face root
11.06.18 12:55:26<HMCa> yes, A chooses whether or not to call up a grandparent to make the call
11.06.18 12:56:02<nilli> now it we add energy into the equation it all make sense
11.06.18 12:56:26<nilli> much more energy is requiers to get to root
11.06.18 12:56:37<HMCa> if they make it to A then they risk making it to face root
11.06.18 12:56:46<HMCa> they don't necessarily face root
11.06.18 12:56:58<HMCa> either A resolves it or defers to above
11.06.18 12:57:16<nilli> and resolution is better acheved at the right cost/
11.06.18 12:57:25<HMCa> ^THIS
11.06.18 12:57:27<stoopkid> or does nothing (so long as this doesn't affect its own self-consistency)
11.06.18 12:57:35<HMCa> *cost* is key
11.06.18 12:57:55<HMCa> it is ideal for everyone to minimize what needs to be settled by coinflip
11.06.18 12:58:19<HMCa> the further up the tree you go, the more expensive "deciding the truth and settling the matter" becomes overall
11.06.18 12:58:38<nilli> so what is then different in ethereum
11.06.18 12:58:49<nilli> the tree?
11.06.18 12:58:53<HMCa> root chain will hopeully be the most expensive coinflipping machine in history :-)
11.06.18 12:59:07<HMCa> ethereum is "single context"
11.06.18 12:59:32<nilli> it have to take every conflict to root right?
                 <HMCa> one giant world, instead of a tree of world compositions
11.06.18 12:59:43<nilli> ok I got it
11.06.18 12:59:48<HMCa> eth "only has a root"
11.06.18 13:00:15<nilli> yes
11.06.18 13:00:29<HMCa> *everything* on eth is (asymptotically increasingly) expensive to resolve ;-)
11.06.18 13:00:37<stoopkid> and that root is a non-nomic pay-to-play context
11.06.18 13:01:03<HMCa> (which is all fundamental to the "eth death spiral" problem, heh)
11.06.18 13:02:41<HMCa> and is related to why it is a "super-re-computer with the speed of a single slowest node"
11.06.18 13:02:57<nilli> So the tree structure , how is it related to Turing complete
11.06.18 13:03:55<HMCa> nilli: in order to "do this resolution process" at all we must first be able to assert self-consistency with a context, and compositiinal consistency along a single line of ancestry
11.06.18 13:03:59<HMCa> iow:
11.06.18 13:04:15<HMCa> 6 < HMCa> meaning A never has to "guess at" the meanings of either B or C
11.06.18 13:04:16<HMCa> 7 < HMCa> B is consistent with B under A, and C is consistent with C under A, and B is consistent with A, and C is consistent with A... the whole time
11.06.18 13:04:41<nilli> I see
                 <HMCa> ^ in order to assert that, we must throw TC "at any given moment" away
11.06.18 13:05:50<HMCa> (we can recover it over time, by simulating it across states over time, but that is really beside the point here)
11.06.18 13:09:43<stoopkid> nilli: note how the exchange mechanism i described to you is basically a program whose execution happens over the course of multiple blocks/states, rather than happening all at once in a single block/state
11.06.18 13:09:55<nilli> then back to the rules of the root: the only rule we need is that randomness is proven
11.06.18 13:09:56<nilli> lol
11.06.18 13:10:36<stoopkid> ofc the reason for spreading it across multiple blocks for that example wasn't because we needed turing-completeness, but turing-completeness can be achieved the same way
11.06.18 13:10:38<HMCa> ^ iow root "should always strive to be as non-controversial as possible" to "do" as little as possible
11.06.18 13:10:43<HMCa> @nilli
11.06.18 13:10:44<nilli>  that is really funny since we are right back into creyptography and prime numbers
11.06.18 13:10:57<HMCa> :-)
11.06.18 13:11:29<nilli> only that in root we make it that way
11.06.18 13:11:36<HMCa> "funny" yes... almost like pi/primes necessarily always decide our fate anyway...
11.06.18 13:11:43<HMCa> XD
11.06.18 13:12:00<HMCa> fractals! ;-)
11.06.18 13:12:01<stoopkid> you can define a turing-machine state that gets held on each block, and you can define a single step of a turing-machine that will execute on each block, and you make a contract that asserts: turing-state(current-block) == turing-step(turing-state(previous-block))
11.06.18 13:12:12<nilli> we can then say that our root is as trusted as primes
11.06.18 13:12:45<nilli> that is a good, really really good
11.06.18 13:12:53<stoopkid> randomness/coinflip is likely to be rather controversial still tbh
11.06.18 13:13:00<nilli> I think we can make everyone put thier trust in that
11.06.18 13:13:20<stoopkid> we literally just dealt with this in the 2016 US elections
11.06.18 13:13:33<nilli> no stoopkid as last resort is perfect'
11.06.18 13:13:53<nilli>  as long as setup as last resort
11.06.18 13:14:01<nilli> not first like ethereum
11.06.18 13:14:13<nilli> that is the key to autonomic
11.06.18 13:14:29<stoopkid> in the US it looks like it's basically just causing opposing sides of the coin-flip to fork away from each other because of the pointlessness of the game
11.06.18 13:15:06<nilli> its like creating a system in which fliping a coin is most expensive act
11.06.18 13:15:15<HMCa> we can say that it is possible to be as truatable as primes, but is not necessarily so - people could still fubar things up with biased rules in root that make it less true
11.06.18 13:15:26<nilli> in life that is a state of hysteria
11.06.18 13:15:34<HMCa> the idea is to have any such bias be "obviously not there"
11.06.18 13:15:37<nilli> very very expansive state
11.06.18 13:15:47<nilli> but nesesery at time
11.06.18 13:15:52<HMCa> and to have it be highly visible if any such bias is introduced
11.06.18 13:16:23<stoopkid> it's also more like semi-randomized majority vote than it is like a coin-flip; if nearly the whole world agrees on how the dispute should be resolved, then we can be pretty much guaranteed which way the "flip" is gonna land
11.06.18 13:16:55<HMCa> yes, it is a weighted coinflip
11.06.18 13:17:22<HMCa> we don't claim to solve byzantine generals any more than satoshi did. ;-)
11.06.18 13:20:00<nilli> only to apply to any context
11.06.18 13:20:49<nilli> we can calim that we bring all context to byzantine general state and resolve it as satoshi allready idi
11.06.18 13:20:57<nilli> did
11.06.18 13:21:18<nilli> all problematic context
11.06.18 13:21:34<nilli> unresolved context
11.06.18 13:22:18<HMCa> we also don't claim to solve it any less
11.06.18 13:22:25<HMCa> yes, all we do is generalize
11.06.18 13:22:47<HMCa> satoshi's work is only "one specific currency"
11.06.18 13:23:06<HMCa> our work is "nothing particularly specific" but otherwise the same work
11.06.18 13:23:18<nilli> it like reducing all problems in the word to one problem that we know how to resolve for sure
11.06.18 13:23:21<HMCa> this is why we say virtually everything that we do is prior art
11.06.18 13:23:43<nilli> in the world
11.06.18 13:23:55<stoopkid> nilli: many of the problems in the world anyway, or at least that's the hypothesis
11.06.18 13:25:18<HMCa> the only "distinct, new problem" that we tackle is "a mechanism for specializations to all coexist soundly"
11.06.18 13:25:51* HMCa afk for a few
11.06.18 13:26:21<nilli> any problem start its journey down our tree and will end up as a coinflip resolved based on bizantine problem
11.06.18 13:27:21<nilli> its imprtant to understand where the byzantine resolution step in. its not at the logic level its at the consensus of the network level
11.06.18 13:27:45<nilli> you should define it for me
11.06.18 13:28:09<stoopkid> well, any *dispute* could, as long as the dispute can be formally defined, but not every dispute could be formally defined really and not every problem has the form of a dispute
                 <nilli> rational act is inveolved
11.06.18 13:28:25<nilli> it can work only for rational actors
11.06.18 13:29:26<stoopkid> "its not at the logic level its at the consensus of the network level" arguably that's only because we've artificially limited our definition of "the logic level"
11.06.18 13:30:04<nilli> ok I need to move on too. was a very important conversation I think. get us much closer to something. let's keep refine it.
11.06.18 13:31:12<stoopkid> alright, i need to work on some other things too; trying to simplify some of my programming tasks so that i can start making faster progress
11.06.18 13:31:20<nilli> " we've artificially limited our definition of "the logic level" <--- sound right can you explain better what you mean
11.06.18 13:31:52<nilli> we basicly set a floor
11.06.18 13:32:00<nilli> a limit
11.06.18 13:32:21<nilli> that is the most important mechanism of all
11.06.18 13:32:33<stoopkid> ah, well, once somebody takes into account the mechanism by which the byzantine general's problem is resolved, this mechanism could be added as part of the description of what "the logic" even is
11.06.18 13:32:38<nilli> a consistent limit
11.06.18 13:33:11<nilli> <stoopkid> ah, well, once somebody takes into account the mechanism by which the byzantine general's problem is resolved, this mechanism could be added as part of the description of what "the logic" even is
11.06.18 13:33:16<nilli> that exactly
11.06.18 13:33:24<nilli> it become part of the logic itself
11.06.18 13:35:08<stoopkid> usually we don't frame things in those terms though, mainly because it's an unfamiliar way for most people to look at it i think (including me a lot of the time)
11.06.18 13:35:57<stoopkid> because a subset of this more general is logic is another logic that already exists, and the rest of the features like the solution to the byzantine general's problem aren't what people typically think of as "logic", for whatever reason
11.06.18 13:36:59<stoopkid> this more general logic*
11.06.18 13:38:05<stoopkid> like MLTT is quite obviously "logic"; decentralized PoW consensus otoh, people have to loosen up their assumptions about what "logic" can be in order to fit that into their conceptions of it
11.06.18 13:39:52<stoopkid> (this is along the same lines as why we don't assert that there's any strict distinction between mathematical & non-mathematical)
11.06.18 13:42:00<stoopkid> but i've actually been working some to refine the description of the entire system into something that "looks" more like what we normally think of as "logic"
11.06.18 13:44:47<stoopkid> funny, "loops" seem to actually have a lot to do with it... there's a strong relation between general computation and logical paradox
11.06.18 13:45:09<nilli> ok. must go see will continue later
11.06.18 13:45:34<stoopkid> sounds good, cya later
11.06.18 13:49:39*** Quit: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109) left #AutoNomic: Ping timeout: 260 seconds
11.06.18 14:23:59<stoopkid> so, it's relatively straightforward for me to pick and choose some basic computational primitives that allow me to express arbitrary algorithms with fully precise semantics that allow me to rigorously verify things about their behavior; like i can just take subleq and then improve usability from there by adding things like bitwise and/or/not, other conditionals, etc.. add higher-level abstractions like if-statements and
                 <stoopkid> for-loops, data-structure definitions, all the simple standard stuff from imperative languages
11.06.18 14:26:53<stoopkid> what's less straightforward for me is fitting this into a complete execution & user environment
11.06.18 14:29:12<stoopkid> like, verified programming on Linux.. i don't really know anything about it; verified programming in Python or C++ or even x86, i don't know anything about it
11.06.18 14:29:53<stoopkid> but all those things specify standards about how execution & user-interaction will work
11.06.18 14:30:30<stoopkid> (making them convenient to just use directly)
11.06.18 14:32:57<stoopkid> but to write code intended to run on Linux, it's gotta do everything through the syscall interface, ruining the simple semantics
11.06.18 14:33:21<stoopkid> and making them potentially ambiguous
11.06.18 14:37:07<stoopkid> i still don't really have any great solution to this
11.06.18 14:38:19<stoopkid> i can describe things in a non-executable, but well-defined language that uses my own ad hoc description of an execution & user-interaction environment, such that the algorithms described can be rigorously verified
11.06.18 14:38:48<stoopkid> or i can write executable pseudo-code that has absolutely no guarantees of working at all, on anybody's computer, at any time
11.06.18 14:39:38<stoopkid> but which might express the intention well enough that people who read the code can at least know what it's "supposed" to be doing, regardless of whether it's actually doing that
11.06.18 14:40:53<stoopkid> i could also do both, and indicate in the "executable pseudo-code" which parts of the non-executable-but-precisely-defined code the different pieces match up with
11.06.18 14:42:31<stoopkid> i'm not aware that i'm capable of making anything that's rigorously verifiable and executable such that we're guaranteed that the thing that does end up executing is actually the thing that was rigorously verified
11.06.18 14:48:13<koo5[m]> got an example?
11.06.18 14:49:05<stoopkid> of which?
11.06.18 14:51:17<koo5[m]> Of some algorithm that would show this issue
11.06.18 14:51:56<stoopkid> in most programming languages, i would have this issue with every algorithm
11.06.18 14:52:35<stoopkid> other people who know the exact compilation / interpretation semantics might not have the same issue
11.06.18 14:53:57<stoopkid> best i can do in most programming languages is "i don't see anything wrong yet and so far my unit tests are passing"
11.06.18 14:55:55<stoopkid> even Agda, i assume i know pretty well how it's "supposed" to be interpreted, at some level of abstraction; whether or not that's actually what happens in all cases on my machine though is another matter
11.06.18 14:59:54<koo5[m]> dont forget cosmic rays
11.06.18 15:01:23<koo5[m]> It would be cool to try to compile a program to do everything twice or something
11.06.18 15:03:28<koo5[m]> Nilli, i guess thats bad news for me and mine and stoops engagement with the project. Do you really want those mobsters to push you like that?
11.06.18 15:04:53<stoopkid> well, imo the bad news was the actual state of the AGRS token
11.06.18 15:07:38<koo5[m]> But that could be temporary, in the long run
11.06.18 15:08:57<stoopkid> still bad news for our engagement with the project, since we don't know when or even if it will return to exchanges & let alone its previous price
11.06.18 15:10:06<koo5[m]> Idk, could do something else for a few years, then get back to it
11.06.18 15:11:06<stoopkid> well, yea, but potentially needing to do that is what the bad news is imo heh
11.06.18 15:14:09<koo5[m]> idk, guess im just in good mood tonight
11.06.18 15:17:58<koo5[m]> Im grateful that i had the chance to learn a couple of things
11.06.18 15:20:14<stoopkid> i'm gonna see what i can do about finding us other sources of funding, but, don't get your hopes up, you know i have a high capacity for getting stuck in rabbit-holes and a low capacity for professional networking :)
11.06.18 15:22:44<koo5[m]> I should start browsing upwork again
11.06.18 15:23:07<koo5[m]> Like, there was a guy actually asking for stuff done with gf
11.06.18 15:23:12<stoopkid> tbh it would probably make more sense if funding for development was provided by crowd-funding bounties for specific tasks
11.06.18 15:24:39<stoopkid> interesting, i should that out again as well.. jobs in my area of expertise are in limited supply :)
11.06.18 15:26:30<koo5[m]> Nilli, im also grateful because this was a chance for me to try a different style of work, and a great way to get away from a job where i wasnt 100% happy
11.06.18 15:27:11<koo5[m]> If we can define meaningful tasks, sure
11.06.18 15:28:22<koo5[m]> "pleasr blend n3 with mltt" isnt probably gonna catch the interest of those who would be capable of doing it
11.06.18 15:32:39<koo5[m]> Which is probably the best i could reproduce the ideas
11.06.18 15:32:46<stoopkid> i think the bigger issue would be that it wouldn't catch the interest of those who would be capable of funding it; i think if the task had a $ sign next to it it would attract interest from people potentially capable of doing it even if it's only vaguely specified
11.06.18 15:34:20<stoopkid> a couple more meaningful tasks might be: implement N3 existentials & e:findall in our univar inferencer
                 <koo5[m]> Good point
11.06.18 15:37:47<koo5[m]> you should probably try to describe how existentials should work to me
11.06.18 15:37:53<koo5[m]> And findall seems trivial
11.06.18 15:38:07<stoopkid> possibly the most meaningful task that could be done at this stage would be to choose an implementation language based on demonstration that its semantics are precisely specified and easily understandable, or even just "by consensus"
11.06.18 15:38:26<koo5[m]> Or if yap or something has them, i should be able to figuelre it out
11.06.18 15:38:30<stoopkid> findall does seem trivial, except idk what ?scope & ?span are supposed to do
11.06.18 15:39:05<stoopkid> and i don't understand exactly how it relates to expressing our natural deduction rules, but at least the implementation in N3 minus the ?scope & ?span part does seem trivial yes
11.06.18 15:40:25<stoopkid> s/in N3/in univar or whatever/
11.06.18 15:41:21<stoopkid> i'm less sure about existentials
11.06.18 15:44:04<koo5[m]> idk, my mental stack is finishing the visualizer and making pyin pass all tests without lists
11.06.18 15:48:29<koo5[m]> Idk, choosing an implementation language seems like a luxury
11.06.18 15:50:51<stoopkid> seems like the other way around imo, i.e. something that's done due to lacking the luxury of an already given language with precisely-defined semantics
11.06.18 15:58:25<stoopkid> but like i said, an alternative is to just write an executable demonstration of our intentions in whatever language, and then provide a separate description of what we intend the semantics to actually be
11.06.18 16:00:52<koo5[m]> Sounds good
11.06.18 16:07:27<stoopkid> https://pastebin.com/JPrqVUzq
11.06.18 16:11:32<stoopkid> https://pastebin.com/0amAxtET
11.06.18 16:12:46<stoopkid> so as you can see from these two pastes, i have literally no idea how existentials are actually "supposed" to work in N3 inferencing
11.06.18 16:16:55<stoopkid> i think this has something to do with skolem functions
11.06.18 16:18:01<stoopkid> like {?x a Nat} => {?x suc ?y} is like "forall ?x, exists ?y, such that ((?x a Nat) ->  (?x suc ?y))"
11.06.18 16:18:29<stoopkid> we can eliminate the exists quantifier with a skolem function, let's call it `s`
11.06.18 16:18:50<stoopkid> and we get "forall ?x, (?x a Nat) -> (?x suc s(?x))"
11.06.18 16:19:50<stoopkid> i.e. for each ?x, the function `s` will generate the blank-node that's asserted to exist in the `suc` relation to ?x
11.06.18 16:22:40<stoopkid> eliminating the forall quantifier as implicit, we get nearly our standard N3 syntax: (?x a Nat) -> (?x suc s(?x)), or {?x a Nat} => {?x suc s(?x)}
11.06.18 16:27:53<stoopkid> but when you match against rule #3 with _:b1 a Nat for some blank-node _:b1 such that _:b1 = s(_:b0) how do we know to bind ?x with _:b0 ?
11.06.18 16:33:23<koo5[m]> Err
11.06.18 16:35:08<koo5[m]> maybe why i said i dont think you can do it like this, and need to use some data structures
11.06.18 16:35:41<koo5[m]> Its like, all you can do like this is to non-constructively assert that something exists
11.06.18 16:39:53<koo5[m]> Like, {(suc ?x) a nat} <= {?x a nat}
11.06.18 16:41:45<stoopkid> https://pastebin.com/MNfd9hE1
11.06.18 16:44:12<stoopkid> note the relationship between what's in this paste & what you're doing there with (suc ?x), you're basically using (suc _) as the skolem function
11.06.18 16:45:56<koo5[m]> idk, its more like youre pulling a skolem function out of your ass
11.06.18 16:47:34<stoopkid> well, i am, i never defined what the skolem function `s` actually is, we just know how it should behave: it should be injective and its output should be disjoint from the rest of the nodes in the KB
11.06.18 16:47:43<koo5[m]> Or, skolem functuons in general just seem like something ass-pulled. Come on, it doesnt even have a descriptive name
11.06.18 16:48:56<stoopkid> (suc _) is injective and its output is disjoint from the rest of the nodes in the KB, so it ends up being a skolem function
11.06.18 16:49:41<stoopkid> well, they are ass-pulled until we can actually define them, but this is one of the ways they can actually be defined
11.06.18 16:50:09<stoopkid> it's basically like constructors in Agda types; suc is essentially a skolem function there
11.06.18 16:50:30<koo5[m]> Ok
11.06.18 16:50:48<stoopkid> it just maps "x" to "x with 'suc' stuck in front of it"
11.06.18 16:52:46<koo5[m]> Cant we just call these things terms? Atoms and.compound structures?
11.06.18 16:57:53<stoopkid> well, maybe... there's the whole thing about how HMC & the N3 folks seem to think that all we need are atomic terms and triples between them (i.e. internalized lists supposedly have an interpretation in terms of pure triples)
11.06.18 17:03:53<stoopkid> there's "{[suc ?x] a Nat} <= {?x a Nat}" but this supposed to just desugar to "{?y suc ?x. ?x a Nat} <= {?x a Nat}"
11.06.18 17:05:45<stoopkid> and "{(suc ?x) a Nat} <= {?x a Nat}" is supposed to desugar to "{?y1 first suc. ?y1 rest ?y2. ?y2 first ?x. ?y2 rest nil. ?y1 a Nat} <= {?x a Nat}"
11.06.18 17:08:07<stoopkid> but afaict you're exactly right about the inferencer needs to be working with, i.e. internally at least it somehow needs to store ?y = (suc ?x) in a way that we can verify
11.06.18 17:09:21<stoopkid> err, in such a way that when match "_:b0 a Nat" with this rule, it can only succeed by using the value of ?x such that _:b0 is what you get when applying the `suc` skolem-function to ?x
11.06.18 17:13:22<stoopkid> iow: i think you're exactly right as far as what the inferencer needs to have available in order to interpret existentials correctly, but i still have to understand how this aligns with the actual N3 semantics
11.06.18 17:22:42<stoopkid> so i think we need to distinguish between the successor relation/pred and the successor skolem-function that we create internally for it
11.06.18 17:23:23<stoopkid> "{?y suc ?x. ?y a Nat} <= {?x a Nat}" desugars to two different rules "{?y suc ?x} <= {?x a Nat}" and {?y a Nat} <= {?x a Nat}"
11.06.18 17:24:33<stoopkid> in the "{?y a Nat} <= {?x a Nat}" rule, how can ?x and ?y be related together correctly? by using the same skolem-function we use in the rule "{?y suc ?x} <= {?x a Nat}" rule
11.06.18 22:01:09<stoopkid> HMCa: can you show me documentation where all of this is explicitly defined?
11.06.18 22:01:22<stoopkid> would be nice if it was defined here: https://arxiv.org/pdf/0711.1533.pdf
11.06.18 22:01:27<stoopkid> but no that would've made too much sense
11.06.18 22:02:15<stoopkid> let's start with the existence of lists
11.06.18 22:02:23<stoopkid> we get an axiom "(?X)."
11.06.18 22:03:07<stoopkid> ok what does this mean: {} => {?L rdf:first ?X. ?L rdf:rest rdf:nil}
11.06.18 22:03:18<stoopkid> ok so both ?L and ?X are existential variables
11.06.18 22:03:48<stoopkid> so i can query (?what). and it should satisfy with _:b0 rdf:first _:b1. _:b0 rdf:rest rdf:nil
11.06.18 22:04:37<stoopkid> but wait what about the query "( 1 )"
11.06.18 22:04:54<stoopkid> this should satisfy with _:b0 rdf:first 1. _:b0 rdf:rest rdf:nil
11.06.18 22:04:58<stoopkid> ok all well and good so far
11.06.18 22:05:25<stoopkid> but wait, what about the query "asldkfjasd rdf:first 1. asldkfjasd rdf:rest rdf:nil" ?
11.06.18 22:05:52<stoopkid> if 1 could bind with ?X, then there's no obvious reason why asldkfjasd shouldn't be able to bind with ?L
11.06.18 22:06:23<stoopkid> so it works, query succeeds, asldkfjasd rdf:first 1, and sldkfjasd rdf:rest rdf:nil
11.06.18 22:07:11<stoopkid> so, "0 suc ?x. ?x rdf:first ?y. ?x rdf:rest rdf:nil" succeeds
11.06.18 22:07:54<stoopkid> doesn't make any sense
11.06.18 22:08:55<stoopkid> we've already proven that none of the euler implementations work, so please don't say "like euler"
11.06.18 22:10:58<stoopkid> so, please show me documentation that clearly and explicitly defines the semantics, otherwise i'm gonna have to scrap the entire plan
11.06.18 22:13:33<stoopkid> if the N3 / W3C folks don't have it, then write it :/
11.06.18 22:17:22<stoopkid> if i had any idea whatsoever as to how it should work, then probably the entire project would be done years ago, but i don't
11.06.18 22:18:15<stoopkid> but we're not doing the p63 game again... if it ends up back to that then i'm off the project
11.06.18 22:33:43<HMCa> are you asking about existentials, asking about lists, or both?
11.06.18 22:34:44<stoopkid> iiuc if we solve the existentials problem we solve the lists problem unless there's other undocumented inferencing features i need to be made aware of?
11.06.18 22:35:51<HMCa> you seem to initially ask about existentials, but then go on to confusions wrt lists, some of which don't seem to have anything to do with existentials afaict... let's tackle them one at a time?
11.06.18 22:36:24<stoopkid> let's start with existentials
11.06.18 22:36:57<HMCa> ok, i'm semi-afk for 30-45 minutes before we can really dig in, but... ok...




11.06.18 22:38:25<HMCa> so, first, do you understand the two possible interpretations of a var in head that is not in body?
11.06.18 22:39:15<HMCa> some rdf impls "skolemize them away" - replace with a fixed and unique uri
11.06.18 22:39:50<stoopkid> that doesn't make any sense if there's any vars in the body
11.06.18 22:40:20<stoopkid> but alright, there's one interpretation
11.06.18 22:40:46<HMCa> well, it maybe "doesn't make sense" for a lot of reasons
11.06.18 22:41:24<HMCa> it is simple and intuitive, but doesn't quite correspond to most expectations wrt logic
11.06.18 22:42:04<stoopkid> well, to correspond with skolemization like from FOL this would require interpreting existentials to precede universals
11.06.18 22:42:21<stoopkid> which N3 is at least explicit about doing the opposite
11.06.18 22:43:14<HMCa> even if we "special case" that, there are still some other problems with things like scope
11.06.18 22:43:57<stoopkid> because existentials are always only locally scoped and this would basically make it globally scoped?
11.06.18 22:47:14<HMCa> well, there are special cases for either scoping which will not correspond
11.06.18 22:47:15<HMCa> brb
11.06.18 23:58:46<HMCa> back, sry
11.06.18 23:58:55<HMCa> stoopkid: still around?
11.06.18 23:59:05<stoopkid> yep
11.06.18 23:59:38<stoopkid> and np :)
11.06.18 23:59:46<HMCa> ok, cool
12.06.18 00:05:18<stoopkid> so, got an example of these special cases where that interpretation fails in a way other than what i described?
12.06.18 00:05:29<HMCa> so the other option is to treat the variable as an existential bnode, basically "leaving it as is" but treating it as a distinct variable with each result
12.06.18 00:06:50<HMCa> not offhand, but I know there are examples from the workinggroup materials still around
12.06.18 00:09:18<HMCa> now this second approach is not as conceptually trivial as the simple skolemization, and may ecen be coubter-intuitive at times, but it does keep correspondance to logic
12.06.18 00:11:48<HMCa> the only tricky part about it is ordering it relative to other quantified vars... if we just take quantifications in the order they're encountered it can break the resolution, become undecidable
12.06.18 00:14:01*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
12.06.18 00:14:06<stoopkid> this second interpretation seems to be closer to how i've been trying to interpret it, but, i'm not sure i'm following
12.06.18 00:14:26*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.06.18 00:15:35<HMCa> ok, well what is most unclear so far?
12.06.18 00:17:49<stoopkid> let's start with the ordering of quantifiers, i thought the universals in a rule are just going to precede the existentials, in all cases?
12.06.18 00:18:06<stoopkid> (unless the bnode is used in an axiom, in which case the existential gets scoped to the whole document?)
12.06.18 00:21:58<HMCa> if we just push universals to the outside, we can make undecidable rules pretty easily
12.06.18 00:24:05<stoopkid> got an example?
12.06.18 00:24:28<HMCa> "{?a <p1> ?b} => {?b <p2> ?c}.  {?a <p2> ?b} => {?b <p1> ?c}."
12.06.18 00:27:09<stoopkid> what's the problem with these rules exactly?
12.06.18 00:27:50<stoopkid> looks like it'll just go around a couple times til it hits an ep-check?
12.06.18 00:28:03<stoopkid> s/hits/fails/
12.06.18 00:29:57<HMCa> might not be a good example, but iirc it should circumvent the ep check because ?c is fresh each time the same rule is met
12.06.18 00:30:18<HMCa> maybe i'm remembering incorrectly, it has been awhile now :-)
12.06.18 00:31:17<stoopkid> sounds like a problem with the ep-checking really
12.06.18 00:32:21<stoopkid> i.e. if you don't interpret ?c as a fresh bnode until the rule actually succeeds, then it won't be able to circumvent the ep-check
12.06.18 00:33:27<stoopkid> afaict there wouldn't be a problem with delaying the interpretation of ?c as a fresh bnode until the rule actually succeeds because ?c appears only in the head so it can't propagate into the rest of the proof-search
12.06.18 00:34:53<HMCa> neither rule actually succeeds, though, and has to be taken as fresh to behave as existential...
12.06.18 00:35:09<HMCa> well, ecen if we make one match, like
12.06.18 00:35:33<HMCa> by adding "<a> <p1> <b>." we'll still loop on making fresh ?cs
12.06.18 00:36:46<HMCa> and if we don't make ?c fresh, then we're skolemized and lose the correspondances to fol
12.06.18 00:36:47<stoopkid> it has to be taken as a fresh bnode for the purposes of return the result from a succeeded rule, but not for the purposes of ep-checking when we enter the rule
12.06.18 00:36:49<HMCa> brb
12.06.18 00:36:56<stoopkid> returning*
12.06.18 00:38:17<stoopkid> besides, how can you know "which" bnode it should be until the rule has succeeded and you've bound the universals in the body?
12.06.18 01:00:52<HMCa> do you mean bound the universals in head?
12.06.18 01:03:01<HMCa> well, they are in both ofc, but the problem is wrt the heads... but anyway
12.06.18 01:03:10<stoopkid> i mean if we have {?w a ?x} => {?y a ?z} then ?y and ?z should be skolem-functions on ?w and ?x and so the values of ?y and ?z shouldn't be determined until we have values of ?w and ?x to apply the skolem-functions to
12.06.18 01:03:21<HMCa> I guess I don't know what you mean by "which bnode"
12.06.18 01:04:05<HMCa> "skolem functions" is a misleading thing here, imo
12.06.18 01:05:13<HMCa> in you example the only real result possivle is "[] a []" regardless of what ?w and ?x are
12.06.18 01:07:49<stoopkid> ok let's start with a simpler question: {?x a Nat} => {?x suc ?y. ?y a Nat} should actually correspond to two rules {?x a Nat} => {?x suc ?y} and {?x a Nat} => {?y a Nat} ?
12.06.18 01:08:25<HMCa> well, I saw this from your pastebin, I was going to bring it up, but was trying to work to it
12.06.18 01:12:54<HMCa> if you split a non-universal rule like this, then matching a composite query will produce some surprises... with "0 a Nat" we get "0 suc []. [] a Nat."
12.06.18 01:13:31<HMCa> where what we'd expect is "0 suc [a Nat]."
12.06.18 01:14:10<stoopkid> which can be desugared as "0 suc _:b0. _:b0 a Nat" ?
12.06.18 01:14:40<HMCa> the "expected" desugars to that, yes
12.06.18 01:14:59<stoopkid> and the unexpected desugars to "0 suc _:b0. _:b1 a Nat" ?
12.06.18 01:15:05<HMCa> yes
12.06.18 01:16:38<stoopkid> so what's the query exactly, "0 suc ?what. ?what a Nat" ?
12.06.18 01:17:22<HMCa> for one example
12.06.18 01:18:14<stoopkid> this would give the expected result though because ?what is reused in both query triples
12.06.18 01:18:36<stoopkid> (heh, i say "would" as though i have any idea how a query would actually be carried out...)
12.06.18 01:20:54<HMCa> so maybe this is not a great example either?
12.06.18 01:21:31<HMCa> I guess I'm still failing to see where you're actually not following, maybe
                 <stoopkid> great example of what? my confusion about existentials? i think it's doing just fine so far :P
12.06.18 01:22:02<HMCa> I'm not really so sure? :-)
12.06.18 01:22:55<stoopkid> so in this pastebin, in the 3rd query starting at line 40: https://pastebin.com/JPrqVUzq
12.06.18 01:24:28<HMCa> ok
12.06.18 01:25:23<stoopkid> so the third query triple there succeeds by using 2 as the successor of 0
12.06.18 01:25:24<HMCa> well the result should ofc be like "0 suc [suc []]."
12.06.18 01:25:42<stoopkid> "should"... according to whose semantics?
12.06.18 01:26:07<stoopkid> i mean.. morally i agree but where are the inferencing semantics that allow us to produce this result & just this result?
12.06.18 01:26:34<HMCa> according to the semantics that we just went through...
12.06.18 01:27:43<stoopkid> ok let's try another one: https://pastebin.com/0amAxtET
12.06.18 01:27:46<HMCa> sec, need bathroom break
12.06.18 01:27:50<stoopkid> np
12.06.18 01:32:21<stoopkid> alternatively we can query "?x suc aalsdkfjsad" and yield "0 suc aalsdkfjsad"
12.06.18 01:35:00<stoopkid> given what i think i already understand about N3 inferencing, there's only two ways i can see this failing:
12.06.18 01:35:30<stoopkid> 1) existential vars can't bind to constants coming from the query-side, which leads to other problems which i'll get back to
12.06.18 01:37:06<stoopkid> 2) existential vars can bind to constants coming from the query-side, but once the body succeeds, the existential is bound instead with a bnode produced by a skolem-function applied to the body universals, and if this bnode doesn't match the constant coming from the query-side, then it fails. so far this makes sense to me
12.06.18 01:38:34<stoopkid> the latter makes sense to me particularly in the case where the same skolem-function is used in both rules when we split them up
12.06.18 01:39:16<HMCa> can you restate 2 without using "skolem functions" or other terms outside of lbase/rdf?
12.06.18 01:40:06<stoopkid> i would, but i can't
12.06.18 01:41:32<stoopkid> i could restate it in terms of constructors in type theory if that helps?
12.06.18 01:42:01<HMCa> hrmm, maybe?  Can't hurt to try it?
12.06.18 01:42:05<HMCa> see...:
12.06.18 01:43:58<HMCa> I am worried that you are actually meaning "skolem function" when you say it, and that is a bit of a problem, as it implies a sort of rewrite that we can't meaningfully do within the syntax... iow: what you say implies a rewrite that can't happen on "just quads" from what I understand...
12.06.18 01:45:00<HMCa> also what we want is actually something somehwat between #1 and #2, so... now I begin to see where your confusion is, but not enough to help you avoid it yet...
12.06.18 01:45:26<stoopkid> i am actually meaning skolem function, and i'm not sure what problem it causes, or how to do without them
12.06.18 01:45:56<HMCa> let's start with: those aren't exactly the only 2 options, and what we really should intend is something between them (and much simpler than #2)
12.06.18 01:47:22<HMCa> let's start with: why are you *binding* an existential at all, except after you have already found the query result?  You don't really need to...
12.06.18 01:47:58<HMCa> you can leave it as a distinct anonymous node until the very end
12.06.18 01:48:07<stoopkid> here's an example: "0 suc ?what. ?whatelse suc ?what"
12.06.18 01:48:35<stoopkid> first triple succeeds with 0 suc _:b0, then we query the second triple which should now be ?whatelse suc _:b0
12.06.18 01:49:40<HMCa> uh, hrmm
12.06.18 01:49:52<HMCa> ok, and then?
12.06.18 01:51:17<stoopkid> we match with the rule, ?x = ?whatelse, ?y = _:b0, go into the body and query ?x a Nat and succeed with 0 a Nat, which causes the query triple to succeed with 0 suc _:b0
12.06.18 01:51:37<stoopkid> would you agree with that?
12.06.18 01:59:43<HMCa> not exactly
12.06.18 02:01:26<HMCa> ok, I think I see where you are confused now
12.06.18 02:01:33<HMCa> or at least a part of it
12.06.18 02:02:30<HMCa> you're not only deferring naming your anonymous node... you're actually doing it first thing!
12.06.18 02:02:57<HMCa> doing it last is ideal.  Doing it first is most painful...
12.06.18 02:04:09<HMCa> also, heh, this is probably all my fault for never fully clarifying a particular semantic of bnodes...
12.06.18 02:04:45<HMCa> bnodes can be both subject and object while still being anonymous
12.06.18 02:05:33<stoopkid> ok so according to your interpretation, what should the inferencing steps be here?
12.06.18 02:06:33<HMCa> so imagine we start over with "we match ?x = ?whatelse, ?y = 0!suc"...
12.06.18 02:06:58<HMCa> now I had hoped to never have to get into this syntax
12.06.18 02:07:07<HMCa> but it seems now unavoidable...
12.06.18 02:07:36<HMCa> could also be said "?y = [is suc of 0]"
12.06.18 02:07:37<stoopkid> "0!suc" == "the bnode resulting from applying the `suc` skolem function to the constant 0" ?
12.06.18 02:07:44<HMCa> no
12.06.18 02:07:49<HMCa> no skolem functions here
12.06.18 02:10:22<stoopkid> "0!suc" == "the bnode related to the constant 0 by the `suc` relation" ?
12.06.18 02:10:57<HMCa> more like "some bnode that is the object of a suc relation to the subject 0"
12.06.18 02:11:45<stoopkid> alright
12.06.18 02:11:53<HMCa> your description would not distinguish p!x from p^x which is just further sugar for [p x]
12.06.18 02:12:23<HMCa> these are all actual n3 syntax btw ("paths")
12.06.18 02:13:49<HMCa> so this is not really a skolem function, but not really "allowing binding" from *either* side
12.06.18 02:14:54<HMCa> we just "leave the anonymous node anonymous" (at least until the very end, when we can just rewrite into the query names if want
12.06.18 02:14:58<HMCa> )
12.06.18 02:15:15<stoopkid> alright, following so far
12.06.18 02:15:53<HMCa> that's it, now we proceed from there with ?y represented by this graph instead of some name binding
12.06.18 02:16:17<HMCa> and... well... everything just sort of works out from there.  ;-)
12.06.18 02:16:29<stoopkid> "with ?y represented by this graph" ?
12.06.18 02:16:59<stoopkid> alright lemme just try it real quick and see what happens
12.06.18 02:17:03<HMCa> yes, the graph {0!suc.}
12.06.18 02:18:17<HMCa> aka {[is suc of 0]}
12.06.18 02:18:24<HMCa> sorry:
12.06.18 02:18:26<HMCa> aka {[is suc of 0].}
12.06.18 02:18:28<HMCa> XD
12.06.18 02:19:17<HMCa> now if we find we have to unify 2 bnodes "named without a name" like this, we just see if their whole graphs unify
12.06.18 02:20:07<HMCa> if they are, great, we can [roceed with a new fresh with a new copy of that same unified graph, build on that w/ whatever from universals, and move on until the end
12.06.18 02:20:41<HMCa> if they don't, then they can't be the same node and we've failed a unify
12.06.18 02:21:33<stoopkid> ok let me see if i've got this right...
12.06.18 02:21:47<HMCa> and... that's it.  It serves the same function of carrying the relations of the unknown as the skolem function does
12.06.18 02:22:26<stoopkid> so we succeed with the first triple with 0 suc {0!suc}, then we move onto querying the second triple ?whatelse suc {0!suc}
12.06.18 02:22:31<HMCa> while also avoiding the problems of "binding directions" and playing nice with the alternations of quantifiers
12.06.18 02:23:42<HMCa> it doesn't go outside of lbase/rdf, and still corresponds to fol resolution
                 <stoopkid> the body of the rule can match 0 a Nat, so we should end up with 0 suc {0!suc}, and then the rule succeeds if {0!suc} == {0!suc}, which is the case, and so the second triple succeeds?
12.06.18 02:25:32<HMCa> sec...
12.06.18 02:26:28<stoopkid> dmiles: iiuc this is nearly what you were describing with your "proof-carrying terms"
12.06.18 02:30:27<HMCa> oh, one thing that might make this easier to see...
12.06.18 02:30:49<HMCa> remember to take your bodies from last to first
12.06.18 02:31:20<HMCa> we should ask "?whatelse suc ?what" before "0 suc ?what" right?
12.06.18 02:32:04<stoopkid> mmm
12.06.18 02:32:49<HMCa> I just mention because in this example (like most intuitively sequenced cases - this is kinda the point) things are a lot clearer when searching in that direction, at least imo, heh
12.06.18 02:32:57<stoopkid> should we? i've always done it first-to-last, same order as in the bodies of rules
12.06.18 02:33:37<HMCa> bodies of rules, too, bottom to top... haven't we had this discussion before? :-)
12.06.18 02:34:02<HMCa> I'm pretty sure a good grep of the logs will find a few mentions ;-)
12.06.18 02:34:15<stoopkid> if we did i totally missed the point and subsequently forgot about it entirely? :)
12.06.18 02:34:23<HMCa> anyway, in this case it vastly simplifies seeing how it works out, imo
12.06.18 02:34:28<dmiles> right, that term carries with it the logical steps of how it comes to existence
12.06.18 02:34:56<HMCa> we immediately get to ?whatelse=0 and ?what="0!suc"
12.06.18 02:35:24<HMCa> then we proceed to querying "0 suc 0!suc" and, well... win?
12.06.18 02:36:17<stoopkid> so what you're saying is that i could write my query more efficiently relative to the inferencing semantics? i can believe that :)
12.06.18 02:36:24<HMCa> hi dmiles
12.06.18 02:37:06<dmiles> for example you get can get   0!suc  0!suc!suc  0!suc!suc!suc   and by these existentials you may even do PA
12.06.18 02:37:20<HMCa> dmiles: didn't you mention some work with MIT media lab at some point?
12.06.18 02:38:36*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
12.06.18 02:39:05*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.06.18 02:39:24<stoopkid> "0!suc  0!suc!suc  0!suc!suc!suc... " is exactly what i was getting wrt skolem-functions being like constructors (with arity > 0)  from type theory; anyway, isn't this basically just making "!suc" be the skolem function?
12.06.18 02:39:40<dmiles> ive done work with a few people from MIT Media lab in the 90s like Tim Orting but mostly my cohorts are from HansonRoboKind
12.06.18 02:41:08<dmiles> yes  "!suc" could be the a function
12.06.18 02:41:25<dmiles> yes  "!suc" could be the skolem function
12.06.18 02:42:12<stoopkid> HMCa: alright i see what you mean by "halfway between the two" now
12.06.18 02:42:20<HMCa> dmiles: know anything about the "fake cicada"/tyler b.s. that's going on wrt MIT/stanford?
12.06.18 02:42:48<HMCa> loosely related: thoughts re Norman? XD
12.06.18 02:43:37<stoopkid> still not sure what problems arise with binding directions and alternations of quantifiers though
12.06.18 02:43:54<dmiles> hah hadnt heard of the Fake Cicada before
12.06.18 02:44:26<HMCa> yah, just what we needed, right? XD
12.06.18 02:44:42<HMCa> @dmiles
12.06.18 02:44:52<HMCa> #tyler #castle norman+...
12.06.18 02:45:17<HMCa> #timefuckers or something... XD
12.06.18 02:45:25<HMCa> sorry, I find this all *far* too amusing... ;-)
12.06.18 02:46:05* stoopkid has no idea who any of these people are
12.06.18 02:46:25<dmiles> {?x a Nat} => {?x suc ?y. ?y a Nat} in english says: "For all ?x that is a Nat, there exists a successor ?y which is a Nat"?
12.06.18 02:46:37<HMCa> stoopkid: well you saw Norman at least, I hope... and ofc we've mentioned Sophia
12.06.18 02:46:53<HMCa> stoopkid: did you know she has her own cult?  XD
12.06.18 02:46:57<stoopkid> dmiles: right
12.06.18 02:47:10<stoopkid> dmiles: if i interpret correctly anyway lol
12.06.18 02:47:32<dmiles> well it is interesting it is Existential in that way
12.06.18 02:47:36<dmiles> also i think it says "No ?y may not be Nat if it is the successor of a Nat"
12.06.18 02:47:48<dmiles> (The Modus Tollens)
12.06.18 02:47:57<HMCa> in sneakers it was "too many secrets" in reality we get.... "too many cults"
12.06.18 02:48:00<stoopkid> HMCa: ah right the robots
12.06.18 02:48:41<dmiles> so whatever unit propagtion that takes place (meaning what should be infererable from it) should at least be those two rules
12.06.18 02:49:35<dmiles> well i created Bina for them .. not sure about how Sophia works
12.06.18 02:49:56<dmiles> unless they copied my Bina48 code
12.06.18 02:50:43<dmiles> funny though, how Bina48 works is the "Bicameral Mind" part of the Theory of Logicmoo
12.06.18 02:51:01<HMCa> ^irony?
12.06.18 02:51:18<dmiles> (which is just coincidential timing from the WestWorld popularity)
12.06.18 02:51:43<HMCa> we're going full circle, back to a modern form of our primitve selves, maybe? XD
12.06.18 02:52:30* stoopkid feels like he's always been the primitive form of himself
12.06.18 02:52:36<HMCa> yes, I'm pretty sure there is irony in that (westworld silliness aside)
12.06.18 02:52:40<dmiles> yeah.. the differnce between the human mind and the bicameral mind is a mistake in our voices identity
12.06.18 02:52:53<HMCa> ^this
12.06.18 02:53:01<HMCa> ^this, too, is why we build ;-)
12.06.18 02:53:27<HMCa> dototd: "better than fake cicada, at least?"... XD
12.06.18 02:53:37<dmiles> (not that i agree with Junian Janes.. he proposed that we used to hear ourselves think as if we didnt own that voice in prehistoric times)
12.06.18 02:53:47<HMCa> ofc hopefully much better than rral cicada, et al, too, huh?
12.06.18 02:54:11<HMCa> *real
12.06.18 02:55:52<HMCa> dmiles: well, hard to say... I think we'd see more of it in modern primate psych if so...
12.06.18 02:56:50<HMCa> but I also don't rule it out, yet, myself
12.06.18 02:56:51<dmiles> yes that is why i disagree with him... That most all animals have already joined the two minds
12.06.18 02:57:22<HMCa> well, i especially don't rule out that it may have some vesitigials.... heh
                 <dmiles> however it explains why birds whistle species specific tunes
12.06.18 02:57:36<HMCa> ^always veen a fascination of mine
12.06.18 02:57:39<HMCa> *been
12.06.18 02:58:07<HMCa> side note, nice that we're on a same page for once... ;-)
12.06.18 02:58:11<HMCa> :-P
12.06.18 02:59:41<dmiles> and why bees are born knowning "location dance" syntax and semantic.. And how spiders follow a reciepe for arrancing their webs.. See it is easier to pysiologicly encode a "noice maker" than to encode the logical concepts
12.06.18 02:59:55<dmiles> "noise maker"
12.06.18 03:00:59<HMCa> ok, so that brings me to...
12.06.18 03:01:05<dmiles> the instructions to buld the web comes from an ever repeating "come on this is how you build a web A B C 1 2 3"
12.06.18 03:01:15<HMCa> 42 < HMCa> loosely related: thoughts re Norman? XD
12.06.18 03:04:29<dmiles> Tony Normal of Greenville?
12.06.18 03:04:45<dmiles> Norman*
12.06.18 03:05:49<HMCa> no, the mit norman project(s)
12.06.18 03:07:11<dmiles> oh its interesting, but a bit too RNNish for my taqstes
12.06.18 03:07:23<dmiles> it based at best of BFSkinnerisms
12.06.18 03:07:34<HMCa> well, what they published, sure
12.06.18 03:08:53<dmiles> but it at least seems to "create" a narrative that might be useful in Bicamerial Intellegence one day :)
12.06.18 03:10:45<HMCa> sure
12.06.18 03:11:00<stoopkid> you know, i've always said to myself "wouldn't the world be better with psychopathic robots?"
12.06.18 03:11:07<HMCa> they're further than their publishing would imply, btw... heh
12.06.18 03:13:03<dmiles> interestly "textual description of an image" is their goal.. why i am creating PrologMUD is so i can take a "narrated text description and create mental images"
12.06.18 03:14:01<dmiles> humans dont remember things thru sensory recall.. we remember them by construction of protolanguage
12.06.18 03:15:15<dmiles> example to remember Janpaneese flag we dont collate memory of eating Sushi and seeing the flag
12.06.18 03:15:24<dmiles>  we instead "white flag-like with red ball on it"
12.06.18 03:16:04<dmiles> much less storage.. we remember things based on how we describe them
12.06.18 03:16:40<stoopkid> interesting; so what does that imply about people with photographic memories?
12.06.18 03:16:49<dmiles> thru physiologicly encoding a "noise maker" that iterates out that
12.06.18 03:16:54* HMCa brb
12.06.18 03:17:16<dmiles> stoopkid they have a much richer photol-proto-language
12.06.18 03:17:45<stoopkid> somehow that makes it even more impressive
12.06.18 03:17:46<dmiles> for example.. there are these two women that are used internationaly to taste test foods
12.06.18 03:18:28<dmiles> they have 1000s of words mentally they are trying to get into a written language
12.06.18 03:23:55<dmiles> a great example is if you picture a sea-scape scene with rolling wavbes etc
12.06.18 03:24:19<dmiles> just how detailed is the seascape you are picturing?
12.06.18 03:25:19<dmiles> now picture a different seascape
12.06.18 03:25:34<dmiles> add smells and sounds
12.06.18 03:25:42<dmiles> it is exactly detailed enough to pass your muster
12.06.18 03:27:15<dmiles> now immagine a huge wave comming in..  is it any less realistic than what you see in real life?
12.06.18 03:30:39<stoopkid> not much less; it's kind of like... there's parts that are in focus and parts that are out of focus, but the parts that i can hold in focus are pretty much as realistic as if i saw them in real life
12.06.18 03:34:22<stoopkid> "it is exactly detailed enough to pass your muster" that's a good description of it, basically whatever amount of detail i'm 'expecting' will appear
12.06.18 03:35:33<HMCa> can you expect more?
12.06.18 03:35:35<HMCa> :-)
12.06.18 03:36:44<stoopkid> to some extent yes, but i also seem to quickly max out
12.06.18 03:39:15<dmiles> i had a strange metal issue one time.. i was dreaming i had a different life with a differnt set of expected memories.. I could remember all sorts of things about that life whiule i was dreaming.. when i awoke i could only remember the things i thought about that life.. not the rest of it
12.06.18 03:39:54<dmiles> the level of detail of this phantom life is probably only as detailed as the seascape
12.06.18 03:41:02<dmiles> in some ways i remember more about being in the situation i jsut described, than anything about this phantom life
12.06.18 03:42:10<dmiles> why i bring it up as a big deal it was the first time i ever really experienced "false memory"
12.06.18 03:42:58<dmiles> i think we cant remember what we dont remember ourselves remembering
12.06.18 03:44:39<dmiles> yet, as a society, we think the opposit is true
12.06.18 03:44:58<dmiles> for example regression thearpies and hypnosis
12.06.18 03:45:04<HMCa> well, that reminds me one of my fav paradoxes
12.06.18 03:45:28<HMCa> dmiles: do you know the one avout "arrogant or inconsistent"?
12.06.18 03:45:32<dmiles> we think one day we will dream and remember some experience way more perfectly than we say it
12.06.18 03:45:47<dmiles> say/saw*
12.06.18 03:46:14<HMCa> Either you believe that everything that you believe is true, in which case you are arrogant, or else you believe that you believe some things that are false, in which case you are inconsistant.
12.06.18 03:46:37<dmiles> hah, that is cool
12.06.18 03:48:14<HMCa> yah, fun stuff
12.06.18 03:48:21<dmiles> one thing our mind does is it always seems to think what it would be thinking if it was us doing the thinking
12.06.18 03:48:45<HMCa> ^more irony? ;-)
12.06.18 03:48:47<HMCa> heh
12.06.18 03:49:02<dmiles> if it ever for a moment thought like someone else, we'd think we heard voices
12.06.18 03:52:38<HMCa> interestingly, and perhaps related, I find I often learn faster if I mentally read to myself "in a different voice"
12.06.18 03:52:59<HMCa> as if being read to, but internally
12.06.18 03:53:40<dmiles> maybe this gives you the freedom to also be a student and learn from that voice
12.06.18 03:54:14<dmiles> (as it give you pause to actually slowly own the concepts than "right away")
12.06.18 03:54:31<dmiles> (as you would need to do if you read from your own voice)
12.06.18 03:56:55<dmiles> it is indeed odd.. i am trying to read just a think on some random webpage i never paid attention to in my own voice and then in the voice of someone else.. when i try to use my own voice i feel like i am only pretending i am reading it
12.06.18 03:57:56<dmiles> well i mean it feels like the degrees really vary based on what is tried
12.06.18 03:58:17<HMCa> yah, an "intentional" internal voice, done conciously, is different from the "knee-jerk" internal voice
12.06.18 03:59:09<stoopkid> i think i'm still confused on some aspects of existentials: https://pastebin.com/cBgkQqKp
12.06.18 04:02:29<stoopkid> woops s/[rdf:first 0]/{[rdf:first 0]}/
12.06.18 04:07:05<dmiles> that ?L is a bnode
12.06.18 04:07:12<dmiles> (when it desugars)
12.06.18 04:07:26<stoopkid> right (also the ?X too)
12.06.18 04:07:55<dmiles> i am not sure about the ?X in that cae
12.06.18 04:07:59<dmiles> case*
12.06.18 04:08:27<stoopkid> why would ?L be a bnode but not ?X ?
12.06.18 04:09:16<dmiles> the parser physically creates a "Cons refernece" as bnode
12.06.18 04:09:44<dmiles> but simply accepts the ?X as an element
12.06.18 04:10:25<dmiles> logically thoughj since ?X feels like a free var in the head logically that it would been the same
12.06.18 04:11:18<dmiles> but you are saying  forall ?X there exists a list in which the first elelemthn is ?X and the rest is nil
12.06.18 04:11:33* HMCa gtr, will look that over later today
12.06.18 04:12:16<dmiles> but this ?X wasnt said with forall.. it was said as a Prlog/RDF var
12.06.18 04:13:26<dmiles> had this been { (?X) } ->{(?Y)}  we might claim that ?X and ?Y had differnt quantifications
12.06.18 04:14:36<stoopkid> i'm just taking this from section 5.1 here: https://arxiv.org/pdf/0711.1533.pdf
12.06.18 04:14:44<dmiles> this might further change had we said: { (?X ?Y) } ->{(?Y)}
12.06.18 04:16:09<stoopkid> they assert the axiom, but we don't have unambiguous semantics by which to interpret it?
12.06.18 04:17:41<dmiles> oh we can say that rule is true as asserted the axiom .. but that rule is using ?L to pass along a Bnjode created from the (?X)
12.06.18 04:19:13<dmiles> we can say that rule is true as asserted from the axiom to be true of lists
12.06.18 04:19:19*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
12.06.18 04:19:35<nilli> hi just a short check in
12.06.18 04:19:38<stoopkid> so is this coming from built-in semantics associated with rdf:first & rdf:rest?
12.06.18 04:19:52<stoopkid> hey nilli
12.06.18 04:19:59<dmiles> yeah the built in semantics happens in the case of (?X)
12.06.18 04:20:46<dmiles> { ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }.  is an built in axiom that uses ?L as universal that binds to bnodes
12.06.18 04:21:25<stoopkid> sure
12.06.18 04:21:39<stoopkid> so in this rule ?X is existential?
12.06.18 04:22:11<nilli> hey  stoopkid will come back later then . have some interesting development regarding our talk yesterday.
12.06.18 04:23:06<stoopkid> whenever; i might be sleeping later :)
12.06.18 04:23:16<stoopkid> all this RDF stuff is making my head hurt :)
12.06.18 04:24:13<nilli> :) its also late in your world
12.06.18 04:25:21<stoopkid> i sort of cycle around the clock when i'm not on a fixed schedule heh
12.06.18 04:25:39<dmiles> i'd say ?X is whatever qualification ?X is in this case:  {1 owl:sameAs 1}-> { ?X owl:sameAs ?X }
12.06.18 04:25:52<stoopkid> (doesn't help that some of our most in-depth technical discussions happen at like 2AM my time XD)
                 <dmiles> quantification*
                 <nilli> a developer's syndrome
12.06.18 04:26:35<nilli> see you later
12.06.18 04:27:31<dmiles> or simply whatever quantification ?X would been in:   ?X owl:sameAs ?X.
12.06.18 04:27:46<stoopkid> cya, i should be around again ~noon my time
12.06.18 04:28:25<stoopkid> dmiles: hrm
12.06.18 04:29:17<dmiles> the author of that paper is on IRC i think
12.06.18 04:30:03<dmiles> oh but not right now
12.06.18 04:30:08<stoopkid> which author?
12.06.18 04:30:28<dmiles> usualyl hangs in #swig as timbl
12.06.18 04:30:54<dmiles> oh its jhendler of #swig ?
12.06.18 04:31:05*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
12.06.18 04:31:44<stoopkid> oh hrm, is DanC in #swig Dan Connolly?
12.06.18 04:31:59<dmiles> or DanC
12.06.18 04:32:04<dmiles> yes
12.06.18 04:32:51<stoopkid> i'll have to run some of these questions by him at some point
12.06.18 04:33:43<stoopkid> so i'm thinking you should be able to interpret "?X owl:sameAs ?X" as either universal or existential based on the query
12.06.18 04:33:45<dmiles> yeah io tap them very rarely
12.06.18 04:35:33<dmiles> yeah .. which of the universal or existential, it depends .. forever i used to say that those are existential .. but the more i talk to logicains they might say its universal
12.06.18 04:35:48<stoopkid> i.e. if you query "5 owl:sameAs 5", it should just succeed; if you query "5 owl:sameAs ?what", it should return the result "5 owl:sameAs 5", and if you query "?what owl:sameAs ?whatelse" you should just get a bnode
12.06.18 04:36:33<dmiles> if you query "?what owl:sameAs ?whatelse"  you might get a  "?what = ?whatelse"
12.06.18 04:36:51<dmiles> but to me that can only be "one thing at a time"
12.06.18 04:37:14<dmiles> only "one thing at a time" seems existential
12.06.18 04:39:10<stoopkid> well, when you query with two vars (possibly but not necessarily distinct) then it seems it should treat it like "there exists some _:b0 such that _:b0 owl:sameAs _:b0"
12.06.18 04:39:33<dmiles> yet if   ?X :foo ?X.  is in the KB we claim that this says  (forAll ?x.  { ?x :foo ?x))
12.06.18 04:40:28<dmiles> yeah .. that example you gave.. mainly wer can only query existentials
12.06.18 04:40:51<dmiles> and the only reponse queries give are existential binding sets
12.06.18 04:43:58<stoopkid> so basically if a var appears in the head as both subject & object in a triple, then it's universal, and otherwise it's existential?
12.06.18 04:44:37<dmiles> yes, well that is the normal method of KR that is accepted more often than not
12.06.18 04:45:21<stoopkid> hrm
12.06.18 04:46:01<stoopkid> but in both "(?X)" and "{ ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }.", ?X appears only as the object of a head-triple
12.06.18 04:46:04<dmiles> but it depends: "person:joe :loves ?y"   "joe loves eveyone"
12.06.18 04:46:29<dmiles> but it depends: "person:joe :loves  _:b0"   "joe loves someone"
12.06.18 04:47:09<dmiles> (in the assertion .. not the query)
12.06.18 04:48:16<dmiles> in "{ ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }."   forAll ?L
12.06.18 04:48:33<stoopkid> alright, so for "(?X)." this should actually desugar to "_:b0 rdf:first ?X. _:b0 rdf:rest rdf:nil" ?
12.06.18 04:48:37<dmiles> but especially the ones that we find existentially
12.06.18 04:48:54<dmiles> yes
12.06.18 04:49:02<stoopkid> wait hrm..
12.06.18 04:49:21<dmiles> "(?X)." this actually desugars to "_:b0 rdf:first ?X. _:b0 rdf:rest rdf:nil"
12.06.18 04:49:41<stoopkid> but that would be saying, _:b0 is rdf:first of ?X, for all ?X
12.06.18 04:50:09<dmiles> ?X is first of _:b0
12.06.18 04:50:17<stoopkid> ^ right that
12.06.18 04:50:26<stoopkid> forall ?X
12.06.18 04:50:56<dmiles> "?x :loves :joe"  = "everything loves joe"
12.06.18 04:51:02<stoopkid> shouldn't there be a different list bnode for each different ?X that could be used as the rdf:first?
12.06.18 04:51:47<dmiles> "everything *that* *exists* loves joe"
12.06.18 04:52:51<stoopkid> so "(?X)." should really be something more like "[rdf:first ?X] rdf:first ?X. [rdf:first ?X] rdf:rest rdf:nil" ?
12.06.18 04:54:11<dmiles> (?X ?Y)  becomes..    _:b0 rdf:first ?X.   _:b0 rdf:rest _:b1.  _:b1 rdf:first ?Y   _:b2 rdf:rest rdf:nil
12.06.18 04:54:16<dmiles> oops
12.06.18 04:54:23<dmiles> (?X ?Y)  becomes..    _:b0 rdf:first ?X.   _:b0 rdf:rest _:b1.  _:b1 rdf:first ?Y    _:b1 rdf:rest rdf:nil
12.06.18 04:55:56<dmiles> yeah you could say that   (?X)   =    [rdf:first ?X] rdf:rest rdf:nil
12.06.18 04:56:49<dmiles> oops nope that [] made a bnode afterwards
12.06.18 04:58:57<stoopkid> hrm..
12.06.18 04:59:57<stoopkid> well, i gotta get some sleep, thanks for explaining this stuff, i think i'm maybe finally starting to wrap my head around it
12.06.18 05:00:38<stoopkid> more of this tomorrow :)
12.06.18 05:00:56<dmiles> _:sch1
                 <dmiles>     rdf:first <http://example.org/students/Amy>;
                 <dmiles>     rdf:rest  _:sch2.
                 <dmiles> _:sch2
12.06.18 05:00:57<dmiles>     rdf:first <http://example.org/students/Mohamed>;
                 <dmiles>     rdf:rest  _:sch3.
                 <dmiles> _:sch3
                 <dmiles>     rdf:first <http://example.org/students/Johann>;
                 <dmiles>     rdf:rest  rdf:nil.
12.06.18 05:01:20<dmiles> is (Amy Mohamad Johann)
12.06.18 05:03:22*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 264 seconds
12.06.18 05:03:54<dmiles> gnight! i am glad i have that testase! http://logicmoo.org/ef/files/packs_sys/logicmoo_base/t/examples/fol/nat_sane_01a.pfc.pl
12.06.18 05:15:48*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.06.18 08:19:01*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
12.06.18 08:23:26<nilli> hi
12.06.18 08:25:00<nilli> picking up from where we left yesterday....
12.06.18 08:27:13<nilli> I had coffee with Avishay and explained him the talk we had .
12.06.18 08:29:39<nilli> (that is after I explained my ex that im now not only working on "nothing" with Avishay, but with you now too )
12.06.18 08:31:05<nilli> any way  we went over the A B C example
12.06.18 08:32:48<nilli> [19:36] <HMCa> imagine a context A defines apples, a context B refines "all apples are red" and a context B refines "some apples are green"... and imagine A is structured to combine theories of B and C... before it does this combination, the system is inconsistent when viewed extralogically.  After combining, one or the other of B and C is only partially propogated into A, in order for A to remain consistent
12.06.18 08:41:17<nilli> of fixed... to C is "some apples are green"
12.06.18 08:52:05<nilli> ofc fixed
12.06.18 08:52:21<nilli> lets do it again to be sure we get it right
12.06.18 08:53:43<nilli> A defines apples, a context B refines "all apples are red" and a context C refines "some apples are green"... and imagine A is structured to combine theories of B and C... before it does this combination, the system is inconsistent when viewed extralogically.
12.06.18 08:56:07<nilli>  After combining, one or the other of B and C is only partially propogated into A, in order for A to remain consistent
12.06.18 08:58:03<nilli> [19:42] <HMCa> A could either decide to "invalidate" B/C, or it may merge what C says directly and merge an amended B which includes "only when reasoning within B, but not C, do only red apples exist"
12.06.18 08:59:17<nilli> [19:43] <HMCa> A has options
12.06.18 09:01:29<nilli> This situation resembles a quantum state
12.06.18 09:04:21<nilli> That of measurement. the double slit experiment .
12.06.18 09:07:46<nilli> this relates to "commutative"
12.06.18 09:11:42<nilli> commutative means that the logic assert meaning to order
12.06.18 09:11:57<nilli> in other words the order is part of the logic
12.06.18 09:14:34<nilli> now the important factor we just realized is as follow:
12.06.18 09:15:47<nilli> using QM equations you can quantify the contradiction
12.06.18 09:16:52<nilli> since the level of uncertainty represent  contradiction and uncertainty can be quantified.
12.06.18 09:17:17<nilli> Why is that important?
12.06.18 09:18:21<nilli> because it means that we will be able to calculate the cost of resolving contradiction at any point in our system
12.06.18 09:18:47<nilli> ahead of time
12.06.18 09:21:44<nilli> so the proof that we will be able to provide is for the probability of a contradiction to accrue and the cost of resolving it
12.06.18 09:24:16<nilli> I tried to give a concrete example of the contract itself but before I do that let me point out to a crucial theoretical factor here:
12.06.18 09:25:12<nilli> The energy is calculated into the structure of the logic
12.06.18 09:25:31<nilli> and that replace POW
12.06.18 09:26:14<nilli> in other word the logic requires energy to make sense :)
12.06.18 09:26:55<nilli> and that is the magic
12.06.18 09:27:15<nilli> this is the moment of creation
12.06.18 09:27:55<nilli> the point in which math meat physics
12.06.18 09:27:58<nilli> ....ext
12.06.18 09:30:35<nilli> ....and as much as I remmember, HMCa, we have said it in some other configuration long long ago , at the tauchain
12.06.18 09:30:56<nilli> so now to my simple example:
12.06.18 09:33:51<nilli> say that I am an apple grower and I signed a future contract with a distribute to give him all Apples
12.06.18 09:35:52<nilli> somewhere in the contract apples as a context  defined as "all apples  are red"
12.06.18 09:37:25<nilli> and on first season that my trees give fruits we find out that some apples are green (c)
12.06.18 09:38:26<nilli> now the problem to solve is who get the green apples .
12.06.18 09:44:29<nilli> now assuming on some other branch of our logic tree (not the apple tree)
12.06.18 09:46:44<nilli> They already 'knew"  that there are yellow apples and thus  "all apples" are "yellow and red apples"
12.06.18 09:51:29<nilli> thus in order to refute  "All apples as = red Apples" and assert that "All apples =  apples of all colors " we need to find out if indeed on one of our branches of the entire network this contradiction was resolved
12.06.18 09:52:07<nilli> meaning a verdict was given as is now part of the consensus
12.06.18 09:56:33<nilli> now....assuming it is somewhere out there but I dont know how much energy I need to expend to find it I am in a real big problem. I am actualy at a state of flipping a coin with every contextual contradiction
12.06.18 09:58:57<nilli> but if I can calculate the chances to find resolution at whatever cost level that I can afford, I would be able to make a rational decision
12.06.18 10:01:39<nilli> in practice I would be able to know, once realizing the green apples situation, how much I have to invest to get an answer.
12.06.18 10:02:50<nilli> now it is important to realize that at that point I as the grower dont know the answer as is the distributor
12.06.18 10:04:57<nilli> we both have to agree on investing in the resolution or one of us can decide to take the full cost if he believe he would win .
12.06.18 10:08:05<nilli> which ever way that we go its a matter of calculating the cost and the chances of wining. which mount to one factor 'risk"
12.06.18 10:09:25<nilli> "risk" in a way defines a rational system
12.06.18 10:13:25<nilli> (the problem with our justice system is that it does not know to incorporate the risk factor into "justice", it is indeed set ad black and white.
12.06.18 10:14:25<nilli> flipping a coin which cant be accepted in a moral context system
12.06.18 10:15:57<nilli> or risking going back to the "root" without being able to calculate the cost
12.06.18 10:18:17<nilli> anyway....I guess more goes into that but lets stay at eh basic level of contracts in our automated decentralized mechanism for now
12.06.18 10:36:49*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
12.06.18 11:43:10<HMCa> variables at the top level of the background graph are always existential...
12.06.18 11:43:52<HMCa> this is because the graph G should be consistent with the rule "{}=>G."
12.06.18 11:49:27<HMCa> this is sort of what it means to be the background context graph in the first place, it is assumed implied from trivial truth
12.06.18 12:08:41*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-cklqrmbsarnnrbdd) left #AutoNomic: Remote host closed the connection
12.06.18 12:08:44*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-txtpeiwisapzchnr) left #AutoNomic: Remote host closed the connection
12.06.18 12:08:50*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-dkipgjwhuhjvzodj) left #AutoNomic: Remote host closed the connection
12.06.18 12:18:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ibgkixyxoksuddpf) left #AutoNomic: Quit: Connection closed for inactivity
12.06.18 12:25:17*** Join: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45, (unauthenticated): 77.126.56.45 - http://webchat.freenode.net)
12.06.18 12:33:24<HMCa> nilli: hi
12.06.18 12:36:47<nilli> hi HMCa
12.06.18 12:36:52*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vwsjqtowdrstrxun, (unauthenticated): @koo5:matrix.org)
12.06.18 12:38:10<nilli> what do you think of what I tried to describe?
12.06.18 12:45:37<HMCa> only skimmed, will likely not have time to properly read/respond until tomorrow
12.06.18 12:46:01<nilli> ok
12.06.18 12:50:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hnehzpoxjxpckwmx, stoopkid: stoopkid)
12.06.18 12:51:52<nilli> im trying to marry between two deciplens  here which  will require some more detailed introductions
12.06.18 12:53:07<nilli> but both are missing a common characteristic which hints to a common solution
12.06.18 13:03:40<stoopkid> nilli: i'm familiar with double-slit experiment but unfortunately most of this QM stuff is over my head
12.06.18 13:05:05<stoopkid> dmiles: so apparently we've got multiple interpretations of vars occurring in facts
12.06.18 13:05:29<nilli> you dont need to understand the QM part. that Avishay is doing, its will be issues logic and blockchain that you will need to deal with
12.06.18 13:07:04<nilli> the way it should work is that if as I think there are common points then you both will realize that one solve the problems for the other
12.06.18 13:08:31<nilli> it just have to be specified in the right way, which I cant do but Avishay hmc and can
12.06.18 13:09:57<nilli> and you
12.06.18 13:11:15<nilli> what I see is that with my discussions with both you guys here and Avishay I end up reaching the same points.
12.06.18 13:12:37<nilli> the role of context in the logic framework and the role of energy
12.06.18 13:13:18*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-seukgjifrojpucwc, (unauthenticated): @genuinelyfx:matrix.org)
12.06.18 13:13:25*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-rjzouewovupcyjoj, (unauthenticated): @lexxus:matrix.org)
12.06.18 15:00:51<stoopkid> HMCa: so if variables in the top-level are existential, then we need to be able to bind existentials with terms coming from the query-side?
12.06.18 15:01:40<stoopkid> example: kb = "?x id ?x." query = "5 id ?what", result should be "5 id 5"? or should it fail because we can't bind 5 with the bnode that ?x will be instantiated with?
12.06.18 15:02:09<stoopkid> can't unify* 5 with it **
12.06.18 15:03:05<stoopkid> another example would be the singleton-list existence axiom, "( ?X )."
12.06.18 15:05:13<stoopkid> ?X should be an existential because this desugars to "?L rdf:first ?X. ?L rdf:rest rdf:nil"
12.06.18 15:05:37<stoopkid> but if we can't bind arbitrary terms to it, then we can't assert the existence of arbitrary singleton lists
12.06.18 15:06:07<stoopkid> does "( <a> )" exist? afaict only if ?X could be bound to <a>
12.06.18 15:06:46<stoopkid> but if ?X could be bound to <a>, what prevents ?L from being bound to arbitrary terms?
12.06.18 15:08:22<stoopkid> according to dmiles, when they use the singleton-list existence axiom "( ?X )." they intend for ?X to be universally quantified, which seems to make sense for the example but i'm not sure what a general mechanism would be for differentiating the vars that are supposed to be existential from the vars that are supposed to be universal
12.06.18 15:10:49<stoopkid> obv what you say makes some sense, that G should be consistent with the rule {} => { G }, call it R, which would make all the top-level vars of G be vars that appear in the head of R and not in the body, and if we should be interpreting all vars that appear in the head of a rule but not its body as existential vars, then all the top-level vars should be existential, but is it really the case that every var appearing in the
                 <stoopkid> head of a rule but not its body should be considered an existential var?
12.06.18 15:11:43<stoopkid> we have the other list axiom, existence of non-singleton lists: "{ ?L rdf:rest ?R } => { ?L2 rdf:first ?X. ?L2 rdf:rest ?L}"
12.06.18 15:12:26<stoopkid> which they write as  "{ ?L rdf:rest [] } => { [ rdf:first ?X ; rdf:rest rdf:nil ] }"
12.06.18 15:12:37<stoopkid> obviously ?L is universally quantified, it appears on both sides
12.06.18 15:12:50<stoopkid> is ?R universally quantified or is it existentially quantified?
12.06.18 15:13:07<stoopkid> obviously ?L2 is existentially quantified, by the intention of the example
12.06.18 15:13:17<stoopkid> but ?X, is it universally quantified or is it existentially quantified?
12.06.18 15:13:39<stoopkid> we certainly would still need to be able to bind arbitrary terms to ?X in order to make use of this rule to demonstrate the existence of a non-singleton list
12.06.18 15:15:20<stoopkid> it seems ?R is necessarily universally quantified, even though they write it as a bnode
12.06.18 15:17:08<stoopkid> well, i guess it could be existentially quantified but it doesn't really affect the semantics..
12.06.18 15:18:03<stoopkid> "forall ?L, forall ?R, (?L rdf:rest ?R => ...)" is the curried version of "forall ?L, (exists ?R, ?L rdf:rest ?R) => ... "
12.06.18 15:18:34*** Quit: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45) left #AutoNomic: Ping timeout: 260 seconds
12.06.18 15:18:40<stoopkid> so we can pick either existential or universal quantification for ?R and it won't affect anything so long as we remember to curry/uncurry properly
12.06.18 15:21:08<stoopkid> and we definitely do have to curry/uncurry properly when we switch between interpreting as universal/existential, because the following doesn't seem to be the intended semantics:
12.06.18 15:22:05<stoopkid> "forall ?L, (exists ?R, (?L rdf:rest ?R => ...))"
12.06.18 15:23:56<stoopkid> we're not saying "forall ?L, there exists ?R such that if ?L rdf:rest ?R then ...", we're saying "forall ?L, **if** there exists ?R such that ?L rdf:rest ?R then"
12.06.18 15:25:01<stoopkid> so, that's straightforward, it's just currying/uncurrying the arguments of implications like we're well-familiar with from type-theory & functional programming
12.06.18 15:25:14<stoopkid> so the problem cases are ?X and ?L2
12.06.18 16:11:26* editable-koo gives up trying to understand anything of this whole discussion
12.06.18 16:11:42<editable-koo>youll have to translate it for me afterwards
12.06.18 16:12:24<stoopkid> heh alright; if there ever is an "afterwards"
12.06.18 16:18:51<dmiles> stoopkid: well everything you said i agree with
12.06.18 16:19:32<dmiles> and there really are some deep ambiguities that exist in the specifications
12.06.18 16:20:43<dmiles> the usual rules we like to use are not in the specifications for RDF/N3 .. here are some "usual rules of thumb"
12.06.18 16:21:58<dmiles> "Variables that exist in heads, and not bodies, are considered existential"
12.06.18 16:23:30<dmiles> that is because for every iteration of head aswersets there is a value that gets effecively created
12.06.18 16:24:44<dmiles> a conflicting rule: "All variables are universally quantified unless otherwise stated as existential"
12.06.18 16:27:48<dmiles> another rule (one i made up due to practicality):  "Variables that need to have an intersection in Body, yet do not exist in the Head, are considered existential"
12.06.18 16:28:41<stoopkid> what do you mean by intersection here?
12.06.18 16:29:37<dmiles> that is {?x :f ?y.  ?y :f ?z}  -> {?x :g  ?z}
12.06.18 16:29:47<dmiles> ?y being intersecting
12.06.18 16:29:56<stoopkid> ah
12.06.18 16:30:28<dmiles> in a way that seems almost obvious that it is contingent on at least one value
12.06.18 16:30:46<dmiles> at least one ?y must exist
12.06.18 16:31:32<dmiles> imagine all the ?y(s) that wont work
12.06.18 16:31:52<stoopkid> so let me see if i can interpret correctly: "forall ?x ?z, (exists ?y, (?x f ?y & ?y f ?z)) -> (?x g ?z)" ?
12.06.18 16:32:16<dmiles> yes
12.06.18 16:32:42<dmiles> notice here the fact you used exists secretly doesnt even matter
12.06.18 16:32:50<stoopkid> do you agree that this can be curried to get "forall ?x ?z ?y, (?x f ?y) -> (?y f ?z) -> (?x g ?z)" ?
12.06.18 16:34:25<dmiles> oops actualy i like the forall interpretion almost better. why?  the modus tollens would be more proper
12.06.18 16:34:42<dmiles> oops
12.06.18 16:35:01<dmiles> "forall ?x ?z, ?y, (?x f ?y & ?y f ?z)) -> (?x g ?z)"  <- i was thinking you wrote
12.06.18 16:35:39<dmiles> ok now for,,  "forall ?x ?z ?y, (?x f ?y) -> (?y f ?z) -> (?x g ?z)"
12.06.18 16:38:00<dmiles> well i cant say for sure that is a good thing for me to think about
12.06.18 16:38:19<dmiles> well i cant say for sure.  but, that is a good thing for me to think about
12.06.18 16:38:54<dmiles> hah "i shouldnt be thinking of such things!"
12.06.18 16:39:28<stoopkid> your & version should work too, its another partially uncurried version of the -> version
12.06.18 16:41:00<stoopkid> your & version is actually my default interpretation but type theory has just gotten me used to currying everything when i type it out
12.06.18 16:44:43<stoopkid> basically, if you have an existentially quantified statement as the premise of an implication, like “(exists ?x , P(?x)) -> Q” you can curry this to “forall ?x, (P(x) -> Q)”
12.06.18 16:46:03<stoopkid> basically existentials only get their “special” properties if they’re either taken in isolation or if they’re  the *conclusion* of an implication rather than a premise
12.06.18 16:46:31<dmiles> yeah my third rule of thumb i gave (the one I made up) was partly due to that it can safely be treated/curried to non existually
12.06.18 16:47:37<dmiles> if you think  of the modus tollens of  "forall ?x ?z, ?y, (?x f ?y & ?y f ?z)) -> (?x g ?z)"   ?y become existential
12.06.18 16:48:26<stoopkid> hm lemme think about that
12.06.18 16:49:18<dmiles> (forall ?x ?z . (not (?x g ?z)) -> (not (exists ?y (?x f ?y & ?y f ?z)))))
12.06.18 16:49:25*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-seukgjifrojpucwc) left #AutoNomic: Read error: Connection reset by peer
12.06.18 16:49:26*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vwsjqtowdrstrxun) left #AutoNomic: Read error: Connection reset by peer
12.06.18 16:49:35*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-rjzouewovupcyjoj) left #AutoNomic: Read error: Connection reset by peer
12.06.18 16:49:39<dmiles> welll..
12.06.18 16:50:20<dmiles> ok yes. i thought i had misplaced the quantifiers
12.06.18 16:52:51<dmiles> but  "(forall ?x ?z . (not (?x g ?z)) -> (not (exists ?y ((?x f ?y) & (?y f ?z))))))" stands
12.06.18 16:58:10<stoopkid> this is what i get: "forall ?x ?z ?y, (not(?x g ?z) -> not(?x f ?y & ?y f ?z))"
12.06.18 16:58:29<stoopkid> although they should be equivalent by the same kind of curry/uncurry translations
12.06.18 17:01:47<stoopkid> note that when you have "not (exists ?x, P(?x))" this is equivalent to "(exists ?x, P(?x)) -> False" which can be curried to get "forall ?x, (P(?x) -> False)" which is equivalent to "forall ?x, not(P(?x))"
12.06.18 17:03:50<stoopkid> so "(forall ?x ?z . (not (?x g ?z)) -> (not (exists ?y (?x f ?y & ?y f ?z)))))" is equivalent to "(forall ?x ?z . (not (?x g ?z)) -> (forall ?y, not(?x f ?y & ?y f ?z)))", and the term "not(?x g ?z)" is independent of ?y so you can move the "forall ?y" before it, and then you get my version
12.06.18 17:04:51<HMCa> how's it going?  (I've not actually read scrollback yet)
12.06.18 17:05:17<stoopkid> still got questions
12.06.18 17:10:16*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hsozynxelmhilfzt, (unauthenticated): @koo5:matrix.org)
12.06.18 17:22:18<HMCa> heh
12.06.18 17:22:29<HMCa> what's the biggest looming right now?
12.06.18 17:22:55<stoopkid> the one i pinged you about earlier :P
12.06.18 17:28:08<HMCa> the id/(?x) examples?
12.06.18 17:28:16<stoopkid> right
12.06.18 17:28:28<HMCa> btw where did this "(?x) axiom" come from again?
12.06.18 17:30:27<stoopkid> https://www.csee.umbc.edu/courses/graduate/691/spring12/03/papers/n3logic-tplp.pdf
12.06.18 17:30:30<stoopkid> section 5.1
12.06.18 17:33:14<HMCa> ahh, right, the good ol' "all lists exist" rule
12.06.18 17:37:04<HMCa> so, probably it is important to understand first that neither of the two parts of this rule makes sense in isolation like that...
12.06.18 17:37:43<HMCa> second, it is important to understand that the ?x is the same ?x
12.06.18 17:38:34<HMCa> does either of those statements clarify anything?
12.06.18 17:38:49<stoopkid> nope
12.06.18 17:44:55<HMCa> heh
12.06.18 17:45:29<HMCa> ok, let me try another approach
12.06.18 17:45:56<HMCa> let's say i have these 2 statements in kb, and add a third "(1 2 3)."
12.06.18 17:46:13<HMCa> how many lists does my kb now express?
12.06.18 17:48:24<stoopkid> the two list existence axioms or the two triples from the "(?X)." axiom?
12.06.18 17:48:45<HMCa> the 2 axioms
12.06.18 17:48:57*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 245 seconds
                 <HMCa> well, the single 2-statement axiom, HEH
12.06.18 17:49:06<HMCa> but yah, the former not the latter
12.06.18 17:49:32<stoopkid> all the lists?
12.06.18 17:50:12<HMCa> well, an infinity, yes, but...
12.06.18 17:50:40<HMCa> so what would the start of an enumeration of them look like?
12.06.18 17:51:30<HMCa> rdf:nil. and (1 2 3). ofc... then ([] 1 2 3).... ([] [] 1 2 3).... ([] [] [] 1 2 3)
12.06.18 17:51:43<HMCa> follow so far?
12.06.18 17:52:14<stoopkid> there's also (3) and (2 3) right?
12.06.18 17:52:28<stoopkid> and there's also ( a ) for arbitrary a?
12.06.18 17:52:48<HMCa> asserted in our kb?  not exactly...
12.06.18 17:53:20<HMCa> let's take "(1 2 3)" back out of the kb and enumerate again...
12.06.18 17:53:21<HMCa> we get
12.06.18 17:53:37<HMCa> ()... ([]).... ([] [])... ([] [] [])
12.06.18 17:53:44<HMCa> ...
12.06.18 17:54:20<stoopkid> so when they say that all lists exists they really don't actually mean all lists
12.06.18 17:54:38<HMCa> well, yes and no
12.06.18 17:55:07<HMCa> they don't mean any particular concrete list is universally asserted, no
12.06.18 17:55:48<HMCa> we could do that by, for example, changing the first statement to {?x a rdf:Resource}=>{(?x)}.
12.06.18 17:56:00<HMCa> but that is not the same axiom...
12.06.18 17:57:20<stoopkid> https://www.w3.org/TeamSubmission/n3/
12.06.18 17:57:22<stoopkid> section on Lists
12.06.18 17:57:36<stoopkid> "All lists exist. The statement [rdf:first <a>; rdf:rest rdf:nil]. carries no information in that the list ( ,a> ) exists and this expression carries no new information about it."
12.06.18 17:58:23<stoopkid> "Occasionally people express surprise that statements like the one above which have a list as a subject but no information about it disappear when loaded into an N3 store."
12.06.18 17:58:52<stoopkid> seems they actually mean that every particular concrete list is universally asserted
12.06.18 17:59:20<stoopkid> to the extent that if you assert a list they'll just delete it when loading the KB into an N3 store, because it carries no new information that isn't already conveyed by the list axioms
12.06.18 18:00:39<HMCa> all cocrete lists are existentially asserted, which can be made universally concrete by the application of *both* rules of the axiom
12.06.18 18:01:08<stoopkid> idk what you mean by that
12.06.18 18:01:39<HMCa> note that if you query "(5) rdf:first ?q" against these rules you do end up at ?X==5==?q
12.06.18 18:02:00<HMCa> even without "(5)." in the kb
12.06.18 18:02:39<HMCa> gtr again in a sec
12.06.18 18:03:42<stoopkid> so ?X can be bound to 5 in order to satisfy the axiom {} => {?L rdf:first ?X. ?L rdf:rest rdf:nil}
12.06.18 18:04:12<stoopkid> can be bound to 5 in the axiom .. in order to satisfy the query
12.06.18 18:05:30<HMCa> because ?L "carries" (as dmiles would say) the "(5)" to the "(?X)." rule
12.06.18 18:05:58*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.06.18 18:06:20<stoopkid> idk what you mean by that
12.06.18 18:07:52<HMCa> maybe I should say "carries back from" instead of "carries to"
12.06.18 18:08:45<HMCa> gtr for now, will be back in a few hours :-\
12.06.18 18:08:53<stoopkid> alright
12.06.18 18:09:01<stoopkid> when you get back: i still don't know what you mean :)
12.06.18 18:09:35<HMCa> heh
12.06.18 18:10:17<HMCa> I'm doing my best to not say "just plug this into euler.yap and look" ;-)
12.06.18 18:10:28<HMCa> bbiab
12.06.18 18:13:56<stoopkid> "(5)" = "?list rdf:first 5. ?list rdf:rest rdf:nil"; when succeeding the first triple we get ?list = [rdf:first 5], or {[rdf:first 5]} i guess; sure. then we get to "[rdf:first 5] rdf:first ?q".. not sure how you intend that to be queried such that ?q would bind to 5
12.06.18 18:17:24<stoopkid> i'm not unit-testing a proven-to-be-broken inferencer in order to determine what our semantics are supposed to be
12.06.18 18:18:52<stoopkid> like i said if you can't point me to documentation that explains these semantics directly or write a comprehensive explanation of the semantics yourself, then i'm going to have to declare this N3 plan a failure until further notice
12.06.18 19:15:56*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hsozynxelmhilfzt) left #AutoNomic: Remote host closed the connection
12.06.18 19:36:39*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-ajesiijdozmiafxj, (unauthenticated): @koo5:matrix.org)
12.06.18 20:13:48*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-qwrzfxeboiwgcseg, (unauthenticated): @genuinelyfx:matrix.org)
12.06.18 20:13:54*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-sdpggcqzlrbifupi, (unauthenticated): @lexxus:matrix.org)
12.06.18 22:57:49<dmiles> "(?X)" in english says:  there exists a list in which can contain any element
12.06.18 22:59:12<dmiles> "(5)" = "_:list9 rdf:first 5.  _:list9 rdf:rest rdf:nil"
12.06.18 22:59:34<dmiles> the parser must always create a bnode for each cons cell
12.06.18 23:11:41<dmiles> https://pastebin.com/CUuMgCAH
12.06.18 23:46:48<HMCa> i don't think any of that is what stoop is confused on...
13.06.18 00:02:47<dmiles> well i think what is getting him.. is he is looking at exmaples of where the CONSes are not bnodes
13.06.18 00:03:40<dmiles> so he is thinking that the CONSes must be variables
13.06.18 00:04:40<dmiles> though that isnt actualyl what is the confusion .. but that mistake in premise ends up causing the confusing parts he is concluding
13.06.18 00:06:12<dmiles> at least 2-3 mental steps later is when the confusion takes palce
13.06.18 00:07:26<dmiles> the consfusion as to what (?X) is
13.06.18 00:08:42<dmiles> RDF Collections are the only assertable non-logical-sentence/datastructures
13.06.18 00:09:57<dmiles> {a loves (?X)} or {a loves 1} for instance and those are logical
13.06.18 00:10:19<dmiles> we cant really assert  {1}
13.06.18 00:10:44<dmiles> it will give an error
13.06.18 00:11:14<dmiles> (?X) we can assert without gettign an error!
13.06.18 00:11:46<dmiles> yet it is the same thing as asserting  "happy"
13.06.18 00:12:09<dmiles> there is no quantification that can happen
13.06.18 00:13:36<dmiles> but "happy" woujld be an error if you asserted it
13.06.18 00:13:51<dmiles> the reason (?X) is not an error is a bug in the spec
13.06.18 00:14:56<dmiles> sorry not the spec but due to the parser obfusicating whats going on
13.06.18 00:17:37<dmiles> "(?X)"  parses to triples.. the very fact it makes sense we should be able to query it back out is a even bigger bug
13.06.18 00:18:30<dmiles> for exmaple you are not permited to do that with  ()
13.06.18 00:19:06<dmiles> since that would be the same as doing that with a thing like  1
13.06.18 00:22:47<HMCa> well, really most implementations don't let you assert "(1)." alone either, heh
13.06.18 00:23:09<HMCa> stoopkid: around?
13.06.18 00:25:13<HMCa> dmiles: also I wouldn't really say that it is a "bug" ib the spec, so much as just a "misleading" way of sugaring
13.06.18 00:26:17<HMCa> it is the only way of sugaring that implicitly (always) makes one or more bnodes
13.06.18 00:27:54<HMCa> and gets even more misleading wrt "()" which is (usually) just sugar for rdf:nil
13.06.18 00:28:38<HMCa> I think stoop is also confused by the way timbl presents his list axioms in that paper...
13.06.18 00:29:39<HMCa> stoop seems to want the "all lists exists" axiom to be 2 rules, and it is really just one
13.06.18 00:30:30<HMCa> (which is understandable, timbl is kibda shirking/bending his own syntax in a paper that is supposed to be definitive about that syntax, luls)
13.06.18 00:30:46<HMCa> *kinda
13.06.18 00:34:42<dmiles> yes
13.06.18 00:36:10<dmiles> just for completeness, we should mention that the very first bnode always gets a "_:cons01 a rdf:List"
13.06.18 00:37:06<HMCa> well, really all of the bnodes created should
13.06.18 00:37:13<dmiles> as to not be confused that (b c) is an rdf:List in (a b c)
13.06.18 00:38:23<HMCa> but that *is* a definite ambiguity in the spec and i've seen impls both ways, heh
13.06.18 00:38:28<dmiles> (we just implies opposites there.. but thus the "should" in your statement)
13.06.18 00:41:13<stoopkid> HMCa: can you provide an alternative formulation of the axiom?
13.06.18 00:41:59<dmiles>  {} => {?L rdf:first ?X. ?L rdf:rest rdf:nil.  ?L a rdf:List}
13.06.18 00:43:15<stoopkid> or is the axiom correct but the interpretation wrong
13.06.18 00:44:56<HMCa> well, the axiom is "correct" in the sense that it does convey what is intended, heh
13.06.18 00:45:00<HMCa> btw:
13.06.18 00:45:04<HMCa> stoopkid> i'm not unit-testing a proven-to-be-broken inferencer in order to determine what our semantics are supposed to be
13.06.18 00:45:15<HMCa> is it still broken?
13.06.18 00:45:39<HMCa> there have been some significant overhauls/refactorings lately
13.06.18 00:46:05<HMCa> what it used to be is now 3 distinct things, for example... heh
13.06.18 00:47:34<HMCa> iirc I did reformulate all of the list axioms here once, years ago
13.06.18 00:47:41<HMCa> maybe even before you were around
13.06.18 00:47:53<stoopkid> which of them is the correct one?
13.06.18 00:48:03<HMCa> ?
13.06.18 00:48:10<HMCa> huh?
13.06.18 00:48:32<stoopkid> the 3 distinct things euler has become?
13.06.18 00:48:42<HMCa> oh, I meant it was refactored into 3 components
13.06.18 00:48:50<stoopkid> ah
13.06.18 00:50:50<stoopkid> so you assert that euler.yap is currently a correct implementation of your intended inferencing semantics?
13.06.18 00:52:01<HMCa> no?
13.06.18 00:52:28<HMCa> I was asking if we know if it is still broken in the ways that it was, or not
13.06.18 00:53:45<stoopkid> i havent been keeping up with it because jos didnt consider it broken
13.06.18 00:54:44<HMCa> so "not"?
13.06.18 00:54:53<HMCa> ok
13.06.18 00:55:02<HMCa> i'll look into that as well
13.06.18 00:55:39<HMCa> can you remind me where our testcases for it are/were?
13.06.18 00:57:15<stoopkid> sure in a bit i need to dig through my emails
13.06.18 01:01:37<HMCa> stoopkid: did any of dmiles' stuff help to clarify?
13.06.18 01:04:53<HMCa> stoopkid: I would say one big takeaway is wrt the bnode creation for lists, the cons cells as dmiles might say...
13.06.18 01:05:31<HMCa> they are created at the background context graph, and so are global existential
13.06.18 01:05:53<HMCa> I worry this is maybe being missed so far
13.06.18 01:07:12<HMCa> when we say all lists exist, we mean they exist as background knowledge
13.06.18 01:09:01<HMCa> when we use the "(1 2 3)" in a rule, we are playing a trick with the scoping in the syntax sugar
13.06.18 01:10:44<HMCa> we're referring to a bnode that alreay exist, in the scope of the background context - not in the scope of the formula of the rule as the other vars are
13.06.18 01:11:05<HMCa> *already exists
13.06.18 01:14:44<HMCa> dmiles: I laughed hard at sophia being called out by fb as cargo culting, while sophia appears to have a literal cargo cult going around her
13.06.18 01:16:20<stoopkid> alright, i can see that the existentials in (?X) should be scoped to the background context, so, same holds for ?X
13.06.18 01:16:30<stoopkid>  ?*
13.06.18 01:18:17<HMCa> not exactly
13.06.18 01:18:23<HMCa> it is still scoped the same
13.06.18 01:18:43<HMCa> but, being in a list... it is in a list that does exist....
13.06.18 01:20:15<HMCa> if we take any length N list node to the background graph and say "is this instance one of those infinite supply of anonymous length N lists that you have existing back there?" - it will always answer yes
13.06.18 01:21:06<stoopkid> by resolution against those axioms in the n3 paper?
13.06.18 01:23:02<HMCa> yes, but apparently not as you might expect
13.06.18 01:23:13<HMCa> 1:37 < HMCa> so, probably it is important to understand first that neither of the two parts of this rule makes sense in isolation like that...
13.06.18 01:23:16<HMCa> 1:37 < HMCa> second, it is important to understand that the ?x is the same ?x
13.06.18 01:23:18<HMCa> 1:38 < HMCa> does either of those statements clarify anything?
13.06.18 01:23:30<HMCa> are we at least a little closer on either?
13.06.18 01:26:50<stoopkid> i understand the second statement if ?x is to be interpreted as a globally  scoped existential
13.06.18 01:30:57<HMCa> not x, but the list it is in
13.06.18 01:32:23<HMCa> that particular node that it has the rdf:first arrow from
13.06.18 01:32:48<HMCa> *bnode
13.06.18 01:33:27<stoopkid> why the list bnode but not the ?x ?
13.06.18 01:34:18<stoopkid> and so the ?x is intepreted as locally scoped?
13.06.18 01:35:15<HMCa> this is subtle: because there is no "all resources exist" rule...
13.06.18 01:36:03<HMCa> brb
13.06.18 01:36:11<stoopkid> so lists have special semantics distinct from all other resources?
13.06.18 01:37:11<dmiles> yes lists have special semantics distinct from all other resources :(
13.06.18 01:37:34<dmiles> oops but only in "isolation" :)
13.06.18 01:38:16<dmiles> {joe loves (?X)}   the ?X  is the same as {joe loves ?X}
13.06.18 01:38:59<dmiles> when it comes to thinking about quantification of ?X
13.06.18 01:39:26<stoopkid> i would interpret that as being a globally scoped existential
13.06.18 01:39:55<HMCa> heh
13.06.18 01:39:56<dmiles> yeah.. technically it is going to have to become a globally scoped existential
13.06.18 01:40:14<HMCa> only in that it needs to be in the list...
                 <dmiles> but only at query time
13.06.18 01:40:22<HMCa> ^
13.06.18 01:40:25<HMCa> this
13.06.18 01:40:36<HMCa> all background graph isn't really "there"
13.06.18 01:40:48<HMCa> it's "in the background" not in the kn
13.06.18 01:40:54<HMCa> *kb
13.06.18 01:41:54<stoopkid> not sure what either of you mean here
13.06.18 01:43:13<HMCa> heh
13.06.18 01:43:23<dmiles> well we are saying something slightly differnt.. (because we are addressing two differnt issues :P)
13.06.18 01:43:33<HMCa> dmiles: well, yes and no...
13.06.18 01:44:10<HMCa> dmiles: I'm certainly still not 100% on which aspect(s) he is confused about
13.06.18 01:44:44<HMCa> and they aren't exactly two different issues... it is consequences of the same "syntax sploit" timbl pulls with it ;-)
13.06.18 01:44:56<dmiles> HMCa: i think that he is seekign a set of rules of thumb about logical quantification of RDF vars
13.06.18 01:46:01<stoopkid> dmiles: im looking for an exact set of rules for interpretation of the syntax and mechanism of resolution
13.06.18 01:46:08<HMCa> dmiles: I think he understands the quantifications themselves, just not the details of "where" the quantifiers actually quantify
13.06.18 01:46:19<HMCa> heh
13.06.18 01:46:23<dmiles> so what is happening is we are explaining the specialness of Lists and he thinks that we are saying this has to do with ?X .. when the ?X being in a list or not is related but not
13.06.18 01:47:02<HMCa> yes, that is certainly a part I think
13.06.18 01:49:02<HMCa> so, ?X is not really special, as a node
13.06.18 01:49:17<HMCa> it lives where it lives and does what it does
13.06.18 01:50:03<HMCa> the special nodes are only the list bnodes themselves and, well, rdf:nil
13.06.18 01:50:47<dmiles> if it wasnt for timbls insane and useless example (that isnt even *possible* in a logic RDF anyways!) I think stoopkid be less confused
13.06.18 01:51:27<HMCa> the relation from the special bnode to the unspecial bnode is also in the background graph, if that helps
13.06.18 01:52:41<dmiles> maybe stoopkid still be confused as to "unspecial bnode", I get it, but nothing made it a bnode otehr than our common sense
13.06.18 01:52:52<HMCa> all of those relations exist because all lists exist, even before you begin to think about punching in "?X"
13.06.18 01:53:23<dmiles> RDF would not have made ?X into a bnode
13.06.18 01:53:51<dmiles> RDF would not have made ?X into a bnode (or an existential) .. it is the infernce engine that has to be that smart
13.06.18 01:53:59<HMCa> dmiles: well this is why we don't skolemize them...
13.06.18 01:54:09<HMCa> that is part of the smart
13.06.18 01:55:11<dmiles> right this would be an existential that wouldnt be subject to skolemizaion
13.06.18 01:56:29<HMCa> well, let's simplify for now and say we'll just leave skolemization until last... mentally keep everything "just anonymous" as much as possible, and discuss optimizations of it once he has it at all?
13.06.18 01:57:51<dmiles> makes sense
13.06.18 01:58:01<HMCa> cool
13.06.18 01:58:21<dmiles>  if this was about "pure logic" and not about RDF inference we'd even say this ?X was universal (to throw some gasloine arround jsut for a second)
                 <HMCa> stoopkid: how much are you following now?
13.06.18 01:59:27<HMCa> dmiles: well, that would be the intuitive interpretation, from what you see in the paper, yes?
13.06.18 01:59:43<dmiles> HMCa, <dmiles> if it wasnt for timbls insane and useless example (that isnt even *possible* in a logic RDF anyways!) I think stoopkid be less confused
13.06.18 02:00:20<HMCa> well this is not exactly a proper logic rdf, we're not in any owl land, this is n3!
13.06.18 02:00:36<HMCa> we be pirates, and here be dragons
13.06.18 02:00:38<dmiles> i am saying that timbls example makes no sense if you asre studying logical semantics of n3
13.06.18 02:00:41<dmiles> (or RDF)
13.06.18 02:00:43<HMCa> sure
13.06.18 02:00:45<HMCa> and sure
13.06.18 02:00:47<HMCa> agreed.
13.06.18 02:00:56<HMCa> and yet...
13.06.18 02:01:03<HMCa> all lists exist, damn it!
13.06.18 02:01:32<stoopkid> all list bnodes are globally scoped existentials, other vars that appear only in the head (including in facts) are locally scoped existentials, that's what i've got
13.06.18 02:02:04<HMCa> globally scoped existentials in the background graph
13.06.18 02:02:16<HMCa> other vars have whatever scope they have
13.06.18 02:04:57<HMCa> one reason dmiles might say this is particularly illogical is that the scope of a var node can change during reasoning, for example by binding it to a list (that exists (in the background graph))
13.06.18 02:05:41<HMCa> it isn't actually illogical, in the end, just probably an unexpected way of being logical :-)
13.06.18 02:05:56<HMCa> n3 makes a strange logic
13.06.18 02:06:01<HMCa> it is kinda like
13.06.18 02:06:03<HMCa> subleq
13.06.18 02:06:37<HMCa> in that they are strange by being minimal
13.06.18 02:06:56<HMCa> quads logic is "awkward" in the same way subleq logic is "awkward"
13.06.18 02:07:08<HMCa> you're cramming into a tight space
13.06.18 02:07:48<HMCa> we need to fit all of reasoning in some boxes of quaduples. ;-)
13.06.18 02:08:15<HMCa> (some boxes will be bound to be big and weird)
13.06.18 02:09:04<HMCa> dmiles: would you agree with all of that?
13.06.18 02:10:53<stoopkid> so as quads this would be "background ?L rdf:first ?X. background ?L rdf:rest rdf:nil" ?
13.06.18 02:12:27<HMCa> yes, with all arcs and all nodes but ?X being considered as being in the background
13.06.18 02:13:07<HMCa> see, part of the "trick" of it is that any time you slap a bame on to de-anonymize the node, you break things...
13.06.18 02:13:33<HMCa> *name
13.06.18 02:14:04<HMCa> (hence leaving skolemization out of the picture for now - any of it before the end
13.06.18 02:14:33<stoopkid> all facts go in the background graph right? (but not necessarily all vars occurring in those facts?)
13.06.18 02:15:37<stoopkid> background graph is the same default context?
13.06.18 02:15:41<stoopkid> same as*
13.06.18 02:18:22<HMCa> can only complicate things, because they'll be optimizations that always hve sp
13.06.18 02:18:29<HMCa> woops, lost power for a sec
13.06.18 02:18:58<HMCa> background graph != top level context graph, no
13.06.18 02:19:15<HMCa> *always have special cases)
13.06.18 02:19:47<HMCa> the background is "behind" the default context
13.06.18 02:20:17<dmiles> "the scope of a var node can change during reasoning, for example by binding it to a list (that exists (in the background graph))"  <- oh wierd if that list itself got passed? now it is someplace new and the quantification of it being placed in a rule might have a differnt meaning
13.06.18 02:21:24<dmiles> "<HMCa> dmiles: would you agree with all of that?"  <- yeah
13.06.18 02:21:28<HMCa> dmiles: let's try not to get astray on lists that contain themselves and such malformities, for now
13.06.18 02:21:52<HMCa> ;-)
13.06.18 02:22:24<HMCa> no second order until findall, plz k thx
13.06.18 02:22:52<dmiles>  "?L rdf:first ?X. background ?L rdf:rest rdf:nil"   <- this ithe thing that timbl says that should not be said.. first off .. RDF lists need to never be thought about in their deconstructed form
13.06.18 02:23:17<dmiles> not be thought of in desugared form
13.06.18 02:23:57<stoopkid> so the top-level context graph contains the background graph as a subgraph?
13.06.18 02:24:03<dmiles> desugared is created due to a hack that is not logic or should be related to logic
13.06.18 02:24:06<HMCa> stoopkid: no
13.06.18 02:24:57<HMCa> the background graph is sort of a special context that isn't in the kb, it is a consequence of the reasoner itself
13.06.18 02:25:10<stoopkid> so the top-level context graph is exactly the quads you put in the kb, and not including extra background graph or built-in theory stuff?
13.06.18 02:25:33<stoopkid> (top-level quads; facts & rules..)
13.06.18 02:26:34<HMCa> well, maybe "put in" is not a great phrase for it
13.06.18 02:26:46<HMCa> but where your reasoning "starts"
13.06.18 02:27:12<HMCa> whatever "document" you're calling default for this invocation of the reasoner
13.06.18 02:30:00<stoopkid> ok so
13.06.18 02:30:58<stoopkid> generally in predicate logic we're interpreting all the objects to be part of the same graph :)
13.06.18 02:31:26<HMCa> yup
13.06.18 02:32:52<stoopkid> but here the objects in our formulas reference nodes in distinct graphs, and which graph they're interpreted to be in can change over the course of inferencing?
13.06.18 02:33:37<HMCa> yes
13.06.18 02:33:48<HMCa> fun with bnodes
13.06.18 02:34:36<stoopkid> so what's the relationship between scoping and graph-membership here?
13.06.18 02:34:47<HMCa> now, that is sort of "beside the point" wrt understanding lists, but is part of the point of fully understanding the all lists existing axiom
13.06.18 02:35:13<HMCa> which is why dmiles says timbl says to just think of them as always sugar
13.06.18 02:35:15<stoopkid> all nodes in the background graph are globally scoped existentials?
                 <HMCa> but
13.06.18 02:35:24<HMCa> there's reality, where they are quads
13.06.18 02:35:40<HMCa> 34 < stoopkid> so what's the relationship between scoping and graph-membership here?
13.06.18 02:36:13<HMCa> not sure what you really ask... there kinda "isn't really one", at least not one that isn't incidental and unimportant
13.06.18 02:36:24<HMCa>  < stoopkid> all nodes in the background graph are globally scoped existentials?
13.06.18 02:36:27<HMCa> no
13.06.18 02:37:11<HMCa> rdf:nil for example
13.06.18 02:37:21<HMCa> is just a plain old uri node
13.06.18 02:37:31<HMCa> it exists in the background graph
13.06.18 02:38:24<HMCa> why?  Why not.  Just does.  Didn't have to, but where else? so why not.
13.06.18 02:39:28<dmiles> well take a look at this ...   (:joe :loves :sue)
13.06.18 02:39:35<HMCa> (some impls get this one wrong too, btw, not that it ever matters)
13.06.18 02:39:38<dmiles> can be seen as  ...
13.06.18 02:39:43<dmiles> (forSome ?j ?l ?s  {?j owl:sameAs :joe.     ?l subRelation  :loves.    ?s owl:sameAs :sue.    ?j ?l ?s} )
13.06.18 02:40:09<HMCa> shhhhhh no second order until findall plz
13.06.18 02:40:10<HMCa> :-P
13.06.18 02:42:18<stoopkid> so when i query a document, the triples can be coming from either the background graph or the top-level context graph?
13.06.18 02:42:58<HMCa> yes
13.06.18 02:43:58<HMCa> though it doesn't often matter, we can often "just pretend" that there is only graph
13.06.18 02:44:35<HMCa> like rdf:nil, it never actually matters where rdf:nil lives
13.06.18 02:44:42<HMCa> or the literal nodes
13.06.18 02:44:56<HMCa> we can "just pretend they're everywhhere"
13.06.18 02:45:37<HMCa> lists are mostly the same, unless you actually want to peek at the quads... ;-)
13.06.18 02:46:03<stoopkid> so, these graphs are special graphs that can have edges that go between each other?
13.06.18 02:47:09<HMCa> only the background graph does this, in a sense we "put it behind" every graph the same as we put it behind the default graph
13.06.18 02:47:27<HMCa> it's relations from its' special bnodes are special relations
13.06.18 02:48:08<HMCa> we can thing of it as merging every graph into it before we begin, and then taking it back out after we're done
13.06.18 02:48:34<HMCa> *think
13.06.18 02:54:56* HMCa gtg soon
13.06.18 03:08:48<koo5[m]> holy shit what a mess
13.06.18 03:09:31<koo5[m]> All these usually's and almost's
13.06.18 03:10:19<HMCa> heh, if you don't peek under the hood of thr sugared form, and just stick to anonymous internalized lists, you can avoid all of the mess
13.06.18 03:10:32<HMCa> *the
13.06.18 03:11:09<HMCa> if you want to know how the quads actually work, you have to get into how bnodes and contexts actually work
13.06.18 03:12:48<HMCa> (for onlookers: here when we talk about "context" we mean rdf reasoning contexts, and documents/provenance... not exactly our usual meaning of the word)
13.06.18 03:12:56<HMCa> s/and/aka/
13.06.18 03:25:20*** Join: suiqiublockchain (~suiqiublo@180.162.55.83, (unauthenticated): realname)
13.06.18 03:26:10<koo5[m]> So, maybe the weird behavior of internalized lists in univar was actually correct, mmm
13.06.18 05:14:08*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
13.06.18 05:58:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hnehzpoxjxpckwmx) left #AutoNomic: Quit: Connection closed for inactivity
13.06.18 06:02:19*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
13.06.18 07:05:06*** Join: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109, (unauthenticated): 5.29.152.109 - http://webchat.freenode.net)
13.06.18 07:07:13<nilli> I am finally actualy learning the details of the propagation of the information on the blockchain . that which is in the base of the consensus.
13.06.18 07:08:04<nilli> I know you think I should have done it long ago. but I waited for the moment I had to learn it
13.06.18 07:09:09<nilli> im using Andreas explanation https://www.youtube.com/watch?v=fw3WkySh_Ho
13.06.18 07:12:05<nilli> what im realizing is that in fact a race have tremendous effect here
13.06.18 07:12:13<nilli> I never thought of that
13.06.18 07:14:21<nilli> seemingly part of the design is a race condition but in fact the nature of information create the race due to a condition set by the protocol
13.06.18 07:15:17<nilli> so the race is not the design but a consequence
13.06.18 07:16:06<nilli> a consequence that point to me that the design is correct.
13.06.18 07:16:24<nilli> Do you see what I mean?
13.06.18 07:18:34<nilli> the race to get the payout is activating all the functions that we need in order to reach a consensus on the history of the ledger
13.06.18 07:20:23<nilli> But the race itself ,how we are racing, what are the "vehicles" and the tracks are that which matters
13.06.18 07:23:12<nilli> So the right design means seting a goal that can be reach only by using certain machines through a certain path.
13.06.18 07:29:19<nilli> In bitcoin we have two parallel races at the same time. (on the video minutes 34 to 39  more or less)and that is when the rules of the protocols are set .
13.06.18 07:34:06<nilli> now if we what to change a rule we have two different scenarios one like the bitcoin and one totally different
13.06.18 07:43:01<nilli> if the change is an added rule that is not creating a contradiction: like on first block we define A as All apples then comes B All apples are red
13.06.18 07:44:20<nilli> B will be register as a "valid transaction" meaning not contradictory and all nodes will race entering it to the new block
13.06.18 07:44:58<nilli> if contradictory will ofc reject like an invalid transaction
13.06.18 07:49:38<nilli> now assuming one node send a block with B "all apples are red" and one  node send a block with C  "Some apples are Green"
13.06.18 07:55:27<nilli> are we still at the same race as with the bitcoin double spend transaction?
13.06.18 07:57:13<nilli> Well not quite!!! we are actualy holding on for another race line to be activated
13.06.18 07:58:01<nilli> we need to decide based on context which is a better choice B or C
13.06.18 07:58:28<nilli> that word BETTER is very crucial here
13.06.18 07:58:55<nilli> Better asserts a goal and the shortest way to reach it
13.06.18 08:02:51<nilli> what this implies is that we as a decentralized system can not know the goals prior to a contradiction that makes us have to decide which one to choose
13.06.18 08:04:46<nilli> in other words. a goal is context based and if we deal with context change on a decentralized based we need to resolve the "common goal" issue
13.06.18 08:05:30<nilli> Interestingly enough the common goal easiest to agree on is "the truth"
13.06.18 08:06:11<nilli> "The truth" as what most participants will agree on
13.06.18 08:07:12<nilli> Now when this goal is activated on the context logic base we can define the rules for the change of the rules
13.06.18 08:07:56<nilli> change in terms of being more specific
13.06.18 08:08:13<nilli> as B or C
13.06.18 08:12:18<nilli> (just a little note if the change of the rule as at the level of A we still have that same other race line we need to wait on to be activated as context progress but it will be clear later)
13.06.18 08:15:54<nilli> So now we we have some nodes accepting B and some accepting C. from this point we have a fork lets call B red fork and C green fork
13.06.18 08:18:58<nilli> now on the next transaction we get D which say "some apples are yellow" and that transaction is checked by both red and by green chains
13.06.18 08:20:15<nilli> now we get an interesting situation : the green fork can accept the new transaction while the red can not.
13.06.18 08:21:42<nilli> if we compare to two forks now we see a difference in the volume of accepted transaction!!!~ red fork can not accept it while green can
13.06.18 08:22:30<nilli> now multiply that in more and more transactions
13.06.18 08:25:07<nilli> what we are getting in difference in the volume in term of space per block rather then the longest chain of blocks.
13.06.18 08:26:59<nilli> The nodes are then choose the most inclusive block not only the longest chain.
13.06.18 08:27:21*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xoietmrfxupqgyrw, stoopkid: stoopkid)
13.06.18 08:28:37<nilli> Thus  tossing coin type of context will results in arbitrary choice that will eventually results in the longest chain
13.06.18 08:31:49<nilli> and all other context will be favor base on being more inclusive of most observations facts as transactions that will set a more inclusive rules that allow these transaction in.
13.06.18 08:34:15<nilli> basically we create a dimensional block and the race is to have as many transaction allows into the block in terms of  agreeing with the logic
13.06.18 08:34:30<nilli> thus we create a knowledge machine
13.06.18 08:35:21<nilli> that incentevized to seek as much input and agree to the most inclusive rules based on the new input
13.06.18 08:36:38<nilli> it also the capable of calculating the benefit of undoing some of the blocks in order to accept a new rule without creating a contradiction.
13.06.18 08:41:24<nilli> for example if our network never encounter an input regarding apples after we create a red and green fork we choose the longest one, but if later on we encounter yellow and then pink
13.06.18 08:43:09<nilli> we should be able to identify some pattern of apple color forks and see if we should go back to all apples are red and change that
13.06.18 08:46:22<nilli> eventually having to reject all apples in colors for the  rest of the chain's life might be more expansive then going back to the point in the fork we choose the red fork based on longest chain
13.06.18 08:49:03<nilli> ......too much reading all ready :) and so much complexity of the simplest actions ....
13.06.18 09:00:49*** Quit: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109) left #AutoNomic: Ping timeout: 260 seconds
13.06.18 09:21:51<HMCa> walls and walls of text
13.06.18 09:40:42<HMCa> "Surprise, we're a CA!" --Tezos
13.06.18 09:40:46<HMCa> XD
13.06.18 09:41:03<HMCa> epic. :-|
13.06.18 09:47:11<HMCa> "Unsusprisingly, we're a CA." --QSP
13.06.18 09:47:14<HMCa> HEH
13.06.18 10:31:23<stoopkid> HMCa: does the convention of taking lists as arguments to preds acting as n-ary functions only work because of the special list bnode semantics? or would it work with a user-defined list type that doesn't rely on built-in lists?
13.06.18 10:34:40<stoopkid> and can you explain this one again: "?x rdf:first 5. ?x rdf:rest rdf:nil. ?x rdf:first ?what"
13.06.18 15:15:55<stoopkid> HMCa: eye test-cases & jos's response: https://pastebin.com/HHF66Pf0
13.06.18 17:54:03<HMCa> stoopkid: I would say that the special container bnode silliness is necessary for rdf in general, but may not always be necessary for ("single graph") applicative functor reasoning like that, specifically
13.06.18 17:55:17<HMCa> I'll probably try out the euleryap either tomorrow or this weekend
13.06.18 17:56:33<HMCa> @nilli: you seem to be on the right track, but still conflating/confusing what is implicitly fundamental to AN itself and what is contextual detail
13.06.18 17:57:48<HMCa> so some of what you said will only be true in some contexts, which happen to choose an implementation detail that aligns to what you described
13.06.18 17:58:01* HMCa gtg back afk
13.06.18 23:20:35<stoopkid> HMCa: "applicative functor reasoning" in the sense of this: https://www.ethz.ch/content/dam/ethz/special-interest/infk/inst-infsec/information-security-group-dam/people/andreloc/lochbihler2016itp.pdf ?
14.06.18 00:16:56<HMCa> maybe that is not the right term, but whatever sort of functor that "convention of taking lists" thing is :-)
14.06.18 02:35:32*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
14.06.18 02:37:21<nilli> just realized a funny little thing
14.06.18 02:39:14<nilli> AI can only be  decentralized, if its not, its not intelligence only a computing machine
14.06.18 02:40:34<nilli> and decentralized means creating its own rules
14.06.18 02:43:21<nilli> I know we say things related to it all the time but I never realized that to create AI someone first have to figure out what we try to do in the past 3.5 year (and HMCa way past that)
14.06.18 02:44:11<nilli> There is not AI without a fully decentralized system
14.06.18 02:45:44<nilli> ofc this implies that it have to manage its energy as part of the rules setup
14.06.18 02:49:35<nilli> since its autonomous in creating its own rules it governs the rules related to energy and the structure to incentevised energy investment from the "fragments" that is is made of
14.06.18 02:49:37<HMCa> a CA AI is... just a fancy megaphone. :-)
14.06.18 02:51:00<nilli> hey hmc what is CA . central  (somthing)? (cant remember ...)
14.06.18 02:51:09<HMCa> "Central Authority"
14.06.18 02:51:15<nilli> right
14.06.18 02:51:22<nilli> so what are you saying?
14.06.18 02:51:44<nilli> haa ok got it
14.06.18 02:51:46<HMCa> but we mostly don't actually talk about AI here
14.06.18 02:51:58<HMCa> or politics or religion
14.06.18 02:52:09<HMCa> "no comment list"
14.06.18 02:52:37<nilli> I know we dont ...(you said it a few times0 but actualy why
14.06.18 02:52:53<nilli> I get politics ant religion
14.06.18 02:53:19<nilli> but AI is not a matter of depute of ideas
14.06.18 02:54:38<HMCa> no comment.
14.06.18 02:54:48<nilli> anyway regarding AI... it comes along with the capacity to live
14.06.18 02:55:00<nilli> ....I guess thats the reason
14.06.18 02:55:54<HMCa> dototd: a gauntlet of competition of theories
14.06.18 02:56:30<HMCa> psa: taus may be hazard to your health
14.06.18 02:56:51<nilli> to your mental health
14.06.18 02:57:20<HMCa> general health :-)
14.06.18 02:57:46<HMCa> mental, physical, metaphysical, spiritual, etc...
14.06.18 02:58:23<nilli> you need to be beyond some point to survive it.....
14.06.18 02:58:26<HMCa> any sort of health you can think of, a tau can potentially make to suffer
14.06.18 02:58:29<nilli> guess who is?
14.06.18 02:58:36* HMCa shrugs
14.06.18 02:58:55<HMCa> I try not to speculate about post-genesis
14.06.18 03:00:16<nilli> its funny but this morning I was asking myself again what the f**k am i doing here? here on this project I mean?
14.06.18 03:00:30<nilli> well I guess just got the answer ...
14.06.18 03:00:52<nilli> so back to work ...
14.06.18 03:01:08<nilli> I did understand something very interesting yesterday
14.06.18 03:01:23<HMCa> maybe it does no such harm at all, maybe it does the scifi stereotype "kill all humans" thing
14.06.18 03:01:35* HMCa shrugs
14.06.18 03:03:16<nilli> ....it cant really harm you only expose you to see how you harm yourself
14.06.18 03:06:58<nilli> anyway ...you know how everyone complains about energy waste of the POW
14.06.18 03:07:43<HMCa> yes, it makes me chuckle
14.06.18 03:08:18<HMCa> anyone who makes that complaint doesn't understand POW. :-|
14.06.18 03:08:33<HMCa> (and/or is selling some snakeoil)
14.06.18 03:09:28<nilli> well that is since they assume POW to be what adam back expressed as POW which is spending of energy
14.06.18 03:10:25<nilli> they dont see it in the autonomous aspect of if
14.06.18 03:11:22<nilli> in fact satoshi's breakthrough is understanding just that....
14.06.18 03:13:19<nilli> he started with mining security for the consensus by employing hash power
14.06.18 03:13:24<HMCa> you're expending energy to assert your voice in the decision
14.06.18 03:13:45<HMCa> "hash harder" is also "hash louder"
14.06.18 03:18:51<nilli> we are expending energy to secure context (as knowledge)  by mining meaning. the vote is a means of decentralization. and the machine have to be designed in such way that the vote is insetevised to reach the goals of mining
14.06.18 03:19:44<nilli> in bitcoin the value of the coin is directly related to the security of the network in term of computing power
14.06.18 03:21:27<HMCa> yes
14.06.18 03:21:28<stoopkid> should note that so far PoW is simply the only demonstrated model, not a model demonstrated to be the only one possible
14.06.18 03:23:24<nilli> so if one would detach the expenses (waste :) ) of energy from the security of the consensus around the ledger it will kill the value of the coin.
14.06.18 03:24:07<HMCa> yes, this is an interesting open question, especially given the myriad "PoWhatever" schemes which are out there, and which all seem to share a (very!) few common fatal flaws, heh
14.06.18 03:25:10<nilli> I was thinking to the folding protein for example
14.06.18 03:25:22<HMCa> also, hi stoopkid! :-)
14.06.18 03:25:37<nilli> since it the example everyone talk about
14.06.18 03:25:55<stoopkid> heya
14.06.18 03:26:36<nilli> The creation of a token then have to be attached to some folding target
14.06.18 03:27:03<HMCa> the work function can not be arbitrary...
14.06.18 03:27:05<nilli> so the protocol will create a coin based on folding related  algorithm
14.06.18 03:27:13<HMCa> and still provide security
14.06.18 03:27:41<nilli> can you explain that better HMCa?
14.06.18 03:28:40<HMCa> what is used as work must fit a few basic criteria...
14.06.18 03:30:40<HMCa> the solution space should be uniform, the difficulty of instances must be exponentially scalable, there must not be trapdoor solutions, etc
14.06.18 03:31:14<HMCa> missing the mark on any one of these will doom the chain.
14.06.18 03:35:14<nilli> I need you to explain each a bit more
14.06.18 03:35:35<stoopkid> nilli: getting the problems from humans biases the work function in all the possible dimensions it can be biased in, i.e. they can generate non-random problems that are easy to solve and we don't have a way of asserting the difference really except by generating known/assumed-to-be-hard problems randomly ourselves so that we can be assured that "work" is actually being exerted
14.06.18 03:38:16<stoopkid> looking at the function that actually generates the work problem to be solved, it's fairly straightforward to see that it's both a) about as random as we could really hope to make it, b) pretty difficult, assuming P != NP
14.06.18 03:38:35<HMCa> nilli: another time perhaps, I will need to be going soon
14.06.18 03:39:24<nilli> there are other ways to insure randomness . reality is random. your device of observing is not.but as long as you use two devices  or more you will get a random output
14.06.18 03:39:54<HMCa> stoopkid hit the nail on the head wrt a summary - it must be "plain to see" that the work function is actually "hard work for everyone"
14.06.18 03:40:10<HMCa> and not just that it *is* hard...
14.06.18 03:40:30<HMCa> we mist be able to see and control *how* hard it is
14.06.18 03:40:45<HMCa> (to scale for "difficulty adjustment")
14.06.18 03:42:13<HMCa> protein folding fails all around... solution space is highly clustered, we can't know/control scale of difficulty to select instances, we can't know someone doesn't likely have a specialized computer for it, etc
14.06.18 03:43:42<stoopkid> people are actually incentivized by the system to put as much actual randomness into it as they can (key-pair generation), and then all this gets merkle-tree'd up with cryptographically secure hash-functions, so it's pseudo-randomness applied to actual randomness over and over until we finally generate a work problem at the end of it
14.06.18 03:44:46<stoopkid> (roughly speaking)
14.06.18 03:46:11<stoopkid> would be interesting to see a more rigorous estimate of a measure of bitcoin's randomness
14.06.18 03:48:00<HMCa> it is probably one of the single highest entropy creations of man
14.06.18 03:48:39<HMCa> I'd love to see a heat conparison between btc and particle colliders over time, heh heh
14.06.18 03:48:48<HMCa> *comparison
14.06.18 03:49:39<HMCa> which machine really churns more chaos curves in a year, btc or lhc? :-)
14.06.18 03:50:36<stoopkid> and all this isn't including the randomness involved with people actually deciding what blocks to mine (as the semi-random decision for which block goes on the chain affects all future hash-values & work-problems)
14.06.18 03:50:45<HMCa> probably hard to estimate for real, miners are not often forthcoming about their energy efficiencies :-)
14.06.18 03:56:12<stoopkid> also with protein-folding, you might actually require specialized knowledge in order to be able to solve (or even interpret) the problem correctly, and there might be dispute as to whether you have the right solution or not, who verifies that the protein actually does fold that way? we might be able to abstract away some part of the actual real-world protein-folding problem and get something with mechanically-verifiable
                 <stoopkid> solutions but with hash-reversal, everybody can be ensured that the problem isn't any harder for them than it is for anybody else, the algorithm is straight-forward, you just have to apply the CPU cycles, just like everybody else
14.06.18 03:58:13<HMCa> it does at least meet the "quick to verify" constraint, heh
14.06.18 03:58:38<HMCa> which, I think, might be why it is such a commonly cited example
14.06.18 04:00:14<HMCa> I gtg
14.06.18 04:03:26<nilli> HMCa [11:02] *hmca.* ok ... the only way to survive this is to leave and come back all the times to the point you know you can leave and comeback without risking anything
14.06.18 04:03:39<nilli> see you later
14.06.18 04:05:00<stoopkid> nilli: so, i should note that "exerting work" isn't actually the constraint that needs to be satisfied in order to allow decentralized consensus; the constraint that needs to be satisfied is that all participants agree
14.06.18 04:07:11<stoopkid> this is why non-blockchain decentralization works fine on the small-scale usually
14.06.18 04:07:18<stoopkid> we just tolerate forking on disagreement
14.06.18 04:07:58<stoopkid> this just happens to be problematic for certain applications, like money
14.06.18 04:08:48<HMCa> well we have to be able to know that everyone actually *has* agreed (byzantine generals problem)
14.06.18 04:09:34<HMCa> (sybil/eclipse/etc)
14.06.18 04:10:15<stoopkid> it's non-problematic basically when everybody has on average mutual disinterest in what everybody else is doing except for those that make up "the contexts they want to participate in"; this constraint isn't satisfied for a shared ledger storing a virtual representation of real value
14.06.18 04:11:38<stoopkid> could only satisfy the constraint to the extent that everybody could be made on average mutually disinterested in the values everybody else is storing in the ledger beyond "the contexts they want to participate in"
14.06.18 05:53:15*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
14.06.18 06:14:08*** Quit: suiqiublockchain (~suiqiublo@180.162.55.83) left #AutoNomic: Quit: Leaving
15.06.18 01:02:36<HMCa> side note, was the sui qiu ever translated?
15.06.18 01:27:44<dmiles> Oh if you guys are still looking for the correct semantics of semantic ingerence engines.. you really ought ot try out PowerLOOM .. it has ports in Lisp, Java and in C++
15.06.18 01:31:04<HMCa> i've played with loom briefly, never got around to powerloom
15.06.18 02:00:46<dmiles> it full implements and exceeds all the semantics of OWL/RDF etc
15.06.18 02:01:20<dmiles> since it was designed exactly like CYC/Logicmoo etc
15.06.18 02:01:32<HMCa> incl n3logic? :-)
15.06.18 02:01:35<dmiles> yes
15.06.18 02:01:44<HMCa> lbase?
15.06.18 02:01:55<dmiles> yes.. it even loads  lbase directly
15.06.18 02:02:10<dmiles> you can switch as to what sematic per module you want
15.06.18 03:13:34*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
15.06.18 03:14:07<nilli> 14.06.18 03:35:35<stoopkid> nilli: getting the problems from humans biases the work function in all the possible dimensions it can be biased in, i.e. they can generate non-random problems that are easy to solve and we don't have a way of asserting the difference really except by generating known/assumed-to-be-hard problems randomly ourselves so that we can be assured that "work" is actually being exerted
15.06.18 03:15:46<HMCa> ww4 is happening.
15.06.18 03:15:57<HMCa> I won't say why.
15.06.18 03:16:44<nilli> I dont totally understand why all the problems have to be same difficulty. in fact I almost can see a reason to be the oposite
15.06.18 03:16:46<HMCa> gangstalking cults exist.
15.06.18 03:17:11<nilli> hi HMCa are you in a middle of a converatsion?
15.06.18 03:17:22<HMCa> nilli: not thr same difficulty, bit a controllable difficulty
15.06.18 03:17:49<HMCa> we can make sha prefix collide exponentially harder/easier by adding/removing 0 bits
15.06.18 03:18:00<HMCa> this is the "target" value in bitcoin
15.06.18 03:18:11<HMCa> the work function needs to have a similar knob
15.06.18 03:18:35<HMCa> so that as resource is added to it, it can make individual instances more difficult, so that overall difficulty remains constant
15.06.18 03:18:49<HMCa> so that we get a block on regular intervals on average
15.06.18 03:19:18<HMCa> and yes, i'm in another conversation, but nevermind it
15.06.18 03:19:23*** Join: suiqiublockchain (~suiqiublo@101.83.160.150, (unauthenticated): realname)
15.06.18 03:21:28<HMCa> *gang-stalking groups (of many sorts) exist.
15.06.18 03:22:12<stoopkid> which war was ww3?
15.06.18 03:22:32<HMCa> ask some russians about that
15.06.18 03:24:13<nilli> few questions: is there a way to configure context into difficulty in term of solving its true/false state regarding how far you go to check it?
15.06.18 03:25:03<nilli> have difficulty be really just work going back
15.06.18 03:27:37<nilli> ofc I need to know that work was actualy done, but context can reveal to where back exactly on the time line we reached.
15.06.18 03:28:38<nilli> by reconfigure the same hash from the context
15.06.18 03:30:35<nilli> im sure you are like "what the heck?!!" :)
15.06.18 03:32:18<nilli> well... I want to use all that POW power go fact check back along the history of knowledge
15.06.18 03:33:54<nilli> and why?!!
15.06.18 03:35:52<nilli> unlike bitcoin transaction I dont only need to know and trust the last transaction before the current (or a short history before like 6)
15.06.18 03:36:31<nilli> when we talk about context all history matters
15.06.18 03:38:48<nilli> every context transaction (true/false) matters, since each time its measured against some other context
15.06.18 03:43:09<nilli> I think it is clear why for AI we need a machine that use all its power to fact check and not  randum number check
15.06.18 03:44:29<nilli> but im not talking about AI just about what will serve us as humans better in term of coordinating our work
15.06.18 03:45:54<nilli> coordinating is agreeing first and agreeing means shearing the same knowledge base
15.06.18 03:47:04<nilli> however to create that knowledge base we each report our experiences, and these then have to agree
15.06.18 03:47:34<nilli> these all are ofc context based
15.06.18 03:49:27<nilli> experiences can be configured for knowledge base based on volume (majority/minority)
15.06.18 03:50:27<nilli> However.... the minority is there in the history
15.06.18 03:52:09<nilli> The binary true/false can apply to a "single experience" line
15.06.18 03:53:07<nilli> and to a combined state of different experience as a consensus
15.06.18 03:54:06<nilli> but it is that same byzantine general problem and real time of observation
15.06.18 03:54:23<nilli> problem at real time
15.06.18 03:55:12<nilli> stoppkid HMCa, did I lost you right in the beginning there?
15.06.18 03:55:46<nilli> ok ill finish the though anyway
15.06.18 03:55:53<nilli> thought
15.06.18 03:58:09<nilli> So at any given block the consensus agree on some contextual state.
15.06.18 04:01:44<HMCa>  nilli> unlike bitcoin transaction I dont only need to know and trust the last transaction
15.06.18 04:01:47<HMCa>         before the current (or a short history before like 6)
15.06.18 04:01:52<HMCa> that is exactly like bitcoin
15.06.18 04:02:28<HMCa> to actually validate a new tx, you must know and vslidate the entire history since genesis
15.06.18 04:02:51<nilli> riight
15.06.18 04:03:12<nilli> but I also need to know the rejects....
                 <HMCa> no
15.06.18 04:03:28<nilli> I need to know the context of rejects
15.06.18 04:03:39<HMCa> no
15.06.18 04:03:47<nilli> lets take our red green and yellow appls
15.06.18 04:03:50<HMCa> tx that fell out of mempool or blocks that were featherforks are not needed at all
15.06.18 04:04:04<HMCa> I only have a couple of minutes btw
15.06.18 04:04:08<HMCa> 5-10 or so
15.06.18 04:04:16<nilli> ok let so  it fast
15.06.18 04:04:32<nilli> say  I had all red apple as true
15.06.18 04:04:56<HMCa> ("in some context A")
15.06.18 04:05:09<nilli> then the system get a claim that some are green
15.06.18 04:05:23<HMCa> in the same context?  It couldn't...
15.06.18 04:05:26<nilli> and reject it
15.06.18 04:05:48<nilli> but the it get 200 experiences of some are green
15.06.18 04:06:21<HMCa> it can't get 200 if it can't get 1...
15.06.18 04:06:41<HMCa> if the context says "all apples are red" then in that context all apples are red.
15.06.18 04:07:16<HMCa> no green apple may be introduced until apples are first redefined.
15.06.18 04:07:26<nilli> ok ... what I say that it will be able to get or reject after checking back to see if that claim was made before
15.06.18 04:07:38<HMCa> ?
15.06.18 04:08:05<HMCa> after validation of the chain up to the tip, we don't need to look back to earlier states to do reasoning
15.06.18 04:08:55<HMCa> and doing so can be of no benefit unless we hope to fork from an earlier state, which means we'd need to outpace the work function, which in any stable context would not be feasible
15.06.18 04:09:11<nilli> for context we will have to reconfigure the block in terms of state into stages
15.06.18 04:10:06<HMCa> huh?
15.06.18 04:10:36<nilli> basically we have to run as meany forks as there are nodes (maybe miners) for the doration  of the next block
15.06.18 04:12:04<HMCa> I don't really know what you're trying to say here
15.06.18 04:14:11<nilli> its like transaction of a coin is one direction while transaction of a context go in all directions until checked against all directions
15.06.18 04:15:05<HMCa> still no idea... contexts only "go in one direction" also
15.06.18 04:15:06<nilli> thus the first step is reconsidering all the directions
15.06.18 04:15:26<nilli> I knwo im confusing
15.06.18 04:15:44<HMCa> context states have a sucessor relation
15.06.18 04:15:59<nilli> it will matter if in the past there was an experience of green apples
15.06.18 04:16:17<HMCa> i dont know what you mean by "experience" here
15.06.18 04:16:31<nilli> even if was rejected
15.06.18 04:16:43<HMCa> but I can tell you that past states are only important to verifying consistency up to a current state
15.06.18 04:17:04<nilli> ok you system dont have any prior knowledge
15.06.18 04:17:15<nilli> it have to build all of it
15.06.18 04:17:44<nilli> any piece of information is relevant to the core context
15.06.18 04:18:08<nilli> so you and I know that if there is red there might be green
15.06.18 04:18:16<nilli> but the baby chain dont know any of it
15.06.18 04:18:17<HMCa> knowledge which is not retracted is persisted into future states
15.06.18 04:19:00<nilli> our chain is really like a baby
15.06.18 04:19:02<HMCa> also what is "the core context"
15.06.18 04:19:07<HMCa> core is not a context
15.06.18 04:19:25<HMCa> core is the program which acts as a node to speak the protocol
15.06.18 04:19:42<HMCa> core is your "wallet software"
15.06.18 04:19:49<HMCa> anyway i gtg
15.06.18 04:20:48<nilli> ok ill work on expressing it better. but I see the chain of context as baby brain
15.06.18 04:22:34<nilli> well the core as such the chain as the knowledge accumulated by all wallets
15.06.18 04:24:51<nilli> The byzantine general problem is addressed as a trust problem but it is so much more basic then that
15.06.18 04:25:33<nilli> it is about how we deal with the nature of information
15.06.18 04:26:30<nilli> and is about the observation
15.06.18 04:27:09<nilli> that is why it touches with basic notions in QM
15.06.18 04:28:50<nilli> a bitcoin token is a piece of information that have no context other then an identity (name)
15.06.18 04:29:05<nilli> that identity can be sum up to a number
15.06.18 04:31:06<nilli> and as such each  identity can be constructed along the one  identities the line "propagated" identities
15.06.18 04:32:20<nilli> name in terms of context is like an identity made out of many such lines of context
15.06.18 04:35:38<nilli> so if I name an animal the name itself is animal1 animal2 ext. basically is a number in a group. and thus each group represent a different identity line
15.06.18 04:41:04<nilli> but these lines are not formed  as separate lines until I figure it as a grupe
15.06.18 04:41:33<nilli> and new groups can form only based on "false"
15.06.18 04:42:20<nilli> ok HMCa? I think that is the point
15.06.18 04:42:34<nilli> how new groups can be formed
15.06.18 04:43:02<nilli> again in the bitcoin scenario I dont have to deal with that I have only one group
15.06.18 04:43:22<nilli> but on autonomic we need to deal with context
15.06.18 04:44:42<nilli> truing complete dont know how do deal with the creation of new group
15.06.18 04:46:31<nilli> If we use the blockchain to form new groups what we will get is a fractal formation
15.06.18 04:52:14<nilli> The information of each block is propagated in all direction creating an "all forks" like structure  to then agree on a new state of the entire block after communicating that "all fork" state
15.06.18 04:54:46<nilli> ok  that is the vision of it. but ill ABCD it as transactions of context to make myself clear.
15.06.18 04:58:28<nilli> eventually a creation of a new group is a possible logical result of such structure which in a way allow for different sort of logic develop. that of entangled state.
15.06.18 04:59:54<nilli> and gives us deterministic levels of uncertainties at each stage.
15.06.18 05:08:04<nilli> *my apologies for being such a pain in the chain.....:)
15.06.18 05:12:39*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
15.06.18 05:43:37*** Quit: suiqiublockchain (~suiqiublo@101.83.160.150) left #AutoNomic: Remote host closed the connection
15.06.18 11:59:11<HMCa> @nilli I'm afraid that I don't know what you mean by any of that.
15.06.18 12:01:12<HMCa> the core really is just the core, it ia distinct from the chain, and all walleta accumulate the same knowledge dor any given context
15.06.18 12:02:37<HMCa> a bitcoin token has no name/identity, this is misconception - bitcoin token themselves are an "imaginary thing" what actually exists are UTXOs
15.06.18 12:04:14<HMCa> I don't know what you mean by "line propogated identities" or "lines of context" or "group"/"new group" or "identity line"
15.06.18 12:04:31<HMCa> or what "groups" in this sense have to do with turing
15.06.18 12:05:34<HMCa> or "fractal formation" or "all forks structure/staye" or "deterministic levels of uncertainty"
15.06.18 12:05:39<HMCa> ...
15.06.18 12:06:13<HMCa> you really need to either stick to established terminology or clearly define your terms, or else I can't really respond.
15.06.18 12:09:05<HMCa> one thing that I can say for sure, in response to:
15.06.18 12:09:08<HMCa> 41 < nilli> and new groups can form only based on "false"
15.06.18 12:09:40<HMCa> our construct does (and can do) nothing with what is false
15.06.18 12:10:22<HMCa> for any given theory there are infinite things that may be said of it which are false
15.06.18 12:12:14<HMCa> our construct, being finite, can not hope to deal with what is false about a context, it can only deal with (a subset of) what is true about a theory
15.06.18 12:13:08<HMCa> (every context is a distinct, composed theory)
15.06.18 12:14:57<HMCa> every context proceeds sequentially as an accumulation of some true things (hence the name tauchain - a chain of valid truths)
15.06.18 12:15:40<HMCa> "valid" as in tautological - universally true regardless of assumed argument parameters
15.06.18 12:16:18<HMCa> "true for all possible witnesses"
15.06.18 12:20:02<HMCa> core is an "execution environment", aka a "virtual machine"... a metalogic
15.06.18 12:21:00<HMCa> it begins executing the contents of a fixed block, the "root genesis" theory
15.06.18 12:21:58<HMCa> this theory would define how blocks of the root chain propogate and sewuence, how new contexts may be created, and how contexts under root may be pegged with root
15.06.18 12:23:23<HMCa> it also defines how these new blocks may mutate the root theory
15.06.18 12:23:28<HMCa> as new blocks are found and validated by core, as per this theory, core executes these new blocks which may result in new contexts created by reference to *their* genesis blocks, their initial theory states
15.06.18 12:24:26<HMCa> further, during execution of root blocks the root theory may direct core to execute in these subcontext theories
15.06.18 12:25:38<HMCa> the subcontext theories similarly define how their new blocks are found and propogated, and how subcontexts may be created (again by reference to their genesis) and pegged into the context
15.06.18 12:26:13<HMCa> and during those context executions they may again direct core to execute within their subcontexts...
15.06.18 12:26:16<HMCa> and so on.
15.06.18 12:28:19<HMCa> over the course of this executing, core may also be directed to do messaging with other nodes - both for block propogation and for "application logic" so that contexts may be specialized and made useful to do more than just persist themselves and their subcontexts
15.06.18 12:29:21<HMCa> and in this way the whole syatem proceeds as a consistent sequence of a tree of chains ("treechains"!)
15.06.18 12:31:30<HMCa> each contextual theory also describes how that context and its' subcontexts may be mutated by subsequent blocks
15.06.18 12:33:01<HMCa> and core dictates that any mutations which are "reorged away" or which are never pegged to parent theories are, in effect, treated as never having existed at all
15.06.18 12:33:49<HMCa> so the system concerns itself with no false things, only true things and things which are considered as never having been said at all.
15.06.18 12:36:23<HMCa> and we can see that, for any given context, the whole system concerns itself with 3 distinct logics only... the fixed core metalogic, the theory of the genesis of that context, and the theory of the current state of that logic
15.06.18 12:38:35<HMCa> anything "between" a genesis state and the current state is ignored, and anything new that is inconsistent with the current state (considered "false") is ignored.
15.06.18 13:21:23<HMCa> dmiles: can you point me to some information of the lbase/rdf implementations of powerloom?
15.06.18 13:24:34<dmiles> well lbase is a restricted subset of KIF
15.06.18 13:24:52<dmiles> and PowerLOOM is all of KIF
15.06.18 13:25:33* HMCa disagrees with your first statement
15.06.18 13:25:34<HMCa> but
15.06.18 13:25:40<dmiles> https://www.isi.edu/isd/LOOM/PowerLoom/features.html  here is "Common Logic"
15.06.18 13:26:12<HMCa> ok, can you point me toward where rdf bnode/list rule semantics that it uses are?
15.06.18 13:26:38<dmiles> oh it doesnt uses of need the List part
15.06.18 13:26:46<dmiles> oh it doesnt use or need the List part
15.06.18 13:27:00<dmiles> it does have lists though
15.06.18 13:27:12<HMCa> ... so then it *doesn't* implement n3logic or lbase? XD
15.06.18 13:27:32<dmiles> it implemenmts all of n3logic or lbase
15.06.18 13:27:42<dmiles> the rdf:List part is just a syntactical hack
15.06.18 13:27:57<dmiles> to work arround the triple storage form
15.06.18 13:28:33<dmiles> rdf:List formation/decompostion has nothing to do with the logics of  n3logic or lbase
15.06.18 13:29:01<HMCa> let me try phrasing another way... what of it can i point stoop at so that he can see how list/bnode related n3 inferencing semantics "should be"?
15.06.18 13:29:44<dmiles> nothing :( not even in the docs that are supposed to be about them
15.06.18 13:30:18<dmiles> rephrased: nothing in  n3logic or lbase wil cover lists or bags  of  n3logic or lbase
15.06.18 13:30:20<HMCa> ok, so i'm not crazy or missing something, it just actually *doesn't* implement what you claimed it did? XD
15.06.18 13:30:42<HMCa> what I'm lookong for isnt there to ne found
15.06.18 13:30:45<HMCa> *be
15.06.18 13:31:42<dmiles> well first we have to look at it from the perspective i am claiming that List/Bag system is a bolted on wart in order to become RDF.. and violates all that  n3logic or lbase does
15.06.18 13:31:49<HMCa> so that is no help to us, and I just wasted time trying to find out how it migt be. XD
15.06.18 13:32:43<dmiles> anyhting that makes use uses the RDF list/bag system violates (out of the gate) the semantics and logic of lbase/n3
15.06.18 13:33:07<HMCa> ...huh?
15.06.18 13:33:42<dmiles> bnodes alone (nn-list based bnodes) do not however
15.06.18 13:33:52<dmiles> *nn/non
15.06.18 13:34:41<dmiles> bnodes though are an acceptable/usefull bolt-on
15.06.18 13:34:49<dmiles> just not as used in lists
15.06.18 13:36:04<dmiles> all RDF/n3 reasoners need to reformulate lists into a non-cons list before semantics are to be discussed in thjem
15.06.18 13:36:26<dmiles> is what i am saying
15.06.18 13:37:21<dmiles> if one tries to study n3/lbase or any logic using un-reformulated lists the system makes less or little sense
15.06.18 13:38:02<HMCa> I understand what you are saying about as well as I understand what nilli is saying, which is to say: almost not at all
15.06.18 13:38:08<HMCa> what I will say:
15.06.18 13:38:17<HMCa> openloom seems to be of no help to us
15.06.18 13:38:22* HMCa afk
15.06.18 13:38:56<dmiles> well if you look at lbase by itself PowerLOOM implenets all of Lbase as lbase does not use RDF lists
15.06.18 13:39:29<dmiles> lbase being https://www.w3.org/TR/lbase/
15.06.18 13:39:54<dmiles> yet lbase covers all of n3logic
15.06.18 13:41:06<dmiles> yet lbase does not use RDF list denoting bnodes
15.06.18 13:41:31<dmiles> i should have lead with that :)
15.06.18 13:44:19<dmiles> of course lbase does have compatable cons [de]construction but of course that is just an un-usefulll model .. and the fact bnodes get involed is more accidental
15.06.18 13:47:00<dmiles> what lbase was is the creator of IKL/CycL last ditch attempt to make the semantic web at least somewhat related to 30+ years of advanced technoilogy that created PowerLOOM/CYC etc
15.06.18 13:48:04<dmiles> Author:  Patrick Hayes, IHMC < phayes@ihmc.us> ..  R.V.Guha, IBM, < rguha@us.ibm.com> hated lbase
15.06.18 13:48:49<dmiles> Pat loved lbase
15.06.18 13:48:54<dmiles> Guha was fired from Cycorp for loving RDF more :)
15.06.18 13:50:16<dmiles> but Pat needed Guha to sign off on allow lbase/cycl/kif/ikl which why his name is on the document
15.06.18 13:51:26<dmiles> n3logic was a best-effort by TimBL to get "logic" into RDF
15.06.18 13:52:41<dmiles> LBase though is the real Semantics for Languages of the Semantic Web
15.06.18 13:53:08<dmiles> including n3 and does not use bnodes
15.06.18 13:53:46<dmiles> bnodes are bolted and and so far have been unexplainable
15.06.18 13:54:36<dmiles> though most people are smart and can "sort of" explain them
15.06.18 13:55:45<dmiles> here is part of how they work.. they are infact ...
15.06.18 13:56:49<dmiles> bnodes are skolem functions.. sk1(Docu,X0,X1,Xn..)   with one one free variable Docu that is the document
15.06.18 13:57:45<dmiles> the X0,X1 are any free vars that got used anteceedants that specify a bnode at a head
15.06.18 13:59:57<dmiles>  (?X0  loves ?X1)  -> (?X1 a  _:bnode1)   as an example
15.06.18 14:00:38<dmiles> i should say..    (?X0  loves ?X1)  -> (?X1 a  _:bnode-sk1)
15.06.18 14:01:35<dmiles> here sk1 is a function that returns rdfs:Class
15.06.18 14:03:08<dmiles> lets delete my last rule and replace it with..
15.06.18 14:03:43<dmiles> (?X0  a Person)  -> ( ?X0 loves _:bnode-sk1)
15.06.18 14:04:36<dmiles> now sk1's range corrisponds with the rdf:range of loves
15.06.18 14:05:34<dmiles> (?X1  a Person)  -> ( ?X1 child-of _:bnode-sk1)
15.06.18 14:06:20<dmiles> now sk1's range is the intersection of the ranges of loves and child-of
15.06.18 14:07:03<dmiles> (  _:bnode-sk1 a Female)
15.06.18 14:07:46<dmiles> sk1(Docu,joe,joe)  is  joes  mother
15.06.18 14:08:41<dmiles> (  _:bnode-sk1 marriedTo _:bnode-sk2)
15.06.18 14:09:14<dmiles> we now actualyl need to extend sk1 with yet another X3
15.06.18 14:09:59<dmiles> (  _:bnode-sk1 marriedTo _:bnode-sk2)  ==  (forSome ?X3 (_:bnode-sk1 marriedTo ?X3))
15.06.18 14:11:48<dmiles> _:bnode-sk1  is being built up as ..   sk1(Document,SheLoves,HasChild,MarriedTo,...)
15.06.18 14:13:20<dmiles> _:bnode-sk2 is is being built up as ..   sk2(Document,MariedTo,...)
15.06.18 14:14:23<dmiles> the marriedTo slots of each skolem is occupied by the other in this case
15.06.18 14:15:21<dmiles> the Document slot is filled by the these skolems originated from
15.06.18 14:15:55<dmiles> sorry i left out (joe  a Person)
15.06.18 14:17:45<dmiles> btw this document .. the way i careted it has a big flaw... it can only ever "allow" or "see" Persons that are siblings :)
15.06.18 14:17:53<dmiles> at once
15.06.18 14:19:02<dmiles> now imagine if in this document ( _:bnode-sk1 a Person)
15.06.18 14:19:32<dmiles> that would say _:bnode-sk1 was also its own mother
15.06.18 14:20:18<dmiles> this is sort of fine .. since our document doesnt know the physics of our relaity
15.06.18 14:21:31<dmiles> bnodes are actually a powerfull (but unusual) extension to logic
15.06.18 14:23:07<dmiles> oh btw hah LarKC actually implements RDF as well as Lbase
15.06.18 14:23:36* dmiles designed/wrote the JIT subsystem of LarKC
15.06.18 14:24:02<dmiles> https://sourceforge.net/projects/larkc/
15.06.18 14:24:36<dmiles> but we hide the LBase functionality.. but only hid it
15.06.18 14:24:51<dmiles> it is all there at the prompt
15.06.18 14:25:16<dmiles> it uses the same API that PowerLOOM used
15.06.18 14:25:35<dmiles> we hid that *because* we didnt know if TimBL really accepted LBASE
15.06.18 14:26:57* dmiles gets you the code of that API
15.06.18 14:27:46<dmiles> https://sourceforge.net/p/larkc/code/HEAD/tree/trunk/platform/src/main/java/com/cyc/cycjava/cycl/assertion_utilities.java
15.06.18 14:29:19<dmiles> well the code is spread out in https://sourceforge.net/p/larkc/code/HEAD/tree/trunk/platform/src/main/java/com/cyc/cycjava/cycl/
15.06.18 14:29:58<dmiles> now the bnode process i explained above.. i'll get you the code for that as well
15.06.18 14:30:25<dmiles> https://sourceforge.net/p/larkc/code/HEAD/tree/trunk/platform/src/main/java/eu/larkc/core/data/
15.06.18 14:33:23<dmiles> question #1  -  who agrees/disagrees with my explaiantion of how bnodes relate to skolem functions?
15.06.18 14:34:40<dmiles> question #2  -  can someone point me to a document that explains how bnodes/documents relate to logical existentials?
15.06.18 14:36:20<dmiles> see, i was required and paid for several years to write code that was based on this.. but it was just me using reverse engineering/mind reading of how it would work in order to even perform those jobs
15.06.18 14:37:49<dmiles> admittedly there are some of us whom have a distaste for skolem functions .. before i learned about skolem function i learned about actual Logic functions
15.06.18 14:38:11<dmiles> as invented in 1959 by McCarthy
15.06.18 14:43:03<dmiles> they are describged slightly @  https://en.wikipedia.org/wiki/Ontology_components     "Function terms"
15.06.18 14:43:12<dmiles> Function terms: complex structures formed from certain relations that can be used in place of an individual term in a statement
15.06.18 14:43:57<dmiles> they are *not* predicate Relations of course
15.06.18 14:44:39<dmiles> skolems luckily term out to be 100% in alignemt !
15.06.18 14:45:40<dmiles> in fact we even have a job for someone at cycorp that whenever a ckolem function is found in Cyc someoen has to got and rename or map it into an existing  "Function term" we call;ed Reifiable Functional Denoted Term
15.06.18 14:47:28<dmiles> can any guess what the Intensional Collection that denotes apples the fruit?
15.06.18 14:47:42<dmiles> (SeedFn AppleTree)
15.06.18 14:48:39<dmiles> (SeedFn ?W)  is the seed of all things that have seeds
15.06.18 14:49:20<dmiles> (SeedFn AppleTree)  you might actually makes bnode called  Apple-TheFruit
15.06.18 14:53:09<dmiles>  (SeedFn ?W)  was one produced by  (forall ?W (isa ?W FruitTreeType) =>(forSome ?C (isa ?C ?W) (seed ?W ?C)))))
15.06.18 14:53:45<dmiles> this made a SKF-6666666
15.06.18 14:54:01<dmiles> someone renamed that to SeedFn :)
15.06.18 14:54:15<dmiles> actualy FruitFn later on
15.06.18 14:54:39<dmiles> her eis a small doc http://www.cyc.com/syntax/non-atomic-terms/
15.06.18 14:56:23<dmiles> when you here that Bnodes are reifications.. this is the document that will explain it for you
15.06.18 14:56:28<dmiles> hear*
15.06.18 14:56:39<dmiles> where they got the term "reification" from
15.06.18 14:57:28<dmiles> in 1959 when Pat created the langage that Pat Hayse would eventually call LBase
15.06.18 14:57:49<dmiles> Pat Hayse/John McCArthy cocreated the language togehter
15.06.18 14:59:57<dmiles> Cyc, LarkC, OntoLOOM, SNARK, Flora2, SigmaKEE (Later I renamed to Logicmoo because i didnt want it to conflict with the version i careate for the NSA)
15.06.18 15:00:22<dmiles> are knonw implementations of this language
15.06.18 15:01:39<dmiles> oh LEO-II and Vampire-KIF implement it as well
15.06.18 15:02:44<dmiles> Vampire-KIf not so much .. SigmaKEE (owned by my supervisor Adam Pease) swithed to Vampire-KIF but it was unable to make all the previous infernces we could once malke
15.06.18 15:03:58<dmiles> PowerLOOM/OntoLOOM etc trails behind CYC (who creaked LarKC) in the area of Loading RDF directly
15.06.18 15:04:52<dmiles> Flora2 is the XSB impl of  1959 Pat Hayse/John McCArthy  .. Situation Calculus
15.06.18 15:05:10<HMCa> 2 < dmiles> LBase though is the real Semantics for Languages of the Semantic Web3 < dmiles> including n3 and does not use bnodes
15.06.18 15:05:16<HMCa> nonsense
15.06.18 15:05:30<HMCa> lbase certainly does have bnodes in the spec
15.06.18 15:06:32<dmiles> yes Pat had to include them .. just like the spec had to include ref:rest/rdf:First
15.06.18 15:07:18<stoopkid> aren't the bnodes in the lbase spec not actually lbase but instead an example translation of RDF into lbase semantics?
15.06.18 15:07:37<dmiles> yes, well said stoopkid
15.06.18 15:07:38<HMCa> stoopkid: in lbase bnodes==variables
15.06.18 15:08:07<dmiles> right bnodes are actualyl uninstanced existentials
15.06.18 15:08:29<HMCa> and hi stoopkid !
15.06.18 15:08:46<stoopkid> hey
15.06.18 15:08:50<HMCa> did you adopt those dogs yet? ;-)
15.06.18 15:09:09<dmiles> since rdf is so stoopid that it can only do tripples we needed a way to spearad logical variables accrossed many triples
15.06.18 15:09:27<dmiles> bnodes allow a variable to exist between several triple
15.06.18 15:09:29<HMCa> and how is the spinache farm coming along? :-D
15.06.18 15:09:30<stoopkid> HMCa: working on it
15.06.18 15:10:29<dmiles> in order to implement  "LBase: Semantics for Languages of the Semantic Web" in RDF , you use bnodes
15.06.18 15:11:25<stoopkid> is this what we're referencing for semantics? https://www.w3.org/TR/lbase/
15.06.18 15:11:31<dmiles> yes
15.06.18 15:11:36<dmiles> at least i am
15.06.18 15:13:39<stoopkid> afaict from this document, pure lbase has no notion of "bnodes"
15.06.18 15:13:57<dmiles> search for "blank"
15.06.18 15:15:40<stoopkid> section 2.2 Lbase syntax: "A term is either a name or a special name or a variable, or else it has the form f(t1,...,tn) where f is an n-ary function name and t1,...,tn are terms."
15.06.18 15:16:26<dmiles> yeah these are the FruitFn that Pat documented at Cycorp
15.06.18 15:16:41<stoopkid> variables could be "interpreted" as bnodes, but since this is the semantics we're interpreting *into* that doesn't make much sense, rather, bnodes in another SWEL could be interpreted as Lbase variables
15.06.18 15:16:42<dmiles> explained here:  http://www.cyc.com/syntax/non-atomic-terms/
15.06.18 15:17:32<dmiles> well Bnodes need as arg1 the context of the Document
15.06.18 15:18:47<dmiles> which is where HMCa was trying to explain scope of bnodes and it starts to sound like he is making it up.. he is not.. he is correct
15.06.18 15:18:48<stoopkid> terms of the form "f(t1,...,tn) where f is an n-ary function name and t1,...,tn are terms." could be taken as implicitly specifying a bnode (the object resulting from applying the function f to the terms t1,...,tn, or even just the syntax tree representing f(t1,...,tn)) but this only works under certain interpretations of those terms, and from what i can tell lbase is potentially more flexible in what interpretations it
15.06.18 15:18:49<stoopkid> allows
15.06.18 15:19:40<dmiles> yes lbase was Pats attempt to fix all the fuckups that are made in RDF
15.06.18 15:19:55<dmiles> well allow it to do all the things we had already been doing
15.06.18 15:20:19<dmiles> so he made it flexible in our to not shoot our feet out from under us
15.06.18 15:20:30<dmiles> so he made it flexible in order to not shoot our feet out from under us
15.06.18 15:21:42<dmiles> which Pat evolved LBase back into the orignal system  @ http://www.jfsowa.com/ikl/
15.06.18 15:21:59<dmiles> "From the Conceptual Schema to the Semantic Web"
15.06.18 15:24:40<dmiles> <stoopkid> terms of the form "f(t1,...,tn) where f is an n-ary function name and t1,...,tn are terms." could be taken as implicitly specifying a bnode (the object resulting from applying the function f to the terms t1,...,tn, or even just the syntax tree representing f(t1,...,tn)) but this only works under certain interpretations of those terms, and from what i can tell lbase is potentially
15.06.18 15:24:42<dmiles> more flexible in what interpretations it
15.06.18 15:24:44<dmiles> and that is exactly what i am saying
15.06.18 15:25:52<dmiles> is bnodes are varalbe that stand in the places of f(t1,...,tn)
15.06.18 15:25:55<dmiles> stand in for the result of that
15.06.18 15:26:37<dmiles> interestingly when a bnode is use in pointing at another bnode  .. in my   (  _:bnode-sk1 marriedTo _:bnode-sk2)   example
15.06.18 15:27:33<dmiles> this allows for a fairer represenation of skolems
15.06.18 15:28:06<dmiles> that is that each function takes the intended result of the other function
15.06.18 15:29:06<dmiles> sorry... "fairer represenation of existentials"
15.06.18 15:30:08<dmiles> secretly i like that bnode wart.. the ability to make things like _:bnode-AllahMyGod
15.06.18 15:30:40<dmiles> notice though  what if i jsut made :AllahMyGod ?
15.06.18 15:30:59<dmiles> myDoc:AllahMyGod ?
15.06.18 15:31:53<dmiles> btw  ":AllahMyGod" == "myDoc:AllahMyGod" and a differnt item than " _:bnode-AllahMyGod"
15.06.18 15:32:20<dmiles> the differnce here is i made   _:bnode-AllahMyGod a document private constant
15.06.18 15:32:52<dmiles> but just as existental
15.06.18 15:33:35<dmiles> if you need to use myDoc the only way you can line him up with your god.. is to carry " _:bnode-AllahMyGod"  information about whom she is
15.06.18 15:34:04<dmiles> if you need to use myDoc for some reason THEN the only way you can line him up with your god.. is to carry " _:bnode-AllahMyGod"  information about whom she is
15.06.18 15:34:32<dmiles> you might realize in mid-inference that our gods have differnt genders
15.06.18 15:36:10<dmiles> had you import myDoc  and i had used   myDoc:AllahMyGod  instead.. you might have still inferred that.. but being i used a Blanknode I forced you into checking
15.06.18 15:37:32<dmiles> also being a blanknode gave you the option to still be mono-theistic
15.06.18 15:38:24<dmiles> in case your doc had  yourDoc:YHWH
15.06.18 15:40:09<dmiles> ok to address RDF lists, lets think abotu the Bnodes used these a fCons(First,Rest) functions
15.06.18 15:41:15<dmiles> for a proper list.. you create them with    fCons(First,fCons(Second,fCons(LastAndThird,rdf:nil)))
15.06.18 15:42:27<dmiles> fCons is a function that returns a Cons that in RDF is a bnode
15.06.18 15:43:01<stoopkid> "Intuitively, the meaning of an expression containing free variables is not well specified (it is formally specified, but the interpretation of the free variables is arbitrary.) To resolve any confusion, we impose a familiar convention by which any free variables in a sentence of a knowledge base are considered to be universally quantified at the top level of the expression in which they occur. (Equivalently, one could
                 <stoopkid> insist that all variables in any knowledge-base expression be bound by a quantifier in that expression; this would force the implicit quantification to be made explicit.)"
15.06.18 15:45:11<stoopkid> is this why "?X" acts like it's universally quantified in the fact "(?X)" and "?x" acts like it's universally quantified in the fact "?x id ?x" ?
15.06.18 15:45:16<dmiles> yeah this is the cundrum that has made all of our explaintions seem random
15.06.18 15:46:39<dmiles> well the  "(joe loves (?X))" should prablaby have the same quantification for "(joe loves ?X)"
15.06.18 15:47:34<dmiles> if you have "(?X)" as a Fact .. it is saying    "(?X) a rdf:List"
15.06.18 15:47:55<dmiles> kind like "1 a rdf:Number"
15.06.18 15:48:52<dmiles> ay:   "(+ 1 1) a rdf:Number"
15.06.18 15:49:29<dmiles> in  "(?X) a rdf:List"  and "(?Y) a rdf:List"   are ?X and ?Y the same?
15.06.18 15:50:29<dmiles> "_:FoodsIWillEat a rdf:List"
15.06.18 15:51:25<stoopkid> ok let's do this:
15.06.18 15:53:16<stoopkid> i'll make an ASCII syntax for general first-order-logic (with LBase terms), with n-ary functions & relations, along with a BNF grammar describing it
15.06.18 15:54:41<stoopkid> so then there won't be any confusion as to what's being expressed or how to express a FOL sentence
15.06.18 15:56:16<dmiles> we might still have some ambiguity of Qnantification though?
15.06.18 15:56:22<stoopkid> then, we can specify constraints on this to determine essentially a subset of the language representing a normal form for statements in the language
15.06.18 15:56:24<stoopkid> no
15.06.18 15:56:38<stoopkid> because we would write "forall" and "exists" explicitly everywhere
15.06.18 15:57:28<stoopkid> (or some more convenient but equally explicit identifiers)
15.06.18 15:58:25<dmiles> some poepel when trying to do thattask had decided that if somone doesnt explicitly quantify a variable that it means forAll by default.. you may even do that if you'd like ":)
15.06.18 16:00:09<dmiles> i am so used to doing that mentally
15.06.18 16:02:32<dmiles> get so used to doing *that*.. it makes me inclined to see   ?y      {?x a Nat} => {?x suc ?y. ?y a Nat}  as universal
15.06.18 16:02:49<stoopkid> i'd leave that for a secondary interpretation and have the default be that free-variables just literally don't even have an interpretation
15.06.18 16:02:54<dmiles> in fact it *is* univeral
15.06.18 16:03:58<dmiles> but in practical use ?y in {?x a Nat} => {?x suc ?y. ?y a Nat} .. becomes a proof carrying existential
15.06.18 16:05:05<dmiles> ?y = succ(succ(succ(?y))) thats proof carries how many times it used that rule
15.06.18 16:06:08<stoopkid> dmiles: btw that's what the algebraic/inductive types in MLTT/Agda do
15.06.18 16:07:07<dmiles> MLTT/Agda certainly does much more than the average language!
15.06.18 16:07:32<stoopkid> that's quite the understatement :)
15.06.18 16:07:41<dmiles> now if we can makes its base logical theory do the rest of logic to?
15.06.18 16:08:08<dmiles> such as  temporal cardinalities
15.06.18 16:08:49<HMCa> sorry, got pulled away
15.06.18 16:08:51<dmiles> and other modal cardinalities
15.06.18 16:08:56<HMCa> dmiles: it already does
15.06.18 16:08:59<HMCa>  stoopkid> i'll make an ASCII syntax for general first-order-logic (with LBase terms), with
15.06.18 16:09:02<HMCa>            n-ary functions & relations, along with a BNF grammar describing it
15.06.18 16:09:05<HMCa>  stoopkid> so then there won't be any confusion as to what's being expressed or how to
15.06.18 16:09:08<HMCa>            express a FOL sentence
15.06.18 16:09:27<HMCa> if we sacrifice homoiconicity then we might as well sacrifice the whole semantic web thing, imo?
15.06.18 16:09:43<HMCa> and I really *don't* want to sacrifice either
15.06.18 16:10:35<stoopkid> this isn't to use in the final product, this is to use for expressing the semantics
15.06.18 16:11:37<stoopkid> we take a general syntax for FOL, on that syntax we specify constraints that describe a subset of the syntax
15.06.18 16:12:39<stoopkid> this subset will represent the direct 1:1 translations of AutoNomicLang into this general FOL syntax
15.06.18 16:13:10<HMCa> why not just use lbase as that?
15.06.18 16:13:51<stoopkid> we will i'm just going to write a concrete syntax with BNF for it, unless you or dmiles have one handy that i should use?
15.06.18 16:14:14<dmiles> btw .. should  lbase be extended to have blank nodes as a semematic object?
                 <HMCa> s-expr bnf is 2 lines... lol
15.06.18 16:14:33<HMCa> dmiles: what would that achieve?
15.06.18 16:14:50<dmiles> the ability to load RDF documents into LBase easier
15.06.18 16:15:08<dmiles> "easier"
15.06.18 16:15:14<stoopkid> an s-expr grammar was probably what i was gonna use
15.06.18 16:15:55<dmiles> right now RDF documents have to be turned into one single laerge LBase expression
15.06.18 16:16:27<dmiles> in order to get bnodes to properly scope
15.06.18 16:16:34<HMCa> hrmm
15.06.18 16:16:43<HMCa> i'd have to think about that
15.06.18 16:16:46<dmiles> just like list-based-bnodes have to be converted back into lists
15.06.18 16:17:04<HMCa> gtr again for now
15.06.18 16:17:40<dmiles> ttys!
15.06.18 16:18:51<dmiles> bnodes in LogicMOO as created by    (hypotheticalTerm iMyGodAllah)
15.06.18 16:20:15<dmiles> this means that if you are querying for actual gods iMyGodAllah needs to unify with a non-hypothetical God in order to to be helpfull in your query
15.06.18 16:20:35<dmiles> in your answered result
15.06.18 16:22:04<dmiles> in the case the KB contains only three hypothetical gods and no term not maked with hypotheticalTerm .. i am going to rutunr you 7 sypothical god
15.06.18 16:23:09<dmiles> in the case the KB contains only three hypothetical gods and no term not "marked" with hypotheticalTerm/1 .. you are supposed to get back 7 hypothetical gods?
15.06.18 16:23:32<dmiles> lets say at first you are
15.06.18 16:24:22<dmiles> now i change it so that two hypothetical gods are either men or women but not both
15.06.18 16:25:01<dmiles> i mean that one uis a woman and one is a man.. and no god is allowed to be both
15.06.18 16:25:25<dmiles> now how many hypothetical god can there be?
15.06.18 16:25:59<dmiles> for Logicmoo i have written a few tests in LBase for this
15.06.18 16:26:34<dmiles> I hope btw that Ohads TML ends up being LBase
15.06.18 16:26:48<dmiles> LBase=IKL=CYCL=Logicmoo
15.06.18 16:27:15<dmiles> =GameDescriptionLanguage=KnowedgeInterchangeFormat
15.06.18 16:27:36<dmiles> =SUO-KIF=MELD
15.06.18 16:29:00<dmiles> the only differnces is how many higher order features that a minimally expected by users to work is the differnce
15.06.18 16:29:51<dmiles> =CLIF
15.06.18 16:30:42<dmiles> it be nice to one day get a list of all the names that McCarthy/Pat's Language have been called over the last 58 years
15.06.18 16:40:22<dmiles> http://hets.eu/ is interesting in that it combines all of those lnaguages with programing
15.06.18 16:43:12<dmiles> maybe  Ohad's TML and  AutoNomicsLang will fit to that framework as well
15.06.18 16:43:33<dmiles> um into that *ToolSet*
15.06.18 16:49:25<dmiles> =N3Logic ?
15.06.18 16:51:17<dmiles> i think the answer according to https://www.w3.org/DesignIssues/N3Logic is yes
15.06.18 16:52:29<dmiles> i think  eye.yap / cwm.py  codebases are what thorws you guys off
15.06.18 16:53:29<dmiles> and what i described in my above Gods' scenario
15.06.18 16:54:12<dmiles> here i think is Autonomic and Ohad's todo list https://docs.google.com/document/d/1VJkMjqcsRt8EeHneQbtuAuBb5Tpn1s7rtEFAqJxDqe0/edit
15.06.18 16:55:42<dmiles> at least 90% of that list is applicatble
15.06.18 17:01:51<dmiles> What no one can agree on "cannonical" language exists?
15.06.18 17:02:42<dmiles> stoopkid = Agda,    DMiles = Boxlog  ,  aindilis = PDDL
15.06.18 17:03:10<dmiles> the only one i think that is correct is aindilis :O
15.06.18 17:03:22<stoopkid> lol
15.06.18 17:06:00<dmiles> dmiles dont think the power of PDDL is acheiveable unless the the :INIT  :AXIOMs and :DERIVED-* are re-encoded into Boxlog first
15.06.18 17:06:02<HMCa> s/agda/cubical mltt/
15.06.18 17:06:06<HMCa> HEH
15.06.18 17:06:28<stoopkid> yea i'm quite fond of cubical actually
15.06.18 17:07:31<stoopkid> dmiles: for clarity, cubical mltt is just mltt with a better interpretation & axiom-set for handling equality
15.06.18 17:12:19<dmiles> my concern has been much related to the type theory not agregating at runtime
15.06.18 17:12:29<dmiles> there is no reason it shouldnt!
15.06.18 17:14:15<dmiles> that paper that HMCa linked to shows it is even possible
15.06.18 17:15:09<stoopkid> dmiles: want to mess around with agda or mortberg's cubicaltt (or redprl if HMC wants to join in and teach us how to use it) and try to formalize section 2.2 of the lbase doc so that you can see what i'm talking about with representing this kind of "real world knowledge" (informal doc in natural lang, about real-world concepts) in mltt?
15.06.18 17:15:34<stoopkid> type theory doesn't really tell what to do or not do at runtime :)
15.06.18 17:16:51<dmiles> well am looking for ways that real world knowledge alters programs
15.06.18 17:17:27<stoopkid> altering / "doing" things is kind of a separate concern from what type theory even is
15.06.18 17:17:30<dmiles> i can round trip natlang in and out of LBase
15.06.18 17:18:02<stoopkid> should be able to do so even easier in MLTT which is higher-order logic whereas LBase is only FOL
15.06.18 17:18:30<dmiles> can LBase round trip into agda automatically?
15.06.18 17:18:40<dmiles> in/out of
15.06.18 17:19:03<stoopkid> into for sure, i don't think out of though
15.06.18 17:19:23<dmiles> right " MLTT which is higher-order logic whereas LBase is only FOL"  is a one way trip
15.06.18 17:19:47<dmiles> in practice LBase in infinate ordered
15.06.18 17:20:16<dmiles> for instance you can quantify over relations and even function heads of skolems
15.06.18 17:20:38<dmiles> the F of of F(x1,x2..)
15.06.18 17:21:02<dmiles> also you can quantify over predicate Relations
15.06.18 17:21:06<stoopkid> so "in practice Lbase" != "Lbase" ?
15.06.18 17:22:09<dmiles> if "in practice Lbase" == "implmnetation of LBase" then they shouild be the same
15.06.18 17:22:51<stoopkid> i agree that implementations should match specs
15.06.18 17:23:14<dmiles> the only impls of LBase that match the spec and work are: LEO-II, Logicmoo, CYC, PowerLOOM, LarKC, SNARK
15.06.18 17:23:29<stoopkid> so these are all only first-order systems?
15.06.18 17:23:54<dmiles> they all are systems that do higher order theory from a first order "lookihng" representation
15.06.18 17:24:21<dmiles> for isntance, we use first order quantifiers over entire unknable logical sentences
15.06.18 17:24:28<stoopkid> "The conventional textbook treatment of first-order interpretations assumes that relation symbols denote relations. We will modify this slightly to require that relation symbols denote entities with an associated relation, called the relational extension, and will sometimes abuse terminology by referring to the entities with relational extensions as relations. This device gives Lbase some of the freedom to quantify over
                 <stoopkid> relations which would be familiar in a higher-order logic, while remaining strictly a first-order language in its semantic and metatheoretic properties. We will use the special name Relation to denote the property of having a relational extension."
15.06.18 17:24:57<stoopkid> i think this is what Henkin semantics is
15.06.18 17:25:43<dmiles> well CWM /N# often tern that into Henkin.. which i dont think is great
15.06.18 17:26:13<dmiles> but most textbooks only teach Henkin
15.06.18 17:26:22<dmiles> how to implment Henkin
15.06.18 17:26:30<stoopkid> i mean, you would have to turn it into at least something like Henkin-semantics in order to satisfy the spec (which states that the intention is to remain strictly within FOL semantics/metatheoretic properties)
15.06.18 17:27:17<dmiles> right.. it looks like Henkin for sure but in pacticve Henkin is silly PredVars
15.06.18 17:27:37<dmiles> and LBase is not about Prevars
15.06.18 17:27:43<dmiles> Predvars*
15.06.18 17:28:16<dmiles> LBase looks syntacticvally like Prevars.. and even can act like Predvars
15.06.18 17:28:31<stoopkid> depends on the interpretation of Predvars
15.06.18 17:28:40<dmiles> but semantically to be Henkin would break LBase notions
15.06.18 17:29:14<dmiles> for instance.  (?R 1 2)   solve for R?
15.06.18 17:30:16<dmiles> ?R = ?R ; (forSome ?R (?R 1 2))
15.06.18 17:30:50<dmiles> that is Henkin
15.06.18 17:31:02<dmiles> ?R = ?R ; (forAll ?R (?R 1 2))
                 <dmiles> that is non-Henkin
15.06.18 17:32:19<dmiles> Predvars is about the Henkin i assume
15.06.18 17:32:50<dmiles> Logicmoo/LBase ensures that neither answer is more correct
15.06.18 17:33:51<dmiles> i mean we specifically avoid trying to dictate as to which is correct
15.06.18 17:34:15<stoopkid> "The explicit extension mapping is a technical device to allow relations to be applied to other relations without going outside first-order expressivity. We note that while this allows the same name to be used in both an individual and a relation position, and in a sense gives relations (and hence functions) a 'first-class' status, it does not incorporate any comprehension principles or make any logical assumptions about
15.06.18 17:34:18<stoopkid> what relations are in the domain. Notice that no special semantic conditions were invoked to treat variables in relation position differently from other variables. In particular, the language makes no comprehension assumptions whatever. The resulting language is first-order in all the usual senses: it is compact and satisfies the downward Skolem-Lowenheim property, for example, and the usual machine-oriented inference
                 <stoopkid> processes still apply, in particular the unification algorithm. (One can obtain a translation into a more conventional syntax by re-writing every atomic sentence using a rule of the form R(t1,...,tn) => Holds(R, t1,...,tn), where 'Holds' is a 'dummy' relation indicating that the relation R is true of the remaining arguments. The presentation given here eliminates the need for this artificial translation, but its existence
                 <stoopkid> establishes the first-order properties of the language. To translate a conventional first-order syntax into the Lbase form, simply qualify all quantifiers to range only over non-Relations. The issue is further discussed in (Hayes & Menzel ref). )"
15.06.18 17:35:25<stoopkid> let's check out Hayes & Menzel :)
15.06.18 17:35:36<dmiles> Menzel and Pat btw disagree on a few things there :P
15.06.18 17:37:37<dmiles> we have http://www.jfsowa.com/ikl/Menzel03.pdf
15.06.18 17:38:33<dmiles> 5. SCL AND TRADITIONAL FOL
15.06.18 17:39:04<dmiles> "This might lead one to charge that SCL’s model theory does violence to the logical properties of traditional first-order logic. But it does not.
15.06.18 17:39:30<dmiles> =SCL  (yet another name!)
15.06.18 17:42:16<dmiles> see what the skinny here.. is should  Quanification of    R in  R(x,y)  be limited ot the same constraitns as  x in R(x,y)  ?
15.06.18 17:42:24<dmiles> Surely!
15.06.18 17:42:30<dmiles> so thats Henkin?
15.06.18 17:42:38<dmiles> Yes you might say
15.06.18 17:44:43<dmiles> lets agree on that is the "issue" ?
15.06.18 17:46:32<dmiles> Should  Quanification of    'R in (exists/forall R in R(x,y))  be limited ot the same constraints as  Quantification of 'x in (exists/forall x in R(x,y))  ?
15.06.18 17:47:31<dmiles> HMCa would say "yep .. and that is exactly why it is Henkin!"
15.06.18 17:47:44<stoopkid> idk, i actually personally need to see a more precise definition of henkin semantics
15.06.18 17:48:13<dmiles> it is that countablity of "x" is what makes things  "countable"
15.06.18 17:48:29<dmiles> that is that we can compactly sepcify what X is
15.06.18 17:49:01<dmiles> well two things.. one is countablity (aslo called cardinality)
15.06.18 17:49:23<dmiles> that we can say "I will get 0 results" or say "I will get exact 2 results"
15.06.18 17:49:59<dmiles> compactness is wether or not was can tell those results appart
15.06.18 17:51:20<HMCa> dmiles: that is a pretty good (if partial) explanation of closed henkin second order, yes
15.06.18 17:52:07<HMCa> the harder part, imo, is explaining how the other second orders are not that. ;-)
15.06.18 17:52:54<dmiles> "x" in R(x,y) the fact we can tell the results "Fred , Ethel" are not the same person imlies we can compactly write a proof showing how both of them are R(x,y)
15.06.18 17:53:19<dmiles> i'll try its comming :)
15.06.18 17:53:58<dmiles> but what of the results were "some dude" and "some chick" ?
15.06.18 17:54:29<dmiles> still we can tell them appart.. (still first order existential quantification)
15.06.18 17:55:14<HMCa> right, the "trouble" begins when you get to quantifying "some relation, out of any possible"
15.06.18 17:55:18<dmiles> "some dude" and "somone not that dude"
15.06.18 17:55:43<HMCa> full (non-henkin) second order gets wild, fast. :-)
15.06.18 17:57:06<dmiles> "some dude" "some dude that may or may not be that dude"
15.06.18 17:57:28<dmiles> Boxlog adds this last kind of answer (that was my Gods question above)
15.06.18 17:58:42<dmiles> "some dude that would be thruth theoretically invalid (so you might not be able to use this binding in LTL logic)"    "some dude that may or may not be that dude"
15.06.18 17:59:18<dmiles> so now start adding this terms in places you might find relations
15.06.18 18:00:41<dmiles> or even places that return  (foo a ?x)
15.06.18 18:02:16<dmiles> these terms carry proofs like "some dude that can be true with these set of axioms .. yet false with this set"
15.06.18 18:03:00<dmiles> "some dude if you make up some R that makes him more like what you wanted"
15.06.18 18:04:12<dmiles> "some R if you make up some R that makes some godlike dude suddently possible in semantic S5"
15.06.18 18:05:41<dmiles> i *can* in fact tell *that* R  this other R in "some R if you make up some R that makes existences of godlike dudes impossible in semantic S5"
15.06.18 18:06:28<dmiles> nto only that is I can return Sets of such Rs as a single countable meaning
15.06.18 18:07:07<dmiles> Any R in  "if you make up somes Rs that makes existences of godlike dudes impossible in semantic S5"
15.06.18 18:07:52<dmiles> i can even realize  the answer "Any R" is differnt then "Some R"
15.06.18 18:09:13<dmiles> have i lost countability/compactness? (the ability to distinguish)
15.06.18 18:10:39<dmiles> Now i can *also* over  the last word in  "if you make up somes Rs that makes existences of godlike dudes impossible in semantic S5"
15.06.18 18:10:50<dmiles> Now i can *also* Quantify over  the last word in  "if you make up somes Rs that makes existences of godlike dudes impossible in semantic S5"
15.06.18 18:11:08<dmiles> Yes so even the semantics are in danger
15.06.18 18:11:41<dmiles> i can quantify meaningfull against anything and long as i can make distinguishments meaningfull
15.06.18 18:13:58<dmiles> i can quantify over  people,  the intensional meaning of being a person in general.   i can quantify over names of axioms about people in the first sentence.
15.06.18 18:14:28<dmiles> (that was three types of things)
15.06.18 18:15:18<dmiles> i can embed in fact an antire proof system to be carried in a term.
15.06.18 18:16:30<dmiles> i can even if i want start violating even my own logical laws of being able to or not do this in a term
15.06.18 18:17:05<dmiles> as long as i can adequately prepare and distinguish when i am not doing that
15.06.18 18:17:44<dmiles> (at least give the viewer of the proof adequate tool set to ask me if i had done that or not)
15.06.18 18:18:30<dmiles> (at least give the viewer (of the proof) an adequate tool set to ask me if i had done that or not )
15.06.18 18:20:06<dmiles> *and* as long as i promise that viewer that if they re-use such bindings back in a query.. that i will be able to make use of them
15.06.18 18:20:37<dmiles> since any query that can be made .. should also be possbile to be use in a  implicatve rule
15.06.18 18:21:45<dmiles> YourQuery(R,x,y,Logic,Universe,Whatnot,BagOfAxioms,BagOfPRoofIReturned)  -->   SomeResult
15.06.18 18:22:53<dmiles> than we have maintained the first order requirements of compactness and satisfies the downward Skolem-Lowenheim property
15.06.18 18:23:33<dmiles> maybe still Henkin.. but Henkin "on Acid"
15.06.18 18:24:16<dmiles> and still "looks" like FOL
15.06.18 18:25:20<dmiles> of course now that one can quantify on anyhting.. that means the answers i return might bge totally meaningless to you
15.06.18 18:25:45<dmiles> "some dude by based on the idea i have no concept of dude"
15.06.18 18:27:09<dmiles> How can you tell me about something you have no conception of!?
15.06.18 18:27:22<dmiles> "Here is proof I just did"
15.06.18 18:27:33<dmiles> Yes but how?
15.06.18 18:27:59<dmiles> See lines 7000-9000
15.06.18 18:28:24<dmiles> not that this is in english in any way
15.06.18 18:28:30<dmiles> this can all be spoken in FOL
15.06.18 18:33:07<dmiles> "some dude by based on the idea i have no concept of dude"  =  (exists ?X (exists ?Y (and (= (ConceptOf ?X ?Y) ?C)(Person ?X)(not (femaie ?X))(not (have self ?C)) (usefull-Still-forProof ?C))))))
15.06.18 18:34:20<dmiles> oops i forgot to say  (exists ?X (typeOf ?X ?XType))
15.06.18 18:36:06<dmiles> also i can redefine the logic to allow change the menaing of countablilty
15.06.18 18:36:47<dmiles> this was proposed by a few logicains whom decided to redefine Nat
15.06.18 18:37:18<dmiles> and create Super-Cardinals
15.06.18 18:37:41<dmiles> and MetaHyperNats
15.06.18 18:39:32<dmiles> this is how in Boxlog i do the x's in  R(x,y)
15.06.18 18:40:00<dmiles> thus how i do R's
15.06.18 18:40:45<dmiles> the Xs in section B4 of https://docs.google.com/document/d/1VJkMjqcsRt8EeHneQbtuAuBb5Tpn1s7rtEFAqJxDqe0/edit
15.06.18 18:41:02<dmiles> the Rs in section B5
15.06.18 18:42:10<dmiles> How i implented LTL/CTL* was i create Time and a truth scoping operator
15.06.18 18:42:51<dmiles> as yet another quantify just like any thing else
15.06.18 18:43:55<dmiles> this is what Boxlog had to be implmneted mostly in Boxlog
15.06.18 18:44:01<dmiles> why*
15.06.18 18:46:55<dmiles> eventually one would have to argue for a definination of countablity / compactness
15.06.18 18:48:23<dmiles> https://en.wikipedia.org/wiki/Compactness_theorem  "compactness theorem is the construction of nonstandard models of the real numbers, that is, consistent extensions of the theory of the real numbers that contain "infinitesimal" numbers. To see this, let Σ be a first-order axiomatization of the theory of the real numbers. "
15.06.18 18:51:51<dmiles> some to seem ot go on and on..
15.06.18 18:52:31<dmiles> having a number of countable axioms of rules is not at all a requirement
15.06.18 18:53:14<dmiles> i can create first order systems that contain infinate numbers of rules
15.06.18 18:53:29<dmiles> (not that that breaks countablity)
15.06.18 18:53:59<dmiles> but i can even in FOL descibe systems that change the number of accessable rules
15.06.18 18:54:26<dmiles> and make those systems compare themselves to each other
15.06.18 18:54:48<dmiles> i can define what consistency needs to look ike in that system
15.06.18 18:54:59<dmiles> (in FOL terms that is)
15.06.18 18:55:18<dmiles> my fav exmaple is  []P-> <>P
15.06.18 18:57:49<dmiles> which means (by modus tollens)  "It must be possible for P to be true if P is nessisarly true"
15.06.18 18:59:19<dmiles> meaning before we are out of the gate we must also prove how well we shown the possiblity of anything
15.06.18 19:00:47<dmiles> before the systemn i described was even possible we needed to create a language that can say anyhting
15.06.18 19:01:05<dmiles> that can basically say and question *anything*
15.06.18 19:01:15<dmiles> and do so in a compact from
15.06.18 19:02:27<dmiles> for instance i need to be able in FOL to say "this bind here is not even possible.. please discard me"
15.06.18 19:02:40<dmiles> and make that a value for ?X
15.06.18 19:03:34<dmiles> if i cant use such an element in a  proof .. how can i compactly explain imposibility?
15.06.18 19:05:10<dmiles> that is why KR&R was so important
15.06.18 19:06:53<dmiles> so secretly why any of this is possible is we can have "partial" terms
15.06.18 19:07:12<dmiles> example  John
15.06.18 19:08:02<dmiles> is a partial term for  (ThePersonOnFridayFn John)
15.06.18 19:08:41<dmiles> which is a partial term of  (AsMorningPersonFn (ThePersonOnFridayFn John) )
15.06.18 19:09:17<dmiles> we can make  (feels (AsMorningPersonFn (ThePersonOnFridayFn John) ) Happy)
15.06.18 19:09:44<dmiles> But at what depths is Happy ?
15.06.18 19:10:28<dmiles> and is that "feels" refering to feelling that way every 30 seconds? or was that continjues AM truth??
15.06.18 19:13:59<dmiles>  ((IncreasinglyFn feels) (AsMorningPersonFn (ThePersonOnFridayFn John) ) Happy))
15.06.18 19:14:43<dmiles> the same constructive  (WhatNotFn ...) can even apply to relations
15.06.18 19:14:54<dmiles> or senvent whole sentences
15.06.18 19:16:48<dmiles> ((MeaningOAccordingToFn "feel" MarthaM) ?x ?y)
15.06.18 19:18:04<dmiles> (subRelation (AnyDeduceableSubRelatiom ?R) ?R)
15.06.18 19:18:27<dmiles> (subRelation (AnyDeduceableSubRelationOfFn ?R) ?R)
15.06.18 19:19:33<dmiles> if (P 1 2) is true than means  ((AnyDeduceableSubRelationOfFn P) 1 2) is true
15.06.18 19:19:54<dmiles> we can use tha tin a proof
15.06.18 19:20:28<dmiles> but we cant ever know how to limit (AnyDeduceableSubRelationOfFn P) sinc ethere are infinately many that we can scope
15.06.18 19:21:28<dmiles> (greater ?x (GreaterThanFn ?x) )
15.06.18 19:22:03<dmiles> here in plain old FOL we now have infinate countable number that are  (GreaterThanFn 0)
15.06.18 19:22:33<dmiles> how about?  (forAll ?A  (GreaterThanFn ?A) )
15.06.18 19:22:45<dmiles> as a returned binding i give you
15.06.18 19:23:37<dmiles> ?B =  (GreaterThanFn ?A),   ?A = infinity.
15.06.18 19:24:11<dmiles> of cours ei have to return a proof with every binding set
15.06.18 19:24:22<dmiles> really what i meant so return .. sorry
15.06.18 19:24:40<dmiles> ?B =  (GreaterThanFn ?A),   ?A = (SomeFn Nat).
15.06.18 19:25:19<dmiles> these two varable are still variables
15.06.18 19:26:05<dmiles> let me contextuiize this
15.06.18 19:26:22<dmiles> ?- logicmoo_prove(foo(A,B)).
15.06.18 19:27:38<dmiles> B=_:{B > A},   A= _:{isa(A,tNat)}.
15.06.18 19:27:40<dmiles> Yes.
15.06.18 19:28:51<dmiles> with that binding set.. you just got handed an infinate cardinaity binding set
15.06.18 19:29:29<dmiles> ?- logicmoo_prove(foo1(A,B)).
15.06.18 19:29:40<dmiles> B=_:{B \= A},   A= _:{isa(A,tNat)}.
15.06.18 19:30:01<dmiles> ?- logicmoo_prove(foo3(A,B)).
15.06.18 19:30:05<dmiles> B=_:{B = A},   A= _:{isa(A,tNat)}.
15.06.18 19:30:20<dmiles> still just as infinate
15.06.18 19:30:39<dmiles> i can do that using first order terms
15.06.18 19:30:44<dmiles> why not relations?
15.06.18 19:30:59<dmiles> that are still first order represented
15.06.18 19:31:50<dmiles> or even with a proof P elements bheing "Partial"
15.06.18 19:32:29<dmiles> the proofs of foo,foo1,foo3 are as partial as the terms given
15.06.18 19:32:42<dmiles> as the terms it gave back
15.06.18 19:32:58<dmiles> in other words KR&R is what soves this problem
15.06.18 19:33:19<dmiles> by changing the level of what we can abstractly say in a first order language
15.06.18 19:35:31<dmiles> if you wanted to constrain the elements of  unbound Predicates/Relations to only ones found in your program, that would be yoiur fault
15.06.18 19:35:42<dmiles> not even Henkins
15.06.18 19:36:51<dmiles> or wanted to make sure your program can produce real numbers but not hyperreals.. i cant stop that
15.06.18 19:37:25<dmiles> unless you assert specifically that i am not permited to let you allow the program to do that
15.06.18 19:41:25<dmiles>  if you kept secret from my the definition of what a hyperreal actualyl was i might also become able to stop you
15.06.18 19:42:19<dmiles> unable to stop you
15.06.18 19:42:24<dmiles> this is why KR&R exists
15.06.18 19:42:56<dmiles> inb order to create a logic that was infinately elaboration tollerant
15.06.18 19:43:29<dmiles> some make claim infinately undecidable
15.06.18 19:44:22<dmiles> we can decide to make it decidable if that is what we want.. if someone wants to stop us.. we just foind a new KR&R
15.06.18 19:44:32<dmiles> find*
15.06.18 19:45:52<dmiles> technically its closed logic over infinate terms then
15.06.18 19:46:23<dmiles> but some can clain it is the inverseof that
15.06.18 19:46:49<dmiles> depends on what side of the query engine you are at
15.06.18 20:09:59*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
15.06.18 20:10:26*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
15.06.18 23:55:11<HMCa> that is a lot of things about some logics, but... was there a point somewhere in there that I missed, related to lists? XD
16.06.18 01:11:34<stoopkid> https://pastebin.com/exEsMncA
16.06.18 01:12:18<stoopkid> woops
16.06.18 01:15:22<stoopkid> https://pastebin.com/NTqpMRNM
16.06.18 01:16:18<stoopkid> so i'm breaking this up into a couple parts
16.06.18 01:17:04<stoopkid> we'll have a family of s-expr base languages, parameterized by collections of "terms" and collections of "operators"
16.06.18 01:17:32<stoopkid> so you give a collection of terms and a collection of operators and you get an s-expr language
16.06.18 01:18:49<stoopkid> note that the family of grammars generated by this doesn't constrain the arities or types of the operators or applications of operators
16.06.18 01:19:29<stoopkid> that will be a separate part, assigning each operator an arity/type
16.06.18 01:21:39<stoopkid> once you assign the arities/types to the operators, you get a subset of the family generated by equipping the base s-expr grammar with your collection of terms & operators (i.e. the subset of the language that corresponds to well-formed/typed formulas relative to the arities/types of the operators)
16.06.18 01:26:25<stoopkid> i'll make the specifications of the language more rigorous as we go along
16.06.18 01:27:21<stoopkid> one question: does anybody know if it's possible in CFG to make the grammar enforce the arity of operators?
16.06.18 01:28:54<stoopkid> ah woops, i have to make my question more precise otherwise it's a silly question with a trivial answer of yes
16.06.18 01:29:50<stoopkid> is it possible in CFG to make the grammar enforce the arity of an *infinite collection* of operators?
16.06.18 01:34:30<HMCa> hrm
16.06.18 01:35:00<stoopkid> arities*
16.06.18 01:37:17<stoopkid> to be yet more precise, is it possible in CFG to construct a grammar, G, laying out the basic syntax for applying an operator to an arguments-list (like i've got the s-expr's grammar in that pastebin), such that if you want to add a relation symbol R with arity n, you can construct another grammar GR such that concat'ing G with GR yields a grammar that allows the relation symbol R to be used as an operator according to the
16.06.18 01:37:18<stoopkid> syntax G, but only with the given arity n, for arbitrary choices of R and n
16.06.18 01:38:19<HMCa> a) what comes immediate to mind: why not just nuprl uniform? XD
16.06.18 01:38:31<HMCa> ABT FTW!
16.06.18 01:39:57<HMCa> b) wrt arities, wouldn't that be a contextualization?  Isn't it the same problem as counting indents?
16.06.18 01:40:25<HMCa> (and doesn't ABTs obviate the need?)
16.06.18 01:40:49<stoopkid> i think so, wrt (b); not sure about the ABTs part
16.06.18 01:41:24<HMCa> i thunk so wrt b also, but i'll need to think about it when i can apply more focus, heh
16.06.18 01:43:01<stoopkid> amazing that you can make BNF in BNF but you can't count indents
16.06.18 01:44:31<stoopkid> how do ABTs obviate the need exactly?
16.06.18 01:48:24<stoopkid> completely tangential: what do you think about relevance logic?
16.06.18 01:49:09<stoopkid> it seems right up a constructivist's alley, "remove even more of the axioms"
16.06.18 01:51:25<stoopkid> also the semantic concerns aren't necessarily unjustified, although it seems in practice a lot of people are just using it as a justification for inconsistency & using paraconsistency as a band-aid to the situation
16.06.18 01:53:59<HMCa> well, I guess they wouldn't in this case, necessarily
16.06.18 01:54:32<HMCa> i've only veen exposed to relevance logics a little, and mostly in the context of proof sizing
16.06.18 01:55:06<HMCa> for which it has some interesting aspects, for sure... but in general I wouldn't say that I find much appeal, otherwise
16.06.18 01:55:15<stoopkid> yea i'm thinking it's the same problem with ABTs
16.06.18 01:56:55<HMCa> hrmm, well I almost devised an argumwnt that they could, but then i realized that all i was doing was making the grammar contextual in a different way
16.06.18 01:56:58<HMCa> heh
16.06.18 01:57:44<HMCa> yah, seems without a fixed operator set prior to the grammar, the contextualization may be unavoidable...
16.06.18 01:58:32<HMCa> but again, I'm only giving this roughly 30-50% focus right now ;-)
16.06.18 01:59:18<HMCa> (busy w/ some more of my "counterintel" work, heh heh)
16.06.18 02:08:45<stoopkid> well
16.06.18 02:09:18<stoopkid> there's another way to solve this: force everything be unary/binary relations & functions
16.06.18 02:12:34<stoopkid> an interesting thing here; CFG production rules are basically like the intro rules for inductive types (usually with some extra string-related semantics attached), like i can have: Nat := 0 | "suc" Nat
16.06.18 02:15:27<stoopkid> but then to elim on those types requires context-sensitivity, example here we could give this way of specifying Nats so that you could attach an arity to a relation operator, and if the grammar was context-sensitive it could basically pattern-match on the Nats to enforce the arity
16.06.18 02:15:39<HMCa> sure, there's a family of lr parsers that take this even a step further by allowing production rules to prepend the stream before nonterminals, so you can provide arguments... a lot of packrat/peg stuff does it
16.06.18 02:16:36<HMCa> its something the alan kay camp(s) have been really into and pishing the past decade(s) heh
16.06.18 02:16:45<HMCa> *pushing
16.06.18 02:17:12<HMCa> but personally I lost interest in it when I got into phoas
16.06.18 02:17:13<HMCa> heh
16.06.18 02:18:14<HMCa> they've basically built whole OSs w/ neat applications and networking and stuff... just as parsers
16.06.18 02:18:30<stoopkid> i'll have to check that out
16.06.18 02:19:52<HMCa> check out the "steps" project, specifically the "frank" "OS" work
16.06.18 02:20:03<HMCa> it is all based around that stuff
16.06.18 02:22:19<HMCa> I very nearly went astray down that path myself, just before amiller enlightened me and saved me from it. XD
16.06.18 02:22:35<stoopkid> anyway, i'll work on making this syntax more precise.. the goal for you and dmiles would be to express what is the subset of formulas that constitute valid formulas, i.e. such that there is a valid formula in N3/AN-logic that translates directly to one of these lbase-s-expr formulas in that subset
16.06.18 02:40:27*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
16.06.18 02:47:45<nilli> HMCa I agree that most of what I said last is wrong . wrong in terms of using terms that are not defined and agree on their meanings and also using existing terms in ways that are not precise enough and finally just real mistakes of lack on knowledge
16.06.18 02:49:12<nilli> Yet the main thought behind it is not wrong :)
16.06.18 02:51:15<nilli> in fact what I do here on live on the IRC is maybe the best demonstration to what I try to convey
16.06.18 02:51:21<HMCa> I don't see a main thought, just a couple of disconnected ones and a lot that I can not assign clear meaning to
16.06.18 02:51:28<HMCa> nilli: don't we all
16.06.18 02:51:31<HMCa> XD
16.06.18 02:51:37<HMCa> welcome to *our* game
16.06.18 02:53:08<nilli> HMCa in terms of knowledge almost all  play a game assuming a centralized entity
16.06.18 02:53:53<nilli> they assume to not know until told something
16.06.18 02:54:04<HMCa> well, we can't not play the games, right?  Centralized, decentralized, many will "have us" eventually... is inevitable
16.06.18 02:54:13<HMCa> like all life, it is about balance
16.06.18 02:54:52<HMCa> dototd: a necessary and sufficient balancing act
16.06.18 02:54:57<HMCa> :-)
                 <nilli> not simply balance but a balance of exchange
16.06.18 02:55:09<HMCa> no!
16.06.18 02:55:12<HMCa> *no*
16.06.18 02:55:21<HMCa> it is more general!
16.06.18 02:55:34<HMCa> more abstract!
16.06.18 02:55:59<HMCa> is about balance of transaction
16.06.18 02:56:13<HMCa> exchange is one specialization of transaction
16.06.18 02:56:24<HMCa> we are a *general* autonomous overlay
16.06.18 02:57:41<nilli> yes. when I mean exchange I mean accepting the information,  learning it and reacting based on accumulated experiences
16.06.18 02:57:45<nilli> but...
16.06.18 02:57:54<HMCa> we are not just like "all the virtual coins smashed together in a consistent single network"
16.06.18 02:58:20<nilli> the accepting and learning itself requires many exchanges
                 <HMCa> we are like "all the virtual networks smashed together in a consistent single network
16.06.18 02:58:24<HMCa> "
16.06.18 02:58:33<HMCa> :-)
16.06.18 02:59:34<nilli> So we are not at a state of processing one term at a time and propagating from one to the other
16.06.18 03:01:46<nilli> every term that we understand differently or new reflect on the entire structure that we created in our own world
16.06.18 03:05:54<nilli> ofc that is would be such a long process and not  allow for survival  " the lion will consume us long before we would realize it is a threat "
16.06.18 03:10:50<nilli> in other words context based chain need more layers than unit based transaction such as bitcoin is, to be decentralized
16.06.18 03:12:01<nilli> 15.06.18 12:02:37<HMCa> a bitcoin token has no name/identity, this is misconception - bitcoin token themselves are an "imaginary thing" what actually exists are UTXOs
16.06.18 03:16:01<nilli> this I know on some level and understood it then as if at each state (block) each bitcoin actualy sort of being reconfigured as a new "names." made of different parts
16.06.18 03:17:21<nilli> I do name it a "name" since an identity is created at each block
16.06.18 03:18:02<HMCa> hrmmm
16.06.18 03:18:23<HMCa> a) we process many terms "at once"
16.06.18 03:19:54<HMCa> and we don't have to "look back" in a context history to  do that "remembering" thing, really... whatever memory state we need is already "there" in the current context state
16.06.18 03:20:39<HMCa> b) that "name" you reference ia an identity of a *block*, not any particular coin state
16.06.18 03:20:59<HMCa> the block might not even have any tx in it at all, in general
16.06.18 03:21:17<HMCa> what is "named" there is a moment in time
16.06.18 03:21:29<HMCa> spacetime, if you prefer
16.06.18 03:21:36<HMCa> "statespacetime"?
16.06.18 03:22:59<nilli> "statespacetime" yes that is the right expression ....but
16.06.18 03:23:49<nilli> we have to be very careful in terms of realizing the naming
16.06.18 03:24:02<nilli> each name is a mini state
16.06.18 03:24:14<nilli> maybe that is the way to look at it
16.06.18 03:24:35<nilli> our context is created of this chain of names
16.06.18 03:25:25<nilli> So in a way Logic is used in order to create a name!!!
16.06.18 03:27:00<nilli> we may start with an "axiomatic name" but eventually will  be able to construct a fully logical structure of names
16.06.18 03:27:41<nilli> but for this we need a consensus mechanism
16.06.18 03:27:52<nilli> such and the blockchain
16.06.18 03:29:29<nilli> and work process that incentevize such cooperation regarding naming
16.06.18 03:29:32<HMCa> each name is a full state
16.06.18 03:29:46<HMCa> each block name, that is
16.06.18 03:30:09<HMCa> and let's call this name by its' name, a block hash
16.06.18 03:30:57<nilli> ok
16.06.18 03:31:07<HMCa> that is what a meekle tree is, large and complex state state wrapped up in a small identifier
16.06.18 03:31:12<HMCa> *merkle
16.06.18 03:31:28<nilli> but what happened in between the blocks is what we need to configure
16.06.18 03:32:07<nilli> in order to allow a meaningful story emerge
16.06.18 03:32:21<HMCa> ah, what happens "in between blocks" is an entirely sifferent logic
16.06.18 03:32:25<HMCa> *different
16.06.18 03:32:38<HMCa> this is not something bitcoin has much of
16.06.18 03:32:51<HMCa> and something we generalize quite a lot
16.06.18 03:33:09<HMCa> bitcoin is almost entirely what we would call "closed phase operation"
16.06.18 03:34:49<nilli> ok help me understand what going on between blocks
16.06.18 03:35:09<HMCa> on btc or on our construct? :-)
16.06.18 03:37:06<nilli> first on BTC . yes its on Stoshis's whitepaper  but its not describing it in details since was so obvies to him
16.06.18 03:39:02<nilli> Anderas go over it in much more details that shows a two stage state in each block before it is a state
16.06.18 03:39:32<HMCa> right, that is the same as in AN...
16.06.18 03:40:35<HMCa> in btc's "open phase" you can basically on request blocks from people, shout TXs at people, or mine ("eventually" announce a block)
16.06.18 03:40:41<HMCa> *only
16.06.18 03:42:54<HMCa> in closed phase, when advancing the chain or doing reorg, you can only recalculate your local cache of state
16.06.18 03:43:07<HMCa> "apply" the block, and the transactions in it
16.06.18 03:46:34<HMCa> so in the open phase we shout utxo claims at eachother, and in the closed phase we adjust balances of accounts per the scripts in state relative to those incoming transactions
16.06.18 03:46:59<HMCa> ^that is the "specific" transactional structure of bitcoin
16.06.18 03:47:18<HMCa> it is not the only possible stable structure, and we generalize
16.06.18 03:47:31<nilli> so first at the "open phase" every node may have a slightly different state then the other . a state it worked on phrasing util solving the problem
16.06.18 03:47:46<HMCa> there are 2 states
16.06.18 03:48:04<HMCa> closed state, what is in your cache
16.06.18 03:48:37<HMCa> and open state, i.e. "mempool"
16.06.18 03:49:01<HMCa> the closed state reflects all applications of blocks up to the current one
16.06.18 03:49:23<HMCa> but the open state will be different from node to node
16.06.18 03:49:55<HMCa> so anyone at the same point on the same chain will have the same closed state
16.06.18 03:50:23<HMCa> but nothing necessarily asserts that any particular open state is shared at all, in btc
16.06.18 03:50:44<nilli> open state you mean open phase? or the state is also have two states
16.06.18 03:51:16<HMCa> open state is managed/mutated by open phase logic
16.06.18 03:51:28<HMCa> closed state is managed/mutated by closed phase logic
16.06.18 03:52:02<HMCa> in btc, all of the "rules for doing both" live almost entirely in core
16.06.18 03:52:13<HMCa> and are all set in stone by them
16.06.18 03:52:22<HMCa> *by it
16.06.18 03:52:42<nilli> ok lets go slowly over that :) .let me phrase it as I understand and you correct me
16.06.18 03:52:51<HMCa> ok
16.06.18 03:54:25<nilli> so once a block is solved by one node this node will transmit its state of transactions created in the time while solving the problem
16.06.18 03:54:46<HMCa> well, no
16.06.18 03:55:23<nilli> whats no
16.06.18 03:56:05<HMCa> it transmits a message called "blockannounce" - in open phase
16.06.18 03:56:41<HMCa> which references the new block... whatever that is - it may have nothing to do with its' open phase state at all
16.06.18 03:57:09<HMCa> except in that it was mined from open cycle reasoning....
16.06.18 03:57:13<nilli> so it only transmit announcement not the "content" of what in the new block
16.06.18 03:57:16<HMCa> *open phase
16.06.18 03:59:33<HMCa> well, in effect it shouts the whole block, but that is beside the point
16.06.18 03:59:56<HMCa> (it can actually shout either, in current protocol)
16.06.18 04:00:13<HMCa> but what that block *is* might not depend on anything wrt open state
16.06.18 04:00:28<HMCa> it might just be an empty block entirely
16.06.18 04:01:09<HMCa> a fancy way of shouting your pubkey, timestamped... heh
16.06.18 04:01:27<nilli> So at that open phase the only relevant information that need to move around is that a "block is created" everyone else should stop now
16.06.18 04:01:50<HMCa> strictly speaking, yes
16.06.18 04:02:54<nilli> ok now that massage have to circulate and reach all participants that are expected to agree on it.
16.06.18 04:02:58<HMCa> now everyone else's open phase "hears" this, and evaluates the block, and maybe-maybe-not initiates an append or re-org (causing move into closed phase)
16.06.18 04:03:15<HMCa> well, they aren't "expected to agree on it"...
16.06.18 04:03:31<nilli> if it honest they do right?
16.06.18 04:03:44<HMCa> not necessarily? :-)
16.06.18 04:04:02<nilli> ok actualy its another stage
16.06.18 04:04:31<nilli> since to agree based on content of information they need to check it
16.06.18 04:05:12<HMCa> well, to even determine if it can be agreed to, meaning if it is able to be applied to the state, they need to check it, yes
16.06.18 04:05:46<nilli> so back to receiving the block announcement...  they stop based on the assumption that the block should be right
16.06.18 04:06:00<HMCa> not necessarily
16.06.18 04:07:23<HMCa> mostly "they do what they want"... weighing the risk of ending up inconsistent on a fork
16.06.18 04:07:49<HMCa> nobody can force you to accept a next block
16.06.18 04:08:17<HMCa> but you may be choosing to hardfork yourself from the network if you don't.
16.06.18 04:09:11<nilli> I have to have to go (been have to take my kids to the beach... they are waiting with allready) but I also have to get back to this conversions since everything I try to say is in these detaisl
16.06.18 04:09:23<nilli> details
16.06.18 04:10:08<HMCa> ok, just think on this one thing for me:
16.06.18 04:10:44<HMCa> collavorative rule management is a specialization of transaction, just as coin ledger management is
16.06.18 04:10:49<HMCa> *collab
16.06.18 04:10:55<nilli> I understnd the choice of fork and what I say is that in a context based chane we would all have to fork first and then check meanings
16.06.18 04:11:11<nilli> but on that later
16.06.18 04:11:52<HMCa> we don't have to do that with our chains any more than btc does... which is really not at all
16.06.18 04:12:25<HMCa> ofc a context could, in effect, choose to include such an implementation detail...
16.06.18 04:12:33<nilli> ok ill think of it and well talk later.
16.06.18 04:12:40<HMCa> but it would seem to me to be only a "de-optimization" in any case
16.06.18 04:15:01<HMCa> well, a de-optimization at best, and potentially dangerous at worst, heh...
16.06.18 04:16:34<HMCa> stoopkid: still around?
16.06.18 04:16:55*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
16.06.18 12:49:14*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
16.06.18 12:50:19<nilli> 16.06.18 04:10:44<HMCa> collaborative rule management is a specialization of transaction, just as coin ledger management is
16.06.18 12:50:43<nilli> Yes hamc I agree on that.
16.06.18 12:53:08<nilli> But I might be thinking  of a step more complex
16.06.18 12:54:58<nilli> I was thinking on mining knowledge as POW. which might no be possible, or even making sense
16.06.18 12:55:23<nilli> But it does in my mind
16.06.18 12:56:30<nilli> that is since I believe that us a living being do not mind a mathematical problem, we mined knowledge as history of true information
16.06.18 12:57:02<nilli> and we mined it throughout our body not only in our brain
16.06.18 12:57:35<nilli> so if we do it our machines can do it and we should be able to configure that
16.06.18 12:59:26<nilli> Also the reason I bring it up now is that I also  have a hunch that the POW have do to with the goal
16.06.18 13:00:00<nilli> meaning with the transaction we request to
16.06.18 13:01:23<nilli> a "specialization of transaction" might just fall under that description
16.06.18 13:04:06<nilli> I will try to make my argument point again . maybe be more clear of the motivation. and then we can go back to check the the procession of information in the network
16.06.18 13:06:25<nilli> but maybe first start with the byzantine general problem
16.06.18 13:09:59<nilli> it is a problem of organization . it demonstrate the problem of a decentralized organization. computer science realized its depth as to a network of communication
16.06.18 13:13:46<nilli> Satoshi realized it as a key to solve the problem of a network as a decentralized organization
16.06.18 13:14:26<nilli> however to build the solution he created a very specific content a coin
16.06.18 13:15:19<nilli> all that the network have to agree on in the state of the coin. not defining the coin
16.06.18 13:15:32<nilli> defining the coin is like defining the rules
16.06.18 13:16:04<nilli> so all that we know from working on tauchain
16.06.18 13:16:32<nilli> and then on autonomic
16.06.18 13:18:49<nilli> but I think that we neglect to look at the unique relationship between the  POW and the limited meaning of a coin . limited or ruther general  since is like a number
16.06.18 13:20:11<nilli> a coin is a number an a number have no meaning other then its virtual size or directional position on the number line
16.06.18 13:20:23<nilli> and a number
16.06.18 13:22:11<nilli> thus in terms of information a number is one dimensional and thus time stamp is all that a state of numbers requiers
16.06.18 13:23:32<nilli> when we speak of content of meaning we need to think of a multidimensional space that converge to a three dimensional space
16.06.18 13:25:32<nilli> (in fact I suspect that the reason we define our world in 3D is just that, information as content requires that, Avishay mentioned it as composition and might be a better way to express that)
16.06.18 13:26:04<nilli> *information as context
16.06.18 13:30:08<nilli> Thus in mathematical terms we will have do define a 3D state of each block in the blockchain . So the block chain will still propagate based on a time line as it should and we will then get a full spacetime architecture
16.06.18 13:31:43<nilli> So HMCa what we need to understand together is how that open phaze of the block looks like
16.06.18 13:33:19<nilli> and how the the closed phase will look like
16.06.18 13:33:51<nilli> I assume that it will evolve like a fractal
16.06.18 13:38:14<nilli> my hunch is that we are going to add one more open phase to the state of the network as a whole as it is working its way to a closed state
16.06.18 13:44:21<nilli> the extra step is to allow the context layer to be communicated between all nodes and allow each node to checked "against its personal vision"
16.06.18 13:45:43<nilli> what I mean by "personal vision" comes from  the theories that explains how humans learn things
16.06.18 13:47:12<nilli> I will not get into it but is important to realize that its not a process of "adding" but truther "crossing put"
16.06.18 13:49:01<nilli> for what we are going to use it we can create a very evolved state in which the context is a set of some rules
16.06.18 13:51:17<nilli> but eventually an AI machine will have to start with a very "Primitive view" of abstracts (wow what a great art work that would be)
16.06.18 13:52:30<nilli> ok So I dont think i made myself that much clearer to you ( its becoming and changing on in my mind as I get into detailing it. I dont know for sure how it looks)
16.06.18 13:54:06<nilli> but I know what is the path I need to take with you. meaning that you have to take me through. but im sure that if you take me through it you will see what I see. :)
16.06.18 13:56:56<nilli> so next time I catch you HMCa we can continue where we left off . (only if is interesting for you to do that. if not pleas let me know before hand.)
16.06.18 14:01:25*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
16.06.18 22:00:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
16.06.18 22:00:53*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.06.18 02:53:54*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
17.06.18 02:54:24<nilli> hi
17.06.18 02:56:03<HMCa> heya
17.06.18 03:03:12<HMCa> nilli: sorry, I'm busy contemplating the existence of secret societies
17.06.18 03:03:14<HMCa> heh
17.06.18 03:03:40<HMCa> nilli: will you do a favor?
17.06.18 03:04:02<nilli> interesting topic
17.06.18 03:04:07<HMCa> tell me about the word "hasbara"
17.06.18 03:04:10<HMCa> plz
17.06.18 03:04:55<nilli> Hasbara as a Hebrew word you mean
17.06.18 03:06:05<HMCa> yes
17.06.18 03:06:56<nilli> it has a strait forward meaning related to the root of the word (Hebrew is all about roots) which means explanation. but the way it is used is more taking sides and explaining that side
17.06.18 03:07:02<HMCa> ideally, both the meaning as a hebrew word, and the meaning to you personally
17.06.18 03:08:48<nilli> the root gives you the meaning as a pure meaning but if I say that I MASBIRA something to you it means that I explain it to you to my best ability
17.06.18 03:09:26<HMCa> are these two concepts "at odds?"
17.06.18 03:09:31<HMCa> with eachother
17.06.18 03:09:32<HMCa> ?
17.06.18 03:10:11<HMCa> is to do more of one also to do less of the other?
17.06.18 03:12:52<nilli> but hsabara is the function itself , however when used as the israely hasbara it means explaining the Israeli point of view. thsu standing alone will mean explainning a  point of view of the side taken by the one explaining
17.06.18 03:16:47<nilli> in short he root of the word when used as action means explaining what one knows but when used as a description or even noun it means taking sides and explains that side
17.06.18 03:17:04<nilli> why are you asking?
17.06.18 03:17:42<HMCa> its' complicated. ;-)
17.06.18 03:18:15<nilli> have to do with secret societies?
17.06.18 03:18:24<HMCa> yes
17.06.18 03:19:54<nilli> secret society as a fundamental phenomena is possible only if life is not decentralized
17.06.18 03:20:45<nilli> however intelligence will construct the existence of such
17.06.18 03:21:13<nilli> it is part of how logic work
17.06.18 03:21:33<HMCa> even with decentralization the secret society is still fundamental
17.06.18 03:21:54<nilli> logic strive to organize randomness to its highest form
17.06.18 03:22:20<HMCa> still there even with 'full-geodesic' or whatever the trendy word for it is these days
17.06.18 03:23:13<nilli> what I mean is that often the "organization"would not be aware of itself
17.06.18 03:23:31<nilli> but for a logical observer it will seem that way
17.06.18 03:24:07<HMCa> that seems to depend upon the membership structure and internal semantics that we may or may not be allowed to know about :-)
17.06.18 03:24:28<nilli> often its the surrounding that organize it
17.06.18 03:24:54<HMCa> do you know how to play the card game "Mao"?
17.06.18 03:24:57<HMCa> :-)
17.06.18 03:25:23<nilli> I think it very interesting to look at the history of jew as having a goal to rule the world
17.06.18 03:26:14<nilli> mao? no  I hardly know any game :)
17.06.18 03:26:44<nilli> I play life :)
                 <HMCa> well.. I'd tell you about it, but then I'd have to draw more cards...
17.06.18 03:27:49<nilli> ok
17.06.18 03:28:10<HMCa> "mao games" are an interesting form of nomic
17.06.18 03:28:59<HMCa> ok, now to quickly reply to what you said earlier (so far has been mostly off topic)
17.06.18 03:30:01<HMCa> you can't really hope to meaningfully mine knowledge with POW directly...
17.06.18 03:30:27<HMCa> as any form of "mining knowledge" would certainly have to fail the work function criteria
17.06.18 03:32:08<HMCa> also, again, a coin is not any sort of number... it has no identity of its' own in the bitcoin logic, it is a true imaginary construct... heh
17.06.18 03:32:26<HMCa> all that actually exist for real are utxos in blocks
17.06.18 03:34:01<HMCa> the rest... i'm not clear on as to what you're trying to say
17.06.18 03:35:51<nilli> ok its about order as orgenizer and what we use to create that order. but ill check out the details of utxos and will get back to you with a better explanation.
17.06.18 03:37:29<nilli> ok so about the game?
17.06.18 03:37:41<HMCa> what about it?
17.06.18 03:41:09<nilli> I dont know I thought you wanted to ask something related to it
17.06.18 03:42:01<HMCa> only what I did :-)
17.06.18 03:42:51<nilli> ok, but it sound like you are wasting your time on something
17.06.18 03:44:07<nilli> instead of working with me :)
17.06.18 03:45:28<HMCa> not a waste of time at all
17.06.18 03:45:45<HMCa> and it was a form of working with you
17.06.18 03:46:02<HMCa> it, too, was part of a mao game, also!
17.06.18 03:46:10<HMCa> heh
17.06.18 03:47:15<nilli> what makes it a game?
17.06.18 03:48:03<HMCa> you should look into both mao and bartok
17.06.18 03:48:50<nilli> dont feel like it
17.06.18 03:49:14<HMCa> we should hope that the root chain should always be a nomic game like bartok, and not a nomic game like mao
17.06.18 03:50:20<nilli> what is the difference between game and life
17.06.18 03:50:28<nilli> between game and art?
17.06.18 03:51:11<HMCa> life and art are just different specilizations of games
17.06.18 03:51:18<HMCa> as is this irc thing
17.06.18 03:51:22<HMCa> or "the web"
17.06.18 03:53:35<nilli> game an outside observer
17.06.18 03:53:49<nilli> assume an
17.06.18 03:54:25<nilli> you as the gamer
17.06.18 03:55:36<nilli> you as a player have an advantage over the game that you play. thus it can not kill you but you can kill it
17.06.18 03:56:10<nilli> (eventualy its all about the power to kill)
17.06.18 03:56:44<nilli> thus in a game no player can kill another player
17.06.18 03:56:54<HMCa> *specialization
17.06.18 03:57:01<nilli> but they both can kill the game
17.06.18 03:57:37<HMCa> hrmm, well... that all seems like it would depend on the structure of the game
17.06.18 03:57:43<HMCa> iow, is contextual
17.06.18 03:57:49<nilli> if you play as a virtual entity then yes its the same
17.06.18 03:58:26<nilli> maybe since you allowed yourself to take such form for too long you think its the same :)
17.06.18 03:58:59<nilli> how art is different then?
17.06.18 03:59:15<nilli> as an artist you are the only player
17.06.18 04:00:09<nilli> so its a private case of the rule of life. life of a single being
17.06.18 04:03:07<nilli> when I say that I play life I mean that I act as an artist but the "artist" is like one node in the network
17.06.18 04:03:18<HMCa> they are different structures of games, different rules
17.06.18 04:03:37<HMCa> we play in a hierarchy of games, all of the time
17.06.18 04:03:55<HMCa> we basically can't not. ;-)
17.06.18 04:06:58<nilli> in life like in the blockchain the main rule is that eventually we each have to be a single player making its own rules doing it best to share it with the network and reach an agreement on the most inclusive level possible to it.
17.06.18 04:07:43<HMCa> sure, part of "the implicit vote" concept
17.06.18 04:08:01<HMCa> but... that isn't really interesting, in isolation, is it?
17.06.18 04:09:02<nilli> what do you mean?
17.06.18 04:09:15<nilli> for each player?
17.06.18 04:09:49<HMCa> at all
17.06.18 04:10:48<HMCa> and btw, i'm not sure that "most inclusive" is an aspect
17.06.18 04:11:00<HMCa> that seems contextual, too
17.06.18 04:11:07<HMCa> some specific specialization
17.06.18 04:11:18<nilli> in a way we strive to reach maximum isolation but are restricted by the rule being that the game is over in a state of full isolation (over means you are dead)
17.06.18 04:12:11<HMCa> ah, the games we are interested in are perpetual... immortal...
17.06.18 04:12:28<HMCa> contexts should strive to not "end"
17.06.18 04:12:29<nilli> no such game
17.06.18 04:12:32<HMCa> esp root
17.06.18 04:12:57<nilli> well in fact that is what people mean when talk say game
17.06.18 04:13:23<nilli> but if we want to assume life as a game then its mortal
17.06.18 04:13:24<HMCa> well, effecitvely immortal... even btc could hypothetically eventually run out of hash space
17.06.18 04:13:40<HMCa> but the timeframe on that is mindbending
17.06.18 04:14:52<nilli> well ONE as a whole is immortal but as soon as we have two one become mortal too
17.06.18 04:15:07<HMCa> ^no idea what you mean
17.06.18 04:15:22<HMCa> every context is one context. :-)
17.06.18 04:16:11<nilli> one or two entities of any kind including context
17.06.18 04:20:07<nilli> anyway i dont want to divert you too much from playing your games. while playing life. as long as you have fun. I seem to enjoy it (playing life) only if risking my sanity other wise I ruther do my art
17.06.18 04:21:07<HMCa> I'm not playing these nomic games, just studying their formal structures...
17.06.18 04:21:39<nilli> ok that is better then
17.06.18 04:21:51<HMCa> specifically in what ways instances of different types of mao games can/can't be said to exist
17.06.18 04:23:32<nilli> ok that brings us back to what I tried to tell you
17.06.18 04:24:43<nilli> in terms of context each individual (thus each node in the blockchain) have its private existence that most of it is shared by the others thrdough the consensus
17.06.18 04:25:07<nilli> however the history of each is a little diffenrent
17.06.18 04:25:18<nilli> that history is the individual existnace
17.06.18 04:26:59<nilli> and since is shared in its majority of context with  others (whether most of it as a side chain which share the root) its own existence is shared with the others
17.06.18 04:27:50<HMCa> now that mostly just sound extralogical, entirely
17.06.18 04:28:06<HMCa> you can't actually put the user inside the logic
17.06.18 04:28:08<HMCa> :-)
17.06.18 04:29:39<nilli> right .but logic alone is not exited it need the user :)
17.06.18 04:29:55<nilli> existed
17.06.18 04:30:40<HMCa> err, huh?
17.06.18 04:31:16<HMCa> the user and his node are distinct, the node can continue with the logic without the user
17.06.18 04:33:50<nilli> well  can it continwue without any interaction?
17.06.18 04:36:01<nilli> for one it need energy to continue and energy means user
17.06.18 04:38:06<nilli> by dispensing energy the user validate the logic even if there is no context attached to. the logic thus become the context defined by the use of energy as such.
17.06.18 04:38:09<HMCa> not necessarily
17.06.18 04:38:17<HMCa> (means user, i mean)
17.06.18 04:39:16<HMCa> we don't make anu particular assumptioms about the capability of a node to remain connected
17.06.18 04:40:27<HMCa> we assume a node might become unreachable at any moment, or run perfectly connected and responsive forever, or anything between
17.06.18 04:47:04<nilli> being a "node" requires logic and matter (energy)
17.06.18 04:48:21<nilli> entropy applies
17.06.18 04:49:07<HMCa> we only assume some connected processing unit which speaks the core protocol, we don't assume anything else about the nodes
17.06.18 04:50:10<HMCa> they could be some interdimensional alien speaking at our network directly from some other universe, it won't matter
17.06.18 04:56:49<nilli> ok lets take the physics of the nodes existence in terms of energy  out of our equation and just for our argument assume that they can exist for ever
17.06.18 04:58:20<HMCa> similarly some btc nodes might run forever
17.06.18 04:58:27<nilli> and ofc we assume that it hold the logic by downloaded the last version
17.06.18 04:58:43<HMCa> "edfectively" forever
17.06.18 04:59:25<HMCa> well, it holds the logic by following the rules in the contexts it was set to participate in when last used
17.06.18 05:00:17<HMCa> (or not, if it is actually some intentionally-hard-forking instance)
17.06.18 05:00:33<HMCa> :-)
17.06.18 05:07:16<nilli> So assuming all that the logic is part of some concrete context at any given time right? its not standing alone in the node.
17.06.18 05:09:55<HMCa> not sure what you mean
17.06.18 05:10:20<HMCa> presumably, it is both, in most cases
17.06.18 05:12:56<nilli> yes that is what I meant
17.06.18 05:14:32<nilli> this context is the "user" part in terms of history. meaning it is not only logic
17.06.18 05:15:48<nilli> (what a mindfuck this conversation sounds like. I guess its hard to see the reason to do it)
17.06.18 05:16:49<nilli> So let remind ourselves why we waste our time on it
17.06.18 05:17:25<nilli> do you have any good reason for doing that?
17.06.18 05:19:56<nilli> do you think that being both a rational beings we would reach agreement on the description if we could stay and exchange argument with no other considerations?
17.06.18 05:20:51<HMCa> ofc, eventually
17.06.18 05:21:08<HMCa> but maybe i misunderstand what you really ask
17.06.18 05:21:18<HMCa> gtg soon
17.06.18 05:21:31<nilli> exactly lol
17.06.18 05:21:34<nilli> both
17.06.18 05:22:26<nilli> I was just about to add that for "other considerations"
17.06.18 05:23:27<nilli> I think that we could agree if we are motivated to agree but we could disagree for ever if we where motivated to disagree
17.06.18 05:24:14<nilli> yet on both instances  we would be able to be totally rational
17.06.18 05:24:49<nilli> The goal is an important part of the logic yet is not the logic itself that can set it
17.06.18 05:25:13<nilli> anyway i gtg too
17.06.18 05:27:52<nilli> :)
17.06.18 05:34:45*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
17.06.18 05:37:28*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
17.06.18 05:37:52*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.06.18 09:12:08*** Join: koom (~sirdancea@89.24.34.56, sirdancealot: koo5)
17.06.18 15:22:41*** Quit: koom (~sirdancea@89.24.34.56) left #AutoNomic: Quit: Leaving
17.06.18 17:22:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
17.06.18 17:23:22*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.06.18 17:24:18<HMCa> stoopkid: what if...
17.06.18 17:24:27<HMCa> (just for fun)
17.06.18 17:25:06<HMCa> we do a "second new thing" and define a hw monad machine interface in cubical
17.06.18 17:26:40<HMCa> we can just say "our machine is redprl object language, plus some control/io blackbox with this monad signature"
17.06.18 17:28:16<HMCa> iow let's adopt their s-exprs at the low level and define ourselves a stdlib at both low and high levels
17.06.18 17:28:42<HMCa> i'll try to demonstrate what I mean...
17.06.18 19:02:57*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
17.06.18 19:10:19*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
17.06.18 20:44:02<stoopkid> HMCa: that would be good because i'm not entirely sure what you mean
17.06.18 20:44:31<stoopkid> idk what a "hw monad machine interface" is concretely
18.06.18 00:15:49<HMCa> stoopkid: search "a principled approach to operating system construction"
18.06.18 00:16:39<HMCa> I'm basically proposing that we do that, but in cubical mltt
18.06.18 00:16:59<HMCa> for your "bootstrap blues" ;-)
18.06.18 00:26:56<stoopkid> so this would basically be like a typeclass defining the behavior the hw must exhibit for us to compile down to it?
18.06.18 00:28:20<HMCa> almost
18.06.18 00:29:24<HMCa> it would really just specify a signature for expected hw interfaces
18.06.18 00:29:41<HMCa> it wouldn't fully define them
18.06.18 00:35:03<stoopkid> so by comparison with groups, this would be just the signature (G, + : G -> G -> G) , not the associated axioms?
18.06.18 00:42:18<HMCa> in the haskell, yes... we could keep some of the functor signature though
18.06.18 09:12:47*** Join: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109, (unauthenticated): 5.29.152.109 - http://webchat.freenode.net)
18.06.18 09:13:17<nilli> hi
18.06.18 10:58:54-mquin- [Global Notice] On June 20th, the Legal Committee of the European Parliament will decide on a copyright reform that could radically change copyright laws throughout the EU and have an impact on open source software. If you're in the EU please see https://savetheinternet.info/ and https://blog.github.com/2018-03-14-eu-proposal-upload-filters-code/ for more information
18.06.18 11:11:06<nilli> HMCa just send you PM on bitcointalk
18.06.18 11:12:29<nilli> meanwhile learning a few things so my questions will be more relevant
18.06.18 11:42:29*** Quit: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109) left #AutoNomic: Ping timeout: 260 seconds
18.06.18 19:02:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xoietmrfxupqgyrw) left #AutoNomic: Quit: Connection closed for inactivity
18.06.18 20:11:17*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fmozhepvkczrcevg, stoopkid: stoopkid)
19.06.18 00:16:40<HMCa> so at least eos chain made it 24hr before its' first stall
19.06.18 00:16:43<HMCa> XD
19.06.18 01:04:09<HMCa> so we should be able to (mostly) extract from redprl to agda or idris, i'd think?
19.06.18 02:04:19<stoopkid> afaik the only thing that's changed is the interpretation of equality right?
19.06.18 02:12:01<HMCa> yes, it seems like one should be able to just erase lines/paths...
19.06.18 05:27:13<HMCa> seems we could maybe translate into agda without even losing the path identities?
19.06.18 07:12:58*** Quit: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
19.06.18 07:25:51*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
19.06.18 10:25:36*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
19.06.18 10:25:54<nilli> hi
19.06.18 10:29:11<nilli> I am so excited!!!!!! it seems like some things are starting to make a lot of sense!!!!
19.06.18 10:31:21<nilli> it may take me a while to explain myself but I think I was able to reach some commona-greements on some basic terms form different disciplines.
19.06.18 10:33:35<nilli> I say "I" but I assume that it "we" which is the breakthrough, but for this to be us we all need to do a bit of work to define it precisely.
19.06.18 10:39:02<nilli> The first realization from this morning sitting with Avishay (who brings the QM/entanglement/uncertainty view of the matter) was realizing that entanglement in fact represent the state of a blockchain as a system of players" playing" POW
19.06.18 10:39:50<nilli> which is what we can express of "quantum logic"
19.06.18 10:40:05<nilli> ok do you get what I say?!!!!!
19.06.18 10:40:26<nilli> POW is part of the logic
19.06.18 10:41:16<nilli> and we are talking on a "different type" of logic
19.06.18 10:41:45<nilli> A logic in which  energy is part of it
19.06.18 10:43:24<nilli> HMCa our last insane (mind fuck)  exchange on the IRC was all about that "logic"
19.06.18 10:45:27<nilli> its a logic that incorporate the "observer" as part of it . Observer which thus become a player.
19.06.18 10:47:08<nilli> now when we first understand that I totally agree with you guys on the nature of POW as having all three parameters.
19.06.18 10:48:48<nilli> that is since the theory assert an exact starting point to all participants and and a known level of difficultly prior to the starting point
19.06.18 10:48:56<nilli> you where spot on on that
19.06.18 10:49:24<nilli> but now pay attention to this factor:
19.06.18 10:51:04<nilli> we need the level of difficulty set by the algorithm since its like the rules for the race that is about to start. and these rules must be known to all at starting point.
19.06.18 10:52:05<nilli> which means it can not something that they need to agree on while starting the race or as an after thought.
19.06.18 10:52:29<nilli> ...ok now comes the leap and I might still be missing something
19.06.18 10:55:50<nilli> taking what we know of uncertainty rules we can at a starting point assume the risk taken by assuming different level of difficulty for different players....
19.06.18 10:56:16<nilli> when difficulty means solving a logic task in terms of context
19.06.18 10:59:26<nilli> what we get is thus a game in which the players can asses the energy spend on logic based order (context , meaning) ruther then linear based order ( numerical order)
19.06.18 11:02:58<nilli> again it is super important to realize that this logic base order is a possibility only once we realize the direct resemblance  between particle state of entanglement and the consensus mechanism of the blockchian via POW
19.06.18 11:06:50<nilli> this in fact is a unification theory (theory of everything) that can be proven by a program once will  bootstrapped :)
19.06.18 11:07:43<nilli> easy hea :)
19.06.18 11:11:10<nilli> *when I say POW all three parameters I meant the ones you expressed the other day....let me find it.
19.06.18 11:21:53<nilli> 14.06.18 03:30:40<HMCa> the solution space should be uniform, the difficulty of instances must be exponentially scalable, there must not be trapdoor solutions, etc 14.06.18 03:31:14<HMCa> missing the mark on any one of these will doom the chain.
19.06.18 11:23:38<nilli> that. (and I dont know how I came to say that its three things... I guess I did not include etc. :)
19.06.18 11:24:43<nilli> 14.06.18 03:35:35<stoopkid> nilli: getting the problems from humans biases the work function in all the possible dimensions it can be biased in, i.e. they can generate non-random problems that are easy to solve and we don't have a way of asserting the difference really except by generating known/assumed-to-be-hard problems randomly ourselves so that we can be assured that "work" is actually being exerted
19.06.18 11:26:45<nilli> ok in terms of the POW there is more to inquire as to how it would work for context. I have to do more work understanding it
19.06.18 11:27:41<nilli> anyway on the way to understand that we would be able to construct a much simpler proof to why POS can not work :)
19.06.18 11:29:43<nilli> ...my brain just went numb ...ill recharge and come back to face all my mistaken (yet brave)  assumptions
19.06.18 11:36:55*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
19.06.18 14:14:00<HMCa> @nilli: each context is its' own distinctly proven chain, with its' own work function/parameters... so users must choose how to allocate a distribution of their resources toward the various contexts that they contribute to
19.06.18 14:14:08<HMCa>  < nilli> what we get is thus a game in which the players can asses the energy spend on logic
19.06.18 14:14:11<HMCa>           based order (context , meaning) ruther then linear based order ( numerical order)
19.06.18 15:25:35*** Join: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45, (unauthenticated): 77.126.56.45 - http://webchat.freenode.net)
19.06.18 15:28:59<nilli> hi
19.06.18 15:34:21<nilli> HMCa hi.are you around?
19.06.18 17:01:21<HMCa> not for a bit
19.06.18 18:04:01<nilli> ok ;)
19.06.18 18:29:55*** Quit: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45) left #AutoNomic: Ping timeout: 260 seconds
19.06.18 18:30:44*** Join: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45, (unauthenticated): 77.126.56.45 - http://webchat.freenode.net)
19.06.18 21:13:50*** Quit: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45) left #AutoNomic: Ping timeout: 260 seconds
19.06.18 22:03:14*** Join: koom (~sirdancea@89.24.52.165, sirdancealot: koo5)
19.06.18 23:49:03*** Quit: Tamara_ (sid238709@gateway/web/irccloud.com/x-rgbzvpysoacqxwlp) left #AutoNomic: Ping timeout: 256 seconds
19.06.18 23:51:03*** Quit: cantora (sid147800@gateway/web/irccloud.com/x-ivynfqcbjqilwdtm) left #AutoNomic: Ping timeout: 256 seconds
19.06.18 23:51:26*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fmozhepvkczrcevg) left #AutoNomic: Ping timeout: 260 seconds
20.06.18 00:11:21-SaslServ- kook!~sirdancea@37-48-17-181.tmcz.cz has just authenticated as you (sirdancealot)
20.06.18 00:11:27*** Join: kook (~sirdancea@37-48-17-181.tmcz.cz, sirdancealot: koo5)
20.06.18 00:13:57*** Quit: koom (~sirdancea@89.24.52.165) left #AutoNomic: Ping timeout: 240 seconds
20.06.18 01:23:00*** Netmerge: *.net *.split, split 1 day 9 hours 45 minutes ago (Use /WL to see who's still missing)
20.06.18 01:31:19*** Join: cantora (sid147800@gateway/web/irccloud.com/x-djcnwcmuxboqlyyc, cantora: cantora)
20.06.18 01:56:51*** Quit: Tamara_ (sid238709@gateway/web/irccloud.com/x-rvfyihnlicccitkq) left #AutoNomic: Ping timeout: 256 seconds
20.06.18 01:58:40*** Quit: cantora (sid147800@gateway/web/irccloud.com/x-djcnwcmuxboqlyyc) left #AutoNomic: Ping timeout: 256 seconds
20.06.18 02:07:10<editable-koo>ok, im down for some web dev
20.06.18 02:07:12<editable-koo>http://example.qt.io/qt-webassembly/widgets/richtext/textedit/textedit.html
20.06.18 02:22:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-debtkpxqtcjakwpk, stoopkid: stoopkid)
20.06.18 02:22:54*** Join: cantora (sid147800@gateway/web/irccloud.com/x-sngazqmccugoozwy, cantora: cantora)
20.06.18 02:25:47*** Join: Tamara_ (sid238709@gateway/web/irccloud.com/x-nempskkehbocjmmh, (unauthenticated): Tamara)
20.06.18 02:46:19<HMCa> stoopkid: wb
20.06.18 02:50:08*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
20.06.18 02:55:55<HMCa> nilli: wb
20.06.18 02:56:31<nilli> hi HMCa
20.06.18 03:02:56<nilli> I want to discuss with you some of the development I had regarding the work with Avishy and see how it may connect. I see tight connection here .
20.06.18 03:05:34<nilli> do you have some time to talk?
20.06.18 03:07:29<HMCa> yes and no :-)
20.06.18 03:07:39<HMCa> only a little, and I'll be distracted
20.06.18 03:08:15<nilli> that sound like a good quantum state answer :0
20.06.18 03:11:18<nilli> let me first explain what is the essence of what we reached at yesterday . (may take a few tries)  and then what is the potential i see in that,
20.06.18 03:15:26<nilli> 1. I view the POW blockchain consensus mechanism that satoshi worked out as hitting on a significant marker of life mechanism. thus is points as some fundamental laws of physics
20.06.18 03:16:40<HMCa> what in particular do you mean when you say "the pow blockchain consensus mechanism"?
20.06.18 03:17:39<nilli> 2. a consensus driven by players motivation to compete but also to agree
20.06.18 03:18:39<nilli> ops that is not "2" just and answer
20.06.18 03:19:44<nilli> but is related to it.
20.06.18 03:21:31<nilli> 2. that mechanism appears a "social science" since apparently is solving a trust problem
20.06.18 03:22:39<nilli> but what we call trust problem is in fact the same problem related to the nature of information
20.06.18 03:22:54<HMCa> sometimes we call this the "IPD"
20.06.18 03:23:18<nilli> what is IPD
20.06.18 03:23:20<HMCa> "iterated prisoner's dilemma"
20.06.18 03:23:54<nilli> yes I know that as well . which is also explained as trust issue
20.06.18 03:24:22<nilli> which is where we start
20.06.18 03:26:04<nilli> this trust issue is also a fundamental limit in information theory
20.06.18 03:26:35<nilli> so first we define that which is pretty simple
20.06.18 03:27:33<nilli> bu then comes the more difficult transformation between concepts
20.06.18 03:29:13<nilli> when we view the problem from the point of view of each individual and their motivation things become very messy for a physics theory
20.06.18 03:30:45<nilli> that is indeed the case of anything that deals with classic physics
20.06.18 03:31:16<nilli> but what we found out is that for quantum physics it actualy solve a huge problem
20.06.18 03:33:41<nilli> it reason with QM results.
20.06.18 03:36:08<HMCa> not sure what you mean to say here
20.06.18 03:37:14<nilli> the same logic that work for bitcoin is working at the quantum level
20.06.18 03:39:45<nilli> so what Avishay asked me was how that translate for two observers. is there an advantage to one results over the other
20.06.18 03:41:00<nilli> and I could point at a clear advantage or ruther a disadvantage
20.06.18 03:42:25<nilli> if you have alica and bob as observers and you have a goal to propagate information with in the system that they form the fastest way you realize the following:
20.06.18 03:44:17<nilli> ("fastest" also as officiant )
20.06.18 03:48:42<nilli> if 0 is no-result 1 is a result then 0,0  0,1  and 1,0  is the system at its best but if 1,1 , then it results in energy waste
20.06.18 03:51:12<nilli> now if you look at these results in terms of reasoning then you would realize that what may seem as quantum entanglement is nothing but a rational behavior of  individuals in a system
20.06.18 03:52:49<nilli> now one my call it intelligent behavior but if intelligent is a matter of a quality such as energy we just call nature law.
20.06.18 03:53:32<nilli> in or case it all about a choice regarding energy efficiency.
20.06.18 03:54:44<nilli> * a choice a result of 1,1 means a fork,
20.06.18 03:56:10<nilli> opps   . let me fix it so it will be clear
20.06.18 03:56:25<nilli> a result of 1,1 means a fork
20.06.18 03:57:56<nilli> HMCa do you see what i describe here?
20.06.18 03:58:41<HMCa> maybe? maybe not?  But in any case I don't see what it has to do with our construct, exactly
20.06.18 04:00:07<nilli>  that is the next layer which is the hard part to explain since i will need you to help me explain it :)
20.06.18 04:00:51<nilli> let start with that uncertainty=energy
20.06.18 04:02:47<nilli> we can translate energy into units of information by applying uncertainty principles to it (that is the math Avishay is doing)
20.06.18 04:03:08<nilli> so I dont care how it is done only that is can be done
20.06.18 04:03:35<nilli> so now I express the energy as information to incorporate with contex
20.06.18 04:04:48<nilli> I dont need to use claories to express the energy i can use uncertainty regarding context
20.06.18 04:07:02<HMCa> ok...
20.06.18 04:07:19<nilli> then can state the "states" of open phase in these therms as well
20.06.18 04:07:43<nilli> open phase is a quantum state of entanglement
20.06.18 04:07:52<HMCa> well, no
20.06.18 04:08:06<HMCa> in open phase state is indeterminant
20.06.18 04:08:08<nilli> only if the conditions of POW exists
20.06.18 04:09:28<nilli> a quantum state is in determined for each individual but is as a system in terms of probabilities
20.06.18 04:10:07<nilli> no of such state is not incorporated into the logic of true and false
20.06.18 04:10:46<nilli> but it is if we assume partial truth and partial false
20.06.18 04:11:10<HMCa> for the purposes of our logic, open phase state is indeterminate - what is true in historical state is considered true and anythig else (incl anything about "now" or "the future") is undefined
20.06.18 04:12:27<HMCa> for contrast, in closed phase all state is closed over and finalized - what is true historicaly and what is true currently is considered as true, and anything else (incl anything about "the future") is considered false
20.06.18 04:13:10<nilli> ok just let me note that this is the point where I need you (was far better if you where here in the cafe with me...so hard to express everything this way...:(
20.06.18 04:16:00<nilli> so lets look at open phase I can assume a reasonable number of solve blocks and any given moment? right
20.06.18 04:19:36<nilli> (0 at the beginning and more chances to 1 or more as we progress toward the estimated 10 minus required to solve a block)
20.06.18 04:20:59<HMCa> hrmmm
20.06.18 04:21:08<HMCa> not exactly sure what you're asking
20.06.18 04:22:42<HMCa> you can estimate the probability that you, yourself, will find the next block, over a given timespan... this probability will increase over time as you hash... but you cannot meaningfully estimate the probabilities that anyone else will find a block in any given timeframe
20.06.18 04:23:16<HMCa> without being able to confirm their current hashrates individually
20.06.18 04:23:41<nilli> ok right
20.06.18 04:24:27<nilli> that is a classic state of probability
20.06.18 04:25:15<nilli> of randumness
20.06.18 04:29:25<HMCa> not sure what you mean
20.06.18 04:29:28<HMCa> but i gtr
20.06.18 04:31:37<nilli> ....listen its really hard form me to pinpoint at what i try to figure out so I hope that you will bare with me ...(it might take a few rounds ) and ill try to improve my questions
20.06.18 04:32:11<nilli> bu you might eventualy give me the right question with the answer  :)
20.06.18 04:32:24<nilli> i think it will get to that
20.06.18 04:33:19<nilli> anyway run ahead... dont let me stop you :) and thanks
20.06.18 04:33:55<HMCa> :-)
20.06.18 04:34:39<nilli> ruining of as well , talk to you later.
20.06.18 04:39:30*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
20.06.18 08:57:00*** Quit: kook (~sirdancea@37-48-17-181.tmcz.cz) left #AutoNomic: Ping timeout: 256 seconds
20.06.18 17:06:58*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
20.06.18 17:18:34*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
20.06.18 19:46:25*** Join: redfish64 (~tim@45.32.52.10, redfish64: Unknown)
20.06.18 19:47:56<redfish64> Hey, sorry to bother you guys, but I'm doing a presentation on my version of autonomic. I wanted to mention you guys and Ohad as the originators, and also steer people to #autonomic but wanted to ask first
20.06.18 19:48:01<redfish64> https://www.meetup.com/SF-Types-Theorems-and-Programming-Languages/events/251493996/
20.06.18 20:00:30<redfish64> Here are the slides for the presentation, reference to you is on page 4: http://rareventure.com/nomicchain_presentation.pdf
20.06.18 20:32:14<daemoz> The descriptions of the system are very high-level and clear. I like that explanation a lot.
20.06.18 20:41:48*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
20.06.18 20:42:15*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
20.06.18 20:56:51<dmiles> i might finnally see how idna/autonomic relates to currency?!
20.06.18 20:58:51<dmiles> so far i've only understood how idni (not sure, maybe Autonomic) relates to problem solving in that the goal is to make CYC
20.06.18 20:59:49<dmiles> to re-create CYC but in a decentralized codebase
20.06.18 21:03:17<dmiles> the fact neither project has spent the 35 years that Lenat has on the creation of the system,
20.06.18 21:04:09<dmiles> not studied and learned what actually works worries me maybe some
20.06.18 21:07:16<dmiles> but if i am told the objective was not to recreate CYC, then perhaps it doesnt apply
20.06.18 21:08:15<dmiles> i am only 19 years into recreting CYC, it took me 1-3 years to understand exactly the code i signed up to write
20.06.18 21:10:07<dmiles> on my 2nd and 4th working prototypes i started to see exactly what has to not be avoided
20.06.18 21:11:35<dmiles> of course all thjose are the things i here everyone from autonomic and idni expressly claiming they intend to avoid
20.06.18 21:11:49<dmiles> hear*
20.06.18 21:43:01<dmiles> i'll quickly if i can go over those things.. (i'll post to ##idni as well since they are applicable to both)
20.06.18 21:43:42<dmiles> avoiding making the knowledge rerpesenation at least at some level the complexity that user expects and needs
20.06.18 21:44:35<dmiles> avoiding laying a series of well defined tests to see if one has met goals
20.06.18 21:45:39<dmiles> well maybe some like that last one are just "to do" and not actualyl being avoided.. so I'll try to bring up exactly the ones that have been expressed
20.06.18 21:46:30<dmiles> avoiding certain complexity levels of internal representation levels
20.06.18 21:47:47<dmiles> (example might be to make everything into triples or some XXX logic .. since it has an exact understood requirement levels)
20.06.18 21:48:38<dmiles> avoiding solving problems that are supposedly "unsolvable"
20.06.18 21:49:21<dmiles> avoiding full contextualizing .. the desire to be context free
20.06.18 21:51:02<dmiles> to make this sound more understandable...  what i think needs to happen is that the one has to look at "what can we do right now with existing technology, and do it" and then imporve it to do the things that existing technology cant do
20.06.18 21:51:30<dmiles> BASICALLY forget about everything that "should ber avoided"
20.06.18 21:54:47<dmiles> i might be seeming to come totally from left feild in all this.. but understand, had i or Lenat started our projects beliveing most of what has been said in the two projects.. enate would be set back technonogically by 35 years.. and I would be set back 19 years
20.06.18 21:55:13<dmiles> since they are all things Lenat and I discovered to be false
20.06.18 21:56:45<dmiles> partly because we never bothered to speciualate or concieve something was difficult
20.06.18 21:57:45<dmiles> Lenat even fired  RV Guha (the father of RDF) because of the BS that Guha says that these two projects said
20.06.18 21:57:58<dmiles> said/say
20.06.18 21:58:15<stoopkid> redfish64: very cool! too bad i'm not in SF, will you be filming the talk?
20.06.18 21:59:26<stoopkid> dmiles: i'm not really sure what you mean tbh
20.06.18 22:00:39<dmiles> Guha invented RDF (as a replacement to CycL in 1994) thinking he'd keep the code simple
20.06.18 22:01:37<dmiles> So after leaving, he went on to making it for Netscape
20.06.18 22:02:41<dmiles> So first off, you guys need to be working at least with this understanding when it comes ot N3
20.06.18 22:03:13<dmiles> Are your projects attempted to create CYC or PowerLOOM?
20.06.18 22:03:25<dmiles> attempting*
20.06.18 22:04:06<dmiles> if you are typing to use eye.yap than the answer is 100% "yes we are"
20.06.18 22:05:22<stoopkid> i think we share similar goals as cyc but i don't think that's exactly what we're attempting to create here
20.06.18 22:06:45<stoopkid> https://www.isi.edu/isd/LOOM/PowerLoom/
20.06.18 22:07:07<stoopkid> if it's restricted to FOL as it claims to be then we are working with a vastly more general knowledge representation framework here
20.06.18 22:10:47<dmiles> it claims not to be resricted to FOL
20.06.18 22:11:14<stoopkid> we must be looking at two different descriptions of ti
20.06.18 22:11:18<dmiles> read this:  https://www.isi.edu/isd/LOOM/PowerLoom/features.html
20.06.18 22:11:47<dmiles> "Concepts, relations, contexts, rules, queries, etc. are all first-class citizens in the domain of discourse. Therefore, they can have assertions made about them as well as reasoned about. This mechanism is commonly used by the system itself, e.g., to assert that a relation is single valued or transitive, that a concept is closed, etc"
20.06.18 22:13:11<dmiles> "The primary reasoning mechanism is logical deduction which infers statements that logically follow from the asserted statements and rules. Such statements can be asked about using PowerLoom's query commands ask (for true/false questions) and retrieve (for Wh-questions). PowerLoom uses a natural deduction system to answer queries but also has a large number of specialized reasoning procedures
20.06.18 22:13:12<dmiles> to efficiently handle concept and relation hierarchies, sets, frame predicates, search control, etc. The specialist architecture is extensible to allow users to plug-in their own reasoners or computed predicates. PowerLoom also supports hypothetical reasoning, equality reasoning, arithmetic and reasoning with inequalities. "
20.06.18 22:13:55<dmiles> PowerLoom uses the language of predicate logic to represent knowledge. The syntax is KIF (the Knowledge Interchange Format) which is one of the supported syntaxes of the upcoming Common Logic standard. PowerLoom adds a variety of convenient definitional constructs as well as extensions beyond traditional first-order logic such as type-level predicates, relation variables in holds sentences,
20.06.18 22:13:56<dmiles> modal assertions (sentences about sentences), cross-context assertions via ist to represent lifting axioms, defaults (still experimental), and others. The goal is to provide a highly expressive representation language, since KR failures or awkward models are often due to "we could not express X in language L". The theoretical undecidability and intractability of such an expressive language
20.06.18 22:13:57<dmiles> is counteracted by providing limited, "pragmatic" reasoning services that cover commonly encountered situations. For example, reasoning with second-order sentences that quantify over relations is undecidable and leads to very unfocused search; however, such sentences are very useful to describe axiom schemata that can be cheaply run in forward direction to create regular first-order rules
                 <dmiles> (in a process not unlike macro expansion).
20.06.18 22:14:44<dmiles> PowerLoom can explain its reasoning by recording inference trees and then rendering those into human-understandable explanations. PowerLoom also has an experimental "WhyNot" facility to explain inference failures where no successful proof tree was found.
20.06.18 22:15:24<dmiles>  Contexts allow encapsulation and organization of knowledge, efficient inference (by separating irrelevant knowledge or by separating ontologies and assertion spaces from volatile inference worlds), truth maintenance (via inference cache contexts), scenarios and hypothetical reasoning, non-monotonic overrides in sub-contexts, etc.
20.06.18 22:16:38<dmiles> HCMa claims that "Concepts, relations, contexts, rules, queries, etc. are all first-class citizens in the domain of discourse. Therefore, they can have assertions made about them as well as reasoned about. This mechanism is commonly used by the system itself, e.g., to assert that a relation is single valued or transitive, that a concept is closed, etc " s is *not* FOL
20.06.18 22:17:33<stoopkid> i see so it's actually higher-order logic (unless it's the same situation as with lbase?)
20.06.18 22:17:37<dmiles> I and PowerLOOM call that FOL.. that is what makes it description confusing
20.06.18 22:18:16<dmiles> Autonomic/IDNI call that HOL
20.06.18 22:19:10<dmiles> its FOL because we make higher-order logic accessable as first class quantifialbe citizens
20.06.18 22:20:06<dmiles> yet it is not in any way like FOL.  and it is not even Henkin since our Relations and even KBs are Hypotheticals
20.06.18 22:21:57<dmiles> lbase can be HOL in FOL as well.. it just some contentous point may come up because sometimes the impracticalities of infinate numbers of relations and axioms
20.06.18 22:23:07<dmiles> for exmaple I might declare that "forall R there exists at least one million R's that relate between 1 and 2 "
20.06.18 22:23:42<dmiles> i might even for so far as a few minutes later say that "now suppose there are less than two million"
20.06.18 22:24:42<dmiles> this is all i have given you.. now tell me what you can about R.. now I'd like you to deduce a S,T,U relations that exactly define that R
20.06.18 22:25:10<dmiles> *deduce some S,T,U relations that exactly define that R
20.06.18 22:25:31<dmiles> at this point you are so many orders of logic beyond first order
20.06.18 22:25:51<dmiles> yet this is all done from a FOL "representation"
20.06.18 22:26:40<dmiles> had powerloom only been FOL it would not be 50million lines of code (bigger then eye.yap)
20.06.18 22:27:07<dmiles> well it needed to be at least 100k lines :P
20.06.18 22:28:35<dmiles> so what my worry is everyone seems to be avoiding is realizing that is how much code they needed to write
20.06.18 22:28:41<dmiles> need*
20.06.18 22:29:13<dmiles> or trying to find systems that already encoded all of HOL is a highly expressive FOL
20.06.18 22:30:36<dmiles> one reason that these codebases also are so big is that the entire system is written in itself
20.06.18 22:30:49<dmiles> in order to redefine itself
20.06.18 22:31:16<dmiles> in order to redefine how it "defines" as it is "defining"
20.06.18 22:32:09<dmiles> in Cyc, we mark its personal code with a "silver" ball to say "this is its core code in which it can hack"
20.06.18 22:32:49<dmiles>  the code that you see when it uses personal axioms in a proof shown to the suer
20.06.18 22:33:39<dmiles> vs "green" code in which it designed after it was started .. which turns green/silver when a user helps it become compiled
20.06.18 22:34:33<dmiles> no ones made tht feature visible in PowerLOOM yet :(
20.06.18 22:35:17<dmiles> powerloom is also a couple decades technologically behind CYC
20.06.18 22:36:21<dmiles> not that speciic featute (PowerLOOM such such a feature isnt readily documented yet)
20.06.18 22:37:37<dmiles> *(PowerLOOM has  such a feature isnt readily documented yet .. nor has anyone made a tool chain for that feature.. Even in CYC, tha tis only used by people that are the system designers)
20.06.18 22:38:26<dmiles> And we've ensured non system designers that CYC will be as fast as if you'd done that
20.06.18 22:39:59<dmiles> something that Ohad might avoid, maybe not after he reads this  is,..  Despite its emphasis on expressive representation which usually has to be paid for with intractable and expensive reasoning procedures, PowerLoom is very scalable and comes with a variety of mechanisms to control search and handle large ontologies and knowledge bases. For example, PowerLoom's reasoning specialists handle
20.06.18 22:40:00<dmiles> a wide variety of inferencing very effectively without having to go through any rule chaining. Search control annotations can be used to help the inference engine use rules more effectively. For example, depending on fan-out, certain rules are run more effectively forwards than backwards (or vice versa), and a KB developer can tell the system when that's the case. PowerLoom has resource-bounded
20.06.18 22:40:01<dmiles> depth-first or iterative deepening search which provides an any-time inference scheme for situations where resources are limited. A "just-in-time" forward inference engine elaborates the assertion neighborhood of objects touched upon by inference. This allows focused forward inference relevant to current inference goals, without having to run forward inference over a potentially very large
20.06.18 22:40:02<dmiles> KB to completion.
20.06.18 22:40:42<dmiles> what we discovered is that neitehr Fwd,bwd infernce is enough, we needed both
20.06.18 22:41:55<dmiles> PowerLoom has a static and dynamic query optimizer, that, similar to optimizers used in database systems, orders conjunctive goals based on relation extension sizes and rule fan-out to minimize intermediate result sets and chaining. The dynamic optimizer does this for each conjunctive subgoal based on actual bindings. Given this mechanism it is possible to run PowerLoom queries that return
20.06.18 22:41:57<dmiles> 100,000's of solutions.
20.06.18 22:43:03<dmiles> Cycorp and I descovered a neat trick that not only increases HOL expressive power but also even speed.. we avoid "explosions of cardinality"
20.06.18 22:43:35<dmiles> "explosions of cardinality" was the problem that you guys saw in PREDVARS
20.06.18 22:44:07<dmiles> well one of the problems eventually you see had you fix the memoizaions and coinduction problems :)
20.06.18 22:44:53<dmiles>  "explosions of cardinality" is when you think you need to freeze a cubic meter of water so you can place it on a scale
20.06.18 22:45:35<dmiles> actually more like the brick weighing problem i gave to stoopkid in ##logic one day
20.06.18 22:46:21<dmiles> but i enjoy giving the water wight example since it is more fun
20.06.18 22:46:38<dmiles> actualyl  "brick weighing problem" == "explosions of cardinality"
20.06.18 22:47:24<dmiles> "brick weighing problem" is that a larger pyramid takes longer to wiegth than a smaller pyrimid
20.06.18 22:47:56<dmiles> each brick of the pyrmid weighs in pound
20.06.18 22:48:19<dmiles> we take the pyrimid appart and count the bricks
20.06.18 22:48:32<dmiles> now we come up with the wieght
20.06.18 22:49:00<dmiles> for a larger pyrimid that is twice as large we have to count twice as high
20.06.18 22:49:35<dmiles> rdf/prolog/datalog have this problem
20.06.18 22:50:17<dmiles> if you have a relation that has a cardinailty of 20 results.. and that feeds anohter with 20 more
20.06.18 22:50:18<dmiles> you have 400 trees
20.06.18 22:50:29<dmiles> Cycorp and I solved this problem
20.06.18 22:50:48<dmiles> and ot some extent so did PoweLOOM
20.06.18 22:51:43<dmiles> not just with Heuristics the way I had for the first coupple years
20.06.18 22:52:30<dmiles> ok.. back to the pyrimid bricks, what if instead of counting bricks, instead we measured the pyrmid?
20.06.18 22:52:56<dmiles> sure a larger pyrmid might take longer to get the full measurment
20.06.18 22:53:30<dmiles> (as we have to walk arround the base of tghe pyrimid with a tape measure)
20.06.18 22:54:30<dmiles> at least we are not couning bricks  (cardinality solved) at least in for brick-pyrmids
20.06.18 22:55:22<dmiles> up another order, to "when you think you need to freeze a cubic meter of water so you can place it on a scale"
20.06.18 22:56:23<dmiles> well .. guess what .. that already wieghs a metric  tonne :)
20.06.18 22:57:16<dmiles> ok so the "if you have a relation that has a cardinailty of 20 results.. and that feeds anohter with 20 more, you have 400 trees"  that problem is solved sigly differntly
20.06.18 22:57:37<dmiles> it has 3 solutions not 400
20.06.18 22:58:28<dmiles> in Boxlog language
20.06.18 22:59:07<dmiles> though you can use "labeling" which might see all 400 chains
20.06.18 22:59:28<dmiles> it is done thru "proof carrying terms"
20.06.18 23:00:10<dmiles> oops i lied there are actualyl  (3+3)-1 proof templates
20.06.18 23:01:22<dmiles> some,all,none + some,all,none -  {none,none}
20.06.18 23:02:45<dmiles> oops that is old Logicmoo/Boxlog .. hte new verison use    some,all,none^(possiblly,nesc)
20.06.18 23:03:05<dmiles> still that is only 9 subcompiled templates
20.06.18 23:04:21<dmiles> this week i am doing this work in C++ that has no deps
20.06.18 23:05:02<dmiles> since somehow people dont understand Prolog at least hey can understand c++
20.06.18 23:06:05<dmiles> also secretly i been strucggling to Object-tivize these 2 new types of prolog vars one top of the existing two typers of prlog vars and keep failing
20.06.18 23:06:49<dmiles> by doing it in C++ i can finaly extend the NonDet machine model to use all 4 types of vars
20.06.18 23:07:37<dmiles> and the 3-4 new types of terms that CYC used that prolog implementors have never imagined
20.06.18 23:09:29<dmiles> perhaps the KB can be turned to a program in typetheory
20.06.18 23:10:20<dmiles> but, my eyes would do backflips trying to do that "first" and then trying to durive the C++
20.06.18 23:11:15<dmiles> it already takes every brain cell to do something this hard.. immagine trying to do it by accident?
20.06.18 23:12:38<dmiles> by taking the procededure of eye.yap and truing that into the other thing.. admittely that is easier.. but i dont think it gets anyone what they really wanted in the end
20.06.18 23:13:21<dmiles> as the total depth of deduction the system has would be that limited
20.06.18 23:13:42<dmiles> the 10k version isntead of the 100k version
20.06.18 23:15:50<dmiles> not only that, i barely can immagine the "3-4 new types of terms that CYC used", ok well i can but i know that the end will not be teh same 3-4 types
20.06.18 23:27:13* stoopkid trying to read about Henkin semantics and finding there's dozens more varieties of second-order logic semantics that i hadn't heard of befpre
20.06.18 23:27:16<stoopkid> before*
20.06.18 23:36:13<stoopkid> https://www.lesswrong.com/posts/MLqhJ8eDy5smbtGrf/completeness-incompleteness-and-what-it-all-means-first
20.06.18 23:54:33<dmiles> > And inside this model, we can construct the Gödel sentence G, which is equivalent with "there is no proof of G". By 'proof', we mean a natural number n that is the Gödel number that encodes a proof of G.
20.06.18 23:55:49<dmiles> Obviously, Peano arithmetic cannot prove G without being inconsistent; but this is precisely what G is saying, so we can actually see that G is true. And hence that "not G" cannot be provable if our arithmetic is consistent. This is the incompleteness theorem: neither G nor "not G" are provable, so the proof system is "incomplete".
20.06.18 23:57:19<dmiles> So... lets say that whole setup is what describes  "incomplete"
20.06.18 23:57:35<dmiles> surely only an incomplete system is of any user :)
20.06.18 23:57:46<dmiles> surely only an incomplete system is of any usefullness!
20.06.18 23:58:28<dmiles> though i ask.. are we defining terminolgy.. or is something important happening?
20.06.18 23:59:24<dmiles>  i mean is coinductive inference chews this stuff and makes proofs like cotton candy
21.06.18 00:00:25<stoopkid> important things happen further down the page when the author describes the difference between full second-order semantics and henkin semantics
21.06.18 00:00:29<dmiles> what i am trying to fathom is that if  coinductive inference was not arround at the time of Gödel's incompleteness theorem
21.06.18 00:01:41<dmiles> lets say at least Gödel is defining  completeness / incompleteness in terms of the fact he says its illegal to uses coinduction
21.06.18 00:02:18<dmiles> incompleteness means proofs have to be encoded using non-models
21.06.18 00:02:33<stoopkid> not sure what you mean by "he says its illegal to use coinduction"
21.06.18 00:03:31<dmiles> to use coinduction in G means that "not G" cannot be described
21.06.18 00:04:00<dmiles> thus illegal to make any G that you cannot make a ~G
21.06.18 00:05:00<stoopkid> https://en.wikipedia.org/wiki/Coinduction ?
21.06.18 00:05:30<dmiles> yes
21.06.18 00:06:32<dmiles> in order to prove that  "X-1 < X" you must use a coinductive element as part of a proof
21.06.18 00:07:24<dmiles> coinduction describes how X may be "observed" and "broken down" via -1
21.06.18 00:08:33<dmiles> so first we might explain in our proof that the arroundment of Nat-1 travels a total order of Nats
21.06.18 00:09:03<dmiles> our proof is that Nat-1 "travels a total order of Nats"
21.06.18 00:09:05<HMCa> redfish64: wb
21.06.18 00:09:17<dmiles> and that "<" expains what we meant by "order"
21.06.18 00:09:25<HMCa> redfish64: can I offer a few notes/corrections on your slides?
21.06.18 00:09:42<dmiles> now we will explain that all others numbers are convertable into Nats
21.06.18 00:10:06<dmiles> thus describes how an object may be "observed"
21.06.18 00:11:30<dmiles> so we relate that for all X there exists a Nat that numbers it.. for exmaple ina  total order of  that multiples the nat by a possibe number
21.06.18 00:11:52<dmiles> 1.1 2.2 3.3   Nat = 1  Multplier = 1.1
21.06.18 00:12:34<dmiles> but despite the multipler (as long as it is real and > 0 ) .. the Nat still works
21.06.18 00:13:08<dmiles> these are "coinductive" in that the proof leaves the model .. and in fact is outside the model
21.06.18 00:13:14<HMCa> redfish64: the idea of our construct did not originate with ohad... I described the goals to him, some others described the goals to amiller and I back in 2007-2008 and we refined the concept for execution in 2009-2011, they got the goals from some discussions years prior... best I can trace it back it goes as early as 2001...
21.06.18 00:14:44<HMCa> but probably actually dates back to the late 90s in origination, the days of napster and kazaa, appears it might've started with the compshare guys...
21.06.18 00:15:13<HMCa> second, it is a misconception that a fork reorg takes the longest chain counted by block depth...
21.06.18 00:15:47<HMCa> reorg actually goes by total hashing work represented on the chain (taking into account difficulty adjustment)
21.06.18 00:16:10<dmiles> coinduction is about invention of a proofing language using descriptions of how something is manipulatated as codata
21.06.18 00:16:32<HMCa> so you could hypothetically have a long fork where the "losing" side actually has more blocks but less work done
21.06.18 00:19:26<HMCa> also you should probably point out that PoS does not have the same assurances wrt infeasability of reverting that PoW offers... maybe even mention NaS, long-range, and killswitch attacks as technically still open problems
21.06.18 00:22:04<HMCa> next, your "shared work" example (merge mining?) seems a bit flawed, both chains don't get to share both sets of work... bitcoin benefits from namecoin merge-mining but namecoin does not benefit from bitcoin mining, and bitcoin does not benefit from non-merged namecoin mining, as an example
21.06.18 00:23:03<HMCa> the added security follows the pegging...
21.06.18 00:24:21<HMCa> redfish64: you should probably also be aware that idni/newtau seems to have now entirely diverged from everything that you describe here
21.06.18 00:24:35<HMCa> what you are describing is "an oldtau"
21.06.18 00:26:11<dmiles> stoopkid:  "Though they are called 'Henkin semantics', they could really be called 'Henkin syntaxes'"    language like RDF/Prolog/Datalog  might be restricted to syntactical "comprehension axioms"
21.06.18 00:28:19<HMCa> redfish64: finally, personally I would like to see some more explanations of how subcontext chains can be created, "invoked" by parent logic, and the pitfalls that could cause them to stall or otherwise fail
21.06.18 00:28:27<HMCa> iow the "subcontext lifecycle"
21.06.18 00:30:22<HMCa> related: there should probably also be some mention about the blockchain/dht relationship... and how what the rules actually constrain is "dht extensions" with each subcontext acrually represebting a distinct dht ring
21.06.18 00:32:38<HMCa> finnally wrt where you end "stuck"... heh... indeed this "proof of blank" notion is our sort of (unstated or only loosely stated) central goal, really...
21.06.18 00:33:06<HMCa> each context should define its' "blockverify" semantics
21.06.18 00:33:29<HMCa> inheriting constraints from parents, but otherwise free/openended
21.06.18 00:34:00<HMCa> this is why we have root as a "vanilla" pow, and say it should always "do the least controversial thing"
21.06.18 00:34:43<HMCa> let the branching hierarchy below it debate the controversial things by collecting resource contributions
21.06.18 00:35:01<HMCa> what is good will thrive, what is not will stall
21.06.18 00:35:18<HMCa> in a sort of natural selection
21.06.18 00:36:01<HMCa> ok, that's it... other than those points it is pretty darned great! :-)
21.06.18 00:36:26<HMCa> now to read dmiles' wall-o-text...
21.06.18 00:36:29* HMCa reads
21.06.18 00:38:21<HMCa> dmiles: what we build is certainly not just a cyc/powerloom/etc... we are not just a "networked reasoner" heh
21.06.18 00:39:16<HMCa> what our construct is - it says on the tin... autonomous, nomic overlay routing
21.06.18 00:40:01<dmiles> i am not very clear as to which ol/new tau i am talking about
21.06.18 00:40:11<dmiles> *old/new
21.06.18 00:40:41<HMCa> if people want to apply that toward general knowledge management things, great... but that is really just one (rather small and, imo, short-sight) use case
21.06.18 00:42:09<HMCa> we talk about that use case a lot (a la Atlas, etc) *because* it is small, straightforward, and fundamental... but to think of that as all what the thing is misses "the point" heh
21.06.18 00:42:41<dmiles> "if people want to apply that toward general knowledge management" then for sure they are expecting that it works as good as and as close to CYC
21.06.18 00:44:59<HMCa> hrmm, no they would be expecting that they could possibly make a context to work at least as good/close to....
21.06.18 00:45:14<HMCa> and indeed if we do our jobs right, that should be possible
21.06.18 00:45:44<HMCa> but that is not the goal of the protocol itself, or root chain... those are contextual desires
21.06.18 00:46:18<HMCa> you might want cyc, i might want restdesc, someone else might want okf...
21.06.18 00:46:59<HMCa> these are contextual specializations of the very general and very fundamental facility that the construct itself purports
21.06.18 00:50:04<HMCa> stoopkid: yes, the span above fol and below primrec is... wild.
21.06.18 00:56:07<HMCa> dmiles: similarly, some people will want atlas, some people will just want dbpedia, and some people would be happy to settle for decentralized wikipedia
21.06.18 00:56:19<HMCa> and similarly these should all be possible contexts
21.06.18 00:56:44<HMCa> but core/root "don't discern let alone prefer"
21.06.18 00:57:43<dmiles> when I say CYC/PowerLOOM though .. i should also say with all the content drained out
21.06.18 00:58:01<dmiles> whereas they are application infrstrcutures that are written in themselvs
21.06.18 00:58:33<dmiles> the fact they are good at deductive logic was almost an accidental requirement
21.06.18 00:59:14<HMCa> regardless, those are still *particular* "ideological approaches"... where all we offer is coordination over "specializable maths, generally"
21.06.18 00:59:55<dmiles> actualyl i cant tell if the application infrastructe was an accidental requirement of the deductive logic or the decuctive logic that deducing the infrastructure
21.06.18 01:00:57<HMCa> ^either way it is still the *specific* infrastructure that it is...
21.06.18 01:01:45<HMCa> surely contexts will similarly arise in both fashions
21.06.18 01:01:46<HMCa> :-)
21.06.18 01:01:52<dmiles> yes.. a *specific* infrastructure indeed .. so i hear what you are saying is that people mgiuth want or need something differnt
21.06.18 01:02:48<HMCa> yes, and we make no assumptions about what will be overall preferable, we leave that up to the network(s) to decide over time, for themselves
21.06.18 01:03:12<HMCa> this is why we say the construct is a "gauntlet for theories"
21.06.18 01:04:10<HMCa> dototd: brutal churn of infrastructures trying to starve infrastructures by simply being better
21.06.18 01:04:55<HMCa> it would be expected that the "just wikipedias" will die out to the atlas's
21.06.18 01:05:06<HMCa> *atlases?
21.06.18 01:05:28<HMCa> stoopkid?  it is your nomenclature, you tell me what the correct plural is? :-P
21.06.18 03:02:32*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-debtkpxqtcjakwpk) left #AutoNomic: Quit: Connection closed for inactivity
21.06.18 03:40:35*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
21.06.18 03:43:17<nilli> 21.06.18 00:36:01<HMCa> ok, that's it... other than those points it is pretty darned great! :-)
21.06.18 03:44:11<HMCa> hi nilli
21.06.18 03:44:14<nilli> are we at a wow breakthough point here?
21.06.18 03:44:34<nilli> hi HMCa
21.06.18 03:44:39<HMCa> ?
21.06.18 03:44:48<HMCa> not sure what you ask
21.06.18 03:45:16<nilli> regarding redfish work. is that autonomic ready for implementation?
21.06.18 03:46:39<HMCa> no, i would say it is just a "nice but partial summary"
21.06.18 03:46:49<HMCa> even w/ my notes :-)
21.06.18 03:47:18<nilli> Also let me send you a doc I started regarding what we have talked about. (meaning what I tried to explain with little success )
21.06.18 03:47:47<nilli> ill paste it into bitcointalk PM
21.06.18 03:49:28<nilli> it is extremely grandiose  in terms of making connection between may different phenomenon and declines
21.06.18 03:53:12<nilli> but its only to give a broad background to one result that makes connection between entanglement and POW based consensus solution for the byzantine problem
21.06.18 03:53:34<HMCa> ok, I probably will not be able to give it a good look until tonight or tmrw
21.06.18 03:54:58<nilli> ok. by then I hope that Avisahy also will be able to make his comments on it. he is going to detail the uncertainty=energy part of it
21.06.18 03:56:43<nilli> Also a really interesting result is the 2 is enough players. and in fact when we deal with context we need to think of it as a game of 2 player
21.06.18 03:57:48<nilli> but that need I may need to explain to you in more details after regarding our extensive talks about 3 as a basic requirement.
21.06.18 04:09:23<nilli> ok i sent it....its work in progress.... view it as an artist pleas.
21.06.18 04:09:33<nilli> talk to you later
21.06.18 04:13:32<HMCa> yes, you really need 3+ for a stable majority consensus
21.06.18 04:14:04*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
21.06.18 07:57:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kaqranarspepwnhu, stoopkid: stoopkid)
21.06.18 08:02:11<stoopkid> dmiles: so this is what i'm gathering
21.06.18 08:02:34<stoopkid> full second order logic semantics is actually, in some sense, an "instance" of Henkin semantics
21.06.18 08:03:28<stoopkid> and Henkin semantics does seem to be more or less what they do in lbase etc..
21.06.18 08:05:21<stoopkid> so in both full semantics and henkin semantics, you have a collection of object symbols and a collection of relation symbols
21.06.18 08:07:28<stoopkid> the difference is what models we allow
21.06.18 08:14:48<stoopkid> so, a henkin model of a second order theory/statement S  is an interpretation of S into a tuple <M,T,I>, where M is a set of objects (the first-order part), T is a set of sets of objects in M, and I is a function that maps object symbols to objects and relation symbols to relations, in the expected fashion
21.06.18 08:14:57<stoopkid> roughly
21.06.18 08:15:26<stoopkid> T can be an arbitrary set of sets of objects in M (or n-ary relation on objects in M, etc..)
21.06.18 08:16:12<stoopkid> if you have such an interpretation of your statement S into such a tuple <M,T,I>, then you have a henkin model and S could be said to be Henkin-satisfiable
21.06.18 08:17:44<stoopkid> a statement is full-SOL-satisfiable iff. it has a Henkin model with a tuple <M,Powerset(M),I>, for some M
21.06.18 08:17:59<dmiles> if lbase is limited to the semantics of rdf/triples yes
21.06.18 08:19:08<stoopkid> so one place we can actually observe the distinction in semantics is with the statement "forall x,y, exists R, R(x,y)"
21.06.18 08:19:38<stoopkid> in full second order logic, this is logically valid, meaning it is true in all full-second-order Henkin models
21.06.18 08:19:52<stoopkid> on the other hand, it is not true in all Henkin models generally
21.06.18 08:20:30<stoopkid> because you could choose T to not include any binary relations, in fact T could be empty
21.06.18 08:21:21<dmiles> "forall x,y, exists S,   R1(x,y)/\R2(x,y)/\subrelation(R1,S)/\ not(subrelation(R2,S))"
21.06.18 08:21:30<dmiles> oops
21.06.18 08:21:48<dmiles> "forall x,y,R1  exists S,R2   R1(x,y)/\R2(x,y)/\subrelation(R1,S)/\ not(subrelation(R2,S))"
21.06.18 08:22:44<dmiles> what i am attempting to do is create immaginary non-henkinish relations
21.06.18 08:24:22<dmiles> the relation between R1 and R2 is that based on R1 there are going to be no R2s
21.06.18 08:24:42<dmiles> if those two relations semantically intersect
21.06.18 08:25:28<dmiles> in other words thru FOL we can create all sort of higher order monstrosities (henkin and not)
21.06.18 08:26:01<dmiles> by thru FOL i meant representing SOL in FOL
21.06.18 08:28:45<dmiles> the popular semantic technologists of the previous decades, prior to the introduction of the semantic web, could never adopt the semantic web partly perhaps it was too henkin
21.06.18 08:30:37<dmiles> for example .. imagine i have these relations:  loves,loves_more,loves_infinately  .. i cant represent those as useable relations without leaving henkin
21.06.18 08:30:38<stoopkid> ok so, do you agree that "forall x,y,R1  exists S,R2   R1(x,y)/\R2(x,y)/\subrelation(R1,S)/\ not(subrelation(R2,S))" is not full-SOL-satisfiable, and possibly not even Henkin-satisfiable?
21.06.18 08:31:23<dmiles> well for sure they would have differnt satisfiablity between them (that was the goal)
21.06.18 08:32:05<stoopkid> i'm not yet sure they do, that would depend on whether the statement is Henkin-satisfiable
21.06.18 08:32:08<dmiles> i just didnt nesc work out in which one couldnt
21.06.18 08:33:01<dmiles> the problem is is if henkin semantics it was saisfiable then probably not Full-SOL
21.06.18 08:33:26<dmiles> at least it shouldn't been
21.06.18 08:33:56<dmiles> the exmaple was to show that the statemnt will be pottental inconsistent on one
21.06.18 08:36:11<dmiles> I'll come up with something a bit more clear:
21.06.18 08:37:40<stoopkid> how about "exists x,y, forall R, R(x,y)"
21.06.18 08:37:53<dmiles> forall S exists  R1 R2      subrelation(R1,S)/\ not(subrelation(R2,S))/\(forall X,Y: R1(X,Y)=>~R2(X,Y))
21.06.18 08:38:04<dmiles> oops
21.06.18 08:38:12<dmiles> lets use yours first
21.06.18 08:38:28<stoopkid> so do you agree that it's Henkin-satisfiable but not full-SOL-satisfiable?
21.06.18 08:38:53<dmiles> "exists x,y, forall R, R(x,y)"  is satifiable in full and not in Henken according to HMCa
21.06.18 08:39:12<stoopkid> got a quote on that? :)
21.06.18 08:39:24<stoopkid> what about the empty relation?
21.06.18 08:39:25<dmiles> it was some time in the last 2 years
21.06.18 08:39:47<dmiles> right in order to get such an empty relation he was telling you it was full SOL
21.06.18 08:39:56<dmiles> that hankin cant deal with such thiungs
21.06.18 08:40:31<dmiles> remember it was the day he surprised you that fullSOL is not able to produce its axioms
21.06.18 08:40:33<stoopkid> no i mean, this statement is *not* full-SOL-satisfiable, which we can tell because of the existence of the empty relation
21.06.18 08:41:08<dmiles> and you asked.. what? he was yeah.. you cant produce proofs in full SOL
21.06.18 08:41:24<dmiles> for SOL in full semantics
21.06.18 08:42:39<stoopkid> so let's say we have a set S, and objects x, y that exist in S
21.06.18 08:42:57<stoopkid> for all possible binary relations R on S, is it true that R(x,y) ?
21.06.18 08:43:32<dmiles> it can be if you assert that to be true
21.06.18 08:43:42<stoopkid> not really :)
21.06.18 08:44:17<stoopkid> it could be true if i limited the set of possible binary relations, but i didn't do that
21.06.18 08:44:25<dmiles> there would exist an x,y that you can immagine that would make that rue.. yes
21.06.18 08:44:42<stoopkid> what about the empty relation?
21.06.18 08:44:53<dmiles> for instance.. if i assert...
21.06.18 08:45:21<dmiles> "exists x,y, forall R, R(x,y)"
21.06.18 08:45:22<dmiles>  as "exists x,y, forall R, R(_:bnode1,_:bnode2)"
21.06.18 08:45:41<dmiles> oops
21.06.18 08:45:46<dmiles> "forall R, R(_:bnode1,_:bnode2)"
21.06.18 08:46:05<dmiles> that should be saisfiable
21.06.18 08:46:13<stoopkid> this is still not satisfiable in full-SOL semantics
21.06.18 08:46:24<stoopkid> choose the empty relation for R and it fails, right?
21.06.18 08:47:03<dmiles> it success for all that it can be true with
21.06.18 08:47:14<dmiles> succeeds
21.06.18 08:47:22<stoopkid> no
21.06.18 08:47:33<stoopkid> that would be "exists R, R(_:bnode1,_:bnode2)"
21.06.18 08:47:59<dmiles> these bnodes can become whatever they need to become
21.06.18 08:48:11<stoopkid> to satisfy the empty relation they would have to stop existing entirely!
21.06.18 08:48:13<dmiles> specifcally for each R
21.06.18 08:48:55<stoopkid> lets make this a bit less abstract
21.06.18 08:49:18<dmiles> second.. look at this a momen
21.06.18 08:49:25<dmiles> all(P,all(M, mother(P,M)=>female(M)))
21.06.18 08:49:50<dmiles> what have i just done to mother/2 ?
21.06.18 08:50:25<dmiles> i've made it illegal to bind with any non female in the furuie right?
21.06.18 08:51:14<dmiles> so this next statmnet    exists(X,forall(M,mother(X,M)).
21.06.18 08:51:33<dmiles> that says "there exists someone whom has everyhitng as a mother"
21.06.18 08:52:02<dmiles> does that person have every object in the universe now for a monmther?>
21.06.18 08:52:08<dmiles> does that person have every object in the universe now for a mother?
21.06.18 08:52:22<dmiles> well.. only has females .. right?
21.06.18 08:52:31<stoopkid> according to first-order semantics yes
21.06.18 08:52:33<stoopkid> no
21.06.18 08:52:46<stoopkid> you did not specify that your two statements were to be taken in conjunction :)
21.06.18 08:52:58<dmiles> sorry yes i meant in conjunction
21.06.18 08:54:10<dmiles> in other words that M is following some semantic
21.06.18 08:54:13<stoopkid> ok so, even if you take them in conjunction, what this ends up saying is that every object in the universe is a female
21.06.18 08:55:43<dmiles> how do create type constraints ?
21.06.18 08:56:00<dmiles> all(P,all(M, mother(P,M)=>female(M))) <- this is one way
21.06.18 08:56:26<dmiles> how do you use those constraints?
21.06.18 08:58:15<stoopkid> sure, by the first statement, everything in the universe that's a mother is a female
21.06.18 08:58:31<stoopkid> and by the second statement, everything in the universe is a mother
21.06.18 08:58:48<dmiles> does it also imply that everything not femle must also not be a monther?
21.06.18 08:59:07<dmiles> does first statment also imply that everything not female must also not be a monther?
21.06.18 08:59:27<stoopkid> yes unless you deny contrapositives/modus-tollens
21.06.18 09:00:56<dmiles> right.. so now if i use the second arg of the mother in a consequnce will that have the effect or restricting that argument to only be enumable to femalse?
21.06.18 09:03:20<dmiles> if so, i can also use such tactics upon relations
21.06.18 09:04:02<stoopkid> idk what you're asking exactly
21.06.18 09:04:12<stoopkid> "will that have the effect or restricting that argument to only be enumable to femalse"
21.06.18 09:04:53<dmiles> will  all(P,all(M, mother(P,M)=>female(M))) have the contrapositives/modus-tollens effectg of restricting mother arg2 ?
21.06.18 09:06:03<stoopkid> all(P,all(M,~female(M)=>~mother(P,M))), sure
21.06.18 09:06:39<stoopkid> if by "restricting mother\2" you mean the assertion of an implication A -> ~mother(x,y), for some A,x,y
21.06.18 09:07:03<dmiles> ok.. so then  exists(P,exist(M, mother(P,M)).. what would be P's gender?
21.06.18 09:07:06<dmiles> oops
21.06.18 09:07:14<dmiles> what would M's gender be?
21.06.18 09:07:31<stoopkid> (some... "non-false"* A, i should say, otherwise the implication would be trivial :)
21.06.18 09:08:25<stoopkid> you haven't formally defined gender in your theory yet, but, assuming "standard" background definitions, we can conclude female :)
21.06.18 09:08:54<dmiles> lets just start with the first axiom i created
21.06.18 09:09:03<dmiles> all(P,all(M, mother(P,M)=>female(M)))
21.06.18 09:09:52<dmiles> that would mean later on ..  that  exists(P,exist(M, mother(P,M))  makes female(M) ?
21.06.18 09:10:31<stoopkid> according to FOL semantic entailment yes
21.06.18 09:11:11<dmiles> all(M2, exists(P2, mother(P2,M2)))
21.06.18 09:11:28<dmiles> did that make everyone female?
21.06.18 09:11:49<dmiles> or just the females are female?
21.06.18 09:11:56<stoopkid> according to FOL semantic entailment that would make everyone female
21.06.18 09:12:04<stoopkid> because it makes everyone a mother
21.06.18 09:12:09<stoopkid> (of P2)
21.06.18 09:12:58<dmiles> or does that make a fresh P2 for each M2 ?
21.06.18 09:13:30<dmiles> exists(P2, all(M2, mother(P2,M2)))   <- this doesnt make a fresh one
21.06.18 09:13:48<stoopkid> right sorry, every M2 is the mother of a fresh P2
21.06.18 09:14:07<dmiles> are P2s part of the same uiverse?
21.06.18 09:14:12<stoopkid> yes
21.06.18 09:14:16<stoopkid> in FOL semantics
21.06.18 09:14:34<dmiles> what sort of a person has ever used such a stupid semantic?
21.06.18 09:14:43<dmiles> not RDF :P
21.06.18 09:14:59<dmiles> or any system that i know of
21.06.18 09:15:12<stoopkid> every academic logician since Frege :P
21.06.18 09:15:24<dmiles> except the ones who use it for a living
21.06.18 09:15:44<stoopkid> it's a very standard academic tool
21.06.18 09:15:45<stoopkid> i can't speak to "using it for a living" XD
21.06.18 09:15:49<dmiles> yes but for isntance PowerLOOM wouldnt do that nor wouldN3 right?
21.06.18 09:16:02<dmiles> N3 would not do that would it?
21.06.18 09:16:05<stoopkid> but afaik it's also becoming a fairly standard industry tool these days as well
21.06.18 09:16:19<dmiles> nor would lbase
21.06.18 09:16:39<dmiles> thus maybe eye/lbase/n3 are examples on non FOL
21.06.18 09:16:55<stoopkid> lbase would indeed do that, with some slight exception on the relational symbols, which get something closer to a Henkin semantics
21.06.18 09:17:12<dmiles> what i am saying is such systems called "Description Logic" are based on restriction logic
21.06.18 09:17:24<stoopkid> ah
21.06.18 09:17:34<stoopkid> maybe, idrk description logic very well
21.06.18 09:17:42<dmiles> yet they use FOL "notation"
21.06.18 09:17:54<stoopkid> i've read some brief descriptions of it long ago and forgot most of it :)
21.06.18 09:18:14<dmiles> for instance, N3 is expressly description logic
21.06.18 09:19:19<dmiles> the restrictions and enhancments we give to any non relation term can be given to relation terms
21.06.18 09:20:19<dmiles> i can start to efnorce via  modus tollens all sorts of properties apon universlally quantified Rs
21.06.18 09:20:52<stoopkid> same way they do in lbase right?
21.06.18 09:21:06<dmiles> in lbase you can .. yes
21.06.18 09:21:45<dmiles> i can evne enforce cardinalities that are not even possible in  FOL logic scools
21.06.18 09:21:55<stoopkid> ok so, let's take a look at that again
21.06.18 09:22:04<dmiles> i can say that the cardinatly of a particular R is 0
21.06.18 09:22:25<dmiles> i can say that the cardinality of a particular R or is always 1
21.06.18 09:22:42<dmiles> if i do that on "nother" .. i have now force one into existence!
21.06.18 09:23:01<dmiles> if i do that on "mother" .. i have now forced at least one female into existence!
21.06.18 09:24:07<dmiles> this are not things normally possible in anyhing for HOL
21.06.18 09:24:27<dmiles> these are not things normally possible in anyhing except for HOL
21.06.18 09:27:32<dmiles> we can do this without even quantifying over relations
21.06.18 09:28:27<stoopkid> "R-has-cardinality-1 := (exists x,y, R(x,y)) ^ (forall x,y,R(x,y) -> x == y)" you can specify it in FOL + equality
21.06.18 09:28:38<dmiles> by using predicate such as  subProperty  and cardinalityMin/Max
21.06.18 09:29:04<stoopkid> "R-has-cardinality-0 := ~(exists x,y, R(x,y))", in FOL even without equality
21.06.18 09:29:51<stoopkid> indeed, you can do it *without even quantifying over relations*, which is exactly what it makes it actually possible in something less than HOL :)
21.06.18 09:30:38<dmiles> ok so for cardinality ==1  on mother does this make one new female exist?
21.06.18 09:31:02<stoopkid> yes, it would be the y from "exists x, y, R(x,y)"
21.06.18 09:31:12<dmiles> ok yes... i missed the  (exists x,y, R(x,y)) part
21.06.18 09:32:19<dmiles> lets clear the cardinality restriction ... a moment
21.06.18 09:32:27<dmiles>   (exists x,y, R(x,y))
21.06.18 09:32:29<dmiles>   (exists x,y, R(x,y))
21.06.18 09:32:44<dmiles> how many mothers can i have?
21.06.18 09:33:00<stoopkid> you have at least 1 :)
21.06.18 09:33:03<dmiles> between 2 and inf ?
21.06.18 09:33:10<stoopkid> or x does at least
21.06.18 09:33:16<stoopkid> between 1 and inf
21.06.18 09:33:34<stoopkid> because the two statements could be referring to the same x and y
21.06.18 09:33:40<dmiles> yep
21.06.18 09:34:22<dmiles>  you implied there was an empty R .. what about for the "empty x"?
21.06.18 09:34:51<stoopkid> there's no "empty x", that's like saying "there's an empty set so what about an empty point"
21.06.18 09:35:06<dmiles> then why is there an empty R?
21.06.18 09:35:21<stoopkid> because we specifically interpret R as a set/relation
21.06.18 09:35:44<dmiles> under what logic does that?
21.06.18 09:35:54<stoopkid> all higher-order logic including henkin
21.06.18 09:36:19<dmiles> can FOL have nonexistentials?
21.06.18 09:36:34<stoopkid> like... universals?
21.06.18 09:37:14<dmiles> (all x exists y ~R(x,y)-)
21.06.18 09:37:16<dmiles> oops
21.06.18 09:38:47<stoopkid> i guess i made too much of a generalization there, there's probably category-theoretic higher-order-logic that deals with structures "more general" than sets/relations
21.06.18 09:39:04<dmiles> ( exists y (all c ~(y a c) ))
21.06.18 09:39:17<stoopkid> but for the purposes of this discussion we're just talking about standard FOL, SOL, HOL and Henkin
21.06.18 09:39:18<dmiles> a = the rdf:type
21.06.18 09:40:09<dmiles> "y is a existential that is not valid in rdf"
21.06.18 09:40:18<stoopkid> yes this is a well-formed first-order statement
21.06.18 09:40:24<dmiles> well is not part of any set
21.06.18 09:42:28<stoopkid> it's not "a c" for any rdf:type c ***
21.06.18 09:42:52<stoopkid> y would still be part of "sets" as per Henkin/full-SOL semantics
21.06.18 09:43:07<dmiles> "(all c "  i wish wasnt so tired,  but the point i am trying to make is that FOL hankin semantics vs fullSOL is not a very
21.06.18 09:43:13<dmiles> oops
21.06.18 09:43:17<dmiles> "(all c "
21.06.18 09:43:32<dmiles> so 'c' was universally quantified
21.06.18 09:44:25<dmiles> and of course 'c' is further restricted to only being of all types
21.06.18 09:45:27<dmiles>  wish wasnt so tired,  but the point i am trying to make is that FOL is not more related or closer to henkin semantics than fullFOL
21.06.18 09:46:05<dmiles> this was something that HMCa made up to sell one away from FOL
21.06.18 09:46:14<stoopkid> lol what
21.06.18 09:46:48<stoopkid> even if your sentiment is that this FOL vs fullSOL distinction is made up to sell one away from FOL, HMCa's certainly not the one who made it up XD
21.06.18 09:46:53<dmiles> i dont want to search for it in the logs
21.06.18 09:47:00<stoopkid> he'd be old as hell if that were the case :P
21.06.18 09:47:48<stoopkid> like, well over 100
21.06.18 09:48:22<dmiles> to sell me and you and whomever that fullSOL was this thing we'd never grasp
21.06.18 09:48:31<stoopkid> henkin semantics is somewhat newer, but only like by 20-30 years
21.06.18 09:48:32<stoopkid> ?
21.06.18 09:49:00<dmiles> what i am glad i wont :)
21.06.18 09:49:46* stoopkid shrugs
21.06.18 09:50:11<stoopkid> i'm mostly just reporting my findings from academia, i don't have strong opinions about it myself :)
21.06.18 09:50:16<stoopkid> or rather.. my opinions are my own XD
21.06.18 09:50:33<dmiles> i am saying that he made up some concept that no mater what i did .. i was doing henkin SOL
21.06.18 09:51:29<stoopkid> well, we have the definitions of henkin vs. full SOL so we can like.. verify these claims, not like.. take HMCa's word on it :P
21.06.18 09:53:27<stoopkid> i'm having trouble interpreting lbase specs, particularly one line:
21.06.18 09:53:34<stoopkid> "a mapping IEXT from IR, a subset of ID, into a relation over ID+ISN (ie a set of tuples of elements of ID+ISN)."
21.06.18 09:53:41<stoopkid> https://www.w3.org/TR/2003/NOTE-lbase-20031010/
21.06.18 09:54:30<stoopkid> i would have expected this to be "a mapping IEXT from IR, a subset of ID, into a *set of* relations over ID+ISN (ie a set of *sets of* tuples of elements of ID+ISN)"
21.06.18 09:54:41<stoopkid> would you agree?
                 <dmiles> why i brought that up is i dont think a clear formal defination of accedemia has come about for "full SOL"
21.06.18 09:55:15<stoopkid> oh there is, i'm fairly confident i understand the definition of full SOL precisely
21.06.18 09:56:04<stoopkid> what's new for me is i finally understand what Henkin SOL is
21.06.18 09:57:32<stoopkid> would you agree with my correction to that line of lbase specs?
21.06.18 09:57:59<stoopkid> you can confirm that this is the intention from the chart below that: "a formula of the form R(t1,...,t2) 	true if IEXT(I(R)) contains the sequence <I(t1),...,I(tn)>, otherwise false"
21.06.18 09:59:06<dmiles> taht adds a "closed world interpretation"
21.06.18 09:59:52* dmiles reading that a littel closer to contextualize what Pat was trying to say
21.06.18 10:01:15<stoopkid> ok so, assuming my interpretation is correct, this is almost exactly what Henkin semantics is
21.06.18 10:02:00<stoopkid> the reason is that you get to choose what IEXT is
21.06.18 10:04:16<stoopkid> the only thing slightly odd here is that the way it defines this IEXT mapping, it asserts that there must exist at least one relation in that "*set of* relations over ID+ISN"
21.06.18 10:04:33<stoopkid> (assuming you have any relation symbols)
21.06.18 10:04:46<dmiles> if we create a rule that forall all relations there exists a subrelation, would that not add infinate number of Subrelations?  sort of like say "for every number there exists yet a smaller number"
21.06.18 10:05:07<stoopkid> no
21.06.18 10:05:36<stoopkid> because that's more like saying "for every number there exists a number less than *or equal* to that number"
21.06.18 10:05:57<stoopkid> i think you mean *proper* subrelations specifically
21.06.18 10:06:24<stoopkid> in which case, that would either render our logic inconsistent or turn our relations into fractals or something i'm not sure :)
21.06.18 10:06:54<dmiles> we can also axiomitaze thse subrelations to be not the same
21.06.18 10:07:10<stoopkid> so proper subrelations
21.06.18 10:07:14<dmiles> yes
21.06.18 10:07:40<dmiles> we can do that upwards as well as downwards
21.06.18 10:08:07<dmiles> we can even do this with non relation objects
21.06.18 10:08:09<stoopkid> only if we only include infinite sets
21.06.18 10:08:43<dmiles> no reason we cant do that
21.06.18 10:09:40<stoopkid> in Henkin semantics :P
21.06.18 10:11:04<dmiles> These definitions are quite conventional. The only unusual features are the incorporation of special-name values into the domain, the use of an explicit extension mapping, the fact that relations are not required to have a fixed arity, and the description of functions as a class of relations.
21.06.18 10:11:44<stoopkid> yes
21.06.18 10:12:03<stoopkid> conventional FOL + Henkin SOL
21.06.18 10:12:54<dmiles> I still dont think that his intent was to enforce Henkin SOL
21.06.18 10:13:08<stoopkid> slightly different then FOL because it constrains the interpretations of the relation symbols
21.06.18 10:13:16<stoopkid> um
21.06.18 10:13:35<stoopkid> lbase specs certainly would indicate otherwise?
21.06.18 10:13:55<dmiles> The explicit extension mapping is a technical device to allow relations to be applied to other relations without going outside   "first-order expressivity." (yet i think the intnet was to retain expressitivity of FOL"
21.06.18 10:14:29<dmiles> not to create Henkin
21.06.18 10:15:40<dmiles>  The resulting language is first-order in all the usual senses: it is compact and satisfies the downward Skolem-Lowenheim property, for example, and the usual machine-oriented inference processes still apply, in particular the unification algorithm.
21.06.18 10:15:56<dmiles> just because it is compact does not make it Henkin
21.06.18 10:16:13<stoopkid> i'm unclear on where Henkin stands between FOL and full SOL, all i can see is that its semantics are equivalent to neither of these
21.06.18 10:16:34<dmiles> exactly
21.06.18 10:17:31*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
21.06.18 10:17:36<stoopkid> so, let's stick with expressiveness
21.06.18 10:17:44<dmiles> also that Henkin semantics are not positioned "between"
21.06.18 10:17:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
21.06.18 10:18:28<stoopkid> would you agree that both full-SOL and henkin-SOL can trivially express everything that's FOL-expressible?
21.06.18 10:18:55<dmiles> i dont think henkin-SOL can trivially express everything that's FOL-expressible
21.06.18 10:19:06<dmiles> i dont know enough about  full-SOL
21.06.18 10:19:49<stoopkid> it assuredly can, because all the FOL expressions are also henkin-SOL expressions, and also full-SOL expressions
21.06.18 10:19:52<dmiles> for instance CTL* and modal logics are FOL-expressible
21.06.18 10:20:30<stoopkid> every FOL expressions is also some henkin-SOL expression that doesn't have any quantification over relation symbols
21.06.18 10:20:31<dmiles> but i do not belive henkin-SOL can express either of those
21.06.18 10:22:17<stoopkid> henkin-SOL takes FOL and adds more to it, doesn't remove anything
21.06.18 10:22:21<dmiles> FOL-expressible to me means able to have proof carrying terms :)
21.06.18 10:22:35<stoopkid> it takes FOL and adds quantification over sets/relations
21.06.18 10:23:08<stoopkid> FOL-expressible of a concept means the existence of an FOL expression that expresses it :P
21.06.18 10:23:35<dmiles> and adds quantifcation over bags of axioms like CTL* ?
21.06.18 10:23:53<stoopkid> idk CTL* but that's a totally different topic
21.06.18 10:24:29<stoopkid> it adds quantification over sets/relations
21.06.18 10:24:43<stoopkid> so does full-SOL
21.06.18 10:24:48<dmiles> ahow about quatification over functions?
21.06.18 10:25:17<dmiles> functions are not relations in this sense
21.06.18 10:25:41<stoopkid> they actually can be modeled as relations in this sense
21.06.18 10:25:51<dmiles> ok i agrree
21.06.18 10:26:38<dmiles>  FOL-expressible and  FOL are completely differnt things
21.06.18 10:27:17<dmiles> FOL-expressible is a syntax that may be used for all HOL
21.06.18 10:27:18<stoopkid> actually i'll have to think about how it changes things (or doesn't) if you have separate quantification over functions vs. general relations
21.06.18 10:27:58<dmiles> expressible in FOL is differnt i belive from FOL-expressible
21.06.18 10:29:02<stoopkid> the syntax.. yea sort of.. most syntaxes of FOL that i'm aware of are basically the same syntax as a multi-sorted FOL
21.06.18 10:29:04<dmiles> this is what LOOM does
21.06.18 10:29:12<dmiles> and i think what lbase does
21.06.18 10:30:44<dmiles> in PwerLOOM we write in FOL . but in no way would we expect anything Henkin
21.06.18 10:30:47<stoopkid> in standard academic SOL (either Henkin or full; their distinction is only in the semantics) you'll have a sort for object symbols, and then for each arity n, you'll have a sort for n-ary relation symbols
21.06.18 10:33:03<stoopkid> ok so, do you agree that multi-sorted FOL where one of the sorts represents the object domain can trivially express all of FOL?
21.06.18 10:33:47<dmiles>  multi-sorted FOL where one of the sorts represents the object domain would be a type of FOL, yes
21.06.18 10:33:48<stoopkid> FOL is just single-sorted FOL with the interpretation of the symbols of that sort to be objects in some domain
21.06.18 10:34:03<stoopkid> when i say FOL i mean vanilla academic FOL
21.06.18 10:34:29<dmiles> ok FOL as some made up things .. yes
21.06.18 10:34:33<stoopkid> single-sorted and,or,not,implies,forall,exists, over a set of objects
21.06.18 10:34:34<dmiles> ok FOL as some made up thing
21.06.18 10:35:25<dmiles> "as some made up thing" that has whatever usefull limitations that made sens to them
21.06.18 10:35:52<stoopkid> yes the made up academic definition that is being referred to by all these academic results like Godel's completeness/incompleteness/compactness, Lowenheim-Skolem, Lindstrom, etc..
21.06.18 10:35:57<dmiles> same with a defination toward full-SOL vs Henkin-SOL
21.06.18 10:36:32<stoopkid> i'm not trying to sell you on some definition of FOL, i'm just trying to make sure we're on the same page about what these academic results are even talking about
21.06.18 10:37:00<stoopkid> these results don't necessarily apply when you start changing the definitions
21.06.18 10:37:27<stoopkid> yes you can get different semantics/expressiveness for FOL if you make it not FOL :)
21.06.18 10:37:44<dmiles> why i seem resistentant is that it is wierd to me that full-SOL needs to to violate Lowenheim-Skolem
21.06.18 10:38:12<dmiles> and that FOL implicitly cant
21.06.18 10:38:22<stoopkid> i haven't gone through the proof of Lowenheim-Skolem yet or seen why it fails in SOL
21.06.18 10:39:00<dmiles> that once SOL stops violating Lowenheim-Skolem, it becomes Hekin
21.06.18 10:39:05<stoopkid> actually i know "why" it fails in SOL, assuming SOL can "categorically" express an infinite structure, then it violates Lowenheim-Skolem
21.06.18 10:39:24<stoopkid> i just haven't yet gone through the proofs of SOL categorically expressing some infinite structure
21.06.18 10:39:46<dmiles> and what abotu when FOL is categorically expressing some infinite structure
21.06.18 10:39:59<stoopkid> it can't, that's what Lowenheim-Skolem says
21.06.18 10:40:30<dmiles> is PA not FOL?
21.06.18 10:40:52<stoopkid> full PA is not FOL i believe, let's check
21.06.18 10:41:45<stoopkid> so there's two things here
21.06.18 10:41:55<stoopkid> the original Peano axioms, and the weaker Peano arithmetic
21.06.18 10:42:04<stoopkid> https://en.wikipedia.org/wiki/Peano_axioms
21.06.18 10:42:17<dmiles> yeah i means the non weaker... but i shoulod said the weaker
21.06.18 10:42:52<stoopkid> ok so axiom 9 there
21.06.18 10:43:27<stoopkid> the second-order induction axiom; quantifies over sets/relations/predicates
21.06.18 10:44:41<stoopkid> "The axiom of induction is in second-order, since it quantifies over predicates (equivalently, sets of natural numbers rather than natural numbers), but it can be transformed into a first-order axiom schema of induction. Such a schema includes one axiom per predicate definable in the first-order language of Peano arithmetic, making it weaker than the second-order axiom."
21.06.18 10:58:36<stoopkid> ok so, in single-sorted FOL, you get to choose what set you're interpreting the object-symbols into, i.e. any choice of set can provide a "model" of the expression as long as you have an interpretation of the expression into that model
21.06.18 10:59:43<stoopkid> in henkin SOL, you take single-sorted FOL, and add a second-sort of objects, that will be interpreted as sets/relations on the set of objects that you choose to interpret the FOL object-symbols into
21.06.18 11:00:31<stoopkid> in henkin SOL, you're constrained to choosing the interpretation of the second (second-order) sort to be sets/relations of the objects in the first (first-order) sort
21.06.18 11:00:50<dmiles> Next when you add sorts that are entire propositions.. what do you have now?
21.06.18 11:01:03<stoopkid> let's come back to that
21.06.18 11:02:09<stoopkid> in henkin SOL, you're constrained to choosing the interpretation of the second (second-order) sort to be sets/relations of the objects in the first (first-order) sort, *but*, you're free to choose any subset of the set of all possible sets/relations
21.06.18 11:03:06<stoopkid> so for example
21.06.18 11:03:28<stoopkid> "exists x,y, forall R, R(x,y)" is henkin satisfiable
21.06.18 11:04:07<dmiles> that is a query?
21.06.18 11:04:35<stoopkid> it's just a statement
21.06.18 11:04:57<dmiles> no i mean "satifiable" i am asking if we were to ask for the truth of that
21.06.18 11:05:41<stoopkid> well, for any statement we can ask for the satisfiability (relative to some semantics for interpretation)
21.06.18 11:06:39<dmiles> are we able to ask for all bindings of x,y in which R holds?
21.06.18 11:06:50<stoopkid> so, here's a model that demonstrates the henkin-satisfiability of my statement: (objects = {0,1}, relations = {(0,1)})
21.06.18 11:07:03<dmiles> are we asking for "at least one binding" ?
21.06.18 11:07:21<stoopkid> not sure what you're asking
21.06.18 11:08:13<dmiles> ok you mean you are able to ask for ther truth of "exists x,y, forall R, R(x,y)"
21.06.18 11:08:26<dmiles> how might we ask that in english?
21.06.18 11:08:34<dmiles> and is the answer yes/no or ?
21.06.18 11:09:28<dmiles> or by "henkin satisfiable" do you mean it is a henkin theorem?
21.06.18 11:10:07<stoopkid> henkin-satisfiable := true in some henkin model
21.06.18 11:10:13<stoopkid> henkin-valid := true in all henkin models
21.06.18 11:11:13<dmiles> ok to henkin satisfiable means not already provably false in all henkin models?
21.06.18 11:11:40<stoopkid> not "provably", but semantically
21.06.18 11:12:44<stoopkid> and more specifically it should mean that we can actually demonstrate the henkin model that satisfies the statement
21.06.18 11:13:12<stoopkid> in the example above i gave a henkin model that satisfies my statement
21.06.18 11:13:51<stoopkid> choose x = 0, y = 1, then forall R in "relations", R(0,1)
21.06.18 11:14:13<stoopkid> because there's only the one relation in "relations": {(0,1)}
21.06.18 11:14:55<stoopkid> ok now let's look at a different possible Henkin model and see if it still satisfies my statement
21.06.18 11:17:10<stoopkid> (objects = {0,1}, relations = {{} U P(objects) U P^2(objects) U P^3(objects) U ...})
                 <stoopkid> so P(objects) represents the powerset of "objects", i.e. the set of all sets of members of "objects"
21.06.18 11:17:15<stoopkid> this is the same as the set of all unary relations on "objects"
21.06.18 11:18:11<stoopkid> so P(objects) is {{},{(0)},{(1)},{(0,1)}}
21.06.18 11:18:34*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
21.06.18 11:18:40<nilli> hey
21.06.18 11:18:43<stoopkid> P^2(objects) is the... "power binary relation"(?) of "objects", i.e. the set of all binary relations on members of "objects"
21.06.18 11:18:45<stoopkid> hey nilli
21.06.18 11:19:54<stoopkid> so P^2(objects) is {{},{(0,0)},{(0,1)},{(1,0)},{(1,1)},{(0,0),(0,1)}, {(0,0),(1,0)},{(0,0),(1,1)},...}
21.06.18 11:20:12<stoopkid> ok so
21.06.18 11:21:19<stoopkid> full-SOL-satisfiability asks for a henkin-model with specifically this choice for "relations", given a choice for "objects"
21.06.18 11:23:02<stoopkid> so, my statement is actually not full-SOL-satisfiable, because the quantification will always be over all these sets/relations, not some limited subset of them where i potentially force it to be true
21.06.18 11:23:43<stoopkid> if you look at the henkin model i provided that did satisfy it, the set of relations does not include all binary relations on {0,1}, it only includes one relation, that has only the  one component: {(0,1)}
21.06.18 11:27:08<stoopkid> so, that's the difference between henkin & full-SOL semantics; you always provide this tuple (Obj,Rel) where Obj is a set, and Rel is a set of sets/relations on Obj, but in full-SOL, the choice of sets/relations in Rel is already completely determined by Obj, i.e. Rel will contain all unary relations on Obj, all binary relations on Obj, all n-ary relations on Obj, etc..
21.06.18 11:27:22<stoopkid> (whether or not Obj is infinite or even uncountable)
21.06.18 11:27:50<dmiles> i have to run for 45mins.. but keep going
21.06.18 11:29:21<stoopkid> so, we know that full-SOL can express transitive closure (and actually apparently MSOL can too but i forget how)
21.06.18 11:30:34<stoopkid> i'm looking at an SOL formula for it right now
21.06.18 11:32:11<stoopkid> tc(R,R') := (all x,y, Rxy -> R'xy) ^ (all x,y,z R'xy -> R'yz -> R'xz) ^ (all R'', (all x,y, Rxy -> R''xy) ^ (all x,y,z, R''xy -> R'' yz -> R''xz) -> (all x,y, R'xy -> R''xy))
21.06.18 11:33:15<stoopkid> ok so... in henkin-SOL, this does not actually specify that R' is the transitive closure of R
21.06.18 11:33:56<stoopkid> we know it does in full SOL because we know the quantification "(all R'', ...)" is over *all* binary relations R''
21.06.18 11:34:11<stoopkid> not "all included" binary relations
21.06.18 11:35:56<stoopkid> so in Henkin semantics, tc(R,R') could hold when R' is not actually the transitive closure of R, but just the smallest transitive relation that contains R that you've included in the set of relations in your Henkin model
21.06.18 11:37:18<stoopkid> can Henkin semantics express transitive closure some other way? maybe, let's come back to that though
21.06.18 11:37:45<stoopkid> so we *know* that full-SOL can express transitive closure
21.06.18 11:38:12<stoopkid> we also *know* that full-SOL can express all of FOL, *trivially*
21.06.18 11:38:59<stoopkid> so if FOL fails to be able to express transitive closure, then full-SOL is *strictly more expressive* than FOL
21.06.18 11:40:45<stoopkid> alright, so further, we *know* that if compactness holds for FOL, then FOL would fail to be able to express transitive closure
21.06.18 11:42:41<stoopkid> we also *know* that since full-SOL can express transitive closure, along with all FOL statements, then full-SOL does not have the compactness property
21.06.18 11:57:55<nilli> hi stoopkid. I see you are in the middle of a conversation. .  just wanted to react to that 21.06.18 04:13:32<HMCa> yes, you really need 3+ for a stable majority consensus
21.06.18 12:00:50<nilli> yes HMCa you are right in terms of a stable majority consensus, but what I refer to as a game of 2 is a stage requited as a consensus to reach a context based consensus regarding history while keeping the identities defined
21.06.18 12:03:14<nilli> or rather to allow context based chain we need a way to create a unique line of context for each identities. and that game is of 2 .
21.06.18 12:07:45*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
21.06.18 12:09:31<stoopkid> dmiles: so, further, we *know* FOL has the compactness property assuming godel's completeness theorem holds
21.06.18 12:10:14<stoopkid> there's also apparently other ways to prove it: https://en.wikipedia.org/wiki/Compactness_theorem#Proofs
21.06.18 12:11:18<stoopkid> https://en.wikipedia.org/wiki/Original_proof_of_G%C3%B6del%27s_completeness_theorem
21.06.18 12:13:45<stoopkid> i'm not familiar with the proof of this
21.06.18 12:14:26<stoopkid> it would probably be better in theory to use the other (purely semantic) proofs of the compactness theorem in so that the result doesn't rely on properties of deduction systems
21.06.18 12:32:10<stoopkid> ok here's an example that should illustrate some of the difference between FOL and full-SOL directly
21.06.18 12:32:34<stoopkid> forall x,y, exists R, R(x,y)
21.06.18 12:34:42<stoopkid> this is a *valid* statement in second-order logic semantics, meaning, it's true under *all interpretations* in second-order logic semantics
21.06.18 12:34:52<stoopkid> contrast this with the first-order statement:
21.06.18 12:35:03<stoopkid> forall x,y, exists r, holds(r,x,y)
21.06.18 12:36:18<stoopkid> this is *not* a valid statement in first-order logic semantics
21.06.18 12:36:49<stoopkid> there exist "countermodels" to the statement; structures which don't satisfy the statement, i.e. are not models of the statement
21.06.18 12:39:42<stoopkid> consider the structure (objects = {0,1,2,"r"}, relations = {holds: {("r",0,1)}})
21.06.18 12:40:20<stoopkid> my statement says, "forall x,y, exists r, holds(r,x,y)"
21.06.18 12:41:03<stoopkid> so, choosing x = 0, y = 1, r = "r", it works, we lookup ("r",0,1) in holds and it's there
21.06.18 12:42:17<stoopkid> alright, what if we choose x = 0, y = 0 ? what can we choose for r?
21.06.18 12:43:17<stoopkid> nothing, there's no component of the holds relation with the form "holds(_,0,0)"
21.06.18 12:43:55<stoopkid> in full-second order logic, *all* relations on 'objects' would exist
21.06.18 12:45:51<stoopkid> so, this almost looks like henkin-models, but it's not really
21.06.18 12:46:32<stoopkid> henkin-models can be seen as a subset of FOL models
21.06.18 12:47:07<stoopkid> i.e. just like full-SOL like henkin-SOL but with more restrictions on the interpretations, henkin-SOL is like FOL but with more restrictions on the interpretations
21.06.18 12:48:38<stoopkid> so, you can syntactically translate any second-order logic statement to FOL:
21.06.18 12:49:40<stoopkid> "forall x,y, exists R, R(x,y)" --> "forall x,y, exists r, is-a-binary-relation-object(r) ^ holds(r,x,y)"
21.06.18 12:50:26<stoopkid> so i think that's where you're thinking, "FOL should be equally as expressive as SOL", but that's where you're getting tripped up with the semantics
21.06.18 12:51:08<stoopkid> you're *imposing* meaning on "is-a-binary-relation-object" and "holds", and FOL itself does not impose these meanings, and that's specifically where the difference is
21.06.18 12:51:56<stoopkid> "is-a-binary-relation-object" can be interpreted as *any* unary relation on the domain
21.06.18 12:52:06<stoopkid> "holds" can be interpreted as *any* ternary relation on the domain
21.06.18 12:52:31<stoopkid> not just the specific unary & ternary relations you're thinking of
21.06.18 12:52:55<stoopkid> for example:
21.06.18 12:53:15<stoopkid> i could interpret the domain of that sentence to be the natural numbers
21.06.18 12:53:31<stoopkid> i could interpret "is-a-binary-relation(r)" to mean "the natural number r is greater than or equal to 0"
21.06.18 12:53:45<stoopkid> i could interpret "holds(r,x,y)" to mean "x + y = r"
21.06.18 12:54:35<stoopkid> then actually my statement is true under this interpretation, even though it no longer seems to have anything to do with sets as we might've thought it should judging from the identifiers we used for the relations..
21.06.18 13:04:50<stoopkid> here's an interesting one:
21.06.18 13:05:18<stoopkid> exists s, forall x, R(s,x) <-> ~R(x,x)
21.06.18 13:46:26<HMCa> so much wrong
21.06.18 13:46:35<HMCa> 38 < dmiles> "exists x,y, forall R, R(x,y)"  is satifiable in full and not in Henken according to HMCa
21.06.18 13:46:38<HMCa> 39 < stoopkid> got a quote on that? :)
21.06.18 13:46:41<HMCa> 39 < stoopkid> what about the empty relation?
21.06.18 13:46:43<HMCa> 39 < dmiles> it was some time in the last 2 years
21.06.18 13:46:48<HMCa> plz dont quote me backwards
21.06.18 13:47:10<HMCa> :46 < dmiles> this was something that HMCa made up to sell one away from FOL
                 <HMCa> :46 < stoopkid> lol what
21.06.18 13:47:11<HMCa> :46 < stoopkid> even if your sentiment is that this FOL vs fullSOL distinction is made up to sell one away from FOL, HMCa's certainly not the one who made it up XD
21.06.18 13:47:17<HMCa> "lol wut" is right
21.06.18 13:47:35<HMCa> plz also don't put words in my mouth that I never said at all
21.06.18 13:48:06<HMCa> and I am not here to sell anyone on anything... if I were i would be taking some of the monies people always seem to want to be pushing on me
21.06.18 13:48:50<HMCa> 51 < stoopkid> well, we have the definitions of henkin vs. full SOL so we can like.. verify these claims, not like.. take HMCa's word on it :P
21.06.18 13:49:14<HMCa> plz take me word on nothing except my claim that the construct can work. XD
21.06.18 13:54:04<stoopkid> heya
21.06.18 13:55:36<HMCa> hi
21.06.18 13:57:51<HMCa> @nilli: I read your document and comments here...
21.06.18 13:58:23<HMCa> what you seem to be working toward is what I might call an "external logic" about the construct
21.06.18 13:58:58<HMCa> meaning a framework to rationalize about the possible behaviors of the network as a whole at any given moment
21.06.18 13:59:48<HMCa> while such a framework is possibly valuable, particularly for users to reason about how they might best distribute their resource donation across contexts...
21.06.18 14:00:12<HMCa> it is important to understand that this is *not* the sort of framework that we *ever* discuss here!
21.06.18 14:00:33<HMCa> when we talk about the logic of the construct, we mean an "internal logic"
21.06.18 14:01:06<HMCa> meaning a framework to rationalize about the behavior of a single node in a single context at a specific single moment
21.06.18 14:01:57<HMCa> our logic makes no attempt to infer or rationalize any compound behavior arising from interactions of multiple nodes...
21.06.18 14:02:49<HMCa> and further, we would never even attempt such, as any such framework must arise from assumptions of multiple human behaviors, and such frameworks will always be inconsistent
21.06.18 14:03:43<HMCa> the only assumption about human behaviors that we will admit is "most people will be rational most of the time, and otherwise will do random and unexpected things"
21.06.18 14:04:07<HMCa> (which is not even so useful to try to infer from, imo)
21.06.18 14:04:35<HMCa> this is not to say that this line of work is uninteresting, incorrect, or should not be followed...
21.06.18 14:05:24<HMCa> it is only to say that it is not what *we* find interesting and study here, not the sort of assumptions we will make, and not the sort of framework that we persue at this (pre-genesis) time.
21.06.18 14:06:17<HMCa> we stay focused on getting the internals correct, and leave reasoning/speculating about the externalities to "the users" in the future
21.06.18 14:20:33<HMCa> ok that is enough of my ranting for now, let's get back to talking about fol/sol/hol
21.06.18 14:21:28<HMCa> it is pretty clear, imo, that henkin is indeed "between" fol and full sol... I understand that this is sometimes disputed but I've yet to see a convincing argument
21.06.18 14:40:15<HMCa> also, imo, the complexity hierarchy serves as a convincing argument that it is indeed "between"
21.06.18 14:41:16<HMCa> (even though this argument admittedly becomes questionable once we position the HOLs into it, HEH!)
21.06.18 14:42:22<HMCa> (considering the HOLs does certainly make it seem like the henkin and non-henkin logics should be somehow "beside" eachother, at each distinct order, indeed.)
21.06.18 16:08:47<stoopkid> it's not clear to me yet
21.06.18 16:15:07<stoopkid> we know that FOL <= Henkin, not sure whether FOL == Henkin or FOL < Henkin
21.06.18 16:15:36<stoopkid> we know that FOL <= SOL, assuming that compactness holds, then we also know that FOL < SOL, strictly
21.06.18 16:16:16<stoopkid> not sure about Henkin vs. SOL
21.06.18 16:47:11-SaslServ- koom!~sirdancea@89.24.37.163 has just authenticated as you (sirdancealot)
21.06.18 16:47:17*** Join: koom (~sirdancea@89.24.37.163, sirdancealot: koo5)
22.06.18 00:21:26<HMCa> redfish64: so... how did it go?
22.06.18 00:25:45<redfish64> Very well, actually. Only 7 people showed up but they all clapped at the end, and were very interested in the idea.
22.06.18 00:26:01<redfish64> Unfortunately they didn't know much more about type theory than I did
22.06.18 00:26:54<HMCa> they can all come learn cubicaltt/redprl with us! XD
22.06.18 00:29:56<HMCa> did you work in any of my notes last minute?
22.06.18 00:29:57<HMCa> heh
22.06.18 00:30:13<HMCa> I know it was kind of a lot for day-before revision...
22.06.18 00:30:39<HMCa> also if there is video or anything I'd love to see it!
22.06.18 00:46:39<redfish64> I wasn't able to do much about the sub-chains besides handwave, but I did correct the history and a bunch of small stuff, like how a PoW chain decides on the most authentic branch
22.06.18 00:47:45<redfish64> There is no video. I tried to make one with my phone, but it didn't record, because I stupidly turned off the screen, not realising that would stop the recording
                 <HMCa> cool
22.06.18 00:47:59<HMCa> and uncool, resp.
22.06.18 00:48:04<HMCa> XD
22.06.18 00:48:15<HMCa> all well, next time :-)
22.06.18 00:49:47<redfish64> I gave the organizer some links along with the name of this channel, and he will post it to the meetup comments section, so maybe someone from there might stop by
22.06.18 00:50:35<redfish64> Hopefully, I really want to get more people involved, which was the other major goal besides having some more expert eyes on the project
22.06.18 00:50:43* HMCa nods
22.06.18 00:50:57<HMCa> hopefully
22.06.18 00:55:23<redfish64> It did go pretty well though. The whole thing lasted about 3 hours, and my presentation only went for about an hour, so the rest was questions
22.06.18 00:55:56<redfish64> which is a positive sign
22.06.18 00:59:48<HMCa> wow, yah that is very cool...
22.06.18 01:00:24<HMCa> clearly got some people thinking, at least!
22.06.18 01:11:12<HMCa> lol, youtube livestreamers got themselves arrested for livestreaming themselves sneaking into a youtube livestreamer convention
22.06.18 01:11:23<HMCa> now that is meta.
22.06.18 01:14:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kaqranarspepwnhu) left #AutoNomic: Quit: Connection closed for inactivity
22.06.18 03:31:45*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
22.06.18 03:35:18<nilli> you are wrong HMCa :) on one fundamental point which I am yet to touch precisely. So since I was not able to describe it well enough so far you are still right from your perspective. from where you stand now
22.06.18 03:39:43<HMCa> wrong about what, exactly?
22.06.18 03:44:10<nilli> it being an internal logic!! yes in terms of how we define logic in the clasic way it is external but if you will not find a way to make it be internal you will not get a context based stable chain.
22.06.18 03:44:42<nilli> in not being
22.06.18 03:45:21<nilli> logic is a way do deal with context right?
22.06.18 03:46:04<nilli> it is an organizer of  context, right
22.06.18 03:48:11<HMCa> well, which logic do you mean? :-)
22.06.18 03:48:13<nilli> but the context is not centrelized
22.06.18 03:49:57<nilli> so the logic to organize it have to include a decentralized mechanism
22.06.18 03:50:22<nilli> we do not a assume a "mechanism" as part of a logic
22.06.18 03:50:33<nilli> but it is
22.06.18 03:50:56<HMCa> let's be precise...
22.06.18 03:51:03<nilli> QM is the best example of that situation
22.06.18 03:51:29<HMCa> in the logic we propose for our purposes, "context" simply means an ordered set of definitions
22.06.18 03:51:41<nilli> let be as precise as we can...that is why I keep you :)
22.06.18 03:52:20<HMCa> so I would say that contexts organize the logic, not the other way around
22.06.18 03:53:03<nilli> "ordered " is the key word, yes.
22.06.18 03:53:13<nilli> order
22.06.18 03:53:19<nilli> lol
22.06.18 03:54:01<nilli> order vs ordered ordered as a centralized form of order
22.06.18 03:54:10<HMCa> ("ordered" here meaning "sequenced", not to be confused with the "order of the logic" as in fol/sol/hol)
22.06.18 03:54:47<HMCa> I only have ~5 min before I'll have to go, btw
22.06.18 03:56:53<HMCa> anway, wrt internal vs external - it is pretty easy to discern... if the definitions describe theory from the perspective of the operation of a node then it is internal, if it defines from the perspective of a user (or outside observer) it is external
22.06.18 03:57:17<HMCa> iow an internal logic "instructs the core as to how to behave"
22.06.18 03:57:58<HMCa> and an external logic reasons about outcomes of composite behaviors from transaction
22.06.18 03:59:44<nilli> I cant do it in 5 minutes :)  but will use the 5 minuts
22.06.18 04:02:14<HMCa> well, now we are down to -2 minutes
22.06.18 04:02:22<HMCa> so... another time :-\
22.06.18 04:02:48<nilli> the sequence is the external  cording to your definition
22.06.18 04:03:04<nilli> according
22.06.18 04:03:20<nilli> stay a bit longer
22.06.18 04:03:31<nilli> or are they going to kill you?
22.06.18 04:04:52<nilli> I say that the logic define the sequence is internal
22.06.18 04:07:29<nilli> each individual my assume the fol/sol/hol logic for themselves,but the system have to deal with each having their own order fol/sol/hol and reconcile that to one such order
22.06.18 04:08:39<nilli> for that it need time as an organizer and a time stamping logic to form the time line
22.06.18 04:09:34<nilli> ok I guess that you are gone...
22.06.18 04:16:39<nilli> ....well probably a waste of your time anyway though took only 6 minutes
22.06.18 05:56:59*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
22.06.18 06:52:47-SaslServ- kook!~sirdancea@37-48-5-180.tmcz.cz has just authenticated as you (sirdancealot)
22.06.18 06:52:53*** Join: kook (~sirdancea@37-48-5-180.tmcz.cz, sirdancealot: koo5)
22.06.18 06:55:32*** Quit: koom (~sirdancea@89.24.37.163) left #AutoNomic: Ping timeout: 256 seconds
22.06.18 07:15:34*** Quit: kook (~sirdancea@37-48-5-180.tmcz.cz) left #AutoNomic: Ping timeout: 268 seconds
22.06.18 07:40:50*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yvhchsxybcfqpejv, stoopkid: stoopkid)
22.06.18 08:19:12*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
22.06.18 08:19:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
22.06.18 08:25:29<stoopkid> redfish64: glad to hear your talk went well
22.06.18 17:04:55<editable-koo>thumbs up
23.06.18 01:42:05<HMCa> @nilli:
23.06.18 01:42:28<HMCa> 07 < nilli> each individual
23.06.18 01:43:15<HMCa> once you introduce a concept of an "individual" into your framework, you framework necessarily becomes an external logic
23.06.18 01:43:39<HMCa> because "individuals" are something external to the core
23.06.18 01:44:14<HMCa> once you introduce any concept which is not a part of core, your framework becomes external
23.06.18 01:45:03<HMCa> this is what we mean with the terminology of "internal/external"... it is relative to the node client itself ("core")
23.06.18 01:47:52<HMCa> we similarly can speak of the "internal logic of an x86 cpu"... which is how the processor's state transitions are implemented... or any number of "external logics" which would be how we would reason about things like ui/ux, peripherals, networked systems, connected devices, etc
23.06.18 01:49:57<HMCa> many (not all) of these external frameworks might embed some/all of x86's internal logic... but there is only the one internal logic ox x86 and *anything* we were to add to that framework would be external, "about (at least in part) other things that are not the x86's own behavior"
23.06.18 01:51:20<HMCa> *of
23.06.18 03:49:10*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
23.06.18 03:50:58<nilli> hey HNCa. I guess when you are building something naturally there is an "external" to it and i see how your argument if valid
23.06.18 03:52:48<nilli> but if you are right  and what I try to say is wrong then you just proved God :)
23.06.18 03:54:47<nilli> I will not argue that for what you are trying to do in terms of building a working system there is internal/external logic but....
23.06.18 03:57:21<nilli> but the IDEA that you try to build that of a decentralized rule making consensus  machine requires a dynamic form of internal/external.
23.06.18 04:00:08<nilli> but that might take long long time to realize. and may require a few working systems on the way.
23.06.18 04:05:07<nilli> 21.06.18 14:00:33<HMCa> when we talk about the logic of the construct, we mean an "internal logic"
23.06.18 04:08:00<nilli> Im talking about moving the line between "internal" and "external". build a system that can do that. and I think that a rule making consensus machine is the only mechanism that can do that
23.06.18 04:13:44<nilli> I think that maybe the problem to define the exact function of that logic start with the definition of the "user"
23.06.18 04:16:54<nilli> when we divide the world to a program and a user  we in fact assume a theoretical existence of the program that come to life by a user who choose run it.
23.06.18 04:17:06<nilli> and then ofc the program has its internal logic
23.06.18 04:18:59<nilli> however the only way for the program to be expressed is by being activated
23.06.18 04:21:19<nilli> So lets assume for a moment and activation status that is eternal. and can only be observed by a user not activated. i
23.06.18 04:26:45<nilli> Then a user can join the "party" or just watch it. whichever way the program dont change. while the effect of the program in the world changes depending on the users ( both types of users)
23.06.18 04:29:55<nilli> now on autonomic you say that you want the users to change the rules
23.06.18 04:32:01<HMCa> :08 < nilli> Im talking about moving the line between "internal" and "external".
23.06.18 04:32:07<nilli> the question is how far can the user go in terms of changing the rules
23.06.18 04:34:34<HMCa> you can't really move that line... you can make a different machine with a different internal logic, but then you really just have 2 lines... distinct internal logics...
23.06.18 04:35:02<HMCa> < nilli> I think that maybe the problem to define the exact function of that logic start with the definition of the "user"
23.06.18 04:35:18<HMCa> any such logic would be external from the start
23.06.18 04:35:55<nilli> hey. HMCa.
23.06.18 04:36:17<HMCa> unless you can put the user literally into the function of the machine, which:
23.06.18 04:36:22<HMCa> a) you just can't
23.06.18 04:36:52<HMCa> b) even if you could, you then would not possibly be able to assert the machine as consistent
23.06.18 04:37:18<nilli> I think that what I try to say it that I can.
23.06.18 04:37:32<HMCa> c) doing so would contradict any reasonable meaning of "user" in the first place
23.06.18 04:39:10<nilli> I think that our problem to agree have to do with some basic definitions that is part of the semantics of the field
23.06.18 04:40:34<nilli> I think that the term Turing machine is where we need to start. who would you define that?
23.06.18 04:41:46<nilli> A Turing machine is a mathematical model of computation that defines an abstract machine (wiki)
23.06.18 04:43:17<nilli> is turing machine a logic system?
23.06.18 04:44:18<HMCa> what do you mean by "logic system"?
23.06.18 04:46:01<nilli> ok maybe let start with system and logic. when you say logic do you see it as a system?
23.06.18 04:46:13<HMCa> when I hear "logic system" I assume it implies a method of resolution, which is a behavior some turing machines can exhibit, but is not what a turing machine "is" implicitly
23.06.18 04:47:38<HMCa> "logic" as a word on its' own is ambiguous, dependong upon the context of use it could refer to any of several things... a framework, an instance of a theory, a method of resolution, etc...
23.06.18 04:47:49<nilli> for me system means a closed framework in which the "object" (as anything that is part of it) relate to one another by being part of that closed setup
23.06.18 04:48:31<nilli> thus when I say logic system I mean that that "objects" are logic functions
23.06.18 04:48:37<HMCa> this is why we'll usually qualify the word if it is not clear from context, for example you'll often hear us refer to "logical frameworks" or "logical resolution" etc
23.06.18 04:49:58<HMCa> "the logic of x86"  "type theoretic logic" "description logics" "philosophical logic" "digital logic"
23.06.18 04:50:01<HMCa> etc etc etc
23.06.18 04:50:23<nilli> ok let go to a turing machine since it is very concrete and will resolve all our problems :)
                 <HMCa> these are all distinct meanings for the one word "logic"
23.06.18 04:51:12<nilli> can you describe it to me in your choice of words
23.06.18 04:51:21<HMCa> a turing machine?
23.06.18 04:51:29<nilli> yes
23.06.18 04:52:10<HMCa> which one? :-)
23.06.18 04:55:20<nilli> you decide how to describe assuming i know nothing. so if there is different ones chose how to deal with it
23.06.18 04:55:21<HMCa> a "minimal" turing machine consists of a processing element with a single state register, which interfaces with an infinite tape of memory cells, and which has a fixed set of tuples of the form <s,v,s2,v2,d> where s is the current register state value, v is the tape value at the current tape position, s2 is the next state register value, v2 is the value to leave written at the current tape position, and d
23.06.18 04:55:27<HMCa> is the direction to move the tape next.
23.06.18 04:57:31<HMCa> ofc any such machine is hypothetical, can not actually be built.
23.06.18 04:58:11<nilli> you actualy define a physical apparatus, not just a logic. (even if you say it cant be build)
23.06.18 05:00:42<HMCa> you asked me to describe a turing machine, so I did
23.06.18 05:02:15<HMCa> any machine, constructable or otherwise, is necessarily a "physical apparatus"... maybe you meant to ask something different?
23.06.18 05:04:18<nilli> I asked exactly that and you answers in correctly (:
23.06.18 05:05:17<HMCa> maybe I did not answer in a way that was satisfying to you, but my answer was not at all incorrect, per the standard/common accepted definitions
23.06.18 05:06:28<HMCa> in fact the particular machine model that i described is commonly called "the standard 5-tuple model"
23.06.18 05:09:16<HMCa> ofc there are (inf) many other models of the same machine which I could've chosen... like the 4-tuple model, or the cellular model, or the riemannian surface folder model, or the spiral stepping model, or...
23.06.18 05:10:14<nilli> the details of the machine might make a difference once we go deeper into the definitions but i want first to touch to some fundamental  related concepts at first
23.06.18 05:10:16<HMCa> butthe standard 5-tuple model is both the shortest description (i'm lazy) and the standard one most commonly referred to by others (who are probably also lazy). :-)
23.06.18 05:10:40<HMCa> all of these turing machine models are equivalent
23.06.18 05:10:59<HMCa> all just various descriptions of equivalent machines
23.06.18 05:12:19<nilli> so now lets move into Gödel's incompleteness theorems
23.06.18 05:12:22<HMCa> the 5-tuple model is standard *because* it is shortest to describe, easiest to understand, and has the least complexity to reason about
23.06.18 05:13:12<nilli> and how is related to Turing machine
23.06.18 05:14:51<nilli> can you describe it . the crucial points
23.06.18 05:15:01<HMCa> "it"?
23.06.18 05:15:34<HMCa> there are two, and neither relates directly to turing machines at all...
23.06.18 05:15:44<nilli> :) the "it "they form in terms of concept
23.06.18 05:15:57<HMCa> they form two distinct concepts
23.06.18 05:16:58<nilli> do they show some dependency? as one can define or prove the other
23.06.18 05:17:10<HMCa> not sure what you ask
23.06.18 05:17:23* HMCa has about 15min remaining btw
23.06.18 05:17:34<HMCa> after that I will lose connectivity for awhile
23.06.18 05:17:58<nilli> ok :)
23.06.18 05:20:14<HMCa> and no, the theorems are each valid in isolation
23.06.18 05:20:24<HMCa> (if that is what you asked, heh)
23.06.18 05:20:41<nilli> these two "ideas" share some "experiences" that we can describe and are useful to understand one another?
23.06.18 05:21:02<nilli> or only one using the other
23.06.18 05:22:27<nilli> in your construction both matters right?
23.06.18 05:23:09<HMCa> again, I'm not sure what you really ask... with either question.
23.06.18 05:23:17<HMCa> can you be more precise?
23.06.18 05:24:41<nilli> ok lets try this: in turing machine the logic is part of the machine which defines it ?
23.06.18 05:25:18<HMCa> again, I must ask what you mean by "the logic"?
23.06.18 05:25:49<HMCa> well, and, also again I must ask what ypu mean by the whole question... too.
23.06.18 05:25:54<HMCa> *you
23.06.18 05:26:20<nilli> some argue that truing machine is logic
23.06.18 05:26:47<HMCa> any given turing machine will have one interbal logic and inf many possible external logics about it
23.06.18 05:27:06<HMCa> *internal
23.06.18 05:27:29<nilli> what is logic?
23.06.18 05:28:00<nilli> rules?
23.06.18 05:28:01<HMCa> again you use the ambiguous word "logic" without giving any context
23.06.18 05:28:31<nilli> "logic" without giving any context .....that exactly
23.06.18 05:29:01<HMCa> without any context it is just an ambiguity :-)
23.06.18 05:29:27<HMCa> do you mean "what is a logical framework" or "what is logical resolution" or "what is philosophical logic" or "what is a particularly encoded logic" or... what?
23.06.18 05:30:51<HMCa> I could say "what is the field"... and this is just as meaningless of a question... without clarifying *what* field
23.06.18 05:31:11<nilli> I need to context to define anything including logic
23.06.18 05:31:49<nilli> and that  context can be a physical apparatus
23.06.18 05:32:00<nilli> I need context
23.06.18 05:32:01<HMCa> like "field" the word "logic" is what we call an "overloaded" term... it could have any of many different meanings
23.06.18 05:33:29<HMCa> depending upon how it is used... and your usage here is ambiguous
23.06.18 05:33:32<nilli> to define logic I must use logic. thus there is not way to have logic as not context based
23.06.18 05:33:48<HMCa> ... huh? :-)
23.06.18 05:34:20<HMCa> simply specify whih usage you intend
23.06.18 05:34:59<HMCa> tell me if you mean to ask about a framework, a resolution method, a theory, whichever meaning of the word you mean...
23.06.18 05:35:23<HMCa> *which
23.06.18 05:36:39<nilli> you see when I connect between the definition of an idea to a concert manifestation it can be abstracted then to a general form . not the other way around
23.06.18 05:37:04<HMCa> again, I have to go with.... "huh?"
23.06.18 05:37:35<HMCa> you need to tell me which idea you even refer to when you say "logic"...
23.06.18 05:37:46<nilli> what I say is that you cant talk about logic as not being part of a context before is defined first by some context
23.06.18 05:38:04<nilli> im looking for that first step
23.06.18 05:38:35<HMCa> ok, well, I gtg... hopefully later you can clarify by disambiguating. :-_
23.06.18 05:38:37<HMCa> :-)
23.06.18 05:39:32<nilli> ok I also need to go soon. ... will play with you later
23.06.18 05:40:09<HMCa> maybe research what the different possible meanings of the word there are (what is framework, what is resolution, what is digital logic, what is description, what is philosophy, etc etc)
23.06.18 05:40:28<HMCa> and pick which you mean to ask about.
23.06.18 05:42:01<nilli> actualy that define it quiet  well : "play with you" . are we  playing a game together or are you the game which I play
23.06.18 05:44:47<nilli> :) will do
23.06.18 05:49:39*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
23.06.18 09:14:13<stoopkid> @ nilli: if you're interested in the relationship between Godel's incompleteness and turing machines, start with quines
23.06.18 12:01:59*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
23.06.18 12:03:05<nilli> hi.  so let me try it one more time and of I cant make sense to you HMCa then it's worng
23.06.18 12:04:11<nilli> wrong in terms being the right thing for a specific state
23.06.18 12:06:21<nilli> just to clarify everything that you have expressed as what you do on autonomic make sense and is true unless that one point I tried to express is applicable.
23.06.18 12:07:23<nilli> since as I  I see it , it is some very very fundamental concept.
23.06.18 12:07:28<nilli> so back to that :
23.06.18 12:07:34<nilli> [12:42] <nilli> actualy that define it quiet  well : "play with you" . are we  playing a game together or are you the game which I play
23.06.18 12:08:00<nilli> say we talk about a game and the game is the logic
23.06.18 12:08:47<nilli> that logic can be expressed as board game or a machine such as a computer
23.06.18 12:11:09<nilli> but....what if the game I play is you?
23.06.18 12:12:29<nilli> you may ask me what is the game then? and ill say that at each round you define it by being your logic.
23.06.18 12:13:07<nilli> now let take it one step furture
23.06.18 12:14:32<nilli> what is the game when I say that "I play you" and we play that together
23.06.18 12:15:37<nilli> it means that you are aware of you being my game (other then being who you are to yourself)
23.06.18 12:19:48<nilli> *[19:14] <nilli> what is the game when I say that "I play you" .... let me keep it "play with you" not to confused things too much
23.06.18 12:21:34<nilli> now let me ask you the next question. can we play with each other without a game board or other medium of a game?
23.06.18 12:22:34<nilli> I would say yes and that such game is what we usually refer to as a "relationship"
23.06.18 12:23:18<nilli> A relationship is logic incorporated in the players that are the medium of the game itself.
23.06.18 12:24:27<nilli> that is what I see autonomic as in term of automated machine
23.06.18 12:25:51<nilli> it frame the logic of the game  within the participants of the game - its a relationship machine
23.06.18 12:29:28<nilli> such that will allow us to reconcile all the connections between any two players in our network in such way that the game on all its context (each players personal context history *identity)* will be able to  move on to the next block.
23.06.18 12:32:39<nilli> that is a mammoth task but is possible if we allow for an extra phase to take place in our block propagation.
23.06.18 12:36:47<nilli> however at this point trying to describe that is pointless. if we do not agree on the definition of logic as *relationship*, like I have  explained here, as a possible expression of logic, then we lose the common ground and we should stop here.
23.06.18 12:38:22<nilli> ...awaiting your respond :)
23.06.18 12:42:25<nilli> * actualy I should correct myself , that is not how I see autonomic since I understand that you see it as nomic game. but it is how I see what you call in a more general term the "construct"
23.06.18 12:47:19*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
23.06.18 13:57:18<stoopkid> @ nilli would you consider mutually recursive definitions to constitute a "relationship" between the things being defined?
23.06.18 15:43:52<stoopkid> dmiles: one way to look at the difference between FOL and SOL and henkin, it's similar to the difference between model theory and finite model theory
23.06.18 15:45:49<stoopkid> a statement that's only satisfiable on infinite structures in regular model theory becomes unsatisfiable when we restrict the possible structures to be finite (in the metatheory)
23.06.18 15:46:37<stoopkid> a statement that's true about all finite structures, but false about some infinite structure, is valid in finite model theory but not valid in regular model theory
23.06.18 15:47:31<stoopkid> you can also look at, for example, monadic second order logic "over words"
23.06.18 15:47:43<dmiles> what is it meant by finite vs infinate structures?
23.06.18 15:50:12<stoopkid> one way to define finiteness of a collection is the ability to put every element of the collection into a List
23.06.18 15:50:51<stoopkid> one way to define the infiniteness of a collection is the existence of an injective function from that collection into a proper subset of itself
23.06.18 15:51:03<stoopkid> like with hilbert's grand hotel
23.06.18 15:52:37<stoopkid> not-finite according to the first sense may or may not be equivalent to infinite in the second sense, and vice versa, not sure there
23.06.18 15:53:27<stoopkid> (also might depend on whether we allow ourselves to use classical / non-constructive axioms or not)
23.06.18 16:01:07<dmiles> ok.. what you say makes sense
23.06.18 16:01:29<dmiles> in logicmoo/cyc we have structures that are not fully "closed" .. one example would be one like  "aSetOfFn(female,_)"  the underscore means that the value is of some unknown
23.06.18 16:02:09<dmiles> sorry i meant:   iSetOfSize(female,_)
23.06.18 16:02:31<dmiles> sorry i meant:   iSetOfSizeFn(female,_)  :)
23.06.18 16:03:16<dmiles> though i wonder how differnt from iSetOfSizeFn(feamle,inf)
23.06.18 16:04:19<dmiles> when the second argument is "open" that means to me that it is in this case a set of zero,1,N or inf
23.06.18 16:04:34<stoopkid> ah, well, that's not a "structure" in the model-theoretic sense that i'm using it here.. the structures are the "worlds" that you can semantically interpret these statements into
23.06.18 16:04:56<dmiles> but if i pretend that i wont let 'inf' in.. i wonder if the structure is now finite
23.06.18 16:05:34<dmiles> iSetOfSizeFn(female,_)  is a world cretion instrument
23.06.18 16:05:48<dmiles> is *world creating
23.06.18 16:06:34<dmiles> what it does is opens the system up to the possiblity of any infinate number of infernces
23.06.18 16:07:42<dmiles> what i mean is it creates no limit to the number of ways you can imagine worlds and still be logically correct
23.06.18 16:09:12<dmiles> ok then you are refering then to a structure like    [joe|_]  where that is a list of unknown size
23.06.18 16:09:35<dmiles> well we know that is has one or more elements
23.06.18 16:10:50<dmiles>  iExtensionalSetFn(female) that returns an infinate list as well
23.06.18 16:10:57<dmiles> well infinate set
23.06.18 16:11:07<dmiles> but only protentually
23.06.18 16:12:12<dmiles> i think what i dont understand is if this is about infinate or about unknonws
23.06.18 16:13:14<stoopkid> nothing i'm saying is really "about" infinite vs. finite, i'm just using that as an example of how logicians can  seemingly change logic without changing any of its syntax
                 <dmiles> for any world there should be both a number of infinate parents and infinate child worlds
23.06.18 16:16:09<stoopkid> mm
23.06.18 16:16:16<stoopkid> idk what you mean by that :)
23.06.18 16:21:00<stoopkid> as a first approximation, worlds == edge-labeled, node-labeled, directed/oriented multi-hyper-graphs
23.06.18 16:22:11<dmiles> what i mena is if one is trying to use deductive logic in order to ensure their system has a full underststanding of a model.. there are many parts of that model that are not going to be knowable.. so the usual case is to divide the world into its knoables and lack of knwables.. which eventualyl create an "area" that is like a polagon constrained by the rules
23.06.18 16:22:50<dmiles> that is more like a polygan shaded in than a series of dots
23.06.18 16:23:36<dmiles> example  X<1 & X > -1
23.06.18 16:23:56<dmiles> there are infinate number of states for X
23.06.18 16:24:43<stoopkid> sure
23.06.18 16:25:04<dmiles> every one of these Xs must have its own world model
23.06.18 16:26:00<dmiles> so this is what i was assuming to be infinate
23.06.18 16:26:37<stoopkid> sort of
23.06.18 16:26:52<stoopkid> so, we distinguish between "structures" and "models" and "interpretations"
23.06.18 16:27:27<stoopkid> structures are basically those graphs, like... you can imagine the Nats as a graph
23.06.18 16:27:43<stoopkid> independent of any statements in a syntax of formal logic
23.06.18 16:28:24<stoopkid> an interpretation of a statement in a particular syntax of formal logic is a (metatheoretic) way to map the symbols of the statement into some structure
23.06.18 16:29:28<stoopkid> a model of the statement is a structure that for which you have an interpretation of the statement into that structure
23.06.18 16:30:51<stoopkid> so... your statement " X<1 & X > -1" has an interpretation into the structure "Nat"
23.06.18 16:31:56<stoopkid> so Nat is a model
23.06.18 16:34:25<stoopkid> there's also an interpretation in another graph: {objects = {A,B,C}, "<" = {(A,B),(B,C)}, ">" = {(C,B),(B,A)}} with "-1" mapping to A, "X" mapping to B, and "1" mapping to C
23.06.18 16:34:57<stoopkid> so this graph is also a structure that is a model of your statement, under standard FOL semantics
23.06.18 16:37:21<stoopkid> if the structure we used to interpret your statement into was instead the reals or the rationals, with the standard interpretations of "1", "-1", "<", and ">", then we would indeed have infinitely many distinct ways to satisfy the statement with an interpretation into these structures
23.06.18 16:38:01<stoopkid> with an interpretation of X ** into these structures
23.06.18 16:41:35<stoopkid> FOL semantics themselves don't choose any particular structure or way to interpret your symbols (except the logical constants true & false, boolean operators & quantifiers), except for that constant symbols need to map to objects in the structure, and n-ary relation symbols need to map to n-ary relations on the structure or, equivalently, n-hyper-edges on the structure
23.06.18 16:43:02<stoopkid> once you fix any particular interpretation into place beyond that, then you're moving outside the scope of "plain FOL" and academic results about plain FOL may or may not continue to hold in your restricted semantics
23.06.18 17:18:25<stoopkid> https://en.wikipedia.org/wiki/First-order_logic#Many-sorted_logic
23.06.18 17:19:26<stoopkid> alright, so, if we agree with this, then we can see that many-sorted logic with any finite number of sorts is equivalent to first-order logic
23.06.18 17:20:10<stoopkid> well, any number of sorts >= 1 :)
23.06.18 17:22:28<stoopkid> you can trivially embed FOL into n-sorted FOL with n > 1; the restriction of the n-sorted FOL to formulas that just use one of the sorts provides the trivial embedding; and n-sorted FOL with n > 1 can be embedded into FOL by adding unary-relation symbols that represent the sorts and adding axioms as specified on that wiki page
23.06.18 17:22:49<stoopkid> the method described on that wiki page would fail when you have an infinite number of sorts
23.06.18 17:25:06<stoopkid> and you actually need an infinite number of sorts to properly model full n-ary second-order quantification
23.06.18 17:41:26<stoopkid> actually i think we can prove by compactness that there actually isn't any way at all to reduce an infinitely-many-sorted FOL to single-sorted FOL in this fashion
23.06.18 17:43:59<dmiles> i am not sure i agree with that
23.06.18 17:44:15<stoopkid> with which part?
23.06.18 17:45:22<dmiles> that there " isn't any way at all to reduce an infinitely-many-sorted FOL into single/non-sorted FOL"
23.06.18 17:45:38<dmiles> maybe you meant "in this fasion"
23.06.18 17:45:58<stoopkid> right, in that particular fashion
23.06.18 17:46:13<stoopkid> and assuming that compactness is actually true :)
23.06.18 17:47:45<dmiles> do you agree with my defiantion of compatness the otehr week?  compactness is when we can "at least order terms by some sort of order" especially if we can tell when terms are differnt from each otehr
23.06.18 17:48:36<dmiles> i mean such as along a  greater than sign
23.06.18 17:49:05<stoopkid> compactness == "a set of formulas is satisfiable (has a model) if and only if every finite subset of it is satisfiable"
23.06.18 17:50:53<dmiles> compactness+countable = "we supply two relations that can be used to tell .. equal-objects(A,B) and object1-after-object2(A,B)"
23.06.18 17:51:57<dmiles> let me revise that
23.06.18 17:52:24<stoopkid> compactness + countable == "a countable set of formulas is satisfiable (has a model) if and only if every finite subset of it is satisfiable"
23.06.18 17:52:32<dmiles> compactness+countable = "we supply two relations that can be used to tell .. unifiably-same-objects(A,B) and object1-after-object2(A,B)"
23.06.18 17:53:02<dmiles> if one provides what i said you can then ensure ""a countable set of formulas is satisfiable (has a model) "
23.06.18 17:53:30<stoopkid> if one ensures what i said have they necessarily provided what you said?
23.06.18 17:54:10<dmiles> well sort of.. hrrm i treally think compactness is somethning that cannot be seen until as you said things or on a model
23.06.18 17:54:35<dmiles> how that model is provided can be used to do SOL
23.06.18 17:55:04<stoopkid> not sure what you mean
23.06.18 17:55:11<stoopkid> anyway let's back up a bit
23.06.18 17:55:38<dmiles> meaning we can actualyl put any kind of  object,relation,context,axiomatic_system's objects into a model
23.06.18 17:56:04<dmiles> as long as our model doesnt violate our two relations
23.06.18 17:56:39<stoopkid> so do you agree that finitely-many-sorted FOL and single-sorted FOL are equivalently expressive, according to the reduction shown on that wiki page?
23.06.18 17:57:32<dmiles>  finitely-many-sorted FOL is very much less expressive than single-sorted FOL
23.06.18 17:57:42<stoopkid> less?
23.06.18 17:58:24<dmiles>  single-sorted FOL can express anyyhting if used (when "used") axiomatically
23.06.18 17:58:39<stoopkid> that doesn't mean anything
                 <dmiles> initely-many-sorted FOL  has placed contraints on sorts
23.06.18 17:59:20<dmiles> there are many things that cannot be written in a finitely-many-sorted FOL
23.06.18 17:59:42<dmiles> since for any set of sorts you can create.. one can make up a sort you havent yet
23.06.18 18:00:16<stoopkid> show me an example of a single-sorted FOL statement that can't be expressed in n-sorted FOL with n > 1
23.06.18 18:00:32<dmiles> single-sorted (well actually this is non-sorted) has not constraints to the number of sorts that can be syntehetically emulated thru axiomims
23.06.18 18:00:40<stoopkid> neither does many-sorted
23.06.18 18:01:31<dmiles> i almost agree with you.. but we have to realize that it is 'sorted' for some exact contraining reason
23.06.18 18:02:16<stoopkid> if it's not in the specs/definition, it doesn't count :)
23.06.18 18:02:30<dmiles> at(today, belives(joe,P)) ->at(tommow,knows(may,P)).
23.06.18 18:02:37<dmiles> *mary
23.06.18 18:03:12<stoopkid> the only thing that's asserted about the sorts is their objects represent a partition of the underlying set of the models
23.06.18 18:03:28<dmiles> think about what 'sort' P is
23.06.18 18:03:41<dmiles> P being a universally quantified variable here
23.06.18 18:05:10<stoopkid> idk what sort P is because you haven't defined it
23.06.18 18:05:11<dmiles> belives(joe,(A&B)) -> (belives(joe,A) & belives(joe,B))
23.06.18 18:05:24<dmiles> i dont need to define it.. it is unsorted
23.06.18 18:05:25<stoopkid> afaict this could be single/non-sorted FOL
23.06.18 18:05:53<stoopkid> ok so then... i can't think about what sort P is, because it's unsorted :P
23.06.18 18:05:57<dmiles> right this is something that cannot be pout into a sorted >1
23.06.18 18:06:04<stoopkid> ?
                 <stoopkid> sure it can
23.06.18 18:06:20<stoopkid> i define two sorts S1 and S2
23.06.18 18:06:33<stoopkid> i say P is in S1
23.06.18 18:07:28<stoopkid> then "at(today, belives(joe,P)) ->at(tommow,knows(may,P))." is still an equivalent statement, in a 2-sorted FOL
23.06.18 18:07:41<dmiles> in order fo this to stay FOL i must aximoitize each sort.. at least i have to define them
23.06.18 18:08:09<stoopkid> in order to stay in unsorted FOL, you mean?
23.06.18 18:08:14<dmiles> i have to axiomatize the sort at leasdt in some language
23.06.18 18:09:01<dmiles> well actualyl i might be losing this argument since .. technically it might still be able to axiomitize S1
23.06.18 18:09:13<dmiles> sinc ei have to for 1-Sort FOL
23.06.18 18:10:46<dmiles> by axiomitization that means tha ti proviode a strong enough system that allows one to build a model
                 <stoopkid> for the embedding of single-sorted FOL into N-sorted FOL, you don't have to axiomatize the sorts with first-order statements, they're just available already
23.06.18 18:12:04<dmiles> i suppose as long as for evnery new sort i invent you can add it to your N-sorted logic on the fly .. then you can express with you can in unsorted-FOL
23.06.18 18:12:41<dmiles> but N-Sorted logic is not supposed to support on the fly inventions of Sorts
23.06.18 18:12:57<dmiles> yet unsorted-FOL was designed for that scenario
23.06.18 18:14:45<dmiles> " you don't have to axiomatize the sorts with first-order statements"  <- means though not only you dont have to.. doesnt it also mean that you cant?
23.06.18 18:15:20<dmiles> for isntnace.. you and i aore both using  6-sorted-FOL-called-L6
23.06.18 18:16:05<dmiles> neither one of us are able to see what the other does.. so you add a new axiom that allows you to compose Sort4 in a new way
23.06.18 18:16:53<stoopkid> maybe look at it like this, would you agree that if N > M, then you can trivially embed M-sorted FOL into N-sorted by just mapping the M sorts from the M-sorted FOL to M of the N sorts of N-sorted FOL, and then just not using any of the rest of the sorts in the N-sorted FOL?
23.06.18 18:17:10<dmiles> lets pretend i do this to Sort5  .. however i did not realize i made a mistake and now all isntances of Sort5 are equal
23.06.18 18:17:56<dmiles> but now since we never had to axiomitize.. how will you know all Sort5s are equal?
23.06.18 18:18:48<dmiles> in other words you are saying all the axioms that are theorems of each sort are already there
23.06.18 18:19:25<stoopkid> hrm... not quite
23.06.18 18:19:34<stoopkid> hold on let's back up a bit
23.06.18 18:19:47<stoopkid> you agree that you can embed 2-sorted logic into unsorted FOL?
23.06.18 18:19:58<dmiles> yes
23.06.18 18:20:06<dmiles> as long as we can axio,mitze both sorts!
23.06.18 18:20:41<dmiles> that means we can find all of our theorems
23.06.18 18:21:02<stoopkid> not quite, the only thing that you have to axiomatize is a) every object in the domain falls into one of the sorts, b) the sorts are disjoint
23.06.18 18:21:13<dmiles> this is unsorted though
23.06.18 18:21:24<dmiles> oh you mean into the 2-Sorted breakdown .. ok
23.06.18 18:21:51<dmiles> you also need ot be able to distinguish between two skolems
23.06.18 18:22:06<dmiles> (that are from the same sort)
23.06.18 18:22:08<stoopkid> right, the "pure 2-sorted first-order logic" doesn't assert anything about the interpretation of the objects in the sorts except for that every object is in one of the sorts, and the sorts are disjoint
23.06.18 18:22:37<stoopkid> you would yes but that's already a consequence of what i'm saying
23.06.18 18:23:39<stoopkid> they would already be distinguished into one or the other of the sorts by the equivalent unsorted FOL statement
23.06.18 18:24:01<dmiles> here is an example:  holds(loves,a,b)   holds(transitiveOnArg2,loves,likes)
23.06.18 18:25:13<dmiles> acutuly that is too early.. for me to mention that.. lets look at it this way..
                 <dmiles>      holds(loves,a,b). holds(loves,b,c). holds(likes,a,b)
23.06.18 18:25:36<dmiles> we know that a=a, b=b right?
23.06.18 18:25:54<dmiles> does loves=loves?
23.06.18 18:26:09<stoopkid> we don't necessarily know these things in pure FOL
23.06.18 18:26:19<stoopkid> we would indeed know these things in pure FOL + equality
23.06.18 18:26:40<dmiles> S1 ={loves,likes}   S2={a,b,c}.
23.06.18 18:26:54<dmiles> but the equality act very differnt on differnt sorts
23.06.18 18:27:47<stoopkid> that's part of extra semantics that aren't included in either pure single-sorted FOL or pure many-sorted FOL
23.06.18 18:28:28<dmiles> in S1  in my language in which i jsut wrote  holds(loves,a,b). holds(loves,b,c). .. these two loves are very unlikely the same instnace of 'love' however we know for sure that they are both subclasses of love
23.06.18 18:29:13<stoopkid> there are indeed ways to add extra semantics to the sorts that don't allow the reduction to pure single-sorted FOL (assuming compactness holds), this is essentially what second-order logic does
23.06.18 18:29:21<dmiles> in order to make that happen on S1 rdf has a ton of creazy axiomitzaions
23.06.18 18:30:23<stoopkid> "in S1  in my language in which i jsut wrote  holds(loves,a,b). holds(loves,b,c). .. these two loves are very unlikely the same instnace of 'love' however we know for sure that they are both subclasses of love"
23.06.18 18:30:24<dmiles> those axiomitzation works on subsumbpion over S1 but doesnt on S2
23.06.18 18:30:40<stoopkid> this means absolutely nothing when we're talking about *pure* single-sorted / N-sorted FOL
23.06.18 18:31:10<dmiles> *pure* single-sorted == unsorted-FOL ?
23.06.18 18:31:48<stoopkid> they're directly equivalent yea
23.06.18 18:32:20<dmiles> 2-sorted FOL is not strictly not a   "*pure* single-sorted" + 1-Sort ?
23.06.18 18:32:37<dmiles> 2-sorted FOL is not    "*pure* single-sorted" + 1-Sort ?
23.06.18 18:34:08<stoopkid> 2-sorted FOL is FOL such that the variables of the different sorts are interpreted into disjoint subsets of the model
23.06.18 18:34:26<stoopkid> (disjoint subsets whose union is the whole set)
23.06.18 18:34:42<dmiles> "*pure* single-sorted" can implement any number of Sorts right?
23.06.18 18:35:24<stoopkid> let's get back to that and answer a simpler question for now: pure single-sorted FOL can definitely implement any finite number of Sorts
23.06.18 18:35:31<stoopkid> (as per that wiki page)
23.06.18 18:35:37<dmiles> ok yes
23.06.18 18:35:56<dmiles> can 2-Sort FOL .. implement any finite number of Sorts ?
23.06.18 18:36:04<stoopkid> indeed
23.06.18 18:36:27<dmiles> ok so neither is more or less expressive it sounds like
                 <stoopkid> and it only requires one of its existing sorts in order to do it
23.06.18 18:37:05<stoopkid> precisely
23.06.18 18:38:09<dmiles> interestingly ..  coinductive FOL .. is called SOL
23.06.18 18:38:21<stoopkid> i don't know whether the same holds true when we have infinitely many sorts
23.06.18 18:38:23<dmiles> at least that was the hand waving seen on every Page about Peano
23.06.18 18:39:17<dmiles> well actualyl think about isntances that Sorts are defined hierchily
23.06.18 18:39:43<stoopkid> hrm
23.06.18 18:39:50<stoopkid> changes the problem too much, let's get back to that
23.06.18 18:39:51<dmiles> such as in some Sorts are combos of more than one initial Sort
23.06.18 18:40:33<dmiles> in CYC/Logicmoo (anfd eventually LBase) one has to create their Sort system by hand
23.06.18 18:41:34<dmiles> also when looking at objects of S1 they can have bijectivity to objects in S2 if an axioms so enforce
23.06.18 18:42:35<dmiles> for exmample  we might do this with the  myNatToPeano(Nat,Peano)
23.06.18 18:43:37<dmiles>  myNatToPeano(0,0).  myNatToPeano(X,Y)-> myNatToPeano(X+1,succ(Y)).
23.06.18 18:44:05<dmiles> 0 exists as S1 and S2
23.06.18 18:44:24<dmiles> 1 exists only in S1
23.06.18 18:44:32<dmiles> succ(0) exists only in S2
23.06.18 18:45:35<dmiles> whenever we want to define new fuctions in S2 .. we can simply define them from S1 now
23.06.18 18:45:46<dmiles> (and visa versa)
23.06.18 18:46:39<dmiles> so... what will  square root of negative one look like in Peano ?
23.06.18 18:47:36<dmiles> sorry i have to first next make a  S3 that allows non Nats "corrispond" with myNatToReals(S1,S3)
23.06.18 18:50:22<dmiles> myNatToReals(0,0).   (myNatToReals(X,Y),mutatorNat(XX),mutatorReal(YY), )-> myNatToReals(X+XX,Y+YY)).
23.06.18 18:50:30<dmiles> mutatorNat(1)
23.06.18 18:52:03<dmiles> mutatorNat(X)->mutatorReal(Y).    mutatorReal(Mult),mutatorNat(Divise)->mutatorReal(Mult/Divis).
23.06.18 18:54:37<dmiles> what i am doing with Nat/Real here is saying that you may pick a number .. any number and call that the  mutatorReals "step counter" that follows Nats +1
23.06.18 18:55:14<dmiles> meaning first thing that happens here is that there are just as many Nats as reals
23.06.18 18:55:43<dmiles> but that is ok.. no ones really about to prove that is not true
23.06.18 18:56:47<dmiles> what my point was going to be is that logical definition can constrain and create domains (also knonw as Sorts)
23.06.18 18:57:47<dmiles> no one btw told us what preds allowed and not .. which of the differnt Sorts
23.06.18 18:58:07<dmiles> but in the same way i enforce female mothers i can enface .. Nat Nats
23.06.18 18:58:38<dmiles> *enforce
23.06.18 19:00:10<dmiles> myNatToPeano(N,P)->(Nat(Nat),Pea(P)).
23.06.18 19:01:10<dmiles> ~Nat(N) -> ~myNatToPeano(N,P)   of course
23.06.18 19:01:58<dmiles> what i am saying here is we can end up with a very strong unsorted FOL that is invinately sorted
23.06.18 19:02:24<dmiles> i will now define an infinately-sortd logic
23.06.18 19:03:10<dmiles> well make an infiante subsort of reals
23.06.18 19:04:38<dmiles> btw Pea(X) is shorthand for  a(X,Pea)
23.06.18 19:06:15<stoopkid> nearly a reduction of potentially-infinitely-many-sorted FOL to unsorted FOL: https://pastebin.com/PBZYQFnh
23.06.18 19:06:39<dmiles> mutatorReal(MR) ,a(X,Real), -> a(X*MR,SubSortFn(Real))
23.06.18 19:06:44<stoopkid> there are a couple issues though
23.06.18 19:07:38<stoopkid> in the reduction from N-sorted FOL to unsorted FOL, we don't change the models that satisfy the statements
23.06.18 19:08:07<stoopkid> in the reduction from an infinitely-many-sorted FOL to unsorted FOL, by the method i've described in the pastebin, we would actually be changing the models that satisfy the statements
23.06.18 19:08:11<dmiles> jynx we were following the same doctrine
23.06.18 19:09:01<dmiles> ~(exists x, isSort(x) ^ isObject(x)).   <- exactly the type of Axiom that bootsrtaps Sorts
23.06.18 19:09:36<stoopkid> do you see what i mean that this reduction would change the models that satisfy the statements?
23.06.18 19:10:31<dmiles> (all x, isSort(y) -> (exists z, subSort(y,z))  <- you should add this one
23.06.18 19:10:43<dmiles> oops
23.06.18 19:10:52<dmiles> (all y, isSort(y) -> (exists z, subSort(y,z))  <- you should add this one
23.06.18 19:11:06<dmiles> so now you have infinate sorts
23.06.18 19:12:04<dmiles> (all x,y subSort(y,z) )-> (isSort(y), isSort(z))
23.06.18 19:12:22<dmiles> oopsy  x->y
23.06.18 19:14:18<dmiles> oh you can write an equality for Sorts
23.06.18 19:14:48<dmiles> and even make sure there only exists 22 Sorts if you'd like
23.06.18 19:15:20<dmiles> even with my last two "sort exploder" axioms
23.06.18 19:15:26<stoopkid> well..., yes/no
23.06.18 19:15:42<stoopkid> you can, but doing so would step outside the bounds of *pure* FOL
23.06.18 19:16:15<dmiles> only goes outside the bounds of FOL if you lose you equality/unification discriminatior
23.06.18 19:16:47<dmiles> isObject(X)->equals(X,X).
23.06.18 19:17:56<stoopkid> hrm
23.06.18 19:18:06<stoopkid> lemme think about that
23.06.18 19:18:40<stoopkid> can we also say "nothing but X is equal to X"?
23.06.18 19:20:57<dmiles> unifier(X,X).:        isObject(X),isObject(Y),~unifier(X,Y) -> ~equals(X,Y)
23.06.18 19:21:04<dmiles> oh i rmemeber how we do that
23.06.18 19:21:23<dmiles> you create a relation that has a cardinaity of 1
23.06.18 19:21:46* dmiles fids the pastebin
23.06.18 19:24:45<dmiles> basically you create a bijectionive relation (which as a cardinatluy of one) if the bijection is fasle than the equality is fasle
23.06.18 19:26:10<dmiles> also even this:    "isObject(X),~equals(X,Y) -> isObject(Y)"
23.06.18 19:26:55<dmiles> or       (isObject(X)&isObject(Y) -> ~equals(X,Y).
23.06.18 19:27:16<dmiles> that last one seems crazy..  but the contrapostive is what works
23.06.18 19:28:12<dmiles> the oteh Sort.. (the Sort sort) you can define equality differntly that isObjects
23.06.18 19:29:03<dmiles> you can define (axiomizatize) equality on isSort differently than isObject
23.06.18 19:35:02<dmiles> you can also axiomatize temporal constraint on hasSort/2
23.06.18 19:36:57<dmiles> bornOn(X,T2) & T1<T2 -> all(S,~at(T1,hasSort(X,S)))
23.06.18 19:38:03<dmiles> all one needs do is add constructive logic axioms to the second argument of 'at'
23.06.18 19:39:25<dmiles> here is an example of such a thing:  https://pastebin.com/jjv52pzM
23.06.18 19:40:37<dmiles> i use "UniqueObjectDesignatingFunction"s
23.06.18 19:41:26<dmiles> "basically you create a bijectionive relation (which as a cardinatluy of one) if the bijection is fasle than the equality is fasle"
23.06.18 19:46:22<dmiles> "you can define (axiomizatize) equality on isSort differently than isObject" if you like by saying that if two sorts have all the exact same isntaces.. and no differnt instance then they ar ehte same sort.. I wouldnt do that but some people love that
23.06.18 19:47:25<dmiles> why i bring that up is that you might even be able to violate henkin
23.06.18 19:47:36<dmiles> (even though its still FOL)
23.06.18 19:49:04<stoopkid> so, do you agree that the N sorts of N-sorted FOL are essentially the equivalence classes of an equivalence relation on the domain?
23.06.18 19:49:26<dmiles> for exmample:    (forall S1 S2  (hasSort(X,S1)<->hasSort(X,S2)) -> (exists S3 subSort(S1,S2)&subSort(S1,S3))
23.06.18 19:49:54<dmiles> yes
23.06.18 19:50:38<dmiles> well at leas that was the point of myNatTOPEano/2
23.06.18 19:51:20<dmiles> where myNatToPeano mission is to make them work bijectively
23.06.18 19:52:08<stoopkid> https://pastebin.com/3Emabkaq
23.06.18 19:52:40<dmiles> but i think that you can make your domcains countably differnt sizes and still push equivalncy
23.06.18 19:53:14<stoopkid> so what i do here is in unsorted FOL, i add a relation symbol R, and i state that R is an equivalence relation
23.06.18 19:53:27<stoopkid> the equivalence classes of R can then serve as the sorts
23.06.18 19:54:07<stoopkid> for every sort in the many-sorted logic, i add a constant symbol in the unsorted FOL meant to stand for that sort
23.06.18 19:54:23<dmiles> yeah! see this by sheer brute force of logical implication you are breaking away from Henkin
23.06.18 19:54:59<dmiles> (if we wanted to be so bold that to say your Rs are 2nd order)
23.06.18 19:55:51<stoopkid> there's nothing 2nd order here, we'll come back to second-order after we finish up with this many-sorted stuff
23.06.18 19:56:05<dmiles> the only thing that could "pin you" to Henkin is if someone wanted to force your Rs into some sematic you didnt agree to
23.06.18 19:56:44<stoopkid> well
23.06.18 19:56:58<dmiles> they also need to force your Xs (see i'll stay in FOL now) into not violating some secrete equaality they think you should be obeying)
                 <stoopkid> Henkin's the one who came up with the semantics, so.. blame it on him :P
23.06.18 19:57:48<dmiles> for exmaple  you might dell it is  "legal" to state that   X is not the same X on differnt days of the week
23.06.18 19:58:47<stoopkid> ?
23.06.18 19:58:48<dmiles> for exmaple  you might have a "equality breaking" axiom that is conditonal
23.06.18 19:59:48<dmiles> so how you aximtize Rs there.. you can add an extra litteral like  "IFeelGood()"  in part of your anteceedants
23.06.18 20:00:26<stoopkid> ?
23.06.18 20:01:38<dmiles>  all x,y,z, R(x,y) -> (IFeelGood() /\  R(y,z) -> R(x,z))
23.06.18 20:03:21<stoopkid> i don't understand what you're trying to say or what it could have to do with my attempt at reduction from arbitrarily-many-sorted FOL to unsorted FOL :P
23.06.18 20:03:52<dmiles> why would I do that is to show that any  equaltity/equivaleny you are creating to build up these "sort domains"  can flip over as you desire
23.06.18 20:04:43<stoopkid> still don't understand what you mean here
23.06.18 20:04:55<dmiles> why this is important is when you change logical equivanies you have the power to change the whole structure of how it is intepreted
23.06.18 20:05:36<dmiles> if R1 is the same as R2 right now.. or S3 is the same as S10.. that changes everything
23.06.18 20:06:21<dmiles> it allows your  ( all x, exists s, isSort(s) ^ R(x,s)   to take on new meanings
23.06.18 20:07:29<dmiles> IFeelGood()->( all x, R(x,x))   means that you can take away those equalities
23.06.18 20:07:59<dmiles> so for isntance it was asserted  R(foo,bar)
23.06.18 20:08:02<stoopkid> ok but
23.06.18 20:08:21<stoopkid> where do you see "IFeelGood() ..." in my pastebins?
23.06.18 20:10:30<dmiles> I added that.. what you where dooiing there is writting the logic in a way that can force equivalncy
23.06.18 20:10:56<dmiles> which means that you are able to control the semantics
23.06.18 20:11:17<dmiles> so in other words the FOL does not pin you to a semantic
23.06.18 20:12:13<stoopkid> yes/no
23.06.18 20:12:49<stoopkid> FOL doesn't pin you to a semantic in the sense that when you ask about validity/satisfiability, you're asking about this across all possible interpretations
23.06.18 20:13:00<dmiles> IFeelGood() was an exmaple of the fact you even have extra power ot furn your axioms on/off at will
23.06.18 20:13:28<stoopkid> but it does pin you to a  semantic in the sense that when you're asking about validity/satisfiability, you're *always* asking about this across all possible interpretations
23.06.18 20:14:15<dmiles> what happens when you allow sentences as a sort into your language ?
23.06.18 20:14:31<stoopkid> can you be more specific than "what happens" ?
23.06.18 20:16:34<dmiles> i think when you allow sentences into your substructual logic, you gain ability to write a logic that does whatever validity/satifiablity as you want
23.06.18 20:16:58<stoopkid> not quite
23.06.18 20:17:01<dmiles> on the top level it stays teh same as it is
23.06.18 20:17:12<dmiles> (that par tof not quite)
23.06.18 20:17:51<dmiles> but within your modal args you write the rules of and/or/implies etc
23.06.18 20:18:14<dmiles> (still in FOL)
23.06.18 20:18:18<stoopkid> it's always about the interpretations of the sentences, not the sentences themselves per se
23.06.18 20:18:46<dmiles> right it is about how you do or dont include and/or/not/implies
23.06.18 20:19:00<stoopkid> you get the ability to write a logic that does whatever validity/satisfiability you want, *when you can restrict the range of possible interpretations*
23.06.18 20:19:30<dmiles> for sure.. having a smallest number of interpreations seems like a good idea
23.06.18 20:19:48<stoopkid> well... smallest doesn't have anything to do with this..
23.06.18 20:20:04<stoopkid> it's more about being able to choose whatever interpretations you want
23.06.18 20:20:20<dmiles> yes.. and not the ones you dont want
23.06.18 20:20:25<stoopkid> err, whatever range* of possible interpretations you want
23.06.18 20:20:38<stoopkid> right
23.06.18 20:20:42<dmiles> see i think that is possble
23.06.18 20:21:13<stoopkid> not with pure FOL though! that's the thing
23.06.18 20:21:35<stoopkid> pure FOL is specifically *unrestricted* in its range of possible interpretations
23.06.18 20:21:53<stoopkid> you don't get to restrict the possible interpretations and say "this is still FOL", it becomes something else
23.06.18 20:22:03<stoopkid> "this is still pure** FOL"
23.06.18 20:22:22<dmiles> pure-FOL is the easiest to control and restrict
23.06.18 20:22:42<stoopkid> this isn't a matter of difficulty of doing something, it's a matter of *definition*
23.06.18 20:22:59<dmiles> you can do most via negation.
23.06.18 20:23:01<stoopkid> you would *by definition* be doing something that's *not* pure FOL
23.06.18 20:23:21<stoopkid> for example, many-sorted FOL is *by definition* distinct from FOL
23.06.18 20:23:51<stoopkid> they turn out to be able to express exactly the same semantic expressions, but they are *definitionally distinct* concepts nonetheless
23.06.18 20:24:05<stoopkid> specific (abstract) syntaxes with specific model-theoretic interpretations
23.06.18 20:24:34<dmiles> yes.. even supposedly Peano Axioms are not pure FOL
23.06.18 20:24:41<dmiles> (yet they are?)
23.06.18 20:24:48<stoopkid> they aren't
23.06.18 20:24:53<stoopkid> but we'll get back to that
23.06.18 20:25:34<dmiles> you say that interpretor i wrote in FOL?
23.06.18 20:25:37<dmiles> saw*
23.06.18 20:25:48<dmiles> https://pastebin.com/jjv52pzM <- this one
23.06.18 20:26:44<dmiles> that uses sentances as first order objects
23.06.18 20:27:32<dmiles> and defines theis objects as having some sort of unifieny and not unifying capabilities inside an accessability relation called "ist"
23.06.18 20:28:50<dmiles> itrs says for every object of this sentence sort there is a logical interpretaion that i put into an existential called denotes
23.06.18 20:30:38<dmiles> so it is designed to figure out when  R(x,y) is the identical language wise to a diffenrt denotation like  S(t,u)
23.06.18 20:31:13<stoopkid> not sure
23.06.18 20:31:16<dmiles> not about "logically follows" sinc ei purposely ensured i left out certain parts of syntax
23.06.18 20:32:22<dmiles> subcontextual inheritance on line 161 allows hidding and exposing new axioms
23.06.18 20:33:11<dmiles> tat axiosm is tiny.. where it gets its power is from the axioms aboiove
23.06.18 20:33:53<stoopkid> i'm not sure what any of this has to do with the equivalence or inequivalence in expressiveness of pure FOL and pure arbitrarily-many-sorted FOL
23.06.18 20:35:35<dmiles> this is showing that how FOL can be coerced into *any* level of expressive
23.06.18 20:36:28<dmiles> just as long as you can distinguish what you wish to be quality
23.06.18 20:36:31<stoopkid> that still doesn't mean anything, "any level of expressivness" is undefined
23.06.18 20:36:56<dmiles> it as undefined a the N in N-sorted logic?
23.06.18 20:37:20<stoopkid> waaayyyy more unfathomably more undefined than that, until we get into philosophy
23.06.18 20:37:34<dmiles> "any level of expressivness" is defined as saying trying to decided or compare levels of expressiveness is a fools errand
23.06.18 20:37:43<stoopkid> for all practical purposes all we can do is take existing frameworks for expression and compare them for equivalence/inequivalence
23.06.18 20:38:20<stoopkid> right, we can compare expressiveness of *known* syntactic/semantic frameworks
23.06.18 20:38:41<dmiles> that once you allow peopel to write equality and equivalncy and compreshension axioms.. there is no more order
23.06.18 20:39:23<stoopkid> being able to do all of higher-order-logic may or may not be "all possible expressiveness"
23.06.18 20:40:45<dmiles> njon-sort logic stops being any-sorted logic
23.06.18 20:41:06<stoopkid> ?
23.06.18 20:41:16<dmiles> once you dont have sorts.. you dont have Realtions, Object, Poprostions
23.06.18 20:42:04<stoopkid> yes/no, right?
23.06.18 20:42:12<stoopkid> we can simulate sorts in unsorted FOL right?
23.06.18 20:42:19<dmiles> right
23.06.18 20:42:41<dmiles> we can simulate any semamticfs on how Objects interelate?
23.06.18 20:43:00<stoopkid> we can simulate any *first-order-definable* semantics on how Objects interrelate
23.06.18 20:43:12<dmiles> we can simulate  Graphs  ?
23.06.18 20:44:01<stoopkid> everything's already essentially interpreted into edge-labeled, node-labeled, directed multi-hyper-graphs
23.06.18 20:44:23<dmiles> can we come up with an exmaple of a non *first-order-definable* semantic?
23.06.18 20:44:40<stoopkid> a constant object symbol "c" maps to some graph node labeled c
23.06.18 20:45:21<stoopkid> an n-ary relation symbol "R" maps to the set of n-hyper-edges labeled R in the graph
23.06.18 20:45:36<dmiles> (i mean a semantic that cannot be reduced to a syntaxtical represeantion)
23.06.18 20:45:50<stoopkid> yes, transitive closure
23.06.18 20:46:41<dmiles> ok .. imagine for the moment that you wanted something like  your sort heiracy to be made up with all existentials
23.06.18 20:47:08<dmiles> what would prevent those existenials from edxistializing TC?
23.06.18 20:47:53<dmiles> i think i know exampley now how to explain this!
23.06.18 20:48:15<dmiles> immagine you wanted to represent the person "Joe" as a FOL Object
23.06.18 20:49:03<stoopkid> i should caveat this discussion with: i don't actually know for a fact that FOL can't express transitive closure, i only know that if FOL can express transitive closure, that would violate the compactness theorem
23.06.18 20:49:18<dmiles> you do and are saistfied.. now you want to take that ame Joe and only see Joe as a FOL Object when it is his biorthday
23.06.18 20:50:09<dmiles> (what the underlying abjective i am after is ensuring that we can create difernt versions of Joe .. that are considered "Subversions of Joe" and each ore real FOL objects"
23.06.18 20:50:57<dmiles> the end reasult is that we have  JoeAlways and JoeOnBirthday
23.06.18 20:51:20<dmiles> JoeOnBirthday is trantively under JoeAlways
23.06.18 20:51:57<stoopkid> if you want to prove to me that pure FOL can actually express transitive closure, you'll have to show me the FOL expression of it
23.06.18 20:52:00<dmiles> so we have Joe bound to a  Data Line  <----->
23.06.18 20:52:57<dmiles> so we have JoeOnBirthday bound to a  Date Line  *--*
23.06.18 20:53:23<dmiles> i can do it with numbers actually even easier
23.06.18 20:53:27<stoopkid> a formula F := "tc(R,R') <-> ..." where ... is a first-order expression that constrains all possible models of any theory T that includes F to be such that R' is actually the transitive closure of R... Joe doesn't have anything to do with this :P
23.06.18 20:53:42<dmiles> forget relations for the moment
23.06.18 20:53:47<dmiles> lets stick to FOL
23.06.18 20:53:58<stoopkid> i am
23.06.18 20:54:00<stoopkid> :P
                 <dmiles> lets jsut use FOL Objects
23.06.18 20:54:06<stoopkid> FOL includes relations, it just doesn't quantify over them
23.06.18 20:54:34<stoopkid> when i say tc(R,R'), tc is in the metatheory
23.06.18 20:54:45<stoopkid> i should've said:
23.06.18 20:55:50<stoopkid> "tc(R,R') := ...." you fill in the "..." with a first-order expression that includes R and R', and constrains the possible models to be such that R' is actually the transitive closure of R
23.06.18 20:56:28<dmiles> you can define transtitive subsumption on first order entities right?
23.06.18 20:56:50<stoopkid> you can define transitivity
23.06.18 20:56:53<dmiles> forget the transitive part.. "ou can define transtitive subsumption on first order entities"
23.06.18 20:56:57<dmiles> oops
23.06.18 20:57:09<dmiles> forget the transitive part.. "you can define subsumption on first order entities"
23.06.18 20:57:34<stoopkid> idk how you're gonna forget the transitive part when attempting to define transitive closure
23.06.18 20:57:48<dmiles> structureal subsumption is how RDf lists work
23.06.18 20:58:03<dmiles> termporal subsumption is how LTL works
23.06.18 20:58:13<stoopkid> we're not talking about RDF and LTL though
23.06.18 20:58:25<stoopkid> we're talking about transitive closure in pure academic FOL :P
23.06.18 20:58:31<dmiles> i trying to make sure you know what i mean by subsumption
23.06.18 20:58:53<stoopkid> maybe you could show me an FOL formula that expresses it :P
23.06.18 20:59:05<dmiles> can you define in any way how subsumption is not transitive?
23.06.18 20:59:25<stoopkid> idk cause i'm not sure what exactly you mean by subsumption here
23.06.18 20:59:47<dmiles> subsumption is where one set fits complete inside of another set
23.06.18 21:00:15<stoopkid> you mean, the subset-of relation?
23.06.18 21:00:22<dmiles> nope
23.06.18 21:00:29<dmiles> for exmaple   HappyBob first inside of AllBob
23.06.18 21:00:38<dmiles> for exmaple   HappyBob fits inside of AllBob
23.06.18 21:01:00<dmiles> and  [1,2,3]   fitrs inside [1|_]
23.06.18 21:01:18<stoopkid> alright
23.06.18 21:01:22<stoopkid> got an FOL expression that expresses it?
23.06.18 21:02:44<dmiles> forall(P  person(P)-> exists(P1 subsumes(P,P1)))
23.06.18 21:04:28<dmiles>  forall(H1,H2,T T2, subsumes((H1 H2 . T)  (H1. T2)))
23.06.18 21:07:11<dmiles> forall(P  person(P)-> exists(P1, ((happy(P1) \/unhappy(P1)) /\ equals(P1,P) /\subsumes(P,P1)/\~subsumes(P1,P)))
23.06.18 21:07:30<stoopkid> ?
23.06.18 21:08:33<dmiles> ( ~(subsumes(X,Y)/\subsumes(Y,X))  \/  equals(X,Y) )
23.06.18 21:09:15<stoopkid> can you give me an FOL-definition of subsumes that isn't in terms of itself?
23.06.18 21:09:19<dmiles> actualyl i was going to go the other way is that anyhting can subsume itself
23.06.18 21:10:35<stoopkid> example: transitive(R) := all x,y,z, (R(x,y) -> (R(y,z) -> R(x,z)))
23.06.18 21:10:41<dmiles> in my first few exmaples subsumes is always onyl in the consequenbt
23.06.18 21:12:19<stoopkid> i think what you're maybe looking for is:
23.06.18 21:12:53<stoopkid> subsumes(P\1,Q\1) := all x, Q(x) -> P(x)
23.06.18 21:13:14<stoopkid> (or similarly at any arity)
23.06.18 21:13:17<stoopkid> ?
23.06.18 21:13:20<dmiles> that works .. but that is SOL ?
23.06.18 21:13:26<stoopkid> no
23.06.18 21:14:06<stoopkid> it would be SOL if we did something like, "forall P, Q, subsumes(P,Q)"
23.06.18 21:14:48<stoopkid> but "subsumes(P\1,Q\1) := all x, Q(x) -> P(x)" is all FOL you can regard the LHS as just a short-hand for the RHS
23.06.18 21:15:29<stoopkid> i.e. anywhere subsumes(P,Q) appears in a formula, you expand it to the RHS, i.e. "all x, Q(x) -> P(x)", so after expanding all definitions you just have a first-order formula
23.06.18 21:15:35<dmiles> i guess that what you says works ..
23.06.18 21:15:42<dmiles> e  forall(X, green_pigment(X)-> (blue_pigment(X) & yellow_pigment(X)))
23.06.18 21:17:44<dmiles> skin_of(joe,green) &  subsumes(green,X)  -> skin_of(joe,X)
23.06.18 21:18:03<dmiles> it is used to express usually qualites
23.06.18 21:18:33<stoopkid> sure
23.06.18 21:19:25<dmiles> citizen_of(joe,X) &  subsumes(engliand,X)  -> citezen_of(joe,england)
23.06.18 21:19:51<dmiles> such as land mass subsumming land mass
23.06.18 21:20:15<stoopkid> something like that, sure
23.06.18 21:20:42<stoopkid> ok so
23.06.18 21:21:01<stoopkid> we've got subsumption (at any arity, including arity 2), and we've got transitivity, these are both FOL-expressible
23.06.18 21:21:02<dmiles> what this means if you have some segment of value. then you have that valuer
23.06.18 21:21:12<stoopkid> that's almost transitive closure so what are we missing here?
23.06.18 21:21:57<dmiles> what happens is in order ot get transtive closure we need to be able to look at any two sugments and see if there is total subsumption
23.06.18 21:22:14<dmiles> i mean tha ti just one step
23.06.18 21:22:53<dmiles> i am saying that we need to have a totaly highmap of subsumiton
23.06.18 21:23:18<dmiles> brgb .. hpphone
23.06.18 21:37:16<stoopkid> https://pastebin.com/WwcWhKmd
23.06.18 21:43:05<stoopkid> before you try any trickery to figure out some FOL-expression to finally nail down transitive closure in FOL, let's start with the obvious thing:
23.06.18 21:44:52<stoopkid> would you say that we should be able to just take our second-order statements, and write equivalent FOL statements using a `holds` predicate, and express transitive closure that way?
23.06.18 21:51:04<stoopkid> example: https://pastebin.com/xQPRrzVV
23.06.18 21:54:33<stoopkid> also, before we go too much further, we should probably define a syntax to use to express exactly *which* FOL we're talking about
23.06.18 22:43:22<stoopkid> https://pastebin.com/h30vyapP
23.06.18 22:45:19<stoopkid> so, part of the problem here is that you're using conclusions about FOL<...> for some <...> when we're supposed to be talking about FOL[...] for all [...]
24.06.18 00:16:25<dmiles> "would you say that we should be able to just take our second-order statements"  wel the reason I am leaning towards that.. is there is a wider variety of first order subsumptions and equalties that are just as tricky (way more so) than "doing Relations"
24.06.18 00:17:23<dmiles> there are also even simple ones like  segments-of-time
24.06.18 00:20:11<dmiles> some of my favorites in CYC was beard-shapes and work-occupations
24.06.18 00:23:07<dmiles> what happened at some point all the work that was done to optimize  the First order subsumption heirarcy got reused for the relation heirachy
24.06.18 00:23:34<stoopkid> not sure what you mean
24.06.18 00:24:15<dmiles> well we used to have   "attribute(joe,80sHairStyle) "
24.06.18 00:24:49<dmiles> attribute mean rdf:type that was expected to trasition over time
24.06.18 00:25:26<dmiles> vs  isa(joe,person).  which helped more to understand his candidate predicates
24.06.18 00:25:42<dmiles> to see where we could experment with him
24.06.18 00:26:19<dmiles> well being so obsessed with taxionomy and ontology the  isa/2 code was insanely good
24.06.18 00:26:56<dmiles> so Lenat begged to have  attribute/2 and isa/2 into the same predicate
24.06.18 00:27:50<dmiles> so people could say  subsumes(80sHairStyle,BigHair)
24.06.18 00:28:07<dmiles> which meant joe also had bighair
24.06.18 00:28:59<dmiles> when the unify is doing a possitive chain if he needed bighair to get into a club we let him in with 80sHairStyle
24.06.18 00:29:35<dmiles> that is we pretended   hairType(joe,80sHairStyle) == hairType(joe,bigHair)
24.06.18 00:30:07<dmiles> if it was proving a negative litteral we required the roles ot be reversed
24.06.18 00:31:00<stoopkid> not sure what this has to do with the expressiveness of FOL vs many-sorted FOL vs. Henkin vs MSOL vs. full-SOL vs HOL. i think for now it would be better to stick with the simpler/pure academic systems and evaluating where they stand in relation to each other, without reference to "real-world" concepts like "attribute/isa/Joe/80sHairStyle" rather than bringing in something complex like CYC and using real-world concepts
24.06.18 00:31:01<stoopkid> with implicit extra semantics?
24.06.18 00:31:09<dmiles> we did not want the system spending time walking up a heirarchy
24.06.18 00:32:34<dmiles> what it has to do with is that relational equivalance is identical to FOL susumtpion
24.06.18 00:33:34<dmiles> that anyone whom claims FOL is limited to Henkin needs to try to implment FOL subsumption
24.06.18 00:33:43<stoopkid> do you mean the following:
24.06.18 00:33:56<stoopkid> equivalent(R,R') := subsumes(R,R') ^ subsumes(R',R) ?
24.06.18 00:34:31<dmiles> that is a theorem of subsumption yes
24.06.18 00:34:46<stoopkid> this isn't a theorem it's a definition
24.06.18 00:35:01<dmiles> well ok.. yes it is axiomitized :P
24.06.18 00:35:22<dmiles> but i mean i not heard of subsumption that TC doesnt hold
24.06.18 00:35:46<stoopkid> ah
24.06.18 00:36:12<stoopkid> i think you're thinking of the fact that because subsumption is transitive, the subsumption relation is its own transitive closure
24.06.18 00:36:48<dmiles> well it has in it the same properties of aritmetics "<" sign
24.06.18 00:36:55<stoopkid> "but i mean i not heard of subsumption that TC doesnt hold" <-- this actually doesn't mean anything
24.06.18 00:37:30<stoopkid> you might say "such that transitivity doesn't hold"
24.06.18 00:37:37<dmiles> i mean i not heard of subsumption overt "<" that TC doesnt hold
24.06.18 00:38:08<stoopkid> yes ok so, "well it has in it the same properties of aritmetics "<" sign"
24.06.18 00:38:19<stoopkid> what do we know about "<" ? it's transitive
24.06.18 00:38:44<stoopkid> we can express this in FOL
24.06.18 00:39:17<stoopkid> what we *can't* express in FOL (apparently) is that  "<" is the transitive closure *OF* the successor relation
24.06.18 00:40:11<stoopkid> we can express that "<" subsumes the successor relation, we can express that "<" is transitive, what *can't* express is that "<"  is the *minimal* binary relation (out of all possible binary relations) that satisfies these properties
24.06.18 00:40:17<dmiles> right tranitivity ussualyl happens over "<" otherwise an inconsistency might happen when used
24.06.18 00:40:35<stoopkid> ok so there's a difference between transitivity and transitive closure
24.06.18 00:40:36<dmiles> just like implication requires Transitivity over Propositional object sorts
24.06.18 00:40:57<HMCa> 9 hrs now... lol
24.06.18 00:41:34<dmiles> though the TC i often see talked about in here is symetric reflexive transitvity.. which is about equivalence
24.06.18 00:41:51<dmiles> which no one does TC that way
24.06.18 00:42:21<dmiles> they to the equality relation and bi-equivalence that way onl;y
24.06.18 00:43:00<dmiles> anitsymetric trasitivity allows closures
24.06.18 00:43:12<dmiles> antisymetric that is
24.06.18 00:43:45<dmiles> symmetric transiutivity is jsut an abhorrent testcase we put provers thru
24.06.18 00:44:20<dmiles> since one cant even make a TC with it!
24.06.18 00:44:51<dmiles> TC requires a segments on uni-directionality
24.06.18 00:45:47<dmiles> what makes relation TC "special" like "time-segment-tc" is that you can compare point agaisnt segments.. segments against segments
24.06.18 00:46:19<dmiles> instead of Hekin that can only compare points to points
24.06.18 00:48:05<stoopkid> i don't understand what you're saying at all
24.06.18 00:48:08<dmiles> the ability to compare the shady areas of segments overlapping segmnets with such overlaps can be very very small
24.06.18 00:48:18<stoopkid> who said anything about symmetric and reflexive
24.06.18 00:48:40<stoopkid> and what do either of those things have to do with the transitivity's closure?
24.06.18 00:48:57<dmiles> i am.. since i've notice systemically HMCa and examples in here of TC use symmetric 10 times out of 10
24.06.18 00:49:06<stoopkid> ?
24.06.18 00:49:16<stoopkid> show me one example 1 time out of ever?
24.06.18 00:50:50<dmiles> https://pastebin.com/3Emabkaq
24.06.18 00:51:08<stoopkid> ok so
24.06.18 00:51:18<stoopkid> you link a pastebin that has nothing to do with transitive closure :P
24.06.18 00:51:40<dmiles> ok.. i'll did back to the last URL HMCa gave me
24.06.18 00:52:01<dmiles> where it was  reflexxive and symmetric both!
24.06.18 00:52:19<stoopkid> ok
24.06.18 00:52:31<stoopkid> good luck
24.06.18 00:53:09<stoopkid> if he linked such a thing, it wasn't here, you know if he did i would've been there asking him these same questions right?
24.06.18 00:53:17<stoopkid> and i wasn't :)
24.06.18 00:53:31<dmiles> naw it was the one he wrote for me
24.06.18 00:54:53<HMCa> iirc it was just the standard formulation
24.06.18 00:54:59<HMCa> nothing special
24.06.18 00:57:01<dmiles> it was general propositional equality (without univalence/HoTT) essentially encapsulates all the *paths* in this graph, chained up by reflexivity, symmetry, and transitivity rules for equality
24.06.18 00:57:49<stoopkid> ok?
24.06.18 00:57:59<dmiles> it was in 2017 .. right?
24.06.18 00:58:25<stoopkid> propositional equality is reflexive, symmetric and transitive yes; what does that have to do with transitive closure?
24.06.18 00:58:40<stoopkid> (or expressing it in FOL)
24.06.18 00:59:03<dmiles> HCMa whated my to express TC that was symmetric
24.06.18 00:59:26<dmiles> Reflexive is fine
24.06.18 00:59:44<stoopkid> ok, so next question
24.06.18 01:00:01<dmiles> ok i am not finding last years channel logs
24.06.18 01:00:25<stoopkid> what does whatever HMCa wanted you to express last year about something that's not transitive closure have to do with transitive closure that we're trying to express now?
24.06.18 01:00:43<HMCa> dmiles: I hope they are not lost?!?
24.06.18 01:00:48<dmiles> you mean maybe it was a differnt kind of TC?
24.06.18 01:01:18<dmiles>  Sun Dec 31 05:14:25 2017 is where the current page starts
24.06.18 01:02:21<HMCa> iirc i linked standard formulations for both TC and isomorphism, and probably a few others
24.06.18 01:02:59<HMCa> redfish64: any chance that you still have the old logs handy?
24.06.18 01:03:39<HMCa> we should be making sure those all are well preserved for both posterity and transparency
24.06.18 01:03:50<stoopkid> dmiles: transitive closure only refers to one thing, there aren't any different kinds
24.06.18 01:04:03<HMCa> I know i have complete logs for zennet, at least, heh
24.06.18 01:04:22<dmiles> stoopkid: here it the TC i am refering to https://books.google.com/books?id=CRbCXdGZgC4C&pg=PA143&lpg=PA143&dq=taxonomic+closure&source=bl&ots=PdnE9oSJSB&sig=UTd8WonrHY4_KjaDn4c6Kn4EOZA&hl=en&sa=X&ved=0ahUKEwiVhavpwuvbAhWD0FQKHQPBAXIQ6AEIYTAK#v=onepage&q=taxonomic%20closure&f=false
24.06.18 01:04:59<dmiles> they are more often in relations to qualitative and quenatitaive segments
24.06.18 01:05:28<HMCa> taxonomy != transitivity
24.06.18 01:05:40<dmiles> dont look at the yellow words
24.06.18 01:05:59<stoopkid> HMCa: i'll see what me and koo can dig up from editable-koo, there might be some older editable-koo logs that we need to add in from back when it was on/off for a while & on different VPSs etc..
24.06.18 01:06:30<dmiles> the reason i gotten paid to implenent TC so many times over the years is ontologists need TC
24.06.18 01:07:04<HMCa> dmiles: can you point out which words there will, when looked at, define transitive closure?
24.06.18 01:07:13<dmiles> especially when attributes become concatentative
24.06.18 01:08:04<dmiles> with respect to the transitive closure of the isa-relations
24.06.18 01:08:34<dmiles> the system is always required to learn the complete transitive claosure
24.06.18 01:08:49<dmiles> in order to do the most simplistic description logic tasks
24.06.18 01:09:34<dmiles> it turns out this is jsut as important for blending sub features of quantity segmentrs
24.06.18 01:10:04<dmiles> or comparing first order time segments
24.06.18 01:10:12<HMCa> so... "no"?
24.06.18 01:11:40<dmiles> seriously,you are saying the taxiomoic closure and your TC is somehow differnt?
24.06.18 01:12:36<HMCa> it isn't *my* transitive closure, and Fagin said it - not me.
24.06.18 01:12:37<HMCa> XD
24.06.18 01:13:29<stoopkid> i don't see anywhere that it says "taxonomic closure"
24.06.18 01:14:01<dmiles> we didnt always have the internet
24.06.18 01:14:13<dmiles> when we studied these things  :)
24.06.18 01:15:19<dmiles> oh there was an NSA leak.. I can give it to you there
24.06.18 01:15:47<stoopkid> ?
24.06.18 01:15:48<HMCa> I'm not sure what the internet has to do with orders of logic
24.06.18 01:15:59<dmiles> it was the systenm i built for them became opensrc
24.06.18 01:16:29<dmiles> where one of my supervsisors tested our ability to do taximonic closure and transitive clausre
24.06.18 01:16:42<stoopkid> can you define either of these terms?
24.06.18 01:17:47<HMCa> let's simplify the whole question...
24.06.18 01:17:48<dmiles> taxonomic closure is defined as when sumations along two transitive graphs intersect
24.06.18 01:17:59<HMCa> dmiles: do you believe Fagin was wrong?
24.06.18 01:20:14<dmiles> FO(TC) is *required* for any sane pure unsorted FOL
24.06.18 01:20:39<HMCa> uhh... FO(TC) is not "pure fol" at all
24.06.18 01:20:45<stoopkid> ^
24.06.18 01:21:00<HMCa> hence the "(TC)" in the name...
24.06.18 01:21:02<dmiles> you cant make "sorts" happen over existentials unless you have FO(TC)
24.06.18 01:21:09<dmiles> so
24.06.18 01:21:31<stoopkid> there is no "so", they are two different systems
24.06.18 01:21:48<dmiles> i am have been ttrying to explain for a while how we turn basic FO into FO(TC)
24.06.18 01:21:59<HMCa> that's easy, we add TC
24.06.18 01:22:08<HMCa> again... hence the name.
24.06.18 01:22:48<HMCa> FO(TC) is strictly more expressive than FOL, and strictly less expressive than SOL...
24.06.18 01:23:01<HMCa> but... should any of that be interesting?
24.06.18 01:23:11<dmiles> and who says that?
24.06.18 01:23:50<stoopkid> FO(TC) is at least as expressive as FOL, trivially
24.06.18 01:24:05<stoopkid> assuming FOL can't express transitive closure, then FO(TC) is strictly more expressive
                 <HMCa> everyone who understands what we're even talking about here when we say "orders" I'd assume
24.06.18 01:24:19<HMCa> ...
24.06.18 01:24:30<dmiles> well i suppose i dont
24.06.18 01:24:33*** Part: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: [No reason given]
24.06.18 01:25:44<HMCa> also, the complexity hierarchy
24.06.18 01:26:01<HMCa> XD
24.06.18 01:26:22<stoopkid> well, tbh i'm still working through some of the details of the separations and haven't proved these separations fully myself
24.06.18 01:27:04<HMCa> a) I guess I shouldn't have jumped in, sorry
24.06.18 01:28:33<HMCa> b) I guess I assumed we could have a mature discussion instead of throwing our toys...
24.06.18 01:28:48<HMCa> ... I'm not sorry for B.
24.06.18 01:41:26<HMCa> stoopkid: complexity is complex, I guess
24.06.18 02:02:33<stoopkid> so, any statement that's equivalent to the disjunction of an infinite set of pairwise-independent FOL statements is not FOL-expressible, according to the compactness theorem
24.06.18 02:03:08<stoopkid> pairwise-independent meaning, for any two statements X,Y in the set, there are models of both X ^ ~Y and Y ^ ~X
24.06.18 02:04:28<HMCa> I just heard that Koko passed
24.06.18 02:04:43<stoopkid> who's koko?
24.06.18 02:05:08<stoopkid> ah, that sucks
24.06.18 02:05:26<HMCa> this hour has been an emotional rollercoaster, heh
24.06.18 02:06:38<HMCa> we probably learned more about ourselves from that silly ape than any single animal prior, imo
24.06.18 02:08:14<HMCa> brb
24.06.18 02:51:39<HMCa> backish
24.06.18 03:00:05<HMCa> stoopkid: because the models "run away" into an infinite powerset?
24.06.18 03:00:22<HMCa> sorry, only just now got to thinking about what you said :-)
24.06.18 03:02:04<stoopkid> let's say the infinite disjunction is P, then the negation is an infinite conjunction
24.06.18 03:02:34<stoopkid> an infinite conjunction of finite FOL statements*
24.06.18 03:03:11<stoopkid> you can conjoin P with this infinite conjunction, and you have an FOL theory (assuming P is FOL-expressible, which is what we'll be refuting)
24.06.18 03:04:33<stoopkid> this theory obviously has no models, because it's essentially P ^ ~P, but it's not inconsistent because no finite subset of it is inconsistent
24.06.18 03:05:23<stoopkid> every finite subset of it has a model by the assumption of the pairwise-independence of the disjuncts of P
24.06.18 03:05:44<stoopkid> therefore by compactness, the full theory must have a model, which is a contradiction...
24.06.18 03:07:15<HMCa> yes, that's a good way to say the same thing. ;-)
24.06.18 03:07:28<stoopkid> possibly
24.06.18 03:12:16<stoopkid> so would you agree that this implies that you can't reduce arbitrary infinitely-many-sorted FOL theories to unsorted FOL theories without at the very least changing the models of the theories?
24.06.18 03:13:25<stoopkid> specifically because this would rule out the ability to express the infinite disjunction that states that each object is in one of the sorts, or an equivalent statement
24.06.18 03:14:59<HMCa> hrmm... I'm 100% on board until you get to "or an equivalent statement"... I'll have to think about that...
24.06.18 03:15:37<HMCa> I agree wrt "equivalent to this approach to lowering"
24.06.18 03:16:20<HMCa> but I'll have to think as to if it would apply for *any* lowering
24.06.18 03:16:56<HMCa> (ironically, dmiles responded more or less the same way iirc?)
24.06.18 03:16:57<HMCa> heh
24.06.18 03:17:53<HMCa> my gut would be that any approach to lowering will hit (in effect) the same snag
24.06.18 03:20:53<HMCa> if we allow the statements themselves to be infinitely long, it seems to have some funny consequences
24.06.18 03:21:42<stoopkid> well if we allow the individual statements of the theory to be infinitely long then we break compactness and go at least above FO+TC
24.06.18 03:23:28<HMCa> well, this is why "funny" - it becomes a question of relative sizing of infinities... but yes, in general it breaks compactness
24.06.18 03:26:25<stoopkid> so when we say that unsorted FOL is equivalent in expressiveness to many-sorted FOL, we may or may not only mean finitely-many-sorted FOL
24.06.18 03:31:36<HMCa> often I see that it seems to be taken as assumed that "many" means "finitely many", yes
24.06.18 03:33:18<stoopkid> so this is bit problematic with the common explanation that henkin semantics is essentially many-sorted FOL and therefore equivalent to FOL because of the assumed equivalence of unsorted & many-sorted FOL
24.06.18 03:33:51<HMCa> seems there are some details to be found in work on omega-categories, I'll have to look into that
24.06.18 03:33:57<stoopkid> henkin semantics is essentially an infinitely-many-sorted FOL, with a specific interpretation of its sorts
24.06.18 03:34:54<HMCa> a cursory examination seems to indicate that it is known that finitely-many-sorted-FOL is not ewuivalent to infinitely-many-sorted-FOL
24.06.18 03:35:03<HMCa> so you're not wrong there, at least
24.06.18 03:35:13<HMCa> *equiv
24.06.18 03:36:03<HMCa> I would call henkin a "potentially-infinitely-many-sorted FOL" heh
24.06.18 03:38:18<stoopkid> well, i'm including potentially empty sorts (i.e. this doesn't rule out potentially only having defined relations at a finite number of arities)
24.06.18 03:41:26*** Join: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109, (unauthenticated): 5.29.152.109 - http://webchat.freenode.net)
24.06.18 03:42:42<stoopkid> here I can capture everything but the disjointness of the potentially-infinite collection of sorts: https://pastebin.com/PBZYQFnh
24.06.18 03:43:21<stoopkid> here I can capture everything but the potential for sorts to be empty: https://pastebin.com/3Emabkaq
24.06.18 03:45:36<nilli> hi stoopkid
24.06.18 03:45:50<nilli> in the middle of something?
24.06.18 03:45:57<stoopkid> hey nilli
24.06.18 03:46:02<stoopkid> not really
24.06.18 03:47:10<nilli> I wanted to answer you about somthing that you said but i cant find it :)
24.06.18 03:50:53<stoopkid> not sure, the thing about mutual recursion maybe?
24.06.18 03:51:54<nilli> yes...you asked if I think that it can work for objects .
24.06.18 03:53:02<nilli> that thing i expressed as "relationship"  and I see that you call it mutual recursion
24.06.18 03:55:34<nilli> I would keep my term "relationship" becouse is more accurate in terms of describing the state between two . in case of two players its a dynamic state
24.06.18 03:56:16<nilli> and what I was toiling to describe it that dynamic state.
24.06.18 03:57:03<nilli> between object we call that ratio.
24.06.18 03:57:35<nilli> by the way in Hebrew the two words are the same word
24.06.18 03:59:11<nilli> only that relationship is a continues active mode. and ratio is a given state.
24.06.18 04:02:27<HMCa> hi nilli
24.06.18 04:02:49<HMCa> "relationship" is another of those "overloaded" words :-)
24.06.18 04:04:36<nilli> hi HMCa. yes they are but we should be able to deconstruct it to the specific term we need in the world we build
24.06.18 04:05:56<HMCa> stoopkid: apparently even countably-infinitely-many-sorted-fol and uncountably-infinitely-many-sorted-fol would be distinct, too, heh
24.06.18 04:06:14<HMCa> i'm not sure if that is ibteresting or not yet, though
24.06.18 04:06:17<HMCa> *in
24.06.18 04:09:10<nilli> HMCa let me start with a question. are you interested in this talk at all?  here on the channel? anywhere else?
24.06.18 04:09:33<HMCa> what talk, in particular, do you mean?
24.06.18 04:12:54<nilli> that of the last line:  "yes they are but we should be able to deconstruct it to the specific term we need in the world we build"
24.06.18 04:13:23<HMCa> I don't know how to interpret that line.  :-)
24.06.18 04:13:56<HMCa> so, I find that interesting, in and of itself, if that means anything wrt your question
24.06.18 04:13:59<HMCa> heh
24.06.18 04:14:14<nilli> I would accept it as not being "interesting" for you here or anywhere....even before I answer your last line...
24.06.18 04:14:48<HMCa> what is your meaning of "the world we build"?
24.06.18 04:16:38<nilli> well you are calling in autonomic as of now, and what I try to define may not apply directly to that stage of the project. but id does for the grand vision of it which it the "world we build"
24.06.18 04:16:48<nilli> calling it
24.06.18 04:17:53<HMCa> hrmm, the construct is a "world-building tool"... not, itaelf, a "world" in any sense afaict
24.06.18 04:18:00<HMCa> *itself
24.06.18 04:20:02<nilli> well yes ...the that is the closest you get to build a world. but is what I mean then
24.06.18 04:20:30<HMCa> ?
24.06.18 04:20:37<HMCa> can you rephrase that?
24.06.18 04:22:13<nilli> well one can not build a world, other then his/her own inner world. any shared world is build with others and thus need a common set of tools to build it
24.06.18 04:23:00<nilli> so when I say build a world I mean create the means to do so...
24.06.18 04:23:43<HMCa> well, I suppose that would depend upon the definition of "world" which it sounds like we have different definitions for :-)
24.06.18 04:24:10<nilli> let see..what is yours?
24.06.18 04:25:15<HMCa> "a collection of modal statements"
24.06.18 04:27:40<HMCa> what's yours?
24.06.18 04:27:44<nilli> .... that is communicated... existed... as? between what or who?
24.06.18 04:28:17<HMCa> ^ all irrelevant
24.06.18 04:28:57<HMCa> the collection doesn't even need to be communicated... or exist in any real and actualized way... to constitute a world.
24.06.18 04:29:47<nilli> I guess that is mine. since a statement can not be without being express as something
24.06.18 04:29:53<HMCa> In the same way that rdf asserts "all lists exists" I would assert "all worlds exist" too :-)
24.06.18 04:30:23<nilli> in potential all world exist . I agree on that
24.06.18 04:31:00<nilli> but disagree with you when it comes to one define world different then other define world
24.06.18 04:31:13<nilli> defined world
24.06.18 04:31:27<HMCa> ?
24.06.18 04:31:35<HMCa> again, not sure how to interpret
24.06.18 04:32:00<HMCa> anyway, what are you really asking, exactly?
24.06.18 04:34:03<nilli> everything as whole exist as such. but if we want to define anything separate from the whole we then have to contemplate what is it that separating 'medium" in which it is expressed
24.06.18 04:34:20<nilli> so that is all that I deal with
24.06.18 04:34:29<HMCa> again, not sure how to interpret
24.06.18 04:35:27<HMCa> but I assume that it can;t be intended as an answer to my question, in any case, as I can at lewst discern that it is not a question!
24.06.18 04:35:30<HMCa> :-)
24.06.18 04:35:37<HMCa> *least
24.06.18 04:36:21<nilli> lI give up.... :)
24.06.18 04:38:45<HMCa> on asking your question?
24.06.18 04:40:15<nilli> on making myself clear to you (but not really ... I just wanted to try out that statement)
24.06.18 04:41:42<HMCa> if you want to make yourself clear then you have to either use standard vernacular or else fully define your own
24.06.18 04:43:41<nilli> I would have to fully define mine. but you will need to want that. im not sure that you do (not blaming you on that the slightest bit)
24.06.18 04:44:33<nilli> the only reason in the world for you to make that effort is if for some reason you do think its valuable for you
24.06.18 04:45:59<HMCa> it would certainly be easier and more concise if you used the same nomenclature as the rest of us, but I really don't have a preference - I only care that you do one or the other, otherwise communication isn't really possible
24.06.18 04:46:39<nilli> So maybe my first question is do you feel that it is valuable for you to make that effort trying to understand me ?
24.06.18 04:47:28<HMCa> I'm not sure how I could know the value until after I do understand...
24.06.18 04:47:43<HMCa> so I can obly answer: "possibly"
24.06.18 04:47:45<HMCa> *only
24.06.18 04:48:31<nilli> * by the way im sure you realize that I spent years learning enough to understand you. but there are things I will not "give in" learning... (let me explain that )
24.06.18 04:49:25<HMCa> (probably you will yet spend many years more, I'd suspect!)
24.06.18 04:49:30<HMCa> ;-)
24.06.18 04:50:35<nilli> I would only as part of the work already, not as preparing to do the work
24.06.18 04:52:40<nilli> which means that you will have to do as much effort trying to understand what I say as I would do to understand what you say. ( not a great deal I know)
24.06.18 04:54:54<nilli> ...and the only way to do it is really believing I have something that is important for you... (again many reason for you to not believe that)
24.06.18 05:01:08<HMCa> this all seems... like some "beside the point truism"
24.06.18 05:01:25<HMCa> (with a catch22 thrown in at the end, just for fun)
24.06.18 05:02:09<nilli> no, is very concrete.
24.06.18 05:02:23<HMCa> also, we again will be running short on time soon
24.06.18 05:02:52<HMCa> i didn't say anything of it was not concrete
24.06.18 05:04:22<nilli> I know :)  we get here the little prince and the fox thingi
24.06.18 05:07:27<nilli> so what do you want to do? should i come back tomorrow (not sure who is the fox and who is the prince...)
24.06.18 05:08:49<HMCa> (maybe we are both, both)
24.06.18 05:09:28<nilli> yes that is what i think too
24.06.18 05:09:32<HMCa> you should come back again whenever you are able, and go again whenever you must.
24.06.18 05:10:32<HMCa> as for what I want you to do... many things...
24.06.18 05:10:59<HMCa> but mostly I just want you to understand the construct :-)
24.06.18 05:12:04<nilli> do you understand it fully?
24.06.18 05:13:37<HMCa> noone can hope to understand it fully before it is bootstrapped... I only understand its' construction. :-|
24.06.18 05:14:21<HMCa> (I feel that I partially understand its' potential, as well, but how could I be sure, yet?)
24.06.18 05:15:24<nilli> from stoopkid I get it that somethings are not clear regarding how to make them
24.06.18 05:17:40<nilli> (I feel that much of what need to be learned is something others will do much faster since they know much of it. I will not be much help in doing it ..its a waste of time teaching me that)
24.06.18 05:19:46<HMCa> as I've said here many times before, I never consider giving explanation of it to be wasted time.
24.06.18 05:20:29<HMCa> at worst it is occasionally inconvenient, but never just a loss.  :-)
24.06.18 06:29:15<nilli>  i dont know if I can do that...
24.06.18 06:33:39*** Quit: nilli (051d986d@gateway/web/freenode/ip.5.29.152.109) left #AutoNomic: Ping timeout: 260 seconds
24.06.18 11:55:21<stoopkid> i agree that if our conclusion about finitely-many-sorted FOL not being able to express countably-infinitely-many-sorted FOL is correct then countably-infinitely-many-sorted FOL would not be able to express uncountably-infinitely-many-sorted FOL
24.06.18 11:56:27<stoopkid> assume you had countably-infinitely-many-sorted FOL, and assume in each of the countaby infinitely many sorts, we could simulate countably-infinitely-many more sorts
24.06.18 11:56:52<stoopkid> this would still only give us N*N sorts, so still countable
24.06.18 11:57:15<stoopkid> the only way we could get more is by making one of the sorts simulate uncountably many sorts
24.06.18 11:57:48<stoopkid> but by assumption, we can't even make one of the sorts simulate *countably*-infinitely many sorts in the first place
24.06.18 11:58:20<stoopkid> thus, no reduction
24.06.18 17:51:57*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
24.06.18 17:52:21*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.06.18 19:53:16*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
24.06.18 21:54:06<HMCa> logicmoo: wb
25.06.18 00:11:27<stoopkid> on the relation between unsorted FOL and infinitely-many-sorted FOL: https://math.stackexchange.com/a/2830959/404509
25.06.18 00:22:31<HMCa> interesting
25.06.18 00:23:25<stoopkid> appears i'm correct about the inexpressibility of that infinite disjunction in FOL, so the answer is essentially trying to provide a way to side-step having to do that
25.06.18 00:23:52<stoopkid>  "The elements that are not in any sort are irrelevant to sentences of the form ϕ∗, because the quantifiers in ϕ∗ are explicitly tied to particular sorts. "
25.06.18 00:24:02<HMCa> yes, and note that it does still change the models, but also preserves equisat
25.06.18 00:24:06<HMCa> which is cute
25.06.18 00:25:06<stoopkid> yes, so apparently i'm actually stuck on a question "what are the possible things that 'express' can mean"
25.06.18 00:26:42<HMCa> seems there's a need to distinguish "express equisatisfiably" from "express equivalently"...
25.06.18 00:26:52<HMCa> (at least)
25.06.18 00:51:58*** Quit: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
25.06.18 00:58:33*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
25.06.18 00:59:17<HMCa> stoopkid: we should talk about this 21e8 block, probably
25.06.18 01:08:03<stoopkid> amiller seems to think otherwise: https://futurism.com/bitcoin-conspiracy-21e8/
25.06.18 01:13:13<HMCa> not exactly what he says, lol ;-)
25.06.18 01:13:26<HMCa> markets reacted to this block...
25.06.18 01:13:52<HMCa> both to the block itself, and then to thr news/discussion of it
25.06.18 01:53:30*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
25.06.18 02:02:56*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
25.06.18 05:25:51*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
25.06.18 06:03:36<koom> editable-log for #autonomic starts on the new year, and thats probably when i set it up. And then there are the gaps when it was glitching
25.06.18 06:05:15<koom> and at this starting point there is "Log: https://matrix.to/#/#autonomic:matrix.org" in the topic, so i suppose me and stoop could dig out some more material from matrix, but matrix still doesnt export logs, the only way would be to put a weight on my pgup key and leave it overnight and see....
25.06.18 11:29:21<stoopkid> what i'm gathering is that the commonly accepted definition of equivalence of theories T1 and T2 from two different systems of logic is if there is a way to differentiate "structure symbols" from "statement symbols" in both T1 and T2 and for each model of T1, there is a way to specify a subset of that model, and likewise for T2, such that for each model M of T1, there is a "statement-symbols"-isomorphism between the
25.06.18 11:29:22<stoopkid> specified subset of M and the specified subset of some model of T2, and vice versa
25.06.18 13:13:20*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 255 seconds
25.06.18 13:19:09*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
25.06.18 17:07:33*** Join: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45, (unauthenticated): 77.126.56.45 - http://webchat.freenode.net)
25.06.18 17:33:21*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Ping timeout: 264 seconds
25.06.18 18:15:38<daemoz> What exactly seperates FOL from SOL? I can't seem to find an explanation that I comprehend.
25.06.18 18:17:04<stoopkid> daemoz: SOL adds the ability to quantify over sets of objects & relations on objects etc.. instead of just FOL quantification over objects
25.06.18 18:18:34<daemoz> FOL has no sets of objects or just can't quantify over them? (quantify in this sense is like... universal quantification?)
25.06.18 18:19:03<stoopkid> just can't quantify over them, and right like universal/existential quantification
25.06.18 18:22:56<daemoz> A relation is like a function that takes objects (or sets of objects in SOL) and returns a truth value?
25.06.18 18:25:20<stoopkid> an n-ary relation on a set A is a subsets of A^n , so you could say it's like a function that takes an n-tuple in A^n and returns a truth value indicating whether or not the relation holds for the objects in that n-tuple
25.06.18 18:25:35<stoopkid> is a subset* of
25.06.18 18:30:56<daemoz> Okay. And what does A^n mean? Thanks btw
25.06.18 18:31:38<stoopkid> ah, cartesian product of A with itself n times, so the set of lists of length n where the objects are chosen from A
25.06.18 18:32:57<daemoz> Got it
25.06.18 22:44:21<HMCa> aren't "sets of objects" and "relations on objects" kinda the same thing? :-)
25.06.18 22:45:38<daemoz> because relations are sets?
25.06.18 22:48:08<HMCa> well, more like because sets are relations, imo... but yes
25.06.18 22:50:59<daemoz> how are all sets relations?
25.06.18 22:51:25<HMCa> daemoz: when we say something like "x : X" (read "x in X" or "x a X") for set membership we can thibk of it like an unary predicate relation of "X(x)"
25.06.18 22:51:26<HMCa> *think
25.06.18 22:52:05<daemoz> "X(x)" as in a predicate that returns true if x is in the set X?
25.06.18 22:53:08<HMCa> I try to avoid using the (overloaded) word "returns" in this context
25.06.18 22:53:27<HMCa> I'd say "evaluates as" or "can be interpreted
25.06.18 22:53:28<HMCa> "
25.06.18 22:54:01<daemoz> Okay, that makes sense.
25.06.18 22:54:27<daemoz> Been seeing that around a lot 'Set-Name(set-element)' so good that I understand its meaning now
25.06.18 22:55:24<daemoz> HMCa: Can you briefly explain to me the significance of equality in logic, what it generally means and perhaps something to read?
25.06.18 23:00:24<HMCa> hrmm, give me a few
25.06.18 23:00:53<daemoz> no worries, I apologize for the suddeness
25.06.18 23:48:54<HMCa> daemoz: still around?
25.06.18 23:53:06<daemoz> HMCa: yea as of now
25.06.18 23:53:16<daemoz> oh that was recent
25.06.18 23:54:32<HMCa> hehe
25.06.18 23:57:32<HMCa> ok, so in pure fol equality means more or less nothing, heh
25.06.18 23:58:52<HMCa> the only real meaning of equality in pure fol is coimplication... so "x=y" is taken as "(x and y) or (!x and !y)"
25.06.18 23:59:28<HMCa> but that is not so interesting, and probably not what you really mean to ask about, right?
26.06.18 00:03:48<daemoz> hmm, that is interesting. I suppose I am curious about structural equality(?) and basically how that idea works
26.06.18 00:05:51<HMCa> "structural equality" in the type-theory sense?
26.06.18 00:06:31<daemoz> Maybe that is the wrong term. I hear this idea tossed around about equality in relation to logic and I am not understanding it's significance or mechanism.
26.06.18 00:06:47<daemoz> not to logic as a whole but perhaps terms in the logic
26.06.18 00:09:53<daemoz> Perhaps give me some time to narrow my question, I am realizing it is too broad to answer.
26.06.18 00:10:01<daemoz> ambiguous, also
26.06.18 00:10:03<HMCa> hehe
26.06.18 00:10:31<HMCa> yes, a bit
26.06.18 00:19:01<daemoz> Hm, yeah I cannot seem to find what had me asking that question.
26.06.18 00:19:24<daemoz> I feel a little unsure of what to study next, and if you're still around could you help me pick an area?
26.06.18 00:21:48<HMCa> hrmm, well what did you study last?
26.06.18 00:23:21<daemoz> A general survey of different types of logic and how they differ.
26.06.18 00:23:30<daemoz> I'm looking for missing foundations.
26.06.18 00:24:56<daemoz> I've been looking at the rdf paper stoop linked too.
26.06.18 00:26:32<HMCa> "missing foundations"?
26.06.18 00:27:54<daemoz> Things I need to know to help build this system, there's lots I don't know so I guess I just need anywhere that's important that I'm ignorant about.
26.06.18 00:31:32<HMCa> ok, so probably mltt :-)
26.06.18 00:32:34<HMCa> learn agda or idris
26.06.18 00:37:30<daemoz> Mkay, yeah that's what I should be doing. I think I was getting lost in the noise, haha. Thanks!
26.06.18 00:40:42<HMCa> :-)
26.06.18 00:40:44<HMCa> np
26.06.18 00:41:46<HMCa> mind you you'll likely get a small way into mltt stuff and find that you're suddenly not lost in the noise enough for it yet, hehe
26.06.18 00:42:36<daemoz> Hopefully this buzz in my head is already loud enough for it xD
26.06.18 00:44:22-SaslServ- koom!~sirdancea@37-48-4-80.tmcz.cz has just authenticated as you (sirdancealot)
26.06.18 00:44:35*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
26.06.18 01:13:35<nilli> hi
26.06.18 01:15:03<nilli> HMCa still around?
26.06.18 01:21:23<HMCa> somewhat
26.06.18 01:22:43<nilli> 25.06.18 01:13:13<HMCa> not exactly what he says, lol ;-) <--- so not exactly that : "That means you’d expect a block with the combination of 21e8 about once a year"
26.06.18 01:31:29<HMCa> sure, what is interesting is not the block itself
26.06.18 01:39:53<nilli> so what is interesting regarding that?
26.06.18 01:47:26<HMCa> the market impact(s)
26.06.18 01:53:37<nilli> that is not so interesting. in the minute people start talking about something markets reacts.
26.06.18 01:54:10<nilli> people talking is the market...
26.06.18 01:58:11<nilli> if anything the more interesting question is why this time ?
26.06.18 01:58:49<nilli> ...was noticed and made waves
26.06.18 02:02:50<nilli> but that is not something that interesting either. more interesting is if its really random or somehow can be intentional. what do you say?
26.06.18 02:12:51<HMCa> the market reacted before the talking
26.06.18 02:25:11<nilli> what do you mean? you could attribute any reaction to anything, many things happened at that same moment and was not talked bout.
26.06.18 02:36:37* HMCa shrugs
26.06.18 02:36:57<HMCa> maybe I'm the only one to find it interesting :-)
26.06.18 02:38:06<HMCa> anyway, I gtg
26.06.18 02:43:59<nilli> I got excited about it  only when realized that I said it first, yet but very close to it. (blockchain and theory of everything).
26.06.18 02:46:17<nilli> *yet not but
26.06.18 02:48:32<nilli> whichever way it means that I am in the consensus... lol
26.06.18 02:55:25*** Quit: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45) left #AutoNomic: Ping timeout: 260 seconds
26.06.18 03:13:03*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
26.06.18 03:46:12<nilli> Soo..let me elaborate a bit on my last statement
26.06.18 03:48:11<nilli> lets assume that the creation of that block indeed was not intentional,
26.06.18 03:50:35<nilli> we can learn a lot from it since that same number was created before, once a year in average, if I get it right
26.06.18 03:52:56<nilli> I need to look at the detail of it in terms of  verifying what was said and see the numbers for myself (would like it if can be pointed at it)
26.06.18 03:53:03<nilli> but lets assume it is true
26.06.18 03:57:01<nilli> then the chain of events from my perspective is incredible and I need to pay close attention to it.
26.06.18 03:57:44<nilli> if also the markets reacted before then it's even more incredible.
26.06.18 04:00:32<nilli> I was speaking about the blockchain consensus principles based on POW  being both the foundation of the theory of everything and the proof for it a few hours before that famous block
26.06.18 04:01:45<nilli> the market as HMCa noticed reacted before the talking
26.06.18 04:03:00<nilli> and the fact that the talking actualy happened this time not on other times
26.06.18 04:08:01<nilli> So we still assume that each of the the 4 incidents are random in terms of the time each took place
26.06.18 04:13:43<nilli> for me as one that is realizing 1 of the 4 and HMCa that realize another 1 of the 4 and who ever wrote the tweet realizing 1 of the 4 and the whole market as many individuals realizing 1 of the 4. that is incredible indeed
26.06.18 04:14:34<nilli> more contemplation to come soon  :)
26.06.18 04:14:44<nilli> gtg now
26.06.18 04:19:24*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 260 seconds
26.06.18 05:32:35*** Quit: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
26.06.18 07:00:36*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Remote host closed the connection
26.06.18 07:01:22-SaslServ- koom!~sirdancea@37-48-4-80.tmcz.cz has just authenticated as you (sirdancealot)
26.06.18 07:01:23*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
26.06.18 07:02:56<stoopkid> HMCa: note that the FOL equality you gave in terms of coimplication only holds for propositions, not for objects of the domain
26.06.18 07:08:29<stoopkid> daemoz: when i say structural equality, im usually referring to https://en.m.wikipedia.org/wiki/Isomorphism
26.06.18 07:09:35*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Ping timeout: 256 seconds
26.06.18 07:14:30*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
26.06.18 07:48:25<stoopkid> interesting that coimplication is classically equivalent to biimplication but constructively its a stronger statement
26.06.18 07:54:57<stoopkid> nilli its just basic probabilities
26.06.18 07:55:16<stoopkid> 21e8 is 4 hexadecimal digits
26.06.18 07:56:28<stoopkid> there’s 16^4 = 65536 different combinations of 4 hex digits
26.06.18 07:57:50<stoopkid> theres a block every ~10 mins, that’s 6 blocks an hour, 24 hours a day, 365 days a year, for ~52560 blocks a year (on non-leap-years)
26.06.18 07:59:55<stoopkid> so, it takes just a little over a year to make 65536 blocks
26.06.18 08:04:09<stoopkid> if an event has probability 1/n then intuitively that means that after n trials, the event “probably occurred”
26.06.18 08:05:46<stoopkid> so every 65536 blocks, 21e8 is “probably” the first 4 digits of the id of one of those blocks
26.06.18 08:07:21<stoopkid> and as time goes to infinity, the average duration (in blocks) between each occurrence of 21e8 will tend towards 65536
26.06.18 08:08:04<stoopkid> so, he’s specifically saying that 21e8 is *not* special in this regard
26.06.18 08:19:00<stoopkid> in a range of n blocks, a particular 4-digit hex combination occurs with probability (1 -(65536/65536))^n, so every year it will occur will probability ~0.55, and after 9 years of blocks it would have occured with probability 0.999
26.06.18 08:20:25*** Join: nilli (3edbec58@gateway/web/freenode/ip.62.219.236.88, (unauthenticated): bzq-219-236-88.pop.bezeqint.net/62.219.236.88)
26.06.18 08:20:36<nilli> hi stoopkid
26.06.18 08:21:40<nilli> so when you say 4 digit that includes the 18 0's or not?
26.06.18 08:23:24<stoopkid> just the 4 digits
26.06.18 08:25:40<nilli> so the 0's makes a difference on how we should look at it? more 0's more difficult ?
26.06.18 08:26:41<nilli> and if so should we consider that a coincidence? 18 when the date is 19?
26.06.18 08:28:04<stoopkid> should just be a coincidence, whats the current block difficulty?
26.06.18 08:30:46<nilli> would be more difficult to place after 18 0's then after 3 ?
26.06.18 08:31:07<nilli> than after 3 0's
26.06.18 08:33:34<stoopkid> hold on ill get you some exact figures
26.06.18 08:35:02<nilli> and then also you have c
26.06.18 08:35:22<nilli> then 1e8
26.06.18 08:37:23<nilli> c as speed of light then e8 as unifying theory 1e8 as 18 "pay attention"
26.06.18 08:38:50<nilli> now before I go on with this game let me present you with something to explore deeply
26.06.18 08:45:52<nilli> what are the chances for us (me you and the other 2 or more that read what I just tel you here)) to be aware of all the incidences compare to all of them actualy accruing ...
26.06.18 08:46:55<nilli> and assuming it must be so rear what it means that it actually happening?
26.06.18 08:48:22<stoopkid> its not rare though, so.. im not sure it means anything :)
26.06.18 08:49:28<nilli> and the  final question the chances of  it being uncoordinated , is it greater than being coordinated (at list 2 out of the 4)
26.06.18 08:50:08<stoopkid> i think you need at least 18 0s right now for it to even be a valid block id, and fewest leading zeroes is most probable :)
26.06.18 08:51:02<stoopkid> i bet i can find a block that starts with 17-19 0s and then says 666
26.06.18 08:51:05<nilli> HMCa. that question answers or rather reframing the question regarding conspiracy that we had two days before that block :)
26.06.18 08:51:16<stoopkid> so bitcoin must be the devil’s work :P
26.06.18 08:53:02<nilli> it is funny but in this regard "devil" means intelligence :)
26.06.18 08:55:50<nilli> if the universe is intelligence then you would see rational patterns emerge . now the question is why that appears to us like the devil.
26.06.18 08:57:53<stoopkid> idk i guess people just hate math? heh
26.06.18 09:01:01<nilli> exactly the opposite. math makes them feel safe. but once that pattern is work of intelligence which means "choice making powers" then it become scary
26.06.18 09:01:51<stoopkid> rational patterns do seem to emerge, so there’s that, but so far this 21e8 thing doesnt even seem to present a “pattern” let alone a “rational” one, unless you count the rationality of pure probability theory
26.06.18 09:06:47<nilli>  if the market really reacted before the news spread that may be very interesting but..... opps... never-mind. :)
26.06.18 09:25:00<stoopkid> nilli: sorry got pulled away
26.06.18 09:25:34<stoopkid> idk anything about what the market’s doing :)
26.06.18 09:26:33<stoopkid> most trading is done by AI though right? iiuc?
26.06.18 09:26:53<nilli> yes never mind that  just was playing with it a bit.
26.06.18 09:26:54<stoopkid> maybe the news spread before it spread to humans :)
26.06.18 09:27:34<stoopkid> maybe the AIs are what made it be news for humans in the first place :)
26.06.18 09:28:45<nilli> that solves everything :)
26.06.18 09:29:57<nilli> .....if im also one of these machines
26.06.18 09:31:59<nilli> ... I look better then whathername sophia? I mean in terms of looking
26.06.18 09:32:05<nilli> real
26.06.18 09:32:26<stoopkid> probably does the opposite of solving your problems if you’re not one of the machines, eh?
26.06.18 09:33:10<nilli> what problem?
26.06.18 09:33:26<stoopkid> any of them :)
26.06.18 09:34:51<nilli> lets call us "technology" and we must be that also...so problem solved
26.06.18 09:35:11<stoopkid> hm
26.06.18 09:35:28<stoopkid> maybe i should be asking you “what problem”
26.06.18 09:35:58<stoopkid> from all i can tell this must just mean we go “mo problems”, as they say
26.06.18 09:36:09<stoopkid> got*
26.06.18 09:37:11<nilli> well we did not yet figured out our tech as of yet... so thats the problems we deal with. at least here on this forum.
26.06.18 09:38:33<stoopkid> i dont see how this 21e8 thing solves any of the problems we deal with here :(
26.06.18 09:38:47<nilli> actualy my biggest problem now is to decide whether to get on the plain to NYC on sat or  not
26.06.18 09:39:33<nilli> and you may be able to help with making my mind :)
26.06.18 09:42:35<stoopkid> well if you wanna make a side-trip to baltimore while you’re here, i’ll be happy to go over the current details of the project with you in person
26.06.18 09:43:53<stoopkid> video chat would probably just as effective and more cost-effective though, im assuming
26.06.18 09:45:05<nilli> It is funny since that was part of the quastions
26.06.18 09:48:23<nilli> first of all i am sure that I would be leaning much better if I take a few days and do just that, however I need to feel that I can really learn that
26.06.18 09:49:44<nilli> something that stopped me along the way is assuming I am so far off with what I know that will take too long to catch up
26.06.18 09:50:50<nilli> but if I get lessons face to face I can catch up on things very fast (I thnk)
26.06.18 09:51:59<stoopkid> i could teach you agda/MLTT in a few days in person and the basics of how to prove stuff and program in it
26.06.18 09:52:45<nilli> realy... wow. that may be worth my trip
26.06.18 09:53:15<stoopkid> it would take somewhat longer than that to explain background math & comp sci concepts that explain the broader theory behind it all
26.06.18 09:53:33<stoopkid> (Godels incompleteness and that kind of stuff)
26.06.18 09:55:42<nilli> so saying I am not the fastest learner how long you think we need to get me there
26.06.18 09:56:03<stoopkid> alternatively i could explain the basics of the background theory, like what is FOL, what is SOL, what is MSOL, how model theory and godels incompleteness works
26.06.18 09:56:06<stoopkid> hrm
26.06.18 09:56:28<stoopkid> if you were learning it all in person?
26.06.18 09:57:09<nilli> well not all but enough so we are really on the same page
26.06.18 09:58:55<stoopkid> on the same page about what in particular? :)
26.06.18 10:00:11<stoopkid> for example, me and ohad are on the same page about probably most “basic” logic but then diverge pretty significantly in our interpretations of some of the more advanced stuff
26.06.18 10:01:29<nilli> to the level that you are on the same page...(so I can have interpretations as well :))
26.06.18 10:02:00<nilli> get the basics of all of it
26.06.18 10:03:44<nilli> ....actualy the more I think of it the more I like you offer....
26.06.18 10:03:57<stoopkid> so, to get you to the point that you understand the definitions of things well enough to reach your own conclusions about them? like, what is FOL, SOL, MLTT?
26.06.18 10:04:35<nilli> yes
26.06.18 10:04:48<stoopkid> a few days
26.06.18 10:05:01<nilli> I like that a lot :)
26.06.18 10:05:51<stoopkid> the stuff isnt really complicated its just rarely explained in a simple way and there’s not really a simple way to explain it just over text
26.06.18 10:07:50<nilli> So if I plan to stay for a week we can go over a lot of stuff right?
26.06.18 10:08:19<stoopkid> sure
26.06.18 10:08:39<stoopkid> as much as you can tolerate XD
26.06.18 10:09:15<stoopkid> dealing with pure abstraction for extended periods of time is a little mind-warping sometimes
26.06.18 10:10:35<stoopkid> but, in person its much easier to use concrete examples too, an overall better experience than pure text :)
26.06.18 10:12:02<nilli> wow...ok. let me then rethink my plans and see if I go hop on my flight :)  its sound a great opportunity for me to acutely learn it.
26.06.18 10:12:43<nilli> (I would never sit infront of a pile of books to learn anything)
26.06.18 10:13:09<stoopkid> heh
26.06.18 10:13:36<nilli> learning just by reading i mean
26.06.18 10:14:33<stoopkid> it could probably be explained pretty well with a series of youtube lectures, but i havent really found a good introductory series for it (really any of it) yet
26.06.18 10:15:39<stoopkid> most materials on this stuff (in any format) assume quite a bit of background knowledge, which i think is mostly unnecessary
26.06.18 10:16:40<stoopkid> i was talking to my brother yesterday about how i actually think a lot of this theory should be literally the first thing ever taught in math education once you get to writing down symbols and following symbol manipulation rules
26.06.18 10:17:09<stoopkid> like, kindergarten or earlier
26.06.18 10:18:29<stoopkid> like, before you ever learn about “negative numbers” let alone rationals and reals and imaginaries..
26.06.18 10:18:40<stoopkid> or long division
26.06.18 10:18:58<nilli> well all that schools teach today is just to keep the system from changing
26.06.18 10:19:44<nilli> schools as we know them will be gone soon as well
26.06.18 10:21:57<stoopkid> probably; many people i know are already pulling their kids out of public schools or considering it and most have abandoned the assumption that formal higher education is necessary
26.06.18 10:22:26<stoopkid> but anyway
26.06.18 10:23:44<stoopkid> yea in person it would be almost trivial to explain the stuff, its only because we’re already separated by a barrier of symbolism that it seems complicated
26.06.18 10:24:00<stoopkid> the definitions of the things, i mean..
26.06.18 10:24:22<nilli> so you are in Baltimore? its a train ride from right?
26.06.18 10:24:30<stoopkid> the consequences of those definitions do take quite a bit more mental effort
26.06.18 10:24:31<nilli> from NYC
26.06.18 10:26:08<stoopkid> yea there’s an amtrak between NY and baltimore i think
26.06.18 10:26:45<nilli> (i have no problem with mental effort and mind binding things in particular...that what I think of myself anyway...would be good to refresh that)
26.06.18 10:28:26<stoopkid> sure i just mean the consequences of the definitions, like godels incompleteness, or the theorem that FOL is less expressive than SOL would take much longer to explain
26.06.18 10:29:04<stoopkid> but with a couple days i could at least explain to you the “world” that those theorems are about
26.06.18 10:31:02<stoopkid> such that you could at least understand what the theorems are stating, even if you’re unsure about their validity
26.06.18 10:32:26<nilli> great... so lets look at the calendar do you have any preferences ?.
26.06.18 10:41:13<stoopkid> hrm, no preferences really, although i should say probably the sooner the better, as there’s still a lot of pressure for me to return to at least a regular-paying part-time job soon, which would start whenever i can find it, although im still holding off on that as long as possible to try to make some forward progress on the project while i can thanks to your help, and also finishing my degree if im not working full-time
                 <stoopkid> (which would start in the fall, assuming im not working full-time instead)
26.06.18 10:42:59<stoopkid> so once that starts i wont have much control over my schedule to set out several days to go over all this with you, but right now my schedule’s free, the only other thing ive got going on is autonomic research
26.06.18 10:43:48<stoopkid> (and i wouldnt consider this to be “taking time away from that” either cause we could produce some good documentation materials as a result of this)
26.06.18 10:43:49<nilli> I can get there by Tuesday (july 3rd)
26.06.18 10:47:00<stoopkid> cool :) sounds good
26.06.18 10:50:09<nilli> ok ...let me see that I can make that happens (was telling everyone including myself that im staying since did not ment to go there to do my usual work,)
26.06.18 10:50:27<nilli> will let you know by tomorrow.
26.06.18 10:51:51<nilli> talk to you later then. i gtg now. :)
26.06.18 10:52:57<stoopkid> alright, catch ya later, also if you can think of anything in particular that you know you want me to go over with you then let me know
26.06.18 10:56:39*** Quit: nilli (3edbec58@gateway/web/freenode/ip.62.219.236.88) left #AutoNomic: Ping timeout: 260 seconds
26.06.18 11:40:19-SaslServ- koom!~sirdancea@89.24.48.59 has just authenticated as you (sirdancealot)
26.06.18 11:40:25*** Join: koom (~sirdancea@89.24.48.59, sirdancealot: koo5)
26.06.18 11:46:46<editable-koo>test
26.06.18 11:46:54<editable-koo>ran out of space on the vps, solved
26.06.18 11:47:41<editable-koo>im reading through #zennet logs
26.06.18 11:47:47<editable-koo>about two years ago:
26.06.18 11:47:49<editable-koo>17:02 < HMC_Alpha> you've been stuck on lists for a week now? :-)
26.06.18 11:47:58<editable-koo>:)
26.06.18 11:51:47<editable-koo>11:10 < nilli> I was trying to get on the log to see the conversation. but got an older conversation 
                 <editable-koo>11:11 < naturalog> right i see it now
                 <editable-koo>11:11 < naturalog> a month disappeared!
                 <editable-koo>11:11 < naturalog> but i can fix it
                 <editable-koo>11:11 < nilli> yesssss?????!!!!!
                 <editable-koo>11:11 < nilli> Good, 
                 <editable-koo>11:13 < naturalog> ok the prev log is at tauchain.org/irc.log.back
                 <editable-koo>11:13 < naturalog> ok the prev log is at tauchain.org/irc.log.bak
26.06.18 12:00:37<editable-koo>19:42 < HMC_A> formula Â¬xâš(y â§ Â¬z) would thus be represented in CNF as (Â¬xâšy)â§(Â¬xâš Â¬z)
26.06.18 12:04:50*** Quit: koom (~sirdancea@89.24.48.59) left #AutoNomic: Ping timeout: 245 seconds
26.06.18 13:14:03<HMCa> < stoopkid> it could probably be explained pretty well with a series of youtube lectures, but i havent really found a good introductory series for it (really any of it) yet
26.06.18 13:14:17<HMCa> so record your sessions w/ nilli? :-)
26.06.18 13:42:08<stoopkid> probably a good idea
26.06.18 13:47:09-SaslServ- koom!~sirdancea@89.24.48.59 has just authenticated as you (sirdancealot)
26.06.18 13:47:15*** Join: koom (~sirdancea@89.24.48.59, sirdancealot: koo5)
26.06.18 14:30:56*** Quit: koom (~sirdancea@89.24.48.59) left #AutoNomic: Read error: Connection reset by peer
26.06.18 14:32:20-SaslServ- koom!~sirdancea@37-48-4-80.tmcz.cz has just authenticated as you (sirdancealot)
26.06.18 14:32:26*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
26.06.18 16:27:45*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Ping timeout: 248 seconds
26.06.18 16:38:56<daemoz> Morning~
26.06.18 16:39:12<daemoz> I'm finding idris easier to dig my teeth into, maybe because it's more purposed towards general programming which is what I'm used to.
26.06.18 16:39:29<daemoz> Not that I didn't like Agda necessarily..
26.06.18 16:40:22<daemoz> stoopkid: You had a list of rules in agda you had been working on? Can you link me those so I can look at them?
26.06.18 16:48:45<daemoz> Let me change that to some list of rules in agda to 'any' list of rules in agda xD
26.06.18 18:07:23<HMCa> daemoz: I know the feeling wrt agda v idris, heh
26.06.18 18:07:47*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
26.06.18 18:10:24<HMCa> daemoz: also you probably mean https://github.com/sto0pkid/CategoryTheory
26.06.18 18:10:25<HMCa> ?
26.06.18 18:16:07*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
26.06.18 19:57:12<stoopkid> daemoz: you mean the natural deduction rule-sets?
26.06.18 19:58:41<stoopkid> http://167.88.171.233/workspace/AutoNomic/notes/natural_deduction/ND_rules_v1
26.06.18 20:24:02<daemoz> That's the one stoopkid ty
26.06.18 20:37:17<daemoz> HMCa: although from some poking around it uses a logic that can contradict itself?
26.06.18 20:44:06<daemoz> Drawing from this: https://stackoverflow.com/questions/9472488/differences-between-agda-and-idris#9474117
26.06.18 20:44:21<daemoz> second answer
26.06.18 23:39:42<HMCa> daemoz: really the second answer doesn't seem to say that at all...
26.06.18 23:39:50<HMCa> but the first answer does, lol
26.06.18 23:40:04<HMCa> (of both agda and idris, heh)
26.06.18 23:40:45<HMCa> and it is correct, agda and idris both have several instances of what I would call "escape hatches" in the consistency of the logic
26.06.18 23:41:46<HMCa> the example they give is to flatten the universe hierarchy, but there are othera
26.06.18 23:41:50<HMCa> *others
26.06.18 23:43:16<HMCa> but I wouldn't worry too much about that for now, they are not things you could bump into by accident, heh
27.06.18 01:37:18-SaslServ- koom!~sirdancea@37-48-4-80.tmcz.cz has just authenticated as you (sirdancealot)
27.06.18 01:37:24*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 01:46:01<HMCa> hi koom
27.06.18 03:00:11*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Ping timeout: 256 seconds
27.06.18 03:06:21-SaslServ- koom!~sirdancea@37-48-4-80.tmcz.cz has just authenticated as you (sirdancealot)
27.06.18 03:06:31*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 03:11:37<editable-koo>hi
27.06.18 03:20:23*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Ping timeout: 256 seconds
27.06.18 04:55:49<daemoz> Something about idris having heterogenous equality and agda having homogeneous?
27.06.18 04:56:22<daemoz> HMCa
27.06.18 05:08:44*** Quit: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 265 seconds
27.06.18 05:18:07*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
27.06.18 07:51:35-SaslServ- koom!~sirdancea@37-48-4-80.tmcz.cz has just authenticated as you (sirdancealot)
27.06.18 07:51:41*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 08:32:56<editable-koo>ND_rules_v1
27.06.18 08:33:29<editable-koo>ND_rules_v1 arent in agda, im confused
27.06.18 08:34:29<editable-koo>i started reading the idris book as well, it looks much juicier than agda
27.06.18 08:35:43<stoopkid> you're not confused
27.06.18 08:52:42<editable-koo>i know they arent, im confused by daemoz
27.06.18 10:17:14*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Remote host closed the connection
27.06.18 10:17:31-SaslServ- koom!~sirdancea@37-48-4-80.tmcz.cz has just authenticated as you (sirdancealot)
27.06.18 10:17:37*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 11:49:27<HMCa> daemoz: heterogenous equality does not imply inconsistency directly, though?
27.06.18 11:50:00<HMCa> editable-koo: I'm also confused by daemoz right now. ;-)
27.06.18 12:13:09<stoopkid> the primary reason i use agda over idris is because one time like 2 years ago idris wouldn't install properly due to installer bugs and i never forgave it
27.06.18 12:14:03<stoopkid> but now that i've been using agda, i've never had any motivation to switch to idris anyway
27.06.18 12:14:11*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Ping timeout: 256 seconds
27.06.18 12:16:02<stoopkid> if anything i'd want to go the opposite direction: fewer built-in conveniences for general purpose programming; more fine-grained control over creating natural-deduction knowledge-bases
27.06.18 12:17:16<stoopkid> i would rarely ever want to actually "program" via proof-normalization in MLTT..
27.06.18 12:18:23<stoopkid> what i'd be interested to see is: what better conveniences does idris offer when it comes to knowledge-representation and theorem-proving?
27.06.18 12:22:37<stoopkid> i'm not aware of idris being any more expressive, i'm not aware of it having any extra axioms that increase deductive power, i'm not aware of it being any simpler to understand, if anything it's more complex due to the added "conveniences" (which aren't particularly convenient when you're trying to prove things about the system itself)
27.06.18 12:26:46<HMCa> stoopkid: well, i'd agree with you if it weren't for the new elaborator, heh...
27.06.18 12:27:23<HMCa> with the elab reflection overhaul that argument went out the window, imo. ;-)
27.06.18 12:28:41<HMCa> it makes it both simpler and more convenient for theorem proving, without impacting thr ability to use it to "program" (and keep in mind, for our purposes we really desire both!) so you get best of both worlds, heh
27.06.18 12:30:02<stoopkid> i'll check it out at some point; no idea what elaborator reflection is/does
27.06.18 12:30:54<stoopkid> afaict it's just a fancy tactics system?
27.06.18 12:31:48<HMCa> in short: it makes all of those "conveniences for programming" available as "conveniences for theorem proving" as well
27.06.18 12:32:29<HMCa> (which also means it can serve the roles of agda's type providers, btw)
27.06.18 12:32:41<HMCa> (something idris previously was sorely lacking)
27.06.18 12:34:54<HMCa> (and now it is agda that lags behind, on that front, since it has no ewuivalent of idris' recursive elab... HEH)
27.06.18 12:35:00<HMCa> *equiv
27.06.18 12:36:25<HMCa> so if you think of type providers as metaprogramming for theorems, idris has metametaprogramming for theorems, and metametametaprogramming, and metametametametaproframming, and metametametametametaprogramming and....
27.06.18 12:39:33<stoopkid> https://www.youtube.com/watch?v=pqFgYCdiYz4&t=236s
27.06.18 12:40:04<stoopkid> i'll watch this on friday and then see what i can make of it
27.06.18 12:40:24<stoopkid> gotta work on some other stuff for now though, bbiab
27.06.18 12:43:30<HMCa> imo idris reflection elab basically delivers on all of the promises that agda minitt never did... XD
27.06.18 14:19:46<daemoz> editable-koo: I'm kind of just confusing as a base-line =_@ This definitely was the document I was looking for though xd
27.06.18 14:22:02<daemoz> The interface to using idris is quite nice and I think that alone makes it a lot easier for me to start at it. Writing proofs really makes you think in a different way it's quite awkward to me though.
27.06.18 14:26:15<daemoz> confusing as a baselane because I generally lack certain intrinsic communication skills ¯\_(ツ)_/¯
27.06.18 15:16:46<HMCa> heh
27.06.18 15:17:17<HMCa> yah the idris repl and ide api are both nice to work with
27.06.18 15:17:53<HMCa> (though the repl was languishing for awhile, heh)
27.06.18 15:47:39<koo5[m]> daemoz: idk, never noticed it till now, so its probably just a temporary glitch
27.06.18 15:48:56<koo5[m]> Ok...
27.06.18 15:49:09* koo5[m] kicks agda in the butt and out the window
27.06.18 15:50:04* koo5[m] looks if it can fly
27.06.18 16:14:01*** Join: koom (~sirdancea@37-48-4-80.tmcz.cz, sirdancealot: koo5)
27.06.18 16:14:07-SaslServ- koom!~sirdancea@37-48-4-80.tmcz.cz has just authenticated as you (sirdancealot)
27.06.18 17:42:25*** Join: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45, (unauthenticated): 77.126.56.45 - http://webchat.freenode.net)
27.06.18 17:59:59<daemoz> Hahaha, did it fly?
27.06.18 18:01:00<nilli> hi stoopkid .  I made the arrangement to come to nyc  so I guess Ill see you in a few days.
27.06.18 18:04:29<koo5[m]> No
27.06.18 18:04:39<koo5[m]> Stoop is in nyc?
27.06.18 18:11:00<nilli> Baltimore
27.06.18 18:11:13<nilli> but my flgiht is to NYC
27.06.18 18:11:50<nilli> how are you koo5?
27.06.18 18:18:22<daemoz> stoopkid: You can load an idris file with the options "--nobuiltins --nobasepkgs --noprelude" and that will probably get you close to what you want out of it?
27.06.18 18:51:16<koom> hi nilli, im ok, yourself?
27.06.18 18:55:35<nilli> im good. taking a bold step to make the effort in order to come closer to understand more of the technical details of the project
27.06.18 18:56:45<koom> ah, by meeting stoop?
27.06.18 18:57:15<nilli> yes :) are you coming too?
27.06.18 18:57:53<koom> im actually looking at ticket prices, but im afraid those money are better spent elsewhere
27.06.18 19:00:17<nilli> well in fact often a real life meeting can make a project realized...and cut months of work
27.06.18 19:00:39<koom> very true
27.06.18 19:00:58<koom> its about $1000, with return
27.06.18 19:00:59<nilli> can you come?
27.06.18 19:01:29<koom> i suppose i would need to get visa or something
27.06.18 19:03:10<nilli> yes a visa usually time time to get but from Europe is easier
27.06.18 19:03:20<nilli> take time
27.06.18 19:14:14*** Quit: koom (~sirdancea@37-48-4-80.tmcz.cz) left #AutoNomic: Ping timeout: 255 seconds
27.06.18 19:26:52<daemoz> Can anyone help me understand the inductive proof on this page? http://docs.idris-lang.org/en/latest/proofs/inductive.html
27.06.18 19:27:01<daemoz> 'nat_induction'
27.06.18 19:30:40<stoopkid> nilli: cool :) i'm looking forward to it
27.06.18 19:31:14<stoopkid> daemoz: do you understand what the type of `nat_induction` is stating?
27.06.18 19:41:09-SaslServ- koom!~sirdancea@89.24.51.48 has just authenticated as you (sirdancealot)
27.06.18 19:41:15*** Join: koom (~sirdancea@89.24.51.48, sirdancealot: koo5)
27.06.18 19:53:33<koo5[m]> so, ESTA should be quick, but passport would take a month, or id need to throw some money at it
27.06.18 19:58:43<koo5[m]> then it would take just a week
27.06.18 20:00:22<koo5[m]> should have listened to my gf, she was so eager that we get passports so we can go somewhere this summer
27.06.18 20:05:17<stoopkid> would be cool, that's a lot of money to get over here though, i feel bad i couldn't like, meet you guys halfway somewhere
27.06.18 20:06:16<koo5[m]> the issue with that is that theres only water halfway between us
27.06.18 20:06:42<stoopkid> i could come to NYC but i'd still probably have to burn through most of the rest of what nilli's given me in order to even do that
27.06.18 20:08:10<koo5[m]> well, it should be cheaper to get you over here than to get us two over there, where are you flying from, nilli?
27.06.18 20:10:13<stoopkid> i'd have to get my passport as well; not sure how long that'll take, but i'll go this weekend and get the process started just in case
27.06.18 20:29:35<daemoz> stoopkid: I understand the type, I'm not really sure how it does it's thing though.
27.06.18 20:29:49<daemoz> Maybe that means I don't actually understand the type but the signature line makes sense to me.
27.06.18 20:31:17<daemoz> So like, how does 'plus_ind' make use of 'nat_induction'? and why can I not make a proof like "plus Z x = plus_ind Z x"?
27.06.18 20:42:07<stoopkid> daemoz: ok so, when you call 'plus_ind Z m', it's just gonna return 'm' right?
27.06.18 20:42:35<daemoz> Yeah, it seems like it should, and plus Z m should too right?
27.06.18 20:42:54<stoopkid> that's the 'nat_induction P p_Z p_S Z = p_Z' case where p_Z = m
27.06.18 20:42:56<stoopkid> right
27.06.18 20:43:20<daemoz> Okay I see that
27.06.18 20:44:05<stoopkid> so when you call 'plus_ind (S n) m' you'll get the other case: 'nat_induction P p_Z p_S (S k) = p_S k (nat_induction P p_Z p_S k)'
27.06.18 20:44:33<stoopkid> with p_Z = m, and p_S = (\k, k_rec => S k_rec)
27.06.18 20:44:57<stoopkid> and k = n
27.06.18 20:45:31<daemoz> Which should check 'P n' and then return 'P (S n)'?
27.06.18 20:45:48<daemoz> ugh, evaluate to*
27.06.18 20:45:57*** Quit: koom (~sirdancea@89.24.51.48) left #AutoNomic: Ping timeout: 240 seconds
27.06.18 20:46:35<stoopkid> right it's gonna take an argument of type 'P n' (Nat) and return/evaluate-to a value of type 'P (S n)' (also Nat)
27.06.18 20:48:24*** Quit: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45) left #AutoNomic: Ping timeout: 260 seconds
27.06.18 20:48:42<stoopkid> so, putting the values in we'd get:  'nat_induction P m  (\k, k_rec => S k_rec) (S n) =  (\k, k_rec => S k_rec) n (nat_induction P m (\k, k_rec => S k_rec)  n)'
27.06.18 20:48:53<daemoz> Oh, I can make my proof like this 'plus Z x = plus_ind Z x'
27.06.18 20:48:59<daemoz> but I cannot make it like 'plus x Z = plus_ind x Z'
27.06.18 20:49:37<stoopkid> you can it's just more difficult
27.06.18 20:50:41<stoopkid> you can use nat_induction with P  = (\x => (plus x Z = plus_ind x Z))
27.06.18 20:50:55<daemoz> why is that
27.06.18 20:51:54<stoopkid> because in the former case with 'plus Z x = plus_ind Z x', you've already defined these so that they both just evaluate to x immediately and then the proof-checker just sees they're equal
27.06.18 20:52:16<stoopkid> in the second case with 'plus x Z = plus_ind x Z' it doesn't know it can evaluate
27.06.18 20:52:53<stoopkid> "plus Z     m = m"
27.06.18 20:53:35<stoopkid> redefine 'plus' to use 'plus m Z = m' instead, and do the same for plus_ind, and your proof will go through
27.06.18 20:54:13<stoopkid> (ofc in practice you don't actually want to do that you would just use nat_induction with P  = (\x => (plus x Z = plus_ind x Z)))
27.06.18 20:56:00<stoopkid> (ah, cool, at the bottom of the page there they explain how to do that)
27.06.18 20:56:25<stoopkid> (or, almost..)
27.06.18 20:58:55<stoopkid> i think to switch 'plus_ind' to work the other way you just have to switch m and n on the RHS there
27.06.18 21:05:48<stoopkid> you got idris on your VPS?
27.06.18 21:12:50<daemoz> I can install it
27.06.18 21:15:55<stoopkid> alright, yea it's generally easier to explain when we can pair-program on the same document
27.06.18 21:16:15<daemoz> Sure, working on it now
27.06.18 21:28:02<daemoz> It's installing, can you check if you can still get on the server?
27.06.18 21:30:27<stoopkid> daemoz: yep i'm in
27.06.18 21:30:52<stoopkid> still using user 'common' for tmux?
27.06.18 21:33:45<daemoz> Sure, although I can't remember the password <_<
27.06.18 23:54:44<stoopkid> daemoz: yea Agda is a bit less strict about syntax heh, so here's my commutativity: https://github.com/sto0pkid/CategoryTheory/blob/master/Data/Nat/Proofs.agda#L237
27.06.18 23:55:34<daemoz> stoopkid: Yeah that's very nice to be able to name them so concisely
27.06.18 23:56:11<stoopkid> indeed
27.06.18 23:56:30<stoopkid> and when you start getting lazier they all start end up just being called "lemma1, lemma2, lemma3, ..." XD
27.06.18 23:56:47<daemoz> hahahah
27.06.18 23:57:04<daemoz> identifiers need parameters
27.06.18 23:57:29<daemoz> lemma{S lem_count}
27.06.18 23:57:40<stoopkid> hehe
27.06.18 23:59:47<stoopkid> what i imagine is that eventually people would be writing their proofs in something more like a CAD system
28.06.18 00:00:14<stoopkid> 2D or even 3D (or even 4D) structural visualization
28.06.18 00:00:17<daemoz> I think it lends itself to it certainly
28.06.18 00:01:09<daemoz> That would be a fun project for after I understand proof building more.
28.06.18 00:04:01<stoopkid> one thing to note in this proof we just did, when it proves 'a = b' by normalizing the LHS and RHS and then unifying, this is essentially a built-in tactic for chaining together equalities using transitivity
28.06.18 00:08:46* HMCa has to decom and reprovision vps again soon :-\
28.06.18 00:10:54<HMCa> kinda funny... someone pulled off a rather impressive/sophisticated hack on my vps, and then apparently all they could find to leverage it for was a pretty lame phish attempt to try to get access to more then just my IRCing.. XD
28.06.18 00:14:22<HMCa> possibly they compromised an old and unused privkey, too, but I don't care much about that if they did
28.06.18 00:18:07<stoopkid> ouch
28.06.18 00:31:06<HMCa> stoopkid: some details in pm for you :-)
28.06.18 00:46:34<stoopkid> daemoz: https://github.com/sto0pkid/CategoryTheory/blob/master/Data/Nat/Proofs.agda#L17
28.06.18 00:48:24<daemoz> stoopkid: thx this is perfect
28.06.18 00:48:47<stoopkid> there's a bunch more in that document as well for things besides successor & addition but i forgot to write out the lists for them
28.06.18 00:49:08<daemoz> lotta lines!
28.06.18 00:49:24<stoopkid> starting here you get proofs about less-than / greater-than: https://github.com/sto0pkid/CategoryTheory/blob/master/Data/Nat/Proofs.agda#L371
28.06.18 00:50:18<stoopkid> proving that an algorithm correctly decides whether two Nats are equal: https://github.com/sto0pkid/CategoryTheory/blob/master/Data/Nat/Proofs.agda#L484
28.06.18 00:50:57<stoopkid> ah here's a list for the proofs about multiplication: https://github.com/sto0pkid/CategoryTheory/blob/master/Data/Nat/Proofs.agda#L873
28.06.18 00:52:18<stoopkid> proofs about lists: https://github.com/sto0pkid/CategoryTheory/blob/master/Data/List/Proofs.agda
28.06.18 00:54:28<stoopkid> set theory: https://github.com/sto0pkid/CategoryTheory/blob/master/SetTheory.agda
28.06.18 00:55:16<stoopkid> oh i told you that you could use inductive types to build grammars & domain-specific languages, so here's an example of that: https://github.com/sto0pkid/CategoryTheory/blob/master/Regex.agda
28.06.18 00:55:54<daemoz> You're a busy guy, h aha
28.06.18 00:56:19<HMCa> I thought we were learning idris, not agda ;-)
28.06.18 00:56:22<daemoz> Thanks though, I saved these line numbers for reference
28.06.18 00:56:37<daemoz> HMCa: I'm looking for things to try and prove in idris
28.06.18 00:56:45<HMCa> ah
28.06.18 00:57:05<daemoz> Well, as one reason to look at all of these.
28.06.18 00:57:21<HMCa> prove that a stable tau can be built in idris! XD
28.06.18 00:57:27<daemoz> Hahahaha
28.06.18 00:57:59<daemoz> Maybeeee much later
28.06.18 00:58:15<daemoz> for me
28.06.18 00:58:16<stoopkid> imo tho, probably best to model/prove stuff within your domain of interest/experience; mine just happens to mostly consist of math stuff :)
28.06.18 00:58:34<daemoz> It pretty much meets in the middle, right?
28.06.18 00:58:37<daemoz> at mltt
28.06.18 00:58:50<daemoz> oh nvm, I see what you're saying now.
28.06.18 00:59:25<stoopkid> here's the "least mathy" example i have: https://github.com/sto0pkid/CategoryTheory/blob/master/Agatha2.agda#L96
28.06.18 01:00:55<daemoz> this is a trip
28.06.18 01:02:04<stoopkid> that's is a formulation of this test problem for automated-theorem-provers: http://math.chapman.edu/~jipsen/tptp/TPTP-v6.4.0/Problems/PUZ/PUZ001+1.p
28.06.18 01:03:20<stoopkid> each sentence in that english description maps to 1 or 2 fields in that agda record
28.06.18 01:05:16<stoopkid> and below that "PossibleWorld" record, there's a proof of the intended result: https://github.com/sto0pkid/CategoryTheory/blob/master/Agatha2.agda#L158
28.06.18 01:07:06<stoopkid> and yea.. type theory's pretty wild.. sometimes i'm so used to it i forget just how wild it is XD
28.06.18 01:08:25<daemoz> It's very dense to me
28.06.18 01:09:08<stoopkid> unfortunately when i was writing all this code, in hindsight i can see that my goal was implicitly "maximum density" :(
28.06.18 01:10:28<daemoz> All the names are very readable. What does the biohazard sign I keep seeing mean?
28.06.18 01:10:33<daemoz> Is that just a foobar for you?
28.06.18 01:10:49<daemoz> Now those always look 'extra' dense
28.06.18 01:11:09<daemoz> ☢ = 𝕥≠𝕗 (≡-⇶ (≡-↑↓ the-butler-hates-Agatha) (≡-⇶ ([x≡y]→[fx≡fy] hates-Agatha the-butler' Charles' (≡-↑↓ Charles-is-the-butler)) Charles-doesnt-hate-Agatha))
28.06.18 01:11:36<stoopkid> it's a nuke symbol, you can apply the principle of explosion to it XD
28.06.18 01:11:59<daemoz> ha ha ha xD
28.06.18 01:12:52<stoopkid> "≡-⇶" is transitivity
28.06.18 01:12:57<stoopkid> "≡-↑↓" is symmetry
28.06.18 01:13:06<stoopkid> (of equality, or ≡)
28.06.18 01:13:17<daemoz> okay that's not so bad then
28.06.18 01:13:57<stoopkid> "𝕥≠𝕗" is "the Bool 'true' != the Bool 'false'"
28.06.18 01:14:07<stoopkid> don't ask me what i was smoking back then, i couldn't tell you :P
28.06.18 01:14:58<daemoz> It's a very good thing to know, that true does not equal false. But also you should share what you were smoking xD
28.06.18 01:17:28* HMCa bleaches his eyes to wash the unicode out
28.06.18 01:17:37<HMCa> :-)
28.06.18 01:18:01<HMCa> toooooo dense ;-)
28.06.18 01:18:09<daemoz> https://i.imgur.com/rqv4DJn.png
28.06.18 01:18:19<daemoz> thankfully my poorly feature terminal took care of some of that for me
28.06.18 01:20:33<stoopkid> my favorite theorem: ���� = ��������������
28.06.18 01:20:41<stoopkid> the perfect language
28.06.18 01:20:56<daemoz> https://i.imgur.com/ftKxCdZ.png -- seems legit
28.06.18 01:21:23<stoopkid> euler once called this the most beautiful equation of them all
28.06.18 01:21:47<HMCa> my irc just draws that as "???? = ??????????????" right now
28.06.18 01:21:59<stoopkid> that's the joke :P
28.06.18 01:22:15<daemoz> https://en.wikipedia.org/wiki/Euler%27s_identity
28.06.18 01:22:17<daemoz> is it that?
28.06.18 01:23:00<stoopkid> no it's actually just "???? = ??????????????" XD
28.06.18 01:23:04<daemoz> hahahaha
28.06.18 01:25:30<HMCa> so there's a new illuminati, and now already a "fake new illuminati" trying to usurp it
28.06.18 01:25:53<daemoz> a new illuminati??
28.06.18 01:27:15<HMCa> daemoz: see illuminatiofficial.org
28.06.18 01:28:06<HMCa> every day I think the universe could not possibly find a way to make life more weird... and then every day life gets more weird ;-)
28.06.18 01:29:48<stoopkid> "The Illuminati is an elite organization of world leaders, business authorities, innovators, artists, and other influential members of this planet. To apply for membership, complete the form on this page."
28.06.18 01:29:55<stoopkid> and on that note...
28.06.18 01:30:12<stoopkid> ... i should probably go to sleep so i can be awake to work on RDF lists with koo tomorrow :)
28.06.18 01:31:37<daemoz> stoopkid: gnite! Thanks for the help!
28.06.18 01:31:56<daemoz> What are the benefits? Should we apply?
28.06.18 02:39:37*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-sdpggcqzlrbifupi) left #AutoNomic: Ping timeout: 260 seconds
28.06.18 02:42:01*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-uaknidnikcwmpivy, (unauthenticated): @lexxus:matrix.org)
28.06.18 03:14:47-SaslServ- koom!~sirdancea@89.24.51.48 has just authenticated as you (sirdancealot)
28.06.18 03:14:52*** Join: koom (~sirdancea@89.24.51.48, sirdancealot: koo5)
28.06.18 03:27:19<HMCa> daemoz: I wouldn't, if I were you. :-|
28.06.18 03:29:10<HMCa> some games are best to leave alone.
28.06.18 03:58:45<daemoz> I kid, I kid
28.06.18 03:59:02<daemoz> I simply don't have an interest in being in an organization like that.
28.06.18 07:31:06*** Quit: koom (~sirdancea@89.24.51.48) left #AutoNomic: Ping timeout: 268 seconds
28.06.18 07:54:49*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
28.06.18 07:55:13*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
28.06.18 09:58:27<koo5[m]> stoopkid: pm
28.06.18 11:03:29<stoopkid> koo5[m]: so here's the problematic test case
28.06.18 11:03:32<stoopkid> https://github.com/sto0pkid/AutoNomic/blob/master/tests/lists/superstructural.tau
28.06.18 11:08:04<koo5[m]> Right right
28.06.18 11:08:40<koo5[m]> I looked at it yesterday
28.06.18 11:33:53<koo5[m]> so, i dont know where to start about it. Maybe at how we dont know if lists should be a special case, or we want to talk about rules with two triples in head
28.06.18 11:34:22<koo5[m]> or maybe how lists dont seem to work if we treat their bnodes as variables, and dont seem to work if we treat them as constants
28.06.18 11:36:40<koo5[m]> or maybe how hmc seems to be the only one who maybe knows how those bnodes should work, but he cant seem to be able to explain it even to you, and everyone who thinks they know how probably has a different idea
28.06.18 11:37:33<stoopkid> ^
28.06.18 11:39:51<stoopkid> that's probably the most important thing, although i'm not sure whether or not it's the cause of this "superstructural infloop" situation
28.06.18 11:40:25<koo5[m]> which thing?
28.06.18 11:40:49<stoopkid> "or maybe how hmc etc.."
28.06.18 11:41:46<stoopkid> meaning, idk for sure that we've implemented it in a way that *anybody* who thinks they understand bndoes agrees with
28.06.18 11:44:18<stoopkid> https://en.wikipedia.org/wiki/Unification_(computer_science)
28.06.18 11:44:31<stoopkid> seems almost reminiscent of an occur's check problem
28.06.18 12:11:24<koo5[m]> I suppose i cab ignore semantic unification? I dont understand what thats about
28.06.18 12:15:51<stoopkid> yea you can ignore the semantic/E-unification stuff
28.06.18 12:17:01<stoopkid> although it's basically just adding restrictions to the equivalence relation defined here: https://en.wikipedia.org/wiki/Unification_(computer_science)#Prerequisites
28.06.18 12:21:51<stoopkid> unfortunately i don't think i understand the issue as well as i thought i did
28.06.18 12:37:27<stoopkid> occurs check isn't it
28.06.18 12:38:21<stoopkid> it bypasses ep-check for sure, but it almost seems like that's "correct" behavior
28.06.18 12:50:29<koo5[m]> *can
28.06.18 12:57:02<stoopkid> dmiles: what do you make of this example?
28.06.18 13:04:34<HMCa> not this again... XD
28.06.18 13:05:01<stoopkid> technically it's not "again" :)
28.06.18 13:05:21<HMCa> ?
28.06.18 13:05:56<stoopkid> we never solved this bug, so technically it's still the first time for "this"
28.06.18 13:07:51<koo5[m]> i can see how an occurs check wouldnt apply here, i guess
28.06.18 13:08:26<koo5[m]> As on ep, thats entirely up to how we define ep check behavior for lists
28.06.18 13:08:39<HMCa> well, technically the second time, then... heh
28.06.18 13:08:57<HMCa> "still" the second time XD
28.06.18 13:09:04<HMCa> anyway, neither here nor there
28.06.18 13:09:59<stoopkid> so i take it you've got a solution for this bug?
28.06.18 13:12:45<HMCa> yah, just make the semantics match every other n3/sparql/rif/ruleml/etc reasoner out there :-P
28.06.18 13:13:12<stoopkid> alright nvm
28.06.18 13:13:27<stoopkid> i'll go work on something else
28.06.18 13:13:29<HMCa> heh
28.06.18 13:13:50<HMCa> this query should fail pretty trivially
28.06.18 13:15:28<stoopkid> and autonomic "should" be done by now
28.06.18 13:15:30<stoopkid> but wait, it isn't
28.06.18 13:15:55<stoopkid> so "should" doesn't tell me much in this situation
28.06.18 13:17:03<HMCa> ok, so go through it forward chained, first
28.06.18 13:18:47<HMCa> the dummyfact implies "e1 :ss (e1)" per rule1 (here e1 is "some existential")
28.06.18 13:20:30<stoopkid> afaict there should be no solutions when forward-chaining because there's no initial fact to satisfy the "?y recurse ?z" in the rule for 'recurse'
                 <HMCa> now "e1 :ss (e1)" matches the first part of the second rule, binding ?x=e1 and ?y=(e1).... to match the second part of the second rule we need "(e1) :recurse e2"
28.06.18 13:25:25<HMCa> cool, so now let's work it backwards... i'll do the easy way first, taking the bodies in reverse order...
28.06.18 13:25:44<HMCa> well, nm, we can do either direction on the vodies, is stil easy
28.06.18 13:26:11<HMCa> so we enter the second rule head with ?x=(), ?y=:forever
28.06.18 13:26:56<stoopkid> s/?y/?z/; sure
28.06.18 13:29:49<stoopkid> and sure, if we swap the order of the body items, then it would fail ep-check when recursing on 'recurse'
28.06.18 13:30:23<HMCa> sec, brb
28.06.18 13:42:21<HMCa> ok, i'll be short on time, going to have to run in a sec :-\
28.06.18 13:46:24<HMCa> but ok, we bind ?y=(e1) from the first rule, and go on to query "(e1) :recurse :forever"
28.06.18 13:47:05<stoopkid> yes
28.06.18 13:49:04<HMCa> so now we look for "(e1) :ss ?y" which binds ?y=((e1)), which, hrmm, does seem to skip the ep cut
28.06.18 13:49:31<stoopkid> yes
28.06.18 13:49:37<HMCa> bah, I'm missing something here :-)
28.06.18 13:50:01<stoopkid> at least you're in good company there
28.06.18 13:50:11<HMCa> but I'm, going to have to run for now, will come back to this in a bit
28.06.18 13:50:44<HMCa> and yah, let's see if dmiles has some input :-)
28.06.18 13:51:54<HMCa> side note, I'm not sure if we care if this skips the ep cut?  XD
28.06.18 13:51:59<HMCa> anyway, bbiab
28.06.18 13:52:52<stoopkid> well sure, maybe we don't care about infloops
28.06.18 13:53:04<stoopkid> that would be new though :)
28.06.18 13:55:45<HMCa> we know we don't care about infloops in the case of level breaking, for example
28.06.18 13:55:57<HMCa> dmiles: how would prolog cut on this example?
28.06.18 13:56:02<stoopkid> who's "we" :P
28.06.18 13:56:10<HMCa> *would* prolog cut on this example?
28.06.18 14:02:32<HMCa> maybe a better question is how would datalog cut?
28.06.18 14:02:49<HMCa> anyway, i'm late, bbiab
28.06.18 14:02:56<stoopkid> alright catch ya later
28.06.18 14:03:06<stoopkid> at least i feel a bit better that we're not the only ones stumped on this
28.06.18 15:11:48*** Join: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45, (unauthenticated): 77.126.56.45 - http://webchat.freenode.net)
28.06.18 15:13:07<nilli> HI stoopkid. So it seems like a summit, just spoke with koo and he is coming to meet with us too.
28.06.18 15:25:08<editable-koo>ugh
28.06.18 15:25:15<editable-koo>gf is raising objections
28.06.18 15:26:14<editable-koo>wants to go too
28.06.18 15:26:18* editable-koo facepalm
28.06.18 15:45:40<nilli> with the kids?
28.06.18 15:51:41<koo5[m]> hell no, that would be wayyy overkill
28.06.18 15:53:30<koo5[m]> idk, its insane even without kids
28.06.18 15:54:36<koo5[m]> insane idea, to me
28.06.18 15:54:40<koo5[m]> what do you think?
28.06.18 15:55:44<nilli> so have her come too though she will have to agree to hang out by herself part of the time . she should stay in nyc. part of the time maybe
28.06.18 15:55:46<koo5[m]> btw, stoopkid
28.06.18 15:57:16<koo5[m]> btw, stoopkid , isnt preventing this infinite recursion a job for the typesystem? only allowing recursion on structurally smaller terms and all that
28.06.18 15:57:50<koo5[m]> yeah that should probably be more interesting for he, but then i dont know if she'd feel safe alone there
28.06.18 15:59:19<koo5[m]> oh gosh, this is such a silly situation
28.06.18 16:03:58<nilli> well nyc is safe enough . . one may need to get used to it . but that is part of it . in ny be newyorker. ( the kids are going on the subway by themselves form 6th grade.)
28.06.18 16:08:53<stoopkid> koo5[m]: well.. that's what i always figured anyway, HMCa's the one who thought the current system should be terminating.. but that stance seems to have evolved into "maybe, maybe not, idk :-)"
28.06.18 16:10:29<stoopkid> seems i might need to get more cots? lol
28.06.18 16:17:38<koo5[m]> cool. ill let you know what we settle on...
28.06.18 16:17:44<koo5[m]> cots?
28.06.18 16:19:12<koo5[m]> ok, typesystem seens like a plausible answer to me. But this brings us nowhere nearer to knowing what lists/bnodes should be
28.06.18 16:20:11<koo5[m]> im fairly ok with "yah, just make the semantics match every other n3/sparql/rif/ruleml/etc reasoner out there"
28.06.18 16:20:41<koo5[m]> gonna have to add a couple of command line switches to pyin
28.06.18 16:21:16<stoopkid> historically speaking, "yah, just make the semantics match every other n3/sparql/rif/ruleml/etc reasoner out there" has pretty much literally never worked
28.06.18 16:21:30<stoopkid> mostly due to the faults of those other reasoners..
28.06.18 16:24:13<stoopkid> more importantly: "bah, I'm missing something here :-)"
28.06.18 16:24:59<stoopkid> like i said a few days ago, if HMCa can't explain exactly what the semantics are supposed to be, then HMCa doesn't actually have a semantics...
28.06.18 16:25:04<stoopkid> in which case
28.06.18 16:25:08<stoopkid> there are holes in his plan
28.06.18 16:25:12<stoopkid> in which case
28.06.18 16:25:14<stoopkid> plan B
28.06.18 16:28:42<stoopkid> it is a huge waste of our time to dig through the source code of every other reasoner impl just on the basis of HMCa thinking "well i assumed *they* had it figured out"
28.06.18 16:30:47<koo5[m]> id be ok with playing with internalized lists, seeing if they actually make up a semantic, or trying whatever, just approaching it from an engineering perspective, making it work for me, for doing some useful reasoning or something. But im having trouble seeing how that fits into this allmighty superfragile total complete sound thing thats supposed to be built on top of the reasoner. I'd like to know we have something
                 <koo5[m]> theoretically existant, like lambda calculus, as a basis, and not something i baked in my backyard. But still , i mean its a serious option to just play with it and see
28.06.18 16:32:17<koo5[m]> what i'd like to attempt would be to try to solidify my agda understanding by writing an interpreter in n3, i guess that would be a good test for whatever semantics i'd decide to throw into the reasoner
28.06.18 16:34:44<stoopkid> well, not including the `findall` stuff, there is something theoretically existant here
28.06.18 16:36:18<stoopkid> there are standard syntaxes for FOL, i'd imagine we'd be further along if we were using a standard syntax and the standard unification/resolution algorithms that were designed to work specifically with the standard syntaxes
28.06.18 16:39:55<stoopkid> idk whether it would solve our specific infloop problems here, but it would solve our bnode problems (because they wouldn't exist) and we'd have the entire body of academic results on the topic to reference, instead of scattered, incomplete, ambiguous, and inconsistent semantic web docs...
28.06.18 16:43:48<HMCa> so, i'm supposed to be still afk, but snuck away because something occured to me... doesn't this question go away if we just always eval cyclic subgoals in a body first?
28.06.18 16:45:00<HMCa> it contradicts my "be as intuitive as possible" thing, but... all well? heh
28.06.18 16:45:34<HMCa> in any case we still need the answer wrt how datalog would cut on this, imo
28.06.18 16:47:10<HMCa> koo5[m]: and yes, in any case the typesystem should preclude this just as it would preclude nontermination in general, but that is sort of a copout, and doesn't help for untyped portions of open phase - and imo we really do want to allow untyped in open phase, heh
28.06.18 16:51:09<stoopkid> " doesn't this question go away if we just always eval cyclic subgoals in a body first?" yes, ep-check should catch it in that case
28.06.18 16:51:24<stoopkid> the problem with that approach is that it would probably catch too much
28.06.18 16:51:35<stoopkid> what if the recursion was substructural instead of superstructural?
28.06.18 16:53:01<stoopkid> we technically don't need the type-system to check that recursions are substructural though..
28.06.18 16:54:12<stoopkid> we need the type-system for totality-check, in order to even determine what "total" means, but we don't need it for termination-check
28.06.18 16:54:33<stoopkid> but if you're using untyped in open phase, maybe you don't care about infloops?
28.06.18 16:57:06<koo5[m]> shouldnt you be able to reason about your untyped code to catch this?
28.06.18 16:58:21<stoopkid> it wouldn't hurt anything to be able to at least
28.06.18 17:01:07<stoopkid> i'm just saying maybe in untyped in open phase it doesn't need to be universally enforced








28.06.18 17:06:11*** Join: koom (~koom@89.24.51.48, (unauthenticated): realname)
28.06.18 17:25:55<stoopkid> nilli: koo5[m]: anyway, i'm flattered you guys want to come all the way to baltimore to study logic for a bit, still trying to figure out with my fiancee and her grandmother whether we'd be able to have you stay here at all; let me know if there's anything else i can do that would help you guys out
28.06.18 17:32:04<koo5[m]>   test
28.06.18 17:32:15<koo5[m]> stupid riot gets out of sync with irc again
28.06.18 17:36:02<editable-koo>yeah, its perfectly understandable if its too much asking that from you guys
28.06.18 17:36:24<editable-koo>when is the college starting, are you gonna be free the whole month?
28.06.18 17:37:12<editable-koo>do you want to see us, especially me, for a whole month maybe?
28.06.18 17:37:22<stoopkid> my summer courses start the 16th but it's all online so it won't interfere with anything
28.06.18 17:37:54<stoopkid> sure, i certainly wouldn't be opposed to it
28.06.18 17:38:36<koom> ok thats great
28.06.18 17:42:19<stoopkid> nilli: do you still have your trip scheduled or are you waiting to see what koo's plans are now?
28.06.18 17:56:35<koom> riot still silently dropping messages
28.06.18 18:12:59<koom> what exactly was our issue with one rule modifying other rules' vars through internalized lists?
28.06.18 18:14:31<stoopkid> not sure what you're referring to exactly, can you elaborate on what you remember of it? the only thing that comes to mind is our issues surrounding the handling of existential variables
28.06.18 18:15:27<koom> "one rule modifying another rules' vars" is kinda all i remember of it
28.06.18 18:17:27<koom> not sure what issues youre refering to, but existential variables are definitely playing a role here
28.06.18 18:17:54<koom> or bnodes?
28.06.18 18:18:07<koom> come on, what was supposed to be simple and intuitive about this? its a joke
28.06.18 18:18:13<stoopkid> lol






28.06.18 18:19:28<stoopkid> the simple & intuitive thing would be to use a standard syntax for FOL and standard unification/resolution algorithms
28.06.18 18:21:05<koom> yeah, i just wanted to cover the n3 stuff from all sides before asking you about it
28.06.18 18:21:13<koom> but it doesnt have sides, its an amorphous goo
28.06.18 18:21:24<koom> so, what are those standard syntaxes?
28.06.18 18:23:14<stoopkid> https://en.wikipedia.org/wiki/First-order_logic#Syntax
28.06.18 18:23:54<stoopkid> "∀x,∃y,R(x,y)" etc..
28.06.18 18:27:32<stoopkid> explicit quantifiers everywhere; no restriction to binary predicates; function symbols (term constructors) allowed; no restrictions on formulas
28.06.18 18:34:10<stoopkid> could do it with S-exprs too..: "(forall x (exists y (R x y)))"






* tau lang general idea

28.06.18 20:29:12<daemoz> Pretty good, yesterday's learnings are still sinking in. I'm trying to follow you guys about this (i think rdf?) stuff? but the syntax is pretty confusing. Is this superstructural.tau file rdf? Should I finish reading that thesis paper and it will describe these forms?
28.06.18 20:52:48<stoopkid> daemoz: that's Notation 3, it's technically a subset of RDF, but with extra semantics (called N3Logic) which basically make it like an extension of RDF to basically make RDF into a logic programming lang (like prolog/datalog)
28.06.18 21:03:04<daemoz> Ahh, I see! Is N3Logic mltt?
28.06.18 21:08:39<stoopkid> not quite, a bit more lower-level, it more closely approximates natural deduction: https://en.wikipedia.org/wiki/Natural_deduction
28.06.18 21:11:04<stoopkid> the idea is to use Notation3/N3Logic as the syntax/semantics of a natural deduction system, and with that we can express the MLTT rules
28.06.18 21:12:42<stoopkid> https://en.wikipedia.org/wiki/Natural_deduction#Proofs_and_type_theory
28.06.18 21:20:38<stoopkid> rules for expressing MLTT in natural deduction are like that list of rules you asked for the other day
28.06.18 21:21:14<stoopkid> to see how that works and why the rules take the particular form they do, this is the best paper i've found on that: http://purelytheoretical.com/papers/ATCHC.pdf






29.06.18 01:24:09<dmiles> a question for you.. why not do http://math.chapman.edu/~jipsen/tptp/TPTP-v6.4.0/Problems/PUZ/PUZ001+1.p  in N3Logic?
29.06.18 01:25:31<dmiles> also, why not have people write programs in FoF format?
29.06.18 01:25:59<dmiles> and THF format etc
29.06.18 01:29:07<HMCa> I'm not sure what you're asking me in either question
29.06.18 01:29:58<HMCa> one could certainly do the dreadbury problem (and really any "einstein puzzle") in n3
29.06.18 01:32:02<HMCa> and fof/thf are interchange formats, not really intended "for human consumption"
29.06.18 01:32:49<HMCa> (and not really intended (or useful, imo) for "programming" in any case)
29.06.18 01:34:15<daemoz> HMCa: howdy
29.06.18 01:38:16<HMCa> daemoz: how goes the learning?
29.06.18 01:41:51<dmiles> well fof is the identical la language to IKL and CycL  and converting back/forth to english is evern possible
29.06.18 01:42:20<daemoz> At about the same spot, been doing some house cleaning and am still feeling a little burnt out. The next cup of coffee is coming soon though :P
29.06.18 01:42:27<dmiles> buit yeah.. doing programming in the language is hard
29.06.18 01:43:00<dmiles> it is just the perfect language for doing something closer to Q&A with humans
29.06.18 01:43:12<dmiles> that allows computer to reason
29.06.18 01:44:45<dmiles> is hard despite using the language as the basic language I wrote the MUD in
29.06.18 01:46:13<dmiles> hard if a person is not used to coding in prolog that is
29.06.18 01:46:47<HMCa> dmiles: did you see the questions directed at you earlier from stoop and I?
29.06.18 01:47:11* dmiles scrolls up
29.06.18 01:49:57<dmiles> this example https://github.com/sto0pkid/AutoNomic/blob/master/tests/lists/superstructural.tau ?
29.06.18 01:52:00<dmiles> well occurs some would belive occurs chach is spupposed to take care of that
29.06.18 01:53:01<dmiles> some would belive occurscheck is supposed to take care of that.. though the oicalizer should usly make that into a non occurs check problem
29.06.18 01:53:58<dmiles> canonicalizer is a part of when one correctifies the variables to be the intent of the author
29.06.18 01:54:33<dmiles> {this isa dummyfact} => {?x superstructure (?x)}.     gets converted to...
29.06.18 01:55:39<HMCa> well, this is not really an occurs check case
29.06.18 01:56:04<dmiles> {this isa dummyfact.   ?Y eq  (?x)}  => {?x superstructure ?Y}.
29.06.18 01:56:47<HMCa> that doesn't cut the loop though?
29.06.18 01:57:22<dmiles> nope the loops is cut using a non broken perver like PowerLOOM/Cyc/Logicmoo
29.06.18 01:57:36<dmiles> non broken provers
29.06.18 01:58:14<HMCa> can you define "non broken prover"?  Iow can you describe the semantics of the evaluation cut?
29.06.18 01:58:26<dmiles> FLORA2
29.06.18 01:58:46<dmiles> i dont think people working on the semweb knew how .. b ut everyone that did sematic provers before then did
29.06.18 01:59:21<dmiles> for example XSB/FLORA systems
29.06.18 01:59:57<HMCa> can you *describe* the semantics... not name an implementation of them?
29.06.18 02:00:28<dmiles> the semantics is the semantics we all expect to work
29.06.18 02:00:35<HMCa> or let's try this another way
29.06.18 02:00:53<dmiles> for example i showed my 14 yo daughter the language and she already knew it
29.06.18 02:01:02<HMCa> can you explain how you would cut this in a prolog evaluator?
29.06.18 02:01:29<dmiles> (knew exactly what the language was supposed to do)
29.06.18 02:01:52<dmiles> oh .. in prolog one doesnt do this unless they add a guard
29.06.18 02:02:17<dmiles> unles its XSB por a memoizing prlog
29.06.18 02:02:19<dmiles> in SWI you use  := table/1
29.06.18 02:02:24<HMCa> ok, assume a memorizing prolog
29.06.18 02:02:52<HMCa> and give the prolog code for a backchaining evaluator that correctly cuts this
29.06.18 02:03:13<dmiles> in memoizing prolog the system recognises ithe loop and avoids it
                 <HMCa> *memoizing
29.06.18 02:03:23<HMCa> univar is a memoizing prolog...
29.06.18 02:04:01<HMCa> a crude one, but that is what it is :-)
29.06.18 02:04:17<HMCa> so what cut is it missing?
29.06.18 02:05:11<HMCa> could you write out the "steps" showing the bindings and cut point, i.e. a loose/semiformal proof sketch?
29.06.18 02:05:24*** Quit: nilli (4d7e382d@gateway/web/freenode/ip.77.126.56.45) left #AutoNomic: Ping timeout: 260 seconds
29.06.18 02:06:46<dmiles> in this system https://github.com/TeamSPoon/tabling_dra
29.06.18 02:06:47<dmiles>    :- coinductive0 superstructure/2
29.06.18 02:07:05<dmiles> is how you'd make it work
29.06.18 02:07:41<dmiles> one doesnt actualy add a cut.. they add leashes
29.06.18 02:08:27<dmiles> many prolog programmers hand waved over coinduction by turning on occurs chack
29.06.18 02:08:45<dmiles> as you said it wasnt meant to be occcurs chack based
29.06.18 02:09:18<dmiles> so unless a system uses coinduction as weel as memoization they might miss it
29.06.18 02:09:32<HMCa> well, again you're just naming an implementation, not giving the semantics or evaluation trace... while I understand and agree with the approach, this will not satisfy stoop and koo (if you read the rest of that chatter up there about the est case you might see why)
29.06.18 02:10:33<dmiles> it is easier to be implement than explain :P
29.06.18 02:10:46<dmiles> it is easier to implement than explain for sure
29.06.18 02:11:46<dmiles> everyone who implements it never could understand the exp[lainations people give
29.06.18 02:11:47<HMCa> ok, so implement instead of explain, I think they'd take either (but they won't take pointing to an implementation)
29.06.18 02:12:14<HMCa> mega bonus points for implementing by fixing univar, lol
29.06.18 02:12:31<dmiles> i think Kifer wrote some almost understandable explainations though
29.06.18 02:12:56<HMCa> link?
29.06.18 02:13:32<dmiles> http://www3.cs.stonybrook.edu/~kifer/
29.06.18 02:13:44<dmiles> i'll find a coinduction paper though of his
29.06.18 02:15:11<HMCa> this isn't really a coinduction case either, though... in fact in one sense the whole problem is that right now we *do* the coinduction, heh
29.06.18 02:15:48<dmiles> hah true
29.06.18 02:15:57<dmiles> its sort of the inverse problem
29.06.18 02:16:04<dmiles> inverse of coinduction
29.06.18 02:16:37<HMCa> we go ahead and keep scheduling the subgoals to build more superstructure... what we intend to do is detect and cut the evaluation
29.06.18 02:16:48<HMCa> iow...
29.06.18 02:17:13<HMCa> right now univar is a memoizing prolog and what we intend it to be is a memoizing datalog
29.06.18 02:17:25<HMCa> (if that makes any sense?)
29.06.18 02:17:47<dmiles> right this what i mena it is easier to spot what can be fixed .. as you just said that you can notice trhat subterms are being scheduled
29.06.18 02:18:13<HMCa> could you explain where this "spot" is in univar? :-)
29.06.18 02:18:32<dmiles> well one hack i used once is i didnt let nonground terms back into the front door
29.06.18 02:18:41<dmiles> that would fix the problem in this case
29.06.18 02:18:58<dmiles> but i disagree with using that datalog hack i did
29.06.18 02:19:45<dmiles> the "front door" being the neck of the harness
29.06.18 02:20:18<HMCa> not sure what you really mean here
29.06.18 02:20:31<HMCa> or how it relates to univar
29.06.18 02:20:49<dmiles> " intend it to be is a memoizing datalog"  means you wanted to do the dirty hacks that datalogers tried
29.06.18 02:21:20<dmiles> those hacks are:  only let ground terms uify
29.06.18 02:21:22<HMCa> no, just this specific hack.. heh
29.06.18 02:21:37<dmiles> prevent structure terms in
29.06.18 02:21:58<dmiles> which would save you in this situation but vreaks too many usefull things later
29.06.18 02:22:33<dmiles> of course you can turn that on/off
                 <HMCa> that still doesn't answer the question... let me try this another way
29.06.18 02:23:08<HMCa> can you explain when you would insert the "?Y=(?x)" and when you would not?
29.06.18 02:23:25<HMCa> (and why?)
29.06.18 02:24:41<dmiles> the ?Y=(?x)  allows me to track the the creation of a new terms
29.06.18 02:25:06<HMCa> yes but *when*
29.06.18 02:25:07<dmiles> so instead of letting superstructure "accedientng" create new terms
29.06.18 02:25:08<HMCa> ?
29.06.18 02:25:18<dmiles> accidently withotu my knowledgfe
29.06.18 02:25:36<dmiles> i am abler to teck occurance of ?Y
29.06.18 02:25:40<HMCa> how do you know if you "will be superstructuring" or not? ;-)
29.06.18 02:26:03<dmiles> by the passage of  T1 unify with T2 containing T1
29.06.18 02:26:26<dmiles> or even notices that the T2 will contain T1
29.06.18 02:26:52<HMCa> can you restate that in terms of this specific example?
29.06.18 02:26:53<HMCa> meaning
29.06.18 02:27:01<dmiles> so instead of noticing on necks .. i notice on a coroutine
29.06.18 02:27:21<HMCa> what in the test case being discussed is t1/t2, which unification, etc
29.06.18 02:28:11<dmiles> T1 = ?X   T2 = (?X)
29.06.18 02:28:28<dmiles> T2 contains T1
29.06.18 02:29:00<dmiles> so what i do is make sure that T2 whenever built has a reason to be built
29.06.18 02:29:04<HMCa> so how do we know this before evaluation?
29.06.18 02:29:14<dmiles> canonicalization
29.06.18 02:29:31<dmiles> canonicalization is a phase in loading the file
29.06.18 02:29:51<dmiles> or the domain that does whatever unit progrjections and rerwrites
29.06.18 02:29:53<dmiles> for exmaple
29.06.18 02:30:15<HMCa> you're sort of explaining in circles now... I'm trying to get to how you know that this particular rule needs this particular transform
29.06.18 02:30:30<HMCa> *during* a canonizalization
29.06.18 02:30:39<HMCa> *canonicalization
                 <dmiles> "irreflexive(R) => ~R(X,X)" gets conanocalized
29.06.18 02:31:01<dmiles> canonicalize to create an extra varaible
29.06.18 02:31:56<dmiles> the transform the canonicalizaer does is based though on some epected operations of the prover
                 <HMCa> and for this rule, in this particular example, R and X are...?
29.06.18 02:33:18<HMCa> instead of saying "create an extra variable" let's call this "convert existentials to universals"  (I want to be able to use this to explain more about quantifier alternation later, hehe)
29.06.18 02:33:28<dmiles> "irreflexive(R) => ~R(X,X)"  for isntance in logicmoo canonicalizes to   "irreflexive(R) &  R(X,Y) => not_eq(X,Y)"
29.06.18 02:34:15<HMCa> again, let's leave "other implementations" out of it, for now, plz
29.06.18 02:34:34<dmiles> the thing is is there is no theory that i know of
29.06.18 02:34:50* HMCa wishes stoopkid were around (so as not to be guessing at what he will/won't grok later)
29.06.18 02:35:02<dmiles> i mean we all jsut made all this up 20+ years ago
29.06.18 02:35:12<dmiles> sometimes peopel wrote about it
29.06.18 02:35:46<dmiles> when we started coding this stuff there wasnt even google yet
29.06.18 02:36:34<dmiles> there are some goodf refernces now though.. https://zdoc.site/xsb-extending-prolog-with-tabled-logic-programming.html
29.06.18 02:36:48<HMCa> more like 30 now, we're gettin old :-P
29.06.18 02:37:00<dmiles> oh Terrance Swift .. not Kifer
29.06.18 02:37:39<HMCa> and there is (better) theory for this now, at least in this limited case (heh)
29.06.18 02:37:42<HMCa> :-P
29.06.18 02:37:53<dmiles> who is now called Terreasa Swift
29.06.18 02:37:56<HMCa> quantifier elimination and dimred are real! XD
29.06.18 02:38:31<dmiles> yeah but many theories now dont do everything .. just some dfo almost 60% of the required things
29.06.18 02:38:58<dmiles> i mean like datalog was a big joke
29.06.18 02:39:08<dmiles> usefull joke though
29.06.18 02:39:11<HMCa> yes and no
29.06.18 02:39:12<HMCa> right
29.06.18 02:39:21<dmiles> that is makes many people quite happy
29.06.18 02:39:47<HMCa> it proved model theory can work-at-all... people just got confused and stuck on the whole relationals thing... ;-)
29.06.18 02:40:00<HMCa> (this too is why we build?!?!)
29.06.18 02:40:11<dmiles> just like tabling and memoizaion .. only 30% of thje task is complete
29.06.18 02:40:52<HMCa> ok, I think we're getting ahead of ourselves, and too much into inside baseball
29.06.18 02:40:55<HMCa> heh
29.06.18 02:41:21<dmiles> also peo;el get stuck on Nats .. that is the hard part
29.06.18 02:42:03<HMCa> well, this case is (for our purposes) prior to nats
29.06.18 02:42:20<dmiles> well to fully write a predvars thing one has to fully write it
29.06.18 02:42:51<HMCa> shh, no predvars thing here, this is still fol
29.06.18 02:42:52<HMCa> hehe
29.06.18 02:43:05<HMCa> let's not scare people juat yet!
29.06.18 02:43:08<HMCa> *just
29.06.18 02:43:24<HMCa> ok, let me try asking the reverse question...
29.06.18 02:43:26<dmiles> oops univar
29.06.18 02:43:54<dmiles> i mean for exmaple .. i dediced to start writing a version in C++
29.06.18 02:44:08<HMCa> could you tell when one would *not* convert an existential in a head to universals, by an added var
29.06.18 02:44:12<dmiles> a few days ago.. so i started using Tauraus 1993 system
29.06.18 02:44:23<HMCa> why not just use univar? :-D
29.06.18 02:44:26<dmiles> his java version
29.06.18 02:44:32<HMCa> or p.cpp if you're brave... XD
29.06.18 02:44:59<dmiles> i needed a system that is forward and backward compatiblke with CYC
29.06.18 02:45:18<HMCa> ah thrn that is not a univar
29.06.18 02:45:19<HMCa> *then
29.06.18 02:45:25<HMCa> univar is strictly a yieldprolog
29.06.18 02:46:01<dmiles> you cant see google docs right?
29.06.18 02:46:09<HMCa> right
29.06.18 02:46:21<HMCa> pastebin is cool
29.06.18 02:46:23<dmiles> i tried to pastebin it.. totalyl illegable
29.06.18 02:46:30<HMCa> hrmm
29.06.18 02:46:32<dmiles> ok i'll pastbin it
                 <HMCa> heh
29.06.18 02:46:50<dmiles> it is becausw ei bullet everything
29.06.18 02:46:58<dmiles> so you lose line numbers etc
29.06.18 02:47:03<dmiles> i'll save as rtf
29.06.18 02:47:26<dmiles> it is the todo list that i was refering to that you guys and ohad have to get fdone first
29.06.18 02:47:48<HMCa> does it answer my last question? XD
29.06.18 02:49:06<HMCa> ot: who's throwing a a good 20s party for 2020?  I promise I won't wear a bowtie.
29.06.18 02:49:17<dmiles> http://logicmoo.org/docs/boxlog.pdf
29.06.18 02:49:40<dmiles> i think you even made up part of the list
29.06.18 02:49:54<dmiles> well at least started following it
29.06.18 02:50:14<dmiles> at least inspired A2
29.06.18 02:50:58<dmiles> ther eare actualy 3 differnt A2s as you discovered.. though i suppose you do them as backchains
29.06.18 02:52:24<HMCa> brb
29.06.18 02:52:45<dmiles> <HMCa> could you tell when one would *not* convert an existential in a head to universals, by an added var
29.06.18 02:53:26<dmiles> well there are two types of existentials in proctiace
29.06.18 02:53:45<dmiles> decididing which type of existential to create is the question
29.06.18 02:54:10<dmiles> first here is whayt i meant by types types of existentials
29.06.18 02:54:32<dmiles> there exists a number that is the result of adding 1 to N
29.06.18 02:55:38<dmiles> that is an existial that is equal to the same existential you get that is the result of adding 2 to N and subtracting 1
                 <dmiles> there ther eis the other kind of existential that you cant ever know the value of
29.06.18 02:56:17<dmiles> there is a   P that is some R to M
29.06.18 02:56:54<dmiles> one kind of existential is already in your model.. another kind of existential is created at runtime for your odel
29.06.18 02:56:58<dmiles> one kind of existential is already in your model.. another kind of existential is created at runtime for your model
29.06.18 02:57:32<dmiles> these second kind are often called Ephemeral terms
29.06.18 02:58:07<dmiles> Well they are both Ephemeral at runtime.. but one you expect to resolve
29.06.18 02:58:25<dmiles> one you expect to adorn
29.06.18 02:59:12<HMCa> can you rephrase that in rdf/univar terms?  Iow can you explqin how it rrlates to the n3logic lists/existentials?
29.06.18 02:59:23<HMCa> *explain *relates
29.06.18 03:00:07<dmiles> list based existentials you expect to resolve
29.06.18 03:00:18<dmiles> you expect ot find in the document somewhere
                 <HMCa> iow, for what existential bnodes do we do quantifier conversion to universal, and more to the point for what don't we
29.06.18 03:01:00<dmiles> so i shoudl clearify we have two types of exisiences:  resolvable and creatable
29.06.18 03:01:10<dmiles> bnodes are resolvables
29.06.18 03:01:34<dmiles> usually lists are resolvables
29.06.18 03:01:38<HMCa> like a list in a head?
29.06.18 03:02:09<HMCa> and this is because "all lists exist" rule silliness? ;-)
29.06.18 03:02:53<dmiles> a list in a head is for backchaining (creatable) or forward chaining (resolvable) .. herein the example we dont knpow
29.06.18 03:03:30<HMCa> can you clarify what ypu mean, particularly wrt "we don't know"?
29.06.18 03:03:39<HMCa> *you
29.06.18 03:04:36<dmiles> in " {this isa dummyfact} => {?x superstructure (?x)}.    "   what was the reason the author create that rule?
29.06.18 03:04:54<dmiles> T me i think is they wanted to show how to redtructure a list
29.06.18 03:05:11<dmiles> To me i think is they wanted to show how to destructure a list
29.06.18 03:05:41<dmiles> that rule is most likely usefull as backchaioned to shrink terms
29.06.18 03:05:53<dmiles> so i would never make an existential for it
29.06.18 03:06:20<dmiles> if i did i'd only create a coiniductive fwd rule
29.06.18 03:06:36<dmiles> since everything else would only be horrible
29.06.18 03:08:02<dmiles> the best understanding of that rule is of (resolvable) for destructureing existing lists
29.06.18 03:08:45<dmiles> and  (creatable) for when producing terms that require coinductive unification hooks
29.06.18 03:09:11<dmiles> unification hooks are when someone uses  when/2 in prolog
29.06.18 03:10:21<dmiles> so for insnace in Pauls 1993 system i using unification hooks that when a varibe i sbound it calls a specific set of code chacks
29.06.18 03:11:08<dmiles> so for instance  when((nonvar(X);nonvar(Y),     Y=listOf(X)   )
29.06.18 03:11:34<dmiles> when(   (nonvar(X);nonvar(Y)),     unify( Y , listOf(X) )   )
29.06.18 03:11:58<dmiles> that is a coinductive unification hook
29.06.18 03:12:10<HMCa> i'm not sure that really answers any questions
29.06.18 03:12:58<dmiles> well it sounds like i said "you use your best hjudgement" ?
29.06.18 03:13:00<HMCa> it neither destructures any existing list, and should not just do a pointless infloop coinduction (that is what it does now, and we call it the bug)
29.06.18 03:13:17<dmiles> then what does the rule do?
29.06.18 03:13:25<dmiles> what do you want it to do?
29.06.18 03:14:14<HMCa> rifht now it infloops the backtrack building ((?x)), then (((?x))), then ((((?x)))), then... etc... until ram runs out
29.06.18 03:14:26<dmiles> if it didnt infloop what should it do?
29.06.18 03:14:32<HMCa> what we want it to do is cut, fail, and backtrack
29.06.18 03:15:16<HMCa> iow should produce no result from the query
29.06.18 03:15:52<dmiles> ok so you want it to just disable itself after the fist use?
29.06.18 03:16:01<dmiles> first use per chain?
29.06.18 03:16:32<HMCa> not sure what you really mean by "first use"
29.06.18 03:16:50<HMCa> what "use" and use "of what"? :-)
29.06.18 03:18:34<dmiles> first use in a query
29.06.18 03:18:55<dmiles> first time it produces a  (foo)
29.06.18 03:19:40<dmiles> first use disablement is what you mean but cutting
29.06.18 03:19:42<HMCa> a "((?x))" ypu mean?
29.06.18 03:19:47<HMCa> *you
29.06.18 03:20:02<dmiles> right like it never gets to ((?x)) only to (?x)
29.06.18 03:20:32<HMCa> well it already has (?x), the first created case is ((?x))
29.06.18 03:20:42<dmiles> though you still want it to convert (foo) to foo when going the otehr direction?
29.06.18 03:20:44<HMCa> ideally just before actually creating it, hehe, but yah ;-)
29.06.18 03:20:54<HMCa> there is no "the other direction"
29.06.18 03:21:43<dmiles> my query might be     {?x superstructure (foo)}   .. should it make ?x = foo ?
29.06.18 03:22:08<dmiles> this is what i meant by destructuring
29.06.18 03:22:23<HMCa> errr, the query is given in the example
29.06.18 03:22:38<HMCa> that is the only query we're considering, for now, plz
29.06.18 03:24:14<dmiles> i not seeign a query at https://github.com/sto0pkid/AutoNomic/blob/master/tests/lists/superstructural.tau
29.06.18 03:24:35<dmiles> unles you meant "()" is the query
29.06.18 03:24:50<HMCa> query
                 <HMCa> () recurse forever.
29.06.18 03:24:51<HMCa> fin.
29.06.18 03:25:10<HMCa> "() recurse forever" is the query
29.06.18 03:25:34<dmiles> how does () inify with any heads?
29.06.18 03:25:35<dmiles> how does () unify with any heads?
29.06.18 03:25:55<HMCa> it matches the second rule, with ?x=(), ?y=forever
29.06.18 03:26:48<HMCa> remember we are n3, so spo, predicate in middle :-P
29.06.18 03:26:54<dmiles> ok the querion wioth be what is the result you want if it didnt run forever?
29.06.18 03:27:02<HMCa> none
29.06.18 03:27:05<HMCa> no results
29.06.18 03:27:20<HMCa> empty set
29.06.18 03:27:24<dmiles> then jsut have the rule disable after first use
29.06.18 03:27:32* HMCa sighs
                 <dmiles> rule on line 5
29.06.18 03:27:41<HMCa> explaining in circles again ;-)
29.06.18 03:27:50<dmiles> not that would be my solution.. as i canonicalize the KB first
29.06.18 03:28:12<dmiles> line 5 produces 3 rules
29.06.18 03:28:34<dmiles> well at least 2 rules
29.06.18 03:28:48<dmiles> as line 8 produces 3 rules
29.06.18 03:28:53<HMCa> no, we don't need to add any rules...
29.06.18 03:29:06<dmiles> well thien i dont know how else one does it
29.06.18 03:29:18<HMCa> the kb when run should still be just the 2 rules and the dummyfact
29.06.18 03:29:24<dmiles> other than to treate like CNF to do projection
29.06.18 03:29:33<HMCa> it *is* cnf...
29.06.18 03:29:55<dmiles> if you treated like CNF you get a total of 5 rules
29.06.18 03:30:00<dmiles> but you only wanted 2 rules
29.06.18 03:30:17<dmiles> so its not CNF
29.06.18 03:31:01<dmiles> if you treat like the 5 rules that the CNF becomes it is easier to lease and cut
29.06.18 03:31:02<HMCa> welll, i'm sticking with your(/timbl's) "keep lists internalized" here
29.06.18 03:31:03<HMCa> so
29.06.18 03:31:16<HMCa> 2 rules plz ;-)
29.06.18 03:31:35<dmiles> well if you are liking for a Prolog read of RDF you are stuck with infloops
29.06.18 03:31:55<dmiles> well if you are looking for a Prolog read of RDF you are stuck with infloops
29.06.18 03:32:09<HMCa> again, the question is simply when and when-not-to convert the existential in head to a universal...
29.06.18 03:32:40<dmiles> for example the herbrandizaion pass will create two vars
29.06.18 03:32:45<HMCa> we are not looking for a prolog read of rdf, but a datalog... but let's not get sidetracked...
29.06.18 03:32:48<dmiles> for line 5
29.06.18 03:33:45<dmiles> too bad the datalog read will lose the abilty to destructure
29.06.18 03:34:32*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
29.06.18 03:34:37<HMCa> we don't care about destructurig here, there is no destruxturing in this example
29.06.18 03:34:47<HMCa> *destructruing
29.06.18 03:34:52<dmiles> ok well impl as datalog read
29.06.18 03:35:11<dmiles> jsut ad the one line that says if the head is not a ground term.. fail
29.06.18 03:35:14<HMCa> there is *only* superstructuring in this example
29.06.18 03:35:32<dmiles> then it wont infloop
29.06.18 03:35:33<HMCa> 5 < dmiles> jsut ad the one line that says if the head is not a ground term.. fail
29.06.18 03:35:36<HMCa> no
29.06.18 03:35:47<HMCa> as stoopkid already knows, this does not work in general
29.06.18 03:36:04<HMCa> so you need to be more specific if you're going to take that approach
29.06.18 03:36:16<dmiles> sorry jsut ad the one line that says if the head is a stucture term
29.06.18 03:36:21<dmiles> sorry jsut ad the one line that says if the head is a stucture term.. fail
29.06.18 03:36:39<dmiles> must be a simple const or a var only
29.06.18 03:36:44<dmiles> in each argument
29.06.18 03:36:47<HMCa> can you clarify a definition of "is a structure term"?
29.06.18 03:37:07<dmiles> a structure term is any term that is  nonvar and non litteral
29.06.18 03:37:19<dmiles> such as a list
29.06.18 03:37:37<HMCa> what about a bound bnode? :-)
29.06.18 03:37:50<dmiles> those are considered litterals
29.06.18 03:37:51<HMCa> that is nonvar and nonliteral, but also not what you mean
29.06.18 03:38:05<HMCa> so you need to clarify even further, I think
29.06.18 03:38:09<dmiles> bnodes are document local litterals
29.06.18 03:38:38<HMCa> eh, while you're not wrong I do doubt stoop and koo will know what you mean by that ;-)
29.06.18 03:38:51<HMCa> can you rephrase without "document local"?
29.06.18 03:39:49<dmiles> bnodes are litterals that are already reslved to be menaningfull in a document .. outside oif a document they are variable
29.06.18 03:40:04-christel- : [Global Notice] Overnight, we became aware of unauthorised attempts to access freenode accounts. Please have a quick read of http://freenode.net/news/security-update-rpa and we encourage you not to reuse passwords, and to take the necessary precautions in terms of resetting yours. Thank you.
29.06.18 03:40:11<dmiles> bnodes are litterals that are already resolved as ground to be menaningfull in a document .. outside of the orignal document they are variables
29.06.18 03:41:05<HMCa> what id the bnode is bound to another bnode, which is still in queue?  So that doesn't exactly work as a precise definition either, I think?
29.06.18 03:41:10<HMCa> *if
29.06.18 03:41:32<dmiles> if they are from the same document usually you dont want them to bind
29.06.18 03:41:40<dmiles> they shouldnt anyways
29.06.18 03:41:55<HMCa> again let's avoid refering to "documents"...
29.06.18 03:41:56<dmiles> as the author would have used the same bnode if they are supposed to be the same
29.06.18 03:42:27<dmiles> the non document view of a document is "bag of axioms"
29.06.18 03:43:17<HMCa> even within one single graph there are cases in univar where such bindings can come up, esp because we can schedule into the queue in funny ways, being a mix of dfs/bfs...
29.06.18 03:43:18<dmiles> benodes though have a very specific meaning though whnen it come to how axiomns are supposed to be bagged together
29.06.18 03:43:32<HMCa> but those details are sort of beside the point here
29.06.18 03:44:10<dmiles> well the thing of what i was saying it is important to know that a bnode is like any other litteral
29.06.18 03:44:41<dmiles> the only time a bnode is ungrounded is when leaving the bag
29.06.18 03:44:42* HMCa gtg in a sec
29.06.18 03:45:06<dmiles> this way bnodes can stay ununifiable
29.06.18 03:45:22<dmiles> this way bnodes can stay un-unifiable inside their rule context
29.06.18 03:45:49<dmiles> bag = docuent = rule-context = graph
29.06.18 03:46:11<HMCa> again, i am not sure if stoop/koo will know what you mean by that, and i'm quite sure that even if they do they will not see how it relates to this example
29.06.18 03:46:14<HMCa> heh
29.06.18 03:46:43<HMCa> so can you rephrase all of this in terms of this example, and my specific question re when-to v when-not-to?
29.06.18 03:46:54<dmiles> if  you merge two graphs you create a special "maybe the same" such as rules that consequent in owl:sameAs/2
29.06.18 03:47:19<HMCa> forget multigraph and esp forget owl for the moment, plz
29.06.18 03:47:30<HMCa> they both have nothing to do with this example, really
29.06.18 03:48:20<dmiles> any head going in..  if not:   ?var, _:bnode, foo:litterlal,  "sdfsdf"@string  22@xsd:integer you fail it
29.06.18 03:48:49<dmiles> if it has an arge that is not those terms
29.06.18 03:49:03<HMCa> ^but that is not a general solutiom
29.06.18 03:49:05<HMCa> *solution
29.06.18 03:49:20<dmiles> nope but it is for as you said "only dealing with your query"
29.06.18 03:49:45<dmiles> if you want to deal with a gneral soltuon we dont use datalog hack
29.06.18 03:49:50<HMCa> i mean... explain what that *accomplishes* that "is the general solution"
29.06.18 03:49:55<HMCa> iow generalize
29.06.18 03:50:04<dmiles> it a back hack
29.06.18 03:50:06<HMCa> let me put this another way...
29.06.18 03:50:08<dmiles> it a bad hack
29.06.18 03:50:19<dmiles> but i am giving you an answer based on the tech level you want
29.06.18 03:50:51<dmiles> you dont really neded a genral solution
29.06.18 03:50:52<HMCa> we've now (mostly) discussed three solutions to this case, what is it that they have in common that "makes them all work"?
29.06.18 03:51:04<dmiles> sinc ei onploy know of one method that works :)
29.06.18 03:51:30<dmiles> since i only know of one method that works :)  that took many more years of research than TimBL ever did
29.06.18 03:51:47<HMCa> what is it that all three solutions do to the quantifiers, in terms of re-arranging them, that makes the cut trigger?
29.06.18 03:52:07<dmiles> i am referning to the research T. Swift, M Kifer, P Tarau did
29.06.18 03:52:36<HMCa> again let's not refer to other work on other impls here
29.06.18 03:53:01<HMCa> let's keep the context of the discussion as narrow as we can
29.06.18 03:53:08<dmiles> i am sayign if you want datalog hacks.. here you are
29.06.18 03:53:34<dmiles> and dont worry about quantifiers .. your exmaple doesnt use quantifiers
29.06.18 03:53:42<HMCa> uh
29.06.18 03:53:43<HMCa> wut?
29.06.18 03:53:46<HMCa> yes it does
29.06.18 03:54:14<HMCa> that is the whole question here, existentially quantified vars in heads! :-P
29.06.18 03:54:17<dmiles> they are all universal ?
29.06.18 03:54:29<HMCa> no?
29.06.18 03:54:31<dmiles> only head singletns are existentiual
29.06.18 03:54:34<dmiles> i dont see head singletons
29.06.18 03:54:50<dmiles> ?X appears twice in the head
29.06.18 03:55:10<HMCa> the list itself, and ?x, are both existential
29.06.18 03:55:24<HMCa> they both appear in the head but not body
29.06.18 03:55:52<dmiles> "they" ?
29.06.18 03:56:01<dmiles> you mean you created a  ?y
29.06.18 03:56:10<HMCa> the list is unnamed
29.06.18 03:56:17<dmiles> like ?y = (?x)
29.06.18 03:56:20<HMCa> no
29.06.18 03:57:00<dmiles> "the list" at most is a bonode
29.06.18 03:57:04<dmiles> "the list" at most is a bnode
29.06.18 03:57:24<HMCa> yes, and is existential
29.06.18 03:57:38<dmiles> but you cant ship that bnode off with ?x
29.06.18 03:57:53<HMCa> i dont know what you mean by "ship off"?
29.06.18 03:58:38<dmiles> that bnode is an open term thus cant be separated.. thus the ?x is still in place
29.06.18 03:58:49<dmiles> so ?x appears twice
29.06.18 03:58:57<dmiles> thus is not existential
29.06.18 03:59:01<HMCa> uh
29.06.18 03:59:09<HMCa> no, ?x is existential
29.06.18 03:59:16<dmiles> the bnode might be called existential but it s still a litteral like any other cosntant
29.06.18 03:59:27<dmiles> nope.. ?x is univerasal
29.06.18 03:59:29<HMCa> it has to not just appear twice, but must appear in body
29.06.18 03:59:33<dmiles> "single head vars"
29.06.18 03:59:35<HMCa> which it does not
29.06.18 03:59:49<dmiles> dobulke head vars are not existential
29.06.18 04:00:06<dmiles> at least in most reads
29.06.18 04:00:17<dmiles> foo(X,X).
29.06.18 04:00:27<dmiles> is X existential or univrals?
29.06.18 04:00:53<dmiles> bar -> foo(X,X).     what about now?
29.06.18 04:02:22<HMCa> for our purposes, to be universal the var must appear in body... we have no reason to make duplicated vars in heads universal afaik
29.06.18 04:05:19<HMCa> again... we are a datalog not a prolog...
29.06.18 04:05:51<HMCa> so we only have distinguished body universals, body existentials, and head existentials
29.06.18 04:06:02<dmiles> datalog treats  foo(X,X).   as  X=Y,foo(X,Y).
29.06.18 04:06:21<HMCa> here we are concerned with just head existentials, which are the only type of variable in the first rule of the example
29.06.18 04:06:26<dmiles> specically like:   X=Y -> foo(X,Y).
29.06.18 04:06:46<HMCa> yes, but i'm trying to get you to explain *why*
29.06.18 04:06:51<HMCa> 1 < HMCa> what is it that all three solutions do to the quantifiers, in terms of re-arranging them, that makes the cut trigger?
29.06.18 04:06:56<HMCa> ^is the *why*
29.06.18 04:07:14<HMCa> quantifier elimination/alternation...
29.06.18 04:07:46<dmiles> what specifically are the three solutions?
29.06.18 04:07:48<dmiles> quantifier elimination requires canonicalization
29.06.18 04:08:49<dmiles> that is that in order to eliminate quantifiers you must use CNF
                 <HMCa> detecting cycles, converting to universal by adding "?Y=(?x)" in body (your first), or cutting on non-ground, non-bound, non-literals (your second)
                 <HMCa> *detecting cycles and reordering the body
29.06.18 04:09:29<HMCa> can you explain the common element in these three things, or not?
29.06.18 04:09:32<dmiles> the  "?Y=(?x)"  is a canoncalizing step yes
29.06.18 04:09:53<HMCa> what is the significance of the change that makes all 3 work out?
29.06.18 04:10:13<dmiles> but it only continue to keep the universals universal.. that confusing part would to be if we though the ?x was ever existential
29.06.18 04:10:21<dmiles> *thought
29.06.18 04:10:54<HMCa> I give up
29.06.18 04:11:00<HMCa> and I gtg 10 minutes ago
29.06.18 04:11:15* dmiles to :(
29.06.18 04:11:30<dmiles> i mena i had ot go a while ago to
29.06.18 04:12:53<HMCa> the ?x *is* existential... if we thought it was every universal then we couldn't be a datalog! XD
29.06.18 04:12:54<dmiles> well those three solution together might be helpfull .. but i dont think of them as a genral solution as you still want to descrrture terms
29.06.18 04:13:07<HMCa> plz learn our syntax some time. :-D
29.06.18 04:13:20<dmiles> nope ?x is not existential
29.06.18 04:13:27<dmiles> wont get me to agree to that
29.06.18 04:13:39<HMCa> I promise you won't regret it, things have come a long way since that almost-30-years-ago time
29.06.18 04:13:49<dmiles> bnodes are not existential any more than  abd:efg is existential
29.06.18 04:14:21<dmiles> if this was full logic yes they do have an existential read when outside the graph
29.06.18 04:14:32<HMCa> abd:efg is not a variable at all, let alone one of our three kinds of variable, none of which is called "universal head variable"
29.06.18 04:15:00<dmiles> i am saying that you cant treat bnodes or lists as existential automatically
29.06.18 04:15:05<HMCa> we have no such, we are not wanting to be prolog
29.06.18 04:15:12* HMCa afk
29.06.18 04:17:16<dmiles> document1 { _:a  foo:b foo:c }   ==   { document1:a  foo:b foo:c }
29.06.18 04:18:16<dmiles> this is why they are effectively  uris
29.06.18 04:19:41<dmiles> strutureal bnodes like lists to have the same read in RDF
29.06.18 04:20:54<dmiles> we'd need to be talking about graph merging to go beyond that simplici







29.06.18 08:28:33<stoopkid> my summary of the conversation above:
29.06.18 08:28:35<stoopkid> "i mean we all jsut made all this up 20+ years ago"
29.06.18 08:28:37<stoopkid> "...."
29.06.18 08:28:46<stoopkid> "I give up"
29.06.18 08:28:53<stoopkid> fin.
29.06.18 08:31:58<stoopkid> i tend to agree with dmiles here
29.06.18 08:32:34<stoopkid> about there not even being a fixed agreed-upon semantics in the first place
29.06.18 08:33:33<stoopkid> HMCa: my interpretation of the situation is that you've restricted yourself to a particular inferencing semantics and assumed it generalized to other people to at least some meaningful extent
29.06.18 08:33:51<stoopkid> and we seem to be finding out that in fact it does not
29.06.18 08:34:34<stoopkid> that's not a problem though, the problem is that you can't explain these semantics, but yet are still trying to act like they're *the* semantics
29.06.18 08:35:35<stoopkid> here's a q: if we're supposed to be datalog, why have we wasted so much time on euler?
29.06.18 08:35:43<stoopkid> and RDF/N3?
29.06.18 08:36:37<stoopkid> i think we're going to stop working on this until you can write up a doc explaining the exact semantics you're looking for
29.06.18 08:37:09<stoopkid> the whole doc, up front, i don't want an IRC convo that barely starts explaining and then has to be repeated over and over
29.06.18 08:37:25<stoopkid> if you can't provide such a document, then i'm moving on to plan B
29.06.18 08:37:34<stoopkid> cause this is ridiculous, seriously







29.06.18 13:40:19<HMCa> stoopkid: there's a lot of pertinent stuff in that "..." that I hope you didn't just skip over!
29.06.18 13:40:29<HMCa> 35 < stoopkid> here's a q: if we're supposed to be datalog, why have we wasted so much time on euler?
29.06.18 13:40:42<HMCa> 35 < stoopkid> and RDF/N3?
29.06.18 13:41:10<HMCa> because n3 is supposed to be a datalog, as we've discused many times
29.06.18 13:42:25<HMCa> there is an agreed upon semantics, for at least the past 6 of those >30 (not "20+"), nevermind that dmiles was out of the loop when they were agreed upon
29.06.18 13:42:32<HMCa> (at rr2012)
29.06.18 13:43:37<HMCa> (if there weren't, google would never have launched kg, for one thing... XD)
29.06.18 13:45:48<HMCa> I was curious to see if I could get dmiles to explain them, but all that really happened was that he solidified my belief that he believes that they weren't agreed upon yet, lol
29.06.18 13:46:02<HMCa> and he apparently couldn't even infer them
29.06.18 13:46:36<HMCa> anyway, let's see if you can... can you identify the "common element" between the 3 solutions mentioned?
29.06.18 13:47:19<HMCa> it is quantifier alternation... and that is basically what I had forgotten yesterday that this is actually all about...
29.06.18 13:48:05<HMCa> the problem here is going directly from existential to existential, which we can never do (or else we aren't datalog, but prolog)
29.06.18 13:50:47<HMCa> so, let me know if you understand what I mean by that or not
29.06.18 13:54:16<stoopkid> HMCa: i do not
29.06.18 13:54:58<stoopkid> i know what quantifier alternation is, but i don't see how it relates
29.06.18 13:56:22<HMCa> ok first, do you understand why quantifier alternation can assert termination in general?
29.06.18 13:56:42<stoopkid> no, i'm not even sure what you mean by that
29.06.18 13:57:36<HMCa> i'll rephrase... do you understand why datalog query always terminates?
29.06.18 13:57:42<HMCa> (and prolog query does not?)
29.06.18 14:02:16<stoopkid> nope
29.06.18 14:04:29<HMCa> oof, I'd been kind of hoping you understood the datalog/prolog distinction by now, heh
29.06.18 14:05:16<stoopkid> i'd been kind of hoping you would've written up the semantics of our inferencer by now regardless of other inferencing systems
29.06.18 14:05:25<stoopkid> but here we are :P
29.06.18 14:05:53<HMCa> this isn't about "other inferencing systems" this is about model theory
                 <HMCa> ok, so in prolog quantifiers can be arranged arbitrarily, and the programmer is expected to insert explicit cuts to manage termination, I'm assuming you've gathered that much?
29.06.18 14:06:34<stoopkid> i think that clicks, yes
29.06.18 14:07:29<HMCa> in datalog, the syntax *forces* particular quantifier arrangements (specifically an alternation with universals "always before" existentials) and all cuts are implicit
29.06.18 14:09:38<HMCa> this is specifically so that it will remain terminating, with a bound complexity (finite models)
29.06.18 14:10:49<HMCa> univar, right now, does not force this alternation when it comes to existential head vars... so let's look at why each of the proposed solutions "fixes" that:
29.06.18 14:10:56*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
29.06.18 14:12:43<stoopkid> before we look at the proposed solutions, can you elaborate a bit more on the problem
29.06.18 14:12:51<stoopkid> "univar, right now, does not force this alternation when it comes to existential head vars."
29.06.18 14:13:57<stoopkid> can you translate the rules from the example into a form using explicit quantifiers, both "as it is now" as well as "what it's supposed to be"?
29.06.18 14:14:37<HMCa> well, yes... in fact we already elaborated that (in that "..." that I hope you didn't skip)
29.06.18 14:15:03<HMCa> the ?x and the list bnode are existentials, yes?
29.06.18 14:16:26<HMCa> *head* existentials
29.06.18 14:16:42<HMCa> and ?y is a body existential, yes?
29.06.18 14:17:09<HMCa> ?x and ?z in the second rule are universal, yes?
29.06.18 14:17:36<HMCa> are we on the same page so far, I hope? :-)
29.06.18 14:17:39<stoopkid> well: 1) idk what a "body existential" is, and 2) i'm kinda with dmiles that my default interpretation of a variable that appears twice in a head triple is that it's universally quantified
29.06.18 14:17:55<HMCa> ouch
29.06.18 14:18:10<stoopkid> like "?x id ?x"
29.06.18 14:19:49<stoopkid> dmiles has talked about "body existentials" before, like he said ?y would be a body existential, but i proved that every such body/antecedent existential can be reinterpreted as a universal without changing semantics
29.06.18 14:20:50<stoopkid> at least under the interpretation that dmiles provided before (in a prior discussion)
29.06.18 14:21:46<HMCa> right, because he told you about prolog...
29.06.18 14:22:06<HMCa> we do *not* want to be a prolog
29.06.18 14:22:21<HMCa> (maybe i'll make that a mantra for awhile)
29.06.18 14:22:48<HMCa> we are a datalog, so we have only 3 kinds of variables
29.06.18 14:22:59<HMCa> distinguished universals
29.06.18 14:23:01<HMCa> body existentials
29.06.18 14:23:06<HMCa> head existentials
29.06.18 14:23:16<stoopkid> alright, before we go further, let me pastebin my interpretation of what the formula would look like with explicit quantifiers and you can point to where i'm going wrong
29.06.18 14:24:08<HMCa> to be universal, the var must be in body and head - I've said this a lot over the years... I'll keep saying it until it sinks in. ;-)
29.06.18 14:27:10<HMCa> this is very related to another thing that i've said over the years: while our system will ingest arbitrary rdf consistently it will *not* necessarily ingest arbitrary n3logic rules consistently (because this is a meaningless goal, because (for a time) n3logic was trying to be more than datalog)
29.06.18 14:28:24<stoopkid> https://pastebin.com/Pbt3igKa
29.06.18 14:29:04<stoopkid> the first two are provably equivalent, the 3rd is not
29.06.18 14:29:12<stoopkid> s/provably/semantically/
29.06.18 14:30:10<HMCa> the first two are *not* semantically equivalent when you consider interpretation of both rules, together!
29.06.18 14:30:43<stoopkid> alright lemme re-pastebin
29.06.18 14:31:00<dmiles> stoopkid did actually prove to me that what i wanted to call a "body existential" turned out not to be existential
29.06.18 14:31:51<HMCa> dmiles: nor should he be able to, I think, heh... and this gets to thr crux of the matter
29.06.18 14:32:36<dmiles> *maybe* a singleton in the body can be treated like an existential during modus tollens.. but once it is negated the existential become universal
29.06.18 14:32:50<HMCa> univar has an existential quantification directly under an existential quantification, and hence the implicit cut can't cut the loop because the quantifiers aren't alternating!
29.06.18 14:33:45<HMCa> (hence univar is prolog missing esplicit cuts, not datalog, and we get the explosion)
29.06.18 14:33:55<HMCa> and we do *not* want to be a prolog!
29.06.18 14:34:29<stoopkid> https://pastebin.com/KyNwmGN7
29.06.18 14:34:40<stoopkid> you can see my interpretation doesn't change a whole lot (at all) when adding in the other rules
29.06.18 14:35:17<stoopkid> HMCa: btw dmiles said "did" not "didn't"
29.06.18 14:36:50<HMCa> right, he's also thinking in terms of prolog/fol, hence why he accepts your proof... he shouldn't! :-P
29.06.18 14:37:09<dmiles> its funny to hear "explosion" in the way HMCa just used it, i used it exactly that way for 20 years.. but over the last year it means something else
29.06.18 14:37:32<stoopkid> dmiles: both uses are common, it's an overloaded expression
29.06.18 14:37:53<HMCa> there's a lot of those coming up lately, heh
29.06.18 14:38:01<dmiles> *nod* "combinatoric explosion"
29.06.18 14:38:55<HMCa> I'm going to have to run for a bit before long, btw, but will be back in a couple/few hrs after
29.06.18 14:39:04<HMCa> but i have a few min yet
29.06.18 14:39:54<dmiles> the reason i accepted the stoopkid proof is that the existentialism i was seeing wasnt actually a "logical existential" it was though technicly that the body beinging had to "exist"
29.06.18 14:40:29<dmiles> the reason i accepted the stoopkid proof is that the existentialism i was seeing wasnt actually a "logical existential" it was though technicly that the body binding had to "exist" .. it was a "pratical exists" not a "logical exists"
29.06.18 14:41:04<dmiles> it was a "logical universal"
29.06.18 14:41:41<stoopkid> dmiles: would you agree with this description of it: an existential in the antecedents means "if exists" rather than "does exist"
29.06.18 14:41:44<dmiles> this wasnt under sa prolog interpretation at all it was a logical CNF
29.06.18 14:41:47<HMCa> and thats fine up to a point, until you're trying to consider the alternation structure and then you can see that it isn't - because it "carries" like an existential
29.06.18 14:42:46<HMCa> (we shouldn't expect any distinguished universal to ever "carry"!  Only be bound, or not!!)
29.06.18 14:42:59<dmiles> right HMCa, that was my point in a way
29.06.18 14:43:25<stoopkid> HMCa: well, start by pointing to the explicitly-quantified formula that represents the correct interpretation, and then we can look at how to reach that interpretation algorithmically
29.06.18 14:43:28<dmiles> but that is both of us conflating our notion of what needs to happen.. not about quantifiers
29.06.18 14:43:43<dmiles> but that is both of us ( HMCa and I ) conflating our notion of what needs to happen.. not about quantifiers
29.06.18 14:43:57<HMCa> dmiles: but it is about quantifiers if we're talking implocit cuts!
29.06.18 14:44:21<HMCa> dmiles: btw i'm glad we're at least on the same page that far, there is hope yet! heh
29.06.18 14:45:11<stoopkid> i'm glad there exist two people at  least on the same page at all XD
29.06.18 14:45:30<HMCa> stoopkid: I already did?  the second rule's ?x and ?z are the only distinguished universals... simple as that...
29.06.18 14:45:58<HMCa> ^univar's current interpretation
29.06.18 14:46:13<stoopkid> note that i gave two semantically inequivalent formulas that used ?y as an existential
29.06.18 14:47:05<dmiles> right i think HMCa are on the same page about those special varialbes.
29.06.18 14:47:25<dmiles> but what i discovered a few weeks ago is that I have to treat universal variable special as well what i thought was machinery into required for proof carrying existentials turn out i need that same machinery for universal vars as well
29.06.18 14:47:59<dmiles> but what i discovered a few weeks ago is that I have to treat universal variable special as well (not like prolog treats non existentials)
29.06.18 14:48:10<dmiles> what i thought was machinery into required for proof carrying existentialsm turned out i needed that same machinery for universal vars as well
29.06.18 14:48:26<HMCa> dmiles: to a point, at least, we disagree about the first rule's ?x still, I think?  You are still allowing head universals? :-)
29.06.18 14:48:50<dmiles> yes .. if a variable every repeats in head.. they need to be "variablalized"
29.06.18 14:49:30<stoopkid> dmiles: to be clear, i think you specifically mean when they repeat within a single triple/quad in the head
29.06.18 14:49:34<dmiles> tha tmeans it need to be converted to single vairable in the head.. and then unification moved to the body
29.06.18 14:50:08<HMCa> so, I'm looking at datalog and how it doesn't have head universals, and how that fits into forcing the alternation. :-|
29.06.18 14:50:31<dmiles> so "?x id ?x"  i turn to   " {"?x same  ?y} -> {?x id ?y}"
29.06.18 14:51:01<stoopkid> for example "{?x a Nat} => {?x suc ?y. ?y a Nat}"; ?y appears twice but it looks like it's supposed to be existential, not universal; on the other hand: "{} => {?x id ?x}; ?x appears like it should be universally quantified, i.e. it looks exactly like "\x.x"
29.06.18 14:51:07<stoopkid> (the identity lambda)
29.06.18 14:51:15<HMCa> right, moving the unification to the body rewrite the quantification into a distinguished universal and recovers the alternation!
29.06.18 14:51:17<dmiles> which evne justifies that they are now in the body
29.06.18 14:51:44<HMCa> *rewrites
29.06.18 14:52:08<HMCa> hence why the second of the three solutions works
29.06.18 14:52:37<HMCa> the other two accomplish the same thing, they avoid the non-alternating interp!
29.06.18 14:53:26<HMCa> indeed *any* avoidance on the non-alternation of the quantification will allow the loop to be implicitly cut
29.06.18 14:53:40<HMCa> *of the
29.06.18 14:54:08<stoopkid> note that all my interpretations appear to respect the quantifier-alternation that seems to be claimed to be required
29.06.18 14:54:14<dmiles> "{?x a Nat} => {?x suc ?y. ?y a Nat}"    <- oops yet there goes the neighboorhood
29.06.18 14:55:21<dmiles> thought hat is a conjuctive head
29.06.18 14:55:48<dmiles> though that is a conjunctive head which changes how it is converted
29.06.18 14:56:23<dmiles> so "maybe" this is a conjuctive head as well {this isa dummyfact} => {?x superstructure (?x)}.
29.06.18 14:56:46<HMCa> stoopkid: i disagree.... it isn't about alternating wihin any single formula, it is about alternating during the evaluation...
29.06.18 14:57:05<dmiles> {this isa dummyfact} => {?x superstructure ?y.   ?y same (?x)}.
29.06.18 14:57:07<HMCa> hence why the first solution (reorderig cycles to top of bodies) works
29.06.18 14:57:50<HMCa> and why the third solution (cut on any ungroundable) works...
29.06.18 14:58:23<HMCa> they only change the interp, so that the eval never reaches the double existential
29.06.18 14:58:33<HMCa> the formulas thrmselves remain the same
29.06.18 15:00:26<HMCa> only the second solution (rewriting into a universal) actually chsnges the formula, which is why it must be done selectively (only on what dmiles calls "structural")
29.06.18 15:00:43<HMCa> anyway i gtr for at least 1-2 hr now
29.06.18 15:01:12<stoopkid> alright, catch ya later
29.06.18 15:01:29<HMCa> stoopkid: please look into the difference between prolog and datalog, and why datalog can be always-terminating via quantifier alternation!
29.06.18 15:01:31<HMCa> heh
29.06.18 15:02:12<HMCa> I think if you can get to an understanding of that, this will probably click
29.06.18 15:02:57<HMCa> and we do *not* want to be a prolog.  When you understand what I really mean by that, this will have clicked for sure. ;-)
29.06.18 15:03:19<dmiles> what i always read is that datalog is mearly only allowing ground terms into heads
29.06.18 15:03:42<dmiles> but doing nothing any differnce than a naive prolog
29.06.18 15:03:50<HMCa> dmiles: reciew rr2011/rr2012 plz!  is not so simple!!
29.06.18 15:03:54<HMCa> *review
29.06.18 15:04:05* HMCa afk, bbiab
29.06.18 15:04:21<dmiles> datalog can affard to be more naive in that it doent allow structures and doesnt recurse on non ground terms
29.06.18 15:04:51<stoopkid> alright, i dont understand anything better yet, but this is at least enough to point me towards what to research






29.06.18 17:31:43<stoopkid> fuckin CAs...
29.06.18 17:33:26<stoopkid> i come outside to find a giant practically-non-removable sticker plastered to my fiancee’s car by the landlord/property-manager
29.06.18 17:34:19<stoopkid> we need something like goof-off to remove it but we can’t drive to get it because the sticker’s plastered across the windshield
29.06.18 17:36:27<stoopkid> so im calling around to try to find out who exactly was responsible for this, but they just keep passing me around not trying to take responsibility
29.06.18 17:39:22<stoopkid> this is an extremely minor offense in the grand scheme of things, pe
ople are dealing with way bigger CA problems than this, including me, but for some reason this really got to me..
29.06.18 17:40:03<stoopkid> probably because it was so visible with a giant orange sticker
29.06.18 17:42:05<stoopkid> i actually even agree with their policy that prompted them to put the sticker on the car, what i dont agree with is their attitude that they can just do whatever they want to us and feel safe that there’s nothing we can do about it except take their shit
29.06.18 17:46:47<stoopkid> basically just packaged up all the problems with CAs into a metaphor that im capable of wrapping my mind around concretely rather than abstractly..
29.06.18 17:56:14<HMCa> https://tinyurl.com/gangstalking-is-real  <-- well, that escalated quickly
29.06.18 18:03:05<HMCa> stoopkid: are you sure it was actually a landlord?  XD
29.06.18 18:03:44<HMCa> :-\
29.06.18 18:26:19<stoopkid> yea everybody i’ve talked to has acknowledged that its the policy and that they were doing it now, but they keep passing the blame around
29.06.18 18:27:25<stoopkid> currently they’re placing the blame on the board of directors of the community, and apparently they can only be reached through email..
29.06.18 18:28:15<stoopkid> so essentially im being harassed by an anonymous CA
29.06.18 18:30:09<HMCa> sounds familiar... :-(
29.06.18 18:30:26<HMCa> see my pms, btw
29.06.18 18:30:29<stoopkid> like i said, really a small thing to be upset about but its the principle of the matter, if i cant stand up for myself for this then how can i assume ill be able to stand up for myself in a serious situation




30.06.18 02:17:38<HMCa> ont.io looks familiar





30.06.18 03:14:54<kook> hi HMCa
30.06.18 03:15:01<kook> are you coming to baltimore too?
30.06.18 13:54:58<HMCa> very unlikely that I'd be able to fit it into schedule





30.06.18 16:16:48<nilli_> hi, HMCa stoppkid I saw some very interesting exchange form the 29th. Ill try to understand it better if you dont mind
30.06.18 16:21:06<nilli_> 29.06.18 08:34:34<stoopkid> that's not a problem though, the problem is that you can't explain these semantics, but yet are still trying to act like they're *the* semantic
30.06.18 16:21:54<nilli_> 29.06.18 08:36:37<stoopkid> i think we're going to stop working on this until you can write up a doc explaining the exact semantics you're looking for
30.06.18 16:23:02<nilli_> 29.06.18 08:37:09<stoopkid> the whole doc, up front, i don't want an IRC convo that barely starts explaining and then has to be repeated over and over
30.06.18 16:24:27<nilli_> 29.06.18 08:37:25<stoopkid> if you can't provide such a document, then i'm moving on to plan B 29.06.18 08:37:34<stoopkid> cause this is ridiculous, seriously
30.06.18 16:27:07<nilli_> ok I also read the entire conversation that came after but as stoop say on the IRC you can talk for ever.
30.06.18 16:38:12<nilli_> from stoopkid I understand that "HMCa  agree to either present the semantics as he intends them or acknowledge that his plans are incomplete"
30.06.18 16:40:25<nilli_> and stoopkid  role is "to implement the semantics he presents,not to waste our time on a wild-goose-chase to make up for the fact that so far he's failed to present those semantics"
30.06.18 16:42:06<nilli_> I also understand that dmiles put much into trying to understand or maybe refuting HMCa on subjects he believes he know well
30.06.18 16:43:18<nilli_> and finally from koo I get it that the issues with the semantic web is what stop things form completion at this point
30.06.18 16:45:01<nilli_> So following all these I have a few things to say too:
30.06.18 16:46:26<nilli_> 1. we may not be fully aware to what HMCa have in mind regarding the  work on the project and what he expect you guys to reach on your own using his instructions, however this have to be very clear.
30.06.18 16:50:45<nilli_> 2. if that is indeed clear,  thus HMCa need to provide the semantic web doc or be clear about expecting you guys figure it out based on IRC instructions
30.06.18 16:52:26<nilli_> 3. on that precises point im not sure if its the principle or if HMCa dont have it,  in a way it might be both
30.06.18 16:55:29<nilli_> 4. if that is the case then we need to see that there is indeed consistency regarding all of HMCa arguments , and it was us here who did not get it and missed some points.
30.06.18 16:59:51<nilli_> 5. if it is indeed consistent (as HMCa claims on the conversation that followed that same day) then he should have the missing link for you to be able to build it
30.06.18 17:02:34<nilli_> 6. but then he need to send a doc or explain why not. one such explanation may be make a lot of sense to me but probably not much to many others. so Ill try to explain in a few lines:
30.06.18 17:03:45<nilli_> A. assuming I want to create something that I want to make sure everyone will understand what I did.
30.06.18 17:04:43<nilli_> B. if I imagine it and then make it complete I will never know if anyone actualy understood it right
30.06.18 17:06:05<nilli_> C. However if I explain my vision to someone else and they CAN make it, then the proved to me that they understand exactly what I ment.
30.06.18 17:09:39<nilli_> D. (that the important part) by doing so I started the bootstrapping. I made it "real"  once two (or maybe 3) are able to know the same and agree on it the system exist. it is born. and this can be proven only by other making ones idea.
30.06.18 17:11:18<nilli_> *making one's idea
30.06.18 17:11:37<nilli_> ** I did without doing :)
30.06.18 17:20:05<nilli_> ok. i see no one is around (or maybe just ruther not saying anything )and I am after a long flight so talk to you all later or tomorrow.
30.06.18 17:24:59*** Quit: nilli_ (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 260 seconds
30.06.18 21:50:19<stoopkid> @ nilli: i'll have to dig through the #zennet logs to find the exact words of the agreement but i'm not even saying HMC needs to do anything here more just making it clear what my plans are and that i wouldn't consider it to be breaking my end of the agreement if i decided i had to pursue an alternative solution due to inability to extract an unambiguous specification from this semantic web theory
30.06.18 21:57:24<stoopkid> but, i would ideally like to see HMC's specification :)
30.06.18 21:58:02<stoopkid> "B. if I imagine it and then make it complete I will never know if anyone actualy understood it right"
30.06.18 21:59:05<stoopkid> i would disagree with this, especially with our subject matter, but i'm fine with the prover/verifier model either way
30.06.18 21:59:09<stoopkid> however...
30.06.18 22:00:31<stoopkid> we're having some trouble with "C. However if I explain my vision to someone else and they CAN make it, then the proved to me that they understand exactly what I ment."






01.07.18 07:08:53<koom> daemoz, im sure you've figured this out already, if it even wasnt clear in the first place, but those .tau are our homemade sort of script format for commanding the prover






01.07.18 13:28:12<koom> stoopkid, so, researching the new leads, or are we trying fol syntax?
01.07.18 13:30:01<koom> ill be reading idris and maybe more smtlib i guess
01.07.18 13:30:36<stoopkid> well
01.07.18 13:30:41<stoopkid> i found this: https://www.cs.ox.ac.uk/files/1246/bry-rdflog-full.pdf
01.07.18 13:40:45<stoopkid> HMCa: any thoughts?
01.07.18 13:45:48<stoopkid> koom: there is some good published theory in the datalog & relational algebra area that seems relevant so i'm gonna look into that but i think we should do a standard FOL syntax regardless
01.07.18 13:48:59<stoopkid> we can start with a standard FOL syntax, and then specify the restricted set of expressions as a subset of this
01.07.18 13:50:06<stoopkid> and then specify our N3 syntax as a mapping from that restricted set of expressions into N3 expressions
01.07.18 14:02:48<koom> yea my thoughts too, but i
01.07.18 14:33:11*** Quit: koom (~sirdancea@89.24.51.29) left #AutoNomic: Remote host closed the connection
01.07.18 15:18:41<editable-koo>nvm
01.07.18 15:18:59<editable-koo>lets use sexpr's
01.07.18 15:19:34<editable-koo>should we adopt some conventions of smtlib? like assert? or whats the minimal functionality that we want?
01.07.18 15:20:07<stoopkid> pure FOL
01.07.18 15:20:30<editable-koo>thats a list of formulas?
01.07.18 15:21:27<stoopkid> or even just a single formula, since the list is equivalent to a big AND over all the formulas in the list
01.07.18 15:22:53<stoopkid> rough draft of syntax spec: https://pastebin.com/exEsMncA
01.07.18 15:24:51*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
01.07.18 15:46:10*** Quit: koom (~koom@89.24.51.29) left #AutoNomic: Ping timeout: 245 seconds
01.07.18 16:21:32*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
01.07.18 17:06:38<koom> i think we should be able to run all these: https://clc-gitlab.cs.uiowa.edu:2443/SMT-LIB-benchmarks/QF_UF
01.07.18 17:10:04<koom> so, i would implement the necessary subset of smtlib syntax, and we get tests for free, and a standard interface
01.07.18 17:30:44*** Quit: koom (~koom@89.24.51.29) left #AutoNomic: Ping timeout: 255 seconds
01.07.18 18:26:08<HMCa> we are not a qf though...
01.07.18 18:26:12<HMCa> @koom




01.07.18 18:30:00<HMCa> stoopkid: iirc rdflog has come up before
01.07.18 18:30:30<HMCa> it is more or less a superset of n3logic, without the homoiconicity
01.07.18 18:31:40<HMCa> but, in any case, has that paper helped you to understand anything? :-)
01.07.18 21:23:07<stoopkid> i haven't read it closely yet
01.07.18 21:24:37<stoopkid> it's possible
01.07.18 21:24:52<stoopkid> hopefully this time around i'll be in a position to understand it :)
01.07.18 21:38:39<HMCa> heh
01.07.18 21:39:11<HMCa> played with the idris elab at all yet?
01.07.18 21:39:17<stoopkid> i think it was a different logic-programming-in-rdf thing that came up before though but i'm having trouble finding it now
01.07.18 21:39:57<stoopkid> nope still trying to figure out what it even is
01.07.18 21:40:23<stoopkid> i have a vague idea but not enough to actually play with it yet
01.07.18 21:41:29<stoopkid> i think the material i've been learning from assumes a decent amount of understanding of the existing work on metaprogramming in type theory
01.07.18 21:41:33<stoopkid> which i don't have :)
01.07.18 21:42:38<stoopkid> i have to back up a bit anyway though and finish preparing some learning materials for nili
01.07.18 23:21:46<HMCa> when does she arive?




02.07.18 02:55:39<koo5[m]> I thought it means all vars are universal
02.07.18 03:01:44<HMCa> koo5[m]: no it means variables are all let-bound, and can be statically replaced with their binding before evaluation...
02.07.18 03:02:33<HMCa> iow the qf logics of smt are all "circuit sat logics"





02.07.18 15:56:09<koom> ∃stu∀prof ((prof , rdf:type, uni:professor) → (stu, foaf:knows, prof ))
02.07.18 15:56:11<koom>  (1)
02.07.18 15:56:13<koom> We call such rules ∃∀ rules. Some approaches such as [5] are limited to rules of
02.07.18 15:56:15<koom> this form.
02.07.18 15:56:19<koom> (2) Imagine, that we would like to state that each lecture must be “practiced”
02.07.18 15:56:21<koom> by another course (such as a tutorial or practice lab) without knowing more
02.07.18 15:56:23<koom> about that course. This statement can not be expressed by ∃∀ rules.
02.07.18 15:56:51<koom> why not, does this text somehow pre-suppose that the querying mechanism wouldnt do unification in style of univar?






02.07.18 20:04:17<dmiles> sometimes I think when a person is versed at logics like n3logic and so forth.. the logics of idris/agda seem less understandable.. and vice-versa
02.07.18 20:05:21<dmiles> " still trying to figure out what it even is"
02.07.18 20:05:53<dmiles> (i know stoopkid was not making that statement about agda.. but i am)
02.07.18 20:06:52<dmiles> it just reminds me the same crossed-eyed look i get when trying to simply figure out what Coq is compared to like Flora2
02.07.18 20:09:32<dmiles> everyone whom has asked themselves the same question is even as confused as i am
02.07.18 20:09:52<dmiles> well 3 people have tried for me
02.07.18 20:11:34<dmiles> what we get is "ok.. two totally completely different end uses .. but what is intrigining that we cant figure out is why the end users are possibly the same"
02.07.18 20:13:36<dmiles> but if we interviewed those users .. 90% would say "wow i have a lot to learn about Coq"
02.07.18 20:14:09<dmiles> the Coq users that is
02.07.18 20:15:15<dmiles> if you ask the Flora2 users, "Wow, i have no idea why anyone would ever use Coq"
02.07.18 20:16:45<dmiles> this is not surprising at all to me.. since i am a Flora2 user.. But why it is so wierd is I suspect that most all Coq users think Coq is abotu doing what Flora2 does
02.07.18 20:17:21<dmiles> which is why they think they still are not learned enough about Coq
02.07.18 20:17:58<dmiles> that if they understood it, then they'd be doing what I do
02.07.18 20:18:14<dmiles> (in Flora2)
02.07.18 20:19:07<dmiles> I think that is simular to trying to relate doing inference in Idris as compared to n3logic
02.07.18 20:22:40<dmiles> in the Flora2vsCoq thing i wass refering to " if they understood it, then they'd be doing what I do"  is wrong .. it is acutally " if they understood it, then they'd realize it had nothing to do with what they wanted to do in the first place"
02.07.18 20:23:59<dmiles> that is the hardest of all realizations.. the realization that we may have been asking ourselves the wrong questions
02.07.18 20:25:43<dmiles> though it never hurts to learn about other systems
02.07.18 20:27:33<dmiles> (so at least it is not wasting time)
02.07.18 20:29:16<dmiles> now to address those whom are actualy very learned and satisfied with Coq, if you ask them about Flora2 they'd simply say such a system was impossible
02.07.18 20:30:44<dmiles> even after shown, they'd think wow so cool.. But that is totally different  -ology





02.07.18 20:30:54<stoopkid> koo5[m]: i think because the latter statement would be of the form ∀∃, rather than ∃∀






02.07.18 20:33:29<stoopkid> dmiles: the difference between generalized logic-programming stuff like prolog/datalog/n3logic/etc.. and Coq/Agda/Idris/MLTT is that the latter is not fully generalized logic-programming it's restricted to a consistent foundation
02.07.18 20:34:02<dmiles> (since a person learn-ed about *both* things would say.. Douglas, your big mistake was even thinking somehow the techology and use cases were in any way related! )
02.07.18 20:34:12<dmiles> as stoopkid sort of just said
02.07.18 20:35:13<stoopkid> they're related, they just aren't quite the same thing
02.07.18 20:35:46<dmiles> the only reason that I might still have some merit to my continued confusion is that I hear from jsut about everyone is theyir goal is to do  logic-programming
02.07.18 20:36:32<dmiles> Coq/Agda/Idris/MLTT's  #1 objectives are usually "logic-programming "
02.07.18 20:37:22<stoopkid> i wouldn't really say that's my goal with it, can't speak for others
02.07.18 20:38:52<stoopkid> for example i make use of Coq/Agda/Idris/MLTT doing all the proving manually
02.07.18 20:39:25<stoopkid> is logic programming the objective of, say, haskell & lisp programmers?
02.07.18 20:39:35<dmiles> most people start with a sober view for sure but i think they suspect as they get better they will be evolving into doing logic programming and not just logic+programming
02.07.18 20:40:24<dmiles> haskell programmers i think yes at lleast 30% of the time ...   lisp programmers no
02.07.18 20:40:55<dmiles> why i think that about haskell programmers is the testomonials i see once a week in ##prolog
02.07.18 20:42:57<dmiles> "I cant belive i have written in 20 lines of prolog what i have been trying to do in Haskel for a month now and kept beating my head bloody"
02.07.18 20:43:20<stoopkid> can't say; my ideas for what "logic programming" would look like looks more like logic+programming than logic-programming
02.07.18 20:45:59<dmiles> (that is usually after a week or two of studying how to write prolog)
02.07.18 20:46:07<stoopkid> so, when mathematicians solve problems & prove things, they're not following "logic-programming" in the same way that a prolog query evaluates
02.07.18 20:46:18<stoopkid> when they do it on paper i mean
02.07.18 20:46:52<stoopkid> we are so many layers of abstraction above that
02.07.18 20:47:21<dmiles> i think that is where i was relating things.. is many things are done from formulas
02.07.18 20:48:05<dmiles> that is the goal in prolog to figure out and discover the right formulaic representations
02.07.18 20:48:53<dmiles> or if you know the formulaic representations, trying to figure ut how to get the machine to not do the wrong thing with it
02.07.18 20:50:48<stoopkid> the problem is more about making the machine understand how those formulas are mathematically related
02.07.18 20:51:53<dmiles> vs in lisp where one doesnt do logic programing it is trying to figure out what i'd do if i wanted to swingle my program into relating things
02.07.18 20:52:26<dmiles> swindle my program into doing mathematical things ina  related way
02.07.18 20:55:30<dmiles> it is a differnce between aksing someone too write stored proceedures to do mathmatics in SQL  vs asking them to do them in VisualBasic
02.07.18 20:56:02<dmiles> the SQL programmer abstracts the solution very differntly
02.07.18 20:56:28<dmiles> the VisualBasic programmer secretly implements SQL
02.07.18 20:58:05<dmiles> but my exmaple they might still figure out a non-SQL way
02.07.18 20:58:26<stoopkid> the machine at the very least needs to have some kind of proper handling of the notion of isomorphism, built-in
02.07.18 20:59:42<dmiles> isomorphism betweeen data and world
02.07.18 21:00:17<stoopkid> isomorphism between representation A and representation B
02.07.18 21:01:04<stoopkid> i.e. it needs to be able to understand that A and B are just two representations of the same abstract structure, and be able to translate results between the two representations
02.07.18 21:01:42<dmiles> when you say " isomorphism between representation A and representation B"  for a prolog programmer that means rules that rewrite between the represerantions
02.07.18 21:02:06<dmiles> for non prolog programmers, what does that mean?
02.07.18 21:05:54<dmiles> so for example to a prolog-programmer lets say we have a document that is in Markdown vs HTML.. we write a translator that shows only some syntaxtical differnces
02.07.18 21:06:23<stoopkid> well, for starters, my focus for that kinda stuff is more around the knowledge that can be deduced, and being able to check that the deduced knowledge is consistent, sound, etc.., rather than the particular method of deduction
02.07.18 21:07:12<dmiles> we might say     html_to_md(element(p,[],[]),[10,10]).
02.07.18 21:07:24<stoopkid> for example you could use an AI that you don't even know how it's coming up with its proofs/ideas, but the proof-checker still ensures it all "makes sense"
02.07.18 21:10:35<stoopkid> essentially we have a consistent foundation giving us the capability to talk about mathematical/logical aspects of "structure", in basically full generality
02.07.18 21:13:01<dmiles> in prolog write how "structure" is composed/decomposed into logical rewritings .. i am thinking that in Agda/Idris/MLTT one does that though
02.07.18 21:13:11<dmiles> (does that as well)
02.07.18 21:14:11<dmiles> which is kind of what you are saying
02.07.18 21:14:27<dmiles> write how "structure" is composed/decomposed into logical rewritings
02.07.18 21:15:41<dmiles> here is an example of soemting i should see how it is done in Agda:  https://github.com/TeamSPoon/pfc/blob/master/t/sanity_base/missionaries_and_cannibals.pl
02.07.18 21:16:32<stoopkid> i wouldn't do that kind of problem "in" Agda exactly
02.07.18 21:17:22<dmiles> why i picked that at the monmment is it was about  figuring out how to get the 5 reconrd objects arranded ina  consistent way
02.07.18 21:18:06<dmiles> the  world(3,3,left,0,0)    into a list of [..world(3,3,left,0,0)... world(0,0,left,3,3)]
02.07.18 21:18:44<stoopkid> so my answer to this would be: apply an arbitrary deduction strategy of your choice in order to find an Agda proof demonstrating the result & passing the proof-checker
02.07.18 21:18:51<dmiles> arranging them in a way that meets constraints that are legal for the program to be in
02.07.18 21:19:27<dmiles> yeah this would be totaly just related in theat a proof checker would be used
02.07.18 21:19:33<dmiles> yeah this would be totaly just related in that a proof checker would be used
02.07.18 21:20:05<dmiles> to ensure the deduced list didnt change cannicals into missionaries or destroy missionaries
02.07.18 21:20:47<dmiles> cannicals/cannibals
02.07.18 21:21:15<stoopkid> right, it would make sure you turn results that are actually solutions to the problem
02.07.18 21:21:31<stoopkid> return*
02.07.18 21:22:22<dmiles> side note.. imagine the suffering one might go thru tryign to convert this to n3logic
02.07.18 21:30:38<stoopkid> well, n3logic is seemingly close to the kind of natural deduction system that we need to express the basic proof-checking rules of MLTT
02.07.18 21:34:48<dmiles> i been making simpler examples and converting them to n3logic to show why it is combinorically slower
02.07.18 21:35:47<dmiles> but doesnt apply since you are aftger the semantics only
02.07.18 21:37:07<dmiles> in my exmaples i had to use bnodes to make them possible at all
02.07.18 21:37:23<dmiles> dispite they dont use lists
02.07.18 21:39:03<dmiles> interestingly none of them have a snowball's chance of leveraging TC even in n3
02.07.18 21:41:13<stoopkid> the problem with estimating complexity of proving for real-world stuff is that you can package away complexity beneath layers of abstraction
02.07.18 21:41:39<dmiles> and even remove such complexity that way
02.07.18 21:41:58<stoopkid> indeed, not in all cases but in a lot of cases
02.07.18 21:42:29<dmiles> whenever you cannot, it is onmly for lack of respresentational creativeity
02.07.18 21:43:22<dmiles> representational creativity sounds liek hand waving.. but it really can be real-and-proper
02.07.18 21:44:11<stoopkid> and sometimes MLTT rules may be lacking for that, but there's basically the difference between the prolog outlook and the MLTT outlook: in prolog, programming == adding rules, in MLTT, adding rules == changing laws of physics... by analogy
02.07.18 21:44:13<stoopkid> or, discovering a new law of physics, i might say
02.07.18 21:45:45<dmiles> discovering new laws of physics happens thru retrhininking representation
02.07.18 21:45:59<dmiles> that is we notice that gravity happens using pi
02.07.18 21:46:04<stoopkid> sure
02.07.18 21:46:50<dmiles> or that angluar velosity over x,y  actualyl happens using sine/cosine over angles
02.07.18 21:47:41<stoopkid> maybe i should've said, discovering a new law of logic, i meant changing laws of physics to indicate the difference in how prolog-programmers & MLTT-programmers would view the "magnitude of the change"
02.07.18 21:48:37<stoopkid> when you add new inferencing patterns in prolog, the prolog-programmer's just gonna treat this as if you just came up with some new chemical formula, no big deal
02.07.18 21:48:57<stoopkid> when you add new inferencing patterns in MLTT, this is more like discovering a rethinking of the laws of physics themselves
02.07.18 21:49:12<dmiles> that be scarier place to be
02.07.18 21:49:42<stoopkid> depends on whether adding new and potentially arbitrary inferencing patterns needs to be a routine thing for you or not
02.07.18 21:49:46<stoopkid> generally it's not
02.07.18 21:49:52<dmiles> chnage would need to happen slowly for sure
02.07.18 21:50:18<dmiles> for most that are not used to that
02.07.18 21:50:57<dmiles> i am often trying to understand the tradeoff gained
02.07.18 21:51:50<dmiles> and dont say speed or reilablity :OP
02.07.18 21:52:05<stoopkid> well, similar to physicists, they are sort of operating under the assumption that their laws are already "logical enough for practical purposes" and that change wouldn't happen fast regardless, and if it did, then it just is what it is, sometimes we have to update our conceptions of reality
02.07.18 21:52:38<stoopkid> so, you could compare standard axiom schemas for MLTT to the standard model of physics
02.07.18 21:53:10<stoopkid> they're not thinking they're gonna have to update it very much, and when they do it, it should theoretically be with something that somehow "explains" that standard model
02.07.18 21:53:58<stoopkid> or, like, finding a new fundamental particle
02.07.18 21:54:21<stoopkid> so, between the MLTT crowd and the logic-programming crowd, there's sort of a different conception of what the rules are even "for" in the first place
02.07.18 21:54:27<dmiles> well for sure there is soem law-immutabilty we want to accept.. for instance a list is soemting that has ele,nmts and elements have contraints that they meet
02.07.18 21:55:17<dmiles> basically laws we count on being there as programmers
02.07.18 21:55:24<stoopkid> yes, for all practical purposes this probably won't ever change, at worst it will just be reinterpreted into a new descriptive framework
02.07.18 21:56:24<dmiles> there are some laws of pysics preent in the MLTT crowd that even prolog programmers might find usefull
02.07.18 21:56:27<stoopkid> (the list behavior, i mean)
02.07.18 21:57:15<dmiles> actualy that is the most interesting to the Haskellers (list behavior_
02.07.18 21:57:37<dmiles> that they can abstract over them .. etc
02.07.18 21:58:29<dmiles> why i jsut brought that up is that MLTT was designed in effect to keep the chololate out of the peanut butter
02.07.18 21:58:59<stoopkid> so, part of the reason the inferencing rules are able to be so static, particularly in constructive/intuitionistic logic, is because the proofs are actually constructions of the thing they're proving
02.07.18 21:59:40<stoopkid> that's one way to put it
02.07.18 21:59:57<stoopkid> type Chocolate != type PeanutButter heh
02.07.18 22:00:12<dmiles> https://www.urbandictionary.com/define.php?term=Chocolate+in+the+peanut+butter
02.07.18 22:00:32<dmiles> sorry had to post that :)
02.07.18 22:01:06<stoopkid> well, you have to consider people/programs with peanut allergies
02.07.18 22:01:22<stoopkid> some programs crash when you feed them an object of type peanut-butter
02.07.18 22:02:05<stoopkid> my computer always seems to crash when i put peanut butter in it, for example
02.07.18 22:02:08<dmiles> i think if i could "change the minds of MLTT folks" is that i'd want them to have nondeterministic transmogrifiers
02.07.18 22:02:32<dmiles> that would pick the peanuts out of the chocolate
02.07.18 22:02:41<dmiles> but only if present
02.07.18 22:03:08<dmiles> effectively perhaps some Haskellish Linkers to that... have autocastings
02.07.18 22:03:32<dmiles> the ideal here is that more libraries become applicatble
02.07.18 22:04:10<stoopkid> having more libraries become "applicable" (to whatever), goes right back to that isomorphism thing
02.07.18 22:04:43<dmiles> what kind of dont know (i've tried to assume the best though) is that there are other isomorphisms that come to being proceedural (rather than jsut data)
02.07.18 22:05:45<dmiles> example being ..   pretend someone has the killer sorting library.. but never considered sorting singel elelenmts or empty lists
02.07.18 22:06:26<dmiles> that there is some sort of fabric that can auto-wrap that sorting library to never face those two cases
02.07.18 22:07:24<stoopkid> sounds like exactly the perfect application of MLTT
02.07.18 22:07:32<dmiles> for instnace we can invent a type called length_0 and lengnth_1  that the killer-sort never knew about (and wont have to know about)
02.07.18 22:08:10<dmiles> so that exampole works into the proceedural (dispite it was about data)
02.07.18 22:08:31<dmiles> but the big question is how proceedurual can we get?
02.07.18 22:08:57<stoopkid> arbitrarily, the trick is you don't actually want to do your programming "in" MLTT
02.07.18 22:09:38<stoopkid> MLTT for the purposes of the kind of stuff you're talking about (and the kind of stuff i focus on outside of autonomic) is just a knowledge-representation framework, *but*
02.07.18 22:09:44<dmiles> in this exmaple.. we have     Sorted = dont_sort_uneeded_things(MyList,killerSort(MyList)).
02.07.18 22:10:08<stoopkid> it's general enough that we can model other programming environments in it
02.07.18 22:10:19<stoopkid> arbitrary other programming environments
02.07.18 22:10:53<stoopkid> remember the whole thing about why the lack of turing-completeness was a red-herring?
02.07.18 22:11:21<dmiles> whole discussions abotu turing-completeness are red-herrings in my book
02.07.18 22:11:45<dmiles> though give me a short reminder
02.07.18 22:11:51<stoopkid> it lacks turing-completeness because proof-normalization doesn't go into infinite loops, but when you look at what it can *represent* and *reason about*, turing-completeness is actually doesn't even require a whole lot of its logic
02.07.18 22:12:21<dmiles> ok yeah.. well said "actually doesn't even require a whole lot of its logic"
02.07.18 22:12:58<stoopkid> so, i can model a turing-machine and its execution, and reason about it
02.07.18 22:14:03<dmiles> for sure
02.07.18 22:14:38<stoopkid> i could write compiler code that MLTT can even execute via proof-normalization (although as you'll see it wouldn't even be a serious limitation if it couldn't)
02.07.18 22:15:07<dmiles> what i dont get is why doing that wasnt a default
02.07.18 22:15:30<stoopkid> because MLTT let's you do a lot of things and this is just one of the things
02.07.18 22:16:53<stoopkid> remember there's a lot of people who are mathematicians and specifically using it to formalize math within constructive logic and just have it be machine-checked and aren't really concerned with "general purpose programming stuff"
02.07.18 22:17:04<dmiles> well i heard there "partial evalution"
02.07.18 22:17:59<dmiles> i suppose maybe in essense there are MLTT interpreters
02.07.18 22:18:39<dmiles> interpreters with "partial evaluation" in order to change the laws of physics ina  nondeterministics way
02.07.18 22:19:24<stoopkid> well, when you look at it from the perspective of only having it be a proof-checker & proof-normalizer, general purpose programming stuff like infinitely repeating loops don't make any sense any more
02.07.18 22:20:07<stoopkid> so, the desire to having MLTT actually "run" infinitely-repeating loops and such is sort of conflating two desires
02.07.18 22:21:20<stoopkid> like, pure math doesn't "do" anything
                 <dmiles> well where i was going is fault handling
02.07.18 22:22:02<dmiles> for cases when the programmer just didnt prepeare the program
02.07.18 22:22:08<dmiles> for cases when the programmer just didnt prepeare the program for everythng
02.07.18 22:22:09<stoopkid> if during pure MLTT for pure math, there wouldn't even be a notion of "fault" to have to handle
02.07.18 22:22:16<stoopkid> if doing**
02.07.18 22:23:37<stoopkid> MLTT is less for programming and more for doing math about programs
02.07.18 22:24:04<stoopkid> only on autonomic do we really have a more pressing need to actually use MLTT for its programming capabilities in their own right
02.07.18 22:24:12<dmiles> well there should be a formalized system for ensuring thngs get done.. there actualyl is .. but i misplaced the name.. it is some tytpe of things that things dont deadlock]
02.07.18 22:24:32<stoopkid> so like liveness conditions and that kind of thing?
02.07.18 22:25:01<dmiles> yeah its a typesystem that ensures that things are living
02.07.18 22:25:25<dmiles> sort of a 1,2,1,2,1,2
02.07.18 22:26:10<dmiles> so when the system sees 1,2,1,2,2,2,1,2 it ensures it knows
02.07.18 22:26:30<dmiles> i atype that adds a expected condition upon each function exit
02.07.18 22:26:55<stoopkid> so from the standpoint of MLTT this formalization would consist of a description of the kind of world in which execution is taking place, descriptions of the conditions, proofs that it satisfies them, etc..
02.07.18 22:26:57<dmiles> *nod*
02.07.18 22:27:07<dmiles> at compile time.. of course it will verify
02.07.18 22:27:42<dmiles> at runtime it needs propof it met compile time expectations
02.07.18 22:28:15<dmiles> but it is more than a handfull of safety checks afaik
02.07.18 22:28:41<dmiles> this again is what should proceedurals
02.07.18 22:29:11<dmiles> this again is what should wrap proceedurals:   Sorted = in_tollerant_way(dont_sort_uneeded_things(MyList,killerSort(MyList))).
02.07.18 22:29:43<stoopkid> so, the act of taking this "model of an executable thing" that we just reasoned about and handing it to our physical machine to actually execute, here we break the boundary between pure math and the real-world
02.07.18 22:29:50<dmiles> well said
02.07.18 22:30:28<stoopkid> pure math doesn't execute things, *you* execute things, so, that distinction has to be kept in mind when evaluating what it is that MLTT actually does for us
02.07.18 22:30:51<dmiles> well CTL* is good to decibe executiuon
02.07.18 22:31:21<dmiles> well CTL* is good to describe execution .. to decribe what can and cant be.. and lets us notice when we didnt initialize someting
02.07.18 22:32:51<stoopkid> well, we wouldn't regard MLTT as being something that would notify you of things dynamically
02.07.18 22:35:20<dmiles> ex: in CTL* you declare a register to not be storable until it has a value loaded
02.07.18 22:35:53<stoopkid> you could do something like that in an MLTT model of that computation environment
02.07.18 22:36:52<dmiles> yeah, i just not seen that much research into that.. perhaps it's some human issue with steepness
02.07.18 22:37:10<dmiles> (learning curves)
02.07.18 22:37:33<dmiles> or feasr of "too much meta-"
02.07.18 22:37:55<stoopkid> there is an issue with it being kind of a steep learning curve
02.07.18 22:37:59<dmiles> not that anything stops it technologically
02.07.18 22:39:46<stoopkid> this goes back to what i was saying about how humans reason many layers of abstraction above "just follow a deduction pattern over these axioms & inference rules"
02.07.18 22:40:17<stoopkid> MLTT gives us foundations to actually express that kind of stuff, but understanding the actual mathematical description of those layers of abstraction is kind of a lot
02.07.18 22:42:45<stoopkid> basically math has to build quite a bit on itself before you actually get something practically usable out of it (especially if it's going to be for talking about *everything*), but more often than not we typically find ourselves just building precise definitions of what we already had "common-sense intuition for" (cf. for example.. stoke's theorem)
02.07.18 22:44:37<stoopkid> (stoke's theorem actually kind of related to your measuring dimensions vs. counting grains thing)
02.07.18 22:45:15<dmiles> that also what i meant eairler with creative-represenations
02.07.18 22:45:57<dmiles> (measuring dimensions vs. counting grains)
02.07.18 22:46:02<stoopkid> so, long story short: we give ourselves a good foundation for mathematics, but, big surprise, math is still actually hard most of the time
02.07.18 22:49:57<dmiles> well it looks like AutoNomic is back into thinking about doing something interesting.. i cant tell but maybe
02.07.18 22:50:58<stoopkid> humans pack a lot of complexity into our "common sense", it takes quite a bit to extract all this into precise tools
02.07.18 22:51:08<stoopkid> well, what i'm talking about here isn't even for AutoNomic, per se
02.07.18 22:51:40<dmiles> well in order to make a probram that answers all sorts of rational queries and understands things one needs a bad-ass better-than prolog
02.07.18 22:51:42<stoopkid> autonomic has a related set of requirements and can certainly make use of all these things but what it "needs" to do is somewhat more restricted in focus
02.07.18 22:51:59<stoopkid> ah
02.07.18 22:52:01<stoopkid> well, it likely will be that
                 <dmiles> funny i was like in 300 lines of scrollback
02.07.18 22:52:48<dmiles> but i suppose it applies to the conversaions
02.07.18 22:54:36<dmiles> interesting to me =  make a program that answers all sorts of rational queries and understands new axioms :)
02.07.18 22:55:04<dmiles> and of course writes new programs
02.07.18 22:56:30<dmiles> there are steps to get there .. i cant sometimes tell if that is what Idni/AutoNomic is about .. but for sure everyone not involved thinks that is what it is about.. and why they  seem excited
02.07.18 22:56:55<stoopkid> that's not what i think AutoNomic is about exactly
02.07.18 22:57:30<dmiles> what does an AutoNomic deliverable look like?
02.07.18 22:58:13<stoopkid> i've always even said doing proof-search is mostly just a bonus
02.07.18 22:58:59<dmiles> one thing i thoght of AutoNomic being from hearing you guys is an only Haskell Compiler
02.07.18 22:59:27<dmiles> one thing i thoght of AutoNomic being from hearing you guys is an *Online* Haskell Compiler
02.07.18 22:59:37<dmiles> that gives proof of sanity constraints
02.07.18 23:00:25<dmiles> or Online Agda/Idni Compiler that gives proof of sanity constraints
02.07.18 23:00:32<stoopkid> basically
02.07.18 23:01:10<stoopkid> i think you meant Agda/Idris? :P
02.07.18 23:01:15<dmiles> oops yep :)
02.07.18 23:01:29<stoopkid> it doesn't even really need to run the programs, it mostly just needs to proof-check
02.07.18 23:03:04<stoopkid> just needs to check that blocks satisfy the constraints on the set of valid blocks, which can be done entirely via type-checking, if your types encode the constraints and the block comes attached with proof of satisfying the constraints
02.07.18 23:04:09<stoopkid> so, we can sort of get "logic-programming" for free here
02.07.18 23:05:45<stoopkid> place a problem onto the chain, you can potentially have the entire world's computation trying to solve that problem, depending on how much incentivization is placed behind it / exists intrinsically in the problem, using arbitrary deduction mechanisms
02.07.18 23:06:24<stoopkid> no constraint on what happens in between blocks really, or how it is that you come up with a block to place on the chain, no constraint on what inferencing methods you can apply, you could just throw NNs at it if you want
02.07.18 23:09:18<dmiles>  "logic-programming"  :)
02.07.18 23:11:02<stoopkid> it's kind of silly, but, that is basically the effect of it
02.07.18 23:12:26<stoopkid> by the proof-checker, the only things that everybody attacking the problem could come up with as solutions would be the same proof-trees that a deterministic deductive inferencing process could come up with
02.07.18 23:14:20<stoopkid> so putting the problem on the block-chain and putting incentivization behind it would be basically like feeding it to a giant non-deterministic and massively parallel inferencing system
02.07.18 23:15:40<dmiles> it does have that potential
02.07.18 23:19:17<stoopkid> so, it would be able to do that even without having a built-in distributed deduction algorithm, or even any deduction algorithm at all other than proof-checker, hence why i say that this is in many ways just a bonus
02.07.18 23:20:07<stoopkid> but even the ability to do this is not exactly the "purpose" of AutoNomic
02.07.18 23:24:06<stoopkid> the purpose is basically to represent consensus, IMO the main utility MLTT serves in the context of AutoNomic is in providing a consistent knowledge-representation framework for describing exactly what that consensus is, with as much expressive capacity as possible
02.07.18 23:26:45<stoopkid> so, even when this consensus is a nomic game that can enforce rules on itself, the problem doesn't really change: we don't need to automatically inference against the rules to see if we can come up with a proof that a new block fits the constraints, because we ultimately have the option of deferring responsibility of providing the proof to the user who provided the block
02.07.18 23:28:26<stoopkid> *can* we do more than this to add more conveniences? probably but in theory it could function by only ever doing proof-checking and leaving everything else up to the users
02.07.18 23:32:31<dmiles> if it was me.. i'd start with having a conent system for maintain the list of rules
02.07.18 23:32:39<dmiles> content system*
02.07.18 23:35:33<stoopkid> like a system for asserts/retracts you mean?
02.07.18 23:36:18<dmiles> yes.. but actualy i was really thinking of a UI
02.07.18 23:36:38<dmiles> that allows you to culminate and decide what you think that content will be
02.07.18 23:37:18<stoopkid> like git-for-asserts/retracts, basically?
02.07.18 23:37:48<dmiles> yes
02.07.18 23:38:27<dmiles> so you can see clearly what are the things that you wish or belive that would be asserted/retracted
02.07.18 23:38:46<dmiles> and even by itself it will have utility
02.07.18 23:39:11<dmiles> i by intself in the stages before it gets moved onto the chain
02.07.18 23:39:58<dmiles> by itself will have ujtility in that it gives you a staging area that you can decide things and then move it onto a chain impl as it is convient
02.07.18 23:40:09<stoopkid> right
02.07.18 23:41:21<stoopkid> it seems like a reasonable starting point to me.. could possibly be done in a way that makes its operation independent of the choice of syntax/semantics
02.07.18 23:41:43<stoopkid> well, maybe
02.07.18 23:42:31<stoopkid> once again HMC's design for AutoNomic packs so much together that it's... hard to do "just one thing", kinda
02.07.18 23:42:56<stoopkid> depends whether we can universally accept this interpretation of assert/retract:
02.07.18 23:43:20<stoopkid> to make a commit that asserts a rule, the commit basically just contains the rule
02.07.18 23:43:38<stoopkid> to make a commit that retracts the rule, the commit contains the negation of the rule
02.07.18 23:44:23<stoopkid> thinking about it now, i'm not sure if we can rely on that (or, if we can, how)
02.07.18 23:44:36<dmiles> yeah in logicmoo i ended up with two types of retracts.. well even more
02.07.18 23:44:45<dmiles> one is asserting the negation
02.07.18 23:45:35<dmiles> https://github.com/TeamSPoon/pfc/blob/master/t/sanity_base/neg_01.pfc
02.07.18 23:46:16<dmiles> fooBar.
                 <dmiles> \+ fooBar.
02.07.18 23:46:17<stoopkid> i think asserting the negation and removing the rule are maybe equivalent under closed-world assumption and maybe inequivalent under open-world assumption
02.07.18 23:46:22<dmiles> to assert and retract
02.07.18 23:46:32<dmiles> butg also fooBar.
                 <dmiles> ~ fooBar.
02.07.18 23:47:04<dmiles> well yeah.. that is why i do it in a way.. each poredicate operates under CWA/OWA individually
02.07.18 23:47:37<dmiles> so for exmaple  instanceOf/2 is CWA
02.07.18 23:47:49<stoopkid> actually i'm not even sure if they're equivalent under CWA
02.07.18 23:48:11<dmiles> under CWA it is "assumed"
02.07.18 23:48:39<dmiles> but when someone asserts   ~ fooBar.   they might actualyl also intned that it cannot ever deduce that later
02.07.18 23:49:21<dmiles> ~instanceOf(joe,fish).    might mean that the system will throw an error if some code tries to make him qa fish
02.07.18 23:49:49<dmiles> it certainly also implies that if he was a fish before.. he chant be now
02.07.18 23:50:18<stoopkid> ok so, when you assert the negation of the rule, you have to remove not just the rule but also everything that would imply the rule, i.e. what you end up adding the negation of the rule to should actually a kb that is independent of the rule, i.e. consistent with both the rule and its negation
02.07.18 23:50:20<dmiles> exactly
02.07.18 23:50:47<dmiles> this allows me to forcefully backwards view what might make him a fish .. and in some ways remove it
02.07.18 23:51:07<dmiles> in some settings
02.07.18 23:51:26<stoopkid> so if we just had neither of these rules (or anything that implies them) in the kb, then under CWA it would basically be equivalent to having the negation of it in the kb?
02.07.18 23:51:35<dmiles> for example..  ~ mudLocation(fred,liveingroom).    removes that he is north of the bedroom
02.07.18 23:52:33<dmiles> well technically  \+ mudLocation(fred,liveingroom).     would been enough in CWA
02.07.18 23:53:09<dmiles> but i dont know what OWA was used to decude thngs earlier
02.07.18 23:53:13<dmiles> sinc ei have a mix of both
02.07.18 23:53:32<stoopkid> to restate more precisely, if we have a KB, K, that's independent of the rule/fact R (i.e. neither R nor not(R) are derivable from any of the rules in the KB), then does CWA make this KB equivalent to K+not(R)?
02.07.18 23:54:06<dmiles> CWA wont make   R nor not(R)  supported if there is no support for  R nor not(R)
02.07.18 23:54:24<dmiles> so in this way it is slightly differnt than NAF
02.07.18 23:54:57<dmiles> but from what i said earlier it sounded as if i meant that :)
02.07.18 23:55:18<dmiles> and in some cases K+not(R)
02.07.18 23:55:50<dmiles> so yes in some cases  K+not(R)  .. as long as R is declared to operate that way
02.07.18 23:56:17<dmiles> i mean that even in datbaases claiming to be CWA.. that is a hard one to accept
02.07.18 23:57:21<dmiles> it might be of course possiuble that the whole KB  is designed to belive not(R)
02.07.18 23:57:26<dmiles> just because R was missing
02.07.18 23:58:05<dmiles> the problem with any of these two rules of thumb .. is they are not expeclkicti enoyugh for my tastes
02.07.18 23:58:29<dmiles> the problem with any of these rules of thumb*
02.07.18 23:58:42<stoopkid> so CWA == whatever's not known to be true, is false, right?
02.07.18 23:58:53<dmiles> usually
02.07.18 23:59:30<dmiles> why i only say that.. is RDF is suppsoed CWA.. but you are always a document away wioth changing the world
03.07.18 00:00:02<dmiles> and you need to be able to accept the world change adn any new things that came with those changes
03.07.18 00:00:10<stoopkid> so, i could restate this as, if we have no proofs of A, then A is false?
03.07.18 00:00:16<dmiles> yes
03.07.18 00:00:32<dmiles> i think i would agree that is CWA
03.07.18 00:00:44<dmiles> see i like "no proofs of A" better
03.07.18 00:01:15<stoopkid> can i restate this as, if we have no proofs of A, then not(A) is provable?
03.07.18 00:01:45<dmiles> yes .. ~A is provbable under CWA
03.07.18 00:02:22<stoopkid> so let's say we have an axiom set that under OWA is independent of A (i.e. neither A nor not(A) are provable)
03.07.18 00:02:43<stoopkid> then under CWA this axiom set proves not(A)?
03.07.18 00:03:56<dmiles> in my system if you declare A to be CWA then it stays CWA
03.07.18 00:04:07<dmiles> (A does)
03.07.18 00:04:15<dmiles> so you have not(A) as probale
03.07.18 00:04:35<dmiles> of course the system shows the proof as bewint A is missing
03.07.18 00:04:52<dmiles> of course the system shows the proof as beinng  A is missing
03.07.18 00:05:22<stoopkid> alright so the problem that i'm having with this is that this would trivially render any axiom set inconsistent just by the existence of a statement that's independent of it
03.07.18 00:05:34<dmiles> the proofs is that:     completeExentDecidable(A), \+ A
03.07.18 00:05:55<stoopkid> the axiom set is independent of A, so it can't prove A, so it proves not(A)
03.07.18 00:06:06<stoopkid> what if the statement A that we were looking at was in fact not(A)?
03.07.18 00:06:23<dmiles> in the reast of the KB you mean looks for not(A) ?
03.07.18 00:06:57<dmiles> (completeExentDecidable(A), \+ A) ==> ~A
03.07.18 00:07:48<dmiles> so at least in my system i allow that not(A) to be true   (sorry ~A and not(A) is the same in my system)
03.07.18 00:08:18<stoopkid> i think my issue is maybe i'm interpreting CWA too broadly
03.07.18 00:08:49<stoopkid> like CWA in the context of RDF would mean, only the triples that i can derive are in the graph
03.07.18 00:08:57<dmiles> and  "that i can derive"
03.07.18 00:09:38<dmiles> i mena to say be that is it does have the contrapostive (if we where to find a meaning of what is a contrapostive here)
03.07.18 00:09:54<dmiles> i mena to say be that is it does *not* have a contrapostive (if we where to find a meaning of what is a contrapostive here)
03.07.18 00:10:50<dmiles> so to say what i meant:    to not duriving a litteral does not mean the litteral is false nesc it means you didnt durrive it
03.07.18 00:11:00<dmiles> but what can get confusing is semweb docs say they are CWA
03.07.18 00:11:13<dmiles> yet they are not entirely CWA
03.07.18 00:11:40<dmiles> they just wanted to make sure they arnt accidently thought of as OWA
03.07.18 00:11:50<dmiles> as my camp was pissed off they were not
03.07.18 00:12:30<dmiles> i mean to say that for proctical reasons they wanted to be like porlog
03.07.18 00:12:38<dmiles> i mean to say that for proctical reasons they wanted to be like prolog
03.07.18 00:12:47<dmiles> but prolog is neither CWA/OWA
03.07.18 00:12:58<dmiles> for sure though its more not OWA than not CWA
03.07.18 00:13:42<dmiles> RDF is not OWA and not CWA .. but its more not OWA
03.07.18 00:14:27<dmiles> underivable litterals are certainly not false
03.07.18 00:14:43<dmiles> underivable triples  are certainly not false
03.07.18 00:15:01<dmiles> underivable triples  are certainly not true
03.07.18 00:15:35<dmiles> for practical reasons RDF "code" says "we use negation by failure"
03.07.18 00:15:55<dmiles> ok that is what i wanted ot deistinguish is  NAF from CWA
03.07.18 00:16:14<stoopkid> "underivable triples  are certainly not false" that's how we defined CWA though
03.07.18 00:16:15<dmiles> the only reason RDF claims CWA  is cuause everyone asks :P
03.07.18 00:16:29<stoopkid> well, actually my definition was a bit more general which is why i had issues with it
03.07.18 00:16:43<stoopkid> so a triple/fact is basically a "positive assertion"
03.07.18 00:16:44<dmiles> yeah
03.07.18 00:17:03<dmiles> we can also have RDF pages that everyting there is false
03.07.18 00:17:06<dmiles> that we claim to be false
03.07.18 00:17:17<stoopkid> so, i think CWA is only intended to apply to "positive assertions"
03.07.18 00:17:37<dmiles> yes
03.07.18 00:17:55<dmiles> funny it only applies to what is missing
03.07.18 00:18:02<stoopkid> i ran into trouble thinking it should apply to all assertions, like both positive assertions as well as their negations
03.07.18 00:18:04<dmiles> funny it only applies to what is *NOT* missing
03.07.18 00:19:10<dmiles> also RDF is no more CWA than MSSQL
03.07.18 00:19:46<stoopkid> so in OWA we can have the concept of a set of assertions being independent of another assertion, and look at what happens when we apply CWA interpretation to this same set of assertions
03.07.18 00:20:37<dmiles> well you can mix and match OWA/CWA no problem
03.07.18 00:21:08<dmiles> mathmatical equality is for sure CWA
03.07.18 00:21:09<dmiles> even in OWA
03.07.18 00:21:32<dmiles> mathmatical equality / numeric equality
03.07.18 00:22:49<stoopkid> alright so i see this interpretation of retraction-as-negation works for triples/facts, what about for rules
03.07.18 00:23:01<stoopkid> (under CWA, i mean)
03.07.18 00:23:32<dmiles> it *should* be the same
03.07.18 00:23:51<stoopkid> hehe
03.07.18 00:24:04<stoopkid> would be convenient if so :)
03.07.18 00:24:05<dmiles> but here rules are subsumptive
03.07.18 00:24:17<dmiles> exmaple..
                 <dmiles> loves(joe,_).
03.07.18 00:24:40<dmiles> thats a rule sasying that joe oves everyhting?
03.07.18 00:25:05<stoopkid> i think you can make it work for rules if you interpret rules as triples like in Notation3
03.07.18 00:25:17<dmiles> {?x a person} ->  {love loves ?x}
03.07.18 00:25:30<dmiles> the domain of ?x is CWA ?
03.07.18 00:25:51<dmiles> {?x a person} ->  {joe  loves ?x}
03.07.18 00:26:09<dmiles> is the domain people or is it existingly known  people?
03.07.18 00:26:14<stoopkid> so like you just take "{?x a person} ->  {love loves ?x}" as a triple, s = {?x a person}; p = ->; o = {love loves ?x}
03.07.18 00:26:47<stoopkid> hrm
03.07.18 00:26:51<dmiles> what i am saying is i would need a snapshop of the closed world ot understnad what you are negating
03.07.18 00:27:07<dmiles> maybe not.. but that is what it seems like
03.07.18 00:27:51<dmiles> secretly i've never seen a usable or consistent CWA  system
03.07.18 00:28:11<dmiles> they all make up strange hacks
03.07.18 00:28:39<dmiles> whereas in OWA everything is clear
03.07.18 00:29:04<stoopkid> i think the way it might work for rules here is that when you take the rule as a triple, the negation of the triple is basically just like in the facts/rules case: asserting that a particular triple is not in the graph, as opposed to asserting the logical negation of the rule itself
03.07.18 00:29:24<stoopkid> maybe
03.07.18 00:29:32<dmiles> oh i agree
03.07.18 00:29:44<dmiles> one cacles the other
03.07.18 00:30:02<dmiles> but still it just not related to anythting we know about logic
03.07.18 00:30:33<dmiles> its whatever strange hack that makes sense
03.07.18 00:30:44<stoopkid> i guess i still have a question of... is it *supposed* to assert the logical negation of the rule?
03.07.18 00:31:43<dmiles> hah .. great question.. it probably isnt
03.07.18 00:32:03<dmiles> hah = that is an underlying incosistency of CWA
03.07.18 00:32:05<stoopkid> i'm thinking no as well, but i'm having trouble making my thoughts precise as to exactly why it shouldn't be
03.07.18 00:32:50<dmiles> underlying incosistency of CWA = "everyting that is not asserted is false.. including every rule you can ever think of?"
03.07.18 00:33:59<dmiles> underlying inconsistency of OWA = "everyting that is not asserted is unknown.. including every rule you can ever think of"
03.07.18 00:34:14<stoopkid> the latter is not an inconsistency though
03.07.18 00:34:18<dmiles> (every missing rule in that last case)
03.07.18 00:34:30<dmiles> oops
03.07.18 00:34:39<dmiles> underlying *consistency* of OWA = "everyting that is not asserted is unknown.. including every rule you can ever think of"
03.07.18 00:34:50<stoopkid> ah :)
03.07.18 00:35:22<stoopkid> ok so i think we can make CWA consistent though; we agree that it's consistent if we apply it only to triples/facts and not to rules right
03.07.18 00:36:11<stoopkid> why is this: because looking at the triples as components of relations, every component is independent of each the other ones
03.07.18 00:36:26<dmiles> according to some things i came up with i think the answer it still cant be made consistent
03.07.18 00:36:46<stoopkid> in simpler terms, the existence/non-existence of any particular triple/fact in the kb is consistent with the existence/non-existence of any other triple in the kb
03.07.18 00:36:50<dmiles> {joe loves mary}   is a rule as much as a fact
03.07.18 00:38:23<dmiles> {joe loves mary}   means that  { ?p subRelation loves} ->  {joe ?p mary}
03.07.18 00:39:30<stoopkid> and not({joe loves mary}) will mean that these subRelations don't hold between joe and mary anymore
                 <dmiles> also it means..    { ?p subRelation loves. ?j sameAs joe.  ?m sameAs mary} ->  {?j ?p ?m}
03.07.18 00:39:54<dmiles> yeah
03.07.18 00:40:26<dmiles> maybe they are even false
03.07.18 00:40:28<dmiles> *now* maybe they are even false
03.07.18 00:41:19<stoopkid> let's say we don't allow any rules in the kb at all, just the triple-facts
03.07.18 00:41:27<stoopkid> we can see that CWA definitely does work in this setting right
03.07.18 00:42:45<stoopkid> either the fact is listed in the kb, or it isn't
03.07.18 00:43:16<stoopkid> and we can consistently assert that (s p o) not being listed in the kb is the same as not(s p o) being listed in the kb
03.07.18 00:43:41<stoopkid> consistently/soundly, whatever..
03.07.18 00:44:57<dmiles> well maybe it "works" its a struictured query language
03.07.18 00:45:41<dmiles> whenever the issues get mired .. we can default that RDF is just a data format intended to make the web more accessable
03.07.18 00:46:35<dmiles> and it is ok to use it however that works consistently for anyone
03.07.18 00:47:53<dmiles> in most CWA "applications" it works beautifully
03.07.18 00:48:14<stoopkid> so, in the nomic game there's yet another function
03.07.18 00:49:18<stoopkid> we have: 1) assert a fact/rule; 2) assert the negation of a fact/rule; 3) remove a fact/rule, and also 4) assert that a fact/rule cannot be added
03.07.18 00:50:06<dmiles> yeah which btw i been able to confortably see that happen by using 4 RDF modalities
03.07.18 00:50:22<dmiles> immagine it as 4 RDF page/graphs
03.07.18 00:50:59<dmiles> one graph that everythig is true, one that everything is false in.. and 2 more to tell you what cant go into either
03.07.18 00:51:15<dmiles> one graph that everythig is true, one that everything is false in.. and 2 more to tell you what cant go into the first two
03.07.18 00:51:55<dmiles> that is how my system was able to deal with being in Prolog which has effectively the same limits as RDF in this contenxt
03.07.18 00:52:10<dmiles> Mark Stickle created this
03.07.18 00:52:35* dmiles doesnt have to claim authority that way
03.07.18 00:53:25<dmiles> then what Mark did was create a full and sound system of CWA/OWA that worked flawlessly in it
03.07.18 00:53:56<dmiles> that was fast and still was backwards compartable with query systems
03.07.18 00:54:56<dmiles> not only that can supply proofs as to why anything was true and why anything is false
03.07.18 00:55:00<dmiles> and why something is notAssertable/1
03.07.18 00:56:55<dmiles> why notAssertable/1 was so important (yes, even outside Nomics)  is often the system can only make genralizations about falsity
03.07.18 00:57:41<dmiles> so we needed a way to decide that depsite something not being false.. it also had to not be true
03.07.18 00:58:15<dmiles> for instance  even non-wff like    {joe a joe}
03.07.18 00:58:51<dmiles> it notAssertable/1 due to the proof that all  arg2 must be non individuals
03.07.18 00:59:43<dmiles> this keeps choclate durring universal quantification out of the peanut butter
03.07.18 01:00:21<dmiles> like {joe loves loves}
03.07.18 01:00:40<dmiles> is notAssertable/1
03.07.18 01:04:02<stoopkid> so, what if take CWA, where it only applies to triple-facts, and say that not(s p o) asserts not only the negation of (s p o), but also that (s p o) can't be added to the kb
03.07.18 01:04:11-SaslServ- koom!~sirdancea@37-48-19-61.tmcz.cz has just authenticated as you (sirdancealot)
03.07.18 01:04:17*** Join: koom (~sirdancea@37-48-19-61.tmcz.cz, sirdancealot: koo5)
03.07.18 01:04:56<dmiles> well what i am talking about here is sortt of a CWA x 4
03.07.18 01:06:29<dmiles> right that is how i do it..  if you assert  ~P .. i actually remove it from Postivve.. I add it to the negatives
03.07.18 01:07:03<dmiles> i have been experm,enmting of i add it to the notAssertable/1
03.07.18 01:07:38<dmiles> i have been expermenting if i add it to the notAssertable/1 .. i found that for right now.. i dotn have to but maybe i could
03.07.18 01:09:01<dmiles> the reason i havent gone the step you are refering to is i feel that the negations have more support
03.07.18 01:11:12<dmiles> what i mean is that negations are often parts of anteceedants
03.07.18 01:11:35<dmiles> but notAssertables are seldom part of anteceedants
03.07.18 01:12:14<dmiles> ~(s1 p1 o1) /\ (s2 p2 o2) -> (s3 p3 o3)
03.07.18 01:12:40<dmiles> i want to find ~(s1 p1 o1) in KB about falsness
03.07.18 01:13:36<dmiles> in my KB of "everyting provably false"     there is often    ... -> (s1 p1 o1)
03.07.18 01:14:09<dmiles> thus by deuction i can "prove"  ~(s1 p1 o1)
03.07.18 01:14:10<dmiles> and mkae part of proof (s3 p3 o3)
03.07.18 01:16:03<dmiles> this also allows how quantification is done in the differnt KBs to be highly specialized
                 <dmiles> the notAssertable/1 quantifications are a differnt modality from provable_false/1 quantifications
03.07.18 01:16:42<dmiles> i also have a notAssertable_as_false/1
03.07.18 01:17:39<stoopkid> well, the benefit i would think that might come of packaging up each of the different modes into just usage of negation, is that all the mechanism surrounding assertion/retraction would basically be part of the existing logical constructions
                 <dmiles> provable_true/1  provable_false/1     notAssertable/1   notAssertable_as_false/1   can call the 4  CWAs
03.07.18 01:18:47<stoopkid> and also going back to how we got onto this train of thought, i think this demonstrates that there are "reasonable" ways to handle this assertion/retraction stuff that can't be said to be fully generic over possible syntaxes/semantics
03.07.18 01:19:05<dmiles> for sure
03.07.18 01:19:55<stoopkid> this one with a particular interpretation of constructive CWA, seems "reasonable" but is heavily reliant on the chosen syntax/semantics rather than being like a generic list-of-rules with 4 different modes of assertion/retraction kind of thing
03.07.18 01:20:08<HMCa> hrmmm
03.07.18 01:21:19<dmiles> (btw.. i'll be honest since i dont use RDF graphs i jsut stick all of this in one KB.. cuz i can.. its prplog)
                 <stoopkid> HMCa: heya
03.07.18 01:21:46<dmiles> i https://github.com/TeamSPoon/logicmoo_base/blob/master/prolog/logicmoo/pfc/system_common.pfc.pl#L31-L41
03.07.18 01:22:00<dmiles> as you can see whats highlighted there feels slightly schizo
03.07.18 01:22:15<dmiles> well not schizo.. jsut a likltte hackish
                 <HMCa> sec, i will try to clarify something in a min, let me wrap this other task up
03.07.18 01:23:12<dmiles> the four lines 37-40
03.07.18 01:23:40<dmiles> sorta hwo i interpret which retraction they are after
03.07.18 01:25:05<stoopkid> can you explain the interpretation of these statements for me?
03.07.18 01:25:37<stoopkid> we've got "assert", "retract", "enable", "disable"
03.07.18 01:25:41<dmiles> like 35 says    if they assert ~P     assert(~P),retract(P), disable(P)
03.07.18 01:25:58<dmiles> like 35 says    if they assert ~P    I WILL:   assert(~P),retract(P), disable(P)
03.07.18 01:26:10<dmiles> like you suggested
03.07.18 01:26:24<stoopkid> so what's the interpretation of enable/disable vs. assert/retract?
03.07.18 01:26:43<dmiles> enable means make sure that its not in the  "4) assert that a fact/rule cannot be added"  anymore
03.07.18 01:27:06<dmiles> disable adds it to "4) assert that a fact/rule cannot be added"
03.07.18 01:27:37<dmiles> the " ANTECEEDANT " collumn is not related btw
03.07.18 01:27:38<stoopkid> gotcha
03.07.18 01:28:22<dmiles> if they assert  "~~(P)"    I WILL:  retract( ~(P)), enable(P).
03.07.18 01:29:03<stoopkid> alright, so what i'm thinking of would modify this slightly
03.07.18 01:29:22<stoopkid> start in a state where P is enabled for all P
03.07.18 01:29:37<stoopkid> P := assert(P)
03.07.18 01:29:57<stoopkid> ~P := assert(~P), retract(P), disable(P)
03.07.18 01:30:46<stoopkid> ~~P := assert(~~P),retract(~P),enable(P),disable(~P)
03.07.18 01:31:17<dmiles> btw the   assert(~~P)     notAssertable_as_false/1
03.07.18 01:31:44* dmiles glad stoopkid say it as important
03.07.18 01:32:32* dmiles well disable(~P) notAssertable_as_false(P) as well :P
03.07.18 01:33:01<stoopkid> right i think there's some redundancies in my description
03.07.18 01:33:51<stoopkid> i think we can take assert(~P) -> disable(P)
03.07.18 01:34:25<stoopkid> so we can remove "disable" from the modes
03.07.18 01:34:31* dmiles was not able to fully decide what was redundant anyways in dmiles ideas
03.07.18 01:34:44<stoopkid> P := assert(P)
03.07.18 01:35:11<stoopkid> ~P := assert(~P), retract(P)  (implicitly disable P)
03.07.18 01:35:43<stoopkid> ~~P := assert(~~P),retract(~P),enable(P)
03.07.18 01:36:37<stoopkid> i guess i'm trying to finitize the description across arbitrary numbers of negations
03.07.18 01:36:55<dmiles> for that start.. one merely uses \+ to "undo"
03.07.18 01:37:22<dmiles> \+ ~~P :=  undo((assert(~~P),retract(~P),enable(P)))
03.07.18 01:38:20<dmiles> the reason i add that some complexity is ended up with managment rules that  edited the KB
03.07.18 01:40:27* dmiles wont go into that.. but just needed to be able to do/undo things
03.07.18 01:42:10<HMCa> stoopkid: heya :-)
03.07.18 01:42:13<dmiles> but i am glad you see  simply having  ~P   as  qualification enough for disablment
03.07.18 01:42:35<HMCa> ok so it has been a long time since we've discussed the negation stuff
03.07.18 01:43:00<stoopkid> dmiles: well, rather, "could be interpreted" as qualification. whether or not it actually "is" qualification is something of a philosophical matter i guess
03.07.18 01:43:03* dmiles descided to do that as well but cant remember the convincing argument as to why
03.07.18 01:43:14<HMCa> 49 < stoopkid> we have: 1) assert a fact/rule; 2) assert the negation of a fact/rule; 3) remove a fact/rule, and also 4) assert that a fact/rule cannot be added
03.07.18 01:43:45<HMCa> really your #4 is something of a special case for us
03.07.18 01:44:08<HMCa> it is not something that we "need dedicated language" for
03.07.18 01:44:14<dmiles> i kinda use #4  trighjt now to catch bugs in my system :P
03.07.18 01:44:57<HMCa> as it can just be a part of the blockverify constraints
03.07.18 01:45:21* dmiles system howls loudly when something comes thru found in #4
03.07.18 01:46:58<stoopkid> HMCa: good point
03.07.18 01:47:05<HMCa> the other three do need some "language" to them, but really all three are covered with the same, single linguistic element... assertion of NAF
03.07.18 01:47:37<HMCa> at the rdf level, our system is strictly positive (we have no true negation)
03.07.18 01:49:52<HMCa> so your #1 is easy, we "just assert by statement"
03.07.18 01:50:10<HMCa> you #2 and #3 have something of an interplay with eachother
03.07.18 01:51:00<HMCa> to do #3 we state an assertment of naf of a previously asserted statement, which the core will interpret as a retraction
03.07.18 01:51:42<HMCa> to do #2 we state an assertment of naf of a non-asserted statement, which the core will interpret as an asserted statement of naf
03.07.18 01:51:56<HMCa> (ringing any bells yet?)
03.07.18 01:53:04<HMCa> so if we assert "a p b.", and then later assert "{a p b}=>false." we end up back at an empty kb
03.07.18 01:53:08<stoopkid> i think this is more or less what i was saying for 1, 2, & 3, although i need to refresh my memory non naf
03.07.18 01:54:06<HMCa> if we then subsequently assert "{a p b}=>false." again, this becomes asserted as a rule, and if we then tried to assert "a p b." this would be rejected as inconsistent
03.07.18 01:55:00<stoopkid> hrm
03.07.18 01:55:35<stoopkid> under CWA isn't a kb with just "{a p b} => false." in it logically equivalent to an empty kb?
03.07.18 01:56:15<HMCa> yes, we just "double duty" this for modality of kb mutation
03.07.18 01:57:14<HMCa> it is a way of controlling our nonmonotonicity without the logic itself being nonmonotonic
03.07.18 01:57:29<dmiles> it is nice sometimes being able to distinguish between something unknown (not yet asserted) vs false ... since i think the state most KBs are in is starvation
03.07.18 01:58:17<HMCa> dmiles: for our purposes there is no such thing as "unknown" in the closed phase logic... we can only have undefineds in our open phase
03.07.18 01:58:46<HMCa> hence the nomenclature "closed/open phase" btw!
03.07.18 01:59:04<dmiles> right on
03.07.18 01:59:46<HMCa> this is sort of the very reason for the proxess being a cyclic reasoner in the first place, to cover both sets of practical needs soundly
03.07.18 01:59:47<dmiles> jsut one more thing to add..  also something being deduced to be false is prtty nice.. you dont constantly find yourself searching again and again.. my system sped up quite a bit having that ability
03.07.18 01:59:51<HMCa> *process
03.07.18 02:01:21<stoopkid> so, under CWA, there would only be two reasons to actually return to the empty kb instead of just returning a kb with just "{a p b} => false" in it would be: 1) allowing to actually removing stuff from the kb (in the sense of actually removing lines from the kb) instead of it having the negations continually grow; 2) because we might/will later carry the same kb into open-world interpretation where these actually aren't
                 <stoopkid> logically equivalent ?
03.07.18 02:02:43<HMCa> not sure I fully follow wrt #1 and I don't want to jump to assume on that one, heh... so if you could clarify?
03.07.18 02:03:28<HMCa> but yes, wrt #2 - open phase gets the luxury of optionally "peeking under the hood of the typesystem rules"
03.07.18 02:04:19<HMCa> (it is still bound to them, at times, but unlike closed phase logic it can consider a "raw" interpretation also)
03.07.18 02:04:36<stoopkid> (1) is basically: even though {} and {{a p b.} => false} are logically equivalent, we still might like to return to {} because it's the shorter of the two representations
03.07.18 02:05:36<HMCa> well, they're logically equivalent except when considering the assertion of "a p b" - then core should honor the inconsistency of the conjunction with thr naf rule
03.07.18 02:07:41<HMCa> iow before comitting to an assertion of "a p b" core should query for the explicit false... "a p b" conjoined with an empty kb should produce no explicit false, but conjoined with the naf rule it shoukd produce the explicit false revealing the inconsistency
03.07.18 02:08:46<HMCa> that isn't so much a difference "in the logic" as a difference "in the behavior of core, as 'guard' of the kb"
03.07.18 02:10:32<stoopkid> well, right, i'm sort of extending the interpretation of what "the logic" is since core's mechanism of guarding is essentially using logical negation to control the assertions/retractions of the logic itself
03.07.18 02:10:43<HMCa> right, yes
03.07.18 02:12:01<HMCa> I just mean to say that this does not affect inference/resolution itself, it is only a difference at kb mutation time
03.07.18 02:13:24<stoopkid> so i guess the other half of my question there was basically: when you assert {{a p b} => false} of an existing asserted {a p b}, is there any particular reason purely in CWA that it should actually return to the empty kb rather than leave {{a p b} => false} in the kb and already be asserting that you can't add {a p b} ?
03.07.18 02:13:41<HMCa> yes
03.07.18 02:14:18<HMCa> because the language should allow you to select from both meanings
03.07.18 02:14:44<HMCa> just because we retract doesn't mean we always also want to preclude!
03.07.18 02:15:32<HMCa> maybe we do want to "allow it to come back next block"... if we don't, we can just state the naf twice to do both things.
03.07.18 02:16:17<stoopkid> so we still handle this purely with negation by just stating the negation twice
03.07.18 02:16:24<HMCa> clever, imo... I wish I could take credit for having thought the mechanism up. XD
03.07.18 02:17:04<stoopkid> well, were you the one who came up with (4) ? :)
03.07.18 02:18:22<stoopkid> i guess not, since that just goes back to what the construct even "is" to begin with, which you said wasn't your idea
03.07.18 02:18:40<HMCa> actually both of those came out of discussion with some randoms from oublinet, ages ago
03.07.18 02:19:56<HMCa> (if you look on urban dictionary for "oublinet" you might spot.... ME.  LULS.)
03.07.18 02:20:17<HMCa> (mega bonus points for whoever can connect those dots, muhahaha)
03.07.18 02:20:45<HMCa> 2003... man those were the days...
03.07.18 02:20:49<HMCa> anyway
03.07.18 02:21:33<HMCa> best to keep in mind that *none* of this is true negation...
03.07.18 02:21:46<stoopkid> so wait, you actually ended up covering all 4 via the special interpretation of negations, so it didn't actually end up special-casing as a separate thing with block-verify..
03.07.18 02:22:10<HMCa> we only have retraction and naf at the rewriting layer, for anything like rral negation you need the typesystem
03.07.18 02:22:16<HMCa> welllllll
03.07.18 02:22:17<dmiles> yeah Mark Stickle was required to create a system to handle true negation
03.07.18 02:22:33<stoopkid> wait
03.07.18 02:22:39<HMCa> stoopkid: yes, but only sort of by accident. ;-)
03.07.18 02:22:52<stoopkid> hrm
                 <HMCa> #4 is really accomplished two ways, at two layers, heh
03.07.18 02:23:36<stoopkid> sure, i can see you could still constrain it from the blockverify level but yea i guess i see what you mean "by accident"
03.07.18 02:24:22<HMCa> they sort of work in tandem in the big picture
03.07.18 02:25:03<HMCa> and this "accident" ends up being part of how closed and open phase work to constrain each-other
03.07.18 02:25:43<HMCa> so it is a happy accident, in the end ;-)
03.07.18 02:26:20<stoopkid> ok so, i still have some questions about this
03.07.18 02:26:31<HMCa> I'm sure! :-)
03.07.18 02:26:56<stoopkid> it makes sense for facts, like {a p b} where p != log:implies
03.07.18 02:27:19<HMCa> dmiles: for our true negation we require the main man, Martin-Lof! :-)
03.07.18 02:27:40<stoopkid> how about for rules, it seems this gets slightly trickier
03.07.18 02:27:54<HMCa> seems so, but isn't really
03.07.18 02:28:04<HMCa> it only looks second order... it isn't.
03.07.18 02:35:32<stoopkid> so basically we do the lbase thing where we have first-order symbols in the language that represent graphs/rules, so for example {{{a p b} => {c p d}} => false} is gonna be looking at {a p b} => {c p d} just like any other triple-fact and comparing based on string/hash-equality of the subject/object, and {{{a p b} => {c p d}} => false} doesn't mean the logical negation of the rule it just means that the first-order triple
                 <stoopkid> representing the rule isn't in the KB?
03.07.18 02:41:09<HMCa> right, in "{foo}=>false" the "{foo}" is considered as just another bnode uri if we don't peer inside, so this can be treated like some "_:b123666=>false", so it is still just a first order... when we try assert "{foo}" we are really asserting "_:b123666" or w/e...
03.07.18 02:42:01<HMCa> in our case, we can even have consistent content hashing over everything by borroeing from the auth's cons-hashing scheme
03.07.18 02:42:11*** Join: koom_ (~koom@37-48-19-61.tmcz.cz, (unauthenticated): realname)
03.07.18 02:43:08<HMCa> so our "skolemized bnode names" can really form a content-addressed memory... heh
03.07.18 02:43:23<HMCa> but that is just a detail, somewhat beside the point
03.07.18 02:45:22<HMCa> so, long story short, the assert/negate/retract/preclude (incl the double-duty naf trick and "the accident") can work the same for facts and for rules
03.07.18 02:45:45<stoopkid> so, hrm, we're not even looking at "{{a p b} => {c p d}} => false" as "{_:b1 => _:b2} => false", we're looking at it like "_:b123666=>false" ?
03.07.18 02:45:50<HMCa> right
03.07.18 02:45:58<HMCa> (fun with homoiconic hypergraphs!)
03.07.18 02:46:34<HMCa> (extra fun with consistently hashed homoiconic hypergraphs!!)
03.07.18 02:46:44<stoopkid> so it wouldn't mean anything to have, say "{?x p ?y} => false" ?
03.07.18 02:46:59<HMCa> welllllllll
03.07.18 02:47:36<stoopkid> or i guess it means something, but all it means is the elimination of  a fact "?x p ?y" from the kb, if it exists?
03.07.18 02:47:39<HMCa> it wouldn't mean anything to inference/resolution.... but it would tell core to preclude adding "?x p ?y." as a fact
03.07.18 02:47:51<stoopkid> right
03.07.18 02:48:02<HMCa> yup
03.07.18 02:48:18<HMCa> sounds like you're getting the idea
03.07.18 02:48:29<stoopkid> so it specifically *doesn't* mean preclude adding "a p b" for all possible a and b ?
03.07.18 02:48:48<stoopkid> like i could have "a p b. {?x p ?y} => false" and this would be consistent?
03.07.18 02:49:55<HMCa> ah, no, it would preclude any matching fact
03.07.18 02:51:41<stoopkid> so it does need to then open up the graph to peer inside rather than just take it as a fresh constant?
03.07.18 02:52:43<HMCa> not if it's assigned uri is a *content* hash, no
03.07.18 02:53:15<HMCa> iow we don't just assign a fresh name to graphs, we always assign them a derived name
03.07.18 02:54:16<HMCa> if we see that two graphs have the same uri then we can know that they have the same content, without needing to peek inside either
03.07.18 02:54:25*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca) left #AutoNomic: Ping timeout: 268 seconds
03.07.18 02:55:00*** Join: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca, (unauthenticated): deadhand)
03.07.18 02:55:30<stoopkid> right but here we're actually saying "{?x p ?y} => false" actually needs to be able to match with "a p b" to preclude it from the kb
03.07.18 02:56:27<HMCa> ah, in that sense yes, we do look inside the graph - but this is just as we normally would for any inference/resolution anyway
03.07.18 02:57:01<HMCa> we still never go beyond first order to do that (we don't ever peer inside graphs that we find after peering inside...)
03.07.18 03:00:59<stoopkid> so what about "{?x => ?y} => false" ?
                 <HMCa> ot: btw did you answer my question and i missed it? (re: when nilli actually arrives to you)
03.07.18 03:01:16<stoopkid> ah woops, she should be arriving tomorrow
03.07.18 03:01:26<HMCa> what about it?  :-)
03.07.18 03:01:32<HMCa> dangerous rules are dangerous.
03.07.18 03:01:45<stoopkid> ok jw :)
03.07.18 03:02:01<stoopkid> so that rule is basically a context-killer? :)
03.07.18 03:02:25<HMCa> there are many possible context killers
03.07.18 03:02:47<HMCa> "don't stall your contexts" is the whole game, right?
03.07.18 03:03:10<HMCa> which reminds me...
03.07.18 03:03:18<HMCa> how `bout that eos drama drama, eh?
03.07.18 03:03:56<HMCa> between eos and tezos, chain governance is getting a lot of fud lately... XD
03.07.18 03:04:34<HMCa> eth guys even went so far as to speculate "it can never work"
03.07.18 03:04:36<HMCa> luls
03.07.18 03:16:29<stoopkid> so if we wanted a rule that says "this rule cannot be removed" we could do that via a rule "{ x => false} => false" where x = hash("{ x => false }") ?
03.07.18 03:16:53<stoopkid> or wait
03.07.18 03:17:02<stoopkid> this would be saying "remove this rule" :)
03.07.18 03:18:59<HMCa> hehe, the loop is self-cutting! ;-)
03.07.18 03:20:50<HMCa> you can't actually have a non-retraction rule, only non-assertion rules
03.07.18 03:20:57<HMCa> clever, huh?
03.07.18 03:21:32<stoopkid> so wait... "{?x => ?y} => false", this rules removes itself along with all other rules in the kb?
03.07.18 03:22:06<HMCa> you can have non-assertion rules about retraction, but must be either chain stallers or themselves able to be retracted
03.07.18 03:23:01<HMCa> well, it would empty the kb of rukes, then if you asserted it again it would preclude any new rule
03.07.18 03:23:05<HMCa> *rules
03.07.18 03:23:50<stoopkid> so it actually can be added into the kb on the second assertion, i.e. it doesn't retract itself immediately on every assertion?
03.07.18 03:25:00<HMCa> right, the retractions are always processed first then, if nothing was retracted, it is asserted.
03.07.18 03:26:21<HMCa> (btw, I described this once differently in the past, long ago, iirc... either approach would function for our purposes, but this is the more flexible...)
03.07.18 03:26:53<stoopkid> so when the positive is already asserted in the kb, this means it always takes two blocks to retract the positive and then add the negative?
03.07.18 03:27:35<HMCa> well, "two statements"... they could be in two txs in the same block, I assume
03.07.18 03:28:53<HMCa> unless if the context had some "only one statement per block" constraint ofc
03.07.18 03:28:59<HMCa> then yes. :-)
03.07.18 03:29:40<stoopkid> so if it appears once in the block it's just removing it, if it appears twice or more in the block it's removing it and asserting the negation, and this is fine because it's at worst redundant, not inconsistent
03.07.18 03:30:33<HMCa> (it sometimes gets mind-bending how flexible the semantics can become from such "simple" primitives, eh?)  "And we've only just begun..." -- Bill Hicks, who is obv not Alex Jones
03.07.18 03:31:28<HMCa> have you seen this crap re Hicks & Jones?  Some people think Hicks faked his death and became Jones...
03.07.18 03:31:31<stoopkid> so.. my issue with "{?x => ?y} => false" being able to be asserted is that it's seemingly inconsistent
03.07.18 03:31:56<HMCa> (if true that must be some good cas9 work, lol)
03.07.18 03:32:16<stoopkid> haven't seen that
03.07.18 03:32:25<HMCa> ah, you mean because it would match itself?
03.07.18 03:32:32<HMCa> hrmm, I suppose it would
03.07.18 03:32:34<stoopkid> right
03.07.18 03:32:47<HMCa> well, that's good, I guess... one less way to stall your context?
03.07.18 03:33:03<HMCa> well, I guess you could still have it in your cobtext's genesis rules?
03.07.18 03:33:05<HMCa> :-)
03.07.18 03:33:51<stoopkid> so what exactly would be the process here
03.07.18 03:34:06<stoopkid> you assert "{?x => ?y} => false" once, it removes all rules from the kb, but is not added
03.07.18 03:34:09<HMCa> maybe we should disallow creation of "immediately false" contexts... I'd never considered it, heh
03.07.18 03:34:19<HMCa> brb
03.07.18 03:35:13<stoopkid> you assert "{?x => ?y} => false" twice, there's no rule stopping it from being added, so it can be added, but then fails consistency check, so ends up actually not being able to be added?
03.07.18 03:37:37<stoopkid> same thing with "{ x => false} => false" where x = hash("{ x => false }") , it negates itself, so shouldn't actually be able to be asserted in the kb right?
03.07.18 03:38:33<stoopkid> kind of like a provably useless rule: it can't be asserted in the kb, so the only thing it could do is retract its own assertion from the kb, but since it can never be asserted in the kb there would never be anything to retract
03.07.18 03:41:46<stoopkid> so to say "this rule can't be removed", you would need "{ x => false} => false" where x = hash("{ x => false} => false")
03.07.18 03:48:12<stoopkid> or rather, x such that hash("x") = hash("{ x => false} => false")
03.07.18 03:51:38<HMCa> so you'd basically need to calculate a document which nests a reference to its' own content hash... which should be infeasible?
03.07.18 03:51:53<stoopkid> right
03.07.18 03:52:11<stoopkid> and that should actually be the only way to state such a rule, afaict?
03.07.18 03:53:53<HMCa> even the special "<>" uri name syntax in n3 doesn't quite do it
03.07.18 03:53:55<HMCa> so yah
03.07.18 03:56:23<stoopkid> so, assuming these "weird" rules couldn't be specified, the rules would basically have no mechanism at all for constraining what can be in the kb except for what we get at a higher-level with block-verify stuff?
03.07.18 03:57:05<stoopkid> because any retraction / assertion-of-negation could always be retracted/negated itself?
03.07.18 03:58:13<HMCa> right, there's no permanence at the rewriting layer
03.07.18 03:59:07<stoopkid> except for really in this one extremely special case, which itself is even rather benign even if encountered
03.07.18 04:11:18<stoopkid> well, maybe benign, depends what else that hash-collision could cause in the system
03.07.18 04:16:39<HMCa> well, hash collisions could make all sorts of havoc, ofc
03.07.18 04:16:46<HMCa> just like btc. ;-)
03.07.18 04:25:31<HMCa> I'll have to run soon
03.07.18 04:27:41<stoopkid> alright well i think i see how all that works
03.07.18 04:32:28<HMCa> yah, it is probably some of the least complex magic in the whole stack ;-)
03.07.18 04:33:20<HMCa> and as well it should be, it is really pretty fundamental/primitive... "low level" operation
03.07.18 04:33:23<stoopkid> so, if we have {a p b. {?x p ?y} => {?x r ?y}} and assert {a r b} => false, it would cause the kb to retract "a p b" ?
03.07.18 04:34:08<HMCa> no, only what matches the ante directly
03.07.18 04:34:20<stoopkid> hrm
03.07.18 04:34:26<HMCa> the retraction does not follow inference, it just unifies
03.07.18 04:34:51<stoopkid> but it does take variables into account when unifying
03.07.18 04:35:18<stoopkid> just doesn't go further beyond that?
03.07.18 04:35:22<HMCa> yes, but can't follow any bindings
03.07.18 04:35:30<HMCa> right, it is not a reasoning step
03.07.18 04:38:46<stoopkid> so you can retract rules in the following combinations: retract all triples with 1) a given p; 2) a given (s,p); 3) a given (p,o); or 4) a given (s,p,o)
03.07.18 04:40:06<stoopkid> so the affect of any retraction that uses variables in the antecedent should be equivalent to some finite number of retractions that don't use variables in the antecedent
03.07.18 04:40:30<HMCa> well, at a minimum.  We could allow matching vars on preds here, as well, as a convenience - again this is not second order, because we do not follow implocations
03.07.18 04:40:39<HMCa> *implications
03.07.18 04:40:49<stoopkid> true
03.07.18 04:41:05<HMCa> but that is really just a sort of optimization ;-)
03.07.18 04:41:07<stoopkid> right
03.07.18 04:41:52<HMCa> and yes, there's always a well defined bounded set of retractions
03.07.18 04:42:48<HMCa> (it might be "the whole kb" ofc... but it eon't be empty, or else what we're atually doing is asserting a constraint.)
03.07.18 04:42:58<HMCa> *won't
                 <HMCa> follow?
03.07.18 04:43:05<HMCa> *actually
03.07.18 04:43:09<stoopkid> right
03.07.18 04:43:19<HMCa> cool
03.07.18 04:43:24<HMCa> I gtg
03.07.18 04:43:35<stoopkid> alright catch ya later
03.07.18 04:43:48<HMCa> go get some sleep, and say hi to nilli for me tmrw! :-D
03.07.18 04:44:36<HMCa> maybe record vid and/or stream on dlive or something when you start getting into things? :-)
03.07.18 04:45:29<HMCa> (steem is kinda fundamentally flawed, but dtube/dlive are still kinda cool... heh.)
03.07.18 04:45:32<HMCa> anyway
03.07.18 04:45:38<HMCa> later!
03.07.18 05:08:39<stoopkid> another q: because we interpret {foo} => false differently from the other rules, can we have {{foo} => false} => { bar} actually look inside {foo} when matching?
03.07.18 05:09:49<stoopkid> for example, if we have { {{a p b} => false} => {bar}. {?x p ?y} => false.} can we derive {bar} ?
03.07.18 05:16:49*** Quit: koom_ (~koom@37-48-19-61.tmcz.cz) left #AutoNomic: Ping timeout: 255 seconds
03.07.18 05:18:05*** Quit: koom (~sirdancea@37-48-19-61.tmcz.cz) left #AutoNomic: Ping timeout: 276 seconds
03.07.18 05:20:47*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 276 seconds
03.07.18 05:30:28*** Join: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
03.07.18 05:31:17<stoopkid> it seems it's sound to do this when the fact being negated in the antecedents of the rule is a specialization of the fact being retracted, like how "a p b" is a specialization of "?x p ?y"
03.07.18 05:38:01<dmiles> if you did have a rule like "?x p ?y" and not(a p b)  do you have a why to just negate the {a p b} ?
03.07.18 05:38:49<dmiles> if you did have a rule like "?x p ?y" do you have a way to just negate the {a p b} ?
03.07.18 05:40:02<stoopkid> hrm
03.07.18 05:42:40<stoopkid> that would basically have to translate "?x p ?y" into a rule "{not(?x = a). not(?y = b)} => {?x p ?y}"
03.07.18 05:44:22<stoopkid> not sure how that antecedent "{not(?x = a). not(?y = b)}" should be properly expressed
03.07.18 05:44:55<dmiles> well RDF is in gneral mising negation anyways
03.07.18 05:46:45<stoopkid> right, this seems to be our extra semantics, or maybe N3Logic's extra semantics, not sure
03.07.18 05:47:33<stoopkid> and actually what i'm referring to just now might not even be part of HMC's intended semantics i'm just trying various combinations of things that i haven't seen as being ruled out by his descriptions so far of what's supposed to happen
03.07.18 05:47:55<dmiles> n3logic has negation at all?
03.07.18 05:48:33<stoopkid> idk
03.07.18 05:48:51<dmiles> ah ok.. yeah it doesnt
03.07.18 05:48:56<stoopkid> it has "{...} => false." i guess
03.07.18 05:50:21<stoopkid> https://www.w3.org/DesignIssues/Notation3.html
03.07.18 05:50:25<stoopkid> "scoped negation as failure"
03.07.18 05:52:36<dmiles> at least LBase does
03.07.18 05:53:16<dmiles> but lbase is too complex for n3logics etc
03.07.18 05:59:25<dmiles> kind of sad really
03.07.18 06:04:21<dmiles> though now we used to sneak negation in to n3 was  {[a b c] a notTrueStatment}
03.07.18 06:04:52<stoopkid> well, that would be what "{a b c} => false" is doing
03.07.18 06:05:20<dmiles> well when i was a semantic web proffestinal in 2003 that was our trick
03.07.18 06:05:51<dmiles> is we'd get a bnode that represented the triple
03.07.18 06:06:31<dmiles> then say that bnode was an isntnace of falseness
03.07.18 06:06:51<dmiles> also sort of how RIF ends up doing it
03.07.18 06:09:10<dmiles> its called "Symmetric negation"
03.07.18 06:09:50<dmiles> https://www.w3.org/2005/rules/wg/draft/ED-rif-fld-20090930/
03.07.18 06:10:10<dmiles> though  Flora2 is the only know impl of it
03.07.18 06:10:39<dmiles> which was why Michael Kifer created the docs :P
03.07.18 06:11:36<dmiles> was created as a why to slightly unlobotomize the semweb
03.07.18 06:11:41<dmiles> why/way
03.07.18 06:12:10<dmiles> by giving them a tool that was created 10 years before the semweb existed
03.07.18 06:13:07<dmiles> but that would mean that people would need to start using logic!
03.07.18 06:14:06<dmiles> but i belive everyone is still stuck in SPARQL/SQL
03.07.18 06:17:08<dmiles> but is worth using RIF !
03.07.18 06:17:09<stoopkid> ah right the interpretation of "{{a p b} => false} => {bar}" would be like "{_:b123666 => false} => {bar}", so we'd only derive "{bar}" if that specific rule was in the kb
03.07.18 06:39:37<stoopkid> so hrm..
03.07.18 06:40:12<stoopkid> according to n3logic, our "{...} => false" should actually be "CurrentDoc log:notIncludes {...}" ?
03.07.18 06:40:50<stoopkid> seems to make more sense this way
03.07.18 06:58:03<stoopkid> dmiles: so yea, n3logic doesn't have negation it has log:notIncludes, and i can see now why it has the "unifies, but doesn't take a resolution step" behavior, because that's the difference between N3-entailment and the behavior of log:implies
03.07.18 10:00:24*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hrjpfjyaeziaqxav) left #AutoNomic: Quit: Connection closed for inactivity
03.07.18 11:29:59*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vzafmzinwafeqstu, stoopkid: stoopkid)
03.07.18 15:20:20*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vzafmzinwafeqstu) left #AutoNomic: Quit: Connection closed for inactivity
03.07.18 17:32:40*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
03.07.18 17:33:05*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
03.07.18 18:05:34-SaslServ- koom!~sirdancea@37-48-19-61.tmcz.cz has just authenticated as you (sirdancealot)
03.07.18 18:05:37*** Join: koom (~sirdancea@37-48-19-61.tmcz.cz, sirdancealot: koo5)
03.07.18 18:05:58*** Join: koom_ (~koom@37-48-19-61.tmcz.cz, (unauthenticated): realname)
03.07.18 19:57:08*** Quit: koom_ (~koom@37-48-19-61.tmcz.cz) left #AutoNomic: Ping timeout: 256 seconds
03.07.18 22:07:29*** Quit: koom (~sirdancea@37-48-19-61.tmcz.cz) left #AutoNomic: Ping timeout: 248 seconds
03.07.18 22:24:19*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bdsfhqlauwpymemx, stoopkid: stoopkid)
04.07.18 00:39:19<HMCa> sup?
04.07.18 01:39:32*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
04.07.18 01:39:56*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.07.18 02:06:59*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bdsfhqlauwpymemx) left #AutoNomic: Quit: Connection closed for inactivity
04.07.18 02:23:14-SaslServ- koom!~sirdancea@89.24.51.29 has just authenticated as you (sirdancealot)
04.07.18 02:23:21*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
04.07.18 02:23:32*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
04.07.18 02:49:37*** Quit: koom_ (~koom@89.24.51.29) left #AutoNomic: Remote host closed the connection
04.07.18 02:50:01*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
04.07.18 04:46:33<koom_> i get it z3 isnt a fun toy to play with? ive run into 2 segfaults in 15 minutes of using it
04.07.18 04:46:48<koom_> debug build doesnt build
04.07.18 04:53:02<HMCa> well it is msft stuff
04.07.18 05:00:45*** Quit: dmiles (~logicmoo@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 256 seconds
04.07.18 05:07:12<koom_> but so enticing tutorials and stuff
04.07.18 05:07:24<koom_> damn
04.07.18 05:08:52*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
04.07.18 05:13:56<HMCa> cvc4 is not bad :-)
04.07.18 05:18:09<koom_> thx
04.07.18 07:17:11*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-juwtdquvazwnmajl, stoopkid: stoopkid)
04.07.18 10:22:27*** Quit: koom (~sirdancea@89.24.51.29) left #AutoNomic: Ping timeout: 240 seconds
04.07.18 10:22:34*** Quit: koom_ (~koom@89.24.51.29) left #AutoNomic: Ping timeout: 264 seconds
04.07.18 13:16:27*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-juwtdquvazwnmajl) left #AutoNomic: Quit: Connection closed for inactivity
04.07.18 14:06:05*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 240 seconds
04.07.18 14:11:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.07.18 14:12:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
04.07.18 14:12:40*** Join: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.07.18 15:30:26*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
04.07.18 15:32:00-SaslServ- koom!~sirdancea@89.24.51.29 has just authenticated as you (sirdancealot)
04.07.18 15:32:50*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
04.07.18 16:13:32*** Quit: koom (~sirdancea@89.24.51.29) left #AutoNomic: Ping timeout: 245 seconds
04.07.18 17:27:09*** Quit: koom_ (~koom@89.24.51.29) left #AutoNomic: Ping timeout: 255 seconds
04.07.18 21:45:05*** Quit: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 248 seconds
04.07.18 21:52:45*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
04.07.18 22:10:43*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lnvvflwisbpprteb, stoopkid: stoopkid)
04.07.18 23:41:17*** Connecting...
#AutoNomic>  05.07.18 11:50:38*** Join: editable-koo (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 5 months 9 days 17 hours 39 minutes 52 seconds ago
                 *** Names: editable-koo daemoz_ kook koom dmiles Deadhand lexxus[m] genuinelyfx[m] koo5[m] redfish64 Tamara_ cantora typlian5 @ChanServ HMCa vbmithr
                 *** End of /NAMES list.
05.07.18 11:52:48*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nflikgaroarelsxj, stoopkid: stoopkid)
05.07.18 14:00:59*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nflikgaroarelsxj) left #AutoNomic: Quit: Connection closed for inactivity
05.07.18 14:10:27*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
05.07.18 14:16:32*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
05.07.18 15:34:25<editable-koo>one logger death for unknown reason, after a month of service
05.07.18 17:21:07*** Quit: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
05.07.18 17:31:53*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
06.07.18 00:32:33*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-agyyartnfdcffzly, stoopkid: stoopkid)
06.07.18 00:34:49<HMCa> hi stoop
06.07.18 00:35:03<HMCa> how goes?
06.07.18 01:08:00<stoopkid> HMCa: good, Nili’s making progress
06.07.18 01:29:27<HMCa> cool
06.07.18 01:36:47<HMCa> what did you cover today?
06.07.18 03:16:42*** Connecting...
06.07.18 06:43:32*** Connecting...
06.07.18 06:43:49*** Join: editable-koo (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 5 months 10 days 12 hours 33 minutes 3 seconds ago
                 *** Names: editable-koo daemoz_ dmiles kook koom Deadhand lexxus[m] genuinelyfx[m] koo5[m] redfish64 Tamara_ cantora typlian5 @ChanServ HMCa vbmithr
                 *** End of /NAMES list.
06.07.18 14:47:20*** Quit: koom (~koom@89.24.51.29) left #AutoNomic: Ping timeout: 245 seconds
06.07.18 14:55:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-zjpgomztgcvcaerl, stoopkid: stoopkid)
06.07.18 14:59:11*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
06.07.18 15:03:22<stoopkid> HMCa: IPL proofs in natural deduction
06.07.18 15:23:54*** Quit: koom (~koom@89.24.51.29) left #AutoNomic: Remote host closed the connection
06.07.18 15:24:22*** Join: koom (~koom@89.24.51.29, (unauthenticated): realname)
06.07.18 17:05:17*** Join: nilli (47b3ee3c@gateway/web/freenode/ip.71.179.238.60, (unauthenticated): 71.179.238.60 - http://webchat.freenode.net)
06.07.18 17:20:14*** Quit: koom (~koom@89.24.51.29) left #AutoNomic: Ping timeout: 276 seconds
06.07.18 17:29:19<daemoz_> stoopkid: Are you recording the teaching sessions at all?
06.07.18 17:43:15*** Quit: nilli (47b3ee3c@gateway/web/freenode/ip.71.179.238.60) left #AutoNomic: Ping timeout: 252 seconds
06.07.18 18:13:52*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zjpgomztgcvcaerl) left #AutoNomic: Quit: Connection closed for inactivity
06.07.18 18:53:58*** Join: mnkk (~mnkk@ip5f5bf073.dynamic.kabel-deutschland.de, (unauthenticated): ...)
06.07.18 19:04:34*** Nick change: daemoz_ (daemoz@gateway/vpn/privateinternetaccess/daemoz) is now known as daemoz
06.07.18 20:08:53*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lybhcyrlxdkcdbon, stoopkid: stoopkid)
06.07.18 21:24:58*** Quit: kook (~sirdancea@89.24.51.29) left #AutoNomic: Ping timeout: 264 seconds
06.07.18 22:47:31*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lybhcyrlxdkcdbon) left #AutoNomic: Quit: Connection closed for inactivity
06.07.18 23:03:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dekbgsicxvfylesl, stoopkid: stoopkid)
06.07.18 23:10:41<stoopkid> daemoz: sorry my lessons were a bit too disorganized this time around
06.07.18 23:43:00<daemoz> stoopkid: no worries
06.07.18 23:53:24*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
07.07.18 00:00:44*** Join: dmies (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
07.07.18 00:25:30*** Quit: dmies (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
07.07.18 00:34:01*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
07.07.18 01:57:17<HMCa> heh
07.07.18 05:38:22*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
07.07.18 07:48:22*** Quit: koom (~sirdancea@89.24.51.29) left #AutoNomic: Ping timeout: 264 seconds
07.07.18 12:56:29*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
07.07.18 13:04:39<nilli> hey. so I am back form the first segment of the crash course with stoopkid  and ill try to sum it up to you here
07.07.18 13:09:23<nilli> first of all I must note his complete dedication to understand everything to its core and his commitment to do it despite the great difficulties.
07.07.18 13:11:58<nilli> also I was very happy to see how committed he was in teaching me and figuring ways to explain me things I have no relevant background in.
07.07.18 13:14:53<nilli> So we did managed to get through a lot to the point the point that I understood what is a proof and was able to construct it with him by my side refreshing my memory to the relevant reference.
07.07.18 13:20:06<nilli> I would need to practice that much more in order to feel that it stick. but while doing it I would try to work on these flashcard sets for the rules set that stoop and I talked about
07.07.18 13:22:21<nilli> once we make these it will be much easier to run a lesson that can be taped. (other wise it become a mess of notes on paper that you keep shuffling around).
07.07.18 13:23:17<nilli> hopefully by the time koo comes around and we go over that together with stoop we would be able to record some of it.
07.07.18 13:25:28<nilli> over all is a very positive and exciting experience and I am really glad that soop was up to the challenge
07.07.18 13:29:20<nilli> I guess its also important that I met his family so they now have a slightly better perspective on the important work that he is doing. might take some pressure off him.
07.07.18 13:32:48<nilli> demiles I also got a better understanding regarding your on going logic disagreements....eventually we came to name "dmiles logic"
07.07.18 13:34:47<nilli> I would feel very accomplished if i would start to understand your conversations here
07.07.18 13:35:12<stoopkid> hey nilli, thanks, i'm glad you found it productive
07.07.18 13:36:05<stoopkid> side-note: "dmiles logic" == "most logic-programming theory other than curry-howard"
07.07.18 13:36:42<nilli> stoopkid very much so, was worth every moment. thank you!
07.07.18 13:40:09<stoopkid> so, do you recall what makes the curry-howard correspondences special in the theory of logic?
07.07.18 13:49:17<nilli> ok its still very hard for me to express that in words  and using the right terms in the right place. but it the requirement for the tree that end up with a hypothesis for every (object?, not sure if the right the but I meant that x:A )
07.07.18 13:49:59<nilli> stoopkid can you rephrase it right for me?
07.07.18 13:52:17<stoopkid> i see what you're going for, i think i maybe confused you about where the witnesses are
07.07.18 13:52:20<nilli> *if object is the right term
07.07.18 13:54:31<stoopkid> it's the requirement that proofs of a statement are instances/witnesses of the abstract structure expressed by the statement
07.07.18 13:57:47<stoopkid> having all the leaves of the tree be hypotheses/axioms is a requirement for most proof theories, regardless of whether they can be said to "contain their own meaning" like the inferencing patterns given by the curry-howard correspondence do
07.07.18 14:00:15<stoopkid> you can think of it like, a proof of "cup AND chair" would be an actual cup and an actual chair, together, in a labeled box or something
07.07.18 14:01:22<nilli> ok your description before that last that example is a very complex "wording structure" . I am actualy looking at your drawing and it is that very simple structure
07.07.18 14:02:03<nilli> let me try to express it very simple again
07.07.18 14:12:53<nilli> the carry Howard correspondence allows me to collapse the tree of proof which damned witness to axioms to a computational phrase
07.07.18 14:13:37<nilli> the carry Howard correspondence allows me to collapse the tree of proof, which damned witness to axioms, to a computational phrase
07.07.18 14:16:29<stoopkid> not quite, collapsing the proof-tree into a proof-object is essentially just a notation that makes use of the idea that propositions are the sets of their proofs-trees
07.07.18 14:17:47<stoopkid> the specialness is in the structure contained by both the trees & the objects
07.07.18 14:18:01*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
07.07.18 14:22:12*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
07.07.18 14:25:13*** Join: koom (~sirdancea@89.24.51.29, sirdancealot: koo5)
07.07.18 14:25:26<nilli> hey it seems like some connection problems here
07.07.18 14:28:25<stoopkid> np
07.07.18 14:32:18*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
07.07.18 14:42:59*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
07.07.18 14:44:14<nilli> hey. so I think that communication is back . and I have a few minutes
07.07.18 14:45:23<nilli> 07.07.18 14:17:47<stoopkid> the specialness is in the structure contained by both the trees & the objects
07.07.18 14:51:49<nilli> ok lets trace what we did
07.07.18 14:55:17<editable-koo>hey
07.07.18 14:55:29<stoopkid> yo
07.07.18 14:55:32<nilli> you showed me the introduction rules and the eliminationhey rules
07.07.18 14:56:00<editable-koo>im regretting that i cant come earlier
07.07.18 14:56:20<nilli> hey koo. :)  working my rusted brain meanwhile
07.07.18 14:56:31<editable-koo>fair fair
07.07.18 14:56:47<nilli> its good that I had time to start form point 0
07.07.18 14:57:03<nilli>  stoop had to teach me a lot of the basics
07.07.18 14:57:46<nilli> just so I will start understand what is mltt is all about
07.07.18 14:58:37<nilli> so now im back in nyc for a few days to try and digest what I learned
07.07.18 14:59:05<nilli> and fix some misunderstandings regarding my learnings
07.07.18 14:59:51<nilli> so once you come I hope to at list be able to understand some of the conversations you and stoopkid will have :)
07.07.18 15:00:37<nilli> we plan that stoop will get us both practice the proves
07.07.18 15:01:59<editable-koo>cool
07.07.18 15:02:24<nilli> I still am having a real problem using the right terms just so we can see that I understand what I did. I think that i do understand a bit better then I can talk about it
07.07.18 15:03:17<nilli> I meand I can shuffel the pages and know what I need to do. but will have problem describing it.
07.07.18 15:05:52<nilli> so back to the description
07.07.18 15:06:12<editable-koo>acquiring the language is like 80% of the work sometimes
07.07.18 15:09:38<editable-koo>ok
07.07.18 15:10:57<nilli> once I am presented with a term to prove I am referencing the introduction rule to the corresponding curry Howard correspondence rule and apply it to the rule to get to the next level of the prooftre
07.07.18 15:11:04<nilli> proof tree
07.07.18 15:26:45*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
07.07.18 15:27:27*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
07.07.18 15:27:53<nilli> a "definitions" (cant find the correct term for it but I mean is "presented" on the left side)
07.07.18 15:28:15<stoopkid> nilli: either introduction or elimination rules (you might already have proofs available that you can apply elimination rules to)
07.07.18 15:29:31<nilli> yes either introduction of elimination rules
07.07.18 15:30:14<nilli> or
07.07.18 15:34:27*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
07.07.18 15:35:46*** Join: nilli (ac3823d0@gateway/web/freenode/ip.172.56.35.208, (unauthenticated): 172.56.35.208 - http://webchat.freenode.net)
07.07.18 15:36:09<nilli> ok. ill come back to munch over it more. actualy stoopkid is very good that you ask me things so I can try to answer them and by doing it realizing what I dont know
07.07.18 15:36:25<nilli> so see you later
07.07.18 15:36:59<stoopkid> catch ya later
07.07.18 15:41:03*** Quit: nilli (ac3823d0@gateway/web/freenode/ip.172.56.35.208) left #AutoNomic: Ping timeout: 252 seconds
07.07.18 15:42:22*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
07.07.18 16:04:58*** Quit: koom_ (~koom@89.24.51.29) left #AutoNomic: Remote host closed the connection
07.07.18 16:05:19*** Join: koom_ (~koom@89.24.51.29, (unauthenticated): realname)
07.07.18 16:44:41<HMCa> @nilli sounds like things are progressing well!
07.07.18 19:02:35*** Quit: mnkk (~mnkk@ip5f5bf073.dynamic.kabel-deutschland.de) left #AutoNomic: 
07.07.18 20:30:07*** Join: kook (~sirdancea@89.24.49.212, sirdancealot: koo5)
07.07.18 20:30:28*** Join: koom__ (~koom@89.24.49.212, (unauthenticated): realname)
07.07.18 20:32:17*** Quit: koom (~sirdancea@89.24.51.29) left #AutoNomic: Ping timeout: 245 seconds
07.07.18 20:33:03*** Quit: koom_ (~koom@89.24.51.29) left #AutoNomic: Ping timeout: 240 seconds
07.07.18 20:45:50*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
08.07.18 01:05:31<nilli> hi HMCa. yes i think that things are going well
08.07.18 02:53:42*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
08.07.18 09:11:09*** Quit: kook (~sirdancea@89.24.49.212) left #AutoNomic: Ping timeout: 264 seconds
08.07.18 09:11:11*** Quit: koom__ (~koom@89.24.49.212) left #AutoNomic: Ping timeout: 256 seconds
08.07.18 11:04:30<stoopkid> hrm.. i'm thinking natural deduction assumes slightly too much implicit understanding of how proof-trees could/should work
08.07.18 11:06:55<stoopkid> (for teaching purposes, that is)
08.07.18 11:12:02<stoopkid> the two main complicating factors are hypothetical derivation and dependent types
08.07.18 11:13:38<stoopkid> this "..." notation is a bit confusing: https://en.wikipedia.org/wiki/Natural_deduction#Hypothetical_derivations
08.07.18 11:15:49<stoopkid> it doesn't really indicate how many times the hypothesis can be used within the sub-tree and the rules that use it even seem to suggest that it's only appearing once (or specifically n times if the rule makes n specific uses of it)
08.07.18 11:19:36<stoopkid> when rather it's supposed to indicate that the sub-tree can use the hypothesis arbitrarily many times, i.e. it's like a tree with arbitrarily many "holes" that can be filled with a proof of the hypothesis
08.07.18 11:25:35<stoopkid> the "hypotheses |- proposition" notation is better for this.. since no specific diagram of a tree will be able to represent all the different possibilities, we basically just stick the hypotheses in a bucket off to the side and say "ok at any point in constructing a proof-tree, you can use these hypotheses as many times as you want"
08.07.18 11:27:14<stoopkid> but with this notation it's somewhat less intuitive to understand the operations on proof-trees, like substitution, proofs of local soundness / completeness, normalization, etc..
08.07.18 11:42:27<stoopkid> the complication introduced by dependent types otoh is that the propositions themselves are actually proof-trees
08.07.18 12:43:48*** Join: koom (~sirdancea@89.24.49.212, sirdancealot: koo5)
08.07.18 12:43:49*** Join: koom_ (~koom@89.24.49.212, (unauthenticated): realname)
08.07.18 13:12:08*** Quit: koom_ (~koom@89.24.49.212) left #AutoNomic: Remote host closed the connection
08.07.18 13:12:33*** Join: koom_ (~koom@89.24.49.212, (unauthenticated): realname)
08.07.18 13:26:27*** Quit: koom_ (~koom@89.24.49.212) left #AutoNomic: Ping timeout: 240 seconds
08.07.18 14:30:38*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
08.07.18 14:31:04*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
08.07.18 15:01:34*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
08.07.18 15:02:00*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
08.07.18 15:05:21*** Quit: koom (~sirdancea@89.24.49.212) left #AutoNomic: Ping timeout: 256 seconds
08.07.18 15:31:19*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
08.07.18 15:37:28<nilli> hi .
08.07.18 15:41:58<nilli> so I wanted  also to mention some of our other conversations regrading the project
08.07.18 15:44:37*** Join: koom (~sirdancea@89.24.49.212, sirdancealot: koo5)
08.07.18 15:46:08<nilli> I think that I understood in actual the choice to use MLTT  and thus agda as the type prover .
08.07.18 15:49:57<nilli> however from stoop I understood that in terms of the programming language HMCa is insisting on using N3 which is one of the semantic web programming language
08.07.18 15:52:17<nilli> while stoop feel that everything can be expressed using agda and that N3 is inferior to agda
08.07.18 15:54:24<nilli> *when I said "using" I mean some how refer mltt to N3
08.07.18 15:59:10<nilli> I still not sure I know to express it right but the bottom line was that stoopkid and koo think that they can make autonomic using agda only.
08.07.18 16:00:31<nilli> and dont understand HMCa motivation enforcing it on the semantic web
08.07.18 16:01:54<nilli> from the very little that i understand I can see one important feature of the semantic web that do not exist in agda and I would intuitively assume to be of great importance
08.07.18 16:03:31<nilli> and that is the "triples"  as the fundamental structure
08.07.18 16:04:02<nilli> stoop did not seem to agree with me on the importance of such structure
08.07.18 16:06:56<nilli> and ofc I dont know if one need to "relate" agda to the semantic web in order to achieve that , but agda alone dose no enforce a "triples" structure
08.07.18 16:09:15<nilli> So why is triples such an important structure?! I think that I would be able to explain that regardless of everything else that have to do with autonomic.
08.07.18 16:10:27<nilli> let me see if I can explain it
08.07.18 16:13:01<nilli> assuming I start with a picture constructed out of shapes and colors
08.07.18 16:14:36<nilli> and I need to be able to deconstruct it to all the elementary shapes and elementary colors from which the picture was constructed
08.07.18 16:17:46<nilli> now before we continue , it is very crucial to realize our state as the decoder , that which observe the finite product and dont know what are the fundamental parts.
08.07.18 16:26:28<nilli> if we speak in terms of colors this means that I get infinite possible shapes in infinite possible colors in infinite possible pictures
08.07.18 16:38:50<nilli> thus we need to start with some assumptions regarding our primary colors and primary shapes and then checking each shape assumption against two color assumptions  and vice versa
08.07.18 16:40:07<nilli> two shape assumption against one color assumption.
08.07.18 16:44:19<nilli> eventually using that elimination process  I will be able to figure out which are the basic colors (that construct all the colors) and which are the basic shapes (that construct all the shapes)
08.07.18 16:45:11*** Quit: koom (~sirdancea@89.24.49.212) left #AutoNomic: Ping timeout: 276 seconds
08.07.18 16:48:10<nilli> but that would be possible only if I use that triples structure of two colors mixed in one shape or two shapes of the same color.
08.07.18 16:49:24<nilli> ok I dont think that I made it clear what so ever ...lol  but ill think of another way to do that
08.07.18 17:07:46<nilli> anyway. I can see the importance of a tree of triples to create a coherent  web of meaning
08.07.18 17:09:19*** Join: koom (~sirdancea@89.24.49.212, sirdancealot: koo5)
08.07.18 17:10:34<nilli> but I cant yet explain it...
08.07.18 17:12:32<nilli> hope you are all having a great restful Sunday :)
08.07.18 17:12:48<nilli> will catch you later
08.07.18 17:13:17*** Quit: koom (~sirdancea@89.24.49.212) left #AutoNomic: Remote host closed the connection
08.07.18 17:17:12*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
08.07.18 17:29:58<stoopkid> @ nilli : not quite, agda has some problems
08.07.18 17:30:24<stoopkid> remember the “escape hatches” thing
08.07.18 17:31:44<stoopkid> and otoh, restricting ourselves to triples doesn’t have anything to do with being able to capture “meaning”
08.07.18 17:34:48<stoopkid> at worst it risks losing some of the meanings that are expressible in logics with arbitrary arity, and at best it just simply doesn’t lose any of the meanings, but there aren’t really any cases where it somehow manages to allow you to capture more meanings
08.07.18 17:42:19<HMCa> we certainly know that it can't lose any meanings
08.07.18 17:42:58<HMCa> we also certainly know that it doesn't gain any either
08.07.18 17:43:29<dmiles> if the goal is to preserve as many meanings as possible you'll need a language like lbase
08.07.18 17:44:25<dmiles> which gives the ability the express meanings too hard to express in most languages such as agda
08.07.18 17:44:37<HMCa> what it does gain is interoperability with the existing latent semantic data, and other semantic web technologies (facebook, goog knowledge graph, etc)
08.07.18 17:45:00<HMCa> dmiles: there is nothing in lbase that is not in agda
08.07.18 17:46:40<dmiles> like:   (possible (knowsAbout ?P (hasProp ?P (exists ?M (mother ?P ?M)))))
08.07.18 17:47:05<dmiles> since lbase is designed to gbe more expressive of a language than even english
08.07.18 17:47:51<dmiles> and english to lbase can be done automatically
08.07.18 17:47:56<dmiles> but not english to agda
08.07.18 17:48:58<dmiles> so that is what i mean by a differnce in expressiveness
08.07.18 17:49:55<dmiles> also "at runtime"
08.07.18 17:50:10<dmiles> lbase code is a quine ... i am not sure about agda
08.07.18 17:51:33<dmiles> i realized the other day when discussing something with Ohad is that very often people dont write programs in languages like Prolog
08.07.18 17:51:47<dmiles> instead they use such systems like SQL
08.07.18 17:52:07<dmiles> and then get confused when it doesnt act like a query language
08.07.18 17:52:40<dmiles> its not a query language.. any more than Lbase needs to be
08.07.18 17:53:26<dmiles> lbase is a quine based programming language that not many even knew was a possiblity
08.07.18 17:53:52<dmiles> because they still see lbase like an advanced SQL
08.07.18 17:54:48<dmiles> stoopkid when thru a phase a few months ago where he wanted to do agda-in-agda
08.07.18 17:55:06<dmiles> if possible that wouild indeed mostly catch it up
08.07.18 17:55:29<dmiles> to hold the special properites that Prolog/LBase have
08.07.18 17:56:55<dmiles> as at that point futamura projection would stop being impossible
08.07.18 17:57:06<dmiles> as at that point futamura projection would stop being impossible in agda
08.07.18 17:59:12<dmiles> to really give an example of a programiong language that is quine based here is such a program:  https://github.com/TeamSPoon/wam_common_lisp/blob/master/prolog/wam_cl/mizepro.pl
08.07.18 17:59:37<dmiles> that program when ran thru itself eliminates line 81
08.07.18 18:00:21<dmiles> as well as 50% of its code.. each pass that compiler specializer becomes even better
08.07.18 18:00:26<dmiles> lbase has this exact same property when properly unit projected
08.07.18 18:08:02<dmiles> what HMCa showed in that document that adds Prolog capabilities to a functional programing language sort of does add that capability
08.07.18 18:09:12<dmiles> caveat is as long as unit projection stays available
08.07.18 18:10:17<dmiles> by "unit projection" what i mean is that any single programming clause decomposes/recomposes into/from many
08.07.18 18:11:13<dmiles> and while in separated form that the program can still operate
08.07.18 18:16:21<dmiles> sum and proudct types in functional language were created to leverage this concept.. the missing part was that the call stack doesnt share that concept
08.07.18 18:17:15<dmiles> the best case though one really can reign in the call stack
08.07.18 18:18:47<dmiles> whereas the shizzy is when the call stack is self determined using the mechanisms related to the same inferences made
08.07.18 18:20:33<dmiles> again this is seeing typesystem not as structured query languge but as opertunistic nondetermisms for a non-det "machine"
08.07.18 18:23:35<dmiles> HMCa: where is that paper again?
08.07.18 18:28:59<koo5[m]> Escape hatches would be easily disallowed
08.07.18 18:29:58<koo5[m]> As on interoperability with semweb data, i dont see why we cant add it later
08.07.18 18:35:55<koo5[m]> And the cost of this one little tweak is immense to this project, making it stuck in a preliminary design phase for years
08.07.18 18:37:13<koo5[m]> We wont probably be interoperable with much existing rule-sets in n3, if each expects a different semantic
08.07.18 18:37:45<dmiles> possibly it is that the little tweak that changes the entire foundation
08.07.18 18:37:59<dmiles> the enire foundation of any program
08.07.18 18:38:41<dmiles> it is like adding a random noise maker into the typesystem
08.07.18 18:39:11<dmiles> and expecting the program to still operate
08.07.18 18:39:54<dmiles> i am jsut describing an antithesis worsecase
08.07.18 18:41:34<dmiles> one either builds a sytem that defends from this or they are dead in the water
08.07.18 18:42:38<koo5[m]> Otoh, having logic programming as the basis would be valuable, because it doesnt seem its something you can slap on later neatly. Like you said, agda doesnt seem to provide that
08.07.18 18:43:08<dmiles> *exactly*
08.07.18 18:44:45<dmiles> you just cant avoid having a program use logical declaration that is moment by moment operating on a set of deduced "what it *should* be doing"
08.07.18 18:45:16<dmiles> aka logic programming
08.07.18 18:46:21<dmiles> having logic programming as the basis is not as scarey as it sounds
08.07.18 18:47:47<dmiles> as in there is not anyhting that non-logic-programming does that logic programming doesnt do as easy as butter
08.07.18 18:48:03<dmiles> cant say the opposite
08.07.18 18:49:14<koo5[m]> if nilli reads this, as on triples, yeah theyre apparently amazing for sharing simple data, but it seems that falls apart when that data becomes more complex. then you instead use graph databases, to be able to talk about properties of individual relations without having to redo everything from scratch all the time
08.07.18 18:56:36<koo5[m]> yeah, if we can do imperative in functional programming, we should be able to in logic programming
08.07.18 18:56:54*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
08.07.18 18:58:15<koo5[m]> Hi nilli, do you read the logs?
08.07.18 18:58:30<nilli> stoopkid. dont know why I even got into that triples thing in the first place. was too far off of everything else we did. I guess forget it. :)
08.07.18 19:03:37<nilli> hey koo5 I do but often don't really get most of what you guys talk about. thus not really reading that . now i just saw stoop comment and reacted to that. need more time to read all the conversation
08.07.18 19:05:12<koo5[m]> Me neither
08.07.18 19:05:13<koo5[m]> if nilli reads this, as on triples, yeah theyre apparently amazing for sharing simple data, but it seems that falls apart when that data becomes more complex. then you instead use graph databases, to be able to talk about properties of individual relations without having to redo everything from scratch all the time
08.07.18 19:08:43<dmiles> if it is not already apearant by now that i have "a beef" with triples and it is pretty much what koo just said.. but to expand on it a little is that when that data becomes more complex, the triples system is speding 99% of the CPU on trying to reconstruct the complex meaning back out of triple form
08.07.18 19:11:40<dmiles> *spending..  *and* if you are lucky enough, the remaining CPU time 1% might still be available to do what you actually cared about doing
08.07.18 19:15:45<dmiles> what i said there only makes probably only makes sense when someone is experienced doing what they cared about in a semantic multi-arity logical language
08.07.18 19:18:22<dmiles> here is a [somehwhat appearently sexist] example of a logic program that is mong boggling insave to convert ot RDF https://github.com/TeamSPoon/pfc/blob/master/t/sanity_base/food_and_drink.pl
08.07.18 19:18:35<dmiles> insane*
08.07.18 19:19:20<koo5[m]> Im not, but its easy to see how the overhead just explodes
08.07.18 19:22:35<dmiles> yes.. here is even the representational  explosion https://github.com/TeamSPoon/pfc/blob/master/t/sanity_base/food_and_drink_arity2.pl#L18-L45
08.07.18 19:23:43<dmiles> actualyl on line 19 it does shrink in a good way.. but the rest.. not
08.07.18 19:24:30<dmiles> has1 - has5  are "bnodes"
08.07.18 20:10:18<stoopkid> dmiles: one of the following must be the case
08.07.18 20:10:37<stoopkid> 1) agda is more expressive than lbase
08.07.18 20:10:55<stoopkid> 2) agda actually fails at being higher-order logic somehow (which is not the case)
08.07.18 20:11:31<stoopkid> 3) lbase specs are "wrong" somehow and lbase is actually not restricted to Henkin SOL
08.07.18 20:11:52<stoopkid> 4) Henkin SOL is equivalent to full SOL
08.07.18 20:12:39<stoopkid> equivalently expressive*
08.07.18 20:13:05<stoopkid> afaict (3) is not the case either
08.07.18 20:13:37<dmiles> subsumptie unification of constants  3&4 true
08.07.18 20:13:51<dmiles> subsumptie unification of constants would make 3 & 4 true
08.07.18 20:14:37<stoopkid> lbase semantics are almost exactly Henkin SOL semantics, with the added bit of semantics that each relation is "attached" to some first-order object
08.07.18 20:15:07<dmiles> this is where = is replaced with  > or <
08.07.18 20:15:46<dmiles> which makes even first order no longer first order
08.07.18 20:15:48<stoopkid> idk what you mean here, but what you're saying seems to be about the deductive system, not the semantics
08.07.18 20:16:27<stoopkid> "which makes even first order no longer first order" do we agree that this doesn't actually mean anything
08.07.18 20:16:48<dmiles>  what i am taking about is where the meaing of  foo(X,X). actualyl gets a meaning
08.07.18 20:17:04<dmiles> what does  foo(X,X).  apply to?
08.07.18 20:17:24<dmiles> i mean what is the relation between arg1 and arg2 ?
08.07.18 20:17:45<stoopkid> that depends on the FOL formula used to express foo
08.07.18 20:17:47<stoopkid> unless there isn't any
08.07.18 20:17:48<dmiles> (not foo.. i mean how to you know that arg1 and arg2 are unifyable)
08.07.18 20:18:01<stoopkid> in which case foo is just one of the binary relation symbols in the signature
08.07.18 20:18:19<stoopkid> in which case it can be any arbitrary relation consistent with the rest of the rules in the theory
08.07.18 20:19:29<dmiles> ok lets look at this   foo(X)->foo(Y).
08.07.18 20:19:41<dmiles> what is the fiffernce between X and Y?
08.07.18 20:19:45<dmiles> what is the differnce between X and Y?
08.07.18 20:20:07<stoopkid> the identifiers of the variables
08.07.18 20:20:14<dmiles> i mean semantically
08.07.18 20:20:54*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
08.07.18 20:20:59<stoopkid> nothing really aside for their position in the formula
08.07.18 20:21:18<dmiles> the answer i am looking for is somehow an equivancy that must exist between X and Y but  Y might be subtly covering more surface area
08.07.18 20:21:41<dmiles> more surface area on a structure diagram of some sort
08.07.18 20:22:00<dmiles> but only " might "
08.07.18 20:22:57<stoopkid> idk what you mean
08.07.18 20:23:23<dmiles> ok lets say i dont tell you the domain of X and Y
08.07.18 20:23:32<stoopkid> if you had said instead: foo(X) -> bar(X) i would agree that bar covers more "surface area" than foo in the sense of foo essentially being a subset of bar
08.07.18 20:23:47<dmiles> yet i tell you   P(X) -> P(Y).  is always true
08.07.18 20:23:57<stoopkid> well
08.07.18 20:24:10<dmiles> how would you realte the X,Y in FOL?
08.07.18 20:24:11<stoopkid> if X and Y are free variables, yes
08.07.18 20:24:18<dmiles> they are yes
08.07.18 20:24:39<stoopkid> actually wait
08.07.18 20:26:19<stoopkid> only seems to be true in the existential case, and only under a sort of classical interpretation
08.07.18 20:27:19<dmiles> oh i see yes   your  "foo(X) -> bar(X)"  has the same meaning i meant with "foo(X)->foo(Y)"
08.07.18 20:27:39<dmiles> that bar coverse more surface area
08.07.18 20:27:51<stoopkid> forall P, forall x y, P(x) -> P(y); i don't think so
08.07.18 20:28:08<dmiles> lets go with your surface area expresssion
08.07.18 20:28:09<stoopkid> forall P, exists x, y, P(x) -> P(y); actually also doesn't seem right
08.07.18 20:28:24<dmiles> or we can go with mine it works to
08.07.18 20:29:25<stoopkid> i could be wrong, there could be some subtle trick here
08.07.18 20:29:29<dmiles> lets find an interpreation or reading of  "forall P, forall x y, P(x) -> P(y);"     or   " forall P, exists x, y, P(x) -> P(y); "   that  does work
08.07.18 20:29:45<dmiles> since they are legal and should be made to work right?
08.07.18 20:29:56<dmiles> since they are legal and should be made to work?
08.07.18 20:30:20<dmiles> if they do work what does this tell you?
08.07.18 20:30:31<dmiles> (if you can accept a semantic that allows them to)
08.07.18 20:30:35<stoopkid> "forall P, forall x y, P(x) -> P(y)" fails in the natural numbers, choose P(x) := "x = 0"
08.07.18 20:30:49<stoopkid> and x = 0 and y = 1
08.07.18 20:31:00<dmiles> but it works for  x=1 , y= 1 right?
08.07.18 20:31:19<stoopkid> so?
08.07.18 20:31:31<stoopkid> it says "forall"
08.07.18 20:31:40<dmiles> i am saying what happens when we accept only universes that it works in
08.07.18 20:32:12<dmiles> so on universe it worlks in is where all numbers are 1
08.07.18 20:32:21<dmiles> so one universe it worlks in is where all numbers are 1
08.07.18 20:32:43<dmiles> right?
08.07.18 20:34:21<stoopkid> any universe where there's only one object, sure
08.07.18 20:34:30<stoopkid> we would say that such universes are models of this statement
08.07.18 20:34:38<dmiles> in a universe that has many objects *also* works in a universe that all P is a P that does not discriminate?
08.07.18 20:35:45<stoopkid> you mean every P is such that "forall x y, P(x) -> P(y)"? sure, then it works trivially
08.07.18 20:36:09<dmiles> right a silly universe but a universe nonetheless
08.07.18 20:36:35<stoopkid> class of* universes, and yes
08.07.18 20:36:48<dmiles> does it work in a universe in where one sets contains only itself?
08.07.18 20:37:13<dmiles> does it work in a universe in where one set exists and that set contains only itself
08.07.18 20:37:45<stoopkid> hrm
08.07.18 20:37:52<stoopkid> let me see if i interpret this the same way as you
08.07.18 20:38:47<stoopkid> so when we quantify "forall P", the only set is P, which is this set which contains only itself
08.07.18 20:38:56<stoopkid> so P(P) holds
08.07.18 20:39:09<stoopkid> and when we quantify over all x, and y, they both must be P as well
08.07.18 20:39:37<stoopkid> so we end up asking P(P) -> P(P), which is true
08.07.18 20:39:40<dmiles> oh ok lets make this 2 typed FOL only.. so that the P is a relations .. and the X and Y must be sets
08.07.18 20:40:22<dmiles> these are not asks .. these are "assertions"
08.07.18 20:40:49<dmiles> that might have been a confusing thing
08.07.18 20:41:13<stoopkid> in the class of worlds where we've made these assertions we're asking whether "forall P, forall x y, P(x) -> P(y)" is valid
08.07.18 20:41:26<dmiles> i have a KB and i assert into that KB   "forall x y, P(x) -> P(y)"  i am referning the the model that KB is creating
08.07.18 20:41:45<stoopkid> ah so you're adding this as an axiom ok
08.07.18 20:41:50<dmiles> yes
08.07.18 20:42:03<dmiles> FOL everything added becomesd an axiom of that logiic
08.07.18 20:42:34<dmiles> and every interpretation of that axiom that is incosition is false by prrincple of explosion
08.07.18 20:43:06<dmiles> and every interpretation of that axiom that is inconsistent is false (or incorrect) by prrincple of explosion
08.07.18 20:44:04<dmiles> whayt i am saying is to even accept some of these assertions woiuld be a violation of henkin
08.07.18 20:44:17<dmiles> but not of full whatnot
08.07.18 20:44:40<dmiles> like " forall P, exists x, y, P(x) -> P(y); "
08.07.18 20:44:51<dmiles> can you think of a henkin or countable read of that?
08.07.18 20:45:14<stoopkid> yes
08.07.18 20:45:23<dmiles> or even   like "exists x, y, const(x) -> const(y); "
08.07.18 20:45:44<dmiles> ok how does x and y.. relate in my last statment?
08.07.18 20:45:52<stoopkid> choose any henkin structure where the set of 1-ary relations is empty
08.07.18 20:46:11<dmiles> or any logic that will let x and y be the same?
08.07.18 20:47:34<dmiles> would tis be ok in a logic that will let x and y be the same?
08.07.18 20:47:53<stoopkid> what does "ok" mean
08.07.18 20:48:09<dmiles> assertable and still have a non-explosive reading
08.07.18 20:48:14<dmiles> ok = assertable and still have a non-explosive reading
08.07.18 20:48:54<stoopkid> sure
08.07.18 20:49:42<stoopkid> in both full semantics and henkin semantics this statement will have models, for instance any models containing only one object
08.07.18 20:49:54<dmiles> ok so  "exists x, y, const(x) -> const(y); "  is assertable and still have a non-explosive interpreation  in a logic
08.07.18 20:50:29<dmiles> so in hekin that means "let x and y be the same" ?
08.07.18 20:50:41<dmiles> implies that x and y is the same right?
08.07.18 20:51:18<stoopkid> also has models in any structure with at least one object such that const(x) holds for every object x
08.07.18 20:51:20<dmiles> the two existentials are inextrically bound to being rhe same?
08.07.18 20:52:03<stoopkid> so, no
08.07.18 20:52:51<dmiles> so you are saying this assertion always explodes?
08.07.18 20:53:01<stoopkid> no
08.07.18 20:53:11<dmiles> then show me what is true for that assertion
08.07.18 20:53:31<stoopkid> i'm saying it's neither tautologous, nor contradictory, nor paradoxical, it's what we would call a contingency
08.07.18 20:53:42<dmiles> good.. you are with me then
08.07.18 20:54:04<dmiles> can there be an existential y where this y is "x plus a little more"
08.07.18 20:54:28<dmiles> not numbers.. lets say  surface area
08.07.18 20:55:11<dmiles> like:   "exists x, y, surfaceArea(x) /\ serfaceArae(y) /\ const(x) -> const(y); "
08.07.18 20:55:21<stoopkid> "exists P, R, (forall x, P(x) -> R(x)) ^ (exists x, R(x) ^ ~P(x))" ?
08.07.18 20:55:38<stoopkid> so R is the set that contains "a little more" than P
08.07.18 20:56:01<dmiles> why must it happen on Rs and not X/Ys ?
08.07.18 20:56:39<stoopkid> well, objects don't have a built-in notion of relative and/or absolute sizing in the same way that sets/relations do
08.07.18 20:56:40<dmiles> cant we have logical objects that constiture things like time durrartions or surface areas?
08.07.18 20:57:10<stoopkid> we could, but
08.07.18 20:57:21<stoopkid> you'd have to show me the semantics :)
08.07.18 20:57:24<dmiles> what in lbase doc prevets that?
08.07.18 20:57:34<dmiles> what in lbase doc prevents that?
08.07.18 20:58:02<stoopkid> idk i never said anything in lbase prevented that
08.07.18 20:58:22<dmiles> so lbase would allow?   "exists x, y, timeDurration(x) /\ timeDurration(y) /\ const(x) -> const(y); "
08.07.18 20:58:36<stoopkid> yea why not
08.07.18 20:58:48<stoopkid> lbase specs say yes so i'm inclined to say yes
08.07.18 20:58:50<dmiles> can henken sematics still owrk if you could have that?
08.07.18 20:59:08<stoopkid> idk i don't think you can "break them"
08.07.18 20:59:38<stoopkid> so you'll have to be more precise about what you mean by "work"
08.07.18 21:00:16<dmiles> are there non hekin true ways to read  "exists x, y, timeDurration(x) /\ timeDurration(y) /\ const(x) -> const(y); "
08.07.18 21:00:23<dmiles> also are there  hekin true ways to read  "exists x, y, timeDurration(x) /\ timeDurration(y) /\ const(x) -> const(y); "  ?
08.07.18 21:00:53<stoopkid> that's a first-order statement, and is satisfiable, so yes
08.07.18 21:02:04<dmiles> is this statment any weaker or stringer in meaning?  "exists x, y, timeDurration(x) /\ timeDurration(y) /\ const(x) <-> const(y); "
08.07.18 21:02:21<dmiles> *stronger
08.07.18 21:02:58<dmiles> meains are there more or less interpreations?
08.07.18 21:03:21<stoopkid> well, h/o, "exists x, y, (timeDurration(x) /\ timeDurration(y) /\ const(x)) -> const(y); "  or "exists x, y, timeDurration(x) /\ timeDurration(y) /\ (const(x) -> const(y)); " ?
08.07.18 21:04:16<dmiles> "exists x, y, timeDurration(x) /\ timeDurration(y) /\ (const(x) -> const(y)); "
08.07.18 21:04:17<stoopkid> actually the latter should be a stronger statement in either case, i.e. fewer models/interpretations
08.07.18 21:04:48<dmiles> ok and even fewer models for "exists x, y, timeDurration(x) /\ timeDurration(y) /\ (const(x) <-> const(y)); " ?
08.07.18 21:06:04<stoopkid> i'd have to think about it
08.07.18 21:06:11<dmiles> now lets assert:   (forall x const(x) -> WasAliveDurring(Joe,x)).
08.07.18 21:07:32<stoopkid> are you trying to model SOL in FOL using a description in terms of temporal logic?
08.07.18 21:08:24<stoopkid> you'll be able to, just like when we use "holds"...
08.07.18 21:08:43<dmiles> ok if i swtch from timeDuration to watermass.. will it become higher-order aquatic logic?
08.07.18 21:10:02<stoopkid> the problem you'll encounter no matter what first-order vocabulary/semantics you use to describe it is that you won't be able to restrict the models to *only* refer to *exactly* what you're talking about
08.07.18 21:11:02<stoopkid> the SOL interpretations will be a subset of the FOL interpretations
08.07.18 21:11:05<stoopkid> a proper subset
08.07.18 21:11:11<stoopkid> meaning there are more FOL interpretations
08.07.18 21:11:35<dmiles> yes.. i know!
08.07.18 21:11:46<dmiles> thats what i am saying
08.07.18 21:12:11<stoopkid> so if you restrict your interpretations to only the SOL interpretations, that is exactly what SOL is
08.07.18 21:12:26<dmiles> and is that something lbase cant be?
08.07.18 21:12:28<stoopkid> it will probably work for your time/watermass interpretations too
08.07.18 21:12:32<stoopkid> yes
08.07.18 21:12:37<stoopkid> they chose the other direction
                 <dmiles> whay cant it be?
08.07.18 21:12:44<stoopkid> they said so
08.07.18 21:12:52<dmiles> where?
                 <stoopkid> literally in their specs
08.07.18 21:12:59<dmiles> its said FOL expressions
08.07.18 21:13:02<stoopkid> in the document you provided for lbase specs
08.07.18 21:13:47<stoopkid> they explicitly chose the Henkin interpretation
08.07.18 21:14:21<dmiles> where?
08.07.18 21:14:33<dmiles> i mena the quote
08.07.18 21:14:58<dmiles> in https://www.w3.org/TR/2003/NOTE-lbase-20030123/
08.07.18 21:15:13<dmiles> oops i guess https://www.w3.org/TR/lbase/
08.07.18 21:15:23<stoopkid> "By using a well understood logic (i.e., first order logic [Enderton]) " ...
08.07.18 21:15:41<stoopkid> "Although first-order logic (and hence Lbase) is only semi-decideable, we are confident that it will be routine to construct Lbase interpretations which establish the relevant consistencies for all the SWELs currently contemplated."
08.07.18 21:16:00<stoopkid> "The availablity of powerful inference engines for first-order logic is of course relevant here."
08.07.18 21:16:12<dmiles>  Although first-order logic (and hence Lbase) is only semi-decideable, we are confident that it will be routine to construct Lbase interpretations which establish the relevant consistencies for all the SWELs currently contemplated.
08.07.18 21:16:15<stoopkid> "However, we expect that first order logic will be a proper subset of such systems and hence we will be able to smoothly transition to more expressive Lbase languages in the future."
08.07.18 21:16:44<stoopkid> ^ so i'll give you future lbase, but you'll have to show me the semantics :)
08.07.18 21:16:56<dmiles> so those Lbase languages in the future are supersets of FOL?
08.07.18 21:16:58<stoopkid> because as of lbase as it is in that doc:
08.07.18 21:17:00<stoopkid> "We will use First Order Logic with suitable minor changes to account for the use of referring expressions (such as URIs) on the Web, and a few simple extensions to improve utility for the intended purposes."
08.07.18 21:17:30<stoopkid> "Any first-order logic is based on a set of atomic terms, which are used as the basic referring expressions in the syntax."
08.07.18 21:20:11<dmiles> why does henkin even app.,y to FOL.. i thought that it was about SOL
08.07.18 21:20:27<stoopkid> so, they'll go on to say a lot more about how it's actually FOL, and you should read that as well, but how we know for sure they actually are Henkin semantics is in the interpretation of relation symbols
08.07.18 21:20:54<dmiles> not talking about relations.. i am jsut talking about first order objects
08.07.18 21:21:22<stoopkid> well, when we're just talking about first order objects, we know for sure we're only talking about first-oder things.. right?
08.07.18 21:21:31<dmiles> right
08.07.18 21:21:43<stoopkid> so the only question would be about the relations
08.07.18 21:22:03<dmiles> fist order object can be tineDurrations, logical truths, anyting that re partition away from preations
08.07.18 21:22:16<dmiles> fist order object can be tineDurrations, logical truths, anyting that re partition away from relations?
08.07.18 21:22:45<stoopkid> first order objects can be relations too
08.07.18 21:23:26<dmiles> can they also be logical sentences as well?
08.07.18 21:23:30<stoopkid> sure
08.07.18 21:23:44<stoopkid> one of the most interesting interpretations, imo
08.07.18 21:24:31<dmiles> ok so  " exists x, y, beleives(Joe,x) /\ beleives(Joe,y) /\ (const(x) -> const(y));"
08.07.18 21:25:03<dmiles> actualy let me make that all one conjuction
08.07.18 21:25:59<stoopkid> are you still trying to model SOL in FOL?
08.07.18 21:26:26<stoopkid> cause it still won't work, no matter what interpretation you choose
08.07.18 21:26:33<dmiles> i dont have to model SOL in FOL.. i can do it with any type of object that is  subsumptive
08.07.18 21:27:01<dmiles> such as surface areas and lists
                 <stoopkid> so, you're thinking to restrict the models to a specific type of objects ?
08.07.18 21:27:33<dmiles> any object that can be modeled to contain any other object will work
08.07.18 21:27:48<dmiles> to get where i am going
08.07.18 21:27:59<stoopkid> here's the problem with what you're trying
08.07.18 21:28:14<stoopkid> FOL doesn't make any such restriction on the objects
08.07.18 21:28:40<stoopkid> making such a restriction is exactly what gives SOL the greater expressive power
08.07.18 21:28:42<dmiles> but in FOL i can add restrictions using ateceedants?
08.07.18 21:29:01<stoopkid> you can add restrictions using axioms
08.07.18 21:29:07<stoopkid> but the problem you'll still run into is:
08.07.18 21:29:24<dmiles> yes.. and that is what i am doing i restricting things to objects that are subsumptive in my exmaples
08.07.18 21:29:43<stoopkid> with the FOL interpretation, which does not make any of these restrictions on the objects, your FOL axioms won't be able to constrain the models to be *only* these objects
08.07.18 21:30:12<dmiles> well sure somoen can add an axiom that even changes my restrictuins in new ways
08.07.18 21:30:45<dmiles> they can even add negation in lbase to best constrain them
08.07.18 21:30:47<stoopkid> but not in enough new ways to make it be able to express, for example, transitive closure (of anything that you could possibly express transitive closure about)
08.07.18 21:31:25<dmiles> i cant even expres  X > 1 in FOL right?
08.07.18 21:32:17<stoopkid> you can't express it even when FOL already restricts the models to the natural numbers and gives you axioms for 0 and successor
08.07.18 21:33:02<stoopkid> you can express it trivially when you restrict interpretations of > to actually be the "greater than" relation on natural numbers, but again this where we start getting into the whole "doing something different"
08.07.18 21:33:16<stoopkid> even the restriction into natural numbers at all there was "doing something different"
08.07.18 21:33:27<stoopkid> FOL doesn't even have enough expressive capacity to do *that*
08.07.18 21:33:41<dmiles> ah
08.07.18 21:33:51<dmiles> then i doubt lbase with be used for SWEL
08.07.18 21:33:58<dmiles> then i doubt lbase can be used for SWEL
08.07.18 21:34:04<stoopkid> no idea
08.07.18 21:34:43<stoopkid> somewhat ironically in this discussion HMCa seems to think otherwise
08.07.18 21:35:23<stoopkid> but ofc he seems to intend "lbase + actual higher-order MLTT"
08.07.18 21:36:03* stoopkid semi-afk
08.07.18 21:38:02<dmiles> well if one ojbect can subsume another and still be considered unfiable by deductive closure that is the property in which violates "countablity"
08.07.18 21:38:34<dmiles> thats all i was attemption to show is that can be expressed in FOL
08.07.18 21:40:54<dmiles> since one merely adds another axiom that changes the deductive equality
08.07.18 21:43:53<dmiles> once object equality can be defined subsumptively that means it is possible to express all of SOL
08.07.18 21:44:46<dmiles> expecially since lbase provides  (not ..) which cannot be translated into any other SWEL
08.07.18 21:45:53<dmiles> once object equality can be defined subsumptively as well as openworld (not ..)  it is possible to express quite a bit
08.07.18 21:49:20<dmiles> "we use a version of first order logic with equality as Lbase"
08.07.18 21:49:55*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
08.07.18 21:50:44<dmiles> first order logic without equality would be much too restrictive
08.07.18 21:51:08<dmiles> as one could no longer define subsumptive equality
08.07.18 21:51:37<dmiles>  subsumptive equality is the magic of full FOL
08.07.18 21:51:43<dmiles> sorry
08.07.18 21:51:44<dmiles>  subsumptive equality is the magic of full SOL
08.07.18 21:53:15<stoopkid> possibly, i'd have to see more precisely what you mean
08.07.18 22:14:33<dmiles> possess(John,ListA)<->possess(John,ListB))    % no varailbes her in this axiom
08.07.18 22:15:48<dmiles> ive now made to symbols that were once would we'd think are different symbols perhaps the same symbols
08.07.18 22:16:37<dmiles> possess(John,ListCD) <-> (possess(John,ListC) /\ possess(John,ListD))
08.07.18 22:17:58<dmiles> it is not appearant that i actually altered the meaning of the symbols.. that still can be their own tings
08.07.18 22:18:21<dmiles> but i've made a logical enforcement that they still must be treated in this special way
08.07.18 22:20:14<dmiles> the second real now makes   ListCD have subsumptive equality to ListC  .. yet they are still perhaps differnt lists
08.07.18 22:20:56<dmiles> that special sort of logical equality is something that cannot be enumerated
08.07.18 22:21:16<dmiles> or described outside of the way i jsut described it
08.07.18 22:22:35<dmiles>  i mean is you might not have a way in any other logic to express "the same" subsumption
08.07.18 22:23:30<dmiles> wait.. this is the same kind of subsumption that relations use in full SOL
08.07.18 22:23:44<dmiles> a special subsumtiopn that cannot be expressed otherwise
08.07.18 22:25:49<dmiles> what makes this so special is there is no way to interpret such a relationship otehr than to "enforce it"
08.07.18 22:26:10<dmiles> in other words there can be no false interpreations
08.07.18 22:26:51<dmiles> example.. lets pretend that ListA and ListB are interpreted to be the saem objects..
08.07.18 22:26:52<dmiles> fine
08.07.18 22:27:05<dmiles> example.. lets pretend that ListA and ListB are interpreted to be different objects..
08.07.18 22:27:19<dmiles> fine
08.07.18 22:27:22<dmiles> oops
08.07.18 22:28:01<dmiles> both interpretations are expected to be made
08.07.18 22:28:13<dmiles> still thats not a paradox
08.07.18 22:28:23<dmiles> hell that what relations do
08.07.18 22:28:40<dmiles> loves(joe,sue) and loves(brad,janet)
08.07.18 22:28:50<dmiles> they ar ethe same or mayvbe they are different
08.07.18 22:29:15<dmiles> loves is the same mayvbe loves are different
08.07.18 22:30:11<dmiles> the relation love has subsumptive equality to all instneads of the the relation loves
08.07.18 22:30:34<dmiles> the relation love has subsumptive equality to all instances of the the same relation
08.07.18 22:33:10<dmiles> none of this is amazing or wierd
08.07.18 22:33:20<dmiles> it only gets where when we do this to existentials
08.07.18 22:33:44<dmiles> it only gets weird when we do this to undetermined existentials
08.07.18 22:35:46<dmiles> its because there might have been a model fothe Listsl.. but what about existentials?
08.07.18 22:42:22<dmiles> also you cant ever pin down the size of the universe or the number of new symbol
08.07.18 22:43:54<dmiles> in lbase    skf1(1,2,_) and skf1(1,2,_)  are mostl likely diffent existentials
08.07.18 22:45:00<dmiles> they might be subsumptively equal yet be diffenrt objects
08.07.18 22:46:43<dmiles> we stay ambigously weak enough we can express both oppostite truths
08.07.18 22:48:27<dmiles> we ensure that if you *thought* you could quantify over "different" objects .. you were mistaken
08.07.18 22:49:05<dmiles> "Then Henkin semantics is second-order logic, with all the comprehension axioms, and no further restrictions on the possible models. These 'Henkin models' will have both a defined universe of discourse (the list of basic objects in the model we can quantify over) and a defined 'universe of sets/predicates' (a list of sets of basic objects that we can quantify over), with the comprehension
08.07.18 22:49:06<dmiles> axioms making sure they are compatible. "
08.07.18 22:49:32<dmiles> we jsut made sure there is no list of basic objects in the model we can quantify over
08.07.18 22:49:44<dmiles> thus no way to get to henkin
08.07.18 22:51:32<dmiles> subsubtive equality prevents the possiblity of that
08.07.18 23:01:08<dmiles> Drank(John,Liquid1)->Drank(John,Liquid2).
08.07.18 23:01:51<dmiles> We have no idea now if  Liquid1 is Liquid2
08.07.18 23:02:48<dmiles> We might assume Liquid1 subsumes Liquid2
08.07.18 23:03:31<dmiles> in the same was    X>2 subsumes X>3
08.07.18 23:04:19<dmiles> the only interpretations are openworld
08.07.18 23:05:44<dmiles> It should be noted that a full model (where the 'universe of Liquids' include all possible subliquides) automatically obeys the comprehension axioms, since it can quantify over every liquid. So every full model in a Henkin model, and it might seem that Henkin semantics are a simple extension of full semantics, and that they have a greater 'expressive power'. Few things could be further from
                 <dmiles> the truth.
08.07.18 23:08:00<dmiles> Henkin semantics can behave much worse than standard first order logic.
08.07.18 23:15:39<dmiles> what i am fighting agasist here is:   1) FOL when "emulating SOL" becomes SOL w/ Henkin
08.07.18 23:15:59<dmiles> that is just not true
08.07.18 23:16:28<dmiles> it sounds like it should be true..  but it is just not
08.07.18 23:16:41<dmiles> its completely unrelated
08.07.18 23:19:01<dmiles> what i am saying is different
08.07.18 23:20:01<dmiles>  its completely unrelated = i am not bothering to "emulate SOL"
08.07.18 23:20:20<dmiles> however the simularity is sticking i know
08.07.18 23:21:26<dmiles> nor was i emulating  "aquatic logic" by using Liquids
08.07.18 23:23:21<dmiles> but nothing prevented me from doing aquatic logic from simple FOL
08.07.18 23:24:01<dmiles> any mnore than prevents me from doing temporal logic
08.07.18 23:24:19<dmiles> or even CTL*
08.07.18 23:26:52<dmiles> full SOL and Henkin SOL..   just isnt anything special
08.07.18 23:27:54<dmiles> i see no way that lbase is SOL w/ Henkin or without Henkin
08.07.18 23:29:08<dmiles> Since in Lbase you can quantify over relatios.. does that make it stop being FOL?
08.07.18 23:29:29<dmiles> then why does the document work so hard to claim its FOL
08.07.18 23:29:56<dmiles> if it works so hard to define SOL with Henkin?
08.07.18 23:30:09<dmiles> why does the document work so hard to claim its FOL
08.07.18 23:30:32<dmiles> then why does the document work so hard to claim its not just FOL ?
08.07.18 23:32:13<dmiles> this second part is that fact that "supposedly" it defined doing "SOL w/ Henkin" for SWELs
08.07.18 23:32:53<dmiles> i am onbly assuming that you guys assume this due to RDF is "SOL w/ Henkin"
08.07.18 23:34:21<dmiles> can i see an example that agda is expressive as even SOL or FOL?
08.07.18 23:34:46<dmiles> is Agda  as expressive as LBase?
08.07.18 23:35:17<dmiles> here is an Lbase domain.. I'd love to see in Agda
08.07.18 23:35:33<dmiles> https://pastebin.com/jjv52pzM
08.07.18 23:36:26<dmiles> bive me an exmaple of a Agda program and i'll be happy to traslate to LBase
08.07.18 23:38:42<dmiles> not only that i'd it'll be easie ri am sure for me to write an automated tralator
08.07.18 23:39:45<dmiles> i have one already that transliternate Haskell and Curry code to Prolog
08.07.18 23:40:05<dmiles> a couple more steps and it translates to LBase
08.07.18 23:41:42<dmiles> her eis that code https://github.com/logicmoo/old_logicmoo_workspace/tree/development/pack/logicmoo_packages/prolog/upv_curry
08.07.18 23:48:20<dmiles> if oyu are looking for logic programing in Agda there is: https://github.com/mihanus/curry-agda/
08.07.18 23:49:40<dmiles> the idea there is it is possble to work with non-determinism in Agda
08.07.18 23:54:08<dmiles> the main caveat is making sure that Agda can non-deterministly handle the partial relations that will be defined in the future from LBase
08.07.18 23:55:08<dmiles> (or from RDF)
08.07.18 23:55:45<dmiles> is what koo aND I are were talking about
08.07.18 23:56:13<dmiles> either do that early or start from another base
09.07.18 00:18:22<HMCa> :49 < koo5[m]> if nilli reads this, as on triples, yeah theyre apparently amazing for sharing simple data, but it seems that falls apart when that data becomes more complex. then you instead use graph databases, to be able to talk about properties of individual relations without having to redo everything from scratch all the time
09.07.18 00:18:54<HMCa> graph databases are just triples/quads too... node--edge-->node
09.07.18 00:19:19<HMCa> :51 < dmiles>  subsumptive equality is the magic of full SOL
09.07.18 00:19:30<HMCa> full SOL has much wizardry
09.07.18 00:25:31<stoopkid> dmiles: agda doesn't stop you from running inference
09.07.18 00:26:06<stoopkid> it even facilitates it to some extent
09.07.18 00:29:02<stoopkid> what you see when people program in agda (like when i show you my agda stuff) is propositions along with single proof trees, you're not seeing the proof-search process, indeed i'm mostly doing it manually, not using agda's hole-filling algorithm
09.07.18 00:31:44<stoopkid> the deterministic execution you see is proof-tree normalization
09.07.18 00:32:11<stoopkid> you could fairly argue that this doesn't have to be a deterministic process but is rather a rewrite graph of equivalent terms
09.07.18 00:32:46<stoopkid> but there's a decent amount of justification to the deterministic proof-tree normalization process as well
09.07.18 00:33:12<stoopkid> i.e. the "purely functional" interpretation..
09.07.18 00:34:26<stoopkid> similarly i don't see anything in the constructive interpretation of logic that would preclude using non-deterministic (but terminating) algorithms as the witnesses of the truth of implication/"function"-types
09.07.18 00:35:12<stoopkid> but also i don't see anything in the purely functional approach that would preclude simulating stuff like backtracking proof-search *within* the existing language... indeed i think that's what the LogicT paper is all about
09.07.18 00:37:06<stoopkid> anyway
09.07.18 00:37:23<stoopkid> "Since in Lbase you can quantify over relatios.. does that make it stop being FOL?"
09.07.18 00:37:34<stoopkid> so first
09.07.18 00:37:43<stoopkid> as it says in the lbase spec, you can't actually quantify over relations
09.07.18 00:40:12<stoopkid> second, apparently on closer read of the lbase spec, it goes beyond FOL expressiveness
09.07.18 00:41:02<stoopkid> "Lbase allows for various collections of special names with fixed meanings defined by other specifications (external to the Lbase specification). There is no assumption that these could be defined by collections of Lbase axioms, so that imposing the intended meanings on these special names may go beyond strict first-order expressiveness. (In mathematical terms, we allow that some sets of names refer to elements of certain
09.07.18 00:41:03<stoopkid> fixed algebras, even when the algebra has no characteristic first-order description.) Each such set of names has an associated predicate which is true of the things denoted by the names in the set. At present, we assume two categories of such fixed names: numerals and quoted strings, with associated predicate names 'NatNumber' and 'String' respectively. We expect that other categories of special names will be introduced to
                 <stoopkid> handle, eg. XML structures.
                 <stoopkid> Numerals are defined to be strings of the characters '0123456789', and are interpreted as decimal numerals in the usual way. Since arithmetic is not first-order definable, this is the first and most obvious place that Lbase goes beyond first-order expressiveness."
09.07.18 00:41:44<stoopkid> but this appears to be "going beyond" FOL expressiveness in the same way that FOL[0,s,<] "goes beyond" FOL expressiveness
09.07.18 00:42:34<stoopkid> idk, there's a lot of subtle details to compare
09.07.18 00:44:41<stoopkid> dmiles: i think where we need to start in our discussions is to formalize a shared language for describing syntax & semantics of logics and then start cataloging descriptions of the logics we're comparing
09.07.18 00:46:41<dmiles> i think there is definately a differnce between the FOL of PowerLOOM/LBase/CYC etc than from mathematical FOL
09.07.18 00:47:36<stoopkid> there are at least several notable differences between pure FOL and lbase, but i don't yet know how they affect expressive capacity
09.07.18 00:47:40<dmiles> the auhtor of LBase though is of course having a background in mathmeatics is writting it for the audioence that has a background in ontology
09.07.18 00:48:33<dmiles> but it is hard to know what definitions he is using at any moment.. though there are plenty of times he clearly is using the defination from his background
09.07.18 00:48:44<stoopkid> FOL[0,S,<] with restricted interpretation to natural numbers with 0 = zero, S = successor, < = less than is perhaps more expressive and less expressive
09.07.18 00:49:38<stoopkid> than purel FOL**; for example it can trivially express <, maybe even has TC(S,<) builtin, which pure FOL can't do, but also it can now *only* express things about the natural numbers
09.07.18 00:50:10<stoopkid> but i have to think about this
09.07.18 00:50:52<stoopkid> but let's start with formalizing how we even define a logic in the first place, yes?
09.07.18 00:52:45<dmiles> yes
09.07.18 00:52:55<dmiles> but also we are going to need names for things that arent "Pure"
09.07.18 00:53:20<stoopkid> there's plenty room for that
09.07.18 00:53:28<dmiles> i mean in orbit we have lots of things that dont fit even into the achemeic languages
09.07.18 00:53:49<dmiles> for example.. Agda doesnt nesc have "a logic" for us yet
09.07.18 00:54:35<dmiles> at least for me.. i hear it is HOL .. but seen no evidence of defination of what that meant
09.07.18 00:55:19<dmiles> to me that might mean its capable of at least Pure FOL.. but pure FOL is capable of Horn logic
09.07.18 00:56:49<dmiles> anyways i wanted to say it is ok if we start with an approach to defining things as long as we leave room for describving important systems
09.07.18 00:57:12<dmiles> i mena start with the textbook approaches
09.07.18 01:00:37<dmiles> btw .. in all the ways that wikipedia is biased towards things it even works
09.07.18 01:01:52<stoopkid> ok so, in my interpretation, a logic is defined by the following collection of things: 1) a syntax, i.e. a collection of strings over an alphabet, constituting the "well-formed formulae" (wffs) ; 2) a semantics, which consists of a "total" collection of worlds/structures, along with criteria defining what it means for a world/structure to satisfy / "be an interpretation of" a wff
09.07.18 01:03:14<stoopkid> every logic i've ever seen can be fit into this description (or some version of this description with minor corrections for precision)
09.07.18 01:03:37<stoopkid> note that this doesn't include any deductive system
09.07.18 01:04:18<dmiles> ok so this notoin of logic is alike a representation system?
09.07.18 01:04:32<stoopkid> because the operation of deductive systems can be seen as being relative to notions of validity/satisfiability according to the chosen semantics
09.07.18 01:04:38<stoopkid> yes
09.07.18 01:05:00<dmiles> does a programming language like C or Java fit (maybe not quite conforatably.. ) but i is a logical representation?
                 <stoopkid> think of it like pure KR
09.07.18 01:05:12<dmiles> i am tryinmg to see how expressiveness fits in for Agda
09.07.18 01:05:21<stoopkid> yes all languages fit
09.07.18 01:05:31<stoopkid> (all formal languages with interpretations, i mean)
09.07.18 01:06:07<stoopkid> possibly even natural languages too but you'll have a tough time formalizing your syntax/semantics
09.07.18 01:06:27<stoopkid> C is a set of strings with some interpretation
09.07.18 01:06:35<stoopkid> Java is a set of strings with some interpretation
09.07.18 01:06:37<dmiles> ok.. so this point here.. we have an option question for a while now.. is exprssiveness of a language require an able-bodied deduction system?
09.07.18 01:06:39<stoopkid> Agda etc..
09.07.18 01:06:59<stoopkid> expressiveness is independent to deductive systems
09.07.18 01:07:04<stoopkid> express != prove
09.07.18 01:08:27<dmiles> sounds good
09.07.18 01:09:21<stoopkid> actually hrm.. dependent type theory and other things kind of make their expressiveness dependent on provability
09.07.18 01:10:02<stoopkid> they do this by making the definition of well-formed formulae in their system dependent on the deductive system they end up using
09.07.18 01:10:05<stoopkid> but...
09.07.18 01:10:20<stoopkid> i guess that doesn't really break my interpretation of the definition of a logic...
09.07.18 01:11:18<stoopkid> we could just interpret this as still just being a complex syntax, and assign it entirely different semantics, and use a whole other deductive system with it
09.07.18 01:12:03<stoopkid> so yea, we're pretty free to do all kinds of wacky stuff, we just have to express each wacky thing precisely otherwise we can't rigorously compare
09.07.18 01:13:11<HMCa> sometimes even when we do we still may not be able to rigorously compare... :-|
09.07.18 01:13:36<HMCa> so... here be dragons, ofc
09.07.18 01:13:42<dmiles> for exmaple there is no way to compare Lbase and Agda
09.07.18 01:14:06<HMCa> well, no, that would not be an example
                 <stoopkid> well
09.07.18 01:14:08<dmiles> sinc ehtat would be like comparing LBase to Prolog
09.07.18 01:14:51<HMCa> an example would be like trying to compare eso and fol(lfp)
09.07.18 01:14:57<dmiles> unless we compared Agda syntax to LBase syntax maybe?
09.07.18 01:15:43<stoopkid> we can compare both syntax and semantics, or, attempt at least
09.07.18 01:16:16<HMCa> we can compare syntax of eso and fol(lfp)... we cannot rigorously compare semantics (yet?)
09.07.18 01:16:19<HMCa> :-)
09.07.18 01:16:49<HMCa> to do so we'd first need to figure out that 3sat stuff, beat the minotaur
09.07.18 01:17:07<stoopkid> oy
09.07.18 01:17:38<HMCa> if you can rigorously compare thee semantics I'll have $500k usd waiting for you
09.07.18 01:17:47<HMCa> *those
09.07.18 01:19:32<stoopkid> we can at least rigorously describe what it is we're even comparing
09.07.18 01:19:47<HMCa> sure, and ecen do many comparison...
09.07.18 01:20:02<HMCa> we're just stuck wrt rigor, on those two... ;-)
09.07.18 01:20:03<stoopkid> dmiles: btw HMC's example problem here ends up being equivalent to the P vs NP problem
09.07.18 01:20:06<HMCa> (as one example)
09.07.18 01:22:05<stoopkid> dmiles: so yea, it's just pure KR, any syntax, any semantics, but we probably shouldn't proceed with any discussion of any particular logic without the descriptions of these things available for reference
09.07.18 01:38:52*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
09.07.18 01:38:58*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
09.07.18 01:39:07<logicmoo> sorry keyboard was stuck
09.07.18 01:39:12<logicmoo> [22:22] <stoopkid> dmiles: so yea, it's just pure KR, any syntax, any semantics, but we probably shouldn't proceed with any discussion of any particular logic without the descriptions of these things available for reference
                 <logicmoo> -
09.07.18 01:39:33<logicmoo> though back in afew minutes
09.07.18 01:40:07<logicmoo> reboots take a while to get all the manuallly started servrices
09.07.18 01:43:23<HMCa> I just don't start em till I need em, easier that way imo
09.07.18 01:48:56<HMCa> openledger agrs gateway is back
09.07.18 01:51:18*** Nick regain: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) is now known as dmiles
09.07.18 01:52:34<stoopkid> doesn't appear that way on the openledger site
09.07.18 01:53:26<HMCa> says so on their news tho
09.07.18 01:53:52<HMCa> "OpenLedger DEX Gateways Re-enabled"
09.07.18 01:53:58<HMCa> it is even capitalized
09.07.18 01:54:32<dmiles> does anyone know whats going on with ETP Metaverse? its been up for 4 days now :(
09.07.18 01:55:30<HMCa> I dunno I ignore CA coins
09.07.18 01:55:50<dmiles> and every 24 hours somone is pumping tons of volume making my shortsell no fun
09.07.18 01:57:01<HMCa> maybe the CA
09.07.18 01:57:16<HMCa> XD
09.07.18 01:57:46<stoopkid> HMCa: interesting, thanks
09.07.18 01:58:44<dmiles> they could possibly be buying their own coins?
09.07.18 01:59:40<dmiles> i guess it makes sense to get the price way up
09.07.18 02:00:35<HMCa> dmiles: not been trading crypto before?
09.07.18 02:01:32<dmiles> i started three weeks ago.. made about 7k so far.. but made a fatal mistake i think
09.07.18 02:02:04<HMCa> welcome to the madness
09.07.18 02:02:19<dmiles> https://pasteboard.co/HtCbbb2.png
09.07.18 02:03:25<dmiles> bought on july 6 thinking it'd go down
09.07.18 02:04:03<HMCa> why'd you think that?
09.07.18 02:04:48<dmiles> it was startign to go downj to what looked to be that baseline of  .6x
09.07.18 02:05:04<dmiles> it was startign to go downj to what looked to be that baseline of  0.6xxxx
09.07.18 02:05:43<HMCa> nah it was .8
09.07.18 02:06:10<dmiles> ah well i got it at .75
09.07.18 02:06:43<HMCa> but that's .8, with bfx spreads....
09.07.18 02:06:44<dmiles> but now it wants to be 1.2
09.07.18 02:07:01<HMCa> imo it "wants" to be 0
09.07.18 02:07:03* HMCa shrugs
09.07.18 02:07:09<dmiles> well what i did was comparre it agaist BTC.. thinking BTC is the normalizer
09.07.18 02:07:22<HMCa> imo CA control cryptos is worth $0 at most.
09.07.18 02:07:38<HMCa> and probably less, in some cases
09.07.18 02:08:12<dmiles> by tuesday it'll show what it should be i think
09.07.18 02:08:32<dmiles> but yeah sadly it probly wont drop to below .8
09.07.18 02:09:11<HMCa> so now how much is your $7k profit worth?
09.07.18 02:10:33<dmiles> well still can start doing that again once i get out of ETP perhaps
09.07.18 02:11:02<HMCa> how much is that daily funding in usd denomination?
09.07.18 02:11:13<dmiles> right now 80$ day
09.07.18 02:11:39<HMCa> and what do you expect you can clear after slippage, if you close now?
09.07.18 02:11:46<dmiles> so i can go forever to not lose that 25k of corrent loss
09.07.18 02:12:00<dmiles> i'd lose 25k
09.07.18 02:12:38<HMCa> no no
09.07.18 02:12:43<dmiles> in 5 days i might only lose 20k
09.07.18 02:13:09<HMCa> i mean what do you lose from spread and slippage down the book if you tried to close out right now?
09.07.18 02:13:11<dmiles> oh supposely the that 25k is slippage built in
09.07.18 02:13:17<HMCa> er, no
09.07.18 02:13:50<HMCa> it only counts spread on bfx
09.07.18 02:14:07<dmiles> oh.. i thioght it simulates the buy orders
09.07.18 02:14:10<HMCa> in anycase it cant count slippage, you can only cystal ball that
09.07.18 02:14:40<dmiles> oops sinulare the sell orders
09.07.18 02:15:12<dmiles> but explain slippage
09.07.18 02:15:16<HMCa> anyway, maybe play with a smaller bankroll next time
09.07.18 02:15:56<HMCa> at least until you understand how all of the costs apply, anyway
09.07.18 02:16:37<HMCa> slippage is an estimate of how the market will move against you as you close out
09.07.18 02:17:14<dmiles> that is a sellers in this case will jack up their prices sinc ei am doing a market buy?
09.07.18 02:17:51<HMCa> ehhh heh
09.07.18 02:18:02<HMCa> i can't tell you how that book will tend to display its' sensitivities
09.07.18 02:18:40<HMCa> it is not a book i would trade on, so i know nothing of its' particular participant dynamics
09.07.18 02:19:02<dmiles> closeiing short sale is a mass market buy right? so i end up taking all the sell offeres no mater the price?
09.07.18 02:20:09<HMCa> and in this case it is 3 books, that will react to each-other, heh
09.07.18 02:20:37<HMCa> (your 3 orders will not close out at the same moment)
09.07.18 02:20:47<HMCa> (or even in direct sequence)
09.07.18 02:21:28<dmiles> right i'd just close one at a time hopefull they dont notice eash other
09.07.18 02:21:42<HMCa> lol
09.07.18 02:22:04<HMCa> well, let me know how it turns out
09.07.18 02:22:17<dmiles> well one a day for isntance if i was willing to take the current losses
09.07.18 02:22:33<dmiles> i dont think i am big enough to make a real effect thogh
09.07.18 02:22:45<HMCa> every trade has a real effect
09.07.18 02:22:52<HMCa> real and actual!
09.07.18 02:23:08<HMCa> gamma is a cruel mistress
09.07.18 02:23:47<dmiles> my new role is i might if i feel like making a radom bet.. is bet for and agaisnt using two currencies
09.07.18 02:23:48<HMCa> next time, try just a couple hundo bank or something... ;-)
09.07.18 02:24:26<HMCa> I wouldn't worry about botting for awhile, if I were you, heh...
09.07.18 02:24:50<HMCa> learn market microstructures first
09.07.18 02:25:09<HMCa> learn basic forward futures portfolio management first
09.07.18 02:25:25<HMCa> learn the straddle structures first
09.07.18 02:25:33<HMCa> learn stop structures first
09.07.18 02:25:49<HMCa> *then* start thinking about bots
09.07.18 02:26:55<HMCa> and start with a vot framework with a component to account for each of these aspects. :-|
09.07.18 02:26:57<HMCa> *bot
09.07.18 02:27:46<dmiles> yeha i started to work on a bitflyer bot.. no fees there
09.07.18 02:30:55<HMCa> don't worry about fees... if your bot can't at least overcomes fees then you're doomed regardless
09.07.18 02:31:01<dmiles> spefically a bot so it can manage 20-30 single 0.1btc trades making sure profits on every one
09.07.18 02:31:09<HMCa> the real "first hurdle" is not fees but spreads and depth
09.07.18 02:31:50<HMCa> there are no sure profits..
09.07.18 02:32:09<HMCa> only highly probable profits.
09.07.18 02:32:56<HMCa> and if you aren't entirely sure that your profit opportunity is highly probable... then you're probably in for a surprise
09.07.18 02:33:11<dmiles> problem i had is i wanted to get in on a rise i'd end up buying sometoihgn jsut to get hte rise but that my been below the last sale price (lke i mihgt miss tha ti am shorting myself 10$)
09.07.18 02:33:25<HMCa> here's a question...
09.07.18 02:33:48<HMCa> what percentage of the total swap liquidity pool on bfx was your positions?
09.07.18 02:34:06<HMCa> how much of the leverage market did your short corner?
09.07.18 02:34:30<dmiles> i had 60k.. i put in i dunno 45k
09.07.18 02:35:02<dmiles> now that 45k would sell off at 22k
09.07.18 02:35:07<HMCa> and how much total open interest was lent at the time?
09.07.18 02:35:42<dmiles> oh its like .09 aday at the time.. vbut now i think its up to .75
09.07.18 02:36:06<HMCa> no no
09.07.18 02:36:29<HMCa> I mean... add up all of the open short swaps
09.07.18 02:37:08<dmiles> right that is about 25k
09.07.18 02:37:35<dmiles> from ~45k
                 <HMCa> ooof
09.07.18 02:37:38<HMCa> not just yours
09.07.18 02:37:42<HMCa> *everyones*
09.07.18 02:37:47<HMCa> at the time you o[ened
09.07.18 02:37:52* HMCa grumbles
09.07.18 02:37:57* HMCa opens up a chart
09.07.18 02:38:13<dmiles> ok lets say i bought 50k at the time
09.07.18 02:38:20<HMCa> ok, etpusdshorts on jul 6
09.07.18 02:38:50<HMCa> here i'll make you a picture, sec
09.07.18 02:39:22<dmiles> i actualyl gacvew you some missinformation.. i opened it up on the 5th
09.07.18 02:40:09<dmiles> are you looking at the interest rate at the time?
09.07.18 02:43:31<dmiles> it looks like so many people wanted to shor that the interest rate jacked up to 0.75
09.07.18 02:43:49<dmiles> (at least now the last 2-3 days)
09.07.18 02:44:16<HMCa> no, the "open interest" - amount out on loan, etpusdshorts closed the 4th at $170696 and closed the 5th at $337743 meaning at 50k you were between 50k/(170696+50k)=~23% and 50k/(337743)=~15% of the whole usd book
09.07.18 02:44:40<HMCa> that is an insane move on the market. :-|
09.07.18 02:44:57<HMCa> you bit into those thin books with a lot of teeth
09.07.18 02:45:12<HMCa> no wonder everyone moved against you!
09.07.18 02:45:32<dmiles> ah!
09.07.18 02:46:03<HMCa> nibble, don't chomp.
09.07.18 02:46:12<HMCa> pigs eat, hogs get the slaughter.
09.07.18 02:47:02<dmiles> i saw volume of 2m in trade volume so i thought it was going to just be a big book in general
09.07.18 02:47:10<dmiles> (the USD one)
09.07.18 02:48:22<HMCa> maybe stay away from leverage, for now, too, heh...
09.07.18 02:50:08<HMCa> leverage makes everything louder!
09.07.18 02:50:10<HMCa> heh
09.07.18 02:50:27<dmiles> jsut while we been taking i am onky 20k in the hole and not 25k :O
09.07.18 02:51:01<dmiles> but an hour from now i am sure itll change
09.07.18 02:51:55<HMCa> finally...
09.07.18 02:52:00<HMCa> why no stop loss?
09.07.18 02:52:16<dmiles> see that spike just now?!
09.07.18 02:52:37<dmiles> EPT/BTC
09.07.18 02:53:18<HMCa> *etp
09.07.18 02:53:28<dmiles> thx
09.07.18 02:55:23<HMCa> basic stop loss is how you make these surprises just not matter to you
09.07.18 02:56:07<HMCa> you should've been stopped out long before it got to dollar parity
09.07.18 02:56:14<dmiles> you mean where it would have auto-closes for me?
09.07.18 02:56:36<HMCa> stop loss at 1 month high would've still been at $0.90
09.07.18 02:56:49<HMCa> at thats a wiiiiiiiiide stop
09.07.18 02:56:52<HMCa> *and
09.07.18 02:57:58<HMCa> yes, before you go into a trade you should know when you will declare yourself to have been wrong. :-)
09.07.18 02:59:21<dmiles> that is intertesting you really say this was my trades that spiked it?
09.07.18 02:59:55<HMCa> is etp traded anywhere but bitfinex, btw?
09.07.18 03:00:33<dmiles> its on coinbase, hitbtc
09.07.18 03:00:37<HMCa> ok, a little
09.07.18 03:00:47<HMCa> it is not on coinbase afaict?
09.07.18 03:01:08<dmiles> oops nope.. binance
09.07.18 03:01:15<HMCa> hitbtc etp.usdt is $20k volume today, so does that even count?
09.07.18 03:01:16<dmiles> (not coinbase)
09.07.18 03:01:32<HMCa> not on binance either?
09.07.18 03:01:34<HMCa> anyway
09.07.18 03:01:53<HMCa> the vast majority of thr market is on bitfinex
09.07.18 03:02:33<HMCa> or topbtc whic appears to proxy bfx for swaptions
09.07.18 03:02:36<dmiles> i am playuing against the house!
09.07.18 03:03:55<dmiles> see https://coincodex.com/crypto/metaverse/exchanges/
09.07.18 03:04:48<dmiles> 84% bfx
09.07.18 03:05:24<dmiles> canyt you go in there and beat it up for me?
09.07.18 03:05:36<HMCa> and i'm not sure those other books have levers
                 <HMCa> so
09.07.18 03:06:12<HMCa> you were trying to be ~%10+% of 100% of the options market for that asset
09.07.18 03:06:50<HMCa> you got gobbled up by whales wgo spotted a big fish...... shouldn't be surprising.
09.07.18 03:08:14<HMCa> big fish that splash around and don't know how to hide in schools of small fish... get hunted.  is pretty natural.
09.07.18 03:08:49<dmiles> hrrm .. so they are driving up the price for a couple few days?
09.07.18 03:09:20<dmiles> i supose they can see hwnen they loaned me the margins
09.07.18 03:09:44<dmiles> so they know my price?
09.07.18 03:10:14<HMCa> yes, that is just the ironic insult-to-injury, the same whales are probably the one collecting the fee on the loan ;-)
09.07.18 03:11:41<dmiles> hehe .. what i really thought (hoped) is that i be using the counter currency to buy.. i think i should have jsut not used margin
09.07.18 03:12:04<dmiles> but i dont have enough to start closing it out
09.07.18 03:12:19<dmiles> i mena if i was closing it out.. wornt i just be taking loss?
09.07.18 03:12:35<dmiles> (i mean closing each loan)
09.07.18 03:12:45<HMCa> yes, srsly, if you ignore everything else that i've said here plz at least take away these two points:  Use stop losses always.  Don't use leverage until you understand *every* aspect of what is going on here. ;-)
09.07.18 03:13:10<HMCa> well, now you have a decision to make
09.07.18 03:13:54<HMCa> close now, take the loss... close slowly and hope to snipe/scalp a better cost average for less loss, or gamble and see when the exchange force-liquidates you.
09.07.18 03:14:16<dmiles> i am safe from forced liquidation at least
09.07.18 03:14:26<HMCa> you *can* end up with a negative balance on bfx. :-|
09.07.18 03:14:46<HMCa> you are *not* safe from forced liquidation...
09.07.18 03:17:16<HMCa> you might wake up to a spot price of 2.6 and a negative balance *tomorrow*... you don't know. :-P
09.07.18 03:18:00<dmiles> thats true
09.07.18 03:18:05<HMCa> in jan this asset did $2.85 to $5.49 in 24hr
09.07.18 03:18:22<HMCa> well, just over
09.07.18 03:18:46<HMCa> sooooo, yah
09.07.18 03:19:11<HMCa> there's a very real risk that you could get javelin thrown here
09.07.18 03:19:43<HMCa> and then you have <$0 left.
09.07.18 03:22:18<dmiles> it looks like a monday morning spiker currency to
09.07.18 03:22:24<dmiles> where it gets a money bump
09.07.18 03:22:29<dmiles> where it gets a monday bump
09.07.18 03:23:45<dmiles> like at 9am est
09.07.18 03:24:23<HMCa> welll, "seasonals" are another conversation entirely
09.07.18 03:24:38<HMCa> esp wrt crypto, which has weeeeiiiird seasonal effect cycles
09.07.18 03:26:02<HMCa> btw, imo if it were me i'd close now and take the loss, chalk it as expensive tuition.
09.07.18 03:27:08<HMCa> (despite my firm belief that one day this coin will likely be $0, you can't afford to wait for that... hehe)
09.07.18 03:30:00<HMCa> i'd call it "manually enacting the stoploss that i forgot to set, way after it should've triggered...)
09.07.18 03:30:56<HMCa> imo: don't chase losses, don't throw good money after bad, and *never* gamble when the odds aren't in your favor.
09.07.18 03:47:08<dmiles> if i owned ETP myself .. would i no longer have to pay for funding hte differnce that i own?
09.07.18 03:48:10<dmiles> i mean just as an exmaple i own 200 ETP and i am pay .75% for 100ETP loan
09.07.18 03:48:30<dmiles> i cant jsut put it in my funding?
09.07.18 03:49:27<dmiles> if i load it out i get the interest but bfx takes 18% of that
09.07.18 03:49:49<HMCa> you cannot provide yourself margin at all
09.07.18 03:50:03<HMCa> if you own etp you can just sell them
09.07.18 03:50:58<HMCa> you can also loan them for sale by others, and then yes you would collect the daily interest
09.07.18 04:04:51*** Quit: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-pipbqakbdbfapdwx) left #AutoNomic: Ping timeout: 240 seconds
09.07.18 04:31:31*** Join: lexxus[m] (lexxusmatr@gateway/shell/matrix.org/x-prrnmjmcmnkoshch, (unauthenticated): @lexxus:matrix.org)
09.07.18 08:17:00*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
09.07.18 10:57:42<stoopkid> koo5[m]: so wrt my bootstrapping issues.. i'm thinking we can do something of a middle-ground
09.07.18 10:59:02<stoopkid> basically we just need to be able to control the semantics, but it's hard to achieve that in a modern fully-featured general purpose prog-lang that would be convenient to actually code in, C++ etc..
09.07.18 11:01:22<stoopkid> but we could prototype in C++ and then go through and provide a listing of the computational primitives we're relying on and assert our own intended semantics
09.07.18 11:44:05*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
09.07.18 11:44:45*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
09.07.18 13:08:35*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
09.07.18 13:15:06*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
09.07.18 13:18:18<koo5[m]> mkay
09.07.18 13:18:35<koo5[m]> Its not like piling definitions upon definitions will help correctness
09.07.18 13:18:56<koo5[m]> But we could rewite in idris for example
09.07.18 13:18:59<koo5[m]> Shrug
09.07.18 13:20:56<koo5[m]> Sorry im a day behind with the chatlog
09.07.18 15:10:06<editable-koo>what is "computational primitives"?
09.07.18 15:55:08<stoopkid> editable-koo: primitive operations and data-types used in our code
09.07.18 16:19:30*** Join: koom (~koom@37-48-35-202.tmcz.cz, (unauthenticated): realname)
09.07.18 16:23:51<stoopkid> so if we do it in idris, there's two main approaches, afaict
09.07.18 16:24:45<stoopkid> 1) rely on the effects system, built-in data-types and the ability to use an inflooping main-loop, i.e. basically use it as if it was C++ with a better type-system
09.07.18 16:25:25<stoopkid> 2) formalize a model of computation within idris and then write the program in that and then look at doing compilation from this model of computation
09.07.18 16:32:58<editable-koo>im fine with both approaches, if each is done at its right time
09.07.18 16:33:09<editable-koo>whats "primitive operations"?
09.07.18 16:35:22<stoopkid> for example if we were in untyped lambda calculus the only primitive data-type would be lambdas and the only primitive operation would be beta-reductions of applications; in C++ we have bools, ints, size_t's, ifs, fors, whiles, and other things like even std::vector if we're just using it as a primitive and not considering it as constructed from other primitives
09.07.18 16:36:11<stoopkid> the basic building blocks that don't have to be built from other blocks themselves
09.07.18 16:36:52<editable-koo>i dont think c++ semantics are expressed in terms of some operations
09.07.18 16:41:42<stoopkid> well, maybe not, the point would be to kind of escape being bound to c++'s semantics since we don't consider ourselves to have full access to them
09.07.18 16:44:59<editable-koo>okay
09.07.18 17:02:37<stoopkid> i'm open to alternatives.. right now i'm mainly having trouble figuring out how to separate each possibility into their respective "right times"
09.07.18 17:04:03<editable-koo>well, first we have to have something working
09.07.18 17:04:13<editable-koo>thats it
09.07.18 17:10:07<stoopkid> well, considering that there seems to be an issue with installing idris on ubuntu 16.04 right now, i'm between C++ and agda-via-approach-#1
09.07.18 17:10:33<stoopkid> would you prefer something else or does one of these work for you
09.07.18 17:11:40<stoopkid> out of these two options i would probably prefer c++ because all the non-total-functional stuff is "weird" in agda
09.07.18 17:12:15<editable-koo>i'd also consider python or idris, but i dont care what we start with
09.07.18 17:12:50<stoopkid> idris i would prefer over agda for this purpose, but i'd need to be able to install it first
09.07.18 17:13:08<editable-koo>https://www.haskell.org/platform/#linux-generic
09.07.18 17:13:56<editable-koo>start with that
09.07.18 17:15:02<stoopkid> alright so idris then (assuming this gives me a method to install it)?
09.07.18 17:19:48<editable-koo>its how i got it on the vps
09.07.18 17:20:00<editable-koo>this, then just cabal install
09.07.18 17:20:34<editable-koo>alright, im still at chapter eight though
09.07.18 17:21:18<stoopkid> still failing
09.07.18 17:21:35<stoopkid> "this" just means "apt-get install haskell-platform"?
09.07.18 17:21:36<editable-koo>remove old ghc?
09.07.18 17:21:40<stoopkid> ah
09.07.18 17:21:49<editable-koo>no
09.07.18 17:25:27<stoopkid> not sure
09.07.18 17:25:57<editable-koo>remove all apt-installed haskell stuff and install this from the website
09.07.18 17:27:50<stoopkid> "apt-get remove ghc cabal-install haskell-platform"? idk what other haskell stuff needs to be reinstalled
09.07.18 17:27:59<editable-koo>sounds good
09.07.18 17:29:06<stoopkid> then "apt-get install haskell-platform" or some other mechanism to install it?
09.07.18 17:29:52<editable-koo>https://haskell.org/platform/download/8.4.3/haskell-platform-8.4.3-unknown-posix--core-x86_64.tar.gz
09.07.18 17:30:13<editable-koo> Install by running:
                 <editable-koo>$ tar xf ...downloaded archive...
09.07.18 17:30:15<editable-koo>$ sudo ./install-haskell-platform.sh
09.07.18 17:48:31<stoopkid> can't tell if it's hanging or just taking a long time
09.07.18 17:53:31<koom> probably
09.07.18 17:53:52<stoopkid> probably just taking a long time?
09.07.18 17:54:13<koom> probably one of the two options
09.07.18 17:54:25<koom> but yea it takes some time
09.07.18 17:56:40<stoopkid> hanging, but successfully installed
09.07.18 17:57:07<koom> thats curious
09.07.18 17:57:27<stoopkid> actually same thing happened when i was installing agda as well
09.07.18 17:58:22<stoopkid> maybe it only partially works :)
09.07.18 17:59:18<koom> is it a notebook or desktop?
09.07.18 17:59:35<stoopkid> notebook
09.07.18 18:00:02<koom> leave it for friday:)
09.07.18 18:01:19<stoopkid> alright i have to figure out how to do command-line & file I/O
09.07.18 18:02:11<koom> the book's in the private repo
09.07.18 18:04:06<koom> i have to go sleep, we're leaving for vienna tomorrow morning
09.07.18 18:04:37<stoopkid> alright
09.07.18 18:04:47<stoopkid> is your gf coming as well?
09.07.18 18:05:01<koom> only to vienna
09.07.18 18:05:30<stoopkid> gotcha, alright well have a safe trip
09.07.18 18:06:32<koom> yeah thanks
09.07.18 18:06:50<koom> ill be in contact and ill try to read a bit more idris
09.07.18 18:14:05*** Quit: koom (~koom@37-48-35-202.tmcz.cz) left #AutoNomic: Ping timeout: 260 seconds
09.07.18 18:20:49<stoopkid> `module Main
                 <stoopkid> main : IO ()
                 <stoopkid> main = putStrLn "Hello world"`
09.07.18 18:21:00<stoopkid> $ idris hello.idr -o hello
09.07.18 18:21:18<stoopkid> "When checking an application of function run__IO:
                 <stoopkid>         No such variable Main.main
                 <stoopkid> "
09.07.18 18:25:02<stoopkid> well, that's a non-starter
09.07.18 18:30:46<stoopkid> hrm, seems to be a matter of the directory that my source files are in..
09.07.18 18:33:49<stoopkid> *Main> :t main
                 <stoopkid> main : IO ()
                 <stoopkid> *Main> :c hello
                 <stoopkid> /usr/bin/ld: cannot find -lidris_rts
09.07.18 18:38:01<daemoz> that's weird
09.07.18 18:41:05<daemoz> I'd guess that means there was something wrong with the installation
09.07.18 18:44:14<stoopkid> no idea
09.07.18 18:46:09<stoopkid> so i'm thinking i'm back to "not idris"
09.07.18 18:56:35<daemoz> Well possibly just bench it for now. That or use it from a machine that it runs on
09.07.18 19:17:04<stoopkid> i think i solved the problem i'm not exactly sure what caused it though
09.07.18 19:17:40<stoopkid> i created a new 'idris' user, but all the files and directories were under root ownership
09.07.18 19:18:07<stoopkid> i changed them to be owned by 'idris' and then tried reinstalling from scratch and this time it didn't hang and now the example works
09.07.18 19:49:19<daemoz> interseting
09.07.18 19:49:26<daemoz> wonder why that worked. but cool!
09.07.18 19:50:17<stoopkid> no idea, also might have nothing to do with that... i'm only vaguely aware of what's happening with the installation process
09.07.18 19:51:56<daemoz> likewise honestly
09.07.18 20:11:13<HMCa> i dunno why you guys always all have such problems with haskell envs, I never seem to encounter any of that stuff on any platform... :-\
09.07.18 20:12:16<stoopkid> idk either :)
09.07.18 20:21:50<daemoz> Well I don't really use haskell so that could be why for me, they seem messy to me though.
09.07.18 20:23:23<stoopkid> anybody know why this fails? https://pastebin.com/0v2W9Q8d
09.07.18 20:59:41<stoopkid> heh, forgot to include one of the functions but it's the same error either way: https://pastebin.com/w5f6d1eJ
09.07.18 21:42:50<stoopkid> according to the signatures on DepEff/SimpleEff/TransEff.Eff, the only option it could be is SimpleEff.Eff
09.07.18 21:43:05<stoopkid> and i'm pulling this right from the tutorial so not sure why it would be failing there
09.07.18 21:56:16*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
09.07.18 21:58:34<nilli> hi
09.07.18 21:59:03<stoopkid> hey nilli
09.07.18 21:59:10<stoopkid> how goes
09.07.18 21:59:52<nilli> I send you on whatsapp pics of the cards im making
09.07.18 22:00:39<nilli> going through all the pages we worked on together
09.07.18 22:00:49<stoopkid> oh woops didn't see that
09.07.18 22:00:56* stoopkid turns on notifications from whatsapp
09.07.18 22:01:15<nilli> check it out. I have a question regarding a term
09.07.18 22:02:28<stoopkid> nice looks good
09.07.18 22:04:08<nilli> I keep relating to the lambda, ,apply, first ,second left ,right case, as either intorduction function or elimination fuction, but i think the  word function is wrong and need to be deduction rules  right?
09.07.18 22:04:28<stoopkid> woops just noticed that you called me earlier too; sorry been buried in some C++ and idris stuff all day
09.07.18 22:05:08<stoopkid> right introduction/elimination rules rather than introduction/elimination functions
09.07.18 22:09:15<nilli> no there are introduction and elimination rules that are the rule itself but then the deduction itself is kind of a function represented by the line and we have a name to it when we apply it
09.07.18 22:10:57<nilli> look at the cards closely
09.07.18 22:12:18<stoopkid> that's correct
09.07.18 22:16:03<nilli> the pink highlight is all the introduction rules for the operation  and the green highlight is all the elimination rules of the operation each card color is an operation
09.07.18 22:18:49<nilli> so for example what the correct name for the _------ pair ,(introduction deduction, or introduction function) ----first , ------second (elimination deduction or elimination function)
09.07.18 22:19:43*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 260 seconds
09.07.18 22:20:03<stoopkid> when looking at the collapsed proof-objects we generally call these "constructors"
09.07.18 22:20:41<stoopkid> i.e. "pair" constructs objects/proofs of type A ^ B
09.07.18 22:22:44<stoopkid> well, constructors for the intro rules, destructors for the elimination rules
09.07.18 22:31:44*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
09.07.18 23:38:36<nilli> ok thanks g
10.07.18 00:27:12*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
10.07.18 02:43:00*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 244 seconds
10.07.18 03:24:32<HMCa> stoopkid: what tutorial are you looking at?
10.07.18 03:24:51<HMCa> also why not just uae the simple IO monad instead of effects directly?
10.07.18 03:24:55<HMCa> *use
10.07.18 03:44:24<HMCa> anyway, you seem to be trying to use an older tutorial, in any case, you should work from http://docs.idris-lang.org/en/latest/effects/depeff.html
10.07.18 03:45:20<HMCa> there has not been a SimpleEff for file effects since before the effects lib was split up (like 3 years ago) heh
10.07.18 03:46:08<HMCa> FILE_IO isn't even defined anywhere anymore, and stuff
10.07.18 03:47:00<HMCa> (you're kinda expected to provide your needed handle types in the new interface)
10.07.18 03:48:20<HMCa> long story short, you currently seem to be on a doomed path working from some pre-1.x version docs or something
10.07.18 03:54:18<stoopkid> its interesting that you act like this is supposed to be common knowledge when the page you link is exactly what ive been working from and includes all the things you say are deprecated
10.07.18 03:55:34<stoopkid> wrt your question about using simple monads, idk maybe there should’ve been a tutorial for that
10.07.18 03:57:08<stoopkid> anyway, heya
10.07.18 03:57:47<HMCa> hrmm, that page defines FILE_IO... you do not... for example
10.07.18 03:58:31<HMCa> anyway just to sanity check, let me try here that example
10.07.18 04:03:55<stoopkid> that page seems to indicate that its defined in Effect.File
10.07.18 04:04:37<HMCa> ok, we're both wrong
10.07.18 04:06:05<HMCa> 1.3 appears to have changed the file effects interface a little bit again
10.07.18 04:06:36<HMCa> so all of the docs are out of date now, just some more than others
10.07.18 04:07:10<stoopkid> alright i guess im officially back to “not idris”
10.07.18 04:09:14<HMCa> well, the change they made wasn't huge
10.07.18 04:11:14<stoopkid> yea such a small change that no file io can be done from following their documentation on file io
10.07.18 04:13:37<HMCa> find someone to update the docs?
10.07.18 04:13:58<stoopkid> ill just find a different lang for implementation
10.07.18 04:15:31<HMCa> tell edwin to tell his devs to do better? XD
10.07.18 04:16:55<HMCa> so back to c/c++?
10.07.18 04:17:07<HMCa> or subleq? :-)
10.07.18 04:19:22<stoopkid> c++ i guess
10.07.18 04:19:49<stoopkid> we don’t have a lot of great options and i dont think we have any perfect options
10.07.18 04:23:02<HMCa> there's a lot of reasons, imo, that a reference core shouldn't be built in idris... heh
10.07.18 04:24:07<stoopkid> its just for a prototype at this stage (but that actually just ends up being all the more reason not to use idris yet)
10.07.18 04:27:18<stoopkid> main reason to use idris over agda is the need to break out of pure total functional programming, but if we’re doing that and not intending to build the verifications into the code we might as well just use c++ as all these impure features are standard  and basic rather than obscure, advanced and in a state of flux
10.07.18 04:30:57<HMCa> ironic that at the end of the day idris/agda also just call a c function in the end anyway ;-)
10.07.18 05:24:46*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
10.07.18 05:32:16<daemoz> stoopkid: I think it makes sense to use c++ for the prototype too
10.07.18 08:48:27*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
10.07.18 09:03:04*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
10.07.18 12:31:29*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca) left #AutoNomic: Ping timeout: 248 seconds
10.07.18 12:32:59*** Join: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca, (unauthenticated): deadhand)
10.07.18 13:08:30* editable-koo is going over chapter 8 from the beginning again, because he failed all the tests
10.07.18 13:08:40* editable-koo agrees with c++
10.07.18 13:08:56<editable-koo>but i think i would agree even more with python
10.07.18 13:10:36<editable-koo>or even just with pseudocode for now
10.07.18 13:11:15<editable-koo>anyway, ill wait for you to begin something, then i can ask questions
10.07.18 13:28:10*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
10.07.18 13:38:10<nilli> There is a missing link in the logic of set theory. now it is maybe (and very likely) a missing link since is missing to me ( since I am missing information) but is definitely strongly  missing
10.07.18 13:38:59<nilli> so let me try to express my concerns :)
10.07.18 13:44:47<nilli> im basically missing a phrase which indicate order. that of x then x . that first "order operation" indicate the first "x" to be "A" and the second "x" to be "B"
10.07.18 13:45:57<nilli> or in other word a set at the most fundamental level of it is indicating the order of the object in it
10.07.18 13:49:36<HMCa> nilli: "pure" set theory deals only with "strict sets"... which are unordered
10.07.18 13:50:54<HMCa> there are "ordered sets" and "partially ordered sets" (aka "posets") which are sets with an additional relation on elements defining their ordinality
10.07.18 13:50:57<HMCa> but
10.07.18 13:50:59<nilli> hi hmc. that is the porblem then. there is not such thing as no order.
10.07.18 13:51:11<HMCa> when we say "set" we generally mean that in the strict sense
10.07.18 13:52:20<nilli> let me try to explain myself better
10.07.18 13:55:42<nilli> if you say that a set have meaning. which means that the objects are defined, then the fundamental definition must arose within the set, thus order (value  as 1,2, ext or meaning such as "subject" to the first object and "object "to the second )
10.07.18 13:57:14<HMCa> sets can have meaning without ordinality (all strict sets do)... only ordered sets and posets require an ordinality.  For example:
10.07.18 13:57:43<HMCa> We can refer to "the set of all currently living people" - this is unordered, but meaningful
10.07.18 13:57:47<HMCa> or
10.07.18 13:59:19<HMCa> we can refer to "the set of all living people, ordered by the moment of their first breath" - this is a *different* set with a distinct meaning, it is ordered and loses/alters its meaning if that order is removed/changed
10.07.18 13:59:43<HMCa> so the sets
10.07.18 14:00:31<HMCa> "{a,b,c}" and "{b,c,a}" are equivalent as strict sets... but would not be equivalent as ordered sets or posets
10.07.18 14:04:09<nilli> the set of "all living people" is hiding an object of "no people" or  " dead people" . without it you will not have a meaning to "living" and "all"
10.07.18 14:05:09<HMCa> er, it isn't "hiding" anything... if we were to include dead people that would define a *different* set, for example
10.07.18 14:05:30<nilli> in other word under the assumption of no people, or under the assumption of dead people
10.07.18 14:05:35<HMCa> the set of all currently living people is a subset of the set of all people who have ever lived (both are unordered)
10.07.18 14:06:48<HMCa> and either set could only be empty in a universe in which no people ever occur... (which we can probably safely assume is not our universe, because here we are... but definitionally it is already accounted for anyway)
10.07.18 14:07:09<HMCa> you don't need order for 0 cardinality sets to still be well defined, iow
10.07.18 14:08:13<nilli> basically a "set" is an operation. call it predicate ( I actualy would love to start calling it a transaction :) )
10.07.18 14:11:02<HMCa> well, we generally use "operation" to mean a relation over two or more sets... and "transaction" to mean something else entirely (an operation with multiple distinct participants providing input, aka a "game"...) but... to equate sets and predicates is fine, at least
10.07.18 14:11:25<HMCa> every predicate defines a set, every set implies a predicate of set membership.
10.07.18 14:13:10<HMCa> (iow "operation" and "transaction" place more constraints on the sort of predicate set(s) we refer to, but "predicate" defibitiinally has the same constraints as "set")
10.07.18 14:13:25<HMCa> *definitionally
10.07.18 14:13:44<nilli> * I inseret the "transaction" for later use :)
10.07.18 14:14:27<HMCa> however it is probably important to note here that neither of these words imply a constraint of ordinality, on their own
10.07.18 14:22:31<HMCa> not sure if that clarifies anything or just adds further confusion, heh
10.07.18 14:23:02<nilli> but basically I mean that a set (0,1) is a predicate 0,1 . that ( ) which we conveniently use as restriction from the rest of the universe is in fact a resoult of a connection in the universe of these 2 objects.
10.07.18 14:24:30<HMCa> yes, sure, but still that does not imply an ordinality
10.07.18 14:25:25<HMCa> also we use {} instead of () for sets, generally... just a notational point
10.07.18 14:26:03<HMCa> we usually keep () for lists and precedences
10.07.18 14:27:52<HMCa> (as a side note - lists are always ordered but are not sets)
10.07.18 14:28:45<HMCa> (some specific lists may be able to be considered as representing sets/posets, but not generally)
10.07.18 14:30:21<HMCa> I'll be semi-afk soon, btw, so might become slower to respond (though I'll still be around/available)
10.07.18 14:30:25<nilli> ok about notation
10.07.18 14:31:28<nilli> basically what Im saying here is that set theory requires a meaning or value in terms of size or order (need a blockchain of transaction of meaning or values which create order) to be used as a language
10.07.18 14:31:47<nilli> but lets start with the meaning of "set"
10.07.18 14:31:56<HMCa> nope, that simply isn't true. :-)
10.07.18 14:32:02<stoopkid> https://en.wikipedia.org/wiki/Set_(mathematics)
10.07.18 14:33:08<nilli>   In mathematics, a set is a collection of distinct objects,
10.07.18 14:33:11<nilli> yes that
10.07.18 14:33:27<nilli> what makes the objects distinct?
10.07.18 14:33:34<HMCa> distinction does not imply order, though order does imply distinction.
10.07.18 14:34:07<nilli> ok let me make myself really clear
10.07.18 14:34:22<HMCa> (also, another notational point, we shoukd be saying "ordinality" here instead of "order" so as to be unambiguous)
10.07.18 14:34:24<nilli> order is the simplest form of how one thing relate to the other
10.07.18 14:34:38<stoopkid> https://en.wikipedia.org/wiki/Equality_(mathematics)#Logical_formulations
10.07.18 14:34:48<stoopkid> not the simplest
10.07.18 14:34:51<HMCa> no!  not even nearly simplest
10.07.18 14:35:14<stoopkid> https://en.wikipedia.org/wiki/Partially_ordered_set#Formal_definition
10.07.18 14:35:21<HMCa> reflexive identity is simplest!  (and we can prove that in cubicaltt too, lol)
10.07.18 14:35:23<stoopkid> drop any of those axioms and you've got something simpler
10.07.18 14:35:44<stoopkid> HMCa: good to know
10.07.18 14:36:03<nilli> symmetry... yes
10.07.18 14:36:04<HMCa> stoopkid: circle types are soooo much fun
10.07.18 14:37:14<nilli> but symmetry is very limited
10.07.18 14:37:41<nilli> order is hugely more  expressive
10.07.18 14:38:08<stoopkid> what does that have to do with the distinctness of objects in sets
10.07.18 14:38:26<stoopkid> (also reflexivity != symmetry)
10.07.18 14:39:34<HMCa> reflexive identity certainly has something to do with distinction, but symmetry and ordinality ceetainly do not.
10.07.18 14:39:44<HMCa> *certainly
10.07.18 14:40:45<HMCa> ordinality certainly does have something to do with posets though.
10.07.18 14:41:30<HMCa> (symmetry may or may not, depending on the ordinality defined for any given poset.)
10.07.18 14:42:29<HMCa> symmetry certainly does have something to do with any fully ordered sets, though!
10.07.18 14:47:54<nilli>  symmetry is important but is a a sub subject in the main subject  of order (you can visualize symmetry as order in opposite directions and identity as same distance in all direction)
10.07.18 14:48:39<nilli> *(however this makes order in one direction still the simplest form of relationship )
10.07.18 14:48:48<stoopkid> so far my interpretation is that you're confusing the notion of an "order" with the more general notion of a "relation"
10.07.18 14:49:06<stoopkid> (specifically binary relations)
10.07.18 14:49:29<nilli> no I dont, I actualy impose that definition
10.07.18 14:49:50<HMCa> well, for one thing - let's not drag metric spaces and distance into this... that implies a *lot* more constraint and complexity than even just ordinality
10.07.18 14:50:08<stoopkid> nilli: what definition are you imposing
10.07.18 14:50:38<nilli> order as a relation
10.07.18 14:50:59<stoopkid> so when you say an "order" you just mean "a relation"?
10.07.18 14:51:20<stoopkid> or when i say a "relation" you say "your relation must be an order"?
10.07.18 14:51:25<HMCa> (side note, hopefully not to confuse: topologically, I agree that identity implies a uniform 0 distance metric, however... heh)
10.07.18 14:51:59<nilli> the second one your basic form of relation is order
10.07.18 14:52:15<HMCa> ordinality is one specific kind of relation... all ordinalities are rrlations but not all relations are ordinalities
10.07.18 14:53:17<stoopkid> nilli: so are you saying that everything that fits the definition of https://en.wikipedia.org/wiki/Binary_relation actually fits your definition of order?
10.07.18 14:53:52<HMCa> this is pretty easiy to establish, for example: ordinalities are always transitive but not all relations are transitive.
10.07.18 14:54:30<stoopkid> or are you saying that your definition of relation only includes the relations that fit the definition of (some kind of) an "order"?
10.07.18 14:56:02<stoopkid> nilli: i would agree that binary relations can be seen as orders when you only look at two objects at a time, but in the standard definition of an order they're going to be looking at the properties of the relation *over the entire set*
10.07.18 14:56:43* HMCa going semi-afk now
10.07.18 14:57:47<stoopkid> HMCa: interesting stuff wrt the metrics/distance, i'll have to look into that one day (too much already on my plate at the moment)
10.07.18 14:58:41<nilli> my claim is that propositional logic is ok with relation be any relations but our logic that of MLTT (intuistic) must assume and order as the basic relationship to eventually provide a witness
10.07.18 14:59:28<nilli> it may sound that I mix a lot of things but I actually see how it all relates
10.07.18 15:00:27<nilli> and that was the missing link that I referred to at the beginning
10.07.18 15:00:31<stoopkid> nilli: can you define this order?
10.07.18 15:02:15<nilli> let me phrase it using the terms we use in a proof
10.07.18 15:02:43<stoopkid> start with: what is the set of objects over which your order-relation is defined?
10.07.18 15:12:08<nilli> give me an example of what you mean since I thought to start with : the introduction rule of A and B and add the missing link (but ill send you a pick since im not sure how to writ it.
10.07.18 15:13:07<stoopkid> you say "order" is the fundamental thing, i assumed you have in mind some collection of objects that are ordered by whatever this order
10.07.18 15:14:07<stoopkid> for example i assert that "less than or equal" is a total order on the set of natural numbers
10.07.18 15:14:56<stoopkid> so i had some set in mind, the natural numbers, and a binary relation on that set, "less than or equal", and i assert that the natural numbers are totally-ordered by the "less than or equal" relation
10.07.18 15:15:00<nilli> I say that to have the mathematical definition for defined object you need "order" or any other relations
10.07.18 15:16:11<nilli> ok lets say that our set is {0,1}
10.07.18 15:17:55<nilli> that means that 0 can be < then 1 or > then 1 right? it cant be that 0=1 since the we would have a set of {1,1}
10.07.18 15:18:13<nilli> then
10.07.18 15:19:10<stoopkid> i assume that "0 = 1" means that 0 and 1 are the same member of the {0,1}
10.07.18 15:19:27<stoopkid> but it's not exactly the case that this "can't be"
10.07.18 15:20:13<stoopkid> it's just that whenever you have "0 = 1", they are actually the same member of the set, so if 0=1 then {0,1}={1,0}={0,0}={1,1}={1}={0}
10.07.18 15:20:49<stoopkid> on the other hand, idk what "<" and ">" are supposed to represent, aside from "some arbitrary binary relations on {0,1}"
10.07.18 15:21:50<nilli> well that is when you assume 0 an 1 a variables and allow them to be the same
10.07.18 15:22:26<stoopkid> not variables exactly
10.07.18 15:22:42<stoopkid> constant symbols that happen to represent the same object
10.07.18 15:23:22<nilli> well I would say that even if 1=0 they differ in order if they are in a set
10.07.18 15:23:31<nilli> the set impose it
10.07.18 15:23:40<nilli> like a predicate
10.07.18 15:23:41<stoopkid> for example "Albany" and the "the capital of New York" aren't variables, but they refer to the same thing
10.07.18 15:24:59<stoopkid> "well I would say that even if 1=0 they differ in order if they are in a set" i would disagree
                 <nilli> a set means a predicate between nodes where the arrow start at the one and point to the other thus mark the order
10.07.18 15:25:46<stoopkid> not by any definition of "set" that i've ever used
10.07.18 15:26:48<stoopkid> it's fine if you use alternative definitions but we have to see those definitions
10.07.18 15:27:35<stoopkid> and agree that results that use your alternative definitions don't necessarily say anything about the concepts defined by the standard definitions
10.07.18 15:29:25<stoopkid> now, whatever extra structure you might provide to sets, i'll still probably disagree with the statement "a set means a predicate between nodes"
10.07.18 15:30:26<stoopkid> because sets correspond to unary / 1-argument predicates, and for your predicate to be "between nodes" it must be at least a binary/ 2-argument predicate
10.07.18 15:32:19<HMCa> what nilli defines sounds more like what we would call a "morphism" relation
10.07.18 15:33:13<HMCa> (which still does not imply ordinality, though)
10.07.18 15:36:49<stoopkid> the only interpretation i can come up with for what she's saying is that the only sets she considers to be worthy of consideration are those that have some kind of order defined on them (presumably at least a partial order; preorder's probably too weak and total order's probably too strong)
10.07.18 15:37:15<nilli> ok let me explain in three lines but let me write these three one after the other :)
10.07.18 15:37:47<stoopkid> alright (pastebin is also convenient for this stuff btw)
10.07.18 15:39:31<nilli> the operation is "and" and the introduction rule we have is under G assumptions A and B
10.07.18 15:45:02<nilli> constructor rule (the line I that above it we write the next phrase) under G assumptions A   under G assumptions B
10.07.18 15:54:39<nilli> that is what the introduction rule is but I say that in fact :  under G assumptions A and B (constructor ) under G, A assumptions A and B   (constructor )  under G, assumptions A    under G,A assumptions B
10.07.18 15:54:57<nilli> not very clear like that
10.07.18 15:55:50<HMCa> those 3 lines state nothing that has anything to do with sets or ordinalities, at all...?
10.07.18 15:55:53<HMCa> heh
10.07.18 15:57:14<stoopkid> nilli: not clear enough for me to interpret what you mean at least
10.07.18 15:58:11<stoopkid> send me a picture or something? heh
10.07.18 15:58:59<stoopkid> (or https://imgur.com/ it)
10.07.18 16:02:43<nilli> the set is the deduction that assume A to be A only if exist before b
10.07.18 16:03:10<nilli> sebding you a pic stoopkid
10.07.18 16:05:16<stoopkid> i've never used a "double-decker rule" before, not sure how to interpret this
10.07.18 16:07:31<nilli> I know !!! but I say that we have to do that  to get the right full image of the deductions we do
10.07.18 16:08:16<nilli> the extra decker represent that missing link
10.07.18 16:09:35<nilli> in which {A,B} are the set of objects
10.07.18 16:09:57<stoopkid> ok well, you'd have to explain how this rule is to be interpreted, in terms of how it can be used in constructing proof-trees
10.07.18 16:11:08<stoopkid> (and i'd think that in order to justify this double-decker rule you'd have to demonstrate that there is no rule in the standard form that carries the same meaning)
10.07.18 16:11:31<nilli> it put the triples of the semantic web in the bottom of my tree
10.07.18 16:11:56<stoopkid> meaning what
10.07.18 16:15:40<nilli> we need to see how it effect the curry Howard correspondent :)
10.07.18 16:16:55<stoopkid> i don't even know what "it" is yet, let alone how it affects anything else :P
10.07.18 16:17:42<nilli> I know, we are just making it. :)
10.07.18 16:18:43<nilli> anyway stoop are you coming to nyc? did you see the mail from koo and me?
10.07.18 16:22:21<stoopkid> i did see that; might be able to, talking to my fiancee about it now; if i can make it it won't be until friday night if that's ok (got some appointments later this week)
10.07.18 16:24:16<stoopkid> "I know, we are just making it. :)" so at this stage where i don't understand "it" as a well-defined concept, i don't yet see what the need is for analyzing how it affects the curry-howard correspondence
10.07.18 16:30:11<nilli> im trying to have you meet here with a "blockchain" friend who have a good picture of what is going on. not sure if he can in the weekend waiting to here form him
10.07.18 16:42:14<nilli> i
10.07.18 16:43:30<stoopkid> nilli: if they're in NY often we could also arrange another time to meet, would be easier if megan and i had some more time to plan for it, we'd already been talking about going up to NYC later this year at some point
10.07.18 16:58:51<stoopkid> nilli: ah, that collapsed-proof-objects notation isn't actually what the curry-howard correspondence is, it's just a notation that happens to make particularly good sense in the context of the CHC
10.07.18 17:00:05<stoopkid> because it makes propositions "look like" sets of their proofs, with ":" as the set-membership relation
10.07.18 17:24:16<editable-koo>well, if stoop wont make it, then probably no reason for me to stay in new york
10.07.18 17:24:45<editable-koo>but ill be thankful to have a place to sleep there the first night
10.07.18 18:36:45*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
10.07.18 19:26:50*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
10.07.18 20:06:37*** Connecting...
10.07.18 20:07:01*** Join: ditable-kooe (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 5 months 15 days 1 hour 56 minutes 14 seconds ago
                 *** Names: ditable-kooe discardedes Deadhand logicmoo daemoz lexxus[m] stoopkid genuinelyfx[m] koo5[m] redfish64 Tamara_ cantora typlian5 @ChanServ HMCa vbmithr
                 *** End of /NAMES list.
10.07.18 20:17:39*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
10.07.18 20:18:03*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
11.07.18 02:27:39*** Quit: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
11.07.18 02:36:03*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
11.07.18 06:43:12*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 244 seconds
11.07.18 06:49:37*** Join: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
11.07.18 09:42:39*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
11.07.18 10:04:46<nilli> stoopkid and koo, you did not respond to the email but I get it that stoopkid is not coming to nyc and thus koo will go to Baltimore sooner.
11.07.18 10:07:48<nilli> koo lets try to keep the meeting with my friend here on Saturday afternoon and have you go then to baltimore
11.07.18 10:12:18*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
11.07.18 10:12:51*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
11.07.18 10:13:19<nilli>  ok , now when we are done with mundane world matters let me try to make sense of some things I am not yet so articulate at expressing :)
11.07.18 10:17:10<nilli> as usual, dont pull your hair try to understand me, I guess I eventually am whiling to pull my hair learning what is it that I try to tell and you are nice enough to try and understand while making an effort teaching me what you can.
11.07.18 10:25:09<nilli> 1. autonomic resembles a notion which eliminates  outside point of view
11.07.18 10:26:49<nilli> 2. this notion have great consequences that no logic have yet called to deal with
11.07.18 10:36:04<nilli> 3.for compariדםמ ,  it terms of programmingת we still live in a Newtonian era while autonomic requires the theory of relativity .
11.07.18 10:37:27<nilli> *comparison
11.07.18 10:38:10<nilli> *in terms of programming,
11.07.18 10:46:24<nilli> 4. from what i learned so far I totally agree with HMCa choice of logic (MLTT)  but as I tried to explain yesterday it is missing one feature to make it suitable  for a self defining program
11.07.18 10:51:48<nilli> 5. that feature is best understood if we think in terms of an observer, and assume the "logic" itself as an observer (assuming a programmer follow the logic to create the program)
11.07.18 10:56:49<nilli> 6. what that means exactly ? it means that I can"t separate anything form the the whole without having that separation an "object"* of its own right in my language (*im using the term object loosely for now)
11.07.18 11:00:41<nilli> 7. So if I describe a set of two objects  {0,1}, I actualy am looking at a phrase of three objects in which the term "set" is an object {},1,0
11.07.18 11:05:17<nilli> 8. however there is one more thing in play here :  that third object is in fact  an object that allow the other two objects to exist as separate from the whole by forming a defined relation between themselves.
11.07.18 11:06:35<nilli> 9. Thus act as a connective
11.07.18 11:11:09*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
11.07.18 11:13:11*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
11.07.18 11:13:25<nilli> 10. or an operation if you like . So  set is in fact just like any A operation B (or just A operation)
11.07.18 11:14:59<nilli> (ok even the channel is trying to boot me out now for what I say here mixing everything up)
11.07.18 11:18:49*** Join: nilli_ (d03625b8@gateway/web/freenode/ip.208.54.37.184, (unauthenticated): mb82536d0.tmodns.net/208.54.37.184)
11.07.18 11:19:24*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
11.07.18 11:24:00<nilli_> 12. so my last line for now will be to say that a triple, a set of two objects, and any operation executed on two objects, are the one and only fundamental structure possible (assuming that a single object always refered by the operation to the "whole" other then itself or to a prior defined object)
11.07.18 11:24:52<nilli_> *and are the same ofc,
11.07.18 11:35:54*** Quit: nilli_ (d03625b8@gateway/web/freenode/ip.208.54.37.184) left #AutoNomic: Ping timeout: 252 seconds
11.07.18 12:12:12*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Read error: Connection reset by peer
11.07.18 12:14:39<stoopkid> @ nilli, sorry didn't see your email until this morning but yea this weekend isn't a good time for me to make it up there
11.07.18 12:19:54*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
11.07.18 12:22:24<nilli> ok stoopkid.. also koo, i got confused about Saturday, you actualy arriving on Thursday so friday you plan to go already to Baltimore right?
11.07.18 13:38:29<ditable-kooe>hey
11.07.18 13:38:45<ditable-kooe>i guess ill leave it up to you
11.07.18 13:39:46<ditable-kooe>does anyone know if theres some place to buy extra wide sandals in nyc?
11.07.18 14:00:03<nilli> im the worst  shopper, cant stand shopping most of the time. actualy you seem to be good at it koo :)  im sure you will find it once here.
11.07.18 14:01:26<nilli> talk you later
11.07.18 14:06:03*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
11.07.18 15:05:09*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
11.07.18 22:03:57*** Quit: logicmoo (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
11.07.18 22:09:41*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
11.07.18 23:36:55*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
11.07.18 23:37:20*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.07.18 01:56:57*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
12.07.18 02:05:35*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
12.07.18 02:56:56*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
12.07.18 02:57:18*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
12.07.18 04:15:59*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-166.dsl.bell.ca) left #AutoNomic: Ping timeout: 260 seconds
12.07.18 04:21:52*** Join: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-182.dsl.bell.ca, (unauthenticated): deadhand)
12.07.18 11:12:06*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
12.07.18 11:14:56<nilli> good morning , I see no one responded to anything I said.  I assume that you had nothing to say to it since was to out there.(it is my basic assumption regarding most of what I do or say so unless proved otherwise is assumed by me as true)
12.07.18 11:16:02<nilli> however I tired to understand it myself better and see what made me poke at that.
12.07.18 11:19:45<nilli> so I staredt with :"what is the difference between set and statement " since I realized that what I try to say is that a set is a statement
12.07.18 11:21:35<nilli> in my notes from my learning sessions with stoopkid  I see a set defined as : "set means a statement that exist"
12.07.18 11:25:59<nilli> then I checked how statement was defined in my notes and i have a few descriptions: "relation give a statement", "complete sentence" , "atomic statement - R(0,1)"
12.07.18 11:28:21<nilli> now we move to define what a set is
12.07.18 11:29:17<nilli> mathematical set _-  "a collection of defined objects"
12.07.18 11:34:32<nilli> however I see another definition In set theory in which a type is defined as "a collection of objects" which is the mathematical definition of a set,
12.07.18 11:41:30<nilli> so first I googled  it https://math.stackexchange.com/questions/489369/difference-between-a-type-and-a-set but its way to com
12.07.18 11:42:28<nilli> and actualy there was one answer that seems alright:  "My own view is that it doesn't make sense to compare sets and types at all – they are entities in very different worlds. The right question to ask is:
12.07.18 11:43:40<nilli> What is the difference between a set theory and a type theory?
12.07.18 11:44:43<nilli> So in fact I dont agree with that, but I think it demonstrate well that there is an issue here
12.07.18 11:49:48<nilli> lets review that definition again for mathematical set: mathematical set _-  "a collection of defined objects"
12.07.18 11:50:26<nilli> what is thus a defined object?
12.07.18 11:52:23<nilli> we can call it "exist", "witnessed" "Axiom" but we can also simply say that a defined object is a statement
12.07.18 11:54:45<nilli> a statement  defined undefined objects by creating a relationship
12.07.18 11:56:03<nilli> thus a set is a collection of  "statement" not of objects
12.07.18 12:00:50*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
12.07.18 12:17:41<stoopkid> nilli: the difference between set theory and type theory is  that in set theory you can ask whether an arbitrary object is a member of some arbitrary set
12.07.18 12:19:07*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
12.07.18 12:19:15<stoopkid> in a sense, in set theory when you start, all the possible objects are “already there” and all the possible sets are also “already there” and then you sort the objects into the sets they belong to
12.07.18 12:19:45<stoopkid> in type theory, objects cant even be said to be there at all until their type is defined
12.07.18 12:20:43<stoopkid> iow, type theory is a system of assertions about set-membership, which doesn’t allow any *questions* about set-membership
12.07.18 12:21:20<stoopkid> like “is ‘foo’ a number?” isn’t a meaningful question in type theory
12.07.18 12:21:46<nilli> hey stoopkid
12.07.18 12:21:57<stoopkid> but “‘foo’ is a number” might be a legitimate assertion as part of the *definition* of this type “number”
12.07.18 12:22:00<stoopkid> heya
12.07.18 12:23:24<nilli> let go back to that : in set theory when you start, all the possible objects are “already there”
12.07.18 12:24:35<nilli> this is a very important statement to realize in depth.
12.07.18 12:24:59<stoopkid> meaning in particular that you can ask questions about them without knowing what set they’re in, i.e. you can ask, for example, “what set is this object in?”
12.07.18 12:25:50<stoopkid> is that distinction making sense to you so far? it’s kinda subtle, took me a while to really get it
                 <nilli> when you say an object here do you mean a "defined" object?
12.07.18 12:27:38<nilli> I see that you do and you call a defined object a "type"
12.07.18 12:27:40<stoopkid> any object that could possibly be defined or referenced within the formal language
12.07.18 12:28:41<nilli> so let look closely at a type : can you phrase again what is a type other then a defined object?
12.07.18 12:30:15<stoopkid> intuitively/approximately, a type is a set with a pre-defined and decidable set-membership relation
12.07.18 12:31:44<nilli> if you define a type using the word set, then define a "set"for me
12.07.18 12:32:56<stoopkid> there’s different formalisms
12.07.18 12:33:24<stoopkid> especially when we get into the topic of “well maybe sets are actually statements”
12.07.18 12:33:56<nilli> if a set is a collection of defined objects and a defined object is a type , then we have a problem here
12.07.18 12:34:29<nilli> we can define a type using the word set
12.07.18 12:34:32<nilli> cant
12.07.18 12:34:43<stoopkid> well, not every defined object would be a type
12.07.18 12:35:09<stoopkid> like “zero” is defined/referencable but it’s not a type
12.07.18 12:35:47<nilli> why is not a type?
12.07.18 12:36:48<stoopkid> because type theory includes no rules that say "zero is a Type", in fact the rules probably say "zero is a NaturalNumber"
12.07.18 12:37:39<nilli> does it say that all numbers are type?
12.07.18 12:38:06<nilli> types
12.07.18 12:38:56<stoopkid> not necessarily; you might be able to formalize your number theory such that every number is represented by some type, but you can also formalize your number theory such that every number is just some object that doesn't appear as the right-hand-side of any "_ is a _" relationship
12.07.18 12:39:24<stoopkid> for example: NaturalNumber is_a Type; zero is_a NaturalNumber; one is_a NaturalNumber; ...
12.07.18 12:39:45<stoopkid> NaturalNumber is a type because we have a rule that actually says "NaturalNumber is_a Type"
12.07.18 12:40:21<stoopkid> no such rule here for "zero", "one", "two", etc.., instead we have "zero is_a NaturalNumber", "one is_a NaturalNumber"
12.07.18 12:43:18<stoopkid> "A ^ B" is a type but "pair a b" is not
12.07.18 12:45:14<nilli> hold on, for an object to be a type there must exist a rule that this object is included under that rule?
12.07.18 12:46:26<nilli> thus a set of  {rule, object} define a type
12.07.18 12:46:42<stoopkid> for an object A to be a type, there must exist a *proof* of "A is_a Type"
12.07.18 12:47:18<stoopkid> but yes this is usually made to happen by creating a rule which basically says "indeed, A is_a Type"
12.07.18 12:48:00<stoopkid> these are called "Type formation" rules, which i didn't cover with you yet
12.07.18 12:49:16<nilli> ok so could youfirst define to me the difference between a rule and an operation?
12.07.18 12:50:58<nilli> let me try to answer that myself
12.07.18 12:51:31<stoopkid> an operation is a general thing; in mathematics an operation is essentially any function on any number of arguments between any sets/types
12.07.18 12:52:07<nilli> if I look at this phrase  "A is_a Type"  as a rule then the operation is "is"
12.07.18 12:52:30<nilli> and the rule is a statement
12.07.18 12:54:18<stoopkid> "rule" doesn't have any particular meaning in general, but in the context of natural deduction it's an operation that takes some number of proof-trees as input, and returns some proof-tree as output, which is unique to that rule & those inputs
12.07.18 12:57:28<nilli> you always need to look for the definition/meaning under the same conceptual framework that you choose
12.07.18 12:57:46<nilli> for this you have to define the conceptual framework
12.07.18 12:58:23<nilli> and that is where most theory fails or ruther mishap and create  contradictions
12.07.18 12:58:33<nilli> theories
12.07.18 12:59:41<stoopkid> hence why i always caveat everything i say with the context under which it would actually be meaningful
12.07.18 12:59:52<nilli> So lets go back to rules and let define it under the concept of set theory
12.07.18 13:00:33<nilli> let me also make an important remark here
12.07.18 13:01:22<nilli> eventually within every concept we would reach a limit that dose not allow us to define something within that concept.
12.07.18 13:02:25<nilli> reaching this point teach us everything about our conceptual setup
12.07.18 13:03:08<nilli> however most people and theories tend to allow moving between concepts by stating it
12.07.18 13:03:54<nilli> so they are fine defining one object using terms of other conceptual set up (other theory)
12.07.18 13:04:57<nilli> that is a very usful function to use, however when we need to deal with understanding how thing are constructed we need to pin point exactly these instances and define then
12.07.18 13:05:34<nilli> what we try to do now is exactly that
12.07.18 13:06:34<stoopkid> we're always moving between conceptual frameworks because the conceptual frameworks are in our heads, we just hope that within the frameworks we conceptualize something structurally equivalent to what everybody else is conceptualizing within their own internal frameworks
12.07.18 13:07:46<nilli> you are tight on the first part of your statement  but wrong on the second by using the word "hope"
12.07.18 13:08:29<nilli> we actualy can have a precise structure for conversions
12.07.18 13:09:08<stoopkid> well, we assume we can anyway :) but for all practical purposes we'll always be working with this assumption, yes
12.07.18 13:10:00<stoopkid> i.e. we assume we have at least *some* consistent shared reality to start with
12.07.18 13:11:12<nilli> Only when we know our conversion mechanism (or use it naturally without realizing) we are sure keep the accounting right and not lose any information (energy)
12.07.18 13:11:36<nilli> sure to keep
12.07.18 13:11:55<stoopkid> but, now we get into another reason why people seem to be moving between conceptual frameworks: often-times they're not actually and are rather just trying to tap into some structurally equivalent portion of a lay-person's internal conceptual framework via whatever vocabulary they assume might be shared
12.07.18 13:12:31<nilli> I think that we may start with the notion of a trivial statement
12.07.18 13:12:50<nilli> do you want to define it for me now?
12.07.18 13:13:52<stoopkid> ok so the way mathematicians work is: you get to choose your own definitions
12.07.18 13:14:03<stoopkid> as long as you're consistent about it within any discussion
12.07.18 13:14:47<stoopkid> and agree that just because you're using the same word doesn't mean your results apply to any alternate definition of that word
12.07.18 13:16:12<stoopkid> and if there's common standard definitions, then you can omit the definitions and mathematicians will assume the standards unless they're unaware of them, in which case they'll ask you for the definitions
12.07.18 13:16:28<stoopkid> i don't know any common standard definition of "a trivial statement"
12.07.18 13:16:46<stoopkid> so since you're the one who introduced the term into the discussion, i would now ask you for the definition
12.07.18 13:18:00<nilli> [13:13] <stoopkid> ok so the way mathematicians work is: you get to choose your own definitions [13:14] <stoopkid> as long as you're consistent about it within any discussion
12.07.18 13:19:33<nilli> ok that is a great place to start since define exactly the difference between semantics an mathematics.
12.07.18 13:19:41<nilli> and
12.07.18 13:20:21<nilli> semantics tells you how to move between different definitions of the same term
12.07.18 13:20:32<nilli> and there is a rule to that
12.07.18 13:20:44<nilli> this rule is our holy grail
12.07.18 13:21:05<stoopkid> i'm not aware of any common standard definition of "mathematics"
12.07.18 13:21:30<stoopkid> i'm also not aware of any common standard definition of "a rule"
12.07.18 13:22:31<stoopkid> the only common standard definition of "semantics" that i'm aware of is only partial
12.07.18 13:22:33<nilli> definition of how to define something in mathematics
12.07.18 13:24:11<nilli> in other word the consistency in terms of math is the validator of a definition
12.07.18 13:24:50* stoopkid shrugs
12.07.18 13:25:28<stoopkid> on the one hand i think "yes, probably", on the other hand i think "this doesn't really mean anything to start with"
12.07.18 13:26:26<stoopkid> like i regard the word "mathematics" as a bad habit we picked up somewhere along the way
12.07.18 13:26:42<stoopkid> kind of like when an atheist says "bless you"
12.07.18 13:29:08<nilli> in semantics you can define anything and give different definition by proving a rule
12.07.18 13:29:52<stoopkid> maybe
12.07.18 13:29:56<stoopkid> what is "anything" ?
12.07.18 13:30:22<stoopkid> can you meaningfully put a bound on the range of all possibilities?
12.07.18 13:30:40<nilli> now if two definitions of the same term are given by contradicting rules we then are called for a judjemt.
12.07.18 13:30:56<nilli> judgement
12.07.18 13:31:19<nilli> judgment is a very interesting concept not existed in math
12.07.18 13:31:29<nilli> only in semantics
12.07.18 13:31:38<nilli> it also very crucial
12.07.18 13:32:29<nilli> semantics allows for different type of judgment
12.07.18 13:33:04<nilli> one is by creating and hierarchy for rules
12.07.18 13:35:28<nilli> and that is reflecting the mathematical consistency structure
12.07.18 13:37:04<nilli> but semantics also acknowledge the state of two rules of the same hierarchy status
12.07.18 13:38:46<nilli> and then it create statements such as "this statement is not true" without getting into trouble.
12.07.18 13:39:27<nilli> but it also allowing a totally different type of judgement that come from another reality
12.07.18 13:39:30<stoopkid> anywhere you say "mathematical X", if you drop the "mathematical" and just say "X", it will mean pretty much the same thing
12.07.18 13:39:45<stoopkid> example: "mathematical expression" vs. "expression"; "mathematical structure" vs. "structure"
12.07.18 13:40:12<nilli> it allow for social judgment . that of the "longest chain" :)
12.07.18 13:42:13<nilli> no stoopkid. our long long depute : semantics vs mathematics.   not the same !
12.07.18 13:42:56* stoopkid shrugs
12.07.18 13:43:02<nilli> the semantics X and the mathematics X are not the same.
12.07.18 13:43:28<stoopkid> and then you'll go to talk to somebody else and they'll have completely different definitions of semantics & mathematics & etc..
12.07.18 13:43:47<stoopkid> and somebody else will invent a new one tomorrow
12.07.18 13:44:02<nilli> but we can bridge the difference using mathematical terms implemented by human operated machines
12.07.18 13:44:48<nilli> ok that is what we try to do here
12.07.18 13:46:12<nilli> ok let go to some very concrete aspects of that and back to a trivial statement
12.07.18 13:48:37<stoopkid> https://en.wikipedia.org/wiki/Mathematics
12.07.18 13:49:04<stoopkid> second sentence in the definition is "It has no generally accepted definition." lol
12.07.18 13:52:15<nilli> lol
12.07.18 13:52:25<stoopkid> the term "mathematics" vaguely paints a picture in the reader/listener's mind of "precision"/"structure"/"pattern", but we have no way of quantifying all possibilities of structure/pattern
12.07.18 13:53:07<stoopkid> it's kind of like the "second-order logic expresses *everything*" thing: well... how do we know? we can't quantify "everything" to start with
12.07.18 13:53:34<stoopkid> "turing-completeness computes *everything"; well... are we sure? or are we just not imaginative enough to think of higher forms of computation?
12.07.18 13:54:41<stoopkid> is reality itself mathematical? or is everything mathematical trapped off in some parallel platonic reality?
12.07.18 13:56:02<stoopkid> we have no way of answering these questions, a) because in the worst-case scenario, we can't even meaningfully interpret the statements, b) in the best-case scenario they're still in the realm of philosophy/metaphysics
12.07.18 13:56:16<nilli> you will very soon enter you existentialist crises if you go on this line of thought. but I do have a solution for that :)
12.07.18 13:56:42<nilli> I just need you to help me define it in terms others will be able to agree on it
12.07.18 13:57:03<nilli> including you first ofc (and HMCa for that matter)
12.07.18 13:57:12<nilli> so back to trivail
12.07.18 13:57:22<nilli> ok im looking at my notes and is defining trivial statement as a "statement by every possible graph"
12.07.18 13:57:44<nilli> is that right?
12.07.18 13:58:01<stoopkid> ah, now i know what you're referring to
12.07.18 13:58:44<stoopkid> in the context of our study sessions, "trivial" meant what the logicians would call "valid"
12.07.18 13:58:55<nilli> right
12.07.18 14:00:57<nilli> can we trace every rule to its trivial statement?
12.07.18 14:02:31<stoopkid> maybe
12.07.18 14:02:43<stoopkid> what do you mean by "trace a rule to a statement"
12.07.18 14:03:58<stoopkid> and in what logic? with what rules? and what statements?
12.07.18 14:08:01<stoopkid> what i showed you in our study sessions was one specific thing that carries terminology of "syntax, semantics, logic, mathematics, rules, expressiveness, trivial, valid, etc..", but it is just that: one specific thing
12.07.18 14:09:00<stoopkid> we only looked at FOL semantics, but this isn't even scratching the surface of a range of possibilities that logicians actually agree on the existence/meaningfulness of, and there's an infinite expanse of unknown/unfathomable beyond that
12.07.18 14:10:19<nilli> I know but "trivial" actualy is creeping up in every system we try do define
12.07.18 14:12:04<nilli> lets start with any two semantic statement which wall follow a basic rule of a sentance, subject predicate object (subject --> object)
12.07.18 14:12:13<stoopkid> and relativity was always galilean until it was special, and geometry was always euclidean until it wasn't
12.07.18 14:12:28<nilli> all follow
12.07.18 14:14:12<stoopkid> i'll agree that the notion of validity is quite ubiquitous among the various *defined* systems of formal logic
12.07.18 14:15:17<stoopkid> it certainly is a major notion in standard FOL, SOL, henkin-SOL, and boolean-valued model theory
12.07.18 14:15:53<stoopkid> and they have enough shared structure that you can apply this notion of validity to each of them in the same way
12.07.18 14:17:30<nilli> if we have two  sentance separately with out any reference to each other, would each be trivial?
12.07.18 14:18:12<nilli> *and not referenceed to anything else
12.07.18 14:18:23<stoopkid> under what semantics?
12.07.18 14:18:53<nilli> english
12.07.18 14:18:59<stoopkid> how about "This sentence is false." under the interpretation that makes it paradoxical
12.07.18 14:20:12<nilli> ok try to check it as a trivial statement
12.07.18 14:20:27<stoopkid> it's not valid
12.07.18 14:20:47<stoopkid> indeed it's paradoxical
12.07.18 14:22:07<nilli> ok lets see : this statement is a statement that is false
12.07.18 14:22:23<stoopkid> also paradoxical
12.07.18 14:22:54<stoopkid> you didn't change the meaning at all
12.07.18 14:23:25<nilli> but I broke it to two rules
12.07.18 14:23:45<nilli> (two "is)
12.07.18 14:23:51<stoopkid> so?
12.07.18 14:24:57<stoopkid> to start with, your first rule is redundant: "this statement is a statement".. ofc it is, otherwise you couldn't refer to it as "this statement"
12.07.18 14:26:05<stoopkid> now, let's say you come up with a "solution" to this paradox
12.07.18 14:26:11<nilli> this statement is a statement is trivial not redandent
12.07.18 14:26:46<nilli> and is true
12.07.18 14:27:33<stoopkid> your solution must necessarily be "doing something different"
12.07.18 14:27:42<stoopkid> i.e. you might restrict the range of possible expressions
12.07.18 14:27:51<stoopkid> you might restrict the range of possible interpretations of those expressions
12.07.18 14:28:30<stoopkid> you might do something else more creative that i'm not thinking of
12.07.18 14:28:42<stoopkid> in all cases, you will be "doing something different"
12.07.18 14:30:09<stoopkid> which, going back to what i was saying earlier, would mean your results in this different context would not apply to the situation i'm describing where there actually does exist a paradox with this particular (*standard*!) interpretation of that statement
12.07.18 14:32:40<nilli> not true. all of your type theory is based on a witnessed statement that we both witness not prove. all you need is agreement on an existing statement then in our shared context
12.07.18 14:34:04<stoopkid> i'm not sure what this has to do with what i just said
12.07.18 14:34:52<stoopkid> i've never met anybody who couldn't witness the paradox in the liar paradox, so the understanding of the paradox is certainly commonly shared context
12.07.18 14:35:15<nilli> ok back to our pardox
12.07.18 14:40:57<stoopkid> let's go back a bit further than that: "lets start with any two semantic statement which wall follow a basic rule of a sentance, subject predicate object (subject --> object)"
12.07.18 14:41:12<nilli> this statement is a statement thus is true (trivial) now lets check this: this statement is a statement that is false and apply :this statement is a statement thus is true,--->true is false
12.07.18 14:41:55<nilli> and that is false
12.07.18 14:42:52<stoopkid> that's not how i would interpret that statement
12.07.18 14:43:29<stoopkid> i would interpret that statement rather as "(this statement is a statement) and (this statement is false)"
12.07.18 14:43:58<stoopkid> we can say "sure, 'this statement is a statement' is true", so the statement reduces to "true and (this statement is false)"
12.07.18 14:44:31<stoopkid> but "true and x" is equivalent to x, so the statement reduces to "this statement is false" and we're directly back to the original paradox
12.07.18 14:45:43<stoopkid> now, if you say "no, it's this other meaning", well....
12.07.18 14:46:30<stoopkid> 1) according to who? there's no well-defined authority on the matter; 2) assuming it is that other meaning, then we're just "talking about something else"; "doing something different"
12.07.18 14:47:36<stoopkid> since it's your statement we can assume that you happen to be the authority on the matter in this case, so you can say, indeed it is this other meaning, and then we're in option (2)
12.07.18 14:50:11<stoopkid> so, you can certainly choose a particular interpretation of the meanings here, indeed that's what i assert that you necessarily *must* do, due to the unquantifiability of the total range of all possibilities, my only point here is that there *do exist* other interpretations that break the results you are reaching from your particular interpretations
12.07.18 14:51:58<stoopkid> so, let's go back to "lets start with any two semantic statement which wall follow a basic rule of a sentance, subject predicate object (subject --> object)"
12.07.18 14:52:14<stoopkid> cool, now we're going somewhere
12.07.18 14:52:16<nilli> now : "this statement is false" means that thit statement is not a statement.  and that is false .  The problem is in the structure of the statement that hide a trivial statement wich resolve the matter once exposed.
12.07.18 14:52:49<stoopkid> i at least now have the basic outline of a syntax for expressions in your proposed language/logic
12.07.18 14:53:48<stoopkid> "now : "this statement is false" means that thit statement is not a statement. "
12.07.18 14:54:07<stoopkid> so now you're restricting semantics: which is "talking about something else"
12.07.18 14:54:57<stoopkid> so, we have to start with: what logic are you reaching these conclusions about?
12.07.18 14:55:11<stoopkid> also, you run into a problem here
12.07.18 14:55:32<stoopkid> "(this statement is a statement) and (this statement is false)"
12.07.18 14:55:48<stoopkid> well, nvm confusing myself for a second
12.07.18 14:56:03<stoopkid> sure, you can rule it out as a statement
12.07.18 14:56:49<stoopkid> you can even still state it and have it still fail to satisfy the predicate/judgement "is a statement"
12.07.18 14:57:01<stoopkid> you can have exactly your interpretation
12.07.18 14:57:24<nilli> mltt will give me that result since is referring every statement  back , I do restrict it further by implying a trivial statement as witness
12.07.18 14:57:48<HMCa> this statement is a statement that it is not practical to have to state that our statements are statements when we state them as statements because it shoukd be implied as stated when we state them being statements that are stated. :-|
12.07.18 14:58:34<stoopkid> yes
12.07.18 14:58:42<stoopkid> probably
12.07.18 14:59:00<HMCa> *should
12.07.18 14:59:01<stoopkid> but even that is one particular restriction on the range of possibilities ofc
12.07.18 15:00:13<nilli> hey HMCa I was just about to step out for a bit but will stay a bit longer to argue you both
12.07.18 15:00:21<stoopkid> lol
12.07.18 15:00:34<HMCa> (and if the thing in question is not a statement then the thing can't be stated, anyway, so there is no risk of ambiguity and no need to discern)
12.07.18 15:00:57<nilli> argue dont mean that we do not agree by the way it means that we figure out a way to agree
12.07.18 15:01:12<HMCa> we can thus just safely assume that anything stated is, indeed, a statement
12.07.18 15:02:11<stoopkid> nilli: the way to agree is to not clash namespaces
12.07.18 15:02:57* HMCa is only here for a moment, but i'll be lurking and catching up on scrollback from time to time
12.07.18 15:03:18<stoopkid> instead of saying "This is a rule/pattern of logic" we would say "This is a rule/pattern of NilliLogic"
12.07.18 15:03:37<stoopkid> or this is a rule/pattern of "Martin-LofLogic" aka MLTT
12.07.18 15:03:52<nilli> no its to agree in different names to same space realizing that a name and a space is two different concepts (something on that line, but lets keep it simple and back to "statement")
12.07.18 15:04:05<stoopkid> or this is a rule/pattern of "pure first-order logic model theory"
12.07.18 15:04:59<nilli> do you all agree that:  x is x unless is not x
12.07.18 15:05:25<stoopkid> no
12.07.18 15:05:40* HMCa needs an atp for nillilogic, would've saved me some time over the years... XD
12.07.18 15:06:04<nilli> atp?
12.07.18 15:06:19<stoopkid> automated theorem prover
12.07.18 15:06:44<nilli> lol, im trying to work on it
12.07.18 15:06:54<HMCa> also no (wrt "do you all agree")
12.07.18 15:07:51<HMCa> I assume that assuming reflexive identity is as fundamental and implocitly necessary as assuming that we and things do exist at all in the first place. :-)
12.07.18 15:08:36<HMCa> if things might not be themselves then any hope for consistency is lost, and we might as well *not* assume that any reality exists at all.
12.07.18 15:09:14<HMCa> in which case we might not even be here, so why bother with anything further? :-)
12.07.18 15:09:19<HMCa> so
12.07.18 15:09:26<nilli> what if you assume a paralleled universe as an option, then do you still disagree with me?
12.07.18 15:09:52<HMCa> just as much as we must take as granted the assumption that we do exist at all thrn we must take it as assumed that every thing is itself.
12.07.18 15:10:34<HMCa> nilli: assuming parallel realities presupposes any reality at all
12.07.18 15:11:11<nilli> I actualy think that this statement : x is x unless is not x is the basic statement the indicate agreement
12.07.18 15:11:18<HMCa> however even assuming parallel realities (which I generally do, at least in one particular sense, btw) reflexive identity must still be assumed
                 <nilli> that
12.07.18 15:11:40<nilli> and we need to indicate that disagreement is an option
12.07.18 15:11:54<HMCa> or else "all is lost" wrt hope of consistency
12.07.18 15:13:13<nilli> *one thing I cab assure you is that nililogic is constant, but ill have to prove it to you too since you cant trust me on that
12.07.18 15:13:19<nilli> can
12.07.18 15:13:47<nilli> *consistent lol
12.07.18 15:14:16<stoopkid> let's check
12.07.18 15:15:29<stoopkid> so in nillilogic, consistency means that you can't prove "x" and also prove "not x", for any nillilogic statement x?
12.07.18 15:18:04<nilli> it means that it allow for my definition of x be your definition of y and we always must take that in consideration assuming the restrictions given by of information theory
12.07.18 15:19:03<nilli> but since I dont even able to know your y its better to name it not x
12.07.18 15:20:26<HMCa> let's consistently define consistency, per Per Martin-Lof, plz.
12.07.18 15:20:34<HMCa> PLZ!
12.07.18 15:20:36<HMCa> :-_
12.07.18 15:20:38<HMCa> :-)
12.07.18 15:20:57<HMCa> cartesian closed categories... meanings interp...
12.07.18 15:21:05<nilli> basically your definition of x can by any definition other than by definition of x at any given moment (between blocks, if we reffer it to our project)
12.07.18 15:21:35<stoopkid> so if "x is y" is provable, is "y is x" provable?
12.07.18 15:24:49* HMCa wonders how this wifi device is claiming 130% air time utilization... luls
12.07.18 15:24:58<HMCa> maybe we don't exist after all!
12.07.18 15:25:06<HMCa> so much for consistency. ;-)
12.07.18 15:25:22<nilli> put your logic on a blockchain and you get my statement per martin lof, the trust problem is not about trust is about information
12.07.18 15:25:26<HMCa> have I mentioned lately that the semicon industry sucks?
12.07.18 15:25:59<nilli> you have to include that in any logic. information theory restrictions  as a restriction
12.07.18 15:29:17<nilli> im sure its deeply related HMCa so pleas explain what suck in it
12.07.18 15:29:54<stoopkid> we don't really have to include anything in particular in any logic
12.07.18 15:31:19<stoopkid> for any particular defined logic we only have to include what was defined to be included
12.07.18 15:34:16<stoopkid> right now you're trying to do philosophy/metaphysics
12.07.18 15:35:31<stoopkid> for practical purposes though in formal logic these philosophical/metaphysical things are basically just motivational analogies and the rest is kind of an engineering problem
12.07.18 15:37:42<stoopkid> imagining logics as cars, we have a vague notion of what a "car" should be, then we engineer specific things that seem car-like and are at least "driveable" in some kind of way, out of physical building blocks that seem to be made available to us, not questioning too much what is the totality of the range of possible things that could possibly be cars
12.07.18 15:41:15<HMCa> my car is part of a train.
12.07.18 15:43:42<stoopkid> nilli: basically when it comes down to it, there's no "what has to be done", there's just "what is"
12.07.18 15:44:18<stoopkid> and not even "what is, in reality", just "what is, in some particular abstract conceptual framework"
12.07.18 15:44:41<nilli> eventually my goal to build a context based network that can accept all sentences yet have them form a particular graph that is a tree- like -graph  that organize their hierarchy based on logic.
12.07.18 15:45:17<nilli> ok I wrote that before the car story... let me see that then
12.07.18 15:45:27<stoopkid> ok cool, that's a precise enough of an engineering goal to at least start digging into
12.07.18 15:46:56<stoopkid> i'm familiar with abstract tree structures, i'm familiar with abstract graph structures, i'm familiar with abstract hierarchy structures, and i have vague ideas of what "based on logic" might mean, which i have particular ways to make concrete (but which aren't assumed to be exhaustive)
12.07.18 15:48:16<stoopkid> the questions would be: what logic, and what relation on the sentences is determining the structure of the hierarchy?
12.07.18 15:49:48<stoopkid> or by "all sentences" do you mean all possible strings (over some alphabet), prior to semantic interpretation, and then tree/graph essentially is a relation on their interpretations?
12.07.18 15:52:00<stoopkid> cause we can do that in MLTT just fine without deviating from the standard interpretation of it
12.07.18 15:54:25<HMCa> indeed
12.07.18 15:54:29<nilli> I would actualy start with a semantic structure  assuming anything  including a number as a semantic statement
12.07.18 15:54:49<nilli> can we do that?
12.07.18 15:57:00<nilli> I assume a semantic interpretation to have a structure
12.07.18 15:57:45<nilli> for example what is 1 as a semantic statement
12.07.18 15:58:43<stoopkid> why are you asking us? it's completely up to you :P
12.07.18 15:59:07<HMCa> "{{}}"
12.07.18 15:59:13<stoopkid> i'm assuming we're in NilliLogic here? or are you asking about some particular logic framework that we might have the answer for?
12.07.18 15:59:16<nilli> one is a natural number, one is the first natural number, one is smaller then 2.  any statement is a good one to start with
12.07.18 15:59:47<nilli> than not then
                 <stoopkid> so "one" = "one is a natural number"?
12.07.18 16:01:01<nilli> ok lets assume : "one is a natural number" now can you define 2 based on that?
12.07.18 16:01:54<stoopkid> in NilliLogic? idk. in MLTT? with certain formalizations of the natural numbers, yes; with others maybe not
12.07.18 16:02:28<stoopkid> (arguably those others, if they exist, might not be considered to be "useful" formalizations)
12.07.18 16:02:31<nilli> just define it for me based on "one is a natural number"
12.07.18 16:02:50<stoopkid> how about we have a rule like:
12.07.18 16:02:56<stoopkid> x is a NaturalNumber
12.07.18 16:02:58<stoopkid> ---------------------------
12.07.18 16:03:10<stoopkid> x+1 is a NaturalNumber
12.07.18 16:03:42<stoopkid> so 2 is represented with the syntax 1+1
12.07.18 16:03:51<nilli> great
12.07.18 16:03:52<stoopkid> 3 is (1+1)+1, etc..
12.07.18 16:04:06<nilli> ok now define 3 based on that
12.07.18 16:04:17<nilli> you just did good
12.07.18 16:05:19<nilli> so two is not x+1 natural number. it is x until we have to define 3 then, it is 1
12.07.18 16:05:42<stoopkid> no idea what you mean there
12.07.18 16:06:00<nilli> * x+1 is a natural number
12.07.18 16:06:14<stoopkid> still no idea
12.07.18 16:07:18<nilli> you just define a rule to build a tree of numbers base on my semantic definition of one
12.07.18 16:09:21<stoopkid> well, yea, you gave the axiom "1 is a NaturalNumber", and if we take "1+1" to be 2, and "(1+1)+1" to be 3, and etc.. then the rule i gave lets you prove "1+1 is a NaturalNumber" and "(1+1)+1 is a NaturalNumber" and etc..
12.07.18 16:10:36<nilli> *we need to express "+" as a sentance to make it purely English (but that is not really important for now)
12.07.18 16:11:56<stoopkid> who says we even have to make it english?
12.07.18 16:12:11<stoopkid> i gtg though
12.07.18 16:12:37<nilli> I knwo it looks redundant to you but that is since math is the most basic logic tree we have
12.07.18 16:13:11<stoopkid> i'll be back in like an hour
12.07.18 16:13:23<nilli> yet we can constract it form any random semantic sentance about 1
12.07.18 16:13:39<nilli> great since I realy realy have to go too :)
12.07.18 16:13:58<nilli> so now we are all gone for an hour.
12.07.18 16:14:02<nilli> or so
12.07.18 17:20:46<HMCa> or longer, evidently. :-)
12.07.18 17:20:54<HMCa> :-P
12.07.18 17:37:42*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
12.07.18 19:20:51*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
12.07.18 19:22:17<nilli> HMCa much longer... that is what happened when you  enter the real world.
12.07.18 19:23:54<stoopkid> funny i just got back as well
12.07.18 19:24:04* stoopkid on mobile tho
12.07.18 19:24:54<nilli> actualy its already time that koo should have landed and I planned to go meet at the place he will stay in . so will need to go back into real world very soon
12.07.18 19:35:12<nilli> anyway I just also had a general comment to stoopkid. we are way far into the real work the "construct" (as HMC like to call it) and what may sound as philosophy is the seed that will grow the roots and will materialized the earth , not a balloon in the sky that have no effect and is not effected by the ground
12.07.18 19:37:46<nilli> that was a fancy way to say that its concrete
12.07.18 20:08:24*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
12.07.18 20:37:07<stoopkid> @ nilli maybe so, but as you said, this is up to you to demonstrate
12.07.18 20:38:12<stoopkid> i personally don't have a philosophical stake in the matter; no strong philosophical convictions about how we should conceptualize these things
12.07.18 20:40:43<discardedes> hello
12.07.18 20:40:54<stoopkid> i have some vague ideas towards what might seem philosophically satisfying to me, but for the most part i'm perfectly content to just analyze the existing frameworks and make judgement as to their merit for specific practical applications
12.07.18 20:41:25<stoopkid> including whatever you might come up with
12.07.18 20:41:28<stoopkid> discardedes: heya
12.07.18 20:41:30<stoopkid> how ya been
12.07.18 20:41:34<discardedes> busy
12.07.18 20:41:35<discardedes> you?
12.07.18 20:41:51<stoopkid> busy-ish
12.07.18 20:42:08<stoopkid> mostly with this project lately though so idk if that counts :)
12.07.18 20:42:19<discardedes> does by my book
12.07.18 20:42:57<stoopkid> any cool projects lately?
12.07.18 20:43:16<discardedes> warming up to get into some, but many small projects
12.07.18 20:43:24<discardedes> and a big gardening project
12.07.18 20:43:29<discardedes> via big garden
12.07.18 20:43:35<discardedes> about quarter acre
12.07.18 20:43:57<stoopkid> decorative garden or like crop plants?
12.07.18 20:44:07<discardedes> food stuff
12.07.18 20:44:10<stoopkid> nice
12.07.18 20:44:13<discardedes> yeah
12.07.18 20:44:15<discardedes> :)
12.07.18 20:44:27<stoopkid> cool stuff, i've been trying to get into that lately
12.07.18 20:44:35* stoopkid has no experience with it at all
12.07.18 20:44:48<discardedes> i put benches in my room and shelves and plan on doing much gardening in the winter in my room
12.07.18 20:44:57<discardedes> via flourecent lights
12.07.18 20:45:25<discardedes> starting to experiment with it this summer
12.07.18 20:45:48<discardedes> growing some grasses and lettuces in my room
12.07.18 20:46:45<discardedes> this is really new to me, so the results havent been all that great yet, but its a work in progress
12.07.18 20:46:57<discardedes> as long as i keep learning, i can keep improving
12.07.18 20:47:48<stoopkid> yep, tbh it's kind of humbling, especially coming from math where everything is controlled with 100% precision
12.07.18 20:48:03<discardedes> takes time to get into anything well enough to start doing some descent improv
12.07.18 20:49:22<discardedes> thats been my experience, that it can be difficult to know where to start
12.07.18 20:49:47<discardedes> because 100 and more things seem to need to work at once to get it going
12.07.18 20:50:31<discardedes> but... even if you ordered a few seeds, dug up or bought some dirt (i dug some from my yard)
12.07.18 20:50:40<discardedes> and ma
12.07.18 20:50:54<discardedes> ybe you could figure something you could do with them
12.07.18 20:50:57<discardedes> dunno
12.07.18 20:51:02<discardedes> just a push
12.07.18 20:51:15<discardedes> you can hit me up to talk about it if you get inspired to try
12.07.18 20:51:50<discardedes> ill tell you whatever makes the most sense to me
                 <stoopkid> i've got a bunch of succulents and other houseplants growing, just got some spinach and kale and catgrass to sprout in the window... hadn't really started planning for winter yet though
12.07.18 20:52:27<discardedes> the flourecent light idea is kinda a new one for me
12.07.18 20:52:36<discardedes> but.... i think it could work
12.07.18 20:52:56<discardedes> and if you build benches in a room, you can get alot of space
12.07.18 20:53:17<discardedes> i plan on having underneath all of the benches for growing
12.07.18 20:53:49<discardedes> then the tops you can use for growing or also for work benches
12.07.18 20:54:02<discardedes> for example, i want to work on electronics
12.07.18 20:54:22<discardedes> so i can do the electronics on a bench while stuff is growing under it
12.07.18 20:54:56<stoopkid> that's a good idea, i'm pretty limited on space
12.07.18 20:55:01<discardedes> me too
12.07.18 20:55:13<discardedes> i also build shelves across my ceiling
12.07.18 20:55:24<discardedes> not on the wall, but across the ceiling
12.07.18 20:55:36<discardedes> that was very useful
12.07.18 20:56:17<stoopkid> i've been trying to figure out how to compost in my apartment
12.07.18 20:56:25<discardedes> only seven ft ceilings here, but im at 6ft, and the extra foot was space i could use
12.07.18 20:56:38<discardedes> stoopkid: best might be worms
12.07.18 20:56:47<discardedes> i think thats the indoor way to do it
12.07.18 20:56:52<discardedes> you can feed them compost
12.07.18 20:57:10<discardedes> AND, if you want to do something really neat, check out compost tea
12.07.18 20:57:21<stoopkid> probably; mind if i pm you about this? it's rather off-topic for the channel, or maybe we could make a #urbanfarming channel or something
12.07.18 20:57:22<discardedes> actively aerated compost tea
12.07.18 20:57:54<discardedes> i plan sitting on irc more steadily now
12.07.18 20:58:02<discardedes> so.... whatever you are game for
12.07.18 20:58:26* stoopkid joins #urbanfarming
13.07.18 09:17:07-christel- [Global Notice]: Hi all, we're excited to be able to announce that Bradley Kuhn, Chris Lamb, Kyle Rankin, Leslie Hawthorn and VM Brassuer are all keynoting this year's freenode #live in Bristol, UK on 3-4 November. You too can join the speaker line-up, the CFP is open! More info http://freenode.net/news/freenode-live-keynotes
13.07.18 10:59:50*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
13.07.18 11:06:47<nilli> hey stoopkid I guess it will be best to leave the conversation to when we meet but maybe will be worth a general note regarding this:
13.07.18 11:06:57<nilli> 12.07.18 20:40:54<stoopkid> i have some vague ideas towards what might seem philosophically satisfying to me, but for the most part i'm perfectly content to just analyze the existing frameworks and make judgement as to their merit for specific practical applications
13.07.18 11:11:45<nilli> the existing frameworks where themselves created to solve some problems with existing frameworks . and  the problems  where a concrete manifestation of a philosophical idea,
13.07.18 11:13:49<nilli>  many ideas that themselves developed as the reality of executing them using new innovations where created
13.07.18 11:20:22<nilli> our history tells us too much about geniuses that came up with some amazing discovery or innovation, maybe that was a reality years ago when very few people actualy where exposed to relevant information
13.07.18 11:23:27<nilli> that is not true today. practically too many geniuses to stand out and create a revolution in science or thoughts or any leadership for that matter.
13.07.18 11:27:31<nilli> now a days it is a collaborative work under very tight consensus of the academia and the industries themselves (which often lead the research an innovation)
13.07.18 11:30:59<nilli> in other word everyone in the "food chain" of development is a "gene" of the collaborative genius and should exercise braking the limits set by any theory they work with without feeling intimidated by that.
13.07.18 11:32:47<nilli> of braking the limits requires knowing them , but knowing anything is limited as well, and one have to find the balance.
13.07.18 11:33:39<nilli> *ofc
13.07.18 11:38:42<nilli> I am notorious when it comes to braking limits , in fact I may know very little about something but I do identify the limits very fast and "check" them out right away
13.07.18 11:39:52<nilli> and I dont expect many if any to even be whiling to speak with me about it or try to understand me.
13.07.18 11:40:35<nilli> I think that we are doing here a mutual effort to get to something we all sense right.
13.07.18 11:41:38<nilli> I think that at this point we even are able to agree on the sort of  rigid logic that need to be applied
13.07.18 11:43:12<nilli> But I think that whatever logic systems that are in use and known to us miss a crucial component
13.07.18 11:46:25*** Join: nilli_ (d03625b1@gateway/web/freenode/ip.208.54.37.177, (unauthenticated): mb12536d0.tmodns.net/208.54.37.177)
13.07.18 11:47:48*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
13.07.18 11:47:50<nilli_> I must confess that I was hoping to not have to learn anything to that degree that you teach me now (just because I am not such a good learner when it comes to follow rules and execute them precisely)
13.07.18 11:49:50<nilli_> but actualy am enjoying it thanks to your ability to teach it in such a shortcut fashion.
13.07.18 11:58:02<nilli_> and after i realized again, that despite all your intentions to really understand me its still not even slightly clearer to you guys. following your offer, I jumped on the plain and come right over
13.07.18 11:59:35<nilli_> I dont know it that eventually will lead to any better understanding to the point in which one of you convince me that I am wrong or I can convince you to understand and agree with me
13.07.18 12:03:20<nilli_> which ever way it should at list give you a kick in the direction to allow yourself to create solutions not just look for them at others work. you are no less genius  than they where.
13.07.18 12:06:25<nilli_> and by the way the mistakes in works of grate minds are often just as grate and took us all on a huge detour since we followed them to closely. :)
13.07.18 12:08:45<nilli_> ok guys. im off to join koo in the city.
13.07.18 12:10:43<nilli_> really nice to meet him too. nice guy!  :)
13.07.18 12:15:18*** Quit: nilli_ (d03625b1@gateway/web/freenode/ip.208.54.37.177) left #AutoNomic: Ping timeout: 252 seconds
13.07.18 15:18:40<stoopkid> @ nilli i hope i've made it apparent that i'm not into the tech-bro hero-worship thing so as far as i see it you're preaching to the choir when it comes to "breaking the institutionalized limits"
13.07.18 15:22:37<stoopkid> i certainly wasn't implying that you should restrict yourself to existing frameworks
13.07.18 15:23:24<stoopkid> in fact i was rather implying the opposite...
13.07.18 15:25:28<stoopkid> and further implying that i'm willing to analyze the practical merit of any given system, including yours (if you can explain it clearly enough), partly *because* i don't care that much about the philosophy behind it
13.07.18 15:28:29<stoopkid> show me the syntax, show me the symbol manipulations, show me a means of interpretation via assumed-to-be-shared conceptual framework, show me how to actually *use* NilliLogic directly
13.07.18 15:30:15<stoopkid> if you can show me that, i can extrapolate my own philosophical interpretation
13.07.18 15:33:49<stoopkid> i hang out in ##logic, where random non-experts from across the internet gather and discuss different ways to tweak logic... logicians in general are very willing to experiment with pretty much whatever you're able to communicate with full precision
13.07.18 15:35:16<stoopkid> but ofc, the only way this can be done with any matter of efficiency is because we share enough basic vocabulary/conceptual-framework
13.07.18 15:37:06<stoopkid> if in every discussion we had to start from square 1 and redefine standard terms like "object, set, relation, operation, etc..." we'd never get anywhere
13.07.18 15:37:55<HMCa> if anyone can find a meaningful limitation to hott/cubicalmltt i'll be not just impressed but downright amazed...
13.07.18 15:37:58<HMCa> heh
13.07.18 15:39:01<HMCa> 20 < nilli> our history tells us too much about geniuses that came up with some amazing discovery or innovation, maybe that was a reality years ago when very few people actualy where exposed to relevant information
13.07.18 15:39:06<stoopkid> i'd argue that hott is already the result of breaking many "institutionalized limitations"
13.07.18 15:39:31<HMCa> mltt is not very old, and hott is practically brand new...
13.07.18 15:40:09<HMCa> relative to most logical frameworks they are both infants, heh
13.07.18 15:40:49<HMCa> and both recent enough that information was certainly widely available
13.07.18 15:42:56<stoopkid> hrm
13.07.18 15:44:53<stoopkid> i don't think she's implying that the systems can't be changed, but rather that this activity is like "reserved to 'experts' by society"
13.07.18 15:57:11<stoopkid> but, @ nilli, we have solutions to exactly this problem, because you're certainly not the first to make this complaint about academia and certainly won't be the last
13.07.18 15:59:16<stoopkid> we have a general protocol / social convention that everybody who learns math/logic on IRC learns eventual
13.07.18 16:00:36<stoopkid> idk if it's been written down explicitly anywhere except for here by me
13.07.18 16:03:27<stoopkid> academia gets to define vocabulary, so we have a universally shared base of language
13.07.18 16:05:23<stoopkid> if everybody who knows anything about the academic standards knows that academia defines some term X in a particular way, then if you try to use an alternative definition for that term, everybody will be verbally annoyed about it
13.07.18 16:06:56<stoopkid> if there's a wikipedia page for the term and you're using the term differently, you're probably on the wrong track
13.07.18 16:09:39<stoopkid> if it's important enough to you to redefine the term that you're ok with that, then you're free to do so, but it only applies to the scope of that discussion, academia still defines the general standards
13.07.18 16:11:02<stoopkid> and if you want to just side-step that whole "problem", then there's an infinite expanse of names for you to choose from
13.07.18 16:12:40<stoopkid> if you had a different intuition for the word "set" than the academic community had, you don't have to worry about getting everybody to agree to work with an alternative definition of "set", because "NilliSets" can do everything you want!
13.07.18 16:18:41<stoopkid> but, whatever term you introduce (whether by creating a new name or redefining an existing name), it's up to you to define, meaning: up to you to communicate what is the structure/behavior of the concept referenced by your term
13.07.18 16:22:02<stoopkid> which will likely be difficult if you're not using any shared vocabulary/understanding for describing general structure/behavior (think like "object", "set", "function", "relation", "operation", etc..)
13.07.18 19:30:05*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
13.07.18 19:47:17*** Join: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net, dmiles: ...)
13.07.18 20:24:07*** Quit: dmiles (dmiles@c-24-20-102-245.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 244 seconds
13.07.18 22:50:58*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
13.07.18 22:51:22*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
14.07.18 07:30:44*** Join: koom (~koom@pool-96-246-0-204.nycmny.east.verizon.net, (unauthenticated): realname)
14.07.18 07:52:20*** Quit: koom (~koom@pool-96-246-0-204.nycmny.east.verizon.net) left #AutoNomic: Remote host closed the connection
14.07.18 08:10:49*** Join: koom (~koom@pool-96-246-0-204.nycmny.east.verizon.net, (unauthenticated): realname)
14.07.18 09:50:57*** Quit: koom (~koom@pool-96-246-0-204.nycmny.east.verizon.net) left #AutoNomic: Ping timeout: 240 seconds
15.07.18 01:37:34*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dekbgsicxvfylesl) left #AutoNomic: Quit: Connection closed for inactivity
15.07.18 02:37:37*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tvwgtcvmabrtqavq, stoopkid: stoopkid)
15.07.18 09:55:11*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
15.07.18 13:17:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
15.07.18 13:17:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
15.07.18 14:03:45*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
15.07.18 22:15:09*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
16.07.18 00:42:19*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 244 seconds
16.07.18 01:18:07*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
16.07.18 04:17:03*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tvwgtcvmabrtqavq) left #AutoNomic: Quit: Connection closed for inactivity
16.07.18 13:17:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tcrsuakihoqhhekz, stoopkid: stoopkid)
16.07.18 18:19:03*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
16.07.18 18:19:28*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
16.07.18 21:09:59*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
16.07.18 21:59:06*** Quit: koom (~sirdancea@98.233.253.142) left #AutoNomic: Ping timeout: 268 seconds
17.07.18 00:30:13*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
17.07.18 00:30:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.07.18 03:12:59*** Quit: typlian5 (~PircBotX@185.185.69.118) left #AutoNomic: Ping timeout: 268 seconds
17.07.18 08:42:09*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
17.07.18 08:42:34*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
17.07.18 08:56:45*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tcrsuakihoqhhekz) left #AutoNomic: Quit: Connection closed for inactivity
17.07.18 11:46:52*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yiuxswauzwdukexq, stoopkid: stoopkid)
17.07.18 12:14:07*** Join: discarde` (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
17.07.18 12:15:38*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 244 seconds
17.07.18 12:55:14*** Quit: discarde` (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 260 seconds
17.07.18 15:30:43*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
17.07.18 19:21:14*** Quit: koom (~sirdancea@98.233.253.142) left #AutoNomic: Ping timeout: 265 seconds
17.07.18 22:08:56*** Join: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net, sirdancealot: koo5)
17.07.18 22:35:17*** Join: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net, (unauthenticated): realname)
17.07.18 22:36:04*** Quit: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net) left #AutoNomic: Remote host closed the connection
17.07.18 22:36:26*** Join: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net, (unauthenticated): realname)
17.07.18 22:56:01*** Join: koom__ (~koom@c-73-86-120-19.hsd1.md.comcast.net, (unauthenticated): realname)
17.07.18 22:58:24*** Quit: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net) left #AutoNomic: Ping timeout: 244 seconds
18.07.18 00:22:34*** Quit: koom__ (~koom@c-73-86-120-19.hsd1.md.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
18.07.18 00:22:42*** Quit: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
18.07.18 03:55:51<stoopkid> dmiles: yo
18.07.18 03:59:23<stoopkid> got a question for you
18.07.18 03:59:29<stoopkid> kb:
18.07.18 03:59:32<stoopkid> zero a Nat.
18.07.18 03:59:47<stoopkid> {?x a Nat} => {?x suc ?y. ?y a Nat}.
18.07.18 03:59:48<stoopkid> query:
18.07.18 03:59:55<stoopkid> zero a ?a. ?a suc ?a.
18.07.18 04:00:21<stoopkid> would you say this query should succeed or fail?
18.07.18 05:36:52*** Join: koom (~sirdancea@c-73-86-120-19.hsd1.md.comcast.net, sirdancealot: koo5)
18.07.18 05:37:20*** Join: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net, (unauthenticated): realname)
18.07.18 06:09:27*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
18.07.18 06:15:52*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
18.07.18 06:20:45*** Quit: koom_ (~koom@c-73-86-120-19.hsd1.va.comcast.net) left #AutoNomic: Ping timeout: 256 seconds
18.07.18 11:00:21*** Quit: koom (~sirdancea@c-73-86-120-19.hsd1.md.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
18.07.18 15:51:58*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
18.07.18 15:52:23*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
19.07.18 17:35:45<HMCa> logicmoo: also how did that etp short end up for you?
19.07.18 20:06:33*** Netsplit: *.net *.split (Use /WL to see who left)
19.07.18 20:10:37*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-rhunrbdcoznavjfg) left #AutoNomic: Ping timeout: 256 seconds
19.07.18 20:11:03*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-szciqgkjeilmpoul) left #AutoNomic: Ping timeout: 256 seconds
19.07.18 20:48:16*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-tfmzbctitiyuwvzw, (unauthenticated): @koo5:matrix.org)
19.07.18 21:44:02*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-zangztpyksfrzuzz, (unauthenticated): @genuinelyfx:matrix.org)
19.07.18 21:58:31*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-zrhjdmkqoqgblgzh, (unauthenticated): @lexxus:matrix.org)
20.07.18 03:00:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yiuxswauzwdukexq) left #AutoNomic: Quit: Connection closed for inactivity
20.07.18 05:42:53*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-zangztpyksfrzuzz) left #AutoNomic: Remote host closed the connection
20.07.18 05:42:57*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-zrhjdmkqoqgblgzh) left #AutoNomic: Remote host closed the connection
20.07.18 05:42:59*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-tfmzbctitiyuwvzw) left #AutoNomic: Remote host closed the connection
20.07.18 05:53:01*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-feeztmutzmuyzuje, (unauthenticated): @koo5:matrix.org)
20.07.18 06:36:19*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-pumnrsdzizslzrul, (unauthenticated): @genuinelyfx:matrix.org)
20.07.18 06:36:27*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-kezzrtkekqnruabc, (unauthenticated): @lexxus:matrix.org)
20.07.18 08:16:56*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cwmxkpwlbcwbdfac, stoopkid: stoopkid)
20.07.18 10:46:20*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cwmxkpwlbcwbdfac) left #AutoNomic: Quit: Connection closed for inactivity
20.07.18 13:08:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jyswezbgugpoceqe, stoopkid: stoopkid)
20.07.18 17:16:34*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-kezzrtkekqnruabc) left #AutoNomic: Ping timeout: 260 seconds
20.07.18 17:16:35*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-feeztmutzmuyzuje) left #AutoNomic: Ping timeout: 260 seconds
20.07.18 17:17:06*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-pumnrsdzizslzrul) left #AutoNomic: Ping timeout: 256 seconds
20.07.18 18:09:09*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-zrrfilejzmsgdmwj, (unauthenticated): @koo5:matrix.org)
20.07.18 18:50:59*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-aicspkuaevqiehlm, (unauthenticated): @genuinelyfx:matrix.org)
20.07.18 18:51:13*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-oujkgyosohaylzlg, (unauthenticated): @lexxus:matrix.org)
21.07.18 00:58:50*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-02-70-51-86-182.dsl.bell.ca) left #AutoNomic: Ping timeout: 268 seconds
21.07.18 01:03:42*** Join: Deadhand (~deadhand@kntaon1614w-lp130-02-70-50-212-119.dsl.bell.ca, (unauthenticated): deadhand)
21.07.18 01:14:46*** Quit: Deadhand (~deadhand@kntaon1614w-lp130-02-70-50-212-119.dsl.bell.ca) left #AutoNomic: Ping timeout: 264 seconds
21.07.18 01:19:43*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-56.dsl.bell.ca, (unauthenticated): deadhand)
21.07.18 02:05:44<HMCa> i guess logicmoo is just ignoring us? XD
21.07.18 16:32:14*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
21.07.18 16:32:38*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
22.07.18 11:15:00<koo5[m]> https://github.com/koo5/univar/blob/master/tests/simple/succ.tau
22.07.18 11:17:58<koo5[m]> Nvm
22.07.18 12:20:05*** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-hatgeqazkemefhkz, (unauthenticated): @nikaala:matrix.org)
22.07.18 16:18:10*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jyswezbgugpoceqe) left #AutoNomic: Quit: Connection closed for inactivity
22.07.18 19:11:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uwhsbomqkdbqnpek, stoopkid: stoopkid)
23.07.18 00:09:23*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uwhsbomqkdbqnpek) left #AutoNomic: Quit: Connection closed for inactivity
23.07.18 09:53:30*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-56.dsl.bell.ca) left #AutoNomic: Read error: Connection reset by peer
23.07.18 09:53:53*** Join: Deadhandd (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
23.07.18 11:34:05*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jhfkohgluidgkuux, stoopkid: stoopkid)
23.07.18 14:04:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jhfkohgluidgkuux) left #AutoNomic: Quit: Connection closed for inactivity
23.07.18 14:57:11*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tlesoxeeelwcxqxi, stoopkid: stoopkid)
23.07.18 20:23:38*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
23.07.18 21:29:12*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
23.07.18 21:29:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
24.07.18 00:47:15*** Join: discarde` (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
24.07.18 00:51:22*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 256 seconds
24.07.18 04:14:21*** Join: Guest88405 (~root@118-86-185-36.kakt.j-cnet.jp, (unauthenticated): root)
24.07.18 05:15:13*** Quit: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 248 seconds
24.07.18 05:24:14*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
24.07.18 06:30:25*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 248 seconds
24.07.18 06:44:59*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
24.07.18 11:11:38*** Quit: discarde` (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
24.07.18 20:22:20*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
25.07.18 04:52:08*** Quit: vbmithr (~vb@luminar.eu.org) left #AutoNomic: Quit: leaving
25.07.18 06:56:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tlesoxeeelwcxqxi) left #AutoNomic: Quit: Connection closed for inactivity
25.07.18 10:07:01*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mwnfmariracxlqmu, stoopkid: stoopkid)
25.07.18 12:16:22*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mwnfmariracxlqmu) left #AutoNomic: Quit: Connection closed for inactivity
25.07.18 14:24:28*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-soviytyplrznxjsx, stoopkid: stoopkid)
25.07.18 16:16:57*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
25.07.18 16:17:16*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
25.07.18 20:52:26*** Join: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net, sirdancealot: koo5)
25.07.18 23:08:48*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Read error: Connection reset by peer
25.07.18 23:09:14*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
25.07.18 23:19:27*** Quit: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
26.07.18 07:40:45*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
26.07.18 08:00:49*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
26.07.18 08:06:45*** Join: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net, sirdancealot: koo5)
26.07.18 09:21:57*** Quit: koom (~sirdancea@c-73-86-120-19.hsd1.va.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
26.07.18 10:00:46*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-soviytyplrznxjsx) left #AutoNomic: Quit: Connection closed for inactivity
26.07.18 11:35:57*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
26.07.18 11:40:18<nilli> hey there deves :) still playing with lambda and got a result which surprised me
26.07.18 11:43:45<nilli>  ((lambda x. (lambda y. (x x y y y y y x y)) 1) (lambda t.t) 2 )  that was what I entered assuming each y will be replaced with (lambda t.t) and then will take the 2 . but instead it exchange each y with a different lambda expression
26.07.18 11:45:22<nilli>  (((((((((1 1)(λt.t))(λx0.x0))(λx1.x1))(λx2.x2))(λx3.x3))1)(λx4.x4))2)
26.07.18 11:49:28<nilli> that is after of it added the missing ( )  as  intended (it understood me) ((((λx.(λy.((((((((x x)y)y)y)y)y)x)y)))1)(λt.t))2)
26.07.18 11:51:11<nilli> I did check is with the simple example to make sure I did not created a wrong meaning once adding the lambda expression as argument.
26.07.18 11:52:49<nilli> ((lambda x. (lambda y. (x x y y y y y x y)) 1) 2 )
26.07.18 11:55:42<nilli>  (((λx.(λy.((((((((x x)y)y)y)y)y)x)y)))1)2) and the result ((((((((1 1)2)2)2)2)2)1)2)
26.07.18 12:06:05*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-odvbhmrnntygwpma, stoopkid: stoopkid)
26.07.18 12:13:05<nilli> ok stoopkid I also have one more clarification to make after going through the notes (and before getting back into agda)
26.07.18 12:18:25<nilli> 1. propositions are types and types are propositions
26.07.18 12:19:23<nilli> 2. objects are proves are programs are proof trees
26.07.18 12:20:18<nilli> * 2. objects are proves (proof trees), are programs
26.07.18 12:21:50<nilli> 3. propositions are the set of their proves
26.07.18 12:29:33<nilli> thus this is also true? 4. A set is the collection of proves which make up a proposition.
26.07.18 12:31:40<stoopkid> hey nilli, not sure what your question is with the lambdas
26.07.18 12:31:42<nilli> which then means that a set is a type too
26.07.18 12:32:39<stoopkid> yes, set and type is pretty much the same thing, it's only "set *theories*" vs. "type *theories*" that are different
26.07.18 12:33:03<stoopkid> an MLTT type is slightly different from a ZFC set, for example
26.07.18 12:33:34<stoopkid> but the general idea of some kind of unordered, non-repeating container of elements is still the same
26.07.18 12:33:59<nilli> regarding the lambda I dont understand why each y take the lambda and make it a different expression which I assume will them can take a different argument
26.07.18 12:35:02*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
26.07.18 12:36:38<nilli> regarding the type thinngi... so I can say that different programs makes a set? for some reason that sound very counter intuitive
26.07.18 12:42:55<nilli> but then also what is the difference between (A:set) and A in agda if A is a type and type is a set?
26.07.18 13:18:58<stoopkid> nilli: not sure what you mean wrt " different programs makes a set"
26.07.18 13:19:53<stoopkid> nilli: i think you're getting confused wrt the multiple definitions of "is"
26.07.18 13:20:35<stoopkid> really it's Type = Set
26.07.18 13:20:38<stoopkid> they are the same thing
26.07.18 13:21:05<stoopkid> on the other hand, A is an object inside the container Set
26.07.18 13:26:02<HMCa> yes, different programs make up a set... for example Nat is comprised of the programs: "z", "(S z)", "(S (S z))", "(S (S (S z)))"...
26.07.18 13:26:15<HMCa> set/type
26.07.18 13:26:20<nilli> so when I have that expression in agda ----  id4 : (A : Set) → (B : Set) → A → B → A  ---- A and B are not types only object?
26.07.18 13:26:54<HMCa> wrt the second question, I think she's headed toward the Girard paradox stuff ;-)
26.07.18 13:27:20<HMCa> if z:Nat and Nat:Set then Set:Set or...? :-)
26.07.18 13:27:50<HMCa> Boxes and Stars? ;-)
26.07.18 13:28:36<HMCa> almost time to start blowing her mind w/ the universes stuff... :-D
26.07.18 13:30:45<nilli> hi HMC im allways ready for more mind blowing but still not got enough with the agda. (got lambda  sidetracked  :))
26.07.18 13:31:39<HMCa> nilli: A/B are there objects that are types... "Set" is itself also an object and a type... in mltt when we say "Set" we really mean "(Set 0)"... and we intend "(Set 0):(Set 1)" and "(Set 1):(Set 2)" and generally "(Set n):(Set n+1)"...
26.07.18 13:32:24<HMCa> (... but that is even a simplification, but don't worry about that much for now, heh)
26.07.18 13:33:47<nilli> so back to the above expression what actualy is the difference between A:set and A
26.07.18 13:35:12<HMCa> the first parameter of type "A:Set" will be some type argument, the third parameter of type "A" will be some object in A
26.07.18 13:37:47<HMCa> so we could have a signature like "(X:Set 1) -> (Y:X) -> Y -> foo"... which takes a first parameter of some type of type of types, a second parameter of a type of type of that type of type of types, a third parameter of an object in that type...
26.07.18 13:38:36<HMCa> and evaluating to an object in foo
26.07.18 13:38:51<HMCa> from there things quickly get mindbending, heh
26.07.18 13:40:27<HMCa> long story short, types are themselves objects in the type Set 0, and the type Set 0 is itself an object in the type Set 1, and so on
26.07.18 13:41:13<nilli> lol so in a way a type is a lambda abstraction and a set is a lambda application? :\
26.07.18 13:41:43<HMCa> eh, not quite
26.07.18 13:42:40<nilli> yes not realy but I see why I confused it :)
26.07.18 13:46:14<nilli> since you can almost say that A --> B is  B is the object in the set A . that is since under the assumption of A then B
26.07.18 13:47:03<nilli> simple people ,   logic not mathematical logic :)
26.07.18 13:47:55<nilli>  *simple people  logic,  not mathematical logic :)
26.07.18 13:50:47<nilli> any way I get that  "types are themselves objects in the type Set 0, and the type Set 0 is itself an object in the type Set 1, and so on"
26.07.18 13:51:05<nilli> now that you said it clearly :)
26.07.18 13:51:32<nilli> and I even like it
26.07.18 13:57:50* HMCa doing 3 things at once btw, so appologies for slow responses here and there, heh
26.07.18 14:00:39<HMCa> you should like it!  The alternatives are all terrible, hehe... for example we could instead just put Set into itself like "Set:Set" but this leads to something we call the "type in type problem" aka "Girards paradox"... a nasty little logical inconsistency that has plauged programming languages for decades
26.07.18 14:03:27<nilli> ((((type set  n (type set n-1 (type set n-2 (type set  n-3)  or something like that   set n-1 is object in set n
26.07.18 14:04:14<nilli> in set n I mean
26.07.18 14:05:22<nilli> I just said it... cant even read properly what I write
                 <nilli> I love paradoxes
26.07.18 14:06:49<nilli> so lets check that paradox "Girards paradox" im googling it and we will see if I get it right
26.07.18 14:07:36<HMCa> if stoop explained Russel's paradox already then it should be easy, they are very related
26.07.18 14:08:13<HMCa> *Russell's
26.07.18 14:12:24<nilli> I dont think we got into the paradox yet  , im still at entry level of pre paradoxes, he head to just teach me the terms and their meaning. and show me what is a proof
26.07.18 14:13:29<nilli>  actualy we did talk about one paradox  that of something proving itself
26.07.18 14:15:17<nilli> so yah that was the one
26.07.18 14:17:13<nilli> .... yes I love that one
26.07.18 14:19:12<nilli> this is why I really instantly and very intuitively liked the "witness" trick in mltt.
26.07.18 14:19:21<HMCa> so in mltt we use this "cumulative universe hierarchy" to avoid the paradox loop of type-in-type
26.07.18 14:20:36<HMCa> usually this is a simple libear hierarchy like I described ("(set n):(set n+1)") but the fun fact is that it can also be nonlinear, just any tree of universes
26.07.18 14:20:41<HMCa> *linear
26.07.18 14:20:57<nilli> you assume and object that is the finite state of its own set
26.07.18 14:21:56<nilli> an
26.07.18 14:22:34<HMCa> the hierarchy need only be non-looped and have a singular "top" universe
26.07.18 14:24:00<nilli> what exactly is a universe ? :)
26.07.18 14:24:37<HMCa> a "set of sets" aka a "domain of discourse"
26.07.18 14:25:00<HMCa> "all the stuff we speak of" so to speak. ;-_
26.07.18 14:25:05<HMCa> *;-)
26.07.18 14:30:12<HMCa> one of the things that I really like about redprl is that it assumes a "structured metaverse"... it arranges its' (nonlinear) universe hierarchy with different kinds of universes distinguished by how the sets in the universe compose topologically... very cool stuff
26.07.18 14:30:19<nilli> well the staff that you speak of the staff that you speak of ........All the staff that you speak of  (when "all" is the witness ).... thus can collapse to "all the staff that we speak of"
26.07.18 14:30:50<nilli>  *you
26.07.18 14:31:16<nilli> but maybe we is better somehow :)
26.07.18 14:31:20<HMCa> right, we can always thunk of our "top" universe as being a set with a single object "the set of everything"
26.07.18 14:31:28<HMCa> *think
26.07.18 14:33:25<HMCa> anyway i gtr for a little bit, but... it is exciting to see you making good progress
26.07.18 14:33:55<HMCa> kudos to stoopkid and you both, is impressive
26.07.18 14:34:37<HMCa> if you told me a year ago that I'd see nilli writing lambda exprs and type signatures on irc I wouldn't have easily believed it... ;-)
26.07.18 14:35:02<nilli> so "there exist" is a witness that dose not allow to collaps the whole structure and force you to keep the entire tree right?
26.07.18 14:36:03<nilli> I mean sets not tree
26.07.18 14:36:26<HMCa> well, keep at least some portion
26.07.18 14:36:35<HMCa> could be a constrained subset
26.07.18 14:37:16*** Quit: koom (~sirdancea@98.233.253.142) left #AutoNomic: Ping timeout: 244 seconds
26.07.18 14:37:50<nilli> yes I can see that
26.07.18 14:39:24* HMCa bbiaf
26.07.18 14:39:28<HMCa> :-)
26.07.18 14:39:29<nilli> and yes stoop is a great teacher . that is since he really know what he talks about from any engle
26.07.18 14:40:00<nilli> I  need to go for a few hours so will get back later on
26.07.18 14:40:12<nilli> too
26.07.18 14:44:42*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
26.07.18 15:12:59*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
26.07.18 15:49:15*** Quit: koom (~sirdancea@98.233.253.142) left #AutoNomic: Ping timeout: 265 seconds
26.07.18 17:54:51*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
26.07.18 18:12:25<stoopkid> HMCa: well, i understand what the chase algorithm is but i don't see how it relates back to our datalog stuff
26.07.18 18:14:33<stoopkid> it'll take me a while to go through that paper, assuming it's even accessible enough for me at this stage
26.07.18 18:21:11<HMCa> the dlv paper?
26.07.18 18:21:44<stoopkid> "hex programs with existential quantification"
26.07.18 19:09:34<HMCa> yah, that
26.07.18 21:16:42*** Join: nilli (812c356c@gateway/web/freenode/ip.129.44.53.108, (unauthenticated): 129.44.53.108 - http://webchat.freenode.net)
26.07.18 21:19:58<nilli> so I will need an in house explanation to Girards paradox , I dont understand the notations in the explanations of given for it (ofc) and its too much work to try and get it this way.
26.07.18 21:23:26<nilli> (well maybe not that much work but I ruther spend the time on agda now :) )
26.07.18 22:07:39<koom> /join #autonomic-dev
26.07.18 22:08:04<stoopkid> hey nilli
26.07.18 22:12:53<nilli>  koo ,well I just pressed the link. but other wise I need to print /join  before the #autonomic-dev ?
26.07.18 22:13:07<nilli> hi stoop
26.07.18 22:13:21<nilli> how is school going?
26.07.18 22:14:44<stoopkid> its alright
26.07.18 22:16:06<nilli> I realized that I will have to do the proof tree of an expression in order to trace back how we got the short expression in the samples that we did on agda. (no short cuts I guess for now)
26.07.18 22:18:06<nilli>  That one :  modus-ponens : (A : Set) → ((B : Set) → (A → ((A → B) → B)))  modus-ponens = λ q → (λ r → (λ x → (λ f → f x)))
26.07.18 22:20:02<nilli> after all the lambda games I forgot how I get it as an expression form the tree to begin with . lol
26.07.18 22:21:23<nilli> so I hope that by tomorrow I will be able to go back and understand what we did on agda so far. then I will get back to the book (drive me crazy to see things I got before and cant make sense of them now)
26.07.18 22:28:33<nilli> ok.I guess good night for now
26.07.18 22:37:42*** Quit: nilli (812c356c@gateway/web/freenode/ip.129.44.53.108) left #AutoNomic: Ping timeout: 252 seconds
27.07.18 00:20:40*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 245 seconds
27.07.18 00:33:43*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
27.07.18 02:40:09<stoopkid> ok now i *actually* understand what the chase algorithm is lol
27.07.18 03:07:38<HMCa> oh?
27.07.18 03:08:38<stoopkid> at least the chase algorithm for testing whether a decomposition of a relation is lossless, not sure if that's the right chase algorithm :)
27.07.18 03:15:05<stoopkid> i haven't proven yet that the algorithm always terminates with the correct answer, but i can at least see that when it answers in the positive then the decomposition is necessarily lossless
27.07.18 03:16:06<stoopkid> i still have to prove that halting with the negative answer necessarily means that the decomposition is lossy and couldn't just mean that it got "stuck"
27.07.18 03:17:51<HMCa> ok, and how about the dlv paper?
27.07.18 03:18:01<HMCa> any progress with that?
27.07.18 03:19:31<stoopkid> haven't even really started, mostly just been trying to get up to speed with all this new (for me) database terminology and the basic idea of the chase algorithm a la wikipedia
27.07.18 03:29:36<stoopkid> idk, i can't even read this paper tbh
27.07.18 03:36:09<HMCa> howso?
27.07.18 03:36:17<HMCa> did you look at the slide deck?
27.07.18 03:36:20<HMCa> it helps
27.07.18 03:37:58<stoopkid> got a link?
27.07.18 03:45:13<HMCa> tinyurl/Hexistential
27.07.18 03:53:54<stoopkid> datalog programs are kinda weird with the scope of the existential quantification
27.07.18 03:54:32<stoopkid> forall x, exists y, (conj[x] -> atom[x' U y])
27.07.18 03:55:09<stoopkid> so forall x, the y already exists regardless of whether conj[x] is satisfied
27.07.18 03:56:26<stoopkid> i'm not sure whether that makes a difference in practice though if we can only access the existential via the rule-head and can't really reference them independently of that
27.07.18 03:57:18<stoopkid> can only access them via the rule-head, in the situation where conj[x] is satisfied**
27.07.18 03:57:32<stoopkid> unless i'm confused about something here
27.07.18 04:00:41<dmiles> in the example i dont think y exists without x
27.07.18 04:01:18<dmiles> also only when  conj[x]  is satisfied
27.07.18 04:01:33<stoopkid> heya dmiles
27.07.18 04:01:48<dmiles> the number of Ys is based on how many  conj[x] are true
27.07.18 04:02:03<stoopkid> hrm..
27.07.18 04:02:42<stoopkid> it doesn't appear to me that that's the case, from the formula
27.07.18 04:02:59<dmiles> well  other ys can exist of course
27.07.18 04:03:02<stoopkid> forall x, exists y, ...something...
27.07.18 04:03:21<dmiles> like for example...   all(P,exists(H, person(P)=>(heart(H) & has(P,H)) ))
27.07.18 04:03:24<stoopkid> so forall x, there exists some y, regardless of the "something"
27.07.18 04:03:36<dmiles> heart(sk11(P)):- person(P).
                 <dmiles> has(P,sk11(P)):- person(P).
27.07.18 04:04:04<stoopkid> the y just might not be one such that atom[x' U y]
27.07.18 04:04:23<stoopkid> but it will be at least whenever conj[x] is the case
27.07.18 04:04:57<dmiles> ok yes
27.07.18 04:05:05<dmiles> that is even true in my system
27.07.18 04:05:27<dmiles> if  atom[x' U y] somehow violates.. i veto the creation of a the y
27.07.18 04:05:47<dmiles> if  atom[x' U y] somehow violates.. i veto the creation of the y that exists in violation
27.07.18 04:07:22<stoopkid> we might say that the only way to access the y's is via the atom[x' U y]'s, and to access those we need to satisfy the conj[x], would you agree?
27.07.18 04:07:25<dmiles> for isntance  all(P,exists(H, person(P)=>(male(H) & mother(P,H)) ))
27.07.18 04:08:28<dmiles> i would agree
27.07.18 04:09:45<stoopkid> and so we never have access to the y's that go along with the x's that don't satisfy conj[x]
27.07.18 04:10:13<stoopkid> you even veto their creation entirely
27.07.18 04:11:09<dmiles> i agree, i think
27.07.18 04:11:20<stoopkid> so from the perspective of some entity that could only access these y's via the atoms that use them, the rule "forall x, exists y, (conj[x] -> atom[x' U y])" is equivalent to "forall x (conj[x] -> (exists y, atom[x' U y]))" ?
27.07.18 04:11:47<dmiles> i use prinipile of explaosion to to constrain conj[x]
27.07.18 04:11:57<stoopkid> (entities like us when we actually run a query against the kb)
27.07.18 04:12:21<dmiles> i use prinipile of explosion (naughty atom[x' U y]s) to constrain conj[x]s
27.07.18 04:12:36<dmiles> exists though can be a sneaky animal though
27.07.18 04:12:58<dmiles> exists means "pleaze find a valid sane y"
27.07.18 04:13:16<stoopkid> lol
27.07.18 04:13:17<dmiles> exists means "pleaze create at least a valid sane y"
27.07.18 04:13:32<dmiles> though that might not be possible
27.07.18 04:14:06<dmiles> though there are interpreations that some ys are going to be valid
27.07.18 04:14:47<dmiles> for example for all pairs of integers there exists at least one integer that is between them
27.07.18 04:15:23<dmiles> this might mean we've created hyper-integers or not
27.07.18 04:16:31<dmiles> i guess though this is all just about how defeasable each axiom is allowed to be
27.07.18 04:16:50<dmiles> each rule*
27.07.18 04:16:51<stoopkid> so do you know what this chase algorithm is about in dlv? seems to be what HMC's on about these days
27.07.18 04:17:07<HMCa> hi dmiles
27.07.18 04:17:18<HMCa> dmiles: you never answered our questions :-P
27.07.18 04:17:28<dmiles> enforcing implication of data dependencies"
27.07.18 04:17:31<dmiles> i like that akleready
27.07.18 04:17:54<dmiles> what everyone missies so often is that rules are not about freenom they are about enforcing
27.07.18 04:18:01<HMCa> stoopkid: well, really what i'm on about is alias tracking, but we're trying to work up to it, heh
27.07.18 04:18:10<dmiles> not about freedom they are about enforcement
27.07.18 04:18:40<stoopkid> dmiles: true
27.07.18 04:20:00<stoopkid> HMCa: is the chase algorithm for checking lossless decomposition even the right chase algorithm? i can't tell
27.07.18 04:21:34<dmiles> https://www.mat.unical.it/kr2012/shy.pdf
27.07.18 04:21:39<dmiles> is what i am looking at
27.07.18 04:21:57<dmiles> sec 2.4
27.07.18 04:23:26<dmiles> that is the one i used fro Logicmooo.. i never knew it was called Chase
27.07.18 04:24:16<HMCa> stoopkid: yes, but what the dlv paper uses is specialized
27.07.18 04:24:21<stoopkid> why does it seem like this is just what is elsewhere called "forward chaining inferencing" ?
                 <dmiles> how i dirive the fixed pont is that i do it via fwd chaining
                 <dmiles> jynx
                 <stoopkid> lol
27.07.18 04:24:46<dmiles> well its leashed fwd chianing
27.07.18 04:24:55<stoopkid> what does the "leashed" mean?
27.07.18 04:24:57<dmiles> the leash is that you are tracking how much cruft you are creating
27.07.18 04:25:17<dmiles> you dont create cruft that is simular to other cruft
27.07.18 04:25:43<HMCa> its not exactly directional, either way
                 <dmiles> so one looks that the atoms it makes and answures it only mkakes the first level
27.07.18 04:25:52<stoopkid> sounds like a good thing but i'm not sure i understand, got an example?
27.07.18 04:26:00<dmiles> right others do it backchaining (i used to)
27.07.18 04:26:34<dmiles> i do it fwd chaing now just because  can detect when i my chase is messed up easier
27.07.18 04:26:58<dmiles> instead of bacwd when i have no idea what stupidity i am up to
27.07.18 04:27:18<HMCa> dmiles: how did that etp short work out?
27.07.18 04:27:51<dmiles> ah.. not good i lost 35k .. if i took your advice i only lost 28k
27.07.18 04:28:09<HMCa> heh
27.07.18 04:28:19<dmiles> now i am ever so slowing making it back
27.07.18 04:28:48<dmiles> made 10k back so far
                 <dmiles> sucks though
27.07.18 04:28:58<dmiles> i was going to hire poepe to work on logicmoo.. now thjat is scarier
27.07.18 04:29:16<dmiles> i need to be making enoyugh i can affard a couple people
27.07.18 04:29:34<dmiles> losiong 25k sucks.. that is like 1/2 years wages
27.07.18 04:29:42<dmiles> losiong 35k sucks.. that is like 1/2 years wages
27.07.18 04:30:19<dmiles> how i sorta trcked him is i found another currency and made a fake buy at old price
27.07.18 04:30:45<dmiles> he brought dowbn the prices of all of the pairs to meet that fake me
27.07.18 04:31:05<dmiles> i only saved maybe 3-5k with this trick
27.07.18 04:31:23<dmiles> he found me out when i withdrew the order before he priced it b\uyable
27.07.18 04:31:46<dmiles> and would not fall for the trick later
27.07.18 04:31:57<HMCa> "he"?
27.07.18 04:32:07<dmiles> the one dude i assume that ran the botnet
27.07.18 04:32:30<dmiles> he and his four or five buddies maybe
27.07.18 04:33:21<HMCa> yah, more likely a "they" of some sort I'd guess, heh
27.07.18 04:33:23<dmiles> i also found his secret to deciding what he's buy of hiself.. his pennies was his ordinal
27.07.18 04:33:26* HMCa shrugs
27.07.18 04:33:59<dmiles> i put on in on his penny and he bought it
27.07.18 04:34:12<dmiles> if my penny was wrong.. he'd set a bid that pushed me out
27.07.18 04:35:23<dmiles> but the damage was already so bad before i knew what was goign on (at the point i showed you) i would have not lasted 4 more days
27.07.18 04:36:09<dmiles> now i only play high volume anonmous stuff
27.07.18 04:37:20<dmiles> like EOS
27.07.18 04:37:34<dmiles> is the smallest
27.07.18 04:39:11<dmiles> soemtyiems i have to laught when all my margins are losing money.. "all i had to do is the oppostite of what i think i should do"
27.07.18 04:39:54<stoopkid> hehe
27.07.18 04:40:37<dmiles> liek how can i be wrong 100% of the time.. i get 50% of thje time
27.07.18 04:40:56<dmiles> liek how can i be wrong 100% of the time??!  i must be onto something!
27.07.18 04:41:18<HMCa> hehe
27.07.18 04:41:20<HMCa> so trade contrarian
27.07.18 04:42:02<dmiles>  what i do now is open a long and a short on each currency
27.07.18 04:42:12<HMCa> and then at least when you're wrong, you get to know that you were right, at least.
27.07.18 04:42:25<dmiles> and after i relaize which was the most retarded .. i close it
27.07.18 04:42:39<HMCa> that's a terrible approach, heh
27.07.18 04:43:05<HMCa> wash trading is expensive
27.07.18 04:43:38<HMCa> open on paper, instead, and then just open one or the other in the real
27.07.18 04:43:46<dmiles> well i leanred if i am not too far off i can actualy close both postivily
27.07.18 04:44:26<dmiles> like 12-48 hours appart
27.07.18 04:44:46<HMCa> ehhh, i'm skeptical that you're really ready for straddles, heh
27.07.18 04:45:56<HMCa> no offense intended, but... good straddles are not newb territory :-P
27.07.18 04:46:15<HMCa> anyway i gtr
27.07.18 04:46:37<HMCa> you still didn't answer stoops question... ;-)
27.07.18 04:46:43<dmiles> i probly jsut dotn make good money.. i might make 100$ a day
27.07.18 04:46:44<HMCa> and I'm curious to see how you'd answer it.
27.07.18 04:47:10<dmiles> whuich q ?
27.07.18 04:48:04<dmiles> leashed =  that the atoms it makes and answers with it only mkakes the first level
27.07.18 04:48:38<dmiles> this is called Cahe level 0
27.07.18 04:48:47<dmiles> this is called "Chase level 0"
27.07.18 04:50:12<dmiles> The level of an atom in chase(P) is inductively defined as follows. Each atom in data(P) has level 0. The level of each atom constructed  after the application of a restricted chase step is obtained from the highest level of the atoms in  σ(body(r)) plus one. For each k ≥ 0, chase k (P) denotes the subset of chase(P) containing only and all the atoms of level up to k. A
27.07.18 04:51:01<dmiles> meaning all backchains must be k>=0
27.07.18 04:51:25<dmiles> so in proctical terms
27.07.18 04:51:31<dmiles> if all woemen have mothers
27.07.18 04:51:45<dmiles> i only create the first mother
27.07.18 04:52:46<dmiles> if aother rule takes place that make them have mother and father..
27.07.18 04:53:17<dmiles> they now have a mother and grandmotehr
27.07.18 04:53:37<dmiles> but not great grandmotehr
27.07.18 04:54:36<dmiles> the identy of the grandmother is contingent as part of the grandfather
27.07.18 04:54:56<dmiles> " make them have mother and father"
27.07.18 04:55:01<stoopkid> hrm, still not following
27.07.18 04:55:19<dmiles> i am saying i create new terms but only at obne step
27.07.18 04:55:41<dmiles> instead of the infinate steps
27.07.18 04:56:17<dmiles> i avoid infinate steps by keying off the atoms in the rule
27.07.18 04:56:47<stoopkid> at one step "of the chase algorithm" ?
27.07.18 04:56:49<dmiles> this is slightly better than the naive way iof keying off the rule id
27.07.18 04:58:05<dmiles> when each skolem producing chain is a chase step
27.07.18 04:58:19<stoopkid> so the example would be something like... "Bill a Person. {?x a Person} => {?x mother ?y. ?y a Person}"
27.07.18 04:58:50<dmiles> right i actualy miusinformed i do two steps
27.07.18 04:59:04<dmiles> i do bills mom and his moms mom there
27.07.18 04:59:18<stoopkid> so first we get "Bill a Person" at chase level 0 ?
27.07.18 04:59:35<dmiles> "the highest level of the atoms in
27.07.18 04:59:43<dmiles> σ(body(r)) plus one. "
                 <dmiles> yes
27.07.18 05:00:09<dmiles> that is the anteceedant of level 1
27.07.18 05:00:11<dmiles> that is the anteceedant of level 0
27.07.18 05:00:16<stoopkid> and then we get "[ is mother of Bill] a Person" at chase level 1?
27.07.18 05:00:18<dmiles> bills mom occurs at level 0
27.07.18 05:00:27<stoopkid> hrm
27.07.18 05:00:38<dmiles> oh .. naw i i mean one off from what you said
27.07.18 05:00:53<dmiles> or yes
27.07.18 05:01:08<dmiles> bill is a poer4son therefore mother of bill exists is level 0
27.07.18 05:01:30<dmiles>  mother of bill exists and she has a mother uis level 1
27.07.18 05:02:03<dmiles> one more new mohter will not make a new atom
27.07.18 05:02:08<stoopkid> hrm..
27.07.18 05:02:19<dmiles> so that is why it stops there
27.07.18 05:02:25<stoopkid> "bill is a poer4son therefore mother of bill exists is level 0"
27.07.18 05:02:51<stoopkid> " Each atom in data(P) has level 0. "
27.07.18 05:03:33<dmiles> yeah everything cvan be said to start off another
27.07.18 05:03:54<dmiles> i think that applies when two rules are usinjg each otehr
27.07.18 05:03:58<stoopkid> it seems like the definition is saying that chase levels are something assigned to atoms rather than these "...atom... therefore ...atom..."s
27.07.18 05:04:26<dmiles> or in the case that one rule is using 10   data(P)s
27.07.18 05:04:42<dmiles> all 10 are level 0
27.07.18 05:05:31<dmiles> person(bill) person(joe) person(bob)
27.07.18 05:05:41<dmiles> are 3 level 0s
27.07.18 05:06:01<dmiles> atom in this case means "ground fact"
27.07.18 05:06:20<dmiles> (instead of prolog sense)
27.07.18 05:06:28<dmiles> (which i used above ;P)
27.07.18 05:06:56<dmiles> but like  mother(P,motherOf(P)).  is a single atom
27.07.18 05:07:31<dmiles> (not "ground atom".. but "closed atom")
27.07.18 05:07:42<dmiles> closed atom:  mother(P,motherOf(P)).
27.07.18 05:07:54<dmiles> open atom:  mother(Q,motherOf(P)).
27.07.18 05:08:27<dmiles> most people think of atoms as closed
27.07.18 05:08:33<dmiles> like in that paper
27.07.18 05:09:14<dmiles> so every data(P)s is where there is a closed P
27.07.18 05:09:25<dmiles> P rerpesenting some atomic (not sentence) statement
27.07.18 05:10:08<dmiles> each P representing some atomic (non-sentence) statement is level 0
27.07.18 05:11:51<dmiles> though the alrythem they present there is merely forward chaining
27.07.18 05:12:19<dmiles> Procedure 1 CHASE(P)
                 <dmiles> Input: Datalog∃
                 <dmiles> program P
                 <dmiles> Output: A Universal Model chase(P) for P
27.07.18 05:12:20<dmiles> 1. C := data(P)
                 <dmiles> 2. NewAtoms := ∅
                 <dmiles> 3. for each r ∈ P do
27.07.18 05:12:22<dmiles> 4. for each firing substitution σ for r w.r.t. C do
                 <dmiles> 5. if ( (C ∪ NewAtoms) 6|= σ(head(r)) )
                 <dmiles> 6. add(ˆσ(head(r)), NewAtoms)
                 <dmiles> 7. if (NewAtoms 6= ∅)
                 <dmiles> 8. C := C ∪ NewAtoms
27.07.18 05:12:24<dmiles> 9. go to step 2
27.07.18 05:12:25<dmiles> 10. return C
27.07.18 05:13:03<dmiles> i am sort of right /wrong in my  data(P)
27.07.18 05:13:20<dmiles> i am only accidently correct
27.07.18 05:15:04<dmiles> I actualyl described closer to "parsimonious-CHASE(P)"
27.07.18 05:16:23<dmiles> parsimoniously the mother of the mother is the same atoms as the mother of the mothers mother
27.07.18 05:17:07<dmiles> its like  once you done:   succ(succ(_))
27.07.18 05:17:24<dmiles> you dont need  succ(succ(succ(_)))
27.07.18 05:18:21<dmiles> i was saying succ(0)  level 0   succ(succ(_)) level 1
27.07.18 05:19:19<dmiles> thoguh the document might say integer(0) is levle 0
27.07.18 05:19:49<dmiles> i wanted to apply one level of work    nteger(0)  => integer(succ(0))
27.07.18 05:20:44<dmiles> so basicalyl this is about..      integer(X)  => integer(succ(X))   not looping infinately.. but at least enough to be usefull
27.07.18 05:21:02<stoopkid> what is the |= that it's doing?
27.07.18 05:21:23<dmiles> assertign new KB
27.07.18 05:21:40<dmiles> wel ooops that the next line
27.07.18 05:22:03<dmiles> oh that is comparing to see if they are "differnt"
27.07.18 05:22:24<dmiles> if they are a differnt sort of implication
27.07.18 05:23:03<dmiles> "6|="  in PDF means "not implies"
27.07.18 05:24:53<dmiles> line 5 says.. when you apply the the logical trasnform.. ensure that it really is making something new
27.07.18 05:25:14<dmiles> had it .. add it with proof of attoms
27.07.18 05:25:27<dmiles> line 6 says:  add it .. add it with proof of attoms
27.07.18 05:26:12<stoopkid> ah i see
27.07.18 05:26:42<stoopkid> so what's the ||- doing then? heh
27.07.18 05:27:36<dmiles> line which ?
27.07.18 05:28:17<stoopkid> definition 3.1
27.07.18 05:29:33<stoopkid> the original chase algorithm there is basically just doing forward chaining with no constraints to make it always terminate?
27.07.18 05:30:17<dmiles> right i think the 2nd version is just a smarter than vanila head matching
27.07.18 05:30:38<dmiles> first version is jsutr matching atomic facts agaisnt atomic facts
27.07.18 05:30:57<dmiles> the first version will probly terminate in many cases
27.07.18 05:31:04<dmiles> the versino i was giving  integer(X)  => integer(succ(X))
27.07.18 05:31:32<dmiles> i think possibly requires the second version
27.07.18 05:31:50<dmiles> i just didnt know anyone was still simple enough to think the first version was usefull
27.07.18 05:32:18<dmiles> so i wanted to beleive it was the doing what the 2nd does
27.07.18 05:32:44<dmiles> i just didnt know anyone was still expecting KB to be that simple
27.07.18 05:33:04<stoopkid> so what's the magic in the ||- that makes it terminate even for this  integer(X)  => integer(succ(X)) rule?
27.07.18 05:36:08<dmiles> i need tro undderstand how they see ||- and |= differntly
27.07.18 05:37:03<dmiles> ||- is subst ?
27.07.18 05:37:15<dmiles> |= is impl ?
27.07.18 05:37:33<dmiles> see 2.3
27.07.18 05:40:20<stoopkid> |= seems to be "satisfies"
27.07.18 05:40:32<dmiles> in my mental language  ||- means syntaxtical manipulaions
27.07.18 05:41:18<dmiles> a |= means  logical manipulaions
27.07.18 05:43:28*** Quit: koom (~sirdancea@98.233.253.142) left #AutoNomic: Ping timeout: 256 seconds
27.07.18 05:44:17<dmiles> the machine of termionating  integer(X)  => integer(succ(X))   for me anyways is i see that i am adding no new proof
27.07.18 05:44:45<dmiles> the magic of termionating  integer(X)  => integer(succ(X))   for me anyways is i see that i am adding no new proof
27.07.18 05:46:12<dmiles> one can terminate based on the fact new new heads are being created
27.07.18 05:46:24<dmiles> or on can terminate off of no new rules are being leveraged
27.07.18 05:46:47<dmiles> one can terminate based on the fact no new heads are being created
27.07.18 05:47:12<dmiles> or terminate off the fact that every head you create is a diriviative of another head you created
27.07.18 05:47:46<dmiles> or every reule application you are abotu to use is a same shaped set of plugged in values
27.07.18 05:53:03<stoopkid> hrm, i think i sort of get the idea.. how do you actually perform this check though?
27.07.18 05:58:50<dmiles> https://github.com/TeamSPoon/pfc/blob/master/prolog/pfc2.0/mpred_core.pl#L1376-L1381
27.07.18 06:00:17<dmiles> mpred_post12 line 1281 is the toplevle
27.07.18 06:01:18<dmiles> well it starts way above there
27.07.18 06:01:53<dmiles> i check to see if the Head is new.. or if it is a variant of another head
27.07.18 06:02:13<dmiles> i use entire rules and pretend they are heads
27.07.18 06:02:38<dmiles> so if i actualyl reproprotcate the isntancianted rule to see if its new
27.07.18 06:03:20<dmiles> i am able to see if the instanccation is unieque or variabnt
27.07.18 06:03:44<dmiles> i am doing this in a queue
27.07.18 06:04:08<dmiles> so i notice that the reprop in the same cycles
27.07.18 06:04:23<dmiles> so i notice that the reprop is happening in the same cycles
27.07.18 06:04:50<dmiles> i alsio check if i am adding the saem "support" proofs
27.07.18 06:05:34<dmiles> so in otherwords  i spearate the  facthead, rulehead and bodyterm
27.07.18 06:06:22<dmiles> so i get 8 possible ways of seeing the recursion
27.07.18 06:06:57<dmiles> 1/0=facthead, 1/0=rulehead and 1/0=bodyterm
27.07.18 06:07:59<dmiles> actualyl a little more since i see the frist two as varaibles vs exact matches
27.07.18 06:08:45<dmiles> for example  succ(succ(_)) matches  succ(succ(0)).
27.07.18 06:09:17<dmiles> rulehead is at succ(succ(_))   where facthead is at  succ(succ(0)).
27.07.18 06:09:42<dmiles> rulebody s at   integer(succ(0)).
27.07.18 06:10:11<dmiles> rulehead is at integer(succ(succ(_)))   where facthead is at  ingeter(succ(succ(0))).
27.07.18 06:10:35<dmiles> so i am comparing the proposed side effect bound and unbound
27.07.18 06:10:50<dmiles> rulehead is unbound
27.07.18 06:11:45<dmiles> but realize i wrote all this stuff without every reading anything but just making it how it had to be in order to work
27.07.18 06:12:54<dmiles> to see my "cases" https://github.com/TeamSPoon/pfc/blob/master/prolog/pfc2.0/mpred_core.pl#L1438-L1505
27.07.18 06:13:08<dmiles> mpred_post_update4(identical,_P,_S,exact):
27.07.18 06:13:21<dmiles> vs mpred_post_update4(unique,P,S,none):
27.07.18 06:13:53<dmiles> vs  mpred_post_update4(partial(_Other),P,S,none):
27.07.18 06:15:13<dmiles> so i end up deciding in each one of these permtuations of existence to treatr ti special.. which then goes to a next-special reaction
27.07.18 06:15:52<dmiles>  mpred_post_update4(identical,_P,_S,exact) = no side effect will happen
27.07.18 06:16:22<dmiles> vs  mpred_post_update4(partial(_Other),P,S,none):= i am subsumming something existing but the proof is brand new
27.07.18 06:17:03<dmiles> none  = not seen this proof before
27.07.18 06:17:22<dmiles> partial(_Other) = i  am subsumming something existing
27.07.18 06:17:57<dmiles> mpred_post_update4(partial(_Other),P,S,none):-!,
27.07.18 06:17:58<dmiles>   mpred_add_support_fast(P,S),
                 <dmiles>   assert_u_confirmed_was_missing(P),
                 <dmiles>   mpred_trace_op(add,P,S),
                 <dmiles>   mpred_enqueue(P,S).
27.07.18 06:18:16<dmiles> mpred_add_support_fast(P,S), = add the term+proof
27.07.18 06:18:50<dmiles>  assert_u_confirmed_was_missing(P) = add the term
27.07.18 06:19:00<dmiles> endque this term mpred_enqueue(P,S).
27.07.18 06:19:19<dmiles> thius assures that the next step will be   mpred_post_update4(identical,_P,_S,exact)
27.07.18 06:19:35<dmiles> in the next round
27.07.18 06:19:58<dmiles> that next round trhough might cause some otehr rule that is more interesting
27.07.18 06:20:11<dmiles> but wont trigger more preprops
27.07.18 06:20:58<dmiles> performing the checks done using standard unificaqtion to answer the question
27.07.18 06:21:20<dmiles> but why i get more milage is i keep soem terms slighly less bounded
27.07.18 06:21:49<dmiles> by ensuring that i see rules based of a gfree head and bound body
27.07.18 06:22:13<dmiles> 1/0=facthead-bound, 1/0=rulehead-free and 1/0=bodyterm-bound
27.07.18 06:22:49<dmiles> yet before i see bodyterm-bound i see it free
27.07.18 06:23:53<dmiles> since i want to vet free bodies to ansure i am not chasing the same body tempates over and over
27.07.18 06:24:25<dmiles> yet i still have to never skip anything
27.07.18 06:24:56<dmiles> i explore all rules fully
27.07.18 06:25:26<dmiles> and in every sane combo this way
27.07.18 06:26:25<dmiles> after each cycle (eery levels) i commit the buffer
27.07.18 06:27:03<dmiles> which is always smaller heads thna rules
27.07.18 06:27:51<dmiles> so for a given head i might have 2-5 poofs .. and for very proof i might have 2-5 rules .. and always less bodies
27.07.18 06:28:21<dmiles> bodies are proof elements
27.07.18 06:28:44<dmiles> so i yeild the smallest proofs this way
27.07.18 06:29:12<dmiles> yet have all the rules think they partificapatesd
27.07.18 06:29:48<dmiles> this way when a rule is retracted i can analize best what consequnces really fall away
27.07.18 06:30:13<dmiles> by checkign partification lists
27.07.18 06:30:33<dmiles> by checkign participation lists
27.07.18 06:31:25<dmiles> sinc ei have to track all that anways it made sense to maker that part of the chain stepping
27.07.18 06:32:59<dmiles> i lied "thius assures that the next step will be   mpred_post_update4(identical,_P,_S,exact)"   the next step was  thius assures that the next step will be   mpred_post_update4(exact,_P,_S,none)
27.07.18 06:33:17<dmiles> oops  thius assures that the next step will be   mpred_post_update4(identical,_P,_S,none)
27.07.18 06:33:38<dmiles> the idea is i fall thru all the methods of early bail out
27.07.18 06:34:24<dmiles> meaning i look for a most gernalizaed loop then get more sepcific in my hunt
27.07.18 06:35:38<dmiles> mpred_post_update4(partial(_),P,S,simular(_))  being the most genral case
27.07.18 06:36:49<dmiles> if the code to do all this correctly is 90k in prolog
27.07.18 06:37:03<dmiles> i fear for any other language
27.07.18 06:37:23<dmiles> since genrally 100 lines of prolog takes 1000 lines in other languages
27.07.18 06:38:04<dmiles> not saying i do all this correctly
27.07.18 06:39:15<dmiles> datalog is much more simplistic than boxlog (this is for the boxlong language so it has to be way more carefull)
27.07.18 06:39:35<dmiles> datlog has lots of things added to make it less of a pain
27.07.18 06:40:47<dmiles> boxlog contains terms inside terms inside rules inside rules inside facts inside terms
27.07.18 06:41:14<dmiles> since it is model / temporal logic
27.07.18 06:41:18<dmiles> datalog doesnt allow anyhting like that
27.07.18 06:41:47<dmiles> since boxlog is modal / temporal logic / datalog + negation + subsumption
27.07.18 06:42:16<dmiles> so doing it for datalog requires lots less work
27.07.18 10:17:56*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
27.07.18 11:01:06*** Quit: koom (~sirdancea@98.233.253.142) left #AutoNomic: Ping timeout: 240 seconds
27.07.18 11:08:38*** Join: koom (~sirdancea@98.233.253.142, sirdancealot: koo5)
27.07.18 11:41:56*** Connecting...


N
18:35
nilli (IRC) joined the room.
N
nilli (IRC)
18:37
hey guys... I have to bug you with another conceptual interpretation. I guess I expect only HMCa to answer without being buged by it.
18:39
stoopkid you would be like: symbol manipulation is all, there is no meaning to meaning... ext (have to find that quote I wrote to make sure Ill get it right)
18:42
and dont worry Ill do the "machine work" study of symbol manipulation later on, but someone need to get back at HMCa .... right? (unfurtuntly will never be able to do it on his level of knowledge,)
S
stoopkid (IRC)
18:45
“get back at” him?
N
nilli (IRC)
18:46
lol ...at him not giving direct instructions of how to do anything.
18:48
anyway you may enjoy it too but I see you getting annoyed by it
18:48
So I have been staring at the first visual I made of the statement :" propositions are the sets of their proof "
18:49
proofs
18:52
and remembers how it felt strange to me then. I tend to really trust these "strange" feelings since it always marked some logical issues (for the human brain)
stoopkid (IRC)
18:53
lol ok fair enough
N
nilli (IRC)
18:57
the drawing I made was as follow : the word "proves" , a circle around it . the word "Set" and arrow pointing at the line that create the circle and then enclosed both with in a circle that I named proposition
19:02
when I had to name that outer circle, I could not decide if the proposition should be the space between inner and outer lines or an arrow that point at the outer line
19:05
ok so that was a wrong drawing assuming the sets and propositions which are types are the same thing. however.... not totally wrong
19:09
one can interpenetrate set as the "binder" of the proves (objects) that then makes up the type/proposition
S
stoopkid (IRC)
19:09
you’d have to show me the picture im not sure if im visualizing it properly
N
nilli (IRC)
19:12
I will send you that on whatsapp and then you should put on that website you mentioned (im did not yet got to do it on my own)
19:16
So... having a "set" representing the binding property of the type it is indeed not a type. its more like the function that create the type out of the objects.
S
stoopkid (IRC)
19:19
what website?
19:20
well
19:20
you’re actually onto something there, but it’s something different
19:21
i think that drawing is kind of misleading as to how objects, proofs, propositions and sets are related
19:22
a function that takes objects and returns types is what we call a “type family” and its the basic building block of dependent types
N
nilli (IRC)
19:22
is it is ... that is the point I made as the beginning. it wrong. but the way it is wrong is show something interesting
19:23
yes it is
N
nilli (IRC)
19:30
so how is set is different form "type family" then?
19:30
how is set different from type family then?
N
nilli (IRC)
19:38
let me also try to go back to that: 26.07.18 12:29:33<nilli> thus this is also true? 4. A set is the collection of proves which make up a proposition.
19:42
26.07.18 12:21:50<nilli> 3. propositions are the set of their proves
N
nilli (IRC)
19:47
statement 4 implies that a set is an object of objects that makes up a proposition , while 3  means that propositions are the objects of their objects
19:48
and booth thus do not means the same!!!
19:49
the meaning of "set" is in fact different in each statement.
F
20:00
@freenode_koom:matrix.org left the room.
N
nilli (IRC)
20:03
3 indeed imply that sets and propositions/types are the same. but 4 means that  sets are the objects in the propositions/types.
K
20:06
koom (IRC) joined the room.
S
stoopkid (IRC)
20:07
nilli: a set is just one set, a set family is a whole family of sets, parameterized by some other set
20:07
so an example of a set might be NaturalNumber
N
nilli (IRC)
20:07
but also if we look at both closely and together we can realize that 3 may define 4 more precisely as to each proposition have only one "set object"
S
stoopkid (IRC)
20:07
meaning the set of all the natural numbers
20:07
z, (s z), (s (s z)), etc...
20:08
an example of a type family might be a function that takes a NaturalNumber and returns some other set
20:09
so it would be a function in the set "NaturalNumber -> Set"
20:09
an example might be "\x . (x > 0)"
20:09
it's a function that takes a NaturalNumber, x, as its argument, and returns the set "x > 0"
20:11
(technically the type-family is really just the "x > 0" part; think like natural deduction: "x : NaturalNumber |- (x > 0) : Set" )
20:11
but ofc if we look at the implication rule, then "x : NaturalNumber |- (x > 0) : Set" will surely allow us to derive "\x.(x>0) : NaturalNumber -> Set"
20:12
so we would say that "x > 0" is a collection/family of sets, "parameterized" by the NaturalNumbers
20:13
meaning that each NaturalNumber is associated to a (possibly) different set in this collection
20:14
0 is associated with the set "0 > 0"
20:14
1 is associated with the set "1 > 0"
20:14
...
20:14
a whole family of "x > 0" 's, for each different NaturalNumber x
20:15
make sense?
N
nilli (IRC)
20:22
let me see that we are not skipping over something important here
20:26
in Nililogic a a type is a set of a single set object that is a type of an inner one single set object ext......
20:27
now ill check your examples
20:29
ok so first if we look a Nililogic then this [14:07] <stoopkid> nilli: a set is just one set, a set family is a whole family of sets, parameterized by some other set
20:30
is not contradictory
20:31
a set can bind many "set objects" into one "set object" that would then be a type
20:31
but of a type can not do that
20:32
ofc
S
stoopkid (IRC)
20:32
not sure i follow
20:33
how about for the purposes of this discussion we use the following definitions
20:34
"set" will represent our intuitive "metatheoretic" notion of "some unordered, non-repeating container of objects"
N
nilli (IRC)
20:34
its very subtle so really hard to follow but is improtant since can solve the paradox very simply
S
stoopkid (IRC)
20:35
"Type" will be our representation of this, *within* our formal language
H
HMCa (IRC)
20:36
hrmm, types are really just a special case of type families - the nullary case
N
nilli (IRC)
20:36
no both need to be part of the formal language and so is the difference between them
S
stoopkid (IRC)
20:36
well
20:36
there you go with that "need" thing again :P
H
HMCa (IRC)
20:37
all types have some number of parameters but sometimes that number is 0, that's all
S
stoopkid (IRC)
20:37
if you want to assert that there's a difference between them, then ok we can do that for NilliLogic, but...
N
nilli (IRC)
20:37
hi hmca did you read the conversation from the begining?
S
stoopkid (IRC)
20:37
i don't see the purpose, especially since afaik the only place we really differentiate this terminology is in type theory
H
HMCa (IRC)
20:39
nilli: mostly skimmed it
N
nilli (IRC)
20:39
stoopkid I guess I need to look at the real example to see if make a difference
S
stoopkid (IRC)
20:39
well
20:39
we're talking about words, so..
20:39
the difference is only in the definitions you assign to them
N
nilli (IRC)
20:40
Hmca. you should see or visualize my drawing to see where it comes from :)
20:41
stoopkid not realy since it means that sets and types are not the same
S
stoopkid (IRC)
20:41
err
N
nilli (IRC)
20:41
so the can define eachother
S
stoopkid (IRC)
20:41
if you define them to be different, then sure, they're not the same
20:41
but watch this:
20:41
"i define them to be same"
N
nilli (IRC)
20:42
in one particular case they appear the same
20:43
in the case of a single set in a type
S
stoopkid (IRC)
20:43
"i define them to be always the same"
20:43
"set == type, synonyms, etc.."
20:43
but then watch this:
20:43
"type is actually a verb, not a noun"
N
nilli (IRC)
20:44
if you define them the same you are at the risk of missing some infromation
S
stoopkid (IRC)
20:44
"you can type on a keyboard, but you can't have 'a type' that wouldn't mean anything"
20:44
nilli: but wait
N
nilli (IRC)
20:44
you run into the problem regarding conservation laws a
S
stoopkid (IRC)
20:45
all that missing information? i can put it somewhere else
20:45
"foo"
20:45
"foo is the word you're looking for"
20:45
"possibly also asdlkfjasdf but that's kind of archaic terminology"
20:46
"and there's kind of some subtle distinction, foos can be asdlkfasldfks and asdlkfsakdfjds can be flarbles but not vice versa"
N
nilli (IRC)
20:46
problems with conservation laws means inconsistency in transformation , by the way. so is big problem
H
HMCa (IRC)
20:46
maybe it is time for nilli to start looking at the trinitarianism
20:46
heh
S
stoopkid (IRC)
20:48
nilli: why do you think i put so much emphasis on this?
N
nilli (IRC)
20:48
ok yes sound like something I dont know about yet :) (I guess nililogic is incomplete logic always lol)
H
20:49
* HMCa (IRC) eyes links in topic
20:49
those links are all very very important things
20:49
nilli: https://ncatlab.org/nlab/show/computational+trinitarianism
computational trinitarianism in nLab
nLab computational trinitarianism Skip the Navigation Links | Home Page | All Pages | Latest Revisions | Discuss this page | Feeds | Context Type theory
20:49
there goes your weekend. ;-)
20:49
or week
20:50
or a few years of your life
nilli (IRC)
20:51
HMCa how many weeks of your life did it take?
H
HMCa (IRC)
20:51
by some measures it is still taking. :-)
N
nilli (IRC)
20:53
is just too big of a topic , includes everything
20:53
be more specific then
S
stoopkid (IRC)
20:55
i wouldn't worry about the ncatlab stuff tbh
20:55
certainly not yet :)
20:56
unless you know what an isomorphism is and why it's able to do what it does, you're not anywhere near ready for ncatlab levels of torture
H
HMCa (IRC)
20:56
well, we should at leat acknowledge that when we equate sets and types we are omitting a third from the story, heh
S
stoopkid (IRC)
20:57
well
H
HMCa (IRC)
20:57
yah, we don't have to throw her into the deep end... but we do need to acknowledge that she's dipping toes in waters
S
stoopkid (IRC)
20:57
and probably a 4th and 5th and every other equivalent structure ?
N
nilli (IRC)
20:57
ncatlab? im sure im not
H
HMCa (IRC)
20:58
well, no fourth that we've made language for yet, afaik.... :-P
N
nilli (IRC)
20:58
I just assume that there is a simple form for everything complex s
S
stoopkid (IRC)
20:58
nilli: ironically that's kind of what ncatlab is trying to produce
H
HMCa (IRC)
20:59
luls
20:59
too true.
N
nilli (IRC)
21:00
I thought so...simple as we saw is hard
H
HMCa (IRC)
21:01
and complex doesn't even have a fitting word... heh
21:04
anyway, my point is that we have a very strong justification for equating sets and types in the trinitarianism... but that may be hard to understand without seing the connection to categories and topology first...
N
nilli (IRC)
21:04
 it mostly means that I get really mad at myself for not getting it  ....since is so simple, then turns some screws  in my mind and then get it (feels very painful )
S
stoopkid (IRC)
21:05
nilli: it's not "simple" in the sense of "easy for humans to understand"
H
HMCa (IRC)
21:05
infinitely the opposite of that, imo, HEH
S
stoopkid (IRC)
21:07
it's simple in the sense of working in as abstract of a descriptive framework as possible (so as to have results apply across all possible situations where they would reasonably be applicable) while still actually capturing the precise structure of the things being described
HMCa (IRC)
21:08
right... the foundations are trivial, but the fractal lake itself runs deeper than one can ever hope to dive....
21:08
logic will offer you as much complexity as you can handle... and then keeps on going. :-)
S
stoopkid (IRC)
21:09
well, even the foundations take a bit of work to grapple with but yes it's at least manageable
21:09
but ncatlab is not your source for introductory foundations :)
H
HMCa (IRC)
21:09
well, maybe not *your* source... :-P
21:10
but certainly everything there is foundational... if it is introductory, also, could be disputed easily... heh
21:10
but
21:11
my point stands... "sets and types" gives only a partial picture....
21:11
* HMCa (IRC) gtg semi-afk for a few
N
nilli (IRC)
21:15
so ... what am i to make of that "sets and types are not the same in all possible instances only appears the same at the single set of sets instance." ?
21:15
I guess just trust you :)
21:16
and carry on ...
S
stoopkid (IRC)
21:16
you don't trust definitions you assert them
N
nilli (IRC)
21:17
there is not difference between trust and assertions
H
HMCa (IRC)
21:17
"trust but verify"? :-)
N
nilli (IRC)
21:18
the essence of trust is it being and  assertion
21:18
an
stoopkid (IRC)
21:18
ok, but the essence of assertion is not that you trust it :P
H
HMCa (IRC)
21:19
the prover asserts and the verifier verifies
21:19
it is not meaningful to speak of theory/proof without acknowledging the distinct roles
21:20
a proof written in secret and then destroyed accomplishes nothing. ;-)
21:20
* HMCa (IRC) afk for real now, for maybe an hour or so
N
nilli (IRC)
21:28
 stoopkid you do trust them to hold as an assertions. that is all that you need in order to build history as order which you can then trust if agreed upon. :)
21:30
anyway I should also be getting afk before the end of this day
F
21:41
@freenode_nilli:matrix.org left the room.
S
stoopkid (IRC)
21:59
dmiles: i passed out but i think i'm starting to get it now
22:00
so is the ∆_N in from section 2.1 supposed to correspond to the blank nodes that represent specific existentials that succeeded?
22:02
a substitution is a mapping that leaves both the constants and the nulls the same, but maps every variable to some constant or some null
22:03
a homomorphism is a mapping that leaves the constants the same and otherwise can do whatever
S
stoopkid (IRC)
22:19
hrm, universal model seems to be like the notion of universal objects from category theory
22:20
so are we in some working in "the category of models of datalog programs and the datalog-model-homomorphisms between them" ?
S
stoopkid (IRC)
23:00
let's see if my interpretations of these things are correct:
23:01
def check-substitution(atom a, atom b):
23:01
 if length(a) != length(b) return false;
23:02
 for i = 1 ... length(a):
23:02
 if a[i] variable then return true;
23:03
if a[i] null-value then return (b[i] null-value && a[i] == b[i])
23:03
if a[i] constant then return (b[i] constant && a[i] == b[i])
23:04
def check-homomorphism(atom a, atom b):
23:04
 if length(a) != length(b) return false;
23:04
 for i = 1 ... length(a):
23:05
  if (a[i] variable | a[i] null-value) then return true;
23:05
if a[i] constant then return (b[i] constant && a[i] == b[i]);
S
stoopkid (IRC)
23:10
hrm... it's starting to make a bit more sense when looking at it in terms of substitutions & homomorphisms applied to the query
S
23:10
i'm still missing some things though
Yesterday
D
D
05:11
daemoz (IRC) left the room.
N
06:38
nilli (IRC) joined the room.
N
nilli (IRC)
06:40
hey koo whats up with the log? it sees like missing the some of the conversations
H
H
HMCa (IRC)
09:42
yah logging is hit or miss :-\
D
dmiles (IRC)
09:43
"[14:01] <stoopkid> def check-substitution(atom a, atom b):
09:43
[14:01] <stoopkid> if length(a) != length(b) return false;"
09:44
yeah that is the essennce of a unification check
09:45
to see if substition can or will take place
09:46
someone finnaly using *morphisms to explain prolgo code.. yay
D
09:50
20 years ago I wrote a Prolog impl in VB  https://github.com/opensim4opencog/PrologVirtualWorlds/blob/master/PrologVirtualWorlds/SwiAvatar/Morphology.bas
opensim4opencog/PrologVirtualWorlds
 - GitHub
Contribute to PrologVirtualWorlds development by creating an account on GitHub.
N
10:04
nilli (IRC) left the room.

#AutoNomic> 28.07.18 11:49:44*** Join: editable-koo (~user@167.88.171.233, (unauthenticated): user)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 2 days 17 hours 38 minutes 57 seconds ago
                 *** Names: editable-koo logicmoo stoopkid discardedes Guest88405 Deadhandd nikaala[m] lexx_[m] genuinelyfx[m] koo5[m] redfish64 Tamara_ cantora @ChanServ HMCa
                 *** End of /NAMES list.
28.07.18 11:55:30<editable-koo>thanks for noticing, nilli
28.07.18 12:33:07*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
28.07.18 14:09:51*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
29.07.18 04:26:22<stoopkid> partial implementation of datalog in agda: http://167.88.171.233/workspace/AutoNomic/Agda/Datalog2.agda
29.07.18 06:50:45*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-odvbhmrnntygwpma) left #AutoNomic: Quit: Connection closed for inactivity
#AutoNomic> 29.07.18 11:07:39*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 3 days 16 hours 56 minutes 52 seconds ago
                 *** Names: editable-koo logicmoo discardedes Guest88405 Deadhandd nikaala[m] lexx_[m] genuinelyfx[m] koo5[m] HMCa @ChanServ cantora Tamara_ redfish64
                 *** End of /NAMES list.
29.07.18 11:11:44*** Join: ditable-kooe (~user@167.88.171.233, (unauthenticated): user)
29.07.18 11:11:54*** Quit: ditable-kooe (~user@167.88.171.233) left #AutoNomic: Remote host closed the connection
#AutoNomic> 29.07.18 11:18:39*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
29.07.18 11:18:40*** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 3 days 17 hours 7 minutes 53 seconds ago
                 *** Names: editable-koo logicmoo discardedes Guest88405 Deadhandd nikaala[m] lexx_[m] genuinelyfx[m] koo5[m] HMCa @ChanServ cantora Tamara_ redfish64
                 *** End of /NAMES list.
#AutoNomic> 29.07.18 11:29:14*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 3 days 17 hours 18 minutes 28 seconds ago
                 *** Names: editable-koo logicmoo discardedes Guest88405 Deadhandd nikaala[m] lexx_[m] genuinelyfx[m] koo5[m] redfish64 Tamara_ cantora @ChanServ HMCa
                 *** End of /NAMES list.
#AutoNomic> 29.07.18 11:48:42*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 3 days 17 hours 37 minutes 55 seconds ago
                 *** Names: editable-koo ditable-kooe logicmoo discardedes Guest88405 Deadhandd nikaala[m] lexx_[m] genuinelyfx[m] koo5[m] HMCa @ChanServ cantora Tamara_ redfish64
                 *** End of /NAMES list.
#AutoNomic> 29.07.18 11:50:47*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 3 days 17 hours 40 minutes ago
                 *** Names: editable-koo ditable-kooe logicmoo discardedes Guest88405 Deadhandd nikaala[m] lexx_[m] genuinelyfx[m] koo5[m] HMCa @ChanServ cantora Tamara_ redfish64
                 *** End of /NAMES list.
29.07.18 11:54:12*** Join: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200, (unauthenticated): cpe-24-90-202-200.nyc.res.rr.com/24.90.202.200)
29.07.18 11:55:34*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mjpwswiqqwrhhgpv, stoopkid: stoopkid)
29.07.18 11:59:46<nilli> hey I have some philosophical contemplation that should have great effect on what we try to do
29.07.18 12:01:13<nilli> its worth thinking about it a bit (well im sure that other much smarter people thought of it)
29.07.18 12:02:47<nilli> When we refer to a knowledge base we assume that knowledge to be open to all users
29.07.18 12:03:41<nilli> but that would never be the case
29.07.18 12:05:09<nilli> there will exist within the system different levels of knowledge of what is already in the system KB
29.07.18 12:06:33<nilli> that means that a "value" is an actual factor in the logic
29.07.18 12:08:07<nilli> T and F comes in different values
29.07.18 12:10:35<nilli> thus I can never just prove T or F I can always only prove T relative to F based on the value of one of them
29.07.18 12:12:41<nilli> only if I restrict the KB to be all shared like in bitcoin, I can assume 100% T vs 100% F
29.07.18 12:13:38<nilli> but this would never be the case in any other system relevant for life, include I guess autonomic.
29.07.18 12:16:44<nilli> which in a funny way implies that it would be tokenized on the most basic level ., not as an app, but almost by the logic itself . and that is indeed really funny
29.07.18 12:21:43<nilli> :)
29.07.18 12:32:42<nilli> or maybe you can think of another solution or just prove that its not a problem :))
29.07.18 12:37:24*** Quit: nilli (185acac8@gateway/web/freenode/ip.24.90.202.200) left #AutoNomic: Ping timeout: 252 seconds
29.07.18 12:43:00*** Quit: ditable-kooe (~user@167.88.171.233) left #AutoNomic: Remote host closed the connection
29.07.18 12:43:22*** Join: ditable-kooe (~user@167.88.171.233, (unauthenticated): user)
29.07.18 12:43:30*** Quit: ditable-kooe (~user@167.88.171.233) left #AutoNomic: Remote host closed the connection
29.07.18 12:44:12*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
29.07.18 12:44:26*** Join: ditable-koo-olde (~user@167.88.171.233, (unauthenticated): user)
29.07.18 12:45:07*** Quit: editable-koo-old (~user@167.88.171.233) left #AutoNomic: Remote host closed the connection
                 *** Quit: ditable-koo-olde (~user@167.88.171.233) left #AutoNomic: Remote host closed the connection
29.07.18 12:45:42*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
29.07.18 15:56:19<stoopkid> @ nilli another solution to what exactly
29.07.18 19:24:19<koo5[m]> Tolenized as in "knowledge is power"?
29.07.18 21:23:30*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
30.07.18 00:28:20*** Quit: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
30.07.18 00:53:23*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
30.07.18 01:27:25<HMCa> hi nilli
30.07.18 01:28:55<nilli> hi HMCa whats up?
30.07.18 01:29:04<HMCa> wrt what you said... well, I'm not sure what you're really saying, but... let me tell you how AN handles at least this " nilli> only if I restrict the KB to be all shared like in bitcoin, I can assume 100% T vs
30.07.18 01:29:08<HMCa>         100% F
30.07.18 01:29:11<HMCa>  nilli> but this would never be the case in any other system relevant for life, include I
30.07.18 01:29:14<HMCa>         guess autonomic."
30.07.18 01:32:02<nilli> ok how AN will  handle that?
30.07.18 01:34:09<HMCa> we don't assert full replication, generally, like bitcoin does, as this is considered contextual (but we do allow for it)... but we do assert that some consensus mechanism will be fully shared within each context
30.07.18 01:35:56<HMCa> each context "presents like" one kb, but is actually a list of kbs that are actually a path in a tree of kbs
30.07.18 01:40:11<HMCa> there is not actually an asserted global consistency, most people will not have most data for example
30.07.18 01:41:51<HMCa> what is asserted is that any context kb in the tree that you point at *is* replicated per the logic of its' ancestry kbs
30.07.18 01:43:09<HMCa> does that make any sense? :-)
30.07.18 01:43:17<stoopkid> heya
30.07.18 01:43:35<HMCa> hi stoopkid
30.07.18 01:43:48<nilli> I guess so if i get it right
30.07.18 01:45:47<stoopkid> HMCa: when you get a chance could you look over my datalog-in-agda code and let me know if i'm interpreting the "parsimonious chase" correctly?
30.07.18 01:49:27<nilli> its like I dont need to know the details of the history only the consistency of the new detail with the  "signature" of the old one
30.07.18 01:56:35<HMCa> nilli: well, whether or not you need to know the details of some history depends on use case
30.07.18 01:57:14<HMCa> bitcoin has full node replication for good reasons
30.07.18 01:58:21<HMCa> probably you should not use some digital currency that does not do similarly :-)
30.07.18 01:59:14<HMCa> but it is not strictly necessary for all use cases
30.07.18 02:00:40<HMCa> stoopkid: i skimmed it, but not nearly enough of a read yet to tell if you seem to be understanding parsimony stuff
30.07.18 02:02:07<HMCa> and yknow I only *mostly* understand parsimony chase, myself, and mostly only wrt how it applies for rdf joins XD
30.07.18 02:03:03<stoopkid> well that's ok i'm mostly interested in whether or not my interpretations match your interpretations
30.07.18 02:04:34<HMCa> can you plz rewrite it without unicode, so my eyes can hurt less? :-P
30.07.18 02:05:06<HMCa> I'm getting old
30.07.18 02:09:40<nilli> nilli: well, whether or not you need to know the details of some history depends on use case ---> for example : how old are you HMCa ?
30.07.18 02:11:05<HMCa> too old. :-)
30.07.18 02:12:24<HMCa> well, by some arguments, also not old enough yet.
30.07.18 02:12:27* HMCa shrugs
30.07.18 02:14:03<HMCa> i'd prefer to be either older or younger by about an order of magnitude, in any case.
30.07.18 02:15:49<nilli> so taking age for example how important is that detail and how the interpretations can interfere with the relevant information that may matter
30.07.18 02:17:09<nilli> its a bit of a reticulated example but we would have to deal with personal information somehow
30.07.18 02:18:36<HMCa> well, you're not going to like my answers, I suspect...
30.07.18 02:18:39<HMCa> hehe
30.07.18 02:18:51<HMCa> such details are contextual
30.07.18 02:19:33<HMCa> iow it will be up to each context to define as they please
30.07.18 02:21:22<nilli> 02:13] <HMCa> i'd prefer to be either older or younger by about an order of magnitude, in any case....sound like you are hitting some age mark crisis :)
30.07.18 02:27:26<HMCa> yes, years 10 through 99, at least.   I'd be much hapier at 9 or 900. :-)
30.07.18 02:29:14*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
30.07.18 10:59:03<nilli> .
30.07.18 11:03:16*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
30.07.18 19:13:15*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
30.07.18 21:47:33<editable-koo>hi discardedes, long time no see
30.07.18 21:49:48<discardedes> hey editable-koo
30.07.18 21:49:52<discardedes> how are you?
30.07.18 21:49:53<discardedes> :D
30.07.18 21:51:00<editable-koo>doing fine:), you?
30.07.18 21:51:39<discardedes> had a good day!
30.07.18 21:51:44<discardedes> got a lot of stuff done
30.07.18 21:52:11<discardedes> working in the garden, reading, walking, and i dont feel like dog sh*t
30.07.18 21:52:19<discardedes> so.... im very happy
30.07.18 21:52:42<editable-koo>great
30.07.18 21:53:26<discardedes> :D
30.07.18 21:53:37<discardedes> anything new goings on around here?
30.07.18 21:53:38<editable-koo>good to hear
30.07.18 21:53:47<editable-koo>well, kinda
30.07.18 21:53:54<discardedes> i see stoopkid keeping the channel busy
30.07.18 21:54:03<editable-koo>me and nilli visited stoop in baltimore
30.07.18 21:54:07<discardedes> but its hard to try to keep up
30.07.18 21:54:12<discardedes> oh... how was it?
30.07.18 21:54:18<editable-koo>i dont try to keep up either
30.07.18 21:54:22<discardedes> haha
30.07.18 21:54:27<discardedes> it would take dedication
30.07.18 21:55:02<discardedes> i havent gotten into the language of it
30.07.18 21:55:11<editable-koo>it was nice, we got quite a bit of stuff done as well
30.07.18 21:55:17<editable-koo>language of what?
30.07.18 21:55:28<discardedes> also i have dificulty because i think we have very different thinking styles
30.07.18 21:55:38<discardedes> the language of the project
30.07.18 21:55:42<editable-koo>ah
30.07.18 21:56:12<discardedes> i like to try to get into something very loose and feel things out and test the boundaries and fuzzyness
30.07.18 21:56:24<discardedes> and try to work into clarity
30.07.18 21:56:57<discardedes> the project seems to come from a place of up front clarity and understanding of purpose
30.07.18 21:57:35<editable-koo>maybe, but its still pretty fuzzy on the edges
30.07.18 21:57:57<discardedes> are you currenty programming on the project?
30.07.18 21:58:04<editable-koo>yeah
30.07.18 21:58:15<editable-koo>i mean, im currently chatting with you, but i was
30.07.18 21:58:18<discardedes> haha
30.07.18 21:58:46<discardedes> i would like to help, but i am always so preoccupied
30.07.18 21:58:57<discardedes> its a bit crazy, but its how things are
30.07.18 21:59:05<discardedes> BUT.... i do want to overcome it
30.07.18 21:59:14<discardedes> its just that i have SO MUCH that needs to get done
30.07.18 21:59:19<discardedes> and im making progress
30.07.18 21:59:48<discardedes> its just that, to get momentum to move out of my tough spot, i have pull off some pretty crazy sh*t
30.07.18 22:00:09<discardedes> and it has to be done reliably
30.07.18 22:00:35<discardedes> there arent many reliable miracles going around
30.07.18 22:00:52<discardedes> but .... im gonna pull it off ... or it will do me in
30.07.18 22:00:56<discardedes> i guess i went all in
30.07.18 22:00:59<discardedes> so theres that
30.07.18 22:01:13<discardedes> so what do you want to say in response to my rambling?
30.07.18 22:01:15<discardedes> :)
30.07.18 22:01:28<editable-koo>yea..dunno...keep it up i guess
30.07.18 22:01:42<discardedes> haha.... i will have more to say about it in the future
30.07.18 22:02:07<editable-koo>as on this project, things are gonna get more tangible soon
30.07.18 22:02:26<editable-koo>i just have to fix a couple of bugs and set up a few things
30.07.18 22:02:53<discardedes> is there anything that i can do that you think would be valuable?
30.07.18 22:03:44<discardedes> for example, the next step or what have you
30.07.18 22:04:15<discardedes> just curious where you're going with the next step, its more solid, and presumably will be more "user freindly"
30.07.18 22:04:37<editable-koo>i dont know what you're into
30.07.18 22:05:16<editable-koo>we could use soon use another vps to run the inferencer on as an irc bot, but maybe daemoz will want to take care of that
30.07.18 22:05:51<editable-koo>but you can come play with it and try to break it
30.07.18 22:05:59<editable-koo>or try to not break it, depends
30.07.18 22:07:06<discardedes> is it still in c++?
30.07.18 22:07:13<editable-koo>python
30.07.18 22:07:20<discardedes> hmmm....
30.07.18 22:07:36<editable-koo>except the frontend, which is the part that will keep breaking...
30.07.18 22:08:13<discardedes> hmmmmmm......
30.07.18 22:08:28<discardedes> ive been thinking about front ends
30.07.18 22:08:34<editable-koo>but if we like this python version, than i will rewrite it to c++
30.07.18 22:08:50<discardedes> what is the appeal?
30.07.18 22:08:55<editable-koo>speed
30.07.18 22:09:02<discardedes> yeah... ok
30.07.18 22:09:16<discardedes> i guess since you know EXACTLY what you want..... i guess.....
30.07.18 22:09:26<editable-koo>hopefully
30.07.18 22:09:42<discardedes> but smart IMO to at least build it in an easier language first
30.07.18 22:09:55<editable-koo>yea
30.07.18 22:10:19<discardedes> maybe as a side project, it could be built into yet other languages
30.07.18 22:10:25<discardedes> if it was interesting
30.07.18 22:10:30<discardedes> this was MY interest
30.07.18 22:11:05<discardedes> this was a way that my basic interests coincided with the basic project
30.07.18 22:11:16<editable-koo>i see, yeah, if this version turns out to be solid, it will be the right time to get more implementations in different langs
30.07.18 22:11:34<discardedes> yeah.... im all for it
30.07.18 22:11:50<discardedes> and i have a MILLION reason why i think its the right way to go
30.07.18 22:12:11<discardedes> but.... im not in f*cking insane rant mode now, so ill give it a rest
30.07.18 22:12:19<editable-koo>cool
30.07.18 22:12:32<discardedes> koo!  :)
30.07.18 22:12:40<discardedes> wht
30.07.18 22:12:43<discardedes> whuru
30.07.18 22:12:50<discardedes> where did your name come from?
30.07.18 22:12:57<discardedes> "editable-koo"
30.07.18 22:13:11<editable-koo>well, its our editable log
30.07.18 22:13:26<editable-koo>but since im the only one who operates it..
30.07.18 22:13:43<discardedes> how does one use it?
30.07.18 22:13:54<editable-koo>gotta ssh to my vps
30.07.18 22:14:10<editable-koo>it runs in tmux in emacs
30.07.18 22:15:07<discardedes> how can i sign in?
30.07.18 22:15:36<discardedes> note im still on the terimal, but i imagine its all command line
30.07.18 22:15:59<discardedes> runs in tmux, eh?
30.07.18 22:16:05<editable-koo>im gonna need a ssh public key from you, so i can add it to authorized_keys
30.07.18 22:16:11<editable-koo>yea yea
30.07.18 22:16:12<discardedes> i was wondering about tmux
30.07.18 22:16:31<discardedes> multiplex terminal, right?
30.07.18 22:16:45<editable-koo>umm yea that what it does
30.07.18 22:16:57<discardedes> and you are running tmux IN emacs
30.07.18 22:17:10<editable-koo>but the more important property for me is that it stays running even when i log out
30.07.18 22:17:13<editable-koo>no, the other way around
30.07.18 22:17:18<discardedes> ohhhh......
                 <discardedes> ok
30.07.18 22:17:33<editable-koo>sorry
30.07.18 22:17:44* editable-koo stepping out for a smoke
                 <discardedes> i couldnt picure it running in emacs unless it was a raw shell maybe
30.07.18 22:17:48<editable-koo>:)
30.07.18 22:17:49<discardedes> ok
30.07.18 22:18:30<discardedes> im gonna look up making the public key
30.07.18 22:25:41<discardedes> I see i have a key, and i have to generate or find the public key
30.07.18 22:29:27<discardedes> lol.... its in the same directoy.... dot pub
30.07.18 22:29:49<discardedes> do you think i should make a new key pair or use the old?
30.07.18 22:31:01<discardedes> im have no idea how the system will work, but i can get you a public key
30.07.18 22:31:36<discardedes> im not sure how i then use the private key
30.07.18 22:31:51<editable-koo>your current one is fine
30.07.18 22:32:10<discardedes> how shall i send it?
30.07.18 22:32:13<editable-koo>then you can just ssh in, it will use it automatically, ill give you the command line
30.07.18 22:32:16<editable-koo>just paste it here
30.07.18 22:32:27<discardedes> one sec
30.07.18 22:33:28<discardedes> this has incriminating info in it
30.07.18 22:33:35<discardedes> im gonna try making a new one
30.07.18 22:33:38<discardedes> one sec
30.07.18 22:35:35*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
30.07.18 22:38:33<discardedes> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+WCrczzh66umfq0GeBuBY+1leaaq17TjfPD2jgPhxieAFagmGtJIsznhxnJ7QZiVbxSVReF3/OvbvHJUR2VRPhmtH1czlclRYjT3JDVDxlicKAfmxthgwV0SGA4wfD3pbINvGAPzRybSFXhj7f0UIRw+Ttv3VXi+j6XoY52kXlzNopvSeB2eylDSBgZsX8xlKBWZZYs42YgvsrWl8YE94zOCqjMdEbBqMUIUG1iK+W0a77hYUatMGJqVT4a1M4n07hGDcns/JzKIuralK12FgR57kKkUbcj8GVkTHdOPwNp+KnsAa0Wcp5F/g22sOpUTTft46QqBrkVc6PhAWgR5b
                 <discardedes>  
30.07.18 22:38:38<discardedes> editable-koo ^
30.07.18 22:39:11<discardedes> this is a new key BTW
30.07.18 22:41:47<editable-koo>ok try:
30.07.18 22:41:51<editable-koo>ssh -v  editable-log@loworbit.now.im  -p 44 -t "tmux attach-session -t chat"
30.07.18 22:42:20<discardedes> ok... but its probably going to fail due to not knowing where my private key is
30.07.18 22:42:22<discardedes> thats my guess
30.07.18 22:42:24<discardedes> here goes
30.07.18 22:42:49<editable-koo>it looks for them in ~/.ssh
30.07.18 22:42:59<discardedes> ok... ill put it there
30.07.18 22:45:04<discardedes> two errors
30.07.18 22:45:16<discardedes> "The authenticity of host '[loworbit.now.im]:44 ([104.168.57.22]:44)' can't be established."
30.07.18 22:45:24<discardedes> "Permission denied (publickey)."
30.07.18 22:45:43<discardedes> oh...
30.07.18 22:45:46<discardedes> i might see what the problem is
30.07.18 22:47:28<discardedes> its not trying this key for some reason
30.07.18 22:49:38<editable-koo>do you have the private key there?
30.07.18 22:49:56<discardedes> its in the ssh directory
30.07.18 22:50:07<discardedes> the "tried keys" seem to be pre-set
30.07.18 22:50:11<discardedes> hard-coded
30.07.18 22:50:26<discardedes> orr.......
30.07.18 22:50:30<discardedes> i see!
30.07.18 22:50:36* discardedes thinks
30.07.18 22:51:19<discardedes> lol..... i have things set up kind of weird
30.07.18 22:51:21<discardedes> i see what it is
30.07.18 22:53:47<discardedes> yeah.... im not sure where its getting these filenames from
30.07.18 22:54:01<discardedes> but of the keys its going through, only one actually exist
30.07.18 22:54:22<discardedes> working on it
30.07.18 22:56:33<editable-koo>yea i suppose that may be hardcoded
30.07.18 22:56:34<discardedes> im reading through the debug data
30.07.18 22:56:44<editable-koo>you can also -I keyfile i think
30.07.18 22:56:50<discardedes> its not in the configuration file, which is empty
30.07.18 22:57:01<discardedes> ill give it a shot
30.07.18 22:57:48<discardedes> -i identity_file
                 <discardedes>               Selects  a file from which the identity (private key) for public key authentication is read.  The default is ~/.ssh/identity for protocol ver-
                 <discardedes>               sion 1, and ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 and ~/.ssh/id_rsa for protocol version 2.  Identity files may also be  specified
                 <discardedes>               on a per-host basis in the configuration file.  It is possible to have multiple -i options (and multiple identities specified in configuration
30.07.18 22:57:51<discardedes>               files).  ssh will also try to load certificate information from the filename obtained by appending -cert.pub to identity filenames.
30.07.18 22:58:44<discardedes> so it doesnt seem to work dynamically, everything is hardcoded
30.07.18 22:58:59<discardedes> thats what it seems according to this documenation
30.07.18 22:59:20<discardedes> so.... yeah, ill use the -I option
30.07.18 22:59:30<discardedes> uhhh.... -i option
30.07.18 23:07:06<discardedes> editable-koo: im going to work on understanding the schema
30.07.18 23:07:13<editable-koo>:)
30.07.18 23:07:25<discardedes> the man page for ssh has a great description of the entire system
30.07.18 23:07:52<discardedes> im going to figure it all out
30.07.18 23:08:12<discardedes> ill hit you up tomorrow
30.07.18 23:08:24<discardedes> i have a few odds and ends to hit before i go to sleep
30.07.18 23:09:14<discardedes> sorry that i hit an immediate hangup, but part of my reluctance has to do with the clumsyness of system administration skills
30.07.18 23:09:35<discardedes> anywho.... have a good night
30.07.18 23:09:40<editable-koo>you too
30.07.18 23:09:44<discardedes> :)
30.07.18 23:10:04<editable-koo>i might not be too available next few days
30.07.18 23:10:10<editable-koo>so take your time:)
30.07.18 23:10:13<discardedes> no problem
30.07.18 23:10:16<discardedes> i have the command
30.07.18 23:10:26<discardedes> ill let you know when i sign in
30.07.18 23:10:35<editable-koo>yeah
30.07.18 23:10:45<editable-koo>you can post something to the channel
30.07.18 23:10:51<editable-koo>alright ,catch ya
                 <discardedes> for sure
30.07.18 23:11:02<discardedes> same... have a productive next few days
30.07.18 23:11:06<discardedes> be well
                 <discardedes> :)
30.07.18 23:11:17<editable-koo>hehe
30.07.18 23:12:00<editable-koo>"have a productive next few days", which race in startrek uses that greeting?
30.07.18 23:13:07<discardedes> huh..... its a coincidence for sure!
30.07.18 23:13:09<discardedes> :-D
30.07.18 23:13:50<discardedes> is it Spocks race?
30.07.18 23:14:01<discardedes> i dont recall their name
30.07.18 23:14:31<discardedes> for some reason i only remember the Klingons
30.07.18 23:14:34<editable-koo>dunno
30.07.18 23:15:00<discardedes> Vulcans
30.07.18 23:15:15<discardedes> haha.... OK.... good night
30.07.18 23:15:16<discardedes> :)
30.07.18 23:16:50<editable-koo>gnight
30.07.18 23:28:05<editable-koo>nilli: http://learnyouahaskell.com/starting-out#ready-set-go 
31.07.18 00:33:49<stoopkid>  HMCa i'm switching out the unicode but as i look over it it occurs to me that it's still more readable than any of the papers we reference
31.07.18 00:44:10<stoopkid> alright i don't see any unicode in there now
31.07.18 01:11:36<HMCa> they also make pain for my eyes :-)
31.07.18 01:11:56*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
31.07.18 17:56:29*** Nick change: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) is now known as testname`
31.07.18 17:57:27*** Nick change: testname` (~user@75.97.112.182.res-cmts.brd4.ptd.net) is now known as discardedes
31.07.18 18:01:50*** Join: discardedes2 (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
31.07.18 18:03:24*** Quit: discardedes2 (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
                 *** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
31.07.18 18:09:56*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
31.07.18 19:11:00*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
31.07.18 21:35:55<koo5[m]> I take advil for everything
31.07.18 21:37:05<discardedes> icu koo5[m]
31.07.18 21:38:45<discardedes> i know you're busy, but hello
31.07.18 21:39:12<koo5[m]> Yo
31.07.18 21:39:13* discardedes thinks maybe koo5[m] took one too many Advils
31.07.18 21:39:14<koo5[m]> Hello
31.07.18 21:39:16<discardedes> hey
31.07.18 21:39:17<discardedes> :)
31.07.18 21:40:53<koo5[m]> Not busy right now, but battery is dying
                 <koo5[m]> Any progress with ssh?
31.07.18 21:41:13<discardedes> im just taking it in
31.07.18 21:41:37<discardedes> i plan on doing some more reading on it starting in about 20 minutes
31.07.18 21:41:57<discardedes> ill let you know how i make out
31.07.18 21:42:08<discardedes> IF your around, we can talk as im reading about it
31.07.18 21:55:30<discardedes> im tinkering with it now koo5[m]
31.07.18 21:55:36<discardedes> ill be reading about it in abit
31.07.18 21:58:06<discardedes> i made progress
31.07.18 21:58:14<discardedes> simple error using the -i switch
31.07.18 21:58:38<discardedes> i messed up on the pathname, which is hidden with the . prefix
31.07.18 21:58:45<discardedes> didint catch it last night
31.07.18 21:59:06<discardedes> now i get "open terminal failed: terminal does not support clear"
31.07.18 21:59:23<discardedes> sooo... ill try to figure out what this means
31.07.18 21:59:34<discardedes> i THINK it might mean i need a raw terminal
31.07.18 22:15:20<editable-koo>testing
31.07.18 22:15:30<editable-koo>wow!
31.07.18 22:15:46<editable-koo>this is really fricken awsome!
31.07.18 22:16:35<editable-koo>koo5[m]: im very impressed with this setup
31.07.18 22:17:08<editable-koo>run the command in a raw terminal
31.07.18 22:17:22<editable-koo>i had to run the command in a raw terminal
31.07.18 22:17:33<koo5[m]> Lol
31.07.18 22:17:46<editable-koo>im fricken blow away by this
31.07.18 22:18:11<editable-koo>i feel like im on the Enterprise or something
31.07.18 22:19:23<discardedes> somehow i wound up in the log
31.07.18 22:19:45<editable-koo>test
31.07.18 22:19:47<editable-koo>oh
31.07.18 22:19:58<editable-koo>i commanded to the top of the screen
31.07.18 22:20:11<editable-koo>where there isnt any color
31.07.18 22:21:04<editable-koo>c-x c-b isnt working
31.07.18 22:34:28<editable-koo>koo5[m]: you still around?
31.07.18 22:36:26<editable-koo> we gotta talk more about this setup you have sometime
31.07.18 22:36:40<editable-koo>im going to bed soon, a few things to wrap up beforehand
31.07.18 22:36:48<editable-koo>but this is the coolest sh*t ever
31.07.18 22:36:59<editable-koo>im REALLY impressed
31.07.18 22:37:17<editable-koo>just this arrangement alone is fricken awesome
31.07.18 22:37:42<editable-koo>multiple users signed into an emacs session is really bad ass
31.07.18 22:38:05<editable-koo>there's a TON that could be done with this
31.07.18 22:38:14<editable-koo>its like irc incremented a billion times
31.07.18 22:38:22<editable-koo>irc ++++++++++++++
31.07.18 22:44:58<editable-koo>well im going to bed soon
31.07.18 22:45:02<editable-koo>talk later
31.07.18 22:45:04<editable-koo>peace
#AutoNomic> 31.07.18 23:00:50*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 6 days 4 hours 50 minutes 4 seconds ago
                 *** Names: editable-koo daemoz discardedes dmiles editable-koo-old stoopkid Guest88405 Deadhandd nikaala[m] lexx_[m] genuinelyfx[m] koo5[m] redfish64 Tamara_ cantora @ChanServ HMCa
                 *** End of /NAMES list.
#AutoNomic> 31.07.18 23:10:37*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 6 days 4 hours 59 minutes 51 seconds ago
                 *** Names: editable-koo daemoz discardedes dmiles editable-koo-old stoopkid Guest88405 Deadhandd nikaala[m] lexx_[m] genuinelyfx[m] koo5[m] HMCa @ChanServ cantora Tamara_ redfish64
                 *** End of /NAMES list.
31.07.18 23:18:40<stoopkid> hey discardedes
31.07.18 23:34:41<discardedes> stoopkid: hey stoopkid !
31.07.18 23:34:45<discardedes> :D
31.07.18 23:35:09<discardedes> i was in editable cools emacs session
31.07.18 23:35:29<discardedes> its really impressive
31.07.18 23:35:42*** Quit: editable-koo-old (~user@167.88.171.233) left #AutoNomic: Remote host closed the connection
31.07.18 23:36:02<discardedes> im really tired, i have a few things to do before i do lights out
31.07.18 23:36:06<discardedes> im quite tired
31.07.18 23:36:37<discardedes> but im gonna finish that stuff up and ill check back in a bit
31.07.18 23:37:28*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
01.08.18 00:11:18<discardedes> stoopkid: im off to sleep
01.08.18 00:16:39*** Join: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229, (unauthenticated): 173.52.213.229 - http://webchat.freenode.net)
01.08.18 05:29:12*** Quit: editable-koo-old (~user@167.88.171.233) left #AutoNomic: Read error: Connection reset by peer
01.08.18 05:29:21*** Join: ditable-koo-olde (~user@167.88.171.233, (unauthenticated): user)
01.08.18 08:48:52*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
01.08.18 08:49:38*** Netsplit: *.net *.split (Use /WL to see who left)
01.08.18 09:09:15*** Quit: nilli (ad34d5e5@gateway/web/freenode/ip.173.52.213.229) left #AutoNomic: Ping timeout: 252 seconds
01.08.18 10:59:20*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 248 seconds
01.08.18 11:32:18-christel- : [Global Notice] Hi all, we are aware of the current spambot attacks, and we would encourage users to set themselves +R and channel operators to set +r in the channels while the attack is ongoing. While our mitigating efforts are catching the vast majority at the gate, a small proportion still make it through. Apologies for the inconvenience and please bear with us as we do our best to minimize impact.
01.08.18 13:39:48*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
01.08.18 14:07:15*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 240 seconds
01.08.18 14:52:26*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
01.08.18 15:53:17*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
01.08.18 20:44:14*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
01.08.18 23:21:29*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
02.08.18 05:58:17<koo5[m]> https://functional.works-hub.com/jobs/software-engineer-new-york-new-york-united-states-7fd34
02.08.18 06:00:24<koo5[m]> https://functional.works-hub.com/jobs/remote-functional-compiler-engineer-8ea37
02.08.18 06:28:36<koo5[m]> https://www.reddit.com/r/COMPLETEANARCHY/comments/93mu2i/how_to_have_a_successful_anarchist_revolution_in/?utm_source=reddit-android
02.08.18 12:03:11*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
02.08.18 12:28:02*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 264 seconds
02.08.18 12:31:02*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
02.08.18 12:35:41<discardedes> koo5[m]: i figured it out
02.08.18 12:36:47<discardedes> was a special tmux screen, had computer information, and the arrows opened a menue of windows or panes or what-have-you.
02.08.18 12:37:38<discardedes> be back later..... peace
02.08.18 12:37:52*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
02.08.18 14:43:27<editable-koo>yeah hm, i cant figure out how to unsplit the window now
02.08.18 17:27:15<editable-koo>ok.... ill try to figure it out
02.08.18 17:27:41* editable-koo talks to himself, but..... maybe not really
02.08.18 17:28:02* editable-koo maybe editable-koo has a split personality
02.08.18 18:21:38*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
02.08.18 18:28:01<discardedes> koo5[m]: using the command that "breaks away" a pane puts the current pane in a new "window"
02.08.18 18:28:20<discardedes> i think its c-b c-!
02.08.18 18:28:54<discardedes> then you can kill the previous pane
02.08.18 18:29:59<discardedes> then you can kill the previous *window* with c-b c-!
02.08.18 18:30:02<discardedes> grrr...
02.08.18 18:30:07<discardedes> c-b c-&
02.08.18 18:30:33<discardedes> c-b c-!  ->    c-b c-&
02.08.18 18:31:11<discardedes> since i clusterf*cked what im saying here, double check with the docs!
02.08.18 18:31:14<discardedes> :-O
02.08.18 18:40:59<stoopkid> editable-koo: something to check out https://github.com/sto0pkid/CategoryTheory/blob/master/FormalLanguage.agda
02.08.18 18:41:31<stoopkid> hey discardedes
02.08.18 18:42:07<stoopkid> editable-koo: so this captures the abstract academic notion of a formal language
02.08.18 18:43:00<stoopkid> this level of abstraction doesn't really include parsers or grammars for the language, it just defines a language as a subset of strings defined by some proposition on strings
02.08.18 18:43:39<discardedes> hey stoopkid, long time, no see, eh?
02.08.18 18:43:56<stoopkid> indeed, how's everything with you?
02.08.18 18:45:32<discardedes> well....some things are absolute dog sh*t, some things seem pretty amazing
02.08.18 18:45:39<discardedes> and how about you?
02.08.18 18:45:51<discardedes> i head you met kool and the gang
02.08.18 18:45:55<stoopkid> well, probably about the same here
02.08.18 18:45:57<discardedes> heard*
02.08.18 18:46:09<stoopkid> yep, it was fun
02.08.18 18:46:27<discardedes> what did you guys do?
02.08.18 18:46:28<stoopkid> and we made some decent progress
02.08.18 18:46:37<discardedes> on Autonomic?
02.08.18 18:46:44<stoopkid> yea
02.08.18 18:47:09<discardedes> did you find it was easier to work in real space?
02.08.18 18:48:07<stoopkid> yea definitely easier to communicate in person
02.08.18 18:48:35<discardedes> do you ever sign into editable-koo anymore?
02.08.18 18:50:02<stoopkid> not really, but i did clone the code and was running my own for a bit
02.08.18 18:50:50<discardedes> ok.... might be useful to play with it together some time
02.08.18 18:51:54<editable-koo>its sort of like a virtual environment
02.08.18 18:52:05<editable-koo>that we could share
02.08.18 18:52:17<editable-koo>so, its kinda kool in that way
02.08.18 18:52:21<editable-koo>;)
02.08.18 18:54:09<koo5[m]> :)
02.08.18 18:54:10<koo5[m]> Hey
02.08.18 18:54:20<discardedes> i basically made a shell script that allows me to sign in from the terminal
02.08.18 18:54:24<discardedes> hey koo5[m]
02.08.18 18:54:25<discardedes> :D
02.08.18 18:54:42<koo5[m]> Will check it out stoop
02.08.18 18:54:43<discardedes> so i can run ~/users/kool
02.08.18 18:55:00<stoopkid> where's it running right now
02.08.18 18:55:37<discardedes> do you want the command?
02.08.18 18:55:46<discardedes> ssh -i ~/.ssh/id_new -v  editable-log@loworbit.now.im  -p 44 -t "tmux attach-session -t chat"
                 <stoopkid> sure
02.08.18 18:57:50<discardedes> i just thought of something Awsome!
02.08.18 18:58:01<koo5[m]> One log is runnimg on each the old and the new vps
02.08.18 18:58:28<stoopkid> i see
02.08.18 18:58:41<koo5[m]> .../me just has to do a bit of night prague walking / sightseeing first ...
02.08.18 18:58:49<koo5[m]> HSH
02.08.18 18:59:50<stoopkid> how was your trip home
02.08.18 19:01:28<stoopkid> seems like the buffer is read-only for some reason
02.08.18 19:01:37<discardedes> i set it that way
02.08.18 19:01:39<discardedes> one sec
02.08.18 19:01:45<discardedes> ok
02.08.18 19:02:05<koo5[m]> It wasnt as pleasant as the other direction, had to keep knocking down the painkiller pills, but it was alright
02.08.18 19:03:11<koo5[m]> My choice of seat was better the first time
02.08.18 19:05:35<stoopkid> good to be home i imagine?
02.08.18 19:06:37<koo5[m]> It will be good when i have a shower
02.08.18 19:07:00<stoopkid> heh
02.08.18 19:07:15<stoopkid> discardedes: so what's this awesome thing you thought of
02.08.18 19:07:39<discardedes> each user having their own sessions on the same screen
02.08.18 19:08:11<discardedes> or maybe, something like, control toggling
02.08.18 19:08:20<discardedes> where the control can be passed around
02.08.18 19:08:43<discardedes> and whoever has the "controler" or whatever, controls the screen till its handed over
02.08.18 19:09:27<discardedes> do you have any analogous ideas?
02.08.18 19:09:51<discardedes> also seems cool if each user had their own screen
02.08.18 19:10:05<discardedes> or if each screen could be used independently
02.08.18 19:10:38<discardedes> so lets say you have four screens, then one person might be on each, but then you could look at all the screens at once and jump in and out of them
02.08.18 19:11:33<koo5[m]> I see prague in a new light. Its not that different from nyc. Homeless people are still homeless. Just the AC's are missing
02.08.18 19:13:14<koo5[m]> I did that at some point
02.08.18 19:13:17<stoopkid> were you expecting anything in particular to be different? (wrt homeless people or AC or w/e?)
02.08.18 19:13:57<koo5[m]> Tmux switches terminals for everyone, screen lets each connected user view different ones
02.08.18 19:14:12<koo5[m]> Just nest them to your liking discardedes
02.08.18 19:14:23<koo5[m]> No
02.08.18 19:14:29<koo5[m]> Idk
02.08.18 19:14:43<koo5[m]> *different one
02.08.18 19:15:09<discardedes> could we each have a different pointer koo5[m] ?
02.08.18 19:15:37<discardedes> so that say, i worked in one screen and you worked in the other
02.08.18 19:17:17<koo5[m]> I mean, im tmux, everyone sees the same window at all times
02.08.18 19:18:22<koo5[m]> You can also make more ssh connections and switch between those locally
02.08.18 19:18:58<koo5[m]> So, i think that covers all youll ever want to do
02.08.18 19:20:00<discardedes> ok... ive begun to explore tmux and im impressed
02.08.18 19:20:14<discardedes> ill be running your tmux in my tmux in the future
02.08.18 19:20:55<discardedes> but, i would want to change the c-b keycord though
02.08.18 19:21:09<discardedes> because it would be insanly clobbered
02.08.18 19:21:28<discardedes> c-b c-b c-b  to get merely ONE c-b through to emacs
02.08.18 19:21:30<discardedes> :-O
02.08.18 19:22:02<stoopkid> koo5[m]: you can have multiple people simultaneously editing the same file in different positions so that everybody's editing is visible to everybody else?
02.08.18 19:24:02<koo5[m]> You need a collaborative editing sw like floobits for that
02.08.18 19:24:13<stoopkid> discardedes: my possible alternative to that would be to try to do approximately the same thing but have everybody also be able to tap in to the "virtual environment" through an independent instance running on their own machine
02.08.18 19:24:46<koo5[m]> But we found that we want to share also doing stuff in the terminal, so theyre not that useful
02.08.18 19:26:03<discardedes> stoopkid: ill have to think about what that implies
02.08.18 19:26:26<stoopkid> koo5[m] well, the features can hypothetically be combined in some way, for example everybody gets a cursor position for collaborative editing but there's only one command line cursor to use, or w/e
02.08.18 19:27:49<stoopkid> or in a semi-decentralized setup, there might be a command-line cursor available for each virtual terminal on each connected machine allowing some virtual terminal on it to be used
02.08.18 19:29:01<koo5[m]> We can try koding.com, i think they do something like that
02.08.18 19:29:47<koo5[m]> They no longer provide the vps tho, so you need to wire it up with one
02.08.18 19:30:06<koo5[m]> Alright, catch you tomorrow, guys
02.08.18 19:31:29<discardedes> koo5[m]: see you koo5[m]
02.08.18 19:31:33<discardedes> :)
02.08.18 19:31:38<stoopkid> catch ya later
02.08.18 19:32:58<discardedes> how about collaberative research stoopkid ?
02.08.18 19:33:20<discardedes> on the current setup
02.08.18 19:34:59<stoopkid> sure
02.08.18 19:35:09<stoopkid> autonomic research, or something else?
02.08.18 19:35:46<stoopkid> anything/everything?
02.08.18 19:36:15<discardedes> yes
02.08.18 19:36:20<discardedes> are you signed in now?
02.08.18 19:36:26<stoopkid> yep
02.08.18 19:36:38<discardedes> ok im going to go to the tmux man page
02.08.18 19:37:14<stoopkid> ok
02.08.18 22:20:33<discardedes> stoopkid: hit me up if you want to youre busy looking under the hood of tmux
02.08.18 22:20:58<discardedes> if youre up for a session some time, or to hack around with it, let me know
02.08.18 22:21:03<discardedes> im off to bed
02.08.18 22:21:06<discardedes> good night
02.08.18 22:21:57*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
03.08.18 00:28:07*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Quit: WeeChat 2.1
03.08.18 05:38:24*** Quit: Guest88405 (~root@118-86-185-36.kakt.j-cnet.jp) left #AutoNomic: Remote host closed the connection
03.08.18 07:30:29*** Join: vbmithr (~vb@luminar.eu.org, vbmithr: Vincent)
03.08.18 12:44:15*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mjpwswiqqwrhhgpv) left #AutoNomic: Quit: Connection closed for inactivity
03.08.18 14:03:46*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
03.08.18 14:17:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-afthiulopeuhitxk, stoopkid: stoopkid)
03.08.18 14:55:41<discardedes> stoopkid: hello
03.08.18 15:53:53<stoopkid> discardedes: hi
03.08.18 15:54:12<discardedes> hey stoopkid
03.08.18 16:30:37<stoopkid> it's weird that nature does analytic continuation
03.08.18 16:30:47<stoopkid> maybe the finitists are on to something after all
03.08.18 19:18:24<discardedes> stoopkid: huh..... what has you thinking about that?
03.08.18 20:17:44<stoopkid> discardedes: somebody mentioned how the sum of all positive integers is -1/12 so i looked up what that was called again (riemann zeta function) and the page on the riemann zeta function was talking about the casimir effect and other physical phenomena where the standard formulas would predict some physical quantity to diverge to infinity, but then it doesn't, it does the analytic continuation instead
04.08.18 00:40:49<HMCa> like reality is fractal, or something
04.08.18 01:05:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-afthiulopeuhitxk) left #AutoNomic: 
04.08.18 06:37:01*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
04.08.18 07:26:10*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 252 seconds
04.08.18 11:04:34*** Join: nilli (4d7d3a2b@gateway/web/freenode/ip.77.125.58.43, (unauthenticated): 77.125.58.43 - http://webchat.freenode.net)
04.08.18 11:08:36<nilli> hey guys. There is no way I would learn anything on my own just by reading the books. There is too much that im missing for that other then the fact that I am not  made for that
04.08.18 11:09:32<nilli> was fun learning with you and I think I got it pretty good. but not beyond what you teach me. :(
04.08.18 13:21:14*** Join: nikaala[m]1 (nikaalamat@gateway/shell/matrix.org/x-apozozzpjxngferw, (unauthenticated): @nikaala:matrix.org)
04.08.18 13:21:54*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-hatgeqazkemefhkz) left #AutoNomic: Ping timeout: 240 seconds
04.08.18 13:43:57*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
04.08.18 13:44:22*** Quit: ditable-koo-olde (~user@167.88.171.233) left #AutoNomic: Read error: Connection reset by peer
04.08.18 16:39:59<discardedes> im not sure stoopkid. i can try looking it up and figuring it out.
04.08.18 16:40:39*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
04.08.18 21:58:29*** Quit: nilli (4d7d3a2b@gateway/web/freenode/ip.77.125.58.43) left #AutoNomic: Ping timeout: 252 seconds
05.08.18 03:15:24*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
05.08.18 03:33:43<nilli> hey koo the log is still broken, and I am still not on the channel 24/7 so would be great if you can make sure it will work
05.08.18 04:38:08<HMCa> hi nilli
05.08.18 04:39:23<nilli> hi HMCa
05.08.18 04:41:00<nilli> im totaly lost in pile of things I dont know how to start with, looking at agda and thinking to myself what the fuck was I thinking of?
05.08.18 04:43:03<nilli> maybe after another month with stoopkid teachings I could something with it
05.08.18 04:44:27<HMCa> well, that side of things gets very complicated very quickly, in some ways
05.08.18 04:45:32<HMCa> the rdf side gets complicated much more slowly, heh
05.08.18 04:47:38<nilli> I dont even know it its the complications . its the very basic thing of having to follow instructions one by one slowly and thoroughly
05.08.18 04:47:47<nilli> if
05.08.18 04:48:18<nilli> i need shorcuts :)
05.08.18 04:50:36<HMCa> formal logic demands rigorousness
05.08.18 04:51:18<HMCa> that is part of what makes it "formal"
05.08.18 04:53:01<nilli> i got that and fine with the tidiness of the proves it all makes a lot of sense for me .but cant stand learning that way
05.08.18 04:55:00<nilli> i need to first fast forward through some if it with someone who know and then I can sit on may ass learning and practicing  on my own
05.08.18 04:55:23<HMCa> but if you learned it differently, you would be learning "something else" in the firt place, basically
05.08.18 04:55:47<HMCa> that would be, at best, informal logic
05.08.18 04:56:16<nilli> what do you mean differently?
05.08.18 04:56:51<nilli> haveing some one teaching me?
05.08.18 04:57:00<HMCa> i mean without the rigor
05.08.18 04:59:27<nilli> well I guess im I dont have the right personality , I will never sit on it like stoopkid did. and you cant learn it otherwise on your own.
05.08.18 05:00:20<nilli> im missing too many parts regarding programming and math
05.08.18 05:01:19<HMCa> like what? :-)
05.08.18 05:01:42<nilli> everything!
05.08.18 05:01:56<HMCa> we'll try to answer any question you throw at us
05.08.18 05:02:56<nilli> ill give you an example then
05.08.18 05:04:17<nilli> when working with stoop he gave me some examples on agda (we had about two days with that only)
05.08.18 05:08:19<nilli> when he showed me that i kind of understood it but then we realized that we never went over lambda calculus so we went over to it
05.08.18 05:08:38<nilli> but was never able to get back to agda afterword
05.08.18 05:10:31<nilli> in the past two days I went back to his examples and played with the to better understand it. was working just fine and I had some questions to ask
05.08.18 05:12:56<nilli> bu thought maybe to get back to the book before. however when I wanted to do the exercise I did not even know where to begin with it . basic things . stupid basic
05.08.18 05:17:39<nilli> anyway lets first see about the questions from the examples  stoopkid gave to show you how far I am from understanding even the parts I feel that I understood better
05.08.18 05:18:13<HMCa> stupid basic questions are cool too
05.08.18 05:18:37<nilli> and then I give you the example for the problem I had trying to do the first exercise in agda book
05.08.18 05:20:02<nilli> So I dont understand how come I cant prove A --> B if I have the following:
05.08.18 05:24:46<nilli> Id26 : (A : Set) → (B : Set) → A → B → (A → B )
05.08.18 05:27:37<nilli> I think that I dont get something regarding sets I guess. something basic
05.08.18 05:27:58<nilli> I did these before which made complete sense to me
05.08.18 05:28:34<nilli> id25 : (A : Set) → (B : Set) → B →  (B → A) → (A → B) → A   id25 Q R y z  x = z y  id26 : (A : Set) → (B : Set) → A → (B → A) → (A → B) → B  id26 Q R y z x = x y
05.08.18 05:30:34<nilli> * i did not used id26 for the first example originally (I know I cant use the same name)
05.08.18 05:34:36<HMCa> just having an instance of A and an instance of B is not enough to know how to derive B from A
05.08.18 05:34:51<HMCa> or even if you can
05.08.18 05:34:59<HMCa> but
05.08.18 05:35:52<nilli> but that particular  instance is A implies B.
05.08.18 05:37:07<nilli> I can see that its not how that is the case mechanically speaking but is not making sense for me
05.08.18 05:39:32<nilli> mechanicaly meaning by applying the howrd carry correspondence to (A ---> B) when I have A , B
05.08.18 05:40:09<HMCa> no, remember the arrow associates to the right, so "A->B->C" is not "(A->B)->C" but is "A->(B->C)"... so your signature is like "A -> (B -> (A->B))"...
05.08.18 05:40:32<HMCa> so we actually can give an instance to this
05.08.18 05:40:48<nilli> haa ok. I see right
05.08.18 05:41:24<nilli> ok so that was the fun one
05.08.18 05:41:28<HMCa> and it is just "id26 Q R a b = \p.b"
05.08.18 05:42:05<nilli> now the real problem
05.08.18 05:42:50<HMCa> sorry "= \p -> b"  I forget agda has a silly anonymous lambda notation, heh
05.08.18 05:46:42<nilli> no problem I got that (part of my inmatriculates approach )
05.08.18 05:47:33<nilli> agda book first exercise : . For this, the easiest thing to do is to open and load the bool.agda file first: (a) tt && (ff xor ~ ff)
05.08.18 05:48:32<HMCa> anyway, this is a little tricky, because we seem to have a function which derives a B from an A by ignoring the A that it was given, to satisfy A->B.. but that's ok, we already have our B implied by the other A we were already given
05.08.18 05:49:33<HMCa> iow we don't care about any more As that come later, we already have both an A and a B to use
05.08.18 05:50:03<HMCa> so p's value is unimportant to our conclusion anyway
05.08.18 05:50:52<HMCa> ok, wrt the book exercise
05.08.18 05:51:01<HMCa> what's your question there?
05.08.18 05:52:20<nilli> hold on let me make sure I got the first answer
05.08.18 05:54:52<HMCa> i'll have to go before long
05.08.18 05:55:17<nilli> you cant prove that A --> B right?
05.08.18 05:57:17<nilli> but you dont mind that in the big scheme since you got both A and B to use?
05.08.18 05:58:06<HMCa> you can prove it, as I showed, but probably not in a way that is very useful
05.08.18 06:07:06<nilli> regarding the book I dont understand how to write the exercise  what actualy need to do ? write it like that? tt && (ff xor ~ ff) :
05.08.18 06:08:36<nilli> also now I see that I did not understand your full answer right regarding the first question. just the beginning of your answer
05.08.18 06:11:07<nilli> but you need to go, and there is far too much for me to learn on the basic level. as much as I like to believe it is possible I cant see it happening :(
05.08.18 06:12:20<HMCa> yes, the book just wants you to see that the interpreter will evaluate the expression correctly
05.08.18 06:12:57<HMCa> so they just want you to put it in verbatim after loading the bool example
05.08.18 06:13:42<HMCa> anyway, I will try and catch you again tomorrow, hopefully a little earlier
05.08.18 06:14:59<nilli> not worth your time ... will take me too long to get anywhere with it
05.08.18 06:19:23<nilli>  catch you later :)
05.08.18 06:23:57*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 252 seconds
05.08.18 08:41:55*** Join: nilli (uid309167@gateway/web/irccloud.com/x-lmsnwlmrfdeabxzu, (unauthenticated): nilli)
05.08.18 12:21:39*** Quit: nilli (uid309167@gateway/web/irccloud.com/x-lmsnwlmrfdeabxzu) left #AutoNomic: Quit: Connection closed for inactivity
05.08.18 13:46:09*** Join: nilli (4d7c2058@gateway/web/freenode/ip.77.124.32.88, (unauthenticated): 77.124.32.88 - http://webchat.freenode.net)
05.08.18 17:27:19*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
05.08.18 21:30:22*** Quit: nilli (4d7c2058@gateway/web/freenode/ip.77.124.32.88) left #AutoNomic: Ping timeout: 252 seconds
05.08.18 21:45:46*** Join: issablues (4dafb412@gateway/web/freenode/ip.77.175.180.18, (unauthenticated): 4dafb412.ftth.telfortglasvezel.nl/77.175.180.18)
05.08.18 21:45:55<issablues> hello
05.08.18 22:05:14*** Quit: issablues (4dafb412@gateway/web/freenode/ip.77.175.180.18) left #AutoNomic: Quit: Page closed
05.08.18 23:18:00<HMCa> hi
05.08.18 23:18:41<discardedes> hello HMCa
05.08.18 23:18:52<discardedes> if youre talking to issabluse, they left
05.08.18 23:47:12*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
06.08.18 01:17:48<HMCa> i know.
06.08.18 02:21:03*** Join: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9, (unauthenticated): 77.127.34.9 - http://webchat.freenode.net)
06.08.18 02:49:22*** Quit: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9) left #AutoNomic: Ping timeout: 252 seconds
06.08.18 12:20:45*** Nick change: Deadhandd (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) is now known as Deadhand
06.08.18 14:04:34*** Join: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9, (unauthenticated): 77.127.34.9 - http://webchat.freenode.net)
06.08.18 14:12:14<editable-koo>hi
06.08.18 14:12:55<editable-koo>alright, logs on http://loworbit.now.im/ are still functional, i just forgot to initialize the logger the last time, but nothing got lost
06.08.18 14:16:20<editable-koo>old log ran out of disk space, lets see whats up with that..:)
06.08.18 14:17:51<editable-koo>Filesystem      Size  Used Avail Use% Mounted on
06.08.18 14:17:52*** Unknown command: dev/simfs
06.08.18 14:18:12<editable-koo>/dev/simfs       52G  8.2G  2.1G  80% //
06.08.18 14:18:17<editable-koo>almost add up
06.08.18 14:18:21<editable-koo>adds
06.08.18 14:20:19<HMCa> almost... only ~40GB off
06.08.18 15:31:21<editable-koo-old> ok, old log fixed up
06.08.18 15:31:54<editable-koo-old> maybe discardedes will want to help me make things a bit more robust, add some checks and watchdogs
06.08.18 15:32:12* editable-koo-old wonders if we should just set up zabbix
06.08.18 15:40:49<editable-koo-old> nilli, hope you're now not spinning in a downward spiral of self-hate, depression and drug abuse as well
06.08.18 15:43:06<nilli> . after the high of lambda calculus you mean??!! :)
06.08.18 15:43:21<editable-koo-old> :)
06.08.18 15:43:45<editable-koo-old> i keep saying, kids, dont do programming
06.08.18 15:44:12<nilli> I hope stoopkid is still with us after realizing that there is life  beyond agda
06.08.18 15:45:32<editable-koo-old> yea, i dunno how far we could go without him
06.08.18 15:46:38<editable-koo-old> he's probably just playing with my ozobot right now
06.08.18 15:47:57<nilli> we cant do anything without him. he is probably the only one ever that could learn from HMCa and actualy know what he is talking about.
06.08.18 15:49:16<nilli> did you left him ozobot or he is just programming for it?
06.08.18 15:49:24<editable-koo-old> left him one
06.08.18 15:50:15<editable-koo-old> well, so far i know what to do, will see how long doing that will take me
06.08.18 15:50:59<editable-koo-old> but then, we're all taking about him like he's gone forever, but he might be back here next week
06.08.18 15:51:40<nilli> lol now I really wonder what 's with him
06.08.18 15:51:41<editable-koo-old> for his dose
06.08.18 15:51:52<nilli> he will be back
06.08.18 15:52:01<editable-koo-old> check the -dev log
06.08.18 16:01:16<nilli> oh now I see why you where talking about self hate depression and drug. .... so did we have a good effect on him or a bad one?
06.08.18 16:08:43<editable-koo-old> well, he says he wants to work on himself, thats good i think
06.08.18 16:13:05<nilli> yes its good. but I hope he will realize all the good things that he is and come back to thous. he really is a great guy and very very smart.
06.08.18 16:20:06<nilli> \join autonomic-dev
06.08.18 16:21:00<nilli> got it right on the second try
06.08.18 17:23:53*** Nick change: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
06.08.18 23:35:08*** Quit: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9) left #AutoNomic: Ping timeout: 252 seconds
07.08.18 03:18:24*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
07.08.18 03:19:18<nilli> \join autonomic-dev
07.08.18 04:28:09*** Quit: vbmithr (~vb@luminar.eu.org) left #AutoNomic: Ping timeout: 264 seconds
07.08.18 05:09:32*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 252 seconds
07.08.18 10:20:24*** Join: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9, (unauthenticated): 77.127.34.9 - http://webchat.freenode.net)
07.08.18 18:51:15*** Join: typlian5 (~PircBotX@185.185.69.118, (unauthenticated): adequatt)
08.08.18 03:17:49*** Quit: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9) left #AutoNomic: Ping timeout: 252 seconds
08.08.18 03:32:02*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
08.08.18 03:43:19<HMCa> [Q]
08.08.18 03:44:09<HMCa> in the kill box! XD
08.08.18 04:05:18<koo5[m]> What
08.08.18 04:08:07<HMCa> i'm making it a thing
08.08.18 04:08:41<HMCa> you know that qanon madness?
08.08.18 04:09:04<HMCa> [Q]
08.08.18 04:09:14<HMCa> it is in a kill box
08.08.18 04:09:56<koo5[m]> Nope
08.08.18 04:22:02<HMCa> you're better off
08.08.18 04:23:13<HMCa> it is a strange conspiracy theorist group that likes to put people/things/whatever in square brackets and refer to it as a kill box
08.08.18 04:23:16<HMCa> like
08.08.18 04:23:39<HMCa> [evil secret society people]
08.08.18 04:24:12<HMCa> anyway, supposedly anonymous declared war on them or something
08.08.18 04:24:13<HMCa> so
08.08.18 04:24:21<HMCa> now, ironically...
08.08.18 04:24:25<HMCa> [Q]
08.08.18 05:13:52*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 252 seconds
08.08.18 05:15:40*** Quit: typlian5 (~PircBotX@185.185.69.118) left #AutoNomic: Ping timeout: 240 seconds
08.08.18 08:12:02*** Join: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9, (unauthenticated): 77.127.34.9 - http://webchat.freenode.net)
08.08.18 08:22:46*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
08.08.18 08:29:18*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
08.08.18 09:42:30*** Nick regain: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
08.08.18 16:20:44<koo5[m]> Hows it going?
08.08.18 16:24:45*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
08.08.18 16:33:28<editable-koo>hello to whomever it may concern
08.08.18 16:33:35<editable-koo>discardedes here
08.08.18 16:34:01<editable-koo>editable-koo-old: ic you mentioned me?
08.08.18 16:34:33<editable-koo>robustness? however can i be of service?
08.08.18 16:57:10<editable-koo>hi:)
08.08.18 16:57:21<editable-koo>i was just thinking ill go check out the convo you had with stoop
08.08.18 16:57:29<editable-koo>well, hmm
08.08.18 16:57:31* editable-koo thinks
08.08.18 16:59:58<editable-koo>so, one issue with editable-log is when i for some reason restart it. It connects to irc and joins the channels automatically, but i have to wait until thats done, until i can run the circ2 command, which assigns file names to the irc buffers
08.08.18 17:00:42<editable-koo>maybe we could instead do this inside the autosave timer hmm
08.08.18 17:03:59<editable-koo>ah, it also inserts the contents of the log file 
08.08.18 17:04:14<editable-koo>so, i guess we should check if a file name is already assigned
08.08.18 17:05:59<discardedes> editable-koo thinking......
08.08.18 17:06:53<discardedes> i dont have circ2 in my emacs
08.08.18 17:07:33<discardedes> are you saying you want to rename the buffers prior to joining the channels?
08.08.18 17:09:00<editable-koo>let me show you in tmux
08.08.18 17:09:15<editable-koo>D ok im in
#AutoNomic> circe-chat-target08.08.18 18:09:46*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 13 days 23 hours 58 minutes 59 seconds ago
                 *** Names: editable-koo discardedes dmiles nilli editable-koo-old nikaala[m]1 Deadhand lexx_[m] genuinelyfx[m] koo5[m] HMCa @ChanServ cantora Tamara_ redfish64
                 *** End of /NAMES list.
08.08.18 18:33:28*** [486 from tolkien.freenode.net] editable-koo discardedes You must log in with services to message this user
08.08.18 18:33:53<editable-koo>bash -c "rsync -v -ah -e 'ssh -p  44' -r  editable-log@loworbit.now.im:/home/editable-log          loworbit-`date "+%F-%H-%M-%S"`"
08.08.18 18:34:18*** [486 from tolkien.freenode.net] editable-koo discardedes You must log in with services to message this user
08.08.18 18:34:40<editable-koo>hmmm..... "You must log in with services to message this user"
08.08.18 18:35:02<editable-koo>that explains another problem i was having
08.08.18 18:35:21<editable-koo>ok... enough fun... gnight
08.08.18 18:35:22<editable-koo>:)
08.08.18 18:35:26<editable-koo>gn:)
08.08.18 18:35:37<discardedes> ill test this first editable-koo
08.08.18 18:39:38*** Quit: nilli (4d7f2209@gateway/web/freenode/ip.77.127.34.9) left #AutoNomic: Ping timeout: 252 seconds
08.08.18 19:26:58<HMCa> editable-koo: that was what happened to me
08.08.18 19:27:12<HMCa> some server problems or something
08.08.18 19:32:00<discardedes> my guess is that due to the spam, unless you are a registered user, you cant message, and that bots typically arent registered as users
08.08.18 19:32:21<discardedes> ive have this trouble both with the log program and also with a bot
08.08.18 19:50:49<discardedes> but then again, the log program can chat, so......
08.08.18 19:51:38<discardedes> not quite narrowed down, but there is something suspicious with /msg and bots and programs over the past few weeks
08.08.18 22:16:02*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
08.08.18 22:57:12*** Join: nilli (4d7e4b2e@gateway/web/freenode/ip.77.126.75.46, (unauthenticated): 77.126.75.46 - http://webchat.freenode.net)
09.08.18 03:47:59*** Quit: nilli (4d7e4b2e@gateway/web/freenode/ip.77.126.75.46) left #AutoNomic: Ping timeout: 252 seconds
09.08.18 04:10:53*** Join: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
09.08.18 04:13:57<editable-koo>freenode doesnt know/care what client you use to connect to it
09.08.18 04:20:36<nilli> hey koo
09.08.18 04:31:45<editable-koo>hey
09.08.18 04:31:58<editable-koo>no rockets falling on your head?
09.08.18 04:37:16<nilli> no . im fine we are far enough. you can see in the map Lehavim . the last time they reached out that far was in the war 2 year ago.
09.08.18 04:42:33<nilli> they have no mercy on their own people there whiling to get all killed for the pretend cause of getting them back to their land .  eventually its all dollars wars
09.08.18 04:44:21<nilli> once we achieve the separation between state and currency we will all live in peace.
09.08.18 04:57:32<nilli> koo i am on riot but It show me how to chat. I cant find how to get to autonomic as a chat room.
09.08.18 04:59:46* editable-koo back from google maps
09.08.18 05:00:26<koo5[m]> try clicking https://riot.im/app/#/room/#autonomic:matrix.org
09.08.18 05:02:22*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-adnphjvmjqnrqopx, (unauthenticated): @nilli:matrix.org)
09.08.18 05:02:46<nilli[m]> ok Im in
09.08.18 05:03:54<nilli[m]> so I  will see the history here when ever I log back in?
09.08.18 05:04:51<editable-koo>as long as riot doesnt start glitching again
09.08.18 05:06:37<nilli[m]> lol that is good enough for me 😁
09.08.18 05:10:14<nilli[m]> how do I join  autonomic dev from here. its not working the same way\
09.08.18 05:33:02*** Quit: nilli (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 252 seconds
09.08.18 06:32:58<koo5[m]> https://riot.im/app/#/room/#freenode_#autonomic-dev:matrix.org
09.08.18 06:34:29<editable-koo>hmm would be good to put these two in the topic, along with the new logger
09.08.18 18:20:23*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
09.08.18 18:25:49*** [435 from rajaniemi.freenode.net] editable-koo editable-discard #emacs-circe Cannot change nickname while banned on channel
09.08.18 18:26:30<editable-koo>hmmmm....
09.08.18 18:26:42<discardedes> thats weird
09.08.18 18:27:11<editable-koo>"Cannot change nickname while banned on channel"
09.08.18 18:52:14<editable-koo>i wonder if somebody will ever fix this error message
09.08.18 18:52:27<editable-koo>its trying to say you have to be identified with nickserv
09.08.18 18:52:44<discardedes> editable-koo: could it be the precautions about the spam?
09.08.18 18:56:18<discardedes> ill be back in about an hour, going for a walk
09.08.18 18:56:21<editable-koo>no, this has always been this way
09.08.18 18:56:22<editable-koo>ok
09.08.18 18:56:28*** Nick change: You are now known as editable-whateve
09.08.18 18:56:36<discardedes> cool
09.08.18 18:56:39<discardedes> fixer i suppose
09.08.18 18:57:28<editable-whateve>i identified manually, and ill leave the options turned on, but im not sure its gonna work the next time editable log restarts, it seemed it didnt
09.08.18 18:58:01<discardedes> you had to identify with nickserv, i saw?
09.08.18 18:58:07<discardedes> you think you might need to re-identify?
09.08.18 18:58:08<editable-whateve>yeah
09.08.18 18:58:15<discardedes> hmmmm..... another interesting problem
09.08.18 18:58:18<discardedes> ok.... back in a bit
09.08.18 18:58:31<editable-whateve>well, you have to do it once, but every time you connect to irc
09.08.18 18:58:43<discardedes> maybe if you have it sign in
09.08.18 18:58:48<discardedes> auto
09.08.18 18:58:57<editable-whateve>yeah i turned it on, will see next time
09.08.18 18:59:31<discardedes> bbiab
09.08.18 18:59:37<editable-whateve>alright
09.08.18 19:12:18<editable-whateve>im gonna crash
09.08.18 19:12:20<editable-whateve>sorry
09.08.18 20:04:30<discardedes> no prob editable-whateve
09.08.18 20:04:41<discardedes> we will catch up next time
09.08.18 20:06:22<discardedes> also, i am later today than yesterday
09.08.18 20:06:43<discardedes> i think maybe by two hours, i think this is when you went to sleep last night
09.08.18 20:07:33<discardedes> ill have to syncronize with your schedule
10.08.18 00:26:32*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
10.08.18 02:02:17<HMCa> this anna db is cool
10.08.18 02:40:46<nilli[m]> hey koo how is it going with your coding ?  has stoop checked in with you ?🙂
10.08.18 02:46:04<nilli[m]> Hey HMCa off topic but I see that you brought it up again . that conspiracy theory trend . makes me lough so hard
10.08.18 02:46:35<nilli[m]> laugh
10.08.18 02:51:59<nilli[m]> "makes me laugh so hard" . I actualy would never use that kind of term , but I think that you use it a few times and its is the most accurate one.
10.08.18 02:54:32<nilli[m]> to think that people can be so organized as to coordinate in such a centralized efficient way  is ofc out of the question
10.08.18 02:56:41<nilli[m]> that leaves us with the idea that a few powerful individuals are in such powerful positions as to control others mindset.
10.08.18 02:59:54<nilli[m]> which may sounds like a reasonable idea. and it is so.
10.08.18 03:01:36<nilli[m]> though if we  will check that closely All of humans social behaviors follow that same pattern
10.08.18 03:04:19<nilli[m]> in order to form any "common" idea we need to reach a consensus with in the minds of the participants
10.08.18 03:05:44<nilli[m]> thus we have to influence them to believe in our idea ("our" as the small group that came up with that idea)
10.08.18 03:07:07<nilli[m]> That is pretty simple, but its where things can get really interesting
10.08.18 03:08:09<HMCa> hrmm
10.08.18 03:08:26<nilli[m]> what if the idea is to serve  that small group only? thus that makes it a conspiracy ?
10.08.18 03:08:35<HMCa> sounds pretty close to the no comment stuff :-)
10.08.18 03:09:12<nilli[m]> you brought it up...:) and in my world there in no such thing of no comment :)))
10.08.18 03:10:11<HMCa> how are you doing with the book?
10.08.18 03:10:13<nilli[m]> It actualy an important talk regarding how we form consensus
10.08.18 03:14:30<nilli[m]> im good with the book. I did the first two exercise  where I got stuck with the installations issues  and now I actualy reading to learn and then to see if I can do the others  and before asking more questions. :)
10.08.18 03:19:41<nilli[m]> I am a very slow learner as you noticed I always checked back to what I know so it will not present any contradictions  before talking the next step  ( and I am not a machine I have to take care of myself and others around me) :)
10.08.18 03:21:28<nilli[m]> and the issue with conspiracy is quite concerning . and have a lot to do with what we are doing
10.08.18 03:21:56<nilli[m]> so that is why I decided to respond on it
10.08.18 03:23:19<nilli[m]> I think that for you I dont have to explain in details
10.08.18 03:24:34<nilli[m]> people are starting to become aware to the way their own mechanism  is working
10.08.18 03:25:13<HMCa> strange stuff. :-|
10.08.18 03:26:53<nilli[m]> they are used to think of their biology that way  but not their mind as part of the machine and even less their social organism
10.08.18 03:27:52<nilli[m]> forming  a consensus based on free choice is what we are looking at
10.08.18 03:28:39<nilli[m]> and "free choice " is in fact complete decentralization at the core or the mechanism
10.08.18 03:28:49<nilli[m]> which is how we are made
10.08.18 03:29:46<nilli[m]> so now people are starting to actualy learn that mechanism and its functions on the social level
10.08.18 03:30:08<editable-whateve>hey
10.08.18 03:30:20<HMCa> hi koo
10.08.18 03:30:27<nilli[m]> hey koo koo
10.08.18 03:30:46<editable-whateve>i whatsapped stoop and he whatsapped back, but it was too late here for doing a call
10.08.18 03:31:15<editable-whateve>coding is going fine
10.08.18 03:31:41<editable-whateve>but it was easier to focus on work when i was away from home:)
10.08.18 03:32:01<editable-whateve>old patterns kick back in
10.08.18 03:34:06<nilli[m]> I think that a weekly  scheduled hangout meeting will help
10.08.18 03:34:34<editable-whateve>yea we said we should do that
10.08.18 03:36:13<nilli[m]> is Tuesdays  evening wound good for you?
10.08.18 03:36:16<nilli[m]> sound
10.08.18 03:38:16<nilli[m]> koo, how far are you on the book?
10.08.18 03:39:55<nilli[m]> maybe we should also have a study hangout sessions,. and we can invite others to join
10.08.18 03:41:04<editable-whateve>yeah i guess tuesdays evenings should work
10.08.18 03:41:53<editable-whateve>well like i said, i made it all the way upto the exercise chapters and stopped there
10.08.18 03:42:13<editable-whateve>yeah hmm
10.08.18 03:43:50<nilli[m]> what do you mean up to the exercise, in each chapter there are exercise
10.08.18 03:44:08<editable-whateve>the second half of the book
10.08.18 03:44:17<editable-whateve>its like, bigger exercises:0
10.08.18 03:44:19<editable-whateve>:)
10.08.18 03:46:11<editable-whateve>i didnt find any of them interesting, and now if i'll want to exercise agda, ill rather pick up something that stoop wrote
10.08.18 03:46:36<nilli[m]> I see . that makes more sense. I have to catch up on basics but I hope that the proving is going to be a bit easier for me since I think I really understood the basics of it as stoop was teaching me
10.08.18 03:49:08<editable-whateve>cool, we'll make a good team:)
10.08.18 03:58:13<nilli[m]> by the way on the philosophical level of what is an assumption I was trying bug you guys here , but I guess even HMCa did not find it interesting or mature enough to comment.
10.08.18 03:59:55<nilli[m]> I think that eventually it is will be important but ill keep it for myself for a while and do the work
10.08.18 04:09:44<editable-whateve>ok
10.08.18 05:20:27<nilli[m]> ok I just spend a full 1 hour trying to try to  get back to the bool file I worked on yesterday with no success to realize that I assume it is a file but I dont even know why some are opened as buffers.
10.08.18 05:27:55<editable-whateve>hmm
10.08.18 05:27:59<nilli[m]> there is no way in the world that I can learn it on my own. every question that i have is an answer to a question I have't even ask yet (kind of what this whole thing is about right?) anyway I really miss to much of the basics.
10.08.18 05:28:39<editable-whateve>you mean youre trying to find and open the bool.agda file?
10.08.18 05:28:54<editable-whateve>maybe you need some computer literacy course
10.08.18 05:35:25<nilli[m]> even more basic if there is such thing., but I am not going to start at that entry level .sorry  . . I am not that motivated.  If I get someone who show me how to work on emacs Ill  do it .
10.08.18 05:35:38<nilli[m]> its like what stoop did with the proving thing
10.08.18 05:39:14<nilli[m]> If I where to learn on my own I would have to learn many  basic terms in math  that would take a long time and much effort  just to understand what they try to say. he got me understand it in 4 days.
10.08.18 05:42:51<nilli[m]> right now It all seems wrong
10.08.18 05:43:39<editable-whateve>well getting some more computer literacy will: 1) not cost you any money 2) make you more valuable on the job market 3) make it possible/easier for you to participate in tau both pre and post genesis 
10.08.18 05:44:10<editable-whateve>there are also free programming for women courses, where a pile of guys is eager to help a lady with absolutely anything i bet
10.08.18 05:44:19<nilli[m]> ill just go back to do my art :)
10.08.18 05:44:24<editable-whateve>dont worry and take it slow
10.08.18 05:44:39<editable-whateve>yeah take a break
10.08.18 05:44:58<editable-whateve>we can also do a video call again when you feel like it
10.08.18 05:45:14<nilli[m]> I cant take anything slow... I have to do it or do other things
10.08.18 05:45:43<editable-whateve>ok, dont worry and do it:)
10.08.18 05:49:05<editable-whateve>hmm we can also try something else, if we can get you to connect to our vps, then we can do stuff there on a shared screen
10.08.18 05:49:16<editable-whateve>i think we should do that
10.08.18 05:49:38<editable-whateve>we got agda and emacs and everything there
10.08.18 05:49:46<nilli[m]> I can decide to learn programming form the beginning but im not  up to it. if I cant find a shortcut to get to what we do here on the tau I will not do it.
10.08.18 05:50:57<editable-whateve>no i dont think you should do a general programming course, just that you could find some one on one help there
10.08.18 05:51:02<editable-whateve>lets do the vps thing
10.08.18 05:52:31<nilli[m]> what is the vps?
10.08.18 05:54:01<nilli[m]> anyway I have to go now will talk to you later . :)
10.08.18 05:54:33<editable-whateve>yeah, see you later
10.08.18 05:59:55<editable-whateve>i'll need to you download and run this: https://the.earth.li/~sgtatham/putty/latest/w32/putty-0.70-installer.msi
10.08.18 10:15:08*** Join: sifar (~sifar@137.59.135.143, (unauthenticated): sifar)
10.08.18 10:15:09*** Quit: sifar (~sifar@137.59.135.143) left #AutoNomic: Changing host
                 *** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
10.08.18 10:16:30*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Client Quit
10.08.18 13:06:22*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Ping timeout: 260 seconds
10.08.18 19:43:46<HMCa> emacs is always painful, imo
10.08.18 19:44:21<HMCa> nilli might be more comfortable in something like atom editor in the end
10.08.18 19:44:31<HMCa> but the book teaches emacs, so
10.08.18 20:41:02*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
10.08.18 20:44:35<editable-whateve>HMCa: what book?
10.08.18 20:44:52*** Nick change: You are now known as editable-discard
10.08.18 20:49:01<editable-discard>i can help nilli with emacs
10.08.18 22:00:47*** Join: redfish64 (~tim@45.32.52.10, redfish64: Unknown)
10.08.18 23:47:05*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
11.08.18 02:58:59<editable-discard>i dont think nilli is having emacs-specific issues, except maybe getting confused by temporary/lock files
11.08.18 03:15:31<HMCa> well that is good
11.08.18 03:37:20<editable-discard>its more like, how to navigate directories in windows explorer, how to unzip a file, making sense of which file is which while windows is hiding the extensions..
11.08.18 03:38:25*** Nick change: You are now known as editable-koo
11.08.18 03:50:43<HMCa> she could just use emacs to do all of those things... XD
11.08.18 03:50:56<editable-koo>lulz
11.08.18 03:51:21<HMCa> the very old joke ofc: emacs is a good OS but it could use a decent editor
11.08.18 03:54:31<nilli[m]> hi guys
11.08.18 03:57:33<editable-koo>hey
11.08.18 03:59:56<nilli[m]> the main problem with this is that I try to do very simple things on agda which I seem to understand alright so far, but in order to execute it on emacs to learn that first
11.08.18 04:00:33<nilli[m]> I need to learn emacs first
11.08.18 04:05:04<nilli[m]> I hate negativing between menses (I think it makes men feel very manly , its like being mechanics ...if you ever wondered why so few women are  at it)
11.08.18 04:06:14<nilli[m]> * navigating
11.08.18 04:06:59<editable-koo>between us?
11.08.18 04:07:15<nilli[m]> menus
11.08.18 04:07:20<editable-koo>oh
11.08.18 04:08:26<nilli[m]> lol ... I use the spellcheck choices  without reading it good enough
11.08.18 04:08:31<editable-koo>idk, menus dont make me feel manly, you hmc?
11.08.18 04:10:36<nilli[m]> anyway what is a buffer?
11.08.18 04:11:19<editable-koo>its a place with some text
11.08.18 04:11:44<HMCa> i dislike menus in general and try to avoid ever using them... I'm more of a commandlines sort...
11.08.18 04:11:53<HMCa> I use vi, not emacs. :-)
11.08.18 04:12:51<nilli[m]> and what makes it a file then
11.08.18 04:13:22<editable-koo>saving it, for one
11.08.18 04:14:10<editable-koo>well, thats it, saving it makes it a file
11.08.18 04:14:15<HMCa> a file is on a big, slow memory that we call a disk, and a buffer is in a smaller, faster memory called ram... and trchnically the disk is also a ram, but nevermind that...
11.08.18 04:14:50<HMCa> computing is full of all sorts of arbitrary and vestigial nonsense like this...
11.08.18 04:15:45<HMCa> I dislike the notion of "files" in general, too. ;-)
11.08.18 04:17:48<nilli[m]> so that is what I thought (regarding saving) and that is why I could not find my first exercise file that was a buffer not saved. however I have a few that are saved and are buffers
11.08.18 04:18:07<editable-koo>so in czech we actually apparently have this nice term that goes like operative/operational memory
11.08.18 04:19:09<nilli[m]> ok all I want to do now is to be able to fucken make that emacs work for me so lets try it again together
11.08.18 04:19:13<HMCa> the practical difference is that if you suddenly lost power you'd lose the contents of buffers but not the contents of files... which is a little silly, because its not like anyone edits files at speeds faster than the disk... :-|
11.08.18 04:19:52<HMCa> so why we still use buffers of files?  Beats me. :-)
11.08.18 04:21:13<editable-koo>nowadays its more like your computer loses power over its own shit and freezes
11.08.18 04:21:35<editable-koo>nilli[m]: i still think we should start with the vps thing
11.08.18 04:22:15<editable-koo>it will be much easier for all of us afterwards
11.08.18 04:23:03<nilli[m]> is that what you asked to download yesterday or was it part of another talk?
11.08.18 04:23:10<editable-koo>yes that
11.08.18 04:24:00<nilli[m]> ok I downloaded it
11.08.18 04:24:18<editable-koo>ok run it
11.08.18 04:27:46<nilli[m]> what do you mean run it? when I open it I have  a menu with all sort of things ...
11.08.18 04:28:07<editable-koo>what things?
11.08.18 04:30:22<nilli[m]> send you a pic on whatsapp
11.08.18 04:31:17<editable-koo>put in 167.88.171.233 for host name
11.08.18 04:31:22<editable-koo>44 for port
11.08.18 04:31:34<editable-koo>user for user
11.08.18 04:31:53<editable-koo>try to save it
11.08.18 04:36:05<nilli[m]> did host did  port , user? I dont see User anywhere . and is not saving
11.08.18 04:36:36<editable-koo>ok nvm
11.08.18 04:36:48<editable-koo>click on the "Default Settings" and try save?
11.08.18 04:42:43<nilli[m]> not doing it.
11.08.18 04:43:32<editable-koo>ok doesnt matter, try connect
11.08.18 04:46:13<nilli[m]> open you mean?  and ignore the security allert?
11.08.18 04:47:17<editable-koo>yeah
11.08.18 04:51:19<nilli[m]> it say the that connection was lost but by now I have  that (pic on  whatsapp)
11.08.18 05:47:23<editable-koo>generating keys went smoother than expected
11.08.18 05:47:38<editable-koo>smoother than putting in passwords
11.08.18 06:20:46<editable-koo>i take that back
11.08.18 07:48:20<editable-koo>module my-bool where
                 <editable-koo>open import bool hiding ( X )



11.08.18 14:22:46<nilli[m]> just so you know eventually I got back to my emacs on my own to try see what did not work there for me.  and I found it ...
11.08.18 14:26:08<nilli[m]> was what eventually turned out to be a fucked up file of all agda files that I used last time.  I opened another copy of the agda files that I realized I had and then all worked fine!!!
11.08.18 14:27:25<nilli[m]> spend another 2 hours .... but got it to work FOR ME  😇
11.08.18 14:30:55*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
11.08.18 14:43:16<editable-koo>this screen is so small
11.08.18 14:43:49*** Nick change: You are now known as editable-discard
11.08.18 14:43:52<editable-discard>this screen is so small
11.08.18 14:46:15<editable-discard>koo5[m]: you must have been using a phone or something
11.08.18 14:46:19<editable-discard>hi
11.08.18 14:46:24<editable-discard>you here?
11.08.18 14:46:28<editable-discard>yea
11.08.18 14:46:44<editable-discard>sorry, i just have it on a notebook really far away from me
11.08.18 14:47:07<editable-discard>no problem
11.08.18 14:47:23<editable-discard>i just think its a bit funny that a tiny corner of my screen is the entire emacs
11.08.18 14:47:36<editable-discard>like, 20 words per screen
11.08.18 14:47:38<editable-discard>:D
11.08.18 14:47:45<editable-discard>:)
11.08.18 14:48:02<editable-discard>if youre around tonight, hit me up
11.08.18 14:48:13<editable-discard>but hopefully, on a bigger client
11.08.18 14:48:26<editable-discard>if not, its kool
11.08.18 14:48:53<editable-discard>im kinda around now, but still want to finish some coding....
11.08.18 14:49:03<discardedes> ok....
11.08.18 14:49:06<discardedes> finish up
11.08.18 14:49:17<discardedes> hit me up in an hour
11.08.18 14:49:32<editable-discard>ok
11.08.18 14:49:41<discardedes> happy coding
11.08.18 14:49:42<discardedes> :)
11.08.18 14:50:46<editable-discard>thx
11.08.18 14:51:10<discardedes> same to you sir
11.08.18 14:51:51<editable-discard>same to you
11.08.18 14:52:02<editable-discard>nilli[m]: now youre a real programmer, lol
11.08.18 18:28:00<editable-discard>discardedes: sorry, maybe tomorrow
11.08.18 19:13:32<discardedes> editable-discard: np
11.08.18 19:13:37<discardedes> have a good night
11.08.18 19:14:28<discardedes> no stress.... im taking it easy
11.08.18 19:14:36<discardedes> whenever we link up, it'll happen
11.08.18 19:14:54<discardedes> ill be around
11.08.18 19:14:55<discardedes> :)
11.08.18 21:50:23*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
12.08.18 02:07:17<HMCa> watching editable-discard talk to itself is fun
12.08.18 03:22:31<nilli[m]> people are realizing the different manifestations of being
12.08.18 03:26:29<nilli[m]> while I get stuck on the more common  ones ... and lets start with the third assignment in the book. open  a new file my-bool.agda
12.08.18 03:32:37<nilli[m]> koo you did it on that shared  screen but then I tried it on my emacs  and of it did not load  marking  module my-bool  where as  "what the fuck " or in its word :
12.08.18 03:32:56* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/qRKFKdOiRPZisuhsuVbaZntB >
12.08.18 03:35:02<nilli[m]> C:\1.2 I have all the agda files  including the right bool that I can load and work with out any problem
12.08.18 03:38:15<nilli[m]> on that third exercise it ask me to open a new file and name it my-bool.agda  which I did by clicking on the file and name a new filr name......So what did I do worng ?
12.08.18 04:01:03<editable-discard>hey
12.08.18 04:04:32*** Nick change: You are now known as editable-koo
12.08.18 04:41:36<editable-koo>you named the file "1.2#my-bool.agda" ?
12.08.18 05:00:54<editable-koo>mmm, new python trick: 
12.08.18 05:00:56<editable-koo>>>> numbers = [1, 2, 3, 4, 5, 6]
                 <editable-koo>>>> first, *rest = numbers
12.08.18 08:47:21<nilli[m]> I just named it my-bolo.agda and it named itself  with "#" and on 1.2 file ( I made a few tries so each one got another "#" "##' ext)
12.08.18 08:47:31<nilli[m]> my bool
12.08.18 08:49:37<nilli[m]> koo I have no clue what you mean by the trick
12.08.18 08:51:09<nilli[m]> let go by the book and see where I when wrong
12.08.18 08:53:41<nilli[m]> 1.3. Pick a function defined in bool.agda like _xor_, _imp_, or another, to redefine
12.08.18 08:53:42<nilli[m]> yourself. You can do this in a new file called my-bool.agda
12.08.18 08:58:31<nilli[m]> so to my understanding i am  asked to open a new file  (in order to DO anything in a  new file one have to  OPEN a new file) so I go to "file" (on whichever file that I had open on emac )  ank click ....
12.08.18 08:59:51<nilli[m]> the window opened up and let me write a new file name (remember I dont have that file yet) so once I named it i click open and a  that new file opens up
12.08.18 09:00:30<nilli[m]> and now I cant do anything on it.
12.08.18 09:04:50<nilli[m]> I tried  first the exercise but it did not load then I tried  pasting the "bool" file and "level" file but it did not load  even with that (and I cant imagine having to paste it every time.  should be able to read from my 1.2 file on c drive  directly  (as much as I could understand )
12.08.18 09:10:20<nilli[m]> I could write a really nice fun story in the time I spend writing about  my  efforts to make the Golem  do anything for me and boring you all with basic technical details
12.08.18 09:16:24<editable-koo>well, i guess we can start with the fact that files dont name themselves
12.08.18 09:16:44<editable-koo>so try to create my-bool.agda in the 1.2 directory
12.08.18 09:17:13<nilli[m]> I named it
12.08.18 09:18:00<nilli[m]> "my-bool.agda" and opend it
12.08.18 09:29:20<nilli[m]> I dont want any of you to spend time on getting me computer literate.  We tried ... thank you all. (really, but that is ridicules... If I really want to do it I need to start at the beginning  ...but im not...)
12.08.18 09:32:50<nilli[m]> maybe ill find someone here who want to lean it with me and  know computers. Ill see about that 😅.
12.08.18 09:33:34<editable-koo>theres still the vps
13.08.18 03:02:17*** [412 from rajaniemi.freenode.net] editable-koo No text to send
13.08.18 08:06:43*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-iqtpemjgoqadvvkw, stoopkid: stoopkid)
13.08.18 08:21:25<editable-koo>yo
13.08.18 08:22:20<stoopkid> hey
13.08.18 08:22:33<editable-koo>hows it going?
13.08.18 08:24:00<stoopkid> eh
13.08.18 08:24:07<stoopkid> school's almost done, thankfully
13.08.18 08:25:04<editable-koo>great
13.08.18 08:26:25<editable-koo>i have the bnodes bug almost tracked down...almost
13.08.18 08:29:05<stoopkid> im thinking im still gonna be away for a while, just wanted to check in
13.08.18 08:29:21<editable-koo>yeah, alright
13.08.18 08:36:43<editable-koo>i read elicott city goot flooded out
13.08.18 08:38:03<stoopkid> always heh
13.08.18 08:52:09<editable-koo>allright i might have just found the bug
13.08.18 08:59:21<editable-koo>its......doing......something
13.08.18 08:59:46<editable-koo>probably infilooping
13.08.18 09:01:07<stoopkid> maybe one day we'll have a spec from HMC to compare against
13.08.18 09:01:59<editable-koo>infilooping... check
13.08.18 09:04:06<editable-koo>self-modifying python.... check
13.08.18 09:06:42<stoopkid> i should take some time and extend our python-in-agda thing at some point
13.08.18 09:07:14<editable-koo>i should probably too, its a good tangible exercise for me
13.08.18 09:15:01<editable-koo>alright, time to try to run this thing in pypy
13.08.18 10:15:36-SaslServ- koom!~sirdancea@89.24.56.217 has just authenticated as you (sirdancealot)
13.08.18 10:15:42*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
13.08.18 13:01:13*** Quit: koom (~sirdancea@89.24.56.217) left #AutoNomic: Ping timeout: 248 seconds
13.08.18 14:16:05*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-iqtpemjgoqadvvkw) left #AutoNomic: Quit: Connection closed for inactivity
13.08.18 15:27:11-SaslServ- koom!~sirdancea@89.24.56.217 has just authenticated as you (sirdancealot)
13.08.18 15:27:17*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
13.08.18 16:42:21*** Quit: koom (~sirdancea@89.24.56.217) left #AutoNomic: Ping timeout: 272 seconds
13.08.18 17:32:54*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
13.08.18 18:43:24*** Quit: koom (~sirdancea@89.24.56.217) left #AutoNomic: Ping timeout: 240 seconds
13.08.18 20:25:27*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
13.08.18 22:00:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-drbcfxkvnkpgdtqh, stoopkid: stoopkid)
13.08.18 23:35:58<HMCa> wb stoopkid
14.08.18 01:37:43-SaslServ- koom!~sirdancea@89.24.56.217 has just authenticated as you (sirdancealot)
14.08.18 01:37:48*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
14.08.18 04:16:26*** Quit: koom (~sirdancea@89.24.56.217) left #AutoNomic: Ping timeout: 248 seconds
14.08.18 04:42:03<editable-koo>so, we ended up with two corecursive bnodes
14.08.18 06:59:39-SaslServ- koom!~sirdancea@89.24.56.217 has just authenticated as you (sirdancealot)
14.08.18 06:59:45*** Join: koom (~sirdancea@89.24.56.217, sirdancealot: koo5)
14.08.18 07:11:56*** Quit: koom (~sirdancea@89.24.56.217) left #AutoNomic: Ping timeout: 272 seconds
14.08.18 12:22:55*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 240 seconds
14.08.18 13:29:06<stoopkid> lol
14.08.18 13:29:20<stoopkid> well if we could lazily evaluate our inferencing then maybe it would work out
14.08.18 13:29:34<stoopkid> speaking of laziness and working out...
14.08.18 13:29:35<stoopkid> brb
14.08.18 14:12:37<editable-koo>lol
14.08.18 14:14:58<editable-koo>im still setting things up to really visualize how this even comes about
14.08.18 15:39:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-drbcfxkvnkpgdtqh) left #AutoNomic: Quit: Connection closed for inactivity
#AutoNomic> 15.08.18 02:40:10*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 20 days 8 hours 29 minutes 23 seconds ago
                 *** Names: editable-koo redfish64 nilli[m] dmiles editable-koo-old nikaala[m]1 Deadhand lexx_[m] genuinelyfx[m] koo5[m] HMCa @ChanServ cantora Tamara_
                 *** End of /NAMES list.
#AutoNomic> 15.08.18 03:01:25*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 20 days 8 hours 50 minutes 38 seconds ago
                 *** Names: editable-koo redfish64 nilli[m] dmiles editable-koo-old nikaala[m]1 Deadhand lexx_[m] genuinelyfx[m] koo5[m] Tamara_ cantora @ChanServ HMCa
                 *** End of /NAMES list.
15.08.18 06:19:02<nilli[m]> 13:01
15.08.18 06:19:03<nilli[m]> took me a while to think but I think that I have the solution for what I need to do
15.08.18 06:19:15<nilli[m]> mimic dont learn
15.08.18 06:23:31<nilli[m]> So I need to go over the book with someone who will go with me over the book step by step and execute the exercise  so I can follow.
15.08.18 06:24:42<nilli[m]> I think that by the time we will reach 1/4 of it I will be able to get some done on my own.
15.08.18 06:45:19<editable-koo>well, im not sure if i want to do every exercise by myself, but we can hop on the vps and try for a while
#AutoNomic> 15.08.18 06:48:14*** Join: editable-koo (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 20 days 12 hours 37 minutes 27 seconds ago
                 *** Names: editable-koo redfish64 HMCa @ChanServ cantora Tamara_ koo5[m] genuinelyfx[m] lexx_[m] Deadhand nikaala[m]1 editable-koo-old dmiles nilli[m]
                 *** End of /NAMES list.
15.08.18 06:51:04<editable-koo>thats probably the best offer youre gonna get around here or anywhere
15.08.18 06:52:10<editable-koo>you can also go to #agda
15.08.18 07:51:09*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
15.08.18 08:28:50<nilli[m]> definitely the best offer. I just needed to see that I will not waste you time too.
15.08.18 08:36:16<nilli[m]> as you said there is always these developers that will be happy to show me a thing or two. so I got one. :)  here at the bitcoin embassy. he will help when I will get really stuck like I did and will need 3D (real life)  interventions
15.08.18 08:58:42<editable-koo>great
15.08.18 08:58:58<editable-koo>i think its probably good if that forces me into the exercises
15.08.18 08:59:52<editable-koo>im thinking maybe lets try to start next week, i still have a lot to finish here, and will need some days off also
15.08.18 09:14:00<discardedes> what exercises?
15.08.18 09:18:38<editable-koo>from agda book
15.08.18 09:19:12<discardedes> ill look it up
15.08.18 09:57:52*** Nick change: You are now known as editable-log
15.08.18 10:06:35*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Quit: ERC (IRC client for Emacs 24.5.1)
15.08.18 10:07:19*** Join: testname` (~user@75.97.112.182.res-cmts.brd4.ptd.net, (unauthenticated): unknown)
15.08.18 10:12:44*** Quit: testname` (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Quit: ERC (IRC client for Emacs 24.5.1)
15.08.18 10:13:20*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
15.08.18 10:15:18*** Nick change: You are now known as editable-dog
#AutoNomic> 15.08.18 10:22:09*** Join: editable-dog (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 20 days 16 hours 11 minutes 23 seconds ago
                 *** Names: editable-dog discardedes redfish64 nilli[m] dmiles editable-koo-old nikaala[m]1 Deadhand lexx_[m] genuinelyfx[m] koo5[m] Tamara_ cantora @ChanServ HMCa
                 *** End of /NAMES list.
#AutoNomic> 15.08.18 10:25:01*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
15.08.18 10:25:02*** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 20 days 16 hours 14 minutes 15 seconds ago
                 *** Names: editable-dog discardedes redfish64 nilli[m] dmiles editable-koo-old nikaala[m]1 Deadhand lexx_[m] genuinelyfx[m] koo5[m] Tamara_ cantora @ChanServ HMCa
                 *** End of /NAMES list.
15.08.18 11:01:48<nilli[m]> ok great koo.
15.08.18 15:30:08<HMCa> have I mentioned that the semicon industry is terrible?
15.08.18 15:30:34<HMCa> just in case: the semicon industry is terrible.
15.08.18 15:31:34<HMCa> they give me these chips and these docs, and the docs say some bit in some register does a thing...
15.08.18 15:32:31<HMCa> and then i change the bit back and forth, and don't get the thing happening.
15.08.18 15:33:59<HMCa> maybe we should document how chips actually work instead of the design intent. :-|
15.08.18 15:37:04*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 240 seconds
15.08.18 17:07:20*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
15.08.18 17:13:10<editable-dog>it all sounds a BIT strange
15.08.18 17:14:09<discardedes> HMCa: ^
15.08.18 17:14:26<discardedes> editable-dog is a registered name, so.... im reluctant to change it atm
15.08.18 17:33:42*** Nick change: You are now known as editable-whateve
15.08.18 17:34:03<editable-whateve>you can change it all you want, the identification stays
15.08.18 17:36:17<discardedes> ohhhh... ok editable-whateve
15.08.18 19:01:06*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fyqrjrolkiervtle, stoopkid: stoopkid)
15.08.18 19:24:36<discardedes> hey stoopkid
15.08.18 19:24:40<discardedes> on my way out
15.08.18 19:24:47<discardedes> be back in an hour or two
15.08.18 19:26:10<discardedes> check out the *scratch* buffer of the log, i think you would be interested
15.08.18 19:26:13<discardedes> ok... later
15.08.18 20:08:59<stoopkid> discardedes: heya
15.08.18 22:03:41<discardedes> stoopkid: hello
15.08.18 22:03:48<discardedes> you around?
15.08.18 23:40:19<HMCa> hi
15.08.18 23:42:13<stoopkid> HMCa: heya
15.08.18 23:42:18<stoopkid> discardedes: kinda
15.08.18 23:45:04<HMCa> what's up?
15.08.18 23:45:52<stoopkid> finals
15.08.18 23:45:53<stoopkid> you?
15.08.18 23:46:36<HMCa> fighting with drivers that don't work right
15.08.18 23:47:29<stoopkid> are you winning at least?
15.08.18 23:48:12<HMCa> hard to say, at the moment
15.08.18 23:48:32<HMCa> seems to be a stalemate
15.08.18 23:50:22<HMCa> the chip doesn't match the docs, the docs don't match the driver, and the driver doesn't work quite right anyway with the chip
15.08.18 23:53:07<stoopkid> what's their refund policy?
15.08.18 23:56:31<HMCa> well, noone bought anything yet :-)
15.08.18 23:56:57<HMCa> it's an evaluation thing
16.08.18 04:07:34<editable-whateve>yo
16.08.18 04:12:31*** Quit: nikaala[m]1 (nikaalamat@gateway/shell/matrix.org/x-apozozzpjxngferw) left #AutoNomic: Remote host closed the connection
16.08.18 04:12:36*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-zrrfilejzmsgdmwj) left #AutoNomic: Remote host closed the connection
16.08.18 04:12:38*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-aicspkuaevqiehlm) left #AutoNomic: Read error: Connection reset by peer
16.08.18 04:12:39*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-oujkgyosohaylzlg) left #AutoNomic: Remote host closed the connection
                 *** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-adnphjvmjqnrqopx) left #AutoNomic: Read error: Connection reset by peer
16.08.18 04:22:03*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-fywhudxvyvlemqpw, (unauthenticated): @koo5:matrix.org)
16.08.18 04:46:55*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-sbjkwpohkxpetssi, (unauthenticated): @nilli:matrix.org)
16.08.18 04:46:56*** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-sjuoeqmfvqshzicf, (unauthenticated): @nikaala:matrix.org)
                 *** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-mofzwrfediunccmj, (unauthenticated): @genuinelyfx:matrix.org)
16.08.18 04:47:02*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-wsprhowgdswcvyzf, (unauthenticated): @lexxus:matrix.org)
16.08.18 10:32:19*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 244 seconds
17.08.18 05:44:14*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
17.08.18 05:59:14*** Join: dmiles (~logicmoo@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
17.08.18 19:19:08*** Join: nilli (8de2598e@gateway/web/freenode/ip.141.226.89.142, (unauthenticated): 141.226.89.142 - http://webchat.freenode.net)
17.08.18 19:22:25<nilli> Hjj
17.08.18 19:42:11*** Quit: nilli (8de2598e@gateway/web/freenode/ip.141.226.89.142) left #AutoNomic: Ping timeout: 252 seconds
17.08.18 22:40:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fyqrjrolkiervtle) left #AutoNomic: Quit: Connection closed for inactivity
18.08.18 06:01:23<nilli[m]> hey guys a  blockchain friend asked  the following :
18.08.18 06:01:31<nilli[m]> What functional programming language accepts only a single input and produces a single output while chaining the output to the next function, and so on and so forth?
18.08.18 06:04:54<nilli[m]> one gave him Haskell and I referred him to agda  but then ofc could not explian if and which is better. (ofd not also understanding the question fully
18.08.18 06:06:28<nilli[m]> sent him to ask you here but seems like people are not hopping over on to IRC chat so fast.
18.08.18 14:01:43*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qfqkynergrqrmpft, stoopkid: stoopkid)
18.08.18 14:03:52<stoopkid> nilli[m]: not sure what you mean by "chaining the output to the next function"
18.08.18 14:04:53<stoopkid> if you just mean the thing we call "function composition" then any language that deserves to be called "functional" will work
18.08.18 18:53:21*** Quit: dmiles (~logicmoo@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
18.08.18 18:59:53*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
18.08.18 19:17:06<editable-whateve>external:tests/agda/listform.tau:test:PASS
18.08.18 19:27:45<editable-whateve>for how long did daemoz say he'd be gone?
18.08.18 21:16:03*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #AutoNomic: Ping timeout: 244 seconds
18.08.18 21:34:28*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
18.08.18 23:54:52*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #AutoNomic: Ping timeout: 256 seconds
19.08.18 00:00:40*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
19.08.18 00:32:23*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #AutoNomic: Ping timeout: 244 seconds
19.08.18 00:39:44*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
19.08.18 01:00:00*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #AutoNomic: Ping timeout: 272 seconds
19.08.18 01:04:45*** Join: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca, (unauthenticated): deadhand)
19.08.18 07:54:12<nilli[m]> thanks stoopkid
19.08.18 07:58:03<nilli[m]> koo I was able to get over some of the basic  problem that I had with emacs, so i start doing the exercises iif (when)  I'll get stuck with the understanding of the agda book itself I ask you guys here
19.08.18 10:28:23<editable-whateve>ok cool
19.08.18 11:04:42<editable-whateve>{?y not ?ny. ?z not ?nz} => { (?y ?z) a SAT }.
19.08.18 11:06:02<editable-whateve>so, this should translate to {...} => {X first ?y. X rest XX. XX first ?z. XX rest nil. X a SAT}
19.08.18 11:06:07<editable-whateve>right?
19.08.18 11:10:44<editable-whateve>and all facts in the kb should be understood as if they were all in one big head of one big fact-rule
20.08.18 04:15:44*** Join: typlian5 (~PircBotX@185.185.69.118, (unauthenticated): adequatt)
20.08.18 04:43:52*** Nick change: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
20.08.18 07:06:53<editable-whateve>hows it going nilli?
20.08.18 07:53:40<editable-whateve>ok, no fun with you guys, i guess im gonna have to get down to some work
20.08.18 13:52:11*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
20.08.18 14:15:21*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
20.08.18 14:40:26<stoopkid> editable-whateve: i don't think i can answer any questions about what the system "should" do
20.08.18 15:15:30<HMCa> editable-whateve: yes, wrt lists desugaring, altgough note that it would be equivalent to desugar the list construction into the body
20.08.18 15:15:45<editable-whateve>stoopkid: sure, ..
20.08.18 15:17:47<HMCa> as for facts, that is a bit trickier... from the hol perspective each fact triple is interpreted as a head of a distinct empty body rule, and all rules, incl facts rules, are interpreted as one head of an empty body rule
20.08.18 15:18:21<HMCa> but that is some pretty particular (and pribably irrelevant for our purposes?) details
20.08.18 15:18:39<HMCa> why do you ask?
20.08.18 15:20:35<editable-whateve>well, if you think its irrelevant, then i will try the simpler interpretation first
20.08.18 15:21:01<editable-whateve>because i got existentials doing at least something in pyin now, so i want to play with lists next
20.08.18 15:22:05<editable-whateve>for it to be equivalent to desugar the list construction into the body, i'd have to explicitly declare some vars as existential or something?
20.08.18 15:25:03<HMCa> well, they'd be those "body exstentials" and tge interpretaton wouldbe the same as if they were universals... so no?
20.08.18 15:25:41<HMCa> (this hits on that "all lists exist" thing that everyone hates)
20.08.18 15:29:55<editable-whateve>alright biab
20.08.18 16:41:52<nilli[m]> hey koo. I needed to read again the first chapter after getting the last exercise on that chapter wrong . . I try to be good. ;) (not bug you guys on the first failed try )
20.08.18 16:45:53<editable-whateve>great, keep it up:0
20.08.18 16:45:54<editable-whateve>:)
20.08.18 16:46:40<editable-whateve>HMCa: the list axioms are ?anything1 first ?anything2. and ?anything1 rest ?anything2 ?
20.08.18 16:51:06<editable-whateve>kb
                 <editable-whateve>?anything1 first ?anything2. 
                 <editable-whateve>?anything2 rest ?anything3.
                 <editable-whateve>{?l first banana. ?l rest ?ll. ?ll first pie. ?ll rest nil.} => {bananapie is ?ll}.
                 <editable-whateve>query
20.08.18 16:51:08<editable-whateve>bananapie is ?what. ?what rest pie.
20.08.18 16:51:11<editable-whateve>like this?
20.08.18 16:54:02*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 272 seconds
20.08.18 16:58:45<HMCa> editable-whateve: the exact axiom for thr all lists exist rule is given in that tbl paper
20.08.18 16:59:14<HMCa> but yah, like your example
20.08.18 16:59:58<editable-whateve>i forgot which paper it was, tbl?
20.08.18 17:00:03<editable-whateve>ah
20.08.18 17:01:26<editable-whateve>found it
20.08.18 17:03:06*** Join: dmiles (~logicmoo@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
20.08.18 19:58:05<HMCa> editable-whateve: so what is the something that your existentials are doing in pyin?
20.08.18 19:58:30<HMCa> i can has link to src?
20.08.18 20:07:18<HMCa> nilli[m]: what tripped you up on the last exercise? (1.7, is-red?)
20.08.18 20:11:08<nilli[m]> Define a function is-red, which takes in a suit as defined in the previous
                 <nilli[m]> problem and returns tt if and only if the suit is a red one (hearts and diamonds).
20.08.18 20:14:12<HMCa> ok, first what does your suit type look like?  It should be a simple sum type ("disjoint union") of simple constant constructors... which...
20.08.18 20:14:23<HMCa> which is a fancy way to say:
20.08.18 20:14:35<HMCa> data Suit : Set
20.08.18 20:14:44<HMCa>   hearts : Suit
20.08.18 20:15:00<HMCa>   clubs : Suit
20.08.18 20:15:13<HMCa>   spades : Suit
20.08.18 20:15:23<HMCa>   diamonds : Suit
20.08.18 20:15:51<HMCa> yes?
20.08.18 20:15:52<nilli[m]> did that and was fine
20.08.18 20:15:57<HMCa> cool
20.08.18 20:16:19<HMCa> so now we want this is-red function
20.08.18 20:17:05<HMCa> which we can see from the problem statement is of type Suit -> Bool
20.08.18 20:17:15<nilli[m]> the next one I did  :is-red : suit → suit
20.08.18 20:17:16<nilli[m]> is-red =
20.08.18 20:17:22<HMCa> is-red : Suit -> Bool
20.08.18 20:17:47<HMCa> a Suit goes in, a Bool comes out.
20.08.18 20:18:24<HMCa> so we say the "domain" of this function will be this set {hearts,clubs,spades,diamonds}
20.08.18 20:18:25<nilli[m]> ok I got it, could not figure out where the tt will come form .. lol
20.08.18 20:18:49<HMCa> and the "range" of this function will be this set {tt,ff}
20.08.18 20:19:11<HMCa> which is a fancy way to say:
20.08.18 20:19:14<HMCa> is-red : Suit -> Bool
20.08.18 20:20:04<nilli[m]> I actualy could not find it in the chapter but maybe did not go through it thoroughly enough
20.08.18 20:22:06<HMCa> we might call this sort of function a basic constant transform, a trivial morphism, or a static map
20.08.18 20:22:46<nilli[m]> ok now only for hearts and dimonds?
20.08.18 20:23:15<HMCa> what does your function definition look like right now?
20.08.18 20:26:21<HMCa> or is this it so far:
20.08.18 20:26:29<HMCa> 6 < nilli[m]> is-red =
20.08.18 20:26:35<HMCa> ?
20.08.18 20:31:52<nilli[m]> I tried is-red = hearts   is-red = diamonds  but is not  right
20.08.18 20:38:53<nilli[m]> is-red:  suit → Bool
                 <nilli[m]> is-red  hearts  = tt
20.08.18 20:38:54<nilli[m]> is-red  diamonds  =  tt
20.08.18 20:39:17<HMCa> halfway there now, it seems
20.08.18 20:52:24<nilli[m]> I dont know...  I imported bool and level but still not working
20.08.18 21:31:19<HMCa> afk a few, bbiab
20.08.18 21:36:16* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/okUMyPJewochZDrJHceBrWwl >
20.08.18 21:38:13<nilli[m]> so why they said  "(hearts and diamonds)." and not all four
20.08.18 21:40:38<nilli[m]> anyway it worked after I imported bool and did all four
20.08.18 22:10:14<HMCa> hrmm, but it should only return tt for hearts and diamonds, not all four
20.08.18 22:10:51<HMCa> spades and clubs are not red
21.08.18 03:01:54<editable-whateve>Hearts are red
21.08.18 03:02:04<editable-whateve>Diamonds are red
21.08.18 03:02:08<editable-whateve>Clubs are red
21.08.18 03:02:13<editable-whateve>Type theory sucks
21.08.18 03:02:17<editable-whateve>.
21.08.18 03:10:51<editable-whateve>HMCa: its doing something like passing the listform test
21.08.18 03:11:34<editable-whateve>https://github.com/koo5/univar/blob/master/tests/agda/listform.tau
21.08.18 03:11:57<editable-whateve>the codez https://github.com/koo5/univar/blob/master/pyin/pyin.py
21.08.18 04:45:04*** Join: yaraju (~yaraju@unaffiliated/yaraju, yaraju: realname)
21.08.18 05:13:58*** Quit: yaraju (~yaraju@unaffiliated/yaraju) left #AutoNomic: Remote host closed the connection
21.08.18 05:14:26*** Join: yaraju (~yaraju@unaffiliated/yaraju, yaraju: realname)
21.08.18 08:39:13*** Quit: yaraju (~yaraju@unaffiliated/yaraju) left #AutoNomic: Quit: Leaving
21.08.18 15:37:12*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-dlgtoavdpiotvezo, (unauthenticated): @nilli:matrix.org)
21.08.18 17:35:24<HMCa> so redprl is now in a sort of stasis, it seems
21.08.18 17:35:44<HMCa> and work on the next iteration (redtt) is begun
21.08.18 18:15:47<HMCa> editable-whateve: ok, so how do I make pyin do the thing?

H
E
06:09
editable-whateve left the room.
E
nilli
09:06
HMCa :
is-red : suit → bool
is-red hearts = tt
is-red spades = ff
is-red diamonds = tt
is-red clubs = ff
N
09:07
just to understand what they ask for was a challenge . LOL
HMCa (IRC)
09:09
nilli[m]: cool, you wrote a program
H
09:10
(aka proof)
09:10
good stuff
nilli
09:11
I can do better than that I hope :)
N
HMCa (IRC)
09:11
sure, but this is the first fundamental
H
09:11
functions are maps
E
09:12
editable-dog (IRC) joined the room.

22.08.18 00:09:25*** Connecting...
#AutoNomic> 22.08.18 03:13:10*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 27 days 9 hours 2 minutes 24 seconds ago
                 *** Names: editable-dog nilli[m] dmiles typlian5 Deadhand stoopkid lexx_[m] genuinelyfx[m] nikaala[m] koo5[m] redfish64 Tamara_ cantora @ChanServ HMCa
                 *** End of /NAMES list.
22.08.18 03:13:51<HMCa> here you prove that the redness of card suits can map to 1 boolean bit. :-)
22.08.18 03:15:08<nilli[m]> I think that just understanding what they ask me to do is header then doing it
22.08.18 03:15:24<nilli[m]> than
22.08.18 03:17:03<nilli[m]> I guess that is since explaining well is like giving you the answer  since its too basic
22.08.18 03:18:17<HMCa> well, it is also so one can begin to learn to trust the tool, I think...
22.08.18 03:20:03<HMCa> the typecheck/compiler is quite particular and exacting
22.08.18 03:21:14<HMCa> but you can be confident that whatever it is trying to tell you about your theory at any particular time is correct, heh
22.08.18 03:21:48<HMCa> including (and especially) if it consistent (typechecks) or not
22.08.18 03:21:51<nilli[m]> yes it is. but cant fix it if  cant understand the question (was fine with tt to all)
22.08.18 03:22:12<nilli[m]> and the right question is what matters at times
22.08.18 03:30:10<nilli[m]> it is always about the option that you dont think as an option  that will  screw you up
22.08.18 03:31:09<HMCa> later you will see how we can ask the typechecker about our options :-)
22.08.18 03:32:19<HMCa> window 4
22.08.18 03:32:22<HMCa> doh
22.08.18 03:33:21<nilli[m]> window 4 ?
22.08.18 03:34:05<nilli[m]> what was the issue with negation ? i remember you guys talking about it.
22.08.18 03:34:28<HMCa> was a mistyped command to my irc client, i missed the initial '/' and didn't notice
22.08.18 03:35:03<HMCa> which issue with negation? :-)
22.08.18 03:35:42<HMCa> negation is a deep and complex topic, many issues.  Here be dragons.
22.08.18 03:36:36<nilli[m]> it can't be used on its own right?
22.08.18 03:37:01<HMCa> "on its own"?
22.08.18 03:37:30<nilli[m]> as a proof for anything
22.08.18 03:37:50<HMCa> (I'm on limited time btw, will need to go soon)
22.08.18 03:38:39<HMCa> that would be like asking if conjunction ("and") could be used on its' own, I think
22.08.18 03:39:28<HMCa> and i'm not sure what that would mean... what does it mean to conjoin no things? :-)
22.08.18 03:42:52<nilli[m]> there was something about it . when you join something you dont say anything about the "thing itself  however in type-theory you say that it exist and true  if the conjunction is true, right?
22.08.18 03:46:57<HMCa> not sure what you mean
22.08.18 03:47:16<nilli[m]> there is something really deep about negation that we need to discuss . it relate to some amazing realization avishay and I are working on
22.08.18 03:47:35<nilli[m]> and I remember a long discussion about it in tau
22.08.18 03:48:56<HMCa> there were several
22.08.18 03:51:25<nilli[m]> in short negation is weaker then "is"
22.08.18 03:51:39<nilli[m]> than
22.08.18 03:53:08<nilli[m]> actualy not true.
22.08.18 03:55:58<editable-dog>hey nilli
22.08.18 03:56:27<stoopkid> conjunction of no things should be the unit type i.e. the multiplicative unit
22.08.18 03:56:36<stoopkid> similarly disjunction of no things should be the empty type i.e. the additive unit
22.08.18 03:57:24<nilli[m]> hey stoop hey koo  :)  I miss hanging out with you guys
22.08.18 03:57:42<nilli[m]> over some type theory drink
22.08.18 03:59:11<stoopkid> heya; yea it was more fun that way
22.08.18 04:00:14<nilli[m]> stoopkid so what you say is that everything of nothing is "something else"
22.08.18 04:00:58<stoopkid> "everything of nothing"?
22.08.18 04:01:02*** Join: editable-koo-old (~user@167.88.171.233, (unauthenticated): user)
22.08.18 04:02:15<HMCa> stoopkid: and negation of no things?
22.08.18 04:02:17<nilli[m]> more precisely anything that appears as "not being" is in fact "is" of other being
22.08.18 04:03:36<HMCa> would negation of no things then just be Top?
22.08.18 04:03:52<stoopkid> idk of any meaningful interpretation of the negation of no things; it's only meaningful for conjunction & disjunction because these connectives/operators can be extended to an arbitrary number of arguments
22.08.18 04:04:10<HMCa> well
22.08.18 04:04:12<HMCa> and
22.08.18 04:04:20<HMCa> that products and sums thing
22.08.18 04:05:16<stoopkid> does seem to be about the products & sums thing yes, although i personally can't say too much more on that
22.08.18 04:06:11<HMCa> some deep magic lurks there, heh
22.08.18 04:06:28<nilli[m]> negation of "no thing" is the  new "thing"
22.08.18 04:06:48<stoopkid> nilli[m]: think of like 2*3; it's the same as 1*2*3
22.08.18 04:07:36<stoopkid> so you could define a generic "product" on an arbitrary number of elements
22.08.18 04:08:10<stoopkid> product(2,3) = 2*product(3) = 2*3*product() = 2*3*1 = 2*3
22.08.18 04:08:43<stoopkid> if we wanted to do the same thing with sums instead of products, we'd use 0 instead of 1
22.08.18 04:08:57<stoopkid> sum(2,3) = 2 + sum(3) = 2 + 3 + sum() = 2 + 3 + 0 = 2 + 3
22.08.18 04:09:59<stoopkid> this logic carries over to our logical connectives if you relate multiplication to conjunction and 1 to the unity type, and relate addition to disjunction and 0 to the empty type
22.08.18 04:10:07<stoopkid> unit* type
22.08.18 04:11:47<nilli[m]> then in fact  1 represent the "object"  and so is the 0.
22.08.18 04:12:32<HMCa> there was some discussion that negation might also be a sum, but i'm not sure if any of that ever shook out
22.08.18 04:14:55<stoopkid> the lack of functional completeness with just conjunction and disjunction suggests to me that negation is a logically distinct concept
22.08.18 04:15:39<HMCa> hard to say, negation is tricky
22.08.18 04:16:19<HMCa> first we'd want to agree on which sort(s) of negation we'd even be talking about, heh
22.08.18 04:17:04<nilli[m]> the problem start with an assumption that negation is a complete opposite of  is
22.08.18 04:18:36<HMCa> not sure what you mean
22.08.18 04:18:39<HMCa> but i gtr
22.08.18 04:19:53<stoopkid> the truth-functional negation can't be simulated with truth-functional AND/OR, and similarly the "implies false" formulation of negation also can't be represented with constructive AND/OR. do you have some other notion of negation in mind?
22.08.18 04:22:11<HMCa> yes, at least a couple, but we'll have to dive into that another time
22.08.18 04:22:45<stoopkid> sure. nilli should probably start with these two anyway
22.08.18 04:24:05<nilli[m]> we need to always think of it at a matrix of 4 options  0, 0  , 0 1 , 1 0 ,  1 1
22.08.18 04:24:11<HMCa> one is a physical not get (inverter) and the other is that whole rademacher reals mess...
22.08.18 04:24:18<HMCa> *gate
22.08.18 04:26:17<nilli[m]> I have a bit of a heard time explaining myself
22.08.18 04:39:15<nilli[m]> ok let me try it this way : when we say anything about A and B (whether "and"  "or" ) we must first a assume that both A and B are something we know of, but we cant say that .
22.08.18 04:39:31<nilli[m]> thus  that would be represented as : if A then A, if not A then A, if B then B if not B then B
22.08.18 05:03:41<nilli[m]> that would result with "and" "or" be the same  unless  A is A and B is B since A can be B and B can be A (assuming we have only A, B in our universe)
22.08.18 05:10:41<nilli[m]> anyway need to think of it a bit more for whatever is relevant . meanwhile should , keep learning. but I do need  also to explain why is that so important form us
22.08.18 05:18:41<nilli[m]> the blockchain represent a quantum state in terms of information thus have implications in terms of the logic
22.08.18 05:24:14<nilli[m]> there is such thing a quantum logic  in which only "not and" is  an operation that can give you tt . (somethinkg of that sort) .
22.08.18 05:24:43<nilli[m]> "Quantum logic can be formulated either as a modified version of propositional logic or as a noncommutative and non-associative many-valued (MV) logic" from wiki
22.08.18 06:38:03<nilli[m]> ok Ill get back to it when have more concrete thing to ask or say
22.08.18 08:32:02*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qfqkynergrqrmpft) left #AutoNomic: Quit: Connection closed for inactivity
22.08.18 13:26:29*** [read:errno=0 from nil] 
                 *** Disconnected
                 *** Connecting...
22.08.18 13:26:34-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
22.08.18 13:26:52*** [906 from sinisalo.freenode.net] editable-dog SASL authentication aborted
22.08.18 13:26:53*** Mode change: +RZi on editable-dog by editable-dog (server)
22.08.18 13:26:59*** Join: editable-dog (~editable-@104.168.57.22, (unauthenticated): editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 6 months 27 days 19 hours 16 minutes 13 seconds ago
                 *** Names: editable-dog editable-koo-old nilli[m] HMCa @ChanServ cantora Tamara_ redfish64 koo5[m] nikaala[m] genuinelyfx[m] lexx_[m] Deadhand typlian5 dmiles
                 *** End of /NAMES list.
22.08.18 13:27:16*** ##idni Cannot join channel (+r) - you need to be identified with services - see https://freenode.net/kb/answer/registration
22.08.18 13:27:22*** #swig Cannot join channel (+r) - you need to be identified with services - see https://freenode.net/kb/answer/registration
22.08.18 13:27:25*** #marpa Cannot join channel (+r) - you need to be identified with services - see https://freenode.net/kb/answer/registration
22.08.18 13:27:28*** #proglangdesign Cannot join channel (+r) - you need to be identified with services - see https://freenode.net/kb/answer/registration
22.08.18 13:29:39-NickServ- This nickname is registered. Please choose a different nickname, or identify via /msg NickServ identify <password>.
22.08.18 13:30:27*** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
                 -freenode-connect- Due to the persistent ongoing spam, all new connections are being set +R (block messages from unidentified users) and will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
22.08.18 13:33:30-NickServ- You are now identified for editable-dog.
22.08.18 14:16:04-emerson- :[Global Notice] Services are going to be rebooted for maintenance now, apologies for the inconvenience.
22.08.18 14:23:32*** Join: ChanServ (ChanServ@services., (unauthenticated): Channel Services)
                 *** Mode change: +o ChanServ    on #AutoNomic by sinisalo.freenode.net (server)
22.08.18 16:51:27*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fmgxmwzfmvhpszlq, stoopkid: stoopkid)
22.08.18 17:38:55<stoopkid> some cool projects i found: cjdns, decentralizes access to IPv6 address and the ability to route between them; beaker browser, a web browser that has full support for p2p communication; and rotonde, which is a self-hosted social media
22.08.18 18:19:52<HMCa> yah cjdns is cool
22.08.18 18:21:54<HMCa> beaker has some "issues" and rotonde isn't quite what it should be imo (decentralized)
22.08.18 18:31:14<stoopkid> i'm still trying to test & assess, just found them in the last couple days
22.08.18 19:04:27*** Netmerge: *.net *.split, split 49 years 4 months 5 days 23 hours 4 minutes 28 seconds ago (Use /WL to see who's still missing)
22.08.18 19:04:28*** Mode change: +o ChanServ    on #AutoNomic by sinisalo.freenode.net (server)
22.08.18 22:38:53*** Netmerge: *.net *.split, split 49 years 4 months 6 days 2 hours 38 minutes 53 seconds ago (Use /WL to see who's still missing)
23.08.18 00:46:36<HMCa> koo5[m]: you're probably going to have to walk me through some of this code
23.08.18 01:39:00<HMCa> elastos - yet another wannabe tau? XD
23.08.18 03:14:33<nilli[m]> HMCa:  hi  elastos ?  there was an elastics right? you even helped them
23.08.18 03:15:48<HMCa> yah elastic is not terrible, but this is another thing
23.08.18 03:16:19<HMCa> elastos is claiming they're making a new internet/web
23.08.18 03:17:56<nilli[m]> you keep up with all these new initiatives, I lost touch with most of it in the past year
23.08.18 03:22:36<nilli[m]> its the way people invest in that ICO market and the lack of any understanding regarding what a token means ....
23.08.18 03:25:08<nilli[m]> in fact I even stopped offering to work on any monetary models since become irrelevant (worse, they better do the opposite of what make sense for me)
23.08.18 03:29:22<koo5[m]> Alright whenever HMCa
23.08.18 03:32:11<nilli[m]> hey koo I also :) wanted you to explain me what you do, but I thought to do it on whatsapp  since there will be much to explain (in more general terms ofc
23.08.18 03:33:44<nilli[m]> HMCa. do you still read PM on bitcoin tallk?
23.08.18 03:35:28<HMCa> nilli[m]: hi
23.08.18 03:35:30<HMCa> yes
23.08.18 03:35:36<HMCa> slowly :-)
23.08.18 03:39:37<nilli[m]> yes for keep up... slowly  bitcointalk PM?
23.08.18 03:42:44<nilli[m]> prioritizing  I guess.
23.08.18 14:39:29-emerson- [Global Notice] Unfortunately, due to the services disruption last night, we need to restart services again. We'll be doing this around 01:00UTC tomorrow. There will also be some netsplits afterwards as we continue to upgrade all of our servers, affected users will be sent notices before it happens. Sorry for the disruption, thanks for flying freenode :)
23.08.18 16:52:57*** Quit: dmiles (~logicmoo@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
23.08.18 17:01:56*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
23.08.18 21:04:19*** Netmerge: *.net *.split, split 11 hours 45 minutes 24 seconds ago (Use /WL to see who's still missing)
                 *** Mode change: +o ChanServ    on #AutoNomic by sinisalo.freenode.net (server)
23.08.18 22:31:10*** Netmerge: *.net *.split, split 39 minutes 35 seconds ago (Use /WL to see who's still missing)
23.08.18 22:48:27<HMCa> nilli[m]: something like that
23.08.18 22:48:30<HMCa> heh
23.08.18 22:50:12<HMCa> nilli[m]: you somehow seem to be under the impression that I have far more control over what-I-do-when than I actually do... XD
23.08.18 22:50:34<HMCa> I guess it is related to a common myth:
23.08.18 22:51:57<HMCa> people irrationally blame the rat race for their lack of control over their time and tasks
23.08.18 22:54:24<HMCa> where in fact the rat race helps insulate you from the universe's whims, without it one finds even less control over these things :-)
23.08.18 23:07:54*** Netmerge: *.net *.split, split 17 minutes 24 seconds ago (Use /WL to see who's still missing)
                 *** Mode change: +o ChanServ    on #AutoNomic by sinisalo.freenode.net (server)
24.08.18 03:05:39<nilli[m]> HMCa , I dont . I see that you are bound to some schedule and I assume  to know very little of you....yet all is a choice
24.08.18 03:09:26<nilli[m]> and yes the rat race is what gives one a sense of control , first be part of what all are a part of and then be it an active role and a simple one.
24.08.18 03:09:50<nilli[m]> let you measure yourself against other no against some void.
24.08.18 03:17:41<nilli[m]> but aside that considering your take on the world and at the rat race in particular, I would expect more of you. but again I cant judge you since I dont know your circumstances
24.08.18 03:37:40<nilli[m]> or ruther the only way to be doing something like what you do in regards to tau-autonomic is to stay bound to others who dictate your scheduled.
24.08.18 03:42:48<nilli[m]> in order to have the stamina (or ego , which ever sound better for you) and demand (expect) from others to do something the way you dictate, one need a very strong hold  at something
24.08.18 03:49:28<nilli[m]> some create a God for that role, and others are able to keep a sense of importance mostly by getting a sort of confirmation from  other around them.
24.08.18 03:49:36<nilli[m]> losing control over their time is a small price payed considering the other options.
24.08.18 03:50:46* editable-dog chuckles
24.08.18 03:54:30<nilli[m]> lol, koo is editable-dog is you?
24.08.18 04:12:37*** Quit: HMCa (~root@37.153.110.58) left #AutoNomic: Ping timeout: 260 seconds
24.08.18 04:25:16<nilli[m]> Ok since I am at it let me also rant about somethingelse
24.08.18 04:30:34<nilli[m]> * I dont assume that I chase you out of this room but its a funny thought  triggered by the indication that you left the room 😆
24.08.18 04:31:20<nilli[m]> any way back to negation
24.08.18 04:32:27<editable-dog>sorry i stepped out
24.08.18 04:32:33<editable-dog>yea thats me and sometimes discardedes
24.08.18 04:33:13<nilli[m]> you share that name?
24.08.18 04:33:26<editable-dog>yes, its the editable log
24.08.18 04:33:47<editable-dog>anyone who ssh's in like we once did can edit
24.08.18 04:33:59<editable-dog>and chat
24.08.18 04:34:29<editable-dog>its on another shared screen
24.08.18 04:37:06<nilli[m]> I see
24.08.18 04:39:49<nilli[m]> so  im sure no one would really care about my problems with "false" but i will share it with you here anyway
24.08.18 04:40:41<editable-dog>alright
24.08.18 04:41:57<nilli[m]> we assume that not-true and false are the same but they are not!!!
24.08.18 04:42:59<nilli[m]> and it create a huge paradox that could be solved very easily
24.08.18 04:43:05*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
24.08.18 04:44:08<nilli[m]> actualy im not sure that it is not addressed (most likely is) yet I have to say it without knowing much about what is done with it
24.08.18 04:46:37<nilli[m]> false can exist only once was defined as true . meaning it is false only against another truth.
24.08.18 04:47:49<editable-dog>once it was defined as true?
24.08.18 04:52:50<nilli[m]> yes, you have to define it as a specific option that can not be satisfy a  specific true state. and as such it is true .
24.08.18 04:53:19<nilli[m]> so false is a true state of itself
24.08.18 04:55:54<nilli[m]> if I can say on anything that it is false I actualy can say what  will satisfy its true state.
24.08.18 04:56:46<nilli[m]> not-true on the other hand only tells me that I can not find a truth state any true state, that of false as well
24.08.18 04:57:31<nilli[m]> in other words, not-true is an open state while false is a close state
24.08.18 04:59:36<nilli[m]> if we translate it to our coding then boll have three states that can corresponds to  what the blockchain  dictates
24.08.18 05:04:00<nilli[m]> since agda is so specific about everything I found it very problematic that bool have only  two contractors which allow not-true be false
24.08.18 05:04:56<nilli[m]> in my mind it is loosing its ground right there
24.08.18 05:13:01<editable-dog>just go ahead and define your own type
24.08.18 05:14:28<editable-dog>known-true, known-false, unknown
24.08.18 05:14:33<editable-dog>or whatever
24.08.18 05:14:55* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/YUXExnquHmiMdwIlNmNbChHS >
24.08.18 05:17:01<nilli[m]> it have to take  precedence of the regular bool so dose it means that I have to change bool like that?
24.08.18 05:17:33<editable-dog>what precedence?
24.08.18 05:21:47<nilli[m]> well it will need to replace bool when ever we encounter it . (i guess when interacting with  agda programs)
24.08.18 05:23:47<editable-dog>well, you can change somebody else's bool, and then fix up their programs
24.08.18 05:23:57<editable-dog>or you can define your own datatype and use it in your programs
24.08.18 05:31:15<nilli[m]> I guess I can start by defining my datatype and  write my program  and see what it would do, but will agda be able to type check it?  what do the primitive dictates in terms of  persering  and compiling (im not sure what is going there anyway)
24.08.18 05:32:31<nilli[m]> I need to go now, will get back later.
24.08.18 05:33:08<editable-dog>are you concerned about ~tt being similar to ~ tt?
24.08.18 05:34:15<nilli[m]> well it  is what I mean (forgot the consider the space requirements)
24.08.18 05:34:58* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/wNaaAyaUMTPgywJrVCXCcPwm >
24.08.18 05:35:26<nilli[m]> ok that is what I mean
24.08.18 05:35:41<editable-dog>now thats not a constructor name, you cant have spaces in it
24.08.18 05:39:40<nilli[m]> ok that is even more interesting then since not-true is defined as an  operation  or a function
24.08.18 06:09:21<nilli[m]> because ... I am what saying is that using "not" as a function or operation is  wrong. it is the source of the paradox. "not" can only be a Boolean constructor and must be reflected in a truth table too
24.08.18 06:10:14<nilli[m]> we should have 0 , 1, not1
24.08.18 06:10:59<nilli[m]> mathematicly that not -1 may be the imaginary number
24.08.18 06:13:25<nilli[m]> but that way we will be able to construct a language that make sense for the true state of information which must  include the state of open phase when we do not know what others are doing.
24.08.18 06:13:43<nilli[m]> ok gtr now
24.08.18 09:29:23<nilli[m]> *not1  may be the imaginary number  (came out like minus 1 abouve)
24.08.18 12:23:04*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fmgxmwzfmvhpszlq) left #AutoNomic: Quit: Connection closed for inactivity
24.08.18 14:00:05<HMCf> nilli[m]: first of all...
24.08.18 14:00:49<HMCf> if you are going to go beyond 2-valued logic, then don't call em booleans
24.08.18 14:01:35<HMCf> what you have made is what we call a "tri-state" instead of bools
24.08.18 14:02:17<HMCf> secondly, why stop at 3 truth values?  Why not 4?  or 7?  or 1000? or infinite?
24.08.18 14:05:19<HMCf> in IC design we usually use either a 4-valued or 9-valued logic
24.08.18 14:08:16<HMCf> the basic 4-valued digital logic is: {true, false, impede, dontcare}
24.08.18 14:09:44<HMCf> the basic 9-valued digital logic is: {undefined, unknown, true, false, impede, weakunknown, weakfalse, weaktrue, dontcare}
24.08.18 14:12:41<HMCf> but reasoning is always easiest with proper booleans, and we can easily show that using any more states does not gain any expressivity - so we can assert that the tau can be built with boolean
24.08.18 14:16:47<HMCf> you mention that you want a third truth value for open phase, but this is a bit misguided... open and closed phase logics are both 2-valued (boolean) logics, just not the same two values...
24.08.18 14:17:39<HMCf> closed phase uses {true, false} and open phase uses {true, undefined}
24.08.18 14:19:47<HMCf> open phase partally simulates false via negation-as-failure
24.08.18 14:20:39<HMCf> and introducing undefined to closed phase vastly complicates decidability (maybe even breaks it?)... for no real gain
24.08.18 14:20:59<HMCf> so... booleans ftw. :-)
24.08.18 16:00:20<editable-dog>im gonna have to change the bnodes implementation a bit...
24.08.18 16:05:22<editable-dog>well, "expressivity" in one very narrow sense
24.08.18 16:15:56*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-usdaptmjekjukhpr, stoopkid: stoopkid)
24.08.18 16:22:13<stoopkid> editable-dog: expressivity =/= convenience & flexibility of expression
24.08.18 16:23:02<stoopkid> HMCf: saying "of course tau is *this* way and not *that* way" =/= anybody knowing what you're talking about
24.08.18 16:23:35* stoopkid goes back to playing with cjdns
24.08.18 17:28:34<HMCf> just because maybe nobody knows what I'm talking about is not any reason not to talk about it :-)
24.08.18 22:37:45<stoopkid> HMCf: lol im certainly not suggesting that you don’t talk about it
25.08.18 03:40:33<nilli[m]> hi HMCf, good answer yet im not sure it will satisfy me
25.08.18 03:42:41<nilli[m]> first of all its not about how "many" but ruther how "little" is  enough to express more
25.08.18 03:45:08<nilli[m]> I do like the option to add as many value that you want since it will allow for the exact right number of values to emerge (ofc always  with the option to give more value if calls for)
25.08.18 03:46:34<nilli[m]> I just think and will take much more to convince me that a two  truth value system is enough to express all that we need.
25.08.18 03:49:54<nilli[m]> I would go for a two-value truth system as a means to organize the past , but not as the main means to act as an "organizer" in real time
25.08.18 03:51:04<nilli[m]> what the autonomic is trying to do is organize at real time
25.08.18 03:53:55<nilli[m]> now lets look at what is in fact organizing in real time and assess if  a different  two truth  value  can do the job (openphase/closephase  )
25.08.18 04:04:47<nilli[m]> ok this why I dont buy the  boolean truth structure  for  what we need and why we need a three truth value structure  for optimization.
25.08.18 04:06:08<nilli[m]> of I am not talking about coding it , I still know far to little to say if its possible or how much crazy work it takes. I am talking only about the theory of truth
25.08.18 04:08:32<nilli[m]> maybe call it truth -time  (like space time) :)
25.08.18 04:13:09<nilli[m]> a blockchain is a dynamic system that do not stop for a moment . while some nodes allready work on the next block some are still not aware of it.
25.08.18 04:16:28<nilli[m]> thus the actual true state of the chain is a few blocks back depends on on how  many forks happened  to be created.
25.08.18 04:29:55<nilli[m]> in the bitcoin protocol the difference involves one parameter only  , that of the transaction of the coins.  but what would happens if  at the same block we can also change the rule regarding the transaction from no double spend  to a creation of 0.1 coin at each transaction.
25.08.18 04:30:44<nilli[m]> I cant even begin to think of it (realy dont know enough)
25.08.18 04:31:56<nilli[m]> however let me just describe what a three truth value and time can do
25.08.18 04:33:26<nilli[m]> it create a truth-space  that can evolve smoothly in time
25.08.18 04:34:34<nilli[m]> its the same trick we do by conceptualizing space
25.08.18 04:52:25<nilli[m]> imagine an "object" moving on an axis . the object is defined as a 3D object by that turn
25.08.18 04:55:51<nilli[m]> a 2 truth value can hold only if it is symmetric in all directions  ( creating a perfect a sphere )
25.08.18 04:57:46<nilli[m]> ...ok ... I think it will do for now ...
25.08.18 07:01:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-usdaptmjekjukhpr) left #AutoNomic: Quit: Connection closed for inactivity
25.08.18 07:15:48*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-qdfauuobddcfmewh, (unauthenticated): kook)
25.08.18 09:25:06*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-qdfauuobddcfmewh) left #AutoNomic: Quit: Connection closed for inactivity
26.08.18 03:28:53<nilli[m]> HMCf So this is what I try to do: first as you say bool is bool and I dont touch it . just make my own truth type and truth function,
26.08.18 03:32:19<nilli[m]> not sure if and when will create a contradiction and what we do then , but first lets start with the type declaration
26.08.18 03:34:17* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/hNByeUIIpkHkCBosgCMPtiPB >
26.08.18 03:35:00<nilli[m]> then function declaration and  function definition
26.08.18 03:35:47* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/IwSHPMDuHnajEIYZSlNkjLlI >
26.08.18 03:39:46<nilli[m]> and now I need to prove that  ~ ~ tt = ff , ~ ~ ff = tt  , ~ ~ root~  = root~
26.08.18 03:40:59<nilli[m]> not really sure how I do it yet .
26.08.18 03:46:42<nilli[m]> mathematically t/f are  represented by 180 degrees  of rotation  as is "~"  of each other  thus "root~" represent  90 degrees  of rotation .
26.08.18 03:52:59<nilli[m]> so in fact I guess I need to use bool to prove it : as "~" being reflective of both once we have bool, and thus "root~" , as square root , once presented as a type constructor for a new datatype  returns ff for ~ ~ tt
26.08.18 03:58:17<nilli[m]> the "root of "not"" definition was proposed to me by avishay  once I explaind him my logic problems.  once he presented it as rotation and 90 degrees as root it all came together for me
26.08.18 04:01:38<nilli[m]> mathematically it explains also why  I need only one "not" contractors and not two (which I could explain in words but not in mathematical form . as a root of not it makes it self explanatory
26.08.18 04:25:53<nilli[m]> hey koo
26.08.18 04:29:24<nilli[m]> So now im also fine with negation as an operation . once I construct a type that have root of negation as a contractor.
26.08.18 04:33:58<nilli[m]> *constructor
26.08.18 04:41:00<nilli[m]> I dont know if you guys see it, but the negation as an operator in bool is a source of contradiction. its like saying that 'and" itself is A B  and that "or" itself is A /B
26.08.18 04:46:31<nilli[m]> bool negation iis good for a mathematical proof of negation but is wrong for actual logic used in a system that need to work with evolving states .
26.08.18 04:47:33<nilli[m]> it might even help resolve problems given the  Godle paradox
26.08.18 04:58:30<koo5[m]> Hey
26.08.18 05:20:52<koo5[m]> > <@nilli:matrix.org> I dont know if you guys see it, but the negation as an operator in bool is a source of contradiction. its like saying that 'and" itself is A B  and that "or" itself is A /B
26.08.18 05:20:53<koo5[m]> So did you get two invites or only one?
26.08.18 05:21:27<koo5[m]> So did you get two invites or only one?
26.08.18 08:58:39<nilli[m]> koo5 one invite one cancellation for the 28th. I reply yes for the invite.
26.08.18 09:16:19<koo5[m]> Ok i guess ill try again
26.08.18 18:15:59*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
27.08.18 01:34:48*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-wsprhowgdswcvyzf) left #AutoNomic: Ping timeout: 260 seconds
                 *** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-mofzwrfediunccmj) left #AutoNomic: Ping timeout: 260 seconds
27.08.18 01:35:22*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-nibhfjwtkiotyxlv) left #AutoNomic: Ping timeout: 260 seconds
                 *** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-sjuoeqmfvqshzicf) left #AutoNomic: Ping timeout: 260 seconds
27.08.18 01:35:24*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-dlgtoavdpiotvezo) left #AutoNomic: Ping timeout: 276 seconds
27.08.18 01:48:19*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-niwefvjsyqekrwwe, (unauthenticated): @lexxus:matrix.org)
27.08.18 01:48:47*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-ljyekdvmznktlhql, (unauthenticated): @nilli:matrix.org)
27.08.18 01:56:00*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-vzvqxsxcanednpzn, (unauthenticated): @genuinelyfx:matrix.org)
27.08.18 02:00:00*** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-znwwohpnctznxzfb, (unauthenticated): @nikaala:matrix.org)
27.08.18 02:00:05*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-mgvjynbqsvfoxmnj, (unauthenticated): @koo5:matrix.org)
27.08.18 13:22:16*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
27.08.18 13:24:24*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
27.08.18 13:24:43*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
27.08.18 13:26:18*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
27.08.18 13:26:54*** Nick regain: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
28.08.18 00:00:40*** Quit: HMCf (~root@37.153.110.58) left #AutoNomic: Ping timeout: 272 seconds
28.08.18 00:01:04*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
28.08.18 03:21:48<nilli[m]> hey, no comments I see. none of it makes sense to anyone but myself I guess
28.08.18 03:48:43<nilli[m]> ok let me try it again in a different way .
28.08.18 03:50:56<nilli[m]> ofc I dont even begin to hope that will be clear to anyone. but I  have to keep trying untill I run out of energy (money) or if I get convinced that I am worng
28.08.18 03:52:58<nilli[m]> lucky for all of us I am very close to run out of energy ,  since is utterly hard to convince me that I am wrong once talking about the most fundamental parameters
28.08.18 04:01:00<nilli[m]> let me then start with again with a problem I have with bool . and this time will use even a function given  in the bool file
28.08.18 04:01:15* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/zxrSLdQQrBNdfZMiWyFsvTQg >
28.08.18 04:04:52<nilli[m]> the problem is missing information once assuming b
28.08.18 04:06:33<nilli[m]> we say that we dont mind what b is but that is where the problem start  since we do know what be assuming a binary (boolean) logic.  b can bee b or not b
28.08.18 04:07:47<nilli[m]> thus that above should scream  m
28.08.18 04:08:19<nilli[m]> " missing definition for &&"
28.08.18 04:08:29<nilli[m]> and not accept it
28.08.18 04:16:30<nilli[m]> so we first have to fix our "not"  function if we do want to introduce b as a var
28.08.18 04:17:40* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/DoRDxgMqVgnhbIJQzNOuxhsx >
28.08.18 04:19:08<nilli[m]> that is after we actualy defined  b = b as a constructor
28.08.18 04:20:31<nilli[m]> which my appear totally redundant , but is in fact trivial. and trivial is something that we have to express otherwise we end up with missing information
28.08.18 04:21:34<nilli[m]> missing information means that one thing can be interpreted as other thing
28.08.18 04:23:36<nilli[m]> and that is exactly what happens with the var we introduce here. in the classic definition of bool we allow b to be b or not-b
28.08.18 04:26:38<nilli[m]> so to present a complete definition of the function &&
28.08.18 04:27:19* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/jMOTyxQwryEONwXMisvRLxoS >
28.08.18 04:30:18<nilli[m]> So you see how i drag you back to bool
28.08.18 04:35:26<nilli[m]> I can settle that by creating a new  truth type with three truth value. but that will not solve the problem of the contradiction presented by bool  of a var (proposition) being itself and its negation without being able to knowledge the difference
28.08.18 04:37:27<nilli[m]> ....just so you know  this is why its so hard for me to learn anything and why its hopeless to teach me anything. I get stuck on the things all take for grunted .
28.08.18 04:38:33<nilli[m]> until one of you will be able to reason with me and prove me wrong I just cant keep on going.
28.08.18 04:49:36<nilli[m]> by the way that is why I really liked  the proof tree and the Carry/Howard  correspondence  as stoopkid was teaching it. its seamless .
28.08.18 09:54:49<editable-dog>nilli, youre  free to build your own types and your own logic with those types
28.08.18 10:54:25<nilli[m]> .ok koo that is good news, but you will have to help me understand how I do that.
28.08.18 10:58:43<nilli[m]> so what you say is that I can have a Nililogic and be able to write it on agda by defining the types and their constructors
28.08.18 11:25:42<editable-dog> sure
28.08.18 11:59:40*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
28.08.18 12:51:39*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
28.08.18 12:53:48*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection timed out
28.08.18 13:02:58*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
28.08.18 13:22:59*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
28.08.18 13:38:01*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
28.08.18 19:14:19<HMCf> nilli[m]: I've not responded because I am not able to have much connectivity this week
28.08.18 19:15:28<HMCf> got shipped to a desert, basically
28.08.18 19:15:51<HMCf> illi[m]> hey, no comments I see. none of it makes sense to anyone but myself I guess
28.08.18 19:16:50<HMCf> no, it is not clear how to assign any meaning to what you're saying
28.08.18 19:17:24<HMCf> if you believe there is a contradiction/paradox, thrn you must demonstrate that formally
28.08.18 19:17:48<HMCf> short of that, you should not even expect us to be able to see it
28.08.18 19:18:32<HMCf> it is something for which just a "definition" (esp in prose) will not do to begin to convince
28.08.18 19:18:48<HMCf> you'll need to give a "formal definition"
28.08.18 19:19:08<HMCf> (understanding precisely the difference is important!)
28.08.18 19:19:30<HMCf> luckily, we have a great tool for doing just that: mltt
28.08.18 19:20:42<HMCf> as koo points out, you are free to define
28.08.18 19:20:50<HMCf> (constructively, anyway)
28.08.18 19:26:41<HMCf> as an example, here is the standard pure 4-valued mos logic: https://pastebin.com/1BkWE3nx
28.08.18 19:27:06<HMCf> it would not be correct to call this "boolean"...
28.08.18 19:28:31<HMCf> and it would not be correct to say that anything about this logic can imply any paradox/inconsistency arising in boolean logic... they are effectively "unrelated" to eachother, despite appearing to be very similar
28.08.18 19:29:14<HMCf> (note that any non-boolean logic which you can define will follow suit and have both of these properties as well...)
28.08.18 19:30:28<HMCf> maybe later I will work the 6-valued mos logic
28.08.18 19:31:16<HMCf> for now I have to go back offline and attend to a tent
29.08.18 04:54:19<nilli[m]> hey HMCf I actualy was just about to create a module like you put on pastebin . yesterday after talking with koo I realized that it is what I need to do.
29.08.18 04:55:13<nilli[m]> in fact i quite shocked to realized that i understand that. lol
29.08.18 04:57:35<nilli[m]> im not sure about the the prof that I will need to provide or if formal definition is enough
29.08.18 05:00:00<nilli[m]> I guess that once I realize if a proof is required it will be much easier to figure out what is it.
29.08.18 05:04:45<nilli[m]> and on the other note... a desert and a tenet lol . if its Sinai and not in Afghanistan let me know , I was offered to go on a trip there, would be interesting meet you in a tent. are using knots or bids to calculate and smoke signal to transact.?
29.08.18 08:20:50<nilli[m]> I started working on something. will take me quiet a while but I am having real fun with it
29.08.18 08:22:16<nilli[m]> which means that finally I am able to  work the magic pen on the magic board 😆
29.08.18 08:23:08<nilli[m]> however I might suck as a calligraphy artist , but now we would know
29.08.18 08:28:31<nilli[m]> I think that it even worth for me at least one more bitcoin to spend while trying. (and not earning anything)
29.08.18 09:57:40<editable-dog>hi nilli[m] , mail
29.08.18 09:59:13<editable-dog>also, please note that i woouldnt be surprised if she tried to sabotage our communication in some way, so lets always try other channels if something seems to not work, etc
29.08.18 10:00:46<editable-dog>i hope im making my attitude to this whole thing clear, before anything more happens
29.08.18 10:01:08<editable-dog>i dont know why i still have so much patience with her
29.08.18 12:30:46<editable-dog>29.08.18 12:30:00<naturalog> until age 24 i was deeply religious so i never thought of a machine doing t
29.08.18 12:30:50<editable-dog>he soul's thing
29.08.18 12:30:53<editable-dog>facepalm
29.08.18 13:05:49*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-04-65-95-136-33.dsl.bell.ca) left #AutoNomic: Ping timeout: 246 seconds
29.08.18 14:02:22<HMCf> editable-dog: who is "she" and why is she sabotaging things?
29.08.18 14:11:01<editable-dog>i hope she's not, but it woouldnt surprise me by now..my gf
29.08.18 14:13:48<HMCf> lul wut?
29.08.18 14:14:04<editable-dog>sigh
29.08.18 17:37:42<daemoz> uh oh
29.08.18 17:37:50<daemoz> also looks like I missed a lot
29.08.18 17:37:55<daemoz> :/
29.08.18 17:38:08<daemoz> I'm moved though, yay
29.08.18 17:41:42*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bugskgualovforba, stoopkid: stoopkid)
29.08.18 20:26:08<stoopkid> HMCf: you asked a while back whether the universe might align itself towards maximal inconvenience
29.08.18 20:26:28<stoopkid> i was reminded of this when looking at the monty hall problem
29.08.18 20:31:24<stoopkid> it seems like the solution to the monty hall problem demonstrates that there's somehow an "extra" built-in level of inconvenience when playing any guessing game that evolves in the presence of new information
29.08.18 20:53:07<stoopkid> funny that most people to choose to stick with their intuition when they first see the problem, and then they end up being wrong, with high probability
29.08.18 22:08:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
29.08.18 22:08:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
29.08.18 23:55:38*** Join: Guest29121 (~root@118-86-185-36.kakt.j-cnet.jp, (unauthenticated): root)
30.08.18 04:03:05<editable-dog>hey stoopkid & daemoz 
30.08.18 04:30:58*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bugskgualovforba) left #AutoNomic: Quit: Connection closed for inactivity
30.08.18 04:58:01<nilli[m]> hey everyone . stoopkid "nformation" itself is the primary source of  inconvenience
30.08.18 04:59:04<nilli[m]> 😆
30.08.18 08:23:25-mniip- [Global Notice] If you are using an IRC client that uses the "pango" text rendering library (e.g hexchat) or a terminal IRC client with a terminal that uses pango, we advise that you make sure you've updated pango to the latest version. Windows users of hexchat are advised to update from the official hexchat website: https://hexchat.github.io/news/2.14.2.html
30.08.18 09:04:43*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cvjnlrpucwaqbtfv, stoopkid: stoopkid)
30.08.18 10:13:51*** Join: tigertigertiger (1f113353@gateway/web/freenode/ip.31.17.51.83, (unauthenticated): 31.17.51.83 - http://webchat.freenode.net)
30.08.18 10:14:22<tigertigertiger> Hey Stoop and HMC
30.08.18 10:14:31<tigertigertiger> long time no see
30.08.18 10:16:11<tigertigertiger> I need some help of you guys. I wanted to explain what autonomic is truly about. But im not able to explain it in a coherent manner
30.08.18 10:17:35<tigertigertiger> Most of the times you pointed to the old tau and its vision, but since idni.org is updated im not sure if old tau and new tau are still following the same goals?
30.08.18 10:18:25<editable-dog>pawngo?
30.08.18 10:18:30<editable-dog>hey tigertigertiger 
30.08.18 10:18:50<tigertigertiger> hey koo
30.08.18 10:19:37<nilli[m]> tigertigertiger:  its the old tau
30.08.18 10:21:03<nilli[m]> I dont think it have change , its the new tau that changed  in terms of fundamentals.
30.08.18 10:21:32<tigertigertiger> I know its the old tau. But Ohad updated everything there was about old tau for his "new tau" (check out the websites) so defining autonomic as the old tau, without any defintion left of the old tau, its meaningless
30.08.18 10:21:41<nilli[m]> however there is a change in terms of the token commitment
30.08.18 10:22:25<nilli[m]> I see ,I though you got that information
30.08.18 10:23:06<tigertigertiger> Well yeah I think i "got" it in some way, but not in a logical coherent manner I would like to have it
30.08.18 10:23:56<tigertigertiger> Like when somebody asks me what its all about in some short paragraphs its quite hard to narrow it down into a definition. If you know what i mean
30.08.18 10:25:36<nilli[m]> "got" as to have the information available to you I meant.
30.08.18 10:26:37<tigertigertiger> Yeah like, I have a brief understanding of what autonomic is trying to accomplish
30.08.18 10:27:12<tigertigertiger> but tbh im not even sure about that :D
30.08.18 10:28:28<nilli[m]> It is always good to get HMCf rephrase that . it is being updated as we go
30.08.18 10:30:25<tigertigertiger> here is for example a definition about the "new tau" from ohad (or one of his staff):
30.08.18 10:30:26<tigertigertiger> In short, Tau is a decentralized peer-to-peer network that takes the shape of a social choice platform, and it can become anything that we want it to be, for as long as it's expressible within the self-defining and decidable logics of FO[PFP] with PSPACE-complexity. This is taking application-generality into a completely different direction compared to blockchains that are built specifically with turing-completeness in mind,
30.08.18 10:30:56<tigertigertiger> Would you agree stoop/hmc?
30.08.18 10:31:10<nilli[m]> the last one I think was a "giant time stamping machine". but I argue that it is a giant machine to create the truth
30.08.18 10:32:24<tigertigertiger> Well thats a very vague explanation :D
30.08.18 10:32:38<editable-dog>tigertigertiger: except we stick the the MLTT logic instead
30.08.18 10:33:00<nilli[m]> it is just eh title for the explanation
30.08.18 10:33:03<editable-dog>and except the last sentence which is just ohad-style nothing-saying bs
30.08.18 10:33:40<nilli[m]> what you got there is more of the new tau
30.08.18 10:33:58<tigertigertiger> well yes, because its about the new tau ;)
30.08.18 10:34:43<nilli[m]> lol. missed the first line
30.08.18 10:50:26<tigertigertiger> okay im off for now, but im checking the log close to every day, would be still nice to have an answer
30.08.18 10:50:29<tigertigertiger> cu soon
30.08.18 10:50:47*** Quit: tigertigertiger (1f113353@gateway/web/freenode/ip.31.17.51.83) left #AutoNomic: Quit: Page closed
30.08.18 11:01:16<nilli[m]> ok would be interesting to see how we can explain autonomic up to date. I will take a shot at it. koo you shoud do that too. and ofc HMCf and stoopkid I think should be fun fro you too. now that the wight is off .
30.08.18 11:44:50<nilli[m]> hay guys I got my first pastbin  agda code for you to look at https://pastebin.com/Q0wwJgPu
30.08.18 11:45:06<nilli[m]> the coloring came out fine on agda :) the rest im not so sure
30.08.18 11:45:47<nilli[m]> so you can see that I have learned how to use amecs and agda
30.08.18 11:50:39<nilli[m]> regarding the trues values :  well in might all not make sense but we will check that. the thing I did not check for sure is if all my operations values are right according to the first three   operations that define the basic operations of : is , not, not not, ( my brain is a bit dead )
30.08.18 11:52:38<nilli[m]> however I was very pleased to get the coloring work (LOL)  which means that at least I can construct a sentance even if it say nonsense
30.08.18 12:30:22*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
30.08.18 14:09:26<HMCf> nilli[m]: I'm having trouble seeing how your logic is not equvalent to standard boolean connectives
30.08.18 14:09:44<HMCf> in what case is 'x' not the same as 'tt'?
30.08.18 14:10:29<HMCf> can you give an example of some expression that would evaluate differently?
30.08.18 15:29:22<editable-dog>hm, geeqie is not a very good svg viewer
30.08.18 15:29:34<editable-dog>and i thought i had a graphviz problem all along
30.08.18 16:16:50<nilli[m]> hey HMCf   as I see it its the negation function that is critical since  since  ~tt evaluate to x thus to tt and  ~ff also evaluate to x which is tt  only ~x evaluate to ff. this way I am braking the symmetry between negation and true being the negation of false and vice versa
30.08.18 16:17:54<nilli[m]> im not sure that I am successful at doing so , but I know for sure it must be done :)
30.08.18 16:20:06<nilli[m]> Also the operation ~~ (not not) I think  should be able to emerge from "not" (but I was too tired to figure that out
30.08.18 16:21:14<nilli[m]> but there again the critical difference is that ~ ~ ff = tt , ~ ~ tt = ff
30.08.18 16:26:04<nilli[m]> now in terms of example of expression .. let me see (i have to figure out how exactly I write it (lol, not quiet there yet), have to refresh my memory and see if I at all know it) .
30.08.18 16:38:38<nilli[m]> anyway will look at it again tomorrow with a fresh brain and try to see if I can come up with that expression as an example.
30.08.18 16:47:04<nilli[m]> also I used only one more constructor since I think three is the minimum but is enough.
30.08.18 16:47:24<editable-dog>o/
30.08.18 16:49:44<nilli[m]> hey koo what o/ translate to in emoji ?
30.08.18 16:50:28<editable-dog>idk what it translates to in emoji but its a waving figure
30.08.18 16:51:06<nilli[m]> "hello" you mean ?
30.08.18 16:51:11<editable-dog>yea
30.08.18 16:51:13<editable-dog>or bye
30.08.18 16:51:30<nilli[m]> I see
30.08.18 16:53:10<nilli[m]> well hope things are calming down,for you  . I fine with whatever that was. so dont worry .
30.08.18 16:54:29<editable-dog>alright
30.08.18 16:54:55<nilli[m]> did you see my pastebin? I was so pleased to just make it work for me I almost not really care to be wrong about everything else
30.08.18 16:55:03<editable-dog>yea
30.08.18 16:55:21<editable-dog>yea its a big step i guess
30.08.18 16:55:42<nilli[m]> it sure is for me
30.08.18 16:56:31<nilli[m]> just to make adga and emacs agree with me is amazing  . 😆
30.08.18 16:56:57<nilli[m]> the rest of the world can take a hike .. and I run after them later
30.08.18 17:00:01<nilli[m]> actualy... the fact that I made the file iz.agda makes it an adga program? if I where to just name it iz would it be different?
30.08.18 17:00:43<editable-dog>well, file extensions are generally just for humans
30.08.18 17:01:38<editable-dog>so, it would be the same for agda probably
30.08.18 17:01:42<editable-dog>but not sure
30.08.18 17:02:22<nilli[m]> I just tried it . its not doing it if I dont name the file .agda
30.08.18 17:03:00<nilli[m]> so I was writing in agda ..yhey !!!
30.08.18 17:03:33<editable-dog>thumbs up
30.08.18 17:05:16<nilli[m]> thank you all for the effort to bring me as far as that :)
30.08.18 17:05:31<editable-dog>youre welcome
30.08.18 17:06:04<nilli[m]> lol still only past the first chapter...soo much more to go
30.08.18 17:35:14*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
30.08.18 17:35:39*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
30.08.18 17:44:00<daemoz> editable-dog: heya
30.08.18 17:44:22<editable-dog>hey
30.08.18 17:46:05<daemoz> how goes things?
30.08.18 17:47:29<editable-dog>slowly
30.08.18 17:50:21<daemoz> there are worse ways for a thing to be going
30.08.18 18:03:27<editable-dog>yeah true true
30.08.18 20:16:27<HMCf> nilli[m]: ok, so i guess i missed that "~ ~ foo" is opposite of "~~ foo", maybe you could find some better notation for one of these?
30.08.18 20:17:35<HMCf> so 'x' acts as 'tt' except when applying this unusual pair of "negation" operators
30.08.18 20:17:48<HMCf> which act... oddly.
30.08.18 20:18:03<HMCf> ok, now, how is this useful?
30.08.18 20:19:04<HMCf> can you give me some *nontrivial* expression(s) to demonstrate a meaningful difference from bool?
31.08.18 01:08:14*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
31.08.18 01:16:42*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
31.08.18 03:12:26*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
31.08.18 03:21:13*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
31.08.18 04:57:18<nilli[m]> HMCf  regarding  ~~foo is the opposite of a boolian  ~ ~  foo but but should  but is the actual ~ ~  foo in  "iz"   thus should not be as a function of its own. thus in fact my first expression  to demonstrate the difference is   "~ ~ " . Ill try it and see i I get what I wanted.
31.08.18 05:18:36<nilli[m]> ok im not realy sure how to write it correct in agda yet so ill just do it here
31.08.18 05:19:56<nilli[m]> ~~tt : ~ ( ~ tt) → ~ x
                 <nilli[m]> ~~tt = ff
31.08.18 05:22:36<nilli[m]> ~~ff : ~ ( ~ ff) →  x
31.08.18 05:22:37<nilli[m]> ~~ff = tt
31.08.18 05:24:17<nilli[m]> ~~x : ~ ( ~ x) →  x
31.08.18 05:24:18<nilli[m]> ~~x = tt
31.08.18 05:39:52<nilli[m]> so for now I put both options in braces . since not sure if can express that as intended I kept also the "~ ~ "  as a function definition I had before for not not "~~" on file under the braces until will sort that out
31.08.18 05:39:59<nilli[m]> https://pastebin.com/xFe9LtBb
31.08.18 05:41:59<nilli[m]> so we are still at the trivial expressions but needed to make that clear and have to get that expressed right on agda in order to move on
31.08.18 05:44:23*** Quit: Guest29121 (~root@118-86-185-36.kakt.j-cnet.jp) left #AutoNomic: Ping timeout: 252 seconds
31.08.18 06:41:28*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
31.08.18 06:41:46*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
31.08.18 06:53:15*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-znwwohpnctznxzfb) left #AutoNomic: Remote host closed the connection
31.08.18 06:53:23*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-vzvqxsxcanednpzn) left #AutoNomic: Read error: Connection reset by peer
31.08.18 06:53:29*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-niwefvjsyqekrwwe) left #AutoNomic: Remote host closed the connection
31.08.18 06:53:33*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-ljyekdvmznktlhql) left #AutoNomic: Remote host closed the connection
31.08.18 06:53:34*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-mgvjynbqsvfoxmnj) left #AutoNomic: Read error: Connection reset by peer
31.08.18 07:03:21*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-ddhcgivfizmmyhmm, (unauthenticated): @nilli:matrix.org)
31.08.18 07:18:33*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 244 seconds
31.08.18 07:26:04*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
31.08.18 07:27:35*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-ylrjfgxvpyenjenm, (unauthenticated): @genuinelyfx:matrix.org)
                 *** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-qjqovorsnpxarmgv, (unauthenticated): @nikaala:matrix.org)
                 *** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-klywbsebkdzeynex, (unauthenticated): @koo5:matrix.org)
31.08.18 07:27:42*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-giczpcnqnefbpzpr, (unauthenticated): @lexxus:matrix.org)
31.08.18 08:51:00*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-ylrjfgxvpyenjenm) left #AutoNomic: Read error: Connection reset by peer
31.08.18 08:51:03*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-ddhcgivfizmmyhmm) left #AutoNomic: Remote host closed the connection
                 *** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-giczpcnqnefbpzpr) left #AutoNomic: Remote host closed the connection
31.08.18 08:51:13*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-klywbsebkdzeynex) left #AutoNomic: Remote host closed the connection
31.08.18 08:51:14*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-qjqovorsnpxarmgv) left #AutoNomic: Write error: Connection reset by peer
31.08.18 09:01:43*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-wnfowuwjzyjfbrvx, (unauthenticated): @nilli:matrix.org)
31.08.18 09:24:41*** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-ehdsvpqcekncwlws, (unauthenticated): @nikaala:matrix.org)
                 *** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-suleaoswfognmpiy, (unauthenticated): @koo5:matrix.org)
31.08.18 09:24:42*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-ukpckqvnvvqgvrou, (unauthenticated): @genuinelyfx:matrix.org)
31.08.18 09:24:52*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-wrkndkqutbnnvhvh, (unauthenticated): @lexxus:matrix.org)
31.08.18 15:13:14<nilli[m]> ok I added also one more  option as a comment  to make sure it is understood what I try to get .still at the trivial level
31.08.18 15:15:45* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/bdtfjRIAxpNIFYgNGCkcyaJF >
31.08.18 15:19:25<nilli[m]> again since I dont know how to express it right  i said it in every possible way :)
31.08.18 15:26:46<nilli[m]> ok now lets move on to a "meaningful difference  from bool"
31.08.18 15:36:58<nilli[m]> we have two truth values.  but one truth value negation is the other truth value(tt become x)  and one truth value negation is iits negation  (x become ~x)
31.08.18 15:41:46<nilli[m]> for all the other function this dont make a difference other then add another state of truth to make a complete set but its the same .
31.08.18 15:45:31<nilli[m]> the difference will be only at the negation of the input and thus the out put of these negation input will be different
31.08.18 16:08:33<nilli[m]> as we see having the two values of true is not making a difference for the negation of  the operation "or" and "xor"  which get a mirror image  but for nand the two values of true makes a different and we are not getting a mirror image
31.08.18 16:13:46<nilli[m]> again I may have confused a few things there since it is quite confusing to think of x both as tt but as a different tt .
31.08.18 16:29:39<nilli[m]> it also might be best to look at it like that: when applying negation we have four true states   tt  ,x , ~ff , ~tt  .when tt is one type of true value and x, ~ff, ~tt are all the other type of true value.
31.08.18 16:32:50<nilli[m]> I hope that I made myself clear enough. regarding what I meant to express.
31.08.18 16:33:48<nilli[m]> in terms of an example for expression , if you can give me an example to which you apply bool I can then see how it will work with "iz"
31.08.18 16:40:34<nilli[m]> also maybe I should mention  where am i aiming with that "iz" datatype .
31.08.18 16:57:05<nilli[m]> I now think that it  allow me to define a true state as a "finite true"  only once the two truth values are present .  I named it "exclusive-and"  (xand)
31.08.18 16:57:45<nilli[m]> ill add it to the pastebin linked here
31.08.18 17:08:14<nilli[m]> ok xand is in! :) .  and I think  that now express the major differences between iz datatype  and bool datatype
31.08.18 17:23:46*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cvjnlrpucwaqbtfv) left #AutoNomic: Quit: Connection closed for inactivity
31.08.18 20:50:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jxibatpybsypyxql, stoopkid: stoopkid)
31.08.18 21:43:52*** Quit: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
31.08.18 21:52:54*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
31.08.18 22:57:39*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jxibatpybsypyxql) left #AutoNomic: Quit: Connection closed for inactivity
01.09.18 00:35:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ypxmwzotffhygcir, stoopkid: stoopkid)
01.09.18 06:00:12*** Join: aaaaaaaaaaaa1 (~root@118-86-185-36.kakt.j-cnet.jp, (unauthenticated): root)
01.09.18 06:01:45*** Nick change: aaaaaaaaaaaa1 (~root@118-86-185-36.kakt.j-cnet.jp) is now known as pennser
01.09.18 06:05:33*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-wnfowuwjzyjfbrvx) left #AutoNomic: Remote host closed the connection
01.09.18 06:05:39*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-ehdsvpqcekncwlws) left #AutoNomic: Read error: Connection reset by peer
01.09.18 06:05:47*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-suleaoswfognmpiy) left #AutoNomic: Remote host closed the connection
                 *** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-ukpckqvnvvqgvrou) left #AutoNomic: Remote host closed the connection
01.09.18 06:05:48*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-wrkndkqutbnnvhvh) left #AutoNomic: Read error: Connection reset by peer
01.09.18 06:07:49*** Quit: typlian5 (~PircBotX@185.185.69.118) left #AutoNomic: Ping timeout: 240 seconds
01.09.18 06:13:43*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-lwthtwueybtddjlp, (unauthenticated): @nilli:matrix.org)
01.09.18 06:35:20*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-zoykrwjctgjdjtwl, (unauthenticated): @genuinelyfx:matrix.org)
                 *** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hytgqxleqxvabblv, (unauthenticated): @koo5:matrix.org)
                 *** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-gewkomqejgnbdpns, (unauthenticated): @nikaala:matrix.org)
01.09.18 06:35:27*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-lwbsuinoyetkeuoe, (unauthenticated): @lexxus:matrix.org)
01.09.18 09:38:06*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ypxmwzotffhygcir) left #AutoNomic: Quit: Connection closed for inactivity
01.09.18 15:19:21*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-gewkomqejgnbdpns) left #AutoNomic: Read error: Connection reset by peer
01.09.18 15:19:23*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-zoykrwjctgjdjtwl) left #AutoNomic: Remote host closed the connection
01.09.18 15:19:32*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-lwthtwueybtddjlp) left #AutoNomic: Remote host closed the connection
                 *** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-lwbsuinoyetkeuoe) left #AutoNomic: Remote host closed the connection
                 *** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-hytgqxleqxvabblv) left #AutoNomic: Read error: Connection reset by peer
01.09.18 15:35:15*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-zhpenxgkeizxiezo, (unauthenticated): @nilli:matrix.org)
01.09.18 15:56:20*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pynlhrfrioavrnyy, (unauthenticated): @koo5:matrix.org)
01.09.18 15:56:21*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-gqkvqtukaauymilq, (unauthenticated): @genuinelyfx:matrix.org)
                 *** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-lotjkmrcirsagkyh, (unauthenticated): @nikaala:matrix.org)
01.09.18 15:56:31*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-sfnuwvhnxiqythzf, (unauthenticated): @lexxus:matrix.org)
01.09.18 16:08:40<nilli[m]> just realizing that this may not be the best place for me to communicate for learning considering my stile of learning ... (may reflect bad on the project... I find it hard go believe that anyone who is not realy familiar with  me would be able to appreciate any of it)
01.09.18 16:12:06<nilli[m]> in dev channel there are less people ,thus may be better there.  but on the other hand should be more pro. any thoughts?
01.09.18 16:18:36<editable-dog>i think that compared to your usual ranting, this is quite high quality content
01.09.18 16:19:24<editable-dog>youre learning agda, and thats super-relevant for autonomic future
01.09.18 16:20:03<editable-dog>and we all need some pet nonsense to motivate us to play with a new language
01.09.18 16:21:19<editable-dog>iow, i dont see a good reason to censor this:)
01.09.18 16:59:59<nilli[m]> editable-dog: compare to my usual ranting??  lol ,  that may have been much more acceptable since was for most really out here and they did not  understood it but now that its using some concepts more familiar. it may  read as nonsense . (which is not by the way...)
01.09.18 17:01:08<editable-dog>well, youre now longer talking about bools, but about "iz"..so...thats good
01.09.18 17:01:28<editable-dog>i think youre learning:)
01.09.18 17:01:55<nilli[m]> do you lik "iz" ?
01.09.18 17:02:38<nilli[m]> what did you think about "xand" ?
01.09.18 17:04:25<editable-dog>i havent been looking into it in depth, sorry:)
01.09.18 17:07:53<nilli[m]> you should when you will have some time.
01.09.18 17:10:13<nilli[m]> editable-dog:  can you give me  some *nontrivial* expression(s) of bool so i can demonstrate a meaningful difference from bool as HMCf asked?
01.09.18 17:11:40<nilli[m]> i dont know exactly what examples of expressions you use for bool and I thought to try and compare to it if you can give me a few.
01.09.18 17:34:05<editable-dog>well i thought about this and googled a bit, but i didnt come up with any real-world examples of bool usage that would fit the purpose here
01.09.18 17:35:16<editable-dog>how about this https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life
01.09.18 17:47:18<editable-dog>we would first have to write a strictly bool-based version i guess
01.09.18 17:48:41<editable-dog>idk
01.09.18 17:51:30<editable-dog>hmc can show you some circuit simulations im sure
01.09.18 18:01:40<nilli[m]> he was talking about simple expressions .  but I dont know which is such expressions. I guess not the Socrates one as the basic query. but I dont know what would be such simple one for bool.
01.09.18 18:03:03* editable-dog is sleeping
01.09.18 18:03:04<editable-dog>gn
02.09.18 05:29:51<nilli[m]> HMCf for now I understand what I need to do with the "not not " operation In  bool what they did is bool-test..agda to which they import eq.agda  and there they define the  "not not" operation. so Ill do the same but for "iz" and see what I get
02.09.18 05:32:49<nilli[m]> * I just called "not not" operation but it is a function . that is the whole point  that I tried to figure out how to do :)
02.09.18 05:35:16<nilli[m]> so my next pastebin will be iz-test.agda (if I get it right)
02.09.18 06:46:03<nilli[m]> working on it. have to resolve a few things to make agda color it for me without blaming me for missing or mismatching anything
02.09.18 06:46:50<nilli[m]> so far actualy  having fun with that even though it turned out to be more complicated than I thought
02.09.18 07:49:39<editable-dog>at least somebody is having fun
02.09.18 14:37:52<nilli[m]> editable-dog: are you suffering ??? well let see how long my fun is  going to last
02.09.18 14:39:01<nilli[m]> so ofc its turning out to be harder then what I thought it would be
02.09.18 14:45:02<nilli[m]> I am trying to go about the "not not" as is done in bool  using the eq.agda file but ofc in my iz.agda file it is not reflective  since ~~tt returns ff
02.09.18 14:48:10<nilli[m]> the interesting thing is that ~~ff  also returns ff since  both ~f, and ~t returns x  and then ~x is ff
02.09.18 14:54:11<nilli[m]> this is working good  , in fact i find that quite interesting in terms of where it can take me.
02.09.18 14:56:24<nilli[m]> so adga accept this
02.09.18 14:57:31* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/CfoHXFflqMeBYCjQoWMyhnuE >
02.09.18 15:00:26<nilli[m]> * ~~ff : ~ ~ ff ≡ ff     (. without the <br /> , dont know where that came from )
02.09.18 15:03:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yznbogdfmxkyskmk, stoopkid: stoopkid)
02.09.18 15:05:34<nilli[m]> but then when I tried  that
02.09.18 15:05:46* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/YBFSPpYmXmivJhrQMpXABeFA >
02.09.18 15:06:09<nilli[m]> I could not get the value for tt since there is none
02.09.18 15:08:55<nilli[m]> I tried even to use and empty set but did not know how to use it to  express that there is not elimination to get from tt .
02.09.18 15:09:11<nilli[m]> for now I left it as a hole
02.09.18 15:09:44*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
02.09.18 15:10:03*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
02.09.18 15:39:54<nilli[m]> well trying to trick the eq.agda to get the "not not" turns out to be quite tricky. not sure that I can get it. (ofc using the term refl a bit different as 180 degrees not 360 degrees)
02.09.18 15:42:58<nilli[m]> hey stoopkid how are you doing? are you off school for a bit?
02.09.18 15:44:31<stoopkid> hey nilli[m] , yea i have a much lighter courseload this semester than i did over the summer
02.09.18 15:47:56<nilli[m]> good. so what are you up to other then school?
02.09.18 15:53:32<stoopkid> https://www.youtube.com/watch?v=r_vggPqcfyk
02.09.18 15:58:45<nilli[m]> ops I just realized that I also massed up the names  of what I was trying to get. not the eq.agda but the  iz-test  in order to apply the equations so forget all of it Ill try to get back to it and explain better
02.09.18 16:00:17<nilli[m]> stoopkid. wow really getting form behind the computer. that is very good
02.09.18 16:00:37<nilli[m]> nice project. how is it going?
02.09.18 16:03:58<nilli[m]> so this is anyway what I was trying to do https://pastebin.com/U0x81uJW
02.09.18 16:06:52<stoopkid> still just gathering the stones hehe, i have to haul them quite a ways from the woods... also still planning how im gonna lay it out cause the yard's so small...
02.09.18 17:50:23<editable-dog>:)
02.09.18 19:53:25<editable-dog>alright one last small bug
02.09.18 19:53:46<editable-dog>and a couple of bigger ones
02.09.18 21:30:50*** Join: ditable-koo-olde (~user@167.88.171.233, (unauthenticated): user)
                 *** Quit: editable-koo-old (~user@167.88.171.233) left #AutoNomic: Read error: Connection reset by peer
03.09.18 04:40:23<nilli[m]> hey HMCf so I think that I am getting more convince as to how iz truth value is working
03.09.18 04:44:51<nilli[m]> I the "not not" is a function not an operation and thus is correct to use the refl and to get "ff"  as a result both for ~~tt and for ~~ff
03.09.18 04:46:26<nilli[m]> I am yet to realize the implication of that. but in terms of being what I wanted it is correct.
03.09.18 04:58:26<nilli[m]> also having a hole for elimination of tt is totally fine.  it means that I cant tell anything about tt if I get "~~"  under an elimination rules .
03.09.18 05:01:22<nilli[m]> which means that for a proof I will need to use an introduction rule or just an elimination rule to ~tt
03.09.18 05:45:16<nilli[m]> so for now im letting that go and will move on with my study of the book
03.09.18 10:16:25<editable-dog>:)
03.09.18 15:12:24*** Netmerge: *.net *.split, split 49 years 4 months 17 days 19 hours 12 minutes 25 seconds ago (Use /WL to see who's still missing)
03.09.18 16:12:22*** (0) Missing 1 people due to *.net *.split
03.09.18 19:20:58<editable-dog>https://github.com/koo5/univar/blob/33471d905a47c88a0ea9496d1ea277e5901c58b0/tests/lists/banana
03.09.18 19:23:42<editable-dog>?l0 rdf:first ?y matches with the (?X) fact
03.09.18 19:24:31<editable-dog>the (?X) is desugared to something like {?l rdf:first ?X} <= {}, so ?X is also an existential, hence a bnode?
03.09.18 19:25:06<editable-dog>later i need to unify this ?X with :this
03.09.18 19:25:55<editable-dog>so..
03.09.18 19:26:24<editable-dog>should bnodes unify with consts?
03.09.18 19:30:18<editable-dog>as a side note, it has taken me so much time to fit the bnodes stuff into pyin and debug everything (well, along with work on the visualization etc), should have made a new version first ...
04.09.18 08:17:18*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
04.09.18 08:17:36*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
04.09.18 16:09:44<stoopkid> nilli[m]: not sure what you're going for with the iz type but as far as Agda cares it's just a set with 3 distinct atomic labeled elements
04.09.18 16:10:28<stoopkid> it is indeed different from bool because as far as Agda cares bool is just a set with 2 distinct atomic labeled elements
04.09.18 16:16:36<stoopkid> sidenote: if you're claiming that something is fundamentally missing from Agda's logic then you aren't gonna be able to use Agda to represent it otherwise it wouldn't be fundamentally missing
04.09.18 16:20:19<stoopkid> try it out: think of some proposition that's true about sets with 3 distinct atomic labeled elements, and some subset of those things is what you'll be able to prove about "iz" in Agda
04.09.18 16:20:35<nilli[m]> hey stoopkid. I did not realize that I can replace bool . but now I understood that
04.09.18 16:20:50<stoopkid> heya
04.09.18 16:21:36<nilli[m]> im now in love with agda (at list for now)
04.09.18 16:21:43<stoopkid> so "is_ : iz → iz" here, you proved that you can make a function from a set with 3 elements back to itself
04.09.18 16:21:51<stoopkid> :)
04.09.18 16:22:13<stoopkid> glad to hear it, you're making amazing progress from what i can see here
04.09.18 16:23:24<stoopkid> very few people have Agda programming on their resumes :P
04.09.18 16:23:40<nilli[m]> once I realize that I can replace bool in the other files that import it  the sky opened
04.09.18 16:24:10<stoopkid> yes reusing existing code is critical
04.09.18 16:25:05<nilli[m]> let me paste the up to date files
04.09.18 16:25:07<nilli[m]> so you can see it
04.09.18 16:25:51<stoopkid> koo5[m]: she's already got better coding habits than i do :P
04.09.18 16:26:15<nilli[m]> for now on the iz I did not defined imply operation yet but all the other is . I am not sure if imply is needed
04.09.18 16:28:12<stoopkid> that would most likely depend on your criteria, which idk what they are yet
04.09.18 16:28:47<nilli[m]> https://pastebin.com/js14CU2L
04.09.18 16:30:32<nilli[m]> and I also did the nat file with iz and as I explaind only once I have iz -> iz . is when it matters the difference. but not when N -> iz
04.09.18 16:32:17<stoopkid> so, Agda only sees "iz" as a set of 3 elements and your operations/proofs reflect this, although by the identifiers you've used i can see you're trying to model a 3 valued logic
04.09.18 16:34:25<nilli[m]> yes I am trying to create that but is more like 2.5
04.09.18 16:34:55<stoopkid> at least it's still rational *ba dum ch*
04.09.18 16:35:15<nilli[m]> which will requires a two value for truth that of tt and that o j to be a complete true
04.09.18 16:35:29<nilli[m]> of j
04.09.18 16:36:03<nilli[m]> j is a bit like imaginary number for a true  value
04.09.18 16:36:15<nilli[m]> https://pastebin.com/wPcRs1E8
04.09.18 16:36:26<nilli[m]> that is the nat-iz file
04.09.18 16:36:32<stoopkid> well
04.09.18 16:36:47<stoopkid> there's two ways people have managed to justify imaginary numbers
04.09.18 16:37:02<nilli[m]> I still don't know if it all make sense but it loads :)
04.09.18 16:37:54<nilli[m]> and thank you guys for all the nice things you said before :)
04.09.18 16:38:09<stoopkid> 1. demonstration of correspondence to models, like in that FOL stuff i showed you
04.09.18 16:38:12<nilli[m]> I could not do it without you
04.09.18 16:38:48<stoopkid> for example like how negative numbers correspond to debt, or motion in the reverse direction along an axis, etc..
04.09.18 16:39:25<stoopkid> 2. utility in problem-solving, independent of any intuitive explanatory model
04.09.18 16:39:45<nilli[m]> im not sure what you mean
04.09.18 16:40:01<nilli[m]> can you give me the actual example ?
04.09.18 16:40:31<stoopkid> of how negative numbers correspond to debts?
04.09.18 16:40:53<nilli[m]> im swamp with new information  in the last months so some things get lost or confused  :)
04.09.18 16:42:43<nilli[m]> by the way stoopkid great to have you here again (in the right capacity for you)
04.09.18 16:43:10<stoopkid> thanks :)
04.09.18 16:43:38<nilli[m]> what do you mean correspond to debts?
04.09.18 16:43:39<stoopkid> well i'm basically asking: what is j, or alternatively what do you do with j in the context of problem-solving
04.09.18 16:44:08<stoopkid> like how when you owe the bank 5 dollars so your balance shows -$5
04.09.18 16:44:59<stoopkid> so we have a real-world situation where negative numbers appear to manifest themselves
04.09.18 16:45:30<stoopkid> similarly with imaginary numbers they correspond to rotations in a 2D coordinate system
04.09.18 16:45:38<stoopkid> rotation/scaling
04.09.18 16:45:50<nilli[m]>  it will be the same  actualy j is the value that can represent that unlike tt or ff
04.09.18 16:46:01<nilli[m]> I think. ....
04.09.18 16:46:03<stoopkid> but also before people really figured that out they knew that imaginary numbers were useful because you could factor equations with them
04.09.18 16:46:27<stoopkid> even though everybody was (and still is) like "wtf is an imaginary number"
04.09.18 16:47:35<nilli[m]> its a bit different from imaginary number since is not reflected in numbers
04.09.18 16:48:07<nilli[m]> its actualy like adding a dimension for truth values  not to natural numbers
04.09.18 16:48:59<nilli[m]> I mean imaginary number was reflected in the number system or used to express time space in geometry
04.09.18 16:50:26<nilli[m]> well by using riemann geometry
04.09.18 16:50:42<nilli[m]> the space time use of it came later
04.09.18 16:52:03<nilli[m]> im not totaly understanding what im doing yet. other then trying to express a state of   partial truth  and full truth
04.09.18 16:53:38<nilli[m]> and mosly I came to do it since the situation of true/ false being complete opposite on one onother create a built in contradiction
04.09.18 16:54:12<stoopkid> well
04.09.18 16:54:21<stoopkid> that's certainly debatable :)
04.09.18 16:54:31<nilli[m]> we are so used to hing in this way that its even hard for us to see it but its there right in my face. screaming at me :)
04.09.18 16:54:42<nilli[m]> think this way
04.09.18 16:55:36<nilli[m]> but its fine that it is debatable. that the challenge
04.09.18 16:59:04<stoopkid> so when is something partially true rather than fully true
04.09.18 16:59:45<nilli[m]> there is also this file that is important
04.09.18 16:59:49<nilli[m]> https://pastebin.com/cRbrKCbc
04.09.18 17:01:00<stoopkid> yea your elim2 there isn't gonna work
04.09.18 17:01:21<stoopkid> because agda considers that statement false
04.09.18 17:01:36<nilli[m]> I have to come up with the example of where it matters but int the ''not' and ''not not it is a big  difference. and yes I need to resolve the elimination
04.09.18 17:03:56<stoopkid> btw if you're changing everything else you can also change the definition of equality
04.09.18 17:04:59<nilli[m]> well I need to define "not not" as a function based on equation. that is a key thing
04.09.18 17:05:26<stoopkid> maybe
04.09.18 17:05:48<stoopkid> i still haven't understood what is the problem you're trying to resolve here
04.09.18 17:06:00<nilli[m]> based it both on the operation "not" and the equation
04.09.18 17:07:28<nilli[m]> I need to get off the train in a few minuts  so will get back a bit later. and I need to explain better what is the problem I try to solve :)
04.09.18 17:07:45<stoopkid> sounds good
04.09.18 17:07:51<nilli[m]> other then motivate myself to lean :)
04.09.18 17:08:05<nilli[m]> learn
04.09.18 22:32:20*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
04.09.18 22:48:22*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
04.09.18 23:15:09<stoopkid> nilli[m]: so, it would maybe help to work with a real-world example to show what kind of reasoning you're going for
04.09.18 23:17:54<stoopkid> in standard boolean logic we can do stuff like: "it's raining outside" is true/tt, "it's Friday" is tt, therefore "it's raining outside AND it's Friday" is tt
04.09.18 23:18:41<stoopkid> what kind of real-world statement do you have in mind that could be considered to have a truth value of j
05.09.18 00:17:48*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 260 seconds
05.09.18 00:31:34*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
05.09.18 03:51:54<nilli[m]> stoopkid: ok  great. that is exactly what I need in order to see if my idea work and how it work
05.09.18 04:09:14<nilli[m]> ok lets start with your example.   "it's raining outside" is tt, "it's Friday" is tt, therefore "it's raining outside AND it's Friday" is tt
05.09.18 04:31:05<nilli[m]> however if    "it's raining outside" is ff, "it's Friday" is ff, therefore "it's not raining outside AND it's not Friday" is actualy a true statement as well
05.09.18 04:32:37<nilli[m]> the problem arise with the fact that we allow to exchange between the truth statement and the not based on the negation rule
05.09.18 04:37:43<nilli[m]> in fact once we have a true statement then the false statement in light of that true statement is true based on the negation rule  which means that a false statement is also a true statement .
05.09.18 04:38:31<nilli[m]> we can not represent that state if we apply the negation rule both to the statement and its result
05.09.18 04:39:10<nilli[m]> it can be applied only to one side of our equation
05.09.18 04:41:35<nilli[m]> however the truth of the negation statement is a different truth  than that of the  positive true statement.
05.09.18 04:48:44<editable-dog>does this have something to do with constructive vs classical logic?
05.09.18 04:58:37<nilli[m]> I think that constructive  logic is dealing with it somehow and im not sure how but as I see it its a problem that arise from the multiple identities for ff as both  "ff" and not tt and tt as "not ff".
05.09.18 04:59:30<nilli[m]> if I can define one term by negating the other term im doing that same thing which create the problem of proving one thing by using itself to prove it
05.09.18 05:00:55<nilli[m]> in other words if I say that tt is not ff , and that ff is not tt , I did not say anything concrete about any of them.
05.09.18 05:02:13<nilli[m]> so the boolean concept to represent truth is wrong at the root of it
05.09.18 05:05:03<nilli[m]>  the boolean system its a good simplification for many practical matters but is destructive for a complex state and can say nothing on it.
05.09.18 05:07:41<nilli[m]> or maybe put different boolean is an "action" mode. eventualy we need to take action or to not take action. but it say nothing concrete about any of the states we create by taking that action.
05.09.18 05:10:50<nilli[m]> both states are true states but one is also a state we are a part of thus "true" for us while the other is a state that is false for us as of now but is true in terms of the world as a whole.
05.09.18 05:12:08<nilli[m]> * or maybe put different.  Boolean is an "action" mode....
05.09.18 05:20:34<nilli[m]> another way to say it : the fusion between negation and  complementary value  is wrong when we deal with true and false.
05.09.18 05:29:17<nilli[m]> I think in constructive logic they just resolve it by saying that if its  "not true" you cant say anything about the system. only if its true
05.09.18 05:30:19<nilli[m]> but that is taking it too far and wasting a lot of valued information just because you are using a boolean truth value
05.09.18 05:41:15<nilli[m]> what I try to create as "iz" 3 truth values is having ff as a state of  "0 information"  and "not" a state of alternative  information  .
05.09.18 05:41:42<nilli[m]> (Trump supporter's camp will love me for  that)
05.09.18 05:44:14<nilli[m]> also just to be clear at this point of the process I keep confusing myself regarding whether ff is 0 information or the alternative information, or is "not" the 0-information and ff is the alternative information
05.09.18 05:46:05<nilli[m]> assuming how I defined it for now on the "iz" file, it is ff that is 0 indeed and j as an alternative true.
05.09.18 05:48:21<nilli[m]> is_ : iz → iz
05.09.18 05:51:50<nilli[m]> *I tried to put it here on the same line so will show  but is not working so will post each line  one at a time.
05.09.18 05:52:13<nilli[m]> is_ : iz → iz
05.09.18 05:52:30<nilli[m]> is tt = tt
05.09.18 05:52:46<nilli[m]> is ff = ff
05.09.18 05:53:03<nilli[m]> is j = tt
05.09.18 05:53:51<nilli[m]> ~_ : iz → iz
05.09.18 05:54:10<nilli[m]> ~ tt = j
05.09.18 05:54:25<nilli[m]> ~ ff = j
05.09.18 05:55:14<nilli[m]> ~ j = ff
05.09.18 06:49:43<nilli[m]> by the way i see that agda have a negation file that define "not x " and an empty set
05.09.18 06:50:57<nilli[m]> ruther define negation x as empty  set
05.09.18 06:55:50<nilli[m]> I wonder how it will work with bool?  is it resolving the problem by creating two different symbols for negation?
05.09.18 06:56:28<nilli[m]> thus two different meaning for negation. one that is inverse and one that is empty
05.09.18 06:57:24<nilli[m]> if so  that would be a very manly way to resolve the problem :)
05.09.18 06:57:54<nilli[m]> like : what do you mean when you say "no"
05.09.18 07:17:23<nilli[m]> stoopkid:  finally  would be helpful for me if you will formulate  that rain of friday   on agda using bool file and then I can try to see how it work using iz
05.09.18 07:17:45<nilli[m]> for now I am no sure how to express it right on agda
05.09.18 07:18:25<nilli[m]> * rain on Friday
05.09.18 12:01:06<editable-dog>im not feeling up to it today, can we do the call another day?
05.09.18 12:22:23<nilli[m]> yes sure.  :)
05.09.18 12:50:41<nilli[m]> stoopkid: I did the truth table  for "rain on friday " acording to iz. it is horrendous and I have a few true states but only one tt that is the case of tt and tt.
05.09.18 12:50:57<nilli[m]> https://pastebin.com/CUAWC7ZL
05.09.18 12:54:45<nilli[m]> this looks like a crazy thing yet it means that if I have two parameters  I can get may true statement combining the options of each to give me true or false.
05.09.18 12:55:44<nilli[m]> I still have one exclusive true , that of tt tt. but to get that I need to have both parameters returns true
05.09.18 12:58:01<nilli[m]> it means that I have to know  the recent "history" , how each came out to conclude and exclusive true
05.09.18 13:02:02<nilli[m]> this means that the  argument the most recent one can give me only a partial information regarding the true state and it the one before plus that current one that makes it exclusive true.
05.09.18 15:25:38<stoopkid> editable-dog: i didn't even wake up til just a bit ago so sure
05.09.18 16:39:21<nilli[m]> hi stoopkid. so as you see this  thing is turning out to be very complex. i guess there will be a more elegant way to deal with it eventually.
05.09.18 16:44:29<nilli[m]> or I might even will realize that my issue with bool in terms of negation/inverse issue have been resolved somehow. so for now ill keep going with the agda book.
06.09.18 04:54:10<nilli[m]> ok. a new morning . im looking at what I did yesterday (see pastebin) and dont think that it is so horrific
06.09.18 04:57:43<nilli[m]> it looks that way but really after was thinking that this whole "iz" idea is really bad  idea I  review it again and see that it is making sense.  so I will rant on it a bit more.
06.09.18 04:57:52<nilli[m]> to explain to myself
06.09.18 04:59:10<nilli[m]> first of all , in the example that I gave I used a fact that is ff so we can get the full picture of the truth table.
06.09.18 04:59:52<nilli[m]> that created a really long table unlike what we like with bool
06.09.18 05:00:33<nilli[m]> however we do end up with only one tt and most important with only one ff (if I am right )
06.09.18 05:09:20<nilli[m]> this  prove one point  that I tried to  say. that false is as explicit as true is  and it is in fact the explicit states which we can trust that matters.
06.09.18 05:11:25<nilli[m]> in bool we associate the explicit state with true and that is the source of some contradictions as well.
06.09.18 05:18:47<nilli[m]> im not sure how clear am I regarding expressing  all that. also since I am explaining it to myself as we go. I get a sense that it is but to understand the details that build it  is a lot of work (and yes, rant too ,koo5, )
06.09.18 05:19:52<nilli[m]> and also the courage to turn out to be a total stupid thing to do.
06.09.18 05:22:57<nilli[m]> On that I have to give you guys a lot of credit for putting up with my style of learning and with my long searches and rants.
06.09.18 05:24:08<nilli[m]> and make me feel like you do respect me despite all that
06.09.18 05:24:28<nilli[m]> or even for that.
06.09.18 06:06:58<editable-dog> well, its not very clear to me, thats for sure
06.09.18 06:12:58<editable-dog>like, i always get lost after a few sentences of your explanations
06.09.18 06:13:01<editable-dog>and give up
06.09.18 07:44:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yznbogdfmxkyskmk) left #AutoNomic: Ping timeout: 252 seconds
06.09.18 07:47:31*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kktqutckiapovmac, stoopkid: stoopkid)
06.09.18 08:05:29<nilli[m]> editable-dog:  its ok koo. first of all often I write it with many typos and grammer mistakes which makes it even harder to  understand. and also I understand as I go
06.09.18 16:00:18<stoopkid> editable-dog: "should bnodes unify with consts?"
06.09.18 16:01:52<stoopkid> my similar question is: how do you reverse the parsimonious chase algorithm in order to make it backward-chaining?
06.09.18 16:06:35<stoopkid> note also the crucial point wrt parsimonious chase: it only "works" on parsimonious kbs/queries
06.09.18 16:09:32<stoopkid> but idk, the pchase is interesting but who can think that way?
06.09.18 16:11:24<stoopkid> i certainly can't and the stuff i already do know is already beyond what most people are ever gonna be able to afford to learn
06.09.18 16:24:57<stoopkid> on a different topic, seems there might be some ways to start addressing the complexity issues within MLTT/HoTT
06.09.18 16:25:54<stoopkid> so in HoTT, there's no proposition that can distinguish the set Nat from the set Vector Bool
06.09.18 16:27:19<stoopkid> why? because they have the same cardinality and don't have any non-trivial equality structure defined on them, and so there's an isomorphism between them
06.09.18 16:28:15<stoopkid> what this means is that there's no to prove in HoTT that Nats (unary nats) are a less space-efficient representation of the natural numbers than Vector Bools (binary nats)
06.09.18 16:28:20<stoopkid> no way*
06.09.18 16:30:17<stoopkid> this is right in there with the same issue of not being able to differentiate the algorithms used to represent functions, unless they differ in their outputs for some input
06.09.18 16:31:11<stoopkid> so let's say we have a function "length : Vector Bool -> Nat"
06.09.18 16:32:39<stoopkid> we can prove "forall v : Vector Bool, length(v) == ceil(log_2(nat_represented_by(v)))"
06.09.18 16:33:36<stoopkid> and if you define your 'ceil' and 'log_2' functions in terms of Vector Bools, then you can write "length : Vector Bool -> Vector Bool" and prove "forall v : Vector Bool, length(v) == ceil(log_2(v))"
06.09.18 16:34:02<stoopkid> but because there's an isomorphism between Vector Bool and Nat, i can prove this same proposition about Nats
06.09.18 16:35:54<stoopkid> maybe later i'll get in redprl or something and actually give this proof, but anyway, this demonstrates the issue
06.09.18 16:37:09<stoopkid> we can essentially prove "forall n : Nat, length(n) == ceil(log_2(n))" which is absurd, unless we interpret the use of univalence properly
06.09.18 16:38:02<stoopkid> what this *really* says is that, for every Nat n, the Vector Bool that it corresponds to will have a length which is ceil(log_2(n))
06.09.18 16:39:37<stoopkid> we can do the same thing if we started on the Nat side and defined "size : Nat -> Nat", "size n = n + 1"
06.09.18 16:41:32<stoopkid> so, there's for sure no way to distinguish Nat from Vector Bool using a proposition in HoTT that's true for one and false for the other, all propositions will be either true for both, false for both, or neither provable nor disprovable, for both
06.09.18 16:42:16<stoopkid> otoh, there *is* something that we can differentiate even in HoTT: these two functions
06.09.18 16:44:29<stoopkid> essentially we can prove that the function "size" grows faster than the function "length"
06.09.18 16:46:00<stoopkid> metatheoretically we can take this as proof that any representation of the natural numbers where the actual size of the representation is given by "size" is less space-efficient than any representation where the actual size of the representation is given by "length"
06.09.18 16:51:10<stoopkid> but you basically have to be accepting this as extra axioms in the metatheory and trusting that you'll actually apply them right
06.09.18 16:52:22<stoopkid> idk there doesn't really seem to be any way around the conclusion that HoTT (and also standard MLTT) is fundamentally flawed for the purposes of practical applications development because of its inability to address this issue
06.09.18 16:53:05<stoopkid> you have to be able to break univalence in order to examine the intensional properties of your code & data
06.09.18 16:54:02<stoopkid> if you think otherwise, ask an HoTT theorists, they'll basically tell you to just give up because it won't work and that examining intensional properties of code & data would be "evil"
06.09.18 16:55:03<stoopkid> they'll literally tell you to go try something besides for HoTT
06.09.18 16:56:48<stoopkid> standard MLTT is the worst of both worlds: you can't take advantage of the univalence axiom because it's not available, and you also can't form any proposition that would differentiate structures on the basis of their intensional properties
06.09.18 16:57:21<stoopkid> and we know you can't do the latter because standard MLTT is consistent with univalence, and being able to differentiate structures on the basis of their intensional properties would break this consistency
06.09.18 16:58:45<stoopkid> this might be cool for topologists but it's complete total fail for computer scientists & programmers
06.09.18 17:01:44<stoopkid> it doesn't seem there's much (if any) research to figure out how to incorporate these capabilities into MLTT
06.09.18 17:07:06<stoopkid> and it's not even just one source of complexity, there's complexity of proof-search, complexity of proof-checking, and complexity of proof-normalization (which might be triggered during proof-checking..)
06.09.18 17:09:07<stoopkid> i really don't know what people actually need from this, and all of my ideas about it turn out wrong, so i'm really not sure how this whole thing's supposed to fit together or how anybody's gonna be able to manage to fit it together aside from HMCf himself and how we would even be able to assess the tool even he did
06.09.18 17:18:45<stoopkid> HMCf: i know you staunchly disagree with this but i really think it would benefit the project to take it "public" and drop the requirements of "perfetcion"
06.09.18 17:20:40<stoopkid> you know, like, exactly what redfish64 has been trying to do
06.09.18 17:28:10<stoopkid> i'd bet money that if you hosted your discussions in ##dependent... or ##logic... or ##crypto... or etc.. the project would be done by now
06.09.18 17:30:03<stoopkid> all of those channels would be perfectly happy to host the discussions and are filled with people who would actually be able to interpret your plans
06.09.18 17:30:32<stoopkid> many of whom would probably even join in development
06.09.18 17:32:29<stoopkid> and who wouldn't just try to shoehorn your idea into their system-of-choice, which is what you always say happens / would happen... i've never had this experience; pretty much everybody is perfectly willing to assess ideas i present in their own right
06.09.18 17:32:56<stoopkid> they're perfectly willing to examine my attempts at translating MLTT into RDF, etc..
06.09.18 17:34:51<stoopkid> they're perfectly willing to consider what the implications would be for putting this on DHT/blockchain, etc..
06.09.18 17:35:46<stoopkid> they actually have connections to professional researchers and developers who actually put MLTT into practice..
06.09.18 17:36:59<stoopkid> and the reason i know this is because the only way i was able to get this far in the project is by taking the ideas you present and asking about it in those channels
06.09.18 17:39:22<stoopkid> but i don't understand the rest of your plans well enough to even formulate the questions to go ask, and it doesn't really seem like anybody else here does either and i don't foresee myself figuring out the rest of it
06.09.18 17:41:55<stoopkid> but everybody who's here is here to manifest *your* plans, your *specific* plans, and it would be misleading to present it any other way
06.09.18 17:46:47*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Remote host closed the connection
06.09.18 17:46:53<stoopkid> idk, i'm sure there's no way i'll convince you of any of that but i've said it a million times before so one more time won't hurt i guess
06.09.18 17:47:06*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.09.18 17:50:12<stoopkid> bbl
06.09.18 19:53:03*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kktqutckiapovmac) left #AutoNomic: Quit: Connection closed for inactivity
06.09.18 20:35:30*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 252 seconds
06.09.18 20:43:32*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lzlzloppqxxgqbes, stoopkid: stoopkid)
06.09.18 20:45:28*** Join: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-ukvudexcppjfufnj, (unauthenticated): @dadbod007:matrix.org)
06.09.18 20:48:10*** Join: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz, daemoz: daemoz)
06.09.18 22:47:16*** Quit: daemoz (daemoz@gateway/vpn/privateinternetaccess/daemoz) left #AutoNomic: Ping timeout: 246 seconds
07.09.18 00:58:01*** Quit: pennser (~root@118-86-185-36.kakt.j-cnet.jp) left #AutoNomic: Remote host closed the connection
07.09.18 01:16:50*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
07.09.18 01:25:08*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
07.09.18 05:23:03<nilli[m]> stoopkid: hey. sound like you have reached some critical conclusions regarding a practical use of MLTT
07.09.18 05:24:47<nilli[m]> I dont understand most of  what you explained there. but I do trust that you made any effort possible to do that.
07.09.18 05:26:31<nilli[m]> and also for knowing you I trust it that you have been as thorough as can be
07.09.18 05:35:00<nilli[m]> however it seems to me that the projects out there which are truly interested in being decentralized and deal with more than just token transaction ended up moving or exploring  MLTT
07.09.18 05:37:49<nilli[m]> last night I just happened to run into a guy that was recently hired by Zen protocol as type theory expert and for knowing agda.
07.09.18 05:40:50<nilli[m]> and he confessed to know very little of it having to learn most of it by himself as a graduate of computer science.
07.09.18 05:40:57<nilli[m]> . I am sure that you know far far more then he dose
07.09.18 05:43:12<nilli[m]> by the way these guys at zen protocol are really honest and  great. and the founder is   a true bitcoiner  unlike so many in the new ICO landscape.
07.09.18 05:47:24*** Quit: ditable-koo-olde (~user@167.88.171.233) left #AutoNomic: Remote host closed the connection
07.09.18 05:47:54<nilli[m]> he is one of the firsts to adopt it here in israel. and also he is not like the Cardano guy  who  took tau's ideas to sell much better than we did.
07.09.18 05:49:56<nilli[m]> I actualy think that it would be a good idea to see what  they at zen protocol try to do.  since they try to solve the smart contract issue with that. and have now the means to do it in terms of finance.
07.09.18 05:52:17<nilli[m]> https://www.zenprotocol.com/
07.09.18 05:54:33<nilli[m]> check them out.  I dont know to what level they reached in terms of working with mltt but they are at a place to spend reaching it for real use.
07.09.18 05:58:05<nilli[m]> ofc this in not trying to do what autonomic is doing but is  facing  the same problems any  true decentralized application is and will run into
07.09.18 15:21:32<editable-dog>stoopkid: https://www.sciencedirect.com/science/article/pii/S0004370211000397
07.09.18 15:21:37<editable-dog>re chase
07.09.18 15:52:42<editable-dog>i should go back to this paper
07.09.18 20:30:45<stoopkid> nilli[m]: well mltt does have many many practical applications and is a vast improvement over most other existing systems, it just doesnt do one particular thing (but nothing else does either)
07.09.18 23:43:05*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lzlzloppqxxgqbes) left #AutoNomic: Quit: Connection closed for inactivity
07.09.18 23:50:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ouruuikdluihrwui, stoopkid: stoopkid)
08.09.18 02:23:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ouruuikdluihrwui) left #AutoNomic: Quit: Connection closed for inactivity
08.09.18 05:20:29<nilli[m]> stoopkid: what is that one particular thing. can you explain in a way that I would understand? and why is it so critical for the autonomic project. I guess that am still missing the point
08.09.18 05:21:18<nilli[m]> koo5 you can give it a try too. explaining me that point.
08.09.18 05:30:15<koo5[m]> I have no clue
08.09.18 05:34:42<nilli[m]> koo5: well at least that makes me feel a bit less incompetent ..
08.09.18 05:37:56<nilli[m]>  I got from you and others that agda is not very pragmatic  to write an actual program with and that no one actualy is doing that. but I see more gravitation toward it  and I think that I understood that
08.09.18 05:38:52<nilli[m]> I just dont seem to get what is the actual point that stoopkid cant go passed it
08.09.18 05:40:21<nilli[m]> but i trust his abilities to learn very much and if he cant figure it out then there is something very fundamental that is not there .
08.09.18 05:40:43<nilli[m]> in fact he phrased it that way... let me see
08.09.18 05:46:46<nilli[m]> "this might be cool for topologists but it's complete total fail for computer scientists & programmers"
08.09.18 10:15:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rjyobvxelagdmivj, stoopkid: stoopkid)
08.09.18 10:17:06<stoopkid> nilli[m]: there's lots of things preventing me from going further with the project, the limitations of MLTT are just one of the issues
08.09.18 10:18:07<stoopkid> let's say i give you a program, and you run it
08.09.18 10:18:40<stoopkid> for a given input to the program, how long is this program gonna run for and how much space will it use?
08.09.18 10:19:12<stoopkid> alternatively, let's say we're talking to each other about some real-world concept, let's say dates & times
08.09.18 10:19:57<stoopkid> and each of us comes up with our own particular representation of dates & times in terms of bits & bytes so that we can actually store date/time info on our machines
08.09.18 10:20:05<stoopkid> which of us has the better representation?
08.09.18 10:20:54<stoopkid> which one is more space-efficient, for example?
08.09.18 10:21:52<stoopkid> now let's say you want to enforce these kinds of things as constraints in Agda
08.09.18 10:22:41<stoopkid> like maybe instead of just asking for functions from A -> B, you ask for "functions from A -> B that take at most N steps to run and use at most M bytes of space"
08.09.18 10:22:55<stoopkid> all well and good, except for that you can't
08.09.18 10:23:38<stoopkid> and the type theorists are in the middle of a huge philosophical debate over whether or not you  even *should* be able to
08.09.18 10:38:06<stoopkid> also practical debates over how complexity should even be measured
08.09.18 10:38:55<stoopkid> for example "# of steps" is not a great complexity measure in a lazily-evaluated functional programming language
08.09.18 10:40:03<stoopkid> and your compiler might have other optimizations that are "invisible" to the type theory
08.09.18 10:41:49<stoopkid> if you have built-in stuff for handling things like Nat, then you'd most likely be using a binary representation under the hood
08.09.18 10:43:12<stoopkid> and then in pretty much all cases, the programs will compile differently for different machines (because they use different machine languages)
08.09.18 10:44:26<stoopkid> or they might compile to the same machine code on two different machines, but the machines run at different speeds
08.09.18 10:45:32<stoopkid> so... we're supposed to be making a decentralized nomic
08.09.18 10:45:58<stoopkid> the nomic essentially is a program, or.. a collection of programs
08.09.18 10:46:55<stoopkid> the program essentially implements the rules that describe how you're allowed to modify that program
08.09.18 10:47:48<stoopkid> the complexity of that program will surely be something that needs to be constrained by the rules that the program implements
08.09.18 10:50:23<stoopkid> this is like... *the* issue which forced ethereum to use coins/gas
08.09.18 10:52:14<stoopkid> HMCf seems to think it's a non-issue, presumably on the basis that he knows of some way to address the issue
08.09.18 10:52:54<stoopkid> how? well.. that's not really something i'm planning to figure out at this point
08.09.18 10:56:08<stoopkid> and there's like 100 more things to figure out besides for this
08.09.18 10:57:12<nilli[m]> hey stoopkid. reading through right now
08.09.18 11:12:21<stoopkid> here's an example: https://pastebin.com/u2n8m3hW
08.09.18 11:12:37<stoopkid> in HoTT, these functions are provably equal
08.09.18 11:13:00<stoopkid> and in standard MLTT, they're *not* provably unequal
08.09.18 11:13:46<stoopkid> in neither HoTT nor standard MLTT can these functions be differentiated from each other on the basis of their different run-time complexities
08.09.18 11:16:55<nilli[m]> stoopkid: I think that for starter we need to think of autonomic as a time machine by  define the size of a unit
08.09.18 11:17:32<stoopkid> if by "time machine" you mean "clock" then maybe
08.09.18 11:17:38<nilli[m]> the time is defined by the units and the coordination of starting points
08.09.18 11:18:06<nilli[m]> then the two function relate to one another but are measured against one another
08.09.18 11:19:43<nilli[m]> let start by evaluating true to a NAT in order to create units
08.09.18 11:20:09<stoopkid> the block-chain really doesn't have any more granular unit of time than the block
08.09.18 11:20:53<stoopkid> time on the block-chain is pretty much by definition measured in units of blocks
08.09.18 11:22:23<nilli[m]> which is a true input/output cycle
08.09.18 11:23:23<nilli[m]> the blockchain actualy translate "true" to "time"
08.09.18 11:23:43<nilli[m]> which gives a big meaning to tt :)
08.09.18 11:23:58<stoopkid> idk what you mean
08.09.18 11:25:11<nilli[m]> every block a a true statement and you can count using it
08.09.18 11:26:10<nilli[m]> now that is not the best way to get a time unit
08.09.18 11:28:04<nilli[m]> there is a much better one which was created using the 360 degrees of a circle and relate it to  the 365 days of a year
08.09.18 11:30:46<nilli[m]> I dont know exactly how its all being calculated but there is lots of information about it regarding megalithic structure dated fare before the Egyptian dynasties of pharaohs
08.09.18 11:31:19<stoopkid> what like stonehenge?
08.09.18 11:32:33<nilli[m]> like them but long before the known Stonehenge.
08.09.18 11:33:06<nilli[m]> ill give you a list of a few resources
08.09.18 11:33:34<nilli[m]> but first let me explain the critical issue as I see it
08.09.18 11:34:49<stoopkid> (i should note that i'm not even aware that this complexity thing is actually a critical issue, but i have a very hard time imagining that it wouldn't be)
08.09.18 11:35:53<nilli[m]> we can create units based on cycles that we all can agree on. . then if we are able to agree on where we start we are ready to agree on time.
08.09.18 11:36:08<stoopkid> (and also i've worked out dozens of workarounds that can be used in combination and potentially address a large subset of the practical issues that might come up)
08.09.18 11:36:28<nilli[m]> human did it before and all our units are based on that.
08.09.18 11:36:32<stoopkid> well...
08.09.18 11:37:11<nilli[m]> what we try to do here creating a  new base unit that is not dependent on the units we already created
08.09.18 11:37:21<stoopkid> the problem with this is that it's not just about keeping track of time, it's about using your clock to actually time-stamp things
08.09.18 11:37:45<nilli[m]> it takes  leap of abstractions
08.09.18 11:37:47<stoopkid> i can watch the cycle of the earth's rotation, pick a start date and start measuring days
08.09.18 11:38:15<stoopkid> but if you give me some piece of data, how can i verify what day you produced/published it?
08.09.18 11:40:47<stoopkid> you might add some metadata to it that encodes the timestamp, like "September 8th, 2018"
08.09.18 11:40:59<stoopkid> how can i verify you didn't "forge" the timestamp?
08.09.18 11:41:34<stoopkid> well, if you said "October 10th, 2018", i'd know it was forged, but let's say you said "August 5th, 2018"
08.09.18 11:42:13<nilli[m]> right :)   the skies where the first  block chain based technology. the priests where in fact astronomers and where the miners too.
08.09.18 11:42:30<stoopkid> "right"?
08.09.18 11:43:38<stoopkid> if i'm saying anything i'm saying that this doesn't work :P
08.09.18 11:43:42<nilli[m]> stoopkid you need to think in much more abstract configurations ("right" on watching the rotation)
08.09.18 11:44:52<stoopkid> like the probabilistically evolving cycles of PoW?
08.09.18 11:47:56<stoopkid> (side-note: you don't need PoW to provide the arrow of time either, PoW actually isn't the component of the blockchain that provides this)
08.09.18 11:49:18<stoopkid> (well, actually it does, coincidentally, but it's not the "work" that provides the arrow)
08.09.18 11:49:43<nilli[m]> POW is to insure the guard on the agreement . we can have endless bases for agreement .
08.09.18 11:50:29<nilli[m]> now with the technology to communicate complext context
08.09.18 11:50:56<nilli[m]> back then we could only agree on very few things at the speed of light
08.09.18 11:51:07<nilli[m]> like the position of the stars
08.09.18 11:52:20<nilli[m]> that was a truth we could all agree on once we agreed use it as the main coordinator
08.09.18 11:52:56<stoopkid> yes, but the problem is that that's *all* that people could use it to agree on
08.09.18 11:53:16<stoopkid> it's like having a universally shared clock but the only thing that people can agree on about it is what time it is now
08.09.18 11:53:38<stoopkid> (if even that)
08.09.18 11:53:54<nilli[m]> everything else is based on that
08.09.18 11:54:11<nilli[m]> after time comes accounting
08.09.18 11:54:34<stoopkid> ok but the problem is that there's no way for you to know whether i forged some particular timestamp or not
08.09.18 11:54:45<stoopkid> here's some data: "adslfasdlkfasd"
08.09.18 11:55:02<stoopkid> here's its timestamp: "August 5th, 2018, as measured by the stars"
08.09.18 11:55:36<stoopkid> can you prove/refute that i actually made this data on August 5th, 2018?
08.09.18 11:55:44<stoopkid> made/published?
08.09.18 11:56:05<nilli[m]> to agree on accounting you have to agree on time intervals so to close the balance block.
08.09.18 11:56:39<stoopkid> ok, let's say we agree on intervals
08.09.18 11:56:55<nilli[m]> ok
08.09.18 11:57:06<stoopkid> you still can't verify/refute that i made/published this data on August 5th, 2018
08.09.18 11:58:31<nilli[m]> ok the only problem that we are left with is the byzantine problem which satoshi solved
08.09.18 11:59:16<nilli[m]> which it the fundamental problem of information.
08.09.18 11:59:19<stoopkid> that was the only problem we maybe thought we had to begin with :P
08.09.18 11:59:32<stoopkid> at least for this particular thing
08.09.18 11:59:48<stoopkid> (which doesn't have much at all to do with the problem of measuring complexity of programs in MLTT)
08.09.18 12:00:31<stoopkid> and this isn't special to time either, same thing holds for measuring lengths
08.09.18 12:00:51<nilli[m]> the problem we where left with is that a code is based on context. even if mathematical context only in the shape of axiom.
08.09.18 12:00:54<stoopkid> a meter-stick has a defined starting point and a series of spatial intervals
08.09.18 12:01:39<stoopkid> hrm
08.09.18 12:01:50<nilli[m]> *even f mathematical context is an axiom
08.09.18 12:02:07<stoopkid> that's too vague for me to interpret
08.09.18 12:03:28<nilli[m]> lets think of units in terms of computers. a byte is a unite right?
08.09.18 12:03:50<stoopkid> maybe?
08.09.18 12:03:53<nilli[m]> what define that unit
08.09.18 12:03:54<stoopkid> if you define it to be?
08.09.18 12:04:10<stoopkid> why not a bit? you know that a byte is actually not necessarily 8 bits?
08.09.18 12:04:45<nilli[m]> right, so a bit is a better fundamental unit right
08.09.18 12:04:59<stoopkid> it almost always is 8 bits but by definition the size of a byte is chosen by the designer of the machine
08.09.18 12:05:14<nilli[m]> ' so first ,what is a bit then?
08.09.18 12:05:46<stoopkid> a bit is the fundamental unit of information, as per information theory
08.09.18 12:05:56<nilli[m]> we can then start standardizing it to a byte and other larger units.
08.09.18 12:06:42<nilli[m]> ok great. what we use to measure a bit?
08.09.18 12:06:56<nilli[m]> input? time?
08.09.18 12:07:10<stoopkid> arguably the only thing that actually measures bits is the human mind
08.09.18 12:07:19<stoopkid> (or other minds)
08.09.18 12:07:50<nilli[m]> how? by context?
08.09.18 12:09:20<stoopkid> idk what you mean by "by context", also i'm not sure if i even know how, or if i do i'm not sure i know how to describe it
08.09.18 12:10:40<stoopkid> you also might be asking a couple different things here
08.09.18 12:10:56<stoopkid> you might be asking: how do we read the value of some particular bit?
08.09.18 12:11:24<stoopkid> you might also be asking: how do we determine how many bits of information are contained in some problem / data / whatever
08.09.18 12:11:40<nilli[m]> A bit (short for binary digit) is the smallest unit of data in a computer. A bit has a single binary value, either 0 or 1
08.09.18 12:12:11<stoopkid> ^ even this is only an approximation of reality
08.09.18 12:12:55<nilli[m]> is that a definition you agree to start with , as an approximation
08.09.18 12:13:27<nilli[m]> we start with approximation that is the best class of assumptions.
08.09.18 12:13:41<nilli[m]> let go for it
                 <stoopkid> i would make a modification, and then yes: "A bit is the smallest unit of information."
08.09.18 12:14:34<nilli[m]> but the we have to deal with was is information. so 0 1 is a great start for us
08.09.18 12:15:06<nilli[m]> now we did not define 0 1 as anything but as being two different things
08.09.18 12:15:16<nilli[m]> that is all we need for now
08.09.18 12:15:23<stoopkid> "Information is any entity or form that provides the answer to a question of some kind or resolves uncertainty."
08.09.18 12:15:56<stoopkid> indeed, all we need is for them to be two separate things
08.09.18 12:16:20<stoopkid> one representing the answer "yes" to some yes/no question, the other representing the answer "no"
08.09.18 12:17:01<stoopkid> the fundamental idea being: all questions can be rephrased as a series of yes/no questions
08.09.18 12:18:35<nilli[m]> stoop I have to go get my girl and not sure I can come back to this conversation. but it is very very important in order to realize what autonomic root is all about
08.09.18 12:19:29<nilli[m]> the mistake of ether and all the others is that they try to make the root deal with all context not with the dependencies that the context is created on top.
08.09.18 12:19:50<stoopkid> np i actually have to go as well, but yea we'll go over this some more, information theory is one of the most important math/CS topics literally ever
08.09.18 12:20:06<nilli[m]> these unit dependencies are all that we need to configure. and they are different using the tech we now have
08.09.18 12:21:22<nilli[m]> ill also paste a few fun to watch resources regarding megalithic units. its mind blowing.
08.09.18 13:01:01<nilli[m]> https://twiggietruth.wordpress.com/2015/08/02/366-earth-megalithic-or-366-geometry/
08.09.18 13:04:55<nilli[m]> there is that theory of the megalithic yard that is super interesting to understand in terms of how units are formed. in thier book before the pyramids alan batler and Christopher knight  detailing the development of geometry and time units  very well
08.09.18 13:06:56<nilli[m]> .they wrote that quite a few years ago . in the recent years we have so much information regarding old civilizations. but not so much is explained regarding the tech and units they used. but all are aligned to the even day of the year.
08.09.18 13:07:48<nilli[m]> it is self explanatory in term of coordination between the different locations.
08.09.18 13:11:19<nilli[m]> also an interesting issue is that the "context" is built based on ratio of earth coordinates. in fact the language is understood in these terms. when realizing the the numbers as ratio it create a language that can communicate context.
08.09.18 13:15:21<nilli[m]> https://www.youtube.com/watch?v=lRPGqUdkLdw
08.09.18 13:15:44<nilli[m]> and many more by Graham hancock
08.09.18 13:38:52<nilli[m]> Its important that you will see it all in the light of defining units and language. I think there is a lot to learn from it.
08.09.18 13:40:10<nilli[m]> our technology makes us face the fundamental problems of  information limit
08.09.18 13:41:33<nilli[m]> in old civilization the gap to bridge seem to be a matter of physical distance
08.09.18 13:42:41<nilli[m]> but we now realize that in terms quantum  theory  and in light of information theory
08.09.18 13:43:55<nilli[m]> the limit is inherent to a plank size if one want to speak of sized  and for the uncertainty principal in terms of information
08.09.18 13:46:58<nilli[m]> "the generals" of Byzantine  area are the  photons and electrons of  quantum reality
08.09.18 13:47:39<nilli[m]> and the consensus mechanism is what we would have to count on in order to count. :)
08.09.18 13:52:42<nilli[m]> configuring the units as "truth" units based on basic transaction context may be a very interesting  direction all ready taken by satoshi. but not accomplished as of yet.
08.09.18 13:55:26<nilli[m]> its truth that need to be at the base of it all. and truth can pnly be achieved through a consensus mechanism built on the mechanism of logic itself.
08.09.18 13:57:40<nilli[m]> what are the logic components is what we need to define in a very rigaras  way . and that is why I like mltt and agda
08.09.18 13:57:51<nilli[m]> beyong that I dont know yet. :)
08.09.18 17:54:46<editable-dog>so, ive reworked the thing about two times to come to a point where it even appears to have some inner coherence
08.09.18 17:55:09<editable-dog>and now i dont see how it could work with bnodes unifying with consts and how it could work without
08.09.18 17:55:19<editable-dog>so..might think about it some more..but dunno
08.09.18 17:56:06<editable-dog>at the very least, something i can still do is to try reading that paper
08.09.18 17:57:26<editable-dog>if i let bnodes unify with consts, i get results that are like l0 first x, l0 rest nil. nil first y. nil rest l2...
08.09.18 17:58:19<editable-dog>i wonder if we have to solve this with conditions like ?l a list, but then i dont see how those wouldnt suffer the same problem
09.09.18 03:14:58*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rjyobvxelagdmivj) left #AutoNomic: Quit: Connection closed for inactivity
09.09.18 04:17:32<nilli[m]>  stoopkid : "A bit is the smallest unit of information."
09.09.18 04:18:43<nilli[m]> lets pick up here.  this demonstrate best what we are facing
09.09.18 04:19:36<nilli[m]> our unit is measured as information
09.09.18 04:21:34<nilli[m]> meaning it is measured by something that is not unified
09.09.18 04:27:45<nilli[m]> this should resemble some what the units of kilogram  represent since it is content dependent
09.09.18 04:28:00<nilli[m]> One litre of liquid water has a mass of almost exactly one kilogram
09.09.18 04:30:04<nilli[m]> the connections that was formed between a space unit such as a litre to a mass unit of content was a huge leap in terms of people being able to trade
09.09.18 04:32:37<nilli[m]> mathematical units are not enough when we deal with real world . it have to be related to an "experience " we all can share and agree on
09.09.18 04:33:30<nilli[m]> this become ever more complicated as we are reaching the limits of observation itself
09.09.18 04:35:16<nilli[m]> when dealing with information and events at near the maximum speed (speed of light) we are being dragged into that twilight zone of quantum reality
09.09.18 04:36:43<nilli[m]> and we need to design our game using the limitation poses by nature as we define in information theory .
09.09.18 04:42:04<nilli[m]> as  almost always  HMCf  was right again regarding POW having to be something we can measure
09.09.18 04:44:30<nilli[m]> in our last  discussion about it I was talking about making a tie between knowledge and mining.
09.09.18 04:46:16<nilli[m]> now I am realizing that this tie have been there all along in a much stronger way. it defines our units.
09.09.18 04:48:53<nilli[m]> POW are units of information that can serve us like kilograms did back then.
09.09.18 05:05:34<nilli[m]> I dont understand yet exactly the tech/math which makes pow  such a quantifying  unit . (runtime  solving a problem) but it is quite clear that we can use it for a base unit
09.09.18 05:12:51<nilli[m]> we can now go ahead and quantify true.  we actualy are doing it using the concept of confirmation on the blockchain.
09.09.18 05:14:40<nilli[m]> we can name "truth mass," and give our true a real value
09.09.18 05:15:46<nilli[m]> now we can start dealing with what we consider context .
09.09.18 05:17:58<nilli[m]> the tt and ff have a var attached to them. a number that can define the exact value of that truth .
09.09.18 05:19:54<nilli[m]> however there is still one main thing that we still have to resolve at the basic logic level. and that is the is the limit of information
09.09.18 05:23:10<nilli[m]> im not yet sure if that extra category of truth value (the j I was playing with in the  iz file  on agda) is really a must.
09.09.18 05:23:53<nilli[m]> but i suspect that it is (in some form or another, not at all sure I got the right one)
09.09.18 05:24:54<nilli[m]> definitely if we want to express truth on the quantum level
09.09.18 05:26:05<nilli[m]> and since information theory is at the quantum level It may meant that we need to incorporate it too. but im not sure how and if at the practical levlel.
09.09.18 05:27:29<nilli[m]> finally I do think that in  terms of "knowledge" as context it is these triples connections that would formulate truth value in terms of context
09.09.18 05:28:54<nilli[m]> have now clue how but it the number of connections and how deep in the knowledge base blockchain they are, which would quantify them
09.09.18 06:17:42<koo5[m]> Ok i think i see what the issue might be here, gotta change things again
09.09.18 12:54:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vubploacqsyjltju, stoopkid: stoopkid)
09.09.18 12:59:59<stoopkid> nilli[m]: tbh we probably shouldn't get into quantum theory much
09.09.18 13:01:58<stoopkid> mainly because there really isn't any need to do so unless we're talking about the construction of physical computers, and otherwise it's just gonna be some vague kind of metaphysics
09.09.18 13:03:05<stoopkid> our formal logics work regardless of the medium of expression yea?
09.09.18 13:07:45<stoopkid> also notice how blockchain requires no assumptions about the medium of expression it really manages to work entirely on the basis of assumptions in information theory & complexity theory
09.09.18 13:14:00<stoopkid> https://en.wikipedia.org/wiki/Quantum_logic
09.09.18 13:14:23<stoopkid> note how i could use this as a formal logic even if physics didn't actually behave that way
09.09.18 13:14:52<stoopkid> (just the same as how i could use classical logic even though physics seems to maybe not actually behave that way)
09.09.18 13:20:50<dmiles> this is a funny quote someone said in ##logic ...
09.09.18 13:20:53<dmiles> "If a 'religion' is defined to be a system of ideas that contains unprovable statements, then Gödel taught us that mathematics is not only a religion, it is the only religion that can prove itself to be one." - John Barrow
09.09.18 13:21:09<stoopkid> heh
09.09.18 13:21:20<stoopkid> heya dmiles
09.09.18 13:22:28<dmiles> hi hi
09.09.18 13:25:04*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
09.09.18 13:34:04*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
09.09.18 14:15:33*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Remote host closed the connection
09.09.18 15:20:01<editable-dog>hehe
09.09.18 17:02:47*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
09.09.18 17:11:12*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
09.09.18 19:34:13*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #AutoNomic: Ping timeout: 252 seconds
09.09.18 19:36:04*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
09.09.18 19:41:38*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #AutoNomic: Ping timeout: 240 seconds
09.09.18 20:46:36*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
09.09.18 20:51:08*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #AutoNomic: Ping timeout: 240 seconds
09.09.18 21:39:58*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
09.09.18 21:49:38*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #AutoNomic: Ping timeout: 240 seconds
10.09.18 05:10:48<nilli[m]> stoopkid:   I get into quantum theory when I try to show similarities . and there is nothing more metaphysical about it than any discussion about a representation of reality.
10.09.18 05:12:52<nilli[m]> the logic itself I agree is working regardless the medium of expression but  but the result of applying it is all about the medium of expression. thus that is a big issue. a starting point for any application of logic.
10.09.18 05:16:52<nilli[m]> if you will detail any concrete examples im sure that i can point you to a whole set of assumption that are taken for grunted .
10.09.18 05:19:39<nilli[m]> anyway my long comments where all about the need to establish new type of units and realize theses as such. that is a big step to take and I dont think you understood it well enough
10.09.18 05:22:36<nilli[m]> mathematics as is logic have to relate/create  the real world.  which ever that "real" is going to be defined by it. and for that we need to relate "1" or "is" to something we all car agree on
10.09.18 05:24:58<nilli[m]> since our socialization process as we are born start with just that, it is very hard for us too realize that we use it when we thing we deal with abstract manifestations.
10.09.18 05:27:19<nilli[m]> the reason that you run into such despair  when ever try to deal with fundamentals is that you realize that someone made it up and why should you believe them. you have to come with the conviction that you can make it up yourself and better so will convince others to use it.
10.09.18 05:27:28<nilli[m]> that is all there is to it
10.09.18 05:30:40<nilli[m]> I think that if we concentrate on being as concrete as can be at making up things that can work. we would do the right thing
10.09.18 05:32:02<nilli[m]> stoopkid, at this point I would ask you to read well the definition of kilogram and help us define a unit of knowledge based on bit.
10.09.18 05:32:45<nilli[m]> we need to brake "knowledge" to units so we can evaluate it in terms of size.
10.09.18 05:36:13<nilli[m]> Now to start with it , we first have to consider what I see as number one problem the boolian logic.
10.09.18 05:44:20<nilli[m]> the problem is  the dualistic nature of it , one being  the inverse of the other.
10.09.18 05:47:26<nilli[m]> actualy maybe the best thing for me to do is to try to prove that bool is inconsistent . that should be fun :) im sure that you can help me with that stoopkid :)
10.09.18 07:07:05<nilli[m]> well... taking that back for now. lets start with the definition of  1 knowledge unit. what would that be?
10.09.18 07:29:13<nilli[m]> so how about defining one unit of knowledge as one transaction
10.09.18 07:34:02<nilli[m]> the the value of that unit is  a function of confirmation  based on  POW /PCU/ BLOCK . meaning the difficulty per computing power per how deep is the block
10.09.18 07:36:22<nilli[m]> that "knowledge unit"  is very different then  bit as information unit. but is related to it.
10.09.18 09:16:00<koo5[m]> So..one more rework...i getting close...or to the end of my ropes
10.09.18 11:44:47<stoopkid> nilli[m]: i'm not really sure why we need to define these things, like "knowledge" etc..
10.09.18 11:45:49<stoopkid> the fact that you don't already have a communicable definition of it is like 99% of the evidence i need to demonstrate that we objectively don't need a definition..
10.09.18 12:05:25<stoopkid> nilli[m]: best to start with definitions that you already have a utility for and then figure out what word is defined by the definition rather than the other way around, otherwise we no basis to assume that finding a definition of the word even carries utility
10.09.18 12:06:18<stoopkid> you know how these things can drag out like... forever.. so we want to eliminate search-space as much as possible :)
10.09.18 12:12:55<nilli[m]> stoopkid: how about you start then. where we left off with your problem  "myFunction"
10.09.18 12:13:40<nilli[m]> and i would ask you to deal with what you presented there and decide how you define tt as a unifide term.
10.09.18 12:15:06<nilli[m]> and let me put it in the right framework for you
10.09.18 12:15:49<nilli[m]> 1. it is a problem that you encountered and did not let you keep going
10.09.18 12:17:20<nilli[m]> 2. a solution have  not been created yet
10.09.18 12:17:52<nilli[m]> 3. you realize that that it worth your time to try and come up with the solution
10.09.18 12:20:11<nilli[m]> if all these are true then we can work on it. if not it is indeed a waste of time for both of us.
10.09.18 12:23:11<nilli[m]> we did not come here to talk philosophy even if at times it become border line with philosophy.
10.09.18 12:25:48<nilli[m]> I would be perfectly fine talking only about what agda is making me deal with. and just learn from you.
10.09.18 13:44:50* HMCf is back to civilization now
10.09.18 13:45:18<HMCf> will catch up on scrollback today/tomorrow and write up some replies
10.09.18 13:46:16<editable-dog>hey
10.09.18 13:47:09<stoopkid> \o
10.09.18 13:47:15<stoopkid> nilli[m]: not sure what you're asking
10.09.18 13:47:54<stoopkid> i've really just been trying to figure out what "j" is :P
10.09.18 13:49:50<stoopkid> we've gotten quite far away from that, hence what i mean about eliminating search-space :)
10.09.18 15:42:50<nilli[m]> HMCf welcome back
10.09.18 15:51:18<nilli[m]> stoopkid:  I guess never mind for now. ...
10.09.18 15:55:46<stoopkid> nilli[m]: np, lets try the next thing then: you say that bool is "inconsistent", what do you mean by that exactly?
10.09.18 16:26:40<nilli[m]> stoopkid:  how would you deal with that     _~_ : 𝔹 → 𝔹 → 𝔹
10.09.18 16:29:16<nilli[m]> tt ~ tt = ff
10.09.18 16:31:39<stoopkid> what do you mean by "deal" with it? also this function is missing 3 cases
10.09.18 16:32:06<stoopkid> tt ~ ff = ?
10.09.18 16:32:10<stoopkid> ff ~ tt = ?
10.09.18 16:32:13<stoopkid> ff ~ ff = ?
10.09.18 16:34:35<nilli[m]> is that a valid statement?  what is iit missing?
10.09.18 16:35:29<stoopkid> it's missing the majority of its truth table
10.09.18 16:35:50<nilli[m]> I think its not showing on the irc
10.09.18 16:36:04<nilli[m]> tt ~ff = tt
10.09.18 16:36:10<nilli[m]> ff ~ tt = ff
10.09.18 16:36:21<nilli[m]> ff ~ ff = tt
10.09.18 16:37:23<nilli[m]> ok  now you can see it all
10.09.18 16:37:46<stoopkid> thanks
10.09.18 16:37:48<nilli[m]> so what is the meaning of that?
10.09.18 16:39:44<stoopkid> so let's define another function "not : 𝔹 → 𝔹"
10.09.18 16:39:47<stoopkid> not tt = ff
10.09.18 16:39:49<stoopkid> not ff = tt
10.09.18 16:40:16<stoopkid> so now i'll rewrite your function in terms of this one
10.09.18 16:40:25<stoopkid> x ~ y = not y
10.09.18 16:46:01<stoopkid> this is #5 in this table: https://en.wikipedia.org/wiki/Truth_table#Binary_operations
10.09.18 16:50:52<stoopkid> so, when you say that boolean logic is inconsistent, one interpretation might be that some truth table has at least one case that evaluates to both true and false
10.09.18 16:52:21<stoopkid> it's quite straightforward to demonstrate that this is not the case, particularly because the truth-tables are functions that take a collection of Bools and return *a single* Bool
10.09.18 16:53:46<stoopkid> (and they'll return *that same* Bool every time you use that truth table on the same arguments)
10.09.18 16:53:57<nilli[m]> I looked at 5 and the whole relation between p and q is reticulated when expressing not to either of them
10.09.18 16:55:21<stoopkid> not sure what you mean
10.09.18 16:55:47<nilli[m]>  its not matter what on q if not p and vice versa.
10.09.18 16:56:17<nilli[m]> but that is not expressed like it is in the function "or" for example
10.09.18 16:57:11<editable-dog>reticulated?:)
10.09.18 16:57:14<nilli[m]> we just igonr that fact that we say nothing about the relation between then like we do with all the other functions
10.09.18 16:58:02<nilli[m]>  operation I mean (not function)
10.09.18 16:59:07<nilli[m]> rediculass . not saying anything on it is absurd .
10.09.18 16:59:19<stoopkid> not sure what you mean
10.09.18 17:01:25<stoopkid> let's say you make two statements, first you say "A", and then you say "B"
10.09.18 17:01:34<nilli[m]>  there is a q when I talk about p but is  like not there
10.09.18 17:01:44<stoopkid> and then i say "the second statement you made is false"
10.09.18 17:02:06<stoopkid> then my statement will be true exactly when "B" is false and it doesn't matter about "A" right?
10.09.18 17:02:09<nilli[m]> if was there or not I can not tell thus  I can not say anything about it.
10.09.18 17:04:47<stoopkid> that's kind of the point
10.09.18 17:05:57<stoopkid> what about this one:
10.09.18 17:06:21<stoopkid> always-true : 𝔹 → 𝔹 → 𝔹
10.09.18 17:06:27<stoopkid> always-true x y = tt
10.09.18 17:06:34<stoopkid> always-false : 𝔹 → 𝔹 → 𝔹
10.09.18 17:06:37<stoopkid> always-false x y = ff
10.09.18 17:08:52<stoopkid> now, you might say that these kinds of statements are "weird", and.. i'd maybe agree, you certainly don't see them in standard language
10.09.18 17:10:48<stoopkid> so, what you're noticing is that you can make functions of some number of arguments that "don't care" about the value of some of the arguments, so it's like... why even have those arguments right? what kind of statement is this that just "ignores" some of the things its talking about?
10.09.18 17:11:11<stoopkid> although i did give a real-world example of where you might see the ~q thing
10.09.18 17:12:15<stoopkid> what you can notice in particular is that when you ignore some of the arguments, then your function is the same as a function on the number of arguments that *aren't* ignored
10.09.18 17:12:50<stoopkid> in the case of your _~_, the second argument is the one that isn't ignored, and your function is the same as "not the second argument"
10.09.18 17:13:45<stoopkid> so every occurrence of x ~ y could be replaced with ~y
10.09.18 17:14:17<stoopkid> every occurrence of always-true x y could be replaced with tt
10.09.18 17:15:07<stoopkid> so you could make a new description of the truth tables that only includes the truth-tables that don't ignore any of the arguments
10.09.18 17:16:55<stoopkid> could be interesting for getting better understanding of the structure of the truth-tables but wouldn't really change anything
10.09.18 17:17:25<stoopkid> because with just AND, OR and NOT you can simulate all truth-tables of any number of arguments, including the ones that ignore arguments
10.09.18 17:19:23<stoopkid> so, in order to demonstrate that boolean logic is inconsistent, you would have to describe an alternative way to find the truth-value of a boolean formula besides for evaluating the truth-table
10.09.18 17:19:55<nilli[m]> ok now we are getting to a better point for explanation  (after you did all the explaining I had a heard time expressing)
10.09.18 17:21:09<stoopkid> one way to get a truth-value for a boolean formula without evaluating the truth-table would be to assert that its truth-value is related in some kind of way to the truth-value of another boolean formula
10.09.18 17:21:39<stoopkid> so if A evaluates to tt, and B evaluates to ff, and you can assert that A and B should be equal, then you would demonstrate an inconsistenty
10.09.18 17:22:18<stoopkid> and in fact, there is an equality relation on formulas that's generally used in boolean logic
10.09.18 17:22:20<nilli[m]> so first of all for AND OR  XOR it is matter what each argument is
10.09.18 17:23:07<stoopkid> but there wouldn't be any way to derive an inconsistency from this equality relation because it's defined as extensional equality of the functions described by the truth-tables!
10.09.18 17:24:00<stoopkid> yes, also NAND, NOR, EQUALS, IMPLIES
10.09.18 17:28:13<nilli[m]> for OR only until  we got the two  options , so that is why its also not a strong argument (did not yet think of the others ) but lets deal with "not" for now
10.09.18 17:28:20<nilli[m]> and look at what we get with "not not"
10.09.18 17:35:32<nilli[m]> ~ tt ~ tt   =  ~  (~ tt)     is like    Bool ->  Bool -> Bool = Bool -> ( Bool -> Boo)
10.09.18 17:35:44<nilli[m]> I guess that is not making any sense to do
10.09.18 17:36:24<nilli[m]> but what is making sense then?
10.09.18 17:39:22<stoopkid> idk, you're the one claiming there's an inconsistency :)
10.09.18 17:39:30<nilli[m]> if function is pattern matching as you correctly say  I really have a problem with the pattern when we deal with "not" its breaking the pattern of transformation
10.09.18 17:41:09<editable-dog>~ tt ~ tt?
10.09.18 17:41:46<stoopkid> functions aren't pattern-matching, functions are associations of inputs to outputs, pattern-matching is just a way to talk about inputs
10.09.18 17:42:20<stoopkid> (at least when we're talking about haskell/agda pattern-matching)
10.09.18 17:58:45<nilli[m]> I guess that i will have to find another way to demonstrate the problem if the fact that one of the two argument have no effect,  is not enough to make that claim.
10.09.18 20:16:59<stoopkid> nilli[m]: completely tangential: something you might be interested to look at now that you're actually programming stuff
10.09.18 20:18:58<stoopkid> you know lambda calculus now (great job btw), i also had showed you SK combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus
10.09.18 20:19:47<stoopkid> and i had mentioned that these were equivalently expressive, i.e. any computation you can do with one you can do with the other
10.09.18 20:23:29<stoopkid> it's interesting to see how that actually works
10.09.18 20:24:51<stoopkid> so let's say you have a lambda expression L, it's gonna be of the form \a.\b.....\z.<expr> where <expr> is some combination of a ... z
10.09.18 20:25:30<stoopkid> like "a" or "ab(ac)" or "(zyx)(abc)" or etc..
10.09.18 20:26:35<stoopkid> so <expr> is basically like a template telling you where you're gonna put the arguments that you call L on
10.09.18 20:28:03<stoopkid> the S combinator is the same as the lambda expression "\x.\y.\z.xz(yz)" and the K combinator is the same as the lambda expression "\x.\y.x", so we know right away that lambda calculus does at least everything that SK combinators do
10.09.18 20:28:35<stoopkid> so then the question is: can we simulate every lambda calculus expression just with SK combinators ?
10.09.18 20:31:04<stoopkid> SK combinator expressions look like "SKSSS(SKSK(SK))" you know just a bunch of S's and K's with parentheses, and then you can use those lambda expressions in place of S and K and you have an equivalent lambda calculus expression
10.09.18 20:31:41<stoopkid> and then you can apply these expressions to some arguments, just like in lambda calculus, so like:
10.09.18 20:32:25<stoopkid> Kab = a
10.09.18 20:32:33<stoopkid> Sabc = ac(bc)
10.09.18 20:32:47<stoopkid> SKabc = Kb(ab)c = bc
10.09.18 20:35:52<stoopkid> so given some lambda calculus expression \a.\b....\z.<expr> , we want to find some SK combinator expression Q such that Qab..z = <expr>
10.09.18 20:37:37<stoopkid> the SK combinators in and of themselves aren't all that interesting in their own right but what is interesting is approaching this problem by thinking about "what is the structure of <expr>, relative to the labels a, b, ... z"
10.09.18 20:39:52<stoopkid> "\x.\y.x" <-- "y" does not appear in the output, so we know that we have to be able to *delete* arguments
10.09.18 20:40:19<stoopkid> "\x.\y.yx" <-- x and y are reversed, so we know that we would have to be able to *reverse* arguments
10.09.18 20:41:29<stoopkid> so if i gave you the lambda expression "\x.\y.xy", you could say right away that this by itself can't represent every lambda expression, because it can't delete anything and it can't reverse anything
10.09.18 20:43:05<stoopkid> "\x.\y.xxy" <-- x is repeated, note that neither of the other two lambda expressions *repeat* any of their arguments, thus we can say right away that they aren't capable of simulating this expression
10.09.18 20:43:55<stoopkid> more subtly, that last expression is actually "\x.y.(xx)y"
10.09.18 20:44:51<stoopkid> we can look at this combinator: "\x.\y.\z.xyz", this is the same "\x.\y.\z.(xy)z"
10.09.18 20:45:14<stoopkid> if we apply this to some arguments, like (\x.\y.\z.(xy)z)abc we get (ab)c
10.09.18 20:46:04<stoopkid> so how about "\x.\y.\z.x(yz)", this changes the parentheses, i.e. changes the way terms are grouped together
10.09.18 20:46:48<stoopkid> none of the other 3 combinators change the way the parentheses would appear, and so they can't simulate this 4th one
10.09.18 20:47:37<stoopkid> removing terms, rearranging terms, repeating terms, and regrouping terms
10.09.18 20:49:12<stoopkid> each of these operations are entirely independent of each other, and conveniently enough they're easy for people to grasp
10.09.18 20:53:22<stoopkid> so, let's take these operations to their fullest generality, so you have 4 single operations that do: 1) remove all the arguments you don't want, 2) repeat as many arguments as you like, as many times as you like, 3) rearrange the arguments into any order that you like, 4) regroup the arguments into any tree structure that you like
10.09.18 20:55:17<stoopkid> these are still fully independent operations (in the sense that none of the 4 operations can be simulated by any combination of the other 3), and from these we get an algorithmic description of how to go about simulating arbitrary lambda expressions
10.09.18 20:57:47<stoopkid> 1. remove all the arguments that don't appear in <expr>, 2. repeat each remaining argument as many times as it appears in <expr>, 3. rearrange these repeated arguments into the order they appear in <expr> and finally 4. regroup these arranged arguments into the parentheses structure used by <expr>
10.09.18 20:59:24<stoopkid> looking at the SK combinators we can see K = "\x.\y.x" <-- removes y
10.09.18 21:00:08<stoopkid> S = "\x.\y.\z.xz(yz)" <-- repeats z, rearranges y and z, and regroups the parentheses
11.09.18 02:44:59*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
11.09.18 02:53:44*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
11.09.18 05:06:02<nilli[m]> stoopkid:  thanks. I copy and paste it to work learn it .will take some time.
11.09.18 05:06:11<nilli[m]> thanks
11.09.18 05:09:22<nilli[m]> but i sill have to make one more "primitive " remark about the bool paradox discussion. it start even before the negation it start with the "is".
11.09.18 05:16:58<nilli[m]> if the "is" as defined properly we we would already see problem with the dualistice approach  for negation.
11.09.18 05:17:19<nilli[m]> the liar paradox is a result of that and it starts there
11.09.18 05:19:31<nilli[m]> eventually the paradox is resolved using excluded middle  but is  not a real fix.
11.09.18 05:21:01<nilli[m]> "this statement is false " is not a complete statement  .
11.09.18 05:30:51<nilli[m]> if we would apply the agda "rule" to it  we will get that : " Incomplete pattern matching . Missing cases: ...
11.09.18 05:33:56<nilli[m]> the statement should read as  a function of A -> bool  - > bool
11.09.18 05:34:10<nilli[m]> A is the statement
11.09.18 05:34:30<nilli[m]> thus we have a pattern of:
11.09.18 05:34:53<nilli[m]> tt is ff
11.09.18 05:35:02<nilli[m]> tt is tt
11.09.18 05:35:11<nilli[m]> ff is ff
11.09.18 05:35:26<nilli[m]> ff is tt
11.09.18 05:38:07<nilli[m]> and the right answer would be the first one.
11.09.18 05:38:52<nilli[m]> we would have no problem with it
11.09.18 05:39:58<nilli[m]> the problem start with our basic construction of bool in which we do not give all the options
11.09.18 05:50:14<nilli[m]> _is_
11.09.18 05:50:25<nilli[m]> would give that
11.09.18 05:50:48<nilli[m]> and there is not contradiction here
11.09.18 05:53:22<nilli[m]> it is just like any other rule  that take an argument return a bool and take that bool to return other bool
11.09.18 05:57:55<nilli[m]> the agda book explain && this way :
11.09.18 05:58:18<nilli[m]> This type says that _&&_ takes in a boolean (the first conjunct) and returns a function
11.09.18 05:58:19<nilli[m]> of type B → B. This function is waiting for a boolean (the second conjunct), and then
11.09.18 05:58:20<nilli[m]> it will return the “and” of those two booleans
11.09.18 06:00:14<nilli[m]> so we can now turn the is to a bool ->bool->bool
11.09.18 06:00:38<nilli[m]> tt is ff = ff
11.09.18 06:01:00<nilli[m]> tt is tt = tt
11.09.18 06:01:20<nilli[m]> ff is ff = tt
11.09.18 06:02:04<nilli[m]> ff is tt = tt
11.09.18 06:04:06<nilli[m]> anyway there are different ways to deal with it and be very explicit if we only define bool as a complete pattern.
11.09.18 06:04:16<nilli[m]> which we dont
11.09.18 06:05:36<nilli[m]> then when we would do it I believe that we will realize that we also can not inverse tt to ff.
11.09.18 06:08:03<nilli[m]> and that f"f is tt " is in fact a true statement..
11.09.18 06:09:06<nilli[m]> * ff is ff = ff
11.09.18 06:11:55<nilli[m]> ff is tt = tt
11.09.18 11:34:45<stoopkid> nilli[m]: your "_is_" is the same as "implies", #11 here: https://en.wikipedia.org/wiki/Truth_table#Binary_operations
11.09.18 13:14:48<HMCf> was all of this really just nilli reinventing ex falso quodbilet?
11.09.18 13:16:29<nilli[m]> stoopkid: I dont really see how it is the same. but even if they are than the fact that we have a contradiction show us that something wrong with what we constructed.
11.09.18 13:17:11<stoopkid> nilli[m]: they're the same truble
11.09.18 13:17:15<stoopkid> truth table*
11.09.18 13:17:25<stoopkid> damn touchpad
11.09.18 13:17:41<stoopkid> HMCf: seems possible
11.09.18 13:17:52<nilli[m]> hi HMCf.  It cant be only me that see the problem im sure others had some of the same issues :)
11.09.18 13:18:23<stoopkid> if HMCf is correct then you're certainly not alone in thinking there's some kind of problem here :)
11.09.18 13:18:47<nilli[m]> googling the term
11.09.18 13:43:38<nilli[m]> well , EFQ is looking to me more like a patch to deal with the issues that the inverse of p/ not-p is creating. which is one inconsistency created by that inverse and the equivalet between not and inverse.
11.09.18 13:45:32<nilli[m]> I havent yet been able to refine all the arguments but it is already clear for me that its a few issues , not only one
11.09.18 13:50:23<nilli[m]> let me try to count them.... and pleas be gentle l with me... I cant get it right at first shot.... and would be perfectly fine to be shown to be wrong if a come to agree with it.
11.09.18 13:50:51<stoopkid> https://en.wikipedia.org/wiki/Relevance_logic
11.09.18 13:53:09<stoopkid> https://en.wikipedia.org/wiki/Paradoxes_of_material_implication
11.09.18 13:58:13<stoopkid> ^ note that none of this makes anything inconsistent, you could only use these non-intuitive properties of classical logic to prove contradictions by already having contradictions available, but truth-tables simply can't make contradictions
11.09.18 14:02:05<stoopkid> https://en.wikipedia.org/wiki/Paradoxes_of_material_implication#Paradox_of_entailment
11.09.18 14:03:21<stoopkid> humans generally call this nonsensical but it doesn't really pose any problem for people using classical logic in practice, why?
11.09.18 14:06:40<stoopkid> main reason is: the nonsense is apparent in the proposition itself, you're asking a question that already contains a contradiction in it
11.09.18 14:07:07<stoopkid> here's a real-world example, let's say you tell me: "all natural numbers greater than 3 and less than 5 are even"
11.09.18 14:07:24<stoopkid> and i come back and say "what about the natural number 7? it's odd, ha!"
11.09.18 14:11:11<stoopkid> so this is like "forall n : Nat, (3 < n < 5) -> n is even"
11.09.18 14:12:32<stoopkid> and this is like [(3 < 0 < 5) -> (0 is even)] AND [(3 < 1 < 5) -> (1 is even)] AND [(3 < 2 < 5) -> 2 is even] AND ...
11.09.18 14:13:22<stoopkid> this statement should only be true, i.e. evaluate to tt, if *all* of these propositions are true
11.09.18 14:14:05<stoopkid> [(3 < 0 < 5) -> (0 is even)]
11.09.18 14:14:12<stoopkid> (3 < 0 < 5) = ff
11.09.18 14:14:17<stoopkid> (0 is even) = tt
11.09.18 14:14:30<stoopkid> so we need "ff -> tt = tt"
11.09.18 14:14:46<stoopkid> [(3 < 1 < 5) -> (1 is even)]
11.09.18 14:14:55<stoopkid> (3 < 1 < 5) = ff
11.09.18 14:15:02<stoopkid> (1 is even) = ff
11.09.18 14:15:09<stoopkid> so we need "ff -> ff = tt"
11.09.18 14:16:16<stoopkid> [(3 < 4 < 5) -> (4 is even)]
11.09.18 14:16:29<stoopkid> (3 < 4 < 5) = tt
11.09.18 14:16:34<stoopkid> (4 is even) = tt
11.09.18 14:16:40<stoopkid> so we need "tt -> tt = tt"
11.09.18 14:20:03<stoopkid> it's kind of ironic, relevance logic is kind of like a reaction to EFQ seemingly "introducing connections between irrelevant things", but when you look at what EFQ actually does in practice, it's actually *eliminating irrelevant things* that are introduced by the way we formulate the *language*
11.09.18 14:20:41<stoopkid> "forall n : Nat, (3 < n < 5) -> n is even"
11.09.18 14:21:03<stoopkid> a human looks at this and thinks "ok, the only number we're actually talking about here is 4"
11.09.18 14:22:00<stoopkid> but that's not exactly what the standard formal logic interpretations of this statement actually are
11.09.18 14:22:41<stoopkid> the way the language works, it's really saying *forall n : Nat*, i.e. we have to prove "(3 < n < 5) -> n is even", *for every natural number n*
11.09.18 14:23:36<stoopkid> and you'd say ofc "but wait, this statement 'doesnt apply' to any number except for 4"
11.09.18 14:24:04<stoopkid> and what do you mean exactly by that? you mean that the statement (3 < n < 5) is false for any number except for 4
11.09.18 14:24:47<stoopkid> for any number except for 4, the premises are contradictory
11.09.18 14:25:30<stoopkid> and you'd say, how can i get rid of all the cases that make the premises contradictory? and voila, that's what you have EFQ for
11.09.18 14:28:14<nilli[m]> I actualy have a question regarding imply
11.09.18 14:32:33<nilli[m]> do we define anywhere the relationship between A and B as  A be a true statement and only then it implies B ?
11.09.18 14:32:54<stoopkid> no
11.09.18 14:32:57<nilli[m]> that is other then  as the function if_ then _else _  which present both options  of A be tt or A be ff
11.09.18 14:33:33<stoopkid> not in classical logic
11.09.18 14:33:51<nilli[m]> that is the problem then with imply
11.09.18 14:34:20*** Quit: HMCf (~root@37.153.110.58) left #AutoNomic: Remote host closed the connection
11.09.18 14:35:02<nilli[m]> in terms of commonsense . but is resolved easy once used in logic formula
11.09.18 14:35:22<nilli[m]> should not be a contradiction there
11.09.18 14:35:44<stoopkid> right there's no contradiction, it's just unintuitive
11.09.18 14:35:55<stoopkid> here's my theory as to why it's unintuitive:
11.09.18 14:36:25<stoopkid> in formal logic, we have to work with a formal language, where we're building up descriptions from small pieces
11.09.18 14:37:23<nilli[m]> A imply B only set an order. but.....
11.09.18 14:37:45<stoopkid> so generally when we're describing some "space of things" characterized by certain constraints, our language effectively starts off by describing the full space, and then successively refining it to focus on only a subspace
11.09.18 14:38:02<stoopkid> like in my example "forall n : Nat, (3 < n < 5) -> n is even"
11.09.18 14:38:28<stoopkid> "forall n : Nat" is one of the "small chunks of language", and it's pointing out a "full space" to work with, in this case Nat
11.09.18 14:38:47<stoopkid> "(3 < n < 5)" then presents a constraint on what part of that space we're actually talking about
11.09.18 14:39:50<stoopkid> so now we're not talking about *all* Nats, we're only talking about 4
11.09.18 14:40:22<stoopkid> the way the language is presented basically makes it appear like a two-step operations: first all of the Nats are introduced, second all of the Nats except for 4 are eliminated
11.09.18 14:40:50<nilli[m]> hold on ... however when we use A as our assumption then it must be considered as true. until we find a contradiction
11.09.18 14:41:10<stoopkid> humans on the other hand, we think directly in terms of the result of all this, when we think about the question, we *only* think about 4
11.09.18 14:42:16<nilli[m]> if fact we do the right thing. we look for an answer that will agree with our assumption as being true
11.09.18 14:42:27<nilli[m]> if we can find it all is well
11.09.18 14:42:32<stoopkid> well
11.09.18 14:42:49<nilli[m]> if we can not then we have to consider our assumption as false
11.09.18 14:43:51<nilli[m]> which is fine
11.09.18 14:43:56<stoopkid> i would disagree with all of these statements XD
11.09.18 14:44:20<nilli[m]> only that its not telling us
11.09.18 14:45:56<nilli[m]> ...not telling us as much .... what are you disagreeing with?
11.09.18 14:46:49<stoopkid> "however when we use A as our assumption then it must be considered as true. until we find a contradiction"
11.09.18 14:47:01<stoopkid> "we look for an answer that will agree with our assumption as being true"
11.09.18 14:47:21<stoopkid> "if we can not [find it] then we have to consider our assumption as false"
11.09.18 14:48:54<stoopkid> well, "disagree" is maybe a strong word, i would disagree that these things must necessarily be the case
11.09.18 14:49:06<nilli[m]> brb
11.09.18 14:52:32<stoopkid> the 1st and 3rd statements might work for what i call jury/court-room logic
11.09.18 14:54:18*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
11.09.18 14:55:55<stoopkid> but the whole premise there is that the jury doesn't actually know the truth they're just being presented with evidence and testimony; they aren't able to deduce any truth except for logical contradictions and their judgement is not fact it's simply the best theory they could come up with to be consistent with the presented evidence
11.09.18 14:59:26<stoopkid> "however when we use A as our assumption then it must be considered as true" i'd say this one probably doesn't even hold up for jury logic
11.09.18 15:00:40<stoopkid> maybe TV logic, consider: "assume russia hacked the US elections, then russia is evil"
11.09.18 15:01:10<stoopkid> we used A as our assumption and defaulted to considering it true, so now our working hypothesis is that russia is evil
11.09.18 15:04:04<stoopkid> probably don't wanna just run on the assumption that assumptions should be considered true until proven otherwise
11.09.18 15:04:42<stoopkid> hence courtroom logic actually takes the complete opposite stance: allegations are considered *false* until proven otherwise
11.09.18 15:07:16<nilli[m]> I was looking at these statements (assumption of A as a true statement) from the Carry Howard correspondence and the concept of our proof tree .
11.09.18 15:07:48<stoopkid> ah wait i think i maybe misinterpreted you
11.09.18 15:07:51<nilli[m]> it holds for that
11.09.18 15:08:05<nilli[m]> and that is all that we care
11.09.18 15:09:34<stoopkid> you meant "using A as our assumption means assuming that A is true *within the scope of the assumption*"
11.09.18 15:12:43<nilli[m]> the first reason that made me like this logic was that we could "chain" everything to that first assumption thus if that first one is true then all is true.
11.09.18 15:13:34<nilli[m]> if it false then all our tower of truth is falling apart
11.09.18 15:15:07<nilli[m]> which is perfectly fine since no contradiction can be created  like that.
11.09.18 16:37:04<nilli[m]> I still need to list the problems i see as connecting to the inverse of true/false but after ill organize it better in my head , I start seeing more connections there.
11.09.18 16:37:31<nilli[m]> will do it over a fresh cup of caffeine tomorrow I hope
11.09.18 21:28:59*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
11.09.18 21:37:22*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
12.09.18 03:36:52<editable-dog>#— Existence of lists
                 <editable-dog>(?X).
12.09.18 03:36:55<editable-dog>{ ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }.
12.09.18 03:37:06<editable-dog>:this :a :thing. :that :a :thing2.
12.09.18 03:37:08<editable-dog>{ ?z :a :thing. ?l0 rdf:first ?y. ?l0 rdf:rest ?l1. ?l1 rdf:first ?z. ?l1 rdf:rest rdf:nil. ?y :a :thing2} => { ?l0 :a :potato }
12.09.18 03:37:23<editable-dog>query: ?l0 rdf:first ?banana. ?l0 rdf:rest ?l1. ?l1 rdf:first ?orange. ?l1 rdf:rest rdf:nil. ?l0  :a :potato.
12.09.18 03:38:15<editable-dog>so, whats happening is im getting lists like this: ##result: ?l0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> <file://pycharm#that>.?l0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>.<http://www.w3.org/1999/02/22-rdf-syntax-ns#nil> <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> ?orange.<http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>
                 <editable-dog><http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>.?l0 <file://pycharm#a> <file://pycharm#potato>.
12.09.18 03:38:38<editable-dog>i.e. joined by nils
12.09.18 03:40:03<editable-dog>HMCf, stoopkid 
12.09.18 04:03:09<editable-dog>{ ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }. doesnt matter, its a problem with the (?X).
12.09.18 04:15:13<editable-dog>https://github.com/koo5/univar/blob/master/pyin/pyin.py#L378
12.09.18 04:15:27<editable-dog>these are the unification rules
12.09.18 06:44:22<nilli[m]> hey there. so I tried to explain my problem with bool in the most mathematical way I could. for that I used the function of  if_then_else_. i
12.09.18 06:45:01<nilli[m]> * if_then_else_
12.09.18 06:46:12<nilli[m]> if I failed at doing that I would say that its not worth to spend more time on it
12.09.18 06:46:19<nilli[m]> https://pastebin.com/N7ZuAtfj
12.09.18 06:53:16<nilli[m]> pleas do not feel like you need to understand what is in my head. its my job to make it  clear using whatever tool  I think to know how to use .  this one is just another try.
12.09.18 06:59:45*** Quit: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
12.09.18 07:09:14*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
12.09.18 07:36:26*** Join: tigertigertiger (1f113353@gateway/web/freenode/ip.31.17.51.83, (unauthenticated): 31.17.51.83 - http://webchat.freenode.net)
12.09.18 07:36:54<tigertigertiger> any idea why the log is down?
12.09.18 07:37:01<tigertigertiger> or is not updating anymore
12.09.18 08:37:44<editable-dog>yea
12.09.18 08:37:49<editable-dog>we should update the topic
12.09.18 08:38:26<editable-dog>http://loworbit.now.im/logs/
12.09.18 08:38:30<editable-dog>use this 
12.09.18 08:39:44<editable-dog>i guess im outphasing the old logger server
12.09.18 09:21:55<tigertigertiger> thanks :)
12.09.18 09:22:02*** Quit: tigertigertiger (1f113353@gateway/web/freenode/ip.31.17.51.83) left #AutoNomic: Quit: Page closed
13.09.18 04:05:03<nilli[m]> I dont think anyone actualy looked at what I did yesterday and posted on pasetbin. its also might be too crude to understand what I was trying to convey  .
13.09.18 04:08:11<nilli[m]> but it made me realize two things: 1. to make a truly decentralized system we need to get rid of bool. 2. I can not do it ofc and dont think anyone else will be convinced enough to do it with me.
13.09.18 04:49:25<nilli[m]> HMCf you probably will not agree with me but.....
13.09.18 04:55:42<nilli[m]> if you  want to think like a machine you have to think in terms of  of a three value logic which is asymmetric and cant inverse
13.09.18 04:57:13<nilli[m]> cant inverse as a binary  system inverse.
13.09.18 05:00:24<nilli[m]> there is no such thing a "nonsense" in machine logic. "nonsense"  is a social term based on Boolean logic.
13.09.18 05:11:29<nilli[m]> I would go as extreme as to say that  any language which is founded on bool will result in a naive tau.
13.09.18 05:16:30<nilli[m]> If you agree then you need to help me write it. if you disagree then I am wasting everyone's time.
13.09.18 05:23:55<nilli[m]> * I dont think it will ever happened  but I  tried. (which is what a real machine will do to. :) )
13.09.18 10:13:29*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Read error: Connection reset by peer
13.09.18 10:24:19*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
13.09.18 10:53:38*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vubploacqsyjltju) left #AutoNomic: Quit: Connection closed for inactivity
13.09.18 13:14:03<editable-dog>rofl https://www.reddit.com/r/LegalMemes/comments/9fczy9/a_repost_but_still_legal/
13.09.18 16:46:35*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lqgrecblngwxmfxv, stoopkid: stoopkid)
13.09.18 17:32:24<editable-dog>yo
13.09.18 20:00:46*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 240 seconds
13.09.18 20:24:10*** Join: dmiles (~logicmoo@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
13.09.18 21:06:58*** Quit: dmiles (~logicmoo@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 246 seconds
14.09.18 01:33:45*** Join: na_ (d475bc71@gateway/web/freenode/ip.212.117.188.113, (unauthenticated): 212.117.188.113 - http://webchat.freenode.net)
14.09.18 01:41:16*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
14.09.18 01:44:46*** Quit: na_ (d475bc71@gateway/web/freenode/ip.212.117.188.113) left #AutoNomic: Ping timeout: 252 seconds
14.09.18 04:02:34<nilli[m]> editable-dog:  hey there I guess we are the only ones around... but I dont really understand what you do and you dont have a clue what I try to say. :)
14.09.18 04:06:08<nilli[m]> anyway as I said before im not sure it is the best forum for me to try to learn agda, mostly since I come up with these problems which halt me for days.
14.09.18 04:15:50<nilli[m]> On the other hand , it might be more relevant than anyone would imagine.
14.09.18 04:17:23<nilli[m]> but meanwhile what you do is the only relevant thing which unfortunately I am still not enough knowledgeable to understand and asses. :)
14.09.18 06:25:36<editable-dog>hey:)
14.09.18 06:28:08<editable-dog>i can tell you for sure that booleans are here to stay
14.09.18 06:29:04<editable-dog>but none of us has any problems with the idea that your tri-valued logic could be the basis of something useful
14.09.18 06:30:33<editable-dog>theres just no way that you'll manage to push it to us to be a basis of all our programs, that just doesnt make any sense
14.09.18 06:31:50<nilli[m]> I am not saying that bool is not useful Im saying that its limited and should not be the basis of autonomic.
14.09.18 06:34:11<nilli[m]> ofc I cant and will not push it on you. that is also part of the point here. I dont know enough to explain it or convinced anyone to find how to work around that.
14.09.18 06:36:02<editable-dog>as long as our computers are built of transistors, our basis will be a two-valued logic, but the idea with autonomic is that anyone can build anything in a subchain, and still get some useful functionality and some meaninngful interaction with the root 
14.09.18 06:39:20<editable-dog>you can also study https://www.tutorialspoint.com/fuzzy_logic/fuzzy_logic_approximate_reasoning.htm
14.09.18 06:39:43<editable-dog>take your time, come up with some use-cases for your logic
14.09.18 06:40:27<editable-dog>then we may very well agree that its a useful basis for something, who knows, maybe even really for an autonomic
14.09.18 06:40:47<editable-dog>it just takes time i guess
14.09.18 06:40:52<nilli[m]> The fact that our transistors are dual base 0,1 dont mean that the logic have to dual based too. in fact the opposite is what I believe to be  the right way to configure a base for a base language
14.09.18 06:43:08<editable-dog>alright
14.09.18 06:43:38<editable-dog>just dont call your idea autonomic, call it a trivalnomic or something, so you dont confuse the already confusing situation here
14.09.18 06:43:59<nilli[m]> yes will take time since just to put the finger on the right thing is very hard
14.09.18 06:46:25<nilli[m]> I agree regarding autonomic. autonomic is something specific in HMCf head. and for sure is boolean , and working as such. (according to his testimony)
14.09.18 06:50:00<editable-dog>ok
14.09.18 07:05:30<editable-dog>as on what i do, im still half-hoping that hmc or stoop will comment on the iissue that i wrote about, and im still thinking about it and trying different approaches
14.09.18 07:07:06<editable-dog>its possible to find a couple of pdfs on the topic of adding existential variables to datalog, and i think thats what corresponds to our situation, theres maybe also some code out there
14.09.18 07:07:52<editable-dog>the pdfs are, as usual, insanely dense
14.09.18 07:08:06<editable-dog>the code, as usual, doesnt work, probably
14.09.18 07:09:12<editable-dog>it seems to be "an area of active research", for some people somewhere, at least
14.09.18 07:10:02<editable-dog>maybe all i need is to see how this works in some more mainstream reasoners
14.09.18 07:11:10<editable-dog>at any case, judging by past cases, this doesnt seem like sometthing we can probably solve in a month
14.09.18 07:11:16<editable-dog>much less me alone
14.09.18 07:12:18<editable-dog>so im gonna be taking it easy, will try to study a bit here and there when i find the mental energy
14.09.18 07:13:23<editable-dog>but im kind of wrapping up
14.09.18 07:13:31<editable-dog>peeking at job offers
14.09.18 07:13:49<editable-dog>cleaninnng up my browsers accumulated tabs
14.09.18 07:14:31<editable-dog>thinking about other stuff like the language stuff we discussed with stoop
14.09.18 07:14:52<editable-dog>i want to spend a bit of time playing with nars maybe
14.09.18 07:17:57<editable-dog>if you google "all lists exist" rdf, you get about five hits, which all pretty much come ddown to timbl asserting thats its so
14.09.18 07:19:09<editable-dog>idk, his thinking maybe was coming from some deep backgrounnnnd of knowledge of reasoning that i still need to pick up on
14.09.18 07:19:39<editable-dog>or maybe he only managed to build a forward inferencer with thhhhhis approach and then gave up
14.09.18 07:28:22<editable-dog>if neither stoop nor hmc want to participate now, then im betting on you saving the rest of your tokens for a better time, and me wrapping up and only continuing to study things slowly, and trying to find a dayjob in a related field so that i can keep improving in this
14.09.18 07:29:20<editable-dog>but its more probably that ill end up in some mundane app development position again, there arent many semweb jobs offered around
14.09.18 09:27:28<nilli[m]>  editable-dog thanks for the rundown. :) yes I hope that stoop an HMC will take a look at what you did and that you will be able to utilize it somewhere eventually.
14.09.18 09:44:19<stoopkid> editable-dog: lists have magic that sem-web theorists apparently aren't able to communicate
14.09.18 09:47:49<stoopkid> tbh i really have no idea what to do with the inferencer, it doesn't make any sense to me
14.09.18 09:48:31<stoopkid> we could have just done regular skolemization and stopped
14.09.18 09:49:12<stoopkid> there would still be infloops in the inferencing, but if we restricted inferencing to type-checking then the inference rules for type-checking are already constructed such that they would terminate anyway...
14.09.18 09:49:17<stoopkid> hypothetically...
14.09.18 09:53:12<stoopkid> maybe HMCf will actually explain it one day
14.09.18 09:53:37<stoopkid> y'know, as in, "attempt to communicate"
14.09.18 09:54:35<stoopkid> rather than just throw jargon at us that's obscure even by the most obscurantist sem-web & formal logic standards and then go "XD" ";-)" when we don't have a PhD in the subject
14.09.18 09:56:54<stoopkid> in other fun news: RussiaGate is legitimately a hoax
14.09.18 09:57:18<dmiles> the right way to handle lists is to realize it is a bolted on hack for syntax and whatever existential thing you are considering to do with lists is inapropiate
14.09.18 09:57:53<dmiles> it is realistic to just put a CONS-like term
14.09.18 09:58:19<dmiles> but not to treat them like a blanknode
14.09.18 09:58:27<stoopkid> dmiles: unfortunately no deviation from HMCf 's exact intentions is realistic in this project :(
14.09.18 10:01:41<dmiles> i realize that I ever only am able to predict about 70% of own semi-complete designs
14.09.18 10:03:42<dmiles> when i was a teenager i got a job as prototyper for a team of mechanical engineers.. my job was to buld whateve rthey drafted.. they;d come in and totalyl blow their minds how some designs they spent moneths on made no physical sense
14.09.18 10:05:07<dmiles> and our job was to design surgical equipment :)
14.09.18 10:06:51<dmiles> saying that HMCf on his best day should be wrong at least 30% of the time
14.09.18 10:10:19<stoopkid> if HMCf's wrong about something that's fine, but this is more like a wild goose chase
14.09.18 10:18:05<dmiles> i've spent 17 years trying to solve the existential variable crisis for Prolog.. "adding existential variables to datalog"  i have several implementations out there
14.09.18 10:18:35<dmiles> regardless I am creating yet a new one !
14.09.18 10:18:45<stoopkid> i mean, the premise of the project starts off straightforward and sensible
14.09.18 10:19:07<stoopkid> but as soon as we get into any specifics its like the whole thing (seemingly deliberately) spirals into something like this: https://en.wikipedia.org/wiki/Cicada_3301
14.09.18 10:21:59<stoopkid> i say "seemingly deliberately" because i've literally never had a similar experience when talking with literally anybody else about literally any topic in logic/CS...
14.09.18 10:24:24<dmiles> ah, a year or two ago that didnt seem liek teh case it does now
14.09.18 10:25:49<stoopkid> a year or two ago i didn't even know about cicada 3301 and other deliberately convoluted internet puzzles in order to make the connection :)
14.09.18 10:26:26<dmiles> well back when i was botherign to argue like before last october
14.09.18 10:27:41<stoopkid> well, i can say this much: everything you explain makes sense to me so far
14.09.18 10:28:39<dmiles> good! i am really awefull at explaining things .. there are very few people that have the endurrance it requires
14.09.18 10:33:37<dmiles> i've seen you excersize that kind of patience with HMCf as well (the kind required.. and beyond) .. If somone is making the effort to actually understand something.. it is important to return that effort
14.09.18 10:37:07<stoopkid> dmiles: on a different topic, do you think the folks running those war game simulations are switching their model from middle-eastern religious terrorism back to good-old-fashioned US vs. Russia ?
14.09.18 10:38:25<dmiles> naw.. its still about ensuring there is no dangerous actors that will threaten us interests in teh middel east
14.09.18 10:39:27<dmiles> though it will be interesting how long it will take to build up an intel database that allows us to wargame with russia
14.09.18 10:42:06<dmiles> like right now the closest thing we have is monotoring russian armiments being tested in Siria
14.09.18 10:42:13<dmiles> Syria
14.09.18 10:47:01<stoopkid> hrm..
14.09.18 10:49:24<stoopkid> so would you assume the mccarthyist warmongering and the build-up of western allied troops & arms around Russia's western border is just for show / a distraction?
14.09.18 10:50:11<dmiles> hrrm i didnt even know that was going on
14.09.18 10:51:38<dmiles> i mean in the last 6 years
14.09.18 10:53:14<stoopkid> well, the troop build-up is hardly reported on, especially by mainstream outlets
14.09.18 10:53:56<stoopkid> otoh the mccarthyism is one of the only things being reported on by mainstream outlets..
14.09.18 10:55:07<stoopkid> old article but i'll try to dig up some of the more recent reporting on it: https://www.npr.org/sections/parallels/2016/11/30/503772040/near-the-russian-border-u-s-and-nato-beef-up-their-presence
                 <stoopkid> \
14.09.18 10:58:10<stoopkid> https://breakingdefense.com/2018/09/nato-russia-prep-biggest-war-games-since-cold-war/
14.09.18 11:00:17<stoopkid> obv extremely difficult to get any solid info on it because ofc they're not advertising everything they're up to
14.09.18 11:01:51<dmiles> well for at least 20-30 years one of the leading industrial products for the US was the patriot missle defense system
14.09.18 11:02:23<dmiles> the US is struggling to create another industry like that
14.09.18 11:03:34<stoopkid> hrm
14.09.18 11:03:44<stoopkid> well, good, i hope life is difficult for them and that they cry themselves to sleep at night in shame
14.09.18 11:03:45<dmiles> that is where a country lets us come in and set up an air defense allong with surface to ground defences.. these systems were what set the price of the US dollar
14.09.18 11:05:07<dmiles> how that worked was that places like Poland was compleelty ran on US equipmnet
14.09.18 11:05:19<stoopkid> interesting
14.09.18 11:06:29<dmiles> manned by at least 1 US officer per 4 Polish Officers ... the US never let any of these system out of their guard
14.09.18 11:07:03<dmiles> since if they had it would comprimise the securaity of teh syste the US set up all over europe
14.09.18 11:07:21<stoopkid> i understood the petro-dollar connection but it hadn't occurred to me that the same concept would work in the arms industry
14.09.18 11:07:41<stoopkid> compromise the security from whose perspective? :)
14.09.18 11:09:28<dmiles> the system is even used in the usa.. in fact on 911 there was a mishap with it
14.09.18 11:10:57<dmiles> hopefully what i am about to say is teh most consperitice thing i will ever say
14.09.18 11:11:55<dmiles> we are able to fly these systems arround on jets.. and every country regulary keeps at least one of these systems in the air ever so many 1000s of square miles
14.09.18 11:12:43<dmiles> this is "the 'patriot' first response system"
14.09.18 11:13:25<dmiles> for exmaple the USA has 3 jets in lying arorund alaska with what is nmormally a surface to air defense system
14.09.18 11:13:34<dmiles> lying/flying
14.09.18 11:14:23<dmiles> we used to have several of these jets convering all of europe
14.09.18 11:14:57<dmiles> but countries like germany no longer allow our system
14.09.18 11:15:54<dmiles> well the missles are programmed to attack only non friendly targets
14.09.18 11:16:16<dmiles> but on 911 we had to program one to actualy seek and destroy a friendly trasponder
14.09.18 11:16:35<dmiles> it so happens that the pentogon has 100s of firendly transponers :)
14.09.18 11:17:18<dmiles> oops
14.09.18 11:20:57<stoopkid> hrm... so are you suggesting that the pentagon accidentally bombed themselves with patriot missiles as opposed to being hit by flight 77? or both?
14.09.18 11:23:03<dmiles> one missle hit the traponder onj the plane and the other hit the pentagon trasnponder
14.09.18 11:24:14<dmiles> hit "a" pentagon transponder
14.09.18 11:28:29<stoopkid> plausible, do you have any references in particular that lead you to this conclusion?
14.09.18 11:33:04<dmiles> just people talking from a place i was contracting .. his wife worked for the airforce at the pentagon
14.09.18 11:33:18<dmiles> and pictures like this:  https://hips.hearstapps.com/pop.h-cdn.co/assets/cm/15/06/54cfc89463442_-_pentagon-hole-de.jpg?fill=160:243&resize=*:2934
14.09.18 11:38:50<dmiles> its a very popular theory though
14.09.18 11:39:31<dmiles> like https://consciouslifenews.com/911-prove-airplane-hit-pentagon-major-general-albert-stubblebine/1145271/#
14.09.18 11:39:58<dmiles> no one wants t talk about that flight where the highjackers supposedly overtook the highjackers (not flight 77)
14.09.18 11:40:33<dmiles> where passengers supposedly took over
14.09.18 11:40:44<dmiles> that was the plane i always assumed thatthe other missle hit
14.09.18 11:40:56<dmiles> who knowns we may have shot down two place
14.09.18 11:41:02<dmiles> who knowns we may have shot down two planes
14.09.18 11:47:51<dmiles> https://en.wikipedia.org/wiki/MIM-104_Patriot#Future_operators
14.09.18 11:48:18<dmiles> i guess that it is still popular
14.09.18 11:49:58<dmiles> if you scroll up from that ink you xN SEE CURRENT CUSTOMERS
14.09.18 11:50:36<dmiles> what that page doesn tmention is we dont let anyu of those countries ever have control of the system we sell them
14.09.18 11:54:41<dmiles> one guy i met told me how Nato countries were trying to steal codes so they could use the missles in case the US solders were assasinated
14.09.18 11:57:28<dmiles> his job was to go arround breifing the solders how to protect the systems from that knind of thing
14.09.18 11:59:04<dmiles> and they set up a system that even the us solders manning the systems didnt have the access to reprogam missles to defend alies from other alies
14.09.18 12:31:11<stoopkid> dmiles: wild stuff, the story gets weirder and weirder the more i dig into it
14.09.18 12:38:52<stoopkid> wrt RussiaGate, if you haven't been paying attention to all that yet it might be best to start here for some context: https://www.c-span.org/video/?c4719428/mueller-testifies-iraqs-wmds
14.09.18 13:28:04<koo5[m]> Either you allow both ?L and ?X to bind to random shit including nil, or you allow neither, or we have to come up with some new semantic like "first existential doesnt bind to random shit, second does"
14.09.18 13:29:30<koo5[m]> Otherwise (?X). makes you end up with lists joined by nils
14.09.18 13:30:04<koo5[m]> dmiles: does prolog have a crisis?
14.09.18 15:23:08<dmiles> oh .. actualy "Mueller testifies to Iraq's WMDs and references Gen. Powell's testimony." actualy points out a more nefarious and paranoid belif i have :P
14.09.18 15:25:14<dmiles> that the entire reason we entertained the idea of WMD's in Iraq is due to the 100s or so wargames i played and 1000s of wargames that everyone played where we preteneded Sadam had WMDs
14.09.18 15:26:07<dmiles> after the Gulf war all the data such as what was in CYC was playing out scenarios about Iraq and WMDs
14.09.18 15:26:51<stoopkid> wow
14.09.18 15:27:09<stoopkid> and you were working on that stuff back in like 99 right?
14.09.18 15:27:28<dmiles> it was liek we were teenagers that spent the last 10 years (me only 2 years) telling each oitehr spooky campfire stories
14.09.18 15:28:12<dmiles> no one really was supposed to belive any of it
14.09.18 15:30:10<dmiles> I/we concated a scenario .. here was one of the projects i was doing while i was billing for RDF study :)  https://pdfs.semanticscholar.org/b40f/f8742bd70bd516082ed94c278fe6a3b682d6.pdf
14.09.18 15:34:38<dmiles> i/we concocted a pretty good defense from iraq
14.09.18 15:35:29<stoopkid> so what did you think when the USIC started trying to sell the fabricated narrative from your wargames to the public?
14.09.18 15:36:03<dmiles> i was mezmerized into watching SCPAN going.. no fricken way.. i got to be nuts
14.09.18 15:36:08<dmiles> CSPAN
14.09.18 15:36:21<dmiles> or someone is nuts
14.09.18 15:36:39<dmiles> i cant be seeing what i think i am seeing
14.09.18 15:36:57<dmiles> i gotta have this wrong
14.09.18 15:37:31<stoopkid> heh, i can imagine.. wow so you knew it was BS from day 1? or were you more like "oh wow he actually did have WMDs, what a coincidence" lol
14.09.18 15:38:21<dmiles> well here was the strangest thing i didnt understand until more and more that we got into and various parts of the plan failed
14.09.18 15:38:37<dmiles> even when they failed we would move into the next stages
14.09.18 15:38:53<dmiles> turns out the plan was supposed to allow for lots of mistakes
14.09.18 15:39:45<stoopkid> up to and including the reason for being there, apparently :)
14.09.18 15:40:47<dmiles> example uzbekistan kicked us out to fhte couthnry ... in the game that was where the auirforce was going to be located
14.09.18 15:41:35<dmiles> in the game Iran and Iraq had made a pact agaisnt the USA
14.09.18 15:42:13<dmiles> called the IIC
14.09.18 15:42:51<dmiles> here was the game:  https://www.globalsecurity.org/military/library/report/2001/Reference.pdf
14.09.18 15:44:33<dmiles> oh that game report doesnt go into Uzbeickstan the way the ones i played did
14.09.18 15:44:54<dmiles> but that one was the main game i played out
14.09.18 15:46:19<dmiles> the pone exposed there
14.09.18 15:46:51<stoopkid> wow yep Ctrl+F for "WMD" and 2003 flashes before my eyes...
14.09.18 15:48:09<dmiles> yeah  we just made this shit up like a bunch of psyschics
14.09.18 15:48:26<stoopkid> i gotta hand it to you, you show me some of the craziest shit i've ever seen lol
14.09.18 15:50:06<stoopkid> i mean, we know in hindsight that it was all BS but this kind of demonstrates just how... "premeditated" it was
14.09.18 15:51:26<dmiles> the real "secret agenda" was to prevent europian countries from from cashing their iraqi oil for food coupons i was told in 2002 by the future VP pof cycorp
14.09.18 15:52:49<dmiles> that made total sense for me at the time
14.09.18 15:54:27<dmiles> this was even before general powel got up anjd did his little dance
14.09.18 15:55:02<dmiles> what was going on is the oil for food program (a sanction program) was made in such a way that effectiely Saddam as selling "future"s
14.09.18 15:55:33<dmiles> and in 2003 the program was supposed to end and he couil finnally cashed them for everyone
14.09.18 15:55:58<dmiles> and in 2003 the program was supposed to end and he couild finnally cash them
14.09.18 15:56:56<dmiles> him having the 2nd largest oid reserve would make our fake govt set up in S.A. vunernable
14.09.18 15:57:48<dmiles> not sure if this is well known or not .. but we deposed the rightfull King of all of Arabia
14.09.18 15:58:13<dmiles> whom has a throne in Yemmen
14.09.18 15:58:40<dmiles> all the terrorist attacks  (such as the USS Cole) and even 911 was revernge for this
14.09.18 15:59:40<stoopkid> not sure there's really such a thing as "rightful" king but i can say for sure that this is not really well known... i personally don't know anything about it :)
14.09.18 16:00:09<dmiles> i didnt know until a palestinian expert explained it to me
14.09.18 16:01:39<dmiles> it was never explained at all of the 1999 US training
14.09.18 16:02:29<dmiles> yeat i was tught about the "rightfull king" in July of 2001
14.09.18 16:03:03<dmiles> by a palastinian smuggler
14.09.18 16:05:17<stoopkid> who is/was "supposed" to be the king?
14.09.18 16:06:39<dmiles> so when cycorp future VP explained to me in May 2002 to me (about the oil for food program expirtation comming up ) it made sense how it wouild set off the crisis due to fear by the S.A.
14.09.18 16:13:26* dmiles is looking up whom tha tis supposed to be
14.09.18 16:22:14<stoopkid> btw, you wouldn't happen to have any wargames where they pretend that Russia manipulated the 2016 elections would you? XD
14.09.18 16:26:33<dmiles> https://en.wikipedia.org/wiki/Muhammad_al-Badr  I think his son whom lives in Englang
14.09.18 16:28:00<dmiles> god i am so dumb.. i remember.. but want to confirm
14.09.18 16:31:18<dmiles> this guy:  https://en.wikipedia.org/wiki/Hussein,_Crown_Prince_of_Jordan
14.09.18 16:31:32<dmiles> well his father
14.09.18 16:32:38<stoopkid> and you say "we" deposed him, as in the US?
14.09.18 16:38:37<editable-dog>so i wonder if the ?X in (?X) is supposed to be universal
14.09.18 16:40:59<stoopkid> afaict, RDFLog specs indicate that only one existential var is allowed to appear in a rule-head
14.09.18 16:41:04<stoopkid> that would have to be ?L
14.09.18 16:41:23<stoopkid> and ?X would have to be universal or else it couldn't bind with arbitrary things
14.09.18 16:42:32<dmiles> sorry, i think it is more that we promoted the saudi king rather than deposing the rightfull ruler
14.09.18 16:43:15<stoopkid> except i can only say that from the standpoint of understanding how lists should work, i don't know how you would choose which vars are universal and which are existential without this background intuition..
14.09.18 16:43:18<dmiles> and even now we allow the saudias to terrorize yemmen
14.09.18 16:44:01<stoopkid> dmiles: yea this i'm familiar with
14.09.18 16:44:03<dmiles> the ?X itself yes is universal :P)
14.09.18 16:45:12<dmiles> the ?X is unversal but depands on if in consequent.. then it becomes existential
14.09.18 16:45:46<stoopkid> if it's in the consequent but not in the antecedents, right?
14.09.18 16:46:12<dmiles> we probly need to see more context
14.09.18 16:46:30<stoopkid> hehe
14.09.18 16:46:36<stoopkid> there isn't any :D
14.09.18 16:46:53<editable-dog>lol
14.09.18 16:46:54<editable-dog>#— Existence of lists
                 <editable-dog>(?X).
                 <editable-dog>{ ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }.
                 <editable-dog>##— Uniqueness of lists
                 <editable-dog>#{ ?L1 rdf:first ?X; rdf:rest ?R. ?L1 rdf:first ?X; rdf:rest ?R. } => { ?L1 = ?L2 }.
                 <editable-dog>##— Uniqueness of the rdf:first and rdf:rest of a list
                 <editable-dog>#{ ?S rdf:first ?O1, ?O2 } => { ?O1 = ?O2 }.
                 <editable-dog>#{ ?S rdf:rest ?O1, ?O2 } => { ?O1 = ?O2 }
                 <editable-dog>##-N3Logic: A Logical Framework For the World Wide Web
14.09.18 16:47:37<dmiles> stoopkid though i was being contraian at first when i said that was BS
14.09.18 16:48:03<dmiles> the "Existence of lists"
14.09.18 16:48:36<dmiles> contrian sor tof the way HMCf is actualyl contraian
14.09.18 16:49:47<dmiles> contriran sort of the way HMCf that sometimes HMCf is contrarian in order to disarm
14.09.18 16:50:54<dmiles> TimBL wrote that with puns in mind.. and actaully probably to get peopel to comment on it
14.09.18 16:51:06<stoopkid> hehe, did i? i recall thinking more like "thank god somebody in the field agrees that this isn't making sense", but maybe i didn't reach that conclusion til later, my memory's fuzzy :)
14.09.18 16:52:19<dmiles>  (?X).  yes the X was meant to be universal.. such as in a Quary
14.09.18 16:53:01<stoopkid> tbl's puns must be too high-brow for me
14.09.18 16:54:33<dmiles> oh { ?L rdf:rest [ ] } does imply at least some element must exist
14.09.18 16:55:11<dmiles> but this is an implication of syntax.. not an implication of semantic existence
14.09.18 16:55:48<editable-dog>?
14.09.18 16:58:02<dmiles> a logic language can (and nearly always does) pick out a meaning that the antecedant has a meaningfull interpretation.. thne create a consequent that has to be interpreted with reasoning that is slightly differnt than what may have been used in the antecendant
14.09.18 16:59:02<dmiles> so in this case the  { ?L rdf:rest [ ] } would be vary unlikely to be anyhting semantic
14.09.18 16:59:34<dmiles> it is more digging into how somethining semantic ended up deplicted
14.09.18 17:00:15<dmiles> (implying here that RDF mission was to define rdf:List... it was rto define  foaf:knows
14.09.18 17:00:47<dmiles> (implying here that RDF mission was *not*  to define rdf:List... and then stop  it was rto define  foaf:knows)
14.09.18 17:01:19<dmiles> in CYC we avoided this mistake that can get peopel confused that we have   argQuotedIsa vs argISa
14.09.18 17:01:55<dmiles> so we woul dnot have   { ?L rdf:rest [ ] }   we'd have { ?L rdf:quotedRest [ ] }
14.09.18 17:02:08<editable-dog>i have no idea what youre saying
14.09.18 17:02:14* stoopkid is also lost
14.09.18 17:02:22<dmiles> to ensure that you knew that we were talking about syntax rules at that level
14.09.18 17:02:39<dmiles> rules of wellformadness
14.09.18 17:03:15<dmiles> i'll actualyl start from the begining of the concepts
14.09.18 17:04:14<dmiles> Lists are part of the RDF language and not part of what the language is used to talk about
14.09.18 17:04:55<dmiles> { ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }.    is a rule that is there because of the language
14.09.18 17:05:19<dmiles> its not there because it is some deep philospical rule that needs to be in all logics
14.09.18 17:05:54<dmiles> yet some RDF rules *are*  because it is some deep philospical rule that needs to be in all logics
14.09.18 17:09:50<dmiles> a rule like   {?x ?p ?y,  ?x a ?c .}  => { ?p domain ?xx, ?x a ?xx, ?p range ?xx, ?y a ?yy. }
14.09.18 17:10:01<dmiles> oops
14.09.18 17:10:13<dmiles> a rule like   {?x ?p ?y }  => { ?p domain ?xx, ?x a ?xx, ?p range ?xx, ?y a ?yy. }
14.09.18 17:11:06<dmiles> this rule brings semantics into RDF triples
14.09.18 17:11:43<dmiles> a rule like   {?x ?p ?y }  => { ?p domain ?xx;       ?x a ?xx;                         ?p range ?yy;     ?y a ?yy. }
14.09.18 17:12:15<dmiles> yet is slightly conflates things
14.09.18 17:12:39<dmiles> i realyl wanted to come uip with a saner exmaple.. ok i will
14.09.18 17:13:47<stoopkid> can you point to some RDF standards doc that indicates lists  as being part of the RDF language?
14.09.18 17:13:57<stoopkid> not here afaict: https://www.w3.org/TR/rdf-concepts/
14.09.18 17:14:37<dmiles> i am tryign to think of a rule that says someting like    rule like:   a ->b &  b->c    therefore a->c
14.09.18 17:15:29<dmiles> all of these in RDf dip their toes in sytax
14.09.18 17:15:38<dmiles> all of these in RDf dip their toes in syntax :(
14.09.18 17:17:14<dmiles> ok yes that makes a point RDF lists are not part of the language syteax.. yet they supposedly needed to be there
14.09.18 17:17:42<dmiles> so when they get added on ..  you need to make sure there are rules that make them even work at all
14.09.18 17:19:12<dmiles> so here this puts yuou in a conundrum of dealing with RDF when its talking about Lists and RDF when its talking about People and RDF when its talking about RDF
14.09.18 17:19:46<dmiles> and it does all three of those things all in one document
14.09.18 17:21:40<dmiles> so if i make an RDF document i have to do several things
14.09.18 17:22:12<stoopkid> i think i'm vaguely getting an idea of what you mean although i'm not yet able to realize anything really concrete from it
14.09.18 17:23:14<dmiles> I first write *in RDF* about the document such as what it includes where it comes from.. things liek the date i created it.. etc
14.09.18 17:24:16<dmiles> whoud PREFIX i guess fits outside of the language
14.09.18 17:25:13<dmiles> but i *do* defrine   my:NewPred1 a rdf:Property.
14.09.18 17:26:01<dmiles> now my:NewPred1  is legally something more special in the syntax
14.09.18 17:26:42<dmiles> my:NewPred1 is now allowed in 3 positions instead of 2
14.09.18 17:29:52<editable-dog>its always allowed
14.09.18 17:29:56<dmiles> next i might say things about the seamtics of my application or wrold in am in
14.09.18 17:30:44<dmiles> next i might say things about the semantics of my application or world
14.09.18 17:31:11<dmiles> if its "allowed" then it must be implied that it is a  rdf:Property.
14.09.18 17:32:17<dmiles> sort of like this rule   {?x ?p ?y }  => { ?p domain ?xx;       ?x a ?xx;                         ?p range ?yy;     ?y a ?yy. }
14.09.18 17:32:35<dmiles> what i mean is there are undocumented rules in RDF such as that Rule
14.09.18 17:33:47<dmiles> that rule actual right htere makes   {:foo :bar :baz}   :bar a rdf:Property the same way it made :foo whatever it made it
14.09.18 17:34:29<dmiles> since  that rule implied:     :bar  domain ?xx
14.09.18 17:34:48<dmiles> tha thte domain of a domain is a rdf:Property
14.09.18 17:35:52<dmiles> where i was going is these little things are probably only part of the how RDF is used.. and not how it is being used for semantic concepts
14.09.18 17:37:21<dmiles> for example if i was tryign to convery "joe loves sue only after she is dead" .. in some logical language.. I wont be creating Bnodes unless i am doing it in RDF
14.09.18 17:38:18<dmiles> so in that context i used the word syntax.. but  syntax is not the right world for that.. hrrm
14.09.18 17:39:53<dmiles> the word/concept i am looking for would be "refering to any constructs that are proprietarily part of RDF"
14.09.18 17:39:59<stoopkid> "what i mean is there are undocumented rules in RDF such as that Rule"
14.09.18 17:40:44<stoopkid> i'll keep trying to follow along your explanation but iirc we had reached similar conclusion already
14.09.18 17:41:06<dmiles> " RDF Schema "  *Rules*
14.09.18 17:41:27<stoopkid> ah
14.09.18 17:41:40<dmiles> documented:P  https://www.w3.org/TR/rdf-schema/
14.09.18 17:42:23<stoopkid> ok cool yea we're familiar that RDFS adds rules like this
14.09.18 17:42:52<stoopkid> i guess after years of working with this stuff you start conflating all the closely-related standards into just some "big pile of RDF stuff" eh?
14.09.18 17:43:51<dmiles> you can use  RDF-scheme has semantics that are supposed to jsut apply to RDf semantics
14.09.18 17:43:52<dmiles> oops
14.09.18 17:43:58<dmiles> you can use  RDF-scheme has semantics that are supposed to jsut apply to RDf-scheme
14.09.18 17:44:18<dmiles> you can use  RDF-schema has semantics that are supposed to jsut apply to RDf-schema
14.09.18 17:44:25<dmiles> damn sorry keyboard
14.09.18 17:44:34<dmiles> RDF-schema has semantics that are supposed to jsut apply to RDf-schema
14.09.18 17:45:27<dmiles> writing RDF-Schema rules *can* hack/change the rules of inference
14.09.18 17:46:41<dmiles> { ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }.      is a RDF-Scheme rule
14.09.18 17:48:01<dmiles>  https://www.w3.org/TR/rdf-schema/ explains the Schema Rules in English
14.09.18 17:48:48<dmiles> oh!?!   that document says  "{ ?L rdf:rest [ ] } => { [ ] rdf:first ?X; rdf:rest ?L }.  "  is false
14.09.18 17:48:52<stoopkid> https://www.w3.org/TR/rdf-schema/#ch_list
14.09.18 17:49:01<dmiles> well is not a required rule
14.09.18 17:49:10<dmiles> "NOTE
                 <dmiles> RDFS does not require that there be only one first element of a list-like structure, or even that a list-like structure have a first element.
14.09.18 17:49:11<dmiles> "
14.09.18 17:53:21<dmiles> editable-dog thing about i am allowed to say  {:foo :bar :baz} without the need to predefine  {:bar a rdf:Property} first is correct.. it is just that if i want it to be used in infenrce engine then i have to fit :bar into the schema
14.09.18 17:57:03<dmiles> RDF is not really standardized beyond what is in the data section of the  Schema
14.09.18 17:57:31<dmiles> since nothing else would ever matter
14.09.18 17:57:48<dmiles> someone would jsut use the schema ina  new and unpredciable way
14.09.18 17:58:44<dmiles> and prablalby less than 20 peopel ihn teh world have ever implemented the schema
14.09.18 17:59:04<dmiles> and none of us has ever bothered to do it in a complete way
14.09.18 18:00:08<dmiles> oops sort.. actualy Cycorp has
14.09.18 18:00:40<dmiles>  actually only Cycorp has implemented a complete RDF reasoner :)
14.09.18 18:00:57<dmiles> and its openmsource.. and they let me write the compiler it used
14.09.18 18:01:45<dmiles> https://sourceforge.net/p/larkc/code/HEAD/tree/trunk/
14.09.18 18:04:08<dmiles> this is because they got the RDF reasoning stuff worked out and working before RDF was standardized.. so they jsut waited to see what  98% of our code they'd strip away from the public
14.09.18 18:05:01<dmiles> the RDF-Schema being simple as compared to the CycL-Schema
14.09.18 18:06:09<dmiles> CycL-Schema bootstraps with 8000 rules .. RDF less than 80
14.09.18 18:07:09<dmiles> and those same rules were already part of CYC in the 80s
14.09.18 18:07:56<dmiles> so we had much more time to correct many silly and bad ideas that RDF has yet to discover
14.09.18 18:08:37<dmiles> why i constantly bitch that TimBL set the worlds technoilogy clock by 20+ years
14.09.18 18:08:54<dmiles> set it back at least that far into the past
14.09.18 18:10:57<dmiles> so the problems i think you guys face is that you have to even fix a couple posible design bugs
14.09.18 18:11:34<dmiles> or jsut things left out
14.09.18 18:12:32<dmiles> for isntance what i failed to say so simply  earlier:
14.09.18 18:12:43<dmiles>     when you are doing Schema-Based inferernce you have to separate that from Non-scheme Based inference
14.09.18 18:12:48<stoopkid> TimBL's documentation has certainly our project back quite a bit... :)
14.09.18 18:12:54<stoopkid> certainly set*
14.09.18 18:13:38<stoopkid> "so the problems i think you guys face is that you have to even fix a couple posible design bugs" quite possible, but this is being rather generous tbh
14.09.18 18:13:39<dmiles> so any existentials you schope in scheme.. you need to not scope in logic about your domain
14.09.18 18:13:59<stoopkid> we'd have to actually have  a design in order to have design bugs in it
14.09.18 18:14:48<stoopkid> koo and i are really just either following instructions from HMC or trying as best we can to extract some insight from sem-web / logic-programming docs
14.09.18 18:15:01<dmiles> so any existentials you scope as part of your Schema-Solver.. you need to not scope in logic about your Domain-Solver
14.09.18 18:16:32<editable-dog>im just winging it until it seems to be doing something sensible
14.09.18 18:17:13<dmiles>  existentials you scope to genrate the Schema-Based conjuctive normal form or datalog. often are pretty simplistic
14.09.18 18:18:11<stoopkid> so i sorta get what you mean that the knowledge in the kb is separated out into different... "domains" let's call it... but i'm having trouble imagining how inferencing is actually supposed to be adjusted to account for that
14.09.18 18:18:21<stoopkid> brb tho
14.09.18 18:18:30<editable-dog>me either
14.09.18 18:20:15<dmiles> here is your guys miniumum todo list:  https://docs.google.com/document/d/1VJkMjqcsRt8EeHneQbtuAuBb5Tpn1s7rtEFAqJxDqe0/edit
14.09.18 18:26:25<editable-dog>well, thanksfor trying dmiles ,i think ill go to bed
14.09.18 18:27:00<editable-dog>who knows, maybe i even finally got it right tonight
14.09.18 18:27:09<dmiles> i think you guys left off on step #3 ?
14.09.18 18:27:38<editable-dog>we never did forward chaining
14.09.18 18:28:15<editable-dog>and what do you mean forward chain facts?
14.09.18 18:28:19<dmiles> when i did this checlist 19 yearts ago i used backchaing that time
14.09.18 18:29:33<editable-dog>dunno about coinduction either, we have ep check
14.09.18 18:29:41<dmiles> oh facts are clauses that do not have further side effects
14.09.18 18:30:13<dmiles> whereas clauses that generally have side ffects are rules
14.09.18 18:30:55<editable-dog>ok, here we call rules without any antecedent facts
14.09.18 18:31:46<dmiles> yeah that fits.. that is the fwd/bwd distinction
14.09.18 18:32:41<dmiles> ep check = ?
14.09.18 18:33:27<editable-dog>checking if any rule ends up recursing with the same parameters
14.09.18 18:34:05<editable-dog>i mean, checking this at runtime
14.09.18 18:34:27<dmiles> tehre are soemtimes you need that rule to happen more than once though .. right? i mean sometimes you need iot to happen 4 times of 7 times?
14.09.18 18:34:58<dmiles> to happen 4 times or 7 times .. depending on the rule?
14.09.18 18:37:14<editable-dog>we havent settled on an answer.... i think hmc thinks its ok to cut it, i think the chase paper elaborates on what class of complexity or something this still allows, stoop?
14.09.18 18:38:37<dmiles> but yeah.. ep-check works in the case of #3 for quite a while
14.09.18 18:39:42<dmiles> cuting it works for a while
14.09.18 18:39:55<dmiles> i have some test that test to se if it was cut too soon
14.09.18 18:40:23<editable-dog>i'd be interested
14.09.18 18:41:09<editable-dog>i think i failed in trying to write one
14.09.18 18:41:42<dmiles> heere is my suite:  https://github.com/TeamSPoon/logicmoo_base/tree/master/t/inference_test
14.09.18 18:44:40<dmiles> with fwd thankfully soves the need for that
14.09.18 18:45:19<dmiles> the problemn though is when you need to be lazy about it
14.09.18 18:46:03<dmiles> all teh solutions i've tried over the years have/pros and cons.. tha tis why i needed to make sure i made tests
14.09.18 18:48:11<editable-dog>yeah, we have a couple too
14.09.18 18:48:19<dmiles> these test by the way are pre 9-11 :) like https://github.com/TeamSPoon/logicmoo_base/blob/master/t/inference_test/cyc/TQF234b.kif.tq
14.09.18 18:49:09<dmiles> oh https://github.com/TeamSPoon/logicmoo_base/blob/master/t/inference_test/cyc/TQ-Axioms.kif
14.09.18 18:49:38<dmiles> the ones you guess love :P:P
14.09.18 18:50:38<dmiles> all these are not only before 911 it was before we started creating the semantic web
14.09.18 18:50:47<editable-dog>:)
14.09.18 19:00:22<editable-dog>interesting
14.09.18 19:00:33<dmiles> many many more tests found in this repositpory https://github.com/gruninger/colore/tree/master/ontologies/most
14.09.18 19:00:56<dmiles> there are enough tests and axioms that cover all of mathematics
14.09.18 19:01:29<dmiles> (have to go one directory above that last link)
14.09.18 19:01:45<editable-dog>i see
14.09.18 19:03:48<editable-dog>is there a straightforward translation to n3logic?
14.09.18 19:05:56<dmiles> tomporal logics are too complex for n3logic represeations
14.09.18 19:06:27<dmiles> techically we could though
14.09.18 19:07:37<dmiles> i mean that is indirectly what i do with them
14.09.18 19:08:06<dmiles> when i translate from in logicmoo
14.09.18 19:08:27<dmiles> when i translate them into logicmoo's  6-datalog KBs
14.09.18 19:08:57<dmiles> that they become doable in RDF if you merge those 6 into one
14.09.18 19:09:28<editable-dog>6 of what?
14.09.18 19:09:42<dmiles> but often such representations become too slow.. so its better to keep them separated
14.09.18 19:10:04<dmiles> well i convert the implicatiosn into sometjing that porlog/datalog is able to do
14.09.18 19:10:34<dmiles> thru a process very simulator to what SAT solvers called unit projection
14.09.18 19:11:12<dmiles> in project them into 6 very simplistic datalog type things that call each into other
14.09.18 19:12:14<dmiles> for exmaple when datalog1 need to solve a anteceedant with negation it uses one of the other 5 datalogs to call into
14.09.18 19:13:20<dmiles> if one datalog3 needs an existential variable it calls datalog1 with an unversal variable
14.09.18 19:14:56<dmiles> 2 datalog KBs exist to create a visitor skelecton
14.09.18 19:17:11<dmiles> (Provable,Known,Possible)*(True,False)
14.09.18 19:20:14<dmiles> ProvablyFalse univerals become existential in KnownFalse and ProvabllytTrue
14.09.18 19:20:58<dmiles> well the trick used is that Box and Diamond can be used to invert quantification
14.09.18 19:21:12<dmiles> in the same way as Negation does
14.09.18 19:22:55<dmiles> oh *why* i had to do at least 4 datalogs was that a 2 is not enough to *enforce* modus Tollens
14.09.18 19:23:35<dmiles> 2 is enough to do at least Modus Tollens
14.09.18 19:24:28<dmiles> https://github.com/TeamSPoon/logicmoo_base/blob/master/t/inference_test/soundness/modus_tollens.logic.tq
14.09.18 19:26:33<dmiles> it was nice.. they hire a mathmetitican/logicion to write these tests for me :P
14.09.18 19:26:37<dmiles> hired
14.09.18 19:28:43<dmiles> here was a nice tricky test:  https://github.com/TeamSPoon/logicmoo_base/blob/master/t/inference_test/soundness/ei_soundness7.tq
14.09.18 19:30:28<dmiles> it tests that i can tell the differnce between unprovable and false
14.09.18 19:31:02<dmiles> in RDF that requires at least one set of assertions that are considered false
14.09.18 19:31:50<dmiles> RDF KB 1 everything is true.. RDF KB 2 everthings is false
14.09.18 19:33:06<dmiles> singlton consquequint vars in RDF KB 2 are what?  Existential or Universal?
14.09.18 19:34:04<dmiles> lets say Existiential .. to keep a ballnce
14.09.18 19:34:40<dmiles> but yet Modus tollones rules on universals are still universals
14.09.18 19:35:36<dmiles> and almost always consequent into a series of sigltons
14.09.18 19:36:02<dmiles> yet the original implication quantification was still correct
14.09.18 19:36:17<dmiles> this meant i needed  so i needed to have a  RDF KB that allowed negation to reslft in universals
14.09.18 19:36:46<dmiles> small exmaplew "if at least one man exists there is a god"
14.09.18 19:36:59<dmiles> "there is not god"
14.09.18 19:38:15<dmiles> this means now that "for all beings that exists none of them are a man"
14.09.18 19:38:34<dmiles> beild/things etc
14.09.18 19:39:15<dmiles> so i needed: RDF KB 3
14.09.18 19:39:25<dmiles> (though i call that one number 4)
14.09.18 19:39:54<dmiles> anyhow i've studied this even before i was good enough to get hired to create it
14.09.18 19:41:15<dmiles> this is the only sound system
14.09.18 19:41:40<dmiles> i mean i been googling anfd bitching about googing .. i think irc logs show me doing this in 1998
14.09.18 19:42:08<dmiles> bitching that no one has a system i could just pick up and use
14.09.18 19:45:19<dmiles> oh neat (i am nephrael here) http://swig.planetrdf.com/2001/08/13/2001-08-13.html
14.09.18 19:48:53<dmiles> not sure to find 1998 logs
14.09.18 19:49:28<dmiles> but my point is that it has then and still is very under researched
14.09.18 19:53:23<dmiles> oh neat me asking about Eulers loop detection  http://chatlogs.planetrdf.com/rdfig/2001-08-17.html#T02-38-24
14.09.18 19:55:10<dmiles> someine asked Koo's question:  http://chatlogs.planetrdf.com/rdfig/2001-06-24.html#T02-53-35





15.09.18 02:38:40<editable-dog>morning
15.09.18 05:07:38<nilli[m]> after this long long talk about global affairs in which we all are speculators I guess ranting about logic is not so bad even if may appear as complete nonsense
15.09.18 05:10:20<nilli[m]> so I am playing with what I have. which are the definitions that are already given for bool
15.09.18 05:10:52<nilli[m]> and I guess that what I need to do is show you a contradiction there
15.09.18 05:12:27<nilli[m]> in the definitions of refl . the logic slip is right there and is so fundamental which makes it so hard to define
15.09.18 05:16:52<nilli[m]> my current effort is to show somehow that if we imply that ~ tt = ff , and that  ~ ff = tt  , then we end up with ~ x = y and ~ y = x .
15.09.18 05:18:00<nilli[m]> when this is the result then we narrow all the vars to be 0,1 as well
15.09.18 05:24:54<nilli[m]> now one may ask what is the problem with a binary numeric system , in fact isn't that what the computer is all about?
15.09.18 05:29:47<nilli[m]> well the problem is that it would give us any input as either true or false the "meaning" x will always be tt and y will always be ff regardless of what x means
15.09.18 05:31:15<nilli[m]> this is so fundamental that I cant even begin to see how to  explain the huge problem here. fro now I just did a little thing on agda
15.09.18 05:31:44<nilli[m]> if_then_~_  : ∀{ℓ} {A : Set ℓ} → 𝔹 → A → A → A
15.09.18 05:32:26<nilli[m]> if tt then x ~ y = x
15.09.18 05:33:00<nilli[m]> if ff then x ~ y =  y
15.09.18 05:33:07<editable-dog>what is this (x ~ y) ?
15.09.18 05:34:15<nilli[m]> its it.  , not is an operation
15.09.18 05:34:41<nilli[m]> I put it there instead of else
15.09.18 05:34:57<editable-dog>what do you mean it would give us input? its really hard to even try to understand when your sentences dont have any commas also
15.09.18 05:35:36<editable-dog>ok i see
15.09.18 05:38:09<nilli[m]> I think that even when we do that which I will paste below we can start seeing the problem. but it may be less clear
15.09.18 05:40:22<nilli[m]> if_then_else_ :  𝔹 → 𝔹 → 𝔹 → 𝔹
15.09.18 05:40:39<nilli[m]> since we deal only with bool values
15.09.18 05:41:16<nilli[m]> but if we do any combination then its getting more interesting
15.09.18 05:41:30<nilli[m]> if_then_else7_ : ∀{ℓ} {A : Set ℓ} → 𝔹 → 𝔹 → A → 𝔹
15.09.18 05:49:34<nilli[m]> the more I look at that as three operation option in which I can plug any operation I think that the key to prove the problem of inverse  of true/false is more apparent
15.09.18 05:50:28<nilli[m]> but I sill dont know how to construct a prof to do anything with it  :)
15.09.18 05:51:40<nilli[m]> ok  time  for me to do more constructive things.




15.09.18 06:14:04<editable-dog>HMCf: you should check out the last version
15.09.18 09:51:49<editable-dog>stoopkid: so, making the ?X universal resolves the issue
15.09.18 09:52:09<editable-dog>bnodes wont be allowed to bind to consts




15.09.18 09:52:54<editable-dog>doh, with emacs you get so jaded you end up googling "emacs overwrite mode"
15.09.18 09:53:06<editable-dog>answer: press Ins
15.09.18 10:46:44<stoopkid> nilli[m]: most of what i was talking about wrt global affairs is no longer speculative
15.09.18 10:47:51<stoopkid> editable-dog: cool
15.09.18 14:42:19*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lqgrecblngwxmfxv) left #AutoNomic: Quit: Connection closed for inactivity
15.09.18 15:35:37*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gzdcpibnoluyccxw, stoopkid: stoopkid)
15.09.18 16:50:40<editable-dog>sup
15.09.18 17:08:40<editable-dog>making a new frontend, so that we can run tests with more complex syntaxes that my marpa parser doesnt handle
16.09.18 00:32:06<dmiles> editable-dog: lol
16.09.18 00:38:37<dmiles> (to  answer: press Insert Key)
16.09.18 09:40:43*** Join: weechat4 (~weechat@118-86-185-36.kakt.j-cnet.jp, (unauthenticated): weechat)
16.09.18 16:16:35<editable-dog> hi weechat4 
16.09.18 19:45:57<editable-dog>so, we pass our lists tests
16.09.18 19:46:05<editable-dog>except the countup/down stuff
16.09.18 19:48:00<editable-dog>im gonna play with this some more
16.09.18 19:58:18*** Quit: HMCf (~root@37.153.110.58) left #AutoNomic: Ping timeout: 240 seconds
16.09.18 19:58:25*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
16.09.18 20:15:36<editable-dog>and except a couple more...
17.09.18 02:56:25*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 250 seconds
17.09.18 03:19:40<nilli[m]> except /accept
17.09.18 03:29:56<nilli[m]> https://bitcointalk.org/index.php?topic=798131.msg9396280#msg9396280
17.09.18 03:32:43<nilli[m]> that  is how I met HMCf almost 4 years ago. on the mistake of except/accept.
17.09.18 03:36:33<nilli[m]> I was still "he" then :) and he juse met Ohad and was about to start tauchain. stoopkid and koo5 you have to go the the link and read it. you will love it.
17.09.18 03:39:24<nilli[m]> We might also reach the last days of autonomic as we know it. stoop is out, koo is about to go off do his things and I am just learning but already doing non-autonomic things
17.09.18 03:42:17<nilli[m]> HMCf , epic .
17.09.18 03:42:24*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
17.09.18 03:44:45<nilli[m]> ​fucken too much !!!
17.09.18 04:51:57<editable-dog>expansively excess MY wallets!
17.09.18 04:52:01<editable-dog>yea funny
17.09.18 06:36:20*** Quit: weechat4 (~weechat@118-86-185-36.kakt.j-cnet.jp) left #AutoNomic: Quit: WeeChat 2.1
17.09.18 06:59:02<editable-dog>well, now that ive figured this bit out, i am gonna keep playing with this some more
17.09.18 08:14:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gzdcpibnoluyccxw) left #AutoNomic: Quit: Connection closed for inactivity
17.09.18 10:55:30*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ggbecfzdpvjhetjb, stoopkid: stoopkid)
17.09.18 11:52:48*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca, (unauthenticated): deadhand)
17.09.18 13:17:49*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-106-135.dsl.bell.ca) left #AutoNomic: Ping timeout: 240 seconds
17.09.18 13:56:47* HMCf checks in, just for proof of life
17.09.18 13:56:56<HMCf> I've been kidnaped again, heh
17.09.18 13:57:22<HMCf> I started writing up catch-up replies
17.09.18 13:57:42<HMCf> then lost them to a flash filesytem corruption
17.09.18 13:58:00<HMCf> then didn't have time to address that before I got spirited away again
17.09.18 13:58:09<HMCf> then scrollback grew more
17.09.18 13:58:52<HMCf> ay least where I am this time has almost-useable lte service
17.09.18 13:59:06<HMCf> almost...
17.09.18 14:13:53<editable-dog>hey
17.09.18 14:14:10<editable-dog>you should check out pyin, i guess
17.09.18 15:33:08<editable-dog>https://www.bcex.ca/news/detail/?id=2141
17.09.18 16:04:08<editable-dog>ok, another bug..
17.09.18 17:46:00<editable-dog>fixed





18.09.18 05:54:08<nilli[m]> editable-dog: is that means that this thing you started with stoop is done?
18.09.18 06:10:45<editable-dog>well, its an open matter
18.09.18 06:10:55<editable-dog>im putting it through various tests
18.09.18 06:11:45<editable-dog>it seems to be working reasonably
18.09.18 06:15:17<nilli[m]> editable-dog: saying it works, then what is happening next? :)
18.09.18 06:18:17<editable-dog>more, and more complex tests, the direction of these im taking it is towards building parsers, which is what i wanna do regardless of tau, but it will be so much better if i can do both at once
18.09.18 06:18:28<editable-dog>hopefully some review from stoop and hmc and discussion of some details
18.09.18 06:19:15<editable-dog>possibly trying to get you involved by coming up with some real-world use-cases that you may be interested in
18.09.18 06:19:52<editable-dog>an irc bot would be nice, although it seems noone but me is gonna do it
18.09.18 06:21:31<editable-dog>i still have a ton of our own tests that dont pass for various reasons, its usually a matter of adjusting the expectations in those tests, and when ive worked through that, i should bring in tests from other reasoners and tinker with those
18.09.18 06:23:43<editable-dog>also, somebody should dig deeper into the theory of the complexities of various subsets of allowed programs and whatnot, that we've touched upon with chase etc, and come up with some definitive answers
18.09.18 06:24:30<editable-dog>and somebody should explain to me what this thing is even doing, because i still dont clearly see the correspondence of this to existential variables in logic
18.09.18 06:27:28<nilli[m]> editable-dog: I am a bit lost regarding what is it that you are building.  can you explain it again ?
18.09.18 06:33:22* editable-dog ponders
18.09.18 06:34:29<editable-dog>i think i should try to write this up with pictures and stuff
18.09.18 06:46:06<nilli[m]> meanwhile I find it harder and harder to maintain interest in learning anything regarding agda . I can't really see any point in making the effort.
18.09.18 06:50:34<stoopkid> editable-dog: i'll try to dig into it a bit, not sure if i'll be able to turn up anything conclusive, maybe i'll play with some chatbot stuff too at some point
18.09.18 06:52:22<stoopkid> nilli[m]: you also aren't really using it as intended yet
18.09.18 06:56:25<nilli[m]> stoopkid:  I have no clue what is  using it as intended . ...
18.09.18 06:59:39<stoopkid> actually constructing knowledge & proofs in MLTT logic as opposed to trying to prove Bool to be contradictory and/or constructing an alternative logic
18.09.18 07:03:43<nilli[m]> stoopkid:  probably not my strongest point.... cant go against my nature...:)
18.09.18 07:06:53<editable-dog>stoopkid: cool, also, if you just want to play with the existentials stuff in our tests... im gonna set it up on the vps soon-ish
18.09.18 07:07:33<editable-dog>nilli[m]: maybe take some rest and we can get you involved in the new stuff soon
18.09.18 07:12:25<nilli[m]> editable-dog:  good idea , I dont know what new staff you are talking about but its time to realize the end for me here.
18.09.18 07:12:45<stoopkid> nilli[m]: yea don't worry about it, i'm just saying you haven't gotten to the parts of MLTT that are even supposed to be interesting yet; it's a language, the interesting part isn't supposed to be the aspects of the language itself but rather actually speaking it and communicating thoughts/concepts in it
18.09.18 07:13:06<editable-dog>stoopkid: ill probably have some strong opinions on how the chatbot should be built, especially if it should be runing on my vps, but it would be nice to dig into it together. Also, i think youll like the new frontend ive build
18.09.18 07:13:08<editable-dog>built
18.09.18 07:14:52<stoopkid> nilli[m]: admittedly it's a pretty tough language to get accustomed to, especially since on top knowing the language itself you basically have to understand how to phrase concepts in terms of math
18.09.18 07:18:37<stoopkid> like, think back to the FOL model theory stuff we went over
18.09.18 07:19:23<stoopkid> you used the FOL statements to describe properties satisfied by some world/structure
18.09.18 07:20:34<stoopkid> that's how you describe things in MLTT too (we went over the translation from FOL into MLTT)




18.09.18 07:34:40<stoopkid> editable-dog: do you understand how it corresponds to existential vars in regular chase as opposed to parsimonious chase?
18.09.18 07:35:35<stoopkid> or alternatively how it would correspond to existential vars if we were using skolemization instead?
18.09.18 07:37:57<stoopkid> if you have an assertion that something exists, then the effect of this on reasoning is basically that when you ask for that thing, you can get it
18.09.18 07:38:15<stoopkid> i.e. a blank node corresponding to the thing asserted to exist
18.09.18 07:39:40<stoopkid> hence why when a rule succeeds and has an existential in the rule-head, the reasoner can essentially just make up a blank node to represent the thing that's asserted to exist by the success of the rule
18.09.18 07:43:14<stoopkid> in chase, you start with the facts, and then apply rules to find more facts
18.09.18 07:44:18<stoopkid> {?x a Nat} => {?x suc ?y. ?y a Nat}, this asserts that for every Nat there exists another Nat ?y which is the successor of ?x
18.09.18 07:44:48<stoopkid> so doing chase, we can keep generating new Nats, with blank nodes representing them
18.09.18 07:45:59<stoopkid> parsimonious chase... that basically cuts the chase short when it gets into a kind of loop
18.09.18 07:46:08<editable-dog>https://giphy.com/gifs/good-burger-i-know-some-of-these-words-zXA5VEmXr7OUg
18.09.18 07:50:05<stoopkid> it's all in that chase algorithm doc we looked at
18.09.18 07:53:50<editable-dog>what i dont understand is how our rules correspond to fol formulas
18.09.18 07:55:13<stoopkid> {?x a man} => {?x a mortal}
18.09.18 07:55:28<stoopkid> forall ?x , (?x a man) -> (?x a mortal)
18.09.18 07:56:31<stoopkid> and then somehow you figure out which ones are supposed to be existentials and what exactly you're supposed to do with them
18.09.18 08:04:18<editable-dog>ok, so
18.09.18 08:04:19<editable-dog>z a nat.
                 <editable-dog>?x a nat => ?x has_suc ?y. ?y a nat
                 <editable-dog>==
                 <editable-dog>z a nat.
                 <editable-dog>forall ?x , exists ?y , ?x a nat -> ?x has_suc ?y. ?y a nat
18.09.18 08:05:24<stoopkid> right
18.09.18 08:06:06<stoopkid> dmiles: ?
18.09.18 08:10:19<editable-dog>lets go back to forall ?x , (?x a man) -> (?x a mortal). If our yields from a rule correspond to proofs of the truthfullness or satisfiedness of the rule, shouldnt {?x a man} => {?x a mortal} yield with a "yea this is true, although there are no men?
18.09.18 08:12:45<editable-dog>since implication is defined as ((consequent true) or (antecedent false))
18.09.18 08:28:30<nilli[m]> editable-dog: stoopkid  OK guys it is really time for me to leave tau and autonomic and move on to what ever it is that will come next. was great to know you and learn from you.
18.09.18 08:29:07<editable-dog>oh?
18.09.18 08:32:12<editable-dog>we are only just beginning:)
18.09.18 13:14:43<HMCf> can someone give the new log link again plz?
18.09.18 13:18:59<editable-dog>http://loworbit.now.im/logs/
18.09.18 13:31:17<HMCf> thx





18.09.18 13:31:21<HMCf> Disclaimer:
18.09.18 13:31:47<HMCf> (because I was asked some questions because stoo's coments riled some people up)
18.09.18 13:31:50<HMCf> ...
18.09.18 13:32:09<HMCf> This project is not affiliated with cicada3301
18.09.18 13:32:30<HMCf> I have no personal involvement with Thomas S
18.09.18 13:32:47<HMCf> We do not accept funding from Thomas S (or anyone)
18.09.18 13:33:41<HMCf> I am not a member of Cicadam despite what they may claim (they like to claim members on a whim... they recebtly claimed Donald Trump, for example, which is ofc absurd)
18.09.18 13:34:05<HMCf> I did not attend any Cicada party at Defcon this year, and I was not at the fountain
18.09.18 13:34:37<HMCf> I do not know anything about "the boat" except that they are building it, and it is a boat
18.09.18 13:35:08<HMCf> Any involvement in our project by Cicada members is coincidental, and has no bearing on our efforts
18.09.18 13:35:32<HMCf> Any involvement by Cicada in idna/newtau is nothing to do with us and our project
18.09.18 13:37:16<HMCf> hrmm, I think that should just about cover it.
18.09.18 13:37:18<HMCf> :-\
18.09.18 13:37:38<stoopkid> hrm
18.09.18 13:38:18<stoopkid> sorry if my comments caused you any trouble
18.09.18 13:38:53<HMCf> np, just trolls being trolls mostly. :-|
18.09.18 13:39:58<stoopkid> would you like me to make a statement as to how i have no idea whom or what you may or may not be involved/affiliated with and that my comment was certainly not intending to actually connect you to any kind of flying insects in any kind of way?
18.09.18 13:40:22<HMCf> I think you just did? :-)
18.09.18 13:40:44<stoopkid> yea that should do the trick
18.09.18 13:41:40<HMCf> the notion that we are "secretly funded" is pretty laughable and qute ironic, imo
18.09.18 13:43:20<editable-dog>im secretly unfunded
18.09.18 13:43:33<HMCf> lol
18.09.18 13:45:01<HMCf> now i gtg climb a big tree. Back in a couple of hours, hopefully... and hopefully tonight i can look at pyin
18.09.18 13:45:29<HMCf> (hopefully I can shake this jetlag, too, heh)
18.09.18 13:46:49<editable-dog>good luck
18.09.18 20:16:50*** Join: smoothpeter8[m] (smoothpete@gateway/shell/matrix.org/x-xedtjbinwncbtbju, (unauthenticated): @smoothpeter8:matrix.org)
18.09.18 20:24:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ggbecfzdpvjhetjb) left #AutoNomic: Quit: Connection closed for inactivity
18.09.18 21:56:31*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-sohitqglgtorcqko, stoopkid: stoopkid)
19.09.18 05:53:06*** Part: nilli[m] (nillimatri@gateway/shell/matrix.org/x-zhpenxgkeizxiezo) left #AutoNomic: "User left"
20.09.18 01:27:25*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-slqikynembtwkmyu, (unauthenticated): @reedhhw:matrix.org)
20.09.18 13:33:39* editable-dog stares at the todo
20.09.18 13:33:44<editable-dog>why is it always so hard to begin
20.09.18 14:46:55-christel- :[Global Notice] More speakers have been added to the freenode #live 2019 line-up. Get your tickets at https://freenode.live now and join us in Bristol in November as we celebrate 20 years of supporting FOSS projects!
20.09.18 23:01:46<dmiles> not the TODO i made for you guys?
21.09.18 00:23:09*** Connecting...
21.09.18 00:23:40*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
21.09.18 00:23:45*** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 7 months 27 days 6 hours 12 minutes 59 seconds ago
                 *** Names: editable-dog reedhhw[m] stoopkid smoothpeter8[m] dmiles HMCf dadbod007[m] cantora Tamara_ lexx_[m] nikaala[m] genuinelyfx[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
21.09.18 05:46:20<editable-dog>dmiles: sorry, not that one
21.09.18 08:55:10-Fuchs- [Global Notice] More speakers have been added to the freenode #live 2018 line-up. Get your tickets at https://freenode.live now and join us in Bristol in November as we celebrate 20 years of supporting FOSS projects!
21.09.18 13:05:48*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-sohitqglgtorcqko) left #AutoNomic: Quit: Connection closed for inactivity
21.09.18 14:02:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xtefnkqpahgddytj, stoopkid: stoopkid)
21.09.18 17:24:22<editable-dog>sparql sucks
21.09.18 17:45:22<editable-dog>finally
21.09.18 18:48:20<dmiles> LarKC sparql serverr is much faster and does all of logic beyong RDF
21.09.18 18:49:18<dmiles> (LarKC is Cycorp's Sparql Server that i wrote the compiler for)
21.09.18 18:50:16<dmiles> https://sourceforge.net/projects/larkc/
21.09.18 18:52:00<dmiles> was one of those projects we used our Tech and faked that it was RDF
21.09.18 18:52:08<dmiles> (in order to get payed)
21.09.18 18:53:39<dmiles> ni9ce thing is that the higher order reasoning is not crippled
21.09.18 18:54:50<dmiles> (crippled by things like FOL and Henkin and all the stuff you guys think are secisray)
21.09.18 19:17:19<editable-dog>thanks, i should check it out sometime
22.09.18 00:08:53*** Connecting...
#AutoNomic> 22.09.18 05:41:21*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 7 months 28 days 11 hours 30 minutes 34 seconds ago
                 *** Names: editable-dog stoopkid reedhhw[m] @ChanServ koo5[m] genuinelyfx[m] nikaala[m] lexx_[m] Tamara_ cantora dadbod007[m] HMCf dmiles smoothpeter8[m]
                 *** End of /NAMES list.
22.09.18 07:21:50*** Connecting...
#AutoNomic> 22.09.18 16:59:02*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 7 months 28 days 22 hours 48 minutes 16 seconds ago
                 *** Names: editable-dog koom stoopkid reedhhw[m] smoothpeter8[m] dmiles HMCf dadbod007[m] cantora Tamara_ lexx_[m] nikaala[m] genuinelyfx[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
22.09.18 17:15:42*** Quit: koom (~sirdancea@89.24.57.233) left #AutoNomic: Ping timeout: 252 seconds
22.09.18 17:30:46*** Join: koom (~sirdancea@89.24.57.233, sirdancealot: koo5)
22.09.18 17:31:17*** Quit: koom (~sirdancea@89.24.57.233) left #AutoNomic: Read error: Connection reset by peer
23.09.18 02:18:41*** Join: redfish64 (~tim@45.32.52.10, redfish64: Unknown)
23.09.18 02:19:06*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Client Quit
23.09.18 02:21:57*** Join: redfish64 (~tim@45.32.52.10, redfish64: Unknown)
23.09.18 07:49:21<editable-dog>my attempt with sparql is awfully slow
23.09.18 07:49:32<editable-dog>i expected slow but not so awfully
23.09.18 07:49:52<editable-dog>i dont feel like doing anything now
23.09.18 12:35:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xtefnkqpahgddytj) left #AutoNomic: Quit: Connection closed for inactivity
23.09.18 14:09:45*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yfqrskqlwekckojy, stoopkid: stoopkid)
23.09.18 15:23:40*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
23.09.18 16:26:02<editable-dog>hey
23.09.18 16:58:28<discardedes> editable-dog: hello
23.09.18 17:00:37<editable-dog>hey
23.09.18 17:00:44<editable-dog>how goes
23.09.18 17:01:11<discardedes> good stuff
23.09.18 17:01:14<discardedes> you?
23.09.18 17:01:55<editable-dog>a bit of a grind but alright i guess
23.09.18 17:03:21<discardedes> came up with some new gardening systems
23.09.18 17:03:31<discardedes> food growing stuff
23.09.18 17:03:40<discardedes> unfortunately, the season is comming to an end
23.09.18 17:03:45<discardedes> so i think about next
23.09.18 17:04:11<editable-dog>nice
23.09.18 17:04:15<discardedes> :)
23.09.18 17:05:07<editable-dog>id love to try some sort of computerized micro-managed gardening at some point
23.09.18 17:05:31<discardedes> hmmmm...... my mind is blank
23.09.18 17:05:54<discardedes> im not sure how i would use the computer
23.09.18 17:06:16<discardedes> thats one of the things that makes it so stimulating, i think
23.09.18 17:06:21<discardedes> its so different
23.09.18 17:06:45<discardedes> the way you have to think about problems can be quite different
23.09.18 17:06:56<discardedes> one is working with the timing
23.09.18 17:07:13<discardedes> im used to, with computers, you want something, you work at it
23.09.18 17:07:32<discardedes> gardening is only like that when the components come together at the right time/season
23.09.18 17:08:34<discardedes> but you come up with an idea, you might have to wait eight months to begingimplementing it, and be planning years into the future
23.09.18 17:08:42<editable-dog>:)
23.09.18 17:09:04<editable-dog>like, farmbot is already a thing, but i bet theyre only at the very beginning with their software
23.09.18 17:09:45<discardedes> well.... one major issue that i want to understand and work with the natural systems
23.09.18 17:10:11<discardedes> and it takes time to gain an understanding of the basic critical elements in play
23.09.18 17:10:18<discardedes> and come up with techniques
23.09.18 17:10:30<editable-dog>like, yyou can literally keep the robbot running around picking snails off your cabbage instead of using chemicals, etc
23.09.18 17:10:36<discardedes> and to implement robotics atop that seems overwhelming
23.09.18 17:10:46<discardedes> ohhh....
23.09.18 17:11:01<discardedes> well... you can use natural systems to deal with the same problem
23.09.18 17:11:21<discardedes> for one thing, the more healthy the plants the harder it is for them to get attacked
23.09.18 17:11:49<discardedes> aerobic soil also promots more healthy plant
23.09.18 17:12:29<discardedes> for a specific problem, you might need implement a specific solution
23.09.18 17:12:48<discardedes> but there are really good general solutions that generally will work well
23.09.18 17:13:09<editable-dog>yeah thats all good, but in the end, robots are just more cool
23.09.18 17:13:23<discardedes> consider, the soil, the plants, the micro and non micro organisms are kind of like cybernetic robots
23.09.18 17:13:38<discardedes> so in a way, gardening could be thought of as much more advanced than programing
23.09.18 17:14:05<discardedes> then you have to work with climate, and weather
23.09.18 17:15:13<discardedes> there are soil ecosysems, and how to target particular ecosystems to certain types of plants
23.09.18 17:17:26<discardedes> permiculture, horticulture, gardening, .... etc
23.09.18 17:19:25<editable-dog>sure, thats all good
23.09.18 17:19:40<discardedes> i love it
23.09.18 17:19:41<discardedes> :)
23.09.18 17:20:10<discardedes> but its frusterating, the needing to wait so long to implement, and after implementing, needing to wait even longer
23.09.18 17:20:21<discardedes> where a plan might take two years or more to come into fruition
23.09.18 17:20:27<discardedes> that part is new to me
23.09.18 17:20:47<discardedes> and i have to not make the mistake of.... withis two years go by because im excited about it
23.09.18 17:21:23<discardedes> withis was *wishing*
23.09.18 17:21:35<discardedes> have to idea how i got *withis*
23.09.18 17:21:39<discardedes> XD
23.09.18 17:25:22<discardedes> something i have been considening, wich is similar, is system tools editable-dog
23.09.18 17:25:51<discardedes> so, I come up with a system, can i come up with tools that implement that system more efficiently
23.09.18 17:26:22<discardedes> this is quite tricky, because its not easy to get something mechanical to do all kinds of jobs
23.09.18 17:27:11<discardedes> for now, im all manual
23.09.18 17:27:21<discardedes> but i have been thinking about weird tools
23.09.18 17:27:48<discardedes> the kind of things that, if you where to see them with no context, would look like odd sci-fi equipment
23.09.18 17:28:04<discardedes> from THERE, i could imagine implementing robotics
23.09.18 17:28:17<discardedes> robots which use the tools designed to implement the system
23.09.18 17:28:27<discardedes> but that i WAY far off in the future
23.09.18 17:29:07<discardedes> meaning, i love it, would love to work on it, moving in that direction, but not even sure where i would be able to work on such a thing
23.09.18 17:29:22<discardedes> if everything when CHERRY, its probably a ten year lag
23.09.18 17:29:37<discardedes> so..... im not obsessing much about it
23.09.18 17:42:01<editable-dog>where are you from?
23.09.18 17:46:34<discardedes>  pensy
23.09.18 17:46:40<discardedes> im on the east coast
23.09.18 17:46:49<discardedes> not to far from stoopkid
23.09.18 17:47:26<editable-dog>nice
23.09.18 17:47:41<discardedes> you?
23.09.18 17:47:51<editable-dog>europe
23.09.18 17:47:58<discardedes> which country?
23.09.18 17:48:03<editable-dog>czech rep
23.09.18 17:48:08<discardedes> cool
23.09.18 17:48:21<discardedes> what do you think about the EU?
23.09.18 17:48:47<discardedes> strong opinions?
23.09.18 17:48:56<editable-dog>well, lol...
23.09.18 17:49:04<discardedes> :D
23.09.18 17:50:09<editable-dog>i guess you americans dont get the "this site uses cookies" popups on every page you visit?
23.09.18 17:50:52<discardedes> hmmmm..... i dont know
23.09.18 17:51:07<discardedes> the internets are mostly sucking more and more of late
23.09.18 17:51:11<discardedes> unfortunately
23.09.18 17:51:18<discardedes> becoming more and more corporate
23.09.18 17:51:22<editable-dog>been for a while lol
23.09.18 17:51:41<discardedes> popups, weird page loading, advertisemets
23.09.18 17:52:18<discardedes> its often painful to use a non-text based browser
23.09.18 17:52:41<discardedes> too much time, loading, loading, loading, popup, moving add, loading loading loading
23.09.18 17:52:49<discardedes> why is my computer working so slow
23.09.18 17:52:56<discardedes> wepage is loading, loading, loading,
23.09.18 17:53:00<discardedes> wtf is it doing?
23.09.18 17:53:03<discardedes> loading loading
23.09.18 17:53:04<discardedes> ...
23.09.18 17:53:15<editable-dog>:)
23.09.18 17:53:29<discardedes> :)
23.09.18 18:10:23<editable-dog>i think im gonna crash
23.09.18 18:10:37<editable-dog>see you around
                 <discardedes> goodnight
23.09.18 18:10:45<discardedes> same
23.09.18 18:10:49<discardedes> peace
23.09.18 18:10:50<discardedes> :)
23.09.18 22:52:53*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
25.09.18 06:02:48*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 245 seconds
25.09.18 06:16:54*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
25.09.18 15:03:39*** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-fvcugypuiqprtilt, (unauthenticated): @nemesis1:matrix.org)
25.09.18 19:49:04*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yfqrskqlwekckojy) left #AutoNomic: Quit: Connection closed for inactivity
27.09.18 05:03:17-christel- [Global Notice] Hello freenodians, the freenode #live conference is just over a month away! Head over to https://freenode.live to register for this year's event and come listen to speakers including Doc Searls, VM Brasseur, Chris Lamb, Kyle Rankin, Simon Phipps, Leslie Hawthorn and many others!
27.09.18 12:09:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gfcyqkzvnwytwgfl, stoopkid: stoopkid)
27.09.18 17:48:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gfcyqkzvnwytwgfl) left #AutoNomic: Quit: Connection closed for inactivity
27.09.18 18:01:27*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cevefydvarkarubo, stoopkid: stoopkid)
27.09.18 20:09:18*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Remote host closed the connection
27.09.18 20:18:16*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
28.09.18 18:05:33*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 272 seconds
28.09.18 18:10:41*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
29.09.18 02:46:58*** Nick regain: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) is now known as dmiles
29.09.18 06:52:22*** Connecting...
29.09.18 06:52:52*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 5 days 12 hours 42 minutes 5 seconds ago
                 *** Names: ditable-doge dmiles stoopkid nemesis1[m] redfish64 reedhhw[m] smoothpeter8[m] HMCf dadbod007[m] cantora Tamara_ lexx_[m] nikaala[m] genuinelyfx[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
29.09.18 06:53:28*** Nick change: You are now known as editable-dog
29.09.18 06:55:29*** Join: redfish65 (~tim@45.32.52.10, (unauthenticated): Unknown)
29.09.18 06:58:37*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Ping timeout: 240 seconds
29.09.18 21:05:02*** Join: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca, (unauthenticated): deadhand)
30.09.18 01:42:47*** Nick regain: redfish65 (~tim@45.32.52.10) is now known as redfish64
30.09.18 15:52:55<editable-dog>still tweaking the visualization script...
01.10.18 05:23:21*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-zhpenxgkeizxiezo, (unauthenticated): @nilli:matrix.org)
01.10.18 05:42:47<editable-dog>wb nilli
01.10.18 05:50:59<nilli[m]> not  really back on autonomic only to converse on issues I encounter :)
01.10.18 05:58:24<nilli[m]> editable-dog:  what do you know about the law below as a resolution to the lair paradox
01.10.18 06:01:52<nilli[m]> for all A there exist at least one A that this statement will not hold for.
01.10.18 06:04:34<nilli[m]> stoopkid any thoughts?
01.10.18 06:06:53<nilli[m]> *liar paradox (cant ever spell liar right)
01.10.18 06:08:09<editable-dog>what law below?
01.10.18 06:21:44<nilli[m]> for all A there exist at least one A that this statement will not hold for.
01.10.18 06:22:43<editable-dog>idk, isnt this a paradox in itself?
01.10.18 06:27:25<nilli[m]> why a paradox?
01.10.18 06:28:15<editable-dog>well, the statement references itself
01.10.18 06:28:55<editable-dog>and says that it holds for all A and doesnt hold for one of them, at the same time
01.10.18 06:34:03<nilli[m]> if your A statement is  true then there is always a statement that will not be true and this statement is true too. if your A Statement is false then the entire statement  itself is true . and as such is holding
01.10.18 06:37:37<editable-dog>idk, i kinda like regular sex more than brain fucking
01.10.18 06:42:32<nilli[m]> LOL brain fuck is really fun  , ( almost like good sex if you get it right ,but  without the problems created by sex)
01.10.18 06:48:36<editable-dog>so what are you up to now?
01.10.18 07:02:47<nilli[m]> well the first thing that came to my mind was that maybe it is  time for sex...   but then. I realized that I still had a few mindfuck  problems to resolve
01.10.18 07:05:12<nilli[m]> the first of them is not understanding how the liar paradox is a paradox . since is not and never was in my mind
01.10.18 07:09:35<editable-dog>im like...my brain fails to interpret it
01.10.18 07:10:06<editable-dog>which is also what i think any reasonable automated system should
01.10.18 07:10:59<editable-dog>we humans cant assign a meaning to it
01.10.18 07:11:25<editable-dog>we can talk about it, but we cant use it
01.10.18 07:13:46<nilli[m]> we as human assign an order to our actions thus its not a paradox
01.10.18 07:16:04<editable-dog>yeah, or we interpret it step by step
01.10.18 07:17:17<nilli[m]> the only problem with our machines maybe is that we don't make them do the same
01.10.18 07:17:43<nilli[m]> we base it on math
01.10.18 07:18:04<nilli[m]> but its a fiction
01.10.18 07:18:08<nilli[m]> math is
01.10.18 07:21:19<nilli[m]> but what I dont understand is that lambda calculus organize everything in an order that matters . and a turing machine is  lambda calculus, so how come order dont matter
01.10.18 07:23:35<nilli[m]> im sure im making a big mess  , my brain is now like a tossed salad
01.10.18 07:28:07<editable-dog>order doesnt matter in a turing machine?
01.10.18 07:36:26<nilli[m]> should matter if is lambda calculus but then there should not be any paradox ever, but also no new rules can be allowed ever.
01.10.18 07:36:44<nilli[m]> anyway im talking total nonsense now
01.10.18 07:37:11<nilli[m]> nothing make sense to me anymore
01.10.18 08:08:00<editable-dog>well, lc is defined by step-by-step evaluation
01.10.18 08:08:31<editable-dog>so there is no space there to express a paradox
01.10.18 08:24:51<stoopkid> https://en.wikipedia.org/wiki/Curry's_paradox#Lambda_calculus
01.10.18 08:29:45<nilli[m]> stoopkid:  hey how are you? (Im looking at the link)
01.10.18 08:34:03<stoopkid> im ok i guess
01.10.18 08:45:46<nilli[m]> stoopkid: So im looking at at it and why on earth if A then B means that if A is true then B is true . the fact that my sentance used the word true get everyone confused
01.10.18 08:50:07<nilli[m]> i"f this is true "  cant say anything about the other sentence only that it set the order that in this case have no meaning unless...
01.10.18 09:01:35<nilli[m]> if this sentence ( Russia is a part of Germany) , is true ,then Germany borders China
01.10.18 09:07:44<nilli[m]> the paradox is created only because I used the word "true" as being the "object " and it cant be the object
01.10.18 09:10:19<nilli[m]> or I use the word sentence as being the the sentance that will follow
01.10.18 09:18:32* stoopkid shrugs
01.10.18 09:18:59<stoopkid> the words "true" and "sentence" probably didn't have a significant effect on the meaning of the statement
01.10.18 09:20:26<stoopkid> "if Russia is part of Germany, then Germany borders China"
01.10.18 09:21:35<stoopkid> it's not really a paradox, it's neither true nor false, whereas a paradox is both true and false
01.10.18 09:26:17<editable-dog>hey
01.10.18 09:26:25<editable-dog>whats the → in r = (λx. ((x x) → y)).
01.10.18 09:26:28<editable-dog>?
01.10.18 09:31:40<stoopkid> hrm
01.10.18 09:32:02<stoopkid> yea on second thought that wiki page is really misleading to suggest that this curry's paradox actually exists in pure lambda calculus
01.10.18 09:40:28<stoopkid> https://en.wikipedia.org/wiki/Talk:Curry%27s_paradox#Lambda_calculus:_What_does_the_arrow_mean?
01.10.18 09:40:34<stoopkid> no consensus really
01.10.18 09:41:49<stoopkid> https://www.encyclopediaofmath.org/index.php/Illative_combinatory_logic
01.10.18 09:42:22<stoopkid> "Curry's theory is divided into two parts: pure combinatory logic (), concerning itself with notions like substitution and other (formula) manipulations..." which we know is equivalent to lambda calculus
01.10.18 09:43:18<stoopkid> "...; and illative combinatory logic (), concerning itself with logical notions such as implication, quantification, equality, and types."
01.10.18 09:47:52<stoopkid> https://en.wikipedia.org/wiki/Deductive_lambda_calculus
01.10.18 11:42:01<stoopkid> nilli[m]: wrt your original q, not sure what you mean
01.10.18 11:42:24<stoopkid> 5:59 AM <nilli[m]> for all A there exist at least one A that this statement will not hold for.
01.10.18 11:43:45<stoopkid> ah i think i see what you’re going for
01.10.18 11:49:28<stoopkid> so like, Q = forall A. exists A .  Not(Q(A))
01.10.18 11:51:41<stoopkid> where the variables are intended to represent statements, and Q is also a statement
01.10.18 11:53:14<stoopkid> now.. you used the variable A twice, so the Not(Q(A)) is talking about the “exists A” not the “forall A”
01.10.18 11:53:28<stoopkid> so this is really like:
01.10.18 11:54:04<stoopkid> Q = forall A. exists B. Not(Q(B))
01.10.18 11:54:49<stoopkid> or did you want it the other way around? like..
01.10.18 11:55:15<stoopkid> Q = forall A. exists B. NotQ(A))
01.10.18 11:56:40<stoopkid> and if you really want the “exists A” to be referring to the same A as the “forall A”, that would be redundant
01.10.18 11:57:15<stoopkid> like “for any A, that same A exists, such that..”
01.10.18 11:57:43<nilli[m]> regarding the topic before : lambda calculus assign value based on order thus any semantics have to be organized the same way and then will not come out as contradiction.
01.10.18 11:57:57<nilli[m]>  (this statement) is) false) true)
01.10.18 11:58:33<nilli[m]> hold on got the perantasis wrong
01.10.18 12:04:30<stoopkid> wrt machines, step-by-step processing, math, etc..:
01.10.18 12:04:53<stoopkid> you know how we got basic logic gates like AND, OR, NOT
01.10.18 12:05:05<stoopkid> and transistors and such
01.10.18 12:07:03<stoopkid> we make our circuits/machines out of all different kinds of combinations of these gates
01.10.18 12:07:52<stoopkid> they can be divided into two very broad (but very precise categories), those that have feedback loops, and those that dont
01.10.18 12:07:58<nilli[m]>  yes. the basic is get two input and come out with one output
01.10.18 12:09:22<nilli[m]> which is which?
01.10.18 12:10:27<stoopkid> the ones with feedback are called sequential circuits and the ones without it are called combinational circuits
01.10.18 12:12:06<stoopkid> so combinational circuits can be interpreted as statements
01.10.18 12:12:17<stoopkid> typically classical propositional logic
01.10.18 12:14:07<stoopkid> they cant really be any more expressive than propositional logic
01.10.18 12:15:26<stoopkid> so lets look at the liar paradox then
01.10.18 12:15:45<stoopkid> Q = Not(Q)
01.10.18 12:15:56<nilli[m]> ok my favorite one
01.10.18 12:16:34<stoopkid> so at first glance this seems like this is in propositional logic but, not quite
01.10.18 12:17:40<stoopkid> the ability to do the self-reference or not changes the behavior of the logic
01.10.18 12:18:17<stoopkid> if we cant self-reference, we cant get a liar’s paradox
01.10.18 12:19:36<nilli[m]> stoopkid I have problem with the original definition . since I see no self reference there. its only that after the reduction we made from human to machine language
01.10.18 12:20:18<stoopkid> well the human interpretation of it is the key factor here
01.10.18 12:20:25<nilli[m]> we use human semantics and imply machine semantics
01.10.18 12:20:47<nilli[m]> let go back to the statement itself
01.10.18 12:21:59<stoopkid> ok Q = Not(Q)
01.10.18 12:22:19<nilli[m]> this statement is false. "this statement" call for the first argument while i"s" call for the second argument
01.10.18 12:22:47<nilli[m]> we have two arguments here to satisfy two statements
01.10.18 12:23:02<stoopkid> ok lets try it
01.10.18 12:23:32<nilli[m]> if you organize it like lambda calculus you see it very clear/
01.10.18 12:23:39<stoopkid> so lets assume Q is true
01.10.18 12:24:17<stoopkid> then “this statement” gets Q, your “first argument”
01.10.18 12:24:31<nilli[m]> ok
01.10.18 12:24:59<stoopkid> and then the value of Q is true, so then “is” says “true is false”
01.10.18 12:25:04<stoopkid> which is false
01.10.18 12:26:10<stoopkid> so it cant be true because we arrive at a contadiction
01.10.18 12:26:25<stoopkid> so lets assume instead that its false
01.10.18 12:27:30<nilli[m]> hold on
01.10.18 12:27:37<stoopkid> so “this statement” refers to the Q, which is false, and then we do “false is false” which is true
01.10.18 12:27:51<nilli[m]> the statement "true is false" is indeed false
01.10.18 12:27:52<nilli[m]> so we all good
01.10.18 12:28:07<nilli[m]> false is the answer
01.10.18 12:28:14<nilli[m]> no contradiction
01.10.18 12:29:36<stoopkid> well, but we had already assumed the answer to be true, *thats* the contradiction
01.10.18 12:30:05<stoopkid> so now lets say instead the answer js false
01.10.18 12:30:16<nilli[m]> where we assumed that ?
01.10.18 12:30:44<stoopkid> 12:21 PM <stoopkid> so lets assume Q is true
01.10.18 12:32:31<stoopkid> so i assumed Q was true, and then that assumption allowed me to conclude that Q was false, by logic that you agreed with
01.10.18 12:33:10<nilli[m]> we assumed Q as the value, not the statment
01.10.18 12:33:59<stoopkid> well, we did both
01.10.18 12:34:16<nilli[m]> then we assigned it as our first argument
01.10.18 12:34:23<stoopkid> “this statement” obv refers to the statement
01.10.18 12:34:34<stoopkid> and then the “is false” refers to the value
01.10.18 12:34:48<nilli[m]> the both thingi is where we go wrong
01.10.18 12:36:11<nilli[m]> the expression is made of two arguments even thou it appears as one
01.10.18 12:36:22<nilli[m]> and that is where we go wrong
01.10.18 12:37:36<stoopkid> i agree that the statement and its truth-value are distinct, but even after accounting for that distinction, the paradox was still present
01.10.18 12:38:05<stoopkid> so how would you change it further so as to be “right”?
01.10.18 12:41:23<nilli[m]> the order formed by the lambda expression express the order by which my arguments are taken  thus if I deal with true false values( not numbers ) I look at them as such .according to the rules
01.10.18 12:42:29<stoopkid> ah well first, these arent two different arguments in that sense
01.10.18 12:43:10<stoopkid> its like taking one argument (the statement) and then extracting the second thing out of that argument
01.10.18 12:43:40<stoopkid> to make it more precise in english: “This statement’s truth value is the value ‘false’”
01.10.18 12:45:03<stoopkid> but i demonstrated that this still has the contradictions
01.10.18 12:51:12<nilli[m]> x =(this A statement )   Y= (is B statement))  a=true b= false  . xa & yb=  x true & y false = true & false = false . your output is false
01.10.18 12:52:42<stoopkid> “this A statement” “is B statement” ?
01.10.18 12:52:57<nilli[m]> why did I used the "and" you can ask
01.10.18 12:53:22<stoopkid> that is not at all my first q here :P
01.10.18 12:54:07<nilli[m]> ok your first q then
01.10.18 12:58:41<nilli[m]> first of all can you see that I have two statement in that sentence ?
01.10.18 12:59:06<nilli[m]> I just named each of the differently
01.10.18 12:59:23<stoopkid> here i got something simpler for you: allow the truth value to change over “time” or just “some order” and make it “this statement’s current truth value is NOT(this statement’s previous truth value)”
01.10.18 13:00:50<nilli[m]> lets stay away form not since its another Pandora box we still have to deal with
01.10.18 13:01:06<nilli[m]> from NOT
01.10.18 13:02:20<stoopkid> ok let me rephrase: “this statement’s previous truth-value is false”
01.10.18 13:02:55<nilli[m]> the main problem is that a paradox statement is such since is not explicit about all the information and we try to make it up
01.10.18 13:03:26<nilli[m]> and we can get a few different results
01.10.18 13:04:05<nilli[m]> but each result one that we get is not a contradiction
01.10.18 13:04:09<stoopkid> the main problem is that we get multiple results
01.10.18 13:04:54<stoopkid> like, x = x + 1
01.10.18 13:05:47<stoopkid> assume x = 1, then x = 2, assume x = 2, then x = 3, ...
01.10.18 13:06:04<nilli[m]> i get the different result not because there is no answer but because there are a few ways to present the question itself
01.10.18 13:06:34<nilli[m]> the problem is in the way I presented the question
01.10.18 13:07:39<nilli[m]> your example is not representing the  situation right
01.10.18 13:24:34<stoopkid> well, the situation that we’re calling a paradox is that it can’t have any of the truth-values without us being able to deduce that it must have the other value
01.10.18 13:27:04<nilli[m]> but that is since I asked to evaluate an incomplete sentence.
01.10.18 13:27:28<nilli[m]> is all incomplete sentences are a paradox?
01.10.18 13:28:14<stoopkid> this situation can happen any time we have a set of at least two things, a name assumed to represent an object in that set, and an operation on objects in that set that always returns an output that’s different from its input
01.10.18 13:28:59<stoopkid> idk what you mean by “incomplete sentence”
01.10.18 13:29:05<nilli[m]> a paradox is  only when I get two different answers to the same explicit question
01.10.18 13:29:25<stoopkid> slightly stricter than that
01.10.18 13:30:26<stoopkid> its a paradox when no matter which value to assume it to have, you can prove that it must have a different value than the one you assumed
01.10.18 13:31:59<nilli[m]> no that is not a paradox, that is when you have incomplete information. very important to define a difference.
01.10.18 13:32:35<nilli[m]> let see how the computer need to deal with it
01.10.18 13:32:42<stoopkid> no, not incomplete information, basically the opposite of that
01.10.18 13:33:20<nilli[m]> it have to define two different class of paradox
01.10.18 13:33:38<stoopkid> complete knowledge that the information cant even exist
01.10.18 13:35:40<stoopkid> contrast with “this statement is true”
01.10.18 13:35:56<stoopkid> this is a situation of incomplete information
01.10.18 13:36:23<stoopkid> if we assume its true then its “true is true” which is true, so we learned no information here
01.10.18 13:36:45<stoopkid> if we assume its false then its “false is true” which is false, and again learn no information
01.10.18 13:37:42<nilli[m]> one is like "double spend "  (two parallel values that only one can be accepted)  . the  other is like an incomplete address for a transaction  where none can be accepted
01.10.18 13:44:34<stoopkid> hmmm
01.10.18 13:46:58<stoopkid> wrt double spend, maybe, wrt two parallel values, yes, wrt incomplete address, not quite
01.10.18 13:50:41<stoopkid> the incomplete address is not actually in the space of valid addresses, its just a different kind of object
01.10.18 13:51:42<stoopkid> plus, we actually have the incomplete address itself
01.10.18 13:54:44<stoopkid> with the liar paradox, it appears like it actually should have a truth value (or in your example should actually be an address), but we dont actually have the particular truth-value, and any truth-value we assume it to have allows us to deduce it must have a different value
01.10.18 13:55:27<stoopkid> like “this valid address is some other valid address”
01.10.18 13:55:46<stoopkid> “x = x + 1”
01.10.18 13:57:13<stoopkid> presumably x is a number, we can certainly make equations where x appears on both sides, and adding 1 to a number gives another number
01.10.18 14:02:04<stoopkid> so if we insist that x actually is some particular (finite) number we’ll have no choice but to accept that its actually multiple different numbers
01.10.18 14:04:42<stoopkid> similarly if we insist the liar paradox actually has a truth value, then it has multiple truth values, and the only other option is to insist that it actually has no truth value or is even meaningless
01.10.18 14:08:42<stoopkid> or alternatively you can choose an alternate interpretation of the statement, but the paradox definitely can’t be resolved within the standard interpretatio
01.10.18 14:09:18<nilli[m]> ok, lets leave it as that for now  and lets start dealing with the real problem : NOT
01.10.18 14:09:22<stoopkid> (Can’t be resolved within the standard interpretation without rejecting it as meaningless)
01.10.18 14:12:39<nilli[m]> (meaningless for lack of information, which is a form of nonsense sentence, aka incomplete address)
01.10.18 14:13:01<nilli[m]> changing to NOT subject now
01.10.18 14:14:19<nilli[m]> the AND OR  and all the others but NOT takes two inputs and give us one output right?
01.10.18 14:15:15<nilli[m]> NOT we can see as take one input and give us one input. but also as take two inputs and give two inputs
01.10.18 14:16:42<nilli[m]> (so is NOT NOT)
01.10.18 14:24:49<nilli[m]> these means that I have two different categories of operation one category that all the operations other than NOT , falls under  and a spacial category for NOT
01.10.18 14:30:36<stoopkid> what about logic gates with, say, 5 inputs and 7 outputs?
01.10.18 14:34:09<nilli[m]>  you feed them in order two at a time ,
01.10.18 14:34:34<nilli[m]> one  of two with a third input ext. right?
01.10.18 14:34:49<nilli[m]> *one created of the first two
01.10.18 14:36:31<stoopkid> not necessarily
01.10.18 14:39:55<nilli[m]> I need to go for a while.  is nice talking with you but so hard on the IRC
01.10.18 22:05:58*** Join: logdown (2f11ddb4@gateway/web/freenode/ip.47.17.221.180, (unauthenticated): ool-2f11ddb4.dyn.optonline.net/47.17.221.180)
01.10.18 22:09:17<logdown> It seems that the autonomic log hasn't updated in a while. I enjoy reading the information here and it's good for developers to have a log of what has been discussed, please fix :)
01.10.18 22:09:40*** Quit: logdown (2f11ddb4@gateway/web/freenode/ip.47.17.221.180) left #AutoNomic: Client Quit
01.10.18 23:48:48*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cevefydvarkarubo) left #AutoNomic: Quit: Connection closed for inactivity
02.10.18 00:21:41* HMCf dealing with more death in family :-/
02.10.18 00:22:29<HMCf> nilli[m]: 'not' is not in its own special category... it is not the only unary gate
02.10.18 00:23:04<HMCf> we can enumerate the truth tables of the unary gtes just like we can the binary gates or n-ary gates
02.10.18 00:23:10<HMCf> if not is:
02.10.18 00:23:12<HMCf> 0 1
02.10.18 00:23:14<HMCf> 1 0
02.10.18 00:23:19<HMCf> we also have
02.10.18 00:23:41<HMCf> buffer/noop:
02.10.18 00:23:43<HMCf> 0 0
02.10.18 00:23:46<HMCf> 1 1
02.10.18 00:23:56<HMCf> constant low:
02.10.18 00:23:58<HMCf> 0 0
02.10.18 00:24:00<HMCf> 1 0
02.10.18 00:24:07<HMCf> constant high:
02.10.18 00:24:09<HMCf> 0 1
02.10.18 00:24:11<HMCf> 1 1
02.10.18 00:25:44<HMCf> ofc these are of arguable philosophical utility (outside of physical systems, where they regularly do serve various purposes in digital logic, like introducing path delays to correct skew or balancing power consumption and heat dissipation)
02.10.18 03:28:01<editable-dog>i like constant high
02.10.18 04:47:22<nilli[m]> HMCf: sorry to hear that . I hope its more on the natural and timely side of death.
02.10.18 05:02:57<nilli[m]> editable-dog: after the long conversation with stoop last night I was thinking about that whole thing , how much effort and time it takes to just deal with "mindfuck" issues
02.10.18 05:03:45<nilli[m]> not sure it worth it, more so , not sure how come we are whiling to spend so much efforts on that
02.10.18 05:06:40<nilli[m]> So I think that I have an answer "mindfuck" I guess is a spacial class of "truth"
02.10.18 05:08:26<nilli[m]> it challenges the limits that we set for the evaluation of truth
02.10.18 05:09:37<nilli[m]> but is not a philosophical issue. it is a physical/mathematical /computational issue
02.10.18 05:11:09<nilli[m]> since they are all bound with in these limits
02.10.18 05:15:50<nilli[m]> these limits as boundaries have a very concrete existences cemented into the language that express them, but are hard to view from withing the language
02.10.18 05:20:06<nilli[m]> It is the transformation process between the different expressions that reveal it
02.10.18 05:21:18<nilli[m]> HMCf and stoopkid this actualy is  for your ears also
02.10.18 05:27:42<nilli[m]> I came on board this project mainly since I found many correlating points between things that HMC was talking about and my understanding  and then became more and more involved with the project itself.
02.10.18 05:29:01<nilli[m]> I am now done with the project and am fully into the "mindfuck" iissues
02.10.18 05:31:12<nilli[m]> which means that everything you may call trivial is not ,it actualy is the most interesting thing
02.10.18 05:32:00<nilli[m]> however I am not a mathematician and I dont think like a mathematician
02.10.18 05:32:24<nilli[m]> I am not a physicist and I dont think like a physicist
02.10.18 05:33:15<nilli[m]> and I even less a computer scientist than both of the above
02.10.18 05:36:42<nilli[m]> I am an artist and the only project that I am involve now it my art. which is now all about understanding the mechanics of transformations
02.10.18 05:38:44<nilli[m]> and that above was a sort pf my artist statement to anyone who might not realize what is it that I am doing.
02.10.18 05:42:37<nilli[m]> so as long as anyone will be interested in keeping the conversation with me about  these topics because they think that I bring something valuable to the table. that is great.
02.10.18 05:44:38<nilli[m]> if you are whiling to speak with me only to teach me and not learn from our conversation .dont.  you will find a much better students to make use of your knowledge
02.10.18 06:04:06<nilli[m]> and pleas dont take it as if I dont appreciate all that you teach me, quite the opposite. but its time for me to move onto my own work, and it might not fit in here any more.
02.10.18 06:50:55*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hesdsxupthszrjue, stoopkid: stoopkid)
02.10.18 15:40:06*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hesdsxupthszrjue) left #AutoNomic: Quit: Connection closed for inactivity
02.10.18 17:54:36*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni, stoopkid: stoopkid)
02.10.18 19:04:43<nilli[m]> HMCf someone just got into my bitcoin forum account and changed the password and the email address that i provided.
02.10.18 19:06:13<nilli[m]> I followed a link they send me to locked my account but cant figure out even where to ask anything regarding that
02.10.18 19:10:18<nilli[m]> anyway consider that  all the pm are not pm anymore :(
02.10.18 20:23:29<nilli[m]> * "they" is bitcoin forum
02.10.18 22:53:12*** Connecting...
02.10.18 22:53:25-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
02.10.18 22:53:30*** [sasl.login from editable-dog (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
02.10.18 22:53:39*** Mode change: +RZi on editable-dog by editable-dog (server)
                 -freenode-connect- Due to the persistent ongoing spam, all new connections are being set +R (block messages from unidentified users) and will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
                 *** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
02.10.18 22:53:48*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 9 days 4 hours 43 minutes 1 second ago
02.10.18 22:53:49*** Names: editable-dog stoopkid nilli[m] Deadhand redfish64 dmiles nemesis1[m] reedhhw[m] smoothpeter8[m] HMCf dadbod007[m] cantora Tamara_ lexx_[m] nikaala[m] genuinelyfx[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
02.10.18 22:58:24*** Connecting...
02.10.18 22:58:31-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
02.10.18 22:58:36*** [sasl.login from editable-dog (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
02.10.18 22:58:44*** Mode change: +RZi on editable-dog by editable-dog (server)
                 -freenode-connect- Due to the persistent ongoing spam, all new connections are being set +R (block messages from unidentified users) and will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
                 *** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
02.10.18 22:58:54*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 9 days 4 hours 48 minutes 8 seconds ago
02.10.18 22:58:55*** Names: editable-dog stoopkid nilli[m] Deadhand redfish64 dmiles nemesis1[m] reedhhw[m] smoothpeter8[m] HMCf dadbod007[m] cantora Tamara_ lexx_[m] nikaala[m] genuinelyfx[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
03.10.18 00:31:00<editable-dog>HMCf: sorry about that. any idea when are you gonna find time to look at pyin?
03.10.18 03:34:53*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni, stoopkid: stoopkid)
03.10.18 04:29:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni, stoopkid: stoopkid)
03.10.18 05:00:38<editable-dog>how did you join twice?
03.10.18 05:07:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni, stoopkid: stoopkid)
03.10.18 05:33:25<editable-dog>now, thats my kind of humor
03.10.18 05:35:27*** Names: dadbod007[m] smoothpeter8[m] stoopkid editable-dog nilli[m] Deadhand redfish64 dmiles nemesis1[m] reedhhw[m] HMCf cantora Tamara_ lexx_[m] nikaala[m] genuinelyfx[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
03.10.18 06:28:39*** Join: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
03.10.18 06:38:11*** Quit: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 256 seconds
03.10.18 07:01:38*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 272 seconds
03.10.18 07:12:09*** Join: nili (4d7e369f@gateway/web/freenode/ip.77.126.54.159, (unauthenticated): 77.126.54.159 - http://webchat.freenode.net)
03.10.18 07:12:10*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
03.10.18 07:26:21*** Quit: nili (4d7e369f@gateway/web/freenode/ip.77.126.54.159) left #AutoNomic: Ping timeout: 256 seconds
03.10.18 09:16:18*** Connecting...
03.10.18 09:17:07*** Disconnected
03.10.18 09:17:08*** Connecting...
03.10.18 09:18:01*** Disconnected
                 *** Connecting...
03.10.18 09:18:33*** Disconnected
                 *** Connecting...
03.10.18 09:19:07*** Disconnected
                 *** Connecting...
03.10.18 09:19:40*** Disconnected
                 *** Connecting...
03.10.18 09:20:31*** Disconnected
#AutoNomic> 03.10.18 09:52:59*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 9 days 15 hours 42 minutes 13 seconds ago
                 *** Names: editable-dog dmiles dadbod007[m] smoothpeter8[m] stoopkid nilli[m] Deadhand redfish64 nemesis1[m] @ChanServ koo5[m] genuinelyfx[m] nikaala[m] lexx_[m] Tamara_ cantora HMCf reedhhw[m]
                 *** End of /NAMES list.
03.10.18 13:20:57<HMCf> nilli[m]: quite possibly they hacked you specifically to get at those pms...
03.10.18 13:21:38<HMCf> I've had some hax0rs basically megastalking me lately. :-|
03.10.18 13:23:01<HMCf> editable-dog: I will start looking at it... right now.
03.10.18 13:38:17<editable-dog>cool
03.10.18 13:41:33<editable-dog>slight fix pushed
03.10.18 14:15:30<editable-dog>so, i thought i had a testcase where this is explicitly, but apparently not, but anyway, in the "all lists exist" (?X), the ?X has to be an universal. We can achieve this in our syntax by something like ?X a ?something => ?L rdf:first ?X
03.10.18 15:05:06<stoopkid> editable-dog:
03.10.18 15:05:15<stoopkid> RDFLog paper, Definition 5
03.10.18 15:05:43<stoopkid> if ?X is a universal variable in the rule-head, then it must also appear in the rule-body.
03.10.18 15:15:20<stoopkid> there's nothing coherent about this list stuff really, and if there is, it's in locked away in the minds of sem-web theorists and their tomes of sem-web lore which haven't been provided to us
03.10.18 15:16:39<stoopkid> dmiles and HMCf both acknowledge that the N3 standards docs that we get these list-rules from don't even express the semantics we need... dmiles suggests that at best it can be taken as an analogy for whatever the semantics are actually supposed to be
03.10.18 15:16:47<stoopkid> but analogies only work when you have shared context
03.10.18 15:16:49<stoopkid> which we don't
03.10.18 15:16:58<stoopkid> and which we aren't getting..
03.10.18 15:29:10<HMCf> editable-dog: how should I be running this now?  When i just run pyin_runner.sh i get python exception after step327, for example
03.10.18 15:30:18<editable-dog>bash -c "rsync -v -ah -e 'ssh -p  44' -r  editable-log@loworbit.now.im:/home/editable-log          loworbit-`date "+%F-%H-%M-%S"`-home"
03.10.18 15:30:25<editable-dog>oops
03.10.18 15:31:10*** Join: koom (~koom@89-24-61-16.nat.epc.tmcz.cz, (unauthenticated): realname)
03.10.18 15:31:39<koom> ./pyin/tau2.py ./pyin_runner-O.sh  tests/fixme/3.2_terms_and_unification_first
03.10.18 15:34:09<editable-dog>well, pyin_runner.sh works too
03.10.18 15:34:45<editable-dog>so maybe you found a testcase that breaks it?
03.10.18 16:17:17*** Join: nili (4d7e369f@gateway/web/freenode/ip.77.126.54.159, (unauthenticated): 77.126.54.159 - http://webchat.freenode.net)
03.10.18 16:27:08<nilli[m]> HMCf: who do you think are 'they"? it felt for me like an inside job
03.10.18 16:30:02<nilli[m]> I always assume that who ever run this platform can get into all the massages so they dont need to heck it. but  sure looked like was done with no effort
03.10.18 16:30:16<HMCf> nilli[m]: "inside job"?
03.10.18 16:30:54<nilli[m]> I got a massage of changing password and changing address on the same moment
03.10.18 16:32:30<HMCf> nilli[m]: ok... and?
03.10.18 16:32:39<nilli[m]> inside as almost like a backdoor
03.10.18 16:33:03<HMCf> editable-dog: how many steps is this 3.2 test anyway?
03.10.18 16:33:49<editable-dog>HMCf: idk, been running for the whole day :)
03.10.18 16:33:52<editable-dog>dont bother with it
03.10.18 16:34:03<editable-dog>was only an example command line
03.10.18 16:35:31<HMCf> http://pastebin.com/caZtumHu
03.10.18 16:36:03<HMCf> is what i get from just ./pyin_runner.sh
03.10.18 16:36:54<nilli[m]> anyway I dont even know if ill be able to get and access back to it, I never did that address proof thing. what do you think?
03.10.18 16:37:04<editable-dog>aw, i messed with this yesterday..
03.10.18 16:37:10<HMCf> seems to be the same exception for any test, socrates etc
03.10.18 16:37:59<HMCf> nilli[m]: I think they probably own that account now, yes
03.10.18 16:38:37<nilli[m]> and why would they bother. or ruther are they going to do anything with it?
03.10.18 16:39:08<nilli[m]> can they unlock it then?
03.10.18 16:39:23<editable-dog>HMCf: pull
03.10.18 16:48:57<HMCf> nilli[m]: can who "unlock" what?
03.10.18 16:49:39<HMCf> the account was active in the past 24hr
03.10.18 16:51:05<nilli[m]> those who got it. I was able to lock it following a link but not sure how long this lock holds
03.10.18 16:51:37<nilli[m]> it after 2;30  AM last night or a bit after
03.10.18 16:51:52<HMCf> 2:30am where? :-)
03.10.18 16:51:55<nilli[m]> so is less the  24 hours
03.10.18 16:52:05<nilli[m]> in israels
03.10.18 16:52:18<nilli[m]> you know where I live :)
03.10.18 16:52:54<HMCf> last active is about 18.5 hrs ago
03.10.18 16:53:32<HMCf> and yes, if they have the pw and email then they hold the lock, not you
03.10.18 16:53:55<HMCf> do you know what address the email was changed to?
03.10.18 16:54:08<HMCf> that might give a hint as to "who"
03.10.18 16:55:32<nilli[m]> Your Bitcoin Forum (bitcointalk.org) email address was just changed from nililerner@gmail.com to elenorenoll4120@mail.ru 
03.10.18 16:55:39<nilli[m]> by IP address 173.239.198.248. If you did not do this, then you can visit the following link within 14 days in order to lock the account:
03.10.18 16:55:48<nilli[m]> that was 22 hours ago
03.10.18 16:56:33<nilli[m]> 1:02 AM (22 hours ago)
03.10.18 16:58:15*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 272 seconds
03.10.18 16:58:24<nilli[m]> and then the other mail
03.10.18 16:58:38<nilli[m]> Your Bitcoin Forum (bitcointalk.org) password was just changed by IP address 173.239.198.248. If you did not do this, then you should use the forgotten password feature to change your password.
03.10.18 16:58:50<nilli[m]> same time 1:02
03.10.18 17:03:42<HMCf> well that tells us very little.... russian email address but a provider anyone in the world can sign up with...
03.10.18 17:04:16<HMCf> and a US IP but in a block for vpn and vps services, so again anyone anywhere
03.10.18 17:04:43<HMCf> and "elenoreno114120" means nothing to us?
03.10.18 17:05:02<nilli[m]> maybe just random hack?
03.10.18 17:07:10<nilli[m]> well in terms of the PM it can only be worth anything for a good script writer to make into a cool movie.
03.10.18 17:07:30<nilli[m]> for sure no one is interested in what I have to say
03.10.18 17:08:50<nilli[m]> and you.. whatever you said....well that was not that much... unless is for a cool movie :(
03.10.18 17:10:28<nilli[m]> ...my coins are less and less a threat as far as a chance for it gain any recognition (even as art. I am the worst marketer ever)
03.10.18 17:11:24<nilli[m]> so can only make a good story for someone who is good at selling stories
03.10.18 17:11:44<nilli[m]> .... I guess time to move on.
03.10.18 17:17:16<HMCf> ah, actually that email address *is* meaningful
03.10.18 17:17:54<nilli[m]> how so?
03.10.18 17:18:02<HMCf> do you use any macs?
03.10.18 17:18:27<nilli[m]> no
03.10.18 17:19:58<HMCf> elenore is an exploit kit mainly targetting apple devices
03.10.18 17:20:24<nilli[m]> I have acer
03.10.18 17:20:35<HMCf> so possibly one or more of your devices is compromised via browser exploit
03.10.18 17:21:29<HMCf> or maybe they just use that name as misdirection, who knows
03.10.18 17:23:06<nilli[m]> well I was on signed into bitcointalk on my computer only. hardly ever on my phone
03.10.18 17:24:04<nilli[m]> but had that tab open for long times. ( I usualy have and many tabs as I can see )
03.10.18 17:25:12<nilli[m]> open tabs as many as fit up on my screen
03.10.18 17:35:22*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
03.10.18 17:35:23<editable-dog>nilli is the only woman i know that gets the "lets just open a new tab for it" thing
03.10.18 17:37:24<nilli[m]>  lol. I guess that is as far as my technical skills are reaching
03.10.18 17:38:46<nilli[m]> well I did manage to fight off a hacker once. face to face fight, real time of password changing while talking to support
03.10.18 17:38:59<nilli[m]> but that I think was just luck
03.10.18 17:46:18<HMCf> editable-dog: i don't understand these step counts... is there a way to get a steps/"framerate" count that corresponds to our old step counts?
03.10.18 17:48:54<HMCf> actually i'm pretty sure my test is just inflooping now
03.10.18 17:49:13<editable-dog>the steps here are for visualization
03.10.18 17:49:24<editable-dog>i think i never understood the euler steps, sorry
03.10.18 17:51:05<HMCf> heh
03.10.18 17:51:57<HMCf> so the cline-list-forward.n3 example from eulergui seems to infloop
03.10.18 17:52:01<HMCf> *clone
03.10.18 17:53:07<HMCf> it *should* cut to fail, but instead it seems to be building up an inf long list
03.10.18 17:53:30<HMCf> let me try the backwards version, which should pass...
03.10.18 17:56:57<HMCf> clone-rdf-list-forward.n3 doesn't infloop, but also fails to make the clone
03.10.18 18:00:33<HMCf> clone-list.n3 almost works.... it doesn't infloop, but it also only produces 2 cloned lists instead of 3
03.10.18 18:01:22<HMCf> so I'd start there, figure out why you miss the third clone
03.10.18 18:01:54<HMCf> http://eulergui.sourceforge.net/examples/clone-list.n3
03.10.18 18:02:18<HMCf> query ?a :clone_of ?b
03.10.18 18:04:00<HMCf> or similarly query "?q :rest :nil" should give 2 results instead of 1
03.10.18 18:05:09<HMCf> this does "feel like" you've made a step in the right direction... heh
03.10.18 18:05:22<HMCf> but something is still off
03.10.18 18:11:44<HMCf> also I think I found a parser bug
03.10.18 18:12:41<HMCf> well, hrmm, not exactly a parser bug, but... a bug
03.10.18 18:13:29*** Quit: nili (4d7e369f@gateway/web/freenode/ip.77.126.54.159) left #AutoNomic: Ping timeout: 256 seconds
03.10.18 18:13:43<HMCf> if i include "@prefix math: <http://www.w3.org/2000/10/swap/math#>."  then rdflib throws an exception
03.10.18 18:14:05<editable-dog>"math :"?
03.10.18 18:14:33<HMCf> ?
03.10.18 18:14:43<editable-dog>missing space?
03.10.18 18:14:54<HMCf> shouldn't be a space
03.10.18 18:15:24<editable-dog>shoulda coulda
03.10.18 18:15:26<HMCf> and in fact adding a space (rightly) makes a syntax error "expected qname"
03.10.18 18:16:08<editable-dog>ah youre right
03.10.18 18:17:42<HMCf> https://pastebin.com/y7DE0Vas
03.10.18 18:17:50<editable-dog>thx
03.10.18 18:20:32<HMCf> the "accumulating by recursion" example from the "good practices" document also doesn't seem to work
03.10.18 18:21:01<HMCf> and that one doesn't even use lists/existentials , heh
03.10.18 18:23:26<HMCf> well, head existentials
03.10.18 18:23:34<HMCf> it does use body existentials
03.10.18 18:23:57<HMCf> and i guess technically uses a list, too, for calling math:sum
03.10.18 18:24:09<editable-dog>so, i got three results with clone-list.n3, can you check again?
03.10.18 18:26:46<HMCf> ah you're right, i missed the one because of the stats printed between
03.10.18 18:26:52<HMCf> so that is cool
03.10.18 18:27:21<HMCf> one out of four.  the accumulation might just be lack of the builtin?
03.10.18 18:27:49<HMCf> does pyin have math:sum?
03.10.18 18:27:57<editable-dog>there are no builtins, thats for sure
03.10.18 18:28:13<HMCf> ok, so that explains that one
03.10.18 18:29:05<HMCf> the other two are mysteries?
03.10.18 18:30:25<editable-dog>well, lets see...
03.10.18 18:36:46<koom> clone-rdf-list-forward.n3 with query ?a :clone_of ?b. gives me:
03.10.18 18:36:58<koom> ##result: <http://jmv.fr#l0c> <http://jmv.fr#clone_of> <http://jmv.fr#l0>.
                 <koom> ##result: ?a <http://jmv.fr#clone_of> <http://jmv.fr#l1>.
                 <koom> ##result: ?a <http://jmv.fr#clone_of> <http://jmv.fr#l2>.
                 <koom> ##result: ?a <http://jmv.fr#clone_of> <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil>.
03.10.18 18:42:28<HMCf> ah, on that one I was using query: :l0c rdf:first ?a.
03.10.18 18:42:38<HMCf> and got no result
03.10.18 18:43:52<HMCf> ah nm, i see why
03.10.18 18:44:00<HMCf> :first not rdf:first
03.10.18 18:44:11<HMCf> so cool, that works too it seems
03.10.18 18:44:21<HMCf> so onky the one mystery?
03.10.18 18:44:24<HMCf> *only
03.10.18 18:51:33<HMCf> so to summarize.... lists are looking much improved but general existentials still have at least one infloop case
03.10.18 18:53:16* HMCf gtr soon
03.10.18 18:53:41<editable-dog>cline-list-forward.n3 with ?a :clone_of ?b seems to want to run forever indeed
03.10.18 18:58:04<HMCf> i'll not also gripe about how painfully slow it still runs this time... ;-)
03.10.18 18:58:25<HMCf> though it is a little better :-)
03.10.18 19:00:48<HMCf> ok, now for some unrelated things before I go:
03.10.18 19:01:24<HMCf> 1) TBL's not-quite-tau is out of stealth mode this week.... check it out!
03.10.18 19:01:40<editable-dog>solid?
03.10.18 19:02:31<HMCf> solid+inrupt, yah
03.10.18 19:02:55<HMCf> 2) https://github.com/IDLabResearch/N3CoreLogic
03.10.18 19:03:29<HMCf> apparently we are not the only ones so frustrated, HEH!
03.10.18 19:04:20<HMCf> this tool checks how cwm, old eye, and new eye will differ in interpretations
03.10.18 19:05:23<HMCf> (it also has a nice formula converter nestled in it, which can be handy for checking quantifier syntax cases at least)
03.10.18 19:07:41<HMCf> 3) I hear someone is planning to try to beat the motocoin bot... let's wish them luck! XD
03.10.18 19:08:09* HMCf afk for now
03.10.18 20:04:15*** Quit: koom (~koom@89-24-61-16.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
03.10.18 20:05:23<editable-dog>well, there goes a whole day of pyin running the 3.2 testcase...
03.10.18 20:31:12<HMCf> editable-dog: maybe it is doing the same infloop?
03.10.18 20:34:20<editable-dog>would be nice
03.10.18 21:08:17<editable-dog>i'll continue tomorrow or probably more on saturday
03.10.18 22:10:22* HMCf nods
03.10.18 22:11:24<HMCf> I'll be testing some more cases tomorrow too, see if I can pin down specifics on the semantics going wrong and/or maybe reduce a minimal test case
04.10.18 01:26:30*** Connecting...
04.10.18 01:26:34-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
04.10.18 01:26:39*** [sasl.login from editable-dog (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
04.10.18 01:26:47*** Mode change: +RZi on editable-dog by editable-dog (server)
                 -freenode-connect- Due to the persistent ongoing spam, all new connections are being set +R (block messages from unidentified users) and will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
                 *** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
04.10.18 01:26:52*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 10 days 7 hours 16 minutes 5 seconds ago
                 *** Names: editable-dog dmiles dadbod007[m] smoothpeter8[m] stoopkid nilli[m] Deadhand redfish64 nemesis1[m] reedhhw[m] HMCf cantora Tamara_ lexx_[m] nikaala[m] genuinelyfx[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
04.10.18 08:41:58*** Connecting...
04.10.18 08:42:07-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
04.10.18 08:42:13*** [sasl.login from editable-dog (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
04.10.18 08:42:20*** Mode change: +RZi on editable-dog by editable-dog (server)
                 -freenode-connect- Due to the persistent ongoing spam, all new connections are being set +R (block messages from unidentified users) and will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
                 *** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
04.10.18 08:42:25*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 10 days 14 hours 31 minutes 38 seconds ago
                 *** Names: editable-dog dmiles dadbod007[m] smoothpeter8[m] stoopkid nilli[m] Deadhand redfish64 nemesis1[m] @ChanServ koo5[m] genuinelyfx[m] nikaala[m] lexx_[m] Tamara_ cantora HMCf reedhhw[m]
                 *** End of /NAMES list.
04.10.18 08:56:59*** Connecting...
04.10.18 08:57:05-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
04.10.18 08:57:11*** [sasl.login from editable-dog (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
04.10.18 08:57:21*** Mode change: +RZi on editable-dog by editable-dog (server)
                 -freenode-connect- Due to the persistent ongoing spam, all new connections are being set +R (block messages from unidentified users) and will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
                 *** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
04.10.18 08:57:23*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 10 days 14 hours 46 minutes 36 seconds ago
                 *** Names: editable-dog dmiles dadbod007[m] smoothpeter8[m] stoopkid nilli[m] Deadhand redfish64 nemesis1[m] reedhhw[m] HMCf cantora Tamara_ lexx_[m] nikaala[m] genuinelyfx[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
04.10.18 08:57:25-Server Notice- *** Notice -- TS for #webofneeds changed from 1538657718 to 1365151743
04.10.18 09:50:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cioaifvxijgsljni) left #AutoNomic: Quit: Connection closed for inactivity
04.10.18 10:55:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-stbadznbnojtqwce, stoopkid: stoopkid)
04.10.18 12:41:04*** Join: koom (~koom@89-24-61-16.nat.epc.tmcz.cz, (unauthenticated): realname)
04.10.18 12:43:21<koom> https://github.com/koo5/univar/blob/master/tests/tbd/steal/clone-list-forward.n3
04.10.18 12:43:40<koom> ##result: <http://jmv.fr#l0c> <http://jmv.fr#clone_of> <http://jmv.fr#l0>.
                 <koom> ##result: ?a <http://jmv.fr#clone_of> <http://jmv.fr#l1>.
                 <koom> ##result: ?a <http://jmv.fr#clone_of> <http://jmv.fr#l2>.
                 <koom> ##result: ?a <http://jmv.fr#clone_of> <http://jmv.fr#nil>.
04.10.18 12:45:25<koom> after about 3 hours
04.10.18 12:47:47<koom> 338958 steps
04.10.18 12:54:30<koom> HMCf, you said it should fail?
04.10.18 18:13:35<nilli[m]> Ok I just cant believe that bitcointalk setup for changes. every reasonable platform will not  let you change a both an email address and a password in one take
04.10.18 18:15:10<nilli[m]> I tried it today and I can just change both on the profile without being required to confirm it from the email
04.10.18 18:18:46<nilli[m]> I guess was created for people who are not using email and ofc expecting them to use a cryptographic signature.  (normal people do not work like that ) .....................................................................................................................
04.10.18 18:22:56<nilli[m]> now I get your question HMCf. since that ability to change both like that is basic cecurity fault . and I was sure that this platfrom will surely take the righ measures.
04.10.18 18:24:34<nilli[m]> ofc again if one assume only developers form the cryptocomunity will use its fine. but otherwise its not/
04.10.18 18:27:19<nilli[m]> I wore thymos about the hack and said that I can prove my identity and ownership of the identity but  I will be very surprize if he will get back to me
04.10.18 18:30:18<nilli[m]> mean while i might just play a bit with that on my stolen thread
04.10.18 18:31:57<nilli[m]> also my new user name there for now is "nili" if anyone care to know.
04.10.18 20:28:02*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca) left #AutoNomic: Ping timeout: 245 seconds
04.10.18 22:37:36*** Join: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca, (unauthenticated): deadhand)
04.10.18 22:49:29*** Connecting...
04.10.18 22:49:34-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
04.10.18 22:49:35-Server Notice- *** No Ident response
                 -Server Notice- *** Couldn't look up your hostname
04.10.18 22:49:40*** [sasl.login from editable-dog (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
04.10.18 22:49:48*** Mode change: +RZi on editable-dog by editable-dog (server)
                 -freenode-connect- Due to the persistent ongoing spam, all new connections are being set +R (block messages from unidentified users) and will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
                 *** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
04.10.18 22:49:52*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 11 days 4 hours 39 minutes 6 seconds ago
                 *** Names: editable-dog Deadhand koom stoopkid dmiles @ChanServ koo5[m] genuinelyfx[m] nikaala[m] lexx_[m] Tamara_ cantora HMCf reedhhw[m] nemesis1[m] redfish64 nilli[m] smoothpeter8[m] dadbod007[m]
04.10.18 22:49:53*** End of /NAMES list.
04.10.18 23:00:45*** Connecting...
04.10.18 23:00:56-Server Notice- *** Looking up your hostname...
                 -Server Notice- *** Checking Ident
                 -Server Notice- *** Couldn't look up your hostname
04.10.18 23:01:03-Server Notice- *** No Ident response
                 *** [sasl.login from editable-dog (editable-l@104.168.57.22)] editable-dog
                 *** SASL: You are now logged in as editable-dog.
                 *** SASL authentication successful
04.10.18 23:01:10*** Mode change: +RZi on editable-dog by editable-dog (server)
                 -freenode-connect- Due to the persistent ongoing spam, all new connections are being set +R (block messages from unidentified users) and will be scanned for vulnerabilities. This will not harm your computer, and vulnerable hosts will be notified.
                 *** CTCP VERSION request from freenode-connect (frigg@freenode/utility-bot/frigg) to editable-dog: 
04.10.18 23:01:14*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 11 days 4 hours 50 minutes 27 seconds ago
                 *** Names: editable-dog Deadhand koom stoopkid dmiles dadbod007[m] smoothpeter8[m] nilli[m] redfish64 nemesis1[m] reedhhw[m] @ChanServ koo5[m] genuinelyfx[m] nikaala[m] lexx_[m] Tamara_ cantora HMCf
                 *** End of /NAMES list.
04.10.18 23:01:17-Server Notice- *** Notice -- TS for #webofneeds changed from 1538708348 to 1365151743
#AutoNomic> 05.10.18 05:52:43*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 8 months 11 days 11 hours 41 minutes 57 seconds ago
                 *** Names: editable-dog stoopkid Deadhand koom dmiles dadbod007[m] smoothpeter8[m] nilli[m] redfish64 nemesis1[m] reedhhw[m] HMCf cantora Tamara_ lexx_[m] genuinelyfx[m] nikaala[m] koo5[m] @ChanServ
                 *** End of /NAMES list.
06.10.18 10:56:38*** Join: koom_ (~koom@89-24-57-233.nat.epc.tmcz.cz, (unauthenticated): realname)
06.10.18 10:59:12*** Quit: koom (~koom@89-24-61-16.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
06.10.18 11:41:46*** Quit: koom_ (~koom@89-24-57-233.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
07.10.18 00:29:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-pnygysffnkopzwiu) left #AutoNomic: Quit: Connection closed for inactivity
07.10.18 00:59:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lkdkwbucsyxfntci, stoopkid: stoopkid)
07.10.18 04:52:55<editable-dog>HMCf: ping
07.10.18 04:53:00<editable-dog>stoopkid: sup
07.10.18 04:58:52<nilli[m]> editable-dog:  hi
07.10.18 05:02:09<editable-dog>hi:)
07.10.18 06:16:49*** Join: nili (051d9825@gateway/web/freenode/ip.5.29.152.37, (unauthenticated): 5.29.152.37 - http://webchat.freenode.net)
07.10.18 07:06:51*** Quit: nili (051d9825@gateway/web/freenode/ip.5.29.152.37) left #AutoNomic: Ping timeout: 256 seconds
07.10.18 15:44:41<editable-dog>wow, we really do pass all lists/ tests
07.10.18 21:02:51<stoopkid> hrm...
07.10.18 21:03:43<stoopkid> is that just due to lack of test-cases?
07.10.18 21:04:03<stoopkid> i don't recall ever figuring out what the algorithm was supposed to be
08.10.18 00:39:39<editable-dog>i kept rewriting it until it made some sense
08.10.18 00:40:27<editable-dog>yea more testcases would help clarify things, and a faster reasoner to be able to run the longer ones
08.10.18 00:42:06<editable-dog>also, it seems curious that tbd/ours/equivalence.tau has 38224 results and still going
08.10.18 07:49:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lkdkwbucsyxfntci) left #AutoNomic: Quit: Connection closed for inactivity
08.10.18 09:07:54*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 252 seconds
08.10.18 10:03:05*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
08.10.18 12:27:39*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gtpoirhwrosvzjcj, stoopkid: stoopkid)
08.10.18 12:28:21<editable-dog>yo
08.10.18 12:28:37<stoopkid> sup
08.10.18 12:29:04<editable-dog>trying to understand DCGs again
08.10.18 12:46:56<editable-dog>well, trying to understand prolog
08.10.18 12:48:36<editable-dog>i was wondering if you'd still want to come to prague at some point?
08.10.18 13:17:16<stoopkid> possibly; i've got school now though, probably won't have much opportunity to go there for any extended period of time to work on this until next summer
08.10.18 17:14:16<HMCf> editable-dog: pong
08.10.18 17:14:36<HMCf> koom> after about 3 hours
                 <HMCf> koom> 338958 steps
08.10.18 17:14:37<HMCf> koom> HMCf, you said it should fail?
08.10.18 17:14:46<HMCf> well...
08.10.18 17:15:08<HMCf> under just the old euler semantics, yes
08.10.18 17:15:32<HMCf> but you might have actually implemented more?
08.10.18 17:15:56<HMCf> anyway, I am increasingly baffled by a few things, here...
08.10.18 17:16:09<HMCf> starting with what your step counting is
08.10.18 17:16:55<HMCf> these numbers are huge, and I've yet to find a way to count progress that even comes close to approaching them
08.10.18 17:18:38<HMCf> what exactly is it "doing 338958 of" on that example?
08.10.18 17:19:20<HMCf> even if i count by a silly metric like "pen strokes on paper while workibg by hand" i get nowhere near that
08.10.18 17:19:51<HMCf> *working
08.10.18 17:21:19<HMCf> anyway... in other news:
08.10.18 17:21:58<HMCf> redtt now has parametric HITs
08.10.18 17:24:08<editable-dog>its one step for var bind, one for unbind, / consts unification, + one step when a rule finishes
08.10.18 17:24:27<editable-dog>+ one for unification fail
08.10.18 17:30:10<editable-dog>what are the other bafflednessess?
08.10.18 17:38:44<HMCf> mostly just variations of that, "what is this thing actually doing" :-)
08.10.18 17:38:53<editable-dog>:)
08.10.18 17:39:37<HMCf> and why, whatever it is doing... it is clearly doing too much of it ;-)
08.10.18 17:40:09<editable-dog>i think ill make one more version cppout-style, then it will be faster, and easier to inspect
08.10.18 17:41:00<editable-dog>and maybe we'll even find a difference between what i think the pyin loop is doing and what its doing
08.10.18 17:43:19<editable-dog>but if you have time, you should run kbdbg2graphviz and look at the steps, and/or inspect(/query) the kbdbg output
08.10.18 17:46:52<editable-dog>as on doing too much...whenever rdf lists are involved, its just evil
08.10.18 17:48:02<editable-dog>if you have a query like "one" memberof ("one" "two"), the first triple of the query is ?l0 rdf:first "one"
08.10.18 17:49:11<editable-dog>and it comes up with a lot of nonsense, because you have maybe 3 rules, each with maybe two rdf:first triples in head, and a couple of rdf:first facts
08.10.18 17:50:47<editable-dog>and then it scraps all that when it comes to the rdf:rest in the query, or something to that effect happens
08.10.18 17:51:03<HMCf> even without lists it seems to be doing much too much, though
08.10.18 17:51:05<HMCf> heh
08.10.18 17:51:14<editable-dog>and only after its successfully built up a list it tries the memberof pred, etc
08.10.18 17:51:28<HMCf> anyway remind me how do I make the visualizer work again?
08.10.18 17:51:51<editable-dog>./pyin/kbdbg2graphviz.py runs/something/something.n3
08.10.18 17:52:38<editable-dog>thats the basic version, which chokes at about 10000 steps
08.10.18 17:53:38<editable-dog>then theres kbdbg2graphviz3.py, which can do a few tens of thousands, but you have to babysit your triplestore, or have a lot of ram
08.10.18 17:53:47<editable-dog>or have a better triplestore maybe
08.10.18 17:58:10<HMCf> what i get in runs is a .nq not a .n3?
08.10.18 17:58:32<HMCf> probably I'm doing something wrong :-)
08.10.18 17:58:56* editable-dog thinks
08.10.18 17:59:00<editable-dog>nah youre not
08.10.18 17:59:07<editable-dog>do you have the latest version?
08.10.18 17:59:24<editable-dog>i was switching it back and forth
08.10.18 17:59:26<HMCf> probably no
08.10.18 17:59:33* HMCf pulls
08.10.18 18:00:02<editable-dog>dont --recurse-submodules;)
08.10.18 18:00:22<HMCf> yup that was it
08.10.18 18:08:33<HMCf> ok, so what is *not* being visualized here....
08.10.18 18:08:36<HMCf> iow:
08.10.18 18:09:08<HMCf> which sorts of your 'steps' are not visually represented
08.10.18 18:09:10<HMCf> like
08.10.18 18:09:14<HMCf> in socrates
08.10.18 18:09:31<HMCf> steps 1 and 2 are the same.... steps 3 and 4 are the same...
08.10.18 18:10:35<HMCf> so what are "step 2" and "step 4" and can we make them visualized also?
08.10.18 18:10:42<HMCf> for example
08.10.18 18:10:43<editable-dog>i think these are when a binding fails, in the sparql version it renders them correctly
08.10.18 18:11:21<HMCf> for step2 can we have a big red arrow from #mortal to #man to show the match failure?
08.10.18 18:11:31<HMCf> or something
08.10.18 18:11:48<editable-dog>yeah, thats the idea, just got messed up in the old version over time
08.10.18 18:11:55<editable-dog>or something
08.10.18 18:13:04<editable-dog>sec
08.10.18 18:13:13<HMCf> and wat is step 11?
08.10.18 18:13:50<HMCf> i understand 9 and 10, 10 being like 2... but 11 is not the same as 2?
08.10.18 18:14:33<HMCf> (or else this shows failing a match as 2 steps?  Which could explain some of the inflated count I guess?)
08.10.18 18:14:35<editable-dog>2 secs
08.10.18 18:14:38<HMCf> ok
08.10.18 18:17:15<HMCf> it'd be really cool if this animated the trace in a single svg
08.10.18 18:17:22<HMCf> with smil or something
08.10.18 18:19:40<HMCf> also it looks like you almost have the euler step count 'hiding' in here somewhere, heh
08.10.18 18:20:17<HMCf> you do count the frames as they're created, obviously
08.10.18 18:20:21<editable-dog>ok pull, red arrows are back
08.10.18 18:20:43<editable-dog>well, i have a loop, euler has a loop...is about it, i think
08.10.18 18:20:54<editable-dog>nothing more
08.10.18 18:21:19<HMCf> basically euler's step count is just each frame access
08.10.18 18:21:29<editable-dog>i make an "empty" step when a frame is finished, sort of a goodbye pause
08.10.18 18:21:30<HMCf> so each attempted triple match, basically
08.10.18 18:22:15<editable-dog>well, ok
08.10.18 18:23:10<HMCf> it'd be kinda nice to be able to visualize that way as well
08.10.18 18:23:16<editable-dog>i just count atoms, not triples, and binds and unbinds and fails separately
08.10.18 18:23:38<HMCf> so iow on socrates steps 1 through 4 would all just display as step 2 does
08.10.18 18:23:52<HMCf> well
08.10.18 18:24:19<editable-dog>yeah gotcha
08.10.18 18:27:11<editable-dog>as on smil, i dont suppose svg is able to handle layouting of these boxes with variable-length texts and stuff?
08.10.18 18:27:44<editable-dog>maybe we should take it straight to the browser with css or something
08.10.18 18:30:44* HMCf shrugs
08.10.18 18:33:54<editable-dog>it might be fairly easy to read back each generated svg and add some animation tags
08.10.18 18:34:22<HMCf> not a big deal
08.10.18 18:35:12<HMCf> imo the only 'big deal' is getting a meaningful frame count, to compare against expectations
08.10.18 18:35:35<HMCf> that'll be the easiest way to find things going awry, imo
08.10.18 18:35:36<HMCf> heh
08.10.18 18:35:47<HMCf> anyway I gtg for now
08.10.18 18:36:41<editable-dog>so what is it again that euler does, one step for each (even just attempted and failed) triple unification?
08.10.18 18:37:56<HMCf> each pop from the queue, whether it results in a match or not
08.10.18 18:38:26<HMCf> line 46 in euler.hmc.js :-)
08.10.18 18:44:46<HMCf> als btw have you looked at eye.py yet?
08.10.18 18:44:54<editable-dog>no
08.10.18 18:44:59<HMCf> it is the new euler.js :-)
08.10.18 18:45:17<editable-dog>where?
08.10.18 18:45:20<HMCf> github/josd/eye/swap/eye.py
08.10.18 18:45:47<HMCf> have fun ;-)
08.10.18 18:45:50* HMCf bbiab
08.10.18 18:46:13<HMCf> probably about 2-4 hrs
08.10.18 18:46:28* editable-dog should already be sleeping
08.10.18 18:46:43<editable-dog>like, now
08.10.18 18:48:14<HMCf> stoopkid: btw... https://tinyurl.com/nyt-leto-ru
08.10.18 18:49:02<HMCf> one of the researchers mentioned here was in the original hmc crew... so I trust their analysis implicitly. :-|
08.10.18 18:54:20<stoopkid> 'Max described himself as "a John McCain Republican"'
08.10.18 18:54:54<stoopkid> 'self-appointed guardians of the Internet'
08.10.18 19:02:39<stoopkid> a lot of these folks are the same ones pushing the Guccifer 2.0 bs; so I'm inclined to distrust the analysis implicitly
08.10.18 19:04:49<stoopkid> kind of interesting to hear you exclaiming trust in a narrative pushed by the entrenched centrist establishment; rather out of character tbh
08.10.18 19:05:30<stoopkid> oh ye who trusts nothing
08.10.18 19:11:36<stoopkid> "The researchers I spoke with were careful to point out that the limits of D.N.S. data prevent them from going beyond speculation."
08.10.18 19:11:49<editable-dog>do we have some kind of html-wrapper-runner for this js file?
08.10.18 19:12:33<editable-dog>or do you run this in node?
08.10.18 19:24:15<stoopkid> HMCf: ill bbiab; feel free to pm if you wanna compare notes
08.10.18 19:24:58<stoopkid> editable-dog: should be an html wrapper right or was that euler-moz/dinf?
08.10.18 19:26:31<editable-dog>found it
08.10.18 19:27:41<editable-dog>thx
08.10.18 19:43:17<editable-dog>step count on socrates checks out, ..
08.10.18 19:45:03<editable-dog>einstein is still parsing lol
08.10.18 19:51:44<editable-dog>einstein will be a bit harder to compare, because most of the vars there we treat as existentials
08.10.18 19:53:24<editable-dog>+ given that each rdf list triple coming from each fact there becomes a rule...
08.10.18 19:53:42<editable-dog>its still building up the kb:)
08.10.18 20:11:34<editable-dog>well, i guess we cant compare the runs because we do rdf list triples and euler does nested dot terms
08.10.18 20:13:51<editable-dog>the main rule alone has 705 body terms, so 706 steps if i get this right
08.10.18 20:20:45<editable-dog>anyway, ive pushed the changes, can you find some testcase without lists?
08.10.18 20:48:10<editable-dog>you can run with --nolog true and it will still print steps
08.10.18 20:50:23<editable-dog>also, ive made it so that only vars without uppercase letters can be existentials, this makes it possible to meaningfully run einstein.n3, and doesnt seem to break any tests:)
08.10.18 20:50:31<editable-dog>einstein is still running
08.10.18 20:50:58<editable-dog>im just curious if it even finds the result
08.10.18 21:07:41<editable-dog>well, it broke clone-list
08.10.18 21:37:30<HMCf> stoopkid: I said nothing about trusting the narrative :-P
08.10.18 21:38:41<HMCf> (which is at least a vast oversimplification)
08.10.18 21:40:58<HMCf> stoopkid: p.s. I can't pm you :-)
08.10.18 21:41:56<stoopkid> hrm? did freenode lock pms except for registered nicks again? (haven't been paying attention)
08.10.18 21:45:25<stoopkid> wrt narrative, this is what i've found so far:
08.10.18 21:47:14<stoopkid> guccifer 2.0 is provably not what it's been claimed to be, and assuming they can't take the explanation any deeper, then i have to assume it's a false flag meant to distract from DNC leaks and bolster a war-mongering agenda
08.10.18 21:48:12<stoopkid> steele dossier appears to be the same; first they come out and say it's just info that's been collected by a truth-loving spy who just loves the US so much that he had to inform us
08.10.18 21:48:44<stoopkid> oh but then actually it was opposition research against trump, contracted by Washington Free Beacon
08.10.18 21:48:55<stoopkid> oh but wait not at all it was the DNC's own law firm Perkins Coie
08.10.18 21:49:20<stoopkid> some time between June 8th and June 20th, 2016 (Assange's announcement of DNC leaks was on June 12th, for reference)
08.10.18 21:50:17<stoopkid> oh but what about all those state election boards that got hacked! there we go
08.10.18 21:51:31<stoopkid> oh wait, several of the election boards denied this outright; and oh wait they were actually not hacked they were actually just port-scanned (if even that?)
08.10.18 21:51:43<stoopkid> oh but wait, 17 US intelligence agencies corroborated the story
08.10.18 21:51:54<stoopkid> so it must be true because y'know appeal to authority
08.10.18 21:52:01<stoopkid> oh wait, it was actually only 3
08.10.18 21:52:31<stoopkid> the CIA, NSA and DHS and DHS barely even corroborated (specifically they only corroborated with "moderate  confidence" if at all)
08.10.18 21:52:35<stoopkid> so trustworthy
08.10.18 21:53:03<stoopkid> oh but Mueller, he's a shining beacon of truth and patriotism, can't doubt him
08.10.18 21:53:09<stoopkid> #MuellerTime
08.10.18 21:53:22<stoopkid> oh right... WMDs... millions dead...
08.10.18 21:53:25<stoopkid> thanks Mueller
08.10.18 21:54:32<stoopkid> but the indictments!! that actually don't even allege Russian collusion
08.10.18 21:54:42<stoopkid> but the indicted Russians!! that will never stand trial
08.10.18 21:55:37<stoopkid> but the media!! that's constantly been 100% wrong about all these things while presenting them as gospel truth
08.10.18 21:59:06<stoopkid> oh and has CIA plants like Ken Dilanian pushing the narrative (and still being provably wrong about it)
08.10.18 22:00:34<stoopkid> but the IT security firms!! like the DNC-hired CrowdStrike? who helped to fabricate the Guccifer 2.0 thing?
08.10.18 22:01:35<stoopkid> and IT security firms makes a good segue back into the article you posted
08.10.18 22:01:55<stoopkid> can i independently verify the statements made? or is this another appeal to authority
08.10.18 22:05:44<stoopkid> could still be true, but as much as i disagree with Trump's policies I have to agree with him that this is actually a witch-hunt
08.10.18 22:06:20<stoopkid> he might actually be a witch, but so far the evidence doesn't hold up under scrutiny but we've taken this "he's guilty, now where's the evidence" standpoint
08.10.18 22:09:13<stoopkid> this is prior to asking the question: is this even important in the first place? did this have a serious impact on our elections?
08.10.18 22:09:23<stoopkid> did it have any impact on our elections?
08.10.18 22:17:13<stoopkid> afaict the idea that it did have an impact on our elections is hinged on 3 main things: 1) WikiLeaks exposed how badly the DNC was already interfering with our elections thus making everybody hate HRC even more (but let's point the finger at WL and Russia, yea totally); 2) a Russian-based click-bait farm convinced Americans to vote for Trump (despite the fact that they did political click-bait on all sides of the table;
                 <stoopkid> and let's not even consider that our social media platforms barely even try to hide the fact that they try to influence opinions); 3) state elections boards hacked to use voter data to do the targeted propaganda (oh wait that didn't even happen)
08.10.18 22:17:39<stoopkid> this is like... take QAnon, make it anti-Trump instead of pro-Trump, and give it better editors
08.10.18 22:22:57<stoopkid> i know i know i know: no politics
08.10.18 22:23:11<stoopkid> but i hardly even consider this politics this is just a bunch of lying criminals lying and committing crimes
09.10.18 01:56:40<HMCf> yah I think if we're careful we can stay on the good side of the no comment list
09.10.18 01:58:45<HMCf>  stoopkid> guccifer 2.0 is provably not what it's been claimed to be,
09.10.18 01:59:54<HMCf> one of the advantages of "hive mind entities" is that they can act in many different agencies... guccifer is "many things at once"
09.10.18 02:00:47<HMCf>  stoopkid> oh but wait not at all it was the DNC's own law firm Perkins Coie < *not* "not at all"... all of these hands and more fed that work
09.10.18 02:01:14<HMCf> so many hands that it is almost like someone was going around raising funds
09.10.18 02:01:34<HMCf> now who might've wanted to coordinate something like that?
09.10.18 02:02:20<HMCf> (both the "left" and "right" in the u.s. (lol) seem to be confused into thinking the russians were "for" a side.  That is nonsense...)
09.10.18 02:02:50<HMCf>  stoopkid> oh wait, it was actually only 3
                 <HMCf>  stoopkid> the CIA, NSA and DHS and DHS barely even corroborated (specifically they only
09.10.18 02:02:53<HMCf>            corroborated with "moderate  confidence" if at all)
09.10.18 02:03:32<HMCf> my understanding is that only one of the thre squirreled on confidence, the other two asserted high confidence
09.10.18 02:03:54<stoopkid> right, that would be the DHS
09.10.18 02:04:19<HMCf> not that that matters... it was hughly visible even to non-authorities that the internet was on fire
09.10.18 02:04:45<HMCf> heck, we even had an rutrollbot come into our chan, remember?
09.10.18 02:04:47<stoopkid> although even the CIA and NSA only asserted that it was "likely, with high confidence" where "high confidence" means "doesn't imply having any evidence proving it to be fact"
09.10.18 02:04:53<HMCf> (brazillian ip, heh heh heh)
09.10.18 02:05:49<HMCf> toopkid> but the indictments!! that actually don't even allege Russian collusion
09.10.18 02:05:52<HMCf> well
09.10.18 02:06:07<HMCf> they do, just not related directly to the election...
09.10.18 02:06:18<HMCf> but that is all also beside the point, heh
09.10.18 02:06:21<stoopkid> not really
09.10.18 02:06:29<HMCf> (which i'll come to)
09.10.18 02:06:57<HMCf> < stoopkid> but the IT security firms!! like the DNC-hired CrowdStrike? who helped to fabricate the Guccifer 2.0 thing?
09.10.18 02:07:07<HMCf> this one is kinda funny to me
09.10.18 02:07:19<HMCf> because it's more like... "most of us"
09.10.18 02:08:51<HMCf> there have been a lot of eyes on the rutrollarmy since long before trump came into the picture
09.10.18 02:09:16<HMCf> the internet caught fire before 2016
09.10.18 02:09:49<HMCf> < stoopkid> can i independently verify the statements made? or is this another appeal to authority
09.10.18 02:10:56<HMCf> which statements?  :-)  Some things *are* verifiable, like the meme steganography for example
09.10.18 02:11:51<HMCf> toopkid> could still be true, but as much as i disagree with Trump's policies I have to agree with him that this is actually a witch-hunt
09.10.18 02:12:50<HMCf> I'd believe it if it weren't for the involvement of banks... and especially the particular banks being involved in the particular ways that they evidently are...
09.10.18 02:13:15<HMCf> remember,everything you see these days... is a rich man's trick. ;-)
09.10.18 02:13:51<HMCf>  stoopkid> he might actually be a witch, but so far the evidence doesn't hold up under
09.10.18 02:13:54<HMCf>            scrutiny but we've taken this "he's guilty, now where's the evidence" standpoin
09.10.18 02:13:57<HMCf>  stoopkid> this is prior to asking the question: is this even important in the first place
09.10.18 02:14:00<HMCf>            did this have a serious impact on our elections?
09.10.18 02:14:09<HMCf> and here's where things get complicated...
09.10.18 02:14:56<HMCf> "what they actually did" is not what most seem to think... and is something very hard to even begin to explain to most people
09.10.18 02:15:15<HMCf> but again, i'll come to that..
09.10.18 02:16:04<HMCf> < stoopkid> afaict the idea that it did have an impact on our elections is hinged on 3 main things: 1) WikiLeaks exposed how badly the DNC was already interfering with our elections thus making everybody hate HRC even more (but let's point the finger
09.10.18 02:16:32<HMCf> the wikileaks incident is "basically unrelated"
09.10.18 02:17:52<HMCf> sur, it was leveraged by the rutrolls to further manipulate, but that just puts it on a looooong list including everything from late night tv to twitch to pokemon to pickup trucks
09.10.18 02:18:28<HMCf>       WL and Russia, yea totally); 2) a Russian-based click-bait farm convinced
09.10.18 02:18:31<HMCf>       Americans to vote for Trump (despite the fact that they did political click-bai
09.10.18 02:18:34<HMCf>       on all sides of the table;
09.10.18 02:19:17<HMCf> this is a little closer to relevance, but still misses the point
09.10.18 02:19:45<HMCf> yah, they did that, but that's not even unusual, countries have been doing this to eachother basically forever
09.10.18 02:20:10<HMCf> they just did it better and bigger, with novel applications of new tech
09.10.18 02:20:41<HMCf> and this is key... "why" and "how" did this happen *now*
09.10.18 02:20:57<HMCf> what made them able to do it so sucessfully this time?
09.10.18 02:21:20<HMCf> stoopkid> and let's not even consider that our social media platforms barely even try to hide the fact that they try to influence opinions); 3) state elections boards hacked to use voter data to do the targeted propaganda (oh wait that didn't eve happen)
09.10.18 02:21:35<HMCf> we can agree 3 isn't a thing that even happened
09.10.18 02:21:37<HMCf> well
09.10.18 02:21:50<HMCf> it hapened, but not in the way people seem to think
09.10.18 02:22:10<HMCf> there wasn't anything nee, unusual, or clever going on there...
09.10.18 02:22:32<HMCf> just computers malwared up by spears, like everywhere these days
09.10.18 02:22:44<HMCf> but that bit stuck inbetween 2 and 3 is important
09.10.18 02:23:06<HMCf> social media is basically *built* to facilitate this sort of manipulation
09.10.18 02:23:19<HMCf> ruasia knows this, and took advantage
09.10.18 02:23:30<HMCf> the trump team knows this, and took advantage
09.10.18 02:23:42<HMCf> now we get to the real ptoblem
09.10.18 02:25:12<HMCf> on the trump team side, they were able to be effective at it because they had good demographics to work from
09.10.18 02:25:38<HMCf> hacking an election board for demographics to work from is like... luls, no...
09.10.18 02:26:07<HMCf> so where do the rutrollteam's demographics come from?
09.10.18 02:26:49<stoopkid> the imagination of the USIC?
09.10.18 02:27:09<HMCf> er, wut? :-)
09.10.18 02:30:04<stoopkid> i can't tell that IRA did anything but post click-bait with no discernible political agenda except for getting clicks
09.10.18 02:30:26<stoopkid> what's the agenda here... foment discord?
09.10.18 02:31:10<HMCf> mainly, yes. :-|
09.10.18 02:31:28* stoopkid looks at the USGovt
09.10.18 02:31:44<stoopkid> hrm
09.10.18 02:32:13<stoopkid> so we have this shady group called the USGovt, who's known to foment discord globally
09.10.18 02:32:17<stoopkid> but yea Russian trolls
09.10.18 02:33:42<HMCf> well, that is one way to put it.... the u.s. got outstaged by having their own commercial media infrastructures turned on them in a new way
09.10.18 02:34:11<HMCf> from that perspective, it is understandable why there's hysterics about it, heh
09.10.18 02:35:14<stoopkid> whatever's understandable about this must be way over my head :)
09.10.18 02:35:24<HMCf> hrmm
09.10.18 02:36:54<HMCf> herr's another perspective
09.10.18 02:38:16<HMCf> if it was just for "getting clicks"... why fund it?  and why the stego?  and... clicks "to" *what*?
09.10.18 02:40:24<stoopkid> i'd probably know more about that if it wasn't conveniently used as justification for mass censorship
09.10.18 02:40:53<HMCf> well, that is another conversation entirely :-P
09.10.18 02:41:58<stoopkid> not really, it's one of the many motivations to fabricate & push this narrative
09.10.18 02:42:56<HMCf> maybe, but we've already sort of agreed to dismiss the narrative... so... that's not what we're even really talking about? ;-)
09.10.18 02:44:22<stoopkid> ok so, since we agreed to dismiss the narrative, then we can conclude that a huge number of US-based groups and individuals are now doing to us much worse than anything they ever claimed Russia did in the first place
09.10.18 02:44:37<stoopkid> or anything you're even claiming Russia did
09.10.18 02:45:00<HMCf> well, I'm not so sure what the metric would be to say which is "worse"
09.10.18 02:45:03<HMCf> in fact
09.10.18 02:45:08<HMCf> best I can tell...
09.10.18 02:45:17<HMCf> they're pretty comparable
09.10.18 02:45:40<stoopkid> here's my perspective on that: if they claim Russia is bad for doing misinformation, and then wage a way more extensive misinformation campaign against, then they're worse.
09.10.18 02:45:49<stoopkid> against us*
09.10.18 02:45:53<HMCf> (both are just products of bo?*s*s machines churning along, doing what they do)
09.10.18 02:46:01<stoopkid> especially because this is our own govt, not a foreign govt
09.10.18 02:46:14<HMCf> i'm not sure how to possibly gauge which is "more extensive"
09.10.18 02:46:41<stoopkid> lemme think about that
09.10.18 02:46:49* stoopkid considers his parents
09.10.18 02:47:09<HMCf> either in terms of data collection for the purpose of choosing the misinformation to deliver, or the dissemination and application of the misinformation itself
09.10.18 02:47:30<stoopkid> they religiously watch MSNBC (is MSNBC russian trolls?) who's constantly feeding them fabricated BS
09.10.18 02:47:36<stoopkid> for the purposes of fomenting discord
09.10.18 02:48:01<HMCf> afaict both go to absurd lengths in both respects.... and they'rr just approx two of many sug machines. :-|
09.10.18 02:48:14<HMCf> *such
09.10.18 02:50:11<HMCf> is the soros machinery huge?  Sure.  is boris huge?  Sure.  Which is huger?  Does *that* even matter? Are these even the two machines to "care about"?
09.10.18 02:50:28<HMCf> I'm not so sure, personally... :-)
09.10.18 02:52:12<stoopkid> i care about one thing and one thing only in all this: the truth
09.10.18 02:52:57<HMCf> the truth is it's all just rich man's tricks...
09.10.18 02:53:52<HMCf> the death of your capitalist democracy is just side effect. ;-)
09.10.18 02:55:25<HMCf> the truth is russia *did* push "clickbait" memes... with nothing to click on... spent good money doing it... and "somehow" were quite efficient at it
09.10.18 02:56:12<stoopkid> so basically what i'm getting is: "Trump got elected implies US citizens are mind-controlled by Russian trolls"
09.10.18 02:56:20<HMCf> the truth is that some banks were involved in this "somehow"
09.10.18 02:56:41<stoopkid> how?
09.10.18 02:56:45<stoopkid> specifically how
09.10.18 02:57:22<stoopkid> what did they do. why should i roll with this statement when literally everything else about "Russian collusion" narrative is falling to shambles?
09.10.18 02:58:17<HMCf> some banks are involved in anything the russian state does :-P
09.10.18 03:00:24<HMCf> opkid> so basically what i'm getting is: "Trump got elected implies US citizens are mind-controlled by Russian trolls"
09.10.18 03:00:33<HMCf> more like...
09.10.18 03:01:12<HMCf> people in the west are mind-controlled by a variety of rich people, competing for (literal) mindshare. :-|
09.10.18 03:01:25<HMCf> not just the west, ofc
09.10.18 03:01:26<HMCf> but
09.10.18 03:01:38<HMCf> that case is the topic at hand
09.10.18 03:02:36<HMCf> the events in the u.s. of 2016 to today are just one component of a much bigger picture
09.10.18 03:04:34<stoopkid> ok so
09.10.18 03:04:41<stoopkid> you assert that rich people are trolling everybody
09.10.18 03:04:50<HMCf> in a sense
09.10.18 03:05:22<HMCf> the banking industry for them is not like for you
09.10.18 03:05:52<stoopkid> so you assert that rich people are trolling everybody, and yet link a mccarthyist narrative from the new yorker which is owned by the Newhouse family
09.10.18 03:06:50<HMCf> well, no poor people published quotes from my former associate. :-)
09.10.18 03:07:23<HMCf> and if they did, they didn't make their way into my rss feeds
09.10.18 03:07:24<HMCf> so
09.10.18 03:07:26<HMCf> sorry?
09.10.18 03:07:28<HMCf> XD
09.10.18 03:07:55<HMCf> now wrt the mccarthyist narrative
09.10.18 03:07:57* HMCf shrugs
09.10.18 03:08:14<HMCf> sure, this publishing is a part of that machinery
09.10.18 03:09:18<HMCf> but in this case it happens to include statements from someone who I'm happy to say I can trust. :-)
09.10.18 03:09:27<stoopkid> that makes one of us
09.10.18 03:11:45<HMCf> interestingly, everything he ("Leto") did have to say there... i had heard even before the 2016 election happened
09.10.18 03:12:55<HMCf> so i'm inclined to say, everything else aside, that this suspicious traffic was real, and suspicious. :-|
09.10.18 03:13:42<stoopkid> let's assume it's real and suspicious
09.10.18 03:14:00<stoopkid> how is this anything but a drop in the bucket compared to the outright hoax being committed by USG against its own citizens?
09.10.18 03:15:01<HMCf> prior hmc collective members didn't get published making statements about the clinton's nonsense :-)
09.10.18 03:15:04<HMCf> if they had...
09.10.18 03:15:10<HMCf> I would've linked that.
09.10.18 03:15:13<HMCf> :-)
09.10.18 03:15:36<HMCf> both of these...
09.10.18 03:15:47<HMCf> are drops in the bucket...
09.10.18 03:17:47<HMCf> but all of the bucket's contents seem to come from the same sorts of sources:
09.10.18 03:17:58<HMCf> rich people and their banks
09.10.18 03:18:39<HMCf> banking for the elite and elect is not like banking for you
09.10.18 03:19:25<HMCf> if you are wealthy enough, the primary service of the bank is to make sure laws don't matter to you...
09.10.18 03:20:11<HMCf> this is why modern corporate structures are the complex international beasts that they are today, for example
09.10.18 03:20:45<HMCf> and why money laundering is rampant at unprecedented scales
09.10.18 03:21:24<stoopkid> do these prior HMC collective members have their own site where they publish their assertions? i take it that if they do have one you aren't aware of it
09.10.18 03:22:03<HMCf> afaik their assertions are usually initially published.... here... on irc.
09.10.18 03:22:06<HMCf> :-|
09.10.18 03:22:50<stoopkid> where
09.10.18 03:23:27<stoopkid> and if they know all this, why are they going through the new yorker and having their statements twisted into a mccarthyist narrative?
09.10.18 03:23:29<HMCf> and we are only talking about the one person, not memberS :-P
09.10.18 03:25:39<HMCf> er, they didn't originally... this is juat their first interview about it.... they originally took the findings to the fbi, etc... and details were published in the times etc several times over the past 2 years...
09.10.18 03:26:00<stoopkid> this doesn't raise my confidence level
09.10.18 03:26:39<HMCf> who would you have preferred they take it to, exactly?
09.10.18 03:26:44<HMCf> cnn? msnbc?
09.10.18 03:26:46<HMCf> fox?
09.10.18 03:27:08<stoopkid> i'd be fine if they just had a simple blog that they managed themselves
09.10.18 03:28:29<HMCf> isn't that just the same problem as:
09.10.18 03:28:31<HMCf> HMCf> well, no poor people published quotes from my former associate. :-)
09.10.18 03:28:32<HMCf> HMCf> and if they did, they didn't make their way into my rss feeds
09.10.18 03:29:07* HMCf gtg soon
09.10.18 03:29:56<stoopkid> so they're expert IT specialists who can crack a global Russian meddling case, but can't set up a simple blog with RSS, and you'd have your RSS feed alerting to the New Yorker but not the blog of your former associate that you trust ?
09.10.18 03:31:10<HMCf> why would i read his blog when i can just talk to him directly?
09.10.18 03:31:19<HMCf> but that is pretty tangental, no?
09.10.18 03:31:45<stoopkid> not really, being able to cite sources is pretty important
09.10.18 03:31:56<stoopkid> otherwise it's just... well... trolling :)
09.10.18 03:32:20<HMCf> er, he *is* the source here
09.10.18 03:32:42<stoopkid> for you
                 <HMCf> he is not a writer, not a journalist, and i'm sure he's busy enough in life
09.10.18 03:32:59<stoopkid> now you and the New Yorker are the source for me
09.10.18 03:33:11<HMCf> investigating APT activity is not his dayjob, it is an unpaid hobby
09.10.18 03:33:23<stoopkid> except you only claim indirect knowledge and the New Yorker article is just a bunch of unverifiable appeal to authority
09.10.18 03:33:24<HMCf> one I share, as you know :-P
09.10.18 03:33:32<HMCf> you expect me to start a blog, too>
09.10.18 03:33:33<HMCf> ?
09.10.18 03:34:21<HMCf> if so, sorry, but I'm going to have to disapoint you on that one :-P
09.10.18 03:37:42<stoopkid> if their goal is to persuade me of their claims, then yes i want their claims to be citable.
09.10.18 03:38:37<stoopkid> right now they're only citable for me from the New Yorker, and that doesn't do much to help their case
09.10.18 03:38:52<HMCf> and even if I/he did, what would that change?  We're still just pseduononymous monikers on your screen... I'm not going to dox him or myself to try to convince you... and even if I did, then what?
09.10.18 03:40:19<stoopkid> i don't need to know your real identities, for example idk Adam Carter's real identity and yet he manages to convince me of both his arguments as well as his own credibility
09.10.18 03:40:25<HMCf> you call him up and he shows you the same copy of the dns records that we already have screenshots/snippets from?  you still cant verify aything, its not like iana is going to let you factcheck them against tld server logs
09.10.18 03:40:59<HMCf> so you can either take their word that the lookup records are real, or not
09.10.18 03:41:02* HMCf shrugs
09.10.18 03:42:13<HMCf> personally, as I said, I trust the guy implicitly in such matters... if he says the logs are real then I assume the logs are real.
09.10.18 03:42:47<stoopkid> i didn't see any screenshots/snippets in the article; did i miss something?
09.10.18 03:43:16<HMCf> they were in earlier articles
09.10.18 03:43:20<HMCf> sec
09.10.18 03:44:29<HMCf> www.ljean.com/NetworkRecords
09.10.18 03:45:36<HMCf> www.ljean.com/NetworkData.php
09.10.18 03:48:08<stoopkid> alright cool; this is a new resource for me. i'll dig in and let you know what i make of it
09.10.18 14:01:05<editable-dog>HMCf: is there a tool to translate n3 into the euler js format?
09.10.18 19:10:22<HMCf> editable-dog: i'd just use euler.py instead?  it has a (limited) n3 parser
09.10.18 19:23:01<stoopkid> HMCf: so...
09.10.18 19:23:51<stoopkid> that NYT article points out how when Tea Leaves and that Slate article first came out, most everybody else who reviewed it was like "uhhh no not at all"
09.10.18 19:24:29<stoopkid> and then it doesn't really refute the arguments against the narrative that were pointed out by these critics
09.10.18 19:25:02<stoopkid> and then at the very end it sort of walks itself back and says "well.. yea we actually don't know anything this is all just speculation"
09.10.18 19:25:23<stoopkid> while failing to acknowledge the vast amount of misinformation that's already surrounded this RussiaGate thing
09.10.18 19:25:43<stoopkid> also i think it accidentally identifies Max as Tea Leaves?
09.10.18 19:27:59<stoopkid> so i have to assume this is bs unless you have a more compelling evidence-based argument besides "i trust leto implicitly"
09.10.18 19:31:31<stoopkid> well, let me rephrase that: the article *is* bs; any journalist who hears another highly tenuous and circumstantial RussiaGate theory and whose first question isn't "Are you another one of the hoaxers?" is either an outright bullshitter or is so blinded by bias that they'll run it anyway without skepticism. and for the same reason i have to assume the *sources* are also bs unless you have etc...
09.10.18 19:38:58<editable-dog>HMCf: on a second thought, i dont see the point of comparing step counts of anything beyond simple testcases with only universals
09.10.18 19:40:07<editable-dog>click through any visualization of anything with lists and youll undertand all the false paths we currently take
09.10.18 21:43:39*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
                 *** Join: cantora (sid147800@gateway/web/irccloud.com/session, (unauthenticated): cantora)
09.10.18 21:45:08*** Join: redfish64 (~tim@45.32.52.10, redfish64: Unknown)
09.10.18 21:45:50*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gtpoirhwrosvzjcj, stoopkid: stoopkid)
09.10.18 21:47:12*** Join: HMCf (~root@37.153.110.58, (unauthenticated): root)
09.10.18 21:47:41*** Join: ChanServ (ChanServ@services., (unauthenticated): Channel Services)
                 *** Mode change: +o ChanServ    on #AutoNomic by moon.freenode.net (server)
09.10.18 21:51:29*** Quit: cantora (sid147800@gateway/web/irccloud.com/session) left #AutoNomic: Changing host
                 *** Join: cantora (sid147800@gateway/web/irccloud.com/x-wynufwijlvadletv, (unauthenticated): cantora)
09.10.18 21:51:54*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/session) left #AutoNomic: Changing host
                 *** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-wgzjqkpraepwihhe, (unauthenticated): @reedhhw:matrix.org)
09.10.18 23:00:16<HMCf> stoopkid:
09.10.18 23:00:19* HMCf shrugs
09.10.18 23:00:23<HMCf> :-)
09.10.18 23:05:57<stoopkid> exactly
09.10.18 23:44:01<HMCf> stoopkid: here is what I find funny...
09.10.18 23:45:18<HMCf> let's assume you're beyond entirely correct, russia did nothing, maybe might as well not even exist as a nation, and everything they've said about it is mabipulative misinfo...
09.10.18 23:46:15<HMCf> then who is the antagonist of the story?  Some finance industry (+"charity why not") folk, right?
09.10.18 23:47:30<stoopkid> mmm...
09.10.18 23:47:49<stoopkid> idk these days i feel like the shorter list would be who's a protagonist here
09.10.18 23:48:34<stoopkid> finance industry couldn't do all this without a bunch of shills and lackeys
09.10.18 23:48:45<HMCf> now let's assume you're 100% wrong, money laundering and ukraine are just the tip of the iceburg, and a cabal of oligarchs are manipulating the whole world, as the levers of putin and a few others in similar regime...
09.10.18 23:49:29<HMCf> who's the antagonist here?  Just some different finance industry (+"charity why not") folk. :-|
09.10.18 23:50:10<HMCf> either way it is all enabled and facilitated by some banks. XD
09.10.18 23:50:42<HMCf> on that note:
09.10.18 23:51:07<HMCf> editable-dog: it should still be meaningful to compare anything without lists, right?
09.10.18 23:51:34<HMCf> or with not-rdf:first/rest lists
09.10.18 23:51:50<stoopkid> "either way it is all enabled and facilitated by some banks. XD" well... yes/no
09.10.18 23:52:47<HMCf>  stoopkid> mmm... stoopkid> idk these days i feel like the shorter list would be who's a protagonist here
09.10.18 23:53:00<HMCf> lwt me know if you find any? XD
09.10.18 23:53:04<HMCf> *let
09.10.18 23:54:15<HMCf> dototd: we couldn't find a protagonist so we built a simulacrum of one
09.10.18 23:56:42<stoopkid> no idea, all i know is disinformation is driving me crazy, and worse, driving everyone around me crazy
09.10.18 23:58:28<HMCf> on a not unrelated note, i hear your VP announced "cold war II" today :-P
09.10.18 23:58:54<stoopkid> wow did he just start paying attention
09.10.18 23:59:43<stoopkid> both the Rs and Ds seem to have succeeded in manufacturing near 100% consent to it...
09.10.18 23:59:55<HMCf> this one's already made cold war 1 look like a trivialty, eh?
10.10.18 00:00:59<stoopkid> idk, cold war 1 was over before i was born, from what i understand it was pretty brutal though
                 <HMCf> welcome to the age of big data and the dawn of the era of A.I.  ;-)
10.10.18 00:01:17<HMCf> I hope we survive it. :-|
10.10.18 00:01:45<HMCf> we're gonna need some sort of big data bomb.
10.10.18 00:01:57<HMCf> or maybe its a car
10.10.18 00:02:19* stoopkid looks around
10.10.18 00:02:27<stoopkid> yea most likely a bomb
10.10.18 00:02:49<HMCf> there's still only the one way to find out!
10.10.18 00:04:07<stoopkid> well, tbl at least seems to think car
10.10.18 00:04:39<HMCf> have you played with the inrupt stuff yet?
10.10.18 00:05:18<HMCf> frankly I had higher hopes when I first heard the premise... feels to me like they punted in some areas ;-)
10.10.18 00:05:37<stoopkid> no, reviewing koo's recent work is higher up on the list for me
10.10.18 00:05:55<HMCf> good!
10.10.18 00:05:57<HMCf> :-P
10.10.18 00:06:35<HMCf> any thoughts on *that* so far?
10.10.18 00:08:04<stoopkid> not really, i need to look at it, i'm mostly just confused as i thought i had made test cases that should have failed, but then koo said he made some tweaks until it seemed sensible so... idk?
10.10.18 00:09:16* stoopkid needs to clear his mind and get over his latest bout of political disillusionment
10.10.18 00:09:43<HMCf> all I can say so far is that the semantics are either a superset of what is actually strictly necessary (which would be great, ofc) or if they are just plain wrong, heh
10.10.18 00:10:18<HMCf> *, if not,
10.10.18 00:10:40<stoopkid> i had never figured out what the algorithm should be
10.10.18 00:10:47<stoopkid> i understand parsimonious chase but it's forward chaining
10.10.18 00:11:10<stoopkid> i have a vague idea of "just reverse it and the parsimoniousness will end up in the EP-check" but...
10.10.18 00:11:17<stoopkid> that's as far as i got



10.10.18 00:11:24* HMCf nods
10.10.18 00:12:09<HMCf> I might try to modify euler.py with alias tracking, but it would need a few other improvements first
10.10.18 00:12:51<HMCf> it is hilarious to me that it popped up, after jos' response to you about euler.js not so long ago
10.10.18 00:13:36<HMCf> btw have you been following what the redprl guys have been up to?
10.10.18 00:14:20<HMCf> I'm excited about the secret features coming in, hehe
10.10.18 00:15:08<stoopkid> not really; honestly i haven't been doing much for the last month but my school-work and marveling at how little journalistic integrity is out there right now
10.10.18 00:15:38<stoopkid> and coming to terms with how duped i've been for so long about so many things
10.10.18 00:16:46<HMCf> well
10.10.18 00:16:54<HMCf> check it out some time ;-)


10.10.18 04:24:58<nilli[m]> Let me describe it to you in plain words and very  low-  tech terms as was simply put buy some military expert here in the hurt of it. ten a few words how is connected to currency wars
10.10.18 04:27:24<nilli[m]> but first let me remind you that people who hold a lot of power are often not very smart. their plotting ability is far less than thous who read it into their actions
10.10.18 04:28:46<nilli[m]> in fact I suspect that the more uncoordinated these actions are, the more the seem that way
10.10.18 04:32:09<nilli[m]> much like what  the consensus regarding the bitcoin ledger would appear to an outsider who do not understand the mechanism
10.10.18 04:35:41<nilli[m]> but lets start with the very simple facts these missiles  hizbala have  in Lebanon , and now that new Russian guided missiles which just arrived to Syria.
10.10.18 04:37:52<nilli[m]> in fact according to that military source it is the numbers of these missiles in Lebanon that already force a sort of cold war for some time.
10.10.18 04:39:24<nilli[m]> but the Syrian missiles development is putting in on a different level
10.10.18 04:42:18<nilli[m]> it is the Russian direct involvement in helping Iran gain more power in the region using military force!!!
10.10.18 04:42:57<nilli[m]> and that is where the money is ...
10.10.18 04:44:59<nilli[m]> our central banks, nation based currencies are a combination of two factors . natural resource (mostly energy) and military force
10.10.18 04:52:23<nilli[m]> I never conducted a full investigation into the historical details in terms precise time frame but pero dollars and the golf-war are a markers of that era.
10.10.18 04:55:33<nilli[m]> the 2008 enormous amount of dollars created after the economic crises  is prompted up by the total control of USA on the middle east and its energy resources
10.10.18 04:59:34<nilli[m]> all the energy is  entering the economy using dollars,  All investment  firms  are invested in these energy companies and relay on their future long term contacts . all to be payed using USA dollars
10.10.18 05:00:37<nilli[m]> and in order to enforce that USA need a military control over the middle east
10.10.18 05:06:27<stoopkid> that's why even bernie sanders supports middle-eastern interventionism :)
10.10.18 05:06:31<nilli[m]> take a look at the gas reserve in the world . between iran and Russia they hold over 1/3 of that.  just think what it can do to the Rubble  as the world is pressed by climet  change into moving to that more clean energy
10.10.18 05:07:48<nilli[m]> yes stoopkid. all your ( actually i am an american too) pension funds relay on these constructs
10.10.18 05:09:28<nilli[m]> the most loving peace intended president have to first make sure your parents pension will hold . his first obligation is for the usa citizens
10.10.18 05:10:11<nilli[m]> now let me tell you of a little interesting fact
10.10.18 05:10:42<nilli[m]> Angela Markel just had a visit in israel
10.10.18 05:14:13<nilli[m]> while a contract between Noble-energy  and  Egypt was signed regarding moving gas between the two . eventually is is that gas that is amid to make his way to Germany , petro-gas
10.10.18 05:15:03<nilli[m]> remember the Russia can supply all that  need .... but they will not ask for dollars ....
10.10.18 05:16:54<nilli[m]> as one of my friend noted... the missiles in Syria and Angela visit are closely related.
10.10.18 05:20:39<nilli[m]> There is also another huge "corruption" investigation regarding  German submarines contracted to Israel. the numbers of these  are not making any sense unless are to serve to protect much of the gas fields in the Mediterranean
10.10.18 05:20:57<nilli[m]> lots of very interesting details there.....
10.10.18 05:21:51<nilli[m]> So now lets talk about a solution
10.10.18 05:23:21<nilli[m]> thou this story is so amazing  considering how the evangelist and religion now play such a great role in it all
10.10.18 05:25:02<nilli[m]> the embassy in Jerusalem... and all that.... perfect story
10.10.18 05:26:17<nilli[m]> which is an evident that nothing is a conspiracy ...  only logical
10.10.18 05:27:00<nilli[m]> it is the concentration of interests around very few powerful successful ideas
10.10.18 05:29:44<nilli[m]> the system of debts as a way to inject money to the economy is brilliant and central banks are very successful at that through the incentives of interest for the institutes (commercial banks)  and huge bonuses  for individuals
10.10.18 05:32:38<nilli[m]> the political system of democracy is hugely successful to make people assume their power of choice in elections, thus take the edge of any political revolution
10.10.18 05:34:39<nilli[m]> "free market" is hugely successful in making people feel like they are free to choose. and also make them very busy in choosing  the the things that are less important
10.10.18 05:37:06<nilli[m]> that combination of these three powers ,democracy, central banking and consumerism are shaping our world.... no conspiracy involved  , only human nature.
10.10.18 05:37:28<nilli[m]> and free choice
10.10.18 05:39:21<nilli[m]> .... at some level of consciousness
10.10.18 05:39:49<nilli[m]> which bring us back to currency
10.10.18 05:40:19<nilli[m]> people do not understand how they give their currency its power
10.10.18 05:40:52<nilli[m]> and they sure do not understand how much it in their power to change it
10.10.18 05:43:45<nilli[m]> all currency power is based on credit , and it is the choice of each individual as credit consumers  to choose  their credit provider which can change the entire plot in our story.
10.10.18 05:44:07<nilli[m]> bu t for that they need to understand that as a choice
10.10.18 05:44:42<nilli[m]> and for that we need a powerful cryptocurrency market
10.10.18 05:45:33<nilli[m]> and we need for coin issuers to make huge amount of money
10.10.18 05:45:55<nilli[m]> and we need to financial industry to be invested in it
10.10.18 05:46:04<nilli[m]> and ETF
10.10.18 05:46:42<nilli[m]> thus everyone pensions
10.10.18 05:48:16<nilli[m]> Also having any major crypto based compony like a big miner traded will have the same effect
10.10.18 05:53:36<nilli[m]> Also making google, facebook and other companies who hold our personal information big and powerful is our most defective  against  device our own democracies  for now.
10.10.18 05:54:11<nilli[m]> they serve as by being centralized as for now until the banks will fall
10.10.18 05:55:04<nilli[m]> but no worry , we are well into the age of free competition over our personal data
10.10.18 05:56:00<nilli[m]> our national currency are not the sole owner of a valuable data we produce
10.10.18 05:56:34<nilli[m]> everyone is now trying to get their hand on it
10.10.18 05:58:14<nilli[m]> we become the consumers of holding the power of our personal data by making the choice of social network and search engine.  choices we make everyday many times
10.10.18 05:59:39<nilli[m]> once we will realize that power and once these companies will translate it to credit we can use, the revolution will be complete
10.10.18 05:59:56<nilli[m]> on the way we will see concentrated powers that appears threatening
10.10.18 06:03:31<nilli[m]> but we are already deep into the race for true free market economy in which our production power and our data is that which the providers are  trying to get us choose them to service us .
10.10.18 06:06:51<nilli[m]> bottom line. forget politics concentrate on development and communicating on the right platforms so those who can understand it will market it to the rest of the world
10.10.18 06:07:32<nilli[m]> the rest of the work will be done by the ones we may now consider enemies.
10.10.18 06:16:37<nilli[m]> .... and just be good to the people you love... the entire  scheme fail if we fail to care an love thous who are close to us.  the logic of that mechanism and the incentives structure is based on love.
                 <nilli[m]>    . and just be good to the people you love... the entire  scheme fail if we fail to care an love thous who are close to us.  the logic of that mechanism and the incentives structure is based on love.
10.10.18 07:23:47<editable-dog><HMCf> editable-dog: it should still be meaningful to compare anything without l
10.10.18 07:23:49<editable-dog>ists, right?
10.10.18 07:24:09<editable-dog>anything that pyin doesnt handle through existentials and euler doesnt handle through compound terms
10.10.18 07:24:33<editable-dog>so, anything with just universals and atoms
10.10.18 07:25:42<editable-dog><HMCf> or maybe its a car
10.10.18 07:25:45<editable-dog>lol'd
10.10.18 07:30:19<editable-dog><stoopkid> not really, i need to look at it, i'm mostly just confused as i thoug
                 <editable-dog>ht i had made test cases that should have failed, but then koo said he made some tweaks until it
10.10.18 07:30:27<editable-dog>seemed sensible so... idk?
10.10.18 07:30:32<editable-dog>oops
10.10.18 07:30:40<editable-dog>.
10.10.18 07:35:41<editable-dog>". These rules, called ∀∃-rules, have the same logical form as tuple-generating
                 <editable-dog>dependencies in databases and as conceptual graph rules. The aim of this paper is to
                 <editable-dog>provide a clearer picture of the frontier between decidability and non-decidability of
                 <editable-dog>reasoning with these rules. Previous known decidable classes were based on forward
                 <editable-dog>chaining. On the one hand we extend these classes, on the other hand we introduce
10.10.18 07:35:42<editable-dog>decidable classes based on backward chaining."
10.10.18 07:35:50<editable-dog>https://ac.els-cdn.com/S0004370211000397/1-s2.0-S0004370211000397-main.pdf?_tid=d8c03582-78b7-412a-b0ad-75be35dffa80&acdnat=1539171431_772902ca179d1db04ab60353e276de7a
10.10.18 07:35:58<editable-dog>did you check out that paper yet?
10.10.18 07:36:31<editable-dog>(dont ask if pyin is modeled after it, it isnt..)
10.10.18 11:50:34<HMCf> editable-dog> anything that pyin doesnt handle through existentials and euler doesnt hand through compound terms
10.10.18 11:51:20<HMCf> compound terms, yes... but existentials is sort of "part of the question at hand" no?
10.10.18 11:55:47<HMCf> maybe now that you (possibly) have a bit of a handle on how existentials/lists should be working we should take a step back from univar/pyin... go back to basics, confirm understanding on a simpler/cleaner (and less "hacked on for years") code than univar has become?
10.10.18 11:56:04<HMCf> iow maybe we should start all over again... :-)
10.10.18 12:17:15<nilli[m]> stoopkid it keeps evolving https://www.israelnationalnews.com/News/News.aspx/253038
10.10.18 12:19:17*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gtpoirhwrosvzjcj) left #AutoNomic: Quit: Connection closed for inactivity
10.10.18 12:27:42<nilli[m]> and Mohammad bin salman. looks like an attempted to get saudi Arabia in trubble with trump. Erdugan is looking to join with iran and Russia . all in the same narrative.
10.10.18 12:27:51<nilli[m]> https://www.aljazeera.com/news/2018/10/erdogan-closely-case-saudi-critic-jamal-khststststsashoggi-181007143237024.html
10.10.18 12:28:05<nilli[m]> all is currency wars
10.10.18 12:30:19<nilli[m]> none is politics :)
10.10.18 12:51:51<editable-dog>well, existentials are a part of the question, but does euler do them?
10.10.18 12:53:02<editable-dog>sure, lets try to confirm understanding
10.10.18 13:08:31<HMCf> editable-dog: euler.js/py do not, but the prolog eye does
10.10.18 13:16:25<editable-dog>hmm
10.10.18 13:16:33* editable-dog is feeling lazy
10.10.18 13:17:06<editable-dog>btw can you point me to euler.py again? i cant track it down
10.10.18 13:19:18<HMCf> github/josd/eye/swap/
10.10.18 13:24:22<editable-dog>eye.py?
10.10.18 13:27:38<HMCf> yup
10.10.18 13:29:11<editable-dog>oh
10.10.18 14:02:07<editable-dog>as on starting over, i want to make another cppout-style thing
10.10.18 14:26:07*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uqrtacgbltrspeda, stoopkid: stoopkid)
10.10.18 14:45:47<HMCf> editable-dog: yes, agree
10.10.18 14:46:55<editable-dog>about feeling lazy?
10.10.18 14:46:59<HMCf> basically univar cppout but as small/simple/straigtforward as possible while incorporating "what we now know that we didn't before" is how I'm picturing
10.10.18 19:13:23<editable-dog><stoopkid> i have a vague idea of "just reverse it and the parsimoniousness will
                 <editable-dog> end up in the EP-check" but...
10.10.18 19:13:57<editable-dog>doesnt ring any bells for me, maybe if i reviewed the paper again
10.10.18 19:16:11<editable-dog>i was only concerned with implementing the vague idea that an existential will store, at yield time, the bindings of all the vars in the rule, and when another rule from the same original rule in invoked, it will just use these original bindings and yield 
10.10.18 19:16:23<editable-dog>is
10.10.18 20:03:47<stoopkid> editable-dog: you know how the regular chase algorithm works right, just basic forward-chaining, and we know how to handle existentials just fine in that case, at the expense of running into infloops
10.10.18 20:05:01<stoopkid> regular chase *can* terminate, if we don't get any new results in a chase step then it's done
10.10.18 20:05:27<stoopkid> so this is sort of like ep-check, but for forward-chaining
10.10.18 20:07:10<editable-dog>err, whats the name of the chase pdf again?
10.10.18 20:07:24<stoopkid> just a sec lemme find that
10.10.18 20:08:52<editable-dog>mm i think its in the private repo
10.10.18 20:09:19<stoopkid> "HEX-programs with existential quantification"
10.10.18 20:09:22<stoopkid> https://www.researchgate.net/profile/Christoph_Redl/publication/258513947_HEX-Programs_with_Existential_Quantification/links/00b7d5394a702b3d84000000/HEX-Programs-with-Existential-Quantification.pdf?origin=publication_detail
10.10.18 20:09:24<stoopkid> probably
10.10.18 20:10:20<stoopkid> oh wait that's not it
10.10.18 20:10:25<editable-dog>yea
10.10.18 20:12:58<editable-dog>theres the "theory of joins" paper
10.10.18 20:13:20<stoopkid> https://www.mat.unical.it/kr2012/shy.pdf
10.10.18 20:15:03<stoopkid> page 4; notation sucks but at least the paper explains everything
10.10.18 20:16:13<stoopkid> so line 5 in the chase algorithm there is basically like the forward-chaining equivalent of an ep-check, or at least that's how i'm thinking of it
10.10.18 20:16:23<stoopkid> and HMC *nods* about it so, i guess that's a good sign
10.10.18 20:17:42<stoopkid> minor change there, switching the substitution check with a "homomorphism" check, we get parsimonious chase  & guaranteed termination
10.10.18 21:06:47*** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-fvcugypuiqprtilt) left #AutoNomic: Ping timeout: 250 seconds
10.10.18 21:07:05*** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-jvvqgkxkcbrqfzga, (unauthenticated): @nemesis1:matrix.org)
10.10.18 21:37:56*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-wgzjqkpraepwihhe) left #AutoNomic: Ping timeout: 252 seconds
10.10.18 21:37:57*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pynlhrfrioavrnyy) left #AutoNomic: Ping timeout: 252 seconds
10.10.18 21:37:58*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-gqkvqtukaauymilq) left #AutoNomic: Ping timeout: 252 seconds
10.10.18 21:44:48*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-hawfeyuixblvklkv, (unauthenticated): @reedhhw:matrix.org)
10.10.18 21:45:59*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-qrttcdpuyzxqqsfm, (unauthenticated): @koo5:matrix.org)
10.10.18 21:46:56*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-kecunjcbvaewgysl, (unauthenticated): @genuinelyfx:matrix.org)
10.10.18 21:57:44*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-hawfeyuixblvklkv) left #AutoNomic: Ping timeout: 252 seconds
10.10.18 22:09:52*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-zfqqkxquhatdezmo, (unauthenticated): @reedhhw:matrix.org)
11.10.18 11:14:03<koo5[m]> Still gotta review that paper, i forgot the what exactly was the idea
11.10.18 11:14:37<koo5[m]> But whats the testcase that you thought should fail stoopkid?
11.10.18 13:14:27<HMCf> redtt's recursion scheme can become quite mindbending pretty quickly
11.10.18 13:15:31<HMCf> but it does make termination check very trivial compared to stuff like agda/idris, heh
11.10.18 14:31:54<nilli[m]>  I got a respond from bitcoin forum but is just  telling me to sign a message. I dont think they will make any effort beyond . but I guess you already know that HMCf
11.10.18 14:33:18<nilli[m]> end of that game :)
11.10.18 14:36:22<nilli[m]> meanwhile having some really interesting wist related to P/NP as a result of the things I was nagging you guys about . but I spare you from it until getting better idea
11.10.18 14:38:55<nilli[m]> if anything will come out of it that will be really really funny
11.10.18 14:42:38<nilli[m]> anyway at the moment I dont at all understand what koo i working on  so .... see you sometime later
11.10.18 14:53:38<HMCf> nilli[m]: sign a message with what key?
11.10.18 16:07:29<nilli[m]> Q: My account was hacked! What do I do?
11.10.18 16:07:30<nilli[m]> A: See this thread: https://bitcointalk.org/index.php?topic=497545.0. If you don't know how to sign a message, see this thread made by shorena: https://bitcointalk.org/index.php?topic=990345.0
11.10.18 16:09:19<nilli[m]> that is what they  send me
11.10.18 16:09:58<nilli[m]> not that I could understand any of it
11.10.18 16:12:00<nilli[m]> and ofc I made another account  so i can talk to anyone there and used the same email address.
11.10.18 17:08:54<HMCf> so sign a message with the omni wallet key that you issued your disneycoin from or something?
11.10.18 18:06:29*** Quit: nilli[m] (nillimatri@gateway/shell/matrix.org/x-zhpenxgkeizxiezo) left #AutoNomic: Ping timeout: 250 seconds
11.10.18 18:06:38*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-dzihfzsyuivbmpng, (unauthenticated): @nilli:matrix.org)
11.10.18 18:51:47<editable-dog>eye is whacky
11.10.18 19:57:00<editable-dog>doesnt seem like trying to run it on random testcases is a viable way to understand its idea of existentials
11.10.18 23:21:53*** Join: typlian5 (~PircBotX@185.185.69.118, (unauthenticated): adequatt)
12.10.18 00:06:16*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca) left #AutoNomic: Ping timeout: 244 seconds
12.10.18 00:08:43*** Join: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca, (unauthenticated): deadhand)
12.10.18 01:17:00*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
12.10.18 02:33:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uqrtacgbltrspeda) left #AutoNomic: Quit: Connection closed for inactivity
12.10.18 02:50:00*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
12.10.18 03:30:26<nilli[m]> HMCf from what I understood it had to be a signature that you have used to identify your account before . on the letter I send to thymose  I wrote that I can idetify myself as the original owner using other things  but on that did not get a respond yet.
12.10.18 07:31:06<nilli[m]> stoopkid I sent you an email  regarding some opportunity that may interest you.
12.10.18 08:28:13*** Join: ohadasssore (d45c6b87@gateway/web/freenode/ip.212.92.107.135, (unauthenticated): 212.92.107.135 - http://webchat.freenode.net)
12.10.18 08:29:33*** Quit: ohadasssore (d45c6b87@gateway/web/freenode/ip.212.92.107.135) left #AutoNomic: Client Quit
12.10.18 08:42:43<editable-dog>lol
12.10.18 13:15:49<HMCf> nilli[m]: but that is not what the instructions say... they say it just needs to be a key that you've previously identified as your own...
12.10.18 13:18:11<HMCf> surely you've included an address in a post or pm before, but even if not I'm sure an address that served as signatory for a colored issuance like omni would count
12.10.18 13:19:01<HMCf> and it can't hurt to try, worst case they just say "no try again"?
12.10.18 15:55:55<nilli[m]> thanks HMCf , yes ill just do that i hope they would use commonsense. actualy if I remember right I have sent someone a coin to an address that he post on the thread . so I can direct them to that address to see the transaction .
12.10.18 16:00:57<nilli[m]> ....but first I have to figure out how to send that massage using their instructions  so I have to read these instructions carefully ..
12.10.18 16:10:35<nilli[m]> lol even stoopkid send an address (he might not even remember) I did not think it was on the thread but it is
12.10.18 16:59:14<nilli[m]> its seems like signing a message form counterparty wallet is not working so im not really sure how to do it otherwise (it is a bitcoin address after all but not sure how to do it directly not through the wallet function.
12.10.18 16:59:49<nilli[m]> can any of you check it for me and give instruction how to do it. thanks
13.10.18 04:40:37<nilli[m]> So as a result of this last ordeal  I found 1 bitcoin I did not remember i had  . Hooray!  its my fuel to keep investigating into logic.
13.10.18 04:42:19<nilli[m]> stoopkid I hope that you will be around to play with that. and despite what I told you before you will be up to the challenge
13.10.18 04:45:17<nilli[m]> HMCf I dont trust you to be around when I will need you, but since I am working only for myself that is all fine. will appreciate any input :)
13.10.18 09:24:24<nilli[m]> and on another subject close to my heart, corporation coin. when are they going to do is..... yes that is a political issue cut a currency political thus falls in our category of no politics
13.10.18 09:28:12<nilli[m]> so google is really gearing toward it. https://thenextweb.com/hardfork/2018/10/10/google-cryptocurrency/
13.10.18 09:28:26<nilli[m]> check the video  in that article itself  . the article misreading the massage there
13.10.18 09:31:36<nilli[m]> this add is making people think about money as value, then show how expensive it is to earn bitcoin, then in the near future will direct you to earn the real money, google coins, buy using this phone connect to google.
13.10.18 09:36:52<nilli[m]> the real race now in between national currency backed by military powers and the corporation power set in big-data . (big data is the new territory one need to control in order  to rule ) once google will issue a coin the cold war between Russia and  USA will be over.
13.10.18 09:38:19<nilli[m]> * by  using not buy using (LOL)
13.10.18 09:38:38<nilli[m]> anyway...fun times
13.10.18 15:35:32<editable-dog>think ill stop using so strong passwords, getting hacked sounds profitable
13.10.18 15:36:20<editable-dog>selling agoras at ath, finding bitcoins
13.10.18 15:36:36<editable-dog>now somebody could hack my vps and upload a finished tau to it?
13.10.18 15:37:39<editable-dog>btw, my gf is just learning formal logic as part of her kendergarten teacher degree
13.10.18 22:04:35*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bwicpobbuyvbmtzf, stoopkid: stoopkid)
14.10.18 04:48:29<nilli[m]> editable-dog:  thats nice. maybe she should have come with you. anyway nice that she is interested in what you do.
14.10.18 04:54:58<nilli[m]> in terms of hacking being profitable, I guess to some extent have you plans changed by some outside force is  working for you not against you.
14.10.18 05:00:42<nilli[m]> anyway ... I am not sure that what I am doing now with the new time i  gained will interest you, but ill try to see it will.  it have to do with much of what we talk about here. but is concern with much more fundamental aspects of it
14.10.18 05:03:27<nilli[m]> my statement about not being a mathematician , physicist or a computer scientist holds , but it is all that I will be talking about and will make an effort defining here
14.10.18 05:06:29<nilli[m]> It took me many years and a lot of disbelieve in myself to get to this point that I feel like I am very close to be able to express it in terms others will be able to check and agree
14.10.18 05:09:49<nilli[m]> much of it is thanks to the time I spent with all of you here (including Ohad and the original tauchain)
14.10.18 05:10:40<nilli[m]> So lets start with mathematics hehe :)
14.10.18 05:12:56<editable-dog>shes not, its jsut part of the curriculum
14.10.18 05:19:38<nilli[m]> I see well ... nice that it made it into the curriculum
14.10.18 05:22:12<editable-dog>they also do a lot of art history, for example
14.10.18 05:22:41<editable-dog>and you dont even get into the school unless youre in good physical condition, measured by some running and swimming on time and whatnot
14.10.18 05:22:58<editable-dog>its very curious
14.10.18 05:23:31<editable-dog>this is not some kind of elite school
14.10.18 05:24:09<editable-dog>just somebody decided that kindergarten teachers have to be super-womans
14.10.18 05:25:46<nilli[m]> that is curios... though nice that physical condition can be value no less than intellectual condition.
14.10.18 05:34:22<nilli[m]> lets start with mathematics in terms of KB and ask ourselves  how mathematics as language is different than our human language
14.10.18 05:34:39<editable-dog>kb?
14.10.18 05:35:26<nilli[m]> ofc under the assumption that both being languages  are based on logic
14.10.18 05:35:55<nilli[m]> *both as
14.10.18 05:36:38<nilli[m]> knowledge base
14.10.18 05:38:57<nilli[m]> in human semantics every verb is an operation and we have infinite such operations
14.10.18 05:43:19<nilli[m]> of subjects and objects are infinite
14.10.18 05:43:48<editable-dog>you think natural language is based on logic?
14.10.18 05:47:29<nilli[m]> ofc it is
14.10.18 05:47:41<nilli[m]> how else would you structure it?
14.10.18 05:48:54<koo5[m]> What kind of logic?
14.10.18 05:48:57<nilli[m]> a sentence is a logical structure
14.10.18 05:50:53<koo5[m]> https://mitpress.mit.edu/books/geometry-meaning
14.10.18 05:51:01<koo5[m]> I like this book
14.10.18 05:51:53<nilli[m]> interesting
14.10.18 05:54:39<koo5[m]> In short, id rather say that language, as well as logic, is based on spatial visual imagination
14.10.18 05:54:49<nilli[m]> there is in fact some talks about angles and geometric ratios being a language of a megalithic civilization (the pyramids for example )
14.10.18 05:55:50<koo5[m]> And i like how this book explores the concept that natural language is first an act and a force
14.10.18 05:58:00<koo5[m]> And word meanings and sentence or utterance structures evolve to suit situation
14.10.18 05:58:44<nilli[m]> our concern when dealing with automated machines is  a structure that let us build  based on rules we can trust
14.10.18 05:58:52<koo5[m]> We stricture language with some kind of logic, but it falls apart at the outer edges
14.10.18 05:59:16<koo5[m]> Ok, now we are talking:)
14.10.18 05:59:49<nilli[m]> lets then first look closely at what you call falling apart
14.10.18 06:00:54<nilli[m]> we can call these falling apart edges singularity points also , would you agree on that?
14.10.18 06:01:08<koo5[m]> For example, we distinguish statements and maybe commands and other utterances
14.10.18 06:01:11<koo5[m]> No, no idea
14.10.18 06:01:16<koo5[m]> About that
14.10.18 06:01:36<nilli[m]> ok let stay with your definitions
14.10.18 06:03:04<nilli[m]> describe how it false apart and will take it from here
14.10.18 06:03:23<koo5[m]> Biab 15 mins
14.10.18 06:03:44<nilli[m]> ok
14.10.18 06:16:23<editable-dog>back, sorry
14.10.18 06:16:43<editable-dog>both my keyboards locked up and i had to restart my computer
14.10.18 06:17:26<editable-dog>funny that i wrote "Biab 15 mins" just before it, because "Biab 15 mins" was just an example sentence i wanted to discuss
14.10.18 06:17:35<editable-dog>or was it
14.10.18 06:18:03<editable-dog>so, this is an example of how our classifications fail
14.10.18 06:18:35<nilli[m]> talking about unexpected tuners of events.... :)
14.10.18 06:19:22<editable-dog>or rather, our classifications work, but it dosent seem to be logic we base them on, but the whole situation that we percieve and try to make sense of
14.10.18 06:19:32<nilli[m]> what classification
14.10.18 06:20:05<nilli[m]> explain you example and what it shows
14.10.18 06:20:21<editable-dog>"<koo5[m]> Biab 15 mins"
14.10.18 06:20:37<editable-dog>was it an example i wanted to discuss, or an actual information for you?
14.10.18 06:21:36<nilli[m]> I see .
14.10.18 06:22:21<nilli[m]> ah human we have established a framework in which we decode conversations
14.10.18 06:22:28<editable-dog>or: buffalo buffalo buffalo buffalo buffalo buffalo
14.10.18 06:23:04<nilli[m]> we call that default
14.10.18 06:23:10<editable-dog>yes, but we each have our own framework, and our frameworks interact
14.10.18 06:24:41<nilli[m]> yes.... everything starts with the fact that we each experience something  and we need to express that in order to let other know what we experiences so we can coordinate and cooperate .
14.10.18 06:25:36<editable-dog>yeah, and it kind of also stays there
14.10.18 06:26:28<nilli[m]> eventually it  comes down to the byzantine  generals problem
14.10.18 06:26:43<nilli[m]> but in our time it is the consensus of computers
14.10.18 06:31:18<editable-dog>yea, well, but in our use of natural language, we dont take the consensus-making to such levels
14.10.18 06:39:56<editable-dog>so, lets go back to how we want to communicate with computers?
14.10.18 06:40:07<nilli[m]> ok
14.10.18 06:41:08<nilli[m]> we have to tell computers where they must consult with us and how to go about that process
14.10.18 06:42:07<nilli[m]> we have to deal with computers "telling" us  that they dont know
14.10.18 06:42:24<nilli[m]> and have program how to operate in that case
14.10.18 06:43:35<nilli[m]> you see truing machines are designed  as if they are the whole world
14.10.18 06:44:01<editable-dog>truing
14.10.18 06:44:10<editable-dog>?
14.10.18 06:44:13<editable-dog>turing?
14.10.18 06:44:20<nilli[m]> Turing
14.10.18 06:44:52<nilli[m]> yes funny, truing machines
14.10.18 06:45:11<editable-dog>i dont think its an issue with turing machines, its the people who make decisions about most of the programs we end up using, that think they are the whole world
14.10.18 06:45:18<nilli[m]> maybe a good name to our future machines
14.10.18 06:46:44<nilli[m]> it is a fundamental problem
14.10.18 06:47:20<nilli[m]> truing machine is a good name since true is something we create based on logic
14.10.18 06:48:45<nilli[m]> logic construct our KB into true  and false
14.10.18 06:51:13<nilli[m]> but our input are not part of the kb as inputs they are checked against it as part of the operations we do
14.10.18 06:54:34<nilli[m]> the confusion here, I think, is that we assume that in order to enter it as input  our computers have to understand it
14.10.18 06:55:21<nilli[m]> and the fact that they understand it means that they should be able to execute an operation over it.
14.10.18 06:56:34<nilli[m]> well no. the "magic" is in that operation when we give two input and come put with one output .
14.10.18 07:02:06<nilli[m]> our operations have a meaning based on order
14.10.18 07:02:51<nilli[m]> and that order often is not explicit enough
14.10.18 07:03:17<nilli[m]> that is a problem with some contradictions. but that is our small problem
14.10.18 07:04:59<nilli[m]> our big problem is  the Byzantine generals one
14.10.18 07:09:49<nilli[m]> our computers as part of a network of computers will always suffer form a condition of  contradictions unless we solve that in their logic  allow them to choose a truth
14.10.18 07:10:54<nilli[m]> we just have to find the way to restrict that choice in a way that benefit the network as a whole over one computer own interest.
14.10.18 07:11:01<nilli[m]> sound almost human
14.10.18 07:11:10<nilli[m]> well .....:)
14.10.18 07:12:55<editable-dog>why should i let you restrict my computer?
14.10.18 07:22:53<nilli[m]> restrict in terms of building the incentive mechanism so that a single computer will benefit more by agreeing then by not agreeing (as is with bitcoin, but can be translated directly to energy somehow maybe)
14.10.18 07:23:26<nilli[m]> basically "energy" must be part of the logic
14.10.18 07:23:57<nilli[m]> with ties to the beginning of my talk today
14.10.18 07:25:33<nilli[m]> much of our math, defiantly  geometry  is based some physical quantities of dimensions
14.10.18 07:26:11<nilli[m]> a dimension is a physical quantity
14.10.18 07:27:39<nilli[m]> first physical existence define mathematical quantities and then we can express our physical world using mathematics
14.10.18 07:28:10<nilli[m]> all our constants are that
14.10.18 07:28:22<nilli[m]> physical quantities
14.10.18 07:28:41<nilli[m]> ratios
14.10.18 07:29:37<nilli[m]> is the mathematical product
14.10.18 07:30:09<nilli[m]> ration, rational ......
14.10.18 07:31:28<nilli[m]> *ratio
14.10.18 20:39:28<stoopkid> natural language definitely seems based in logic to me
14.10.18 20:41:22<stoopkid> but natural language isn't really the language of that logic, it's more like an object of study
14.10.18 20:46:33<stoopkid> like, we don't have a basis in "this phrase means this, that phrase means that", it's closer to being pure information-theoretic interpretations, like a sentence is just some arbitrary signal possibly containing information and possibly containing noise
14.10.18 20:53:19<stoopkid> we can use logic to describe all this just fine though, for example MLTT is capable of describing this
15.10.18 04:19:39<nilli[m]> hey stoopkid my analysis of natural language vs mathematics  and formal logic goes like that:
15.10.18 04:22:52<nilli[m]> natural language main concern is in creating new connections in order to expend KB. while mathematics and formal logic main concern is unify all existing information
15.10.18 04:28:00<nilli[m]> before expending on that i have to mention that when i  analyze the function of our brain , I can  say it employees both types. I think that  one is central in forming to KB and one to store KB
15.10.18 04:30:34<nilli[m]> If I would try to translate what HMCf is asking is that. though I cant believe I can be right about it since he disregard and disagree with most of what I say about logic
15.10.18 04:33:16<nilli[m]> however in my mind, to the best of my understanding, creating the link between the unifying mechanism we can express in mathematical terms and prove all the way up to one unit and one operation
15.10.18 04:36:10<nilli[m]> and between the semantic structure  of triples (or anything similar to that)  can do the trick
15.10.18 04:49:58<nilli[m]> The most restrict  mathematical landscape illustrating a proof tree reaching one single statement (object , number) at the root and one single operation express as the axiom sentence .
15.10.18 04:51:48<nilli[m]> that single form of most restrict mathematical landscape is also the only mathematical formulation that is pure logic.
15.10.18 04:52:39<nilli[m]> all the others formulate physical experience into  the mathematical logic
15.10.18 04:54:47<nilli[m]> understanding this last statement will become supper important once I will touch the issue of "energy" in relations to what we assume to be mathematics and logic
15.10.18 05:01:11<nilli[m]> KB language as opposed to mathematics construct a web of connections, a ball if you like, of ever growing links between e objects through operations (predicates)
15.10.18 05:01:58<nilli[m]> both objects and operations can be presented as new,
15.10.18 05:03:50<nilli[m]> the power of that structure to grow fast is by being able to create a link based on one existing parameter of the three in the triples
15.10.18 05:05:32<nilli[m]> that structure on its own is not calling for logic beyond the semantic structure it self of subject-predicate-object
15.10.18 05:06:00<nilli[m]> which every expression have to  follow
15.10.18 05:10:30<nilli[m]> now you can also see how both structures, that of  triple and that of a fundamental math  are  the two complete opposite in terms of their internal logic .
15.10.18 05:16:22<nilli[m]> before going on showing you how  "existential" and "for all" reconcile between the two logic systems and how we use it I need to dig a bit deeper in to mathematics ....
15.10.18 05:17:51<nilli[m]> ...and i cant fucken believe myself for trying to explain that  on that frigan Irc
15.10.18 05:21:27<nilli[m]> geometry ,trigonometry, calculus, and what ever else mathematics... always incorporate a physical dimension into it interns of ratio (constants)  or actual position as metrics.
15.10.18 05:25:40<nilli[m]> the fact that we where able to express physical experience as a mathematical expression is a great triumph  in terms of unification. transforming  KB logic type of information into terms of mathematical logic type
15.10.18 05:34:48<nilli[m]> .....ok  I think its far to much for one session. I see if you have any comments and if you relate to it in any shape or form (or in pure mathematical logic :) )
15.10.18 05:34:51<nilli[m]> if not I will stop or once again will try to learn more ways to express this meta-logic notion using existing accepted terms
15.10.18 06:08:39*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bwicpobbuyvbmtzf) left #AutoNomic: Quit: Connection closed for inactivity
15.10.18 17:50:15<HMCf> https://www.biorxiv.org/content/early/2018/10/13/442418
15.10.18 17:50:42<HMCf> yes, it is *that* jeff hawkins
15.10.18 18:31:46<nilli[m]> hi HMCf
15.10.18 19:58:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nntdigwhvnrcogoy, stoopkid: stoopkid)
15.10.18 20:00:50<stoopkid> nilli[m]: "If I would try to translate what HMCf is asking is that. though I cant believe I can be right about it since he disregard and disagree with most of what I say about logic"
15.10.18 20:01:31<stoopkid> i'm not sure what question you're even referring to
15.10.18 20:02:11<stoopkid> but also, my interpretation hasn't been that either HMC or myself "disregards and disagrees" with most of what you say
15.10.18 20:02:56<stoopkid> i would say that most of what you say, we don't even understand, and can't interpret
15.10.18 20:04:00<stoopkid> remember how precise we had to be in order to explain you lambda calculus and proof-trees?
15.10.18 20:04:11<stoopkid> if you're less precise than that, you're *not* communicating
15.10.18 20:07:56<stoopkid> "geometry ,trigonometry, calculus, and what ever else mathematics... always incorporate a physical dimension into it interns of ratio (constants)  or actual position as metrics."
15.10.18 20:11:26<stoopkid> ok so... this is technically false, but let's assume it's true... why is this the case
15.10.18 20:13:52<stoopkid> "the fact that we where able to express physical experience as a mathematical expression"
15.10.18 20:16:45<stoopkid> so, physical experience, or in other words: sensory input
15.10.18 20:19:38<stoopkid> you already have a basis for language in terms of your sensory input streams, mental ability to do logic, and ability to recognize patterns
15.10.18 20:21:40<stoopkid> we can describe all of this in MLTT or any logic with similar capabilities
15.10.18 20:25:12<stoopkid> or at least, we can approximate it well enough to do useful modeling with it
15.10.18 20:27:04<stoopkid> now, ironically, despite how often we describe solutions like this, you disregard and disagree with most of what we say :P
15.10.18 20:32:47<stoopkid> don't get me wrong, if you don't think the MLTT or <insert something else we often talk about, like abstract algebra> is working for what you're trying to do, then by all means, i'm not trying to talk you out of it :)
15.10.18 20:35:26<stoopkid> but when it comes to "making computers understand natural language", i only have a limited amount of suggestions here
15.10.18 20:36:11<stoopkid> https://github.com/sto0pkid/CategoryTheory/blob/master/Agatha2.agda
15.10.18 20:36:43<stoopkid> http://tptp.cs.miami.edu/~tptp/Seminars/AGInT/YisVersion/ResultsPUZ.html
15.10.18 20:39:11<stoopkid> so in the second link, there's a natural language description of... "something"
15.10.18 20:39:42<stoopkid> there's a bunch of scribbles written on the page, and you interpret them into some kind of meaning
15.10.18 20:40:19<stoopkid> if you want a computer to understand that meaning, that's what the first link is
15.10.18 20:41:26<stoopkid> i manually translated the natural language description into Agda, and now computers can "understand" it
15.10.18 20:41:50<stoopkid> what does that mean exactly that the computers can "understand" it once it's in Agda?
15.10.18 20:42:59<stoopkid> well, in this case it's really only the most basic level of understanding: the situation that the natural language text is describing is a collection of "things" along with relations between the things
15.10.18 20:43:50<stoopkid> the computer has an internal representation for each thing and each component of each relation between things
15.10.18 20:45:24<stoopkid> you could do the same with arbitrary natural language texts
15.10.18 20:46:44<stoopkid> now... if you look at the Agda i wrote there, you'll see that nowhere do i assert the contents of the natural language text as "fact"
15.10.18 20:47:20<stoopkid> "Someone  who lives in Dreadbury Mansion killed Aunt Agatha."
15.10.18 20:48:07<stoopkid> is this a fact?
15.10.18 20:48:14<stoopkid> no obviously not
15.10.18 20:48:41<stoopkid> 1. exactly which formal logic interpretation of this statement is the "fact" ?
15.10.18 20:49:40<stoopkid> 2. this is a totally made up situation, it doesn't even exist
15.10.18 20:50:31<stoopkid> but if you go look at how lots of people try to formalize this problem, it's a series of assertions, treating it as a bunch of factual, irrefutable statements
15.10.18 20:51:03<stoopkid> doesn't make any sense
15.10.18 20:52:07<stoopkid> if you look at how i formalize it in Agda, it's more like "imagine we interpret the text like this, then what would be the consequences of that interpretation"
15.10.18 20:57:56<stoopkid> so imagine we have a sensory input that's just a bit-stream
15.10.18 20:58:29<stoopkid> is this "language"? no, it's definitely not the kind of language we're talking about
15.10.18 20:58:48<stoopkid> what are we looking for here? patterns
15.10.18 21:00:48<stoopkid> you should talk to the #nars folks about this stuff because they're very much on the right track with how they think about this stuff
15.10.18 21:05:41<stoopkid> you recognize patterns/invariants, and formulate theories about them
15.10.18 21:06:20<stoopkid> example: how do you know what the word "water" refers to ?
15.10.18 21:07:41<dmiles> a good way to think of things when relating to natural language is to start out with program/data the program/computer understands.. then see how well you can make it work out in english
15.10.18 21:08:56<stoopkid> first you've already had experience with this low-density clear substance that's liquid at room temperature and pick up on the patterns/invariants associated with it, and create a mental category for it
15.10.18 21:09:47<stoopkid> then every time you see/hear the word "water", it's always in a situation that somehow includes this low-density clear substance that's liquid at room temperature
15.10.18 21:11:26<dmiles> In relation to what you're saying in order for SAM/PAM software to be of the understand something like "water" had to first be described in the visual language that the programs (PAM/SAM) already had a deep understanding of
15.10.18 21:12:27<stoopkid> dmiles: sure, the machine basically needs sensory input that allows it direct access to the experience of the actual substance
15.10.18 21:12:56<stoopkid> and then the word "water" can be associated to the patterns/invariants associated with that experience
15.10.18 21:13:10<dmiles> What is really great is the author of SAM/PAM actually never knew that he had created a "visual language"
15.10.18 21:13:35<stoopkid> what is SAM/PAM ?
15.10.18 21:13:46<dmiles> He created a language that encoded memory episodes ( which were only effectively correct when they were "visually" correct)
15.10.18 21:15:17<dmiles> SAM/PAM http://www-cgi.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/areas/nlp/nlu/icu/0.html
15.10.18 21:16:12<dmiles> They took  macros that could be put together and thought about without ever using natural language the computer has an understanding (ruleset) of how it could and couldn't put together these macros togetehr
15.10.18 21:16:39<dmiles> Without using natural language or anything related to natural language
15.10.18 21:16:56<dmiles> Then after they felt confident that this was an ideal form of thinking.. They then applied it to natural language
15.10.18 21:17:23<dmiles> Which is why it still is the very best ( and only credible ) natural language understanding system
15.10.18 21:18:06<dmiles> What's funny though the program is only known about in natural language understanding circles
15.10.18 21:18:57<dmiles> Some people like myself  ( and Erik Mueller ) saw very limited merit towards the natural language aspects
15.10.18 21:20:13<dmiles> Well not really "merit" but the fact that these were supposedly *only* natural language systems
15.10.18 21:20:57<dmiles> Or I could probably just say that we are less interested in the natural language aspects of artificial intelligence in general.
15.10.18 21:21:35<dmiles> Our interest was more about what would a rule set of natural human cognitive memory objects look like
15.10.18 21:22:12<dmiles> Which is just kind of cool that turned out to be a system that over performs in natural language question and answer
15.10.18 21:22:43<stoopkid> i personally don't know how one would even try to approach NLP without doing "artificial intelligence in general" first
15.10.18 21:23:10<dmiles> It's surprising how much you can get done in NLP without using any artificial intelligence
15.10.18 21:23:48<dmiles> For example take the inform7 system
15.10.18 21:24:37<stoopkid> this is true but in all cases it will fail pretty quickly if it has no "intelligence"
15.10.18 21:24:46<dmiles> ( Admittedly inform seven has an advantage because it is "by proxy" based off a physics language (this is what I meant by "visual language"))
15.10.18 21:26:13<stoopkid> so basically it has some built-in real-world semantics to relate natural language syntax to ?
15.10.18 21:26:30<dmiles> Well summarized
15.10.18 21:27:13<dmiles> ( you just "well summarized" what I meant )
15.10.18 21:28:03<dmiles> As long as a real-world semantics is there .. Natural language is about connecting the person to the semantics
15.10.18 21:29:37<dmiles> Also, of course, there can also be a real-world semantic version of what it's like to build in natural language mapping/understanding
15.10.18 21:31:23<dmiles> Inform7 dozen snazzy job it...
15.10.18 21:31:24<dmiles> Understand "chinese pot" or "chinese vase" as the china pot.
15.10.18 21:31:39<dmiles> Understand the unbroken property as describing the pot.
15.10.18 21:34:36<dmiles> Or even better..
15.10.18 21:34:37<dmiles> A box is a kind of container. Understand "box of [something related by containment]" as a box.
15.10.18 21:35:05<dmiles> TAKE BOX OF CRAYONS
15.10.18 21:35:35<dmiles> vs: TAKE DUKE OF EARL
15.10.18 21:36:39<dmiles> Understand "duke of [somewhere related by leadership]" as a leader.
15.10.18 21:38:14<dmiles> ( The example I'm giving is trying to show that even improvements of the system are doable in self )
15.10.18 22:08:44<dmiles> i sometimes want the logic of code to connect to a pre-existing natual language
15.10.18 22:09:04<dmiles> for exmaple: here is some code semantics:   https://github.com/TeamSPoon/small_adventure_games/commit/9ab33c7168330c579be87ccf6828c3f8d4b3fd09#diff-65023ebff9604f4e16d95e51983a7c55R205
15.10.18 22:10:05<dmiles> which then uses this NLP code https://github.com/TeamSPoon/small_adventure_games/commit/9ab33c7168330c579be87ccf6828c3f8d4b3fd09#diff-578ebe8ed06243bd76130c997d2121f2R274
15.10.18 22:11:32<dmiles> used a diff to show how the code right there which starts to understand the idea of "seei" props started allowing better wasy to decribe things to users
15.10.18 22:14:50<dmiles> (the idea is this is still pre-intelligentt
15.10.18 22:14:56<dmiles> )
15.10.18 22:25:23<dmiles> in logicmoo the sourceode is written visual language like..  thought(inst(Agent), Memory), thought(model(Spatial, ModelData), Memory), in_model(h(Sence, How, Thing, Where, T), ModelData), ...
15.10.18 22:28:10<dmiles> [subj(Agent), tense(think), ly(Sence),  the(Thing), by(How), at(Where), when(T) ]
15.10.18 22:28:59<dmiles> Joe thought saw the mower in back yard yesterday
15.10.18 22:29:52<dmiles> at(Where) becomes  "in yard"   "under pillow" etc
15.10.18 22:32:34<dmiles> Logicmoo and CYC use this same technique to both understand and to speak english
15.10.18 22:34:14<dmiles> we (Cycorp talked me into it) used to seperate "understanding code" from "speaking code".. it was too hard ot try to maintain both separately
15.10.18 22:34:55<dmiles> so now the trick is to write tehm into teh same translation language dealing with the worser case of "genration"
15.10.18 22:36:53<dmiles> so i now use a source transformation to reverse the NLG (NL generation) system to creating the NLU (understanding system) which allows more and more of the program to be written in English
15.10.18 22:37:43<dmiles> I started out from a rule of thumb.. "If the system can say something.. it better damn well understood what it just said"
15.10.18 22:38:29<dmiles> my (our) tiny brains can do better at vetting correctness of NLG than we can at NLU
15.10.18 22:41:15<dmiles> we can recognise misdevised language the moment we hear it :)
15.10.18 23:01:42<dmiles> this also allows catching of the ambiguous ways ina incremental manner  taake these two sentence  "they are human"  vs "humans are mammals"
15.10.18 23:02:12<dmiles> instanceOf vs subClassOf
15.10.18 23:02:28<dmiles> subClassOf(A,B) -> [subj(A),beAux(B)]  ...  vs      instanceOf(A,B) -> [subj(A),beAux(B)]
15.10.18 23:02:48<dmiles>  [subj(A),beAux(B)] are parsed the same way
15.10.18 23:03:24<dmiles> matches "the man is here"  "some are good" "she was there"
15.10.18 23:03:56<dmiles> "joe is being naughty"
15.10.18 23:04:37<dmiles> but we can see that we have to fit those into     subClassOf(A,B)   or  nstanceOf(A,B)
15.10.18 23:06:17<dmiles> the system listens to how it says things in order to see how many ambiguities *it* mighbt make.. in order to predict ambiguitryies humans might make
15.10.18 23:07:09<dmiles> a-priori, I the human told it how to say things
15.10.18 23:07:31<dmiles> (instead of how to understand things)
15.10.18 23:07:58<dmiles> (so it leanrs the understanding on it own)
16.10.18 03:45:35*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nntdigwhvnrcogoy) left #AutoNomic: Quit: Connection closed for inactivity
16.10.18 04:38:23* koo5[m] uploaded an image: IMG_20181016_103746.jpg (102KB) < https://matrix.org/_matrix/media/v1/download/matrix.org/OTVgRBzJNvJGnRuydwVRvNXJ >
16.10.18 04:49:20<koo5[m]> > https://www.biorxiv.org/content/early/2018/10/13/442418
                 <koo5[m]> Perfect
16.10.18 04:53:04* koo5[m] uploaded an image: IMG_20181016_105218.jpg (325KB) < https://matrix.org/_matrix/media/v1/download/matrix.org/rzWhcUClLYzijQjSLaNrUgHB >
16.10.18 04:53:10* koo5[m] uploaded an image: IMG_20181016_105156.jpg (380KB) < https://matrix.org/_matrix/media/v1/download/matrix.org/NYwmpFlGTGbtVqfxdsARiBhe >
16.10.18 04:53:56<koo5[m]> >if you're less precise than that, you're *not* communicating
16.10.18 04:54:08<koo5[m]> I have to agree
16.10.18 04:57:24<koo5[m]> >you should talk to the #nars folks about this stuff because they're very much on the right track with how they think about this stuff
16.10.18 04:59:22<koo5[m]> Theyre on the right track in general, but when it comes to nat lang understanding, they seem to not understand that they have to apply the same experiential method, so far they've been trying to shortcut it
16.10.18 05:05:26<koo5[m]> >For example take the inform7 system
16.10.18 05:06:31<koo5[m]> Lets save ourselves misunderstandings and differentiate CNLs from...well..the more advanced stuff
16.10.18 05:07:54<koo5[m]> NLP, although this abbreviation was effectively taken over by statistical processing
16.10.18 06:34:23* koo5[m] uploaded an image: VectorImage_2018-10-16_123400.jpg (71KB) < https://matrix.org/_matrix/media/v1/download/matrix.org/lDkwoloIDWjihDhyLtyjMymd >
16.10.18 06:47:24* koo5[m] uploaded an image: VectorImage_2018-10-16_124711.jpg (298KB) < https://matrix.org/_matrix/media/v1/download/matrix.org/vfHDdgFFSRPUXbiGjlgJagfy >
16.10.18 06:48:26* koo5[m] uploaded an image: VectorImage_2018-10-16_124813.jpg (375KB) < https://matrix.org/_matrix/media/v1/download/matrix.org/UEGmfWINDMrSlVRRLPxDCZCB >
16.10.18 06:48:58* koo5[m] uploaded an image: VectorImage_2018-10-16_124844.jpg (435KB) < https://matrix.org/_matrix/media/v1/download/matrix.org/YZPPRcBJIDiAwZMkqUgzKxSc >
16.10.18 08:16:02*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vxczfbsgbtxkhpzs, stoopkid: stoopkid)
16.10.18 10:25:14*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vxczfbsgbtxkhpzs) left #AutoNomic: Quit: Connection closed for inactivity
16.10.18 12:11:09<HMCf> 60 prototypes manufactured and shipped from china... 59 arrive in the US.  Go figure. :-\
16.10.18 12:11:44<HMCf> have I mentioned lately that I dislike the industry that I'm in?
16.10.18 12:12:04<HMCf> Why can't *anyone* in semicon just... play fair?
16.10.18 12:35:53<editable-dog>it was the prototype pirates, arrrrrr!
16.10.18 13:16:36*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-zpqmasiddyzfcjmt, stoopkid: stoopkid)
16.10.18 13:20:19<HMCf> chinese pirates or american pirates though?
16.10.18 13:24:37<editable-dog>arrrr
16.10.18 13:38:44<stoopkid> editable-dog: what do you mean by "experiential method" wrt the nars stuff
16.10.18 13:44:34<editable-dog>not sure, now that i think of it
16.10.18 13:44:46<editable-dog>i mean, not sure what theyre trying to do now
16.10.18 13:46:01<editable-dog>something like taking a sentence like "how are you", and inputting it into nars like "how" percieved at time1, "are" percieved at time 2..
16.10.18 13:47:44<stoopkid> that's part of what they're doing now or part of the experiential method they're not doing ?
16.10.18 13:49:52<editable-dog>thats what i think theyre doing now, and it seemed like this way, nars could be trained to do question answering with simple pattern matching, but any kind of thinking about the sentence was missing
16.10.18 13:51:21<editable-dog>hm, idk, id have to check it out again
16.10.18 13:51:53<editable-dog>i only remember my impression, no details
16.10.18 13:54:21<stoopkid> hrm, i would probably design a text/speech processor to process one word at a time as well.. it's probably really what you do after taking the input that counts, but imo it seems pretty evident that humans process one word at a time
16.10.18 13:54:41<stoopkid> ex. "how are"
16.10.18 13:55:55<stoopkid> we have an understanding of the sentence on each word; "how", how what? "how are"; how are what? etc..
16.10.18 13:56:08<editable-dog>yeah, i dnt have an issue with that
16.10.18 13:56:24<editable-dog>it was what happened after that was lacking
16.10.18 13:56:39<stoopkid> gotcha
16.10.18 13:57:11<stoopkid> last i talked to them their take was basically "everything is about invariants"
16.10.18 13:59:35<editable-dog>like, im not sure, but they even might have some builtins to answer questions like that by querying the concept space
16.10.18 13:59:46<editable-dog>which is nice, but not language understanding
16.10.18 14:00:48<editable-dog>not sure what invariants mean here, but it exactly did seem like they forgot the "non-" in "non-axiomatic"
16.10.18 14:01:24<editable-dog>but idk
16.10.18 14:01:37<stoopkid> they seem to be averse to building any particular language model (and same kinda thing in other stuff besides NLP), like their take is basically that once they have AGI it should be able to come up with its own language model... which is probably true but i wouldn't put all my eggs in that basket yet heh
16.10.18 14:02:06<stoopkid> wrt invariants: something that stays the same across different situations
16.10.18 14:02:24<stoopkid> like, "threeness" would be invariant in all sets of things that have a count of 3
16.10.18 14:02:41<editable-dog>well, given enough experience of simple conversations, it should start making sense of things eventually
16.10.18 14:04:46<editable-dog>i want to set aside some time to play with nars before getting a job again
16.10.18 14:05:08<stoopkid> maybe, but, i think the learner has to be immersed in the world that the conversations refer to in order to actually "understand" it
16.10.18 14:05:30<editable-dog>yeah
16.10.18 14:07:41<editable-dog>nilli[m]: so, another bitcoin? 
16.10.18 14:08:03<editable-dog>shouldnt we try to pay somebody to make our projects presentable and do a kickstarter?
16.10.18 14:08:55<editable-dog>or write a grant request, given that im in the EU and everyone is doing that here
16.10.18 17:18:33<HMCf>  < editable-dog> not sure what invariants mean here, but it exactly did seem like they forgo
16.10.18 17:18:36<HMCf>                  the "non-" in "non-axiomatic"
16.10.18 17:19:03<HMCf> ^is basically the root of my concerns about nars
16.10.18 17:19:58<HMCf> frankly, they didn't seem to even actually understand what "axiomatic" means in the first place, heh
16.10.18 17:20:55<HMCf> and when they went on to demonstrate to me that they don't even know how their own learning algorithm is really functioning I wrote them off. :-|
16.10.18 17:26:17<editable-dog>what does "axiomatic" mean?
16.10.18 17:26:37<editable-dog>mr wang is involved behind the scenes (now?)
16.10.18 17:26:52<editable-dog>if somebody asks me how our algorithm really functions...well....
16.10.18 17:26:58<editable-dog>yet here we are
16.10.18 17:56:40<nilli[m]> There is a lot to go through and read carefully but I did not have any time for that today however there is one statement of stoopkid that I have to make a quick comment since is representing much.
16.10.18 17:58:53<nilli[m]> n
16.10.18 18:04:34<nilli[m]> actualy not....
16.10.18 18:14:48<nilli[m]> editable-dog (IRC): what is "our project" ?  you mean your project. I was never part of any "our". just tagged along. (maybe for  a moment by the power of some coins, and a trip I felt like a part of some team)
16.10.18 20:49:04<stoopkid> nilli[m]: you mean HMC's project ?
16.10.18 21:49:03<HMCf> there is no "our"... the work belongs to noone
16.10.18 21:49:12<HMCf> weird, youtube is down
17.10.18 02:05:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zpqmasiddyzfcjmt) left #AutoNomic: Quit: Connection closed for inactivity
17.10.18 03:23:40<nilli[m]> stoopkid (IRC):  I'll try to answer that one statement that can not be a quick answer. maybe will also clarify the "our" issue
17.10.18 03:26:19<nilli[m]> The only reason that I spent my time here is that you are some of a very few people intelligent enough to be able to have meaningful discussions with me and are intelligent enough to somehow even appreciate it (sometimes)
17.10.18 03:28:43<nilli[m]> Intelligent for me is thinking for yourself and with as little influence of higher  authority other than you own.
17.10.18 03:29:09<nilli[m]> your own logic
17.10.18 03:29:44<nilli[m]> your own mathematical logic
17.10.18 03:31:35<nilli[m]> leading to one element and one function that you can define as your basic assumption and recognize it as such
17.10.18 03:33:17<nilli[m]> stoopkid , I dont think you realize that this is what stopping you and is a great source of frustration
17.10.18 03:34:53<nilli[m]> you dont trust yourself to make that assumption and you are looking for a proof to you a assumption, assuming it is there somewhere
17.10.18 03:37:17<nilli[m]> it makes you a brilliant student, but keep you from moving forward to where you create truth for yourself and  use all that learn as building materials
17.10.18 03:38:06<nilli[m]> so others will be able to experience your truth as you do
17.10.18 03:48:06<nilli[m]> KOO, you  are like the opposite manifestation, I( have no tools to judge your construction ability in terms of writing a code)  but you are like that kid who will try anything fail and start again until it works , whiling to listen and learn, knowing  that there must be a way to eventuly make it.
17.10.18 03:49:12<nilli[m]> developers need the characteristics
17.10.18 03:50:45<nilli[m]> and HMCf ....
17.10.18 03:52:26<nilli[m]> I think that he is in I way a combination of all three of us
17.10.18 03:53:14<nilli[m]> which makes him be wrong on one fundamental thing always
17.10.18 03:54:07<nilli[m]> "there is no "our"... the work belongs to noone
17.10.18 03:55:00<nilli[m]> his confusion regarding the term belong
17.10.18 03:57:24<nilli[m]> since it makes that sentance a contradiction, a contradiction that is maybe all the HMCf is
17.10.18 03:59:04<nilli[m]> keep in mind that he is not a unified entity himself . he is at least three as he mentioned a few time
17.10.18 03:59:17<nilli[m]> now that is that three dose not matter
17.10.18 04:00:24<nilli[m]> it can be three different people or three different identity of the same person or three separate functions of the same human
17.10.18 04:00:42<nilli[m]> the key here is the separation
17.10.18 04:01:35<nilli[m]> ...but lets first deal with the contradiction in the sentence itself
17.10.18 04:02:04<nilli[m]> "there is no our"
17.10.18 04:04:00<nilli[m]> the sweeping meaning of there is no our is that there is no others. we are all one  no group definition in terms of ownership
17.10.18 04:05:39<nilli[m]> "The work belong to noone"
17.10.18 04:06:30<nilli[m]> work that belong to ._____is a work that is done by____
17.10.18 04:10:55<nilli[m]> so if we fill in the missing terms in this statement according to the meaning of HMCf  statement  we will fill in "noone" for the first missing term and  "all" for the second missing term
17.10.18 04:14:58<nilli[m]> we can also switch the order of the sentance  and still have the same meaning
17.10.18 04:17:07<nilli[m]> work that is done by all is work that belong  to none
17.10.18 04:22:15<nilli[m]> there is a fundamental problem in a statement like that which can have both "all " and "noone" describing the   same  "group"
17.10.18 04:25:47<nilli[m]> I can fuck around with this term much more but for now let me go back to the original incomplete phrase
17.10.18 04:26:07<nilli[m]> "there is no "our"... the work belongs to noone
17.10.18 04:31:15<nilli[m]> express that as  a complete sentance  that it only talking about ownership as a group  : "there is no  "our"  since there is no ownership, thus  the work belongs to noone
17.10.18 04:32:32<nilli[m]> that would suggest that in terms of existence there exist groups but  in terms of ownership there is no existence to ownership
17.10.18 04:33:42<nilli[m]> but then again we are presented with the contradiction of "belonging"
17.10.18 04:37:25<nilli[m]> so "belonging" is an empty group. of type "ones" ,
17.10.18 04:40:02<nilli[m]> so the work is not owned by anyone and is created by all... fine
17.10.18 04:40:15<nilli[m]> what is this all then?
17.10.18 04:41:38<nilli[m]> if is really means "all" as us all in some type of a group,or "all"  as all that is "everything"
17.10.18 04:46:04<nilli[m]> "all" that permit a type of a group will have to agree with "belonging" if assume the existence of anything (any abstract term as well)  thus "belonging" as not an "empty group"
17.10.18 04:47:31<nilli[m]> ....I dont expect you koo and stoopkid to follow this mindfuck trail  but I do damned it from HMCf
17.10.18 04:47:45<nilli[m]> and answer
17.10.18 04:48:08<nilli[m]> since he is the expression of that
17.10.18 05:15:12* nilli[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/JoICOCiWuHvRVKYBQSRmIcjM >
17.10.18 05:17:38<nilli[m]> the one restriction each of us is putting on him/her selves is the unification of all our aware functions
17.10.18 05:17:40<nilli[m]> which means the any "us" is me and one other entity other then myself
17.10.18 05:17:43<nilli[m]> this restriction do not hold for HMCf
17.10.18 05:18:03<nilli[m]> and it dose not hold for an insane person
17.10.18 05:18:51<nilli[m]> we can not reason with insane people for that reason. The fact that HMCf may be playing that role while maintaining unified entity in his real life can not help us
17.10.18 05:20:32<nilli[m]> since his actions in the reality we share are what he do using his assumed split identity. and his logical inconsistency is inherent to that.
17.10.18 05:21:01<nilli[m]> there is no way autonomic can be built as HMCf idea since he is a type "us" by himself while each of us is a type "I"
17.10.18 05:21:24<nilli[m]> he can either do it by himself as his one group and have the work belong only to him as being the entire universe, thus not "belong" and not "our" only HMC....n
17.10.18 05:21:52<nilli[m]> or become IHMC and start coding with us if he know how to code. or keep talking the theory trying to discover it form within him as I do.
17.10.18 05:22:42<nilli[m]> there is no other way . unless he is our God.
17.10.18 05:24:06<nilli[m]> and I can prove it using MLTT if I was learning agda practicing it long enough
17.10.18 05:29:55<nilli[m]> So koo ... no, I will not spend my bitcoin on anything that we do since I  consider bitcoin as the energy I need  in order to survive . and if there is no "our" there is no mine and there is not me thus no logical meaning to the survival of that me
17.10.18 05:31:19<nilli[m]> HMCf as you have noticed is not spending his "bitcoins" as well as not earning it as part of being us
17.10.18 05:31:46<nilli[m]> I have spent mine that I have given you as yours which you have been spending then
17.10.18 05:35:27<nilli[m]> all that abouve was made possible since I tool on one of HMCf function in the physical world and took the money to move it to you. yet in his world there was never any money and no physical survival.
17.10.18 05:39:05<nilli[m]> yet on the fundamental level the contradiction of his won existence will now allow this project to ever become unless it will be a new project  that you koo and stoopkid is doing . and HMCf is only an adviser to the project. .
17.10.18 06:03:57*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 268 seconds
17.10.18 06:17:23*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
17.10.18 07:03:36<editable-dog>fair fair
17.10.18 09:23:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tbhxtaciexccjdme, stoopkid: stoopkid)
17.10.18 09:40:52<editable-dog>stoopkid: still planning to review pyin?
17.10.18 09:46:26<editable-dog>im losing steam
17.10.18 09:47:24<editable-dog>i spent the evening and today trying to rewrite cppout, but its quite intricate
17.10.18 09:47:35<editable-dog>so its going awfully slow
17.10.18 09:47:59<editable-dog>im not sure if trying to just modify the existing cppout would go much faster
17.10.18 09:49:01<editable-dog>it may be more worthwhile to try to make prolog euler run our tests
17.10.18 09:49:37<editable-dog>ive made some steps towards that but didnt finish
17.10.18 09:51:12<editable-dog>and we need a faster reasoner, but rewriting pyin in c++ might be easier on me
17.10.18 09:52:11<editable-dog>im ready to explain how it matches with our previous reasoners, and how the change for existentials works
17.10.18 09:53:34<editable-dog>if hmc just thinks its doing "too much of something", but cant pinpoint it even with the visualizations and with the whole trace ready for querying with sparql, i dont know if staring at pages of cppout-like output will help him with that
17.10.18 09:53:51<editable-dog>the semantics will match pyin
17.10.18 09:54:58<editable-dog>i spent a few evenings trying to learn dcgs, made some progress, but still lost on some issues with prolog(s)
17.10.18 09:55:14<editable-dog>also working out how it would work in n3logic
17.10.18 09:55:56<editable-dog>well, i dont think theres any reason it wouldnt, with lists/existentials
17.10.18 11:04:52<HMCf> nilli[m]: never send to know for whom the bell tolls
17.10.18 11:04:58<HMCf> it tolls for thee
17.10.18 11:06:31<nilli[m]> HMCf (IRC): I have to run out will be back later
17.10.18 11:39:01*** Join: dadbod007[m]1 (dadbod007m@gateway/shell/matrix.org/x-lylbjgpztfnfwwho, (unauthenticated): @dadbod007:matrix.org)
17.10.18 11:48:15<HMCf> editable-dog: actually, I think that being able to stare at pages of cppout *would* be quite helpful... it captures statically a representaton of the interpretation, and allows for me to apply a LOT more tools (and decades of experience) toward analysis and verification... (on top of saving time simply by being faster)
17.10.18 11:52:36<HMCf> in the python i;m stuck with limited dynamic analysis tools (and no real static analysis tools) and always looking at things through an extra layer of indirect interpretation
17.10.18 12:24:43*** Quit: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-ukvudexcppjfufnj) left #AutoNomic: Ping timeout: 252 seconds
17.10.18 13:29:33* editable-dog sighs
17.10.18 15:45:49<nilli[m]> HMCf (IRC): I googled the meaning ... not sure it is right to try smart it out as it is poetic .. so I just add to it. yes we are all a part of that one yet we each are not that whole one, only one whole.
17.10.18 15:47:15<nilli[m]> other than this I guess there is nothing for us to agree or disagree anymore
17.10.18 15:48:24<nilli[m]> unless you will agree with me
17.10.18 15:49:53<nilli[m]> and then we may go on conversing .
17.10.18 15:52:21<nilli[m]> but honestly I dont think that will  (however i do believe that you can)
17.10.18 15:55:14<nilli[m]> by the way I sent a signed message to bitcoin forum trying to follow their instructions. and I hope to get back my unsername and threads.
17.10.18 16:49:13<HMCf> editable-dog: besides we'll need to do the cppout thing eventually anyway, and as i've so far been able to find any particular problem with your semantics (aside from perhaps accounting for more cases than we strictly need to) it seemsto me we might as well go ahead
17.10.18 16:49:53<HMCf> nilli[m]: we can agree to nothing before first agreeing to how to go about agreeing to things...
17.10.18 16:50:31<HMCf> this is the old "Maybe I'll believe you when you say it on-chain"
17.10.18 16:51:14<HMCf> before that point, agreements are not meaningful and thus not worth the paper...
17.10.18 16:52:53<HMCf> editable-dog: *so far not been
17.10.18 16:55:26<HMCf> nilli[m]: this is related:
17.10.18 16:55:28<HMCf>  < stoopkid> i would say that most of what you say, we don't even understand, and can't
17.10.18 16:55:31<HMCf>              interpret
17.10.18 16:55:34<HMCf>  < stoopkid> remember how precise we had to be in order to explain you lambda calculus and
17.10.18 16:55:37<HMCf>              proof-trees?
17.10.18 16:55:39<HMCf>  < stoopkid> if you're less precise than that, you're *not* communicating
17.10.18 16:55:42<HMCf> what stoop says is not unique to *you*
17.10.18 16:55:54<HMCf> it applies to anyone
17.10.18 16:56:22<HMCf> and anything to be communicated
17.10.18 16:56:48<HMCf> (proposal to agreement is a communication)
17.10.18 16:57:03<HMCf> (as is the agreement, itself)
17.10.18 17:00:08<HMCf> dototd: the initial catch-22 of all true agreement, set in motion
17.10.18 17:35:59<nilli[m]> HMCf (IRC):  for me to be precise we have to communicate. unless I will repeat what you have said
17.10.18 17:37:34<nilli[m]> < stoopkid> i would say that most of what you say, we don't even understand, and cant interpret
17.10.18 17:38:07<nilli[m]> that is way you have to communicate
17.10.18 17:39:00<nilli[m]> and really really try to understand
17.10.18 17:39:16<nilli[m]> as if you try to learn from someone
17.10.18 17:39:26<nilli[m]> who know something
17.10.18 17:39:38<nilli[m]> but you dont
17.10.18 17:40:00<nilli[m]> you both assume that
17.10.18 17:41:08<nilli[m]> whatever it is not important enough
17.10.18 17:41:24<nilli[m]> I dont know to tell you that it is
17.10.18 17:42:10<nilli[m]> alll I can tell you that against all that would make sense , I still try
17.10.18 17:43:02<nilli[m]> as I have most of my life
17.10.18 17:47:41<nilli[m]> * that is why
17.10.18 17:49:03<stoopkid> nilli[m]: not sure why you feel that way
17.10.18 17:49:19<stoopkid> editable-dog: yes
17.10.18 17:50:09<nilli[m]> there is no catch 22, we can just toss a coin and start with agreeing based on that
17.10.18 17:56:24<stoopkid> 1. how does a coin-toss scale to global consensus?
17.10.18 17:56:28<nilli[m]> stoopkid (IRC): I think if we would make a simple accounting as to the effort I made to learn and understand both you an HMCa and compare it to the effort that you made to understand and learn from me it is very clear.
17.10.18 17:57:08<nilli[m]> only that we  start assuming  who know and who is here to learn
17.10.18 17:57:38<nilli[m]> that is a wrong assumption
17.10.18 17:59:03<nilli[m]> ofc ...you never assumed that there is anything you should learn from me
17.10.18 18:00:02<nilli[m]> but you have to view all your reactions based  on that option
17.10.18 18:00:28<nilli[m]> you and HMC
17.10.18 18:01:50<stoopkid> no idea why you feel that way, i've made an effort to understand each time you try to express some concept to us, and usually when i start asking questions about it you say you need to come back after refining your thoughts about it
17.10.18 18:05:24<stoopkid> and then i just say the same thing i've always said about it: if you really want me to understand it, you'll probably have to start with much smaller and much more precise statements
17.10.18 18:06:09<stoopkid> rather than broad & imprecise sweeping generalities that may sound compelling but which i don't know how to actually work with
17.10.18 18:07:29<stoopkid> do you think i'd be able to understand it when HMC does that, example "dototd: the initial catch-22 of all true agreement, set in motion" if not for the massive amount of shared context we've developed starting from the very basics (of any extremely well-known, well-developed and well-published theory) ?
17.10.18 18:07:41<stoopkid> of an*
17.10.18 18:08:08<stoopkid> no, when i first got here i was like "wtf are you even talking about, what's a bitcoin, sounds like a scam if i ever heard one"
17.10.18 19:16:55<HMCf>  < nilli[m]> and really really try to understand
17.10.18 19:17:38<HMCf> the more precisely something is stated the less effort need be applied to understand it
17.10.18 23:17:46*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tbhxtaciexccjdme) left #AutoNomic: Quit: Connection closed for inactivity
18.10.18 00:27:48<nilli[m]> HMCf (IRC): precisely according to measures agreed upon by the one who set the measures (the hegemony) and the one who accept the measures. (same as true)
18.10.18 00:49:56<nilli[m]> and the more fundamental it is the harder it gets
18.10.18 00:53:04<nilli[m]> maybe is not possible unless we are doing art. which we dont do here.
18.10.18 00:59:55<nilli[m]> stoopkid (IRC): guess is not going to work. I got into bitcoin since it did something I understood right away. I talked about using that power to make centralized tokens and no one understood. then they did it realy bad
18.10.18 01:05:01<nilli[m]> today finaly cryptoeconomy is a term that catching on. they take prize winning economist  about alternative monetary models  to make their  coins models
18.10.18 01:07:03<nilli[m]> they dont understand what they are doing, yet they get center stage.
18.10.18 01:09:07<nilli[m]> I can just keep watching... as hard as I tried to take the stage .... it did not work.
18.10.18 01:10:22<nilli[m]> and that was far easier task  to explain in terms most can understand or reason about.
18.10.18 01:13:25<nilli[m]> * take economist  who do not understand anything about  alternative ...
18.10.18 01:14:12<nilli[m]> *(I missed half a sentance there... )
18.10.18 01:15:10<nilli[m]> guess is really time to go off
18.10.18 05:13:24*** Part: nilli[m] (nillimatri@gateway/shell/matrix.org/x-dzihfzsyuivbmpng) left #AutoNomic: "User left"
18.10.18 11:26:14*** Join: koom (~koom@89-24-57-254.nat.epc.tmcz.cz, (unauthenticated): realname)
18.10.18 11:27:24<koom> think i can right away limit the number of existentials in head to 1?
18.10.18 12:16:06*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-amoelgqbwsqrzrec, stoopkid: stoopkid)
18.10.18 12:24:19<stoopkid> @ nilli "precisely" according to the listener...
18.10.18 12:25:37<stoopkid> hegemony, lol...
18.10.18 12:30:10<stoopkid> so... i have no idea what you're even trying to convince me/us of
18.10.18 12:33:21<editable-dog>usually when i try to follow her rambling, it goes on and on and it twists and i look for something to anchor all the vague words in, but theres nothing, and then some sloppy typing throws me off completely
18.10.18 12:33:39<editable-dog>but...idk
18.10.18 12:33:47<editable-dog>maybe we should give her a canvas instead?
18.10.18 12:34:32<editable-dog>or she should give us hebrew lessons
18.10.18 12:38:57<stoopkid> @ nilli yea no offense and i don't think koo means any offense either but i'm not able to follow your logic concepts any better than that either usually
18.10.18 12:41:00<stoopkid> but us failing to understand your concepts =/= dismissing/disregarding you
18.10.18 12:41:23<editable-dog>definitely
18.10.18 12:46:38<stoopkid> also disagreeing =/= dismissing/disregarding, although we don't even get to this point until we understand the thing in order to disagree with it
18.10.18 12:48:52<stoopkid> @ nilli and you seem to be dismissing/disregarding the number of times that, after understanding what you were trying to express in the first place, we agreed about it
18.10.18 12:50:32<stoopkid> if you think i'm acting like a hegemonic gatekeeper to your academic advancement, well... idk what to even say to that tbh
18.10.18 12:53:25<stoopkid> anyway
18.10.18 12:53:44<stoopkid> editable-dog: RDFLog semantics appears to limit the # of existentials in the head to 1 at least
18.10.18 12:55:38<stoopkid> my take on this whole situation is: the concept of autoproving breaks down when existentials are introduced
18.10.18 12:56:26<stoopkid> not that you can't autoprove with existentials, but that there's no well-defined criteria for what should be the space of things you can autoprove vs. the space of things you will fail to autoprove
18.10.18 12:58:04<editable-dog>what do you mean autoprove
18.10.18 12:58:44<stoopkid> query for the answer to an arbitrary logical statement
18.10.18 12:59:49<editable-dog>did you look at the paper about backward inference with existentials that i linked?
18.10.18 13:00:15<editable-dog>it seems to define some classess, just like the chase paper
18.10.18 13:01:52<stoopkid> hm must have missed that
18.10.18 13:02:33<editable-dog>cmon i tried twice
18.10.18 13:04:08<editable-dog>https://ac.els-cdn.com/S0004370211000397/1-s2.0
                 <editable-dog>-S0004370211000397-main.pdf?_tid=d8c03582-78b7-412a-b0ad-75be35dffa80&acdnat=1
18.10.18 13:04:18<editable-dog>539171431_772902ca179d1db04ab60353e276de7a
18.10.18 13:04:28<editable-dog>https://www.sciencedirect.com/science/article/pii/S0004370211000397
18.10.18 13:04:36<editable-dog>second time's the charm
18.10.18 13:04:43<editable-dog>last msg
18.10.18 13:11:02<HMCf> koom: do you mean to take a rule like {?a :foo ?b}=>{?a :bar ?x. ?x :baz ?b. ?b :bop ?y} and splitting it into 2 rules, =>{?a :bar ?x. ?x :baz ?b} and =>{?b :bop ?y}?
18.10.18 13:20:59<editable-dog>well, seems like a valid transformation in that case
18.10.18 13:21:54<editable-dog>and if you add something like ?x :fee ?y to the original head, you cant do it
18.10.18 13:22:31<HMCf> iirc this has a funny name like "join separation planning" or something like that
18.10.18 13:24:22<HMCf> and I remember running into headaches with it in the past wrt ep checking, but that was a very long time ago now, I don't remember the details
18.10.18 13:24:57<HMCf> and yah, the join-on-join case we should always fail afaik
18.10.18 13:25:06<HMCf> the "?x :fee ?y"
18.10.18 13:25:49<editable-dog>ok good
18.10.18 13:26:09<editable-dog>i dont see how we would need any special consideration of such split rules in the ep check
18.10.18 13:28:35* stoopkid not following
18.10.18 13:29:31<editable-dog>anyway, i think we are in a bit of trouble with lists: ?l0 first x. ?l0 rest ?l1. boom. <= {blabla}.
18.10.18 13:32:31<HMCf> editable-dog: "boom. <= {blabla}."??
18.10.18 13:32:41<HMCf> syntax error? :-)
18.10.18 13:33:16<editable-dog>ok ill try again: {blabla} => {?l0 rest ?l1}
18.10.18 13:33:24<editable-dog>boom.
18.10.18 13:57:11<HMCf> sry afk for a while, can you push testcase to look when I get back?
18.10.18 13:59:24<editable-dog>why testcase?
18.10.18 13:59:33<editable-dog>its a list constructed in a head
18.10.18 14:04:12<editable-dog>i suppose we can still construct lists in bodies
18.10.18 14:53:37<stoopkid> it's gonna take me a while to understand their backward-chaining mechanism
18.10.18 18:57:58*** Quit: koom (~koom@89-24-57-254.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 245 seconds
19.10.18 13:10:25<stoopkid> editable-dog: unfortunately i've gotta focus mostly on my calculus hw the next couple days but i'll be around if you wanna try to walk me through the relevant changes to pyin
19.10.18 13:12:19<stoopkid> and also the algorithm in that paper if you know what's going on with that
19.10.18 13:15:38<stoopkid> i'd also be interested to formalize this calc into MLTT... maybe not your cuppa' but lemme know if it is heh
19.10.18 13:19:10<dmiles> i really wonder why someti,mes you guys are implimenting in C++ and not Agda
19.10.18 13:20:27<dmiles> is there a reason?
19.10.18 13:22:03<dmiles> the reason for implimenting in Adga is that: dont you start to get a change to use the type theory you think is important?
19.10.18 13:23:09<dmiles> you'd be able to leverage some deep part of the type theory ?
19.10.18 13:25:03<stoopkid> main reason we've generally written it off for the implementation language is just cause it's new, changing, and people aren't that familiar with it yet, like i can sort of imagine the headache for somebody trying to learn type theory via our language and having to already understand type theory in order to read the source-code
19.10.18 13:25:28<stoopkid> but i guess hypothetically they'd only actually have to understand lambda calculus
19.10.18 13:26:23<stoopkid> i've even made an Agda implementation of one of the forward-chaining algorithms we were studying so technically it's doable
19.10.18 13:27:09<dmiles> if not Agda some other MLTT language i suppose
19.10.18 13:27:12<stoopkid> it's slightly unsatisfying to do so because Agda can only type-check one step of the algorithm and to run arbitrarily many steps you have to put it on an external main loop
19.10.18 13:29:11<stoopkid> but theoretically this is still better than c++
19.10.18 13:29:43<stoopkid> but.. only theoretically
19.10.18 13:31:11<stoopkid> we could though; MLTT language comes in two main parts, the types/propositions and the proofs/programs
19.10.18 13:31:34<dmiles> yeah io just feel liek it be sad to ghet your  C++ thing working and not have any roadmap as to how to connect MLTT
19.10.18 13:32:22<dmiles> connect "it"
19.10.18 13:32:32<dmiles> connect "it"  to type theory
19.10.18 13:32:46<stoopkid> to implement an application in MLTT we technically only need the programs, which, if constructed properly, can be used completely independently of the types, and in that case is basically just lambda calculus (this might be able to be done in all cases but i'm not sure i'll have to check on that; polymorphism & dependent types complicate the picture there somewhat)
19.10.18 13:33:13<stoopkid> and then the types are just a bonus
19.10.18 13:34:50<stoopkid> there's also a matter of efficiency of the implementation, which in C++ we can get nearly as efficient as theoretically known-possible, but... that's my least concern at the current moment tbh
19.10.18 13:35:02<dmiles> well you know my hypothesis is that dependant types expresses only a minimal subset of modal logics
19.10.18 13:35:24<dmiles> so i was thinking that you goes need to break thru my barriars harder
19.10.18 13:35:33<stoopkid> heh
19.10.18 13:35:40<stoopkid> i have no idea so it's entirely possible
19.10.18 13:35:56<dmiles> so i was thinking that you guys need to push much harder to break thru the barriar
19.10.18 13:37:18<dmiles> for instance i found that  description logic is much more expressive than prolog.. thus i couldnt just implemnt description logic in C++ and then start to make things work
19.10.18 13:37:39<dmiles> i had to from day one puch prolog into doing it
19.10.18 13:37:55<stoopkid> how do dependent types relate to modal logic though i'm only really familiar with the basics of what modal logic is and not sure how it relates to dependent types
19.10.18 13:38:02<dmiles> push the prolog code into acceptance .. so that i could mix them
19.10.18 13:38:49<dmiles> mietek has givn me the impression that lambda cube is a subset of modal logic
19.10.18 13:39:40<dmiles> that each node and line on the cube represents some impl of doing modal logic
19.10.18 13:39:53<dmiles> such a S5 and K4 etc
19.10.18 13:40:22<dmiles> oops S4 and K5 etc
19.10.18 13:41:33<dmiles> isnt the lamda cube even label from modal logic?
19.10.18 13:42:10<stoopkid> not sure heh
19.10.18 13:43:27<dmiles> https://vcvpaiva.github.io/includes/talks/LSFA2015.pdf
19.10.18 13:43:56<dmiles> like the slide IK and CK cubes
19.10.18 13:44:02<dmiles> like the slide "IK and CK cubes"
19.10.18 13:48:32<dmiles> MLTT impls i heard also generally only cover the majoirty of the cube
19.10.18 13:50:47<dmiles> for exmaple i used B5 in narrowing predictions  (i describe what properties *cant* exist)
19.10.18 13:51:23<dmiles> for example i can prove a user wont ever make an array of negative size
19.10.18 13:52:01<dmiles> (even though that in itself does not seem usefull.. the deductions that follow will be)
19.10.18 13:53:45<dmiles> MLTT should be (if not already) expressive enough for things  liek that
19.10.18 13:55:09<dmiles> but i think the issue is no one thinks such definations will help code verification
19.10.18 13:55:37<stoopkid> it's expressive enough for stuff like that, i would consider something like that to be routine for mltt
19.10.18 13:55:42<dmiles> at best with my example they will only use it to speed up the existing systems
19.10.18 13:56:30<dmiles> the part it may not cover it how to impl negative size arrays ina  way that still operates on a computer
19.10.18 13:56:40<dmiles> (since that would be impossible)
19.10.18 13:56:52<stoopkid> why impossible
19.10.18 13:56:57<dmiles> yet in modal logic it is not bound by such constraints
19.10.18 13:57:25<stoopkid> oh nvm i misread what you said haha
19.10.18 13:57:29<dmiles> to allocate negative slots in a list
19.10.18 13:57:48<dmiles> hehe
19.10.18 13:58:28<stoopkid> so... what's the benefit of not being bound by that seemingly reasonable constraint heh
19.10.18 13:59:24<dmiles> without such constraints, a hypotehisis can be tested or made that is unprovable
19.10.18 13:59:55<dmiles> which is usefull for a computer program that invnets new programs
19.10.18 14:00:20<dmiles> it allows it to thinjk outside the box (cube. .hehe)
19.10.18 14:00:42<stoopkid> i think i see what you're going for there
19.10.18 14:01:09<dmiles> the important thing is to represent data that cant "yet" be fully represented
19.10.18 14:01:27<stoopkid> note that we can do this also in mltt already
19.10.18 14:01:58<dmiles> but dont you have to wait until there is a representation before you can start the program?
19.10.18 14:02:24<dmiles> physically one would need to
19.10.18 14:02:46<stoopkid> you don't have to start the program to reason about the consequences of its partial specification
19.10.18 14:02:50<dmiles> (unless ran on the more expressive pla5tform that does not have that requirement)
19.10.18 14:03:26<dmiles> yes.. but what happen when you want to start such a progrma?
19.10.18 14:03:53<dmiles> i mean that is my typical usecase is to have a program that in less than 1% finished
19.10.18 14:04:30<stoopkid> is there even a meaningful way to start such programs in full generality ? what if the first step is the one that's missing
19.10.18 14:04:34<dmiles> and have durring runtime enough crystalization
19.10.18 14:05:10<stoopkid> you can run any of the pieces of it that you've constructed already, in fact in some ways it's easier because everything's a self-contained function
19.10.18 14:05:18<dmiles> in prolog at runtime it operates by having "just enough" crystalization
19.10.18 14:05:30<stoopkid> prolog is different
19.10.18 14:05:43<stoopkid> prolog runtime is a different kind of runtime than mltt runtime
19.10.18 14:06:35<stoopkid> mltt has 3 stages: 1. proof-search (writing the program) 2. proof-check (compile time) 3. proof-normalization (runtime)
19.10.18 14:06:44<dmiles> sort where i was going is by exploring descrioptio nlogic you start to need mltt to be capable of nmore of the lambda cubwe
19.10.18 14:06:51<stoopkid> relative to mltt, prolog is effectively constrained to stage 1
19.10.18 14:07:13<dmiles> prolkog is doing all three stages at runtime
19.10.18 14:07:40<dmiles> the idea is it cant accidently screw up #2
19.10.18 14:08:12<dmiles> because the processor ingore unprovable instructions
19.10.18 14:08:36<dmiles> and finds onmly provable version of the code
19.10.18 14:09:17<stoopkid> yes ideally in prolog you won't construct any wrong proofs so the stage 2 is redundant, but my stage 3 also includes manually typing out a proof-tree without going through any specific inferencing process
19.10.18 14:09:35<stoopkid> prolog finds proof-trees and this is it's runtime
19.10.18 14:10:07<dmiles> well prolog itself realyl doesnt inference other than following the opertunity that we create ina flow chart
19.10.18 14:10:19<stoopkid> right
19.10.18 14:10:42<dmiles> i been studying the Curry-language compiler
19.10.18 14:10:48<dmiles> with dependant types
19.10.18 14:11:07<dmiles> it translates dependant types to prolog code
19.10.18 14:11:23<stoopkid> you can do the same over mltt data-structures but type theorists quite often just only talk about stage 2 and stage 3, i guess because they're more focused on its capacity as a knowledge-representation and traditional-programming framework at this point in time
19.10.18 14:11:39<dmiles> the cute part is i can leave most of the details of the dependant types out.. and it will stuill run
19.10.18 14:12:11<dmiles> since none of those three stages need to happen in any particular order
19.10.18 14:12:20<stoopkid> well that's sort of what i mean about how the types and the programs can pretty much operate independently of each other
19.10.18 14:12:32<stoopkid> well
19.10.18 14:12:50<stoopkid> stage 1 has to happen before stage 2 or stage 3 can happen
                 <dmiles> (in prolog at leasrt we are allays time traveling)
19.10.18 14:13:11<stoopkid> you have to have the proof before you can check it or normalize it
19.10.18 14:13:27<dmiles> (durring stage 3 i notice i left 4% of stage 1 not yet completed)
19.10.18 14:14:09<dmiles> (go back and ge the 2% done.. then wait until the remaining 2% is possilbe)
19.10.18 14:14:57<dmiles> in practicve this allows me to make uder events into type decls
19.10.18 14:16:06<dmiles> for example when a user presses the "A" key.. i lie to the program its has to remember it had a type decl about this user event
19.10.18 14:16:12<stoopkid> i'm having trouble making any sense of that, but... my point here is that everything you're talking about here is effectively independent of what type theorists are usually discussing in "their view" of what compile-time/run-time means
19.10.18 14:17:34<dmiles> it is very wierd concept to think aobut "state" as "types"
19.10.18 14:17:46<stoopkid> maybe i'd put it like this: what type theorists are often focused on is essentially a knowledge-representation framework, and not the reasoners that would reason over this knowledge, whereas you're focused specifically on the latter
19.10.18 14:18:09<dmiles> well they think that there are tool stages
19.10.18 14:18:23<stoopkid> but these aren't incompatible they can be quite readily combined
19.10.18 14:18:33<dmiles> it is ocnvient for them to not accidently grab the wrong tool at the wrong time
19.10.18 14:19:11<dmiles> yes.. i figure the acutal problem is just complacency
19.10.18 14:19:56<dmiles> (meaning if they had a reason to make things better they world)
19.10.18 14:20:06<dmiles> would*
19.10.18 14:20:27<dmiles> to "these aren't incompatible they can be quite readily combined"'
19.10.18 14:20:58<stoopkid> well, but not really complacency either, every major mltt implementation has auto-proving capabilities they just aren't necessarily the most well-developed part of the theory
19.10.18 14:22:03<dmiles> asking to do what they could is changing what they dpo
19.10.18 14:22:47<dmiles> so it is safer to just do what they dream about rather than talking them into it
19.10.18 14:23:18<stoopkid> but there's so many options for how to construct the reasoning capabilities compared to the options for how to construct the knowledge-representation that imo it's the correct approach to just design a solid mltt KR framework and then bring-your-own-reasoner
19.10.18 14:23:58<dmiles> that is make the type theory descend from the cube.. rahter than the other direction
19.10.18 14:26:52<dmiles> solid KR framework that can express desires and beliefs of multiple programmers even before the programmer can solidely define what they are
19.10.18 14:27:11<stoopkid> it can do this
19.10.18 14:28:11<stoopkid> they only need to be able to define *something* about it in order to get started
19.10.18 14:28:16<dmiles> i wonder if the Curry system implemetns MLTT
19.10.18 14:28:52<dmiles> hah its nearly impossible to ask google without excluding the word howard
19.10.18 14:30:08<stoopkid> this use-case is already well-demonstrated by my dreadbury mansion example and similar stuff
19.10.18 14:30:49<stoopkid> nowhere in that code does it say that the representation of the situation is complete
19.10.18 14:31:16<dmiles> but what if expreince with users needed it to be more complete?
19.10.18 14:31:25<dmiles> or experinces by needs of otehr programmers?
19.10.18 14:31:47<dmiles> i guess the usecase is "no code programs"
19.10.18 14:31:55<dmiles> (my usecase that is)
19.10.18 14:32:38<stoopkid> there is some work that could be done to make the partial specification more easily extensible with knew knowledge but i've also demonstrated that you can build this flexibility into the types (i.e. conjunctions where you can add another conjunct, conjunctions where you can remove a conjunct, disjunctions where you can, etc...)
19.10.18 14:35:32<dmiles> yes.. and that add/remove pretty much is mechanizable
19.10.18 14:36:11<dmiles> even withought violations of the three stages
19.10.18 14:36:21<stoopkid> could you put that flexibility at a lower level, like through defeasible logic? maybe, if they're equivalent in all the "required" properties then it would just be a subjective design decision and i haven't seen enough of this kind of alternative to either demonstrate that it loses the desirable/required properties but also haven't seen that it actually maintains them in order for me to justify a switch from something that
                 <stoopkid> i know already does the job
19.10.18 14:36:46<dmiles> complacency
19.10.18 14:37:15<dmiles> unless you really dont want that.. i am sure most companies dont
19.10.18 14:38:24<dmiles> unless you really dont want that = "allowing a change in requirements at runtime"
19.10.18 14:38:40<stoopkid> well, not just complacency, because my first impression is that putting something like defeasible logic at the foundation would break most of what appears to me to be desirable properties and i haven't seen how they would be effectively recovered
19.10.18 14:41:28<dmiles> i dont think they are lost
19.10.18 14:41:49<dmiles> though it sounds like either magic or crazy as making a carriage "horseless"
19.10.18 14:42:11<dmiles> its only magic untill you start doin git
19.10.18 14:42:47<stoopkid> like, what it is for me is that there's so much you can do by having the total mathematical consistency of mltt as the foundation, and then all that can be applied to the "flexible situations" to enhance our reasoning about them, that i haven't seen the justification for dropping the mltt framework
19.10.18 14:43:17*** Join: koom (~koom@89-24-57-254.nat.epc.tmcz.cz, (unauthenticated): realname)
19.10.18 14:43:48<stoopkid> like, when i look at it as a KR framework, and i have a situation where i need flexibility/extensibility, i'm like "oh, well, technically when i think about it i really didn't mean X AND Y i meant X flexible-AND Y"
19.10.18 14:45:14<stoopkid> then for me it would just be a matter of adjusting the syntax to make you default to the flexible specifications rather than the strict ones
19.10.18 14:46:33<dmiles> but i cant immagine there is another objective to your project
19.10.18 14:47:21<dmiles> (since your goal is to mix non-mltt KR magically with Mltt KR)
19.10.18 14:47:52<dmiles> means one of the other KRs is goign to need tio step up
19.10.18 14:48:01<stoopkid> i wouldn't really say that's my goal
19.10.18 14:50:30<dmiles>  needs to step up = because they are two differnt paradymns.. one is going to have to make working from the other comfortable
19.10.18 14:50:55<dmiles> (at least in logic)
19.10.18 14:51:22<stoopkid> well imo the burden is on the KR side of things
19.10.18 14:51:40<stoopkid> so, i definitely don't thing you're "wrong" here per se
19.10.18 14:51:45<stoopkid> think*
19.10.18 14:52:55<stoopkid> the knowledge in the KR has to be easily accessible to external reasoners
19.10.18 14:53:27<dmiles> the reason you give those reasoners accesss is so they can reason out and hack in new ideas?
19.10.18 14:53:54<dmiles> (oh i see what you were saying.. you wrre agreeing with what i was sayign above)
19.10.18 14:55:04<dmiles> (being easily accessable meaning that doing the important stuff between the two of them is actualy possible)
19.10.18 14:55:45<dmiles> for example when you extend a types isn one KR it extends in the other KR
19.10.18 14:55:52<dmiles> for example when you extend a type in one KR it extends in the other KR
19.10.18 14:56:48<dmiles> so that reasoners can be used to extend types
19.10.18 14:56:50<stoopkid> the reasoner basically just needs to be able to pull a fact (possibly complex) out of the KB and then be able to break it down into its component parts and then manipulate each component part
19.10.18 14:57:28<stoopkid> and then can do "whatever it wants" from there, and we can be assured that even if you wrote a faulty reasoner it can't ever put "malformed" knowledge back into the KB
19.10.18 14:58:33<dmiles> though Logicmoo was about making sure hat reasoners can be used to infer things that improve the agility of a programs inside the moo
19.10.18 14:59:07<dmiles> was/is
19.10.18 14:59:13<stoopkid> there's no reason the reasoners couldn't be applied to the same task in this context
19.10.18 14:59:45<dmiles> right which is why i was thinking you probably need to extend MLTT rather than extend Descriptiopn Logic
19.10.18 15:00:25<dmiles> extend MLTT KR   to accept Description Logic KR
19.10.18 15:00:57<dmiles> that might be simple as a set of macros
19.10.18 15:01:34<dmiles> the interaction between  such macros i;ve been stuying in Curry's Dependant Types
19.10.18 15:02:09<dmiles> in https://github.com/TeamSPoon/pakcs_lib
19.10.18 15:02:27<dmiles> and it si very doable
19.10.18 15:03:54<stoopkid> but... why? i still haven't seen what the missing use-case is
19.10.18 15:04:17<dmiles> it is that all three stages are done in the very very last minute
19.10.18 15:04:33<dmiles> first we needed the capability
19.10.18 15:04:39<stoopkid> what's the benefit of that
19.10.18 15:05:18<stoopkid> and what does that even mean really, and what is preventing being able to do that with mltt?
19.10.18 15:05:38<stoopkid> the stages i outlined were just the typical use-case
19.10.18 15:05:50<dmiles> well that types can hacked out and invented by whatever the DL KR reasoners descide
19.10.18 15:05:55<stoopkid> if you have something partially proved you can partially type-check, and partially normalize (when possible)
19.10.18 15:06:44<stoopkid> so you can mix and match this stuff at your discretion and the laziness of the functional lang even packages that up to let you do that
19.10.18 15:06:54<dmiles> and that whever the hacking out is .. is done with a verification stage
19.10.18 15:07:18<dmiles> and that whever the hacking out is .. is done still has a verification stage
19.10.18 15:08:07<stoopkid> you could do this with the same KR foundation though
19.10.18 15:09:46<dmiles> yep.. that is my hope
19.10.18 15:10:00<stoopkid> cause here's how i'm imagining it: you might not even be applying some prolog-style reasoner to it, you might be applying statistical processing and neural nets or even some future biological computer that we don't even know exactly how it works
19.10.18 15:10:28<dmiles> well what the code does is translates Dependant types to a prolog impl
19.10.18 15:11:04<dmiles> that is simple enough to run on Prolog
19.10.18 15:11:27<dmiles> the interesting thing is when going the other dirrection
19.10.18 15:12:34<dmiles> (if that will truely be possible.. it is obvious it is!.. but whether or not i get to witness this.. is based on my complacency :P )
19.10.18 15:12:39<stoopkid> the trick is that when you go in the other direction, prolog programs don't map to mltt programs, they map to mltt types
19.10.18 15:13:58<dmiles> yes.. the interesting part is seeing prolog programs mapped to types and types getting mapped back to programs that map to prolog
19.10.18 15:14:30<dmiles> (the full circle that is able to take placE)
19.10.18 15:15:25<dmiles> since prolog programs can traditionaly do certain things easility
19.10.18 15:16:26<stoopkid> sure, i mean, we're basically building autonomic to have the prolog/ND-style inferencing and the mltt directly combined in the "expected" fashion
19.10.18 15:16:50<stoopkid> for somebody's definition of "expected" anyway
19.10.18 15:17:40<stoopkid> depends who's critiquing the prolog aspect of it when existential variables are concerned
19.10.18 15:18:20<stoopkid> apparently it's a "there's no one right answer" kind of thing, hence more reason for me to assume that in general this should be a bring-your-own-reasoner kind of thing
19.10.18 15:19:25<dmiles> yeah existentials which are effectively promises of "some" interface existing by the time we get the need tpo call it
19.10.18 15:20:16<dmiles> and when we combine two existentials we want to be able to prove that they actualy connect
19.10.18 15:20:58<stoopkid> so you have to understand that when i defend mltt's position in this web of systems, i'm 90% talking about its utility as the KR framework for other things to reference
19.10.18 15:21:31<stoopkid> and only ~10% on the basis of its current use-cases
19.10.18 15:22:18<stoopkid> mltt itself is purely just a description of the structure of the KR
19.10.18 15:22:51<stoopkid> that knowledge just happens to be sophisticated enough that it directly encodes logical concepts and programs that are directly executable
19.10.18 15:23:46<stoopkid> but all that is prior to even asking the question of "now what's a good way to interface with this from the outside"
19.10.18 15:26:21<stoopkid> but there's not really any particular restrictions here, just... well.. maybe complacency on the part of people who are fine with just using this aspect of it to continue doing the traditional programming paradigm but... that's certainly not everybody, and also isn't an illegitimate use-case of it anyway
19.10.18 15:28:22<dmiles> Prologgers come from the standpoint that code and KR are supposed to mix in interesting ways
19.10.18 15:29:13<dmiles> and that the ideal of pakcs_lib system is that Mltt KR should be just as accessable
19.10.18 15:29:47<dmiles> and even Haskell-ish (Curry is a ML syntax language) code should be able to be mixed in
19.10.18 15:30:58<dmiles> so that https://github.com/TeamSPoon/pakcs_lib/blob/master/testsuite/LanguageTests/TestNarrowing.curry
19.10.18 15:31:21<dmiles> is both code and data
19.10.18 15:31:26<stoopkid> it's a perfectly fine standpoint, and is not incompatible with the choice of MLTT as the KR framework, some would even argue that existing systems already do the job to some extent, but i'd agree not in quite the same way you're describing
19.10.18 15:33:47<dmiles> existing systems already do the job to some extent about as well as mmost non-prolog languages
19.10.18 15:35:01<dmiles> and most people program in non-prolog languages (for whatever reason)
19.10.18 15:35:10<dmiles> hehe
19.10.18 15:35:18<stoopkid> possibly but imo this isn't much to do with MLTT KR itself it's just a matter of how interfaces to it have been designed so far
19.10.18 15:35:28<dmiles> i have to run to take my daughter some place.. but back in 90 minutes
19.10.18 15:35:43<stoopkid> ok ill be aroundish
19.10.18 15:39:18<stoopkid> the benefit of MLTT KR is that all the knowledge in it is directly relatable through solid constructive mathematics which itself can be stored as more knowledge and used to actually compute things, which can easily build on itself without one thing interfering with another, because it's just consistent always
19.10.18 15:42:24<stoopkid> so you have pure *structural* mathematics (not number theory) as a basis, everything you build up from here can just be handled by the mathematics, no problems, the integrity of the knowledge representing complex logical relations between things is never compromised in its consistency, soundness, anything...
19.10.18 15:44:16<stoopkid> when you go the other direction, as you add more rules/axioms as direct assertions, there's always a question: am i still consistent? am i still sound? does it still mean what i'm trying to express?
19.10.18 15:46:17<stoopkid> breaking these properties even slightly and then allowing to build on top of malformed knowledge, it's building a house of cards
19.10.18 15:47:45<stoopkid> and you're set back in terms of having to demonstrate that you can recover the use-case of storing & using complex mathematical proof with its intended consistency & soundness
19.10.18 15:50:54<stoopkid> starting from MLTT, consistent, sound & expressive structural logic (aka mathematics?): no problems, no questions, whatever flexible stuff you build up from here and whatever "glue logic" you build between programs & knowledge, you aren't at risk of running into system-crashing dependencies on flawed logic
19.10.18 15:53:29<stoopkid> imo that's such an achievement of logic & CS that the burden to demonstrate any kind of switch away from an MLTT-based KR framework is necessarily on the one making the suggestion
19.10.18 15:55:05<stoopkid> especially when it's not incompatible with their use-cases
19.10.18 15:57:51<stoopkid> computer bugs, i.e. dependencies on flawed logic, is a way bigger problem than lack of AI
19.10.18 15:59:36<stoopkid> when you have something that basically "solves computer bugs" in nearly full generality modulo bugs in its own implementation and failure to specify what's "buggy" vs. "not buggy" and that's just the first thing it does....
19.10.18 16:02:59<stoopkid> MLTT is not necessarily special in this regard, it's just well-demonstrated to be a consistent, sound, & expressive structural logic that does this job very well
19.10.18 16:04:38<stoopkid> there's competing frameworks, but generally if something doesn't have a demonstrated way to meet this "consistent sound mathematically-equipped bug-preventer" requirement, i'm not even really considering it when it comes to KR or computational foundations
19.10.18 16:06:33<stoopkid> the main property MLTT and its derivatives have that makes it my preferred choice among the ones i've looked at (like Isabelle/HOL and other things) is it's just simple
19.10.18 16:07:15<stoopkid> like really not a very complicated theory at all, and really easy to see how it actually captures complex structural logic consistently & soundly
19.10.18 16:08:09<stoopkid> so easy i can write the proofs in it myself in fact it's the "standard" way to do it so far as you've noticed
19.10.18 16:09:57<stoopkid> and we should probably note: it's only possible that people can do that because there's effectively a fixed set of rules & axioms
19.10.18 16:16:24<stoopkid> now, you can for the most part map prolog programs into types and vice versa, but, let's look at what happens when put facts and rules into the kb as direct assertions prolog-style
19.10.18 16:16:43<stoopkid> "all birds fly. penguins are birds. penguins don't fly"
19.10.18 16:18:11<stoopkid> doesn't work out, because you're basically trying to take informal common-sense statements (or at best scientific hypotheses) as logical facts
19.10.18 16:24:36<stoopkid> if you want to keep consistent reasoning you have to shuffle this stuff around a bit in order to use each statement in the way it's actually intended
19.10.18 16:25:16<stoopkid> what's the problem specifically in this case: "all birds fly" is just false
19.10.18 16:25:46<stoopkid> penguins are indeed birds, and penguins don't fly, not all birds fly
19.10.18 16:26:28<stoopkid> whoever said that all birds fly apparently hadn't seen every bird, what were they even talking about?
19.10.18 16:27:20<stoopkid> "all birds fly" was an inference somebody made based on only having seen a limited number of birds, all of which did fly
19.10.18 16:28:33<stoopkid> it gets defeated by the discovery of penguins and the fact that they don't fly
19.10.18 16:29:01<stoopkid> why does "all birds fly" get defeated and not the assertion "penguins don't fly" ?
19.10.18 16:29:38<stoopkid> is it because "penguins don't fly" came second? nope this couldn't be it because what if we just try to put back in "all birds fly" ?
19.10.18 16:30:57<stoopkid> for whatever reason the assertions that penguins are birds and that penguins don't fly are "scientifically prior" to the inference that all birds fly
19.10.18 16:34:57<stoopkid> maybe they're more backed up by better evidence, maybe people are just really holding onto the belief, but whatever the case may be, it's evident that we put everything into a rather large conceptual scaffolding that allows us to choose which theories we regard as primary and which theories we regard as secondary and thus defeasible, and that indeed all these real-world theories need to be treated as exactly that:
                 <stoopkid> essentially scientific theories, not logical assertions, but which can be compared using logic
19.10.18 16:39:20<stoopkid> the intended structure of autonomic even already has this built-in in some sense through the side-chains mechanism: parent-chains are primary to sub-chains in the dependency/defeasibility hierarchy
19.10.18 16:41:59<stoopkid> but the same concept of such a hierarchy can be used off-chain as well, as well as semi-independently of the side-chains hierarchy on-chain as well
19.10.18 16:50:32<stoopkid> so, there's extremely good justifications for keeping with a system that has a foundation in a fixed set/schema of axioms for a sound, consistent, highly-expressive and purely-structural logic, and leaving all the prolog-style stuff trying to describe "real-world" theory, as basically something along the lines of what i did in the dreadbury mansion example
19.10.18 17:49:06<dmiles> "you aren't at risk of running into system-crashing dependencies on flawed logic" but what happens more often is that the program actualyl doesnt do what logically what it needs to do  in "real world" theory
19.10.18 17:52:24<dmiles> for example there was a program that was verified by 100s of people that monitors the turbines of a commercial jetplane
19.10.18 17:52:53<dmiles> it checked the while the landing gear was down whether wheels are turning = that mean the plane was taxi-ing
19.10.18 17:53:09<dmiles> what they didnt account for was durring landing the pilots actual spent time forcing the wheels not to turn (skidding) unfortainly if the wheels are not turning that means the plane needs to accellerat the tubines since the plane must be stalling
19.10.18 17:54:51<dmiles> Jack Park was explaining that this was why we needed to use "explainable" logic and ontology that the code uses for adaptation since often humans will write code to do soething we dont want
19.10.18 17:56:24<dmiles> when worked on space missions his thing was making sure equipement had to have a mode and a way to explain their modes
19.10.18 17:56:29<dmiles> when he*
19.10.18 17:57:42<dmiles> but yeah there noting wrong with making sure the logic also checks the code to
19.10.18 18:17:04<dmiles> since after a while i no longer had compiler or type of errors that compilers like scala could catch i am forced to design a sublanguage (using function names) that described what and why the code does stuff
19.10.18 18:17:34<dmiles> the idea of MLTT was to get people to do this as well
19.10.18 18:17:59<dmiles> sorta a way that there is yet another layer that things have to make sense from
19.10.18 18:19:03<dmiles> problem there is that the types of errors people make become desing errors.. the point of my systems are to avoid not being able to catch those
19.10.18 18:20:51<dmiles> rather than to create a false sense that i and everyone gets when the program compiles
19.10.18 18:23:48<dmiles> the name of defense i use is called literate programming
19.10.18 18:26:34<dmiles> often litterate programming happens in english syntax.. but not for me
19.10.18 18:26:51<dmiles> my program has now way to verify my code does what i wrote that way
19.10.18 18:27:19<dmiles> my program might have no way to verify my code does what i wrote :(
19.10.18 18:27:39<dmiles> so this is why i use macros that decribe what i want to happen first
19.10.18 18:28:06<dmiles> in a natural language sort of way
19.10.18 18:36:41<dmiles> when programs get over 20k lines with no comments.. i thank myself i did this
19.10.18 18:37:23<dmiles> had i *also* commented the code its be 59k lines :(
19.10.18 18:38:16<dmiles> as ether 33% or 66% woujld make no sense to a reader
19.10.18 18:46:19<stoopkid> your example would be a situation of failure to properly distinguish buggy from non-buggy, which is a separate problem from knowing what's non-buggy but still having buggy code
19.10.18 18:48:23<dmiles> here is part of a self programming system i wrot in java in 2010.. https://github.com/TeamSPoon/appdapter/blob/master/maven/org.appdapter.lib.gui/src/main/java/org/appdapter/gui/util/FunctionalClassRegistry.java
19.10.18 18:48:33<stoopkid> arguably the same holds true even when you don't use type-checking but with types you can keep adding new ways to describe the constraints, and comparing the different descriptions of constraints to make sure they're equivalent and make sure the code satisfies each version of the constraints
19.10.18 18:48:54<stoopkid> with just the programs there's no such luxury available
19.10.18 18:48:55<dmiles> this allows the program to guess on how to write better transmogrification than hunmans could
19.10.18 18:49:47<dmiles> (its a program that designs GUIs on its own by analizing the JVM)
19.10.18 18:50:24<dmiles> i think it ended up taking me at least 40k lines to do that
19.10.18 18:51:17<dmiles> i basically had to map a sort of logic that i used if i was put to sucha task
19.10.18 18:51:30<dmiles> the result is it will always write better version than i would
19.10.18 18:52:12<stoopkid> "transmogrification" == "program optimizations" ?
19.10.18 18:53:35<dmiles> transform, especially in a surprising or magical manner.
                 <dmiles> "the cucumbers that were ultimately transmogrified into pickles"
19.10.18 18:54:57<dmiles> here is jsut one file to show what i mean by it can only be read and understaood semanticly
19.10.18 18:54:58<dmiles> https://github.com/TeamSPoon/appdapter/blob/master/maven/org.appdapter.lib.gui/src/main/java/org/appdapter/gui/browse/Utility.java
19.10.18 18:55:53<dmiles> that was the macro file that defined the language for the rest of the system
19.10.18 18:56:59<stoopkid> what is the goal here exactly
19.10.18 18:58:26<dmiles> the goal was to create a series of generic static methods that would allow dynamic objects to be contructed all from such static functionms
19.10.18 18:58:59<dmiles> this is to decrease the overhead in thinking about the designs of later parts
19.10.18 18:59:09<dmiles> this is to decrease the mental overhead in thinking about the designs of later parts
19.10.18 18:59:54<dmiles> in order to free up the mind to do things from the everyone would belive to be too hard
19.10.18 19:00:03<stoopkid> dynamic objects to do what with, what are the later parts
19.10.18 19:00:50<dmiles> the dynamic objects in this case were Java Swing objects that wrapped and allowed 3rd party headless program to have a configurable API
19.10.18 19:01:44<dmiles> such as it would insert a listener into a HashMap and make it editable
19.10.18 19:02:17<dmiles> and allow endusers to expand closed source programs in new and better ways
19.10.18 19:03:05<dmiles> though the real reason i wrote it was to avoid ever having to design a UI personally again :P
19.10.18 19:05:01<dmiles> here is more info https://docs.google.com/document/d/1w3n3_5OQT5eRk_2D-4tUJA1jQpr5zpXp0tF7GGBJ0i4/edit#heading=h.eq4izu25f6mn
19.10.18 19:05:36<dmiles> screenshots and docing how it works
19.10.18 19:06:29<dmiles> the the later parts was that it could save off in turtle files the config to genrate the code for later
19.10.18 19:07:07<dmiles> the human could also go in and show it better ways and things to ignore
19.10.18 19:07:35<dmiles> where i was kinda going with this is because i used a special programmig paradymn
19.10.18 19:08:51<dmiles> that allows humans and computer using type inference (at least from the Java VM)  to stave off misserable work
19.10.18 19:09:03*** Quit: koom (~koom@89-24-57-254.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
19.10.18 19:09:05<dmiles> *and* no human is required to writ ethe code to make mistakes
19.10.18 19:09:57<dmiles> this is the paradymn we use in CYC
19.10.18 19:10:51<dmiles> 1) create library of macros to create a desired DSL
19.10.18 19:11:17<dmiles> 2) write in your new languafg .. going back and adding one.. yet not permitting yourself to cheat
19.10.18 19:12:54<dmiles> Haskell programming does this sort of thing to.. 1) create a set of types thjat will make coding possible for you     2) use it
19.10.18 19:14:13<dmiles> just why its is bad when haskell does it.. it makes you redisng your logic
19.10.18 19:14:48<dmiles> in order to fit .. which may not always "help" your semantics
19.10.18 19:17:12<dmiles> which i think that extra mental overhead leads to more bugs
19.10.18 19:17:53<dmiles> Scala and Java at least did
19.10.18 19:18:03<dmiles> the whoole OOP of java is what i refer to there
19.10.18 19:18:44<dmiles> Scala (closer to Haskell) gave me tricker ways to hide my bugs from everyone
19.10.18 19:22:41<dmiles> the idea of litterate programming is so one can speak their code outloud
19.10.18 19:23:19<dmiles> (so the grammar part ot the brain helps decide if the code is correct)
19.10.18 19:23:31<dmiles> this also works for logic
19.10.18 19:24:04<dmiles> which am sure most people after a while evne in Haskell are doing
19.10.18 20:18:38<stoopkid> so basically taking pieces of the program and making them dynamically accessible/editable during run-time to have an interactively self-modifying program?
19.10.18 21:45:36<dmiles> well the progam it takes doesnt actually modify itself. but this library injects itself into a program so that a UI exists to modify things.  it main just adds to a program.
19.10.18 21:46:03<dmiles> it mainly adds to a program
19.10.18 21:46:40<dmiles> it introspects on when things got named in that program to guess at building a UI
19.10.18 21:49:21<dmiles> so for instance if an java object class has a non inherited public method that returns a string ..  and it has noticed more than one such object and when invoking such methjod it sees they return differnt values.. it decide that might be a good way to refer to an object when communicating to the user
19.10.18 21:50:50<dmiles> it adds thats object class debugger  browsable treeview and adds the children instances
19.10.18 21:51:01<dmiles> it adds thats object class browsable treeview and adds the children instances
19.10.18 21:51:22<dmiles> i also let that program design it own UI
19.10.18 21:53:19<dmiles> my supervisor loved that idea because he finnaly could name a program "wack-o-mole" ! .. since it was always able to find an excuse to pop up yet another UI componet you might want to close
19.10.18 21:54:19<dmiles> oh this is a great microcosm example of its powers .. i decide to jsut add a bool that suspended self hacking.. and it make a UI for that
19.10.18 21:54:29<dmiles> so you could tick a box to disable it
19.10.18 21:55:57<dmiles> the thing would also have to analize if calling hte public string method might secretly cause an unwanted side effect to
19.10.18 21:56:40<dmiles> it stored its inferences in RDF
19.10.18 21:57:00<dmiles> so you could reload exprience it had
19.10.18 21:58:32<dmiles> a typical usecase might be if you had and JSP Web Application server .. like  WebSpehre or Tomcat
19.10.18 21:58:59<dmiles> you could configure varous parts of you applicaiton server that no one ever thought possible
19.10.18 21:59:19<dmiles> such a default http timeouts etc
19.10.18 22:01:14<dmiles> oh like with thingk like LarKC
19.10.18 22:01:34<dmiles> it can even use LarKC to store its rule
19.10.18 22:01:41<dmiles> s
19.10.18 22:02:14<dmiles> i wish i had lots of money.. i'd hire a person jsut to maintain and teach the world to use this software
19.10.18 22:02:51<dmiles> but way too many important thingas to do in the next 10 years :(
19.10.18 22:02:52<stoopkid> we should've been bankers eh :P
19.10.18 22:03:51<dmiles> yeah.. though am am now working on a new game that is like DF
19.10.18 22:04:15<dmiles> it learns new code from watching me
19.10.18 22:04:36<dmiles> well at least for the part i am working on now
19.10.18 22:04:58<stoopkid> so in your examples, these and others you've given before, you seem to be mostly focused on the method of interactivity of the KB, rather than on the actual structure of the KR foundations
19.10.18 22:05:41<dmiles> well these examples require the multipel KRs to be able to hqave some automatic translation
19.10.18 22:06:24<dmiles> meaning if in MLTT we have a way to say "this thing has this property" that soemthning besied its KR can use that info as well
19.10.18 22:06:40<stoopkid> i see
19.10.18 22:07:11<dmiles> having at least some overlap
19.10.18 22:07:39<stoopkid> so i think now i'm starting to understand a bit better our specific point of divergence
19.10.18 22:07:53<stoopkid> (or at least one of them)
19.10.18 22:08:31<dmiles> In  AppdapterUI i  force the Java Object Class System.. and RDF to agree that there as such things as Classes
19.10.18 22:08:38<stoopkid> i'm approaching this in a "here's the KR, bring your own interactivity" way and your approach seems to be "here's the interactivity, bring your own KR"
19.10.18 22:09:45<dmiles> then the UI components called "Beans" are force to belive that the KR of etierh of those two are something it is in charge of making it so a user can navigate it
19.10.18 22:11:34<dmiles> well like you there has to be some baseline non-difficult canned functional.. so for exmale.. MLTT is used as a baseline to allow steps 1-3
19.10.18 22:12:25<stoopkid> so basically a baseline KR that everything else is mapped into?
19.10.18 22:12:33<dmiles> that works fine before you bring RDF or external reasoners into the picture
19.10.18 22:13:11<dmiles> right..  at least is capable of doing what you want
19.10.18 22:13:30<dmiles> which is kinda how you described the "MLTT can do whatever is needed"
19.10.18 22:14:36<dmiles> if you bring RDF into the picture.. youd want to be able to have RDF interact with the things that MLTT already does
19.10.18 22:16:07<stoopkid> well... maybe?
19.10.18 22:16:19<stoopkid> what RDF wants to do is sort of outside the scope of what MLTT's concerned with
19.10.18 22:16:35<dmiles> so that "X is mapped into Y"
19.10.18 22:17:13<dmiles> for instance a MVP of this ia RDFReactorforHakell
19.10.18 22:17:25<dmiles> for instance a MVP of this ia RDFReactor_for_Haskell
19.10.18 22:17:32<stoopkid> if you want to map RDF into MLTT, you can do this, and vice-versa
19.10.18 22:18:23<stoopkid> (although the RDF describing the MLTT won't necessarily be constrained to be interpreted as MLTT! this interpretation is basically up to the user to assert, again outside the scope of even RDF)
19.10.18 22:18:41<dmiles> https://pdfs.semanticscholar.org/40fa/7f7ebf5e3be92e6d3c9bad7b2753e9121971.pdf  <- this is an RDF-Reator
19.10.18 22:19:13<dmiles> right what you described is beyond the scope of either nomrally
19.10.18 22:20:18<stoopkid> well, it's in scope of MLTT to be able to represent RDF syntax & semantics, and it's in scope of RDF to be able to represent a *syntax* for MLTT, but not semantics
19.10.18 22:20:38<stoopkid> RDF just lays out a graph structure, it doesn't, by itself, assert the semantics of those nodes and edges
19.10.18 22:20:54<dmiles> oh RDF is designed to design new software
19.10.18 22:21:07<dmiles> as in new "record types"
19.10.18 22:21:29<stoopkid> this intention doesn't change anything about what i said though lol :P
19.10.18 22:21:57<dmiles> MLTT is designed to design new software (jsut more than the record types)_
19.10.18 22:23:37<dmiles> for example  "rdf:maxCardinality :myfunction 1" means that a non listtype is returned
19.10.18 22:23:40<stoopkid> MLTT is designed to represent logic, and constructing software is one use-case of this yes
19.10.18 22:24:39<stoopkid> i do mltt on paper when doing my homework problems :P
19.10.18 22:24:58<dmiles> hrrm is there a non programmic MLTT example you can thing of?
19.10.18 22:25:07<dmiles> non-programmatic
19.10.18 22:25:32<dmiles> for instance a description of what a state can be?
19.10.18 22:26:37<dmiles> (all the ones i've seen are programmatic .. such as dreadbury mansion example)
19.10.18 22:28:48* dmiles is googling to see
19.10.18 22:29:46<dmiles> oh this might be too much a trick question
19.10.18 22:29:52<stoopkid> dreadbury mansion example isn't really what i would consider "designing software" (even though it technically is)
19.10.18 22:29:58<dmiles> for example  the definateion of  Nat or Member or Append  in prolog is still programmatic
19.10.18 22:30:25<stoopkid> well, yes i'd agree because proofs are programs by definition in MLTT so you can't escape being "programmatic" in at least some sense even if you're not ever running the programs :P
19.10.18 22:32:46<stoopkid> dreadbury mansion example gives a logical specification of some hypothetical world, that is sandboxed under a logical hypothetical, and then goes on to show a manually-constructed proof of an actual logical *assertion* about this hypothetical world
19.10.18 22:33:19<dmiles> oh if i understand correctly then the  .curry language is jsut MLTT
19.10.18 22:34:06<dmiles> https://rosettacode.org/wiki/Zebra_puzzle#Curry
19.10.18 22:34:29<stoopkid> so instead of asserting each axiom of the problem directly, the whole thing is packaged under "suppose this was the case, then what?" rather than "this is the case, now what?"
19.10.18 22:35:20<dmiles> gawd so there i s really no different that what i do in prolog
19.10.18 22:35:47<dmiles> so really no difference that what i do from prolog.. nuts
19.10.18 22:35:55<stoopkid> possibly, i imagine all roads are trending towards the same common sense from different directions
19.10.18 22:36:38<dmiles> yeah.. PRlog jsut restricted itself a bit much so we have things like Picat-Lang.org that goes further to actualy crystalize it
19.10.18 22:37:45<dmiles> for for examle..
19.10.18 22:37:54<dmiles> take the defination of Append or Member
19.10.18 22:38:22<dmiles> it looks exactly the same code .. just slightly differnt syntaxs in each language
19.10.18 22:38:43<stoopkid> sure
19.10.18 22:38:48<dmiles> but has identical declaration
                 <stoopkid> same code, written a zillion times
19.10.18 22:40:06<stoopkid> ok so.. how do you actually solve this tower of babel
19.10.18 22:40:30<stoopkid> under the assumption that there are only ever gonna be more languages
19.10.18 22:41:26<stoopkid> standard baseline representation right? a homogenizer, is there any other option?
19.10.18 22:43:13<dmiles> well there are two ways to go.. "Least Power" and "Most Power"
19.10.18 22:43:27<dmiles> for the "homogenizer"
19.10.18 22:44:16<stoopkid> least power like RDF, so syntax is readily represented, vs. most power like MLTT etc.. so semantics is able to be represented, at the expense of greater complexity ?
19.10.18 22:45:13<dmiles> "Least Power" like PAKCS that compiles the MLTT of Curry-Lang.org (this is a time i am on the side of Least Power)
19.10.18 22:45:40<dmiles> compiles it into a less powerfukk language
19.10.18 22:46:09<dmiles> vs automatic translation of RDF or Prolog to Agda
19.10.18 22:46:27<dmiles> automatic translation being a "pre-compiler pass"
19.10.18 22:46:40<stoopkid> so i'm interpreting that to mean yes?
19.10.18 22:47:03<dmiles> oh sorry .. yes
19.10.18 22:47:35<stoopkid> they aren't mutually exclusive options either, look at what we're trying to do with autonomic for example
19.10.18 22:49:15<stoopkid> generally it's better to have the translation into the more powerful one though
19.10.18 22:50:21<stoopkid> mainly because this is the one that you'll have the most other logical results to be able to use with the translated knowledge
19.10.18 22:50:51<stoopkid> for more sophisticated purposes than are available in the one of lesser power
19.10.18 22:51:09<dmiles> yes nbut then once you translate one into the otehr it stops mattering
19.10.18 22:51:25<dmiles> (if its possible anyways)
19.10.18 22:51:26<stoopkid> what stops mattering
19.10.18 22:52:13<dmiles> for exmaple I think Curry-Lang is more powerfull than prolog  .. and least its big and Cantankerous
19.10.18 22:52:57<dmiles> yet mostly only   Curry->Prolog  translators exist
19.10.18 22:53:27<dmiles> Curry is also more powerfull than Haskell
19.10.18 22:54:01<stoopkid> yes
19.10.18 22:54:31<dmiles> but it might be very hard to make a sematics perserving transation from Prolog->Curry
19.10.18 22:54:39<stoopkid> this is kind of similar to: we'd expect a Curry -> x86 translator prior to an x86 -> Curry translator
19.10.18 22:55:19<dmiles> ok good exmale "x86 -> Curry" do you really want to maintain *that* curry code?
19.10.18 22:55:58<stoopkid> why not? (as opposed to any other code?)
19.10.18 22:56:02<dmiles> it be very obfusicating
19.10.18 22:56:13<stoopkid> why do you assume that?
19.10.18 22:57:15<dmiles> i used to spend 90 hours a month decompiling Z-80 code trying to rewite it in BASIC
19.10.18 22:57:29<stoopkid> remember, differentiate between the purpose of x86 vs. the purpose of MLTT
19.10.18 22:57:36<stoopkid> what is one doing and what is the other doing
19.10.18 22:57:49<dmiles> evey onc eina while when i could figure out what it was secretly doing.. i often rewire the impl in BASIC
19.10.18 22:59:10<stoopkid> x86 is directly being the program, MLTT is gonna give you KR that actually describes the semantics of x86, which x86 itself is effectively blind to... unless!
19.10.18 22:59:15<dmiles> but for example  decompiling "Hellow World" in x86 to conver tot Curry is hard
19.10.18 22:59:36<stoopkid> unless you build an MLTT implementation in x86 and use that MLTT to represent the semantics of x86
19.10.18 23:00:13<stoopkid> sure
19.10.18 23:00:19<stoopkid> well
19.10.18 23:00:20<stoopkid> yes/no
19.10.18 23:00:40<dmiles> trying to swutch you to "Goodbye World" might be too hard
19.10.18 23:00:41<stoopkid> when i say translate x86 -> Curry, i don't mean decompile it
19.10.18 23:00:54<dmiles> trying to switch it to "Goodbye World" might be too hard
19.10.18 23:01:09<stoopkid> i mean just have Curry represent a list of x86 instructions and store the action associated to each instruction
19.10.18 23:01:30<dmiles> ok as long as you are storing why the instuctions each got used
19.10.18 23:02:04<stoopkid> i don't even mean that i just mean dumb translation of the opcodes and functions representing the action of each opcode on memory + registers
19.10.18 23:02:52<dmiles> right that us what i spent my entire 14yo summer doing is translating opcodes
19.10.18 23:03:06<stoopkid> decompilation is then a matter of proving the coherence of theories about how/why this particular code might have been generated
19.10.18 23:03:09<dmiles> and reverse engineering what memory registers are used
19.10.18 23:03:59<dmiles> would we know what that  &AF00 is start of screen RAM?
19.10.18 23:04:31<stoopkid> good question, depends if you've told the MLTT that this is the case
19.10.18 23:04:36<stoopkid> just like somebody has to tell you that it was the case
19.10.18 23:04:54<dmiles> when i was a kid i had to compile several programs until i discovered it
19.10.18 23:05:07<dmiles> (to understand what certrain adresses were)
19.10.18 23:05:37<dmiles> once i knew ROM address.. much easer to make higher level versions
19.10.18 23:05:50<stoopkid> sure
19.10.18 23:06:35<dmiles> what is weird is the code size of  Curry->Prolog is identicall (1-for-1)
19.10.18 23:06:53<stoopkid> but ultimately you have to have that information in order to make the proper judgements about how your computer is gonna interpret it, whether you got this from somebody telling you or from randomly stumbling upon it, etc..
19.10.18 23:06:54<dmiles> vs  ASM<->Curry is   10000-for-1
19.10.18 23:07:24<dmiles> Haskell<->Curry is  2-for-1
19.10.18 23:07:30<stoopkid> ASM -> Curry should not be 1 -> 10000
19.10.18 23:08:17<dmiles> true it is 1-for-1
19.10.18 23:08:30<stoopkid> you'd have some fixed fragment describing the semantics of each opcode, and then it would just be 1-1 to translate individual ASM programs
19.10.18 23:08:33<dmiles> just Curry->ASM is 1 -> 10000
19.10.18 23:09:21<stoopkid> that seems like hyperbole but yes there's a blow-up translating from high-level curry to low-level ASM
19.10.18 23:09:22<dmiles> where this is leading to is the full-circle of edit
19.10.18 23:09:57<stoopkid> well, it's not like the blow-up compounds on itself as you go around the circle?
19.10.18 23:10:25<dmiles> it would if we went Curry->ASM->Curry->ASM ?
19.10.18 23:11:06<dmiles> why this maters at all is for incremental programming
19.10.18 23:11:07<stoopkid> nah, you would have to pull a couple tricks to cut the loop to stop it from actually compounding but you can do it
19.10.18 23:11:31<dmiles> i want to hire an ASM expet to make my curry code better
19.10.18 23:11:40<dmiles> i want to hire an ASM expert to make my curry code better (yet not tell him)
19.10.18 23:12:18<dmiles> and do this in each dirrection
19.10.18 23:12:57<dmiles> actually for simple programs this works fine
19.10.18 23:13:24<dmiles> since simple is l;ike 1-to-1
19.10.18 23:14:22<dmiles> for more complex programs  Curry->Haskell->Curry->Haskell     we can hire a programmer to edit the code from either state
19.10.18 23:14:46<dmiles> and they will have made the next translated version even better
19.10.18 23:14:50<stoopkid> remember, you're just using the Curry to reason about the machine code and (probably) using the machine code to actually run stuff
19.10.18 23:15:29<dmiles> ok so if it started out as ASM then makes sense
19.10.18 23:15:46<stoopkid> there's no reason an MLTT implementation couldn't compile a List/Vector of Bools datatype directly as a bitstring
19.10.18 23:15:50<dmiles> it wont ever become more complex
19.10.18 23:16:06<stoopkid> and the Curry only becomes ASM once
19.10.18 23:17:00<dmiles> what was the curry program initally?
19.10.18 23:17:21<stoopkid> text
19.10.18 23:17:45<dmiles> somethng that is already 100 line sof ASM .. was just 100 lines of curry theen fine
19.10.18 23:18:26*** Join: koom (~koom@89-24-61-16.nat.epc.tmcz.cz, (unauthenticated): realname)
19.10.18 23:18:30<dmiles> something was already only 100 lines of ASM  ,,, yeha i agree it wont grow
19.10.18 23:19:12<dmiles> but take that 20 line curry program i lined to and it might be 30k lines
19.10.18 23:19:21<dmiles> 30k lines of ASM
19.10.18 23:19:38<stoopkid> yes
19.10.18 23:20:52<stoopkid> and roundtripping back into Curry would be >30k lines, but a) that's pretty much where the compounding stops; b) Curry doesn't necessarily have to store it twice
19.10.18 23:21:03<dmiles> yeah
19.10.18 23:21:21<dmiles> ( you are right .. it doenst need to grow past 30k)
19.10.18 23:21:37<dmiles> ok.. sooo this is why we prefer curry over ASM
19.10.18 23:22:20<dmiles> it has to do with how much insane obfusication of the KR that takes place
19.10.18 23:22:52<dmiles> erm perfer the more powerfull expressive or powerfull language
19.10.18 23:24:04<dmiles> thats kinda why i am so anti-RDF
19.10.18 23:24:32<dmiles> is i would never be able to understand my logic program has they been demoted to to run in RDF
19.10.18 23:25:09*** Quit: koom (~koom@89-24-61-16.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
19.10.18 23:25:18<dmiles> or a Curry program translated to ASM
19.10.18 23:25:19<stoopkid> partly, the complex logic that MLTT can express is certainly more obfuscated in ASM than it is in, say, Agda source code, especially if we want to enforce the complex constraints that we express, which then is the other main reason: the implementation of the more powerful logic can actually enforce these constraints and maintain coherence, consistency, soundness, etc.. whereas if you just concat two ASM programs and run in
                 <stoopkid> kernel mode you're probably f'd
19.10.18 23:25:58<dmiles> not only that.. my solvers i design to opimize programs would not be able to get a high-level enough view
19.10.18 23:27:10<dmiles> yet supposedly the ASM view is simlper to write an optimizer for
19.10.18 23:27:53<stoopkid> well, ASM optimization is probably a more well-researched topic
19.10.18 23:28:57<stoopkid> simpler =/= more powerful
19.10.18 23:29:42<dmiles> i have to run for  abit.. but Curry impls all of MLTT?
19.10.18 23:30:03<dmiles> Since Curry impls all of Haskell and more
19.10.18 23:30:10<stoopkid> i don't actually know Curry i've just been assuming it was MLTT cause you said it was
19.10.18 23:30:13<stoopkid> Haskell < MLTT
19.10.18 23:30:19<stoopkid> Haskell doesn't have dependent types
19.10.18 23:30:43<dmiles> Curry does have dependant types... and that is almost enough?
19.10.18 23:31:21<stoopkid> yes
19.10.18 23:31:59<stoopkid> well
19.10.18 23:32:00<stoopkid> almost
19.10.18 23:33:24<stoopkid> does it have inductive types and a type-level hierarchy to handle polymorphism over types? these are really the defining features i'd say
19.10.18 23:34:01<stoopkid> (i.e. martin-lof actually lays out the basis for this stuff in his descriptions of his version of dependent type theory)
19.10.18 23:35:43<stoopkid> when i say MLTT though i'm usually just using it as a short-hand for "some kind of consistent proof-framework for higher-order predicate logic based on the curry-howard correspondence"
19.10.18 23:38:49<stoopkid> Coq, Agda, Idris, etc.. each satisfy that definition although technically they're slightly different variations from each other and from Martin-Lof's original versions
19.10.18 23:39:25<stoopkid> (mostly satisfy anyway, sometimes contradictions are still found)
19.10.18 23:41:43<dmiles> what i do know is that Dependent types jsut got implmented a few years ago in Curry
19.10.18 23:42:03<dmiles> and the only Curry system that was capable was the one that compiles to Prlolog :P
19.10.18 23:42:16<stoopkid> does it have inductive/algebraic data types like:
19.10.18 23:42:21<stoopkid> data Bool = true | false
19.10.18 23:42:26<stoopkid> data Nat = zero | Suc Nat
19.10.18 23:42:28<dmiles> yes
19.10.18 23:44:20<stoopkid> does it have polymorphism like:
19.10.18 23:44:28<stoopkid> forall (A : Type) . A -> A ?
19.10.18 23:44:37<dmiles> https://github.com/TeamSPoon/pakcs_lib/blob/master/testsuite/TypeclassTests/TestDeriving.curry
19.10.18 23:44:51* dmiles checking the Polymorphic stuff now
19.10.18 23:46:36<dmiles> well here is one "forall" https://github.com/TeamSPoon/pakcs_lib/blob/945574c5dab63558271770f4be5c391fcb690e3f/examples/sportsdb.curry#L21
19.10.18 23:47:06<stoopkid> ok yea there's polymorphism
19.10.18 23:47:26<stoopkid> not the "forall" itself cause that's just a function identifier but the "a" in the function type
19.10.18 23:48:17<stoopkid> that's equivalent to (forall a : Type) -> (a -> Bool) -> (a -> Bool) -> Bool
19.10.18 23:48:46<stoopkid> or, "should" be anyway
19.10.18 23:48:53<dmiles> https://github.com/TeamSPoon/pakcs_lib/blob/945574c5dab63558271770f4be5c391fcb690e3f/docs/src/tooldocs/cass/SensibleType.md#L9
19.10.18 23:49:16<stoopkid> ok so
19.10.18 23:49:22<dmiles> The SensibleType analysis is a type analysis which checks whether a type is sensible, i.e., whether there exists at least one value of this type. This analysis associates to each type constructor the following information:
19.10.18 23:49:23<dmiles> sensible, i.e., there is exists some value of this type
                 <dmiles> parametric sensible, i.e., it is parametric type which is sensible if all type arguments are instantiated with sensible types
                 <dmiles> not sensible, i.e., there may be no values of this type
19.10.18 23:50:10<stoopkid> ok so, assuming it maintains consistency and handles higher-order polymorphism, then it's got the basic rudiments of what i would expect from a mathematical foundation
19.10.18 23:50:36<dmiles> "Since Curry is a language with parametric polymorphism and type inference,
19.10.18 23:50:37<dmiles> programmers often omit the type signatures when defining functions."
19.10.18 23:50:50<stoopkid> parametric polymorphism, perfect
19.10.18 23:51:09<stoopkid> what does it do about Type : Type ?
19.10.18 23:51:29<stoopkid> is Type a Type or is Type_0 a Type_1
19.10.18 23:55:06<stoopkid> in any case, assuming it maintains consistency & soundness wrt curry-howard semantics (which hopefully it does since the name and everything), this is on the right track towards a foundation
19.10.18 23:55:10<dmiles> what can i eval to check?
19.10.18 23:56:18<dmiles> http://www-ps.informatik.uni-kiel.de/~pakcs/webpakcs/main.cgi  online curry
                 <stoopkid> try to partial eval the forall function on the forall type ?
19.10.18 23:57:00<stoopkid> or simpler try to eval the forall function on the type Type (or whatever Curry's equivalent of that is)
19.10.18 23:57:19<stoopkid> i.e. the "a" should be "Type"
19.10.18 23:57:33<stoopkid> (if it has the Type-in-Type property)
19.10.18 23:57:59<dmiles> oh i am sure that it would
19.10.18 23:58:20<stoopkid> ok so that's probably a bad thing if it does
19.10.18 23:58:33<dmiles> since most of the verification tools are introspecting over its types
19.10.18 23:59:08<dmiles> well you can define what it is to even be a Type i am sure
20.10.18 00:02:43<stoopkid> so if this is the case, and the polymorphism is really parametric, and Type is in Type, then without further constraints on when/how these quantifications can occur & when/how their results can be used, it will have a manifestation of Russell's paradox
20.10.18 00:06:46<dmiles> rrm
20.10.18 00:06:53<dmiles> oh shit i did have to go!
20.10.18 00:07:03<dmiles> before store closes
20.10.18 00:07:31<stoopkid> np
20.10.18 00:07:52<dmiles> i am fine but be back.. be so neat since Curry runs very good in PrologMUD hoist Prolog
20.10.18 00:08:23<dmiles> the curry code when i look at it is exaclt what i'd typed in prolog 1/2 the time
20.10.18 00:08:55<dmiles> though this does not adress the real issue i wonder about
20.10.18 00:09:12<dmiles> and that is wether or not that frull HOL can be expressed
20.10.18 00:09:29<dmiles> such as beliefs and desire caculus
20.10.18 00:09:45<dmiles> calculus that is used in CYC
20.10.18 00:10:06<dmiles> where rules about immagination can be written
20.10.18 00:12:27<stoopkid> want to try it ?
20.10.18 00:17:12<stoopkid> i can see places with MLTT where a full description of that kind of logic might break down, but this is mostly in the standard "problem area" of consistent self-reflection
20.10.18 00:18:59<stoopkid> like "I believe this sentence"
20.10.18 00:19:14<stoopkid> "I don't believe this sentence"
20.10.18 04:39:48<HMCf> afaik curry is not mltt, its' tt is closer to ML
20.10.18 04:58:28<HMCf> it has Type in Type, and only allows types to depend on types, not on terms
20.10.18 18:06:03*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 252 seconds
20.10.18 18:11:36*** Join: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
21.10.18 09:33:46<editable-dog>prolog is weird
21.10.18 15:05:08<HMCf> howso?
21.10.18 15:18:31<editable-dog>idk what tripped me up anymore, going thru a tutorial now
21.10.18 15:32:35<HMCf> heh, ok.
21.10.18 15:33:18<HMCf> imo the weirdest thing about prolog is the explicit cuts, and the whole "red cuts vs green cuts" thing
21.10.18 23:06:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-amoelgqbwsqrzrec) left #AutoNomic: Quit: Connection closed for inactivity
22.10.18 07:04:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ijvczppkgnbtojyg, stoopkid: stoopkid)
22.10.18 08:31:52*** Quit: logicmoo (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 264 seconds
22.10.18 08:42:27*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
22.10.18 18:54:41*** Quit: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: Ping timeout: 244 seconds
22.10.18 19:28:12*** Join: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net, dmiles: ...)
22.10.18 21:54:46<dmiles> and dont forget laziness and coroutines
22.10.18 21:57:09<dmiles> writting real-world applications in Prolog makes all other programming seem like childs play
22.10.18 22:02:41<dmiles> back in the 80s, i wrote a flight simulation library game system in my sophmore year all in ASM  (for airship game).. that was easy comparatively
22.10.18 22:05:13<dmiles> i had finished this book first http://www.cocopedia.com/wiki/index.php/Assembly_Language_Graphics_for_the_TRS-80_Color_Computer
22.10.18 22:05:49<dmiles> basically in under a year i was able to master it
22.10.18 22:06:04<dmiles> prolgo took me at least 5 years to get that good at
22.10.18 22:08:49<dmiles> sorry i suppose 5 years is exagerating.. both for sure twice as long as it took to master  other language
22.10.18 22:08:59<dmiles> s
22.10.18 22:14:39<dmiles> mastering = being able to know how to write every possible application you can dream up
22.10.18 22:15:43<dmiles> for me it is MMORPGs programmed distributedly
22.10.18 22:16:24<dmiles> i can do that in 7 differnt programming languages
22.10.18 22:16:42<dmiles> but Prolog makes the task easy
22.10.18 22:17:40<dmiles> seems every other language the code become much more verbose
22.10.18 22:19:13<dmiles> so in highsight was the only language worth learning for me
22.10.18 22:19:24<dmiles> "high" :)
22.10.18 22:20:36<dmiles> though sadly i had to study and learn 6 oher languages to find people with the know how
22.10.18 22:21:21<dmiles> to teach me the ways to perform all the tasks
22.10.18 22:35:31<dmiles> to do the ultimate task i did when create did in OpenSim4OpenCog
22.10.18 22:36:24<dmiles> whish is a self programming MMORPG which goal is to simulkate anything an AI program can immagine
22.10.18 22:36:43<dmiles> (while allowing for human help)
22.10.18 22:37:32<dmiles> this takes much more than MLTT.. it even takes Paraconsistency
22.10.18 22:44:28<stoopkid> didn't we just have the paraconsistency discussion ?
22.10.18 22:47:29<stoopkid> moral of the story: you're conflating like 5 different potential use-cases of paraconsistency but each one of them fails to demonstrate a need to actually drop consistency
22.10.18 22:48:18<stoopkid> also paraconsistency doesn't change expressiveness
22.10.18 22:48:31<stoopkid> MLTT - EFQ is equally expressive as MLTT
22.10.18 22:49:23<stoopkid> only the strength is weakened, you can no longer eliminate impossible cases in statements that quantify over a domain and then restrict it
22.10.18 22:49:51<stoopkid> you might say it loses object-level expressiveness, but not type-level expressiveness
22.10.18 22:50:32<stoopkid> actually i guess technically since types can be generated from programs, you lose some type-level expressiveness too
22.10.18 22:51:21<stoopkid> i guess we need to distinguish between "ideal MLTT" and "real-world MLTTs"
22.10.18 22:52:52<stoopkid> in the ideal MLTT, every total computable function from A to B is a proof of the implication A -> B, and so lack of computational expressiveness wouldn't change propositional expressiveness
22.10.18 22:53:54<stoopkid> in real-world MLTT, you can only use what you can type-check, and since we can't solve the halting problem we can't capture every total computable function & only the total computable functions
22.10.18 22:54:52<stoopkid> hence we have "complexity limits"
23.10.18 00:00:08<dmiles> the problem is when A -> B  is true yet "~B -> ~A" is not true
23.10.18 00:00:27<stoopkid> got an example
23.10.18 00:01:53<dmiles> exists(A, (tSet(A) -> tCol(A))).
23.10.18 00:02:08<dmiles> is true only in this case for A
23.10.18 00:02:21<stoopkid> tSet , tCol ?
23.10.18 00:02:22<dmiles> but "which As" is this true for?
23.10.18 00:02:45<dmiles> tSet/1 and tCol/1 are defined as special types that embue A with some new properties
23.10.18 00:04:06<dmiles> that assertion along is not yet a problem .. it can become one when exists(B, (~tSet(B) -> tCol(B)))
23.10.18 00:04:20<stoopkid> idk what these special properties are
23.10.18 00:04:31<dmiles> anything you'd like them to be
23.10.18 00:04:53<stoopkid> i dont understand what the problem is
23.10.18 00:05:32<dmiles> these two rules about A and B are not a problem except when you have a exists(C, ~tCol(C)).
23.10.18 00:05:43<stoopkid> this doesn't answer my questions
23.10.18 00:06:05<dmiles> in this case we would like to "know" in what ways teh tSet(C) is enforcable or not
23.10.18 00:06:37<dmiles> is C able to participate as a A or a B or both?
23.10.18 00:07:02<stoopkid> i don't understand what you're asking
23.10.18 00:07:33<dmiles> should C have the properties layed out by ~tSet(C) or should it be set up to be treated as tSet(C) ?
23.10.18 00:07:49<dmiles> that is what i am asking
23.10.18 00:08:00<dmiles> i know the answer
23.10.18 00:08:28<dmiles> the answer becomes when C is precluded from being tSet(C) based on "further" added rules
23.10.18 00:09:03<stoopkid> i have literally no idea what you're going for here
23.10.18 00:10:09<dmiles> have you written code that this has been a problem before?
23.10.18 00:10:23<stoopkid> i still have literally no idea what the problem is
23.10.18 00:11:40<dmiles> the problem is we need to wait to enumerate the infered properties in a case by case bases
23.10.18 00:12:30<dmiles> the inference process has to create code for both ~tSet(C) and tSet(C)
23.10.18 00:12:41<dmiles> this was still not a problem
23.10.18 00:13:18<dmiles> the problem isnt mine *unless* i was using a statically typed system as it would be explosive
23.10.18 00:13:27<stoopkid> i have no idea when this stuff is happening, why it's happening, what tSet and tCol are supposed to be, etc..
23.10.18 00:13:30<dmiles> as i would be creating static types for every permutaiton
23.10.18 00:14:46<dmiles> the stuff happen s in this type rules layed out here https://github.com/TeamSPoon/logicmoo_base/blob/master/prolog/logicmoo/pfc/system_basic.pfc.pl
23.10.18 00:15:17<dmiles> tSet(tFunction).
                 <dmiles> tSet(ttTemporalType).
                 <dmiles> tSet(functorIsMacro).
23.10.18 00:15:37<stoopkid> that doesn't tell me anything
23.10.18 00:15:39<dmiles> ~tCol(functorDeclares).
                 <dmiles> tSet(F)==>functorDeclares(F).
23.10.18 00:16:13<dmiles> study the system for a couple years perhaps
23.10.18 00:16:19<dmiles> it took me 20
23.10.18 00:16:38<dmiles> took those whom worked on it before me as long
23.10.18 00:16:59<stoopkid> it shouldn't take 20 years to explain what you see as the problem in MLTT
23.10.18 00:17:04<dmiles> so indeed it is an awefull lot rto expect
23.10.18 00:17:25<dmiles> in MLTT it was designed to make this not ever a possible problem
23.10.18 00:17:57<dmiles> which was an unaceptable trade-off
23.10.18 00:18:58<stoopkid> what problem? i really don't get it
23.10.18 00:19:07<stoopkid> exists(A, (tSet(A) -> tCol(A))).
23.10.18 00:19:17<stoopkid> exists(B, (~tSet(B) -> tCol(B)))
23.10.18 00:19:25<stoopkid> exists(C, ~tCol(C)).
23.10.18 00:19:27<stoopkid> what happens
23.10.18 00:19:59<dmiles> from this you cannot yet infer if A and C are compatble types
23.10.18 00:20:27<stoopkid> meaning what
23.10.18 00:20:43<stoopkid> and are A and C types or do they *have* types?
23.10.18 00:20:59<dmiles> A and C are types.. that have isnteaces
23.10.18 00:21:37<stoopkid> ok so what does compatible mean, they have all the same instances?
23.10.18 00:21:42<dmiles> we havent yet gotten to teh next issue of the compatibilty of their instnaces
23.10.18 00:22:13<dmiles> we are still looking at what code rules define the typ definations
23.10.18 00:23:00<dmiles> compatible means that they will have an possible overlap of code
23.10.18 00:23:14<dmiles> and yes even when they have isntaces.. they might have overlap of isntances
23.10.18 00:23:35<dmiles> compatible means how much swaping out the code is allowed
23.10.18 00:24:06<stoopkid> what does this use-case have to do with contrapositives
23.10.18 00:24:39<dmiles> compatible sometimes (how you are used to hearing it) is that instances of one object that is A may be used in places that instances of C will be allowed
23.10.18 00:25:28<dmiles> contrappostives come into play the first time you have non contrapostive rule that infers a negation
23.10.18 00:25:53<dmiles> ~tCol(functorDeclares).
23.10.18 00:26:18<dmiles> or  tCol(foo) ===> ~tCol(functorDeclares).
23.10.18 00:27:02<dmiles> forall(Z, tCol(foo<Z>) ===> ~tCol(functorDeclares<Z>)).
23.10.18 00:27:26<dmiles> where Z is a variable that specializes the type
23.10.18 00:27:50<dmiles> so if we have:  tCol(foo<bar>)
23.10.18 00:28:07<dmiles> we must enforce  ~tCol(functorDeclares<bar>)   in code
23.10.18 00:28:20<stoopkid> ok
23.10.18 00:29:04<dmiles> is the  "exists(A, (tSet(A) -> tCol(A)))."  A allowed to be about functorDeclares<bar> ?
23.10.18 00:29:56<stoopkid> only if ~tSet(A) ?
23.10.18 00:30:04<dmiles> currect
23.10.18 00:30:07<dmiles> correct
23.10.18 00:30:36<stoopkid> due to contrapositives...
23.10.18 00:30:51<dmiles> yes
23.10.18 00:31:10<stoopkid> ok so what's the problem
23.10.18 00:32:33<dmiles> the problem is that equality is a case by case basis
23.10.18 00:32:51<stoopkid> ok where does that come up in your example here
                 <dmiles> we dont want to have to pregenrate every possible euality
23.10.18 00:33:05<dmiles> we dont want to have to pregenrate *every possible* equality
23.10.18 00:33:14<stoopkid> the potential equality between A and functorDeclares<bar> you mean?
23.10.18 00:34:36<dmiles> ~tSet(D) -> tFormatType(D).
23.10.18 00:35:19<dmiles> we need to know if we use the rule about A or B
23.10.18 00:35:35<stoopkid> why
23.10.18 00:35:45<stoopkid> we don't know if D = A or B or not
23.10.18 00:35:47<dmiles> for cases of functorDeclares<foo>
23.10.18 00:36:15<dmiles> does MLTT awow that?
23.10.18 00:36:22<dmiles> "we don't know if D = A or B or not"
23.10.18 00:36:32<stoopkid>  ?
23.10.18 00:36:45<stoopkid> allow what
23.10.18 00:36:47<dmiles> does MLTT allow such things to go on as unknown
23.10.18 00:37:34<dmiles> do MLTT describe how to alllow such things to go on as unknown?
23.10.18 00:37:58<stoopkid> in MLTT the default is that you don't know anything
23.10.18 00:37:59<dmiles> or does MLTT strive to make such things known?
23.10.18 00:38:24<dmiles> i think MLTT strives to make such things known
23.10.18 00:38:37<stoopkid> you have to prove A = B = D or whatever
23.10.18 00:39:02<stoopkid> i have no idea what you're trying to say really
23.10.18 00:39:25<dmiles> what if you cannot prove A = B = D?
23.10.18 00:40:06<stoopkid> then you can't do anything that explicitly requires the proof?
23.10.18 00:40:34<dmiles> what if you can prove A = B  but not B = D?
23.10.18 00:41:04<dmiles> are you saying the code should be considered broken unile you can prove B = D ?
23.10.18 00:41:14<stoopkid> i have no idea what you're asking
23.10.18 00:42:40<dmiles> when you cannot *yet* prove B = D yet at design time you can prove A  = B. what is the next requirment?
23.10.18 00:42:57<stoopkid> idk because you haven't posed any requirements!!
23.10.18 00:43:19<dmiles> this a an entire language about defination of requirements as well
23.10.18 00:43:42<dmiles> tCol(A) means  "these are the requirements of isntance of A"
23.10.18 00:43:54<dmiles> tCol(A) means  "these are the requirements of isntances of type A"
23.10.18 00:44:32<dmiles> ~tCol(A) means "look at rules oif what ~Col(_) mean to help enumerate requiremnts"
23.10.18 00:44:50<dmiles> ~tCol(A) means "look at rules of what ~Col(_) *implies* to help enumerate requiremnts"
23.10.18 00:45:12<stoopkid> it probably should just mean negation
23.10.18 00:45:37<dmiles> *and* the end result must *still* be a completely verifiable consistient system
23.10.18 00:46:07<stoopkid> anyway, can you just explain in english what is the use-case that you think MLTT is failing on
23.10.18 00:46:28<dmiles> gradual typing for multiuser script engines
23.10.18 00:46:57<stoopkid> ok what does that entail exactly
23.10.18 00:47:21<dmiles> it entires giving each user a system that allows them to define new enforcments
23.10.18 00:47:39<dmiles> it entails giving each user a langauge that allows them to define new enforcments
23.10.18 00:48:01<stoopkid> so multiple users asserting constraints to enforce on some shared resource
23.10.18 00:48:19<dmiles> it entails having a system use infernce at every moment to ensure that what is its doing does not violate consistency at the last mement
23.10.18 00:49:04<stoopkid> note: if you're eventually ensuring that you don't violate consistency, this is not paraconsistency
23.10.18 00:49:24<dmiles>  violation of consistency at the very last moment is also attempted to be done as early still as possible
23.10.18 00:49:59<dmiles> in order to have that be anytime "beofre the last memoent" is to expect that a incconistent veiw will become consistent
23.10.18 00:50:50<dmiles> which means the system is operating even while whether or not consistency is decidable
23.10.18 00:51:08<dmiles> and there are many times a new negation will come up
23.10.18 00:51:46<dmiles> which will decide that the system up to this point has to be roled back and made consistent again
23.10.18 00:52:17<dmiles> before that roleback it was "apraconsistent"
23.10.18 00:52:19<stoopkid> you don't need to make the logic inconsistent in order to handle this use-case
23.10.18 00:52:22<dmiles> before that rollback it was "apraconsistent"
23.10.18 00:53:31<dmiles> paraconsistent loic is more consistent than constructive logic
23.10.18 00:53:48<dmiles> since the consistency requirements are slightly less
23.10.18 00:53:55<dmiles> (but not by much!)
23.10.18 00:54:11<stoopkid> seems that would mean it's less consistent
23.10.18 00:54:14<dmiles> this allows paraconsistent logic to leverage constructive logic
23.10.18 00:54:28<dmiles> this allows paraconsistent logic to leverage constructive logic that is fully consistent
23.10.18 00:54:50<dmiles> but does not allow constructive logic the ability to be inconsistent
23.10.18 00:55:03<dmiles> it allows "scoped" elvel consistency
23.10.18 00:55:08<stoopkid> do you understand how the dreadbury mansion example works
23.10.18 00:55:23<dmiles> it allows a deducable "scoped" level consistency inference
23.10.18 00:56:01<dmiles> and allows the defination of consistency to be defined as you go
23.10.18 00:56:10<stoopkid> i can make a simpler version of it if that would help
23.10.18 00:56:47<dmiles> i get how the code works .. iu dont see it redefining its requirements though
23.10.18 00:57:23<stoopkid> ok well let's separate out the problem into its independent parts
23.10.18 00:57:27<dmiles> lets say muitple people were working on that code at once
23.10.18 00:57:31<stoopkid> yes
23.10.18 00:57:51<dmiles> your idea is each could update it and it would be fine.. i agreee
23.10.18 00:58:08<stoopkid> 1st. they shouldn't be working on "that code" all at once, this is bad version control
23.10.18 00:58:27<stoopkid> they should each have their own instance of it, think like a git repo forking and merging
23.10.18 00:59:16<dmiles> when i worked on OpenSim4OpenCog i never had that luxury
23.10.18 00:59:46<dmiles> i couldnt ask thjat one person at a time worked on the server
23.10.18 01:00:01<dmiles> what i did was make them use a type system for defineing what would get rolled out
23.10.18 01:00:06<stoopkid> that sounds like an independent problem
23.10.18 01:00:34<stoopkid> what is precluding multiple from working on the server and forking and merging branches in a git repo stored on the server
23.10.18 01:00:39<stoopkid> multiple people*
23.10.18 01:01:00<dmiles> sure.. but you saying only want to solve differnt progblems does not help mine
23.10.18 01:01:47<stoopkid> that's yet an independent problem
23.10.18 01:02:03<dmiles> i could have let you spend several hors trying to understand the OpeSim4OpenCog code.. but instead i fastrtracked to how the tCol/1 worlks
23.10.18 01:02:45<dmiles> i could have let you spend several hours just trying to understand the OpeSim4OpenCog code.. until you tacked it doewn to tCol/1 and tSet/1
23.10.18 01:03:17<dmiles> if i wasnt doing OpenSim4OpenCog than it would not been a problem
23.10.18 01:03:45<dmiles> the problem is that several people and robots are making new changes to the underlying theory
23.10.18 01:03:54<dmiles> well to the types anyways
23.10.18 01:04:05<stoopkid> but they can do this in the manner i suggested
23.10.18 01:04:22<stoopkid> i.e. theoretically this is doable even if it does not meet the constraints of your particular environment
23.10.18 01:04:49<dmiles> yes i can even emulate git calls and in fact we do snapshots
23.10.18 01:05:03<dmiles> but we cannot change how types ar edefined
23.10.18 01:05:10<stoopkid> why
23.10.18 01:05:11<dmiles> and how code is defined
23.10.18 01:05:27<dmiles> because it would be impractical
23.10.18 01:05:53<stoopkid> ?
23.10.18 01:06:35<dmiles> the code is not just defined by homans is is defined by OpenCog
23.10.18 01:06:55<dmiles> we use AI to design types
23.10.18 01:07:12<dmiles> we cna version iyt sure
23.10.18 01:07:35<dmiles> but we spend as much time in 10x in rollback as we do in roll forward
23.10.18 01:07:46<dmiles> since some of the AI is doing trial and error code
23.10.18 01:08:25<stoopkid> i would separate the human-defined code from the machine-generated code
23.10.18 01:08:29<stoopkid> for starters
23.10.18 01:08:34<stoopkid> not sure if you do or not
23.10.18 01:08:53<dmiles> so it was integral to make the rollback as part of the run-time executuor
23.10.18 01:09:33<stoopkid> second, the machine-generated code should be subsidiary-to and sandboxed-by human-generated code
23.10.18 01:09:47<dmiles> well human genrated code is actualyl what the machine is selecting from
23.10.18 01:10:28<dmiles> the machine is taking for isntance dreadbury masion and trying to figure out what holes the humans probably could have in it
23.10.18 01:10:45<dmiles> holes that iyt can replace with new things
23.10.18 01:11:18<dmiles> for exmaple.. it realizes the setup of the mansion could have a differnt number of people in it
23.10.18 01:11:29<dmiles> but it will still be the same types of people you outlines
23.10.18 01:11:30<stoopkid> well i shouldn't log back onto the server and find that the machine changed my definitions
23.10.18 01:11:31<dmiles> but it will still be the same types of people you outlined
23.10.18 01:11:54<dmiles> so it creates a data object that allows your code to consume the data object isntead
23.10.18 01:12:30<dmiles> and makes sure it hasnt broken your systme by populating that object and feeding it to its hacked version of your code
23.10.18 01:12:43<stoopkid> why couldn't a reasoner do this over the MLTT KR
23.10.18 01:13:08<dmiles> the hacked version is still your code .. just has some extra abstractions that even you might had done
23.10.18 01:13:51<dmiles> it can do it over  MLTT KR
23.10.18 01:14:07<stoopkid> i.e. imagine multiple users started putting all different kinds of constraints into the dreadbury mansion record
23.10.18 01:14:22<dmiles> the idea though is we need to mix even non-MLTT KR that is grossly incomplete and not have it screw up the MLTT
23.10.18 01:14:25<stoopkid> such that it became inconsistent
23.10.18 01:15:05<dmiles> we woudl not allow it to becoem incosistent
23.10.18 01:15:17<dmiles> we only allow it to become at worst paraconsistent
23.10.18 01:15:20<stoopkid> a reasoner could reason over the record and break it up into parts, find consistent subsets of it, and create a theory as to what should be done with it
23.10.18 01:15:27<stoopkid> this is still consistent :)
23.10.18 01:15:36<stoopkid> because the dreadbury mansion record is just a hypothesis
23.10.18 01:16:07<stoopkid> you can fill it up with as many contradictory constraints as you like, it doesn't affect anything
23.10.18 01:16:41<dmiles> if you did that " you can fill it up with as many contradictory constraints as you like, it doesn't affect anything"  then what would you have done  ?
23.10.18 01:16:43<stoopkid> Agda might not be equipped to let you break it up into parts like that in convenient way but that's not a statement about MLTT in general
23.10.18 01:17:10<stoopkid> it's basically like "imagine 1 + 1 = 2" instead of "i assert 1 + 1 = 2"
23.10.18 01:17:17<dmiles>  if you let it up with as many contradictory constraints as you like, it doesn't affect anything.. it is no longer consistent ?
23.10.18 01:17:37<dmiles> i agree it now is paraconsistent
23.10.18 01:17:42<stoopkid> no
23.10.18 01:17:45<stoopkid> not paraconsistent
23.10.18 01:17:54<dmiles> i agree, but it is now paraconsistent
23.10.18 01:18:26<stoopkid> constraints =/= assertions
23.10.18 01:18:34<dmiles> expecially since the conflists only produce Holes in the sense is it makes the mansion more "Partial"
23.10.18 01:18:45<stoopkid> only when you take the inconsistent constraints as being logical assertions do you get an actual inconsistency
23.10.18 01:18:54<stoopkid> otherwise they're just "false propositions"
23.10.18 01:19:12<stoopkid> meaning: take the dreadbury mansion example for instance
23.10.18 01:19:16<dmiles> are you saying that you prermit "false propositions"?
23.10.18 01:19:32<stoopkid> we permit them to be expressed, but since they're false they have no proofs
23.10.18 01:20:01<dmiles> your are allowing unprovable situatuions into your code?
23.10.18 01:20:37<stoopkid> yes, false statements have no proofs
23.10.18 01:20:45<stoopkid> that's what makes them false
23.10.18 01:21:34<dmiles> (secretly i know.. dontthink i dont.. that i am confating unimabited types with false types)
23.10.18 01:21:55<dmiles> (secretly i know.. dontthink i dont.. that i am confating empty types with false propostition)
23.10.18 01:22:13<stoopkid> types/propositions are the sets of their proofs, false propositions have no proofs and thus correspond to the empty set
23.10.18 01:22:37<dmiles> ah so MLTT lets you define empty sets ?
23.10.18 01:22:51<stoopkid> yes
23.10.18 01:22:53<dmiles> does it let you describinate as to which empty set you are refering to?
23.10.18 01:23:07<dmiles> or does it treat them the same ?
23.10.18 01:23:19<stoopkid> sort of, we might say it "strives to treat them the same"
23.10.18 01:23:53<stoopkid> it doesn't necessarily have axioms to directly equate them or differentiate them
23.10.18 01:24:00<stoopkid> HoTT would treat them the same
23.10.18 01:24:29<stoopkid> you can use each representation of the empty set individually, but every representation would be interchangeable (in HoTT)
23.10.18 01:24:54<dmiles> what is "special" is knowing when exists(C, ~tCol(C))    exists(E, ~tSet(E))   is true that  C \== E  "sometimes"
23.10.18 01:25:19<dmiles> too bad i used the name tSet/1 here :P
23.10.18 01:25:43<stoopkid> ok so you're ok with the notion that MLTT expresses false propositions?
23.10.18 01:26:14<dmiles> as long as it can express false propostions then it sounds at least muchg less limiting
23.10.18 01:26:15<stoopkid> i.e. not everything's true, we figure out what's true & what's false using proofs ?
23.10.18 01:27:01<dmiles> sounds good.. and the things that are undecidable it does ?
23.10.18 01:27:16<stoopkid> if it's undecidable it can neither prove nor disprove it
23.10.18 01:27:17<dmiles> C = E  might vbe undecable
23.10.18 01:27:18<stoopkid> ofc
23.10.18 01:27:43<dmiles> but even "undecidable" is an action item that allows the system to spawn new code
23.10.18 01:27:51<dmiles> spawn new types
23.10.18 01:28:13<stoopkid> you mean you should be able to reason about decidability/undecidability?
23.10.18 01:28:19<dmiles> as it is jsut as important to nbe able to query undecidablity
23.10.18 01:28:26<dmiles> yes
23.10.18 01:28:39<stoopkid> i already do
23.10.18 01:28:54<stoopkid> it's kind of routine
23.10.18 01:29:30<dmiles> and those results you get back should have a proof that tells you exactly what code the human writes to make thngs more decidable
23.10.18 01:29:40<dmiles> that is what i do in OpenSim4OpenCog
23.10.18 01:29:43<stoopkid> well
23.10.18 01:30:09<stoopkid> maybe; that's a whole other thing
23.10.18 01:30:37<stoopkid> h/o one sec
23.10.18 01:30:57<stoopkid> https://github.com/sto0pkid/CategoryTheory/blob/master/Decidability.agda
23.10.18 01:31:30<stoopkid> here i'm just describing an abstract conception of decidability
23.10.18 01:31:43<dmiles> what would be nice is for that to run over the soruce code
23.10.18 01:31:45<stoopkid> i.e. it's an abstract data type, other things can be proven to fit its definition
23.10.18 01:31:56<stoopkid> yes
23.10.18 01:31:59<stoopkid> now you're talking
23.10.18 01:32:16<dmiles> well i was there before we ever me
23.10.18 01:32:17<dmiles> well i was there before we ever met
23.10.18 01:32:29<dmiles> i mean that is *my* domain
23.10.18 01:32:49<dmiles> is machjines that design and test its own machines
23.10.18 01:33:05<dmiles> well at least "software"
23.10.18 01:33:43<stoopkid> so you'd have some reasoner that takes the definition of decidability and is put to work looking over propositions to see if they're decidable, according to MLTT rules (as that's what it can type-check) + whatever else you want your reasoner to do since it's bring-your-own-reasoner ofc
23.10.18 01:33:55<dmiles> meaning not only is it important to show how undeablity is d3etermineed .. we have to allow shuch prooves to have rules of "repair
23.10.18 01:34:09<stoopkid> well
23.10.18 01:34:13<dmiles> meaning not only is it important to show how undeablity is d3etermineed .. we have to allow such proof to have rules of "repair language"
23.10.18 01:34:17<stoopkid> undecidability might not be such a trivial fix
23.10.18 01:35:27<dmiles> if the "repair language" and repair rules also be MLTT. then MLTT is fine
23.10.18 01:36:00<stoopkid> i'm not saying MLTT wouldn't be fine i'm saying i'm not sure there's a meaningful "repair" operation to be done
23.10.18 01:36:17<dmiles> since that is the goal is to make sure that there is a reactive language arorund what to do when we have : inconsitnce , undeciability, etc
23.10.18 01:36:42<dmiles> ah
23.10.18 01:37:05<stoopkid> ah right sorry i was thinking of this in purely the abstract not in the particular context
23.10.18 01:37:25<dmiles> repair language is much easier when i created first the language that can have the repairs needed to be fixed
23.10.18 01:38:20<dmiles> (well everyone does it that way)
23.10.18 01:38:22<stoopkid> well, it's all about what do you *want* it to do when these situations are encountered
23.10.18 01:39:12<dmiles> right .. the range of what it does in those situations to is about analysis and infgernce over researouces
23.10.18 01:39:50<stoopkid> wouldn't this analysis & inference be easier facilitated from a sound & consistent foundation ?
23.10.18 01:39:51<dmiles>  what it can even try to do in those situations to is about analysis and infernce over resources.. "do i ask a huiman to write a script?"
23.10.18 01:40:32<dmiles> yes.. that is what we created at cycorp
23.10.18 01:41:17<dmiles> and whyy i copied it
23.10.18 01:41:47<stoopkid> ok so imagine this for the multi-user-server-AI-agent-setup:
23.10.18 01:43:20<stoopkid> we have N clients basically with their own branch of a git repo (not necessarily git/versioning-dependent it's just for the example), they each have their own MLTT, where they're crafting *their* set of constraints they want to enforce and can mix & match with other available constraint-sets etc...
23.10.18 01:43:50<stoopkid> so imagine each one's working on what *they* think the dreadbury mansion definition is
23.10.18 01:44:21<stoopkid> and they send these off to the server to collect, and "do whatever"
23.10.18 01:45:38<stoopkid> so the server-agent receives all these, what should it do? it should create its *own* version and start mixing and matching between the different constraint-sets and looking for contradictions and undecidabilities and overlaps and etc...
23.10.18 01:45:45<stoopkid> towards "some goal"
23.10.18 01:46:39<stoopkid> i.e. treat the server-agent like it's just another node, who's hearing all these competing theories from different nodes, is tasked with some goal, and is gonna figure out what to make of it
23.10.18 01:47:43<stoopkid> make sense?
23.10.18 01:48:12<dmiles> yes
23.10.18 01:48:45<dmiles> we call each node a Microtheory  (McCarthy named it that)
23.10.18 01:48:46<stoopkid> as in, "seem like a reasonable setup" or do you see any issues with this approach?
23.10.18 01:49:29<dmiles> no problem allow MLTT to be used in the current system even
23.10.18 01:49:54<dmiles> no problem versioning it either
23.10.18 01:51:06<dmiles> i think probably people would work on the problem if they actualy had the need or experience
23.10.18 01:51:24<dmiles> the fact they dont is more what erks me
23.10.18 01:51:25<HMCf>  < dmiles> and dont forget laziness and coroutines
23.10.18 01:51:35<HMCf> no those are both non-weird
23.10.18 01:51:50<stoopkid> dmiles: a lot of them are mathematicians & traditional programmers accustomed to proving things themselves
23.10.18 01:52:23<HMCf> prolog coro only seems weird because the cuts get weird
23.10.18 01:54:10<dmiles> yes i equate  "traditional programming" as complacency
23.10.18 01:55:16<dmiles> since a better use of their time should be to write programs that write programs.. the greate example was "shopping cart websites"
23.10.18 01:55:59<dmiles>  "shopping cart *making* websites" that make websites
23.10.18 01:56:07<dmiles> (thats the non-traditional part)
23.10.18 01:56:49<dmiles> i come from it from the angle is that anything i do myself, i should strive to write a program to do it better
23.10.18 01:57:38<dmiles> or else i will be stuck doing it myself
23.10.18 01:58:21<dmiles> about the 2nd or thrid time you write the same thing.. you of course design a way it can be done via a macro
23.10.18 01:58:32<dmiles> then eventualyl you have mac4ros that you design from
23.10.18 01:59:14<dmiles> the fact that everyone walks into palces with a briefcases of their own macros is kind of funny..
23.10.18 01:59:49<dmiles> since it makes sense to create a langauges that is about organiszing their breifcases
23.10.18 01:59:56<stoopkid> well, in MLTT & HoTT people are doing things that push the limits of human conceivability, hard to expect to automate the job of mathematicians away, although very likely you could make their job easier
23.10.18 02:00:05<dmiles> and even a language about languages to organize htem
23.10.18 02:01:38<stoopkid> what you will get if you apply a reasoner using MLTT / HoTT as the KR is the right kind of search space
23.10.18 02:02:15<dmiles> the search space to automate their beifcases?
23.10.18 02:02:34<dmiles> (automate brefcase sharing i mean)
23.10.18 02:03:16<dmiles> for example lets say i needed to track "how many eggs a special bird will lay"
23.10.18 02:03:32<dmiles> most programmers pull out their beifcase with amacro for that
23.10.18 02:03:37<dmiles> most programmers pull out their beifcase with a macro for that
23.10.18 02:03:52<stoopkid> i don't know any programmers with a macro for that
23.10.18 02:04:13<dmiles> most i know do
23.10.18 02:04:26<dmiles> such as setting up a SQL table etc
23.10.18 02:04:45<dmiles> and the set off updates and datastamping etc of the munbver
23.10.18 02:04:55<HMCf> I prefer to keep my briefcase mostly full of *tactics* not macros...
23.10.18 02:04:56<HMCf> well
23.10.18 02:04:57<dmiles> and the set off updates and datastamping etc of the nuber
23.10.18 02:05:01<HMCf> tactics and snacks
23.10.18 02:05:06<HMCf> 7 < dmiles> C = E  might vbe undecable
23.10.18 02:05:11<HMCf> cubicaltt ftw
23.10.18 02:05:46<stoopkid> dmiles: there's multiple ways you might be doing this search
23.10.18 02:06:35<dmiles> stoopkid: most all programmers have their solution set up for tracking one species set up they change one tiny thing and now they track multiple species of birds
23.10.18 02:06:38<stoopkid> you might build a powerful function within MLTT that does the searching, or you might apply an unbounded reasoning process "outside" MLTT
23.10.18 02:06:51<stoopkid> (or bounded reasoning process outside MLTT)
23.10.18 02:08:55<dmiles> a question .. is  MLTT Non-montonic?
23.10.18 02:09:22<stoopkid> it is in the way you want it to be, and isn't in the way i don't want it to be
23.10.18 02:09:34<dmiles> Non-montonic logics are logics that the "repair language" is ommitted
23.10.18 02:09:47<dmiles> oopos@1
23.10.18 02:09:50<dmiles> montonic logics are logics that the "repair language" is ommitted
23.10.18 02:10:28<stoopkid> so in stuff like the dreadbury mansion problem, we can readily simulate non-monotonicity
23.10.18 02:10:48<stoopkid> the base logic of MLTT remains consistent so that proofs *about* all this stuff still remain coherent
23.10.18 02:12:28<dmiles> in CYC we use a "self-healing" logic .. shown here  https://en.wikipedia.org/wiki/Reason_maintenance   this claims that this is the defination of Paraconsistency
23.10.18 02:12:32<stoopkid> i.e. we don't want the fact that Tom disagrees with Bill on what constraints to enforce on some resource to impact the fact of nature/structure/math/logic that 2 + 2 = 4
23.10.18 02:13:36<stoopkid> so you can use the fact that 2 + 2 = 4 in your reasoning about *how* Tom disagrees with Bill
23.10.18 02:13:41<stoopkid> and what to do about it
23.10.18 02:14:04<dmiles> right the that is why Tom and Bills Microtheory Nodes start out inheriting the Node in which "2 + 2 = 4" is defined
23.10.18 02:14:35<dmiles> oh sorry they disagree about the the result
23.10.18 02:15:09<stoopkid> no they don't disagree about 2 + 2 = 4 because it's "obvious" truth
23.10.18 02:15:14<stoopkid> they disagree about something else
23.10.18 02:15:22<HMCf> well
23.10.18 02:15:25<stoopkid> something like whether platypus's are mammals or not
23.10.18 02:15:26<dmiles> ok .. i follow you then
23.10.18 02:16:14<stoopkid> so 2 + 2 = 4 has a proof; one of them might disagree about this but they'd just be wrong, yea?
23.10.18 02:16:58<HMCf> in cubicaltt we can even have disagreement on equalities and still work out, so there they might even disagree on what 2+2 means, but all can still work out as consistent... heh
23.10.18 02:17:06<dmiles> effectively you are saying this..
23.10.18 02:17:09<dmiles> sorry big paste
23.10.18 02:17:12<dmiles> Two major types are single-context and multi-context truth maintenance. In single context systems, consistency is maintained among all facts in memory (KB) and relates to the notion of consistency found in classical logic. Multi-context systems support paraconsistency by allowing consistency to be relevant to a subset of facts in memory, a context, according to the history of logical inference.
23.10.18 02:17:13<dmiles> This is achieved by tagging each fact or deduction with its logical history. Multi-agent truth maintenance systems perform truth maintenance across multiple memories, often located on different machines. de Kleer's assumption-based truth maintenance system (ATMS, 1986) was utilized in systems based upon KEE on the Lisp Machine. The first multi-agent TMS was created by Mason and Johnson. It
23.10.18 02:17:14<dmiles> was a multi-context system. Bridgeland and Huhns created the first single-context multi-agent system.
23.10.18 02:18:02<dmiles> these are the methods you, i  and everyone uses
23.10.18 02:18:07<stoopkid> basically like simulating a multi-context system in a single-context system
23.10.18 02:18:13<dmiles> yep!
23.10.18 02:18:14<stoopkid> is what i'm talking about
23.10.18 02:18:58<dmiles> since on when they are combined to a single-context system do we actualy "do something"
23.10.18 02:19:16<dmiles> since *only when* we combined to a single-context system do we actualy "do something"
23.10.18 02:19:28<stoopkid> a consistent single-context system
23.10.18 02:19:33<dmiles> right
23.10.18 02:19:46<stoopkid> ok so
23.10.18 02:19:52<stoopkid> that's not paraconsistency
23.10.18 02:20:34<dmiles> oh i mean that when i start out with basic inheritance of propostions i assumed they come from multipel sources
23.10.18 02:20:40<stoopkid> that's effectively the same structure of "hypothetical representation" that i use in MLTT/Agda, maybe with some better bells & whistles attached for convenience
23.10.18 02:20:45<dmiles> that i coalate into a  consistent single-context system
23.10.18 02:21:32<dmiles> "coalation" into a  consistent single-context system is why paraconsistency got created it was to provide for the first time a logic can made this piossible
23.10.18 02:22:27<dmiles> paraconsistency  a toolkit algrythem .. noting more
23.10.18 02:22:40<dmiles> paraconsistency  a toolkit algrythem .. nothing more
23.10.18 02:23:22<stoopkid> that might be the philosophical end-goal of paraconsistency but the mechanism of "drop EFQ and admit inconsistency" is not actually what you describe
23.10.18 02:23:30<stoopkid> "that i coalate into a  consistent single-context system"
23.10.18 02:23:31<dmiles> such a paraconsistency is the sciences of studying such algrithem s
23.10.18 02:24:19<stoopkid> when you say you eventually collate everything into a consistent single-context system, then you're saying you're not paraconsistent, you were just consistently thinking about something that happened to be false
23.10.18 02:24:29<dmiles> "droppoing EFQ" means that "now you have to write actual axioms of EFQ isntead!"
23.10.18 02:24:30<stoopkid> (or true)
23.10.18 02:24:33<stoopkid> (depending on the case)
23.10.18 02:24:55<dmiles> just like dropping NAF
23.10.18 02:25:06<dmiles> what did you do when you dropped DNE?
23.10.18 02:25:21<dmiles> what did you do when you dropped LEM?
23.10.18 02:25:40<dmiles> you enabled yourself the power to axomitize!
23.10.18 02:25:51<dmiles> you enable yourself to redefine it altogher
23.10.18 02:25:59<dmiles> and defined it *better*
23.10.18 02:26:17<dmiles> better than the stupiod way classical logics did
23.10.18 02:26:28<stoopkid> sure, i don't have a problem with dropping EFQ and seeing what else you can do, it's the "using that as a way to admit inconsistencies" that i have a problem with
23.10.18 02:26:47<stoopkid> as i've demonstrated, we can consistently reason about inconsistency
23.10.18 02:27:04<dmiles> did you think paracosnistancy logicians actualyl drop EFQ and not replace it with somethng better?
23.10.18 02:27:32<dmiles> something that allows thje users to help it get stronger?
23.10.18 02:28:06<dmiles> did you read my paper on this i wrote a year ago?
23.10.18 02:28:15<dmiles> i put the link in here
23.10.18 02:28:17<stoopkid> i have no idea, i'm just saying that inconsistency wouldn't be something "better" to replace it with :)
23.10.18 02:29:15<stoopkid> i.e. if you have some other (consistent) axioms that do neat things but are inconsistent with EFQ, that's cool
23.10.18 02:29:25<stoopkid> maybe they're better, idk
23.10.18 02:29:46<dmiles> no iwe created soemting *stonger* than Constructive logic EFQ
23.10.18 02:30:01<dmiles> that does what it does and then some
23.10.18 02:30:10<dmiles> liek the ~tSet(A) example i showed you
23.10.18 02:30:15<stoopkid> that's cool
23.10.18 02:30:39<dmiles> so that the empty set doesn not implyy everyting is true
23.10.18 02:31:17<stoopkid> i'm fine with that
23.10.18 02:31:54<dmiles> well guess what .. now you and i know more about paraconssincy than ##dependent :)
23.10.18 02:32:12<dmiles> since i didnt relaize that was your guys freakout
23.10.18 02:32:57<dmiles> sorta how i am sume classical logicisans are freaked out by you guys droping LEM
23.10.18 02:33:31<dmiles> did you not replace LEM with someting even stringer?
23.10.18 02:33:37<stoopkid> nobody in ##dependent was concerned about dropping EFQ they were concerned like me about using it as an excuse to allow inconsistencies
23.10.18 02:33:44<stoopkid> no we didn't lol
23.10.18 02:33:49<dmiles> you did
23.10.18 02:34:11<dmiles> you dropped LEM right?
23.10.18 02:34:18<stoopkid> yes
23.10.18 02:34:27<HMCf> we replaced lem with a lemma
23.10.18 02:34:32<dmiles> yup
23.10.18 02:34:43<HMCf> that lemma is just lem tho
23.10.18 02:34:48<HMCf> ...
23.10.18 02:34:54<dmiles> if you dropped EFQ.. what would you neded to replace it with?
23.10.18 02:35:02<dmiles> a lemma
23.10.18 02:35:21<stoopkid> a lemma?
23.10.18 02:35:30<dmiles> this is what i mean by "enforcment"
23.10.18 02:35:41<dmiles> lemma's are what we enforce
23.10.18 02:35:58<dmiles> we keeps systems consitant by enforcing lemmas
23.10.18 02:37:37<dmiles> a system that keeps itself consistant by "enforcing EFQ" via a lemma
23.10.18 02:38:17<stoopkid> i don't see how enforcing an axiom could make a system more consistent
23.10.18 02:38:18<dmiles> rahter than a system that goes cross eyes and brian explodes
23.10.18 02:38:26<dmiles> rahter than a system that goes cross eyes and brain explodes
23.10.18 02:38:54<stoopkid> axioms let you prove things, if you're consistent and you prove less things, you'll still be consistent
23.10.18 02:39:00<dmiles> the same argument that calssical logicains claim you guy's should goes cross eye and brain explode whne you dropped LEM
23.10.18 02:39:01<stoopkid> if you're consistent and you prove more things, then maybe not
23.10.18 02:39:55<HMCf> maybe we just shouldn't use any framework that can cross eyes or explode brains in the first place
23.10.18 02:41:06<dmiles> have you guys ever noticed i seem to be obsessed with modus tollens?  Why do you tink that is?  It is because it is not arule of inference for me! it is a lemma!
23.10.18 02:41:46<dmiles> why io am scuh a weirdo saying "enforce" "enfoce" every 5 senteaces
23.10.18 02:42:30<stoopkid> i.e. it's not an axiom, you prove it from axioms?
23.10.18 02:42:55<dmiles> oh I "axiomatized" EFQ
23.10.18 02:43:19<dmiles> and then i eforce the axiomization
23.10.18 02:43:32<stoopkid> what do you mean "enforce"
23.10.18 02:43:53<dmiles> it means that i actualy inser the prolog code "!,fail."
23.10.18 02:44:04<dmiles> cut and fail
23.10.18 02:44:16<dmiles> if the cosntraint is violated
23.10.18 02:44:50<stoopkid> and why would you ever violate the constraint
23.10.18 02:44:55<dmiles> making the entire choice pouint stack deemed invalid
23.10.18 02:45:59<dmiles> because there is not alwasy a road sign that says "the bridge is out go left instead"
23.10.18 02:46:08<stoopkid> ??
23.10.18 02:46:21<dmiles> <stoopkid> and why would you ever violate the constraint
23.10.18 02:46:37<stoopkid> i know what you were responding to you i just don't understand the response
23.10.18 02:46:55<dmiles> we dont know in a system that is agrregating multiple rules in what ways a voliotion will take place
23.10.18 02:47:03<stoopkid> what would a violation of EFQ look like
23.10.18 02:47:08<dmiles> until the program counter sees that violation
23.10.18 02:47:11<stoopkid> ~EFQ ?
23.10.18 02:48:13<dmiles> https://www.quora.com/Is-possible-to-implement-a-many-valued-logic-system-into-Prolog
23.10.18 02:48:32<dmiles> (( assumed_t(Ctx,Idea) => ~proven_false_t(Ctx,Idea) & ~fallacy_t(Ctx,Idea) )),
23.10.18 02:48:47<dmiles> (( proven_false_t(Ctx,Idea) <=> ~true_t(Ctx,Idea) & ~possible_t(Ctx,Idea) & ~unknowable_t(Ctx,Idea) )),
23.10.18 02:48:58<dmiles> i lested the EFQ axioms there at that link
23.10.18 02:49:03<dmiles> listed*
23.10.18 02:49:27<stoopkid> there's only one axiom
23.10.18 02:49:42<stoopkid> forall P, (A & ~A) -> P
23.10.18 02:49:46<dmiles> and how would you write such an axiom?
23.10.18 02:50:13<dmiles> if you canoncalize mine and the one you listed what do you think happens
                 <dmiles> ?
23.10.18 02:50:45<dmiles> (how many entailments do you end up with?)
23.10.18 02:50:58<dmiles> the same 16
23.10.18 02:51:00<stoopkid> not sure what you're asking
23.10.18 02:51:04<stoopkid> "canonicalize" ?
23.10.18 02:51:27<dmiles> its is the process of moving thrue the nomral forms
23.10.18 02:51:44<dmiles> then endind up with a set of modus-ponens only rules
23.10.18 02:51:47<stoopkid> normalizing the term to canonical normal form?
23.10.18 02:52:00<dmiles> thru each normal form
23.10.18 02:52:10<stoopkid> "thru each normal formal" ?
23.10.18 02:52:24<stoopkid> normalizing by definition stops at the normal form :P
23.10.18 02:52:35<dmiles> ensuring you hacve proved that in each nornmal form the statement still is equivalent
23.10.18 02:52:46<stoopkid> we get that for free
23.10.18 02:52:48<dmiles> what are the normal forms?
23.10.18 02:53:02<dmiles> CNF,DNF,NNF,PNF,SNF
23.10.18 02:53:06<HMCf> stoopkid: only when there is only one normal form, heh
23.10.18 02:53:54<stoopkid> does redprl have multiple normal forms or something
23.10.18 02:54:02<dmiles> for isntance if i had soem DNF that i cant re-write into NNF .. i am strewed
23.10.18 02:54:11<dmiles> for isntance if i had soem DNF that i cant re-write into NNF .. i am screwed
23.10.18 02:54:17<HMCf> no, ofc not... but evey logic dmiles speaks of seems to ;-)
23.10.18 02:54:26<dmiles> most logics screw themselves because they didnt discover this
23.10.18 02:54:49<stoopkid> err
23.10.18 02:55:07<stoopkid> you can translate arbitrary DNF into NNF
23.10.18 02:55:31<dmiles> but not NNF into DNF\
23.10.18 02:55:37<dmiles> unles you "can"
23.10.18 02:56:03<stoopkid> you always can, it's only ever just a matter of how long it's gonna take
23.10.18 02:56:06<dmiles> but better to studdy the translation between DNF and CNF back and forth
23.10.18 02:56:19<dmiles> have you studied the debate on that?
23.10.18 02:56:21<stoopkid> these are normal forms because arbitrary boolean formulas normalize to them
23.10.18 02:56:29<dmiles> boolean?
23.10.18 02:56:50<stoopkid> yes arbitrary propositional logic formulas
23.10.18 02:56:58<dmiles> maybe for boolean algebra
23.10.18 02:57:02<dmiles> not for logic
23.10.18 02:57:32<dmiles> oh so not for predicate calculus?
23.10.18 02:57:49<dmiles> propositional logic formulas and not predicate calculus
23.10.18 02:58:41<dmiles> the debate between the impossiblity of repreenting some DNF in CNF and visa versa is interesting
23.10.18 02:59:05<dmiles> same debate on NNF vs PNF
23.10.18 02:59:07<stoopkid> it's not a debate about impossibility it's a debate about complexity
23.10.18 02:59:33<dmiles> right but that complexity can axctule expose some important factors
23.10.18 02:59:42<dmiles> and blind spots
23.10.18 03:00:12<dmiles> since as what you do with functions
23.10.18 03:00:42<dmiles> and if the function is actualyl representable
23.10.18 03:01:11<dmiles> also if the CNF or DNF is inteneted to merge with a pre-existing set of axioms
23.10.18 03:02:33<dmiles> what i am saying is "canonicalizion" is not somethning to be taken lightly
23.10.18 03:03:01<dmiles> even though it is easy mostly
23.10.18 03:03:55<dmiles> the result of canoncalizaion results in a set of entrailmens
23.10.18 03:04:01<stoopkid> if you can prove whether or not its easy always ill give you $500k
23.10.18 03:04:09<dmiles> after those entailmets are looked out.. yuo remove the tautologies
23.10.18 03:04:33<dmiles> after those entailmets are looked at.. the next phase is you remove the tautologies
23.10.18 03:04:48<dmiles> that is any entailments that are already infered
23.10.18 03:05:01<dmiles> in my case i dont remove the EFQs
23.10.18 03:05:22<dmiles> the ones i mean that are obvouly only important to EFQs
23.10.18 03:05:42<stoopkid> "EFQs"? plural?
23.10.18 03:05:48<stoopkid> how many do you need?
23.10.18 03:05:54<dmiles> EFQ's poissessive
23.10.18 03:06:21<dmiles> depeands on hw rich of a proof theory you need
23.10.18 03:06:41<stoopkid> possessive would make it not even fit in your sentence
23.10.18 03:06:50<dmiles> if you are just looking for "cut fails" you only need at most 3
23.10.18 03:07:20<dmiles> in my case i dont remove the EFQ possiess anywhere from 3-16 entailments
23.10.18 03:07:32<dmiles> the EFQ possesses anywhere from 3-16 entailments
23.10.18 03:07:52<dmiles> the weaker the rules of inference of the base system.. the more entailmnets required
23.10.18 03:08:11<dmiles> for example to handle <>P  requires at least more
23.10.18 03:08:21<stoopkid> you mean EFQ is a theorem of your base system(s)  .. ?
23.10.18 03:08:22<dmiles> to handle <><>P even more
23.10.18 03:09:17<dmiles> EFQ says a littel about  P, ~P ~<>P ~[]P etc
23.10.18 03:09:32<dmiles> <>~[]P
23.10.18 03:10:00<dmiles> EFQ needs to have rules that state explicitly the modus tollens of every built in axiom
23.10.18 03:10:06<stoopkid> ok so you mean there are multiple axioms for EFQ in your modal logic to account for the different modalities
23.10.18 03:10:37<dmiles> yep
23.10.18 03:11:09<dmiles> and to account for what happens after a DNE
23.10.18 03:11:36<dmiles> for any rule that involves an opertusinty for inconsistency
23.10.18 03:12:06<dmiles> such as this one  [] P => <> P
23.10.18 03:12:17<stoopkid> why would there ever be an opportunity for inconsistency ?
23.10.18 03:12:44<dmiles>  [] P => <> P   with out EFQ would be inconsistent
23.10.18 03:13:00<dmiles> so we encode the canoncical form of the EFQ
23.10.18 03:13:01<stoopkid> how would removing one axiom make another axiom inconsistent
23.10.18 03:13:52<dmiles> he other axioms are there knowing EFQ is proping them up
23.10.18 03:13:54<dmiles> the other axioms are there knowing EFQ is proping them up
23.10.18 03:14:24<stoopkid> how though, what's the situation that makes this axiom inconsistent due to the absence of EFQ
23.10.18 03:14:25<dmiles> this is why there are verious combinations of axioms that are differnt between equivalent systems
23.10.18 03:15:22<dmiles> "[]P   =>   <>P     "    would enable NAF
23.10.18 03:15:34<dmiles> if EFQ was not there with a stick
23.10.18 03:16:17<stoopkid> (also nvm i can see how in the situation of general non-monotonic logic you could potentially make other axioms inconsistent by removing an axiom; all the more argument against non-monotonic logic!)
23.10.18 03:16:55<dmiles> ahah "make other axioms inconsistent by removing an axiom"
23.10.18 03:17:11<dmiles> whiuch happens all the time
23.10.18 03:17:24<dmiles> when a system does less than a utter total search
23.10.18 03:17:27<stoopkid> only in a non-monotonic logic
23.10.18 03:17:48<dmiles>  less than a utter total search  =  less than total axioms
23.10.18 03:19:05<stoopkid> or you just stick with a solid foundation that has solid meta-theoretic proofs of its consistency
23.10.18 03:19:08<stoopkid> :P
23.10.18 03:19:29<dmiles> so what iu do is i axiomitize EFQs permutated combinatioons with every "tautology" to pay attention
23.10.18 03:19:50<stoopkid> anyway, so afaict there's no case against MLTT here?
23.10.18 03:20:11<dmiles> a case woulfd only be if it ommits non-monotic language
23.10.18 03:20:24<dmiles> (repeiar and edit langauge)
23.10.18 03:20:37<stoopkid> we covered this already
23.10.18 03:20:56<dmiles> (ommiting repear and edit langauge would make it not expressive enugh)
23.10.18 03:21:19<dmiles> since often time i am manking axioms about reactive repeair and edits
23.10.18 03:21:33<dmiles> oh so it does cover that>
23.10.18 03:22:07<stoopkid> it covers your use-case, without itself become non-monotonic in order to do so
23.10.18 03:22:10<stoopkid> becoming*
23.10.18 03:22:51<dmiles> and it also needs to drop EFQ
23.10.18 03:23:13<stoopkid> you haven't presented any evidence as to why this is the case
23.10.18 03:23:20<dmiles> to allow me to make infernces abpout violations present
23.10.18 03:23:31<stoopkid> oy, we covered this already
23.10.18 03:23:50<dmiles> you are saying we would have used MLTT to beuild cyc?
23.10.18 03:23:51<stoopkid> it can do this without having to drop EFQ
23.10.18 03:24:05<dmiles> you are saying we could have used MLTT to build CYC?
23.10.18 03:24:16<dmiles> (MLTT's KR)
23.10.18 03:24:31<dmiles> you are expecting me to replace it?
23.10.18 03:24:42<stoopkid> idk all of what cyc does but so far you haven't presented me with a use-case that MLTT wouldn't be equipped for
23.10.18 03:24:55<dmiles> well thats good!
23.10.18 03:25:05<stoopkid> i don't have any expectations that you do anything, i'm just talking about what MLTT can/can't/should/shouldn't do
23.10.18 03:25:10<dmiles> oh except for multi-agent
23.10.18 03:25:20<dmiles> oh except for multi-agent non-monotonics
23.10.18 03:25:24<stoopkid> except we covered that
23.10.18 03:25:25<stoopkid> ...
23.10.18 03:25:35<stoopkid> why are we going in circles ?
23.10.18 03:26:09<stoopkid> Agda can't necessarily do these things but Agda is just one manifestation of an MLTT system
23.10.18 03:26:15<dmiles> you are saying that if you dont use my soltuion for the problem then we can do it in MLTT
23.10.18 03:26:31<stoopkid> not exactly
23.10.18 03:27:11<stoopkid> because after boiling it all down your solutions appear to be similar in spirit to what i'd suggest in MLTT anyway
23.10.18 03:27:19<dmiles> you saying port the self programming stuff of OpenSim4OpenjCog to self program Agda right?
23.10.18 03:27:38<stoopkid> think for a moment:
23.10.18 03:27:44<dmiles> i can ask Ben Gortzel if he wants to do it
23.10.18 03:27:45<stoopkid> have i ever told you to do anything? :P
23.10.18 03:28:11<dmiles> you are saying it is possiuble though
23.10.18 03:28:32<dmiles> and i am taking your word for it
23.10.18 03:29:16<dmiles> that we can replace our systems with a new one based on MLTT
23.10.18 03:29:17<stoopkid> idk about agda you'd maybe want to start with a fresh prolog/CYC-programmer's take on implementing its natural deduction rules
23.10.18 03:30:12<stoopkid> dmiles: afaict it can handle the specific use-cases you've presented if set up properly
23.10.18 03:30:33<dmiles> yes but we have 100s of usecases .. too many to go thru one by one
23.10.18 03:31:07<dmiles> my system has been painstakenly designed by people that have even more usecases than me
23.10.18 03:31:37<dmiles> John Sowa etc
23.10.18 03:32:15<dmiles> for example when you translate the inform7 rules
23.10.18 03:32:46<dmiles> if we translate those into MLTT we wants a world you can still play in
23.10.18 03:33:15<dmiles> and a world that as new inform7 rules are added self hacks
23.10.18 03:33:32<dmiles> like at Guncho.com
23.10.18 03:33:58<stoopkid> if your usecases include needing a sound & consistent, expressive logical KR, then MLTT can probably work well for it
23.10.18 03:35:46<dmiles> well if our usecases *only* needed a sound & consistent, expressive logical KR
23.10.18 03:36:22<dmiles> then we'd only need MLTT
23.10.18 03:37:41<stoopkid> i'm not suggesting that MLTT necessarily be the only component of your system, but note also that it's KR is directly a highly expressive programming language with powerful abstraction, so you can do a lot even with just MLTT programming
23.10.18 03:41:45<stoopkid> MLTT KR provides machine-interpretable, sound & consistent, semantics of knowledge, like the fact that 2 + 2 = 4 never changes, and we can always use it in deducing more knowledge
23.10.18 03:41:54<stoopkid> what you *do* with that knowledge is a different question
23.10.18 03:43:59<stoopkid> in one of the main use-cases i'm aiming for, MLTT is naturally in conjunction with other components of the system, for example the operating system
23.10.18 03:44:42<stoopkid> the shell you're running the MLTT interpreter/compiler from, other processes you've spawned
23.10.18 03:46:25<stoopkid> could be a robot, etc..
23.10.18 03:49:06<dmiles>  use-cases i'm aiming for is when MLTT rules of gravity are introduced to the system the system can use  those to add code to existing objects to make them "gravity aware" .. then when "boyancy" is added a few days later the system can recode the objects to add the idea of mass+displacment to the gravity code
23.10.18 03:49:16<stoopkid> so you can query this in effectively the same way you would query in prolog, or like a database: hash the type and see if you've already got a proof of that type directly
23.10.18 03:50:01<stoopkid> ok so that's in the "doing something with the knowledge" category not in the "representing the knowledge" category
23.10.18 03:50:10<dmiles> ah yes
23.10.18 03:51:01<stoopkid> so how's it going to be comparing these concepts in MLTT ?
23.10.18 03:51:06<dmiles> it is basically "how vaugue can the KR be and still be useable"
23.10.18 03:51:43<dmiles> "how can we make the KR gradually less vauge"
23.10.18 03:52:52<dmiles> my assumption (may not be right) has been that vagueness = inconsistency at least in MLTT
23.10.18 03:53:15<dmiles> but this might be the "total" part
23.10.18 03:53:36<stoopkid> depends what you mean by vague
23.10.18 03:54:05<stoopkid> but anyway, let's take Newtonian vs. relativity
23.10.18 03:54:06<dmiles> maybe "total" vs "non-total" in the *use* of the the KR is crapper
23.10.18 03:55:17<stoopkid> we should never have presented either newtonian physics nor relativity physics as assertions right, because we don't actually know; just from a philosophical perspective here
23.10.18 03:55:24<dmiles> as long as MLTT does not disallow making not non-decidable assumptions/infernces then all is well
23.10.18 03:56:02<stoopkid> and we don't see newtonian physics or relativity in the foundations of logic next to EFQ and LEM and MP..
23.10.18 03:56:26<dmiles> right both newtonian and relativistic infernces are probably correct even while the theories are inccoect
23.10.18 03:57:08<stoopkid> you need all kinds of theories and ever-expanding knowledge-bases to take into account "real-world" stuff, but a small set of well-chosen axioms can handle effectively all of the math & "structural logic"
23.10.18 03:57:46<dmiles> AND  a small set of well-chosen axioms can handle effectively all of the process of ellaboration in anon-monotic way
23.10.18 03:58:17<stoopkid> moving that real-world stuff into hypotheticals, which newtonian and relativistic mechanics both are, we can use this logic to compare their logical structure
23.10.18 03:59:30<dmiles> one thing that is odd.. you may have convinced me otherwise the other day .. is that it seems that some of MLTT KR is not a programing language
23.10.18 03:59:39<stoopkid> so what a reasoner might be set out to do in this context is: 1) try to prove whether the theories are mutually consistent or inconsistent with each other; 2) determine whether there is some correlation between them (for example it could prove that relativistic mechanics reduces to Newtonian mechanics in the limit)
23.10.18 04:00:00<dmiles> whereas CYC's language is both a KR langauge *and* a programing language
23.10.18 04:00:56<dmiles> and i want 3) a hybrid theory
23.10.18 04:01:00<stoopkid> it is a programming language but the logic-programming language that you would be expecting from prolog would all be about inferencing over the types not as much about directly evaluating the proofs
23.10.18 04:01:27<stoopkid> when type-theorists talk about programming in type theory, they're talking about executing proofs-as-programs
23.10.18 04:01:47<stoopkid> when logic-programmers talk about programming, the analog in type theory would proof-search over an MLTT KB
23.10.18 04:03:50<dmiles> my goal is this: if my program prints "hello girls" instead of "hello world" .. i edit the theory that made it say "girls" over "world" ..  rather than the code that produced the strings
23.10.18 04:03:52<stoopkid> the latter can incorporate the former, more difficult / less-motivated in the other direction.. (MLTT should typically ideally be self-contained though there are arguments for a very limited number of escape hatches, i.e. the main loop)
23.10.18 04:04:43<stoopkid> sure you could do that here
23.10.18 04:05:56<stoopkid> there is a wide range of possibilities for what you can make a system do as it proof-searches over an MLTT KB, and the MLTT KB itself could (maybe with some cleaner syntax sugaring in a couple places) accommodate that kind of ease of update
23.10.18 04:06:45<stoopkid> (it would, or at least could, be very similar to what you would do in ex. prolog where you just edit a couple rules associated with that behavior)
23.10.18 04:09:05<stoopkid> here's another example application of this for an AI: what do we know is the common problem with lots of AIs?
23.10.18 04:10:12<dmiles> Well the reason we dont have AI yet is that OpenSim4OpenCog was a manditory technological requirement first
                 <stoopkid> they get easily tripped up because they're not actually thinking logically in terms of "logical like 2 + 2 = 4"
23.10.18 04:10:43<dmiles> you cant teach AI 2+2 wihtout OpenSim4OpenCog
23.10.18 04:11:00<stoopkid> i can teach my computer 2 + 2 = 4 without AI :)
23.10.18 04:11:13<dmiles> yeah but that not AGI
23.10.18 04:11:27<stoopkid> yes hence the "without"
23.10.18 04:12:00<dmiles> not saying there ar enot ways to do things withotu AI.. i am saying there are no ways to do AI wihtut first creatign some things
23.10.18 04:12:48<dmiles> most people seem to not know what they need to create first
23.10.18 04:13:31<dmiles> that was even for me the biggest problem for the first 15-25 years
23.10.18 04:14:18<stoopkid> i think MLTT is a good start :)
23.10.18 04:14:46<stoopkid> here's an analogy (or maybe a real-world example), imagine training a complex neural net or AI of your choice on proving things in MLTT
23.10.18 04:16:18<stoopkid> i.e. basically training it in math, with an already available machine-interpretable framework to express & verify the math
23.10.18 04:17:26<dmiles> Right you are reading this off my website
23.10.18 04:18:02* dmiles knows you are not but its the logicmoo manefesto almost word for word
23.10.18 04:19:42<stoopkid> so let me give an example
23.10.18 04:20:16<stoopkid> a wall clock has 12 positions on it, and an hour-hand with a "tick" operation that increments the hour-hand around the clock
23.10.18 04:20:53<dmiles> http://logicmoo.sourceforge.net/cycmoo/
23.10.18 04:21:20<stoopkid> the natural numbers mod 12 is a set that happens to have 12 elements and "successor" operation that increments a number, and loops back around to 0 when reaching 12
23.10.18 04:21:35<stoopkid> these two things have the same structure yea?
23.10.18 04:21:44<dmiles> yes
23.10.18 04:21:48<stoopkid> (at this level of abstraction anyway)
23.10.18 04:21:56<dmiles> the way that the progrtam can abstract these are indeed the same
23.10.18 04:22:33<dmiles> initially to understand these thngs the KR will have been pretty close
23.10.18 04:22:51<dmiles> between a clock and a counter loop
23.10.18 04:23:07<dmiles> (between a clock and the successor)
23.10.18 04:23:23<stoopkid> so we can prove that they are structurally equivalent at this level of abstraction, and thus translate any proofs about them at this level abstraction freely between the two representations
23.10.18 04:23:28<dmiles> interally the rules the system creates to understand eiterh should be simular
23.10.18 04:24:37<dmiles> jsut by having sucessor KR inside it should be possible for the program to rebuild the clock into its logical MOO
23.10.18 04:24:57<dmiles> by reusing the same Mt
23.10.18 04:25:13<stoopkid> not sure what you mean
23.10.18 04:26:07<dmiles> that a system can learn to mental simulate the rules of a clock because it was able to simuate the successor code
23.10.18 04:26:34<dmiles> it does this because the theory rules are very cloose
23.10.18 04:27:10<stoopkid> so basically what you're wanting to do there, in the context of MLTT (or general math) is prove that there is an isomorphism (or at least some kind of homomorphism) between the two structures
                 <dmiles> humans do this even the same way
23.10.18 04:27:49<stoopkid> or you maybe have the isomorphism already (demonstrating the equivalence of the structures) and then you want to use it to translate results from one to the other
23.10.18 04:29:03<dmiles> that we build a mental model of the clock and run it as a simuation.. if someone made it a 24 hr clock there is even a simpler update to the mental simulation that simulates immaginary clocks
23.10.18 04:29:43<dmiles> as the things called "edit distance" is close even in successor and clocks
23.10.18 04:29:45<stoopkid> sure you could compare these structures to the structure of a 24 hr clock too
23.10.18 04:30:18<dmiles> "edit distance" = the number of rule you need to edit to make two theories the same
23.10.18 04:30:26<stoopkid> you could prove that two cycles of the 12 hour clock makes a cycle of the 24 hour clock
23.10.18 04:31:07<stoopkid> there are much better questions to ask about the theories than edit distance :)
23.10.18 04:32:03<stoopkid> arbitrarily precise questions about their logical structure
23.10.18 04:33:24<dmiles> when you comapre two models you are looking for agreements and differences
23.10.18 04:33:40<dmiles> of the logical structure
23.10.18 04:33:50<stoopkid> sure
23.10.18 04:34:16<dmiles> system that cant see their own logical structure this is much harder
23.10.18 04:34:23<dmiles> systems
23.10.18 04:34:46<stoopkid> sure
23.10.18 04:35:01<dmiles> we pick KR that maximizes this
23.10.18 04:35:24<dmiles> MLTT is one that does potentually maximizde this
23.10.18 04:36:06<stoopkid> indeed
23.10.18 04:36:20<dmiles> its jsut that Agda didnt
23.10.18 04:36:24<stoopkid> or at least does a pretty good job at it
23.10.18 04:36:28<dmiles> (was your main complaint)
23.10.18 04:36:40<stoopkid> welllll...
23.10.18 04:36:52<dmiles> (your complaint a year or two ago that is)
23.10.18 04:36:55<stoopkid> yes/no
23.10.18 04:37:34<dmiles> yeah i see MLTT as jsut as possible in Prolog
23.10.18 04:38:45<dmiles> at least it has more long standing research on reverse logical analysis.. so would proably be the best fit
23.10.18 04:39:17<dmiles> reverse logical analysis = noticing code rreuse
23.10.18 04:39:25<dmiles> and well as KR reuse
23.10.18 04:40:39<dmiles> evne PAKS is light years ahead of GHCi
23.10.18 04:40:48<dmiles> evne PAKCS is light years ahead of GHCi
23.10.18 04:41:14<stoopkid> here's what i haven't seen done yet: something as mathematically equipped as MLTT made to represent its own implementation and prove things about it, and then develop a coherent practical theory for what to do with logical self-representations
23.10.18 04:42:08<dmiles> i've seen Haskell system proved in Agda i think
23.10.18 04:42:34<stoopkid> i also think MLTT/HoTT is generally the right direction, but that univalence has to be limited by an adjustable boundary between extensional vs. intensional properties of objects
23.10.18 04:43:26<dmiles> yes univalence is the only idea in most of it that is unfortionate
23.10.18 04:43:43<stoopkid> no, univalence is a great thing
23.10.18 04:44:38<stoopkid> univalence is the property that would allow us to translate results between equivalent structures in the fullest generality
23.10.18 04:45:46<dmiles> that sort of bottem up is like counting bricks of a pyrimid
23.10.18 04:46:05<dmiles> wow these two objects had exactly 723 bricks!
23.10.18 04:46:21<dmiles> one was a swimming pool the other was a pyrimid
23.10.18 04:46:56<dmiles> of course if everythng is a pyrimid it would be a good idea
23.10.18 04:47:21<stoopkid> no, univalence is simply the property that you can substitute equivalent structures for each other in any context (i.e. apply any result about an equivalent structure to them)
23.10.18 04:47:28<dmiles> and effectively MLTT is the right level of detail for such comparisons
23.10.18 04:48:05<stoopkid> the problem is: what do you define as equivalence
23.10.18 04:48:28<stoopkid> a notable situation of this problem is with function definitions
23.10.18 04:48:42<dmiles>  we pick KR that maximizes this
23.10.18 04:49:19<dmiles> we pick a KR that maximizes the things that should be the same being very close
23.10.18 04:49:52<stoopkid> so, univalence basically asserts that extensionally equivalent things are equal for the purposes of reasoning but, depending on where you place the boundary between intensional and extensional, what gets considered same or different will change
23.10.18 04:50:20<stoopkid> for example: do we compare two functions based only on their outputs, or can we also compare based on what path they take between input & output?
23.10.18 04:50:30<stoopkid> answer: it depends
23.10.18 04:51:49<stoopkid> basically my take on this is: univalence should hold at any level abstraction, but there are different levels of abstraction
23.10.18 04:53:22<stoopkid> but, there are also arguments against this, especially if you have internal representation of the code you're eventually intending to execute
23.10.18 04:55:25<stoopkid> i.e. we might have an internal representation of a programming language that we can internally measure complexity of, and only ever use the functions used in proofs-of-implications as a logical base-line to compare with the I/O relations of the algorithms that we write in that internally-represented language
23.10.18 04:55:54<stoopkid> and theoretically we should be able self-represent this way..
23.10.18 04:59:28<stoopkid> where i've seen people struggle w/ describing type-theories in type theory is they try to actually build it in the object-language
23.10.18 05:01:50<dmiles> teh other strucggel i've seen is comparing the post compiled forms hoping the structure will be found there
23.10.18 05:02:50<dmiles> (neigther is worse though)
23.10.18 05:04:10<dmiles> but this is why i concluded (and the head of MS Research) that the real structure is going to be found by having all developers document functions instensionally
23.10.18 05:05:34<dmiles> in the new OS called InConcert at the time the best example was the MessageBoxA code
23.10.18 05:06:02<dmiles> it was able to call you on the phone or shoot you an email rather than displying on the screen
23.10.18 05:07:04<dmiles> the MSWord grammer checker wasnt checking your grammar in 2000 it was testing to see how well we could secretly translate your english to German
23.10.18 05:07:28<dmiles> if we couldnt we'd put a small green underline ver it
23.10.18 05:08:53<stoopkid> maybe what we should do is experiment with some MLTT and you point out what you want to automate better and i'll show you what MLTT is/isn't capable of doing in that regard
23.10.18 05:09:24<dmiles> in logicmoo .before i translate you english input into logical assertion... i translate back and forth to german over google translate.. now i have less cases to handle
23.10.18 05:10:16<dmiles> (since the two way translation ends up secretly normalizing the grammar)
23.10.18 05:14:50<dmiles> well i been looking at the MLTT defined in Prenix Normal Form and it has a nice set of relatioons
23.10.18 05:15:52<dmiles> all i have to do is cannoicalize it from SNARK and it should work
23.10.18 05:16:29<dmiles> (StaNford Automaed Reasoning Kit)
23.10.18 05:17:48<dmiles> how that works is you then take someones MLTT assertions.. and when combined.. you can asked quruies
23.10.18 05:18:29<dmiles> PowerLOOM to also uses the same canonicalizer
23.10.18 05:20:41<dmiles> the difference in how PowerLOOM/LogicMOO/CYC/LarKC/SNARK use it .. is we actually treat it as any other axiomitized Microtheory in Preneix Normal form
23.10.18 05:26:14<dmiles> we make queries such as hown here: http://www.cse.chalmers.se/~peterd/slides/FOTC.pdf
23.10.18 05:26:59<dmiles> neat ther eis a agda2atp
23.10.18 05:27:29<dmiles> 1 translates axioms, definitions and conjectures in the interface
                 <dmiles> file into the TPTP language and
23.10.18 05:27:30<dmiles> 2 automatically tries to prove the conjectures using E, Equinox,
                 <dmiles> SPASS, Metis, and Vampire.
23.10.18 05:27:47<dmiles> out of that group  E === PowerLOOM/LogicMOO/CYC/LarKC/SNARK
23.10.18 05:28:53<dmiles> how ogicMOO/CYC/LarKC are differnt though is we use forward chaining to "guess what code a human might need to ehlp imporove"
23.10.18 05:29:31<dmiles> using O'Keefe post-canonicalizer yopu actualyl get an executable
23.10.18 05:29:44<dmiles> from you Adga code
23.10.18 05:30:07<dmiles> as long as the agda2tptp tranalator doesnt hide stuff
23.10.18 05:37:01<dmiles> the TPTP langage is a subset of CycL/KIF/etc
23.10.18 05:37:48<dmiles> what would suck is if  MLTT is a subset of TPTP rather than a superset :(
23.10.18 05:38:14<dmiles> not suck for me.. but suck for type theorists
23.10.18 05:38:54<dmiles> but i will keep an open mind and for now assume it is a superset
23.10.18 05:39:59<dmiles> time to hodl LTC
23.10.18 11:47:24<HMCf> dmiles> (since the two way translation ends up secretly normalizing the grammar)
23.10.18 11:47:57<HMCf> is probably becoming less true as google uses rnn for translate more often
23.10.18 11:48:45<HMCf> http://fortune.com/2018/07/21/google-translate-religious-translations/
23.10.18 11:49:36<HMCf> dmiles> neat ther eis a agda2atp
23.10.18 11:50:13<HMCf> agda already has atp baked into the core of it... internally there is basically an smt solver
23.10.18 11:50:41<HMCf>  < dmiles> using O'Keefe post-canonicalizer yopu actualyl get an executable
23.10.18 11:50:42<HMCf>  < dmiles> from you Adga code
23.10.18 11:51:33<HMCf> why on earth would you do that as opposed to just emitting the definitiins to your language of choice from the backend built in to the compiler?
23.10.18 11:53:08<HMCf> (*especially* in the case of the agda compiler, which is known to commonly beat C equiv performance?!)
23.10.18 12:12:31<HMCf> stoopkid> maybe what we should do is experiment with some MLTT and you point out what you want to automate better and i'll show you what MLTT is/isn't capable of doing in that regard
23.10.18 12:13:22<HMCf> let's all learn redtt/redml together :-)
23.10.18 13:38:39<dmiles> "why on earth would you do that ..."
23.10.18 13:39:05<dmiles> it gets rid of the problems that make agda unusable to me
23.10.18 13:39:22<dmiles> while keeping all the benefits
23.10.18 13:41:05<dmiles> performance of my apt  is 100 - 1000 than all the best public ones
23.10.18 13:41:09<dmiles> atp
23.10.18 13:41:24<dmiles> also i have no use or intereset is smt sovers
23.10.18 13:42:12<dmiles> smt solver as atp is the retarded crap that our systems are designed to do 1000s times better
23.10.18 13:42:48<dmiles> see this paper:  http://www.cyc.com/wp-content/uploads/2015/06/First-Orderized.pdf
23.10.18 13:43:58<dmiles> the paper has benmarks in there as well
23.10.18 13:49:09<dmiles> once Agda->TPTP->CycL (if it remains executable) we do both verification and execution at the same time
23.10.18 13:49:18<dmiles> and no need to have humans writting code anymore
23.10.18 13:50:02<dmiles> and no need for static typing
23.10.18 14:05:56<dmiles> Where the paper says " This is the approach used by the Suggested Upper Merged Ontology
                 <dmiles> (Niles & Pease 2001)." they are refering the the system that Nils and Pease paid me to create for them
23.10.18 14:06:12<dmiles> Niles*
23.10.18 14:08:40<dmiles> "is probably becoming less true as google uses rnn for translate more often"  yes that is sadly more the case nowadays
23.10.18 14:11:52<dmiles> when i built the NatLangUnderstanding system in 2005 for Daxton Labs it worked good at least then
23.10.18 14:15:57<HMCf>  < dmiles> it gets rid of the problems that make agda unusable to me
23.10.18 14:15:58<HMCf>  < dmiles> while keeping all the benefits
23.10.18 14:16:06<HMCf> er... wut?
23.10.18 14:16:17<HMCf> it changes nothing about agda itself
23.10.18 14:17:24<dmiles> sorry i meant the agda toolchain
23.10.18 14:17:34<dmiles> agda itself is fine
23.10.18 14:17:48<HMCf> what about the agda toolchain is "unusable to you"?
23.10.18 14:18:13<HMCf> and how replacing the backend changes anything?
23.10.18 14:18:56<dmiles> I want to allows Holes to be filled nondetermistically
23.10.18 14:19:26<dmiles> this is what changing the back end allows
23.10.18 14:21:47<dmiles> this is what PAKCS (the Curry compiler) allows (same concept)
23.10.18 14:22:42<dmiles> as well as this is what I designed WAM-CL (the Lisp compiler) to allow (same concept)
23.10.18 14:24:30<dmiles> what we (PAKCS and I's code) does is swap out the backend into using a dynamic interpretor
23.10.18 14:26:50<dmiles> in the same dynamic interpreter i created that was refered to in that CYC paper
23.10.18 14:29:40<dmiles> which means it integerates .kif files such as https://github.com/ontologyportal/sumo/
23.10.18 14:33:37<dmiles> what i created was is the final goal of Girard @ http://girard.perso.math.cnrs.fr/0.pdf
23.10.18 14:34:25<dmiles> Partial Designs
23.10.18 14:36:11<dmiles> s 
                 <dmiles>  
23.10.18 14:36:12<dmiles> K
                 <dmiles> ç
                 <dmiles>  |-7}
                 <dmiles> |
                 <dmiles> ¬mK |
23.10.18 14:36:13<dmiles> ~X®|
23.10.18 14:36:14<dmiles> 
                 <dmiles> 
23.10.18 14:36:16<dmiles> oops :)
23.10.18 14:36:25<dmiles> Locative Artifacts
23.10.18 14:41:09<dmiles> pages 169-171 is good to undetand what we did in 2000
23.10.18 14:43:24<dmiles> hah and the gentleman Gerard refers to is one of my mentors Hewitt
23.10.18 14:43:40*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ijvczppkgnbtojyg) left #AutoNomic: Quit: Connection closed for inactivity
23.10.18 14:44:16<dmiles> I never worked for Hewitt but i was a trouble maker  in AI at the time
23.10.18 14:45:14<dmiles> My work was a continuation of McCarhys and so was Hewitts and Hewitt and I came up with the same code
23.10.18 14:47:41<dmiles> i jsut know that Hewitt cam up with his 30 years before that email
23.10.18 14:47:48<dmiles> didnt know
23.10.18 14:48:18<dmiles> what him and i now have in common is we cant figure out why everyone thoght our code was imppositible
23.10.18 14:48:45<dmiles> when given the saem task everyone quotes Godel
23.10.18 14:48:58<dmiles> as to why they can even begin to try
23.10.18 14:49:31<dmiles> to begin to try to make an interepter that desdesigns its theory as it runs
23.10.18 14:49:41<dmiles> i am even refering to its type theory as it runs
23.10.18 14:49:57<dmiles> not a theory of what is what
23.10.18 14:50:16<dmiles> but a theory of what it is *doing* with Holes
23.10.18 14:56:37<HMCf> i don't know what you're trying to say
23.10.18 14:57:00<HMCf> in agda you can already "do whatever you want" with a hole
23.10.18 14:57:17<HMCf> and this has nothing to do with the backend
23.10.18 14:57:44<dmiles> =a Hole has to be filled before compilation?>
23.10.18 14:58:27<dmiles> Why?
23.10.18 14:58:41<dmiles> It is due to limitation of the backend
23.10.18 14:59:30<dmiles> or do you belive there is a differnt reason?
23.10.18 15:00:22<dmiles> "a differnt reason" no one could ever possibly want a Hole to remain a Hole after shipping?
23.10.18 15:00:49<dmiles> lets say they didnt care about that differnt reason
23.10.18 15:00:57<dmiles> how could they have their cake and it it to?
23.10.18 15:01:54<dmiles> they'd change the backends intrinsic properties to allow partual code
23.10.18 15:10:04<dmiles> or do what that paper you linked to a while ago did
23.10.18 15:10:26<dmiles> that was stiull creating a new backend
23.10.18 15:10:59<dmiles> (in your case one that is nondeterministic)
23.10.18 15:11:12<dmiles> add nondeterministic properties
23.10.18 15:11:34<dmiles> very good.. but keep going
23.10.18 15:12:42<dmiles> next you need to add the ability to have x86 code buffers that slowly or never file
23.10.18 15:12:44<dmiles> fill
23.10.18 15:14:17<dmiles> by the time you've coaght up to the feature set of PAKCS Cyc or Logicmoo you have wasted 10 years
23.10.18 15:18:04<dmiles> all bvecause you wont replace the backend
23.10.18 15:19:39<dmiles> this is why PAKCS vs lightyears ahead
23.10.18 15:19:40<dmiles> PAKCS A major Curry implementation with a WWW interface, which uses Prolog as the target
                 <dmiles> KiCS, KiCS2 A Curry implementation, which uses Haskell as the target
23.10.18 15:20:17<dmiles> i've studied the KiCS(2) papers
23.10.18 15:20:50<dmiles> they explain how much darn work it was
23.10.18 15:21:02<dmiles> and they still cant catch up to PAKCS
23.10.18 15:22:08<dmiles> at least they can still do some nifty stuff
23.10.18 15:22:51<dmiles> whats the KiCS2 ETA?
23.10.18 15:23:09<dmiles> to do what PAKCS does
23.10.18 15:23:15<dmiles> probably never
23.10.18 15:23:47<dmiles> i wouldnt want to wait more than a day anyways
23.10.18 15:24:31<dmiles> same goes for Agda
23.10.18 15:25:14<dmiles> not how it is simular is that PAKCS and KiCS2 are toolchains for the same language
23.10.18 15:25:17<HMCf> i have no idea what you're on about
23.10.18 15:25:24<HMCf> < dmiles> =a Hole has to be filled before compilation?>
                 <HMCf> < dmiles> Why?
23.10.18 15:25:25<HMCf> < dmiles> It is due to limitation of the backend
23.10.18 15:25:39<HMCf> how do you compile code that doesn't exist yet?
23.10.18 15:25:54<dmiles> we leave a prolog var in its palce
23.10.18 15:26:38<dmiles> we slowly isntanciate that var
23.10.18 15:27:02<dmiles> how else do you think PAKCS works?
23.10.18 15:27:21<dmiles> how else do you think CYC works?
23.10.18 15:28:04<dmiles> how else did you think we compiled code that doesn't exist yet?
23.10.18 15:28:16<dmiles> or maybe you still dont know how
23.10.18 15:28:23<dmiles> or even if thats possible
23.10.18 15:28:39<dmiles> i'd say take the time to study it
23.10.18 15:28:51<dmiles> i did
23.10.18 15:29:56<dmiles> Paul Tarau was one of the great teachers of how we did it
23.10.18 15:38:19*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-inkfzkudqhbfkvij, stoopkid: stoopkid)
23.10.18 15:40:32<dmiles> Vitor Costa taught us how to do it on x86 (he dynamically converts partials to x86)
23.10.18 15:41:20<dmiles> the Enhanced Andora Model papers
23.10.18 15:41:57<dmiles> vs Tarau whom stays in BIM
23.10.18 15:43:39<stoopkid> "<dmiles> how else do you think PAKCS works?
                 <stoopkid> 23.10.18 15:27:21<dmiles> how else do you think CYC works?
                 <stoopkid> 23.10.18 15:28:04<dmiles> how else did you think we compiled code that doesn't exist yet?"
23.10.18 15:43:43<stoopkid> wut..
23.10.18 15:44:05<dmiles> I am talking about waht to do with Holes that cant be yet filled
23.10.18 15:44:43<stoopkid> what about them
23.10.18 15:44:50<dmiles> where programs are still overly Partial
23.10.18 15:45:02<stoopkid> what do you want to happen with them
23.10.18 15:45:32<dmiles> what you dont want to happen with them if you are of the typical mindset
23.10.18 15:45:51<dmiles> that is still ship them
23.10.18 15:45:58<dmiles> and exprect them to work
23.10.18 15:46:22<stoopkid> so you want to ship the partial programs and expect them to work ?
23.10.18 15:46:29<dmiles> yes
23.10.18 15:46:45<stoopkid> i think other people want this too
23.10.18 15:46:50<stoopkid> they just don't expect it ;-)
23.10.18 15:47:28<stoopkid> ok now, define "work"
23.10.18 15:47:33<dmiles> of course i can only expect things to work within reason
23.10.18 15:48:11<stoopkid> (or define "working, within reason")
23.10.18 15:50:33<dmiles> this would be simular to in C++ where we used template vars .. in C++ template classes dont for exampole compile until the vars are known
23.10.18 15:51:43<dmiles> however in every possible case much of the template class when compilked (after the vars are filled) we would notice that some tings remain invvaraint accrosed various versions
23.10.18 15:52:38<dmiles> and we have a pretty good idea of Exactly what changes between versions
23.10.18 15:52:57<dmiles> (since after all we told it!)
23.10.18 15:54:09<dmiles> when i say versions here i mean between  foo<string> vs foo<int>
23.10.18 15:55:15<stoopkid> i'm having trouble thinking in terms of C++'s templates cause and Agda and such accomplish the same goal but not through exactly the same mechanism
23.10.18 15:55:23<stoopkid> i.e. our polymorphism is always parametric
23.10.18 15:56:16<dmiles> oh you can in C++ even make templates do such strange things
23.10.18 15:56:42<stoopkid> parametricity is not the "strange" property for a polymorphism to have :)
23.10.18 15:56:58<dmiles> usually this is what boxing templates do
23.10.18 15:57:36<stoopkid> in agda and such we even do it slightly differently than haskell does w/ its typeclasses
23.10.18 15:58:19<stoopkid> the equivalent of foo<string> vs foo<int> wouldn't be the polymorphic expression itself but the constraints you package into it which actually define the interface
23.10.18 15:58:23<dmiles> in ways i do consider Agda to be slightly one level better than Haskell
23.10.18 15:58:47<stoopkid> (or a whole hierarchy of levels! *ba dum ch*)
23.10.18 15:59:38<dmiles> hehe
23.10.18 16:00:05<stoopkid> so lemme give an example
23.10.18 16:01:02<stoopkid> https://github.com/sto0pkid/CategoryTheory/blob/master/FormalLanguage.agda#L42
23.10.18 16:01:29<stoopkid> in haskell all my code defining the constraints of this abstract data type would just be comments :-|
23.10.18 16:02:02<stoopkid> i.e. some programmer writes a comment "if you want it to have the correct behavior, it *should* do such and such"
23.10.18 16:02:32<dmiles> yeah .. this is godo expressitivity
23.10.18 16:02:42<dmiles> good
23.10.18 16:02:47<dmiles> or god
23.10.18 16:04:14<stoopkid> haskell can express that you need to provide a type and that you need to provide functions matching certain function types, but it can't express any deeper level of constraints than that
23.10.18 16:04:41<stoopkid> (nor is it equipped to express the proofs that things do/don't meet those constraints)
23.10.18 16:05:21<stoopkid> it's equipped to quantify over the class, but this isn't as effective it as it should be, in Agda and such you can quantify over "the class satisfying the constraints"
23.10.18 16:08:58<stoopkid> forall functions f  : A -> Nat, (forall x, 0 < x < 5), {...some code that only works for functions that only return values between 0 and 5...}
23.10.18 16:09:18<stoopkid> 0 < f(x) < 5 **
23.10.18 16:11:57<stoopkid> so for the purposes of what you're talking, this doesn't really get in the way of anything you're talking about doing
23.10.18 16:12:59<dmiles> *nod*
23.10.18 16:13:34<dmiles>  forall functions f  : A -> Nat, (forall x, 0 < x < s()), {...some code that only works for functions that only return values between 0 and 5...}
23.10.18 16:14:09<stoopkid> s() is stateful i'm assuming?
23.10.18 16:14:18<dmiles> here might be a case where  s() isnt known at design time
23.10.18 16:14:32<dmiles> better yes that s()  changes over time
23.10.18 16:14:43<dmiles> (statefull as you put it)
23.10.18 16:15:01<dmiles> we can *still* do this
23.10.18 16:15:24<dmiles> you jsut add somethig about s() in the defination of f
23.10.18 16:16:02<stoopkid> sure ok so when s() changes from 5 to 3, all of a sudden some of the definitions that satisfied the constraint when it was s() = 5 now don't satisfy the constraints, and code that might be written to work when s() = 3 no longer applies to the definitions for s() = 5
23.10.18 16:17:24<stoopkid> this is just a fact, regardless of what system we're using, and then the question is just "what to do about it", yes?
23.10.18 16:18:23<dmiles> what i am thinging of is "what to do about it" is a descision to be made by a external reseaoner at runtime
23.10.18 16:18:44* dmiles *nods* (so yes)
23.10.18 16:18:47<stoopkid> then we're thinking about the same here
                 <stoopkid> yea
23.10.18 16:19:35<stoopkid> a few specific criteria that i would personally impose: it shouldn't ever break existing proofs by substituting the new definition in place
23.10.18 16:19:39<dmiles> my thought has been there is never a safe time to give up on having a reasoner
23.10.18 16:20:33<stoopkid> i.e. the proofs built for s()=5 should still be available, they just won't apply to this new "context" where s()=3
23.10.18 16:22:15<stoopkid> well MLTT will ensure safety already, and then if you don't break that safety, then you can safely apply external reasoners to do other things :)
23.10.18 16:23:02<stoopkid> i.e. when s() changes from 5 to 3 and something breaks, MLTT is never unaware of the problem
23.10.18 16:23:32<dmiles> after quite a few million code contexts have beeen built arroudn the nats.. an ahah moment happens.. lets give "f" some ability to figure out how to track s() on its own and jsut accept that we can do it reasonably better
23.10.18 16:24:12<dmiles> (i mean that is what we do now as humans)
23.10.18 16:24:18<stoopkid> well, s() itself should exist externally to the MLTT
23.10.18 16:24:32<dmiles> yeah many cases s() might have to be
23.10.18 16:25:23<stoopkid> should be in all cases of stateful s()
23.10.18 16:25:51<dmiles> well i am saying possibley we havient even speced if s() was statefull or not
23.10.18 16:26:10<dmiles> it might be if we had ability to see.. that it returned  acosntant
23.10.18 16:26:18<dmiles> a constant
23.10.18 16:26:35<dmiles> but it can be assumed to be statefull
23.10.18 16:27:03<stoopkid> right anything that's not assumed to be pure stateless knowledge should be external to KR, in the realm of "action"
23.10.18 16:27:50<stoopkid> if you don't break MLTT's statelessness, then it will be able to enforce your constraints as you continue updating the KB
23.10.18 16:28:42<dmiles> the reasoning ran over MLTT only has to be done once as your after
23.10.18 16:29:09<stoopkid> your proofs from when s() = 5 will still work, for situations where s()=5, and MLTT will immediately tell you what's not working for s()=3, and then you could step into an interactive reasoning process to fix the proofs to work for s()=3 instead
23.10.18 16:29:13<dmiles> the reasoning ran over MLTT only has to be done once (as that is the main part you are after)
23.10.18 16:29:52<stoopkid> (even better: you could prove that a set of constraints parameterized by the value of s() will work at all s() values)
23.10.18 16:30:07<dmiles> later reasoning can be used on the statefull parts (as that is the main part i am after)
23.10.18 16:30:39<dmiles> " (even better:"  <- yes i dont want to discourge that!
23.10.18 16:31:09<dmiles> i jsut want you to have both the better and less better option
23.10.18 16:31:51<dmiles> that is allow you to gradually do this after ship
23.10.18 16:32:27<stoopkid> sure the two approaches could be used in conjunction: you prove that a set of constraints parameterized by the value of s() will work at all s() values and then you can freely modify the s() and the effects will propagate in a way that's correct by construction
23.10.18 16:33:05<dmiles> i assume you'd do it the better way (before ship)
23.10.18 16:33:34<stoopkid> but sure this isn't "as opposed to" having external stateful proof-search / constraint-expression systems
23.10.18 16:34:41<dmiles> for code gernatrs of the Logicmoo "kind" we want...
23.10.18 16:34:44<dmiles> forall functions f  : A -> Nat, (forall x, 0 < x < PROLOG_VAR), {...some code that only works for functions that only return values between 0 and 5...}
23.10.18 16:35:05<stoopkid> sure
23.10.18 16:35:28<dmiles> prolog var i will say bind  to s() later
23.10.18 16:36:03<dmiles> or perhasp to  3
23.10.18 16:36:06<stoopkid> code-generator is proof-search phase though, that's why it's totally ok in that context, pretty much anything goes during proof-search because the thing it's proof-searching over never breaks consistency!
23.10.18 16:36:38<stoopkid> i.e. logic didn't change, you just changed the thing you were trying to prove
23.10.18 16:37:11<dmiles> right the idea is that at runtime we are chanigng what we would have proved
23.10.18 16:38:24<dmiles> that is probably the best summary statment " at runtime we are chanigng what we would have proved"
23.10.18 16:39:21<stoopkid> so i think we're maybe a bit more on the same page now regarding how i see these kinds of activities fitting together in the context of using MLTT KR ?
23.10.18 16:39:47<dmiles> yes.. i dont see MLTT KR as a "stick in the mud" as i used to
23.10.18 16:40:17<dmiles> it was the toolchains that are the "stick in the mud"
23.10.18 16:40:36<stoopkid> hehe, yea like i said i get the feeling that your main gripe is really the "do everything as pure total functional programming" paradigm
23.10.18 16:41:37<dmiles> "stick in the mud" = "toilet plunger left in bowl"
23.10.18 16:41:56<stoopkid> i change this to basically "do your *KR* in pure dependently typed total functional programming"
23.10.18 16:42:51<dmiles> i even prefer the users do that for me .. but i can only request
23.10.18 16:43:04<dmiles> request: "do your *KR* in pure dependently typed total functional programming"
23.10.18 16:43:30<stoopkid> sure
23.10.18 16:44:56<stoopkid> i'm not saying people will necessarily do it, i'm just saying it's a good way to do it
23.10.18 16:46:01<dmiles> well the question has been "so what changes have to be made?" i think only to the backend
23.10.18 16:47:15<dmiles> that the backend can stopworld and see if it is ready to  "proved what we couldnt have proved at the start"
23.10.18 16:48:13<stoopkid> good question, i have much less experience with automated proof-search than i do with proof-representation and manual proof-search so my insight as to what specific steps need to be taken towards AI-level proof-search is limited
23.10.18 16:48:15<dmiles> like you i dont think just not proving stuff is an option
23.10.18 16:48:52<stoopkid> i also have much less experience with user-interface design
23.10.18 16:49:03<dmiles> btw me being an AI person is only a coincidence
23.10.18 16:49:38<dmiles> (i never thought about this as being related to AI)
23.10.18 16:50:39<dmiles> i mostly think this as being "quit making shopping cart website.. make a  wenbsite that gives away custumizable shopping cart websites"
23.10.18 16:51:24<stoopkid> we're on the same page there, it's already well-equipped for that purpose
23.10.18 16:51:43<stoopkid> in fact this is almost the exact reason i got into MLTT in the first place
23.10.18 16:52:06<dmiles> proof-search is just another commodity once you get into it.. but i've never buy  a SAT solver (a turd) for this
23.10.18 16:52:48<stoopkid> so there's a conundrum with customizability
23.10.18 16:52:51<dmiles>  it does way less than SNARK, E, etc
23.10.18 16:53:49<dmiles> no customimizabilty.. we'd probly just build Ebay and make people ues that
23.10.18 16:54:20<dmiles> later on let them change their background color
23.10.18 16:54:35<stoopkid> there's limits to what's customizable usually because there's a tradeoff between "do we maximize safety by limiting the customizability as much as possible" vs. "do we maximize freedom by giving them access to arbitrary programming of the system, even if this is just giving them rope to hang themselves"
23.10.18 16:55:02<stoopkid> with something like MLTT you no longer have to make such a tradeoff
23.10.18 16:55:43<stoopkid> because you can put arbitrarily complex, verifiable constraints into your abstract data-type definition is
23.10.18 16:57:01<dmiles> also i found that the many apps i write have a differnt set of requiremnts i am willing to work towards
23.10.18 16:57:25<dmiles> even though they should have all the same
23.10.18 16:57:31<stoopkid> which is effectively what a customizable platform is, it places boundaries on a class of possible manifestations of itself, i.e. its an abstract data-type along with an implementation that allows you to move between instances (customize it, i.e. change background color, etc..)
23.10.18 16:58:51<dmiles> what uius great when yuou see peopel using Ebay to jsut tell jokes or as a Myspace (they dont sell products)
23.10.18 16:59:05<stoopkid> so, here's a q: why can't we crowd-source code
23.10.18 16:59:37<dmiles> google created once a platform for this it was called "google-pipes"
23.10.18 16:59:50<dmiles> crowd-source code
23.10.18 17:00:16<dmiles> oh it was "yahoo-pipes" and google's had a diffrernt name
23.10.18 17:01:12<dmiles> the idea was that if your goal was to write "hello world" you dpeced out that each new programmer needed ot type a letter "h"  next progerammer "e"
23.10.18 17:01:38<stoopkid> but i mean, do you see google actually letting people extend *google's* platform this way ?
23.10.18 17:01:43<dmiles> the design language was a todo list
23.10.18 17:02:04<stoopkid> do you see wikipedia for example crowd-sourcing the actual algorithms that run it ?
23.10.18 17:02:05<dmiles> well what Cyc is, is the same product fo rhte NSA
23.10.18 17:02:09<stoopkid> in the same way that you can make a wikipedia edit
23.10.18 17:02:40<dmiles> is that it deduceces the work that has to be done
23.10.18 17:02:46<dmiles> such as investigatory work
23.10.18 17:03:09<dmiles> and then they come back and put the answers into the KB
23.10.18 17:03:35<dmiles> this lets cyc move on and orchstatre the next actions
23.10.18 17:03:55<dmiles> programming can be done the same way
23.10.18 17:04:40<dmiles> when comparing CYC to Facebook .. some NSA officians perfered Facebook internal to blog about investiagations
                 <stoopkid> that's a different objective even if it could be used in the context
23.10.18 17:05:09<dmiles> and other investigators say "oh wow .. that relates to my invistagation!"
23.10.18 17:05:40<dmiles> having CYC decide what appears in the various feeds also helps
23.10.18 17:05:43<stoopkid> the point is that with expressive logical types as provided by something like MLTT, we can maintain coherence even while providing arbitrarily high degrees of customizability
23.10.18 17:05:54<stoopkid> without having an "automated programmer"
23.10.18 17:06:21<dmiles> well the goal sometimes is to make tasks so small and easy we can assign  "automated programmers" to
23.10.18 17:06:38<stoopkid> and then an automated programmer would just be a bonus (relative to the objective of just ensuring coherence is maintained in the face of customizability)
23.10.18 17:06:52<stoopkid> yes sometimes
23.10.18 17:06:56<dmiles> often  an  "automated programmer" is used to translate the source code to x86
23.10.18 17:07:05<stoopkid> i'm not saying it's not i'm just saying it's a distinct goal
23.10.18 17:07:12<dmiles> yep
23.10.18 17:07:32<stoopkid> i'm very unix-philosophy about this stuff :)
23.10.18 17:08:33<dmiles> btw i love and want code ot be written in wikipedia style
23.10.18 17:08:52<dmiles> you saw i had a code bounty for that in logicmoo
23.10.18 17:09:39<dmiles> i find that is more important than the code of logicmoo itslef
23.10.18 17:11:04<dmiles> https://docs.google.com/document/d/1XCDnWMjNh4y2Um_1B-HE4x5Q34oxHRxBl-Oy9eNUzTI/edit
23.10.18 17:11:18<dmiles> "Online IDE Tracks: For multiple people trying/editing the server"
23.10.18 17:11:37<stoopkid> so the way you would apply MLTT to that purpose is that it provides the complex abstract data type definitions which enforce the requirements that any code admitted to the system must satisfy, and even provides its own scripting language right out of the bag (but does not preclude using / building other scripting languages to work with it; it can even verify them for you!)
23.10.18 17:12:15<stoopkid> so a notable example of this would be: delivering javascript to run in somebody's browser
23.10.18 17:13:27<stoopkid> you have a two-fold task: ensuring first that the design of some code is actually safe/coherent, second that the actual javascript that implements it is actually safe to run in browser X version V on platform Y
23.10.18 17:15:25<dmiles> yeah
23.10.18 17:15:36<stoopkid> (note that there are no assumptions that we have perfect ability to live up to the task, because we have incomplete knowledge of the bugs in various browser versions on different platforms, so the code-safety proofs are effectively relative to scientific data you must be gathering about these different browser instances)
23.10.18 17:17:58<stoopkid> but if you're at least able to verify that code in some given *standard* for javascript satisfies the abstract requirements (independent of browser peculiarities) and only admit this code, this is a good start
23.10.18 17:19:00<stoopkid> that might seem like "a lot" but it's exactly the "whole lot" that people already have to do, without the help of something like this
23.10.18 17:19:57<dmiles> yeah.. it is not naive to think of such a system.. the naive part was not alredy building this system
23.10.18 17:21:49<stoopkid> well...
23.10.18 17:22:10<stoopkid> i've been working quite a bit on the constraint-enforcement / representation aspect at least? :)
23.10.18 17:22:11<dmiles> we want proofs of code safety and also proofs that certain code has to be written
23.10.18 17:22:36<stoopkid> sure
23.10.18 17:23:02<stoopkid> arguably the proof of that is self-evident, agda knows immediately when something is not completed
23.10.18 17:23:38<stoopkid> "proof of code needing to be written" is basically just a proposition with a missing proof
23.10.18 17:23:52<stoopkid> (or disproof)
23.10.18 17:23:58<dmiles> oh i meant when we  do things like assign "human programmers"
23.10.18 17:24:11<stoopkid> you mean like scheduling
23.10.18 17:24:20<dmiles> but yeah.. one can lets even Agda decide that
23.10.18 17:25:29<dmiles> sometimes program designs can be deduced
23.10.18 17:25:42<stoopkid> the KR can tell you if some constraints have been satisfied, but it doesn't decide your priorities (unless you tell it what they are)
23.10.18 17:25:47<dmiles> (well sub programs anyways)
23.10.18 17:26:10<stoopkid> sure
23.10.18 17:26:35<stoopkid> Agda can write lots of programs, and it's "hardly trying"
23.10.18 17:27:37<stoopkid> it's just proof-search: search "exists function f : A -> B, such that f satisfies such and such criteria"
23.10.18 17:28:10<stoopkid> if a proof is found, it will contain the function along with constructive proof that it satisfies the criteria
23.10.18 17:28:25<stoopkid> it will be directly executable, and will match specs
23.10.18 17:28:57<stoopkid> you could hypothetically even do more fancy: describe a model of Turing-machines
23.10.18 17:29:08<stoopkid> then ask for a Turing-machine that satisfies the critiera
23.10.18 17:32:15<stoopkid> say you want to compile a function f : A -> B to ASM, describe a model of ASM syntax/semantics in Agda, proof-search for smallest ASM program you can find with identical I/O relation to the function
23.10.18 17:34:52<stoopkid> that's maybe complex though, so how do we handle that in the real world? intermediate representations
23.10.18 17:35:28<dmiles> intermediate representations allow us to build things we dont even know what they are.. we only can describe what we though we saw
23.10.18 17:36:38<stoopkid> well, i mean like you might compile it first to an internal representation of Haskell then to an internal representation of C++ then to ASM
23.10.18 17:37:18<stoopkid> or other representations that capture the same structural information as you're getting by compiling through Haskell/C++
23.10.18 17:37:28<dmiles> ah i was assumeing intermediate KR languages to allow more metaprograming :P
23.10.18 17:38:46<stoopkid> ok so wrt metaprogramming: we can represent ASM in Agda right?
23.10.18 17:39:00<dmiles> yes
23.10.18 17:39:28<stoopkid> so what happens when we have it examine its own executable file
23.10.18 17:39:48<dmiles> when we see the same structures all over the place.. we convert that to intermentate macros
23.10.18 17:40:55<stoopkid> sure, something reasoning over an Agda representation of an ASM file could prove some "structural similarity"/"macro expansion" theorem and then apply it to generate a higher-level representation
23.10.18 17:41:12<dmiles> so that way (at least me) is i started to reason over the idioms instead
23.10.18 17:42:00<dmiles> (the names of the macros that represented the idioms)
23.10.18 17:42:39<stoopkid> sure
23.10.18 17:43:44<stoopkid> so, Agda can hyptothetically do this to its own implementation, though i haven't seen anybody do it
23.10.18 17:44:06<dmiles> by real-world, do you mean lagacy applications?
23.10.18 17:44:16<stoopkid> it won't be able to prove its own consistency unless inconsistent, but... what else might it be able to do with a self-representation?
23.10.18 17:45:13<dmiles> " it won't be able to prove its own consistency unless inconsistent"  <- one day i might belive that.. but not this decade
23.10.18 17:45:32<stoopkid> it can certainly "recompile itself" (even sometimes with guarantees that it won't lose consistency, under the assumption that it has consistency in the first place)
23.10.18 17:46:05<stoopkid> take any small piece of code that implements the proof-system
23.10.18 17:46:57<stoopkid> Agda can certainly find equivalent ways to implement any single operation
23.10.18 17:47:01<stoopkid> and prove that they're equivalent
23.10.18 17:47:31<stoopkid> and prove that the whole program is equivalent when the equivalent operation is substituted in place of the original one
23.10.18 17:48:45<stoopkid> so if you, outside of Agda, assume that Agda is consistent, then you can get a guarantee from Agda that it will still be consistent after some given self-recompilation operation
23.10.18 17:49:42<dmiles> from apractical standpoint you agree with me :O
23.10.18 17:50:33<dmiles> about  " it won't be able to prove its own consistency unless inconsistent" being imporactical
23.10.18 17:51:04<dmiles> since "you can get a guarantee from Agda that it will still be consistent "   is being pactical
23.10.18 17:52:11<dmiles> well what we know was statments like " it won't be able to prove its own consistency unless inconsistent"  are irealivant
23.10.18 17:52:46<dmiles> and have done people way more harn than ever any good
23.10.18 17:52:54<dmiles> harm
23.10.18 17:53:12<stoopkid> i wouldn't say irrelevant, but there are indeed more questions/statements and some seem to be able to be answered in the positive rather than the negative
23.10.18 17:54:15<stoopkid> in this case we're noticing that a logic that can represent itself, with godel statements, can't prove its own implementation consistency, but *can* potentially prove the equivalence between its own implementation and another implementation
23.10.18 17:55:09<dmiles> ah.. good ("*can* potentially prove the equivalence between its own implementation and another implementation")
23.10.18 17:55:39<stoopkid> we can even ask: how many things can it prove that we might expect should go into a consistency proof? and try to narrow down in a more precise & practical sense where it exactly it fails
23.10.18 17:56:24<dmiles> yeah. btw this is how computer designs code.. it compares its design with a set of designs that it was told are good
23.10.18 17:57:09<dmiles> and actualy proves that the design it created was structuruialyl simular to a design the humans had left in it
23.10.18 17:58:16<dmiles> anyways go on
23.10.18 18:00:38<stoopkid> i'm just saying that MLTT is capable of self-representation and even to some extent proof-about-self (under very few external assumptions), so it can already hypothetically be used as its own meta-logic by just doing exactly what godel did, and then the question is just: ok what do we want to do with its knowledge about itself, which is out of scope of MLTT and is something for the reasoner to decide
23.10.18 18:03:46<stoopkid> you could set it out to proof-search for the shortest version of its ASM implementation that it can prove equivalent to the original
23.10.18 18:04:56<stoopkid> more interesting: for at least some class of actual modifications that render it inequivalent, you will be able to prove what the effect is
23.10.18 18:05:18<dmiles> what this in line with is "proof-search" or "search" in general can do just about everything
23.10.18 18:05:57<stoopkid> there are very few inherent limitations especially when you combine it with arbitrary non-determinism
23.10.18 18:06:14<stoopkid> meaning you/something else can arbitrarily change the search-path at any given point
23.10.18 18:07:07<dmiles> which allows self corrections
23.10.18 18:07:54<dmiles> well as long as you give rules about how to guide that correction
23.10.18 18:08:19<stoopkid> one interesting question here is: given a self-representation, to what extent can it prove things about its computational complexity
23.10.18 18:08:48<stoopkid> one particular question: can we make an Agda program that is a self-proof of its own computational complexity
23.10.18 18:09:00<dmiles> Erisko was specifically an application that primary job was to infernce about the complexity pitfalls it needed to avoid
23.10.18 18:10:17<stoopkid> we would hypothetically achieve this by making that Agda program refer to its own Godel number, in a Godelization that directly matches the actual implementation of the Agda
23.10.18 18:11:01<stoopkid> then the fact that it's talking about itself rests purely on the assumption of soundness and that the self-representation is accurate
23.10.18 18:12:04<stoopkid> (just as in Godel's proofs)
23.10.18 18:13:17<dmiles> give me an example of lack of soundness in this case.. (i agree with you but need help visualizing)
23.10.18 18:13:42<stoopkid> an example of lack of soundness would be like if 2 + 2 = 5, or the empty set is inhabited
23.10.18 18:14:01<stoopkid> it could hypothetically prove these things without being inconsistent, but it would be unsound because these things aren't true in reality
23.10.18 18:14:23<stoopkid> (more precisely: they aren't true in the intended interpretation of the objects/relations in question)
23.10.18 18:15:25<stoopkid> in other words: we could always make the argument that the self-representation doesn't match reality
23.10.18 18:16:11<stoopkid> a prerequisite for being able to say that it does is to assume that the system is sound in the first place, i.e. it only proves things that actually match reality
23.10.18 18:16:43<stoopkid> but then on top of that you could still be faulty in your actual specifications of the self-representation
23.10.18 18:16:55<dmiles> its not only "self-representation doesn't match reality".. its taht all represeantions are underspecificed compressions
23.10.18 18:17:10<dmiles> vague compressions
23.10.18 18:17:21<stoopkid> well yes but that's sort of a different matter
23.10.18 18:17:58<dmiles> which is why (barely related) that there can never be such thing as a first order term
23.10.18 18:17:59<stoopkid> we can assume we have some level of abstraction where we can precisely & finitely specify the behavior, *at* that level of abstraction
23.10.18 18:18:33<stoopkid> or at least, we can work with things under the assumption that they fit that described behavior, even if they don't
23.10.18 18:18:46<dmiles> my point should be that "self-" in "self-representation" is not the problem
23.10.18 18:19:03<stoopkid> well, except when it is :)
23.10.18 18:19:29<dmiles> i see.. well yes
23.10.18 18:19:54<dmiles> when the system is doing sometiong that is more specific than what it represents that is a problem
23.10.18 18:21:05<dmiles> the repair is often making sure the system is always no more than its represenation
23.10.18 18:21:20<stoopkid> right so we might be able to self-represent in terms of an abstract description of ASM, but this won't necessarily take into account hardware failure right?
23.10.18 18:21:54<dmiles> right .. that is an example
23.10.18 18:22:40<dmiles> (the system represenation is not aware of hardware failure.. the represenastion might neglect that)
23.10.18 18:22:55<stoopkid> but at least at the level of abstraction of ASM, all the results we prove about the ASM at that level of abstraction actually hold true whenever we actually have a situation that conforms to the description that define what it means to have "that particular level of abstraction"
23.10.18 18:23:26<dmiles> yes.. well said
23.10.18 18:24:14<stoopkid> so that's what i mean wrt soundness, "the results about ASM are true whenever you're actually implementing the ASM correctly"
23.10.18 18:24:34<dmiles> the most important detail that made cyc posisble if for it to infer how above or lower is "that particular level of abstraction" from this "other particular level of abstraction"... did the humans think that the abstraction level was the same?
23.10.18 18:25:00<stoopkid> it's not a linear hierarchy
23.10.18 18:25:31<stoopkid> things that are red is an abstraction of things that are green and red, but so is things that are green, but neither is an abstraction of the other
23.10.18 18:26:59<dmiles> these "shapes of incompatbilities" are important to have axiomitized
23.10.18 18:27:14<stoopkid> that comes for free
23.10.18 18:27:30<stoopkid> that's just math, abstract algebra
23.10.18 18:27:47<dmiles> axiomitized into a KR that lets as "at times" squeeeze at some univalience
23.10.18 18:27:48<stoopkid> available pretty much directly from MLTT axioms
23.10.18 18:28:34<dmiles> and even nicer when we can offer up soem univalience for free
23.10.18 18:28:48<stoopkid> well you'll love HoTT then? :P
23.10.18 18:28:52<dmiles> (offer it up to the search)
23.10.18 18:29:09<dmiles> HoTT sounds too inconsistent
23.10.18 18:29:17<stoopkid> not at all
23.10.18 18:29:31<stoopkid> it's literally MLTT + univalence :P
23.10.18 18:30:00<dmiles> *we* (humans) can offer up soem univalience
23.10.18 18:30:26<stoopkid> note also: even though it has this very "extreme" take on structural identity, HoTT is still capable of self-representing like i described you can do in MLTT
23.10.18 18:30:49<dmiles> thoughj i did say we should be able to write rules to let a system deduce it (but this is not to be taken lightly)
23.10.18 18:30:53<stoopkid> and in that context, the univalence is a bonus
23.10.18 18:30:57<stoopkid> not a detriment
23.10.18 18:31:22<dmiles> i noticed in your link earlier you have offered some up
23.10.18 18:31:51<stoopkid> univalence only "gets in the way of anything" if you think you need to prove things about intensional properties of objects *without* doing so indirectly via an internal self-Godelization
23.10.18 18:32:16<dmiles> "equiv"
23.10.18 18:32:48<dmiles> right i agree
23.10.18 18:33:38<HMCf>  stoopkid> well you'll love HoTT then? :P
23.10.18 18:33:48<dmiles> https://github.com/sto0pkid/CategoryTheory/blob/master/FormalLanguage.agda#L45
23.10.18 18:34:06<HMCf> so we're all ready to learn redtt yet? :-)
23.10.18 18:34:46<dmiles> i was wondering it that line asserts that expression encapsulates the meaning
23.10.18 18:35:12<stoopkid> HMCf: dmiles: yes
23.10.18 18:35:35<dmiles> ineed to play with the new version og the agda2atp first
23.10.18 18:36:04<dmiles> to ensur ethat i understand if the translation is meaning perse4rving
23.10.18 18:36:16<dmiles> i hope that it is
23.10.18 18:36:32<dmiles> (that is that there is not some hidden part of the agda code)
23.10.18 18:36:33<stoopkid> if it's not then it failed?
23.10.18 18:36:57<stoopkid> i would generally assume there are hidden gotchas with agda
23.10.18 18:37:36<dmiles> well i mean if some hidden part of the agda code cannot be translated to the TPTP KR than it would be bad that the TPTP wsnt expersssive enogh
23.10.18 18:37:48<stoopkid> ah
23.10.18 18:38:08<stoopkid> no idea there idk how expressive TPTP KR actually is
23.10.18 18:39:09<stoopkid> but ofc whatever the case there will surely be ways TPTP could be used as a low-level syntactic representation even if not a high-level semantic representation
23.10.18 18:39:29<dmiles> though i am not expert enough to know if  the guys at https://github.com/asr/apia/blob/master/README.md wante dto untilize a full transaltion or nopt
23.10.18 18:40:33<stoopkid> i would recommend just experimenting with actually writing constraint-sets and a couple proofs in some MLTT implementation so that you see how it all fits together to achieve the things i've described
23.10.18 18:40:40<dmiles> Apia is a Haskell program for proving first-order theorems written in Agda using automatic theorem provers for first-order logic (ATPs). Before calling the ATPs, the Agda formulae are translated into TPTP language.
23.10.18 18:41:34<dmiles> i wonder if it means that only Agda programs with this intent inmind
23.10.18 18:41:38<stoopkid> i.e. you should *know* that my 'equiv' actually encapsulates the meaning, along with how, prior to considering reasoning over the representation or automatically translating the KR into something else (or from something else into the MLTT KR)
23.10.18 18:42:48<stoopkid> or i mean, you should know that it *can* and that if it didn't then that was just a failure on my part to encode the right meaning for that word
23.10.18 18:43:02<dmiles> fwd/bkd rules of TPTP make  "low-level syntactic representation" == "high-level semantic representation"
23.10.18 18:43:59<dmiles> (the == there is how my TPTP compilers work)
23.10.18 18:44:01<stoopkid> sure so this is like how prolog can implement MLTT but is not itself doing an equivalent job to what MLTT does
23.10.18 18:44:25<stoopkid> just like how ASM can implement MLTT but is not itself doing an equivalent job to what MLTT does
23.10.18 18:44:33<dmiles> *nod* heh at least you knew there is a differnc e:)
23.10.18 18:44:59<dmiles> that when a person wants bothj from prolog it is because they coded it
23.10.18 18:45:28<dmiles> (nothing came for free)
23.10.18 18:45:33<stoopkid> sure
23.10.18 18:45:45<dmiles> in other words i want to see if it is good to spend time coding it
23.10.18 18:46:21<dmiles> PAKCS did so i dont haveas much keyboard presses
23.10.18 18:47:42<dmiles> i spent about a week reverse engineering PAKCS .. i am blown away with how little VM modications they had to do
23.10.18 18:48:17<dmiles> which makes me less skeptical now
23.10.18 18:48:52<stoopkid> so i should probably point out another use-case here: we noted about MLTT KR representing itself and having at least some capacity for self-proof (under very modest assumptions of soundness & accuracy of self-representation), now imagine the "external reasoner"; it can do the same thing, i.e. the reasoner can use the MLTT KR to represent the algorithms powering the reasoner
23.10.18 18:49:35<stoopkid> fully generalizing this: you can equate "the reasoner" with your hardware
23.10.18 18:49:46<dmiles> that is my hope
23.10.18 18:50:01<dmiles> that i can replace the ahrdware with my reasoner
23.10.18 18:50:48<dmiles> that i can replace the hardware with my reasoner immaginary kripke world
23.10.18 18:51:14<dmiles> the way i was able to replace the lisp compilers machine
23.10.18 18:51:39<stoopkid> well i'm thinking more like: make the hardware reason about itself by way of godelization
23.10.18 18:52:24<stoopkid> i.e. the hardware is engaging in a reasoning process over MLTT that's representing an internal godelization of the structure/behavior of the hardware
23.10.18 19:03:33<stoopkid> or i guess i see what you mean
23.10.18 19:04:18<stoopkid> like if the reasoner/KB was distributed between 5 servers/agents, the "mind" of the machine is just kind of freely floating and proving things about the hardware rather than the hardware proving stuff about itself
23.10.18 19:08:37<dmiles> yes it is a virtualization
23.10.18 19:09:40<dmiles> that might *sometimes8 even do processing without ever needing to drop to emulating ASM
23.10.18 19:10:03<dmiles> but when it needs to .. nothing stops that
23.10.18 19:10:37<dmiles> and as you said it can be distributed much easier than if it was pysical
23.10.18 19:11:42<dmiles> "needing to drop to emulating ASM" the idea it only drops to the leat fixed point
23.10.18 19:12:46<dmiles> MLTT is designed to make it not forced in x86 afaict
23.10.18 19:14:52<dmiles> MOO of logicmoo is designed to let multipek inferencers at once pour over the code
23.10.18 19:15:09<dmiles> making baby edits
23.10.18 19:15:34<dmiles> pour over the KB making small updates
23.10.18 19:16:39<stoopkid> so here's what i would want to see for MLTT in this regard: an MLTT implementation that has at least one "simple" abstract godelization of itself
                 <dmiles> for example dead code elimination is done by the dead code elinator
23.10.18 19:16:48<dmiles> + agent
23.10.18 19:17:37<dmiles> i as well
23.10.18 19:17:39<stoopkid> for example Godel used a fairly straightforward & abstract godelization of his system, in terms of arithmetic, but you could hypothetically get even more abstract, in terms of generic abstract data structures
23.10.18 19:18:42<stoopkid> this is one of the appealing things about doing it over RDF: the abstract self-representation would be simple
23.10.18 19:19:01<stoopkid> or if not RDF at least triples or something similarly "simple"
23.10.18 19:19:35<dmiles> i studied your idea for Jimple as part of the SOOT project
23.10.18 19:19:47<stoopkid> since it's an abstract specification, it can be "freely floating" across platforms while still serving as a baseline for logical comparison
23.10.18 19:19:56<HMCf> dmiles: keep in mind that pakcs is *not* doing the mltt dance
23.10.18 19:20:58<HMCf> (and really neither is apia, which just translates constraints for a single, specific hole at a time... it is *not* a backend...)
23.10.18 19:22:07<dmiles>  Jimple  is a psecial ASM that we could do reasning over
23.10.18 19:23:11<stoopkid> HMCf: do you know anything along the lines of what i was describing wrt self-proof-of-complexity via godelization?
23.10.18 19:23:31<dmiles> Jimple is typed, has a concrete syntax and is based on three-address code.
23.10.18 19:24:46<dmiles> https://en.wikipedia.org/wiki/Soot_(software)
23.10.18 19:25:40<dmiles> the idea was we could build ground up
23.10.18 19:25:56<dmiles> (rather than top down optimizers)
23.10.18 19:26:59<dmiles> HMCf: apia is a program that translates Agda to my backend
23.10.18 19:28:28<dmiles> apia doesnt itself provide on.. I do that
23.10.18 19:28:40<dmiles> apia doesnt itself provide one.. it requires that I do that
23.10.18 19:29:34<dmiles> ut it transates it to my specification langauge at least
23.10.18 19:30:40<dmiles> not to Prolog but to the language i implemented in prolog two decades ago
                 <HMCf> stoopkid: not really
23.10.18 19:30:54<HMCf> dmiles: no, that is not what it does
23.10.18 19:31:22<dmiles> ok.. what does it do then?
23.10.18 19:31:23<stoopkid> so you're not aware of any metatheoretic results that would prohibit the possibility of something like that?
23.10.18 19:32:10<dmiles> HMCf: are you saying it only tralates the cosntraint parts of the Agda code to my language?
23.10.18 19:40:48<dmiles> HMCf: Apia had nothing to do with Holes as far as i know
23.10.18 19:43:21<HMCf> stoopkid: much the opposite
23.10.18 19:43:53<HMCf> dmiles: yes, and only a subset, at that
23.10.18 19:44:19<HMCf> postulates are a kind of hole
23.10.18 19:46:21<dmiles> at least in anbtoher project someone converted all of MLTT  https://gl.mathhub.info/MMT/LATIN/tree/f3328350523b244a00be6c9045c2812db91956c1/export/lf-tptp/content/http..latin.omdoc.org/type_theories
23.10.18 19:46:46<dmiles> axiomatized
23.10.18 19:47:18<stoopkid> i guess chaitin's incompleteness is an example of this
23.10.18 19:47:38<stoopkid> or, berry's paradox i mean
23.10.18 19:59:30<stoopkid> dmiles: nice
23.10.18 20:17:27<dmiles> i been having to clean off the URIs "http://latin.omdoc.org/type_theories?" a little since otherwise it is kind oif creazy for me to understand it
23.10.18 20:20:53<stoopkid> h'ok i've got redtt installed
23.10.18 20:22:22<stoopkid> do they have like an emacs mode or something
23.10.18 20:39:13<HMCf> stoopkid: i use vi
23.10.18 20:39:16<HMCf> but yes
23.10.18 20:39:34<stoopkid> where can i find how to set that up
23.10.18 21:07:24<stoopkid> nvm found it
23.10.18 21:12:00<HMCf> the vi has an installer script
23.10.18 22:24:56<stoopkid> after screwing with the vimrc it all works, yay
23.10.18 22:42:55<HMCf> cool
23.10.18 22:45:42<HMCf> stoopkid: any questions on the syntax yet?
23.10.18 22:46:15<stoopkid> just trying to get acquainted with the vim mode
23.10.18 22:46:41<stoopkid> is there a command to normalize an expression?
23.10.18 22:50:49<HMCf> a vim command? no you'd have to script that yourself
23.10.18 22:50:50<HMCf> but
23.10.18 22:51:41<HMCf> you can put a "meta <: print normalize foo :>" and use the partial check w/ your cursor on that line
23.10.18 22:55:29<HMCf> brb
23.10.18 23:16:35<stoopkid> aha
23.10.18 23:44:11<HMCf> back, sry
23.10.18 23:44:20<HMCf> longer than I expected, heh
23.10.18 23:44:32<stoopkid> np
23.10.18 23:46:34<stoopkid> all the syntax for the standard MLTT stuff makes sense to me so far
23.10.18 23:47:00<stoopkid> the path types looks like it'll be similar to cubicaltt
23.10.18 23:49:36<HMCf> yes
23.10.18 23:51:32<stoopkid> https://github.com/RedPRL/redtt/blob/master/library/data/nat.red
23.10.18 23:51:37<stoopkid> wow these are some short proofs
23.10.18 23:53:52<stoopkid> not sure i understand this definition:
23.10.18 23:53:53<stoopkid> https://github.com/RedPRL/redtt/blob/master/library/data/nat.red#L16
23.10.18 23:56:56<stoopkid> i understand ofc that it's "supposed" to be saying "in the case of `plus (suc m) n`, return `suc (plus m n)`"
23.10.18 23:57:25<stoopkid> but i dont understand exactly how this "(m → plus/m/n)" is supposed to be representing that
23.10.18 23:59:11<HMCf> heh, i figured that would be the first question ;-)
24.10.18 00:00:00<HMCf> so recursion in redtt is a little tricky
24.10.18 00:00:15<HMCf> this is a form of split tree recursion
24.10.18 00:01:01<HMCf> the eliminator is applied recursively to m and the result becomes plus/m/n
24.10.18 00:02:01<HMCf> follow?
24.10.18 00:04:18<stoopkid> yea; it's a bit confusing though, it'll take me a while to get used to this syntax for it
24.10.18 00:04:27<HMCf> yes
24.10.18 00:04:41<HMCf> but it ends up being very convenient in a lot of ways ;-)
24.10.18 00:05:33<HMCf> it took me a while to become convinced that it was worth it... but it really is, heh
24.10.18 00:23:21<stoopkid> alright i'm getting the hang of it
24.10.18 00:48:37<stoopkid> what's the equivalent of one of cubicaltt's negated interval variables in redtt?
24.10.18 00:49:06<stoopkid> ex. in cubicaltt you can do something like:
24.10.18 00:49:08<stoopkid> sym (A : U) (a b : A) (p : Path A a b) : Path A b a = <i> p @ -i
24.10.18 01:23:58<HMCf> well, heh, afaik there is not a directly corresponding explicit syntax
24.10.18 01:25:10<HMCf> the tt is a generalization of cubical, "synthetic extension types"
24.10.18 01:27:41<HMCf> http://www.math.jhu.edu/~eriehl/synthetic.pdf
24.10.18 01:28:45<HMCf> page 127, remark 3.1, 3.2
24.10.18 01:28:55<HMCf> *remarks
24.10.18 01:34:21<HMCf> Path is defined as an extension in library/prelude/path.red
24.10.18 01:35:26<stoopkid> so the [i] A [ ... ] is a syntax for these "extension types" ?
24.10.18 01:38:13<HMCf> yes, you can think of it like defining a boundary selector, to define how things can be stuck together at higher dimensions
24.10.18 01:39:10<HMCf> "path" is just one of the trivial cases ;-)
24.10.18 01:40:18<HMCf> I'm still wrapping my head around some of the implications for what hcom means wrt this, heh
24.10.18 01:40:59<stoopkid> so what would be the redtt approach to proving symmetry
24.10.18 01:41:33<HMCf> scroll down in path.red, heh
24.10.18 01:41:36<HMCf> ;-)
24.10.18 01:42:43<stoopkid> hrm..
24.10.18 01:43:33<stoopkid> path.red doesn't import anything so i assume this "comp" must be a built-in?
24.10.18 01:49:00<HMCf> yes, it is a form of hcom, from what i understand it is a "corresponding generalization" of hcom for extensions
24.10.18 02:07:59<HMCf> let me elborate on that
24.10.18 02:09:48<HMCf> i think of it like "hcom without the h"... as in it does the same compositons, but instead of doing them within a type (homogeneous) it composes any way that the extensions can be "fit together"
24.10.18 02:10:59<HMCf> does that make any sense?
24.10.18 02:12:37<stoopkid> not really i'm still trying to wrap my head around what kan compositions are doing
24.10.18 02:14:11<HMCf> heh, me too ;-)
24.10.18 11:20:59<editable-dog>stoopkid: old vps will be deleted after christmas. i think ive backed up everything
24.10.18 16:26:39<stoopkid> editable-dog: alright
24.10.18 16:26:57<stoopkid> so i guess i'll need to think a bit on what to use for the next iteration of the wiki
24.10.18 16:28:02<stoopkid> dmiles: here's a quine in Agda, as a baby-step towards the kind of self-representation we were discussing: https://pastebin.com/3nBw5NdA
24.10.18 16:28:40<stoopkid> you'd need to install agda and actually compile & run this in order to verify that though
24.10.18 16:42:37<HMCf> cute, did you write that?
24.10.18 16:55:07<stoopkid> HMCf: yea
24.10.18 16:55:54* stoopkid made it more difficult for himself than it needed to be cause he handled the escaping/unescaping in a weird way
24.10.18 16:57:25<dmiles> in a language like Prolog that can only have relations (no functions) the result iof evaluation is  defined as every object returning itself
24.10.18 16:58:05<dmiles> so that code when evaluted returns the same code
24.10.18 16:59:31<dmiles> this prevents Prolgo from douing arithemetics though
24.10.18 16:59:53<dmiles> this prevents Prolog from doing arithemetic
24.10.18 17:01:55<dmiles> since 1+1 = 2. is not true or even possible in prolog
24.10.18 17:03:35<stoopkid> sounds like a major limitation
24.10.18 17:03:43<stoopkid> but luckily it also sounds inaccurate :P
24.10.18 17:04:15<dmiles> in what way inaccurate?
24.10.18 17:05:49<editable-dog> ?- 2 is 1 + 1.
24.10.18 17:05:51<editable-dog>true.
24.10.18 17:05:52<stoopkid> im pretty sure prolog can express rules that would allow it to prove an equivalent statement to 1 + 1 = 2
24.10.18 17:05:54<stoopkid> ^
24.10.18 17:06:07<dmiles> in Prolog can see *if*  1+1 is 2 but we leave Prolog while doing so
24.10.18 17:06:55<dmiles> ?- 2 is 1 + 1.  is a foreign lib call
24.10.18 17:07:14<stoopkid> also, in functional languages, objects normalize to "themselves" but specifically this means they normalize to a *normal form*, and even if the object normalized to itself, this is distinct from normalizing to an *internal* representation of itself
24.10.18 17:07:53<stoopkid> if Prolog can handle existentials (infloops will be tolerated) then it can handle the semantics of 1 + 1 = 2
24.10.18 17:07:57<dmiles> ?- 2 is 1 + 1.   is compiled into      ?- N is 1 + 1,  @ = N.
24.10.18 17:08:10<dmiles> ?- 2 is 1 + 1.   is compiled into      ?- N is 1 + 1,  2 = N.
24.10.18 17:09:36<dmiles> 1 + 1 =:= 2  is can since     is compiled into      ?- X is 1 + 1,  Y is Z, X=Y..
24.10.18 17:11:14<dmiles> 1 + 1  and 2 are differnt quines
24.10.18 17:11:21<dmiles> in prolog
24.10.18 17:11:53<stoopkid> arithmoquine in Agda: https://pastebin.com/4GA7KHmT
24.10.18 17:12:35<dmiles> since prolog has no evaluation excpt in foriegn library calls..  even "2 is 1 + 1" as a quine
24.10.18 17:13:07<stoopkid> i don't see where you're describing anything that looks like a quine
24.10.18 17:14:37<dmiles> a quine is code that preduces a version of its own code
24.10.18 17:15:23<stoopkid> no, a quine is code that produces *exactly* its own code, and does so by itself
24.10.18 17:15:28<dmiles> this doesnt have to pass thru a printer
24.10.18 17:16:13<dmiles> in prkloog all code produces *exactly* its own code
24.10.18 17:16:21<dmiles> the code of 1+1 cannot produce 2
24.10.18 17:16:26<dmiles> it can only produce 1+1
24.10.18 17:16:38<stoopkid> that's not a quine either though
24.10.18 17:16:43<dmiles> same with 2
24.10.18 17:17:14<stoopkid> cause it's not producing anything, its normalization semantics are a trivial identity operation
24.10.18 17:17:49<stoopkid> quines are the *non*-trivial fixed-points of the execution environment
24.10.18 17:17:53<dmiles> call/1 produces side effects
24.10.18 17:17:58<editable-dog>"prkloog", im gonna use that as a name for something
24.10.18 17:18:41<dmiles> in prolog the side effects is what you do with it
24.10.18 17:19:31<dmiles> ?-  X =  2 is 1 + 1,  call(X).
24.10.18 17:20:22<dmiles> the side effect of that is based on the side effect of  instead:     N is 1 + 1,  2 = N.
24.10.18 17:20:45<dmiles> so perhaps this might be a situation of non-quine in prolog
24.10.18 17:21:31<dmiles> since is/2 requires a forign opaque call
24.10.18 17:23:54<dmiles> "N is 1 + 1,  2 = N"  is the fixed-point of   "2 is 1 +1"
24.10.18 17:25:38<dmiles> which is is:  call_external_code/2, unify/2
24.10.18 17:26:21<dmiles> is  1 +1 is not defined relationally
24.10.18 17:27:06<dmiles> prolog is limited to relational logic  (such as P.A.)  only
24.10.18 17:27:50<dmiles> and i dont just mean "pure prolog".. i am refering to all prologs.. even with cuts
24.10.18 17:28:21<dmiles> dont take my word for it
24.10.18 17:28:39<dmiles> ask anyone who knows prolog as well as i do
24.10.18 17:30:40<dmiles> one of those 15 people worldwide should help
24.10.18 17:42:15<HMCf> so what you're saying is....
24.10.18 17:42:22<HMCf> prolog is a dead language
24.10.18 17:46:35<dmiles> naw, there are 1000s of people that learn it every year in school.. you still cant get a graduate degree in CS without taking at leat a week of Prolog programming
24.10.18 17:48:40<dmiles> in which those people are taught pressburger arithmetic
24.10.18 17:49:41<dmiles> and explained to them that prolog does not do non-pressburger arithmetic
24.10.18 17:52:50<dmiles> if one looks into it deeper the two predicates  is/2 and =:= are strictly non-logical and can only operate thru a foreign function call
24.10.18 17:53:38<dmiles> this is what there is the clique that "prolog is the slowest possible language impl for math operations"
24.10.18 17:59:34<dmiles> but i agree it is a pathetic state of affairs for the Prolog language :)
24.10.18 18:02:37<dmiles> at least 100 of those 1000 people each year ask .. "cant we extend prolog to do evaluation like other languages have?".. our answer is "why? we can already emulate it!"
24.10.18 18:03:23<dmiles> (in just a few lines of prolog)
24.10.18 18:05:56<dmiles> in response, we force all 1000 people into writing such lines in their next homework assignment so they "get it"
24.10.18 18:08:58<dmiles> such as:  eval(X+Y,Z):- !, Z is X+Y.
24.10.18 18:10:24<dmiles> the last line of their program ...
24.10.18 18:10:37<dmiles> eval(X, X).
24.10.18 18:11:16<dmiles> is because everything is a value
24.10.18 18:12:06<dmiles> unless you wanted things defined this way:
24.10.18 18:12:13<dmiles> eval(X, YN):- call(X) -> YN = yes ; YN = no.
24.10.18 18:15:01<dmiles> the first line I should have written like:    eval(X+Y,Z):- !, eval(X,X0), eval(Y,Y0), !, Z is X0+Y0.
24.10.18 18:19:32<dmiles> though stoopkid's version of a quine in prolog is
24.10.18 18:19:34<dmiles> quine:-asserta(a((quine:-asserta(a(A,B)),a(C,D+E),a(D,E),numbervars(C),write(C),write(.)),A+B)),a(F,G+H),a(G,H),numbervars(F),write(F),write(.).
24.10.18 18:20:18<dmiles> as it is based on prointing
24.10.18 18:20:38<dmiles> based on printer/reader foriegn calls
24.10.18 18:21:57<dmiles> we can even place Hole to make this more abstract
24.10.18 18:23:00<dmiles> quine(ANY):-asserta(a((quine(ANY):-asserta(a(A,B)),a(C,D+E),a(D,E),numbervars(C),write(C),write(.)),A+B)),a(F,G+H),a(G,H),numbervars(F),write(F),write(.).
24.10.18 18:25:31<dmiles> what i was saying earlier is baed on what a person would discover much later is that thinking to an external "printer/reader foriegn calls"  was a needless trip
24.10.18 18:26:58<dmiles> as the programs is already reducable due to the fact that programs are always based on identity in prolog anyways
24.10.18 18:28:36<dmiles> the reasoner this was designed nto the prolog language was to not impede upon assert/retract
24.10.18 18:29:30<dmiles> the clause/2 predicate required the entire language to be a quine
24.10.18 18:29:54<dmiles> (required all statments to be)
24.10.18 18:29:55<stoopkid> note that neither my quine nor my arithmoquine rely on external/foreign printer/reader calls, except just for printing the result of the quine to STDIO, but this isn't necessary for just expressing the quine
24.10.18 18:31:07<dmiles> well most people (noyt saying they are wrong) define quines to be STDIOable
24.10.18 18:31:42<stoopkid> for what i'm doing that's not what we're concerned about
24.10.18 18:31:52<stoopkid> in the case of the arithmoquine, it doesn't even apply
24.10.18 18:32:23<stoopkid> and in the case of the quine, its output is already defined and sending this through STDIO is just doing just that: sending it through STDIO
24.10.18 18:33:15<stoopkid> i.e. i don't have to send it through STDIO, the normal form of the quine is still its an internalized string representation of the source-code of the quine
24.10.18 18:36:11<dmiles> in the case of those whom believe quines must be *able* to use reader/writers it is saying that the printed syntax tree needs to be equal to the source
24.10.18 18:36:15<stoopkid> for example i could create another Agda file, make a string X whose contents is the source-code of the original quine file, and then prove that quine normalizes to X, without ever going through STDIO
24.10.18 18:36:45<dmiles> (so that when it is ran again it produces yet again the same "output")
24.10.18 18:36:56<stoopkid> yes
24.10.18 18:37:29<dmiles> in lisp for example    "i am a quine"   is a quine
24.10.18 18:37:35<stoopkid> but the concept generalizes beyond the particular situation of actually printing the output to stdio
24.10.18 18:37:42<stoopkid> for example the arithmoquine is completely different
24.10.18 18:37:59<dmiles> (in lisp for example    "i am a quine"   is a quine but dones not relie on STDIO)
24.10.18 18:38:50<dmiles> (eval (eval (eval "i am a quine"))) == (eval "i am a quine") == "i am a quine"
24.10.18 18:38:55<stoopkid> so the arithmoquine is simply a statement that *refers* to its own source-code, not a program that *prints* its own source code
24.10.18 18:39:33<stoopkid> we're still going through the same kind of "strange loop", just doing something different with it
24.10.18 18:42:03<stoopkid> what you're talking about are *trivial* quines, which are often rejected, but even if we don't reject them as fitting the definition of a "quine", they still don't help with anything i'm talking about :)
24.10.18 18:42:23<stoopkid> these trivial quines would be rejected on the basis that they have direct access to their entire source code
24.10.18 18:43:02<stoopkid> for example, something less trivial that would still be rejected "loop from start of file's location in memory to end of file's location in memory, printing each byte"
24.10.18 18:43:25<stoopkid> because it's still being given access to its entire source code in full
24.10.18 18:44:49<stoopkid> at least some of the source code must be generated from a non-identity operation, otherwise *all static data* automatically qualifies as quines, which would defeat the point of what a quine is
24.10.18 18:45:14<dmiles> you you are after is actualyl giving them dirrect access to their source code?
24.10.18 18:45:39<stoopkid> no, not in that sense anyway
24.10.18 18:45:45<stoopkid> indirect access, by way of godelization
24.10.18 18:45:50<dmiles> since all our examples were faking it
24.10.18 18:46:12<dmiles> (faking it by emulating accesses)
24.10.18 18:46:45<dmiles> it sounds like you are actualyl talking about *real* access of it
24.10.18 18:47:26<stoopkid> no, the reason i'm going through this process is to see what can be done with languages that specifically *don't* have real/direct access to their own source code in that sense
24.10.18 18:47:44<stoopkid> e.g. Agda can't directly talk about its own source code and neither can MLTT in general
24.10.18 18:48:09<stoopkid> but it *can* talk about it indirectly by way of Godelization
24.10.18 18:48:16<stoopkid> self-representing the implementation of Agda, in Agda
24.10.18 18:48:18<dmiles> ah .. yes that would be a sad limit that most languages think protects people
24.10.18 18:48:38<stoopkid> well...
24.10.18 18:48:46<stoopkid> but that's just exactly what my question is about:
24.10.18 18:48:47<dmiles> as it even prevents deducing the next line as it goes
24.10.18 18:48:58<stoopkid> *is* there actually a limitation?
24.10.18 18:50:22<dmiles> . most people would not even belive that they have been pre-emptively limited
24.10.18 18:50:46<dmiles> if you do find that limitiation existing
24.10.18 18:54:38<dmiles> fro isntance i have a program that redesigns at runtime what the orignal programmer inteded (because they made a mistake)
24.10.18 18:54:44<dmiles> https://github.com/TeamSPoon/hook_hybrid/blob/master/prolog/predicate_inheritance.pl#L150-L183
24.10.18 18:55:29<dmiles> the user misunderstood the inheritance system and lines 160-163 rewrite it
24.10.18 18:57:38<dmiles> because i was *allowed* to dirrectly edit the running program
24.10.18 18:57:58<dmiles> this would be an example of the usecase yuo are saying they are limited from
24.10.18 18:58:31<dmiles> well actually becine about to write that code is the limit
24.10.18 18:58:59<dmiles> well actually having the ability whatsoever is a sad limit
24.10.18 19:05:17<dmiles> admittedly if i was actually using a language with such limits .. I could still do waht i am doing.. it just be 50x harder on my brain
24.10.18 19:07:29<dmiles> meaning i actualyl belive if you, stoopkid, prove that there is no limitation.. that it becomes in worse
24.10.18 19:08:44<dmiles> it becomes worse if always are trying to emulate the kudge that you discovered
24.10.18 19:10:18<dmiles> like when the other night in ##dependent when you and everyone was trying to tell me i could easily emulate prolgo backtracking with git versioning
24.10.18 19:10:31<dmiles> prolog*
24.10.18 19:11:53<dmiles> i was thinking .. oh hey.. i could probably also dip my nads in a deep fryer
24.10.18 19:14:06<dmiles> (i use prolog backtracking whenever the code discovers there was a better impl of itself)
24.10.18 19:14:48<dmiles> rather than hotswapping as mietek suggested
24.10.18 19:15:22<dmiles> (or system recompilation since it would take several hours each time)
24.10.18 19:17:33<dmiles> nad dipping  sound smore productive than redesignig functional programmers tools chains for them
24.10.18 19:21:26<dmiles> it is really is thing!  I used to be be assistant manager of a all nude bakery
24.10.18 19:37:16<dmiles> another version of "the question" (for me) is if a KR langauge was designed specifically for a verification task if that KR language was designed to make automated programming easier
24.10.18 19:37:58<dmiles> if that KR is usefull for such self reference tasks
24.10.18 19:41:04<stoopkid> i don't really know what you're talking about, we seem to be talking about different things
24.10.18 19:43:11<dmiles> I thioght we were talking about self-representing the implementation of X, in X
24.10.18 19:43:36<stoopkid> indeed i am
24.10.18 19:44:14<stoopkid> what i'm not sure about is what exactly you're trying to say about the notion of doing that
24.10.18 19:44:46<dmiles> if that operations on non-identity and identity can be made to be isomorphic
24.10.18 19:45:18<stoopkid> not sure what you mean
24.10.18 19:45:52<dmiles> the differnce between non-identity and identity in this case is the same differnce betweeen teh code and the KR
24.10.18 19:46:35<dmiles> (that is should be interchangable at some levels)
24.10.18 19:46:48<dmiles> (not nesc all levels)
24.10.18 19:46:52<stoopkid> still not sure what you mean
24.10.18 19:48:06<dmiles> well we already accep that by declaring safe paths in KR we have identified safe paths in code
24.10.18 19:48:52<dmiles> so the question becomes what else can we say aout the code from the KR
24.10.18 19:51:49<dmiles> it might come down to what the KR is allowed to say about the KR
24.10.18 19:52:32<stoopkid> what is the problem though
24.10.18 19:55:52<dmiles> is practically there is not a problem when a "all code" language like Prolog talks about Prolog..  so the ideally there *should* not be a problem in Adga.
24.10.18 19:57:15<dmiles> unless there is some real theoretical limitation (which i dont belive there is)
24.10.18 19:59:51<stoopkid> in certain cases there are, but the problem is more complex in something like Agda
24.10.18 20:00:24<stoopkid> in something like Agda there are multiple different notions of what it means for it to talk about itself
24.10.18 20:00:25<dmiles> so the problem might be caused by 1) "No one is ever going to need self reference"   2) "We have all the self-ref you can dream of.. we just wont show you how since its a bad idea"    3) "self refernce is impossible"
24.10.18 20:01:26<stoopkid> i'm probably not gonna continue with any discussions where the basis of the argument is "logical results are just a conspiracy theory against me & prolog!"
24.10.18 20:01:50<dmiles> i assume you think its #2 though?
24.10.18 20:01:57<stoopkid> s/conspiracy theory/conspiracy/
24.10.18 20:02:10<stoopkid> i don't think any of those things
24.10.18 20:02:57<stoopkid> only folks like mietek think those things because they're confused about what godel's proof says
                 <dmiles> what would be annother possibliltY?
24.10.18 20:03:37<stoopkid> that there are multiple distinct notions of self-reference, and each notion has different results/limitations associated with it
24.10.18 20:05:31<stoopkid> i already have asserted 1) we do need some form of self-reference; 2) in at least one of these forms we have all the self-ref we can dream of, and people like Godel have already shown us how; 3) self-reference is certainly not impossible
24.10.18 20:05:56<stoopkid> each of the distinct notions of self-reference are "possible"
24.10.18 20:06:49<dmiles> the defination of self refernce we have going here is A) "self refernce is the ability to introspect and innfer about the declarative aspects"  B) "the ability to leave a certian vaguness in KR to be filled by inference (later)"  C) "to gernate in a forward manner new KR capabilites"
24.10.18 20:07:39<stoopkid> why don't you just stick with the notions of self-reference that are actually relevant to what i'm talking about? :)
24.10.18 20:07:47<dmiles> so what is D?
24.10.18 20:08:00<dmiles> I thought you are after #A
24.10.18 20:08:40<stoopkid> i'm not even sure i know exactly what you mean with A... or B.. or C
24.10.18 20:08:55<dmiles> that would be a conversaional showstopper i suppose
24.10.18 20:09:17<dmiles> anyhow lets get back to work
24.10.18 20:09:48<dmiles> (i mean go off and do other things)
24.10.18 20:10:15<dmiles> i dont think i know what you are trying to do
24.10.18 20:10:25<dmiles> or able to make it clear
24.10.18 20:11:09<dmiles> (yet, until you try more)
24.10.18 20:12:02<dmiles> my advice is to try to come up with a solid example of what you are after
24.10.18 20:12:40<dmiles> (like a usecase)
24.10.18 20:13:02<stoopkid> i'm 1) demonstrating that an expressive-enough language that has no capacity for direct self-reference can still talk about itself indirectly by way of Godelization; 2) wondering what such a language can prove about itself
24.10.18 20:13:44<stoopkid> it obv can't prove its own godel statements, but what else might it be able to prove
24.10.18 20:15:18<stoopkid> can it prove that one implementation of itself is equivalent to another? can it prove that one piece of its code can be implemented in a more efficient way? then we could get use-cases out of this
24.10.18 20:15:55<stoopkid> you've already listed out a bunch of use-cases here, what *i'm* doing is just trying to demonstrate whether or not something like Agda can handle these use-cases
24.10.18 20:18:31<stoopkid> you assert that there are limitations that would prevent KR like MLTT's from handling the use-cases you've listed, i'm playing the devil's advocate to that assertion and attempting to demonstrate that there actually are no such limitations
24.10.18 20:19:44<dmiles> I see .. would you say that self refernce would be when  D) "can prove that one implementation of itself is equivalent to another"   E) "can prove that one piece of its code can be implemented in a more efficient way"  ?
24.10.18 20:20:19<stoopkid> no, these would be potential use-cases for self-reference, not a definition of it
24.10.18 20:21:02<dmiles> ok you answered Yes.. would you say that self refernce would be Indicated* when  D) "can prove that one implementation of itself is equivalent to another"   E) "can prove that one piece of its code can be implemented in a more efficient way"
24.10.18 20:21:18<dmiles> as thouse two uses are possible then
24.10.18 20:21:45<stoopkid> yes... theoretically anyway; i've still yet to fully demonstrate it :)
24.10.18 20:24:25<stoopkid> something can't prove anything about itself without either direct or indirect self-reference
24.10.18 20:24:37<stoopkid> direct self-reference would be like, ex. the liar paradox
24.10.18 20:24:44<stoopkid> G = ~G
24.10.18 20:24:52<stoopkid> the statement G directly references itself
24.10.18 20:25:12<stoopkid> as opposed to indirect self-reference like with Godel's theorems
24.10.18 20:25:38<dmiles> Probably C "[KR being able] to generate in a forward manner new [unimagined] KR capabilites" was my reasoning for picking CycL lanauge to dectate when my Proog code genrator does
                 <stoopkid> G  = godelization-of-G is not godelization-of-provable
24.10.18 20:26:24<stoopkid> that would maybe be a use-case for direct/indirect self-reference
                 <dmiles> CycL lanauge to boss arround my Prolog code generator
24.10.18 20:26:37<stoopkid> note though that it's also a use-case *without* either direct/indirect self-reference
24.10.18 20:26:48<dmiles> (Since Cycl does that to CycL without a hitch)
24.10.18 20:28:43<stoopkid> all i'm attempting to address here is that you can reason about MLTT from within MLTT, and that we don't need to drop consistency or allow direct inspection of intensional properties of objects in order to achieve this
24.10.18 20:31:16<dmiles> We only would need MLTT to see itself as a structural object
24.10.18 20:31:29<stoopkid> sure
24.10.18 20:32:02<stoopkid> for example in Godel's proofs, his logic is "seeing itself" only as a structural relation between natural numbers
24.10.18 20:32:36<stoopkid> but this is all we need
24.10.18 20:33:02<dmiles> yes.. the properties of the MLTT structural object can be very specific
24.10.18 20:33:34<stoopkid> but also don't necessarily have to be
24.10.18 20:33:41<dmiles> (oops, didnt mean to connect yes.. as a summarization of your staatement)
24.10.18 20:34:00<dmiles> can be very specific = meaning i think you can actualyl address them one by one as to what you ant those to be
24.10.18 20:34:29<dmiles>  as to what you want and expected those to be
24.10.18 20:35:32<dmiles> such as its goals that are acheived
24.10.18 20:35:43<dmiles> such as termination-of-types
24.10.18 20:36:08<stoopkid> all we need is "adequacy of representation"
24.10.18 20:36:10<dmiles> such as program equivalency
24.10.18 20:36:23<stoopkid> for example, consider "exists x, forall y, x == y"
24.10.18 20:36:31<stoopkid> this "adequately represents" singletons right?
24.10.18 20:36:45<dmiles> yes
24.10.18 20:37:49<stoopkid> meaning: singletons are the models of this statement; this statement applies to any singleton
24.10.18 20:38:11<dmiles> does its contra-psotive apply to all non singletons>?
24.10.18 20:38:42<stoopkid> it's not an implication so it doesn't have a contrapositive
24.10.18 20:38:56<stoopkid> but anyway
24.10.18 20:39:09<dmiles> its is the anteccents of the consequent of singleton?
24.10.18 20:39:23<dmiles> your quetions was if it "implies"
24.10.18 20:39:40<stoopkid> similarly to how we make a statement that adequately represents singletons, all we need is a statement that adequately represents the "is-a-proof-of" relation of the proof-framework we're working in
24.10.18 20:40:21<dmiles> it does *not* adequetly represent singltons *until* you turn into into a logical statment
24.10.18 20:40:53<stoopkid> yes, i'm talking about that logical statement
24.10.18 20:41:08<dmiles> exists x, forall y, (x == y)
24.10.18 20:41:14<dmiles> is not a logical statement
24.10.18 20:41:34<dmiles> exists x, forall y, (x == y  ->  singleton(x))
24.10.18 20:41:39<stoopkid> it's literally a statement in FOL + Equality
24.10.18 20:41:42<dmiles> is a logical statement
24.10.18 20:42:13<stoopkid> (it's also literally a statement in FOL without equality, but may no longer be adequately representing singletons)
24.10.18 20:42:30<dmiles> if it was a logical statment than it would have a contrapostive
24.10.18 20:42:35<stoopkid> no no no
24.10.18 20:42:38<stoopkid> x is not the singleton
24.10.18 20:42:48<dmiles> foo.    ==     "true->foo"
24.10.18 20:42:54<stoopkid> the world that x exists in is the singleton
24.10.18 20:43:18<dmiles> ok so you meant  "true-> exists x, forall y, (x == y)"
24.10.18 20:43:59<stoopkid> sure, this would be an equivalent statement
24.10.18 20:44:08<dmiles> the contrapostive is?
24.10.18 20:44:22<stoopkid> "~(exists x, forall y, (x == y)) -> false"
24.10.18 20:44:55<dmiles> ok good.. i just wanted to say that statment is going to help your infer more than even the first
24.10.18 20:45:15<stoopkid> who cares though
24.10.18 20:45:18<stoopkid> that's irrelevant
24.10.18 20:45:29<dmiles> do this for a living and see you you still dont care
24.10.18 20:45:40<dmiles> or think that is irrealivant
24.10.18 20:45:59<stoopkid> it's not relevant to the current discussion...
24.10.18 20:46:12<dmiles> ok, go on then
24.10.18 20:46:23<dmiles> just dont make stuff up you dont know about please
24.10.18 20:46:34<dmiles> (like that it doesnt have a contrapostive)
24.10.18 20:48:27<stoopkid> it only has a contrapositive after you reframed it as an implication :)
24.10.18 20:49:25<dmiles> yes but we only know a defination is sound when we know that we grok both the implication of its truth and its falseness
24.10.18 20:49:39<stoopkid> you could say i'm just splitting hairs, and maybe i am, but the real point here is that contrapositives are totally tangential to what i'm talking about w/ self-representation of a proof-system
24.10.18 20:50:15<dmiles> otherweise the self defined system becomes unsound very quick
24.10.18 20:52:29<dmiles> inconsistency is defined by inability to grok the implication of some statments falseness
24.10.18 20:53:01<dmiles> (like the liars paradox is related)
24.10.18 20:53:23<dmiles> it iwas when the falseness of a self statment comes into play
24.10.18 20:53:48<dmiles> and such falsness is confused with being the falsness of something the system is KRing about separateyl
24.10.18 20:54:52<dmiles> the problem is to not split the two modalities of these falseness
24.10.18 20:55:42<dmiles> or to let one negation to be DNE'd with the other
24.10.18 20:56:19<dmiles> double negation elimination between a godel statment and a non godel statment
24.10.18 20:56:58<dmiles> (the modalities being  "these are godel statments"     "these are non-godel statments")
24.10.18 20:58:05<dmiles>  paradoxes of self references only come from treatment of these in the same modality
24.10.18 20:59:09<dmiles> to move quantified statments between the two there are special rules we did teach in school yet
24.10.18 20:59:27<dmiles> didnt make very clear in our classes on logic yet
24.10.18 20:59:40<dmiles> yet i had to learn to work at cycorp
24.10.18 21:00:01<dmiles> in order tpo deal with systems that do this
24.10.18 21:01:00<dmiles> so taking the "exists x, forall y, (x == y))"  how woudl you make that "godel statmement compatible"?
24.10.18 21:01:31<dmiles> (this doenst involve contrapostive .. that is barely related)
24.10.18 21:02:24<stoopkid> there are no compatibility problems with godel statements, this is one of the things about godel statements that irks mathematicians so much
24.10.18 21:04:47<dmiles> you yuo take:      exists x, forall y, (x == y))   ->    self(S,P)
24.10.18 21:05:11<dmiles> you want to be able to have the abiliioty to prove P
24.10.18 21:05:18<dmiles> S = self
24.10.18 21:05:55<dmiles> so what i am sorta asking is if there is a  version of  P
24.10.18 21:06:42<stoopkid> the "exists x, forall y, (x == y))" is unrelated to the self-representation i was just giving it as an example of what i mean when i say "representing" in this particular context
24.10.18 21:07:13<dmiles> this can also be done from the point of vew..   "non-self(exists x, forall y, (x == y))) -> P"
24.10.18 21:07:32<dmiles> i know .. that singel statment is not related
24.10.18 21:07:59<dmiles> but you have other (100s of unrelated staments) that i assume have to be used
24.10.18 21:08:25<dmiles> so defining hte logic for using non-godelian statments  is important
24.10.18 21:08:43<dmiles> so that whne you have godelian statments you dont end up in lairs-paradox
24.10.18 21:09:04<dmiles> maybe i am movign too many steps ahead
24.10.18 21:09:30<dmiles> since i know what the final system will look like
24.10.18 21:09:57<dmiles> that hte final system in order to interact has to be able to see itself non-godellky
24.10.18 21:11:11<dmiles> it has to be able to prove godelian (G) and  non-godelian (NGs ) in the same proofs
24.10.18 21:11:29<dmiles> without becoming inconsistent
24.10.18 21:12:12<dmiles> in order to do that one has to use use NG and G transfromational logic
24.10.18 21:12:14<stoopkid> godel statements by definition can't be proven in a consistent system! :D
24.10.18 21:12:46<dmiles> yes but these are statments you importanted and already did the justice on
24.10.18 21:12:58<dmiles> (converted them into the useable form)
24.10.18 21:13:33<dmiles> so they were before G's trasnformed from SGs
24.10.18 21:13:59<dmiles> called Godelization
24.10.18 21:14:45<stoopkid> no idea what you mean now
24.10.18 21:15:53<dmiles> it what we do when we convert non-epistemic Godel statements into Episteic statments
24.10.18 21:16:24<dmiles> basically is a special wayt of making a quoting operator
24.10.18 21:17:18<dmiles> isa(bob,person)  into   knows(god,isa(bob,sue))
24.10.18 21:17:23<dmiles> oops
24.10.18 21:17:27<dmiles> isa(bob,person)  into   knows(god,isa(bob,person))
24.10.18 21:18:07<dmiles> the `Range` of Rel2 there is what you call Godel numbers
24.10.18 21:19:54<dmiles> knows(bob,isa(bob,person))     is convereted   knows(god,knows(bob,isa(bob,person)))
24.10.18 21:20:37<dmiles> GS = knows(bob,isa(bob,person))
24.10.18 21:20:43<dmiles> G = knows(god,knows(bob,isa(bob,person)))
24.10.18 21:20:58<dmiles> that is Godelization right?
24.10.18 21:25:13<stoopkid> no
24.10.18 21:28:17<stoopkid> well, sorry, i mean, it could ofc be an internalized encoding
24.10.18 21:28:56<stoopkid> but the point would be to find an encoding where you can find a statement that refers to its *own* godel-encoding
24.10.18 21:30:41<stoopkid> so you can't do it with just "pure data"
24.10.18 21:30:58<dmiles> "to find an encoding where you can find a statement that refers to its *own* godel-encoding" <- this is done by finding a canonical form of "pure data"
24.10.18 21:31:21<stoopkid> maybe
24.10.18 21:31:52<stoopkid> show me a godel statement though that's what we really need to be examining here
24.10.18 21:32:35<dmiles>  a(A) -> A
24.10.18 21:32:57<dmiles> or
24.10.18 21:32:58<dmiles> A -> b(A)
24.10.18 21:33:09<stoopkid> what is a(A) ?
24.10.18 21:34:16<dmiles> a(A) is the form of A in which the system is able to make proofs about
24.10.18 21:34:40<dmiles> but what is *can* be is just about anything you want it to be
24.10.18 21:35:06<dmiles> even  a(a(a(...)))) where A was   a(a(a(...))))
24.10.18 21:35:51<dmiles> a(A) is usally some property that a "user" postits
24.10.18 21:36:19<dmiles> expecting that  A    will be true
24.10.18 21:37:34<dmiles> imagine we had this system:
24.10.18 21:37:48<dmiles> user(A) -> A .      A -> system(A).   ssystem(A) -> A .   A -> user(A).
24.10.18 21:38:12<dmiles> A being any legal MLTT expression
24.10.18 21:39:32<dmiles> and the user can even posit  thjinkgs like     system(MyMLTTT)
24.10.18 21:39:55<dmiles> thus written  user(system(MyMLTTT)).
                 <stoopkid> which statement are you claiming refers to itself?
24.10.18 21:40:31<dmiles> system(A) referse to itself because   system(A)->system(system(A))
24.10.18 21:40:52<stoopkid> that's not system(A) referring to itself
24.10.18 21:40:59<dmiles> thus   system(A->system(A))
24.10.18 21:41:37<stoopkid> that's "system(A)->system(system(A))" referring to system(A)
24.10.18 21:42:24<dmiles> yes but also "system(system(A))->system(A)" is true
24.10.18 21:42:34<dmiles> meaing the consequents is self refernce
24.10.18 21:43:33<stoopkid> still not the same thing
24.10.18 21:43:41<dmiles> so you meant then:  knows(A,system(A))  ?
24.10.18 21:44:02<stoopkid> no
24.10.18 21:44:20<stoopkid> look at the "arithmoquine" expression in my second pastebin
24.10.18 21:45:49<dmiles> arithmoquine : Set
                 <dmiles> arithmoquine = ∃ x ∈ String , (∃ y ∈ String , ((x ≡ y ++ (quot (escape y)) ++ ")))") ∧ (y ≡ "∃ x ∈ String , (∃ y ∈ String , ((x ≡ y ++ (quot (escape y)) ++ \")))\") ∧ (y ≡ ")))
24.10.18 21:46:09<dmiles> is it that x or y referse to itself?
24.10.18 21:48:48<stoopkid> arithmoquine is the statement that refers to itself by way of x
24.10.18 21:51:02<stoopkid> so what values of x can satisfy this statement?
24.10.18 21:51:36<dmiles> statements that can be encapsulated by Strings using x's value
24.10.18 21:51:37<stoopkid> just one value: the String that is the Agda-source-code definition of arithmoquine
24.10.18 21:52:17<stoopkid> so arithmoquine indirectly says something about its own source-code
24.10.18 21:52:36<stoopkid> in this case, it says something about how that source-code can be constructed from operations on other Strings
24.10.18 21:52:38<dmiles> sorry i said that backwards.. but ok i am with you
24.10.18 21:53:00<dmiles> right.. that was your version ofr my modal esape
24.10.18 21:53:29<stoopkid> idk, but could be :)
24.10.18 21:54:33<dmiles> your goal is to updgrade Adga in order to do stop using strings?
24.10.18 21:54:59<dmiles> well to make what you did in the string able to be visible to type-infenrce
24.10.18 21:55:09<dmiles> (and to the rest of the system)
24.10.18 21:55:24<dmiles> so that you are not hiding stuff
24.10.18 21:55:46<stoopkid> not sure what you mean wrt hiding stuff or why we'd want to take strings out of agda
24.10.18 21:55:58<stoopkid> strings are just lists of characters from some alphabet set
24.10.18 21:56:27<dmiles> well in oder to have the system do briliant stuff for you you have to convert to sourcecode
24.10.18 21:56:58<dmiles> (and then restart the system?)
24.10.18 21:57:09<stoopkid> ah
24.10.18 21:57:30<dmiles> i am thinking yuo can make Adga do the same briliant stuff by not restarting
24.10.18 21:58:12<dmiles> (even without using strings that is)
24.10.18 21:58:24<stoopkid> do you have to restart a database every time you add some data to it ?
24.10.18 21:59:34<dmiles> well in SQL you have to rerun 1000s of new triggers every time you add some data to it
24.10.18 21:59:51<stoopkid> sometimes
                 <dmiles> at least like at places like Facebook
24.10.18 22:01:01<stoopkid> are you saying you have a way to prevent triggers from ever having to run? forgive me if i'm skeptical :)
24.10.18 22:01:31<stoopkid> and running a trigger is way different than, say, restarting the whole DBMS
24.10.18 22:01:33<dmiles> Its called backchaining
24.10.18 22:01:39<dmiles> (but not very related)
24.10.18 22:01:44<dmiles> fwd vs bwd
24.10.18 22:02:06<stoopkid> so basically the triggers would run "just-in-time" ?
24.10.18 22:02:26<dmiles> yeah.. in practice it is triggers "just-in-time"
24.10.18 22:02:33<stoopkid> ok sure
24.10.18 22:03:07<dmiles> but what i am wondering here is abotu Agda .. what was to perpose of it not including a Add/Remove operation?
24.10.18 22:03:28<dmiles> It actualy could easily have them
24.10.18 22:03:41<dmiles> at least Add
24.10.18 22:03:45<stoopkid> it could, yes
24.10.18 22:04:07<dmiles> you shouild be able to create an implication that makes  the X make nice stuff happen for yoyu
24.10.18 22:04:20<dmiles> (and well mostly for it)
24.10.18 22:04:53<stoopkid> i disagree; remember: i strongly distinguish static knowledge from dynamic action
24.10.18 22:05:05<dmiles> this is static knowledge
24.10.18 22:05:16<dmiles> i mean in your program statically
24.10.18 22:05:18<stoopkid> then it shouldn't be "making anything happen" (not on its own anyway)
24.10.18 22:05:32<dmiles> i'll give you a static exmaple
24.10.18 22:07:41<dmiles> eL(z) ->  z (x ∷ rest) = (x ∷ (z rest))
24.10.18 22:07:54<dmiles> were Z is a varaible
24.10.18 22:08:12<dmiles> that represent any recusrion
24.10.18 22:08:19<dmiles> that represent any recusrion function
24.10.18 22:08:33<dmiles> so i can write..    eL(escape-List)
24.10.18 22:08:45<dmiles> and have it "Add"
24.10.18 22:08:52<dmiles> escape-List (x ∷ rest) = (x ∷ (escape-List rest))
24.10.18 22:09:29<stoopkid> but it's already "added" as soon as you proved/asserted " eL(escape-List)"
24.10.18 22:09:38<dmiles> yep!
24.10.18 22:09:53<dmiles> now you should be able to let eL define new eLs right?
24.10.18 22:09:54<stoopkid> so this would really just be redundant (though also wouldn't be anything wrong with it other than redundancy)
24.10.18 22:10:20<stoopkid> what do you mean?
24.10.18 22:10:39<stoopkid> eL simply has a definition that describes the bounds of what it can do
24.10.18 22:10:46<dmiles> eL(X) -> (X...   eL(X))
24.10.18 22:11:27<stoopkid> not sure what you're going for there
24.10.18 22:11:44<dmiles> well first level we jsut created Macros right?
24.10.18 22:12:02<dmiles> i am assuming at first level we jsut created Macros
24.10.18 22:12:26<dmiles> and we can create Macros that create more More
24.10.18 22:12:32<stoopkid> this might depend on your definition of a "macro"
24.10.18 22:13:16<dmiles> a macro is jsut an automatied text genration .. it can gertnate in whateve rDSL you used
24.10.18 22:13:35<dmiles> like in C we use them to create C code
24.10.18 22:13:47<dmiles> then we write makros in C that define new C macros
24.10.18 22:14:08<stoopkid> so in that case, especially if we say it's *strictly* "just" that, then no there's nothing to do with macros here (per se, at least)
24.10.18 22:14:32<dmiles> in Agda your MLTT is not any less paowerfull than Macros (i assumed)
24.10.18 22:15:17<dmiles> here is the example i am taking ablut...
24.10.18 22:15:29<stoopkid> Agda has greater logical expressive capacity than C macros yes
24.10.18 22:15:36<dmiles> escape-List : List Char -> List Char
                 <dmiles> escape-List [] = []
24.10.18 22:15:37<dmiles> escape-List ('\\' ∷ rest) = ('\\' ∷ ('\\' ∷ (escape-List rest)))
                 <dmiles> escape-List ('"' ∷ rest) = ('\\' ∷ ('"' ∷ (escape-List rest)))
                 <dmiles> escape-List (x ∷ rest) = (x ∷ (escape-List rest))
24.10.18 22:15:53<dmiles> how many times you you basicalyl rewire that same code in a week?
24.10.18 22:15:59<dmiles> rewrite
24.10.18 22:16:16<dmiles> code with that same structure that is
24.10.18 22:16:45<dmiles> after a while you start to see structrual simlarities after 10000s of typed lines
24.10.18 22:16:48<stoopkid> if i programmed more, and programmed more often in traditional languages, i would be constantly rewriting similar code
24.10.18 22:16:52<dmiles> so you Abstract that away
24.10.18 22:16:55<stoopkid> yes
24.10.18 22:17:07<stoopkid> to the max of your capacity for abstraction
24.10.18 22:18:02<dmiles> Haskell is very much like Prolog when uit comes to writting the same matchers.. "base case.. match 1 .. match 2" i am assuming Agda is this way
24.10.18 22:18:32<dmiles> to where I no longer write that way anymore
24.10.18 22:18:47<dmiles> i write a "base case.. match 1 .. match 2" Macro
24.10.18 22:19:01<stoopkid> sure
24.10.18 22:19:08<dmiles> containing all the idiomaticies
24.10.18 22:19:17<dmiles> Agda certainly cant stop you there
24.10.18 22:19:42<stoopkid> you can write syntactic macros in agda yes
24.10.18 22:19:46<dmiles> so what if you mde macros that change how your macros are even understood?
24.10.18 22:20:25<stoopkid> then i would call that a distinct situation/problem-set potentially calling for a distinct solution-set
24.10.18 22:20:29<dmiles> for example a NoOperation type
24.10.18 22:21:02<dmiles> here is a use
24.10.18 22:21:04<dmiles> eL(z) ->  z (x ∷ rest) = (x ∷ (z rest))
24.10.18 22:21:12<dmiles> eL(foo)
24.10.18 22:21:29<dmiles> eL(foo) -> Nop(eL(foo))
24.10.18 22:21:39<dmiles> so that the program no produces no code
24.10.18 22:22:29<dmiles> Nop(x) -> qed.
24.10.18 22:22:46<dmiles> or whatever it is that you do to defie "ignore this"
24.10.18 22:23:10<dmiles> in prolog i used  "nop(_) :- true."
24.10.18 22:23:43<dmiles> anything i surrenct with nop/1 the system is not allowed to see it
24.10.18 22:24:12<dmiles> (that i used for "DEl" operation0
24.10.18 22:24:18<dmiles> "Del"
24.10.18 22:24:48<stoopkid> ok
24.10.18 22:24:52<stoopkid> what's the problem though
24.10.18 22:24:58<dmiles> sorta like in C you do    DEBUG(Exteme, ... ode i dont ever run .. )
24.10.18 22:25:26<dmiles> i am saying is you should be able to source level KR
24.10.18 22:25:34<dmiles> (at the very leat!)
24.10.18 22:25:37<dmiles> (at the very least!)
24.10.18 22:26:16<stoopkid> meaning you should be able to have the KR represent knowledge about its own source-code / implementation ?
24.10.18 22:26:24<dmiles> and you should be able to make the source Level KR talk to MLTT the way that alows for self-refernce
24.10.18 22:26:56<dmiles> (even if that ends up using strings or whatever)
24.10.18 22:27:28<dmiles> you should be able to design your own KR that "becomes" MLTT KR
24.10.18 22:28:09<dmiles> So its not MLTT that is self referencing.. it is You refernceing MLTT and what MLTT is referencing
24.10.18 22:28:42<dmiles> or You refernceing how your system designs the Agda code
24.10.18 22:29:07<stoopkid> so you're saying you should be able to have external system A, which references MLTT which has a representation of A, so that A can talk about itself by way of MLTT KR ?
24.10.18 22:29:28<stoopkid> and A can further direct what to do with the MLTT KR?
24.10.18 22:29:42<dmiles> I think so
24.10.18 22:30:00<stoopkid> sure
24.10.18 22:30:17<dmiles> system A being though i assumed to be perhps some Macro level that langauges have
24.10.18 22:30:28<stoopkid> sure
24.10.18 22:30:33<dmiles> (even better if they are not macros)
24.10.18 22:30:35<stoopkid> i don't place any constraints on what *else* it might be though
24.10.18 22:31:14<stoopkid> it could be a macros system... it could be a neural net
24.10.18 22:31:21<stoopkid> or a human even :)
24.10.18 22:32:05<dmiles> well i started a few years ago *only* writting all my code as Macros
24.10.18 22:32:19<stoopkid> sounds frightening :)
24.10.18 22:32:36<dmiles> naw it actualyl makes my7 code able to be readable this way
24.10.18 22:32:39<stoopkid> (at least if they are purely syntactic macros with no extra constraints system to keep them coherent)
24.10.18 22:33:22<dmiles> and when i need to add extra checking i can add them without changing my orriginal sources
24.10.18 22:34:33<dmiles>  DO_THIS(X,Y,Z)
24.10.18 22:34:34<dmiles>  DO_THIS_BUT_CHECKING_TYPES(X,Y,Z)
24.10.18 22:35:05<dmiles> #define DO_THIS(X,Y,Z)    X( Y , Z )
24.10.18 22:35:25<dmiles> sort of thing
24.10.18 22:35:36<dmiles> so thats for C if i want it ot be lisp..
24.10.18 22:35:45<dmiles> #define DO_THIS(X,Y,Z)    ( X  Y  Z )
24.10.18 22:35:54<stoopkid> sure
24.10.18 22:36:17<dmiles> saying that MLTT can be less extressive
24.10.18 22:36:20<dmiles> cant be
24.10.18 22:36:47<stoopkid> i have absolutely no normative views on what you do/don't make the dynamic component of your system do
24.10.18 22:37:06<stoopkid> i also don't really have any normative views on what you do/don't make the static knowledge-representation component of your system do (if there is any)
24.10.18 22:37:51<dmiles> well my ideal is my KR needs to be a language that *i* designed that covnerts to a language that someonelese designs
24.10.18 22:38:03<stoopkid> i simply have observations about how coherence of static knowledge-representation will be affected in the presence or absence of certain features
24.10.18 22:38:59<stoopkid> dmiles: i agree, you need to be able to write things in your own words, more or less
24.10.18 22:39:01<dmiles> i am so happy when i get to use a language less expressive than the langauge i am targeting
24.10.18 22:39:42<dmiles> (at least *when* that happens i am not at all assamed)
24.10.18 22:39:50<dmiles> ashamed*
24.10.18 22:40:47<dmiles> and cases i am using more expressive language than the target./. i am not bent out of shape because i can always Mcro my way into what the less expressive language wants
24.10.18 22:41:10<stoopkid> hrm..
24.10.18 22:41:14<stoopkid> always?
24.10.18 22:41:23<dmiles> it seems that way
24.10.18 22:41:37<stoopkid> if the lang you're using is more expressive than the target then *by definition* there are at least some things that can't be converted into the target
24.10.18 22:42:00<dmiles> for exmaple.. I use lagnauges that doesnt have any debugging semantics
24.10.18 22:42:10<stoopkid> ok so
24.10.18 22:42:19<stoopkid> remember how there's like 20 different notions of expressiveness? :)
24.10.18 22:42:27<dmiles> i was able to add ste debugging into a macro language that used interaction of stdoutin
24.10.18 22:42:45<dmiles> it took me 20k lines but i did irt
24.10.18 22:43:40<stoopkid> if you're just saying that Agda needs a syntactic macros system then 1) i don't have any arguments against that, 2) it already has one
24.10.18 22:44:39<dmiles> if i was tryiong to talk the problem i think i'd make macros that are at least in the KR we want
24.10.18 22:44:48<dmiles> talk/tackle
24.10.18 22:45:17<dmiles> such as  Quinify(x)
24.10.18 22:45:28<stoopkid> i don't have any problems with that either
24.10.18 22:46:00<stoopkid> note: i don't subscribe to the standard total-functional party line trying to limit what you can/can't do with your machine
24.10.18 22:46:49<dmiles> yeah.. it is hard enough already to get us to work.. now they want us to dip as well
24.10.18 22:47:48<dmiles> i dont mind at all having to do things differntly
24.10.18 22:48:05<stoopkid> if you want to stick your machine into an infinite loop, more power to you, and MLTT should be able to help you prove that you're actually inflooping! :D
24.10.18 22:48:26<stoopkid> (except when it can't :D)
24.10.18 22:50:21<stoopkid> (and here i do mean "should" both observationally as well as normatively)
24.10.18 22:53:37<stoopkid> trust me: i have way more gripes about the general limitations that the total-functional people are trying to impose on programming than i do about any differences in your approaches to KR vs. mine
24.10.18 22:53:43<dmiles> it should be posisble to use MLTT like a FOL for desiging new apps right>?
24.10.18 22:53:58<dmiles> like the way i desihgn prolog programs
24.10.18 22:54:26<dmiles> so it should be posisble to use the saem logical transforamtions of self refeerence i used
24.10.18 22:54:52<dmiles> wher ei just bump FOL into Epistemic logic
24.10.18 22:55:18<dmiles> teh Epistemic bump is system A talking about MLTT
24.10.18 22:55:23<stoopkid> turing-completeness is the only barrier; sky's the limit
24.10.18 22:56:36<stoopkid> if somebody wants to prevent me from running arbitrary machine code on my machine, any time i decide to do so, they can gtfo
24.10.18 22:57:04<dmiles> so for instnace if you just copy MLTT to system A with direct mappings that would do nothing but at least be possible
24.10.18 22:57:49<dmiles> then you decided to every time you called certain MLTT function you increemnt soem global counter
24.10.18 22:58:27<dmiles> sorry "used some part of MLTT kr fearture"
24.10.18 22:58:48<stoopkid> sure, you could even use MLTT to represent the rule that the global counter needs to be incremented
24.10.18 22:58:53<dmiles> you could in system A you can keep track of this (not helpfull.. but you already did waht MLTT cant)
24.10.18 22:59:39<dmiles> MLTT cant track what features of it you used
24.10.18 22:59:50<stoopkid> all you're saying here is that stateful is distinct from stateless, and i agree with that
24.10.18 23:00:07<stoopkid> MLTT is stateless, but your computer is not!
24.10.18 23:00:33<stoopkid> ultimately it's your *machine*(s) managing all the statefulness
24.10.18 23:00:48<dmiles> (but your system A can make MLTT as you said even track that counter to become a thing print in the header when you start your program)_
24.10.18 23:01:10<stoopkid> MLTT is just a format for the knowledge that is being updated over time (and a set of rules for validating that knowledge)
24.10.18 23:02:05<stoopkid> yes, let's say system A is just your machine
24.10.18 23:02:55<stoopkid> your machine can do whatever you want it to do with MLTT
24.10.18 23:03:50<stoopkid> it can keep track of state, update the knowledge stored in the KB, and can even base its decisions on when/how to do so based on knowledge it's already stored in the MLTT KB
24.10.18 23:07:03<dmiles> MLTT is expressive enough i can define StringUpper right?
24.10.18 23:07:56<dmiles> that is i assert that characters of a certain range should have this things done to them that converts them from  anycase to uppercase
24.10.18 23:08:10<stoopkid> you can express it in at least two distinct ways: 1) at the object-level as a program that actually converts a string to uppercase, or 2) at the type-level as a description of what it means for a string to be in uppercase
24.10.18 23:08:21<dmiles> and i define that a sting is a sequence of such tars and so forth
24.10.18 23:09:12<dmiles> yeah in PRolog i do it by #2
24.10.18 23:09:47<stoopkid> yes, in prolog you typically only have access to #2
24.10.18 23:10:00<dmiles> well prolog generates #1 for me
24.10.18 23:10:13<stoopkid> sure
24.10.18 23:10:42<stoopkid> well, sort of...
24.10.18 23:10:44<dmiles> waht i was afraid i was seeing is that i might have to do #1 in haaskell
24.10.18 23:10:50<stoopkid> more like it generates another #2 :)
24.10.18 23:11:34<dmiles> oh well prolog you can do either but not both
24.10.18 23:11:36<stoopkid> the output that your prolog generates from #2 is more prolog code right?
24.10.18 23:12:03<dmiles> (as doing both would be two differnt predicates0
24.10.18 23:12:14<dmiles> yes
24.10.18 23:12:23<dmiles> #2 becomes a more idiomatic #2
24.10.18 23:12:37<dmiles> so yeah
24.10.18 23:12:44<stoopkid> right this is distinct from #1
24.10.18 23:12:59<dmiles> soemtime knowing what the idomatic #2 looks like i'll just write it myself
24.10.18 23:13:10<stoopkid> in prolog you do program-execution-as-proof-search
24.10.18 23:13:20<dmiles> yeah
24.10.18 23:13:40<stoopkid> in Agda you could do program-execution-as-proof-search also, and this is at the same level as #2
24.10.18 23:13:43<dmiles> though there is also a desire to make this #2 more and more and more abstract
24.10.18 23:13:48<stoopkid> now let's say you find a proof
24.10.18 23:14:06<stoopkid> like in prolog, when you prove something, you get a proof-tree right?
24.10.18 23:14:31<dmiles> in prolog it wont "do" anyhting unprovable
24.10.18 23:14:47<dmiles> it has to design a proof in order to ecent "do"
24.10.18 23:15:07<stoopkid> so that's a yes?
24.10.18 23:15:41<dmiles> yeahsince it can always go back on the proof
24.10.18 23:16:22<dmiles> (unless you tell it to discard the tree at each step)
24.10.18 23:16:36<stoopkid> ok so
24.10.18 23:17:06<stoopkid> these proof-trees are the things that live at #1; the "object level"
24.10.18 23:17:29<stoopkid> in Haskell and Agda and such, you can "normalize" these
24.10.18 23:18:21<stoopkid> so when Haskell & Agda people are talking about functional/total-functional-programming, they're not operating on the "program-execution-as-proof-search" paradigm, they're operating on the "program-execution-as-proof-*normalization*" paradagim
24.10.18 23:18:30<dmiles> "Exits are north, south, east and west." "You see: the table and screendoor."
24.10.18 23:18:31<dmiles> player~1@spatial>
24.10.18 23:18:46<dmiles> that is the program showing me the result of a proof
24.10.18 23:19:22<dmiles> each char that  hit the STDIO is proved that i wanted it
24.10.18 23:19:33<stoopkid> sure
24.10.18 23:20:12<dmiles> with Haskell i have to tell it that i want that i was thinking
24.10.18 23:20:21<stoopkid> well
24.10.18 23:20:34<stoopkid> Haskell sucks? :)
24.10.18 23:20:37<dmiles> in prlog i just have to trick it into proving things i care about
24.10.18 23:20:39<stoopkid> it doesn't even have dependent types
24.10.18 23:21:33<dmiles> i assume i trick Agda into doing such things
24.10.18 23:21:51<dmiles> or at least use the same axioms
24.10.18 23:22:03<dmiles> the same axioms i use in prolog
24.10.18 23:22:30<stoopkid> Haskell is like the worst of all worlds heh, the types are restrictive enough to get in your way but aren't expressive enough to actually enforce complex constraints, nor are they expressive to do any meaningful proof-search over
                 <dmiles> but if it wants me to *also* do #1.. ug
24.10.18 23:23:00<stoopkid> you can't really do #2 in haskell at all
24.10.18 23:23:11<stoopkid> it can't even express the things
24.10.18 23:23:40<stoopkid> Agda does not require that you also do #1 but does have it available as an option
24.10.18 23:25:02<stoopkid> it can't help it, it's proofs are simply too constructive to not be programs :D
24.10.18 23:26:50<dmiles> well the #1 and #2 are scale..      ASM #1                                      #2 English
24.10.18 23:27:28<stoopkid> not exactly
24.10.18 23:27:36<dmiles> where the goal of language sis to get you doing #1 while giving the illions of #2
24.10.18 23:28:28<dmiles> sounds liek some languages attempt at getting you to do both
24.10.18 23:28:44<dmiles> covering a segment of the scale
24.10.18 23:29:44<stoopkid> #2 can describe things that are impossible to accomplish and which therefore can't be accomplished via #1
24.10.18 23:29:51<stoopkid> trivial example: the halting problem for turing-machines
24.10.18 23:30:50<stoopkid> you can describe logically what it means for a turing-machine to be halting, but you will never have a turing-computable function that actually determines whether a given turing-machine is halting or not
24.10.18 23:31:24<stoopkid> and this carries beyond the situation where it's provably impossible to the situation where we simply don't know yet how to give an algorithm which accomplishes the thing
24.10.18 23:32:56<stoopkid> (or whether one exists)
24.10.18 23:33:06<stoopkid> for example: factoring polynomials
24.10.18 23:34:00<stoopkid> afaik we've only managed to rule out the possibility of it being solved by certain methods, and haven't ruled out it's computability
24.10.18 23:34:19<stoopkid> (i could be wrong about that but then i'd just find a different example :)
24.10.18 23:35:19<stoopkid> and also, the goal of MLTT is not "to get you doing #1"
24.10.18 23:35:33<stoopkid> MLTT is perfectly happy with the "programming as proof search" paradigm as well
24.10.18 23:39:02<stoopkid> also note: i said *at least* two distinct ways :)
24.10.18 23:40:02<stoopkid> this isn't even touching the "programming as describing code that ends up running in a completely different execution environment" paradigm
24.10.18 23:41:05<dmiles> well immagine writting a UI/Text Editor Agda
24.10.18 23:41:37<stoopkid> in Agda or for Agda?
24.10.18 23:41:46<stoopkid> (or both? :)
                 <dmiles> in Agda
24.10.18 23:41:51<stoopkid> alright
24.10.18 23:42:05<dmiles> so how much #1 to #2 do you end up doing?
24.10.18 23:42:23<stoopkid> that really depends
24.10.18 23:42:38<dmiles> and also how much does the MLTT help etc?
24.10.18 23:43:22<dmiles> you do things like track curror movemnts and paste buffers etc
24.10.18 23:43:43<dmiles> (to give you an idea what i meant when writting the editor)
24.10.18 23:43:47<stoopkid> sure
24.10.18 23:44:50<stoopkid> i would consider this to be a good situation for #3: "programming as describing code that ends up running in a completely different execution environment"
24.10.18 23:45:10<stoopkid> pretty much anything stateful would fall into that category
24.10.18 23:45:25<dmiles> weel what i was trying to come up with what is a "good fit"
24.10.18 23:45:44<dmiles> (i wassnt picking a good fit) but was trying to zero in on one :
24.10.18 23:46:29<dmiles> so what is #2 that we already have installed for example that everyone knows how to do
24.10.18 23:46:58<dmiles> (maybe a scientific calculator?)
24.10.18 23:47:12<dmiles> (still has a UI)
24.10.18 23:47:32<stoopkid> my categories are starting to break down as we move out of the original context :)
24.10.18 23:47:40<dmiles> but details are much simplier than the Notepad)
24.10.18 23:48:12<stoopkid> there are many ways to put these things together
24.10.18 23:48:55<stoopkid> but your concerns so far are only about the dynamic/active/stateful aspect of it
24.10.18 23:49:41<dmiles> sure why i was asking though is i was thinkng abotu some of the hard applications to write a #2 centered env
24.10.18 23:50:00<dmiles> even without any dynamics
24.10.18 23:50:36<dmiles> just the decribpiton of a blinking cursor
24.10.18 23:51:03<stoopkid> scientific calculator probably isn't a great example of programming-by-proof-search
24.10.18 23:51:15<stoopkid> most scientific calculators are, ironically, kind of "dumb" and don't do any proof-searching really
24.10.18 23:51:41<stoopkid> maybe something like wolfram's stuff would be an exception to this
24.10.18 23:51:57<dmiles> in prolog the blicking cursor in notpad blinks because search when deciding what to do tells me to set the blink animaion
24.10.18 23:52:22<stoopkid> right
24.10.18 23:52:59<dmiles> to decide that i use some hints.. like the userselected the document insted of the menu
24.10.18 23:53:07<dmiles> encoded encoded in rules
24.10.18 23:53:28<dmiles> in Agda where do you encode that?
24.10.18 23:54:00<dmiles> in the MLTT or some vars?
24.10.18 23:54:54<dmiles> and like the cursor's possition in the document
24.10.18 23:55:36<dmiles> and the mapping of how many rows to go up and down with each arrow key
24.10.18 23:56:21<stoopkid> all these facts & rules would be encoded as types, for the most part; components of a big record type that contains them
24.10.18 23:56:41<stoopkid> basically take your prolog KB and directly translate it to types and stick them in a record type
24.10.18 23:57:22<stoopkid> now everything along the lines of "and the mapping of how many rows to go up and down with each arrow key" is dealt with, and we only need to address the aspect of statefuleness
24.10.18 23:57:38<stoopkid> where is the cursor's position *right now*
24.10.18 23:58:11<stoopkid> for this we need the dynamic component, operating in parallel to MLTT, to update this record type to use the current set of facts
24.10.18 23:59:12<dmiles> (the rules for that dynamic component are in MLTT at least as well?)
24.10.18 23:59:32<stoopkid> sure
24.10.18 23:59:39<stoopkid> they could be
24.10.18 23:59:43<stoopkid> i'd even encourage it! :D
25.10.18 00:00:59<dmiles> well you i am just looking to see how one stop MLTT is
25.10.18 00:01:09<dmiles> *i*
25.10.18 00:01:22<dmiles> if its one stop shopping the way Prolog is
25.10.18 00:02:10<stoopkid> afaict you could basically narrow down the part that's outside of MLTT to "the fact that your computer is even running in the first place"
25.10.18 00:02:37<dmiles> btw the reason i am so down on RDF is can you immagine writting Notepad.exe to run in Cwm
25.10.18 00:02:46<dmiles> yet i do that with prolog
25.10.18 00:02:57<stoopkid> i couldn't imagine doing it with either one :)
25.10.18 00:03:11<stoopkid> but that's just me
25.10.18 00:04:18<dmiles> well what that would inteail is writting out all the triple that make Notepad.exe do what it does
25.10.18 00:04:29<stoopkid> yes
25.10.18 00:04:47<dmiles> which take most people longer thna their own lifetime to do
25.10.18 00:05:03<dmiles> whereas it takes about a week in prolog
25.10.18 00:05:53<dmiles> the idea with RDF they will all be dead by the time they realized they got suckered
25.10.18 00:06:42<stoopkid> maybe
25.10.18 00:06:51<stoopkid> i certainly can't code very fast in RDF
25.10.18 00:07:00<stoopkid> but i can't code much faster in prolog either :)
25.10.18 00:07:02<dmiles> but where i was going is about "A language for designing rule based applications" is where MLTT seems as far as i can tell not sucking
25.10.18 00:07:04<stoopkid> ymmv
25.10.18 00:07:34<stoopkid> i would definitely agree
25.10.18 00:08:04<stoopkid> *implementations* of it certainly might need some work in that regard, but MLTT itself is perfectly equipped
25.10.18 00:08:27<stoopkid> or... adequately anyway :)
25.10.18 00:12:33<stoopkid> funny my questions in ##dependent have spurred some folks into thinking about how to actually write a provability predicate in Agda heh
25.10.18 00:13:11<stoopkid> they're trying to use Agda's built-in reflection though... cheaters :P
25.10.18 00:22:45<dmiles> :( reading now
25.10.18 00:22:47<dmiles> :)
25.10.18 00:23:21<dmiles> (that frowny face was a typo)
25.10.18 00:36:26<stoopkid> arithmoquine v2: now with proof!
25.10.18 00:36:27<stoopkid> https://pastebin.com/AuHdAb1v
25.10.18 00:44:22<stoopkid> well i think i can answer at least one of my questions in the negative, at least for MLTT
25.10.18 00:44:46<stoopkid> assuming we had a statement "every proof of this statement normalizes in polynomial time", it would just be false
25.10.18 00:45:25<stoopkid> i can add arbitrary extra steps to any proof
25.10.18 00:47:35<stoopkid> maybe it could be true trivially, in the metatheory, because since it has no proofs then we can certainly say that *every* proof of it normalizes in polynomial time :D
25.10.18 00:47:53<stoopkid> but that doesn't get us anything
25.10.18 00:48:54<stoopkid> otoh, let's say we have a lambda calc program already available, independently of any types/propositions
25.10.18 00:50:15<stoopkid> call it X; then we can perhaps make statement like G = "godel(X) is a godel-proof of godel(G), and godel(X) godel-normalizes in polynomial time"
25.10.18 02:31:58<stoopkid> https://pastebin.com/8QHTurPm
25.10.18 02:33:25<stoopkid> ok so: `quine` was a program that outputted its own source code
25.10.18 02:33:41<stoopkid> `arithmoquine` was a proposition that stated something about its own source code
25.10.18 02:34:41<stoopkid> and `proof-of-arithmoquine2` is a program that proves something about its own source code
25.10.18 02:50:18<stoopkid> the more i mess around with this, the less it seems like voodoo
25.10.18 02:51:22<stoopkid> i can interpret propositions and their proofs as being Nats
25.10.18 02:51:43<stoopkid> so if i have a proof that every Nat can be factored into a product of primes, i have a proof that proves something about itself
25.10.18 02:51:57<stoopkid> but that's not special
25.10.18 02:53:19<stoopkid> what is slightly interesting about the `proof-of-arithmoquine2` is that it's the only proof of `arithmoquine2` that actually does apply to itself
25.10.18 02:57:02<stoopkid> in the sense of: the source code of `proof-of-arithmoquine2` is the only string that actually satisfies the statement `arithmoquine2`
25.10.18 11:33:40*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-inkfzkudqhbfkvij) left #AutoNomic: Quit: Connection closed for inactivity
25.10.18 11:59:31*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tuoizevwgdlplnli, stoopkid: stoopkid)
25.10.18 13:00:24<HMCf> stoopkid: I'll apparently never be allowed to pm without services auth again, heh
25.10.18 13:00:27<HMCf> but
25.10.18 13:00:52<HMCf> I hope you see the inconsistency in your pm...?
25.10.18 13:02:25<HMCf> or maybe just self-hate, lol... but in any case you can't say you hate the war mongers and also "leet skills nazis" in the same breath ;-)
25.10.18 13:03:13<stoopkid> the war mongers are the fucking nazis
25.10.18 13:03:14<HMCf> you're war mongering in objection to war mongering!
25.10.18 13:03:46<stoopkid> and they're war-mongering for profit
25.10.18 13:04:26<HMCf> well, more generally "for self interest" yes
25.10.18 13:04:53<HMCf> but, again... so are you? ;-)
25.10.18 13:05:22<stoopkid> your stance props up those who are already profiting from warfare and delegitimizes the resistance by its victims
25.10.18 13:05:26<stoopkid> fuck that
25.10.18 13:05:29<HMCf> I'm more to the side of "leet skills *noone*"
25.10.18 13:05:32<HMCf> heh
25.10.18 13:05:46<HMCf> but...
25.10.18 13:05:52* HMCf shrugs
25.10.18 13:06:04<HMCf> "bombs away" in any case? ;-)
25.10.18 13:06:30<stoopkid> you seem to not be able to distinguish violence from violence-in-self-defense
25.10.18 13:07:12<stoopkid> which in my experience means you're likely protected under the bubble
25.10.18 13:07:33<stoopkid> so am i, but, tear that fucking bubble down
25.10.18 13:07:46<HMCf> most of the nazis (mistakenly) perceived an existential threat, too...
25.10.18 13:07:54<stoopkid> bullshit
25.10.18 13:09:15<HMCf> the contemporary nazis certainly do (look at the recent studies on white nationalist motivations in america today, they show an overwhelming trend in such a belief)
25.10.18 13:09:30<stoopkid> im not talking about Proud Boys
25.10.18 13:09:35<stoopkid> i'm talking about Obama/Brennan
25.10.18 13:09:36<stoopkid> Bush/Cheney
25.10.18 13:09:38<stoopkid> Raytheon
25.10.18 13:09:39<stoopkid> etc..
25.10.18 13:10:26<HMCf> they only perceive a different sort of threat (just as mistakenly...)
25.10.18 13:10:52<stoopkid> sorry i don't have any sympathy for the threat they perceive to their pockets
25.10.18 13:11:05<HMCf> i'm not calling for sympathy
25.10.18 13:11:13<stoopkid> or empathy ;-)
                 <HMCf> not by a long shot
25.10.18 13:11:56<HMCf> i *am* calling for empathy... understanding... cooperation... and *peace*
25.10.18 13:12:09<HMCf> becuase the bell tolls for you, too.
25.10.18 13:12:39<stoopkid> lol, peace?
25.10.18 13:12:40<stoopkid> really?
25.10.18 13:13:30<stoopkid> we've been calling for peace the whole time, so why isn't it here?
25.10.18 13:13:41<stoopkid> because war-profiteers just war anyway
25.10.18 13:13:48<stoopkid> no matter what we think about it
25.10.18 13:15:00<HMCf> I don't dispute that, but I also refuse the "if you can't beat em, join em" solution proposal here..
25.10.18 13:15:52<stoopkid> my solution isn't "join 'em", i don't have a solution and don't think there is one
25.10.18 13:18:18<stoopkid> nor would legitimizing self-defense be "joining them"...
25.10.18 13:18:37<stoopkid> but at this point i'm more at the stage of, let's just have an apocalypse and be done with it
25.10.18 13:20:10<HMCf> is "let everyone die" really different from "kill them all"?
25.10.18 13:20:40* HMCf gtr for ~30 min
25.10.18 13:20:48<stoopkid> don't look at me, it's your bomb design
25.10.18 15:10:22<HMCf> I believe it is a car design, though... and even if it turns out to be a bomb I believe it should be a weapon of detente... and if that fails, well... god help us all?  And at least we tried "something"...?
25.10.18 15:10:45<HMCf> and that "something" is certainly a better plan than building a boat?
25.10.18 15:10:54<HMCf> or the citadels?
25.10.18 15:11:49<HMCf> (not to say that I don't still keep those considered as "plan B"... if the world burns I'll prefer to watch from afar before the flames reach me, heh...)
25.10.18 15:14:06*** Join: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
25.10.18 15:19:49<stoopkid> HMCf: what i'm really not sure about is why you care what i think about it lol
25.10.18 15:21:15<stoopkid> and obv i don't actually want an apocalypse but sometimes i do wonder if it would be better that we not wipe out all other life when we wipe ourselves out
25.10.18 16:17:27<editable-dog>Joanna Rutkowska leaves Qubes OS, joins Golem 
25.10.18 16:22:07*** Quit: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 240 seconds
25.10.18 18:02:57<HMCf> stoopkid: i dont actually care except as to see that you put your energy toward the bombcar over putting it toward skilling nazis... and wrt the "other life" well that ship might already be sailing. :-|
25.10.18 18:51:04<stoopkid> HMCf: lol what do you think i'm really gonna do, all i do is sit at home and study math and do my homework and occasionally work on your bombcar... koo can vouch for that
25.10.18 19:43:20<stoopkid> editable-dog: do you have the `workspace` directory from the old vps somewhere on loworbit ?
25.10.18 23:21:57<HMCf> stoopkid: good, keep at it :-P
25.10.18 23:22:18<HMCf> done anything fun with redtt yet?
26.10.18 01:47:48*** Join: cantora_ (sid147800@gateway/web/irccloud.com/x-cgshxhekovvskgpy, cantora: cantora)
26.10.18 01:55:53*** Nick regain: cantora_ (sid147800@gateway/web/irccloud.com/x-cgshxhekovvskgpy) is now known as cantora
26.10.18 02:48:54<editable-dog>stoopkid: no but i can put it there
26.10.18 08:35:13*** Join: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
26.10.18 08:53:44*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
26.10.18 08:56:11*** Quit: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 246 seconds
26.10.18 12:14:41<stoopkid> HMCf: no, idk how to use their comp yet (or how to use kan composition in general as a reasoning method).. i'll need to understand at least how to prove symmetry & transitivity of equality before i can do anything meaningful
26.10.18 12:52:07*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 240 seconds
26.10.18 13:01:34<HMCf> stoopkid: it is possible to only use paths as extension and then hcomp is the same as in cubicaltt
26.10.18 13:02:18<HMCf> iow you can choose to "ignore" that the generalization of paths is there
26.10.18 13:02:48<stoopkid> idk how to use it in cubicaltt either, i use stuff like negated intervals and such to prove these thing in the cubicaltt setting
26.10.18 13:11:06<HMCf> well, paths can still be inverted explicitly, in theory anything from cubicaltt should be able to be translated directly (modulo the difference in recursion requirements)
26.10.18 13:12:24<HMCf> (specifically cubicaltt allows more general mutual recursions while redtt is strictly split case structural induction recursion *only* (for now))
26.10.18 13:22:07<HMCf> you should look at the incoming PR for gcd/factor, btw... it nicely demonstrates a few things imo
26.10.18 20:23:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tuoizevwgdlplnli) left #AutoNomic: Quit: Connection closed for inactivity
26.10.18 20:44:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cropggbfdbruuxbq, stoopkid: stoopkid)
27.10.18 12:57:43*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
27.10.18 13:05:42*** Join: koom__ (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
27.10.18 13:08:21*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
27.10.18 14:17:19<stoopkid> editable-dog: i'm going over pyin
27.10.18 14:17:30<stoopkid> (some more)
27.10.18 14:17:48<editable-dog>nice
27.10.18 14:18:24<editable-dog>i was wondering if you want to instead spend time on the new cppout
27.10.18 14:19:09<editable-dog>since thats probably more critical now, and i would like to write it in a clean way
27.10.18 14:19:36<stoopkid> sure
27.10.18 14:19:55<editable-dog>should we hop on the vps?
27.10.18 14:21:49<stoopkid> sure
27.10.18 14:21:54<stoopkid> i'm on there in tmux now
27.10.18 14:22:24<stoopkid> new vps right?
27.10.18 14:23:10<koom__> yeah, hostmybytes deleted the old one immediately, even though they should have by the end of the payment cycle lol
27.10.18 14:23:51<stoopkid> yea that's weird i was gonna go move the workspace dir over to the new one and i noticed it was down
27.10.18 14:24:37<koom__> ah, forgot about that, let me do it now
27.10.18 14:25:16<editable-dog>err, where in tmux are you?
27.10.18 14:26:03<stoopkid> session 0
27.10.18 14:27:03<koom__> ah
27.10.18 14:28:19<koom__> umm,err, the workspace directory contained only "Autonomic" and "graphs"?
27.10.18 14:29:08<stoopkid> sounds maybe right
27.10.18 14:29:22<koom__> ok, i thought there was more
27.10.18 14:30:34<stoopkid> looking at my browser history, most of what i'm looking for was indeed under workspace/AutoNomic
27.10.18 14:31:01<stoopkid> well, workspace, logs, and private
27.10.18 14:31:04<stoopkid> and then the wiki
27.10.18 14:32:48<koom__> ok copying over everything except the wiki now
27.10.18 14:34:58<koom__> gonna take a while
27.10.18 14:49:34<koom__> yawn
27.10.18 14:50:15<koom__> workspace except wiki is copied, do you want the wiki dir too?
27.10.18 14:53:03<stoopkid> nah that's fine, we'll come back to the wiki; you wanted to experiment with a different wiki platform besides MW right?
27.10.18 14:56:56<koom__> idk, not really
27.10.18 14:58:01<koom__> at this point, i'd rather focus on organizing stuff with our own tools
27.10.18 14:58:20<stoopkid> sounds good to me
27.10.18 15:08:11<koom__> so, this is where pyco is at now
27.10.18 15:27:30<stoopkid> so pyin_main.py is what you use when just running pyin normally, and pyco.py serves a similar purpose but for the cppout version of it?
27.10.18 15:27:38<stoopkid> and both rely on pyin.py ?
27.10.18 15:28:54<koom__> yeah
27.10.18 15:29:12<koom__> pyin_main is broken right now after some reorganization
27.10.18 17:30:15*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
27.10.18 17:32:40*** Quit: koom__ (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 246 seconds
27.10.18 21:30:54*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 246 seconds
28.10.18 03:51:58*** Join: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
28.10.18 04:13:08*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
28.10.18 04:14:47*** Quit: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 240 seconds
28.10.18 04:28:39*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Remote host closed the connection
28.10.18 04:28:58*** Join: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
28.10.18 10:57:49<stoopkid> koo5[m]: ok making some more progress with it, yesterday was mostly just refreshing my memory on python
28.10.18 11:12:52<koo5[m]> Nice
28.10.18 11:13:28<koo5[m]> Im making prorgess as well
28.10.18 11:13:50<koo5[m]> I have a new and much simpler bnodes scheme of we limit head existentials to one
28.10.18 19:11:51*** Quit: kook (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 246 seconds
28.10.18 21:15:21<stoopkid> koo5[m]: what is "Collection"
28.10.18 21:15:52<stoopkid> as in "Lines = Collection"
29.10.18 01:19:54<stoopkid> koo5[m] so "locals_map" is an associative array mapping var names to their position in the array "locals_template" and similarly with "consts_map" / const names / "consts" ?
29.10.18 01:53:17<stoopkid> well.. making some more progress
29.10.18 01:54:15<stoopkid> but only just enough progress that i can finally even *start* asking more meaningful questions about it :)
29.10.18 02:03:38*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
29.10.18 02:05:50<editable-dog>yo
29.10.18 02:06:05<stoopkid> yo
29.10.18 02:06:28<editable-dog>yes, wrt locals and consts
29.10.18 02:06:53<editable-dog>Collection is just a bunch of c++ lines
29.10.18 02:07:27<stoopkid> is that a cgen thing? i was looking for documentation but couldn't find it
29.10.18 02:07:37<editable-dog>yes
29.10.18 02:07:56<editable-dog>https://documen.tician.de/cgen/
29.10.18 02:12:05<stoopkid> right i was looking there and found info on cgen.Line and cgen.Module but couldn't find anything on "Collection"
29.10.18 02:13:37<koom> i see
29.10.18 02:13:45<koom> class Collection(Block):
                 <koom>     def generate(self):
                 <koom>         for c in self.contents:
                 <koom>             for line in c.generate():
                 <koom>                 yield line
29.10.18 02:14:20<koom> cpython3/lib/python3.6/site-packages/cgen/__init__.py
29.10.18 02:16:49<koom> class Line(Generable):
                 <koom>     def __init__(self, text=""):
                 <koom>         self.text = text
                 <koom>     def generate(self):
                 <koom>         yield self.text
29.10.18 02:16:51<koom> etc
29.10.18 02:21:43<koom> "Module" and "Collection" are both just a bunch of lines, but more appropriate name for my use is "Lines"
29.10.18 02:29:28<stoopkid> i always forget how nice the python idioms are until i read some of your code again
29.10.18 02:30:35<koom> like what?
29.10.18 02:33:11<stoopkid> for example this syntax for defining a list of objects parameterized by values from another container "[ Statement("static ep_t ep" + str(rule.debug_id))  for rule in rules ]"
29.10.18 02:35:23<koom> ha, exactly where the bug that im looking for is
29.10.18 02:35:54<koom> "rules" got spillt over from the for loop above: for pred,rules in preds.items():
29.10.18 02:36:24<koom> instead of being ALL the rules
29.10.18 02:39:11<stoopkid> hrm
29.10.18 02:40:23<koom> pushed
29.10.18 02:40:40<stoopkid> what do you mean spilt over exactly? that "r = ..." supposed to be happening under that loop or is it supposed to happen after that loop finished with the whole preds table?
29.10.18 02:41:02<stoopkid> i see
29.10.18 02:41:23<koom> the "rules" variable stays around after the for pred,rules in preds.items():
29.10.18 02:41:45<koom> after
29.10.18 02:42:08<stoopkid> right, so when it did that it would basically end up looping over the rules list for the final pred in the preds table?
29.10.18 02:42:18<koom> yeah
29.10.18 02:43:31<koom> you can do "del pred,rules" after the loop
29.10.18 02:43:40<koom> im just split about if its more helpful or confusing
29.10.18 02:44:36<koom> i think ill put it there
29.10.18 02:45:24<stoopkid> does python interpreter automatically delete it if it goes unused for the rest of the function or no?
29.10.18 02:46:30<koom> del removes the identifier from the scope. gc hapens at some undefined time
29.10.18 02:46:55<stoopkid> gotcha
29.10.18 02:48:58<stoopkid> so, main thing i'm confused about in generate_cpp is what is this "rule.max_states_len" and the associated calculation for it?
29.10.18 02:49:44<editable-dog>tmux?
29.10.18 03:05:38<stoopkid> alright getting it a bit better now, i need to go to sleep though, i'll look at it some more tomorrow
29.10.18 03:05:56<koom> ok great
29.10.18 03:06:07<koom> hopefully it will aready be compiling tomorrow
29.10.18 11:16:22*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-lotjkmrcirsagkyh) left #AutoNomic: Ping timeout: 250 seconds
29.10.18 11:19:24*** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-otwvcjrceatusqbz, (unauthenticated): @nikaala:matrix.org)
29.10.18 11:57:12*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
29.10.18 12:41:33*** Join: koom (~sirdancea@37-48-16-232.nat.epc.tmcz.cz, sirdancealot: koo5)
29.10.18 12:51:06*** Quit: koom (~sirdancea@37-48-16-232.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
29.10.18 13:03:35<stoopkid> seems kinda weird that the vars spill out after the end of the loop, usually i
29.10.18 13:04:11<stoopkid> usually i've* seen vars declared in a loop just being local to the loop
29.10.18 13:05:46<stoopkid> in any case, generate_cpp is looking better for sure
29.10.18 16:42:13<HMCf> python scope rules get weird and tricky
29.10.18 16:42:48<HMCf> threre isn't the sort of block scope that we're all used to
29.10.18 16:53:18<editable-dog>yea definitely doesnt seem a good default behavior
29.10.18 16:55:08*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
29.10.18 16:58:39<HMCf> just use the global keyword on every var, then you wont run into the weird scope ;-)
29.10.18 17:00:37<HMCf> editable-dog: is the repo in a decent state to look at right now?
29.10.18 17:01:09<editable-dog>not really
29.10.18 17:01:52<editable-dog>what do you want to look at?
29.10.18 17:02:20* HMCf shrugs
29.10.18 17:02:47<HMCf> was maybe going to take another pass at the existentials stuff
29.10.18 17:04:10<editable-dog>well, pyco uses the one-existential-per-rule limitation, so its a lot simpler in that regard
29.10.18 17:04:40<editable-dog>you could prepare some test cases that build up lists in body
29.10.18 17:05:30<editable-dog>or figure out how to make it possible to use eye on our test cases, it seems to require queries in a weird format
29.10.18 17:05:56<HMCf> "weird format"?
29.10.18 17:06:27<editable-dog>like this:
29.10.18 17:06:28<editable-dog>{:l0c :clone_of ?b.} => {:l0c :clone_of ?b.}
29.10.18 17:06:42<editable-dog>if you query with just :l0c :clone_of ?b., it doesnt work
29.10.18 17:07:16<HMCf> ah, really we are the weird ones wrt that, but ok
29.10.18 17:07:42<editable-dog>howso?
29.10.18 17:14:02<stoopkid> “{:l0c :clone_of ?b.} => {:l0c :clone_of ?b.}” as a query should just trivially succeed in all cases
29.10.18 17:14:14<stoopkid> to suggest otherwise is the weird thing
29.10.18 17:14:46<editable-dog>makes sense
29.10.18 17:16:14<HMCf> editable-dog: most stuff uses two part queries, like sparql select/construct
29.10.18 17:18:18<editable-dog>so the => is hijacked to mean "construct"?
29.10.18 17:19:15<stoopkid> afaict its just meaningless and redundant duplication of the query
29.10.18 17:19:26<stoopkid> and ive yet to see an explanation to the contrary
29.10.18 17:27:51<editable-dog>HMCf: ok, pyin is fixed up, if you want to play with it
29.10.18 17:28:22<editable-dog>ok, ill make eye-runner.sh do the duplication
29.10.18 17:29:44<editable-dog>pyco is looking good but still needs a bit of work
29.10.18 18:32:56<editable-dog>stoopkid: what are you up to?
29.10.18 18:38:36<stoopkid> editable-dog: calculus hw
29.10.18 18:48:35<editable-dog>nice
29.10.18 18:48:43<editable-dog>it compiles, i think ill continue tomorrow
29.10.18 23:27:27*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
30.10.18 02:18:33*** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-jvvqgkxkcbrqfzga) left #AutoNomic: Ping timeout: 250 seconds
30.10.18 02:20:12*** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-yvhwxyslkqxbvslc, (unauthenticated): @nemesis1:matrix.org)
30.10.18 14:24:24*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
30.10.18 17:37:15<HMCf> so redtt added a proof that unary nats are equivalent to binary...
30.10.18 17:37:42<HMCf> the proof ends up being written as a one-liner...
30.10.18 17:38:13<HMCf> the elaborated proof is almost 32kloc (!)
30.10.18 17:38:43<HMCf> *elaborated, pretty-printed
30.10.18 17:40:19<stoopkid> sounds excessive
30.10.18 17:44:19<HMCf> 544 applications of 237 synthesized boundaries in 221 hcoms
30.10.18 17:44:44<HMCf> actually doesn't seem that excessive to me, heh
30.10.18 21:25:07*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 240 seconds
31.10.18 04:48:43*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
31.10.18 05:13:08*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-zfqqkxquhatdezmo) left #AutoNomic: Read error: Connection reset by peer
31.10.18 05:13:16*** Quit: dadbod007[m]1 (dadbod007m@gateway/shell/matrix.org/x-lylbjgpztfnfwwho) left #AutoNomic: Remote host closed the connection
31.10.18 05:13:19*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-otwvcjrceatusqbz) left #AutoNomic: Remote host closed the connection
31.10.18 05:13:21*** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-yvhwxyslkqxbvslc) left #AutoNomic: Read error: Connection reset by peer
31.10.18 05:13:28*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-qrttcdpuyzxqqsfm) left #AutoNomic: Remote host closed the connection
31.10.18 05:13:31*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-sfnuwvhnxiqythzf) left #AutoNomic: Read error: Connection reset by peer
                 *** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-kecunjcbvaewgysl) left #AutoNomic: Write error: Broken pipe
31.10.18 05:24:43*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-zsqzwzavnkheblek, (unauthenticated): @genuinelyfx:matrix.org)
31.10.18 05:48:00*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-wlmajuhgpivwbdux, (unauthenticated): @koo5:matrix.org)
31.10.18 05:48:01*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-chgjqakomyyczhpr, (unauthenticated): @reedhhw:matrix.org)
                 *** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-slsmpuquujyaosbz, (unauthenticated): @nikaala:matrix.org)
                 *** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-iohncvoeycgfbxal, (unauthenticated): @nemesis1:matrix.org)
31.10.18 05:48:08*** Join: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-ashebrqvlifzvylo, (unauthenticated): @dadbod007:matrix.org)
                 *** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-rookywmlecmfkgyi, (unauthenticated): @lexxus:matrix.org)
31.10.18 07:16:38*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 250 seconds
31.10.18 13:24:30*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
31.10.18 15:06:31<HMCf> boo
31.10.18 15:10:16<editable-dog>sup
31.10.18 16:32:31<HMCf> happy hallows' eve
31.10.18 17:48:35<editable-dog>oh
31.10.18 17:48:40<editable-dog>boo to you too
31.10.18 17:48:56<editable-dog>pyco passess all simple and existentials tests
31.10.18 17:49:11<editable-dog>it has no chance with list tests, im gonna have to change those
31.10.18 17:55:16<editable-dog>(cpython3) koom@koom-KVM ~/univar> ./pyin/tau2.py ./pyco_runner.sh  tests/simple/* tests/existentials/*   2>&1 | tee x  | grep "FAIL" | wc
                 <editable-dog>      0       0       0
31.10.18 18:01:32*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 244 seconds
31.10.18 18:46:18<HMCf> cool, I will take a look at that tomorrow
01.11.18 06:44:41*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
01.11.18 08:52:06*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
01.11.18 09:57:05<editable-dog>segfault...
01.11.18 12:35:48<HMCf> segfaults are bad
01.11.18 12:35:52<HMCf> mmmmmmmmmkay?
01.11.18 12:36:22<HMCf> so does anyone remember what our old cppout fps got up to
01.11.18 12:36:24<HMCf> ?
01.11.18 12:39:03<HMCf> (bonus points if you can also remember where we left the bottleneck... iirc we were cache bound, but I don't remember the details)
01.11.18 13:08:12<editable-dog>fixed
01.11.18 13:08:46<editable-dog>well, we were cache-bound when we unrolled stuff too much
01.11.18 13:09:08<editable-dog>i suppose i can try to run it and see
01.11.18 13:10:53<editable-dog>when we didnt overunroll, we were pretty much down to the metal
01.11.18 14:30:43<editable-dog>everything's broken
01.11.18 15:00:35*** Join: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
01.11.18 15:11:29<stoopkid> editable-dog: i'm just gonna go through the python & c++ and annotate it with types & constraints
01.11.18 15:12:05<editable-dog>ok cool
01.11.18 15:12:34<editable-dog>python actually as a type annotation syntax that is then checkable with ypy
01.11.18 15:12:38<editable-dog>mypy
01.11.18 15:12:50<stoopkid> interesting, i'll check that out
01.11.18 15:13:04<stoopkid> i already started a bit but it's just comments rn
01.11.18 15:14:04<editable-dog>if you feel like doing it with mypy, ill try to help you in tmux
01.11.18 15:15:01<stoopkid> sure, i'm in there now, only have about an hour or so before i gotta get ready for class tho
01.11.18 15:15:19<stoopkid> but i'm free all day tomorrow
01.11.18 15:15:37<koom> ok nice, i should be free too
01.11.18 15:24:32*** Join: kook (~sirdancea@89-24-59-26.nat.epc.tmcz.cz, sirdancealot: koo5)
01.11.18 15:27:00*** Quit: koom (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 244 seconds
01.11.18 15:27:28<stoopkid> koom so is the Thing.== just checking bitwise pointer-equality?
01.11.18 15:30:04<kook> not pointer equality
01.11.18 15:30:12<kook> its checking the contents of the Thing struct
01.11.18 15:30:25<stoopkid> i see
01.11.18 15:30:48<kook> i still dont get git
01.11.18 15:30:53<kook> idk what this merge commit really is
01.11.18 15:35:24<stoopkid> https://mypy.readthedocs.io/en/stable/getting_started.html#function-signatures
01.11.18 15:35:45<stoopkid> how much do you care about 2 vs. 3 compatibility ?
01.11.18 15:36:10<kook> hmm, a bit
01.11.18 15:37:32<kook> wee should keep at py3 compatible, and if i ever want to run it with py2, for example because of pypy, i can probably fix it up easily
01.11.18 15:37:34<kook> why
01.11.18 15:38:10<stoopkid> seems like doing the py3 annotations might break py2 compatibility, but not vice versa
01.11.18 15:38:26<stoopkid> since at worst the py2 annotations would just appear as comments in py3
01.11.18 15:42:37<kook> hmm idk
01.11.18 15:42:52<kook> so its foo: int = 5 vs foo = 5 #int?
01.11.18 15:44:49<stoopkid> or "foo = 5 # type: int" yea
01.11.18 15:44:54<kook> lets use the nicest style, i can always change it with little mental effort
01.11.18 15:47:02<stoopkid> which one do you consider nicest? either one's fine for me, i'd probably go with the py2 one that's just comments but that's mostly just cause i don't want to mess up your code, otherwise i'd probably go with the py3 style
01.11.18 15:48:10<editable-dog>well, thats a fair point
01.11.18 15:48:43<editable-dog>the new style seems nicer
01.11.18 15:49:33<editable-dog>but if you do it just comments, we dont have to always test the changes
01.11.18 15:50:16<editable-dog>idk, flip a coin
01.11.18 15:50:25<stoopkid> does py3 enforce the type constraints on its own without mypy?
01.11.18 15:50:30<HMCf> just use a statically typed language to begin with :-P
01.11.18 15:50:46<stoopkid> HMCf: kinda too late to "begin" with that :P
01.11.18 15:51:08<editable-dog>it doesnt
01.11.18 15:51:10<HMCf> I've never really understood this "let's annotate our dynamic script with static types" thing...
01.11.18 15:51:37<HMCf> seems like a lot of work/overhead to buy a (very) false sense of security :-)
01.11.18 15:52:32<HMCf> if you want a typesystem, use a language with a typesystem... don't "pretend retrofit" it... XD
01.11.18 15:52:55* stoopkid shrugs
01.11.18 15:53:30<editable-dog>^
01.11.18 15:54:13<kook> ¯\_(ツ)_/¯
01.11.18 15:54:24* kook probably just broke HMCf's terminal
01.11.18 15:54:59<stoopkid> maybe once we've actually settled on the inferencer algorithm, right now it would be a lot more work/overhead to switch from the work koo's already done, especially without a clear idea in mind
01.11.18 15:55:46<stoopkid> plus the annotations will make it easier to translate into an actually-statically-typed language later
01.11.18 15:56:13<stoopkid> for me at least
01.11.18 15:58:52<stoopkid> not to mention that we've repeatedly acknowledged that available statically-typed languages can't be assumed to be giving a "true" sense of security anyway
01.11.18 16:00:11<stoopkid> i mean, w/o dependent types your static types are pretty much meaningless afaic
01.11.18 16:03:31<stoopkid> but probably most importantly: all code is dynamic prior to being annotated with types... not sure what makes python code "unworthy" of verification
01.11.18 16:07:43<stoopkid> kook: i guess my major question left would be, can the py2 style annotations with just comments apply when it's being interpreted as py3, or vice versa?
01.11.18 16:08:14<editable-dog>i would guess they would
01.11.18 16:08:55<stoopkid> seems py3 annotations would make it not be valid py2 code, can we test that real quick?
01.11.18 16:13:51<kook> i dont even know if pyco and the new changes are compatible with 2
01.11.18 16:14:16<stoopkid> heh, well that might give us our answer lol
01.11.18 16:14:47<kook> seems there really is some problem with cgen, it does this on my machine too
01.11.18 16:15:51<kook> i'd say, if you feel like testing your changes, lets go with 3, otherwise with just comments
01.11.18 16:17:53<stoopkid> ok sounds like a plan
01.11.18 16:18:42<kook> biab
01.11.18 16:19:01<stoopkid> i gotta head out now also, catch ya later
01.11.18 16:29:24<HMCf> < stoopkid> but probably most importantly: all code is dynamic prior to being annotated wit types... not sure what makes python code "unworthy" of verification
01.11.18 16:30:30<HMCf> python goes back to being dynamic as soon as you're in runtime, though
01.11.18 18:02:09<editable-dog>cppout would need some more fixing up..
01.11.18 18:02:33<editable-dog>at least a string escaping function, which im lazy to write
01.11.18 18:03:06<editable-dog>well, more stuff
01.11.18 18:20:17*** Connecting...
#AutoNomic> 01.11.18 18:35:14*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 9 months 9 days 24 minutes 27 seconds ago
                 *** Names: editable-dog kook lexx_[m] dadbod007[m] nemesis1[m] nikaala[m] reedhhw[m] koo5[m] genuinelyfx[m] stoopkid cantora dmiles Deadhand @ChanServ HMCf Tamara_ redfish64
                 *** End of /NAMES list.
01.11.18 18:35:32<editable-dog>> kdiff
01.11.18 18:35:44<editable-dog>Command 'kdiff' not found, but there are 17 similar ones.
01.11.18 18:35:50<editable-dog>well thanks, ubuntu, lol
01.11.18 18:36:02<editable-dog>good to know
01.11.18 19:50:41<kook> (cpython3) koom@koom-KVM ~/univar> cat kb_for_external_raw.n3
                 <kook> { ?W :t ?F. :T :not :F. } =>{ :a :a :a. } .⏎                                                (cpython3) koom@koom-KVM ~/univar> ~/Downloads/swap/cwm.py kb_for_external_raw.n3
                 <kook> #Processed by Id
                 <kook>         #    using base file:///home/koom/univar/kb_for_external_raw.n3
                 <kook>              @prefix : <#> .
01.11.18 19:50:43<kook>     
01.11.18 19:50:45<kook>      @forAll :F,
01.11.18 19:50:47<kook>                 :W .
01.11.18 19:50:49<kook>     {
01.11.18 19:50:51<kook>         :T     :not :F .
01.11.18 19:50:53<kook>         :W     :t :F .
01.11.18 19:50:55<kook>         
01.11.18 19:50:57<kook>         }     => {:a     :a :a .
01.11.18 19:50:59<kook>         } .
01.11.18 19:51:06<kook> rdflib is turning the :F into the ?F   :|
01.11.18 20:33:22<editable-dog>gotta play with bnode unification tomorrow, but things look promising
01.11.18 20:55:21*** Quit: kook (~sirdancea@89-24-59-26.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
02.11.18 06:51:31*** Join: koom (~sirdancea@130.200.broadband13.iol.cz, sirdancealot: koo5)
02.11.18 07:36:17*** Quit: koom (~sirdancea@130.200.broadband13.iol.cz) left #AutoNomic: Remote host closed the connection
02.11.18 10:31:07<editable-dog>kb
                 <editable-dog>:a :foo :b.
                 <editable-dog>{?b :foo ?a} <= {?a :foo ?b} .
                 <editable-dog>fin.
                 <editable-dog>query
                 <editable-dog>?WHAT :foo ?WHATELSE.
                 <editable-dog>fin.
02.11.18 10:31:16<editable-dog>eye goes into infoloop on this?
02.11.18 10:31:39* editable-dog yawns
02.11.18 11:19:14<editable-dog>(?X).
                 <editable-dog>{?Y :eq ?Y.} <= {?Y rdf:rest rdf:nil}.
                 <editable-dog>fin.
                 <editable-dog>query
02.11.18 11:19:16<editable-dog>(:banana) :eq (?fruit).
02.11.18 11:19:18<editable-dog>and this
02.11.18 11:19:22<editable-dog>and this and this and this
02.11.18 11:39:43<stoopkid> editable-dog: lol, eye seriously infloops on the :foo symmetry example ? it's in worse shape than i thought
02.11.18 11:45:11<editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
                 <editable-dog>:b :foo :a.
                 <editable-dog>:a :foo :b.
02.11.18 11:46:43<stoopkid> lol
02.11.18 11:46:47<stoopkid> what a joke
02.11.18 11:49:02<stoopkid> it's as if it doesn't even do an ep-check
02.11.18 11:49:09<stoopkid> so why is it even called "euler" XD
02.11.18 11:49:13<editable-dog>yeah
02.11.18 12:56:57<editable-dog>this should work, right? https://github.com/koo5/univar/blob/master/tests/existentials/bnode_unification
02.11.18 13:42:30<stoopkid> idk, what's the semantics of the rule "(?X)."
02.11.18 13:43:33<stoopkid> should be like, "forall ?X, exists ?l, ?l rdf:first ?X. ?l rdf:rest rdf:nil" ?
02.11.18 13:44:14<editable-dog>yes
02.11.18 13:44:39<stoopkid> seems like it should maybe work?
02.11.18 13:45:50<editable-dog>it feels like it should, i think i need to go back to a general way to unify two bnodes
02.11.18 13:49:36<editable-dog>pyin implements what i think is a subset of such semantics, and pyco even less
02.11.18 14:21:20<stoopkid> do you have a test like this? https://pastebin.com/tbeq211h
02.11.18 14:22:11<editable-dog>i dont think so, ill add it
02.11.18 15:42:58<dmiles> yuo knhow about logicmoo tests?   https://github.com/TeamSPoon/logicmoo_base/tree/master/t
02.11.18 15:43:07<dmiles> (the examples are tests as well)
02.11.18 15:59:00<stoopkid> dmiles: do you have tools to translate them to n3 by any chance?
02.11.18 16:01:59<dmiles> i dont but it seems like less than 8 hours of work
02.11.18 16:02:31<dmiles> writing that tool
02.11.18 16:03:23<dmiles> but also n3 isnt expressive enough for some of the tests
02.11.18 16:03:34<dmiles> but the simple ones it would be
02.11.18 16:04:32<dmiles> maybe the reason i brought those tests is your goal is to finaly be able to create an expressive enough language to express those tests
02.11.18 16:05:45<dmiles> i dont mean the way we've talked abotu mltt expressiveness.. i just mean in the sense of data
02.11.18 16:06:27<dmiles> (though i could have meant it as compared to mltt .. but i am not cruel)
02.11.18 16:09:37<stoopkid> if any of the terms have built-in meaning besides the basic N3 stuff like rdf lists and log:implies, then i would agree, but if they're just triple-sets with implications between them then we should be able to express them
02.11.18 16:11:04<dmiles> it ben that modal logic stuff thast mighty be harder for n3
02.11.18 16:11:27<dmiles> such as infering things that bill knows.. dispite all teh things that bill knows is specificed
02.11.18 16:11:59<dmiles> that stuff you could jsut skip over
02.11.18 16:12:15<dmiles> stuff you dont need to skip over is ..
02.11.18 16:13:47<dmiles> https://github.com/TeamSPoon/logicmoo_base/tree/master/t/inference_test/soundness
02.11.18 16:32:45<HMCf> n3 with e:findall is expressive enough
02.11.18 16:33:05<HMCf> for anything you could possibly do anyway. :-|
02.11.18 16:33:47<HMCf> n3 with e:findall is just a bad, awkward, but "interesingly mathematically constrained" prolog.
02.11.18 16:38:38<dmiles> would you include the ability to express something is "not nescisiary true" vs expressing that something is "not true at all" as being what the term expressiveness is about?
02.11.18 16:42:32<dmiles> i think things that are even as simplistic modal logic goes beyond the capability of the expressiveness levels
02.11.18 16:43:15<stoopkid> dmiles: if we get to the point that we have MLTT in n3, then we can surely express those notions; and HMCf claims that e:findall will give us at least the amount of expressiveness necessary for MLTT
02.11.18 16:43:53<stoopkid> for example, in my Dreadbury Mansion problem, i actually proved that it was necessarily true that Agatha killed herself
02.11.18 16:43:58<dmiles> lol
02.11.18 16:44:14<dmiles> i actualy agree with that mltt is less exrtresive than n3
02.11.18 16:44:43<stoopkid> well, MLTT also has at least the expressiveness of n3 :)
02.11.18 16:44:55<dmiles> i mean to say i agree that n3+findall is a ton more expresseive than mltt will ever be
02.11.18 16:45:26<stoopkid> when you say these things it would probably help if you provided proofs
02.11.18 16:46:01<dmiles> what about this question:   "not nescisiary true" vs expressing that something is "not true at all" ?
02.11.18 16:46:15<dmiles> is that even possible for you guys in mttl or n3?
02.11.18 16:46:26<dmiles> pease prove to me that you can express this
02.11.18 16:46:31<dmiles> please prove to me that you can express this
02.11.18 16:46:47<stoopkid> you mean "not necessarily true" vs. "necessarily not true" ?
02.11.18 16:46:57<dmiles> yes
02.11.18 16:47:00<dmiles> that will do
02.11.18 16:47:53<stoopkid> ok: 1. take your KB, and put it into a record type
02.11.18 16:48:21<dmiles> but you must provide a way to compare them non textualyl
02.11.18 16:48:31<dmiles> ok go on
02.11.18 16:49:38<stoopkid> this record type is ofc a type, so it has proofs, which are, in a particular very concrete sense, the set of structures that satisfy the constraints of the type
02.11.18 16:50:18<stoopkid> so call your record type R, you can have a structure S of type R
02.11.18 16:51:31<stoopkid> you can form propositions about these structures, i.e. given a structure S of type R, you can ask a proposition P(S) about it
02.11.18 16:51:46<stoopkid> further, you can quantify over all the structures of type R
02.11.18 16:52:21<stoopkid> so if i want to say that P is necessarily true in these kinds of structures, i would say: "forall S : R, P(S)"
02.11.18 16:52:45<stoopkid> if i want to say that P is not necessarily true, i would say: "not (forall S : R , P(S))"
02.11.18 16:53:11<stoopkid> if i want to say that P is necessarily not true, i would say: "forall S : R, not(P(S))"
02.11.18 16:53:29<dmiles> and what S's xdoes that -seconds form create?
02.11.18 16:53:44<dmiles> and what S's does that second form create?
02.11.18 16:53:47<stoopkid> if i want to say that P is possibly true, in the sense that there actually is at least one possibility that satisfies P, i would say: "exists S : R, P(S)"
02.11.18 16:54:07<stoopkid> "create"?
02.11.18 16:54:29<dmiles> the answer i am looking for that it would create a logical closure that tests S on later unification
02.11.18 16:54:56<dmiles> that is S would be created
02.11.18 16:55:09<stoopkid> "created"? for what purpose? when?
02.11.18 16:55:38<dmiles> created so any uses of ity like in the case of a consequent the consequent is usable
02.11.18 16:55:53<stoopkid> "usable"?
02.11.18 16:56:13<dmiles> "forall S : R, not(P(S))" => Z(S).
02.11.18 16:56:20<stoopkid> do we need to have the discussion about distinctions between roles of inferencers and roles of knowledge-representation again?
02.11.18 16:56:23<dmiles> i would want to know the values of Z
02.11.18 16:56:26<dmiles> of Z(S)
02.11.18 16:56:45<stoopkid> you can apply literally whatever arbitrary inferencing methods you want to this
02.11.18 16:57:00<stoopkid> and that has nothing to do with expressiveness
02.11.18 16:57:15<dmiles> ah so you are saying the experssiveness doesnt mater at runtime.. it was just a compile time thing
02.11.18 16:57:16<stoopkid> expressiveness is fundamentally a KR thing
02.11.18 16:57:36<stoopkid> at least in the sense that we're using it in here
02.11.18 16:58:17<dmiles> i guess thats why it sounds so ignorant to me all the time
02.11.18 16:58:25<stoopkid> like the proofs i provide that SOL is more expressive than FOL for example are proofs that SOL is more expressive than FOL *in terms of KR*
02.11.18 17:01:00<dmiles>  have a differnt understanding of what expressiveness is for sure
02.11.18 17:01:40<dmiles> hopefully you gouys will find a differnt word soon other than expressiveness for your concept
02.11.18 17:02:34<dmiles> since i agree "SOL is more expressive than FOL" but i dont agree that is the expressiveness actualyl you guys refer to
02.11.18 17:03:46<dmiles> ti think expressivenessthat you refer to is actualy "undocumentable capability"
02.11.18 17:04:32<dmiles> for example why HMCf says that the cabilities of his immagine HOL can never be rerpesented as axioms
02.11.18 17:05:04<dmiles> that SOL cannot have proofs that show what it did
02.11.18 17:05:10<dmiles> "it can only do"
02.11.18 17:05:34<dmiles> this is what i meant by "undocumentable"
02.11.18 17:06:15<dmiles> under this interpresation expressiveness is no longer having to do with expressions
02.11.18 17:06:20<stoopkid> i have no idea what you're talking about now :)
02.11.18 17:06:47<dmiles> tha tis probably for the best
02.11.18 17:07:15<dmiles> it is like trying to talk about sex with someone who doesnt have it
02.11.18 17:07:26<dmiles> vs with somone that does
02.11.18 17:07:50<dmiles> until they are experinced at it they really dont know what you mean
02.11.18 17:08:38<dmiles> once yuo have designed expressive and non expressive systems.. you have a hard time knowing what is being changed
02.11.18 17:08:53<dmiles> i kean until then
02.11.18 17:09:00<stoopkid> sounds like you're the one with "undocumentable capabilities"? if we're the asexual ones in this metaphor we've at least got documentation for the properties of the asexuality :)
02.11.18 17:09:35<dmiles> do you remember that discussion yuo had with HMCf.. where he explained you you about SOL proofs and you were in shock?
02.11.18 17:09:47<stoopkid> no
02.11.18 17:09:57<dmiles> i'll pull it up.. that was the context
02.11.18 17:19:49<dmiles> got the log.. having to save it and then come up wuitht heh reight greps
02.11.18 17:20:22<dmiles> it was arround  Session Start: Mon Dec 12 23:39:55 2016
02.11.18 17:36:00<dmiles> hrrm is going to take a while to find
02.11.18 17:48:10<dmiles> it was HMCf assertion that SOL cannot express its own axioms
02.11.18 17:48:50<dmiles> which is why FOL can have proofs and SOL cannot
02.11.18 17:49:48<dmiles> it sounded like that SOL is too expressive to be expressed :P
02.11.18 17:50:25<dmiles> i wasnt part of the conversation but followed it
02.11.18 17:51:19<dmiles> [10:54] <HMCa> ofc mltt is even further up, above general recursive, so his notion that mso might express mltt has always been super-laughably-lulstastic to me. ;-)
02.11.18 17:51:31<dmiles> that was it.. sorry.. but..
02.11.18 17:51:55<dmiles> does that not go agaist he posit being m ade about RDF?
02.11.18 17:52:35<dmiles> as i understand it HMCa thinks    that    MLTT is the mmost expressive.. folowed by MSO
02.11.18 17:53:10<dmiles> now it seesm he things that something less expressive can impl somethnig more expressive?
02.11.18 17:53:32<dmiles> (or has he changed the expressiveness scales again .. angain from again)
02.11.18 18:07:39<stoopkid> idk i still have to examine some things in this area in closer detail, what you quoted him saying is not what you claimed him (or me) saying though
02.11.18 18:09:05<stoopkid> SOL is at least as expressive as MSO, trivially, would you agree?
02.11.18 18:09:34<stoopkid> and HOL is at least as expressive as SOL, also trivially?
02.11.18 18:10:40<stoopkid> and MSO is at least as expressive as FOL, which itself is at least as expressive as propositional logic, both trivially?
02.11.18 18:13:37<stoopkid> also SOL is at least as expressive as dyadic/binary SOL which is at least as expressive as monadic/unary SOL?
02.11.18 18:14:36<stoopkid> all trivially? Via literal syntactic inclusions that are definitionally meaning-preserving?
02.11.18 18:16:15<stoopkid> and further, that MLTT’s type system *is* HOL?
02.11.18 18:18:02<dmiles> the differnt  between dyadic/binary and monadic/unary  would be the maximum number of quantifiers per expression?
02.11.18 18:18:47<dmiles> where monadic/unary you would be restructive to only one wantified var?
02.11.18 18:18:56<dmiles> where monadic/unary you would be restructive to only one quantified var?
02.11.18 18:19:56<dmiles> (i am assumiung this is why that MSOL was created is to see what happens when you make such restrictions)
02.11.18 18:20:31<dmiles> if the goal was to restrict expressiness than i have nbo doubt that was accomplished
02.11.18 18:20:39<stoopkid> maximum arity of relations you can quantify over
02.11.18 18:22:27<stoopkid> relations/predicates
02.11.18 18:22:39<stoopkid> however you’re looking at it
02.11.18 18:27:03<stoopkid> so you agree with hierarchy i laid out?
02.11.18 18:27:13<stoopkid> MLTT == HOL
02.11.18 18:27:24<stoopkid> HOL >= SOL
02.11.18 18:27:38<stoopkid> SOL >= DSOL
02.11.18 18:27:39<dmiles> though i suppose the expressiveness would make things *harder* but in reduced arity sigutions you can still express the same things
02.11.18 18:27:51<stoopkid> DSOL >= MSOL
02.11.18 18:28:01<stoopkid> MSOL >= FOL
02.11.18 18:28:09<dmiles> in reduced arity situations*
02.11.18 18:28:15<stoopkid> FOL >= prop logic
02.11.18 18:29:02<dmiles> "FOL >= prop logic" if we are to see "prop logic" as the inabilty to quantify anything that makes sense
02.11.18 18:29:14<stoopkid> yes
02.11.18 18:29:32<stoopkid> just your basic connectives, no quantifiers
02.11.18 18:30:31<dmiles> what would make DSOL > MSOL greater if a person was to be able to construct sentences that contain mulitple quantifiers?
02.11.18 18:31:23<dmiles> since once you break that limitation you can use three MSOLS to create a single DSOL expression
02.11.18 18:31:47<stoopkid> i said >= not >
02.11.18 18:31:58<dmiles> i get the = part
02.11.18 18:32:06<dmiles> but not the > part
02.11.18 18:32:25<editable-dog>HMCf: ok, you should check out pyco
02.11.18 18:32:27<stoopkid> we’ll come back to the > if we can at least agree on >=
02.11.18 18:32:49<dmiles> >= i thought means = AND > both
02.11.18 18:32:58* editable-dog is going to zzz
02.11.18 18:33:01<stoopkid> how would that work
02.11.18 18:33:26<dmiles> N >= M.. means that N can be > and = both
02.11.18 18:33:40<stoopkid> editable-dog: ill check it out tonight too
02.11.18 18:34:21<dmiles> so DSOL can be tho = and > is what I thought was meant by >=
02.11.18 18:34:28<stoopkid> dmiles: s/and/or/
02.11.18 18:34:49<dmiles> ok in this case both = OR >
02.11.18 18:35:21<dmiles> mainly both is the where i was focused on
02.11.18 18:35:35<editable-dog>cool
02.11.18 18:35:56<editable-dog>and dont forget that uppercase vars are forcedly universal
02.11.18 18:36:22<editable-dog>and dont use same strings for vars and uris
02.11.18 18:36:37<editable-dog>the relevant tests are in simple, existentials and lists_pyco
02.11.18 18:36:40<stoopkid> editable-dog: nice
02.11.18 18:38:00<stoopkid> dmiles: DSOL can trivially express every MSOL expression just by syntactic inclusion right?
02.11.18 18:38:27<dmiles> yes
02.11.18 18:38:37<stoopkid> like every MSOL expression is *already* a DSOL expression, no translation necessary
02.11.18 18:38:50<stoopkid> so DSOL is “at least as expressive” yea?
02.11.18 18:38:52<dmiles> MSOL can express any DSOL using logical connectives though right?
02.11.18 18:39:40<stoopkid> we’ll come back to that, this is the one question in the hierarchy ive yet to prove for myself
02.11.18 18:39:58<stoopkid> the common consensus though is apparently no
02.11.18 18:40:32<dmiles> i didnt want to accept that either yet that was what TimBL used to sell my people on tripples
02.11.18 18:40:57<dmiles> and effecively he was correct
02.11.18 18:41:40<stoopkid> so we agree on >= at least and the only question there is whether its > or if its =
02.11.18 18:42:13<stoopkid> do you agree with the other layers of the hierarchy?
02.11.18 18:42:15<dmiles> the question is about the > part only .. the = is a differnt qquestion
02.11.18 18:42:42<dmiles> >= ammounts to agreeing on BOTH questions
02.11.18 18:42:53<stoopkid> like do you agree that HOL >= SOL >= DSOL ?
02.11.18 18:43:12<dmiles> which even you said you havient come to a dission on at least one of the two parts of >=
02.11.18 18:45:09<dmiles> what i think happens is that expressiveness equivance takes about =  and more expressiveness talks about the >
02.11.18 18:45:18<dmiles> i dont htink you cna ever have both
02.11.18 18:45:36<dmiles> unless you wanted epxressiveness to refer to two differnt things
02.11.18 18:45:53<dmiles> i understand that "can be" is what you meant
02.11.18 18:46:22<dmiles> but "can be =" is not the question it is really at what point is it >
02.11.18 18:47:48<dmiles> can be equal to the lesser is fine.. but if the lesser "can be = " to the greater than that makes > a real question
02.11.18 18:49:17<dmiles> so i am saying one would have to come up with an expressiion in DSOL that is not expressable in MSOL
02.11.18 18:49:33<dmiles> which i dont think is possible
02.11.18 18:50:02<dmiles> so the ">" part of ">=" seems invalid
02.11.18 18:50:56<dmiles> whoud SOL>=FOL is fine
02.11.18 18:51:22<dmiles> s o SOL>=FOL is fine ... just not MSOL vs DSOL
02.11.18 18:51:29<dmiles> or even MSOL vs SOL
02.11.18 18:52:26<dmiles> HOL >= SOL  is prably ok as well
02.11.18 18:53:52<dmiles> I have a DFOL vs TFOL program i wrote to contrast their simujlarity.. the DSOL program is algrythemical more complex
02.11.18 18:54:24<stoopkid> >= is not “> and =“ its “> or =“ or in other words, “at least as big/expressive”
02.11.18 18:55:59<dmiles> at least as (but not more?)
02.11.18 18:56:28<dmiles> i can agree at least as.. but not more
02.11.18 18:56:58<dmiles>  DSOL is at least as but not more so than MSOL
02.11.18 18:57:22<dmiles> if that is what you meant.. i agree
02.11.18 19:01:18<dmiles> this is ussualy the point that everyone says they have no idea what i am talking about
02.11.18 19:01:30<dmiles> or what i am on about
02.11.18 19:01:58<dmiles> which is ussually them just being honest
02.11.18 19:02:38<dmiles> which is fine by me
02.11.18 19:03:55<stoopkid> “at least as but not necessarily more, could just be equal, but maybe could be more”
02.11.18 19:04:56<dmiles> why not write   MSOL >=<  SDOL ?
02.11.18 19:05:17<dmiles> why not write   MSOL >=<  DSOL   if you are not sure?
02.11.18 19:05:59<stoopkid> what does “>=<“ mean? “Greater than or equal or less than” ?
02.11.18 19:06:07<dmiles> yes
02.11.18 19:06:28<stoopkid> because we know DSOL is not less than MSOL, trivially
02.11.18 19:06:42<stoopkid> so we can rule out the <, leaving us with >=
02.11.18 19:06:50<dmiles> but its only a hypothethical thoyught experiment
02.11.18 19:07:04<dmiles> but its only a hypothethical thought experiment?
02.11.18 19:07:09<stoopkid> ?
02.11.18 19:07:19<dmiles> since ther eis no way to be use about > ?
02.11.18 19:07:44<dmiles> since there is no proof of > ?
02.11.18 19:08:22<dmiles> or are you just saying you not sure if > is even possible?
02.11.18 19:09:05<dmiles> i mean you said that you are not sure if > is true
02.11.18 19:09:54<dmiles> and TimBL and most logicains whom are experts have disproved >
02.11.18 19:10:13<dmiles> what making you inclined to belive > ?
02.11.18 19:11:28<dmiles> it would have to be something based in a hypothetical thought experment "that if we could come up with.. A >= B then surely A >= B"
02.11.18 19:11:44<dmiles> which i see that is all that you are doing
02.11.18 19:11:57<dmiles> i dont mind the thought experiment
02.11.18 19:13:29<stoopkid> h/o eating dinner sorry
02.11.18 19:14:08<dmiles> n/p
02.11.18 19:23:52<dmiles> https://en.m.wikipedia.org/wiki/Assume_a_can_opener
02.11.18 19:26:10<dmiles> A physicist, a chemist, and an economist who were stranded on a desert island with no implements and a can of food. The physicist and the chemist each devised an ingenious mechanism for getting the can open; the economist merely said, "Assume we have a can opener"!
02.11.18 19:28:12<dmiles> in some ways even HOL >= SOL is such a phrase as "Assume we can define HOL!"
02.11.18 19:28:48<dmiles> Assume MLTT = HOL
02.11.18 19:28:58<dmiles> yet know one knows what eitehr are
02.11.18 19:29:20<dmiles> yet none knows what eitehr are or if they are even vaguely relatable
02.11.18 19:29:33<stoopkid> dmiles: the hierarchy i laid out are definitive conclusions, not hypothetical assumptions, also these things have definitions its not like we dont know what they are
02.11.18 19:29:40<dmiles> which technically they are not even relatable :P
02.11.18 19:30:39<dmiles> if you knew what they are how can you say things like <stoopkid> MLTT == HOL
02.11.18 19:31:08<dmiles> and HMCf says the opposite like..
02.11.18 19:31:34<dmiles> [13:33] <HMCf> n3 with e:findall is just a bad, awkward, but "interesingly mathematically constrained" prolog.
02.11.18 19:31:52<dmiles> [13:32] <HMCf> n3 with e:findall is expressive enough
                 <dmiles> [13:33] <HMCf> for anything you could possibly do anyway. :-|
02.11.18 19:32:41<dmiles> itsd liek the oppostite things get said every time
02.11.18 19:32:53<dmiles> perhaps the theory is evoloving.. that is fine
02.11.18 19:33:38<dmiles> its funny i agree with you guy salmsot every time you say the oppostite
02.11.18 19:33:45<dmiles> (of what you say the last time)
02.11.18 19:34:06<dmiles> i mean at least you guys are right 1/2 the time!
02.11.18 19:34:52<dmiles> but.. when relating the unrelatable .. that is harder.
02.11.18 19:36:24<stoopkid> dmiles: i havent personally verified the e:findall thing but you’re wrongly assuming that this would somehow negate what i said about MLTT == HOL
02.11.18 19:36:55<dmiles> ok i have an idea of what MLTT is in your thinking .. what is HOL?
02.11.18 19:38:12<stoopkid> https://en.m.wikipedia.org/wiki/Higher-order_logic
02.11.18 19:38:23<stoopkid> see the section on quantifier scooe
02.11.18 19:38:28<stoopkid> scope*
02.11.18 19:39:27<dmiles> Right it actualyl says that HOL is differnt than 3rd order logic
02.11.18 19:39:50<dmiles> yet you have a defination yet for 3rd order?
02.11.18 19:40:23<dmiles> since according to your canp you dont 3accept third order logic even exists yet
02.11.18 19:40:38<dmiles> that everyting above 2nd is decidably HOL
02.11.18 19:41:06<dmiles> since according to your camp they strongly object to the existnce of third order logic even exists yet
02.11.18 19:41:52<dmiles> whereas my camp created several orders of logic below HOL
02.11.18 19:42:34<dmiles> so your camp needs tpo pick a new language
02.11.18 19:42:40<dmiles> instead of buggering mine
02.11.18 19:43:46<dmiles> logicians had it firts before Martin Lof
02.11.18 19:50:10<dmiles> each order is about creating (making existential) the determinations of the provious order
02.11.18 19:51:01<dmiles> where we state having bags of axioms or second order logic in the same way that 2nd order bags first order
02.11.18 19:51:22<dmiles> where we state having bags of axioms *over* second order logic
02.11.18 19:51:32<dmiles> in the same way that 2nd order bags first order terms with preds
02.11.18 19:53:27<dmiles> set theory specifically is designed to turn a blind spot to everyting above one level of bagging
02.11.18 19:54:08<dmiles> to try to start bagging sets into sets . you just end up with more sets
02.11.18 19:54:37<dmiles> which is why such the blind spot exists
02.11.18 19:56:11<dmiles> if instead, that the theory was capable of moving to a sententional logic it would not have made a jump between SOL and HOL
02.11.18 19:56:35<dmiles> but would have attempted to be capable of expressing Modal Logics as well
02.11.18 19:57:47<dmiles> such as quantifying upon modal sentences
02.11.18 19:59:46<dmiles> which is why many set theorists have had to stop at MLTT claiming that it is the most practical "toplevel"
02.11.18 20:00:30<dmiles> since they are confused enough about sets of sets
02.11.18 20:01:02<dmiles> so having at least an exacape MLTT whiuchb seems slightly more expressive must be the highest HOL
02.11.18 20:02:25<dmiles> this  makes that model of expressiveness that removes 90% of all of logic out of the way not very usefull to logicians
02.11.18 20:03:21<dmiles> except for those trying to defend the curry-howard isomorhism
02.11.18 20:05:17<dmiles> which is why i have no doubt that HMCf is correct on this matter with what i pasted
02.11.18 20:06:28<dmiles> and i was not shocked the way you were to hear him say SOL axioms are too hard to be written down
02.11.18 20:07:05<dmiles> (his tatments was that the only way to wriote down SOL proofs woudl be to denegrade it to Henkin semanmtics)
02.11.18 20:07:47<dmiles> (his statments was that the only way to write down SOL proofs would be to denegrade it to Henkin semanmtics .. so by definition cant be )
02.11.18 20:08:38<dmiles> which just shows a blattent attempt at vacant expressiveness
02.11.18 20:09:32<dmiles> (less.. not more)
02.11.18 20:09:42<dmiles> i took that to be his misunderstanding of SOL
02.11.18 20:10:07<dmiles> but let it go as that "let assume there is a can opener"
02.11.18 20:11:36<dmiles> to me i'd put MLTT to be less expressive than 3rd order logic
02.11.18 20:11:46<dmiles> but more than SOL
02.11.18 20:12:05<dmiles> in fact i am not superised everyone love to equate it to MSOL
02.11.18 20:12:18<dmiles> not everyone .. but some
02.11.18 20:13:23<dmiles> logical system such as CycL which goes even into 5th and 6th order logic end up being more expressive than 3rd order
02.11.18 20:14:15<dmiles> which MLTT is less expressive than 3rd order
02.11.18 20:14:59<dmiles> at least now I understand MLTT a bit better i am not surprised
02.11.18 20:15:49<dmiles> steriotypical third order logics are like LTL
02.11.18 20:16:36<dmiles> which is why MLTT has to lose all its LTL reasoning after the compile phase is over
02.11.18 20:17:39<dmiles> as it was really LTL reasoning that MLTT is barely able to emulate for at least long enough that it can leverage some erasures
02.11.18 20:19:18<dmiles> in order for system to be expressive enough it would need to retain inferencial capabilities throughout
02.11.18 20:20:24<dmiles> the ability to quantify (create) new contraints like i asked about earlier
02.11.18 20:21:18<dmiles> again i am sure none of what i say makes sense
02.11.18 20:22:57<dmiles> since i feel liek at best you guys are hoping to catch up to type theorists
02.11.18 20:23:41<dmiles> which once you feel adequately equipped you will become de-equipped to do 3rd Order
02.11.18 20:24:03<dmiles> lets alone 4th order
02.11.18 20:57:38<stoopkid> when i say HOL i mean the union of the Nth order logics at every order N
02.11.18 20:58:47<stoopkid> iow, the definition on that wiki page under the section “quantifier scope”
02.11.18 21:01:37<stoopkid> i dont have a “camp”
02.11.18 21:02:26<stoopkid> im an anarchist, you think i willingly accept appeal to authority? :P
02.11.18 21:03:08<stoopkid> no idea what you’re talking about wrt “SOL proofs”
02.11.18 21:04:40<stoopkid> i honestly dont understand what argument you could even be making about the properties of these logics if you dont even think they have definitions
02.11.18 21:05:10<dmiles> i dont think MLTT is retated to HOL
02.11.18 21:05:39<dmiles> it is merely related to SOL and FOL
02.11.18 21:05:56<stoopkid> how can you make that claim when you arent even working with definitions
02.11.18 21:06:10<stoopkid> apparently *any* definitions
02.11.18 21:06:22<stoopkid> not even just “my” definitions
02.11.18 21:06:26<dmiles> can you tell me what SOL is ?
02.11.18 21:06:46<dmiles> SOL is the defination i gave above right/
02.11.18 21:07:17<dmiles> ] <dmiles> in the same way that 2nd order bags first order terms with preds
02.11.18 21:07:26<dmiles> or is that defiantion wrong?
02.11.18 21:07:53<dmiles> which defiantion above of mine did you claim i didnt say?
02.11.18 21:10:26<stoopkid> SOL is a many-sorted quantifier logic, with one sort representing objects and for every arity n a sort representing *all possible* n-ary relations on those objects
02.11.18 21:11:27<dmiles> also defined MLTT as substandard LTL (but also i could even say a realizaion of CTL* as well)
02.11.18 21:11:56<stoopkid> or you could just like, read an actual definition: https://en.m.wikipedia.org/wiki/Second-order_logic
02.11.18 21:12:15<stoopkid> since thats where i get all this “mumbo jumbo”
                 <dmiles> good so we both now understand SOL
02.11.18 21:12:27<dmiles> in what way is mine differnt?
02.11.18 21:14:14<stoopkid> didnt say it was different, but i also dont know that its the same either, idk what a “bag” is
02.11.18 21:14:31<dmiles> the SOL page is fine.. the HOL page 70% was wrtten by peopel utterlyt clueless
02.11.18 21:15:07<dmiles> (such as people into type theory)
02.11.18 21:15:35<dmiles> come on .. really?
02.11.18 21:15:42<dmiles> a bag is a unordered set
02.11.18 21:16:17<dmiles> a bag is what you get when a set is uncounablke
02.11.18 21:16:43<dmiles> A Set extends the bag in two important ways. First, the elements in a set must be unique; adding an element to a set when it is already contained in the collection will have no effect. Second, the set adds a number of operations that combine two sets to produce a new set.
02.11.18 21:17:06<dmiles> from http://web.engr.oregonstate.edu/~sinisa/courses/OSU/CS261/CS261_Textbook/Chapter08.pdf
02.11.18 21:17:40<dmiles> a Logical Bag shares the same defination
02.11.18 21:18:24<stoopkid> so... a set?
02.11.18 21:18:39<stoopkid> sets are already unordered
02.11.18 21:18:42<dmiles> a set places too many restrictions on a Bag
02.11.18 21:19:11<dmiles> a Bag can be empty
02.11.18 21:19:17<dmiles> a bag can be infinate
02.11.18 21:19:21<stoopkid> a set can be empty
02.11.18 21:19:29<stoopkid> a set can be finite
02.11.18 21:19:38<stoopkid> infinite*
02.11.18 21:19:52<dmiles> bags can have the same eleents
02.11.18 21:19:59<dmiles> sets cannot
02.11.18 21:20:15<dmiles> a bag is not a member of itself
02.11.18 21:20:45<stoopkid> ok so bags are proper multisets
02.11.18 21:20:52<stoopkid> so... no
02.11.18 21:21:17<stoopkid> you’re completely modifying the definition of SOL if you’re talking about bags instead of sets
02.11.18 21:21:40<dmiles> well whomever thought SOL was about sets was mistaken
02.11.18 21:21:51<stoopkid> lol wow
02.11.18 21:21:55<dmiles> yep
02.11.18 21:21:58<stoopkid> idk what to even say to that
02.11.18 21:22:20<dmiles> there we go that is the first corruption of SOL that ddidnt work for me
02.11.18 21:23:21<stoopkid> ok so, there’s nothing wrong with creating a many-sorted logic based on multisets of objects in one of the sorts
02.11.18 21:23:33<dmiles> unless you are talking about mathmatical logic that which is inccomplatibel with meta-mathmatical logic
02.11.18 21:23:45<dmiles> as explained by Chaitin
02.11.18 21:23:48<stoopkid> but lets differentiate between the two concepts rather than just letting these concepts have literally no meaning
02.11.18 21:24:04<stoopkid> so we have bag-SOL and set-SOL
02.11.18 21:24:08<stoopkid> k?
02.11.18 21:24:12<dmiles> ok
02.11.18 21:24:40<stoopkid> all my claims are about the set versions of the nth order logics
02.11.18 21:24:58<stoopkid> I make no claims whatsoever about bag versions
02.11.18 21:25:15<stoopkid> you can, but that’s a different topic
02.11.18 21:25:58<stoopkid> and i really dont want to change the topic until we reach agreement on the current topic since this is the millionth time we’ve debated the exact same things
02.11.18 21:26:01<dmiles> can you decrible 3rd and fourth order set-Based logic>?
02.11.18 21:26:22<dmiles> or does it stop at SOL and become HOL?
02.11.18 21:27:03<dmiles> since it set base logic indeed that would be a case as i saw it
02.11.18 21:27:33<stoopkid> its already described on the wiki page i linked
02.11.18 21:27:34<dmiles> which even LTL would be too expressive for a set-based logic
02.11.18 21:27:55<dmiles> whuich is probably why LTL was too expressive for MLTT
02.11.18 21:28:20<stoopkid> i never mentioned LTL and make no claims about it
02.11.18 21:28:28<dmiles>  MLTT is a way is more expressive than Set-Based logics as well
02.11.18 21:28:29<stoopkid> so lets not change the topic
02.11.18 21:28:46<dmiles> ok whayt is the topic?
02.11.18 21:29:32<stoopkid> right now its the expressiveness hierarchy of the different orders of these set/relation-based logics
02.11.18 21:29:53<dmiles> set based logics are not relation based
02.11.18 21:29:58<stoopkid> if we cant agree on the results in this topic then we might as well not even try on the more advanced stuff
02.11.18 21:30:06<stoopkid> sets are unary relations...
02.11.18 21:30:29<dmiles> ok if you wanted to restrict relations to uniary holders of sets .. we can do that
02.11.18 21:31:09<dmiles> we can do that twice
02.11.18 21:31:11<stoopkid> nope, SOL and the other orders allow for quantifying over relations of arbitrary arity
02.11.18 21:31:17<dmiles> (then nothing is left above that)
02.11.18 21:31:46<stoopkid> MSOL is the one that restricts arity to just unary
02.11.18 21:31:50<dmiles> "stops at SOL"
02.11.18 21:32:58<dmiles> ok i can agree your heirachy works on a set-based logic
02.11.18 21:33:09<dmiles> but who in their right mind would use such?
02.11.18 21:33:17<dmiles> certainly not a logician
02.11.18 21:33:25<dmiles> maybe a math person
02.11.18 21:34:05<stoopkid> do you actually agree with the claims i made about the hierarchy? ie you see it as trivially obvious that:
02.11.18 21:34:09<dmiles> or a person that was trying to relate a logic that works for math
02.11.18 21:34:17<stoopkid> HOL >= SOL
02.11.18 21:34:27<stoopkid> SOL >= DSOL
02.11.18 21:34:36<stoopkid> DSOL >= MSOL
02.11.18 21:34:46<stoopkid> MSOL >= FOL
02.11.18 21:34:55<stoopkid> FOL >= prop logic
02.11.18 21:35:28<stoopkid> You agree that every single one of these is trivially obvious *fact* not some “assume a can opener” bs?
02.11.18 21:40:16<stoopkid> take your time and check each one as thoroughly as you need to cause im not changing the topic until we agree cause i dont want to be having the same discussion 100 more times
02.11.18 21:44:16<stoopkid> further, do you agree that this list of claims works regardless of whether we’re talking about set-logics or bag-logics?
02.11.18 21:55:07<stoopkid> (note: wrt "but who in their right mind would use such?" i have absolutely no normative views on what logics you should or shouldn't use, not until the question is placed into specific context, i'm merely analyzing the properties of given definitions of various logics)
02.11.18 21:56:31<stoopkid> (i.e. i make no claims that there couldn't be "better" logics than these, but also i'm not simply gonna "assume a can opener" :P )
02.11.18 22:32:55<dmiles> i have to be back in an hour
02.11.18 22:33:24<dmiles> but i can say this doesnt work work for bag-logics .. i dont know about set-logics
02.11.18 22:34:54<dmiles> i'll take your word for set-logics
02.11.18 22:37:02<dmiles> for set logics ..  i guess HOL = anythig greater than SOL huh
02.11.18 22:37:53<dmiles> since MLTT > SOL i suppose oyou can pretend its HOL
02.11.18 22:38:07<stoopkid> don't take my word for it
02.11.18 22:38:20<stoopkid> i'm not going to debate you about expressiveness until you can agree on how this all works
02.11.18 22:38:23<dmiles> oh there are tons of peopel as confused as you.. i understand
02.11.18 22:38:59<dmiles> its harder to understand how so many peopel an be so confused
02.11.18 22:39:08<dmiles> but i see it so i belive it
02.11.18 22:39:53<dmiles> i dont see debating it will do anyone any good
02.11.18 22:40:19<stoopkid> i agree, this is logic...
02.11.18 22:40:25<stoopkid> there shouldn't even be a "debate" in the first place
02.11.18 22:41:15<dmiles> i cant really debate it until you leanr logic that is not really related to math
02.11.18 22:41:19<stoopkid> but note i'm not the one popping into your chatroom to tell you that all your plans are just the result of some academic conspiracy theory...
02.11.18 22:41:27<dmiles> or at least find common ground
02.11.18 22:41:50<stoopkid> you're the one who brings up the debate here over and over and over again
02.11.18 22:41:54<dmiles> yes but you are finding one really narrow view and thinking all of achedmeia thinks it
02.11.18 22:42:33<dmiles> which if you studied logic you'd see the type theory based set-logic view is not shared by those who studied logic
02.11.18 22:42:53<dmiles> only by the people in ##dependent that will admit they never studied logic
02.11.18 22:43:21<stoopkid> idc what *anybody's* doing :-|
02.11.18 22:43:26<stoopkid> i'm analyzing the consequences of definitions
02.11.18 22:43:30<stoopkid> you don't even have definitions
02.11.18 22:43:32<stoopkid> end of debate
02.11.18 22:43:59<dmiles> i have definitions but you wont read physical books to leanr them
02.11.18 22:44:15<dmiles> read some physical books and not the internet
02.11.18 22:44:22<dmiles> and you weill see things as i do
02.11.18 22:44:30<stoopkid> err...
02.11.18 22:44:33<stoopkid> wow dude
02.11.18 22:45:10<stoopkid> if these are the best arguments you can come up with in favor of whatever it is "your camp" does, it's a total waste of my time
02.11.18 22:45:15<dmiles> read about 3rd order logic in a textbook is what i am asking
02.11.18 22:45:30<stoopkid> i'm not spending money i don't have on a physical textbook
                 <dmiles> then about 4th order etc
02.11.18 22:45:46<dmiles> and see where MLTT fits into that
02.11.18 22:45:50<stoopkid> i'm not spending money i don't have on an e-book either
02.11.18 22:46:05<stoopkid> if you can't link me to a free online resource, or *write it yourself*, you're wasting my time
02.11.18 22:46:54<stoopkid> if you have questions about the proofs of my claims, i'll be happy to provide references, *or write them myself*, but only if you have specific and serious questions
02.11.18 22:47:15<stoopkid> i'm not wasting my time on this anymore i've spent *literally* hundreds of hours going around in circles with you about this
02.11.18 22:47:28<stoopkid> and the best you can say about it now is "you need to be reading physical books not the internet"
02.11.18 22:47:29<stoopkid> wtf
02.11.18 22:48:30<dmiles> since you continuesly espoused the same misunderstandings I assume you havent studied in the last two year
02.11.18 22:48:33<dmiles> s
02.11.18 22:49:03<dmiles> or are at least not studying wehat you need iot
02.11.18 22:51:23<dmiles> i am not going to change i banked everything on my views .. i hav e done nothing else in my life except this
02.11.18 22:51:39<dmiles> if i was wrong i was at least serious
02.11.18 22:52:23<stoopkid> well you are not being serious at all at the current moment
02.11.18 22:52:58<dmiles> i just have a hard time accepting someone who barily studied logic or off the internet has even 1/2 my understand
02.11.18 22:53:08<dmiles> ing
02.11.18 22:53:33<stoopkid> so your logic here is "appeal to authority" and that authority is yourself?
02.11.18 22:53:40<dmiles> in this case yes
02.11.18 22:53:51<stoopkid> and yet you can't provide proofs
02.11.18 22:53:58<dmiles> have i tried yet?
02.11.18 22:54:30<stoopkid> you probably should be since i provide at least an informal proof if not a formal one along with every claim i make
02.11.18 22:54:35<dmiles> when i get back from shopping tonight i'll see what books i foind will be usefull for you
02.11.18 22:54:59<stoopkid> unless they're free i'll probably literally never read them
02.11.18 22:55:02<dmiles> that will help explain high order logics
02.11.18 22:55:13<dmiles> i'll try for sure to make sure they are free
02.11.18 22:55:43<stoopkid> cool, i'll be happy to read your references
02.11.18 22:57:16<stoopkid> note: your credentials
02.11.18 22:57:20<stoopkid> mean absolutely nothing to me
02.11.18 22:57:26<stoopkid> didn't i tell you i'm an anarchist?
02.11.18 22:57:47<stoopkid> appeal to authority will not work on me, especially if that authority is just yourself
02.11.18 22:58:19<stoopkid> (but i wouldn't care if you literally appealed to God herself either)
02.11.18 23:00:41<stoopkid> if you want me to believe something that you claim, you have one and only one route: prove it
02.11.18 23:01:07<stoopkid> don't just make wild accusations that i'm just part of some conspiracy to undermine prolog
02.11.18 23:41:53<dmiles> the only "conspiracy" i think there is..  is that peopl learn just enough logic that they can dirnk functional programming coolaid
02.11.18 23:42:26<dmiles> but not enough to do logic
02.11.18 23:43:14<dmiles> nothing to do with programming in it vs prolog
02.11.18 23:46:37<dmiles> here is a book i endorse:  https://ac.els-cdn.com/074310669390028F/1-s2.0-074310669390028F-main.pdf?_tid=78521e67-48b3-4221-b935-b1edc12ebc08&acdnat=1541216933_18d52a69f147b85645f55a5969dd0489
02.11.18 23:48:09<stoopkid> endorse for what
02.11.18 23:48:32<dmiles> as about moving on to stonger logics
02.11.18 23:48:38<dmiles> stronger
02.11.18 23:49:14<dmiles> though that one may be too much about programing maybe something better is https://www.sciencedirect.com/science/article/pii/S0004370210000445
02.11.18 23:49:59<dmiles> btu i'll look for soething that goes over the definations a bit better
02.11.18 23:50:08<stoopkid> you've stated yourself that you don't even know about the properties of the logics i've been referring to so you're baselessly claiming  that other logics you have in mind are somehow "stronger"
02.11.18 23:50:46<stoopkid> it's these repeated baseless claims that make me cast doubt on this entire thing you're trying to promote to me
02.11.18 23:51:04<dmiles> it soeesm pwerhaps i shouldnt bother
02.11.18 23:51:28<dmiles> i think both of us are too disgusted by now
02.11.18 23:52:05*** Part: dmiles (dmiles@c-73-190-111-74.hsd1.wa.comcast.net) left #AutoNomic: [No reason given]
02.11.18 23:52:55<stoopkid> what a waste of time
03.11.18 00:37:37<HMCf> can't say that I never warned
03.11.18 00:38:32<HMCf> editable-dog: I will look some now
03.11.18 04:25:23<editable-dog>o/
03.11.18 06:33:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cropggbfdbruuxbq) left #AutoNomic: Quit: Connection closed for inactivity
03.11.18 06:55:22-tomaw- [Global Notice] freenode #live 2018 is underway. Most talks are being live-streamed and if you cannot join us in person you can tune in at https://www.youtube.com/watch?v=BFpe8BnlOgA
03.11.18 07:59:13*** Join: vbmithr (~vb@luminar.eu.org, vbmithr: Vincent)
03.11.18 09:38:56*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qikntxesxmzrsxut, stoopkid: stoopkid)
03.11.18 10:18:05<editable-dog>yo
03.11.18 13:06:03<editable-dog>stoopkid: did they make you do any js yet?
03.11.18 13:06:19<editable-dog>i think im gonna try vue.js for pyco visualization
03.11.18 13:08:42<stoopkid> you mean did they make me do any at school?
03.11.18 13:08:48<editable-dog>yeah
03.11.18 13:09:01<stoopkid> no but i've done a ton of js before
03.11.18 13:09:14<editable-dog>oh
03.11.18 15:07:12<editable-dog>just realized you put comments in the shorten function
03.11.18 15:07:20<editable-dog>this function bugs me hehe
03.11.18 15:07:42<editable-dog>its broken and i should use namespaces instead
03.11.18 15:27:52<editable-dog>ok its quite nice, you should check it out
03.11.18 15:29:09<editable-dog>bnode unification is borken tho
03.11.18 15:33:34<editable-dog>i used your idea, its just a tree printout, no arrows and stuff
03.11.18 15:39:54<editable-dog>ok here we go
03.11.18 16:08:38<editable-dog>something's still broken..
03.11.18 19:32:37<editable-dog>fixed
03.11.18 19:41:33<editable-dog>sudo apt install mplayer
03.11.18 19:41:38<editable-dog>oops
03.11.18 19:41:51<editable-dog>http://loworbit.now.im/univar/pyco_visualization/
03.11.18 20:43:09<editable-dog>https://github.com/koo5/univar/blob/master/tests/panla/addition2
03.11.18 23:19:05<editable-dog>so, i think the challenge now is to show if its possible to do anything useful with this, if the ep check stays as strict as it is
03.11.18 23:39:16<stoopkid> editable-dog: the addition test should probably be more like: https://pastebin.com/5tBk1NXY
03.11.18 23:40:08<stoopkid> is the ep-check strict?
03.11.18 23:42:45<stoopkid> if we can show how to do lambda intros, elim and computation rules then we can do lots of stuff
04.11.18 05:05:32<editable-dog>stoopkid: we cant build up list in the head if we have only one existential
04.11.18 05:05:50<editable-dog>well, we can build up a one-item list
04.11.18 05:09:53<editable-dog>so, err, im using a bit of a hack there, the ?l1_0 is the variable name that the head of the list in the body desugars to
04.11.18 05:10:22<editable-dog>just so i dont have to type it out desugared
04.11.18 05:35:45<editable-dog>the ep check, currently, if it sees two bnodes from same rule and variable, cuts
04.11.18 05:36:35<editable-dog>so
                 <editable-dog>https:/
04.11.18 05:36:41<editable-dog>oops
04.11.18 05:36:45<editable-dog>:zero a :Nat.
                 <editable-dog>{?x :has_succ ?y. ?y a :Nat} <= {?x a :Nat}.
04.11.18 05:36:53<editable-dog>query
04.11.18 05:36:54<editable-dog>:zero :has_suc ?one. ?one :has_suc ?two.
04.11.18 05:36:56<editable-dog>fails
04.11.18 10:18:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qikntxesxmzrsxut) left #AutoNomic: Quit: Connection closed for inactivity
04.11.18 14:26:17*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-tguxmedaovmsnpwk, stoopkid: stoopkid)
04.11.18 14:28:47<stoopkid> "{[] rdf:first ?X; rdf:rest ?L} <= { ?L rdf:rest [ ] }" only has 1 existential
04.11.18 14:29:45<stoopkid> well, only 1 existential that can't be curried into a universal
04.11.18 14:30:07<editable-dog>i dont know what currying it into universal means if that matters
04.11.18 14:30:30<stoopkid> well, we might interpret that formula as meaning:
04.11.18 14:32:31<stoopkid> forall ?X, forall ?L, (exists ?l2, ?L rdf:rest ?l2) -> (exists ?l3, (?l3 rdf:first ?X) ^ (?l3 rdf:rest ?L))
04.11.18 14:32:39<editable-dog>also, im not sure what your're reacting to
04.11.18 14:33:01<stoopkid> "<editable-dog>stoopkid: we cant build up list in the head if we have only one existential"
04.11.18 14:33:49<editable-dog>i mean like {(a b c) a list } <= {something}
04.11.18 14:36:21<stoopkid> we should be ok with just 1 existential in the head if we're just going for MLTT rules
04.11.18 14:36:49<stoopkid> MLTT rules basically only use 1 existential in the consequents at a time
04.11.18 14:37:19<editable-dog>that formula is a bit too dense for me, sorry
04.11.18 14:37:52<editable-dog>ok cool. ive also been able to rewrite some of our tests into this form
04.11.18 14:38:43<stoopkid> well, basically "(exists ?x, something1) -> (something2)" is equivalent to "forall ?x, (something1) -> (something2)" essentially by currying
04.11.18 14:39:31<stoopkid> like we can say the bnode in the rule-body is an existential, but it can be "curried away"
04.11.18 14:41:31<editable-dog>well, an existential quantification in a body means something like "there is at least one binding for this var", right? so it can as well be an universal, with the only difference that we might get multiple equivalent results?
04.11.18 14:44:30<stoopkid> pretty much, and it seems like whether or not we allow the multiple equivalent results when treating it as an existential is pretty much a matter of choice, at least afaict at this point; in both cases there needs to be at least one binding
04.11.18 14:44:43<stoopkid> (for the rule to be able to succeed, i mean)
04.11.18 14:57:50<editable-dog>got time today?
04.11.18 14:59:00<stoopkid> im free for the next 2 hours or so
04.11.18 15:20:36<editable-dog>wanna work on anything?
04.11.18 15:25:23<stoopkid> editable-dog: i should probably check out your visualizer and go through some of the tests with it, how do i set that up?
04.11.18 15:25:54<editable-dog>well, you just have to make pyco run
04.11.18 15:26:15<editable-dog>so, you need a virtualenv like i set up on the vps the other day
04.11.18 15:27:13<stoopkid> do you have a doc that goes through everything needed to run it?
04.11.18 15:27:22<editable-dog>no
04.11.18 15:27:44<editable-dog>would be nice if you can update the readme as you go along
04.11.18 15:28:00<editable-dog>i mean..not along
04.11.18 15:28:48<editable-dog>or, well, lets jump on the vps and do it together
04.11.18 15:29:19<stoopkid> cool
04.11.18 15:38:00<editable-dog>oops
04.11.18 15:38:09<editable-dog>you start a new session?
04.11.18 15:38:44<stoopkid> no i was trying to do ctrl+b ] to scroll up, you must have hit something else before i hit ]
04.11.18 15:38:49<editable-dog>i keep forgetting virtualenv doesnt spawn a subshell
04.11.18 15:39:06<editable-dog>i think i just ctrl-D'd
04.11.18 15:39:17<editable-dog>which made tmux quit
04.11.18 15:39:31<stoopkid> well im in a new session now :)
04.11.18 15:56:11<stoopkid> looks like its running but i'm not seeing the visualizations when i point my browser to that directory
04.11.18 16:12:11<stoopkid> well, i see "{} <= {/Alice> /tolerates> /Bob> . }" in the VPS's pyco_visualization dir
04.11.18 16:25:35<editable-dog>use left and right arrow
04.11.18 16:25:55<stoopkid> ah, fancy
04.11.18 16:28:12*** Join: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz, sirdancealot: koo5)
04.11.18 16:50:15<koom> if you look at tests/panla/hello0b, as far as i can tell, this strict ep check makes it impossible to build lists in body
04.11.18 16:51:25<stoopkid> so, looking at the tests/simple directory, it seems it skips all the files without the ".tau" suffix?
04.11.18 16:51:36<koom> no
04.11.18 16:51:49<koom> as far as i know no
04.11.18 16:52:49<koom> no
04.11.18 16:53:09<koom> some tests dont have a shouldbe though
04.11.18 16:54:16<stoopkid> hrm; for some reason it's not generating the trace.js when i run it locally
04.11.18 16:54:51<koom> you're running pyco_runner.sh right?
04.11.18 16:55:13<stoopkid> yea, same command from the README
04.11.18 16:56:30<koom> i cant think of a reason...
04.11.18 17:08:14<koom> i should add another trace_flush there somewhere
04.11.18 17:22:57<stoopkid> biab, dinner
04.11.18 17:23:38<koom> nice
04.11.18 18:36:14<koom> what would lambda introduction mean here?
04.11.18 19:09:07*** Quit: koom (~sirdancea@89-24-51-174.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 240 seconds
04.11.18 20:50:47<stoopkid> editable-dog: good question cause i don't think we ever decided on how hypothetical judgements should be represented
04.11.18 20:51:34<stoopkid> representing the Nat intros was straightforward once we had existentials to work with
04.11.18 20:51:52<stoopkid> ----------------
04.11.18 20:52:01<stoopkid> zero : Nat
04.11.18 20:52:07<stoopkid> x : Nat
04.11.18 20:52:09<stoopkid> -------------
04.11.18 20:52:15<stoopkid> suc x : Nat
04.11.18 20:52:28<stoopkid> the first translates to "zero a Nat"
04.11.18 20:52:54<stoopkid> the second one translates to "{?x suc ?y. ?y a Nat} <= {?x a Nat}"
04.11.18 20:53:18<stoopkid> now let's look at the lambda/implication intro rule:
04.11.18 20:53:49<stoopkid> a : A |- b : B
04.11.18 20:53:52<stoopkid> -----------------
04.11.18 20:54:10<stoopkid> lambda a . b : A -> B
04.11.18 20:55:23<stoopkid> we know how to represent most of this, but not the hypothetical judgement part, i.e. the "a : A |- b : B"
04.11.18 20:55:53<stoopkid> first we need a type-formation rule for implication, i.e. how do we talk about "A -> B" being a type
04.11.18 20:56:04<stoopkid> A : Set           B : Set
04.11.18 20:56:07<stoopkid> ------------------------
04.11.18 20:56:11<stoopkid> A -> B : Set
04.11.18 20:56:37<stoopkid> this one we can do just with existentials:
04.11.18 20:57:34<stoopkid> {?t impl_domain ?A. ?t impl_codomain ?B. ?t a Set} <= {?A a Set. ?B a Set}
04.11.18 20:57:57<stoopkid> so the intro rule would look something like:
04.11.18 21:00:09<stoopkid> {?l lambda_arg ?a. ?l lambda_return_value ?b. ?l a ?t} <= {?t impl_domain ?A. ?t impl_codomain ?B. ?a a ?A |- ?b a B}
05.11.18 03:03:55*** Join: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz, sirdancealot: koo5)
05.11.18 06:42:19*** Quit: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 244 seconds
05.11.18 08:45:50<editable-dog>hmm
05.11.18 09:30:52*** Join: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz, sirdancealot: koo5)
05.11.18 12:09:06*** Quit: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
05.11.18 12:42:42<stoopkid> HMCf: if we take koo's scheme that uppercase var names are universal and lowercase var names are existential, we wouldn't break homoiconicity by using explicit quantification would we?
05.11.18 12:45:28<stoopkid> editable-dog: so it looks like we can maybe represent hypothetical judgements but the representation of the natural deduction rules becomes significantly more complex
05.11.18 13:47:46*** Join: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz, sirdancealot: koo5)
05.11.18 13:52:06<editable-dog>lowercase var names are existential, unless they appear in the body
05.11.18 13:53:29<editable-dog>i still dont have a good idea what's your idea wrt modeling lc
05.11.18 13:53:42<editable-dog>or modeling natural deduction rules?
05.11.18 13:55:04<editable-dog>also, i cant see what ep-check scheme we should use, neither fully permissive or fully strict seems to make any sense
05.11.18 14:01:37<editable-dog>im trying to remember if we had some more complex ep check scheme in mind?
05.11.18 14:03:17<editable-dog>if we cut just on the basis of encountering bnodes with same names from same rules, we cant recurse
05.11.18 14:03:44<editable-dog>for example
05.11.18 14:03:52<editable-dog>{ [ ] rdf:first ?X; rdf:rest ?L} <= { ?L rdf:rest [ ] }.
                 <editable-dog>:zero a :Nat.
                 <editable-dog>{?x a :Nat. ?y :has_succ ?x.} <= {?y a :Nat}.
                 <editable-dog>{rdf:nil :has_len :zero} <= {}.
                 <editable-dog>{?list :has_len ?len} <= {?list rdf:rest ?rest. ?rest :has_len ?rest_len. ?rest_len :has_succ ?len.}.
05.11.18 14:15:02<stoopkid> hrm
05.11.18 14:15:31<stoopkid> we basically need to be able to recurse on structures that are already built up, but not recurse in order to build up the structures...
05.11.18 14:37:41<stoopkid> it must just be that we're not doing it like euler
05.11.18 14:41:54<stoopkid> https://pastebin.com/i76Svfx3
05.11.18 14:45:26<stoopkid> so in the case of "sub", ?x will bind to an existential that we already have, essentially it's coming from the query-side via ?y
05.11.18 14:46:07<stoopkid> in the case of "sup", ?z will bind to a new existential, essentially it's coming from the kb-side via the "suc" rule
05.11.18 14:47:29<stoopkid> in the case of "rec", both ?x and ?y are coming from the query-side, but after recursing on itself twice it will be called with the same terms
05.11.18 14:55:37<stoopkid> so in the case of "?y sub ?r", when we call "?x suc ?y" from the body, we're calling the rule that ?y was generated from in the same position, so we have the binding for ?x available already and we just substitute it in
05.11.18 14:56:17<stoopkid> in this case we basically need to treat ?x like a constant distinct from ?y
05.11.18 14:57:06<stoopkid> in the case of "?y sup ?r", when we call "?y suc ?z", we're generating a new existential that needs to be treated as equivalent to ?y
05.11.18 15:04:33<editable-dog>whats the sub rule supposed to be doing?
05.11.18 15:06:01<stoopkid> nothing but recursing on some Nat
05.11.18 15:06:44<editable-dog>"sub" is for "substructure"?
05.11.18 15:06:51<stoopkid> right
05.11.18 15:08:20<editable-dog>so this rule counts up?
05.11.18 15:08:37<stoopkid> down; "sup" counts up
05.11.18 15:21:53<editable-dog>fwiw, i think i can implement such check into the ep check
05.11.18 15:22:26<editable-dog>if we're dealing with a bnode look at all the vars it contains
05.11.18 15:23:09<editable-dog>if any is bound to a bnode, check those recursively
05.11.18 15:23:53<editable-dog>count all the hops 
05.11.18 15:25:00<editable-dog>check that some count somewhere is going down
05.11.18 16:20:28*** Quit: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 245 seconds
05.11.18 18:20:07<HMCf> stoopkid: I thought that case sensitivity thing was just temporary
05.11.18 18:36:07<stoopkid> HMCf: doesn't have to be
05.11.18 18:57:34<HMCf> it probably should be?
05.11.18 19:10:18<stoopkid> HMCf: not sure why, but i guess that doesn't matter since i don't know how this thing is supposed to work at all really and i'm assuming that isn't gonna change any time soon
05.11.18 21:16:33*** Quit: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-ashebrqvlifzvylo) left #AutoNomic: Ping timeout: 252 seconds
05.11.18 21:16:59*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-zsqzwzavnkheblek) left #AutoNomic: Ping timeout: 250 seconds
05.11.18 21:17:01*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-rookywmlecmfkgyi) left #AutoNomic: Ping timeout: 276 seconds
05.11.18 21:17:25*** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-iohncvoeycgfbxal) left #AutoNomic: Ping timeout: 250 seconds
05.11.18 21:17:26*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-slsmpuquujyaosbz) left #AutoNomic: Ping timeout: 250 seconds
05.11.18 21:18:04*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-chgjqakomyyczhpr) left #AutoNomic: Max SendQ exceeded
05.11.18 21:18:18*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-wlmajuhgpivwbdux) left #AutoNomic: Ping timeout: 276 seconds
05.11.18 21:44:15*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-nijhwupmfbcgcqno, (unauthenticated): @reedhhw:matrix.org)
05.11.18 21:45:28*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vgkdeajoxxpziaxq, (unauthenticated): @koo5:matrix.org)
05.11.18 21:45:39*** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-ygdvvbwzyfyqeoba, (unauthenticated): @nemesis1:matrix.org)
05.11.18 21:46:55*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-zbzrfwiqomsddxop, (unauthenticated): @lexxus:matrix.org)
05.11.18 21:49:57*** Join: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-havqqnjtahfulogr, (unauthenticated): @dadbod007:matrix.org)
05.11.18 21:50:55*** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-efffeutlgsoyoxzb, (unauthenticated): @nikaala:matrix.org)
05.11.18 21:52:14*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-vnxqgvpnqapoqfoj, (unauthenticated): @genuinelyfx:matrix.org)
05.11.18 22:38:30*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-vnxqgvpnqapoqfoj) left #AutoNomic: Ping timeout: 252 seconds
05.11.18 22:39:04*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-vgkdeajoxxpziaxq) left #AutoNomic: Ping timeout: 252 seconds
05.11.18 22:39:20*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-zbzrfwiqomsddxop) left #AutoNomic: Ping timeout: 250 seconds
                 *** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-ygdvvbwzyfyqeoba) left #AutoNomic: Ping timeout: 250 seconds
05.11.18 22:39:21*** Quit: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-havqqnjtahfulogr) left #AutoNomic: Ping timeout: 260 seconds
05.11.18 22:39:30*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-efffeutlgsoyoxzb) left #AutoNomic: Ping timeout: 264 seconds
05.11.18 22:39:31*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-nijhwupmfbcgcqno) left #AutoNomic: Ping timeout: 264 seconds
05.11.18 23:28:29*** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-tmzggxemmslockji, (unauthenticated): @nikaala:matrix.org)
05.11.18 23:29:05*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-igbsahkgrqxiuhku, (unauthenticated): @lexxus:matrix.org)
05.11.18 23:29:32*** Join: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-dlrshzodgppafbgl, (unauthenticated): @dadbod007:matrix.org)
05.11.18 23:31:43*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-jxhtxfegsecouzrp, (unauthenticated): @reedhhw:matrix.org)
05.11.18 23:33:04*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-sacurujmpryynvoc, (unauthenticated): @genuinelyfx:matrix.org)
05.11.18 23:33:38*** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-bkpoayegxujqvipp, (unauthenticated): @nemesis1:matrix.org)
05.11.18 23:34:59*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-xefyhvqxbxsjkrwl, (unauthenticated): @koo5:matrix.org)
06.11.18 14:29:24<stoopkid> editable-dog: not sure about "counting", seems it's more of a binary thing of "query-side vs. kb-side"
06.11.18 14:39:06<stoopkid> "{?y sup ?r} <= {?y suc ?z. ?z sup ?r}", basically the only bnodes that the ep-check should be able to treat as constants for this rule should be those that can be "extracted" from ?y or ?r
06.11.18 14:40:06<stoopkid> "zero suc ?one. ?one suc ?two. ?two sup ?what."
06.11.18 14:41:34<stoopkid> from the perspective of the "?two sup ?what." call, the bnodes bound to ?one and ?two should basically be treated like new constant identifiers that have been added to the KB
06.11.18 14:46:15<stoopkid> but, hrm... this isn't quite right either
06.11.18 14:46:34<stoopkid> {?y sup ?r} <= {zero suc ?one. ?one sup ?r}
06.11.18 14:47:13<stoopkid> what i suggested would be ruling out the recursive call "?one sup ?r", when really this should only cut on the *second* such call



06.11.18 15:05:04<stoopkid> spoke with dmiles some more and he's now in agreement regarding the expressiveness stuff
06.11.18 15:06:02<stoopkid> turns out we were having a fundamental (and quite strange, imo) miscommunication regarding what the expressiveness hierarchy even was
06.11.18 15:07:09<stoopkid> turns out he was interpreting "X >= Y" as meaning "X has expressions that are expressible in Y, and that's the = part, and X also has expressions that aren't expressible in Y, and that's the > part"
06.11.18 15:08:47<stoopkid> and further he was interpreting my claims to be "constraints we are trying to impose prior to even having definitions of the things" rather than "claims that can either be proven/refuted about pre-existing definitions"
06.11.18 15:11:25<stoopkid> and also he had completely different interpretations of the definitions of pretty much everything from FOL to HOL



06.11.18 15:17:45<stoopkid> editable-dog: so let's look at how Agda would differentiate between the case of "{?y sup ?r} <= {?y suc ?z. ?z sup ?r}" and "{?y sup ?r} <= {zero suc ?one. ?one sup ?r}"
06.11.18 15:18:15<stoopkid> in both cases, we're generating a fresh bnode into ?z and ?one, respectively
06.11.18 15:18:47<stoopkid> Agda would let the second one recurse, but not the first
06.11.18 15:20:19<stoopkid> what's the difference? we can determine at compile-time that ?one is constant and ?z is not
06.11.18 15:24:32<stoopkid> actually nvm Agda fails termination check in the "{?y sup ?r} <= {zero suc ?one. ?one sup ?r}" situation as well
06.11.18 15:26:27<stoopkid> so i guess maybe we don't have to distinguish that situation from the other situations of recursing on freshly-generated bnodes
06.11.18 15:27:45<stoopkid> even fails termination check in situations that are "quite obviously" terminating:
06.11.18 15:27:46<stoopkid> https://pastebin.com/tx1A4bQx
06.11.18 15:30:02<stoopkid> even fails termination check in situations that are both "quite obviously" terminating as well as "quite obviously" only ever reducing the arguments to the recursion: https://pastebin.com/ANFwfmsF
06.11.18 15:32:58<stoopkid> so Agda would even rule out the following:
06.11.18 15:33:15<stoopkid> zero sup zero.
06.11.18 15:33:28<stoopkid> {?y sup ?r} <= {zero sup ?r}
06.11.18 15:36:17<stoopkid> so following Agda's logic, we can only recursively call a rule with arguments that were actually explicitly "extracted" from the arguments from the initial call
06.11.18 15:40:48<stoopkid> recursive Agda functions are a distinct situation from recursive natural-deduction rules though, but recursive natural-deduction rules seem to expect the same thing of only recursing on substructures explicitly extracted from the arguments to the initial call
06.11.18 15:44:45<stoopkid> Agda functions are apparently even more restrictive about recursion than we are
06.11.18 15:45:14<stoopkid> https://pastebin.com/EHxZacEd
06.11.18 15:50:52<stoopkid> otoh, our situation is less like Agda functions and more like Agda data-declarations:
06.11.18 15:50:54<stoopkid> https://pastebin.com/epDAUBPq
06.11.18 15:51:47<stoopkid> but Agda doesn't really tell us anything about inferencing over these..
06.11.18 16:01:02<stoopkid> so, yea, ultimately Agda tells us nothing here..
06.11.18 16:01:13<stoopkid> about any of our recursion woes at all, that is
06.11.18 16:21:54<stoopkid> ah, funny
06.11.18 16:22:27<stoopkid> if we use Agda's inferencer, it does have its own answer to this question
06.11.18 16:23:53<stoopkid> what it will do is just infloop until it times out...
06.11.18 16:27:39<stoopkid> https://pastebin.com/DH3A6D83
06.11.18 16:39:46<stoopkid> so at this point we only have two known (to us) possible approaches to this in order to be basing our work on existing research: either attempt to reinterpret the substructural-recursion termination checks from total functional programming into our ep-check, or figure out how the backchaining mechanism works in that one paper "On rules with existential variables: Walking the decidability line"
06.11.18 16:39:58<stoopkid> https://www.sciencedirect.com/science/article/pii/S0004370211000397
06.11.18 16:43:27<stoopkid> but tbh i'm really not interested in even researching any approach further until/unless HMCf says "yes that's the correct approach and here's a link to the paper that describes the algorithm"
06.11.18 17:21:28*** Join: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz, sirdancealot: koo5)
06.11.18 17:28:22*** Quit: koom (~sirdancea@37-48-34-57.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 246 seconds
06.11.18 19:21:25<editable-dog>what if i check that the current bnode has been created before the ep-item bnode?
06.11.18 20:24:51*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Ping timeout: 260 seconds
06.11.18 20:25:20*** Join: redfish64 (~tim@45.32.52.10, (unauthenticated): Unknown)
07.11.18 00:07:57<stoopkid> editable-dog: that would cut the loops undoubtedly, but i'm thinking there might be some issues with this approach but i'll need to do some more work to find a specific problem-case, but i think there's a similar solution that would avoid the possible problems with checking based on time-of-creation
07.11.18 00:08:48<stoopkid> we want to be looking not at time-of-creation but rather more strict: actual "containment" of the current bnode as a substructure of the ep-item bnode
07.11.18 00:10:57<stoopkid> so, like you were suggesting of recursively checking the bindings associated to the ep-item bnode and seeing if one of these is the same as the current bnode
07.11.18 00:11:51<stoopkid> that might've been what you were originally suggesting, not sure
07.11.18 00:17:46<stoopkid> i've gotta spend some time on a school project though so i'll be scarce for the next few days but will be around if you want me to look at anything in particular, i'll try and get ahead of my schoolwork so that i can devote some more time to this
07.11.18 00:50:44*** Join: zsqms[m] (zsqmsmatri@gateway/shell/matrix.org/x-ozhnempcrkxzmnxx, (unauthenticated): @zsqms:matrix.org)
07.11.18 00:56:58<koo5[m]> No i originally sugested checking counts along such nested bnode trails
07.11.18 00:57:40<koo5[m]> Anywway i pushed the order-of-creation version in the evening
07.11.18 00:59:32<koo5[m]> What can i say..i have to think about everything
07.11.18 01:01:00*** Part: zsqms[m] (zsqmsmatri@gateway/shell/matrix.org/x-ozhnempcrkxzmnxx) left #AutoNomic: "User left"
07.11.18 01:33:10<stoopkid> koo5[m]: well that's cool we might as well test the theory
07.11.18 01:33:34<stoopkid> i'll check that out soon
07.11.18 14:48:29<HMCf> I feel like you guys are (significantly) overcomplicating this for yourselves... you should not need to count anything, track origin of anything, track order/time of anything, check any structural relations, recurse on anything, etc...
07.11.18 14:52:34<HMCf> just keep a list of aliases with each binding in env, merge the lists when new bindings happen, and check the lists in the ep-check compare.  Assuming var names are made distinct (which they should be anyway) it doesn't need to be any more complicated or complex than that...
07.11.18 15:07:37<stoopkid> koo5[m]: do you understand what he means by this?
07.11.18 15:42:54<koo5[m]> Nope
07.11.18 15:49:57<koo5[m]> Well, its apparently euler terms
07.11.18 15:51:30<koo5[m]> I guess euler unifies by term, so each such unification produces a list of bindings?
07.11.18 16:13:28<koo5[m]> HMCf: unique variable names across what?
07.11.18 16:55:38<editable-dog>or he means a list of aliases in a sense of a chain of bindings
07.11.18 17:17:35<editable-dog>but then i dont see how it relates to ep check
07.11.18 17:19:23<editable-dog>anyway, im happy with what i coded up yesterday, i have one tweak in mind, and i want to figure out how it relates to your idea
07.11.18 17:20:33<editable-dog>at any case the principle is nice and simple and it makes several more tests happy
07.11.18 17:20:58<editable-dog>so im gonna play with more tests and try to do more stuff
07.11.18 17:21:27<editable-dog>btw, im in talks with a coding bootcamp company, and i think they like me
07.11.18 17:24:18<editable-dog>among other things, i like that it would be a flexible arrangement, where i could make some money and then take time off
07.11.18 17:27:46<stoopkid> nice, local or remote?
07.11.18 17:29:04<editable-dog>local
07.11.18 17:29:52<editable-dog>very nice commute time too
07.11.18 17:31:21<stoopkid> very cool, what would you be doing there?
07.11.18 17:31:43<editable-dog>mentoring programming novices
07.11.18 17:34:23<stoopkid> sounds like a nice gig
07.11.18 17:36:22<editable-dog>yeah
07.11.18 19:22:20<HMCf> koo5[m]: entirely unique within the document (like bnode skolem names... in fact exactly that because vars *are* bnodes...)
07.11.18 19:30:05<editable-dog>ok, and your idea of ep check is?
08.11.18 09:38:08*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-tguxmedaovmsnpwk) left #AutoNomic: Quit: Connection closed for inactivity
08.11.18 13:30:07*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lpxjelkduwtmnniz, stoopkid: stoopkid)
08.11.18 15:33:31<stoopkid> was thinking a bit about "why" type theory doesn't introspect on its functions, and why it would treat them as mathematical functions instead of as the algorithms that compute them
08.11.18 15:34:57<stoopkid> and i think i finally figured out why that is; basically, perhaps somewhat unintuitively, that information isn't what's actually there, from a constructive logic "proofs are witnesses of thing being proved" perspective
08.11.18 15:38:22<stoopkid> like, your function definition basically only contains the information of "this term is assigned to that term", and that's it, and this is in some sense "why" the computation/proof-simplification/equality rule for implications is beta-reduction instead of perhaps some hypothetically-more-desirable thing of "normalize to the 'optimal' algorithm that computes the function"
09.11.18 06:10:23<editable-dog>beyond me
09.11.18 12:14:43<HMCf> editable-dog: the ep check would not really be different, just the unification it uses changes
09.11.18 14:29:54<editable-dog>what do you mean check the lists?
09.11.18 16:50:45<HMCf> see if what is being unified to is in the list for what is being unified from (in senv)
09.11.18 16:51:22<HMCf> so have I mentioned, lately, that the semicon industry is terrible?
09.11.18 16:51:58<HMCf> three months ago I reported a functional problem to a radio chipset vendor...
09.11.18 16:52:19<HMCf> wifi radio
09.11.18 16:52:27<HMCf> this week they sent me a new firmware with the bug "fixed"
09.11.18 16:53:34<HMCf> not only is the functionality still failing in the same way, but now it also mangles packets too...
09.11.18 16:53:39* HMCf grumbles
09.11.18 17:03:23<editable-dog>still dunno what youre going on about
09.11.18 17:04:40<editable-dog>in the first place, i think we've shown that this idea to ep check by unification is wrong, because it rules out the situation when a rule was called with two vars and recurses with two consts, for example
09.11.18 17:05:36<editable-dog>second, an existential is a list of bindings, right? and these bindings can bind to more existentials, right?
09.11.18 17:06:29<editable-dog>so the comparison either takes this into account, or blindly cuts or blindly allows all recurions where we just pass some similar existential
09.11.18 17:07:06<editable-dog>so what ve'be been discussing was a scheme to disallow nonproductive recursions with this in mind
09.11.18 17:11:03<HMCf> on first, consts (etc) would be checked against the lists as well, so afaict that's still fine (?)
09.11.18 17:11:32<editable-dog>what lists?
09.11.18 17:12:36<HMCf> the list on each binding in env
09.11.18 17:12:39<HMCf> on second, all of the existentials bound would end up in the lists by the merge, so also still fine
10.11.18 03:00:49<editable-dog>idk
12.11.18 10:59:25*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lpxjelkduwtmnniz) left #AutoNomic: Quit: Connection closed for inactivity
12.11.18 13:33:37*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-snegoqfcjnviyxye, stoopkid: stoopkid)
12.11.18 15:18:41<editable-dog>yo
12.11.18 16:30:54<editable-dog>stoopkid: https://github.com/koo5/univar/blob/master/tests/clean/zzpanla/hello0h
13.11.18 02:30:40*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-06-76-68-81-154.dsl.bell.ca) left #AutoNomic: Ping timeout: 252 seconds
13.11.18 02:37:13*** Join: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-104-223.dsl.bell.ca, (unauthenticated): deadhand)
13.11.18 05:36:04<editable-dog>any ideas how to convert unary to decimal?
13.11.18 05:40:24<editable-dog>i think ill try to implement succ for decimal and use that
13.11.18 06:33:23<stoopkid> you have to count the succs
13.11.18 06:34:30<stoopkid> like count down on the unary number while counting up on a list of decimal digits like an odometer
13.11.18 06:34:46<editable-dog>yeah thats what i figured
13.11.18 06:35:22<stoopkid> unless you have some magic storage format that just lets you subtract the end-points
13.11.18 06:35:45<stoopkid> (not necessarily magic)
13.11.18 06:36:06<editable-dog>you mean that just tells me the length of the nat?
13.11.18 06:37:25<stoopkid> yea, like if it was just an array of succs you could just subtract the start and end points of the array and divide by the size of a succ
13.11.18 06:38:39<stoopkid> i guess you mean in this specific context though, in which case, counting's probably the only option
13.11.18 06:39:02<editable-dog>yep in the context of doing it in pure n3
13.11.18 06:40:12<editable-dog>i was wondering if i could pattern-match on the last 0 - 9 succs, produce a digit, pattern match on some digit + succ's combination, and so on
13.11.18 06:41:24<editable-dog>buti guess even if i came up with such a scheme, it would still involve matching against every single succ, so not any faster
13.11.18 11:58:08<HMCf> usually systems like this will internalize unary nats as bignum operations, similar to how lists get handled (replacing conses with native lists or dynamic arrays)
13.11.18 14:05:46<HMCf> euler.py is dead again already, and now jos is reviving eulerjs?
13.11.18 14:05:50<HMCf> XD
13.11.18 15:58:35<editable-dog>internalization will come later
14.11.18 08:00:35*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-snegoqfcjnviyxye) left #AutoNomic: Quit: Connection closed for inactivity
14.11.18 10:56:49*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bjwlppfewkjluqde, stoopkid: stoopkid)
15.11.18 00:59:26*** Quit: Tamara_ (sid238709@gateway/web/irccloud.com/x-hmhenahmxjvfojpw) left #AutoNomic: Ping timeout: 250 seconds
15.11.18 00:59:33*** Join: Tamara_ (sid238709@gateway/web/irccloud.com/x-vzzwigmidmiprrjx, (unauthenticated): Tamara)
15.11.18 05:17:22<editable-dog>working on string split and join builtins, so i can do more parsing
15.11.18 05:18:50<editable-dog><stoopkid> turns out he was interpreting "X >
                 <editable-dog>= Y" as meaning "X has expressions that are expressible in Y,
                 <editable-dog>and that's the = part, and X also has expressions that aren't
15.11.18 05:18:52<editable-dog>expressible in Y, and that's the > part"
15.11.18 05:18:57<editable-dog>sounds right?
15.11.18 05:19:47<editable-dog><stoopkid> we basically need to be able to re
                 <editable-dog>curse on structures that are already built up, but not recurse
15.11.18 05:19:48<editable-dog> in order to build up the structures...
15.11.18 05:20:00<editable-dog>thats exactly what the check currently implements
15.11.18 05:21:13<editable-dog><stoopkid> we want to be looking not at time-
                 <editable-dog>of-creation but rather more strict: actual "containment" of th
15.11.18 05:21:14<editable-dog>e current bnode as a substructure of the ep-item bnode
15.11.18 05:21:23<editable-dog>still not sure about that, doesnt sound quite right
15.11.18 05:22:52<editable-dog>would be nice if you guys tried to infiloop my current scheme
15.11.18 05:25:01<editable-dog>as on lc and typing, i was confused by what you wrote, i can imagine two approaches, either modeling, type checking and normalizing lambdas, or typechecking our n3logic rules
15.11.18 05:25:20<editable-dog>what you wrote seemed like a hybrid of both that i couldnt wrap my head around
15.11.18 05:25:57<editable-dog>modelling lc sounds like the easy one, so i think ill start on that at some point
15.11.18 08:29:04<stoopkid> "X >= Y" would be saying "X can express at least all the things that Y can, not necessarily more things"
15.11.18 09:20:57<koo5[m]> Ah
15.11.18 09:25:35<stoopkid> i'm working on getting the lc and type theory down to a set of rewrite rules which will hopefully make it more evident how to translate them to n3
15.11.18 09:26:42<stoopkid> i'm thinking we can just type-check n3logic rules directly but i'm working out the details
15.11.18 09:28:45<stoopkid> so far i've found that representing lambdas and "terms under contexts" as rewrite rules where the LHS is the context-variables and the RHS is the lambda/term-body, most of the basic mechanics of the lc & type theory are already represented
15.11.18 09:29:55<stoopkid> example, a rewrite rule "id ?x -> ?x" can be typechecked as having "id : A implies A"
15.11.18 09:31:30<stoopkid> (?R : forall ?A ?B) -> (forall ?A ?B : Set) ({?a : ?A} |- (?R ?a) : (?B ?a))
15.11.18 09:31:47<stoopkid> unfortunately that uses pred-vars... *shrug*
15.11.18 09:35:18<stoopkid> i'm not really sure how to eliminate the predvars, they're what i eliminated everything else to lol
15.11.18 09:39:16<stoopkid> the only other major problem i haven't solved with the lc/tt -> rewrite rules is how to properly represent contexts
15.11.18 09:40:46<stoopkid> i.e. do we actually need to pass around the "G" between our rules as some kind of list data-structure, or can "G" be modeled more naturally
15.11.18 09:44:41<stoopkid> koo5[m]: wrt your scheme, i don't think it would be inflooping
15.11.18 11:08:43<editable-dog>your scheme was that new bnode would be required to be "linked" from the old one?
15.11.18 11:18:53<stoopkid> if we're going by type theory's logic then it should only be able to recurse on arguments to the constructors
15.11.18 11:19:55<stoopkid> example:
15.11.18 11:20:00<stoopkid> data Nat : Set where
15.11.18 11:20:01<stoopkid>  zero : Nat
15.11.18 11:20:05<stoopkid>  suc : Nat -> Nat
15.11.18 11:20:22<stoopkid> the constructor zero has no arguments, the constructor suc has 1 argument, of type Nat
15.11.18 11:20:37<stoopkid> let's say we want to define a function:
15.11.18 11:20:43<stoopkid> f : Nat -> C
15.11.18 11:20:48<stoopkid> f zero = c-zero
15.11.18 11:21:00<stoopkid> f (suc n) = c-suc
15.11.18 11:21:30<stoopkid> to define a function from Nat to C using pattern-matching, we're making use of the elimination rule for Nat
15.11.18 11:22:17<stoopkid> what do we get available to define the terms c-zero and c-suc with?
15.11.18 11:22:43<stoopkid> let's look at a more general data declaration:
15.11.18 11:23:14<stoopkid> data R (a : A) : B -> Set where
15.11.18 11:24:07<stoopkid>  cons1 : arg11 : ArgType11 -> .... -> arg1N : ArgType 1N -> R a (getB arg11 ... arg1N)
15.11.18 11:24:10<stoopkid>  ...
15.11.18 11:25:28<stoopkid>  consM : argM1 : ArgTypeM1 -> ... argMQ : ArgType MQ -> R a (getBM argM1 ... argMQ)
15.11.18 11:25:57<editable-dog>hmm
15.11.18 11:26:17<stoopkid> now let's define a function out of this:
15.11.18 11:
15.11.18 11:26:55<stoopkid> g (cons1 a11 ... a1N) = c-cons1
15.11.18 11:26:58<stoopkid> ...
15.11.18 11:27:16<stoopkid> g (consM aM1 ... aMQ) = c-consM
15.11.18 11:28:26<stoopkid> we get a_ij : ArgType_ij
15.11.18 11:29:03<stoopkid> further, if ArgType_ij = R a b, for some i, j, then we get c : C(a_ij)
15.11.18 11:29:04<editable-dog>whats the : B in the data declaration?
15.11.18 11:29:28<stoopkid> an index, like for instance: Vector (A : Set) : Nat -> Set
15.11.18 11:29:52<editable-dog>ok
15.11.18 11:30:16<stoopkid> the stuff to the left of the ":" is left fixed across all the constructors to the type, and the stuff to the right is allowed to vary
15.11.18 11:30:45<stoopkid> apparently this actually makes a difference in terms of the logic but i'm still figuring out why exactly that is
15.11.18 11:31:37<stoopkid> so this "further, if ArgType_ij = R a b, for some i, j, then we get c : C(a_ij)" is where we get recursion and induction
15.11.18 11:32:22<editable-dog>where do we get a_ij?
15.11.18 11:32:51<stoopkid> from the pattern-matching for the function g
15.11.18 11:32:52<editable-dog>in the pattern matching part of g declaration you mean?
15.11.18 11:32:54<editable-dog>ok
15.11.18 11:33:18<stoopkid> so like in Nat
15.11.18 11:33:26<stoopkid> f : Nat -> C
15.11.18 11:33:51<stoopkid> f zero = c-zero; doesn't get to use anything really except for stuff that "already exists"
15.11.18 11:34:19<stoopkid> f (suc n) = c-suc, can make use of (n : Nat) and (c : C(n))
15.11.18 11:36:24<editable-dog>c?
15.11.18 11:36:34<stoopkid> err sorry, ((foo n) : C(n))
15.11.18 11:37:06<stoopkid> err, ((f n) : C(n))
15.11.18 11:37:50<editable-dog>ok
15.11.18 11:38:22<stoopkid> so we can only recurse onto substructures of the arguments that have the same type as the argument
15.11.18 11:38:39<stoopkid> (suc n) : Nat, and n is a substructure of (suc n) and also has type Nat, so we can recurse on it
15.11.18 11:39:04<editable-dog>well we can have mutual recursion
15.11.18 11:39:26<stoopkid> it's basically the same situation
15.11.18 11:40:01<stoopkid> one of the functions is reducing on its arguments, and the other function is also reducing on its arguments, so both functions when mutually recursing on each other will still reduce on their arguments
15.11.18 11:41:28<stoopkid> so in n3 we have:
15.11.18 11:41:31<stoopkid> zero : Nat
15.11.18 11:41:41<stoopkid> {?x suc ?y. ?y a Nat} <= {?x a Nat}
15.11.18 11:42:02<stoopkid> so let's say ?y is the suc of something
15.11.18 11:42:11<stoopkid> i.e. ?y = suc(n) for some n
15.11.18 11:42:28<stoopkid> then querying ?x suc ?y should bind ?x to n
15.11.18 11:44:04<stoopkid> so if we have {?y rec ?something} <= {...}, we can only have "?x rec ?somethingelse" in the body if "?x suc ?y"
15.11.18 11:44:38<stoopkid> which means we need something like {?y rec ?something} <= {?x suc ?y. ?x rec ?somethingelse}
15.11.18 11:45:18<stoopkid> so ?x is essentially "extracted" from the bindings that are "already known" to ?y
15.11.18 11:46:27<stoopkid> it would be really straightforward to statically check for this, but HMCf wants it done dynamically during ep-checking, and idk what to make of that really
15.11.18 11:56:28<editable-dog>well, it 
15.11.18 11:56:33<editable-dog>nvm
15.11.18 12:01:37<stoopkid> i mean, we could, it would basically be the same check, just during run-time, we're recursing on ?x in some rule, look at the last rule-call in the ep-table and make sure that ?x is some substructure of that argument
15.11.18 12:02:10<stoopkid> which can be done just by recursing over the structure of the value in the ep-table
15.11.18 12:02:55<stoopkid> but ofc HMCf 's gonna say that's all wrong, and then "try" to explain it to us in terms he knows we don't understand
15.11.18 12:05:56<editable-dog>hehe
15.11.18 12:08:04<editable-dog>so,talking about recursing with bnodes,  a recursion can only happen on a bnode that was freshly created since the last ep checkpoint, or on a bnode accessible from the bnode passed to us in that checkpoint, right?
15.11.18 12:09:08<editable-dog>so youre actually talking about checking current argument against what the original argument was at the original time
15.11.18 12:10:26<stoopkid> can't recurse on freshly-created bnodes at all, only on a bnode that's a substructure of a bnode already passed in as an argument
15.11.18 12:11:07<editable-dog>i mean without any check, this can happen
15.11.18 12:11:16<editable-dog>if it was reachable at the original time, it must have been created before tha
                 <editable-dog>t time
15.11.18 12:12:18<stoopkid> indeed, checking based on time-created will most assuredly cut all loops
15.11.18 12:12:51<editable-dog>it seems like my scheme exactly fulfills your requirements
15.11.18 12:14:30<editable-dog>only allows recursion as long as something that was reachable from the original bnode, and was not seen yet, it passed
15.11.18 12:14:50<stoopkid> i was thinking there might be a couple issues still, but it turns out that what i was thinking isn't even considered an issue, at least not from the standpoint of type theory / Agda termination-checking
15.11.18 12:15:29<editable-dog>i had to mull over it as well
15.11.18 12:19:27<stoopkid> it seems like it would allow most of the terminating recursions that Agda does, and would allow some more that Agda doesn't
15.11.18 12:20:09<editable-dog>eyah
15.11.18 12:33:08<HMCf> heh
15.11.18 12:33:11<HMCf>  < stoopkid> the only other major problem i haven't solved with the lc/tt ->
                 <HMCf>              rewrite rules is how to properly represent contexts
                 <HMCf>  < stoopkid> i.e. do we actually need to pass around the "G" between our rules
15.11.18 12:33:14<HMCf>              as some kind of list data-structure, or can "G" be modeled more
15.11.18 12:33:17<HMCf>              naturally
15.11.18 12:33:19<HMCf> ...
15.11.18 12:33:37<HMCf>  < stoopkid> but ofc HMCf 's gonna say that's all wrong, and then "try" to
15.11.18 12:33:39<HMCf>              explain it to us in terms he knows we don't understand
15.11.18 12:33:54<HMCf> not exactly, but yes. :-)
15.11.18 12:34:00<HMCf> here goes...:
15.11.18 12:34:30<HMCf> e:findall == predvars.
15.11.18 12:34:33<HMCf> done.
15.11.18 12:36:08<stoopkid> enlightening
15.11.18 12:37:02<HMCf> so "G" is not really some list structure... it is some graph structure, a context graph
15.11.18 12:37:44<HMCf> and we do "pass it around" but we pass it "through" recursive e:findall calls
15.11.18 12:38:35<HMCf> this is where we do that "intentionally break our decidability" thing
15.11.18 12:40:36<HMCf> we can't do hol "directly" in our rewrites, by design, because "no predvars"...
15.11.18 12:42:08<HMCf> so we're "stuck at one level" in our reasoning... until we bring e:findall into the picture as a level breaker, which allows us to run searches over predvars by re-invoking the reasoner at a new level
15.11.18 12:42:12<stoopkid> can you show an example query/kb that passes contexts around through e:findall?
15.11.18 12:46:27<HMCf> well, there is a bit of a caveat here... under everything we have implemented so far, no.. "just" e:findall is not enough, because right now we still have the entire kb stuck living entirely in one graph, the background knowledge context...
15.11.18 12:47:59<stoopkid> ok can you show it using the features that haven't been included yet ?
15.11.18 12:52:17<HMCf> well, just that one feature... but yes
15.11.18 12:52:31<HMCf> but later, i'll have to run in a sec
15.11.18 12:53:16<stoopkid> np
15.11.18 12:56:26<HMCf> what we can show within one graph is basic higher order reasoning, i.e. resolving some second order query by way of an e:findall search over a "predvar"...
15.11.18 12:57:16<HMCf> but ofc this is slightly distinct from level-breaking (that whole "orders and levels are not the same thing" thing plays here)
16.11.18 06:56:42<editable-dog>hm how do i actually do decimal succ with the number represented as a list of string digits?
16.11.18 07:09:00<stoopkid> you need succ on digits, and then a carry operation for when you roll over to the next digit
16.11.18 07:11:37<editable-dog>i figured out so much, but then got stuck on how to pattern match the whole number
16.11.18 07:12:29<editable-dog>i guess i need one rule to match against a list of length one
16.11.18 07:12:56<editable-dog>and one to recurse on the beginning
16.11.18 07:15:18<editable-dog>btw, i guess i passed the interview , but i'd only start around february/march
16.11.18 07:16:51<editable-dog>and i'd probably stick around for at least the length of the first course, until the end of july
16.11.18 07:20:06<stoopkid> nice, congrats
16.11.18 07:20:23<editable-dog>thx
16.11.18 07:57:06<stoopkid> https://pastebin.com/LA2BaH7d
16.11.18 07:57:15<stoopkid> not tested yet but might work
16.11.18 08:24:24<koo5[m]> Nice, ill try it when i get home
16.11.18 11:42:38<HMCf> I could've sworn euler.prolog used to fully implement e:fidall... but it currently seems to only support a scope argument and not a span argument... :-\
16.11.18 11:42:45<HMCf> *findall
16.11.18 14:00:25<editable-dog>hmm, doesnt quite work
16.11.18 16:59:46<editable-dog>this is hard
17.11.18 03:45:53<editable-dog>it seems to me, that not quite all lists exist
17.11.18 03:47:35<editable-dog>only those with length <= 3
17.11.18 03:48:26<editable-dog>building up anything longer, if you begin at the front, gets cut by ep
17.11.18 04:10:53<HMCf> not sure what you mean
17.11.18 04:13:19<editable-dog>?l0 first h. ?l0 rest ?l1. ?l1 first e. ?l1 rest ?l2..., etc, suppose youre trying to build up (h e l l o)
17.11.18 04:13:38<editable-dog>the first "first" has two rules to try:
17.11.18 04:13:48<editable-dog>(?X).
                 <editable-dog>{ [ ] rdf:first ?X; rdf:rest ?L} <= { ?L rdf:rest [ ] }.
17.11.18 04:14:27<editable-dog>the first rule will yield but then we fail on the second item
17.11.18 04:14:44<editable-dog>backtrack, we try to match the first "first" with the second rule
17.11.18 04:15:12<editable-dog>now it builds up a two-item list
17.11.18 04:16:10<editable-dog>then we backtrack and build up a three-item list, but thats the limit, because the second rule cant call itself indefinitely
17.11.18 04:21:54<HMCf> i guess i don't understand what you mean by "build up a list" here
17.11.18 04:22:34<HMCf> you don't need to construct any lists when they already exist, that is part of the poibt for having the all lists exist rule
17.11.18 04:23:48<HMCf> (and remember the all liss exist rule is metalogical, you can't actually express it properly within the language...)
17.11.18 04:24:06<HMCf> *point *lists
17.11.18 04:30:41<HMCf> "?L rdf:rest []" would match infinitely, yes, because there are an infinite number of list heads which have that bnode (whatever it is) as tail, already...
17.11.18 04:32:22<editable-dog>so the second rule would recurse infinitely?
17.11.18 04:35:54<stoopkid> "and remember the all liss exist rule is metalogical, you can't actually express it properly within the language..." so we should stop trying to do this via the list-rules as given by TimBL?
17.11.18 04:36:05<HMCf> yes, the search tree for an anonymous list is both inf wide and inf deep, so we have to cut it (which we do by saying "just assume any list search always matches"... making all lists exist)
17.11.18 04:37:13<HMCf> stoopkid: we've had several discussons on that already... :-P
17.11.18 04:38:02<stoopkid> so let's say i have "?l0 rdf:first x. ?l0 rdf:first y. ?l0 rdf:rest ?l1. ?l1 rdf:first z. ?l0 rdf:rest ?l2. ?l2 rdf:first w" all of these simply succeed?
17.11.18 04:38:07<HMCf> those list rules need to be in the engine's resolution method itself, not the kb
17.11.18 04:38:38<editable-dog>ok, i missed that part
17.11.18 04:39:22<HMCf> this is part of why i say it is easier to just start with internalized lists out of the gate
17.11.18 04:39:37<stoopkid> well
17.11.18 04:39:43<stoopkid> we did, but we inflooped it
17.11.18 04:39:49<editable-dog>lol
17.11.18 04:40:10<stoopkid> we were hoping to figure out the reasoning to cut the infloops by looking at the pure-triples version
17.11.18 04:40:27<stoopkid> but apparently the rules for pure-triples lists are... fake? idk a better word to use here
17.11.18 04:44:25<stoopkid> afaict the only solution to the inflooping problem with internalized lists is to say that vars can't bind to lists
17.11.18 04:46:02<stoopkid> but once we bring existentials into the picture and can infloop in the exact same way on those existentials, and can't have "vars don't bind to existentials", that solution doesn't appear to make any sense
17.11.18 04:46:14<stoopkid> which i've assumed is why you've never said "yea that's the solution"
17.11.18 04:46:31<HMCf> not sure what you mean, a var could bind to any node, list heads are not special
17.11.18 04:47:30<stoopkid> right so "that's not the solution"
17.11.18 04:47:40<HMCf> now, note that only well formed lists exist
17.11.18 04:48:43<HMCf> so going back to your example, ?l0 doesn't bind to anything...
17.11.18 04:49:32<stoopkid> i haven't been able to discern any "well-formedness" criteria for lists, other than the ones i already know intuitively but which haven't been backed up by any specs
17.11.18 04:50:23<stoopkid> in fact the closest things to "specs" about this make a point to note that lists can be "non-well-formed" in all sorts of ways
17.11.18 04:52:25<HMCf> all of the lists that exist per the all lists exist rule are well formed... that is not mutually exclusive with the presence of ill-formed lists in your kb
17.11.18 04:53:20<HMCf> only says that the lists which exist implicitly in the background are (all of the) well formed lists.
17.11.18 04:53:59<HMCf> "well formed" meaning single first/rest and eventually reaching nil (even if only at inf)
17.11.18 04:54:08<HMCf> (ofc...)
17.11.18 04:56:54<stoopkid> ok so vars can bind to list-heads, and we cut the loops this generates in the same way (whatever way that might be) that we cut the loops generated by the use of existentials?
17.11.18 04:58:00<HMCf> almost... it is two distinct (but related) cuts
17.11.18 05:01:25<HMCf> the ep check cuts arbitrary loop structures, the all lists exist cuts a specific hypertree structure ("all lists")
17.11.18 05:02:46<HMCf> (it is a strict hypertree because it is only all of the well formed lists)
17.11.18 05:04:22<HMCf> (including ill-formed lists would give you infinite hypergraphs...)
17.11.18 07:36:29*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bjwlppfewkjluqde) left #AutoNomic: Quit: Connection closed for inactivity
17.11.18 11:51:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qhdcxuhayphyypyx, stoopkid: stoopkid)
17.11.18 14:17:44<editable-dog>so, another curious thing
17.11.18 14:17:54<editable-dog>suppose we have a builtin that adds two numbers
17.11.18 14:19:10<editable-dog>{?x forever loops} <= {(?x 1) sum ?s. ?s forever loops}.
17.11.18 14:20:14<editable-dog>we recurse with a different new constant, but again it is the time of creation that is critical
17.11.18 14:21:25<editable-dog>but what im dealing with now is a function that operates on more than two paramaters. I pack them up into a list..
17.11.18 14:22:04<editable-dog>and there just isnt a single argument that i could single out as always reducing
17.11.18 14:22:34<editable-dog>i would have to write two versions, one for when one of the arguments is reducing, one for the other
17.11.18 14:23:16<editable-dog>otherwise, if i dont single out one argument to be outside of the list, ep check will cut further calls with this list of arguments
17.11.18 14:23:35<editable-dog>so, anyone sees any harm in ep check looking inside lists?
17.11.18 14:40:52<HMCf> er
17.11.18 14:41:00<HMCf> wut?
17.11.18 14:41:28<HMCf> ?s is not a list
17.11.18 14:42:18<editable-dog>yea i first talked about recursing with consts
17.11.18 14:53:33<HMCf> iirc we discussed the builtins as extralogical long ago, they can certainly sidestep the reasoner in many ways... but I'm having trouble seeing what that has to do with lists and existentials
17.11.18 14:57:38<editable-dog>nothing
17.11.18 14:58:48<editable-dog>">but what im dealing with now..." started a second separate issue
17.11.18 15:03:39<HMCf> ok, then I guess I don't know what you mean by "further calls with this list" or "looking inside lists".... ep check *should* cut recursions with the same list...
17.11.18 15:04:29<HMCf> and you don't need to "look inside" anything to see if two lists are the same list or not... they're either the same head node or they aren't...
17.11.18 15:04:52<HMCf> so I don't know what you're really asking
17.11.18 15:05:10<editable-dog>ok, i was talking about recursion not with the same list , but with a new list
17.11.18 15:06:24<editable-dog>https://github.com/koo5/univar/blob/master/tests/clean/zzpanla/hello0h_head_list_hack_gen#L65
17.11.18 15:06:57<editable-dog>well, like 77 really
17.11.18 15:07:01<editable-dog>line
17.11.18 15:11:46<HMCf> could you reduce a simpler example?
17.11.18 15:11:49<HMCf> heh
17.11.18 15:11:59<editable-dog>probably
17.11.18 15:12:24<HMCf> i'll try to pick this one apart in a bit
17.11.18 15:22:14<editable-dog>{?X0 :parses_to_name (?X0. rdf:nil)} <= {}.
                 <editable-dog>{?X0 :parses_to_name (?rest ?name)} <= {
                 <editable-dog>        ?x0 rdf:first ?letter. ?x0 rdf:rest ?x1.
                 <editable-dog>        ?name rdf:first ?letter. ?name rdf:rest ?rest_of_name.
17.11.18 15:22:16<editable-dog>        ?x1 :parses_to_name (?rest ?rest_of_name).}.
17.11.18 15:23:08<editable-dog>just pretend the lists in heads are actually in the bodies
17.11.18 15:25:33<HMCf> "actually in the bodies"?
17.11.18 15:27:07<editable-dog>the first rule translates to: {?X0 :parses_to_name ?l0} <= {?l0 rdf:first ?X0. ?l0 rdf:rest ?l1. ?l1 rdf:first rdf:nil. ?l1 rdf:rest rdf:nil}.
17.11.18 15:27:25<HMCf> uh
17.11.18 15:27:31<HMCf> wut?
17.11.18 15:27:43<HMCf> do you mean the first rule would be "{?X0 :parses ?b} <= {?b rdf:first ?X0. ?b rdf:rest rdf:nil}"?
17.11.18 15:28:21<editable-dog>no it would be exactly as i just wrote it
17.11.18 15:28:58<HMCf> oh, i see what you mean
17.11.18 15:31:04<HMCf> that is sort of a strange thing to be doing, but ok
17.11.18 15:31:18<editable-dog>it keeps things clearer
17.11.18 15:31:43* HMCf probably disagrees, but I'll take your word for it for now
17.11.18 15:32:09<HMCf> and ?x0 is ?X0 here?  (iow this is not in our funny "case means things for quantification" scheme?
17.11.18 15:32:12<HMCf> )
17.11.18 15:33:08* HMCf brb
17.11.18 15:34:34<editable-dog>the ?x0 from the github link? yes. and yes no case has no effect on quantification, since this ?x0/?X0 is also present in the body, not only in head
17.11.18 15:35:16<editable-dog>*and no, the case has no..
17.11.18 15:36:38<editable-dog>the scheme is not so complex: if it's only in head, it's existential (isnt that itself funny?), except if its uppercase
17.11.18 15:45:48<HMCf> i meant the ?x0 from your example, but it is the same
17.11.18 15:46:50<editable-dog>im not sure which example by now
17.11.18 15:46:52<HMCf> I'm assuming no bnodes are ever "uppercase" too?
17.11.18 15:46:59<editable-dog>right
17.11.18 15:47:00<HMCf> the one you just pasted
17.11.18 15:47:29<HMCf> 7 < editable-dog> the first rule translates to: {?X0 :parses_t...
17.11.18 15:47:43<HMCf> anyway
17.11.18 15:48:04<editable-dog>oh i see, yes ?x0 and ?X0 are supposed to be the same there
17.11.18 15:49:44<HMCf> ok, so with all of that... I'm not sure how this rule can be expected to do anything but cut
17.11.18 15:50:58<HMCf> it matches some set of anonymous lists to all of the lists which match the structures in the set (which is inf other lists)
17.11.18 15:51:13<HMCf> there's no ground to reach here?
17.11.18 15:51:36<HMCf> so I must be missing something
17.11.18 15:53:00<HMCf> i gtr in 10-15 min i think, btw
17.11.18 15:56:30<HMCf> looking at just the first rule, (() ()) matches this, as does ((() ()) ()) and ((() () ()) ()) and ((() () () ()) ()) and.... infinitely many other lists
17.11.18 15:56:38<editable-dog>suppose its called like ("T" "i" "m") :parses_to_name (rdf:nil ?name)
17.11.18 15:57:55<HMCf> so we have to cut it, because it just recurses into that hypertree of "all lists exist"...
17.11.18 15:59:39<editable-dog>im not sure what you mean, the first rule doesnt recurse, cut what?
17.11.18 16:00:18<HMCf> the resoner would have to recurse into the tree, i mean
17.11.18 16:00:23<HMCf> *reasoner
17.11.18 16:00:37<HMCf> there are inf many lists that match that body, no?
17.11.18 16:01:35<editable-dog>you mean the reasoner would infiloop a built-in rdf:first predicate?
17.11.18 16:02:16<HMCf> i mean that the set of possible bindings for that body is infinite
17.11.18 16:04:13<editable-dog>if you dont supply neither of the ?X0's you mean?
17.11.18 16:04:42<HMCf> (whether it would "infloop a builtin" or oom producing envs is an implementation detail that is beside the point)
17.11.18 16:05:04<HMCf> regardless of what the head or query structure is
17.11.18 16:05:32<HMCf> the body matches inf many things
17.11.18 16:06:15<editable-dog>are you asking me if a query ?what rdf:first ?whatelse on an empty kb produces infinitely many answers?
17.11.18 16:08:26<HMCf> well, there is a difference here between what is matched and what is "answers".... it matches inf many things so we have to cut to finitely many (1) answers...
17.11.18 16:09:09<HMCf> but that is a different example which will probably just confuse things
17.11.18 16:09:42<HMCf> your pasted example, the body matches inf many things, yes?
17.11.18 16:10:53<editable-dog>it matches banana parses_to_name (banana rdf:nil).
17.11.18 16:10:55<editable-dog>pie..
17.11.18 16:10:59<editable-dog>()
17.11.18 16:11:02<editable-dog>(())
17.11.18 16:11:04<editable-dog>(()())
17.11.18 16:11:12<editable-dog>whatever
17.11.18 16:11:55<HMCf> the *body* matches inf many different lists, yes?
17.11.18 16:12:23<HMCf>                {?l0 rdf:first ?X0. ?l0 rdf:rest ?l1. ?l1 rdf:first rdf:nil.
17.11.18 16:12:24<HMCf>                ?l1 rdf:rest rdf:nil}.
17.11.18 16:12:30<HMCf> that body
17.11.18 16:13:16<HMCf> there are inf many graphs which can substitute into that, yes?
17.11.18 16:13:41<editable-dog>well, yes
17.11.18 16:16:26<HMCf> so the "all lists exist" rule plays here, and we have to cut... we can't ever answer with anything more than ?x0=?x0... so how can this rule ever "do anything"? (choose any meaningful, more specific match)
17.11.18 16:17:25<editable-dog>this first rule by itself cant do anything else than unify the first ?X0 with the second ?X0. This rule is the ground case
17.11.18 16:17:51<HMCf> well, this is sort of my point, it *isn't* a ground case...
17.11.18 16:18:17<HMCf> MCf> ok, so with all of that... I'm not sure how this rule can be expected to do anything but cut
17.11.18 16:18:20<HMCf> MCf> it matches some set of anonymous lists to all of the lists which match the structures in the set (which is inf other lists)
17.11.18 16:18:23<HMCf> MCf> there's no ground to reach here?
17.11.18 16:18:25<HMCf> MCf> so I must be missing something
17.11.18 16:18:56<editable-dog>https://httpstatuses.com/508 
17.11.18 16:19:00<editable-dog>i want this on a t-shirt
17.11.18 16:19:39<HMCf> if the first rule can't ground with anything but ?x0=?0 then the second rule can't be expected to somehow ground with anything more
17.11.18 16:20:25<HMCf> *?x0=?x0
17.11.18 16:21:19<editable-dog>the second rule doesnt recurse with ?X0, it recurses with ?X1, which is the rest of ?X0
17.11.18 16:23:43<HMCf> that seems beside the point
17.11.18 16:23:48<HMCf> like
17.11.18 16:25:50<editable-dog>if the second rule is beside the point, im not sure what you expect the first rle is supposed to "do"
17.11.18 16:25:55<editable-dog>rule
17.11.18 16:26:11<HMCf> either the structure from the query fits, in which case we cut with no meaningful binding, or it doesn't and we fail out... in neither case do you actually get some new value bound for your query, you either get out the same anonymous list that you put in (i.e. ?name=?name) or you get 0 rrsults
17.11.18 16:26:41<HMCf> i don't expect the firt rule to be able to "do" anything, that is my point
17.11.18 16:26:53<HMCf> it *only* can just cut
17.11.18 16:27:03<HMCf> *first
17.11.18 16:27:07<HMCf> anyway i gtr
17.11.18 16:27:23<editable-dog>if the structure from the query fits, then the rule yields
17.11.18 16:27:34<editable-dog>is "yield" what you mean by "cut"?
17.11.18 16:28:11<HMCf> by cut i mean "yield once and then do not consider further searching alternatives"
17.11.18 16:28:22<editable-dog>yes
17.11.18 16:28:37<editable-dog>thats exactly what the rule's supposed to do
17.11.18 16:29:12<editable-dog>i dont know why the bindings dont seem meaningful to you
17.11.18 16:30:02<editable-dog>what it does is meaningful in the context of the other rules
17.11.18 16:30:22<HMCf> is "?x0=?x0" somehow meaningful to *you*?
17.11.18 16:30:35<HMCf> it tells nothing new about wgat ?x0 is...
17.11.18 16:31:03<HMCf> you're just always getting an anonymous list
17.11.18 16:31:32<editable-dog>it tells me i've reached ?rest in the ?X0 input list
17.11.18 16:32:10<HMCf> it doesn't though
17.11.18 16:32:24<editable-dog>also it returns the contents of ?X0, up to that point, in ?name, but that's beside the point
17.11.18 16:32:26<HMCf> because it gives "?x0=?x0" *always*
17.11.18 16:32:42<HMCf> it doesn't do that either! XD
17.11.18 16:33:28<HMCf> in the second rule you either cut at "?name=?name" or fail, too...
17.11.18 16:33:35<editable-dog>ah, youre correct, these two rules together yield once for each item in the list
17.11.18 16:34:08<HMCf> if you can never specify ?x0 then you can never specify any of the vars, all you can do is cut without new bindings
17.11.18 16:34:15<HMCf> but i really gtr now
17.11.18 16:34:18<HMCf> am late
17.11.18 16:34:54<editable-dog>well you either specify name or ?X0, and you get the other matched up
17.11.18 16:34:57<editable-dog>alright
17.11.18 16:35:58<HMCf> ^maybe that is your intent but it is not what those 2 rules end up producing...
17.11.18 16:36:36<editable-dog>well, you're also right that there is no ground case
17.11.18 16:38:16<editable-dog>but im still happy with these two rules, they do what i want from them:)
17.11.18 16:39:30<editable-dog>yes they match up anything
17.11.18 16:49:17<editable-dog>{?x0 find_digit (?digit ?rest)} <= {
17.11.18 16:49:18<editable-dog>        ?x0 rdf:first ?char. ?char a digit. ?x0 rdf:rest ?rest.}
                 <editable-dog>{?x0 find_digit (?digit ?rest)} <= {
                 <editable-dog>        ?x0 rdf:first ?char. ?char not_a digit. ?x0 rdf:rest ?x1. ?x1 find_digit (?digit ?rest)}.
17.11.18 16:49:25<editable-dog>you like this example more?
17.11.18 16:51:35<editable-dog>if yes ,we can go back to the ep discussion
17.11.18 16:58:53<editable-dog>well, scratch that, not a good example
17.11.18 17:22:11<editable-dog>{?x0 upto_digit (rdf:nil ?digit)} <= {
                 <editable-dog>        ?x0 rdf:first ?digit. ?digit a digit.}.
                 <editable-dog>{?x0 upto_digit (?upto ?digit)} <= {
                 <editable-dog>        ?x0 rdf:first ?char. ?x0 rdf:rest ?xr. ?char not_a digit.
                 <editable-dog>        ?upto ?rdf:first ?char. ?upto rdf:rest ?uptor.
                 <editable-dog>        ?xr upto_digit (?uptor ?digit). }.
                 <editable-dog>a not_a digit. b not_a digit. 9 a digit.
17.11.18 17:22:12<editable-dog>query
                 <editable-dog>(a b 9 c d) upto_digit (?ab ?nine).
                 <editable-dog>query
                 <editable-dog>?what upto_digit ((a b) 9).
17.11.18 17:26:59<editable-dog>my point is that while the first query will be recursing on the decreasing ?x0, thus it wont be ep cut, the second query will be ep cut, because ?x0 will be an unbound variable (or a freshly created list bnode), and the second argument will be a freshly created list bnode each time as well
18.11.18 05:55:31<koo5[m]> So i think this recursion could be given a second chance by inspecting the contents of the list
19.11.18 01:02:27<editable-dog>funny how www.w3schools.com leads the way in web design with the top shitbar obscuring the contents of the page, breaking 3 of the 5 keys used for scrolling
19.11.18 18:10:43<HMCf> ?
19.11.18 18:10:51<HMCf> seems fine here
20.11.18 01:08:21<HMCf> bitcoin's black friday sale started early?
20.11.18 01:08:49<editable-dog>i just bought :/
20.11.18 01:14:07<editable-dog>well, pgup&down jump the whole height of the whole browser viewport, so some text you had not seen yet gets obscured by the top bar
20.11.18 01:27:07<HMCf> oh, that
20.11.18 01:27:16<HMCf> you can blame twitter for that one
20.11.18 01:29:45<HMCf> they introduced that silliness w/ bootstrap and it found its way all over the web
20.11.18 01:30:02<editable-dog>i c
20.11.18 01:30:17<HMCf> the web designers like to justify it as "well its better for mobile this way"
20.11.18 01:31:31<HMCf> anyway
20.11.18 01:31:49<HMCf> I see a lot of people excited to buy at/below $4k
20.11.18 01:32:27<HMCf> which makes me suspect that this is more or less "the dip" now
20.11.18 02:05:34<editable-dog>will see heh
#AutoNomic> 23.11.18 01:24:27*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 10 months 8 hours 13 minutes 40 seconds ago
                 *** Names: editable-dog stoopkid Tamara_ Deadhand redfish64 koo5[m] nemesis1[m] genuinelyfx[m] reedhhw[m] dadbod007[m] lexx_[m] nikaala[m] vbmithr cantora @ChanServ HMCf
                 *** End of /NAMES list.
24.11.18 00:43:37*** Join: koom (~koom@37-48-16-99.nat.epc.tmcz.cz, (unauthenticated): realname)
24.11.18 03:30:39*** Quit: koom (~koom@37-48-16-99.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 252 seconds
24.11.18 11:18:07*** Join: koom (~koom@37-48-16-99.nat.epc.tmcz.cz, (unauthenticated): realname)
24.11.18 15:18:37*** Quit: koom (~koom@37-48-16-99.nat.epc.tmcz.cz) left #AutoNomic: Remote host closed the connection
24.11.18 15:19:02*** Join: koom (~koom@37-48-16-99.nat.epc.tmcz.cz, (unauthenticated): realname)
25.11.18 07:07:46*** Quit: koom (~koom@37-48-16-99.nat.epc.tmcz.cz) left #AutoNomic: Ping timeout: 272 seconds
25.11.18 08:49:34*** Join: koom (~koom@80.188.154.132, (unauthenticated): realname)
25.11.18 09:13:54*** Quit: koom (~koom@80.188.154.132) left #AutoNomic: Quit: Leaving
25.11.18 19:00:20*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-tmzggxemmslockji) left #AutoNomic: Remote host closed the connection
25.11.18 19:00:27*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-xefyhvqxbxsjkrwl) left #AutoNomic: Read error: Connection reset by peer
25.11.18 19:00:30*** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-bkpoayegxujqvipp) left #AutoNomic: Read error: Connection reset by peer
25.11.18 19:00:32*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-jxhtxfegsecouzrp) left #AutoNomic: Remote host closed the connection
25.11.18 19:00:33*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-igbsahkgrqxiuhku) left #AutoNomic: Remote host closed the connection
25.11.18 19:00:35*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-sacurujmpryynvoc) left #AutoNomic: Remote host closed the connection
                 *** Quit: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-dlrshzodgppafbgl) left #AutoNomic: Remote host closed the connection
25.11.18 19:10:18*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-kkegdsbococsghfp, (unauthenticated): @genuinelyfx:matrix.org)
25.11.18 19:34:33*** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-ibdplkaurdkfqydw, (unauthenticated): @nemesis1:matrix.org)
                 *** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-qbunzdgyjcjloipd, (unauthenticated): @reedhhw:matrix.org)
                 *** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pdwbetlpkksycrkp, (unauthenticated): @koo5:matrix.org)
                 *** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-rkolvyixtvzuinqc, (unauthenticated): @nikaala:matrix.org)
25.11.18 19:34:41*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-oylozfehmewpgpag, (unauthenticated): @lexxus:matrix.org)
                 *** Join: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-htjagiaqumvkvbym, (unauthenticated): @dadbod007:matrix.org)
25.11.18 20:08:00*** Quit: Deadhand (~deadhand@kntaon1614w-lp140-05-64-231-104-223.dsl.bell.ca) left #AutoNomic: Ping timeout: 252 seconds
25.11.18 20:15:11*** Join: Deadhandd (~deadhand@kntaon1614w-lp140-05-64-231-104-223.dsl.bell.ca, (unauthenticated): deadhand)
26.11.18 04:17:55*** Join: cantora_ (sid147800@gateway/web/irccloud.com/x-qvqgpbldjwnwubnn, (unauthenticated): cantora)
26.11.18 04:18:27*** Join: stoopkid_ (uid137696@gateway/web/irccloud.com/x-wxulffcmmsmabbqs, (unauthenticated): stoopkid)
26.11.18 04:25:15*** Nick regain: cantora_ (sid147800@gateway/web/irccloud.com/x-qvqgpbldjwnwubnn) is now known as cantora
26.11.18 16:41:21*** Quit: stoopkid_ (uid137696@gateway/web/irccloud.com/x-wxulffcmmsmabbqs) left #AutoNomic: 
26.11.18 16:42:04*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mnezppmvdqpimszb, stoopkid: stoopkid)
27.11.18 03:00:14<stoopkid> HMCf: do you agree with this: https://pastebin.com/py2WPNJU
27.11.18 04:01:01*** Join: imode (~imode@unaffiliated/imode, imode: imode)
27.11.18 04:04:53<imode> o/
27.11.18 08:08:28*** Quit: imode (~imode@unaffiliated/imode) left #AutoNomic: Ping timeout: 268 seconds
27.11.18 13:54:06*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-pdwbetlpkksycrkp) left #AutoNomic: Read error: Connection reset by peer
27.11.18 13:54:08*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-kkegdsbococsghfp) left #AutoNomic: Remote host closed the connection
27.11.18 13:54:13*** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-ibdplkaurdkfqydw) left #AutoNomic: Remote host closed the connection
27.11.18 13:54:14*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-oylozfehmewpgpag) left #AutoNomic: Remote host closed the connection
27.11.18 13:54:17*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-gnakcbrctrmihmiu) left #AutoNomic: Read error: Connection reset by peer
27.11.18 13:54:18*** Quit: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-htjagiaqumvkvbym) left #AutoNomic: Read error: Connection reset by peer
                 *** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-rkolvyixtvzuinqc) left #AutoNomic: Remote host closed the connection
27.11.18 14:13:59*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-aeaipdfzoffnrqut, (unauthenticated): @genuinelyfx:matrix.org)
27.11.18 14:37:57*** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-okxkxikvhwtxwdcv, (unauthenticated): @nikaala:matrix.org)
                 *** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-lxpaufokxyymfyob, (unauthenticated): @reedhhw:matrix.org)
                 *** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-smmpzlgcoabamruv, (unauthenticated): @koo5:matrix.org)
                 *** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-dgtlognrkxpxjsdd, (unauthenticated): @nemesis1:matrix.org)
27.11.18 14:38:03*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-xbbyeazjcowpjvad, (unauthenticated): @lexxus:matrix.org)
27.11.18 14:38:04*** Join: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-uiscwtejaqohjjei, (unauthenticated): @dadbod007:matrix.org)
27.11.18 14:47:48*** Join: imode (~imode@unaffiliated/imode, imode: imode)
27.11.18 14:56:37*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-lxpaufokxyymfyob) left #AutoNomic: Read error: Connection reset by peer
27.11.18 14:56:42*** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-dgtlognrkxpxjsdd) left #AutoNomic: Read error: Connection reset by peer
27.11.18 14:56:46*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-aeaipdfzoffnrqut) left #AutoNomic: Remote host closed the connection
27.11.18 14:56:47*** Quit: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-uiscwtejaqohjjei) left #AutoNomic: Remote host closed the connection
27.11.18 14:56:48*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-xbbyeazjcowpjvad) left #AutoNomic: Read error: Connection reset by peer
27.11.18 14:56:51*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-smmpzlgcoabamruv) left #AutoNomic: Remote host closed the connection
27.11.18 14:56:54*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-okxkxikvhwtxwdcv) left #AutoNomic: Read error: Connection reset by peer
27.11.18 15:05:26*** Join: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-jgxuhiyhitdoffmd, (unauthenticated): @genuinelyfx:matrix.org)
27.11.18 15:29:28*** Join: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-btmzxewdstxsfruj, (unauthenticated): @nemesis1:matrix.org)
                 *** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-twunuzyqolxybjof, (unauthenticated): @reedhhw:matrix.org)
                 *** Join: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-gsdgjenswpgplfhk, (unauthenticated): @nikaala:matrix.org)
                 *** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-todtkobmalwpifey, (unauthenticated): @koo5:matrix.org)
27.11.18 15:29:35*** Join: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-nsjuwxnndftlxonw, (unauthenticated): @dadbod007:matrix.org)
27.11.18 15:29:36*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-xewvrrsgkytttyff, (unauthenticated): @lexxus:matrix.org)
27.11.18 15:30:45*** Quit: imode (~imode@unaffiliated/imode) left #AutoNomic: Quit: WeeChat 2.3
28.11.18 10:50:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mnezppmvdqpimszb) left #AutoNomic: Quit: Connection closed for inactivity
28.11.18 12:05:57*** Join: imode (~imode@unaffiliated/imode, imode: imode)
28.11.18 12:06:01*** Part: imode (~imode@unaffiliated/imode) left #AutoNomic: [No reason given]
28.11.18 12:59:02*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wzrmshgspsavwnmw, stoopkid: stoopkid)
29.11.18 04:57:26*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wzrmshgspsavwnmw) left #AutoNomic: Quit: Connection closed for inactivity
29.11.18 07:58:46*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rqonmmqbsdtaqbuz, stoopkid: stoopkid)
29.11.18 10:38:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rqonmmqbsdtaqbuz) left #AutoNomic: Quit: Connection closed for inactivity
29.11.18 12:19:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bjqcynvlbumpgbdk, stoopkid: stoopkid)
29.11.18 19:10:47*** Quit: vbmithr (~vb@luminar.eu.org) left #AutoNomic: Ping timeout: 240 seconds
29.11.18 19:18:31*** Join: vbmithr (~vb@luminar.eu.org, vbmithr: Vincent)
30.11.18 09:02:18*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-orofflolsvrhspdn, (unauthenticated): @nilli:matrix.org)
30.11.18 09:03:10*** Part: nilli[m] (nillimatri@gateway/shell/matrix.org/x-orofflolsvrhspdn) left #AutoNomic: [No reason given]
02.12.18 17:22:35<editable-dog>https://lists.w3.org/Archives/Public/public-n3-dev/2018Nov/0000.html
03.12.18 16:48:46<stoopkid> im kinda surprised they didnt just renew the charter, seems there's a lot of unfinished business and a lot of people still invested
05.12.18 01:46:42<editable-dog>idk
05.12.18 05:39:14*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bjqcynvlbumpgbdk) left #AutoNomic: Quit: Connection closed for inactivity
05.12.18 13:01:54*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-zmjchcttxifawtxf, stoopkid: stoopkid)
05.12.18 17:43:29<editable-dog>i think i infilooped it
05.12.18 17:44:28<editable-dog>https://github.com/koo5/univar/blob/0b619351fceb5d5fd061e7c5d0b37d7a78562005/tests/clean/zzpanla/dcg7
05.12.18 17:51:39<editable-dog>but dcg6 segfaults, so maybe it hides an answer...:)
05.12.18 19:02:09<editable-dog>well, it doesnt
06.12.18 01:26:58<editable-dog>its got to be a bug
06.12.18 03:57:12*** Quit: vbmithr (~vb@luminar.eu.org) left #AutoNomic: Ping timeout: 250 seconds
06.12.18 04:05:17*** Join: vbmithr (~vb@luminar.eu.org, vbmithr: Vincent)
06.12.18 10:11:38*** Join: jackjones (ca279776@gateway/web/cgi-irc/kiwiirc.com/ip.202.39.151.118, (unauthenticated): jackjones)
06.12.18 10:12:51*** Quit: jackjones (ca279776@gateway/web/cgi-irc/kiwiirc.com/ip.202.39.151.118) left #AutoNomic: Client Quit
06.12.18 18:49:45<editable-dog>think i found it
07.12.18 07:05:47<editable-dog>hm, now i got an idea, that instead of the second chance stuff, i could have a "max depth" for one of the arguments
07.12.18 09:04:15*** Quit: Deadhandd (~deadhand@kntaon1614w-lp140-05-64-231-104-223.dsl.bell.ca) left #AutoNomic: Ping timeout: 264 seconds
07.12.18 16:24:28<stoopkid> editable-dog: tbh i havent really understood yet why we need termination at this stage
07.12.18 16:36:22*** Join: Deadhandd (~deadhand@kntaon1614w-grc-08-64-231-104-223.dsl.bell.ca, (unauthenticated): deadhand)
07.12.18 19:13:14*** Join: redfish65 (~tim@45.32.52.10, (unauthenticated): Unknown)
07.12.18 19:18:28*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Ping timeout: 240 seconds
08.12.18 06:21:10*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-zmjchcttxifawtxf) left #AutoNomic: Quit: Connection closed for inactivity
08.12.18 16:39:42*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kidkntjtcosufmmn, stoopkid: stoopkid)
09.12.18 05:42:03<editable-dog>so, finally fixed it
09.12.18 05:43:28<editable-dog>stoopkid: yeah but with my scheme it actually seems convenient maybe
09.12.18 05:44:06<editable-dog>so, im parsing a dcg and parsing/generating stuff based on that dcg
09.12.18 05:45:14<editable-dog>this is probably the most i could stretch this thing for my purposes, to see that it actually can be useful
09.12.18 05:46:19<editable-dog>and the second chance stuff isnt necessary
09.12.18 05:47:16<editable-dog>and the implementation of the bnode creation time scheme comes down to one pointer comparison
09.12.18 05:48:18<editable-dog>(and some special memory management, but that doesnt complicate the reasoning)
09.12.18 05:48:45<editable-dog>complicate reasoning
09.12.18 07:01:16*** Quit: redfish65 (~tim@45.32.52.10) left #AutoNomic: Ping timeout: 250 seconds
09.12.18 07:08:56*** Join: redfish64 (~tim@45.32.52.10, (unauthenticated): Unknown)
09.12.18 18:18:03*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kidkntjtcosufmmn) left #AutoNomic: Quit: Connection closed for inactivity
09.12.18 19:02:06*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lmdzmxvwsvurgywh, stoopkid: stoopkid)
10.12.18 06:11:10*** Join: N (9d31d30a@gateway/web/freenode/ip.157.49.211.10, (unauthenticated): 157.49.211.10 - http://webchat.freenode.net)
10.12.18 06:11:34*** Nick change: N (9d31d30a@gateway/web/freenode/ip.157.49.211.10) is now known as Guest82280
10.12.18 06:24:49*** Quit: Guest82280 (9d31d30a@gateway/web/freenode/ip.157.49.211.10) left #AutoNomic: Ping timeout: 256 seconds
11.12.18 13:52:16<editable-dog>https://lists.w3.org/Archives/Public/public-n3-dev/2018Dec/0023.html
#AutoNomic> 13.12.18 01:33:37*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 10 months 20 days 8 hours 22 minutes 51 seconds ago
                 *** Names: editable-dog redfish64 Deadhandd vbmithr lexx_[m] dadbod007[m] koo5[m] nikaala[m] reedhhw[m] nemesis1[m] genuinelyfx[m] cantora Tamara_ HMCf @ChanServ
                 *** End of /NAMES list.
#AutoNomic> 13.12.18 01:35:00*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 10 months 20 days 8 hours 24 minutes 14 seconds ago
                 *** Names: editable-dog redfish64 Deadhandd vbmithr lexx_[m] dadbod007[m] koo5[m] nikaala[m] reedhhw[m] nemesis1[m] genuinelyfx[m] cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
13.12.18 04:04:16*** Quit: Deadhandd (~deadhand@kntaon1614w-grc-08-64-231-104-223.dsl.bell.ca) left #AutoNomic: Ping timeout: 264 seconds
13.12.18 04:06:57*** Join: Deadhand (~deadhand@kntaon1614w-grc-03-70-51-85-88.dsl.bell.ca, (unauthenticated): deadhand)
#AutoNomic> 13.12.18 06:15:05*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 10 months 20 days 13 hours 4 minutes 19 seconds ago
                 *** Names: editable-dog Deadhand redfish64 vbmithr lexx_[m] dadbod007[m] koo5[m] nikaala[m] reedhhw[m] nemesis1[m] genuinelyfx[m] cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
13.12.18 08:08:15*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bwgtanxlgtspocdt, stoopkid: stoopkid)
14.12.18 00:43:02*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Quit: leaving
14.12.18 00:45:46*** Join: redfish64 (~tim@45.32.52.10, redfish64: Unknown)
14.12.18 03:27:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bwgtanxlgtspocdt) left #AutoNomic: Quit: Connection closed for inactivity
14.12.18 13:25:35*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes, stoopkid: stoopkid)
15.12.18 02:40:09*** Nick change: stoopkid (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes) is now known as Panzerwagener
15.12.18 05:38:33*** Part: Panzerwagener (uid137696@gateway/web/irccloud.com/x-ydaspulnfyovdfes) left #AutoNomic: [No reason given]
16.12.18 10:07:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-maeebayinxexkulp, stoopkid: stoopkid)
18.12.18 14:44:14*** Connecting...
18.12.18 14:44:38*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 10 months 25 days 21 hours 33 minutes 51 seconds ago
                 *** Names: editable-dog stoopkid redfish64 Deadhand vbmithr lexx_[m] dadbod007[m] koo5[m] nikaala[m] reedhhw[m] nemesis1[m] genuinelyfx[m] cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
18.12.18 19:35:55<HMCf> hi
18.12.18 19:36:25<HMCf> sorry that I was somewhat gone for a bit
18.12.18 21:25:07*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Ping timeout: 240 seconds
18.12.18 22:19:08*** Join: redfish64 (~tim@45.32.52.10, (unauthenticated): Unknown)
19.12.18 08:44:47<koo5[m]> Hey
19.12.18 08:45:04<koo5[m]> stoopkid https://lists.w3.org/Archives/Public/semantic-web/2018Dec/0153.html
19.12.18 17:00:55<editable-dog>HMCf: hows it going?
19.12.18 18:11:58<stoopkid> HMCf: wb
20.12.18 01:35:10<HMCf> editable-dog: it goes...
20.12.18 01:35:13<HMCf> you?
20.12.18 01:35:21<HMCf> stoopkid: thanks
20.12.18 07:03:48<koo5[m]> HMCf: well, its going, mostly down
20.12.18 07:05:01<koo5[m]> stoopkid: do you need predvars in body, in head, or both?
20.12.18 13:00:05<HMCf> we shouldn't need predvars at all :-)
20.12.18 13:06:18<HMCf> the problems of predvars are high order combinatorial explosion and infinite recurse... the e:findall alternative gives otions to bound both (limiting explosion by combinaton of ?scope argument and fixed predicates in subquery, and limiting recursion depth by the ?span argument)
20.12.18 13:06:33<HMCf> *options
20.12.18 13:13:12<HMCf> also note that with scope omitted the subquery search is over the whole kb and with span omitted the search can recur forever, so an e:findall with no subject parameters and a variable in predicate position in the query is semantically equivalent to a plain predvar clause, so nothing is lost by e:findall unless explicitly specified to be lost by those optional constraints
20.12.18 13:14:38<HMCf> (also e:findall should be significantly easier to implement and verify, since it isn't a change to the reasoning itself)
20.12.18 16:03:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-maeebayinxexkulp) left #AutoNomic: Quit: Connection closed for inactivity
20.12.18 16:16:51<editable-dog>fair fair
20.12.18 16:17:02<editable-dog>stoopkid you have some initial sketch of the rules, right?
20.12.18 17:19:37*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fodefpojcwzpmfog, stoopkid: stoopkid)
20.12.18 21:11:02<stoopkid> HMCf: my biggest issue with findall:
20.12.18 21:11:05<stoopkid> it doesn't exist
20.12.18 21:11:20<stoopkid> in any documented way
20.12.18 21:11:48<stoopkid> koo5[m]: both unless you know how to demonstrate that it can be eliminated in one or the other
20.12.18 21:13:12<stoopkid> HMCf: we can use alsdkfaskldfasdkfaljsd and it will work magically too
20.12.18 21:13:24<stoopkid> it solves all the problems
20.12.18 21:13:51<stoopkid> "how does it work you ask?" simple: "???????????????????????????"
20.12.18 21:14:05<stoopkid> ok my asldkfasdlkfalskdfa is as documented as N3 findall now, so it should suffice
21.12.18 00:12:33<editable-dog>lol
21.12.18 00:14:33<editable-dog>yea i was thinking and the way to eliminate them is to create permutations of such rule, with all existant preds named out, and that doesnt seem very practical
21.12.18 00:15:06<editable-dog>i'll consider it as implementation though
21.12.18 00:15:38<editable-dog>now, finall seems to correspond to predvar in body, which also seems where the simplicity of implementation comes from
21.12.18 00:15:55<editable-dog>we still have to also implement predvars in head
21.12.18 00:18:16<editable-dog>i'd be fine with implementing my own creative idea of findall, but given all circumstances, i think ill start with predvars
21.12.18 00:19:03<editable-dog>they will make the rules more straightforward, and i think we 100% agree on predvar semantics
21.12.18 00:19:51<editable-dog>we can switch out one for the other later
21.12.18 00:21:57<editable-dog>idk, will prolly take me at least a couple of days to get to it, either way
21.12.18 01:53:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fodefpojcwzpmfog) left #AutoNomic: Quit: Connection closed for inactivity
21.12.18 07:34:13*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qakppefbmujnfvlz, stoopkid: stoopkid)
21.12.18 12:40:26<HMCf> http://eulergui.sourceforge.net/n3_rules_good_practices.html#L671
21.12.18 12:41:00<HMCf> e:findall     a rdf:Property;
                 <HMCf>          rdfs:comment "builtin that (?SCOPE ?SPAN) e:findall (?SELECT ?WHERE ?ANSWER).
21.12.18 12:41:03<HMCf>            unifies ?ANSWER with a list that contains all the instantiations of ?SELECT satisfying the ?WHERE clause in the ?SCOPE ?SPAN of all asserted n3 formulae and their log:conclusion";
21.12.18 12:41:07<HMCf>          rdfs:domain rdf:List;
21.12.18 12:41:10<HMCf>          rdfs:range rdf:List .
21.12.18 12:44:47<HMCf> so you search in the context ?scope (recursing up to ?span times) for ?select (a formula) and unify the resulting env into ?where, then bind the list of all found results into ?answer.
21.12.18 12:44:57<HMCf> stoopkid: what is still unclear?
21.12.18 12:47:19<stoopkid> HMCf: so the type of ?span is some built-in natural numbers data-type?
21.12.18 13:00:58<stoopkid> here's the current description of e:findall from https://github.com/josd/eye/blob/master/log-rules.n3 :
21.12.18 13:01:22<stoopkid> e:findall a rdf:Property, e:Builtin;
                 <stoopkid> 	rdfs:comment """built-in used as ?SCOPE e:findall (?SELECT ?WHERE ?ANSWER).
                 <stoopkid> 			within the subject ?SCOPE it unifies ?ANSWER with a list that contains all the instantiations of ?SELECT satisfying the ?WHERE clause""";
                 <stoopkid> 	rdfs:domain e:Scope;
                 <stoopkid> rdfs:range rdf:List.
21.12.18 13:01:59<HMCf> ?span is an xsd numeric
21.12.18 13:04:27<stoopkid> so e:findall doesn't actually "recover" predvars, we just make findall the only place you can use them?
21.12.18 13:16:46<HMCf> well, i guess something i said earlier is maybe a little misleading... yes, it does not fully recover/"emulate" predvars
21.12.18 13:18:40<HMCf> but vars can be in pred positions in the search (?select/?where)... so if they are bound previously (in subj/obj positions) in the formula where the e:findall occurs they appear as literal to the subquery
21.12.18 13:20:14<stoopkid> so if it queries with an unbound predvar this doesn't do anything, only if the predvar was already bound to something so that the subquery sees it as a literal?
21.12.18 13:20:30<HMCf> right
21.12.18 13:20:34<HMCf> so like "?foo a rdf:Resource. ?k e:findall ({?a ?foo ?b.} {?a ?foo ?b.} ?An)
21.12.18 13:20:36<HMCf> "
21.12.18 13:20:57<HMCf> will bind the whole (expanded) kb to ?An, as a list
21.12.18 13:22:08<stoopkid> hmm
21.12.18 13:23:29<stoopkid> so ?SELECT is a formula? the examples make it appear like ?SELECT is just a variable (or maybe a list of variables?)
21.12.18 13:23:59<stoopkid> ex. "?k e:findall (?a {?a ?foo ?b} ?An)"
21.12.18 13:29:09<HMCf> ah, hrmm, I mightve misinterpreted the old drools stuff, there
21.12.18 13:31:22<HMCf> well, we're both right
21.12.18 13:31:53<HMCf> ?TEMPLATE is a variable used in the ?QUERY_FORMULA, or any list or formula, possibly complex. It is a template defining what is to be built.
21.12.18 13:32:35<HMCf> so i kinda got ?template ("?select") and ?query_formula ("?where") backward in my explanation
21.12.18 13:32:59<stoopkid> ok cool cause that was gonna be my next question heh
21.12.18 13:33:04<HMCf> and yes, template/select can also be just a single var
21.12.18 13:44:00* HMCf gtr
21.12.18 13:44:06<HMCf> back in ~3hr
21.12.18 13:49:51<stoopkid> well, ok, this answered my primary questions about findall, namely what are ?scope and ?span even supposed to be
21.12.18 13:50:38<stoopkid> everything made sense about findall and then i'd get to scope and span and the n3 documentation on that (which you linked) is literally just "?SCOPE, ?SPAN ??????????????????????"
21.12.18 13:52:37<stoopkid> i had no idea ?SPAN was even supposed to be numeric let alone specifically the recursion depth limit for the subqueries
21.12.18 14:56:06<stoopkid> so i'm having trouble determining: if it doesn't actually recover/emulate predvars, does it actually recover/emulate higher-order logic?
21.12.18 14:57:59<stoopkid> also, i see that you can represent negation as (?scope ?span) e:findall (?select ?where ()), but this is still only a sound representation of negation under closed-world semantics yea?
21.12.18 18:03:03<editable-dog>did you guys say that if you dont actually bind the pred variable, findall doesnt find anything?
21.12.18 18:08:57<stoopkid> editable-dog: seems so, idk
21.12.18 18:45:21<editable-dog>prolog sucks
21.12.18 19:07:37<editable-dog>so, have you got the rules somewhere?
21.12.18 20:32:30<stoopkid> editable-dog: the MLTT rules?
21.12.18 22:13:01<stoopkid> SymPy and symengine are cool
21.12.18 22:33:13<stoopkid> now what would be really awesome is a CAS that output constructive proofs along with its results
22.12.18 00:20:05<HMCf> you can still have the predicate effectively unbound by doing like I did in my example, "?foo a rdf:resource" should be equivalent
22.12.18 00:27:16<stoopkid> HMCf: how about existential predvars. can we generate a new predicate by using findall in a rule-head?
22.12.18 02:21:39<HMCf> not sure what you mean, builtins in rule head don't invoke the builtin, right?
22.12.18 02:53:31*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qakppefbmujnfvlz) left #AutoNomic: Quit: Connection closed for inactivity
22.12.18 05:52:25*** Join: PaddyF_ (~PaddyF@p57A5F231.dip0.t-ipconnect.de, PaddyF: Patrick Frank)
22.12.18 06:46:00*** Quit: PaddyF_ (~PaddyF@p57A5F231.dip0.t-ipconnect.de) left #AutoNomic: Quit: bbl
22.12.18 07:02:31<koo5[m]> HMCf: well theres two distinct kinds of predvar uses, in head and in body
22.12.18 07:03:18<koo5[m]> stoopkid: yeah the mltt stuff
22.12.18 08:03:10*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xqlaavgxnlhdturu, stoopkid: stoopkid)
22.12.18 08:03:27<editable-dog>stoopkid: yeah the mltt stuff
22.12.18 08:08:35<stoopkid> this is the best i got so far: https://github.com/sto0pkid/MathStuff/blob/master/NaturalDeductionSchema
22.12.18 08:11:52<editable-dog>i think we need to drop this "types are propositions" thing
22.12.18 08:11:58<editable-dog>propositions are types, sure
22.12.18 08:12:08<editable-dog>the other way around? no
22.12.18 08:12:16<editable-dog>nat is a type
22.12.18 08:12:26<editable-dog>"there exists a nat" is a proposition
22.12.18 08:22:40* stoopkid shrugs
22.12.18 08:22:52<stoopkid> Nat and Bool are obv more type-like than proposition-like, but
22.12.18 08:23:05<stoopkid> there's no clear boundary between types and propositions for me
22.12.18 08:23:47<stoopkid> and the scheme of rules i've laid out doesn't depend on this interpretation anyway
22.12.18 08:24:04<editable-dog>sure, just saying
22.12.18 08:30:49<editable-dog>hmm
22.12.18 08:31:14<stoopkid> https://github.com/agda/agda-stdlib/blob/master/src/Data/List/Membership/Setoid.agda#L28
22.12.18 08:31:25<stoopkid> https://github.com/agda/agda-stdlib/blob/master/src/Data/List/Any.agda#L25
22.12.18 08:32:21<stoopkid> so i tend to look at it like it's only "propositions are types" and not "types are propositions" at all
22.12.18 08:35:21<stoopkid> if you're just getting hung up on #2 in my schema... i think that'll be the least of your worries
22.12.18 08:35:39<editable-dog>im not
22.12.18 11:54:31<stoopkid> we can probably take that a step further too: programs are not proofs, in general
22.12.18 11:56:27<stoopkid> now the real question would be: does this intuition regarding the distinction between the two concepts translate into anything formal?
22.12.18 12:00:34<stoopkid> in vanilla type theory there isn't really any distinction. a proposition can have a proof, its set of proofs follow a standard syntactic form, these forms are data-structures/programs which have types
22.12.18 12:00:54<stoopkid> so effectively in vanilla type theory you don't even talk about propositions directly, you just work directly with the types of their proofs
22.12.18 12:01:18<stoopkid> when we start adding extra features to type theory, that can start to change
22.12.18 12:01:35<stoopkid> ex. propositional truncation and proof-irrelevance
22.12.18 12:03:16<stoopkid> truncation(P) treats the type P as if every object in P is equal, so truncation(P) is either inhabited or empty, ex. truncation(Bool) only has 1 object in it even though Bool has 2 objects
22.12.18 12:04:04<stoopkid> so when you apply this to types that are the types of the proofs of some proposition, ex. truncation(Sigma(x:A).P(x)), that effectively treats the type as if it's actually "just a proposition", i.e. either simply true or simply false
22.12.18 12:05:13<stoopkid> but then this also applies to "regular" data-types like Nat and Bool, or, there's no inherent reason we should be able to apply truncation to Sigma/Pi types but not to Nats and Bools
22.12.18 12:07:53<stoopkid> i don't really have any intuition that draws a formal distinction between the two
22.12.18 12:15:29<stoopkid> https://pastebin.com/iDztyR5Z propositions or types?
22.12.18 12:21:08<stoopkid> is this a proposition being forcibly interpreted as a type or a type being forcibly interpreted as a proposition? i can't tell
22.12.18 12:23:39<stoopkid> if it's a type that also is a proposition, then what about Vector A n
22.12.18 12:24:03<stoopkid> say (a1 :: a2 :: a3 :: []) : Vector A 3
22.12.18 12:24:37<stoopkid> is it a data-type of lists of length 3, or is it the proposition that the list (a1 :: a2 :: a3 :: []) has length 3 ?
22.12.18 12:26:01<stoopkid> then what about A -> B. if A and B are both "obviously" propositions, then "->" is also "obviously" implication
22.12.18 12:26:28<stoopkid> but if A = Nat and B = Bool, does "->" no longer represent implication?
22.12.18 12:29:31<stoopkid> Nat generally seems like "data-type, not proposition" ofc, but then what if we formulate it like this: https://en.wikipedia.org/wiki/Robinson_arithmetic#Axioms
22.12.18 12:30:24<stoopkid> i can collect all those axioms together into something that's "obviously" a proposition
22.12.18 12:32:27<stoopkid> exists A : Set , exists 0 : A, exists (S : A -> A), exists (_+_ _*_ : A -> A -> A), ((x : A) -> (S x) =/= 0) & ((S x) == (S y) -> x == y) & ...
22.12.18 12:33:46<stoopkid> and any A : Set that satisfies this proposition will behave similarly to the Nats
22.12.18 12:34:08<stoopkid> if i want it to behave exactly like the Nats, i can use https://en.wikipedia.org/wiki/Peano_axioms#Formulation
22.12.18 12:35:21<stoopkid> we might say, "but ah! A : Set is asking for something that's definitely just a regular data-type", but then... it's not
22.12.18 12:38:38<stoopkid> maybe A is some type like B -> B, 0 is the identity function, f is some function, B -> B;  S : (B -> B) -> (B -> B) ; S g x = f (g x) ; etc...
22.12.18 12:39:07<stoopkid> but then is that a function type or an implication type?
22.12.18 12:44:08<stoopkid> if you have a clear way to distinguish between the two concepts, *at the level of the type theory* rather than just at the level of our intuition, i'll be happy to use that instead of the "types are propositions" interpretation
22.12.18 12:45:55<stoopkid> like i would need to be able to either look at an example like my Even/Odd and deterministically classify it as either proposition or type
22.12.18 12:46:23<stoopkid> alternatively you could do similar to Coq and have a distinction between Set and Prop
22.12.18 12:48:01<stoopkid> but, Coq's Prop isn't ruling out types that "intuitively aren't propositions"
22.12.18 12:48:03<stoopkid> example: https://stackoverflow.com/questions/29322534/coq-prop-versus-set-in-typen
22.12.18 12:49:01<stoopkid> for every A : Set, there's a corresponding A' : Prop, in this case it's just Nat, the prototypical example of a type that "shouldn't" be a Prop
22.12.18 12:49:34<stoopkid> so you could have a distinction between Set and Prop like in Coq, but you'd have to also give some criteria that would rule out all the things you don't consider to be Props
22.12.18 12:51:57<stoopkid> my interpretation that sidesteps this philosophical issue: types, terms, terminating programs, propositions and proofs are all generalized by a particular kind of tree structure
22.12.18 12:52:22<stoopkid> in particular, the kind described in my schema
22.12.18 12:56:15<stoopkid> what should the intuitive interpretation of those trees be? i have literally no idea
22.12.18 12:56:23<stoopkid> i just know they work
22.12.18 12:59:00<stoopkid> i know what their behavior is and why it's the behavior we want in any of those contexts, but i don't have any particular concrete interpretation that works as an analogy and doesn't break in any of those contexts
22.12.18 13:00:05<stoopkid> maybe "just types, terms, and terminating programs" but that doesn't really do justice to how much propositional/proof content is expressed by them
22.12.18 13:00:24<stoopkid> maybe "just propositions and proofs" but then we're back to "why is a Nat a proposition"
22.12.18 13:00:29<stoopkid> is Nat*
22.12.18 13:00:57<stoopkid> maybe "just trees" but that doesn't really say *anything* about what they really are
22.12.18 13:04:19<stoopkid> imo saying that both types are propositions and propositions are types is the most pragmatic approach, even if it weren't "truly philosophically justified"; the worst-case scenario is that it's not philosophically true but you aren't worrying about it anymore
22.12.18 13:05:36<stoopkid> the "default" scenario is that it's not really true but also not really false, and you can simply switch back and forth between whatever interpretation is most convenient whenever you feel like it
22.12.18 13:05:56<stoopkid> and then there's a best-case scenario where it's actually philosophically true and we've been saying the correct thing the whole time
22.12.18 13:08:52<stoopkid> in some sense i kinda think it's like trying to formally distinguish between chairs and tables
22.12.18 13:19:29<stoopkid> https://ncatlab.org/nlab/show/propositions+as+types#PropositionsAsSomeTypes
22.12.18 13:20:39<stoopkid> https://ncatlab.org/nlab/show/bracket+type#idea
22.12.18 13:20:54<stoopkid> "and also every type is identified with a proposition (the proposition that it is an inhabited type)."
22.12.18 13:21:23<stoopkid> "By contrast, in the paradigm that may be called propositions as some types, every proposition is a type, but not every type is a proposition. The types which are propositions are generally those which “have at most one inhabitant” — in homotopy type theory this is called being of h-level 1 or being a (-1)-type."
22.12.18 13:22:46<stoopkid> otoh, the association of propositions with "types that have at most one inhabitant" is assuming a proof-irrelevant interpretation of the propositions
22.12.18 13:23:17<stoopkid> if we take a proof-relevant interpretation, there's not really any reason to restrict that association to just the types that have at most one inhabitant
22.12.18 13:24:19<stoopkid> example: Nat = Unit  OR Nat
22.12.18 13:24:40<stoopkid> 0 = inl unit ; 1 = inr (inl unit) ; 2 = inr (inr (inl unit)) ...
22.12.18 13:26:13<stoopkid> proposition or type? it looks like "obviously a recursive proposition"; Unit even already only has at most one inhabitant (particularly exactly 1, namely "unit"), and is associated with the logical constant TRUE; and OR is definitely a proof-relevant disjunction operator
22.12.18 13:27:11<stoopkid> and indeed you can reformulate *every* type into something like this that looks a lot more like a proof-relevant and potentially recursive proposition
22.12.18 13:27:32<stoopkid> Bool = TRUE OR TRUE; true = inl unit ; false = inr unit
22.12.18 13:28:51<stoopkid> List A = TRUE OR (A AND List)
22.12.18 13:30:46<stoopkid> (A AND (List A)) **
22.12.18 13:34:30<stoopkid> we could maybe rule out recursive propositions, but that doesn't work because that doesn't rule out Bool = TRUE OR TRUE; and it *does* rule out my Even/Odd, which "obviously *is* a (proof-relevant) proposition"
22.12.18 13:36:37<stoopkid> so it seems like the *only* interpretation one could take to differentiate between types and propositions is that "Propositions as types with at most one inhabitant", iow, the difference between propositions and types is that propositions are the proof-irrelevant versions of those propositions, and types are the proof-relevant versions
22.12.18 13:36:45<stoopkid> but then, what is the Unit type
22.12.18 13:37:42<stoopkid> is it proof-irrelevant or proof-relevant? it seems like it's both, there's only one inhabitant, but there would still only be just that one inhabitant even in a proof-relevant interpretation
22.12.18 13:38:49<stoopkid> are the Empty type and the Unit type not actually types but the propositions FALSE and TRUE instead? if so, why should there not be an empty type and a singleton type?
22.12.18 13:40:06<stoopkid> and if they're Types, why are the logical constants FALSE and TRUE missing from the class of Props?
22.12.18 13:41:05<stoopkid> alternatively do we add a FALSE and TRUE to the Props to correspond to the proof-irrelevant versions of Empty and Unit? or yet alternatively do we declare that the intersection between Prop and Type is non-empty?
22.12.18 13:42:48<stoopkid> and if we did declare that the intersection between propositions and types is non-empty, why are Empty and Unit "weirdly special" in being the only things that inhabit the intersection?
22.12.18 13:43:59<stoopkid> and if we added FALSE and TRUE to the Props to correspond to the proof-irrelevant versions of Empty and Unit, why are Empty and Unit types again "weirdly special" in being the only types that need a 100% redundant re-interpretation in terms of Props ?
22.12.18 13:51:52<stoopkid> https://ncatlab.org/nlab/show/bracket+type#DefinitionInHomotopyTypeTheory
22.12.18 13:55:53<stoopkid> so here they try to give an interpretation of "propositions", but they're doing it entirely in terms of type-theoretic principles: "to make a proposition [A] corresponding to the type A, we'll make a new type that has an object x': [A] for every object x : A, and we'll assert an equality between any two objects x' y' : [A], and that will make it so that [A] has 'at most one object' (modulo the equality relation)"
22.12.18 13:57:08<stoopkid> and at first glance it does look like they're creating a second redundant interpretation of Empty and Unit, i.e. FALSE = [Empty] and TRUE = [Unit]
22.12.18 13:57:49<stoopkid> but then Empty is isomorphic to [Empty] and Unit is isomorphic to [Unit], and so Empty = FALSE and Unit = TRUE
22.12.18 13:58:45<stoopkid> so they're actually taking the "let's have a weird intersection between Props and Types" approach
22.12.18 14:04:16<stoopkid> in any case, differentiating between Props vs. Types in terms of proof-irrelevance vs. proof-relevance in the first place also seems kind of weird to me
22.12.18 14:04:33<stoopkid> especially when describing the proof-irrelevance in terms of identity types
22.12.18 14:05:45<stoopkid> iow: why do propositions even have a notion of multiplicity of their inhabitants and equality between their inhabitants in the first place
22.12.18 14:06:47<stoopkid> or rather iow: is this the definition of propositions that you personally subscribe to? https://ncatlab.org/nlab/show/mere+proposition#definition
22.12.18 14:07:28<stoopkid> that's not really at all the definition of propositions that i subscribe to
22.12.18 14:08:30<stoopkid> i mean, it's not really my intuitive interpretation of what a proposition "is"
22.12.18 14:09:36<stoopkid> in my intuitive interpretation, a proposition is a statement, a sentence, "a complete thought"
22.12.18 14:12:40<stoopkid> but... what does that correspond to in type theory? literally any arbitrary type, including Nat and Bool
22.12.18 14:14:51<stoopkid> or perhaps, "a proposition is a specification" and then there literally is no discernible difference in the first place
22.12.18 14:16:24<stoopkid> and there's enough structure to this interpretation such that the number 5 is not a proposition, the string "abc" is not a proposition, etc..
22.12.18 14:20:51<stoopkid> and the "propositions are proof-irrelevant / are types with at most one inhabitant" interpretation doesn't really address your fundamental critique: Nat is a Type, but [Nat] is also a Prop
22.12.18 17:35:30<editable-dog>exhaustive writeup, i guess ill come back to it later
22.12.18 17:35:57<editable-dog>meanwhile.. https://github.com/koo5/MathStuff/commit/4e037769fa85b68ea9b43ff23c1a47d092d55a68
22.12.18 17:36:07<editable-dog>i didnt get too far, pretty much nowhere
22.12.18 17:37:11<editable-dog>on a practical side, i know we can wrap each rule in its own graph, to be able to address it
22.12.18 17:58:15<stoopkid> editable-dog: i probably wouldn't worry too much about translating the MLTT rules yet
22.12.18 17:59:35<stoopkid> i think we're almost there but i think we're still a couple steps away
22.12.18 18:01:23<stoopkid> it's gonna go on top of a lot of stuff like NAF, RDFS, (maybe OWL) which might affect the representation
22.12.18 19:08:08<stoopkid> jupyter notebook + sympy is pretty nice
23.12.18 01:29:25<stoopkid> https://github.com/ActiveState/code/tree/master/recipes/Python/213898_Drawing_inheritance_diagrams
23.12.18 01:32:09<stoopkid> has a couple small flaws but does a mostly good job
23.12.18 01:41:10<stoopkid> nvm that's probably just my own flaws lol
23.12.18 04:02:32*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xqlaavgxnlhdturu) left #AutoNomic: Quit: Connection closed for inactivity
23.12.18 08:57:14<koo5[m]> Ok, but neither of us is probably gonna take the time to code up rdfs etc, and it wouldnt affect the principles
23.12.18 08:57:25<koo5[m]> And is not really necessary is it?
23.12.18 09:19:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bwehpxlcweksmqnb, stoopkid: stoopkid)
23.12.18 09:22:22<stoopkid> koo5[m]: both good questions
23.12.18 09:23:03<stoopkid> yea idk i keep forgetting sem-web is at least temporarily dead right now
23.12.18 09:25:46<stoopkid> i think the more important q here is: is either of us actually gonna take the time to figure out how our MLTT-over-N3 is supposed to work?
23.12.18 09:26:00<koo5[m]> Quite the opposite, its temporarily alive right now
23.12.18 09:26:49<stoopkid> have they decided on a new standard or to keep the old standard yet?
23.12.18 09:26:51<koo5[m]> Well, im taking the time already
23.12.18 09:27:06<koo5[m]> Idk, i missed the groupcall
23.12.18 09:33:40<stoopkid> hmm
23.12.18 09:35:51<stoopkid> idk, every time we're talking about just going back to the beginning and doing it however makes sense to us, we get one more puzzle piece for HMC's version, and then we're stuck on that for a year until we start talking again about just going back to the beginning and doing it however makes sense to us
23.12.18 09:40:50<stoopkid> if we're planning on sticking to HMC's version, then i don't really have any inclination to try to figure out the MLTT encoding until HMC's like "and now everything's in place for the MLTT encoding, which will work like: ..."
23.12.18 10:19:19<koo5[m]> Idk, HMCf ?
23.12.18 10:29:13<stoopkid> here's an example
23.12.18 10:29:20<stoopkid> https://github.com/koo5/MathStuff/commit/4e037769fa85b68ea9b43ff23c1a47d092d55a68
23.12.18 10:29:31<stoopkid> "zero a nat.
23.12.18 10:29:32<stoopkid> {?x has_succ ?y. ?y a nat} <= {?x a nat}."
23.12.18 10:29:55<stoopkid> all well and good, looks almost like a pair of MLTT introduction rules for the Nat type
23.12.18 10:30:10<stoopkid> how are you gonna model "G |- " ?
23.12.18 10:32:06<stoopkid> https://pastebin.com/BNAfS6RD
23.12.18 10:32:53<stoopkid> "15.11.18 12:46:27<HMCf> well, there is a bit of a caveat here... under everything we have implemented so far, no.. "just" e:findall is not enough, because right now we still have the entire kb stuck living entirely in one graph, the background knowledge context.."
23.12.18 11:00:59<stoopkid> i've tried writing up these MLTT rules in N3 before:
23.12.18 11:01:02<stoopkid> http://loworbit.now.im/old/workspace/AutoNomic/notes/natural_deduction/ND_nat
23.12.18 11:01:19<stoopkid> http://loworbit.now.im/old/workspace/AutoNomic/notes/natural_deduction/ND_false
23.12.18 11:01:52<stoopkid> http://loworbit.now.im/old/workspace/AutoNomic/notes/natural_deduction/ND_true
23.12.18 11:02:58<stoopkid> but i've gotten stuck on: contexts, predvars, recursion...
23.12.18 11:03:37<stoopkid> iow: all the things we haven't really figured out yet that HMC has (apparently) extremely specific plans for
23.12.18 12:31:04<koo5[m]> Well, that findall would be passed a context to query on is trivial to imagine
23.12.18 12:33:32<koo5[m]> > how are you gonna model "G |- " ?
23.12.18 12:33:33<koo5[m]> The point isnt modelling it
23.12.18 14:36:49<stoopkid> hrm
23.12.18 14:37:31<stoopkid> how do we use a context in a conclusion if we can't use e:findall in a conclusion?
23.12.18 16:43:59<stoopkid>  this is the best i've got so far: https://pastebin.com/5p8fhH7n
24.12.18 07:38:20*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bwehpxlcweksmqnb) left #AutoNomic: Quit: Connection closed for inactivity
24.12.18 07:56:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ibnvnyoqmrsylmxz, stoopkid: stoopkid)
24.12.18 12:43:49<editable-dog>thats beyond me tbh
24.12.18 12:44:40<editable-dog>https://github.com/koo5/MathStuff/commit/41ff6b43d5e352148c2647b677a3fadd0c5de4a0
24.12.18 12:52:30<editable-dog>but i think i might be able to continue with ^ for a bit
24.12.18 14:26:47<stoopkid> if we can represent each of these rules that would be a good start: https://pastebin.com/ngaGFrLq
24.12.18 14:28:19<stoopkid> err, this: https://pastebin.com/HRiW1KBn
24.12.18 14:30:55<stoopkid> we probably shouldn't need a "typechecks" predicate? hypothetically that's what the "a" predicate is supposed to accomplish whenever subject and object are constant / bound-to-constant
24.12.18 14:31:48<stoopkid> if you leave the subject/term unbound, you get term-inference/auto-proving/hole-filling
24.12.18 14:32:03<stoopkid> if you leave the object/type unbound, you get type-inference
24.12.18 14:33:56<stoopkid> or at least, something analogous to that is how it works in natural deduction
24.12.18 14:35:13<stoopkid> wrt what i was saying about how to use contexts in conclusions if we can't use e:findall in conclusions; i'm thinking we probably don't need to except in the case of a particular kind of rule
24.12.18 14:35:48<stoopkid> consider the introduction rule for Forall; it uses the context G in the conclusion and uses the contexts G, x : A and G, a : A in the antecedents
24.12.18 14:36:48<stoopkid> so if the context was essentially implicit in "the current graph being reasoned over" then you don't need to reference it in the conclusions and just need to extend it by calls to findall in the antecedents
24.12.18 14:37:55<stoopkid> compare that with rules such as these: http://loworbit.now.im/old/workspace/AutoNomic/notes/natural_deduction/ND_hypothesis_rule
24.12.18 14:38:12<stoopkid> most of these are extending the context in the consequents rather than the antecedents
24.12.18 14:45:57<koo5[m]> Good point with "a", although i think we'll still want something like typechecks false; errmsg "..."; ..
24.12.18 14:47:49<koo5[m]> Idk, i dont even get how "forall" is a type
24.12.18 15:38:34<editable-dog>well, i have a vague memory
24.12.18 15:39:06<editable-dog>that it means a function or something?
24.12.18 20:05:13<stoopkid> same as how any other proposition is a type
24.12.18 20:05:36<stoopkid> there's a class of things representing proofs of that proposition
24.12.18 20:05:47<stoopkid> these proofs follow a particular syntactic form
24.12.18 20:06:01<stoopkid> and those syntactic forms are data-structures that have a data-type
24.12.18 20:06:46<stoopkid> and yea for "forall", the proofs happen to be (dependent) functions
24.12.18 20:07:45<stoopkid> you should probably review the curry-howard correspondence
24.12.18 20:08:56<stoopkid> mainly just these 3 charts: https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence#General_formulation
24.12.18 20:09:10<stoopkid> (and yea there's more curry-howard beyond these 3 charts but we don't need to get into that yet)
25.12.18 01:27:22<stoopkid> good point wrt the error messaging, this direct/minimalized representation doesn't necessarily leave much room to attach metadata to anything
25.12.18 01:29:48<stoopkid> i'm thinking we can maybe bake that more directly into the rules still though; i'll try to work that out
25.12.18 04:38:18*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ibnvnyoqmrsylmxz) left #AutoNomic: Quit: Connection closed for inactivity
25.12.18 09:30:12*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mucssfrhnxwnjwqf, stoopkid: stoopkid)
25.12.18 12:20:09*** Join: sifar (~sifar@117.208.216.236, (unauthenticated): sifar)
                 *** Quit: sifar (~sifar@117.208.216.236) left #AutoNomic: Changing host
                 *** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
25.12.18 12:40:41*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Quit: Leaving
26.12.18 01:59:30*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mucssfrhnxwnjwqf) left #AutoNomic: Quit: Connection closed for inactivity
26.12.18 02:55:03<HMCf> happy holidays
26.12.18 08:07:35*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nqknfejzwgzexhsg, stoopkid: stoopkid)
26.12.18 08:36:03<koo5[m]> To you too HMCf
26.12.18 08:51:37*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-wgxpwapemfzgqjma, (unauthenticated): kook)
26.12.18 15:41:05*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-wgxpwapemfzgqjma) left #AutoNomic: Quit: Connection closed for inactivity
27.12.18 07:26:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nqknfejzwgzexhsg) left #AutoNomic: Quit: Connection closed for inactivity
27.12.18 16:53:12*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-pspeedlutibdwlxd, stoopkid: stoopkid)
27.12.18 17:04:31*** Join: sifar (~sifar@117.206.15.150, (unauthenticated): sifar)
                 *** Quit: sifar (~sifar@117.206.15.150) left #AutoNomic: Changing host
                 *** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
27.12.18 17:08:08*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Client Quit
27.12.18 20:27:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-pspeedlutibdwlxd) left #AutoNomic: Quit: Connection closed for inactivity
27.12.18 21:17:09*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-noilmfgugexqaoiw, stoopkid: stoopkid)
28.12.18 05:33:43*** Join: nilli[m] (nillimatri@gateway/shell/matrix.org/x-orofflolsvrhspdn, (unauthenticated): @nilli:matrix.org)
28.12.18 05:34:22<nilli[m]> 01/02 02:34:04<nilli> hello boys Happy new year.
28.12.18 05:35:00<nilli[m]> 01/02 02:35:13<nilli> im not really back at that point. as I say that is not where I can contribute any value right now.
28.12.18 05:36:09<nilli[m]> 01/02 02:37:45<HMCa> "back" implies having gone away, which I'd hope nilli never *actually* does
28.12.18 05:37:44<nilli[m]> 01/02 02:38:32<nilli> I never do, but I am able to distance myself when needed
                 <nilli[m]> 01/02 02:38:41<HMCa> nilli: do you mind if i re: your last pm here?
28.12.18 05:40:40<nilli[m]> 01/02 02:42:57<nilli> well the reason that I did not put it here was first to have it your call
28.12.18 05:42:12<nilli[m]> :P
28.12.18 05:43:35<nilli[m]> Happy holidays of light to all.
28.12.18 05:43:49<nilli[m]> see you next year
28.12.18 06:25:53<editable-dog>hey nilli[m]
28.12.18 06:26:06<editable-dog>happy holidays to you too
28.12.18 06:27:02<editable-dog>and i wanted to say thank you for everything
28.12.18 06:32:25<editable-dog>HMCf: i always thought we would mltt-type the n3logic itself, not a lc built on top of it
28.12.18 06:36:54<editable-dog>anyway, i'd say we got a lot done this year thanks to you, nilli[m] 
28.12.18 06:38:22<editable-dog>even if you guys want just a mltt lc, im fine with playing with that too
28.12.18 06:39:03<editable-dog>i feel quite motivated about diving deeper into type theory and logic, still
28.12.18 06:40:01<editable-dog>and so far, im planning to continue playing with my language definition stuff in pyco
28.12.18 06:42:09<editable-dog>but getting a job is becoming my top priority now:)
28.12.18 08:01:11<stoopkid> what alternative mltts do we have available besides mltt-lc?
29.12.18 04:30:42<nilli[m]> Hi koo Im glad that I was able to be some help to your progress. . hope that you have fun with it.
29.12.18 04:33:47<nilli[m]> Im doing my things having fun with it  mostly since I dont need to make it clear to anyone but myself which  let me just move forward on my path.... maybe to cross rode one day with another like-minded .
29.12.18 09:18:08<HMCf> editable-dog: i'd want to mltt-type n3, myself, yes... but
29.12.18 09:20:03<HMCf> a) the way to do it is somewhat difficult
29.12.18 09:22:01<HMCf> b) an "lc in n3" can work the same as a "typed n3 in n3" afaict, at least as far as the rest of the construct is concerned
29.12.18 09:27:53*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-noilmfgugexqaoiw) left #AutoNomic: Quit: Connection closed for inactivity
29.12.18 09:31:48<editable-dog>nilli[m]: i wish you all the best with your endeavour
29.12.18 09:43:38<nilli[m]> thanks koo, send my regards to stoopkid and HMCf. :)
29.12.18 14:41:00*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-lddixjnuupdhosio, stoopkid: stoopkid)
30.12.18 02:02:45*** Part: nilli[m] (nillimatri@gateway/shell/matrix.org/x-orofflolsvrhspdn) left #AutoNomic: "User left"
30.12.18 06:55:11*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-jqkwiypneqocmixb, (unauthenticated): kook)
30.12.18 09:24:49*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-jqkwiypneqocmixb) left #AutoNomic: Quit: Connection closed for inactivity
31.12.18 08:28:54*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-lddixjnuupdhosio) left #AutoNomic: Quit: Connection closed for inactivity
31.12.18 10:12:46*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xvxykhtxxkcwnunc, stoopkid: stoopkid)
01.01.19 15:09:07<HMCf> happy new year
01.01.19 16:25:20<HMCf> will 2019 be the year of a tau construct emergence?
01.01.19 16:25:44<HMCf> nah, prolly 2020
01.01.19 16:27:00<HMCf> let me start on one of my new year "resolutions":
01.01.19 16:28:51<HMCf> stoopkid: you had brought up some questions at a time that I was "very afk" for a bit, and I tried once or thrice to write up some answers/explanations to them
01.01.19 16:29:20<HMCf> but none of it ever actually made it out to the world :-\
01.01.19 16:30:31<HMCf> but there is one (central?) question that you posed which I should directly address
01.01.19 16:32:02<HMCf> this question has always been left as something of an "elephant"
01.01.19 16:32:55<HMCf> in part because it is in some way touching upon the "ultimate last step" in construction...
01.01.19 16:33:23<HMCf> in part because it deals with that fractal lake...
01.01.19 16:34:04<HMCf> in part because it is related to that "thing that is the experiment, itself"...
01.01.19 16:34:48<HMCf> you've asked, in a nutshell, about the problem(s) of self-proving complexity.
01.01.19 16:35:52<HMCf> and pointed out that the mltt/hott can't seem to do, for arbitrary functions/algorithms, for the construct...
01.01.19 16:37:05<HMCf> which, as it has (mostly) been discussed here, would be true.
01.01.19 16:40:05<HMCf> (btw, being able to point this out is impressive... heh)
01.01.19 16:40:38<HMCf> but the ("tricky") answer is really pretty simple:
01.01.19 16:41:42<HMCf> you never have to do the self-prove complexity thing for *arbitrary* functions/algorithms!
01.01.19 16:44:19<HMCf> what a context/subchain "is" is an initial agreement to additional invariant constraints on execution...
01.01.19 16:45:14<HMCf> you only need self-proof of complexity with that (stack of) set(s) of invariants...
01.01.19 16:45:27<HMCf> *within
01.01.19 16:47:12<HMCf> and some of those constraints (really just enforced type signatures) might assert "this function must conform to this particular complexity measure monad"
01.01.19 16:48:40<HMCf> so contexts don't need to self-prove complexity "in general" but only for whatever particular machine they "are"...
01.01.19 16:49:01<HMCf> and, yes, they might fail to do this... and... all well?
01.01.19 16:50:20<HMCf> root kinda "can't" fail to do this, because it just falls back to a single, ultimate global invariant constraint - our "gas limit" on typecheck
01.01.19 16:51:29<HMCf> (and sure, it could agree to make this an absurd value... but why would it?)
01.01.19 16:52:29<HMCf> I think of it like this:
01.01.19 16:55:32<HMCf> a sound context would never really describe itself as just one machine... but at least a pair of machines, one which does the intended function of the context and another which measures a "concolic" emulation of the first
01.01.19 16:56:34<HMCf> (and more likely would describe itself as some complex/dynamic set of various sorts of machine description...)
01.01.19 17:00:04<HMCf> let me know if any of that makes sense or not
01.01.19 17:01:19<HMCf> this had come up at least once or twice before this year, if you want to dig into logs... though I'm not sure how much was said
01.01.19 17:01:51<HMCf> i mean in years before 2018, not in last year
02.01.19 03:30:55<stoopkid> well
02.01.19 03:31:09<stoopkid> i don't really know what a complexity measure monad is
02.01.19 03:31:13<stoopkid> but
02.01.19 03:32:21<stoopkid> wrt mltt/hott not being able to self-prove complexity of arbitrary functions, "directly", when i said this i meant that there aren't *any* functions that it can self-prove complexity of, "directly"
02.01.19 03:32:41<stoopkid> due to their incapability to examine intensional properties of their functions
02.01.19 03:34:18<stoopkid> but then we can get around this in at least a subset of cases by working in a godelization
02.01.19 03:35:48<stoopkid> i'm not entirely sure what you mean by a concolic emulation here but i'm guess it's basically equivalent to (or perhaps a specialization of) what i mean by a godelization
02.01.19 03:37:12<stoopkid> i guess i can realistically imagine formulating a data structure that could reasonably be called a godelization but such that you can't actually extract the required complexity information out of it
02.01.19 03:38:23<stoopkid> ex. functional programming operational semantics would actually have some trouble with that because the concrete execution paths are kind of non-deterministic due to memoization and such
02.01.19 03:39:38<stoopkid> but then yea, it still wouldn't be able to prove complexity for arbitrary functions due to ex. limitations of the chaitin variety
02.01.19 12:03:41<HMCf> I'm not sure what you mean by "working in a godelization"... but maybe we are talking about the same thing, dunno
02.01.19 12:04:39<HMCf> search "cost monad"
02.01.19 12:05:45<HMCf> 8 < stoopkid> ex. functional programming operational semantics would actually...
02.01.19 12:07:08<HMCf> right, this is why I say you end up with a concolic machine... fully symbolic emulation can miss reduction details
02.01.19 13:22:14<stoopkid> HMCf: "working in a godelization", i mean like do exactly what godel did and model the proof-system within itself (i guess "concolically"), because while MLTT/HoTT can't examine the intensional properties of proofs of implications / UQs (the things we traditionally call "the programs" in type theory), it can examine the intensional properties of an internal model, similarly to ex. how godel's godelization let his
                 <stoopkid> propositions talk about meta-theoretic properties like provability, etc... (as would our type theory's godelization)
02.01.19 13:28:00<stoopkid> cost monad looks like maybe going the other direction and building complexity-analysis support directly into the inference rules
02.01.19 19:34:46<HMCf> they are sort of the same... "machine models"
02.01.19 21:31:43*** Join: anon916[m] (anon916mat@gateway/shell/matrix.org/x-sxeclixxfavwcuuh, (unauthenticated): @anon916:matrix.org)
02.01.19 21:41:26*** Part: anon916[m] (anon916mat@gateway/shell/matrix.org/x-sxeclixxfavwcuuh) left #AutoNomic: "User left"
03.01.19 00:35:29*** Disconnected
03.01.19 00:35:30*** Connecting...
03.01.19 00:35:56*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 11 months 11 days 7 hours 25 minutes 10 seconds ago
                 *** Names: editable-dog stoopkid redfish64 Deadhand vbmithr lexx_[m] dadbod007[m] koo5[m] nikaala[m] reedhhw[m] nemesis1[m] genuinelyfx[m] cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
04.01.19 20:54:33*** Quit: genuinelyfx[m] (genuinelyf@gateway/shell/matrix.org/x-jgxuhiyhitdoffmd) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
04.01.19 21:05:28*** Quit: dadbod007[m] (dadbod007m@gateway/shell/matrix.org/x-nsjuwxnndftlxonw) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
04.01.19 21:06:22*** Quit: nemesis1[m] (nemesis1ma@gateway/shell/matrix.org/x-btmzxewdstxsfruj) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
04.01.19 21:15:30*** Quit: nikaala[m] (nikaalamat@gateway/shell/matrix.org/x-gsdgjenswpgplfhk) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
04.01.19 22:49:56<editable-dog>im having a bit of fun with n3 path syntaxes
04.01.19 22:50:30<editable-dog>this might be the first time ever that im seriously using the ^ key
04.01.19 22:50:42<editable-dog>oh, except for pointing up on irc, right
04.01.19 22:51:32<editable-dog>the other one is `
04.01.19 22:51:47<editable-dog>like... ` what?
05.01.19 02:38:55*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xvxykhtxxkcwnunc) left #AutoNomic: Quit: Connection closed for inactivity
05.01.19 05:56:48*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-twunuzyqolxybjof) left #AutoNomic: Remote host closed the connection
05.01.19 05:56:51*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-todtkobmalwpifey) left #AutoNomic: Remote host closed the connection
05.01.19 05:56:55*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-xewvrrsgkytttyff) left #AutoNomic: Remote host closed the connection
05.01.19 06:09:03*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-endbodbrrurkxdej, (unauthenticated): @koo5:matrix.org)
05.01.19 06:32:54*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-rullzieqgghafkmq, (unauthenticated): @reedhhw:matrix.org)
05.01.19 06:33:01*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-lbfxibeiuxziytjm, (unauthenticated): @lexxus:matrix.org)
05.01.19 11:00:30*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jgabdpcadfkgdgjd, stoopkid: stoopkid)
06.01.19 02:29:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jgabdpcadfkgdgjd) left #AutoNomic: Quit: Connection closed for inactivity
06.01.19 21:20:21*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-znhwhzhgrxvqiuok, stoopkid: stoopkid)
07.01.19 21:24:27<editable-dog>did i mention that lists seem to work, without any extralogical magic?
07.01.19 23:14:50*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-znhwhzhgrxvqiuok) left #AutoNomic: Quit: Connection closed for inactivity
08.01.19 03:19:27<HMCf> what extralogical magic were you expecting?
08.01.19 06:17:16*** Join: yaraju (uid341344@gateway/web/irccloud.com/x-zrpsbfyjvmeialkx, yaraju: yaraju)
08.01.19 06:18:30<yaraju> \o
08.01.19 07:15:14<koo5[m]> O/
08.01.19 07:17:11<koo5[m]> HMCf: you said the "all lists exist" rules were not to be put in the kb, that they were just an expression of something extralogical
08.01.19 07:49:11<koo5[m]> On a second thought, this contradicted with the notion that internalized lists were not needed
08.01.19 10:30:31*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dvggvlfsesubonno, stoopkid: stoopkid)
08.01.19 11:15:39<stoopkid> editable-dog: not that i recall, how'd you manage to make that happen?
08.01.19 13:36:40<koo5[m]> ¯\_(ツ)_/¯ it just works
08.01.19 19:50:20<stoopkid> heh alright we'll figure that out
09.01.19 01:25:15*** Join: garyy (2f11ddb4@gateway/web/freenode/ip.47.17.221.180, (unauthenticated): ool-2f11ddb4.dyn.optonline.net/47.17.221.180)
09.01.19 01:25:42*** Quit: garyy (2f11ddb4@gateway/web/freenode/ip.47.17.221.180) left #AutoNomic: Client Quit
09.01.19 03:42:53*** Quit: Deadhand (~deadhand@kntaon1614w-grc-03-70-51-85-88.dsl.bell.ca) left #AutoNomic: Ping timeout: 244 seconds
09.01.19 03:49:29*** Join: Deadhand (~deadhand@kntaon1614w-grc-11-76-66-96-100.dsl.bell.ca, (unauthenticated): deadhand)
#AutoNomic> 09.01.19 04:09:34*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
09.01.19 04:09:35*** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 11 months 17 days 10 hours 58 minutes 48 seconds ago
                 *** Names: editable-dog Deadhand stoopkid yaraju lexx_[m] reedhhw[m] koo5[m] redfish64 vbmithr cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
09.01.19 07:09:11*** Quit: vbmithr (~vb@luminar.eu.org) left #AutoNomic: Ping timeout: 272 seconds
09.01.19 13:22:56<HMCf> I think what I said was that the all lists exist rule is not fully expressible within n3, that it has to be (at least in part) an aspect of the inference itself
09.01.19 13:23:58<HMCf> maybe that is not true, but it is how i've always understood it to be... I'll take a look at what you've come up with
09.01.19 17:24:40<editable-dog>we should really update the topic here
09.01.19 23:39:32<stoopkid> we should probably update some materials for it to point to
10.01.19 01:03:07*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Remote host closed the connection
10.01.19 01:05:47*** Join: redfish64 (~tim@45.32.52.10, redfish64: Unknown)
10.01.19 03:15:31<koo5[m]> I think im gonna create a new repo for pyco
10.01.19 03:16:25<koo5[m]> Or maybe not
10.01.19 19:33:20<editable-dog>stoopkid: what are you up to these days?
11.01.19 04:50:50*** Quit: redfish64 (~tim@45.32.52.10) left #AutoNomic: Remote host closed the connection
11.01.19 06:13:17<koo5[m]> http://rdf2h-browser.linked.solutions/#https://factsmission.com/
11.01.19 13:39:27<HMCf> koo5[m]: einstein puzzle fails now?
11.01.19 15:36:06<editable-dog>try now?
11.01.19 15:45:07*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dvggvlfsesubonno) left #AutoNomic: Quit: Connection closed for inactivity
11.01.19 16:11:08*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xlmwxpymrzifvrjs, stoopkid: stoopkid)
11.01.19 16:20:23<stoopkid> editable-dog: not much really, mostly cooking and cleaning, testing the properties of various kitty litters, worldly things like that
11.01.19 16:22:56<editable-dog>well, good for you i guess
11.01.19 16:23:48<stoopkid> i've been working on a bit of software stuff at least, testing out a lot of different packages and trying to put together something closer to my conception of what a full-stack dev & user environment based on type theory would look like
11.01.19 16:24:23<editable-dog>what packages?
11.01.19 16:26:16<stoopkid> NumPy, SymPy, SciPy, Jupyter, CUDA, Vulkan; basically anything that either is a numeric methods / computer algebra system, provides interface to one, or is some generic tool (like graphics) built using one
11.01.19 16:27:34<editable-dog>nice
11.01.19 16:28:55<stoopkid> and anything for static analysis, code manipulation, platform independence, etc.. although so far it's mostly just been the numeric methods / computer algebra stuff
11.01.19 16:32:35<stoopkid> i like the direction modern graphics languages are going they're actually starting to have it be directly integrated with / built out of just numeric methods stuff, i'm gathering due to people are starting to use GPUs as general purpose machines
11.01.19 16:35:32<stoopkid> now the role of type theory in that would be to just represent that numeric methods & vector math stuff, which is a lot more approachable than trying to capture some large ad-hoc graphics description system
11.01.19 16:39:51<stoopkid> what have you been up to? i'm not sure what you've been hacking on the inferencer, last we discussed it it seemed we had several potential directions we were talking about
11.01.19 16:40:54<editable-dog>more or less https://github.com/koo5/univar/blob/master/tests/clean/zzpanla/ldl0_1
11.01.19 16:41:00<editable-dog>this
11.01.19 16:41:38<editable-dog>no serious changes in the inferencer lately
11.01.19 16:45:19<editable-dog>its taking me a lot longer than i expected, and still nowhere near finished
11.01.19 16:52:33<editable-dog>ive also spent a fair amount of time improving my machine, i've migrated to a two-disk btrfs raid and put it through some stress tests, like doing deduplication, and i've done quite a bit of work around my virtual machines, so all in all now i have (at least a potential for) much less problems with runnning out of disk space, for one
11.01.19 16:53:44<stoopkid> nice
11.01.19 16:54:04<editable-dog>and more usability all around
11.01.19 16:54:11<editable-dog>better file sharing
11.01.19 16:54:48<editable-dog>ive spent some time researching available distributed filesystems
11.01.19 16:55:10<editable-dog>and ended up with nothing:)
11.01.19 16:55:33<editable-dog>ended up with btrfs lol
11.01.19 16:58:21<editable-dog>and now im studying gf again
11.01.19 17:09:58<stoopkid> i'm seeing a lot of `FAIL`s in tests/clean/simple
11.01.19 17:11:56<editable-dog>env PYTHONUNBUFFERED=1 ./pyin/tau2.py  "./pyco_runner.sh --novalgrind true --nodebug true --notrace true  --oneword true --nolog true   " tests/clean/simple/*        2>&1 | tee runs/(date "+%F-%H-%M-%S") | tee runs/last
11.01.19 17:13:24<editable-dog>all green
11.01.19 17:36:32<HMCf> editable-dog: distributed filesystems mostly suck, esp lately, imo
11.01.19 17:37:20<HMCf> i'm a fan of sheepdog as a compromise solution in many cases
11.01.19 17:44:11<stoopkid> HMCf: heya
11.01.19 17:45:06<stoopkid> editable-dog: if you already have the cpython3 directory set up for virtualenv is the proper command to omit the -p python3? i.e. '> virtualenv cpython3'
11.01.19 17:53:38<editable-dog>stoopkid: koom@koom-KVM ~/univar> . cpython3/bin/activate.fish
11.01.19 17:53:39<editable-dog>(cpython3) koom@koom-KVM ~/univar>
11.01.19 17:54:12<stoopkid> ok so you can omit the virtualenv command entirely the second time around?
11.01.19 17:54:23<editable-dog>i think you should
11.01.19 17:55:11<editable-dog>but i dont know much about this, just enough to use it this one way
11.01.19 17:55:38<editable-dog>time to do some readme updating?
11.01.19 17:56:16<editable-dog>well, my method is there
11.01.19 17:56:19<editable-dog>already
11.01.19 17:56:27<stoopkid> yea i'm already collecting some updates so i'll send a pull request for the readme once i finish
11.01.19 17:56:36<editable-dog>cool
11.01.19 17:58:10<editable-dog>HMCf: sheepdog would be the most cool one, but its like a one-man project? Its impressive he got his packages into ubuntu, but still
11.01.19 17:59:58<HMCf> stoopkid: heya
11.01.19 18:00:20<HMCf> editable-dog: it only has the illusion of being a one man show
11.01.19 18:00:57<HMCf> it actually has the weight of NTT behind it
11.01.19 18:00:58<HMCf> so
11.01.19 18:01:14<editable-dog>ntt?
11.01.19 18:01:17<HMCf> you can be sure it isn't likely to suddenly die of
11.01.19 18:01:27<HMCf> Nippon
11.01.19 18:01:42<HMCf> *huge* telecom in JP
11.01.19 18:01:57<editable-dog>im more concerned with how much battletesting it got so far
11.01.19 18:02:05<editable-dog>i c
11.01.19 18:02:15<HMCf> a lot, lol
11.01.19 18:04:39<editable-dog>nice, i didnt have any idea
11.01.19 18:05:55<HMCf> yah, he seems to sometimes go out of his way to downplay their involvement
11.01.19 18:06:36<HMCf> but its inclusion into qemu as an official backend was not by chance luck, HEH
11.01.19 18:08:46<HMCf> anyway, it has its caveats and limitations (single writer model, metadata overhead if you're not using it just as qemu vdi block backend, etc)
11.01.19 18:09:24<HMCf> but it is an easy solution to a lot of "i need reliable distributed storage" problems
11.01.19 18:10:26<HMCf> and it "just works" out of the box in a way that makes a lot of alternatives seem like huuuuuge headaches ;-)
11.01.19 18:11:25<HMCf> (sometimes even makes basic raid setups seem like hassle, heh)
11.01.19 18:18:26<HMCf> well, now einstein is taking forever again, so I'm just going to assume that means it is working again now :-)
11.01.19 18:19:15<HMCf> kinda funny, I think now we have both the worlds fastest sld inference and the worlds slowest sld inferencer, both ;-)
11.01.19 18:20:02<editable-dog>(cpython3) koom@koom-KVM ~/univar> env PYTHONUNBUFFERED=1 ./pyin/tau2.py  "./pyco_runner.sh --novalgrind true --nodebug true --notrace true  --oneword true --nolog true   " tests/multiple_existentials_in_head/slower/einstein.n3        2>&1 | tee runs/(date "+%F-%H-%M-%S") | tee runs/last
                 <editable-dog>tests/multiple_existentials_in_head/slower/einstein.n3:test:
                 <editable-dog>1547248751.05 tests_multiple_existentials_in_head_slower_einstein_n3_0:test:
11.01.19 18:20:03<editable-dog>./pyco_runner.sh --novalgrind true --nodebug true --notrace true  --oneword true --nolog true     --identification  tests_multiple_existentials_in_head_slower_einstein_n3_0  --base  tests/multiple_existentials_in_head/slower/einstein.n3 runs/tests_multiple_existentials_in_head_slower_einstein_n3_0/kb_for_external_raw.n3 runs/tests_multiple_existentials_in_head_slower_einstein_n3_0/query_for_external_raw.n3
                 <editable-dog>popen..
                 <editable-dog>poll..
                 <editable-dog>time clang++ -fbracket-depth=99999999  -std=c++11 -O3 -Wall -Wextra -Wpedantic -Wno-gnu-label-as-value -Wno-gnu-label-as-value -Wno-c99-extensions -Wno-c++14-binary-literal  `pwd`/pyco_out.cpp -ferror-limit=3 -o pyco 
                 <editable-dog>23.24user 0.37system 0:23.73elapsed 99%CPU (0avgtext+0avgdata 255608maxresident)k
                 <editable-dog>0inputs+3160outputs (0major+67058minor)pagefaults 0swaps
                 <editable-dog>rm: cannot remove 'runs/tests_multiple_existentials_in_head_slower_einstein_n3_0/trace.js': No such file or directory
                 <editable-dog>#ok lets run this
                 <editable-dog>1 euler_steps, 0/s.
11.01.19 18:20:04<editable-dog> RESULT : <file://german> <file://eats> <file://fish> . 
                 <editable-dog>69685 euler_steps, 0/s.
                 <editable-dog>0.00user 0.00system 0:00.00elapsed 83%CPU (0avgtext+0avgdata 4088maxresident)k
11.01.19 18:21:07<HMCf> ah i'm just running as described in the readme but with novalgrind forced
11.01.19 18:21:56<editable-dog>if youre running with trace on, which is the default, you might as well go on holiday
11.01.19 18:22:26<HMCf> (because my valgrind just complains about my arch, for some reason.  I blame AMD and their lack of stable/complete kernel bsp for ryzen 7...)
11.01.19 18:22:52<HMCf> (have I mentioned lately that the semicon industry is terrible?)
11.01.19 18:23:14<editable-dog>:)
11.01.19 18:23:44<stoopkid> einstein works for me but it still looks like most of tests/clean/simple/* is failing with that same command you just gave, i'm not seeing green either
11.01.19 18:25:39<HMCf> real    1m1.782s
11.01.19 18:25:44<HMCf> better :-)
11.01.19 18:26:05<HMCf> but still no 16m fps or whatever we hit before ;-)
11.01.19 18:26:54<stoopkid> we'll optimize again after figuring out existentials and lists and ep-checking
11.01.19 18:27:50<editable-dog>well, the actual runtime is 0s, the rest is compilation
11.01.19 18:28:12<editable-dog>stoopkid: can you paste the log or look for any errors?
11.01.19 18:28:37<HMCf> sure... I'ma gonna be likea ohad, and count it.
11.01.19 18:29:00<HMCf> all green on test/clean/simple here, btw
11.01.19 18:29:10<HMCf> *tests
11.01.19 18:29:24<HMCf> stoopkid: it's just you :-P
11.01.19 18:29:37<stoopkid> guess so, well that's good i guess
11.01.19 18:29:50* HMCf nods to agree
11.01.19 18:31:21<editable-dog>good old ohad
11.01.19 18:31:40<editable-dog>yeah the colors arent really there i suppose
11.01.19 18:32:29<HMCf> anyone know what ohad is even up to these days?  My spies all got tired of his BS and don't report anything to me anymore, really... XD
11.01.19 18:33:29<stoopkid> idk i don't spy :P
11.01.19 18:33:48<editable-dog>nope, #idni is silent lately
11.01.19 18:34:08<editable-dog>##idni
11.01.19 18:35:15<editable-dog>last like was 09.01.19 07:14:27<naturalog> good
11.01.19 18:35:26<editable-dog>so its probably good
11.01.19 18:35:51<stoopkid> dmiles told me recently he's still doing stuff still related to "tau is a scalable discussion about tau", from what i understood i think he's actually paying dmiles for some work
11.01.19 18:35:52<editable-dog>*line
11.01.19 18:39:35<editable-dog><stoopkid> we'll optimize again after figuring out existentials and lists
11.01.19 18:39:40<editable-dog> and ep-checking
11.01.19 18:40:05<editable-dog>if you guys dont discover any issues, ill have to conclude ive already figured it all out
11.01.19 18:43:45<HMCf> hehe
11.01.19 18:43:54<editable-dog>so whats the errors on simple/*?
11.01.19 18:44:27<stoopkid> hm, https://pastebin.com/4MmDMTfd
11.01.19 18:45:05<editable-dog>clang -v?
11.01.19 18:45:40<stoopkid> clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)
11.01.19 18:46:14<editable-dog>can you move it a tad closer to 6.0.0?
11.01.19 18:50:43<editable-dog>or try sticking #include <functional>
11.01.19 18:50:53<editable-dog>at the top of pyco_static.cpp
11.01.19 18:51:07<editable-dog>maybe
11.01.19 18:51:16<stoopkid> not clang 7.0.0 ?
11.01.19 18:51:34<editable-dog>mm idk, you can try it
11.01.19 18:51:39<HMCf> maybe we should start to try implementing deduction rules for a simple dtlc and see where things break
11.01.19 18:52:05<editable-dog>yeah
                 <stoopkid> well, we've sorta started on that
11.01.19 18:54:00<HMCf> i've been wanting to play with "phomlee" (aka lambda-oe) lately, it has a pretty simple redex...
11.01.19 18:54:38<HMCf> (Predicative Higher-Order Minimal Logic with Extensional Equality)
11.01.19 18:55:32<HMCf> mostly as a distraction from redtt while I wait for those guys to come back from vaca, heh
11.01.19 19:08:41* HMCf gtg for a few
11.01.19 19:09:53<stoopkid> editable-dog: still the same error after updating to 6.0
11.01.19 19:11:35<editable-dog>does clang++ -v say 6?
11.01.19 19:11:44<stoopkid> yea
11.01.19 19:13:01<stoopkid> hrm
11.01.19 19:13:34<stoopkid> https://pastebin.com/PPqDFc68
11.01.19 19:14:14<editable-dog>clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)
11.01.19 19:15:09<editable-dog>Selected GCC installation: /usr/bin/../lib/gcc/x86_64-linux-gnu/8
11.01.19 19:16:03<editable-dog>im not sure what it means but im suspecting some stdlib version issue
11.01.19 19:32:53<stoopkid> alright all good with gcc-8
11.01.19 19:33:23<editable-dog>cool
11.01.19 19:43:37<stoopkid> your scheme should "work" and without infloops but i'm still wondering a) whether or not the ordering of query items is relevant (other than for speed), b) whether or not the semantics for parsimonious chase is relevant for the rest of HMC's plans
11.01.19 19:45:14<editable-dog>like..ordering of triples in a body?
11.01.19 19:45:21<stoopkid> in a body or query yea
11.01.19 19:45:56<editable-dog>yeah i havent answered that for myself yet, i think ill add a little randomizer
11.01.19 19:46:48<stoopkid> i'd like to maybe make a pseudocode for it that can maybe be more directly compared to the pseudocode from the parsimonious chase paper? and i guess i should do that for my back-chaining version of the pchase
11.01.19 19:50:45<editable-dog>still not sure what your obsession with pchase is, but sure, ill try to help as much as i can
11.01.19 19:52:52<stoopkid> mostly just that it's the only thing that HMC's explicitly suggested for handling this that we've also figured out, so i can assume it's something he knows how to build the rest of autonomic around
11.01.19 19:56:34<stoopkid> plus it has academic support (i.e. the paper, those researchers, any derivative or auxiliary work, etc..) also i don't have any q's about ordering of query items there, only q's about different permutations of variables that i still have for all the (back-chaining) versions including your alternative
11.01.19 19:56:52<stoopkid> but mostly i just want to compare their properties and then figure out how to make some kind of objective decision
11.01.19 19:59:39<stoopkid> so, let's go over your algorithm again cause i'm still fuzzy on some of the details, unless it's late for you
11.01.19 20:02:14<stoopkid> so it's basically just like regular ep-check except for it's treatment of bnodes, yea?
11.01.19 20:03:18<editable-dog>no its fine
11.01.19 20:03:50<editable-dog>well
11.01.19 20:16:10<editable-dog>sec
11.01.19 20:19:53<editable-dog>so..yes, id say so
11.01.19 20:25:32<stoopkid> so hypothetically you could run this forward-chaining and use the pseudocode on page 4 here https://www.mat.unical.it/kr2012/shy.pdf and only have to modify the "|=" operator ?
11.01.19 20:26:35<stoopkid> i guess also potentially "firing substitution" could be up for interpretation
11.01.19 20:27:20<stoopkid> i guess let's save that question, so what exactly is the check for bnodes in your scheme?
11.01.19 20:35:17<editable-dog>i can find what the pipe-slash-equals operator is
11.01.19 20:35:35<editable-dog>*cant
11.01.19 20:37:53<editable-dog>so, a bnode is made up of what i call an origin, which is a combination of the rule and the variable name that it came from, and of an unique id/address, right?
11.01.19 20:39:29<editable-dog>so, two bnodes with different origin is the easy case, just like for example two different consts
11.01.19 20:42:20<editable-dog>for two bnodes with same origin, we check that the one we're called with now already existed before we were called with the other one
11.01.19 20:43:15<editable-dog>as usual, if we've already seen exactly this id, its an ep
11.01.19 20:47:12<editable-dog>i think that in forward chaining, you'd have to look at whatever bnodes are in the body of the firing rule
11.01.19 20:49:49<stoopkid> how do you keep track of the order they were called in?
11.01.19 20:49:56<stoopkid> or created* in
11.01.19 20:51:55<stoopkid> just incrementing a global id and checking less-than-or-equal?
11.01.19 20:51:57<editable-dog>well, the technical answer is that i allocate all memory linearly from one big block
11.01.19 20:53:00<stoopkid> i see so "created later" will end up corresponding to having a larger address?
11.01.19 20:53:13<editable-dog>yes
11.01.19 20:58:05<editable-dog>so this is obviously where shuffling body triples will lead to different results
11.01.19 21:04:52<stoopkid> so i guess that could only happen when you have to do a bnode-to-bnode unification
11.01.19 21:06:28<editable-dog>anyway, another way to look at it is that a rule will refuse to recurse if it's already recursing on an exact same combination of parameters, the only difference is that there's now a different bnode, but its been created only after its already seen that bnode origin
11.01.19 21:06:52<editable-dog>what could happen?
11.01.19 21:14:05<editable-dog>zero succ one. one succ two. two succ three. three succ ?what
11.01.19 21:15:09<editable-dog>banana banana banana. {?banana banana banana}=>{?banana succ ?banana2. ?banana2 banana banana}.
11.01.19 21:15:36<editable-dog>zero a nat. {?x a nat}=>{?x succ ?y. ?y a nat}
11.01.19 21:16:56<editable-dog>i dont think theres a way to explain to a forward chainer to not infillop on banana, and loop three times on nat, then check the result with "three succ ?what"
11.01.19 21:20:50<editable-dog>"lets keep producing nats, because theres some rule(query) that fires on them, and it hasnt fired yet"?
11.01.19 21:22:31<editable-dog>{?banana banana banana}=>{?bana
11.01.19 21:22:42<editable-dog>na banana ?banana2. ?banana2 banana banana}.
11.01.19 21:22:45<editable-dog>hehe
11.01.19 21:23:10<editable-dog>idk
11.01.19 21:25:49<stoopkid> what do you mean check the result with three succ ?what ?
11.01.19 21:27:01<editable-dog>i mean presumably we'd want the forward search to produce something that is a succ of zero, then a succ of that, then a succ of that, so we can discover it matches with three
11.01.19 21:27:07<editable-dog>should have been "?three", sorry
11.01.19 21:27:50<editable-dog>zero succ ?one. ?one succ ?two. ?two succ ?three. ?three succ ?what.
11.01.19 21:36:46<editable-dog>makes sense?
11.01.19 21:54:36<stoopkid> isn't the rule {?x a nat}=>{?x succ ?y. ?y a nat} just gonna produce bnodes different from ?one ?two ?three and ?what ?
11.01.19 21:56:29<stoopkid> i'm not sure what's the query and the shouldbe here
11.01.19 21:58:37<editable-dog>query is zero succ ?one. ?one succ ?two. ?two succ ?three. ?three succ ?what.
11.01.19 21:58:49<editable-dog>and its the shouldbe also
11.01.19 22:01:15<editable-dog>well, if we're talking backchaining, in zero succ ?one, ?one gets bound to a nat bnode
11.01.19 22:04:12<editable-dog>lets say the kb is just zero a nat. {?x a nat}=>{?x succ ?y. ?y a nat}
11.01.19 22:05:03<editable-dog>in my scheme, the query  zero succ ?one. ?one succ ?two. ?two succ ?three. ?three succ ?what succeeds
11.01.19 22:05:41<editable-dog>not if you flip it around, ?three succ ?what. ?two ?succ ?three.
11.01.19 22:06:04<editable-dog> ?three succ ?what. ?two ?succ ?three. ?one succ ?two. zero succ ?one
11.01.19 22:06:14<editable-dog>whatever
11.01.19 22:08:43<editable-dog>and youre asking, if we forward-chain on zero a nat. {?x a nat}=>{?x succ ?y. ?y a nat}, can we know when to stop?
11.01.19 22:11:43<stoopkid> do you have test-cases for this written up already?
11.01.19 22:13:06<editable-dog>tests/clean/existentials/nat
11.01.19 22:13:39<editable-dog>i should add some expected fail cases
11.01.19 22:16:29<stoopkid> is "query <QUERY> fin. shouldbetrue" basically just short-hand for "query <QUERY> fin. shouldbe <QUERY> fin." ?
11.01.19 22:16:42<editable-dog>yes
11.01.19 22:19:19<stoopkid> is there a shouldbefalse corresponding i guess to "query <QUERY> fin. shouldbe fin." ?
11.01.19 22:19:38<editable-dog>thatsall
11.01.19 22:20:56<stoopkid> so "query <QUERY> fin. thatsall" ?
11.01.19 22:21:00<editable-dog>yes
11.01.19 22:21:30<editable-dog>it should have been something like "nomoreresults"
11.01.19 22:23:13<editable-dog>btw theres a slight twist when checking results, i do some weird adhoc unification if there are variables in the expected result
11.01.19 22:24:50<stoopkid> hrm, good point i don't know whether or not we need a special unification procedure for that
11.01.19 22:26:30<editable-dog>i think i just wanted to account for the randomly generated names of variables created when expanding n3 list syntax or something
11.01.19 22:26:54<editable-dog>and i never gave it a thought afterwards
11.01.19 22:29:31<stoopkid> hrm, so it'll get "?one :has_succ ?two. zero :has_succ ?one" but won't get 


"?two :has_succ ?three. ?one :has_succ ?two. zero :has_succ ?one"
11.01.19 22:29:55<stoopkid> doesn't seem unreasonable, i think pchase would only get zero :has_succ ?one, in either direction
11.01.19 22:34:11<editable-dog>it will get  "?one :has_succ ?two. zero :has_succ ?one" because each head triple keeps its own ep list
11.01.19 22:34:58<editable-dog>im not sure what i think about that, but i didnt figure out how i could only keep one ep list for the whole original rule
11.01.19 22:37:41<stoopkid> ok so where exactly does it cut the query "?two :has_succ ?three. ?one :has_succ ?two. zero :has_succ ?one"
11.01.19 22:38:35<stoopkid> i guess it's gotta succeed with "?two :has_succ ?three." but then fail  "?one :has_succ ?two" ?
11.01.19 22:40:06<stoopkid> i guess first it would succeed with "?two :has_succ ?three." with ?two = zero
11.01.19 22:40:26<stoopkid> and then it would fail on "?one :has_succ zero"
11.01.19 22:41:21<editable-dog>yes, first it tries with ?two = zero, and fails on the second query triple
11.01.19 22:41:47<stoopkid> so then it would try "?two :has_succ ?three." again, matching with the rule instead of the fact now, and... succeed with ?two = [ :has_succ of zero ]
11.01.19 22:41:53<editable-dog>then it tries with ?two = [^:zero has_succ]
11.01.19 22:42:27<editable-dog>[^:has_succ :zero]
11.01.19 22:42:34<editable-dog>i think is the syntax
11.01.19 22:43:17<stoopkid> so then it tries ?one :has_succ [^:has_succ :zero], and succeeds with ?one = zero
11.01.19 22:43:33<editable-dog>yeah
11.01.19 22:43:47<editable-dog>and fails on zero has_succ zero
11.01.19 22:44:05<editable-dog>or something like that
11.01.19 22:44:08<editable-dog>i think you get it
11.01.19 22:45:13<stoopkid> so when you succeed on "?one :has_succ [^:has_succ :zero]" do you do any checking between the bnode returned by the rule when ?one = zero and the bnode [^:has_succ :zero] generated from the "?two :has_succ ?three." query item?
11.01.19 22:46:43<stoopkid> returned by the rule when ?x = zero *
11.01.19 22:46:56<editable-dog>this is a bit too much of mental acrobatics for me
11.01.19 22:48:50<stoopkid> i mean to succeed with a query "?x :has_succ ?y" it's gotta go through the rule, which is gonna make a bnode for ?y
11.01.19 22:48:55<editable-dog>but i got a neat visualizer there
11.01.19 22:49:47<stoopkid> but here we have a query item "?one :has_succ <bnode1>"
11.01.19 22:50:15<editable-dog>so, ?one = zero, right?
11.01.19 22:50:39<stoopkid> yea
11.01.19 22:53:59<editable-dog>when ?two :has_succ ?three binds ?two to the bnode, ?one :has_succ ?two only results in the has_succ rule unfolding that bnode
11.01.19 22:55:17<stoopkid> ok i see
11.01.19 22:55:19<editable-dog>the has_succ rule just goes: you passed me a successor of zero, so i bind your ?one to that zero and yield
11.01.19 22:56:51<stoopkid> so that query-item would only fail if ?one was also bound to something non-zero, ex. another bnode
11.01.19 22:57:43<editable-dog>yes
11.01.19 22:57:55<editable-dog>something not unifiable with zero
11.01.19 22:58:08<editable-dog>so, not a var and not zero
11.01.19 23:02:02<stoopkid> ok so, so far this is just the search failing to reach ground, so at what point does it fail due to the ep-checking
11.01.19 23:02:46<stoopkid> it would reach ground if it went through the next recursion of the rule with the query-item ?two :has_succ ?three so it must be this next recursion that fails right
11.01.19 23:03:47<stoopkid> lemme check that out on the visualizer
11.01.19 23:06:24<editable-dog>yes this next recursion fails, and its due to ep checking
11.01.19 23:06:26<stoopkid> hrm, "My first VueJS Task"
11.01.19 23:06:44<editable-dog>press .
11.01.19 23:07:05<editable-dog>run with --notrace false
11.01.19 23:10:38<stoopkid> hrm, still doesn't seem to be working (still just shows "My first VueJS Task" and pressing "." doesn't do anything)
11.01.19 23:13:21<editable-dog>mmm
11.01.19 23:13:46<editable-dog>can you paste find runs
11.01.19 23:18:25<stoopkid> i notice i'm missing pyco_visualization/trace0.js and window.pyco is undefined according to the browser console
11.01.19 23:19:10<editable-dog>well you need to be looking at the runs folder
11.01.19 23:19:44<editable-dog>the index.html file gets copied there
11.01.19 23:24:22<stoopkid> i see
11.01.19 23:27:32<stoopkid> hrm, left and right arrows don't seem to be working for me, i take it that's the 188 and 190 in index.html ?
11.01.19 23:27:52<editable-dog>i changed it to , and .
11.01.19 23:28:51<editable-dog>coz i needed to scroll sideways
11.01.19 23:28:58<editable-dog>:)
11.01.19 23:30:22<stoopkid> i see
11.01.19 23:42:57<stoopkid> where is trace0.js generated from i'm getting some errors
11.01.19 23:43:27<editable-dog>its written by the inferencer 
11.01.19 23:43:41<editable-dog>pyco_static.cpp
11.01.19 23:43:47<editable-dog>dump()
11.01.19 23:44:01<editable-dog>what errors?
11.01.19 23:44:55<stoopkid> {/zero> #type> /Nat> . , original head:{/zero> #type> /Nat> . . :Formula3> #implies> :Formula2> . }} <= {}
11.01.19 23:45:05<stoopkid>  /zero>
11.01.19 23:45:10<stoopkid>  #type>
11.01.19 23:45:17<stoopkid> . .
11.01.19 23:45:25<stoopkid> :Formula3>
11.01.19 23:46:22<editable-dog>have to admit i havent been looking at the trace output for a while 
11.01.19 23:46:33<editable-dog>and the "original head..." string is new there
11.01.19 23:46:57<editable-dog>still, this should all be within some js string 
11.01.19 23:50:20<stoopkid> hrm, what does "@keywords a ." do exactly?
11.01.19 23:51:02<stoopkid> ah nvm
11.01.19 23:52:13<editable-dog>what a nightmare this old vps is
11.01.19 23:56:01<stoopkid> i take it the keyword "a" gets substituted with "... #type>" somewhere along the way?
11.01.19 23:56:40<editable-dog>well, a get substituted with the whole http//rdf uri
11.01.19 23:56:55<editable-dog>and that gets shortened in shorten() or somesuch
11.01.19 23:57:14<editable-dog>but that shouldnt be a problem
11.01.19 23:57:22<editable-dog>let me see
11.01.19 23:59:04<editable-dog>hrm, this sucks but it works for me, where are you getting the errors?
11.01.19 23:59:48<stoopkid> they're present in trace0.js so it's not just a browser issue or anything like that
12.01.19 00:00:25<editable-dog>what is present there?
12.01.19 00:01:00<stoopkid> window.pyco = Object();window.pyco.frames = [];window.pyco.frames.push("0:<br><ul><li>{} &lt;= {?two /has_succ&gt; ?three . . ?one /has_succ&gt; ?two . . /zero&gt; /has_succ&gt; ?one . }</li><ul></ul></ul><br><br><br><br><br><br><br>");
12.01.19 00:01:18<stoopkid>  /has_succ&gt;
12.01.19 00:01:42<stoopkid>  ". ."
12.01.19 00:02:49<editable-dog>well, its a mess i admit, but is this not valid json or something?
12.01.19 00:04:45<stoopkid> well it just has the wrong characters
12.01.19 00:05:51<editable-dog>yeah i should clean it up some day
12.01.19 00:06:12<editable-dog>it just cuts off the beginning of the full url until the last special char or something
12.01.19 00:06:29<editable-dog><http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ==> #type>
12.01.19 00:06:32<editable-dog>lol
12.01.19 00:06:45<editable-dog>and the dots..idk ..lol
12.01.19 00:07:42<stoopkid> so where does that cutting off happen? shorten() ?
#AutoNomic> 12.01.19 00:13:44*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 11 months 20 days 7 hours 2 minutes 57 seconds ago
                 *** Names: editable-dog stoopkid Deadhand yaraju lexx_[m] reedhhw[m] koo5[m] cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
12.01.19 00:15:27<editable-dog>note to self:kill-emacs doesnt save modified files
12.01.19 00:15:54<stoopkid> so we only do any chopping if p != -1, so any time we chop we'll definitely be chopping the first "<" yea ?
12.01.19 00:16:33<editable-dog>i'd think -1 == not found?
12.01.19 00:16:39<stoopkid> right
12.01.19 00:17:33<editable-dog>rfind finds the rightmost
12.01.19 00:19:17<stoopkid> so i guess we couldn't just change `s = s[p:]` to `s = "<" ++ s[p:]` because s might not be an IRI ?
12.01.19 00:19:24<editable-dog>no, if it found one of the special chars on pos zero, and nothing further, it will do a no-op
12.01.19 00:20:06<stoopkid> right but it couldn't find any of those special chars on pos zero for a well-formed IRI
12.01.19 00:20:13<editable-dog>well, this shortening is just for human consumption
12.01.19 00:21:23<editable-dog>it doesnt matter if the result looks like an iri or whatever
12.01.19 00:22:28<editable-dog>stick a s = '<'+s after the loop if you like
12.01.19 00:26:21<editable-dog>i got used to it
12.01.19 00:46:14<stoopkid> so is shorten called with rdflib terms ?
12.01.19 00:46:33<editable-dog>yeah probably
12.01.19 00:51:24<stoopkid> so there should be an rdflib.Graph object somewhere that these are coming from?
12.01.19 00:51:50<editable-dog>i suppose
12.01.19 00:54:04<editable-dog>hm no it actually gets str's too
12.01.19 00:55:59<editable-dog>maybe only str's
12.01.19 00:56:59<editable-dog>hm, i think i've maybe already tried to use the namespace thingy, and there was some issue
12.01.19 00:57:18<editable-dog>like, you're not actually supposed to define new prefixes
12.01.19 00:57:57<editable-dog>but i dont think we need to
12.01.19 00:58:13<stoopkid> need to use the namespace thing?
12.01.19 00:59:17<editable-dog>rdflib Namespace
12.01.19 01:00:46<stoopkid> maybe
12.01.19 01:01:19<stoopkid> is this shortening is only applied to IRIs and variables right?
12.01.19 01:01:33<editable-dog>yeah
12.01.19 01:11:05<stoopkid> so you're doing at least the first stage of parsing in "def tau(command, files, only_id):" in pyin/tau2.py ?
12.01.19 01:12:29<editable-dog>no, there i just magically copy prefixes from the top of the file into each section
12.01.19 01:13:14<editable-dog>then take everything between kb and fin. ,add the prefixes, write it out, etc
12.01.19 01:13:31<editable-dog>no n3 parsing, i mean
12.01.19 01:14:04<editable-dog>with open(trace_output_path+'kb_for_external_raw.n3', 'w') as f:
12.01.19 01:14:08<editable-dog>f.write(kb_raw_text)
12.01.19 01:14:17<editable-dog>with open(trace_output_path+'kb_for_external_raw.n3', 'w') as f:
12.01.19 01:14:21<editable-dog>f.write(kb_raw_text)
12.01.19 01:14:36<editable-dog>oops
12.01.19 01:14:49<stoopkid> i see, so you just put the prefixes into each section and then use "def parse(data, identifier, publicID):" to parse it with rdflib ?
12.01.19 01:15:20<editable-dog>no, thats just for parsing shouldbe/results
12.01.19 01:15:42<editable-dog>pyco parses the n3 from kb_for_external_raw
12.01.19 01:19:08<stoopkid> i see
12.01.19 01:26:20<editable-dog>i should go sleep
12.01.19 01:27:10<stoopkid> yea probably :) thanks for going over it with me
12.01.19 01:27:48<editable-dog>well, thanks for checkin it out




12.01.19 01:32:43<stoopkid> so, we should probably either translate all of this into a standard RDF syntax (like our general format that combines kbs, queries and shouldbes) or make a BNF grammar for it
12.01.19 01:53:23<stoopkid> so it seems like we have a composition of various different syntaxes that can be used independently and should actually be composable with each other, ex.: n3/RDF, the shouldbes, IRIs, etc.. (notably any of the ones that actually correspond to some standardized object with some explicitly specified grammar in some standard somewhere), and it's actually pretty easy to compose them as grammars, you just have ex. some N3_KB
                 <stoopkid> or IRI non-terminal symbol in your new grammar that uses N3 kbs or IRIs
12.01.19 02:02:01<stoopkid> and.. we could actually do this with arbitrary grammars, even unrestricted ones (with a slightly modified BNF), as we can syntactically differentiate a regex from a CFG from a context-sensitive grammar from an unrestricted grammar in order to choose which tools (like parser-generators) to apply to any given grammar
12.01.19 02:05:16<stoopkid> further at least for CFGs we should basically be able to specify the syntax tree directly by the parse-tree (apparently there's ways you can get rid of left-recursion and then recover the original parse-tree)
12.01.19 02:11:53<stoopkid> in any case, it seems like we end up doing a lot of stuff that looks like it could be combined into a general E-unification system directly on syntax-tree objects
12.01.19 02:15:25<stoopkid> and a lot of text-processing stuff that could be combined into a general parsing framework with explicitly defined languages
12.01.19 02:21:18<stoopkid> hrm, i guess you'd need grammars with typed non-terminals with types from the language that's gonna represent the syntax-trees and a way to instantiate those types using parsed strings (or the actual parse-trees)
12.01.19 02:40:20*** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
12.01.19 02:48:34*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Quit: Bye
12.01.19 02:51:10<stoopkid> hrm, so yea you could at least have an object type and a string type, so string-type non-terminals actually just parse ex. a python string object, and the object-type non-terminals drop their actual literal characters and generate an enum of structs with components typed and named by the types and names of the non-terminals they use in their production-rules




12.01.19 02:51:55<HMCf> hi
12.01.19 02:52:01* HMCf reading
12.01.19 02:52:06<stoopkid> yo
12.01.19 02:52:21<HMCf> am almost caught up
12.01.19 02:54:25<HMCf> ok
12.01.19 02:55:25<HMCf> so again I'll point toward Kay's camp, and the frank etc experiments
12.01.19 02:56:13<stoopkid> iow "hey why not just build everything out of parsers" ?
12.01.19 02:56:14<HMCf> that stuff... but in taurdf land... is the way to go, imo ;-)
12.01.19 02:56:48<HMCf> everything already is built out of parsers, they just admit it up front
12.01.19 02:57:15<HMCf> all computing is parse
12.01.19 02:58:26<stoopkid> do they do anything special with this interpretation though? i.e. do they have some systematic way of organizing and composing languages, assigning semantics to them (presumably interpreted as "attaching more parsing" some way or another) ?
12.01.19 02:58:36<HMCf> yes
12.01.19 02:58:51<HMCf> in particular see Ian's work
12.01.19 02:59:27<HMCf> and the john planner syste stuff
12.01.19 02:59:32<HMCf> *system




12.01.19 03:00:28<HMCf> anyway...
12.01.19 03:01:13<HMCf> any thoughts yet about this monster koo has made? ;-)
12.01.19 03:03:38<stoopkid> only the ones i already wrote above
12.01.19 03:04:49<stoopkid> you?
12.01.19 03:05:32<stoopkid> (i mean, minus stuff like code refactoring & optimization  etc..)
12.01.19 03:06:21<stoopkid> (and bugs other than any problems with the actual inferencing algorithm)
12.01.19 03:07:12<HMCf> it does seem to basically be a superset of the minimal cut semantics, at least



12.01.19 03:07:56<HMCf> well, if i'm understanding it correctly anyway ;-)
12.01.19 03:09:17<stoopkid> yes
12.01.19 03:10:01<stoopkid> it also should be terminating
12.01.19 03:10:16<HMCf> and so far lists seem to work out, which is cool
12.01.19 03:11:18<HMCf> I'll still need to spend some more time on general existential stuff, heh
12.01.19 03:13:12<stoopkid> so the first main question there is whether or not the ordering of query/body items affects the search in a non-trivial way
12.01.19 03:13:43<HMCf> we mostly don't actually care, though? ;-)
12.01.19 03:14:13<HMCf> we've always asserted that we strictly need only *an* ordinality
12.01.19 03:14:35<stoopkid> so iow just defer it to the user to find whatever is the right ordering of the kb/query for them ?
12.01.19 03:14:41<HMCf> no
12.01.19 03:14:51<HMCf> we need to assert one
12.01.19 03:15:19<HMCf> but it can be any one, ofc...
12.01.19 03:15:35<stoopkid> i mean defer it to the user to write their code relative to whatever arbitrary ordinality we picked
12.01.19 03:16:10<HMCf> iow "following the protocol"
12.01.19 03:16:14<HMCf> sure
12.01.19 03:16:38<HMCf> now some ordinalities would be more ideal than others
12.01.19 03:16:55<HMCf> but that is a detail with rather few devils to it.
12.01.19 03:17:50<HMCf> in any case, we should be able to proceed with whatever ordinality we've ended up with, yah? :-)
12.01.19 03:18:29<HMCf> we can always reorder our own code/kbs, the first luxury of the pre-genesis game, in a sense
12.01.19 03:18:42<HMCf> heh



12.01.19 03:24:16<stoopkid> i guess the question is whether or not order of the items matters for something that it shouldn't matter for, i.e. when recursing using bnodes that "should be" independent of each other, i.e. calling a rule with a bnode  argument "peel_of (banana)" after calling it with bnode "suc (suc zero)", as opposed to the more expected situation like calling it with bnode "suc (suc (suc zero))" after calling it with "suc (suc zero)",
                 <stoopkid> but still having it fail because peel_of(banana) just happened to be created sometime after "suc (suc zero)" at some point in the course of inferencing, when if by chance peel_of(banana) had been created before, the query would continue
12.01.19 03:26:31<HMCf> well, that is one aspect, yes
12.01.19 03:30:06<stoopkid> koo answered this but i'm still working through it to see that this actually covers those cases: https://pastebin.com/gYFXQ8in
12.01.19 03:37:08<stoopkid> so i'm thinking what this basically amounts to (or is at least intended to amount to) is: a query/body-item can't recurse with any bnodes it creates while solving that query/body-item, but can recurse with any bnodes that have already been created before that query/body-item was called, modulo normal ep-checking, i.e. treating any already created bnodes essentially like distinct constants for the purposes of ep-checking
12.01.19 03:48:10<stoopkid> there's also a question of whether we want the results to be the same for "?two :has_succ ?three. ?one :has_succ ?two. zero :has_succ ?one" as they are for "zero :has_succ ?one. ?one :has_succ ?two. ?two :has_succ ?three"
12.01.19 03:50:08<stoopkid> the former will fail the latter will succeed, i mean it sort of makes sense that you need to create a bnode "grounded" in some way before (both in time and in text) you can use it for more stuff but then "?one :has_succ ?two. zero :has_succ ?one" succeeds which breaks that pattern
12.01.19 03:51:20<stoopkid> actually nvm i guess the reason that succeeds is because ?one is grounded as [^ :has_succ zero]
12.01.19 04:05:25<stoopkid> now if not for effects, we could technically achieve permutation-independence by just running every permutation (or ideally rather finding some more optimal way of covering every case permutation-independently); i guess i'm also trying to figure out whether or not we actually have permutation-independence already when there are no existentials
12.01.19 04:09:03<stoopkid> (we could still hypothetically have asserted ordinality when doing that because we could cycle through the permutations in a particular way)
12.01.19 04:14:55<HMCf> well we probably don't want to permute effects...
12.01.19 04:18:33<stoopkid> probably not, just giving a baseline that demonstrates that there's at least *some* way to make any inferencing mechanism of this variety into a permutation-invariant version of the same thing, as far as non-effectful QA goes
12.01.19 04:24:49<stoopkid> there's kind of a conflict of interest between using this for effectful computation and logical QA simultaneously, interpreted as actual universals and existentials in FOL, these queries/bodies actually would/should be permutation-invariant because they're hypothetically combined by commutative/associative logical "AND" , but interpreted as effectful computation it has to be interpreted as the
                 <stoopkid> non-commutative/non-associative imperative "AND THEN", and i'm not entirely sure how that correlates with the logical side of it
12.01.19 04:33:11<stoopkid> it looks like one faster (at least in best-case and thus also average-case scenario, though not sure about worst-case) way to achieve permutation-invariance in an arbitrary non-effectful inferencing method (of this variety) would be to try each query/body item in succession, and if any succeed then apply its bindings to the rest of the items and recursively repeat the process on just those until you don't have any left
12.01.19 05:03:50<stoopkid> ok so, if we were to attempt to reconcile these two constraints (of using it for effects where order matters and using it for logical QA where order shouldn't matter), it would suggest that any query/body should be permutation-invariant in terms of the result-set it returns, after all triples that are either calls to effects or use the return values of calls to effects have been removed from the query/body, when running
                 <stoopkid> through it in the standard linear fashion (as opposed to each permutation of it, i.e. it should be already permutation-invariant without doing anything extra)
12.01.19 05:09:35<stoopkid> i guess you would also want that permutation-invariance to apply to any non-effectful triples that use a result returned from an effect, relative to any particular result that's been returned
12.01.19 05:11:38<stoopkid> ex. ?a noneff1 ?b. ?b noneff2 ?c. ?c effect:get_input ?x. ?x noneff3 ?y. ?c noneff3 ?d.
12.01.19 05:16:36<stoopkid> so "?a noneff1 ?b. ?b noneff2 ?c." should hypothetically be permutation-invariant, but then we have an effect "?c effect:get_input ?x.", so the remaining non-effectful subquery "?x noneff3 ?y. ?c noneff3 ?d." after that is still permutation-invariant itself, but the results don't necessarily need to include every instantiation for ?d that you could potentially get with the (assumed permutation-invariant) "?a noneff1 ?b. ?b
                 <stoopkid> noneff2 ?c. ?c noneff3 ?d."
12.01.19 05:21:16<stoopkid> so i guess this also actually shows that we can take any effectful inferencing system of this variety and turn it into a permutation-invariant of itself, that respects the order of effects
12.01.19 05:22:07<stoopkid> or rather, turn it into a version of itself that respects the order of effects, but is permutation-invariant when looking at just the non-effectful subqueries between any effects
12.01.19 05:24:26<stoopkid> ex. non-effectful step 1: (?a noneff1 ?b. ?b noneff2 ?c.)  effectful step 2: ?c effect:get_input ?x. non-effectful step 3: (?x noneff3 ?y. ?c noneff3 ?d.)
12.01.19 05:24:54<stoopkid> so if we call each non-effectful step a piece then we could say that this is piece-wise permutation-invariance
12.01.19 06:47:47<stoopkid> i guess here's another intuitiveness check: if query T1 is a generalization of a query T2, then every result for T2 should be a result for T1
12.01.19 07:05:56<stoopkid> so, i guess here's my concern wrt the intuitiveness/properness when lacking (piecewise) permutation-invariance: lack of permutation-invariance automatically implies "missing" results for at least some of the permutations, and then there's the question of whether or not it's the worst-case scenario where there are kbs/queries where *every* permutation has missing results
12.01.19 07:24:56<stoopkid> hrm.. we can be sure that we don't ever really have that worst-case at least for kbs that don't involve existentials because for every rule we can add the same rule but with a (piece-wise) permutation of the body and this doesn't change the logical semantics but does give a complete result set
12.01.19 07:33:46<stoopkid> wrt ep-checking, it seems for bnodes we basically just don't want a rule recursing with any superstructure of any bnode we've already called it with
12.01.19 07:44:12<stoopkid> ex. if "?x pred [^:has_succ zero]" is in the ep-table, and we generate new bnode [^:has_peel banana] then we can call "?x pred [^:has_peel banana]", this should go through but "?x pred [^:has_succ [^:has_succ zero]]" won't
12.01.19 07:45:50<editable-dog>o/
12.01.19 07:45:55<stoopkid> eyy
12.01.19 07:54:03<stoopkid> hrm, so i think that permutation-invariance is implied by the generalization property, i.e. if it's the case that whenever a query/body-item T1 is a generalization of query/body-item T2, relative to the same ep-table(s), that every result returned by T2 will be returned by T1, then the inferencing mechanism will be permutation invariant for the non-effectful part because the only thing reordering can do to a triple to lose
                 <stoopkid> results from it is constrain it to a specification of itself by applying constant/bnode bindings
12.01.19 07:56:31<stoopkid> so if i'm correct about that then that means breaking the permutation-invariance property in the non-effectful part of the inferencing means breaking the generalization property which seems like a much more non-trivial break
12.01.19 08:18:37<editable-dog>ok well who wants to hear my original solutions
12.01.19 08:18:47<stoopkid> sure
12.01.19 08:18:52<editable-dog>lol
12.01.19 08:20:51<editable-dog>so, ill just note that thinking about order-invariancet of just the non-effectful subset of queries seems not too useful if there are also ordering issues with existentials
12.01.19 08:22:46<editable-dog>im wondering what if an ep-cut goes and binds the relevant rule arguments to some sort of promise-of-search thing
12.01.19 08:23:19<editable-dog>or flags them in some way
12.01.19 08:23:57<editable-dog>so if they're ever touch again, the recursion will continue where it got cut
12.01.19 08:24:03<editable-dog>touched
12.01.19 08:25:19<editable-dog>oh, another thing, this ordering issue also comes up when calling into builtins
12.01.19 08:25:47<editable-dog>like, i have a strXlst, that joins an arbitrary list of arbitrarily long strings into one string
12.01.19 08:26:12<editable-dog>OR splits a string into a list of one-char-long strings
12.01.19 08:27:01<editable-dog>or lets say we have a hash builtin, for simplicity
12.01.19 08:27:29<editable-dog>not even a builtin, just a loadable c library maybe
12.01.19 08:29:22<stoopkid> well, "logically" there isn't any ordering issue with existentials, when interpreting the kb as just a set of FOL/SOL statements, i.e. if "(zero has_succ ?one) AND (?one has_succ ?two)" is true then hypothetically "(?one has_succ ?two) AND (zero has_succ ?one)" should also be true; and like i pointed out, it seems that  breaking permutation invariance breaks the generalization property *and* implies that there exist
12.01.19 08:29:23<stoopkid> kbs/queries where what should have been a logically-irrelevant re-ordering actually ends up with missing results (which in the worst-case scenario might mean kbs such that every permutation of the query has missing results), unless i'm mistaken about this
12.01.19 08:32:13<editable-dog>i guess im trying to say the same, that solving this just for effects wont do because we also have existentials and also we have nonsymmetric builtins
12.01.19 08:33:11<stoopkid> having the inferencing process actually go through the different permutations ofc handles this problem right away (although doesn't necessarily imply that you don't miss any cases, just at least implies that you never miss any cases just due to what "should be" a logically irrelveant reordering) but isn't necessarily optimal the optimal ofc would be if it was already permutation-invariant just going through any given
                 <stoopkid> permutation linearly
12.01.19 08:35:10<editable-dog>what other ways are there to miss cases?
12.01.19 08:36:38<stoopkid> one sec lemme see if i can find the euler.js notes
12.01.19 08:57:54<stoopkid> ok so yea, in the original euler.js the inferencer wouldn't try either generalizations or specializations of patterns (or both, can't remember exactly and i apparently didn't write good documentation about that bug) i.e. if it had already seen "<unbound> pred whatever" it wouldn't recurse with "<constant> pred whatever", because it was using the same unification procedure as you do for rules-matching instead of the
                 <stoopkid> specialized ep-checking unification, and this caused it to miss some cases that we would have expected it to get, and iirc this wasn't due to lack of permutation-invariance but rather due to breaking the generalization property (i'm not sure if permutation-invariance implies generalization property or just the other way around)
12.01.19 09:11:26<editable-dog>?nat a nat. ?nat natXint ?int. ?int intXhash "aaaaaaaaaaaaaaaaaaaaaaaaa"
12.01.19 09:11:31<editable-dog>i'll just leave this here
12.01.19 09:12:53<stoopkid> not sure why this shouldn't be order-invariant?
12.01.19 09:16:19<editable-dog>the reasonable thing to do under any ordering is to just give up?:)
12.01.19 09:17:02<stoopkid> isn't "giving up under any ordering" just an instance of order-invariance ?
12.01.19 09:21:31<editable-dog>do we want to permit intXhash to be a symmetric builtin?
12.01.19 09:21:42<stoopkid> ah no
12.01.19 09:21:55<editable-dog>why
12.01.19 09:21:59<stoopkid> any reordering of triple-sets not reordering of subject and object within a triple
12.01.19 09:22:20<stoopkid> not ex. "all triples are symmetric"
12.01.19 09:22:41<editable-dog>no i mean symmetric in the sense that it will be able to both compute hash from int and int from hash
12.01.19 09:23:41<editable-dog>ie just start yielding any ints with hash "aaaaaaaaaaaaaaaaaaaaaaaaaaaa" starting from 0
12.01.19 09:24:32<stoopkid> ah i see now
12.01.19 09:27:01<stoopkid> i mean, in this case i'd probably say yea actually unless this hash includes some actually-random salting stuff that actually makes it effectful
12.01.19 09:28:06<stoopkid> i mean, people actually do try to solve hashes
12.01.19 09:29:57<stoopkid> hypothetically the intXhash predicate could be expressed by rules, which could be queried with either subject or object variable, or both
12.01.19 09:31:20<stoopkid> the "both" case seems kind of useless but... maybe i'm just not currently imaginative enough to see the utility of that query
12.01.19 09:32:00<editable-dog>of checking the hash of something?
12.01.19 09:32:48<stoopkid> no i mean cycling through every possibility of "?what intXhash ?whatelse"
12.01.19 09:34:05<editable-dog>well, its just a tad hardcore pow
12.01.19 09:34:54<editable-dog>oh, you said both subject and object variable, i misread
12.01.19 09:37:03<stoopkid> ah hrm
12.01.19 09:41:44<editable-dog>The first incompleteness theorem states that no consistent system of axioms whose theorems can be listed by an "effective procedure" (e.g., a computer program, but it could be any sort of algorithm) is capable of proving all truths about the relations of the natural numbers (arithmetic). For any such system, there will always be statements about the natural numbers that are true, but that are unprovable within the system.
12.01.19 09:47:03<editable-dog>anyway, what i was origianlly getting it was that if i added some system of promises of computation / lazy evaluation, i would be able to have ?x a nat; intXhash "aaaaaaaaaaaa" spew out results indefinitely, i just dont know how i'd make the algorith decide if it should start with enumerating nats or enumerating ints
12.01.19 09:47:23<stoopkid> i guess it can actually only satisfy permutation-invariance (without at least doing something more, such as cycling through the possible permutations) and termination simultaneously if there are any preds that are satisfied by an infinite set of triples
12.01.19 09:47:34<stoopkid> aren't*
12.01.19 09:47:53<stoopkid> any preds satisfied by an infinite set of subject/object pairs*
12.01.19 09:52:15<editable-dog>and then we can start running stuff in parallell
12.01.19 09:53:23<editable-dog>we'll probabaly want to have that ability anyway for optimization
12.01.19 09:54:02<editable-dog>will it be faster to enumerate the nats or the hashes? lets try both..
12.01.19 09:56:10<editable-dog>so, as far as im concerned, this rabbit hole is actually a tree
12.01.19 09:56:56<editable-dog>the good thing is that if we decide on a premutation-invariant scheme later, all previous code will still work
12.01.19 09:57:44<editable-dog>so, plan b, lets leave it to interactive/external tools
12.01.19 09:57:46<stoopkid> hrm, note though that we don't need to cycle through a whole infinite space, if we cut something that would otherwise not terminate, ex.e ?x a Nat, then we can just move on to the next triple but keep ?x a Nat around because we only cut it, didn't actually finish it (hypothetically)
12.01.19 09:57:53<editable-dog>but its a fun thing to ponder
12.01.19 09:59:06<editable-dog>you mean something like im saying, keep around a promise of further search?
12.01.19 10:00:25<stoopkid> as you cycle through permutations (if you cycle through permutations, or whatever equivalent extra mechanics you do), yea
12.01.19 10:02:39<editable-dog>not sure i follow
12.01.19 10:11:41<stoopkid> so let's say we're querying ".... ?x a Nat. zero suc ?x ..."
12.01.19 10:12:37<stoopkid> ?x a Nat might loop through zero a Nat, ?one a Nat, ?two a Nat, but eventually somewhere has to cut
12.01.19 10:13:22<stoopkid> so when we cut ?x a Nat, we could ex. return a promise for more search, and swap this with the next query-item, ex:
12.01.19 10:13:59<stoopkid> "... zero suc ?x. promise_for_more(?x a Nat)..." and continue from there
12.01.19 10:16:31<editable-dog>ok i see
12.01.19 10:22:13<editable-dog>what i cant figure out is how to manage multiple promises in one body
12.01.19 10:34:56<stoopkid> so let's take our one example "?two suc ?three. ?one suc ?two. zero suc ?one", where is our first ep-cut
12.01.19 10:39:19<stoopkid> the end of frame 8, when it tries to recurse the second time for "?two suc ?three"
12.01.19 10:42:26<stoopkid> so we cut an infinite search space, so if we were cycling through permutations like i described we would swap it with the next one so now we're querying "?one suc ?two. promise_for_more(?two suc ?three). zero suc ?one" and we would start querying ?one suc ?two as usual, and the promise_for_more(?two suc ?three) is to just fail if you don't call it with a *proper* specialization of "?two suc ?three" (since it already tried
                 <stoopkid> all those possibilities originally before you cut and swapped it)
12.01.19 10:46:27<stoopkid> so now "?one suc ?two." actually succeeds with the correct bnodes for ?one and ?two, and then when you query the promise_for_more(?two suc ?three), ?two is actually bound to a bnode [^suc [^suc zero]], so <bnode> suc <unbound> is a specialization / different pattern from the original <unbound> suc <unbound>, so it proceeds, and then it succeeds just as if we were at the end of querying the forward direction "zero suc ?one.
                 <stoopkid> ?one suc ?two. ?two suc ?three", and then goes on to query "zero suc ?one"
12.01.19 10:51:19<stoopkid> yep, if you run "?one suc ?two. ?two suc ?three. zero suc ?one" it succeeds
12.01.19 10:56:43<stoopkid> so this would just keep swapping-when-cutting but not re-running the stuff the promise already went through, and eventually it would collect every result that you could get by actually cycling through every possible permutation, without having to actually do so
12.01.19 11:02:19<editable-dog>?x a nat. ?y a nat. ?x eq ?y
12.01.19 11:09:57<stoopkid> so under the scheme i described this would try ?x a Nat with ?x = zero, then try ?y a Nat with ?y = zero, which succeeds on zero eq zero, and then tries with ?y = ?one, ?two, which fail on zero = ?one and zero = ?two, at which point it cuts ?y a Nat and swaps with ?x eq ?y, so now we've got "?x a Nat. ?x eq ?y. promise(?y a Nat)", with ?x = zero, and we're starting from ?x eq ?y, this will cut at some point (depending on
                 <stoopkid> how eq is defined), and then swaps again, so: "?x a Nat. promise(?y a Nat). ?x eq ?y", with ?x = zero, starting at promise(?y a Nat), and promise(?y a Nat) is done, so we backtrack and try the next ?x a Nat
12.01.19 11:19:54<stoopkid> ok so yea if we have infinitely many results from different specializations of a query, but cut to only a finite result-set from the more general query (ex. we cut ?x a Nat after a finite amount of ?x's but succeed for infinitely many specialized queries 1 a Nat, 2 a Nat, 3 a Nat, etc..) then we have to fail the generalization property in order to have termination, but it seems also that this demonstrates that you can have
                 <stoopkid> permutation-invariance without satisfying the generalization property
12.01.19 11:22:03<stoopkid> or, not quite permutation-invariance but there's a method to get the combined results from every permutation in finite time
12.01.19 11:28:57<stoopkid> in particular we have to fail the property: if T1 is a generalization of T2 then the result-set of T2 will be a subset of the result-set of T1
12.01.19 11:30:06<stoopkid> otoh we can still satisfy a similar seemingly possibly reasonable property: if T1 is a generalization of T2, then the subset of the result-set of T1 that satisfies T2 will be a subset of the result-set of T2
12.01.19 12:19:28<editable-dog>well, if this scheme gives us order independence, im gonna try to implement it at some point
12.01.19 12:53:30<stoopkid> so if i call the first property generalization-completeness and the second property specialization-completeness, then we adjust an arbitrary terminating inferencing process to make it specialization-complete
12.01.19 12:53:39<stoopkid> can* adjust
12.01.19 12:53:43<stoopkid> (and still terminating)
12.01.19 12:55:22<stoopkid> assume you have a terminating inferencing process that's not specialization complete, i.e. there exist triples T1 and T2 such that T1 is a generalization of T2 but the subset of the result-set of T1 satisfying T2 is a not a subset of the result-set of T2
12.01.19 12:59:43<stoopkid> then in our adjusted inferencing process, whenever we run a triple T, we start by running whatever is the original inferencing process for T, and then at the end of that normal inferencing for T we run each the inferencing process for each generalization T' of T, and then match T with the triples in the result-set of T'
12.01.19 13:00:27<stoopkid> so if the result-set of T' from the original inferencing process that satisfied T but weren't included in the result-set for T, the will be included in the adjusted inferencing process and no other new triples are added/removed
12.01.19 13:01:40<stoopkid> if the result-set of T' from the original inferencing process contained triples** that satisfied T but weren't etc.. ***
12.01.19 13:02:13<stoopkid> they** will be included..
12.01.19 13:57:16<stoopkid> so it seems to me like the clear dividing line is when you're trying to match with the same pattern, and both the new subject is a superstructure of a subject from a previous triple, and same with the new object and the object from that same previous triple
12.01.19 13:59:28<stoopkid> where any constant is a superstructure of only itself, and everything else is independent of it; any var is a superstructure of any var (except maybe in the special case of ?x p ?x), and everything else is independent of it, and bnodes are superstructures/substructures/independent of each other in the obvious way, and everything else is independent of them
12.01.19 14:01:47<stoopkid> (in particular any bnode, and actually any object, is a superstructure of itself)
12.01.19 14:02:49<stoopkid> anything else is either independent, or possibly a proper substructure ex. [^:has_succ zero] is a proper substructure of [^:has_succ [^:has_succ zero]]
12.01.19 14:30:55<HMCf> have either of you looked into where the c compiler is spending its' time?
12.01.19 14:38:12<editable-dog>it's compiling
12.01.19 14:39:11<editable-dog>i looked..and it was compiling
12.01.19 14:46:45<editable-dog>gone compiling
12.01.19 14:47:49<HMCf> which part of compiling is it spending the most time at? :-)
12.01.19 14:48:28<editable-dog>well, compiling code
12.01.19 14:49:06<HMCf> is it mostly in opt passes or mostly in instruction selection or mostly in lexing or mostly somewhere else?
12.01.19 14:49:19<editable-dog>no clue:)
12.01.19 14:49:48<HMCf> then you didn't really look :-P
12.01.19 14:50:16<editable-dog>i know that if you make the code shorter, it gets faster:)
12.01.19 14:51:23<HMCf> I wonder if we should abstract and modularize the backend stuff some, make us ready to plug in libgcc or dynasm or something
12.01.19 14:53:20<editable-dog>i still think a pyin-style interpreter will beat compilation
12.01.19 14:54:30<editable-dog>+ make possible the schemes we've been discussing today, like reordering triples
12.01.19 14:55:25<HMCf> beat jit compile even when we have multiple mutable kbs?
12.01.19 14:55:37<HMCf> I doubt... heh
12.01.19 14:55:49<editable-dog>especially when we have mutable kbs
12.01.19 14:57:49<editable-dog>but...abstracting..or really any work whatsoever on the code emitting code would be useful, because its pretty spaghetti
12.01.19 14:58:27<editable-dog>any work that forces a little refactoring
12.01.19 14:59:17<editable-dog>otherwise we're risking that two years from now, when i quit my job and start looking at it, i'll just have to rewrite it once more:)
12.01.19 14:59:30<HMCf> well in some ways its now actually much cleaner than before, heh
12.01.19 14:59:31<HMCf> but
12.01.19 14:59:39<editable-dog>yes
12.01.19 14:59:53<editable-dog>but its borderline
12.01.19 15:00:04<HMCf> you're not wrong, it is harder to see the actual logic amid the mess of string buffer concats ;-)
12.01.19 15:01:56<HMCf> I might throw some fuzzers at it btw
12.01.19 15:02:18<HMCf> so expect some bug reports :-P
12.01.19 15:02:30<editable-dog>yeah, have fun
12.01.19 15:05:53<stoopkid> HMCf: how would you modularize the back-end in particular?
12.01.19 15:26:12<HMCf> move all of the "c++ specific" string concat stuff out of pyco and into some (selectable) module with a clean and "not c++ particular" interface
12.01.19 15:27:27<HMCf> then could implement some other backend "emit" module like libgcc or llvm calls instead of c++ to disk to compiler process spawn
12.01.19 15:28:38<HMCf> or even just stick opcodes into ram ourselves
12.01.19 15:47:45<editable-dog>ever played with tcc?
12.01.19 15:49:41<editable-dog>anyway any thoughts about the ordering stuff and symmetricity of builtins HMCf ?
12.01.19 16:39:33<HMCf> I'm not sure that I entirely understand the concern with builtins
12.01.19 16:40:21<HMCf> and wrt the ordering, basically just want to see if we can assert that what we have now is well ordered in general "at all" right now
12.01.19 16:40:49<editable-dog>what does it mean well ordered?
12.01.19 16:43:38<HMCf> that equivalent hypergraphs expressed differently (different orders of sets of triples) will evaluate in an equivalent way
12.01.19 16:46:00<editable-dog>like...order of rules in the kb?
12.01.19 16:46:54<HMCf> well, order of statements in general
12.01.19 16:47:24<editable-dog>order of triples in a body too?
12.01.19 16:48:07<HMCf> as one aspect, yes
12.01.19 16:48:41<editable-dog>thats what we've been discussing, that order of triples in body matters
12.01.19 16:48:53<HMCf> well
12.01.19 16:49:32<HMCf> modulo builtins and the cut, they shouldn't, right?
12.01.19 16:50:14<editable-dog>¯\_(ツ)_/¯
12.01.19 16:50:34<editable-dog>theres the existentials ep check issue
12.01.19 16:51:18<editable-dog>whats the motivation though? if modulo builtins, why not also modulo existentials?
12.01.19 16:53:12<HMCf> because existentials are supposed to be internal to our framework, builtins are not
12.01.19 16:57:14<editable-dog>well, thats an arbitrarily decided-on philosophy
12.01.19 16:57:23<HMCf> not really
12.01.19 16:57:26<HMCf> we knowingly and intentionally sacrifice any sort of rational model of builtins (relative to our reasoning) to enable things like e:findall...
12.01.19 16:58:38<HMCf> we know going in that we will never be able to assert consistency of the builtins, they are inconsistent level breakers "on purpose"
12.01.19 16:59:33<HMCf> existentials, otoh, pretty much have to be included in any decision on consistency
12.01.19 17:06:12<editable-dog>or else?
12.01.19 17:11:33<editable-dog>what did you mean the cut?
13.01.19 04:39:16<editable-dog>the bnode ep cut?
13.01.19 10:37:35<stoopkid> HMCf: ian piumarta?
13.01.19 10:51:26<stoopkid> it really amazes me sometimes that the computing industry ever even managed to happen when to get it off the ground they had to market things like: https://en.wikipedia.org/wiki/PARC_(company)#/media/File:Xerox_Alto_mit_Rechner.JPG
13.01.19 10:59:28<editable-dog>https://github.com/koo5/univar/blob/master/tests/clean/ldl/initial_ldl_text
13.01.19 10:59:40<editable-dog>i finally turned this into ast nodes
13.01.19 11:00:17<editable-dog>it should be describing itself
13.01.19 11:00:41<stoopkid> nice
13.01.19 11:03:46<editable-dog>do you understand the pmcfg stuff?
13.01.19 11:04:44<stoopkid> no what is that
13.01.19 11:05:20<editable-dog>http://www.cse.chalmers.se/~krasimir/phd-thesis.pdf
13.01.19 11:21:03<stoopkid> hmmm
13.01.19 11:21:31<stoopkid> not really, maybe extremely vaguely
13.01.19 11:46:29<stoopkid> hm
13.01.19 11:46:51<stoopkid> is there any difference between PMCFGs and generalized CFGs? they look like the same thing
13.01.19 11:50:38<stoopkid> HMCf: the research from alan kay et al looks interesting to me but i'm actually kinda surprised that this is what you're pointing to, seems extremely-object-oriented with minimal emphasis on formal verification (though ofc i'm probably still missing a lot of the picture)
13.01.19 12:45:42<editable-dog>i have no idea
13.01.19 12:49:32<stoopkid> so every non-terminal produces tuples of strings, each non-terminal has an arity so it any given non-terminal can only produce n-tuples for some fixed n, see page 5 here https://www.ps.uni-saarland.de/courses/seminar-ws06/papers/04_daniel_goetzmann.pdf
13.01.19 12:51:16<stoopkid> so in the RHSs of production rules you can define functions
13.01.19 12:51:43<stoopkid> err, you can use functions, which i guess are defined separately like in that chart
13.01.19 12:53:09<stoopkid> so the A non-terminal there has arity 1, so it produces 1-tuples; in the top-left corner it defines a production rule that uses a function g_a and also defines that function
13.01.19 12:53:38<stoopkid> g_a basically takes "values in A" as arguments
13.01.19 12:56:29<stoopkid> so let's say we were using it to produce strings instead of parse strings
13.01.19 12:57:36<stoopkid> A -> g_a[A] says "to make an A, you can give me some other A and i'll run g_a on it"
13.01.19 12:59:39<stoopkid> so, ex. ("") is an A, (from row 2 column 1 in the chart), so g_a[("")] = ("" ++ a) = (a) is an A, so g_a[(a)] = (aa) is an A, etc...
13.01.19 13:00:20<stoopkid> parsing would be the reverse, given a string S, is it something that could've been produced by g_a[A] ?
13.01.19 13:01:55<stoopkid> so we'd be checking whether S has the form Aa
13.01.19 13:02:39<stoopkid> PMCFGs might be slightly different but i can at least that it's the same basic idea
13.01.19 13:02:46<stoopkid> at least tell*
13.01.19 13:05:12<editable-dog>hmm, any restrictions on the functions?
13.01.19 13:06:26<editable-dog>i guess one is that we want them to work both ways
13.01.19 13:07:38<stoopkid> looks like in generalized context free grammars it's arbitrary partial functions and the subclass of MCFGs (and i guess surely also PMCFGs) is defined by the restrictions it imposes on the functions
13.01.19 13:09:16<stoopkid> section 2 of that link
13.01.19 13:15:17<editable-dog>arent the rewrite rules themselves just concatentation of constants and nonterminals?
13.01.19 13:22:47<stoopkid> i'm still trying to figure out how they actually differ in terms of expressiveness
13.01.19 13:25:24<stoopkid> i'm guessing generalized CFGs themselves are actually equivalent to unrestricted grammars since they allow arbitrary partial functions
13.01.19 13:25:45<stoopkid> not sure about (P)MCFGs though
13.01.19 13:28:46<stoopkid> hrm..
13.01.19 13:29:03<stoopkid> so i think CFGs are the same thing as 1-MCFGs ?
13.01.19 13:45:52<stoopkid> hrm nvm i think 1-MCFGs are actually linear grammars https://en.wikipedia.org/wiki/Linear_grammar
13.01.19 13:47:10<stoopkid> so apparently you need to allow at least 2 non-terminals on RHS for it to capture all context-free grammars, and you can't do this with just a 1-MCFG
13.01.19 13:47:23<stoopkid> but apparently 2 is sufficient, due to chomsky normal form https://en.wikipedia.org/wiki/Chomsky_normal_form
13.01.19 13:48:32<stoopkid> so it looks like 2-MCFG should be at least as expressive as MCFG since each of those forms in CNF is a form producable by 2-MCFG
13.01.19 13:49:36<stoopkid> but then apparently, see section 3 of the GCFGs pdf, (m+1)-MCFG is strictly more expressive than m-MCFG
13.01.19 14:00:00<stoopkid> ok nvm i confused myself, 1-MCFG is equivalently expressive to CFG
13.01.19 14:01:33<stoopkid> the "m" on the m-MCFG only restricts the size of the tuples, not the arity of the functions you use, so i confused myself thinking 1-MCFGs would only be using unary functions and hence only be able to end up with 1 non-terminal on the RHS of any production rule
13.01.19 14:02:53<stoopkid> hence how i ended up at linear grammars
13.01.19 14:04:02<stoopkid> but that's not right, the functions in m-MCFG can still use functions of arbitrary arity, so you can still have production rules using arbitrarily many non-terminals on the RHS
13.01.19 14:06:31<stoopkid> so then what can those functions do.. take A -> f[B,C,D], the function operates on 1-tuples like f((x),(y),(z)) where x y and z are strings produced by non-terminals B, C and D resp. and it can do 4 things: rearrange, them, repeat them, remove them, and intersperse them with constants
13.01.19 14:07:40<stoopkid> so ex. f((x),(y),(z)) = "abc"  ++ z ++ z ++ "ghi" ++ x ++ "jkl"
13.01.19 14:08:53<stoopkid> but that's just equivalent to having the production rule be A -> abcDDghiBjkl
13.01.19 14:09:37<stoopkid> and in fact we can basically use a 1-MCFG directly to transform itself into the corresponding CFG:
13.01.19 14:10:04<stoopkid> just run each function on strings representing the names of each of it's non-terminal arguments:
13.01.19 14:10:27<stoopkid> f(("B"),("C"),("D")) = abcDDghiBjkl
13.01.19 14:12:18<stoopkid> and conversely we should be able to turn any CFG into a 1-MCFG, just regarding each non-terminal as being a lambda function of the non-terminals it uses on the RHS
13.01.19 14:13:35<stoopkid> ah hrm...
13.01.19 14:15:00<stoopkid> actually there might be some context-sensitivity introduced already with 1-MCFG, look at the "repeat" operation
13.01.19 14:15:37<stoopkid> A -> f[B,C,D]  vs. A -> abcDDghiBjkl in my example
13.01.19 14:17:36<stoopkid> what doesn't the CFG do? enforce that the two Ds are always the same value
13.01.19 14:23:13<stoopkid> idk whether this is sufficient to demonstrate that 1-MCFGs are more expressive than CFGs, but it's enough to demonstrate that my transformation doesn't work
13.01.19 14:27:11<stoopkid> you can still translate any CFG to a 1-MCFG, if you have repeated non-terminals on the RHS in the CFG they need to be represented as repeated non-terminals in the function in the 1-MCFG
13.01.19 14:27:41<stoopkid> so in this case not A -> f[B,C,D] but A -> f[B,C,D,D], where
13.01.19 14:28:15<stoopkid> f((x),(y),(z),(w)) = "abc" ++ z ++ w ++ "ghi" + x ++ "jkl"
13.01.19 14:29:59<stoopkid> so 1-MCFG is at least as expressive as CFG, possibly more expressive, and then apparently 2-MCFG is more expressive than that...
13.01.19 14:30:14<stoopkid> so... what else can't a CFG do compared to, say, a 2-MCFG:
13.01.19 14:31:17<stoopkid> take A -> f[B,C] where f((x,y),(z,w)) = yzwx
13.01.19 14:32:11<stoopkid> a CFG production rule can't break apart the things it produces for the non-terminals on the RHS and then rearrange, repeat, and remove their internal components
13.01.19 15:30:01<stoopkid> ah woops, i missed a piece of the definition in that link, each argument to the functions can appear at most once in the results, so no repetitions, which means that 1-MCFG definitely is equivalent to CFG
13.01.19 15:31:14<stoopkid> (by my original transformation that i thought was incorrect due to the repetitions)
13.01.19 15:33:15<stoopkid> section 2, definition 4, part 3 in that link in the goetzmann pdf
13.01.19 15:33:27<stoopkid> section 1.2 here: https://aclweb.org/anthology/W/W12/W12-4617.pdf
13.01.19 15:34:26<stoopkid> and so apparently that's what PMCFG is: the version of MCFG where the functions can repeat their arguments
13.01.19 15:44:17<stoopkid> concrete example that 3-MCFG is not context-free: https://pastebin.com/JrNzfCiz
13.01.19 16:30:47* editable-dog starts doubting his cognitive abilities
13.01.19 16:40:03<editable-dog>are the arguments to the functions nonterminals or their linearizations?
13.01.19 16:42:26<editable-dog>because when youre parsing a cfg, you dont carry around the original string for each nonterminal
13.01.19 16:42:48<editable-dog>or a function-transformed string or idk
13.01.19 16:47:02<stoopkid> well, that second pdf calls the functions themselves "linearizations"
13.01.19 16:47:54<stoopkid> the arguments to the functions are tuples of strings
13.01.19 16:51:09<stoopkid> not sure what you mean wrt "carrying around the original string / function-transformed string"
13.01.19 17:05:58<editable-dog>ok, the second pdf seems a little more helpful
13.01.19 17:06:42<editable-dog>so, a nonterminal is from a tuple of strings to a tuple of strings
13.01.19 17:07:29<stoopkid> i guess a tuple of tuples of strings.. to a tuple of strings
13.01.19 17:23:19<stoopkid> the usage of "linearization" in that second PDF seems to be slightly different from but related to the usage in GF
13.01.19 21:07:51<editable-dog>okay, i guess i got it, at least from one perspective
13.01.19 22:56:57<stoopkid> interesting to note that if you allowed each of the functions to actually assert some more tree-structure on the resulting strings then they'd basically be combinators
13.01.19 23:00:18<stoopkid> ex. in a PMCFG a function's gonna take a tuple of tuples of strings to a tuple of strings like f((x1,x2,x3),(y1,y2),(z1,z2,z3)) = ((x1y1y2x2),(x3z1z2z3))
13.01.19 23:00:47<stoopkid> to every such function there's a corresponding function that just flattens the argument tuples, so
13.01.19 23:01:25<stoopkid> f'(x1,x2,x3,..) = ((x1y1y2x2),(x3z1z2z3))
13.01.19 23:02:08<stoopkid> so you can actually interpret f' as being two functions, f1 and f2, one for each component
13.01.19 23:02:15<stoopkid> of the return value*
13.01.19 23:02:34<stoopkid> so f1(x1,x2,x3,...) = x1y1y2x2
13.01.19 23:02:45<stoopkid> but that's just a combinator
13.01.19 23:03:19<stoopkid> but not all combinators are represented
13.01.19 23:04:00<stoopkid> so that's the combinator \x1.\x2.\x3...... . x1 y1 y2 x3
13.01.19 23:04:56<stoopkid> so in a linear-context-free rewrite system, you have combinators that can only rearrange the arguments; in an MCFG, they can rearrange and remove; in a PMCFG, they can rearrange, remove and repeat
13.01.19 23:05:16<stoopkid> only operation we're missing from making them full combinators is "regroup"
13.01.19 23:07:10<stoopkid> that combinator is actually \x1.\x2.\x3.... (((x1 y1) y2) y3), what if we wanted to make some other grouping on it? like: x1 ((y1 y2) y3), well that's a combinator too, ofc, but it's *not* a PMCFG operation
13.01.19 23:11:28<stoopkid> but then what's that parentheses structure, ofc it's just tree-structure so this basically corresponds to giving production rules first-class control over the syntax-tree structure of the strings they generate
13.01.19 23:38:13<stoopkid> HMCf: they're probably on the right track at least that late-binding pretty much everything would probably help a bit
13.01.19 23:39:13<stoopkid> i want statically-typed late-binding!
13.01.19 23:53:34<editable-dog>you want haskell?
14.01.19 00:43:29<HMCf> hi
14.01.19 00:43:44<editable-dog>o/
14.01.19 00:45:10<HMCf> editable-dog: "or else" what you're asserting consistency of is at best just a fragment of the framework...
14.01.19 00:46:14<HMCf> our inference/resolution is the same regardless of what builtins are there, but it is not the same framework if existentials are excluded similarly
14.01.19 00:47:20<editable-dog>same as what?
14.01.19 00:47:40<HMCf> ?
14.01.19 00:47:51<editable-dog>" it is not the same framework"
14.01.19 00:48:06<HMCf> as it was before the exclusion
14.01.19 00:49:04<editable-dog>yes its not
14.01.19 00:50:02<editable-dog>but why is one exclusion fine and the other unacceptable?
14.01.19 00:50:52<HMCf> because exclusions of builtins do leave the framework itself the same
14.01.19 00:55:09<editable-dog>the framework being what? fol?
14.01.19 00:59:29<HMCf> well, a particular(ly twisted) fol called n3logic, yah
14.01.19 01:12:29<HMCf> 0 < stoopkid> HMCf: the research from alan kay et al looks interesting to me but
14.01.19 01:13:06<HMCf> heh, well you should look deeper into what that "oo" really is under the hood
14.01.19 01:13:28<HMCf> the whole thing is a clever lambda calculus
14.01.19 09:01:35<stoopkid> HMCf: isn't that basically just what smalltalk is already?
14.01.19 09:05:23<stoopkid> wrt the builtins & existentials thing, "our inference/resolution is the same regardless of what builtins are there, but it is not the same framework if existentials are excluded similarly"
14.01.19 09:05:38<stoopkid> "because exclusions of builtins do leave the framework itself the same"
14.01.19 09:08:09<stoopkid> yea tbh idk what you mean by this either.. if a built-in left the framework the same we wouldn't be adding it..?
14.01.19 09:12:46<stoopkid> i mean, a couple interpretations i could have for it.. if built-ins were just optimizations of things we could have expressed without builtins, sure
14.01.19 09:13:15<stoopkid> if you're not counting stuff like FFI that we would only do in open-phase, then sure
14.01.19 09:14:17<stoopkid> but then... findall? "we knowingly and intentionally sacrifice any sort of rational model of builtins (relative to our reasoning) to enable things like e:findall... we know going in that we will never be able to assert consistency of the builtins, they are inconsistent level breakers "on purpose"
14.01.19 09:14:33<stoopkid> idk sounds like a pretty big change to the non-findall framework
14.01.19 09:15:21<stoopkid> you're either using a specialist's definition of "the framework" or a specialist's definition of "the same"
14.01.19 09:20:12<stoopkid> isn't findall already part of n3logic itself? and aren't we using it just to make higher-order logic? sounds pretty core to inferencing/resolution
14.01.19 09:22:15<stoopkid> anyway, editable-dog, existentials are way more foundational to the inferencing/resolution than any other built-in, including findall
14.01.19 09:23:39<stoopkid> there's a huge difference between ex. some crypto built-in and "the other half of first-order logic"
14.01.19 09:26:06<stoopkid> even with findall, why would you be going to higher orders when you only have half of the first order
14.01.19 09:35:18<stoopkid> https://stackoverflow.com/a/519651
14.01.19 11:25:32<HMCf> it is a little funny that you argue against me to me, ad then turn around and argue for the same point to koo, heh
14.01.19 11:25:45<HMCf>  < stoopkid> i mean, a couple interpretations i could have for it.. if
                 <HMCf>              built-ins were just optimizations of things we could have
14.01.19 11:25:46<HMCf>              expressed without builtins, sure
14.01.19 11:25:58<HMCf> some builtins are this case, yes
14.01.19 11:26:27<HMCf> lists and 'a' predicate builtins for example
14.01.19 11:27:00<HMCf> those are "within n3logic itself" but implementing builtins for them optimizes and/or simplifies
14.01.19 11:27:38<HMCf> e:findall otoh is *not* a part of n3logic itself, but is an extension to it
14.01.19 11:28:19<HMCf> so you are correct to point out that "n3logic" and "n3logic with e:findall" are strictly different frameworks, all tolled...
14.01.19 11:29:38<HMCf> but the inference resolution itself is the same between them, adding/removing findall does not change the semantics of our main search loop or cut or unification
14.01.19 11:30:30<HMCf> to contrast, adding/removing something that *is* a part of the n3logic itself, such as existentials, *must* change these semantics
14.01.19 11:37:00<stoopkid> well, i wasn't really arguing against your point of existentials being critical, but rather just saying that it didn't seem clear where the boundaries of "framework" were (probably non-coincidentally the boundaries of n3logic are still somewhat unclear to me), and also just saying "because we need to leave the framework the same" doesn't explain why that is the particular part that needs to be left the same
14.01.19 11:38:19<editable-dog>HMCf: yeah, not trying to argue against you, just trying to get you to break out of what seems like a self-referencing loop
14.01.19 11:43:46<HMCf> I'm not seeing the self-reference :-)
14.01.19 11:45:28<HMCf> as I see it this is simple, and does come down to "the boundaries of n3logic" - which really shouldn't be all that unclear...
14.01.19 11:46:21<editable-dog>idk
14.01.19 11:46:51<editable-dog>the n3 "workgroup" groupcall will be on the 21st btw
14.01.19 11:46:57<HMCf> "n3logic" itself is what tbl set out in his original design documents... anything introduced later by implementations (incl ep check, e:findall, all the cwm builtins, etc) are extension
14.01.19 11:48:32<stoopkid> and this is important because it can express at least some significant portion (if not all of) FOL, with checkable consistency of any kb ?
14.01.19 11:49:41<HMCf> "this" being?
14.01.19 11:49:54<stoopkid> "pure n3logic"
14.01.19 11:50:18<HMCf> well, it is important for a few reasons
14.01.19 11:50:54<HMCf> but, yes, that is one of them
14.01.19 11:51:18<HMCf> (distinguishig the fragment that has the corresponding)
14.01.19 11:53:05<HMCf> gtg for probably 1-3 hrs
14.01.19 11:54:41<stoopkid> so, this doc and only this doc? https://www.w3.org/DesignIssues/N3Logic
14.01.19 14:48:52<editable-dog>stoopkid: got any pull requests for me?
14.01.19 15:52:05<editable-dog>im having trouble seeing where to draw the line between stuff like this:
14.01.19 15:52:06<editable-dog>?digits has_len ?len. ?len nat2digits ?digits.
14.01.19 15:52:43<editable-dog>and the nat stuff we used as an example yesterday
14.01.19 15:55:47<stoopkid> i left off w/ the code when i was looking at the trace issues but i guess we're thinking we're gonna do some more comprehensive fix there so i guess i should wrap up my README fixes, i'll do that in a bit, looking at something atm; what do you mean draw the line?
14.01.19 15:56:05<stoopkid> or, which line
14.01.19 15:59:18<editable-dog>like, what if multiple rules yield with a promise?
14.01.19 16:01:23<editable-dog>like, this nat2digits example clearly might have some solutions if the reaoner put in enough work
14.01.19 16:04:36<editable-dog>the obvious solution is to keep going back and forth over all the body items until none of them are able to come up with anything new
14.01.19 16:08:35<editable-dog>if i ask whats a nat, shouldnt the reasoner let me know that it might have more results if i ask for more results?
14.01.19 16:10:16<stoopkid> hm.. wouldn't that basically require keeping track of every place it ever ep-cut during the search ?
14.01.19 16:10:46<stoopkid> (at least, ep-cut due to recursing w/ a superstructure)
14.01.19 16:10:51<editable-dog>seems like thats what we're gonna do in any case
14.01.19 16:11:36<stoopkid> idk about that
14.01.19 16:11:44*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-lbfxibeiuxziytjm) left #AutoNomic: Ping timeout: 268 seconds
                 *** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-rullzieqgghafkmq) left #AutoNomic: Ping timeout: 268 seconds
14.01.19 16:12:12<editable-dog>like, the way i think about this is, the search is a tree of states
14.01.19 16:12:20<editable-dog>state has int entry;
14.01.19 16:12:50*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-ffubiqetzikinygz, (unauthenticated): @reedhhw:matrix.org)
14.01.19 16:12:57*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-pbuuejliozyvuujo, (unauthenticated): @lexxus:matrix.org)
14.01.19 16:12:59<editable-dog>to yield, it sets this entry to where it left off
14.01.19 16:13:23<editable-dog>so there might just be a special entry value for indicating that the state suspended itself
14.01.19 16:14:22<editable-dog>likewise, it could tell which of its child states are suspended
14.01.19 16:19:51<stoopkid> right but it's only keeping track of one tree at a time because when it ep-cuts a search-path it's done with it and then that path is gone, whereas if you could keep going on *every* ep-cut on superstructural recursions then you'd have to keep track of every search-path that ever ended up ep-cutting
14.01.19 16:22:27<editable-dog>dunno what you mean one tree
14.01.19 16:23:20<stoopkid> there's only one proof-tree in memory, the current proof-tree it's trying to finish
14.01.19 16:23:22<editable-dog>and even for just the simplest mechanism of ensuring order-independence in the case we discused yesterday, it has to suspend these states instead of being done with them
14.01.19 16:24:08<editable-dog>yeah, and it evolves over time
14.01.19 16:24:10<stoopkid> when a branch of the tree fails due to ep-cut, it deletes that branch and is no longer keeping track of it, it's only ever keeping track of the currently viable branches of a single tree
14.01.19 16:26:47<stoopkid> so basically along with the proofs-list it returns, it would be returning every partial proof that it had at any point that it ep-cut
14.01.19 16:28:02<editable-dog>no, if a child state promises something, it just propagates to the parent
14.01.19 16:28:25<editable-dog>the parent will know where to pick up
14.01.19 16:29:32<stoopkid> right, the parent is holding onto the failed branch, even if it knows where to pick up in execution it still has to hold onto the proof-trace that led up to that point of execution
14.01.19 16:35:18<editable-dog>well, if you've got ?x a nat, it will first yield zero, one and two before suspending
14.01.19 16:35:55<stoopkid> in the mechanism we discussed yesterday for order-independence, we were suspending the states of query/body-items that ep-cut, but not to continue running them past the point that they ep-cut, but rather just so that they could potentially be run under a *different pattern* if another query/body-item had run first and bound a variable used by that item, and it won't actually propagate the ep-cut execution points back up to
                 <stoopkid> its parent
14.01.19 16:36:00<editable-dog>and whatever are the next query body items get their chance to run
14.01.19 16:38:14<stoopkid> right, but they don't need to have ?x a Nat run with unbound ?x and have it continue more to yield three, four, five, etc..
14.01.19 16:39:58<stoopkid> otoh if you had ?x a Nat. "10" str2Nat ?x. then if you run "10" str2Nat ?x. first it will bind ?x to 10 and, now run ?x a Nat again, but ?x is bound to 10 so it should succeed now
14.01.19 16:42:51<stoopkid> so ?x a Nat runs until it ep-cuts, and its promise is to fail if it's called again in the same pattern, but if any of its vars have been bound then it can continue
14.01.19 18:19:38<editable-dog>well, ok, i think i could do that
14.01.19 18:44:29<HMCf> hrmmm
14.01.19 18:44:59<HMCf> but we only ever care about having 0 or 1 solutions...
14.01.19 18:45:53<HMCf> maybe I'm missing something, but why would it ever be useful to resume?
14.01.19 18:49:21<HMCf> anyway, I ran a fuzzer for awhile today, but all it found was a lot of cases where the parser allows through some cases that then confuse the kb generation
14.01.19 18:49:45<HMCf> like using "?]" as a variable name, for one example
14.01.19 18:50:29<HMCf> anyway, after I filtered out such parser problems and just let it churn on pyco itself it found no problems at all so far
14.01.19 18:50:49<HMCf> (after many hours)
14.01.19 18:51:30<HMCf> ofc otoh it is fuzzing very very slowly, even with the call to make and run disabled... heh
14.01.19 18:52:14<HMCf> (so i'm basically right fuzzing only the conversion to c, not even checking the generated c for valid syntax)
14.01.19 18:52:20<HMCf> *right now
14.01.19 18:53:29<HMCf> not a very interesting fuzz, but at least reassuring that pyco itself is quite robust, I guess :-)
14.01.19 18:54:08<HMCf> if we could make the compile step not take 30+ sec it'd be able to be much more interesting :-)
14.01.19 19:21:06<editable-dog>stoopkid:but this actually needs to propagate the suspensions up to parents, even in our simple ?three succ ?four example, the succ isnt one state ep'ing, its its child states
14.01.19 19:21:45<editable-dog><HMCf> maybe I'm missing something, but why would it ever be useful to resume?
14.01.19 19:21:47<editable-dog>idk
14.01.19 19:22:03<editable-dog>wanting to know what nats are there?
14.01.19 19:23:15<editable-dog>HMCf: tcc, like i said
14.01.19 19:23:26<editable-dog>anyway yeah thats not a very interesting step
14.01.19 19:23:49<editable-dog>i know of at least one but that you should find once you try also compiling it:)
14.01.19 19:24:28<editable-dog>and yeah ive noticed a couple of cases where rdflib lets through weird stuff
14.01.19 19:26:21<editable-dog>anyway, not that i think that the suspension state actually has to be propagated, i feel i dont have any idea how this should work stoopkid 
14.01.19 19:32:24<stoopkid> <HMCf> maybe I'm missing something, but why would it ever be useful to resume?
14.01.19 19:32:34<stoopkid> possibly just to get that 1 result in the first place
14.01.19 19:36:45<stoopkid> editable-dog: i mean, having a point of execution propagate up to the parents so that they can continue inferencing from the current point in the search is one thing, keeping track of every ep-cutted branch along the way is another
14.01.19 19:39:37<stoopkid> take kb: "zero a Nat. {?x a Nat} => {?x succ ?y. ?y a Nat}" query: "?x a Nat"
14.01.19 19:39:48<stoopkid> we'll get zero, one, two a Nat... up until we ep-cut ofc
14.01.19 19:40:30<stoopkid> and then it's just done, don't keep returning more
14.01.19 19:41:31<stoopkid> so we yield zero a Nat, so ?x a Nat knows where to start executing when we call back into it to get the next result ofc
14.01.19 19:41:57<stoopkid> if we get to the ep-cut and there's no more query items, then it's done
14.01.19 19:43:57<stoopkid> if otoh our query was '?x a Nat. "10" str2nat ?x', then it does the same thing but when it hits the ep-cut it swaps them and tries to keep going
14.01.19 19:44:52<stoopkid> so now we're querying '"10" str2nat ?x. ?x a Nat', and we can treat this as just being one of the particular execution points for the whole query coro
14.01.19 19:48:02<stoopkid> "10" str2nat ?x. binds ?x to 10, 10 a Nat succeeds, we apply the reverse permutation to put the items back in the original order so we get a result '10 a Nat. "10" str2Nat 10'
14.01.19 19:50:31<stoopkid> now let's say we queried "?x a Nat. '10' str2nat ?y"
14.01.19 19:51:23<editable-dog>what do you mean execution point?
14.01.19 19:52:25<stoopkid> the places a coroutine can start
14.01.19 19:52:39<editable-dog>ah
14.01.19 19:52:48<editable-dog>entry points
14.01.19 19:53:08<stoopkid> there's the term i was looking for
14.01.19 19:58:20<stoopkid> so basically i'm not really talking about implementing any real kind of promises system for ep-cuts, rather i'm starting with "try every permutation of the query/body-items" and then just optimizing that
14.01.19 20:00:33<stoopkid> so technically you could literally just cycle through every permutation, and apply the standard inferencing process to that, but that would be doing a whole lot of redundant work
14.01.19 20:05:46<stoopkid> let's say we have "?x a ASCIIchar. ?y a Nat. '10' str2Nat ?y"
14.01.19 20:06:27<stoopkid> we know we have run the query in a different order if we're gonna get a result because of the ep-cut on ?y a Nat
14.01.19 20:06:58<stoopkid> but ?x a ASCIIchar is finite and probably not something that would ep-cut before enumerating the entire space
14.01.19 20:07:24<stoopkid> we don't ever have to permute that
14.01.19 20:08:22<stoopkid> because it's gonna get every single result that can possibly work for ?x a Nat, and then the rest of the query after that is gonna be tried with every single one of those ?x values
14.01.19 20:08:38<stoopkid> err, ?x a ASCIIchar
14.01.19 20:10:45<stoopkid> if a different ?x value had come from a query item prior to ?x a ASCIIchar, and wasn't in this result-set that we got for ?x a ASCIIchar, then it would have failed, and likewise running ?y a Nat. '10' str2Nat ?y. won't come up with anything that hasn't already been covered by ?x a ASCIIchar
14.01.19 20:14:03<stoopkid> so a permutation should only be triggered specifically when we're not sure we haven't prematurely cut off the search space with some ep-cut
14.01.19 20:15:07<stoopkid> so, ex. ?x a ASCIIchar succeeds with 'a' a ASCIIchar, and then goes on to the rest of the query
14.01.19 20:18:30<stoopkid> ?y a Nat will succeed on zero, one and two but the whole query will fail on these because '10' str2nat 10, and then it ep-cuts, and we say hrm idk that this doesn't prematurely cut off the search space, and there's more query left, maybe if we try that part of the query first, it'll tell us to try some part of the search space we didn't already try
14.01.19 20:21:23<stoopkid> so this is why i'm implementing the permutations in terms of swapping individual adjacent pairs at a time, directed by ep-cutting, and also why the promise we get when we ep-cut something and swap it with the thing in front of it is basically just a promise not to repeat itself, because for those cases that we already tried for ?y a Nat before swapping it, it's exactly the same kind of situation as i just described with ?x
                 <stoopkid> a ASCIIchar
14.01.19 20:21:52<stoopkid> ex. we know we've already tried every ?y value that could result from that
14.01.19 20:22:44<stoopkid> so the way it would end up in that situation where it "might have" repeated itself would be if you swapped it but the thing you swapped it for still didn't bind its variable
14.01.19 20:23:05<stoopkid> ex: "?x a ASCIIchar. ?y a Nat. '10' str2Nat ?z"
14.01.19 20:24:47<stoopkid> so if something reaches the end of its inferencing without prematurely cutting, it just backtracks instead of swapping, and that's how we cut out those redundant permutations
14.01.19 20:25:06<stoopkid> i.e. the standard inferencing process
14.01.19 20:26:59<stoopkid> if something does prematurely cut, we swap, but with a promise not repeat anything we tried before prematurely cutting if we're called in the same pattern (if it's called in the same pattern it tries swapping again, unless it's the last item in the query in which case it's done and swaps back)
14.01.19 20:27:55<editable-dog>something like ?x a nat. ?y a nat seems would just go swapping forewer
14.01.19 20:28:29<editable-dog>so we're maybe talking about swapping for first unsuspended item to the right
14.01.19 20:28:56<editable-dog>but after you ran out of unsuspended items, you gotta try all permutations of suspended items
14.01.19 20:29:27<stoopkid> not forever
14.01.19 20:29:57<stoopkid> so we get 0,1 ;   0,2 ;   0,3 ; and then ?y a Nat ep-cuts prematurely right
14.01.19 20:30:19<stoopkid> so now it's gonna swap with whatever comes after it, which is nothing, so it's done and backtracks
14.01.19 20:30:51<stoopkid> same for 1,1 ; ... ; 2,1 ... ; and then ?x a Nat ep-cuts prematurely
14.01.19 20:32:25<stoopkid> so we swap with the promise, now we have "?y a Nat. promise(?x a Nat)"
14.01.19 20:33:04<stoopkid> ?y a Nat succeeds with 0 a Nat. now we call promise(?x a Nat), with ?x unbound
14.01.19 20:33:19<stoopkid> the promise is not to repeat itself in the same pattern, so this fails
14.01.19 20:33:48<stoopkid> ?y = 0 doesn't bind anything to ?x so we're still in the same pattern
14.01.19 20:34:54<stoopkid> so then ?y a Nat succeeds with 1 and 2 but promise(?x a Nat) keeps failing
14.01.19 20:35:46<stoopkid> so now when ?y a Nat ep-cuts, it unswaps
14.01.19 20:36:08<editable-dog>if ?y a nat ep-cuts after 0,3, so the rule is done and backtracks, we're done with the rule and never go back into it
14.01.19 20:37:58<stoopkid> that's how we currently do it yea (also idk why i started the ?y from 1, should be 0, 1, 2 not 1,2,3)
14.01.19 20:40:13<stoopkid> wait no
14.01.19 20:40:23<stoopkid> we're not done with the rule until after ?x a Nat is done
14.01.19 20:41:28<stoopkid> so ex. after ?y a Nat ep-cuts after having been swapped to the left, it unswaps back to the right
14.01.19 20:41:48<stoopkid> now "promise(?x a Nat). ?y a Nat"
14.01.19 20:42:41<stoopkid> but now promise(?x a Nat) is actually done, the last move for ?x a Nat to make from that position was to try swapping to the right and when it gets back to its original position its done, and backtracks to whatever came before that
14.01.19 20:44:34<stoopkid> if ?x a Nat was the first item in the query, then yea, at this point we would be done with the rule and never go back into it
14.01.19 20:45:41<stoopkid> in the body*
14.01.19 20:49:05<editable-dog>ok, if i may, im thinking about it like this: if i hit an ep, (that a check right after a rule is first invoked), i suspend the rule. The calling rule doesnt even notice that the body item returned with a suspension, just goes onto the next body item. After it finishes all body items, instead of yielding, it checks all substates. If there are any suspends, it checks if there was any progress made, if there was, it loops through all
                 <editable-dog>substates again and gives them again a chance to make progress, eventually they all either yield or fail, or all report 0 progress, in which case we propagate the suspension to the parent. A rule measures its progress only when it reenters after suspension, and it just means that if upon this re-entry, it finds it's no longer blocked by ep, it has progress, otherwise not
14.01.19 20:49:27<editable-dog>thats
14.01.19 20:51:26<stoopkid> yea that could work
14.01.19 20:56:49<stoopkid> if you do this based on the same kind of swapping-based scheme i described then you could cycle through relevant permutations, achieving permuation-invariance, and it looks like probably squeeze some more out of the existentials than what i described
14.01.19 20:57:20<stoopkid> it does kind of have the downside of giving the existentials a slightly more non-deterministic behavior though
14.01.19 21:05:11<stoopkid> well, maybe
14.01.19 21:06:11<stoopkid> not non-non-deterministic... i'm maybe confusing myself; anyway.. "and it just means that if upon this re-entry, it finds it's no longer blocked by ep, it has progress"
14.01.19 21:09:54<stoopkid> when/how/why is the parent propagating changes back down to the child during the child's inferencing?
14.01.19 21:20:38<stoopkid> idk let's walk through a concrete example of it
14.01.19 21:32:45<editable-dog>https://github.com/koo5/univar/commit/f6022c5c076b072023449040a805038163266a6a
14.01.19 21:33:30<stoopkid> yet another lemma: the only-universals portion of this inferencing is permutation-invariant and even stronger has total completeness, every query can/does return every answer in finite time (permutation-invariance is trivially implied by this)
14.01.19 21:34:39<editable-dog>what do you mean during the childs inferencing? how does a child notice that the parent changed some binding?
14.01.19 21:36:14<stoopkid> right, in our current scheme and also in the scheme i described once we initiate a rule-call we don't change any of the bindings that we called it with
14.01.19 21:36:54<editable-dog>i first bind parameters to locals, only then check ep
14.01.19 21:37:35<editable-dog>well, unify parameters with locals
14.01.19 21:38:26<editable-dog>so, even if a rule immediately suspends, the sibling rule will already work with the first rule's locals
14.01.19 21:39:11<editable-dog>im not 200% sure but i think it will all just work
14.01.19 21:44:42<stoopkid> hrm..
14.01.19 21:46:47<stoopkid> there might be multiple rules that any given body-item has ep-cut on, so would you be keeping a list of suspended rules per body-item?
14.01.19 21:48:58<editable-dog>no, the predicate is the coro, and its either failed, successfully yielded, suspended with progress, or suspended without progress
14.01.19 21:49:27<editable-dog>ah hmm
14.01.19 22:27:05<editable-dog>i guess if i measure progress by comparing old entry with entry upon yield
14.01.19 22:28:21<editable-dog>hrm
15.01.19 01:13:02<HMCf> editable-dog: tcc, sure... or peachpy :-)
15.01.19 01:20:13<HMCf> I don't think what we want is actual permutation invariance, is it?
15.01.19 01:21:01<HMCf> I must be missing something here
15.01.19 01:29:11<stoopkid> HMCf: why not? if your inferencing process fails permutation invariance then by definition it's missing solutions for some permutations of the same query/rule-body
15.01.19 01:44:54<HMCf> yes, but it will never miss all solutions, right?
15.01.19 01:45:12<stoopkid> it might
15.01.19 01:45:26<stoopkid> ?x a Nat. "10" str2nat ?x.
15.01.19 01:45:47<stoopkid> in this order it fails, 0 results; in the reverse order it succeeds, with only 1 result
15.01.19 01:46:55<HMCf> are we assuming some Nat rules?
15.01.19 01:47:44<stoopkid> yea the standard "zero a Nat. {?x a Nat} => {?x suc ?y. ?y a Nat}"
15.01.19 01:48:10<HMCf> and can you give the example without a builtin?
15.01.19 01:51:26<stoopkid> ?x a Nat. ?x id 10.
15.01.19 01:51:36<stoopkid> where "{} => {?x id ?x}"
15.01.19 01:52:07<HMCf> is "10" a Nat somehow though?
15.01.19 01:52:09<HMCf> ...
15.01.19 01:52:28<stoopkid> it's short-hand for:
15.01.19 01:52:55<stoopkid> zero suc ?one. ?one suc ?two. ?two suc ?three. .... ?nine suc ?ten. ?x a Nat. ?x id ?ten.
15.01.19 01:54:15<HMCf> hrmm, seems that should work in either direction already, then?
15.01.19 01:54:51<stoopkid> how's that? ?x a Nat will ep-cut before it counts up to 10
15.01.19 01:55:59<HMCf> maybe i misunderstand what you mean by "it's" then
15.01.19 01:56:23<HMCf> if those are all facts in the kb, then what cuts?
15.01.19 01:57:10<HMCf> maybe I'm making a bad assumption that by "10" you meant "?ten"?
15.01.19 01:58:55<HMCf> write what you mean up as a .tau? :-)
15.01.19 01:59:17<stoopkid> https://pastebin.com/KSddHKbr
15.01.19 02:09:30<stoopkid> i guess i could maybe imagine ?x a Nat returning some "ungrounded bnode" and trying to finish the query with that, so like zero a Nat. _:one a Nat. _:two a Nat. and then _:someNat = [^suc [^suc [^suc ?someVar]]] and then this can unify with ?ten
15.01.19 02:13:28<HMCf> well, yah, this goes back to that thing about bnodes in the query
15.01.19 02:17:09<stoopkid> what thing in particular
15.01.19 02:20:49<HMCf> they're not unbound once solved, even if all they match against is another unbound... so every statement there would actually always match, in any order... you'll never get back the answers "?x id ?x" or "?ten id ?ten"... you'll always just get back "?x id ?ten" in the affirmative
15.01.19 02:21:22<HMCf> and that is ok
15.01.19 02:24:27<HMCf> let me put that another way
15.01.19 02:25:48<HMCf> imagine that after each statement of the query matches, you replace vars from that match with skolem names and prepend as a fact to the kb
15.01.19 02:27:51<HMCf> (this is in effect what the inference already does in frame scope envs)
15.01.19 02:31:44<stoopkid> why just the query why not subqueries? each of the facts that satisfy a rule-body should also be prepended right?
15.01.19 02:33:12<HMCf> we already do, that's what frame env "is" - a (temporary) shorthand of that collection of facts
15.01.19 02:34:38<HMCf> we ofc don't want to actually grow the kb in either case
15.01.19 02:35:07<HMCf> but we do want to treat those "solved bnodes" as solved
15.01.19 02:38:52<stoopkid> ok so zero suc ?one matches with the rule and then the fact, and so we prepend the kb with zero suc _:one before proceeding with ?one suc ?two.. ?
15.01.19 02:39:16<HMCf> _:one suc ?two
15.01.19 02:39:48<stoopkid> ok, and _:one doesn't unify with zero ?
15.01.19 02:40:33<HMCf> does it matter? ;-)
15.01.19 02:40:54<stoopkid> yes?
15.01.19 02:43:09<HMCf> why?  do we care here if ?one and ?two are the same or not?
15.01.19 02:43:25<HMCf> (we don't...)
15.01.19 02:44:10<stoopkid> maybe not but concretely this is a question of whether we would succeed when trying to match _:one suc ?two with the newly prepended fact, or if we would move on to try the rule instead
15.01.19 02:45:31<HMCf> do you arrive at a different solution set in the end either way?
15.01.19 02:47:20<stoopkid> i guess not, if we're assuming this is just FOL axioms/rules, then there's no constraints there to tell us that the successors of zero aren't zero
15.01.19 02:49:19<HMCf> or, more correctly, that the sucessor of zero, call it ?a, isn't also the sucessor of the sucessor of zero... we just know that we have zero and sucessors, and then we're asking if one of those sucessors can satisfy ?x id ?x... and any of them can, and so that one can, regardless of it is one, two, or both. :-|
15.01.19 02:50:23<HMCf> or 10.
15.01.19 02:50:52<HMCf> or 3666.
15.01.19 02:51:03<stoopkid> why would we have ?x id ?ten though ? seems we don't have enough information to determine that they should be the same ?
15.01.19 02:52:30<HMCf> we aren't actually determining if they are the same, only that they both satisfy ?x id ?x...
15.01.19 02:54:56<HMCf> which is why the statements of the query could come in any order there, and it would be the same
15.01.19 02:55:42<HMCf> i gtr soon
15.01.19 02:56:26<stoopkid> ok so "zero suc ?one. ?one suc ?two. ?x a Nat. ?x id ?two. ?two id zero" ... this succeeds ?
15.01.19 02:57:55<stoopkid> and the semantics for matching <A> p <B> against ?x p ?x are to first see if <A> p <A> works, then see if <B> p <B> also works but not actually unify them ?
15.01.19 02:58:29<stoopkid> (not actually unify <A> with <B>, that is)
15.01.19 02:59:24<HMCf> well, no you're extrapolating away from bnodes now
15.01.19 02:59:37<HMCf> you still unify, that is not any different
15.01.19 02:59:57<HMCf> and the rules for unification against named nodes are still the same
15.01.19 03:02:55<HMCf> ok, maybe one thing needs clarification... when we renamed ?one to _:one we should keep in mind that this _: is the bnode namespace of the query document, not the kb
15.01.19 03:03:45<HMCf> so it is more like rewriting the query to:
15.01.19 03:09:08<HMCf> zero suc ?one. ?one = <query://one>. <query://one> suc ?two. ?two = <query://two>. ... ?x a Nat. ?x = <query://x>. <query://x> id <query://ten>.
15.01.19 03:09:36<HMCf> well, that is probably less helpful of an explanation
15.01.19 03:09:56<HMCf> anyway i gtg
15.01.19 05:57:24*** Quit: yaraju (uid341344@gateway/web/irccloud.com/x-zrpsbfyjvmeialkx) left #AutoNomic: Quit: Connection closed for inactivity
15.01.19 07:04:34*** Join: yaraju (uid341344@gateway/web/irccloud.com/x-mxrevwrrbbvwslwl, yaraju: yaraju)
15.01.19 07:58:57*** Quit: yaraju (uid341344@gateway/web/irccloud.com/x-mxrevwrrbbvwslwl) left #AutoNomic: 
15.01.19 08:47:24<editable-dog>kb
                 <editable-dog>:zero a :Nat.
                 <editable-dog>{?x :has_succ ?y. ?y a :Nat} <= {?x a :Nat}.
                 <editable-dog>fin.
15.01.19 08:47:37<editable-dog>query
15.01.19 08:47:39<editable-dog>:zero :has_succ ?one. ?one :has_succ ?two. ?two :has_succ ?three. ?three :has_succ ?four.
15.01.19 08:47:42<editable-dog>works
15.01.19 08:48:21<editable-dog>wheras
15.01.19 08:48:23<editable-dog>query
                 <editable-dog> ?three :has_succ ?four. :zero :has_succ ?one. ?one :has_succ ?two. ?two :has_succ ?three.
15.01.19 08:48:25<editable-dog>fails
15.01.19 13:56:47<stoopkid> mechanical calculators are cool
15.01.19 13:57:30<stoopkid> editable-dog: in your scheme yes; HMC is describing something completely different than that though
15.01.19 14:12:44<koo5[m]> What were you talking about?
15.01.19 14:20:08<stoopkid> first, order-invariance for kbs/queries that include potentially-infinite things like ?x a Nat, ?two suc ?three, etc.. then HMC's alternative interpretation for how to query these things
15.01.19 14:22:06<stoopkid> so... first thing to note is that HMC doesn't treat the bnodes as being known to be different from each other
15.01.19 14:23:30<stoopkid> or even known to be different from zero.. or any other constant
15.01.19 14:26:26<stoopkid> HMCf: so... is the idea that they're bnodes in the query, but they have a homomorphism into the kb which might be to some constant, or might be to some other bnode, but the results don't need to know about that they'll just contain the query bnode?
15.01.19 14:42:55<koo5[m]> How do we get bnodes in a query?
15.01.19 14:43:28<koo5[m]> Known to whom, where?
15.01.19 14:59:48<koo5[m]> Ok well i get some of that, i guess
15.01.19 16:17:19<stoopkid> query "zero suc ?one", ?one gets bound to "some bnode"
15.01.19 16:17:59<stoopkid> apparently this bnode is actually not the same bnode as the bnode that it actually bound with in the kb
15.01.19 16:19:47<stoopkid> apparently because... the query and kb are different documents, so.. different graphs... so actually literally different graph nodes, in different graphs
15.01.19 16:24:02<stoopkid> from what i gather, what we're looking for is a homomorphism between the query graph and the kb graph
15.01.19 16:27:38<stoopkid> and i think this is basically equivalent to asking, is there a subgraph of the kb that is a model of our query
15.01.19 16:29:38<stoopkid> or rather, is the closure of the kb a model of the query
15.01.19 20:22:33<HMCf> the kb is one (or more) document(s)... the query is another distinct document, and the result is yet another... this is part of why bnodes start to get tricky, heh
15.01.19 20:32:36<HMCf> anyway some of what I said yesterday was probably just more confusing
15.01.19 22:17:29*** Join: sifar (~sifar@117.230.16.225, (unauthenticated): sifar)
15.01.19 22:17:30*** Quit: sifar (~sifar@117.230.16.225) left #AutoNomic: Changing host
                 *** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
15.01.19 23:13:59*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Quit: Bye
16.01.19 04:05:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xlmwxpymrzifvrjs) left #AutoNomic: Quit: Connection closed for inactivity
16.01.19 08:59:06<editable-dog> well, ok, different graphs, homomorphis
16.01.19 08:59:35<editable-dog>m, why not, but i dont see how it relates to actual reasoning
16.01.19 09:02:59<editable-dog>anyway, also i see how interpreting our little nat example as fol formulas would get us the result, and it seems pyco is miles away from that
16.01.19 10:12:23*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jccstxogekcxhdxq, stoopkid: stoopkid)
16.01.19 10:19:29<editable-dog>one last thing, one more scheme: when we hit ep due to a newer bnode, we flag it and yield. flagged bnodes unify with other flagged bnodes and nonflagged bnodes as usual. 
                 <editable-dog>so, ?three succ ?four will eventually bind three to [^succ [^succ <flagged>]].
                 <editable-dog>?two succ ?three will later unify three with [^succ [^succ [^succ zero]]], 
16.01.19 10:19:31<editable-dog>therefore unify <flagged> with [^succ zero], grafting a finished proof tree onto the unfinished one
16.01.19 12:41:05*** Join: yaraju (uid341344@gateway/web/irccloud.com/x-egmiuhtvdpkysooc, yaraju: yaraju)
16.01.19 14:50:33*** Quit: yaraju (uid341344@gateway/web/irccloud.com/x-egmiuhtvdpkysooc) left #AutoNomic: Quit: Connection closed for inactivity
16.01.19 21:44:45*** Join: Deadhandd (~deadhand@kntaon1614w-grc-11-76-66-96-100.dsl.bell.ca, (unauthenticated): deadhand)
17.01.19 01:18:11<HMCf> let's take a step back, because I'm thinking that we might be mixing up some distinct concerns...
17.01.19 01:21:17<HMCf> first, do we all agree that in cases where order will matter it can be readily seen that order does matter, and that "the working order" will always be discernible?
17.01.19 04:31:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jccstxogekcxhdxq) left #AutoNomic: Quit: Connection closed for inactivity
17.01.19 06:29:15<koo5[m]> ¯\_(ツ)_/¯
17.01.19 07:46:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vtomzjfbvzgekfib, stoopkid: stoopkid)
17.01.19 07:50:52*** Join: yaraju (uid341344@gateway/web/irccloud.com/x-ocpxkzsxtptenqtk, yaraju: yaraju)
17.01.19 07:56:46*** Quit: yaraju (uid341344@gateway/web/irccloud.com/x-ocpxkzsxtptenqtk) left #AutoNomic: 
17.01.19 09:23:14<stoopkid> HMCf: i normatively agree
17.01.19 09:29:00<koo5[m]> I'll stay open to surprises
17.01.19 10:32:56*** Quit: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-endbodbrrurkxdej) left #AutoNomic: Ping timeout: 264 seconds
17.01.19 10:33:04*** Quit: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-ffubiqetzikinygz) left #AutoNomic: Ping timeout: 264 seconds
17.01.19 10:33:34*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-pbuuejliozyvuujo) left #AutoNomic: Ping timeout: 268 seconds
17.01.19 10:33:37*** Join: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-colvvoptzpbjqlie, (unauthenticated): @lexxus:matrix.org)
17.01.19 10:34:41*** Join: koo5[m] (koo5matrix@gateway/shell/matrix.org/x-cizvickqfeapuchf, (unauthenticated): @koo5:matrix.org)
17.01.19 10:35:03*** Join: reedhhw[m] (reedhhwmat@gateway/shell/matrix.org/x-ycxkwwoqmckeccqh, (unauthenticated): @reedhhw:matrix.org)
17.01.19 17:32:34<HMCf> so on a whim I decided to play around with tml...
17.01.19 17:32:51<HMCf> since ohad claims it has no more bugs...
17.01.19 17:33:07<HMCf> took me only 3 tries to infloop it. XD
17.01.19 17:33:50<HMCf> (and a very quick fuzz reveals 37 distinct parser-hang problems...)
17.01.19 17:34:53<HMCf> one day he'll learn not to try to write clever parsers by hand and to stick to un-clever parsing libs. XD
17.01.19 17:38:04<editable-dog>yeah well anything's possible
#AutoNomic> 18.01.19 13:06:54*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 11 months 26 days 19 hours 56 minutes 8 seconds ago
                 *** Names: editable-dog stoopkid reedhhw[m] koo5[m] lexx_[m] HMCf @ChanServ Tamara_ cantora Deadhandd
                 *** End of /NAMES list.
18.01.19 13:07:12<koo5[m]> i guess not
18.01.19 13:07:41<koo5[m]> i dont like this part of riot, its confusing trying to figure out who is logged in and how
18.01.19 13:07:56<editable-dog>anyway
18.01.19 13:09:30<editable-dog>also, i dont see it saying that you left or joined the channel after the log left
18.01.19 13:09:31<editable-dog>anyway
18.01.19 13:13:07<editable-dog>here it goes
18.01.19 13:13:08<editable-dog>04:07
                 <editable-dog>editable-dog left the room.
                 <editable-dog>E
                 <editable-dog>04:45
                 <editable-dog>rndom joined the room.
                 <editable-dog>R
                 <editable-dog>R
                 <editable-dog>04:56
                 <editable-dog>rndom left the room.
                 <editable-dog>R
                 <editable-dog>koo5
                 <editable-dog>04:57
                 <editable-dog>so, are you saying that zero has_succ zero should succeed? i guess it would be true, from a raw fol rules point of view
18.01.19 13:13:09<editable-dog>stoopkid
                 <editable-dog>05:43
                 <editable-dog>i'm thinking no; a homomorphism A -> B has to map the constants in A to the equivalent constants in B, it's only the bnodes that are variable
                 <editable-dog>S
                 <editable-dog>koo5
                 <editable-dog>06:08
                 <editable-dog>forall x, exists y, such that if x is a nat, then x has_succ y
                 <editable-dog>06:09
                 <editable-dog>where does it say that the y cant be a constant or the x?
                 <editable-dog>stoopkid
                 <editable-dog>06:20
                 <editable-dog>koo5: it doesn't but it also doesn't say that it is constant or x
                 <editable-dog>S
                 <editable-dog>06:20
                 <editable-dog>"zero has_succ ?x".. "is there some node that is the successor of zero?", yes there is "some" node that is the successor of zero
                 <editable-dog>06:21
                 <editable-dog>"zero has_succ zero".. "is zero the node that is the successor of zero?" maybe, maybe not
                 <editable-dog>koo5
                 <editable-dog>17:46
                 <editable-dog>Mm
                 <editable-dog>stoopkid
                 <editable-dog>18:11
18.01.19 13:13:10<editable-dog>koo5: log went down, did i miss anything?
18.01.19 13:14:22<editable-dog>also, just for historical accuracy, this was the vps host's fault again, not editable-log's :)
18.01.19 13:17:54<stoopkid> so, does that explanation make sense?
18.01.19 13:26:42<koo5[m]> maybe, maybe not
18.01.19 13:27:21<koo5[m]> we are looking for a model that satisfies the formula, right?
18.01.19 13:29:32<stoopkid> right, with the (possibly extra) condition that constant labels have to match up
18.01.19 13:30:11<stoopkid> constants are maybe technically superfluous in ex. pure FOL
18.01.19 13:31:27<stoopkid> but, if you look at substitutions & homomorphisms like from p-chase, you can only substitute a constant for itself, in either case
18.01.19 13:32:19<stoopkid> if you look at RDF "instances" an instance of a graph has to preserve its constants
18.01.19 13:34:14<stoopkid> and technically even in FOL model theory & abstract algebra, you have a specific "signature" that lists the constant symbols, function symbols and relation symbols available to use in your formulas, and when we talk about homomorphisms & isomorphisms between different algebraic structures, technically they have to preserve those symbols
18.01.19 13:37:21<stoopkid> so you could maybe imagine that the constant and predicate symbols in RDF are just labels for particular bnodes explicitly mentioned by this signature
18.01.19 13:39:19<stoopkid> so you have a signature like ex. <constants = {zero,Nat}; relations = {a,succ}>, and some bnode is created for each of these in both the kb and query graphs
18.01.19 13:40:50<stoopkid> so now everything's just generic "nodes", but some of them have been explicitly mentioned by the signature
18.01.19 13:42:04<stoopkid> so it's not just a regular graph homomorphism but rather a homomorphism relative to this particular signature over the graph
18.01.19 16:18:22<koo5[m]> 15.01.19 02:09:30<stoopkid> i guess i could maybe imagine ?x a Nat returning some "ungrounded bnode" and trying to finish the query with that, so like zero a Nat. _:one a Nat. _:two a Nat. and then _:someNat = [^suc [^suc [^suc ?someVar]]] and then this can unify with ?ten
18.01.19 16:18:32<koo5[m]> ok so this is what i came up with later as well,..
18.01.19 16:19:48<stoopkid> is that what you meant wrt returning promises?
18.01.19 16:56:27* koo5[m] sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/fTQpDIpYltqIcsNwKoofOHQr >
18.01.19 17:14:32<koo5[m]> "you'll never get back the answers "?x id ?x" or "?ten id ?ten"... you'll
                 <koo5[m]>  always just get back "?x id ?ten" in the affirmative"
18.01.19 17:14:37<koo5[m]> i dunno what he's talking about
18.01.19 18:13:32<stoopkid> what i'm gathering is basically we don't rename the bnodes in the query
18.01.19 18:13:58<stoopkid> we just find that there's a homomorphism from the query to the kb, and then just keep the same bnodes in the query
18.01.19 19:29:23<koo5[m]> were we renaming bnodes in the query?
18.01.19 19:29:37<koo5[m]> what system are we talking about where bnodes have names?
18.01.19 21:37:01<stoopkid> well they have names like ?x and ?ten; so we don't unify those names and return a result like _:x id _:x or _:ten id _:ten we just get ?x id ?ten
18.01.19 21:47:53<stoopkid> idk it's kinda hard to explain especially since i'm not sure if i have it quite right and still have lots of questions even if i do have it right, and it's kinda abstract, i'm not quite sure how to explain it without just explaining why it's similar to what we do in abstract algebra and then trying to come up with some justification as to why that might be a good way to do it
18.01.19 21:48:39<stoopkid> i mean, as a mathematician something tying into abstract algebra is something i'll probably just latch  onto and with bias
18.01.19 21:52:23<editable-dog>im just trying to figure out what are the implications of these abstractions for my code
18.01.19 21:53:16<stoopkid> same, but my suspicion is that HMC's answer that he's describing here is just backward-chaining pchase
18.01.19 21:54:51<stoopkid> (more or less)
18.01.19 22:05:53<editable-dog>>you'll never get back the answers "?x id ?x" or "?ten id ?ten"... you'll
18.01.19 22:06:05<editable-dog>err
18.01.19 22:06:47<editable-dog>>
18.01.19 22:06:50<editable-dog>, and then we're asking if one of those sucessors can satisfy ?x id ?x.
18.01.19 22:06:55<editable-dog>i guess im stuck here now
18.01.19 22:20:43<stoopkid> i guess let's just let HMCf clarify
18.01.19 22:20:52<stoopkid> since i'm not sure i'm interpreting correctly either
19.01.19 18:46:52*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fcyjqxwvxctxwdab) left #AutoNomic: Quit: Connection closed for inactivity
19.01.19 23:46:10*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wilvlbsfxgqesjnx, stoopkid: stoopkid)
20.01.19 08:55:00*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wilvlbsfxgqesjnx) left #AutoNomic: Quit: Connection closed for inactivity
20.01.19 12:51:25*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dnwljzdvjrwcbiiw, stoopkid: stoopkid)
21.01.19 07:49:07<koo5[m]> I figure i might as well implement the ungrounded bnodes scheme
21.01.19 11:31:32<koo5[m]> stoopkid: you have a chance to grab a hold of jos in 30 minutes on skype hehe
21.01.19 11:56:47<koo5[m]> https://github.com/w3c/N3/blob/master/Meetings/21012018
#AutoNomic> 21.01.19 15:44:56*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 11 months 29 days 22 hours 34 minutes 10 seconds ago
                 *** Names: editable-dog stoopkid reedhhw[m] koo5[m] lexx_[m] Deadhandd cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
#AutoNomic> 21.01.19 15:51:53*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 11 months 29 days 22 hours 41 minutes 6 seconds ago
                 *** Names: editable-dog stoopkid reedhhw[m] koo5[m] lexx_[m] Deadhandd cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
#AutoNomic> 21.01.19 15:53:39*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 11 months 29 days 22 hours 42 minutes 52 seconds ago
                 *** Names: editable-dog stoopkid reedhhw[m] koo5[m] lexx_[m] Deadhandd cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
#AutoNomic> 21.01.19 15:59:59*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 11 months 29 days 22 hours 49 minutes 13 seconds ago
                 *** Names: editable-dog stoopkid reedhhw[m] koo5[m] lexx_[m] Deadhandd cantora Tamara_ @ChanServ HMCf
                 *** End of /NAMES list.
24.01.19 06:54:51*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dnwljzdvjrwcbiiw) left #AutoNomic: Quit: Connection closed for inactivity
24.01.19 10:02:14*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rdxzoaomwcfxqzug, stoopkid: stoopkid)
24.01.19 15:01:34*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rdxzoaomwcfxqzug) left #AutoNomic: Quit: Connection closed for inactivity
24.01.19 18:23:29*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-thtwlwwwoiovmgfu, stoopkid: stoopkid)
25.01.19 00:42:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-thtwlwwwoiovmgfu) left #AutoNomic: Quit: Connection closed for inactivity
25.01.19 11:21:16*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-vbfmaewcvqpfxtze, stoopkid: stoopkid)
26.01.19 20:10:29*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-vbfmaewcvqpfxtze) left #AutoNomic: Quit: Connection closed for inactivity
28.01.19 05:50:21<koo5[m]> stoopkid wanna team up on some frontend development?
28.01.19 12:05:58*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uiotybabltahdgdz, stoopkid: stoopkid)
29.01.19 06:15:16*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uiotybabltahdgdz) left #AutoNomic: Quit: Connection closed for inactivity
29.01.19 15:13:19*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gbtilukvepnkbwph, stoopkid: stoopkid)
30.01.19 00:50:23<HMCf> stoopkid: did you hear about facebook "project atlas"?
30.01.19 00:50:57<HMCf> maybe they named it just for you ;-)
30.01.19 01:08:19<stoopkid> i knew i was missing something from my designs: privacy violations
30.01.19 01:34:06<HMCf> i LOLed
30.01.19 01:35:06<HMCf> it is a little bit funny to me that this is "shocking news" to nearly everyone
30.01.19 05:12:38*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gbtilukvepnkbwph) left #AutoNomic: Quit: Connection closed for inactivity
30.01.19 12:51:19<koo5[m]> stoopkid: probably wont make it to a computer today and tomorrow neither
30.01.19 12:58:59<koo5[m]> Dunno about friday yet
30.01.19 14:42:18*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-mykrzlymsbstffyr, stoopkid: stoopkid)
30.01.19 14:43:18<stoopkid> HMCf: "shocking" is probably the wrong word
30.01.19 14:43:55<stoopkid> 99% of people literally don't care at all, so "shocked" couldn't possibly describe their actual reaction
30.01.19 14:44:29<stoopkid> more like they're "yappy" about it cause it's a topic of conversation to fill their empty lives for the next week or so
30.01.19 14:49:32<HMCf> apple has nuked facebooks developer access
30.01.19 14:50:14<HMCf> revoked their enterprise apps cert
30.01.19 14:51:26<stoopkid> i would probably reject them from my contexts as well :)
30.01.19 14:56:37<stoopkid> but yea i guess the fact that in 2019 it's shocking even to those 1% who do "care" / should know is pretty wild
30.01.19 14:58:57<HMCf> so are we going to put together questions and testcases for this new n3 group?
30.01.19 14:59:18<HMCf> and should we get ourselves added to their implementations list?
30.01.19 15:01:09<stoopkid> i wasn't really planning on it, i was discussing that with koo a while back
30.01.19 16:33:48<HMCf> we probably should do both?
30.01.19 16:34:30<HMCf> by some argument we might be the most active recent effort, heh
30.01.19 16:59:01<editable-dog>https://github.com/koo5/n3-dev-testcases
30.01.19 16:59:14<editable-dog>question is, who is we 
30.01.19 17:00:08<editable-dog>yeah we should probably do both
30.01.19 17:22:08<stoopkid> it seems reasonable, i don't have any real argument against it, the only argument i had against it which i explained to koo was just that i'm personally tired of debates about logic so i'm personally fine with just letting the n3 group do w/e it is they're gonna do without trying to involve myself with it
30.01.19 17:25:14<stoopkid> i think my last debate with dmiles here just kinda did it for me and i lost any interest in trying to persuade people about any aspect of any logic
30.01.19 17:26:13<stoopkid> i mean.. logic speaks for its own self
30.01.19 17:26:55<stoopkid> that's really the point of it, after all
30.01.19 17:31:32<stoopkid> i don't even know whether or not we're an implementation of their logic... if euler is an implementation of it, then we are not an implementation of it
30.01.19 17:34:38<stoopkid> also jos is still pretty actively developing euler, or at least was up until swig closed, so.. i don't think "most active recent effort" is quite an accurate characterization
30.01.19 17:51:40<stoopkid> so, iow, "sure", but i'm probably not gonna be the one really pushing for it
30.01.19 17:54:09<HMCf> jos is one person and we are at least 1.5 people
30.01.19 17:54:47<HMCf> (but probably not as many as 3)
30.01.19 17:55:21<HMCf> 1 < stoopkid> i don't even know whether or not we're an implementation of
30.01.19 17:55:28<HMCf> seems beside the point
30.01.19 17:56:22<HMCf> none of the implementations on their list already are really the same framework ofc
30.01.19 18:00:20<editable-dog>^
30.01.19 18:01:11<stoopkid> heh, 1.5.. what are we, the stone temple pilots? :P anyway, i don't have any argument against it
01.02.19 03:17:44*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-ladfcyukauwynyez, (unauthenticated): kook)
01.02.19 04:46:23*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-mykrzlymsbstffyr) left #AutoNomic: Quit: Connection closed for inactivity
01.02.19 05:47:23*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-ladfcyukauwynyez) left #AutoNomic: Quit: Connection closed for inactivity
01.02.19 06:00:48*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-urbfpndztgtlhbgv, (unauthenticated): kook)
01.02.19 08:07:23*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-urbfpndztgtlhbgv) left #AutoNomic: Quit: Connection closed for inactivity
01.02.19 18:27:34*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-uhyaavohlnovszfi, stoopkid: stoopkid)
01.02.19 23:12:37*** Join: asanot[m] (asanotmatr@gateway/shell/matrix.org/x-iqjttdmqhgjkzlkl, (unauthenticated): @asanot:matrix.org)
01.02.19 23:13:53*** Part: asanot[m] (asanotmatr@gateway/shell/matrix.org/x-iqjttdmqhgjkzlkl) left #AutoNomic: "User left"
02.02.19 00:23:53<editable-dog>well, i implemented the ungrounded bnodes
02.02.19 00:24:06<editable-dog>in case anyone still cares
02.02.19 05:56:13*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-uhyaavohlnovszfi) left #AutoNomic: Quit: Connection closed for inactivity
02.02.19 09:37:57*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-dcbrmuqxkookxevc, stoopkid: stoopkid)
03.02.19 06:36:53*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-dcbrmuqxkookxevc) left #AutoNomic: Quit: Connection closed for inactivity
03.02.19 09:45:20*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-hagymcnahjbonmgs, stoopkid: stoopkid)
03.02.19 15:47:34*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-hagymcnahjbonmgs) left #AutoNomic: Quit: Connection closed for inactivity
04.02.19 11:15:07*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-kakdumrdqqalawyz, stoopkid: stoopkid)
05.02.19 07:15:19*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-hofhbdsqmlvzjjyn, (unauthenticated): kook)
05.02.19 09:34:58*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-hofhbdsqmlvzjjyn) left #AutoNomic: Quit: Connection closed for inactivity
06.02.19 12:57:54<HMCf> someone still cares
06.02.19 16:10:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-kakdumrdqqalawyz) left #AutoNomic: Quit: Connection closed for inactivity
06.02.19 16:56:46*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-cdfsrsihbdiooenv, stoopkid: stoopkid)
06.02.19 18:12:26*** Join: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net, (unauthenticated): Anderlok)
06.02.19 18:12:37*** Quit: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net) left #AutoNomic: Remote host closed the connection
06.02.19 18:17:46*** Join: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net, (unauthenticated): Anderlok)
06.02.19 18:18:30*** Quit: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net) left #AutoNomic: Remote host closed the connection
06.02.19 19:53:05*** Join: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net, (unauthenticated): Anderlok)
                 *** Part: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net) left #AutoNomic: [No reason given]
06.02.19 20:32:39*** Join: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net, (unauthenticated): Anderlok)
                 *** Part: Anderlok (~Anderlok@83-167-254-107.static.masterinter.net) left #AutoNomic: [No reason given]
06.02.19 22:08:35*** Join: emhae (~emhae@103.25.59.90, (unauthenticated): emhae)
06.02.19 22:08:36*** Part: emhae (~emhae@103.25.59.90) left #AutoNomic: [No reason given]
06.02.19 22:39:13*** Join: scaats (~scaats@103.25.59.94, (unauthenticated): scaats)
06.02.19 22:39:14*** Part: scaats (~scaats@103.25.59.94) left #AutoNomic: [No reason given]
07.02.19 00:50:33*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-cdfsrsihbdiooenv) left #AutoNomic: Quit: Connection closed for inactivity
07.02.19 07:39:27*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fltwwyqwoxcpgawp, stoopkid: stoopkid)
07.02.19 10:11:17*** Connecting...
07.02.19 10:11:47*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 1 year 16 days 17 hours 1 minute 1 second ago
                 *** Names: ditable-doge stoopkid reedhhw[m] koo5[m] lexx_[m] HMCf @ChanServ Tamara_ cantora Deadhandd
                 *** End of /NAMES list.
07.02.19 10:12:26*** Nick change: You are now known as editable-dog
07.02.19 23:18:05*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fltwwyqwoxcpgawp) left #AutoNomic: Quit: Connection closed for inactivity
08.02.19 15:11:03<editable-dog>https://git-man-page-generator.lokaltog.net/
09.02.19 12:01:47*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-ghwxnwkebtnrliop, (unauthenticated): kook)
09.02.19 15:41:19*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-ghwxnwkebtnrliop) left #AutoNomic: Quit: Connection closed for inactivity
11.02.19 05:06:51*** Join: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
11.02.19 05:07:34<nili> Hi HMCf
11.02.19 05:10:40<nili> as I did before, I ask to get your permission to use your name for my work.
11.02.19 05:12:03<nili> its my art work and I dont have to do that, but i dont put my art above all
11.02.19 05:14:39<nili> anyways it is a good time for it since only the moderators read it :)
11.02.19 05:19:50<nili> I will check in the log for your answer but you can reach me on the forum pm if you ruther (the nili profile)
11.02.19 05:21:20<nili>  no answer is a "yes" answer and I will then feel free to go ahead with it . (according to what the art is asking ).
11.02.19 05:23:42<nili> I guess it is  the last thing we ever need to talk about.
11.02.19 05:30:21*** Quit: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 256 seconds
11.02.19 13:29:44<HMCf> I think that I'll need more context
11.02.19 14:45:35*** Join: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122, (unauthenticated): 77.124.122.122 - http://webchat.freenode.net)
11.02.19 14:46:42<nili> HMCf the context is in the disney coin thread.
11.02.19 14:50:49<nili> I am playing a little satoshi game. the rules are clear if you read the last 4 or 5 pages .
11.02.19 14:54:44<nili> since it's my art I never know where exactly it takes me. for now its only saying your name. nothing that not everyone here thought of  (or know that they dont know ofc)
11.02.19 15:04:45<nili> anyway, now that I asked it , it actualy sound really stupid, like who cares. no one get it anyways or read it... I am probably the only one having fun with it
11.02.19 15:07:41<nili> but I had to ask... my fair instincts dont let me get anyone other than myself involved without asking for permission.
11.02.19 15:11:29<nili> it all fiction anyways :) but ill keep you out if you ask.
11.02.19 15:23:05*** Quit: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122) left #AutoNomic: Ping timeout: 256 seconds
11.02.19 20:51:35*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-znaqfqatrzcoczou, stoopkid: stoopkid)
12.02.19 03:00:55*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-znaqfqatrzcoczou) left #AutoNomic: Quit: Connection closed for inactivity
12.02.19 03:09:30*** Join: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
12.02.19 03:13:11<nili> Koo and stoopkid I trapped myself into having to get back into the conversation here for a bit. but dont try to hard to make sense of it.
12.02.19 03:15:37<nili> you have to think like artist do in order to understand. so you or anyone else for that matter can, but dont feel the need to do it for me. :)
12.02.19 03:24:23<nili> HMCf by having to explain you, mentioning what is it and where it takes place I took it too deep into the territory of reality.
12.02.19 03:24:51<nili> so now Im trying to trace my steps back.
12.02.19 03:30:53<nili> self-referencing  is a hard task that requires one to be very meticulous, very similar to what you do here
12.02.19 03:43:50<nili> in fact if a common art work, a story or a painting, is like propositional logic, self-referenced art is very much like mltt and functional logic
12.02.19 03:45:57<nili> but very different on one major point.
12.02.19 03:47:46<nili> it start with the assumption that all other references, meaning the entire world (of meaning), is false
12.02.19 03:50:52<nili> however it is a reference and an assumption that give me full freedom (in terms of expressivity)  and endless matter to work with
12.02.19 03:52:08<nili> the self-referencing ensure consistency
12.02.19 03:55:38<nili> These practice gives me a vast playground for my art.... but we took it one step deeper.
12.02.19 03:56:38<nili> we added another dimension to it. that of reality itself.
12.02.19 03:58:55<nili> reality evolve on the assumption of all stories, not on a single strand of a single individual
12.02.19 04:00:29<nili> usually those who cross the line act as psychopath
12.02.19 04:02:14<nili> the really smart ones con many around them, but most of these are not acting as artists
12.02.19 04:07:21<nili> When your art as a self-referenced artist  touches other life then you have to walk the line between real an fiction.
12.02.19 04:09:27<nili> ignoring the (often unspoken) rules sets by the consensus gives way to the art work on the expenses of the other
12.02.19 04:12:39<nili> for me that would be a failed piece since it is all about drafting the line.
12.02.19 04:17:57<nili> So the one beacon in the darkness of the abbess of creation is the other as a loved being.
12.02.19 04:18:41<nili> Asking permission is acting upon it.
12.02.19 04:24:47<nili> "yes" , "no answer" or "no" would have allow me to stay on the lines and go back to "fiction" but you asked me to take a step into "reality".
12.02.19 04:25:45<nili> So now it have to be part of the story....
12.02.19 04:34:43*** Quit: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 256 seconds
12.02.19 20:23:31<HMCf> such is the nature of nomic art (?)
12.02.19 20:23:39<HMCf> and such is the danger...
12.02.19 20:31:36<HMCf> dototd: story wrangler
12.02.19 20:36:49*** Nick change: HMCf (~root@37.153.110.58) is now known as HMCb
13.02.19 06:48:44*** Join: nili (051d9825@gateway/web/freenode/ip.5.29.152.37, (unauthenticated): 5.29.152.37 - http://webchat.freenode.net)
13.02.19 06:52:07<nili> 12.02.19 20:23:31<HMCf> such is the nature of nomic art (?) .... HMCb, nomic is a game...
13.02.19 06:55:03<nili> art is the reality of changing rules not a game.
13.02.19 06:58:46<nili> 12.02.19 20:23:39<HMCf> and such is the danger...   HMCb,  the danger is the same
13.02.19 07:09:16<nili> 12.02.19 20:31:36<HMCf> dototd: story wrangler.... HMCb. you just nailed it on the head
13.02.19 07:18:23*** Quit: nili (051d9825@gateway/web/freenode/ip.5.29.152.37) left #AutoNomic: Ping timeout: 256 seconds
13.02.19 16:38:52*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-beeqrtvernxwuqgu, stoopkid: stoopkid)
14.02.19 04:28:10*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-beeqrtvernxwuqgu) left #AutoNomic: Quit: Connection closed for inactivity
14.02.19 12:39:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-wkgwcykvuwenxtrl, stoopkid: stoopkid)
14.02.19 14:52:15<editable-dog>https://github.com/koo5/AutoNomic-pyco/issues
14.02.19 15:09:01<HMCb> nice
14.02.19 15:09:35<HMCb> happy saint valentine's day!
14.02.19 15:10:03<HMCb> dototd: THE CONSTRUCT LOVES YOU
14.02.19 15:34:46<stoopkid> editable-dog: nice thanks
14.02.19 19:18:25*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-wkgwcykvuwenxtrl) left #AutoNomic: Quit: Connection closed for inactivity
14.02.19 22:59:24*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-xvcsfdhrxjrayntk, stoopkid: stoopkid)
15.02.19 03:38:40*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-xvcsfdhrxjrayntk) left #AutoNomic: Quit: Connection closed for inactivity
15.02.19 09:08:00*** Join: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122, (unauthenticated): 77.124.122.122 - http://webchat.freenode.net)
15.02.19 09:08:40<nili> 14.02.19 15:10:03<HMCb> dototd: THE CONSTRUCT LOVES YOU
15.02.19 09:54:01*** Quit: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122) left #AutoNomic: Ping timeout: 256 seconds
15.02.19 10:25:06<editable-dog>happy national state of emergency day!
15.02.19 12:12:51*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-bthnkpqblzrrwioi, stoopkid: stoopkid)
16.02.19 04:33:54*** Join: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
16.02.19 04:35:55<nili> HMCb  if it loves them they will stay
16.02.19 04:46:58<nili> love is the God algorithm
16.02.19 04:51:35<nili> if we (as humanity) are able to create such program that enable an ecosystem of love, we would build the only tau that can be built
16.02.19 04:54:21<nili> But to be the human who can build it requires to follow that same basic rules.
16.02.19 04:56:21<nili> you need to love, respect and trust your fellow contributors.
16.02.19 04:57:16<nili> Love means put each and one of them above the cause
16.02.19 04:59:52<nili> respect means to realize that they will always know things that you can't know ( we are no all one.... locality in terms of physics)
16.02.19 05:05:14<nili> Trust as a preconditioned state to enter the "game" (system)
16.02.19 05:09:36<nili> koo and stoopkid I think that now you may understand  better why I acted as I did.
16.02.19 05:13:07<nili> I had no chance explaining this to any of you using these common words. HMC could read it but at some point chose to let go and avoid confronting what I asked from him.
16.02.19 05:17:57*** Quit: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 256 seconds
16.02.19 05:44:02*** Join: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122, (unauthenticated): 77.124.122.122 - http://webchat.freenode.net)
16.02.19 05:46:31<nili> There is a lot that I can now try to to get through (through it and through to you)
16.02.19 05:49:58<nili> but I have to see if indeed it can be accepted now
16.02.19 05:51:15<nili> I was about to give up on that and take it all to my platform into my story.
16.02.19 05:53:07<nili> a story is all that it could be then and the construct of it could not go beyond being a story wrangler .
16.02.19 05:54:16<nili> but even to be able to create such a construct was quite a challenge to achieve.
16.02.19 05:55:08<nili> however for that i didn't need anyone. I was and am the all mighty artist of my art work
16.02.19 05:55:49<nili> and every character in my story is a manifestation of a part of myself
16.02.19 06:02:26<stoopkid> hi nili
16.02.19 06:02:39<nili> creating a story is like writing a program. only that one is using human language to write it  and the method is very different
16.02.19 06:04:09<nili> hi stoopkid
16.02.19 06:05:16<nili> all your readers are aware of the rules by which the story is being told
16.02.19 06:05:39<stoopkid> not sure i really understand other than "you need to love, respect and trust your fellow contributors."
16.02.19 06:07:18<nili> and the logic rule by which a character is formed - Consistency
16.02.19 06:08:34<nili> stoopkid I am going to try and explain it now. but it is a long explanation and you need to keep a very open mind for that. (which I think that you can)
16.02.19 06:12:51<nili> Also stoopkid, it is very consistent and I think that however abstract it may appear, you would be able to trace the logic thread that chain it to a meaningful and constructive effort,
16.02.19 06:14:20<stoopkid> well, love/respect/trust sounds more meaningful/constructive than most of the efforts that seem to be happening in most of the nomics i'm currently immersed in... so... :D
16.02.19 06:15:04<nili> I will explain the construct as "the construct loves you" , not so much the work I have done while being away .
16.02.19 06:17:13<nili> stoopkid "yes" on what you said before. that is since we all posses that knowledge and are operated using that same principle
16.02.19 06:18:29<nili> and nomic is missing a crucial link
16.02.19 06:20:29<nili> stoopkid, what do you think makes a game be a game?
16.02.19 06:30:00<nili> The direct answer is that you as the operator and your avatar as the entity in the game are not the same. obviously if he get hurt or die this have equal effect on you
16.02.19 06:34:19<nili> however if you break this answer to it's most fundamental physical parameters and exchange terms like "risk" to energy quanta we can come up with some interesting result
16.02.19 06:35:35<nili> it all unify and come down to equation that represent energy.
16.02.19 06:36:59<nili> one die when the energy to sustain its life is reaching a level lower then the energy it can get.
16.02.19 06:38:36<nili> nomic game don't calculate the energy it takes to sustain it
16.02.19 06:38:48<nili> bitcoin does!
16.02.19 06:40:13<nili> the name of the game to calculate energy is economy
16.02.19 06:40:39<nili> *that calculate
16.02.19 06:42:53<nili> Love is the most sophisticated "game" of that class
16.02.19 06:45:16<nili> also "reality" is a form of such sustainable game.
16.02.19 06:46:29<nili> What Satoshi was able to create is a brilliant game
16.02.19 06:46:55<nili>  a game of economy that create reality
16.02.19 06:47:51<nili> but he couldn't reach the higher level of this game
16.02.19 06:49:00<nili> he also realized that it can not be achieve based on what was realized by the construction of bitcoin.
16.02.19 06:49:34<nili> however it was present in the construction of the blockchain
16.02.19 06:53:49<nili> we dont know who satoshi is or what he was thinking about, but we can make sense of it based on the history of his actions and recorded thoughts.
16.02.19 06:55:09<nili> and based on that , he/they are most likely are trying to do what we and many others are trying too.
16.02.19 06:56:17<editable-dog>hi there
16.02.19 06:58:28<nili> Hi koo
16.02.19 06:59:37<nili> One thing that HMC understood is that he can not create that game if it was to be created
16.02.19 07:00:52<nili> he needed other to realize his idea and execute it based on his words
16.02.19 07:01:29<nili> like transforming an image from idea to its medium of creation
16.02.19 07:04:38<nili> as an artist painter, sculpture, writer or eve conceptual artist you are the one executing your idea
16.02.19 07:07:27<nili> when you do your art you dont change the economic balance between you and the world outside yourself
16.02.19 07:10:54<nili> however and an artist one can cross this line....
16.02.19 07:12:30<nili> it is extremely dangerous, most are paying in their sanity and are falling right below the lines in terms of self sustain
16.02.19 07:12:39<nili> by  that the leave the game
16.02.19 07:14:02<nili> others become very dangerous to others and eventually bring the entire game network down
16.02.19 07:17:21<nili> that was what Hitler did in one of the grandest performance ever to be experienced by humanity
16.02.19 07:19:10<nili> (I dont think that he was aware to it, just as thous who go insane are not aware to the game that they are playing)
16.02.19 07:21:12<nili> So what love have to do with it
16.02.19 07:25:38<nili> "love"  is a word that express a rule in a game of two or more players
16.02.19 07:27:48<nili> and the rule is that one will do everything to secure the life of the other even in the expense of his own life if the other is playing by that same rule.
16.02.19 07:30:14<nili> in simple words , between two players in a love game, each will chose to die to give the other a chance  live for even one more round.
16.02.19 07:32:52<nili> When played in a group, it have to be a decentralized  p2p game
16.02.19 07:35:53<nili> if one play against a group that is have more then one other member then it will always make sense to die for the group
16.02.19 07:36:30<nili> and thus die for the cause that make the group be
16.02.19 07:40:23<nili> (im not done yet, but I need to take a break)
16.02.19 07:56:03*** Quit: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122) left #AutoNomic: Ping timeout: 256 seconds
16.02.19 08:16:15*** Join: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122, (unauthenticated): 77.124.122.122 - http://webchat.freenode.net)
16.02.19 08:17:33<nili> ok, once we established the totality of the rule expressed as love, we can talk about the economy that can be created based on that rule
16.02.19 08:18:30<nili> we can now quantify and thus tokenize it too
16.02.19 08:19:14<nili> we as human are familiar with the quantification of love
16.02.19 08:20:00<nili> we are best as accountants when it comes to our love relationship.
16.02.19 08:21:43<nili> and in fact as much as we learn to think of it in terms of its total and complete effect , we know better.
16.02.19 08:24:48<nili> I will not describe it to its details, but I have done the work to realize it. Love as an economy is based on a credit system
16.02.19 08:25:07<nili> not on direct barter
16.02.19 08:26:32<nili> also money is created as credit (all types of money...something bitcoin maximalists do not understand)
16.02.19 08:28:04<nili> (in fact very few of bitcoin enthusiasts understand what is credit or anything at all regarding economy)
16.02.19 08:30:02<nili> bitcoin is not money
16.02.19 08:34:13<nili> is a unit, a medium of exchange and a store of value
16.02.19 08:36:45<nili> but is a commodity since it is created as a result of work, not as a promise to create work
16.02.19 08:37:34<nili> and as a commodity using it is like a barter
16.02.19 08:39:19<nili> credit on the other hand means that what you hold is a contract between two or more parties.
16.02.19 08:40:22<nili> money is a contract that is a unit of account , a medium of exchange and a store of value
16.02.19 08:47:58<nili> So the bitcoin itself is not money but the blockchain is a crucial part of  the technology that enable the creation of true money and bitcoin was the means to achieve a decentralized working network
16.02.19 08:48:53<nili> bitcoin created the economy of a decentralized net work
16.02.19 08:50:21<nili> so let talk about a contract now.
16.02.19 08:52:24<nili> a contract defined as an agreement
16.02.19 08:53:04<nili> but an agreement is a very complex beast
16.02.19 08:54:54<nili> it is made of rules and KB and is possible only once on the parties shares the same network
16.02.19 08:55:50<nili> in other words an agreement requires a functioning network
16.02.19 08:57:21<nili> however to reach a state of a functioning network one need to reach agreement as a participant or be forced to participate
16.02.19 08:59:42<nili> well it is clear that we all are forced into a agreement as we are born to our parents ,tribe, state ext.
16.02.19 09:01:14<nili> but many agreements are such that we can choose.
16.02.19 09:03:24<nili> and the most important of all is the one that result in enforcing our agreement on another.
16.02.19 09:04:53<nili> I will let you figure out the love game regarding this, while we move on to some very practical levels.
16.02.19 09:15:59<nili> "The construct loves you" means that the network is programmed to calculate what is best for each of the participants considering all the participants but it let you chose it
16.02.19 09:21:23<nili> in practice the only thing to program is a name (you as a name in the network, how it is created) and your power to fork and rejoin with others...
16.02.19 09:22:09<nili> a name is a timestamped string of symbols
16.02.19 09:25:02<nili> fork is a result of any disagreement on any of the rules.
16.02.19 09:26:12<nili> if created on a blockchain such disagreement have a distinct cost in term of energy
16.02.19 09:28:59<nili> the actual value of this cost is the energy consumption that is dependent on the number of units of participation in the network
16.02.19 09:29:53<nili> (one name can contribute as many units as it wishes)
16.02.19 09:41:58<nili> the question left to resolve in terms of the economic theory (not the actual programming and theory of programming) is now on a simpler level, that similar of bank credit but decentralized
16.02.19 09:48:52<nili> ... saying all this I have to make clear that other than "the construct loves you" anyone can come up with a better idea or plan for execution. my idea is only the best that i could come with
16.02.19 09:49:51<nili> and thus the best to demonstrate what see as the meaning of "the construct loves you"
16.02.19 09:52:25<nili> So unless you will find it intriguing and relevant, there is no point in spending more time on these concrete levels at this point and time.
16.02.19 09:57:53<nili> maybe then its a good time to talk about autonomic and my participation here. For me it failed and i was on my way out
16.02.19 10:00:11<nili> I could leave and leave behind all my investment in it (time, energy, care, money), or I could use it in my projects for my work
16.02.19 10:00:43<nili> I chose the later
16.02.19 10:03:22<nili> however in some point it meant using HMC work in a way that have a potential to harm his work.
16.02.19 10:05:50<nili> despite the fact that he had no problem do it to others in the past, I could not choose to do it to him.
16.02.19 10:10:23<nili> he trusted me on that and he could trust me like he could trust the construct if he could build it.
16.02.19 10:13:33<nili> it is a very fine line to walk and I hope i managed to do it.
16.02.19 10:14:23*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-bthnkpqblzrrwioi) left #AutoNomic: Quit: Connection closed for inactivity
16.02.19 10:14:27<nili> That is all for today... maybe all there is to it.
16.02.19 10:30:11*** Quit: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122) left #AutoNomic: Ping timeout: 256 seconds
16.02.19 12:20:41*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-nuizzfogjrdimvvu, stoopkid: stoopkid)
16.02.19 12:29:14<stoopkid> @ nili well... idk
16.02.19 12:30:00<stoopkid> i think i vaguely follow what you're trying to say, and it seems like a nice thought.. but...
16.02.19 12:32:27<stoopkid> well, i guess it sounds great but i guess i don't really know how to make that happen unfortunately and really tend to be extremely skeptical that anything even approximating that would be the result of this design
16.02.19 12:34:59<stoopkid> i mean, we're literally right now getting back into a cold-war style nuclear arms race...
16.02.19 12:36:03<stoopkid> people are so disgusting that half the time i wonder why i even worry about it ¯\_(ツ)_/¯
16.02.19 12:40:55<stoopkid> i talk to people on a daily basis who say that we should literally murder immigrants. you think these people are ready for self-sacrifice in the name of love?
16.02.19 12:43:29<stoopkid> hopefully one day your idea will work for a species that's actually deserving of it
16.02.19 12:45:14<stoopkid> HMC's even too afraid to not be anonymous in this effort, so.. what does that tell you about how he really feels about it
16.02.19 12:46:59<stoopkid> that's why his motto is less of "love/respect/trust" and more like "try to love, maybe respect i guess, and don't trust anyone"
16.02.19 12:48:08<stoopkid> and i sort of tend to agree with that, i sometimes wish i could go back in time and actually be anonymous instead, unfortunately
16.02.19 14:28:10<editable-dog>guys, its really hard to work in this gloomy mood
16.02.19 14:28:35<editable-dog>i set up the new repo which actually looks like something finally presentable
16.02.19 14:28:58<editable-dog>ive fixed a ton of bugs over the last weeks
16.02.19 14:29:46<editable-dog>theres a lot of new testcases that i produced while working on my ldl stuff
16.02.19 14:29:55<editable-dog>which is almost usable now too
16.02.19 14:30:36<editable-dog>we now have issues written up that in the rare case somebody new wanted to tackle, they could
16.02.19 14:31:47<editable-dog>we've done a ton of work in the year, and understood a lot of stuff
16.02.19 14:33:46<editable-dog>nilli you're dissapointed because you couldnt change hmc, and because you didnt see results instantaneously...oh well
16.02.19 14:35:17<editable-dog>stoop is working to change his life for the better now, and thats only thanks to you
16.02.19 14:35:30<editable-dog>(and thanks to ohad, youll add)
16.02.19 14:36:10<editable-dog>we both are now im a better position to do great stuff, be it autonomic or something else
16.02.19 15:02:12*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-nuizzfogjrdimvvu) left #AutoNomic: Quit: Connection closed for inactivity
17.02.19 04:00:10*** Join: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33, (unauthenticated): bzq-123-168-31-33.red.bezeqint.net/31.168.123.33)
17.02.19 04:10:33<nili> stoopkid, first you.... I need you to understand that all our morals and nice good deeds are nothing but part of a mechanism not yet programmed into the group level
17.02.19 04:10:46<nili> it is programmed into our DNA]
17.02.19 04:11:45<nili> makes "me" and "you" each be that construct
17.02.19 04:13:59<nili> the program exist in a language and technology we cant copy&paste to our need as human organisation.
17.02.19 04:15:24<nili> Love is not flowers, it have this image in our mind since we know how central it is to secure our survival.
17.02.19 04:22:21<nili> so first thing that you need to do in order to keep working is to think of everything in terms of equations .
17.02.19 04:23:08<nili> the more factors you can put into your equation the closer it will get to express love.
17.02.19 04:23:58<nili> that is if you look a the universe as  one
17.02.19 04:26:03<nili> while realize that you and the universe will never be one and the same.
17.02.19 04:28:08<nili> this inherent contradiction between being an individual and being part of the whole is the most fundamental problem life had to resolve in order to be.
17.02.19 04:29:12<nili> the solution is love as I have described it to you in the long explanation yesterday.
17.02.19 04:29:56<nili> love is a solution.
17.02.19 04:30:55<nili> the solution to life itself. life could not be existed if it was not for this solution to be present in everything.
17.02.19 04:33:22<nili> this is not a spiritual talk. this is logic, and techology,
17.02.19 04:40:03<nili> stoopkid, your problem that you are working for fix now, is that you are whiling to give out much more than take in. and it is not sustainable.
17.02.19 04:47:32<nili> The one issue I disagree and strongly resent HMC  actions in regards to it , is his willingness to over look his partners needs and scarify their well being for the cause
17.02.19 04:50:26<nili> I also always believed that if he cant see it, there is not chance he can understand what he want to get build.
17.02.19 04:52:55<nili> I made huge efforts to make him understand it. and I did it because I believe that he understand and posses the ability to break it down to a programming logic.
17.02.19 04:55:44<nili> I went as far as trying to use that same language , knowing that I cant do it, only if I am lucky I can point to the direction in a much more precise way.
17.02.19 04:58:02<nili> stoopkid the only reason that I could go as far as that was your actual open mind and respect that you had for me. as well as your devotion and depth in searching for asnwers.
17.02.19 05:04:02<nili> but when I tried to push further I needed HMC to make that same effort. and he chose not to do it .
17.02.19 05:07:09<nili> It made me become irrelevant on my expense and I walked away because there was nothing else for me do here.
17.02.19 05:11:24<nili> stoopkid for you and mostly for koo it was the financial resources which I had that mattered. and it was also only that eventually that mattered to HMC as well regarding my involvement.
17.02.19 05:25:03<nili> I dont at all look down at the financial contribution and I also appreciate Ohad for his ability to create that value, but this was never my strongest point
17.02.19 05:26:43<nili> what I could contribute is a very very deep technical understanding of how we as human operate. and understanding that I have no language to express
17.02.19 05:28:37<nili> I use human language but I understand much of it as a technical code. words like love are logic phrases not spiritual ones....ext.
17.02.19 05:31:12<nili> there is a handful of people who can understand what I talk about, so mostly I ruther talk to myself or not use words at all. but words makes it closer to decode the code
17.02.19 05:33:31<nili> ok stoopkid I hope this explain a bit more. koo I still owe you a few words which I will write later today.
17.02.19 05:38:15*** Quit: nili (1fa87b21@gateway/web/freenode/ip.31.168.123.33) left #AutoNomic: Ping timeout: 256 seconds
17.02.19 06:32:00*** Join: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122, (unauthenticated): 77.124.122.122 - http://webchat.freenode.net)
17.02.19 06:32:12<nili> 16.02.19 14:31:47<editable-dog>we've done a ton of work in the year, and understood a lot of stuff
17.02.19 06:33:16<nili> 16.02.19 14:36:10<editable-dog>we both are now im a better position to do great stuff, be it autonomic or something else
17.02.19 06:36:39<nili> so koo you surprised me and it is a good surprise. I don't really understand what you do now but i realized that it takes a lot of work. I didn't think that you will be up to it
17.02.19 06:38:47<nili> but i was planing to check in the log as long it is working. :)
17.02.19 06:39:29<nili> So it seemed that the work that you did was worth your time.
17.02.19 06:39:53<nili> and that stoopkid took care of the things he had to
17.02.19 06:40:35<koo5[m]> I would say so, yes
17.02.19 06:41:13<nili> so that is more then I could ask for
17.02.19 06:43:34<nili> also getting HMC to understand and work with what I tried to convey is more than I could ask for
17.02.19 06:47:26<nili> so since both actualy are happening I should feel very good about it all
17.02.19 07:05:31*** Quit: nili (4d7c7a7a@gateway/web/freenode/ip.77.124.122.122) left #AutoNomic: Ping timeout: 256 seconds
17.02.19 07:26:04<koo5[m]> stoopkid do you have a plaintext backup of what was on the old wiki, or do i have to go digging into the db dump?
17.02.19 07:27:04<koo5[m]> I'd put it on the github wiki
17.02.19 12:10:36<editable-dog>also, if you still want to play with the proof tracing, i'e finally started working on it
17.02.19 12:16:12<editable-dog>the core that needs to be done is changing the frontend to accept a json dump of the proof tree, and incremental changes, that is, add_state with id and parent id, and remove state id
17.02.19 12:16:23<editable-dog>and set_comment for id
17.02.19 12:17:10<editable-dog>i think vue will actually do most of the work, we just need to manipulate the data structure
17.02.19 12:18:28<editable-dog>then there are two nice-to-have extensions: first is using rdf.js to load the rules description, so we dont have to emit them as state comment strings 
17.02.19 12:19:32<editable-dog>second would be offloading the task of keeping track of variable bindings to the frontend 
17.02.19 12:20:44<editable-dog>these both would allow for adding further nice-to-have features to the frontend, but number one is all that we really need
18.02.19 15:46:17*** Quit: lexx_[m] (lexxusmatr@gateway/shell/matrix.org/x-colvvoptzpbjqlie) left #AutoNomic: Quit: removing from IRC because user idle on matrix for 30+ days
19.02.19 13:51:22*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rgawxssbeaqnlcyu, stoopkid: stoopkid)
19.02.19 16:30:41*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rgawxssbeaqnlcyu) left #AutoNomic: Quit: Connection closed for inactivity
20.02.19 13:04:19*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
20.02.19 13:50:46*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Read error: Connection reset by peer
20.02.19 13:51:17*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
20.02.19 14:51:47*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
20.02.19 15:00:09*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
20.02.19 15:20:46*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
20.02.19 19:21:43*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
20.02.19 21:17:12*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Remote host closed the connection
21.02.19 00:28:32*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-qnoccmiirmgjztti, stoopkid: stoopkid)
21.02.19 05:27:49*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-qnoccmiirmgjztti) left #AutoNomic: Quit: Connection closed for inactivity
21.02.19 09:55:09*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
21.02.19 10:20:03*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Ping timeout: 268 seconds
21.02.19 19:21:50<koo5[m]> Well, number 1 accomplished, but tracing is still too slow, so, onto steps 2 and 3
22.02.19 03:57:02<editable-dog> nope, fixed
24.02.19 07:09:55*** Join: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net, discardedes: unknown)
24.02.19 08:04:23<editable-dog>heya discardedes 
24.02.19 08:04:33<discardedes> hey editable-dog !!!
24.02.19 08:04:36<discardedes> :-D
24.02.19 08:04:39<discardedes> long time no see, eh?
24.02.19 08:04:43<editable-dog>yeah
24.02.19 08:04:49<editable-dog>how are you doing?
24.02.19 08:04:59<discardedes> .... computing ....
24.02.19 08:05:06<discardedes> optimistic
24.02.19 08:05:09<discardedes> you?
24.02.19 08:05:16<editable-dog>so-so
24.02.19 08:05:34<discardedes> you ever mess with qemu?
24.02.19 08:05:57<editable-dog>well i use it under virt-manager, but never directly
24.02.19 08:06:08<discardedes> huh.... ok
24.02.19 08:06:30<discardedes> i have a plan for working with code i am learning about
24.02.19 08:07:00<discardedes> run a VM and have two layers of OSs with basic security settings in place
24.02.19 08:07:06<discardedes> two linuxs
24.02.19 08:08:00<discardedes> something that is nice about qemu is that... i remember reading in the past, that its VERY efficient
24.02.19 08:08:06<discardedes> not sure if your familiar
24.02.19 08:08:24<discardedes> i think i remember reading you can get ALMOST native performance
24.02.19 08:09:12<editable-dog>well, i use a couple of vms for everything
24.02.19 08:09:14<discardedes> sorry to jump into the prickly bushes so quickly
24.02.19 08:09:16<discardedes> :-P
24.02.19 08:09:41<discardedes> how do you set it up editable-dog ?
24.02.19 08:09:42<editable-dog>kvm i think is what gets you basically native performance, yeah
24.02.19 08:09:50<editable-dog>virt-manager :p
24.02.19 08:10:21<discardedes> huh... i could get it
24.02.19 08:10:29<discardedes> without a problem
24.02.19 08:10:43<discardedes> ill install it and check out the docs
24.02.19 08:10:46<editable-dog>i'll be back in a minute
24.02.19 08:10:49<editable-dog>ok
24.02.19 08:10:51<discardedes> ok
24.02.19 08:11:09<editable-dog>dont read docs, you can just click around
24.02.19 08:12:16<discardedes> ok.... ill open it in i3
24.02.19 08:14:01<discardedes> "no active connection to connect on"
24.02.19 08:14:05<discardedes> wonder what thats about
24.02.19 08:14:47<discardedes> oh... i think i have to start a systemd daemon
24.02.19 08:59:47<discardedes> ..........
24.02.19 09:00:13<discardedes> apparently, to use kvm, my processor needs virtualization support
24.02.19 09:00:37<discardedes> i dont have this.... but now i know its something that i would want to have
24.02.19 09:12:34<editable-dog>yeah, no near-native performance without it
24.02.19 09:13:47<editable-dog>luckily, cpus have been getting them for quite a few years now, so even a second-hand computer will do
24.02.19 09:15:11<editable-dog>another stack to try instead of virt-manager is qubes
24.02.19 09:15:31<editable-dog>when you get that new computer, try qubes first maybe
24.02.19 09:17:17<discardedes> that new computer is not forthcomming in the near future
24.02.19 09:18:30<discardedes> well.... i shall see what kind of performance i get without it
24.02.19 09:18:44<discardedes> editable-dog: how bad do you think the performance hit might be?
24.02.19 09:18:50<discardedes> you ever experiment with this kind of thing?
24.02.19 09:20:54<editable-dog>dont even try
24.02.19 09:21:12<editable-dog>unless all you want to do is experiment with bootloaders or run old dos games
24.02.19 09:21:42<editable-dog>or do something else cpu-nonintensive, i'd guess
24.02.19 09:21:56<editable-dog>but i dont think youll be able to just browse the web or whatever
24.02.19 09:22:10<editable-dog>not sure though
24.02.19 09:25:13<discardedes> ok
24.02.19 09:25:35<discardedes> i can try it and see what happens
24.02.19 09:25:39<discardedes> i suspect you are correct
24.02.19 09:27:14<editable-dog>but you can play with docker or other container solution
24.02.19 09:27:39<editable-dog>docker isnt a security solution, but i think lxc actually is?
24.02.19 09:27:48<editable-dog>hmc would probably know
24.02.19 09:33:43<editable-dog>im a bit hazy on the details, probably docker uses lxc or whatever
24.02.19 09:47:15<discardedes> using vr manager, can i install any OS?
24.02.19 09:47:24<discardedes> or am i limited to the menu in the dropdown?
24.02.19 09:57:18<discardedes> tryying to activate the network now
24.02.19 09:57:49<discardedes> within virtual-manager setup
24.02.19 10:00:58<editable-dog>the dropdown is just for indication, you have to give it the iso yourself
24.02.19 10:01:24<editable-dog>network should just work
24.02.19 10:05:46<discardedes> it doesnt.... im following a tutorial
24.02.19 10:06:19<discardedes> yeah... it looks like it worked for ... the OS container selection box
24.02.19 10:06:40<discardedes> i was able to select an OS iso and .... now im working on the network
24.02.19 10:08:43<editable-dog>maybe just reboot if youve just installed everything
24.02.19 12:41:20<discardedes> editable-dog: how hard would it be to rout network traffic through a program? Any ideas?
24.02.19 12:46:50<editable-dog>well, if you just want to watch, just install wireshark
24.02.19 12:48:44<discardedes> i want it to behave based on the traffic
24.02.19 12:48:54<discardedes> bb in 5
24.02.19 12:48:56<discardedes> have to walk the dog
24.02.19 12:49:29<discardedes> but im imagining
                 <discardedes> traffic-in -> program -> traffic-out
24.02.19 12:49:40<discardedes> and program is basically a hook
24.02.19 12:49:53<discardedes> to create behavior based on the network traffic
24.02.19 12:57:20<editable-dog>maybe tcpdump
24.02.19 13:05:18<discardedes> im wondering about a server on a virtual machine
24.02.19 13:05:34<discardedes> no....
24.02.19 13:05:45<discardedes> hmmm....
24.02.19 13:13:35<discardedes> im going to skip this for now.... but thanks editable-dog
24.02.19 13:14:03<discardedes> just being able to use a bridge to daisychain the internet connection would be awesome
24.02.19 13:14:39<discardedes> trying to work with the traffic..... in the way i am imagining, i think i would need to use raw sockets
24.02.19 13:15:09<discardedes> ive looked into them in the past, and it was out of my reach
24.02.19 13:15:33<discardedes> more optimistic of a second pass this time round
24.02.19 13:15:40<discardedes> but not a priority
24.02.19 13:16:55<editable-dog>im not much into sysadmining and networking
24.02.19 13:17:22<editable-dog>but i think you already have a bridge when you create a vm with virt-manager
24.02.19 13:17:29<editable-dog>but reconfiguring things is gonna be fun
24.02.19 13:21:11<editable-dog>just not my kind of fun
24.02.19 13:22:45<discardedes> Well..... this is exactly the kind of thing that im interested in ATM
24.02.19 19:08:44*** Quit: discardedes (~user@75.97.112.182.res-cmts.brd4.ptd.net) left #AutoNomic: Read error: Connection reset by peer
25.02.19 02:04:43*** Quit: Deadhandd (~deadhand@kntaon1614w-grc-11-76-66-96-100.dsl.bell.ca) left #AutoNomic: Read error: Connection reset by peer
25.02.19 02:06:21*** Join: Deadhand (~deadhand@kntaon1614w-grc-11-76-66-96-100.dsl.bell.ca, (unauthenticated): deadhand)
25.02.19 03:19:50*** Join: mewmew[m] (homelessne@gateway/shell/matrix.org/x-basaxjoyxsvsnsbv, (unauthenticated): @homeless_neko:matrix.org)
25.02.19 03:20:16*** Part: mewmew[m] (homelessne@gateway/shell/matrix.org/x-basaxjoyxsvsnsbv) left #AutoNomic: "User left"
25.02.19 15:20:37*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ntpreuxyeevzmodj, stoopkid: stoopkid)
26.02.19 04:29:32*** Connecting...
26.02.19 04:30:02*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 1 year 1 month 5 days 11 hours 19 minutes 16 seconds ago
                 *** Names: ditable-doge stoopkid Deadhand HMCb @ChanServ Tamara_ cantora koo5[m] reedhhw[m]
                 *** End of /NAMES list.
26.02.19 04:30:41*** Nick change: You are now known as editable-dog
26.02.19 07:27:32*** Connecting...
#AutoNomic> 26.02.19 10:11:15*** Join: editable-dog (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
                 *** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 1 year 1 month 5 days 17 hours 28 seconds ago
                 *** Names: editable-dog stoopkid Deadhand reedhhw[m] koo5[m] cantora Tamara_ @ChanServ HMCb
                 *** End of /NAMES list.
28.02.19 22:49:57*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ntpreuxyeevzmodj) left #AutoNomic: Quit: Connection closed for inactivity
01.03.19 06:54:02*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-ztjtnuldzkjcraya, stoopkid: stoopkid)
01.03.19 17:44:45*** Join: Tamara__ (sid238709@gateway/web/irccloud.com/x-fgmcuxknujfstuzm, (unauthenticated): Tamara)
01.03.19 17:52:41*** Nick regain: Tamara__ (sid238709@gateway/web/irccloud.com/x-fgmcuxknujfstuzm) is now known as Tamara_
01.03.19 23:24:06*** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
01.03.19 23:28:51*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Client Quit
04.03.19 08:56:00*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-dfagxmuifvsqgvsc, (unauthenticated): kook)
04.03.19 15:07:25*** Quit: HMCb (~root@37.153.110.58) left #AutoNomic: Ping timeout: 246 seconds
04.03.19 15:09:12*** Join: HMCb (~root@37.153.110.58, (unauthenticated): root)
04.03.19 18:45:23*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-dfagxmuifvsqgvsc) left #AutoNomic: Quit: Connection closed for inactivity
05.03.19 04:52:17*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-nsjymtjiyblrvugq, (unauthenticated): kook)
05.03.19 07:21:58*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-nsjymtjiyblrvugq) left #AutoNomic: Quit: Connection closed for inactivity
05.03.19 13:02:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-ztjtnuldzkjcraya) left #AutoNomic: Quit: Connection closed for inactivity
05.03.19 13:52:27*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-rgztkksocykulbfz, stoopkid: stoopkid)
06.03.19 11:15:12*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-cekphtxhgojjrolk, (unauthenticated): kook)
06.03.19 15:24:43*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-cekphtxhgojjrolk) left #AutoNomic: Quit: Connection closed for inactivity
06.03.19 23:02:43*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-rgztkksocykulbfz) left #AutoNomic: Quit: Connection closed for inactivity
06.03.19 23:31:18*** Quit: HMCb (~root@37.153.110.58) left #AutoNomic: Ping timeout: 245 seconds
06.03.19 23:37:18*** Join: HMCb (~root@37.153.110.58, (unauthenticated): root)
07.03.19 07:55:40*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-fvtqismofbnskjna, stoopkid: stoopkid)
07.03.19 09:42:15*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-bpfihpoizkhfgjkm, (unauthenticated): kook)
07.03.19 14:01:44*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-bpfihpoizkhfgjkm) left #AutoNomic: Quit: Connection closed for inactivity
07.03.19 21:44:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-fvtqismofbnskjna) left #AutoNomic: Quit: Connection closed for inactivity
07.03.19 22:03:46*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-jvsxknztiowymlsh, stoopkid: stoopkid)
08.03.19 00:14:59*** Connecting...
08.03.19 00:15:34*** Join: ditable-doge (~editable-@104.168.57.22, editable-dog: editable-log)
                 *** Topic for #AutoNomic: AutoNomic project | Please ask anything | Wiki: 167.88.171.233/AutoNomic | Log: 167.88.171.233/logs/AutoNomic.log | Dev channel: #autonomic-dev | ncatlab.org/nlab/show/computational+trinitarianism | rbjones.com/rbjpub/logic/cl/tlc001.htm | www.cse.chalmers.se/research/group/logic/book/book.pdf
08.03.19 00:15:35*** Topic set by stoopkid on Fri Jan 26 17:10:47 2018, 1 year 1 month 15 days 7 hours 4 minutes 48 seconds ago
                 *** Names: ditable-doge stoopkid HMCb @ChanServ cantora koo5[m] reedhhw[m] Deadhand Tamara_
                 *** End of /NAMES list.
08.03.19 00:16:13*** Nick change: You are now known as editable-dog
08.03.19 02:36:13*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-rhtzvnwrjhhnndku, (unauthenticated): kook)
08.03.19 08:05:54*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-rhtzvnwrjhhnndku) left #AutoNomic: Quit: Connection closed for inactivity
08.03.19 20:20:10<HMCb> freenode having some issues again?
09.03.19 15:00:25*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-jvsxknztiowymlsh) left #AutoNomic: Ping timeout: 252 seconds
09.03.19 15:02:08*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-yzcbpsdtnovpnpfg, stoopkid: stoopkid)
09.03.19 18:49:02*** Join: nsg_akram[m] (nsgakramma@gateway/shell/matrix.org/x-xzxaaukzbhbgglar, (unauthenticated): @nsg_akram:matrix.org)
09.03.19 18:50:43*** Part: nsg_akram[m] (nsgakramma@gateway/shell/matrix.org/x-xzxaaukzbhbgglar) left #AutoNomic: "User left"
09.03.19 21:34:42*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-yzcbpsdtnovpnpfg) left #AutoNomic: Quit: Connection closed for inactivity
09.03.19 23:36:03*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-irrvamyhdddypsha, stoopkid: stoopkid)
10.03.19 01:08:54*** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
10.03.19 01:45:22*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-irrvamyhdddypsha) left #AutoNomic: Quit: Connection closed for inactivity
10.03.19 05:35:06*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Ping timeout: 252 seconds
10.03.19 05:47:38*** Join: sifar (~sifar@unaffiliated/sifar, sifar: sifar)
10.03.19 06:02:03*** Quit: sifar (~sifar@unaffiliated/sifar) left #AutoNomic: Quit: Bye
10.03.19 13:23:53*** Join: stoopkid (uid137696@gateway/web/irccloud.com/x-gfklnydqsbjkdgdi, stoopkid: stoopkid)
11.03.19 11:54:51*** Join: sirccloud (uid172590@gateway/web/irccloud.com/x-dkkanqoxsojmygps, (unauthenticated): kook)
11.03.19 16:24:33*** Quit: sirccloud (uid172590@gateway/web/irccloud.com/x-dkkanqoxsojmygps) left #AutoNomic: Quit: Connection closed for inactivity
12.03.19 02:06:21*** Quit: stoopkid (uid137696@gateway/web/irccloud.com/x-gfklnydqsbjkdgdi) left #AutoNomic: Quit: Connection closed for inactivity
#AutoNomic> 